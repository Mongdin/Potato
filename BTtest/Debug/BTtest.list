
BTtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e98  08010190  08010190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08018028  08018028  00018028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018270  08018270  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08018270  08018270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018278  08018278  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018278  08018278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801827c  0801827c  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08018280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000080  08018300  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  08018300  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026647  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043a0  00000000  00000000  000466f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0004aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  0004c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dcb3  00000000  00000000  0004d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba08  00000000  00000000  0007b443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a45b  00000000  00000000  00096e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a12a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006908  00000000  00000000  001a12fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010190 <__do_global_dtors_aux>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4c05      	ldr	r4, [pc, #20]	; (80101a8 <__do_global_dtors_aux+0x18>)
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	b933      	cbnz	r3, 80101a6 <__do_global_dtors_aux+0x16>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__do_global_dtors_aux+0x1c>)
 801019a:	b113      	cbz	r3, 80101a2 <__do_global_dtors_aux+0x12>
 801019c:	4804      	ldr	r0, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x20>)
 801019e:	f3af 8000 	nop.w
 80101a2:	2301      	movs	r3, #1
 80101a4:	7023      	strb	r3, [r4, #0]
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	20000080 	.word	0x20000080
 80101ac:	00000000 	.word	0x00000000
 80101b0:	08018010 	.word	0x08018010

080101b4 <frame_dummy>:
 80101b4:	b508      	push	{r3, lr}
 80101b6:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <frame_dummy+0x10>)
 80101b8:	b11b      	cbz	r3, 80101c2 <frame_dummy+0xe>
 80101ba:	4903      	ldr	r1, [pc, #12]	; (80101c8 <frame_dummy+0x14>)
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <frame_dummy+0x18>)
 80101be:	f3af 8000 	nop.w
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	00000000 	.word	0x00000000
 80101c8:	20000084 	.word	0x20000084
 80101cc:	08018010 	.word	0x08018010

080101d0 <strlen>:
 80101d0:	4603      	mov	r3, r0
 80101d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	d1fb      	bne.n	80101d2 <strlen+0x2>
 80101da:	1a18      	subs	r0, r3, r0
 80101dc:	3801      	subs	r0, #1
 80101de:	4770      	bx	lr

080101e0 <memchr>:
 80101e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80101e4:	2a10      	cmp	r2, #16
 80101e6:	db2b      	blt.n	8010240 <memchr+0x60>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	d008      	beq.n	8010200 <memchr+0x20>
 80101ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101f2:	3a01      	subs	r2, #1
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d02d      	beq.n	8010254 <memchr+0x74>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	b342      	cbz	r2, 8010250 <memchr+0x70>
 80101fe:	d1f6      	bne.n	80101ee <memchr+0xe>
 8010200:	b4f0      	push	{r4, r5, r6, r7}
 8010202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801020a:	f022 0407 	bic.w	r4, r2, #7
 801020e:	f07f 0700 	mvns.w	r7, #0
 8010212:	2300      	movs	r3, #0
 8010214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010218:	3c08      	subs	r4, #8
 801021a:	ea85 0501 	eor.w	r5, r5, r1
 801021e:	ea86 0601 	eor.w	r6, r6, r1
 8010222:	fa85 f547 	uadd8	r5, r5, r7
 8010226:	faa3 f587 	sel	r5, r3, r7
 801022a:	fa86 f647 	uadd8	r6, r6, r7
 801022e:	faa5 f687 	sel	r6, r5, r7
 8010232:	b98e      	cbnz	r6, 8010258 <memchr+0x78>
 8010234:	d1ee      	bne.n	8010214 <memchr+0x34>
 8010236:	bcf0      	pop	{r4, r5, r6, r7}
 8010238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801023c:	f002 0207 	and.w	r2, r2, #7
 8010240:	b132      	cbz	r2, 8010250 <memchr+0x70>
 8010242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010246:	3a01      	subs	r2, #1
 8010248:	ea83 0301 	eor.w	r3, r3, r1
 801024c:	b113      	cbz	r3, 8010254 <memchr+0x74>
 801024e:	d1f8      	bne.n	8010242 <memchr+0x62>
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	3801      	subs	r0, #1
 8010256:	4770      	bx	lr
 8010258:	2d00      	cmp	r5, #0
 801025a:	bf06      	itte	eq
 801025c:	4635      	moveq	r5, r6
 801025e:	3803      	subeq	r0, #3
 8010260:	3807      	subne	r0, #7
 8010262:	f015 0f01 	tst.w	r5, #1
 8010266:	d107      	bne.n	8010278 <memchr+0x98>
 8010268:	3001      	adds	r0, #1
 801026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801026e:	bf02      	ittt	eq
 8010270:	3001      	addeq	r0, #1
 8010272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010276:	3001      	addeq	r0, #1
 8010278:	bcf0      	pop	{r4, r5, r6, r7}
 801027a:	3801      	subs	r0, #1
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <__aeabi_uldivmod>:
 8010280:	b953      	cbnz	r3, 8010298 <__aeabi_uldivmod+0x18>
 8010282:	b94a      	cbnz	r2, 8010298 <__aeabi_uldivmod+0x18>
 8010284:	2900      	cmp	r1, #0
 8010286:	bf08      	it	eq
 8010288:	2800      	cmpeq	r0, #0
 801028a:	bf1c      	itt	ne
 801028c:	f04f 31ff 	movne.w	r1, #4294967295
 8010290:	f04f 30ff 	movne.w	r0, #4294967295
 8010294:	f000 b96e 	b.w	8010574 <__aeabi_idiv0>
 8010298:	f1ad 0c08 	sub.w	ip, sp, #8
 801029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80102a0:	f000 f806 	bl	80102b0 <__udivmoddi4>
 80102a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80102a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102ac:	b004      	add	sp, #16
 80102ae:	4770      	bx	lr

080102b0 <__udivmoddi4>:
 80102b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b4:	9d08      	ldr	r5, [sp, #32]
 80102b6:	4604      	mov	r4, r0
 80102b8:	468c      	mov	ip, r1
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	f040 8083 	bne.w	80103c6 <__udivmoddi4+0x116>
 80102c0:	428a      	cmp	r2, r1
 80102c2:	4617      	mov	r7, r2
 80102c4:	d947      	bls.n	8010356 <__udivmoddi4+0xa6>
 80102c6:	fab2 f282 	clz	r2, r2
 80102ca:	b142      	cbz	r2, 80102de <__udivmoddi4+0x2e>
 80102cc:	f1c2 0020 	rsb	r0, r2, #32
 80102d0:	fa24 f000 	lsr.w	r0, r4, r0
 80102d4:	4091      	lsls	r1, r2
 80102d6:	4097      	lsls	r7, r2
 80102d8:	ea40 0c01 	orr.w	ip, r0, r1
 80102dc:	4094      	lsls	r4, r2
 80102de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80102e2:	0c23      	lsrs	r3, r4, #16
 80102e4:	fbbc f6f8 	udiv	r6, ip, r8
 80102e8:	fa1f fe87 	uxth.w	lr, r7
 80102ec:	fb08 c116 	mls	r1, r8, r6, ip
 80102f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80102f4:	fb06 f10e 	mul.w	r1, r6, lr
 80102f8:	4299      	cmp	r1, r3
 80102fa:	d909      	bls.n	8010310 <__udivmoddi4+0x60>
 80102fc:	18fb      	adds	r3, r7, r3
 80102fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8010302:	f080 8119 	bcs.w	8010538 <__udivmoddi4+0x288>
 8010306:	4299      	cmp	r1, r3
 8010308:	f240 8116 	bls.w	8010538 <__udivmoddi4+0x288>
 801030c:	3e02      	subs	r6, #2
 801030e:	443b      	add	r3, r7
 8010310:	1a5b      	subs	r3, r3, r1
 8010312:	b2a4      	uxth	r4, r4
 8010314:	fbb3 f0f8 	udiv	r0, r3, r8
 8010318:	fb08 3310 	mls	r3, r8, r0, r3
 801031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010320:	fb00 fe0e 	mul.w	lr, r0, lr
 8010324:	45a6      	cmp	lr, r4
 8010326:	d909      	bls.n	801033c <__udivmoddi4+0x8c>
 8010328:	193c      	adds	r4, r7, r4
 801032a:	f100 33ff 	add.w	r3, r0, #4294967295
 801032e:	f080 8105 	bcs.w	801053c <__udivmoddi4+0x28c>
 8010332:	45a6      	cmp	lr, r4
 8010334:	f240 8102 	bls.w	801053c <__udivmoddi4+0x28c>
 8010338:	3802      	subs	r0, #2
 801033a:	443c      	add	r4, r7
 801033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010340:	eba4 040e 	sub.w	r4, r4, lr
 8010344:	2600      	movs	r6, #0
 8010346:	b11d      	cbz	r5, 8010350 <__udivmoddi4+0xa0>
 8010348:	40d4      	lsrs	r4, r2
 801034a:	2300      	movs	r3, #0
 801034c:	e9c5 4300 	strd	r4, r3, [r5]
 8010350:	4631      	mov	r1, r6
 8010352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010356:	b902      	cbnz	r2, 801035a <__udivmoddi4+0xaa>
 8010358:	deff      	udf	#255	; 0xff
 801035a:	fab2 f282 	clz	r2, r2
 801035e:	2a00      	cmp	r2, #0
 8010360:	d150      	bne.n	8010404 <__udivmoddi4+0x154>
 8010362:	1bcb      	subs	r3, r1, r7
 8010364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010368:	fa1f f887 	uxth.w	r8, r7
 801036c:	2601      	movs	r6, #1
 801036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8010372:	0c21      	lsrs	r1, r4, #16
 8010374:	fb0e 331c 	mls	r3, lr, ip, r3
 8010378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801037c:	fb08 f30c 	mul.w	r3, r8, ip
 8010380:	428b      	cmp	r3, r1
 8010382:	d907      	bls.n	8010394 <__udivmoddi4+0xe4>
 8010384:	1879      	adds	r1, r7, r1
 8010386:	f10c 30ff 	add.w	r0, ip, #4294967295
 801038a:	d202      	bcs.n	8010392 <__udivmoddi4+0xe2>
 801038c:	428b      	cmp	r3, r1
 801038e:	f200 80e9 	bhi.w	8010564 <__udivmoddi4+0x2b4>
 8010392:	4684      	mov	ip, r0
 8010394:	1ac9      	subs	r1, r1, r3
 8010396:	b2a3      	uxth	r3, r4
 8010398:	fbb1 f0fe 	udiv	r0, r1, lr
 801039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80103a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80103a4:	fb08 f800 	mul.w	r8, r8, r0
 80103a8:	45a0      	cmp	r8, r4
 80103aa:	d907      	bls.n	80103bc <__udivmoddi4+0x10c>
 80103ac:	193c      	adds	r4, r7, r4
 80103ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80103b2:	d202      	bcs.n	80103ba <__udivmoddi4+0x10a>
 80103b4:	45a0      	cmp	r8, r4
 80103b6:	f200 80d9 	bhi.w	801056c <__udivmoddi4+0x2bc>
 80103ba:	4618      	mov	r0, r3
 80103bc:	eba4 0408 	sub.w	r4, r4, r8
 80103c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80103c4:	e7bf      	b.n	8010346 <__udivmoddi4+0x96>
 80103c6:	428b      	cmp	r3, r1
 80103c8:	d909      	bls.n	80103de <__udivmoddi4+0x12e>
 80103ca:	2d00      	cmp	r5, #0
 80103cc:	f000 80b1 	beq.w	8010532 <__udivmoddi4+0x282>
 80103d0:	2600      	movs	r6, #0
 80103d2:	e9c5 0100 	strd	r0, r1, [r5]
 80103d6:	4630      	mov	r0, r6
 80103d8:	4631      	mov	r1, r6
 80103da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103de:	fab3 f683 	clz	r6, r3
 80103e2:	2e00      	cmp	r6, #0
 80103e4:	d14a      	bne.n	801047c <__udivmoddi4+0x1cc>
 80103e6:	428b      	cmp	r3, r1
 80103e8:	d302      	bcc.n	80103f0 <__udivmoddi4+0x140>
 80103ea:	4282      	cmp	r2, r0
 80103ec:	f200 80b8 	bhi.w	8010560 <__udivmoddi4+0x2b0>
 80103f0:	1a84      	subs	r4, r0, r2
 80103f2:	eb61 0103 	sbc.w	r1, r1, r3
 80103f6:	2001      	movs	r0, #1
 80103f8:	468c      	mov	ip, r1
 80103fa:	2d00      	cmp	r5, #0
 80103fc:	d0a8      	beq.n	8010350 <__udivmoddi4+0xa0>
 80103fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8010402:	e7a5      	b.n	8010350 <__udivmoddi4+0xa0>
 8010404:	f1c2 0320 	rsb	r3, r2, #32
 8010408:	fa20 f603 	lsr.w	r6, r0, r3
 801040c:	4097      	lsls	r7, r2
 801040e:	fa01 f002 	lsl.w	r0, r1, r2
 8010412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010416:	40d9      	lsrs	r1, r3
 8010418:	4330      	orrs	r0, r6
 801041a:	0c03      	lsrs	r3, r0, #16
 801041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8010420:	fa1f f887 	uxth.w	r8, r7
 8010424:	fb0e 1116 	mls	r1, lr, r6, r1
 8010428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801042c:	fb06 f108 	mul.w	r1, r6, r8
 8010430:	4299      	cmp	r1, r3
 8010432:	fa04 f402 	lsl.w	r4, r4, r2
 8010436:	d909      	bls.n	801044c <__udivmoddi4+0x19c>
 8010438:	18fb      	adds	r3, r7, r3
 801043a:	f106 3cff 	add.w	ip, r6, #4294967295
 801043e:	f080 808d 	bcs.w	801055c <__udivmoddi4+0x2ac>
 8010442:	4299      	cmp	r1, r3
 8010444:	f240 808a 	bls.w	801055c <__udivmoddi4+0x2ac>
 8010448:	3e02      	subs	r6, #2
 801044a:	443b      	add	r3, r7
 801044c:	1a5b      	subs	r3, r3, r1
 801044e:	b281      	uxth	r1, r0
 8010450:	fbb3 f0fe 	udiv	r0, r3, lr
 8010454:	fb0e 3310 	mls	r3, lr, r0, r3
 8010458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801045c:	fb00 f308 	mul.w	r3, r0, r8
 8010460:	428b      	cmp	r3, r1
 8010462:	d907      	bls.n	8010474 <__udivmoddi4+0x1c4>
 8010464:	1879      	adds	r1, r7, r1
 8010466:	f100 3cff 	add.w	ip, r0, #4294967295
 801046a:	d273      	bcs.n	8010554 <__udivmoddi4+0x2a4>
 801046c:	428b      	cmp	r3, r1
 801046e:	d971      	bls.n	8010554 <__udivmoddi4+0x2a4>
 8010470:	3802      	subs	r0, #2
 8010472:	4439      	add	r1, r7
 8010474:	1acb      	subs	r3, r1, r3
 8010476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 801047a:	e778      	b.n	801036e <__udivmoddi4+0xbe>
 801047c:	f1c6 0c20 	rsb	ip, r6, #32
 8010480:	fa03 f406 	lsl.w	r4, r3, r6
 8010484:	fa22 f30c 	lsr.w	r3, r2, ip
 8010488:	431c      	orrs	r4, r3
 801048a:	fa20 f70c 	lsr.w	r7, r0, ip
 801048e:	fa01 f306 	lsl.w	r3, r1, r6
 8010492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8010496:	fa21 f10c 	lsr.w	r1, r1, ip
 801049a:	431f      	orrs	r7, r3
 801049c:	0c3b      	lsrs	r3, r7, #16
 801049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80104a2:	fa1f f884 	uxth.w	r8, r4
 80104a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80104aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80104ae:	fb09 fa08 	mul.w	sl, r9, r8
 80104b2:	458a      	cmp	sl, r1
 80104b4:	fa02 f206 	lsl.w	r2, r2, r6
 80104b8:	fa00 f306 	lsl.w	r3, r0, r6
 80104bc:	d908      	bls.n	80104d0 <__udivmoddi4+0x220>
 80104be:	1861      	adds	r1, r4, r1
 80104c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80104c4:	d248      	bcs.n	8010558 <__udivmoddi4+0x2a8>
 80104c6:	458a      	cmp	sl, r1
 80104c8:	d946      	bls.n	8010558 <__udivmoddi4+0x2a8>
 80104ca:	f1a9 0902 	sub.w	r9, r9, #2
 80104ce:	4421      	add	r1, r4
 80104d0:	eba1 010a 	sub.w	r1, r1, sl
 80104d4:	b2bf      	uxth	r7, r7
 80104d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80104da:	fb0e 1110 	mls	r1, lr, r0, r1
 80104de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80104e2:	fb00 f808 	mul.w	r8, r0, r8
 80104e6:	45b8      	cmp	r8, r7
 80104e8:	d907      	bls.n	80104fa <__udivmoddi4+0x24a>
 80104ea:	19e7      	adds	r7, r4, r7
 80104ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80104f0:	d22e      	bcs.n	8010550 <__udivmoddi4+0x2a0>
 80104f2:	45b8      	cmp	r8, r7
 80104f4:	d92c      	bls.n	8010550 <__udivmoddi4+0x2a0>
 80104f6:	3802      	subs	r0, #2
 80104f8:	4427      	add	r7, r4
 80104fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80104fe:	eba7 0708 	sub.w	r7, r7, r8
 8010502:	fba0 8902 	umull	r8, r9, r0, r2
 8010506:	454f      	cmp	r7, r9
 8010508:	46c6      	mov	lr, r8
 801050a:	4649      	mov	r1, r9
 801050c:	d31a      	bcc.n	8010544 <__udivmoddi4+0x294>
 801050e:	d017      	beq.n	8010540 <__udivmoddi4+0x290>
 8010510:	b15d      	cbz	r5, 801052a <__udivmoddi4+0x27a>
 8010512:	ebb3 020e 	subs.w	r2, r3, lr
 8010516:	eb67 0701 	sbc.w	r7, r7, r1
 801051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 801051e:	40f2      	lsrs	r2, r6
 8010520:	ea4c 0202 	orr.w	r2, ip, r2
 8010524:	40f7      	lsrs	r7, r6
 8010526:	e9c5 2700 	strd	r2, r7, [r5]
 801052a:	2600      	movs	r6, #0
 801052c:	4631      	mov	r1, r6
 801052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010532:	462e      	mov	r6, r5
 8010534:	4628      	mov	r0, r5
 8010536:	e70b      	b.n	8010350 <__udivmoddi4+0xa0>
 8010538:	4606      	mov	r6, r0
 801053a:	e6e9      	b.n	8010310 <__udivmoddi4+0x60>
 801053c:	4618      	mov	r0, r3
 801053e:	e6fd      	b.n	801033c <__udivmoddi4+0x8c>
 8010540:	4543      	cmp	r3, r8
 8010542:	d2e5      	bcs.n	8010510 <__udivmoddi4+0x260>
 8010544:	ebb8 0e02 	subs.w	lr, r8, r2
 8010548:	eb69 0104 	sbc.w	r1, r9, r4
 801054c:	3801      	subs	r0, #1
 801054e:	e7df      	b.n	8010510 <__udivmoddi4+0x260>
 8010550:	4608      	mov	r0, r1
 8010552:	e7d2      	b.n	80104fa <__udivmoddi4+0x24a>
 8010554:	4660      	mov	r0, ip
 8010556:	e78d      	b.n	8010474 <__udivmoddi4+0x1c4>
 8010558:	4681      	mov	r9, r0
 801055a:	e7b9      	b.n	80104d0 <__udivmoddi4+0x220>
 801055c:	4666      	mov	r6, ip
 801055e:	e775      	b.n	801044c <__udivmoddi4+0x19c>
 8010560:	4630      	mov	r0, r6
 8010562:	e74a      	b.n	80103fa <__udivmoddi4+0x14a>
 8010564:	f1ac 0c02 	sub.w	ip, ip, #2
 8010568:	4439      	add	r1, r7
 801056a:	e713      	b.n	8010394 <__udivmoddi4+0xe4>
 801056c:	3802      	subs	r0, #2
 801056e:	443c      	add	r4, r7
 8010570:	e724      	b.n	80103bc <__udivmoddi4+0x10c>
 8010572:	bf00      	nop

08010574 <__aeabi_idiv0>:
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop

08010578 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8010578:	b5b0      	push	{r4, r5, r7, lr}
 801057a:	b092      	sub	sp, #72	; 0x48
 801057c:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN SV */

	const char *name = "test";
 801057e:	4b7a      	ldr	r3, [pc, #488]	; (8010768 <MX_BlueNRG_MS_Init+0x1f0>)
 8010580:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t POTATO_UUID[] = {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xAA,0xBB,0xCC,0xDD,0xEE,0xFF,0x00};
 8010582:	4b7a      	ldr	r3, [pc, #488]	; (801076c <MX_BlueNRG_MS_Init+0x1f4>)
 8010584:	f107 041c 	add.w	r4, r7, #28
 8010588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801058a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t SERVER_BDADDR[] = {0x01,0x02,0x03,0x04,0x05,0x06};
 801058e:	4a78      	ldr	r2, [pc, #480]	; (8010770 <MX_BlueNRG_MS_Init+0x1f8>)
 8010590:	f107 0314 	add.w	r3, r7, #20
 8010594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010598:	6018      	str	r0, [r3, #0]
 801059a:	3304      	adds	r3, #4
 801059c:	8019      	strh	r1, [r3, #0]
	uint8_t bdaddr[BDADDR_SIZE];

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

	hci_init(user_notify,NULL);
 801059e:	2100      	movs	r1, #0
 80105a0:	4874      	ldr	r0, [pc, #464]	; (8010774 <MX_BlueNRG_MS_Init+0x1fc>)
 80105a2:	f006 f9ab 	bl	80168fc <hci_init>
	hci_reset();
 80105a6:	f006 f8ed 	bl	8016784 <hci_reset>
	HAL_Delay(200);
 80105aa:	20c8      	movs	r0, #200	; 0xc8
 80105ac:	f001 fb7c 	bl	8011ca8 <HAL_Delay>

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80105b0:	f107 030c 	add.w	r3, r7, #12
 80105b4:	f107 0214 	add.w	r2, r7, #20
 80105b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105bc:	6018      	str	r0, [r3, #0]
 80105be:	3304      	adds	r3, #4
 80105c0:	8019      	strh	r1, [r3, #0]

	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 80105c2:	f107 030c 	add.w	r3, r7, #12
 80105c6:	461a      	mov	r2, r3
 80105c8:	2106      	movs	r1, #6
 80105ca:	2000      	movs	r0, #0
 80105cc:	f006 f873 	bl	80166b6 <aci_hal_write_config_data>

	aci_gatt_init();
 80105d0:	f005 fe5e 	bl	8016290 <aci_gatt_init>

	aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80105d4:	f107 020a 	add.w	r2, r7, #10
 80105d8:	1dbb      	adds	r3, r7, #6
 80105da:	9301      	str	r3, [sp, #4]
 80105dc:	f107 0308 	add.w	r3, r7, #8
 80105e0:	9300      	str	r3, [sp, #0]
 80105e2:	4613      	mov	r3, r2
 80105e4:	2207      	movs	r2, #7
 80105e6:	2100      	movs	r1, #0
 80105e8:	2001      	movs	r0, #1
 80105ea:	f005 fd12 	bl	8016012 <aci_gap_init_IDB05A1>

	aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), name);
 80105ee:	897c      	ldrh	r4, [r7, #10]
 80105f0:	893d      	ldrh	r5, [r7, #8]
 80105f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105f4:	f7ff fdec 	bl	80101d0 <strlen>
 80105f8:	4603      	mov	r3, r0
 80105fa:	b2da      	uxtb	r2, r3
 80105fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	4613      	mov	r3, r2
 8010602:	2200      	movs	r2, #0
 8010604:	4629      	mov	r1, r5
 8010606:	4620      	mov	r0, r4
 8010608:	f005 ffc3 	bl	8016592 <aci_gatt_update_char_value>

	aci_gatt_add_serv(UUID_TYPE_128, POTATO_UUID, PRIMARY_SERVICE, 30, &(POTATO_Context.POTATO_Svc_Hdle));
 801060c:	f107 011c 	add.w	r1, r7, #28
 8010610:	4b59      	ldr	r3, [pc, #356]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 8010612:	9300      	str	r3, [sp, #0]
 8010614:	231e      	movs	r3, #30
 8010616:	2201      	movs	r2, #1
 8010618:	2002      	movs	r0, #2
 801061a:	f005 fe5c 	bl	80162d6 <aci_gatt_add_serv>

	POTATO_UUID[15] = 0x01;
 801061e:	2301      	movs	r3, #1
 8010620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 31,
 8010624:	4b54      	ldr	r3, [pc, #336]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 8010626:	8818      	ldrh	r0, [r3, #0]
 8010628:	f107 021c 	add.w	r2, r7, #28
 801062c:	4b53      	ldr	r3, [pc, #332]	; (801077c <MX_BlueNRG_MS_Init+0x204>)
 801062e:	9305      	str	r3, [sp, #20]
 8010630:	2301      	movs	r3, #1
 8010632:	9304      	str	r3, [sp, #16]
 8010634:	230a      	movs	r3, #10
 8010636:	9303      	str	r3, [sp, #12]
 8010638:	2301      	movs	r3, #1
 801063a:	9302      	str	r3, [sp, #8]
 801063c:	2300      	movs	r3, #0
 801063e:	9301      	str	r3, [sp, #4]
 8010640:	2306      	movs	r3, #6
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	231f      	movs	r3, #31
 8010646:	2102      	movs	r1, #2
 8010648:	f005 fed1 	bl	80163ee <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_SSID_Hdle));

	POTATO_UUID[15] = 0x02;
 801064c:	2302      	movs	r3, #2
 801064e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 31,
 8010652:	4b49      	ldr	r3, [pc, #292]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 8010654:	8818      	ldrh	r0, [r3, #0]
 8010656:	f107 021c 	add.w	r2, r7, #28
 801065a:	4b49      	ldr	r3, [pc, #292]	; (8010780 <MX_BlueNRG_MS_Init+0x208>)
 801065c:	9305      	str	r3, [sp, #20]
 801065e:	2301      	movs	r3, #1
 8010660:	9304      	str	r3, [sp, #16]
 8010662:	230a      	movs	r3, #10
 8010664:	9303      	str	r3, [sp, #12]
 8010666:	2301      	movs	r3, #1
 8010668:	9302      	str	r3, [sp, #8]
 801066a:	2300      	movs	r3, #0
 801066c:	9301      	str	r3, [sp, #4]
 801066e:	2306      	movs	r3, #6
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	231f      	movs	r3, #31
 8010674:	2102      	movs	r1, #2
 8010676:	f005 feba 	bl	80163ee <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_PW_Hdle));

	POTATO_UUID[15] = 0x03;
 801067a:	2303      	movs	r3, #3
 801067c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 31,
 8010680:	4b3d      	ldr	r3, [pc, #244]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 8010682:	8818      	ldrh	r0, [r3, #0]
 8010684:	f107 021c 	add.w	r2, r7, #28
 8010688:	4b3e      	ldr	r3, [pc, #248]	; (8010784 <MX_BlueNRG_MS_Init+0x20c>)
 801068a:	9305      	str	r3, [sp, #20]
 801068c:	2301      	movs	r3, #1
 801068e:	9304      	str	r3, [sp, #16]
 8010690:	230a      	movs	r3, #10
 8010692:	9303      	str	r3, [sp, #12]
 8010694:	2301      	movs	r3, #1
 8010696:	9302      	str	r3, [sp, #8]
 8010698:	2300      	movs	r3, #0
 801069a:	9301      	str	r3, [sp, #4]
 801069c:	2306      	movs	r3, #6
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	231f      	movs	r3, #31
 80106a2:	2102      	movs	r1, #2
 80106a4:	f005 fea3 	bl	80163ee <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_NAME_Hdle));

	POTATO_UUID[15] = 0x04;
 80106a8:	2304      	movs	r3, #4
 80106aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 4,
 80106ae:	4b32      	ldr	r3, [pc, #200]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 80106b0:	8818      	ldrh	r0, [r3, #0]
 80106b2:	f107 021c 	add.w	r2, r7, #28
 80106b6:	4b34      	ldr	r3, [pc, #208]	; (8010788 <MX_BlueNRG_MS_Init+0x210>)
 80106b8:	9305      	str	r3, [sp, #20]
 80106ba:	2301      	movs	r3, #1
 80106bc:	9304      	str	r3, [sp, #16]
 80106be:	230a      	movs	r3, #10
 80106c0:	9303      	str	r3, [sp, #12]
 80106c2:	2301      	movs	r3, #1
 80106c4:	9302      	str	r3, [sp, #8]
 80106c6:	2300      	movs	r3, #0
 80106c8:	9301      	str	r3, [sp, #4]
 80106ca:	2306      	movs	r3, #6
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	2304      	movs	r3, #4
 80106d0:	2102      	movs	r1, #2
 80106d2:	f005 fe8c 	bl	80163ee <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_IP_Hdle));

	POTATO_UUID[15] = 0x05;
 80106d6:	2305      	movs	r3, #5
 80106d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 1,
 80106dc:	4b26      	ldr	r3, [pc, #152]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 80106de:	8818      	ldrh	r0, [r3, #0]
 80106e0:	f107 021c 	add.w	r2, r7, #28
 80106e4:	4b29      	ldr	r3, [pc, #164]	; (801078c <MX_BlueNRG_MS_Init+0x214>)
 80106e6:	9305      	str	r3, [sp, #20]
 80106e8:	2301      	movs	r3, #1
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	230a      	movs	r3, #10
 80106ee:	9303      	str	r3, [sp, #12]
 80106f0:	2301      	movs	r3, #1
 80106f2:	9302      	str	r3, [sp, #8]
 80106f4:	2300      	movs	r3, #0
 80106f6:	9301      	str	r3, [sp, #4]
 80106f8:	2306      	movs	r3, #6
 80106fa:	9300      	str	r3, [sp, #0]
 80106fc:	2301      	movs	r3, #1
 80106fe:	2102      	movs	r1, #2
 8010700:	f005 fe75 	bl	80163ee <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_OP_Hdle));

	POTATO_UUID[15] = 0x06;
 8010704:	2306      	movs	r3, #6
 8010706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 2,
 801070a:	4b1b      	ldr	r3, [pc, #108]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 801070c:	8818      	ldrh	r0, [r3, #0]
 801070e:	f107 021c 	add.w	r2, r7, #28
 8010712:	4b1f      	ldr	r3, [pc, #124]	; (8010790 <MX_BlueNRG_MS_Init+0x218>)
 8010714:	9305      	str	r3, [sp, #20]
 8010716:	2301      	movs	r3, #1
 8010718:	9304      	str	r3, [sp, #16]
 801071a:	230a      	movs	r3, #10
 801071c:	9303      	str	r3, [sp, #12]
 801071e:	2301      	movs	r3, #1
 8010720:	9302      	str	r3, [sp, #8]
 8010722:	2300      	movs	r3, #0
 8010724:	9301      	str	r3, [sp, #4]
 8010726:	2306      	movs	r3, #6
 8010728:	9300      	str	r3, [sp, #0]
 801072a:	2302      	movs	r3, #2
 801072c:	2102      	movs	r1, #2
 801072e:	f005 fe5e 	bl	80163ee <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_Save_Hdle));

	POTATO_UUID[15] = 0x07;
 8010732:	2307      	movs	r3, #7
 8010734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 5,
 8010738:	4b0f      	ldr	r3, [pc, #60]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 801073a:	8818      	ldrh	r0, [r3, #0]
 801073c:	f107 021c 	add.w	r2, r7, #28
 8010740:	4b14      	ldr	r3, [pc, #80]	; (8010794 <MX_BlueNRG_MS_Init+0x21c>)
 8010742:	9305      	str	r3, [sp, #20]
 8010744:	2301      	movs	r3, #1
 8010746:	9304      	str	r3, [sp, #16]
 8010748:	230a      	movs	r3, #10
 801074a:	9303      	str	r3, [sp, #12]
 801074c:	2304      	movs	r3, #4
 801074e:	9302      	str	r3, [sp, #8]
 8010750:	2300      	movs	r3, #0
 8010752:	9301      	str	r3, [sp, #4]
 8010754:	2306      	movs	r3, #6
 8010756:	9300      	str	r3, [sp, #0]
 8010758:	2305      	movs	r3, #5
 801075a:	2102      	movs	r1, #2
 801075c:	f005 fe47 	bl	80163ee <aci_gatt_add_char>


  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8010760:	bf00      	nop
 8010762:	3730      	adds	r7, #48	; 0x30
 8010764:	46bd      	mov	sp, r7
 8010766:	bdb0      	pop	{r4, r5, r7, pc}
 8010768:	08018028 	.word	0x08018028
 801076c:	08018030 	.word	0x08018030
 8010770:	08018040 	.word	0x08018040
 8010774:	08010975 	.word	0x08010975
 8010778:	20000494 	.word	0x20000494
 801077c:	20000496 	.word	0x20000496
 8010780:	20000498 	.word	0x20000498
 8010784:	2000049a 	.word	0x2000049a
 8010788:	2000049c 	.word	0x2000049c
 801078c:	2000049e 	.word	0x2000049e
 8010790:	200004a0 	.word	0x200004a0
 8010794:	200004a2 	.word	0x200004a2

08010798 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b08a      	sub	sp, #40	; 0x28
 801079c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

	tBleStatus ret;

	ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 801079e:	2300      	movs	r3, #0
 80107a0:	9306      	str	r3, [sp, #24]
 80107a2:	2300      	movs	r3, #0
 80107a4:	9305      	str	r3, [sp, #20]
 80107a6:	2300      	movs	r3, #0
 80107a8:	9304      	str	r3, [sp, #16]
 80107aa:	2300      	movs	r3, #0
 80107ac:	9303      	str	r3, [sp, #12]
 80107ae:	4b0a      	ldr	r3, [pc, #40]	; (80107d8 <MX_BlueNRG_MS_Process+0x40>)
 80107b0:	9302      	str	r3, [sp, #8]
 80107b2:	2308      	movs	r3, #8
 80107b4:	9301      	str	r3, [sp, #4]
 80107b6:	2300      	movs	r3, #0
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	2300      	movs	r3, #0
 80107bc:	2200      	movs	r2, #0
 80107be:	2100      	movs	r1, #0
 80107c0:	2000      	movs	r0, #0
 80107c2:	f005 fc76 	bl	80160b2 <aci_gap_set_discoverable>
 80107c6:	4603      	mov	r3, r0
 80107c8:	71fb      	strb	r3, [r7, #7]


	hci_user_evt_proc();
 80107ca:	f006 fa13 	bl	8016bf4 <hci_user_evt_proc>
  //hci_user_evt_proc();

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80107ce:	bf00      	nop
 80107d0:	3708      	adds	r7, #8
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	08018188 	.word	0x08018188

080107dc <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	460b      	mov	r3, r1
 80107e6:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 80107e8:	2000      	movs	r0, #0
 80107ea:	f001 f8d9 	bl	80119a0 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 80107ee:	2300      	movs	r3, #0
 80107f0:	60fb      	str	r3, [r7, #12]
 80107f2:	e009      	b.n	8010808 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	4413      	add	r3, r2
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f006 fe59 	bl	80174b4 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	3301      	adds	r3, #1
 8010806:	60fb      	str	r3, [r7, #12]
 8010808:	78fb      	ldrb	r3, [r7, #3]
 801080a:	68fa      	ldr	r2, [r7, #12]
 801080c:	429a      	cmp	r2, r3
 801080e:	dbf1      	blt.n	80107f4 <receiveData+0x18>
  }
  fflush(stdout);
 8010810:	4b04      	ldr	r3, [pc, #16]	; (8010824 <receiveData+0x48>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	689b      	ldr	r3, [r3, #8]
 8010816:	4618      	mov	r0, r3
 8010818:	f006 fc44 	bl	80170a4 <fflush>
}
 801081c:	bf00      	nop
 801081e:	3710      	adds	r7, #16
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	2000001c 	.word	0x2000001c

08010828 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	4603      	mov	r3, r0
 8010830:	603a      	str	r2, [r7, #0]
 8010832:	80fb      	strh	r3, [r7, #6]
 8010834:	460b      	mov	r3, r1
 8010836:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8010838:	88fa      	ldrh	r2, [r7, #6]
 801083a:	4b0e      	ldr	r3, [pc, #56]	; (8010874 <Attribute_Modified_CB+0x4c>)
 801083c:	881b      	ldrh	r3, [r3, #0]
 801083e:	3301      	adds	r3, #1
 8010840:	429a      	cmp	r2, r3
 8010842:	d105      	bne.n	8010850 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8010844:	797b      	ldrb	r3, [r7, #5]
 8010846:	4619      	mov	r1, r3
 8010848:	6838      	ldr	r0, [r7, #0]
 801084a:	f7ff ffc7 	bl	80107dc <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 801084e:	e00c      	b.n	801086a <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8010850:	88fa      	ldrh	r2, [r7, #6]
 8010852:	4b09      	ldr	r3, [pc, #36]	; (8010878 <Attribute_Modified_CB+0x50>)
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	3302      	adds	r3, #2
 8010858:	429a      	cmp	r2, r3
 801085a:	d106      	bne.n	801086a <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	2b01      	cmp	r3, #1
 8010862:	d102      	bne.n	801086a <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8010864:	4b05      	ldr	r3, [pc, #20]	; (801087c <Attribute_Modified_CB+0x54>)
 8010866:	2201      	movs	r2, #1
 8010868:	701a      	strb	r2, [r3, #0]
}
 801086a:	bf00      	nop
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	200004ac 	.word	0x200004ac
 8010878:	200004a8 	.word	0x200004a8
 801087c:	200000a2 	.word	0x200000a2

08010880 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	460b      	mov	r3, r1
 801088a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 801088c:	4b11      	ldr	r3, [pc, #68]	; (80108d4 <GAP_ConnectionComplete_CB+0x54>)
 801088e:	2201      	movs	r2, #1
 8010890:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8010892:	4a11      	ldr	r2, [pc, #68]	; (80108d8 <GAP_ConnectionComplete_CB+0x58>)
 8010894:	887b      	ldrh	r3, [r7, #2]
 8010896:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8010898:	4810      	ldr	r0, [pc, #64]	; (80108dc <GAP_ConnectionComplete_CB+0x5c>)
 801089a:	f006 fdf3 	bl	8017484 <iprintf>
  for(int i = 5; i > 0; i--){
 801089e:	2305      	movs	r3, #5
 80108a0:	60fb      	str	r3, [r7, #12]
 80108a2:	e00a      	b.n	80108ba <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	4413      	add	r3, r2
 80108aa:	781b      	ldrb	r3, [r3, #0]
 80108ac:	4619      	mov	r1, r3
 80108ae:	480c      	ldr	r0, [pc, #48]	; (80108e0 <GAP_ConnectionComplete_CB+0x60>)
 80108b0:	f006 fde8 	bl	8017484 <iprintf>
  for(int i = 5; i > 0; i--){
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	3b01      	subs	r3, #1
 80108b8:	60fb      	str	r3, [r7, #12]
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dcf1      	bgt.n	80108a4 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	4619      	mov	r1, r3
 80108c6:	4807      	ldr	r0, [pc, #28]	; (80108e4 <GAP_ConnectionComplete_CB+0x64>)
 80108c8:	f006 fddc 	bl	8017484 <iprintf>
}
 80108cc:	bf00      	nop
 80108ce:	3710      	adds	r7, #16
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	2000009c 	.word	0x2000009c
 80108d8:	200000a0 	.word	0x200000a0
 80108dc:	08018104 	.word	0x08018104
 80108e0:	0801811c 	.word	0x0801811c
 80108e4:	08018124 	.word	0x08018124

080108e8 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	af00      	add	r7, sp, #0
  connected = FALSE;
 80108ec:	4b0c      	ldr	r3, [pc, #48]	; (8010920 <GAP_DisconnectionComplete_CB+0x38>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 80108f2:	480c      	ldr	r0, [pc, #48]	; (8010924 <GAP_DisconnectionComplete_CB+0x3c>)
 80108f4:	f006 fe62 	bl	80175bc <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80108f8:	4b0b      	ldr	r3, [pc, #44]	; (8010928 <GAP_DisconnectionComplete_CB+0x40>)
 80108fa:	2201      	movs	r2, #1
 80108fc:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80108fe:	4b0b      	ldr	r3, [pc, #44]	; (801092c <GAP_DisconnectionComplete_CB+0x44>)
 8010900:	2200      	movs	r2, #0
 8010902:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8010904:	4b0a      	ldr	r3, [pc, #40]	; (8010930 <GAP_DisconnectionComplete_CB+0x48>)
 8010906:	2200      	movs	r2, #0
 8010908:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 801090a:	4b0a      	ldr	r3, [pc, #40]	; (8010934 <GAP_DisconnectionComplete_CB+0x4c>)
 801090c:	2200      	movs	r2, #0
 801090e:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8010910:	4b09      	ldr	r3, [pc, #36]	; (8010938 <GAP_DisconnectionComplete_CB+0x50>)
 8010912:	2200      	movs	r2, #0
 8010914:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8010916:	4b09      	ldr	r3, [pc, #36]	; (801093c <GAP_DisconnectionComplete_CB+0x54>)
 8010918:	2200      	movs	r2, #0
 801091a:	701a      	strb	r2, [r3, #0]
}
 801091c:	bf00      	nop
 801091e:	bd80      	pop	{r7, pc}
 8010920:	2000009c 	.word	0x2000009c
 8010924:	0801812c 	.word	0x0801812c
 8010928:	20000002 	.word	0x20000002
 801092c:	200000a2 	.word	0x200000a2
 8010930:	200000a3 	.word	0x200000a3
 8010934:	200000a4 	.word	0x200000a4
 8010938:	200000a5 	.word	0x200000a5
 801093c:	200000a6 	.word	0x200000a6

08010940 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	4603      	mov	r3, r0
 8010948:	603a      	str	r2, [r7, #0]
 801094a:	80fb      	strh	r3, [r7, #6]
 801094c:	460b      	mov	r3, r1
 801094e:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8010950:	88fa      	ldrh	r2, [r7, #6]
 8010952:	4b07      	ldr	r3, [pc, #28]	; (8010970 <GATT_Notification_CB+0x30>)
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	3301      	adds	r3, #1
 8010958:	429a      	cmp	r2, r3
 801095a:	d104      	bne.n	8010966 <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 801095c:	797b      	ldrb	r3, [r7, #5]
 801095e:	4619      	mov	r1, r3
 8010960:	6838      	ldr	r0, [r7, #0]
 8010962:	f7ff ff3b 	bl	80107dc <receiveData>
  }
}
 8010966:	bf00      	nop
 8010968:	3708      	adds	r7, #8
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	200004a4 	.word	0x200004a4

08010974 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b08c      	sub	sp, #48	; 0x30
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8010980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010982:	3301      	adds	r3, #1
 8010984:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8010986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	2b04      	cmp	r3, #4
 801098c:	f040 80e2 	bne.w	8010b54 <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8010990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	2bff      	cmp	r3, #255	; 0xff
 8010996:	d021      	beq.n	80109dc <user_notify+0x68>
 8010998:	2bff      	cmp	r3, #255	; 0xff
 801099a:	f300 80e0 	bgt.w	8010b5e <user_notify+0x1ea>
 801099e:	2b05      	cmp	r3, #5
 80109a0:	d002      	beq.n	80109a8 <user_notify+0x34>
 80109a2:	2b3e      	cmp	r3, #62	; 0x3e
 80109a4:	d003      	beq.n	80109ae <user_notify+0x3a>
 80109a6:	e0da      	b.n	8010b5e <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80109a8:	f7ff ff9e 	bl	80108e8 <GAP_DisconnectionComplete_CB>
    }
    break;
 80109ac:	e0d7      	b.n	8010b5e <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80109ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b0:	3302      	adds	r3, #2
 80109b2:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	f040 80cd 	bne.w	8010b58 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	3301      	adds	r3, #1
 80109c2:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	1d5a      	adds	r2, r3, #5
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	4619      	mov	r1, r3
 80109d2:	4610      	mov	r0, r2
 80109d4:	f7ff ff54 	bl	8010880 <GAP_ConnectionComplete_CB>
        }
        break;
 80109d8:	bf00      	nop
      }
    }
    break;
 80109da:	e0bd      	b.n	8010b58 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80109dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109de:	3302      	adds	r3, #2
 80109e0:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 80109e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e4:	881b      	ldrh	r3, [r3, #0]
 80109e6:	b29b      	uxth	r3, r3
 80109e8:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 80109ec:	2b11      	cmp	r3, #17
 80109ee:	f200 80b5 	bhi.w	8010b5c <user_notify+0x1e8>
 80109f2:	a201      	add	r2, pc, #4	; (adr r2, 80109f8 <user_notify+0x84>)
 80109f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f8:	08010a41 	.word	0x08010a41
 80109fc:	08010b5d 	.word	0x08010b5d
 8010a00:	08010b5d 	.word	0x08010b5d
 8010a04:	08010b5d 	.word	0x08010b5d
 8010a08:	08010b5d 	.word	0x08010b5d
 8010a0c:	08010b5d 	.word	0x08010b5d
 8010a10:	08010b5d 	.word	0x08010b5d
 8010a14:	08010b5d 	.word	0x08010b5d
 8010a18:	08010b5d 	.word	0x08010b5d
 8010a1c:	08010b5d 	.word	0x08010b5d
 8010a20:	08010b5d 	.word	0x08010b5d
 8010a24:	08010b5d 	.word	0x08010b5d
 8010a28:	08010b5d 	.word	0x08010b5d
 8010a2c:	08010b5d 	.word	0x08010b5d
 8010a30:	08010a81 	.word	0x08010a81
 8010a34:	08010b0d 	.word	0x08010b0d
 8010a38:	08010b5d 	.word	0x08010b5d
 8010a3c:	08010aa3 	.word	0x08010aa3

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8010a40:	4b48      	ldr	r3, [pc, #288]	; (8010b64 <user_notify+0x1f0>)
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d10d      	bne.n	8010a64 <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8010a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4a:	3302      	adds	r3, #2
 8010a4c:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	885b      	ldrh	r3, [r3, #2]
 8010a52:	b298      	uxth	r0, r3
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	7919      	ldrb	r1, [r3, #4]
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	3307      	adds	r3, #7
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	f7ff fee3 	bl	8010828 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8010a62:	e076      	b.n	8010b52 <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8010a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a66:	3302      	adds	r3, #2
 8010a68:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	885b      	ldrh	r3, [r3, #2]
 8010a6e:	b298      	uxth	r0, r3
 8010a70:	69bb      	ldr	r3, [r7, #24]
 8010a72:	7919      	ldrb	r1, [r3, #4]
 8010a74:	69bb      	ldr	r3, [r7, #24]
 8010a76:	3305      	adds	r3, #5
 8010a78:	461a      	mov	r2, r3
 8010a7a:	f7ff fed5 	bl	8010828 <Attribute_Modified_CB>
        break;
 8010a7e:	e068      	b.n	8010b52 <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8010a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a82:	3302      	adds	r3, #2
 8010a84:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010a8c:	b298      	uxth	r0, r3
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	789b      	ldrb	r3, [r3, #2]
 8010a92:	3b02      	subs	r3, #2
 8010a94:	b2d9      	uxtb	r1, r3
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	3305      	adds	r3, #5
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	f7ff ff50 	bl	8010940 <GATT_Notification_CB>
        }
        break;
 8010aa0:	e057      	b.n	8010b52 <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8010aa2:	4b31      	ldr	r3, [pc, #196]	; (8010b68 <user_notify+0x1f4>)
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d150      	bne.n	8010b4c <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aac:	3302      	adds	r3, #2
 8010aae:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8010ab0:	4b2e      	ldr	r3, [pc, #184]	; (8010b6c <user_notify+0x1f8>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d011      	beq.n	8010ade <user_notify+0x16a>
 8010aba:	4b2d      	ldr	r3, [pc, #180]	; (8010b70 <user_notify+0x1fc>)
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d10c      	bne.n	8010ade <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8010ac4:	6a3b      	ldr	r3, [r7, #32]
 8010ac6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010aca:	b29a      	uxth	r2, r3
 8010acc:	4b29      	ldr	r3, [pc, #164]	; (8010b74 <user_notify+0x200>)
 8010ace:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8010ad0:	4b28      	ldr	r3, [pc, #160]	; (8010b74 <user_notify+0x200>)
 8010ad2:	881b      	ldrh	r3, [r3, #0]
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	4828      	ldr	r0, [pc, #160]	; (8010b78 <user_notify+0x204>)
 8010ad8:	f006 fcd4 	bl	8017484 <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8010adc:	e036      	b.n	8010b4c <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8010ade:	4b27      	ldr	r3, [pc, #156]	; (8010b7c <user_notify+0x208>)
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d031      	beq.n	8010b4c <user_notify+0x1d8>
 8010ae8:	4b25      	ldr	r3, [pc, #148]	; (8010b80 <user_notify+0x20c>)
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d12c      	bne.n	8010b4c <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 8010af2:	6a3b      	ldr	r3, [r7, #32]
 8010af4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010af8:	b29a      	uxth	r2, r3
 8010afa:	4b22      	ldr	r3, [pc, #136]	; (8010b84 <user_notify+0x210>)
 8010afc:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8010afe:	4b21      	ldr	r3, [pc, #132]	; (8010b84 <user_notify+0x210>)
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	4619      	mov	r1, r3
 8010b04:	4820      	ldr	r0, [pc, #128]	; (8010b88 <user_notify+0x214>)
 8010b06:	f006 fcbd 	bl	8017484 <iprintf>
        break;
 8010b0a:	e01f      	b.n	8010b4c <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8010b0c:	4b16      	ldr	r3, [pc, #88]	; (8010b68 <user_notify+0x1f4>)
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d11d      	bne.n	8010b50 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8010b14:	4b15      	ldr	r3, [pc, #84]	; (8010b6c <user_notify+0x1f8>)
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	b2db      	uxtb	r3, r3
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d008      	beq.n	8010b30 <user_notify+0x1bc>
 8010b1e:	4b14      	ldr	r3, [pc, #80]	; (8010b70 <user_notify+0x1fc>)
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d103      	bne.n	8010b30 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8010b28:	4b11      	ldr	r3, [pc, #68]	; (8010b70 <user_notify+0x1fc>)
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8010b2e:	e00f      	b.n	8010b50 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8010b30:	4b12      	ldr	r3, [pc, #72]	; (8010b7c <user_notify+0x208>)
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d00a      	beq.n	8010b50 <user_notify+0x1dc>
 8010b3a:	4b11      	ldr	r3, [pc, #68]	; (8010b80 <user_notify+0x20c>)
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d105      	bne.n	8010b50 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 8010b44:	4b0e      	ldr	r3, [pc, #56]	; (8010b80 <user_notify+0x20c>)
 8010b46:	2201      	movs	r2, #1
 8010b48:	701a      	strb	r2, [r3, #0]
        break;
 8010b4a:	e001      	b.n	8010b50 <user_notify+0x1dc>
        break;
 8010b4c:	bf00      	nop
 8010b4e:	e005      	b.n	8010b5c <user_notify+0x1e8>
        break;
 8010b50:	bf00      	nop
      }
    }
    break;
 8010b52:	e003      	b.n	8010b5c <user_notify+0x1e8>
    return;
 8010b54:	bf00      	nop
 8010b56:	e002      	b.n	8010b5e <user_notify+0x1ea>
    break;
 8010b58:	bf00      	nop
 8010b5a:	e000      	b.n	8010b5e <user_notify+0x1ea>
    break;
 8010b5c:	bf00      	nop
  }
}
 8010b5e:	3730      	adds	r7, #48	; 0x30
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	20000000 	.word	0x20000000
 8010b68:	20000001 	.word	0x20000001
 8010b6c:	200000a3 	.word	0x200000a3
 8010b70:	200000a5 	.word	0x200000a5
 8010b74:	200004a4 	.word	0x200004a4
 8010b78:	0801813c 	.word	0x0801813c
 8010b7c:	200000a4 	.word	0x200000a4
 8010b80:	200000a6 	.word	0x200000a6
 8010b84:	200004a6 	.word	0x200004a6
 8010b88:	08018154 	.word	0x08018154

08010b8c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b088      	sub	sp, #32
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b94:	4b1e      	ldr	r3, [pc, #120]	; (8010c10 <HCI_TL_SPI_Init+0x84>)
 8010b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b98:	4a1d      	ldr	r2, [pc, #116]	; (8010c10 <HCI_TL_SPI_Init+0x84>)
 8010b9a:	f043 0301 	orr.w	r3, r3, #1
 8010b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010ba0:	4b1b      	ldr	r3, [pc, #108]	; (8010c10 <HCI_TL_SPI_Init+0x84>)
 8010ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ba4:	f003 0301 	and.w	r3, r3, #1
 8010ba8:	60bb      	str	r3, [r7, #8]
 8010baa:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8010bac:	2340      	movs	r3, #64	; 0x40
 8010bae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010bb0:	4b18      	ldr	r3, [pc, #96]	; (8010c14 <HCI_TL_SPI_Init+0x88>)
 8010bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8010bb8:	f107 030c 	add.w	r3, r7, #12
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	4816      	ldr	r0, [pc, #88]	; (8010c18 <HCI_TL_SPI_Init+0x8c>)
 8010bc0:	f002 f9ee 	bl	8012fa0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8010bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010bca:	2301      	movs	r3, #1
 8010bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8010bd6:	f107 030c 	add.w	r3, r7, #12
 8010bda:	4619      	mov	r1, r3
 8010bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010be0:	f002 f9de 	bl	8012fa0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8010be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010bea:	2301      	movs	r3, #1
 8010bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8010bf6:	f107 030c 	add.w	r3, r7, #12
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	4807      	ldr	r0, [pc, #28]	; (8010c1c <HCI_TL_SPI_Init+0x90>)
 8010bfe:	f002 f9cf 	bl	8012fa0 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8010c02:	f000 fee3 	bl	80119cc <BSP_SPI3_Init>
 8010c06:	4603      	mov	r3, r0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3720      	adds	r7, #32
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	40021000 	.word	0x40021000
 8010c14:	10110000 	.word	0x10110000
 8010c18:	48001000 	.word	0x48001000
 8010c1c:	48000c00 	.word	0x48000c00

08010c20 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8010c24:	2140      	movs	r1, #64	; 0x40
 8010c26:	4808      	ldr	r0, [pc, #32]	; (8010c48 <HCI_TL_SPI_DeInit+0x28>)
 8010c28:	f002 fb64 	bl	80132f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8010c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010c30:	4806      	ldr	r0, [pc, #24]	; (8010c4c <HCI_TL_SPI_DeInit+0x2c>)
 8010c32:	f002 fb5f 	bl	80132f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8010c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c3e:	f002 fb59 	bl	80132f4 <HAL_GPIO_DeInit>
  return 0;
 8010c42:	2300      	movs	r3, #0
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	48001000 	.word	0x48001000
 8010c4c:	48000c00 	.word	0x48000c00

08010c50 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8010c54:	2201      	movs	r2, #1
 8010c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010c5a:	480d      	ldr	r0, [pc, #52]	; (8010c90 <HCI_TL_SPI_Reset+0x40>)
 8010c5c:	f002 fc56 	bl	801350c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8010c60:	2200      	movs	r2, #0
 8010c62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c6a:	f002 fc4f 	bl	801350c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8010c6e:	2005      	movs	r0, #5
 8010c70:	f001 f81a 	bl	8011ca8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8010c74:	2201      	movs	r2, #1
 8010c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c7e:	f002 fc45 	bl	801350c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8010c82:	2005      	movs	r0, #5
 8010c84:	f001 f810 	bl	8011ca8 <HAL_Delay>
  return 0;
 8010c88:	2300      	movs	r3, #0
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	48000c00 	.word	0x48000c00

08010c94 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b088      	sub	sp, #32
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	460b      	mov	r3, r1
 8010c9e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8010ca4:	23ff      	movs	r3, #255	; 0xff
 8010ca6:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8010ca8:	4a26      	ldr	r2, [pc, #152]	; (8010d44 <HCI_TL_SPI_Receive+0xb0>)
 8010caa:	f107 0314 	add.w	r3, r7, #20
 8010cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cb2:	6018      	str	r0, [r3, #0]
 8010cb4:	3304      	adds	r3, #4
 8010cb6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8010cb8:	2200      	movs	r2, #0
 8010cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010cbe:	4822      	ldr	r0, [pc, #136]	; (8010d48 <HCI_TL_SPI_Receive+0xb4>)
 8010cc0:	f002 fc24 	bl	801350c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8010cc4:	f107 010c 	add.w	r1, r7, #12
 8010cc8:	f107 0314 	add.w	r3, r7, #20
 8010ccc:	2205      	movs	r2, #5
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f000 feac 	bl	8011a2c <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8010cd4:	7b3b      	ldrb	r3, [r7, #12]
 8010cd6:	2b02      	cmp	r3, #2
 8010cd8:	d129      	bne.n	8010d2e <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8010cda:	7c3b      	ldrb	r3, [r7, #16]
 8010cdc:	021b      	lsls	r3, r3, #8
 8010cde:	b21a      	sxth	r2, r3
 8010ce0:	7bfb      	ldrb	r3, [r7, #15]
 8010ce2:	b21b      	sxth	r3, r3
 8010ce4:	4313      	orrs	r3, r2
 8010ce6:	b21b      	sxth	r3, r3
 8010ce8:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8010cea:	8bfb      	ldrh	r3, [r7, #30]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d01e      	beq.n	8010d2e <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8010cf0:	8bfa      	ldrh	r2, [r7, #30]
 8010cf2:	887b      	ldrh	r3, [r7, #2]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d901      	bls.n	8010cfc <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8010cf8:	887b      	ldrh	r3, [r7, #2]
 8010cfa:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	777b      	strb	r3, [r7, #29]
 8010d00:	e010      	b.n	8010d24 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8010d02:	f107 011b 	add.w	r1, r7, #27
 8010d06:	f107 031c 	add.w	r3, r7, #28
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f000 fe8d 	bl	8011a2c <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8010d12:	7f7b      	ldrb	r3, [r7, #29]
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	4413      	add	r3, r2
 8010d18:	7efa      	ldrb	r2, [r7, #27]
 8010d1a:	b2d2      	uxtb	r2, r2
 8010d1c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8010d1e:	7f7b      	ldrb	r3, [r7, #29]
 8010d20:	3301      	adds	r3, #1
 8010d22:	777b      	strb	r3, [r7, #29]
 8010d24:	7f7b      	ldrb	r3, [r7, #29]
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	8bfa      	ldrh	r2, [r7, #30]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d8e9      	bhi.n	8010d02 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8010d2e:	2201      	movs	r2, #1
 8010d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010d34:	4804      	ldr	r0, [pc, #16]	; (8010d48 <HCI_TL_SPI_Receive+0xb4>)
 8010d36:	f002 fbe9 	bl	801350c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8010d3a:	7f7b      	ldrb	r3, [r7, #29]
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3720      	adds	r7, #32
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	0801816c 	.word	0x0801816c
 8010d48:	48000c00 	.word	0x48000c00

08010d4c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b088      	sub	sp, #32
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	460b      	mov	r3, r1
 8010d56:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8010d58:	4a24      	ldr	r2, [pc, #144]	; (8010dec <HCI_TL_SPI_Send+0xa0>)
 8010d5a:	f107 0310 	add.w	r3, r7, #16
 8010d5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d62:	6018      	str	r0, [r3, #0]
 8010d64:	3304      	adds	r3, #4
 8010d66:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8010d68:	f000 ff92 	bl	8011c90 <HAL_GetTick>
 8010d6c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8010d72:	2200      	movs	r2, #0
 8010d74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010d78:	481d      	ldr	r0, [pc, #116]	; (8010df0 <HCI_TL_SPI_Send+0xa4>)
 8010d7a:	f002 fbc7 	bl	801350c <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8010d7e:	f107 0108 	add.w	r1, r7, #8
 8010d82:	f107 0310 	add.w	r3, r7, #16
 8010d86:	2205      	movs	r2, #5
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f000 fe4f 	bl	8011a2c <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8010d8e:	7a3b      	ldrb	r3, [r7, #8]
 8010d90:	2b02      	cmp	r3, #2
 8010d92:	d10f      	bne.n	8010db4 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8010d94:	7a7b      	ldrb	r3, [r7, #9]
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	887a      	ldrh	r2, [r7, #2]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d806      	bhi.n	8010dac <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8010d9e:	887b      	ldrh	r3, [r7, #2]
 8010da0:	461a      	mov	r2, r3
 8010da2:	4914      	ldr	r1, [pc, #80]	; (8010df4 <HCI_TL_SPI_Send+0xa8>)
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f000 fe41 	bl	8011a2c <BSP_SPI3_SendRecv>
 8010daa:	e006      	b.n	8010dba <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8010dac:	f06f 0301 	mvn.w	r3, #1
 8010db0:	61fb      	str	r3, [r7, #28]
 8010db2:	e002      	b.n	8010dba <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8010db4:	f04f 33ff 	mov.w	r3, #4294967295
 8010db8:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8010dba:	2201      	movs	r2, #1
 8010dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010dc0:	480b      	ldr	r0, [pc, #44]	; (8010df0 <HCI_TL_SPI_Send+0xa4>)
 8010dc2:	f002 fba3 	bl	801350c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8010dc6:	f000 ff63 	bl	8011c90 <HAL_GetTick>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	2b0f      	cmp	r3, #15
 8010dd2:	d903      	bls.n	8010ddc <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8010dd4:	f06f 0302 	mvn.w	r3, #2
 8010dd8:	61fb      	str	r3, [r7, #28]
      break;
 8010dda:	e002      	b.n	8010de2 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	dbc5      	blt.n	8010d6e <HCI_TL_SPI_Send+0x22>

  return result;
 8010de2:	69fb      	ldr	r3, [r7, #28]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3720      	adds	r7, #32
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	08018174 	.word	0x08018174
 8010df0:	48000c00 	.word	0x48000c00
 8010df4:	200000a8 	.word	0x200000a8

08010df8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8010dfc:	2140      	movs	r1, #64	; 0x40
 8010dfe:	4805      	ldr	r0, [pc, #20]	; (8010e14 <IsDataAvailable+0x1c>)
 8010e00:	f002 fb6c 	bl	80134dc <HAL_GPIO_ReadPin>
 8010e04:	4603      	mov	r3, r0
 8010e06:	2b01      	cmp	r3, #1
 8010e08:	bf0c      	ite	eq
 8010e0a:	2301      	moveq	r3, #1
 8010e0c:	2300      	movne	r3, #0
 8010e0e:	b2db      	uxtb	r3, r3
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	48001000 	.word	0x48001000

08010e18 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b088      	sub	sp, #32
 8010e1c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8010e1e:	4b12      	ldr	r3, [pc, #72]	; (8010e68 <hci_tl_lowlevel_init+0x50>)
 8010e20:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8010e22:	4b12      	ldr	r3, [pc, #72]	; (8010e6c <hci_tl_lowlevel_init+0x54>)
 8010e24:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8010e26:	4b12      	ldr	r3, [pc, #72]	; (8010e70 <hci_tl_lowlevel_init+0x58>)
 8010e28:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8010e2a:	4b12      	ldr	r3, [pc, #72]	; (8010e74 <hci_tl_lowlevel_init+0x5c>)
 8010e2c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8010e2e:	4b12      	ldr	r3, [pc, #72]	; (8010e78 <hci_tl_lowlevel_init+0x60>)
 8010e30:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8010e32:	4b12      	ldr	r3, [pc, #72]	; (8010e7c <hci_tl_lowlevel_init+0x64>)
 8010e34:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8010e36:	1d3b      	adds	r3, r7, #4
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f005 fda1 	bl	8016980 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8010e3e:	4910      	ldr	r1, [pc, #64]	; (8010e80 <hci_tl_lowlevel_init+0x68>)
 8010e40:	4810      	ldr	r0, [pc, #64]	; (8010e84 <hci_tl_lowlevel_init+0x6c>)
 8010e42:	f002 f869 	bl	8012f18 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8010e46:	4a10      	ldr	r2, [pc, #64]	; (8010e88 <hci_tl_lowlevel_init+0x70>)
 8010e48:	2100      	movs	r1, #0
 8010e4a:	480e      	ldr	r0, [pc, #56]	; (8010e84 <hci_tl_lowlevel_init+0x6c>)
 8010e4c:	f002 f84a 	bl	8012ee4 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8010e50:	2200      	movs	r2, #0
 8010e52:	2100      	movs	r1, #0
 8010e54:	2017      	movs	r0, #23
 8010e56:	f001 ffce 	bl	8012df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8010e5a:	2017      	movs	r0, #23
 8010e5c:	f001 ffe7 	bl	8012e2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8010e60:	bf00      	nop
 8010e62:	3720      	adds	r7, #32
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	08010b8d 	.word	0x08010b8d
 8010e6c:	08010c21 	.word	0x08010c21
 8010e70:	08010d4d 	.word	0x08010d4d
 8010e74:	08010c95 	.word	0x08010c95
 8010e78:	08010c51 	.word	0x08010c51
 8010e7c:	08011a6d 	.word	0x08011a6d
 8010e80:	16000006 	.word	0x16000006
 8010e84:	200004b0 	.word	0x200004b0
 8010e88:	08010e8d 	.word	0x08010e8d

08010e8c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8010e90:	e005      	b.n	8010e9e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8010e92:	2000      	movs	r0, #0
 8010e94:	f005 feda 	bl	8016c4c <hci_notify_asynch_evt>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d105      	bne.n	8010eaa <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8010e9e:	f7ff ffab 	bl	8010df8 <IsDataAvailable>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d1f4      	bne.n	8010e92 <hci_tl_lowlevel_isr+0x6>
 8010ea8:	e000      	b.n	8010eac <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8010eaa:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8010eac:	bd80      	pop	{r7, pc}
	...

08010eb0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _write(int file, char *ptr, int len)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 500);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010ec4:	68b9      	ldr	r1, [r7, #8]
 8010ec6:	4803      	ldr	r0, [pc, #12]	; (8010ed4 <_write+0x24>)
 8010ec8:	f004 fc1e 	bl	8015708 <HAL_UART_Transmit>
}
 8010ecc:	bf00      	nop
 8010ece:	3710      	adds	r7, #16
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	2000051c 	.word	0x2000051c

08010ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010edc:	f000 fe70 	bl	8011bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010ee0:	f000 f810 	bl	8010f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010ee4:	f000 f906 	bl	80110f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8010ee8:	f000 f85e 	bl	8010fa8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8010eec:	f000 f8d2 	bl	8011094 <MX_USART1_UART_Init>
  MX_BlueNRG_MS_Init();
 8010ef0:	f7ff fb42 	bl	8010578 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  printf("while start\n");
 8010ef4:	4802      	ldr	r0, [pc, #8]	; (8010f00 <main+0x28>)
 8010ef6:	f006 fb61 	bl	80175bc <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8010efa:	f7ff fc4d 	bl	8010798 <MX_BlueNRG_MS_Process>
 8010efe:	e7fc      	b.n	8010efa <main+0x22>
 8010f00:	0801817c 	.word	0x0801817c

08010f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b096      	sub	sp, #88	; 0x58
 8010f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010f0a:	f107 0314 	add.w	r3, r7, #20
 8010f0e:	2244      	movs	r2, #68	; 0x44
 8010f10:	2100      	movs	r1, #0
 8010f12:	4618      	mov	r0, r3
 8010f14:	f006 fa03 	bl	801731e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010f18:	463b      	mov	r3, r7
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	601a      	str	r2, [r3, #0]
 8010f1e:	605a      	str	r2, [r3, #4]
 8010f20:	609a      	str	r2, [r3, #8]
 8010f22:	60da      	str	r2, [r3, #12]
 8010f24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8010f26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010f2a:	f002 fb53 	bl	80135d4 <HAL_PWREx_ControlVoltageScaling>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d001      	beq.n	8010f38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8010f34:	f000 fac0 	bl	80114b8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8010f38:	2310      	movs	r3, #16
 8010f3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8010f40:	2300      	movs	r3, #0
 8010f42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8010f44:	2360      	movs	r3, #96	; 0x60
 8010f46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010f48:	2302      	movs	r3, #2
 8010f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8010f50:	2301      	movs	r3, #1
 8010f52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8010f54:	2328      	movs	r3, #40	; 0x28
 8010f56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8010f58:	2307      	movs	r3, #7
 8010f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8010f5c:	2302      	movs	r3, #2
 8010f5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8010f60:	2302      	movs	r3, #2
 8010f62:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010f64:	f107 0314 	add.w	r3, r7, #20
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f002 fb89 	bl	8013680 <HAL_RCC_OscConfig>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d001      	beq.n	8010f78 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8010f74:	f000 faa0 	bl	80114b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010f78:	230f      	movs	r3, #15
 8010f7a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010f7c:	2303      	movs	r3, #3
 8010f7e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010f80:	2300      	movs	r3, #0
 8010f82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010f84:	2300      	movs	r3, #0
 8010f86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8010f8c:	463b      	mov	r3, r7
 8010f8e:	2104      	movs	r1, #4
 8010f90:	4618      	mov	r0, r3
 8010f92:	f002 ff5b 	bl	8013e4c <HAL_RCC_ClockConfig>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d001      	beq.n	8010fa0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8010f9c:	f000 fa8c 	bl	80114b8 <Error_Handler>
  }
}
 8010fa0:	bf00      	nop
 8010fa2:	3758      	adds	r7, #88	; 0x58
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b08a      	sub	sp, #40	; 0x28
 8010fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8010fae:	f107 031c 	add.w	r3, r7, #28
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	601a      	str	r2, [r3, #0]
 8010fb6:	605a      	str	r2, [r3, #4]
 8010fb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8010fba:	1d3b      	adds	r3, r7, #4
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	601a      	str	r2, [r3, #0]
 8010fc0:	605a      	str	r2, [r3, #4]
 8010fc2:	609a      	str	r2, [r3, #8]
 8010fc4:	60da      	str	r2, [r3, #12]
 8010fc6:	611a      	str	r2, [r3, #16]
 8010fc8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8010fca:	4b2f      	ldr	r3, [pc, #188]	; (8011088 <MX_ADC1_Init+0xe0>)
 8010fcc:	4a2f      	ldr	r2, [pc, #188]	; (801108c <MX_ADC1_Init+0xe4>)
 8010fce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8010fd0:	4b2d      	ldr	r3, [pc, #180]	; (8011088 <MX_ADC1_Init+0xe0>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8010fd6:	4b2c      	ldr	r3, [pc, #176]	; (8011088 <MX_ADC1_Init+0xe0>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010fdc:	4b2a      	ldr	r3, [pc, #168]	; (8011088 <MX_ADC1_Init+0xe0>)
 8010fde:	2200      	movs	r2, #0
 8010fe0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8010fe2:	4b29      	ldr	r3, [pc, #164]	; (8011088 <MX_ADC1_Init+0xe0>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8010fe8:	4b27      	ldr	r3, [pc, #156]	; (8011088 <MX_ADC1_Init+0xe0>)
 8010fea:	2204      	movs	r2, #4
 8010fec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8010fee:	4b26      	ldr	r3, [pc, #152]	; (8011088 <MX_ADC1_Init+0xe0>)
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8010ff4:	4b24      	ldr	r3, [pc, #144]	; (8011088 <MX_ADC1_Init+0xe0>)
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8010ffa:	4b23      	ldr	r3, [pc, #140]	; (8011088 <MX_ADC1_Init+0xe0>)
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8011000:	4b21      	ldr	r3, [pc, #132]	; (8011088 <MX_ADC1_Init+0xe0>)
 8011002:	2200      	movs	r2, #0
 8011004:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011008:	4b1f      	ldr	r3, [pc, #124]	; (8011088 <MX_ADC1_Init+0xe0>)
 801100a:	2200      	movs	r2, #0
 801100c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801100e:	4b1e      	ldr	r3, [pc, #120]	; (8011088 <MX_ADC1_Init+0xe0>)
 8011010:	2200      	movs	r2, #0
 8011012:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8011014:	4b1c      	ldr	r3, [pc, #112]	; (8011088 <MX_ADC1_Init+0xe0>)
 8011016:	2200      	movs	r2, #0
 8011018:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801101c:	4b1a      	ldr	r3, [pc, #104]	; (8011088 <MX_ADC1_Init+0xe0>)
 801101e:	2200      	movs	r2, #0
 8011020:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8011022:	4b19      	ldr	r3, [pc, #100]	; (8011088 <MX_ADC1_Init+0xe0>)
 8011024:	2200      	movs	r2, #0
 8011026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801102a:	4817      	ldr	r0, [pc, #92]	; (8011088 <MX_ADC1_Init+0xe0>)
 801102c:	f000 ffec 	bl	8012008 <HAL_ADC_Init>
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d001      	beq.n	801103a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8011036:	f000 fa3f 	bl	80114b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 801103a:	2300      	movs	r3, #0
 801103c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 801103e:	f107 031c 	add.w	r3, r7, #28
 8011042:	4619      	mov	r1, r3
 8011044:	4810      	ldr	r0, [pc, #64]	; (8011088 <MX_ADC1_Init+0xe0>)
 8011046:	f001 fd4b 	bl	8012ae0 <HAL_ADCEx_MultiModeConfigChannel>
 801104a:	4603      	mov	r3, r0
 801104c:	2b00      	cmp	r3, #0
 801104e:	d001      	beq.n	8011054 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8011050:	f000 fa32 	bl	80114b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8011054:	4b0e      	ldr	r3, [pc, #56]	; (8011090 <MX_ADC1_Init+0xe8>)
 8011056:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8011058:	2306      	movs	r3, #6
 801105a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 801105c:	2300      	movs	r3, #0
 801105e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8011060:	237f      	movs	r3, #127	; 0x7f
 8011062:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8011064:	2304      	movs	r3, #4
 8011066:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8011068:	2300      	movs	r3, #0
 801106a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801106c:	1d3b      	adds	r3, r7, #4
 801106e:	4619      	mov	r1, r3
 8011070:	4805      	ldr	r0, [pc, #20]	; (8011088 <MX_ADC1_Init+0xe0>)
 8011072:	f001 f91f 	bl	80122b4 <HAL_ADC_ConfigChannel>
 8011076:	4603      	mov	r3, r0
 8011078:	2b00      	cmp	r3, #0
 801107a:	d001      	beq.n	8011080 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 801107c:	f000 fa1c 	bl	80114b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8011080:	bf00      	nop
 8011082:	3728      	adds	r7, #40	; 0x28
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	200004b8 	.word	0x200004b8
 801108c:	50040000 	.word	0x50040000
 8011090:	04300002 	.word	0x04300002

08011094 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8011098:	4b14      	ldr	r3, [pc, #80]	; (80110ec <MX_USART1_UART_Init+0x58>)
 801109a:	4a15      	ldr	r2, [pc, #84]	; (80110f0 <MX_USART1_UART_Init+0x5c>)
 801109c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801109e:	4b13      	ldr	r3, [pc, #76]	; (80110ec <MX_USART1_UART_Init+0x58>)
 80110a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80110a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80110a6:	4b11      	ldr	r3, [pc, #68]	; (80110ec <MX_USART1_UART_Init+0x58>)
 80110a8:	2200      	movs	r2, #0
 80110aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80110ac:	4b0f      	ldr	r3, [pc, #60]	; (80110ec <MX_USART1_UART_Init+0x58>)
 80110ae:	2200      	movs	r2, #0
 80110b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80110b2:	4b0e      	ldr	r3, [pc, #56]	; (80110ec <MX_USART1_UART_Init+0x58>)
 80110b4:	2200      	movs	r2, #0
 80110b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80110b8:	4b0c      	ldr	r3, [pc, #48]	; (80110ec <MX_USART1_UART_Init+0x58>)
 80110ba:	220c      	movs	r2, #12
 80110bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80110be:	4b0b      	ldr	r3, [pc, #44]	; (80110ec <MX_USART1_UART_Init+0x58>)
 80110c0:	2200      	movs	r2, #0
 80110c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80110c4:	4b09      	ldr	r3, [pc, #36]	; (80110ec <MX_USART1_UART_Init+0x58>)
 80110c6:	2200      	movs	r2, #0
 80110c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80110ca:	4b08      	ldr	r3, [pc, #32]	; (80110ec <MX_USART1_UART_Init+0x58>)
 80110cc:	2200      	movs	r2, #0
 80110ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80110d0:	4b06      	ldr	r3, [pc, #24]	; (80110ec <MX_USART1_UART_Init+0x58>)
 80110d2:	2200      	movs	r2, #0
 80110d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80110d6:	4805      	ldr	r0, [pc, #20]	; (80110ec <MX_USART1_UART_Init+0x58>)
 80110d8:	f004 fac8 	bl	801566c <HAL_UART_Init>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d001      	beq.n	80110e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80110e2:	f000 f9e9 	bl	80114b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80110e6:	bf00      	nop
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	2000051c 	.word	0x2000051c
 80110f0:	40013800 	.word	0x40013800

080110f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b08a      	sub	sp, #40	; 0x28
 80110f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80110fa:	f107 0314 	add.w	r3, r7, #20
 80110fe:	2200      	movs	r2, #0
 8011100:	601a      	str	r2, [r3, #0]
 8011102:	605a      	str	r2, [r3, #4]
 8011104:	609a      	str	r2, [r3, #8]
 8011106:	60da      	str	r2, [r3, #12]
 8011108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801110a:	4bba      	ldr	r3, [pc, #744]	; (80113f4 <MX_GPIO_Init+0x300>)
 801110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801110e:	4ab9      	ldr	r2, [pc, #740]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011110:	f043 0310 	orr.w	r3, r3, #16
 8011114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011116:	4bb7      	ldr	r3, [pc, #732]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801111a:	f003 0310 	and.w	r3, r3, #16
 801111e:	613b      	str	r3, [r7, #16]
 8011120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011122:	4bb4      	ldr	r3, [pc, #720]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011126:	4ab3      	ldr	r2, [pc, #716]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011128:	f043 0304 	orr.w	r3, r3, #4
 801112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801112e:	4bb1      	ldr	r3, [pc, #708]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011132:	f003 0304 	and.w	r3, r3, #4
 8011136:	60fb      	str	r3, [r7, #12]
 8011138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801113a:	4bae      	ldr	r3, [pc, #696]	; (80113f4 <MX_GPIO_Init+0x300>)
 801113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801113e:	4aad      	ldr	r2, [pc, #692]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011140:	f043 0301 	orr.w	r3, r3, #1
 8011144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011146:	4bab      	ldr	r3, [pc, #684]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801114a:	f003 0301 	and.w	r3, r3, #1
 801114e:	60bb      	str	r3, [r7, #8]
 8011150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011152:	4ba8      	ldr	r3, [pc, #672]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011156:	4aa7      	ldr	r2, [pc, #668]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011158:	f043 0302 	orr.w	r3, r3, #2
 801115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801115e:	4ba5      	ldr	r3, [pc, #660]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011162:	f003 0302 	and.w	r3, r3, #2
 8011166:	607b      	str	r3, [r7, #4]
 8011168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801116a:	4ba2      	ldr	r3, [pc, #648]	; (80113f4 <MX_GPIO_Init+0x300>)
 801116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801116e:	4aa1      	ldr	r2, [pc, #644]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011170:	f043 0308 	orr.w	r3, r3, #8
 8011174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011176:	4b9f      	ldr	r3, [pc, #636]	; (80113f4 <MX_GPIO_Init+0x300>)
 8011178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801117a:	f003 0308 	and.w	r3, r3, #8
 801117e:	603b      	str	r3, [r7, #0]
 8011180:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8011182:	2200      	movs	r2, #0
 8011184:	f44f 718a 	mov.w	r1, #276	; 0x114
 8011188:	489b      	ldr	r0, [pc, #620]	; (80113f8 <MX_GPIO_Init+0x304>)
 801118a:	f002 f9bf 	bl	801350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 801118e:	2200      	movs	r2, #0
 8011190:	f248 1104 	movw	r1, #33028	; 0x8104
 8011194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011198:	f002 f9b8 	bl	801350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 801119c:	2200      	movs	r2, #0
 801119e:	f24b 0114 	movw	r1, #45076	; 0xb014
 80111a2:	4896      	ldr	r0, [pc, #600]	; (80113fc <MX_GPIO_Init+0x308>)
 80111a4:	f002 f9b2 	bl	801350c <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80111a8:	2200      	movs	r2, #0
 80111aa:	f241 0181 	movw	r1, #4225	; 0x1081
 80111ae:	4894      	ldr	r0, [pc, #592]	; (8011400 <MX_GPIO_Init+0x30c>)
 80111b0:	f002 f9ac 	bl	801350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80111b4:	2201      	movs	r2, #1
 80111b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80111ba:	4891      	ldr	r0, [pc, #580]	; (8011400 <MX_GPIO_Init+0x30c>)
 80111bc:	f002 f9a6 	bl	801350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80111c0:	2200      	movs	r2, #0
 80111c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80111c6:	488f      	ldr	r0, [pc, #572]	; (8011404 <MX_GPIO_Init+0x310>)
 80111c8:	f002 f9a0 	bl	801350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80111cc:	2201      	movs	r2, #1
 80111ce:	2120      	movs	r1, #32
 80111d0:	488a      	ldr	r0, [pc, #552]	; (80113fc <MX_GPIO_Init+0x308>)
 80111d2:	f002 f99b 	bl	801350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80111d6:	2201      	movs	r2, #1
 80111d8:	2101      	movs	r1, #1
 80111da:	4887      	ldr	r0, [pc, #540]	; (80113f8 <MX_GPIO_Init+0x304>)
 80111dc:	f002 f996 	bl	801350c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80111e0:	f240 1315 	movw	r3, #277	; 0x115
 80111e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80111e6:	2301      	movs	r3, #1
 80111e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111ea:	2300      	movs	r3, #0
 80111ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80111ee:	2300      	movs	r3, #0
 80111f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80111f2:	f107 0314 	add.w	r3, r7, #20
 80111f6:	4619      	mov	r1, r3
 80111f8:	487f      	ldr	r0, [pc, #508]	; (80113f8 <MX_GPIO_Init+0x304>)
 80111fa:	f001 fed1 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80111fe:	236a      	movs	r3, #106	; 0x6a
 8011200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011202:	4b81      	ldr	r3, [pc, #516]	; (8011408 <MX_GPIO_Init+0x314>)
 8011204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011206:	2300      	movs	r3, #0
 8011208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801120a:	f107 0314 	add.w	r3, r7, #20
 801120e:	4619      	mov	r1, r3
 8011210:	4879      	ldr	r0, [pc, #484]	; (80113f8 <MX_GPIO_Init+0x304>)
 8011212:	f001 fec5 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8011216:	2303      	movs	r3, #3
 8011218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801121a:	2302      	movs	r3, #2
 801121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801121e:	2300      	movs	r3, #0
 8011220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011222:	2303      	movs	r3, #3
 8011224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8011226:	2308      	movs	r3, #8
 8011228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801122a:	f107 0314 	add.w	r3, r7, #20
 801122e:	4619      	mov	r1, r3
 8011230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011234:	f001 feb4 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8011238:	f248 1304 	movw	r3, #33028	; 0x8104
 801123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801123e:	2301      	movs	r3, #1
 8011240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011242:	2300      	movs	r3, #0
 8011244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011246:	2300      	movs	r3, #0
 8011248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801124a:	f107 0314 	add.w	r3, r7, #20
 801124e:	4619      	mov	r1, r3
 8011250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011254:	f001 fea4 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8011258:	2308      	movs	r3, #8
 801125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801125c:	2302      	movs	r3, #2
 801125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011260:	2300      	movs	r3, #0
 8011262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011264:	2300      	movs	r3, #0
 8011266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011268:	2301      	movs	r3, #1
 801126a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 801126c:	f107 0314 	add.w	r3, r7, #20
 8011270:	4619      	mov	r1, r3
 8011272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011276:	f001 fe93 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 801127a:	23e0      	movs	r3, #224	; 0xe0
 801127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801127e:	2302      	movs	r3, #2
 8011280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011282:	2300      	movs	r3, #0
 8011284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011286:	2303      	movs	r3, #3
 8011288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801128a:	2305      	movs	r3, #5
 801128c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801128e:	f107 0314 	add.w	r3, r7, #20
 8011292:	4619      	mov	r1, r3
 8011294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011298:	f001 fe82 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 801129c:	2301      	movs	r3, #1
 801129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80112a0:	4b59      	ldr	r3, [pc, #356]	; (8011408 <MX_GPIO_Init+0x314>)
 80112a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112a4:	2300      	movs	r3, #0
 80112a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80112a8:	f107 0314 	add.w	r3, r7, #20
 80112ac:	4619      	mov	r1, r3
 80112ae:	4853      	ldr	r0, [pc, #332]	; (80113fc <MX_GPIO_Init+0x308>)
 80112b0:	f001 fe76 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80112b4:	f24b 0334 	movw	r3, #45108	; 0xb034
 80112b8:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80112ba:	2301      	movs	r3, #1
 80112bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112be:	2300      	movs	r3, #0
 80112c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112c2:	2300      	movs	r3, #0
 80112c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80112c6:	f107 0314 	add.w	r3, r7, #20
 80112ca:	4619      	mov	r1, r3
 80112cc:	484b      	ldr	r0, [pc, #300]	; (80113fc <MX_GPIO_Init+0x308>)
 80112ce:	f001 fe67 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80112d2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80112d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112d8:	2302      	movs	r3, #2
 80112da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112dc:	2300      	movs	r3, #0
 80112de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112e0:	2300      	movs	r3, #0
 80112e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80112e4:	2306      	movs	r3, #6
 80112e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80112e8:	f107 0314 	add.w	r3, r7, #20
 80112ec:	4619      	mov	r1, r3
 80112ee:	4842      	ldr	r0, [pc, #264]	; (80113f8 <MX_GPIO_Init+0x304>)
 80112f0:	f001 fe56 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80112f4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80112f8:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112fa:	2302      	movs	r3, #2
 80112fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112fe:	2300      	movs	r3, #0
 8011300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011302:	2303      	movs	r3, #3
 8011304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8011306:	230a      	movs	r3, #10
 8011308:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801130a:	f107 0314 	add.w	r3, r7, #20
 801130e:	4619      	mov	r1, r3
 8011310:	4839      	ldr	r0, [pc, #228]	; (80113f8 <MX_GPIO_Init+0x304>)
 8011312:	f001 fe45 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8011316:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801131c:	2312      	movs	r3, #18
 801131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011320:	2300      	movs	r3, #0
 8011322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011324:	2303      	movs	r3, #3
 8011326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8011328:	2304      	movs	r3, #4
 801132a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801132c:	f107 0314 	add.w	r3, r7, #20
 8011330:	4619      	mov	r1, r3
 8011332:	4832      	ldr	r0, [pc, #200]	; (80113fc <MX_GPIO_Init+0x308>)
 8011334:	f001 fe34 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8011338:	f44f 7340 	mov.w	r3, #768	; 0x300
 801133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801133e:	2302      	movs	r3, #2
 8011340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011342:	2300      	movs	r3, #0
 8011344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011346:	2303      	movs	r3, #3
 8011348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801134a:	2307      	movs	r3, #7
 801134c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801134e:	f107 0314 	add.w	r3, r7, #20
 8011352:	4619      	mov	r1, r3
 8011354:	482a      	ldr	r0, [pc, #168]	; (8011400 <MX_GPIO_Init+0x30c>)
 8011356:	f001 fe23 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 801135a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 801135e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011360:	4b29      	ldr	r3, [pc, #164]	; (8011408 <MX_GPIO_Init+0x314>)
 8011362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011364:	2300      	movs	r3, #0
 8011366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011368:	f107 0314 	add.w	r3, r7, #20
 801136c:	4619      	mov	r1, r3
 801136e:	4824      	ldr	r0, [pc, #144]	; (8011400 <MX_GPIO_Init+0x30c>)
 8011370:	f001 fe16 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8011374:	f243 0381 	movw	r3, #12417	; 0x3081
 8011378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801137a:	2301      	movs	r3, #1
 801137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801137e:	2300      	movs	r3, #0
 8011380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011382:	2300      	movs	r3, #0
 8011384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011386:	f107 0314 	add.w	r3, r7, #20
 801138a:	4619      	mov	r1, r3
 801138c:	481c      	ldr	r0, [pc, #112]	; (8011400 <MX_GPIO_Init+0x30c>)
 801138e:	f001 fe07 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8011392:	f44f 7310 	mov.w	r3, #576	; 0x240
 8011396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011398:	2301      	movs	r3, #1
 801139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801139c:	2300      	movs	r3, #0
 801139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80113a0:	2300      	movs	r3, #0
 80113a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80113a4:	f107 0314 	add.w	r3, r7, #20
 80113a8:	4619      	mov	r1, r3
 80113aa:	4816      	ldr	r0, [pc, #88]	; (8011404 <MX_GPIO_Init+0x310>)
 80113ac:	f001 fdf8 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80113b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80113b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80113b6:	4b14      	ldr	r3, [pc, #80]	; (8011408 <MX_GPIO_Init+0x314>)
 80113b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113ba:	2300      	movs	r3, #0
 80113bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80113be:	f107 0314 	add.w	r3, r7, #20
 80113c2:	4619      	mov	r1, r3
 80113c4:	480f      	ldr	r0, [pc, #60]	; (8011404 <MX_GPIO_Init+0x310>)
 80113c6:	f001 fdeb 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80113ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80113ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80113d0:	2300      	movs	r3, #0
 80113d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113d4:	2300      	movs	r3, #0
 80113d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80113d8:	f107 0314 	add.w	r3, r7, #20
 80113dc:	4619      	mov	r1, r3
 80113de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80113e2:	f001 fddd 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80113e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80113ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113ec:	2302      	movs	r3, #2
 80113ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113f0:	2300      	movs	r3, #0
 80113f2:	e00b      	b.n	801140c <MX_GPIO_Init+0x318>
 80113f4:	40021000 	.word	0x40021000
 80113f8:	48001000 	.word	0x48001000
 80113fc:	48000400 	.word	0x48000400
 8011400:	48000c00 	.word	0x48000c00
 8011404:	48000800 	.word	0x48000800
 8011408:	10110000 	.word	0x10110000
 801140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801140e:	2303      	movs	r3, #3
 8011410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011412:	230a      	movs	r3, #10
 8011414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011416:	f107 0314 	add.w	r3, r7, #20
 801141a:	4619      	mov	r1, r3
 801141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011420:	f001 fdbe 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8011424:	2302      	movs	r3, #2
 8011426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011428:	2302      	movs	r3, #2
 801142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801142c:	2300      	movs	r3, #0
 801142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011430:	2303      	movs	r3, #3
 8011432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011434:	2305      	movs	r3, #5
 8011436:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8011438:	f107 0314 	add.w	r3, r7, #20
 801143c:	4619      	mov	r1, r3
 801143e:	481c      	ldr	r0, [pc, #112]	; (80114b0 <MX_GPIO_Init+0x3bc>)
 8011440:	f001 fdae 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8011444:	2378      	movs	r3, #120	; 0x78
 8011446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011448:	2302      	movs	r3, #2
 801144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801144c:	2300      	movs	r3, #0
 801144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011450:	2303      	movs	r3, #3
 8011452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011454:	2307      	movs	r3, #7
 8011456:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011458:	f107 0314 	add.w	r3, r7, #20
 801145c:	4619      	mov	r1, r3
 801145e:	4814      	ldr	r0, [pc, #80]	; (80114b0 <MX_GPIO_Init+0x3bc>)
 8011460:	f001 fd9e 	bl	8012fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8011464:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801146a:	2312      	movs	r3, #18
 801146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801146e:	2300      	movs	r3, #0
 8011470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011472:	2303      	movs	r3, #3
 8011474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011476:	2304      	movs	r3, #4
 8011478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801147a:	f107 0314 	add.w	r3, r7, #20
 801147e:	4619      	mov	r1, r3
 8011480:	480c      	ldr	r0, [pc, #48]	; (80114b4 <MX_GPIO_Init+0x3c0>)
 8011482:	f001 fd8d 	bl	8012fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8011486:	2200      	movs	r2, #0
 8011488:	2100      	movs	r1, #0
 801148a:	2017      	movs	r0, #23
 801148c:	f001 fcb3 	bl	8012df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8011490:	2017      	movs	r0, #23
 8011492:	f001 fccc 	bl	8012e2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8011496:	2200      	movs	r2, #0
 8011498:	2100      	movs	r1, #0
 801149a:	2028      	movs	r0, #40	; 0x28
 801149c:	f001 fcab 	bl	8012df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80114a0:	2028      	movs	r0, #40	; 0x28
 80114a2:	f001 fcc4 	bl	8012e2e <HAL_NVIC_EnableIRQ>

}
 80114a6:	bf00      	nop
 80114a8:	3728      	adds	r7, #40	; 0x28
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
 80114ae:	bf00      	nop
 80114b0:	48000c00 	.word	0x48000c00
 80114b4:	48000400 	.word	0x48000400

080114b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80114b8:	b480      	push	{r7}
 80114ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80114bc:	b672      	cpsid	i
}
 80114be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80114c0:	e7fe      	b.n	80114c0 <Error_Handler+0x8>
	...

080114c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b083      	sub	sp, #12
 80114c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80114ca:	4b0f      	ldr	r3, [pc, #60]	; (8011508 <HAL_MspInit+0x44>)
 80114cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114ce:	4a0e      	ldr	r2, [pc, #56]	; (8011508 <HAL_MspInit+0x44>)
 80114d0:	f043 0301 	orr.w	r3, r3, #1
 80114d4:	6613      	str	r3, [r2, #96]	; 0x60
 80114d6:	4b0c      	ldr	r3, [pc, #48]	; (8011508 <HAL_MspInit+0x44>)
 80114d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114da:	f003 0301 	and.w	r3, r3, #1
 80114de:	607b      	str	r3, [r7, #4]
 80114e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80114e2:	4b09      	ldr	r3, [pc, #36]	; (8011508 <HAL_MspInit+0x44>)
 80114e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114e6:	4a08      	ldr	r2, [pc, #32]	; (8011508 <HAL_MspInit+0x44>)
 80114e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114ec:	6593      	str	r3, [r2, #88]	; 0x58
 80114ee:	4b06      	ldr	r3, [pc, #24]	; (8011508 <HAL_MspInit+0x44>)
 80114f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80114f6:	603b      	str	r3, [r7, #0]
 80114f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80114fa:	bf00      	nop
 80114fc:	370c      	adds	r7, #12
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop
 8011508:	40021000 	.word	0x40021000

0801150c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b0ae      	sub	sp, #184	; 0xb8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011514:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011518:	2200      	movs	r2, #0
 801151a:	601a      	str	r2, [r3, #0]
 801151c:	605a      	str	r2, [r3, #4]
 801151e:	609a      	str	r2, [r3, #8]
 8011520:	60da      	str	r2, [r3, #12]
 8011522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011524:	f107 031c 	add.w	r3, r7, #28
 8011528:	2288      	movs	r2, #136	; 0x88
 801152a:	2100      	movs	r1, #0
 801152c:	4618      	mov	r0, r3
 801152e:	f005 fef6 	bl	801731e <memset>
  if(hadc->Instance==ADC1)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	4a42      	ldr	r2, [pc, #264]	; (8011640 <HAL_ADC_MspInit+0x134>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d17d      	bne.n	8011638 <HAL_ADC_MspInit+0x12c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 801153c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011540:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8011542:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 801154a:	2301      	movs	r3, #1
 801154c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 801154e:	2301      	movs	r3, #1
 8011550:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8011552:	2318      	movs	r3, #24
 8011554:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8011556:	2307      	movs	r3, #7
 8011558:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801155a:	2302      	movs	r3, #2
 801155c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801155e:	2302      	movs	r3, #2
 8011560:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8011562:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011566:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011568:	f107 031c 	add.w	r3, r7, #28
 801156c:	4618      	mov	r0, r3
 801156e:	f002 fe73 	bl	8014258 <HAL_RCCEx_PeriphCLKConfig>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d001      	beq.n	801157c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8011578:	f7ff ff9e 	bl	80114b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801157c:	4b31      	ldr	r3, [pc, #196]	; (8011644 <HAL_ADC_MspInit+0x138>)
 801157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011580:	4a30      	ldr	r2, [pc, #192]	; (8011644 <HAL_ADC_MspInit+0x138>)
 8011582:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011588:	4b2e      	ldr	r3, [pc, #184]	; (8011644 <HAL_ADC_MspInit+0x138>)
 801158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801158c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011590:	61bb      	str	r3, [r7, #24]
 8011592:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011594:	4b2b      	ldr	r3, [pc, #172]	; (8011644 <HAL_ADC_MspInit+0x138>)
 8011596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011598:	4a2a      	ldr	r2, [pc, #168]	; (8011644 <HAL_ADC_MspInit+0x138>)
 801159a:	f043 0304 	orr.w	r3, r3, #4
 801159e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80115a0:	4b28      	ldr	r3, [pc, #160]	; (8011644 <HAL_ADC_MspInit+0x138>)
 80115a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115a4:	f003 0304 	and.w	r3, r3, #4
 80115a8:	617b      	str	r3, [r7, #20]
 80115aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115ac:	4b25      	ldr	r3, [pc, #148]	; (8011644 <HAL_ADC_MspInit+0x138>)
 80115ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115b0:	4a24      	ldr	r2, [pc, #144]	; (8011644 <HAL_ADC_MspInit+0x138>)
 80115b2:	f043 0301 	orr.w	r3, r3, #1
 80115b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80115b8:	4b22      	ldr	r3, [pc, #136]	; (8011644 <HAL_ADC_MspInit+0x138>)
 80115ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115bc:	f003 0301 	and.w	r3, r3, #1
 80115c0:	613b      	str	r3, [r7, #16]
 80115c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80115c4:	4b1f      	ldr	r3, [pc, #124]	; (8011644 <HAL_ADC_MspInit+0x138>)
 80115c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115c8:	4a1e      	ldr	r2, [pc, #120]	; (8011644 <HAL_ADC_MspInit+0x138>)
 80115ca:	f043 0302 	orr.w	r3, r3, #2
 80115ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80115d0:	4b1c      	ldr	r3, [pc, #112]	; (8011644 <HAL_ADC_MspInit+0x138>)
 80115d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115d4:	f003 0302 	and.w	r3, r3, #2
 80115d8:	60fb      	str	r3, [r7, #12]
 80115da:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80115dc:	233f      	movs	r3, #63	; 0x3f
 80115de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80115e2:	230b      	movs	r3, #11
 80115e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115e8:	2300      	movs	r3, #0
 80115ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80115ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80115f2:	4619      	mov	r1, r3
 80115f4:	4814      	ldr	r0, [pc, #80]	; (8011648 <HAL_ADC_MspInit+0x13c>)
 80115f6:	f001 fcd3 	bl	8012fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 80115fa:	2310      	movs	r3, #16
 80115fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8011600:	230b      	movs	r3, #11
 8011602:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011606:	2300      	movs	r3, #0
 8011608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 801160c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011610:	4619      	mov	r1, r3
 8011612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011616:	f001 fcc3 	bl	8012fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 801161a:	2302      	movs	r3, #2
 801161c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8011620:	230b      	movs	r3, #11
 8011622:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011626:	2300      	movs	r3, #0
 8011628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 801162c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011630:	4619      	mov	r1, r3
 8011632:	4806      	ldr	r0, [pc, #24]	; (801164c <HAL_ADC_MspInit+0x140>)
 8011634:	f001 fcb4 	bl	8012fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8011638:	bf00      	nop
 801163a:	37b8      	adds	r7, #184	; 0xb8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}
 8011640:	50040000 	.word	0x50040000
 8011644:	40021000 	.word	0x40021000
 8011648:	48000800 	.word	0x48000800
 801164c:	48000400 	.word	0x48000400

08011650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b0ac      	sub	sp, #176	; 0xb0
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011658:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801165c:	2200      	movs	r2, #0
 801165e:	601a      	str	r2, [r3, #0]
 8011660:	605a      	str	r2, [r3, #4]
 8011662:	609a      	str	r2, [r3, #8]
 8011664:	60da      	str	r2, [r3, #12]
 8011666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011668:	f107 0314 	add.w	r3, r7, #20
 801166c:	2288      	movs	r2, #136	; 0x88
 801166e:	2100      	movs	r1, #0
 8011670:	4618      	mov	r0, r3
 8011672:	f005 fe54 	bl	801731e <memset>
  if(huart->Instance==USART1)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	4a21      	ldr	r2, [pc, #132]	; (8011700 <HAL_UART_MspInit+0xb0>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d13a      	bne.n	80116f6 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8011680:	2301      	movs	r3, #1
 8011682:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8011684:	2300      	movs	r3, #0
 8011686:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011688:	f107 0314 	add.w	r3, r7, #20
 801168c:	4618      	mov	r0, r3
 801168e:	f002 fde3 	bl	8014258 <HAL_RCCEx_PeriphCLKConfig>
 8011692:	4603      	mov	r3, r0
 8011694:	2b00      	cmp	r3, #0
 8011696:	d001      	beq.n	801169c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8011698:	f7ff ff0e 	bl	80114b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801169c:	4b19      	ldr	r3, [pc, #100]	; (8011704 <HAL_UART_MspInit+0xb4>)
 801169e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80116a0:	4a18      	ldr	r2, [pc, #96]	; (8011704 <HAL_UART_MspInit+0xb4>)
 80116a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80116a6:	6613      	str	r3, [r2, #96]	; 0x60
 80116a8:	4b16      	ldr	r3, [pc, #88]	; (8011704 <HAL_UART_MspInit+0xb4>)
 80116aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80116ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116b0:	613b      	str	r3, [r7, #16]
 80116b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80116b4:	4b13      	ldr	r3, [pc, #76]	; (8011704 <HAL_UART_MspInit+0xb4>)
 80116b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116b8:	4a12      	ldr	r2, [pc, #72]	; (8011704 <HAL_UART_MspInit+0xb4>)
 80116ba:	f043 0302 	orr.w	r3, r3, #2
 80116be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80116c0:	4b10      	ldr	r3, [pc, #64]	; (8011704 <HAL_UART_MspInit+0xb4>)
 80116c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116c4:	f003 0302 	and.w	r3, r3, #2
 80116c8:	60fb      	str	r3, [r7, #12]
 80116ca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80116cc:	23c0      	movs	r3, #192	; 0xc0
 80116ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80116d2:	2302      	movs	r3, #2
 80116d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116d8:	2300      	movs	r3, #0
 80116da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80116de:	2303      	movs	r3, #3
 80116e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80116e4:	2307      	movs	r3, #7
 80116e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80116ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80116ee:	4619      	mov	r1, r3
 80116f0:	4805      	ldr	r0, [pc, #20]	; (8011708 <HAL_UART_MspInit+0xb8>)
 80116f2:	f001 fc55 	bl	8012fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80116f6:	bf00      	nop
 80116f8:	37b0      	adds	r7, #176	; 0xb0
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	40013800 	.word	0x40013800
 8011704:	40021000 	.word	0x40021000
 8011708:	48000400 	.word	0x48000400

0801170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801170c:	b480      	push	{r7}
 801170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8011710:	e7fe      	b.n	8011710 <NMI_Handler+0x4>

08011712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011712:	b480      	push	{r7}
 8011714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011716:	e7fe      	b.n	8011716 <HardFault_Handler+0x4>

08011718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011718:	b480      	push	{r7}
 801171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801171c:	e7fe      	b.n	801171c <MemManage_Handler+0x4>

0801171e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801171e:	b480      	push	{r7}
 8011720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011722:	e7fe      	b.n	8011722 <BusFault_Handler+0x4>

08011724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011724:	b480      	push	{r7}
 8011726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011728:	e7fe      	b.n	8011728 <UsageFault_Handler+0x4>

0801172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801172a:	b480      	push	{r7}
 801172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801172e:	bf00      	nop
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011738:	b480      	push	{r7}
 801173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801173c:	bf00      	nop
 801173e:	46bd      	mov	sp, r7
 8011740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011744:	4770      	bx	lr

08011746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011746:	b480      	push	{r7}
 8011748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801174a:	bf00      	nop
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011758:	f000 fa86 	bl	8011c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801175c:	bf00      	nop
 801175e:	bd80      	pop	{r7, pc}

08011760 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8011764:	2020      	movs	r0, #32
 8011766:	f001 ff03 	bl	8013570 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 801176a:	4806      	ldr	r0, [pc, #24]	; (8011784 <EXTI9_5_IRQHandler+0x24>)
 801176c:	f001 fbe8 	bl	8012f40 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8011770:	2080      	movs	r0, #128	; 0x80
 8011772:	f001 fefd 	bl	8013570 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8011776:	f44f 7080 	mov.w	r0, #256	; 0x100
 801177a:	f001 fef9 	bl	8013570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 801177e:	bf00      	nop
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	200004b0 	.word	0x200004b0

08011788 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 801178c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011790:	f001 feee 	bl	8013570 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8011794:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011798:	f001 feea 	bl	8013570 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 801179c:	4806      	ldr	r0, [pc, #24]	; (80117b8 <EXTI15_10_IRQHandler+0x30>)
 801179e:	f001 fbcf 	bl	8012f40 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80117a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80117a6:	f001 fee3 	bl	8013570 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80117aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80117ae:	f001 fedf 	bl	8013570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80117b2:	bf00      	nop
 80117b4:	bd80      	pop	{r7, pc}
 80117b6:	bf00      	nop
 80117b8:	2000000c 	.word	0x2000000c

080117bc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80117c0:	4802      	ldr	r0, [pc, #8]	; (80117cc <SPI3_IRQHandler+0x10>)
 80117c2:	f003 fcc5 	bl	8015150 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80117c6:	bf00      	nop
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop
 80117cc:	200005a0 	.word	0x200005a0

080117d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b086      	sub	sp, #24
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	60f8      	str	r0, [r7, #12]
 80117d8:	60b9      	str	r1, [r7, #8]
 80117da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80117dc:	2300      	movs	r3, #0
 80117de:	617b      	str	r3, [r7, #20]
 80117e0:	e00a      	b.n	80117f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80117e2:	f3af 8000 	nop.w
 80117e6:	4601      	mov	r1, r0
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	1c5a      	adds	r2, r3, #1
 80117ec:	60ba      	str	r2, [r7, #8]
 80117ee:	b2ca      	uxtb	r2, r1
 80117f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	3301      	adds	r3, #1
 80117f6:	617b      	str	r3, [r7, #20]
 80117f8:	697a      	ldr	r2, [r7, #20]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	dbf0      	blt.n	80117e2 <_read+0x12>
	}

return len;
 8011800:	687b      	ldr	r3, [r7, #4]
}
 8011802:	4618      	mov	r0, r3
 8011804:	3718      	adds	r7, #24
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <_close>:
	}
	return len;
}

int _close(int file)
{
 801180a:	b480      	push	{r7}
 801180c:	b083      	sub	sp, #12
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
	return -1;
 8011812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011816:	4618      	mov	r0, r3
 8011818:	370c      	adds	r7, #12
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr

08011822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011822:	b480      	push	{r7}
 8011824:	b083      	sub	sp, #12
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
 801182a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011832:	605a      	str	r2, [r3, #4]
	return 0;
 8011834:	2300      	movs	r3, #0
}
 8011836:	4618      	mov	r0, r3
 8011838:	370c      	adds	r7, #12
 801183a:	46bd      	mov	sp, r7
 801183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011840:	4770      	bx	lr

08011842 <_isatty>:

int _isatty(int file)
{
 8011842:	b480      	push	{r7}
 8011844:	b083      	sub	sp, #12
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
	return 1;
 801184a:	2301      	movs	r3, #1
}
 801184c:	4618      	mov	r0, r3
 801184e:	370c      	adds	r7, #12
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr

08011858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011858:	b480      	push	{r7}
 801185a:	b085      	sub	sp, #20
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
	return 0;
 8011864:	2300      	movs	r3, #0
}
 8011866:	4618      	mov	r0, r3
 8011868:	3714      	adds	r7, #20
 801186a:	46bd      	mov	sp, r7
 801186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011870:	4770      	bx	lr
	...

08011874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b086      	sub	sp, #24
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801187c:	4a14      	ldr	r2, [pc, #80]	; (80118d0 <_sbrk+0x5c>)
 801187e:	4b15      	ldr	r3, [pc, #84]	; (80118d4 <_sbrk+0x60>)
 8011880:	1ad3      	subs	r3, r2, r3
 8011882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011888:	4b13      	ldr	r3, [pc, #76]	; (80118d8 <_sbrk+0x64>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d102      	bne.n	8011896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011890:	4b11      	ldr	r3, [pc, #68]	; (80118d8 <_sbrk+0x64>)
 8011892:	4a12      	ldr	r2, [pc, #72]	; (80118dc <_sbrk+0x68>)
 8011894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8011896:	4b10      	ldr	r3, [pc, #64]	; (80118d8 <_sbrk+0x64>)
 8011898:	681a      	ldr	r2, [r3, #0]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	4413      	add	r3, r2
 801189e:	693a      	ldr	r2, [r7, #16]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d207      	bcs.n	80118b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80118a4:	f005 fb36 	bl	8016f14 <__errno>
 80118a8:	4603      	mov	r3, r0
 80118aa:	220c      	movs	r2, #12
 80118ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80118ae:	f04f 33ff 	mov.w	r3, #4294967295
 80118b2:	e009      	b.n	80118c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80118b4:	4b08      	ldr	r3, [pc, #32]	; (80118d8 <_sbrk+0x64>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80118ba:	4b07      	ldr	r3, [pc, #28]	; (80118d8 <_sbrk+0x64>)
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	4413      	add	r3, r2
 80118c2:	4a05      	ldr	r2, [pc, #20]	; (80118d8 <_sbrk+0x64>)
 80118c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80118c6:	68fb      	ldr	r3, [r7, #12]
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3718      	adds	r7, #24
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	20018000 	.word	0x20018000
 80118d4:	00000400 	.word	0x00000400
 80118d8:	200001a8 	.word	0x200001a8
 80118dc:	20000628 	.word	0x20000628

080118e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80118e0:	b480      	push	{r7}
 80118e2:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 80118e4:	4b16      	ldr	r3, [pc, #88]	; (8011940 <SystemInit+0x60>)
 80118e6:	4a17      	ldr	r2, [pc, #92]	; (8011944 <SystemInit+0x64>)
 80118e8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80118ea:	4b15      	ldr	r3, [pc, #84]	; (8011940 <SystemInit+0x60>)
 80118ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118f0:	4a13      	ldr	r2, [pc, #76]	; (8011940 <SystemInit+0x60>)
 80118f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80118f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80118fa:	4b13      	ldr	r3, [pc, #76]	; (8011948 <SystemInit+0x68>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	4a12      	ldr	r2, [pc, #72]	; (8011948 <SystemInit+0x68>)
 8011900:	f043 0301 	orr.w	r3, r3, #1
 8011904:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8011906:	4b10      	ldr	r3, [pc, #64]	; (8011948 <SystemInit+0x68>)
 8011908:	2200      	movs	r2, #0
 801190a:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801190c:	4b0e      	ldr	r3, [pc, #56]	; (8011948 <SystemInit+0x68>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	4a0d      	ldr	r2, [pc, #52]	; (8011948 <SystemInit+0x68>)
 8011912:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8011916:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 801191a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801191c:	4b0a      	ldr	r3, [pc, #40]	; (8011948 <SystemInit+0x68>)
 801191e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011922:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8011924:	4b08      	ldr	r3, [pc, #32]	; (8011948 <SystemInit+0x68>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4a07      	ldr	r2, [pc, #28]	; (8011948 <SystemInit+0x68>)
 801192a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801192e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8011930:	4b05      	ldr	r3, [pc, #20]	; (8011948 <SystemInit+0x68>)
 8011932:	2200      	movs	r2, #0
 8011934:	619a      	str	r2, [r3, #24]
}
 8011936:	bf00      	nop
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr
 8011940:	e000ed00 	.word	0xe000ed00
 8011944:	08010000 	.word	0x08010000
 8011948:	40021000 	.word	0x40021000

0801194c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 801194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011984 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8011950:	f7ff ffc6 	bl	80118e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8011954:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8011956:	e003      	b.n	8011960 <LoopCopyDataInit>

08011958 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8011958:	4b0b      	ldr	r3, [pc, #44]	; (8011988 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801195a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801195c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801195e:	3104      	adds	r1, #4

08011960 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8011960:	480a      	ldr	r0, [pc, #40]	; (801198c <LoopForever+0xa>)
	ldr	r3, =_edata
 8011962:	4b0b      	ldr	r3, [pc, #44]	; (8011990 <LoopForever+0xe>)
	adds	r2, r0, r1
 8011964:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8011966:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8011968:	d3f6      	bcc.n	8011958 <CopyDataInit>
	ldr	r2, =_sbss
 801196a:	4a0a      	ldr	r2, [pc, #40]	; (8011994 <LoopForever+0x12>)
	b	LoopFillZerobss
 801196c:	e002      	b.n	8011974 <LoopFillZerobss>

0801196e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801196e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8011970:	f842 3b04 	str.w	r3, [r2], #4

08011974 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8011974:	4b08      	ldr	r3, [pc, #32]	; (8011998 <LoopForever+0x16>)
	cmp	r2, r3
 8011976:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8011978:	d3f9      	bcc.n	801196e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801197a:	f005 fc9b 	bl	80172b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801197e:	f7ff faab 	bl	8010ed8 <main>

08011982 <LoopForever>:

LoopForever:
    b LoopForever
 8011982:	e7fe      	b.n	8011982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8011984:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8011988:	08018280 	.word	0x08018280
	ldr	r0, =_sdata
 801198c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8011990:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8011994:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8011998:	20000628 	.word	0x20000628

0801199c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801199c:	e7fe      	b.n	801199c <ADC1_2_IRQHandler>
	...

080119a0 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	4603      	mov	r3, r0
 80119a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80119aa:	79fb      	ldrb	r3, [r7, #7]
 80119ac:	4a06      	ldr	r2, [pc, #24]	; (80119c8 <BSP_LED_Toggle+0x28>)
 80119ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80119b6:	4611      	mov	r1, r2
 80119b8:	4618      	mov	r0, r3
 80119ba:	f001 fdbf 	bl	801353c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80119be:	2300      	movs	r3, #0
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3708      	adds	r7, #8
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	20000008 	.word	0x20000008

080119cc <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80119d2:	2300      	movs	r3, #0
 80119d4:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 80119d6:	4b12      	ldr	r3, [pc, #72]	; (8011a20 <BSP_SPI3_Init+0x54>)
 80119d8:	4a12      	ldr	r2, [pc, #72]	; (8011a24 <BSP_SPI3_Init+0x58>)
 80119da:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80119dc:	4b12      	ldr	r3, [pc, #72]	; (8011a28 <BSP_SPI3_Init+0x5c>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	1c5a      	adds	r2, r3, #1
 80119e2:	4911      	ldr	r1, [pc, #68]	; (8011a28 <BSP_SPI3_Init+0x5c>)
 80119e4:	600a      	str	r2, [r1, #0]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d114      	bne.n	8011a14 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80119ea:	480d      	ldr	r0, [pc, #52]	; (8011a20 <BSP_SPI3_Init+0x54>)
 80119ec:	f003 fcba 	bl	8015364 <HAL_SPI_GetState>
 80119f0:	4603      	mov	r3, r0
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d10e      	bne.n	8011a14 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 80119f6:	480a      	ldr	r0, [pc, #40]	; (8011a20 <BSP_SPI3_Init+0x54>)
 80119f8:	f000 f882 	bl	8011b00 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d108      	bne.n	8011a14 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8011a02:	4807      	ldr	r0, [pc, #28]	; (8011a20 <BSP_SPI3_Init+0x54>)
 8011a04:	f000 f83a 	bl	8011a7c <MX_SPI3_Init>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d002      	beq.n	8011a14 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8011a0e:	f06f 0307 	mvn.w	r3, #7
 8011a12:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8011a14:	687b      	ldr	r3, [r7, #4]
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3708      	adds	r7, #8
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}
 8011a1e:	bf00      	nop
 8011a20:	200005a0 	.word	0x200005a0
 8011a24:	40003c00 	.word	0x40003c00
 8011a28:	200001ac 	.word	0x200001ac

08011a2c <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b088      	sub	sp, #32
 8011a30:	af02      	add	r7, sp, #8
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	60b9      	str	r1, [r7, #8]
 8011a36:	4613      	mov	r3, r2
 8011a38:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8011a3e:	88fb      	ldrh	r3, [r7, #6]
 8011a40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011a44:	9200      	str	r2, [sp, #0]
 8011a46:	68ba      	ldr	r2, [r7, #8]
 8011a48:	68f9      	ldr	r1, [r7, #12]
 8011a4a:	4807      	ldr	r0, [pc, #28]	; (8011a68 <BSP_SPI3_SendRecv+0x3c>)
 8011a4c:	f003 f96d 	bl	8014d2a <HAL_SPI_TransmitReceive>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d002      	beq.n	8011a5c <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8011a56:	f06f 0305 	mvn.w	r3, #5
 8011a5a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8011a5c:	697b      	ldr	r3, [r7, #20]
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3718      	adds	r7, #24
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	200005a0 	.word	0x200005a0

08011a6c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011a70:	f000 f90e 	bl	8011c90 <HAL_GetTick>
 8011a74:	4603      	mov	r3, r0
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	bd80      	pop	{r7, pc}
	...

08011a7c <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011a84:	2300      	movs	r3, #0
 8011a86:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	4a1c      	ldr	r2, [pc, #112]	; (8011afc <MX_SPI3_Init+0x80>)
 8011a8c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011a94:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8011aa2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2200      	movs	r2, #0
 8011aae:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ab6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2230      	movs	r2, #48	; 0x30
 8011abc:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2200      	movs	r2, #0
 8011ace:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2207      	movs	r2, #7
 8011ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2208      	movs	r2, #8
 8011ae0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f003 f874 	bl	8014bd0 <HAL_SPI_Init>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d001      	beq.n	8011af2 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8011aee:	2301      	movs	r3, #1
 8011af0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3710      	adds	r7, #16
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	40003c00 	.word	0x40003c00

08011b00 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b08a      	sub	sp, #40	; 0x28
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8011b08:	4b2b      	ldr	r3, [pc, #172]	; (8011bb8 <SPI3_MspInit+0xb8>)
 8011b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b0c:	4a2a      	ldr	r2, [pc, #168]	; (8011bb8 <SPI3_MspInit+0xb8>)
 8011b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b12:	6593      	str	r3, [r2, #88]	; 0x58
 8011b14:	4b28      	ldr	r3, [pc, #160]	; (8011bb8 <SPI3_MspInit+0xb8>)
 8011b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b1c:	613b      	str	r3, [r7, #16]
 8011b1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011b20:	4b25      	ldr	r3, [pc, #148]	; (8011bb8 <SPI3_MspInit+0xb8>)
 8011b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b24:	4a24      	ldr	r2, [pc, #144]	; (8011bb8 <SPI3_MspInit+0xb8>)
 8011b26:	f043 0304 	orr.w	r3, r3, #4
 8011b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b2c:	4b22      	ldr	r3, [pc, #136]	; (8011bb8 <SPI3_MspInit+0xb8>)
 8011b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b30:	f003 0304 	and.w	r3, r3, #4
 8011b34:	60fb      	str	r3, [r7, #12]
 8011b36:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8011b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b3e:	2302      	movs	r3, #2
 8011b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b42:	2300      	movs	r3, #0
 8011b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b46:	2303      	movs	r3, #3
 8011b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8011b4a:	2306      	movs	r3, #6
 8011b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8011b4e:	f107 0314 	add.w	r3, r7, #20
 8011b52:	4619      	mov	r1, r3
 8011b54:	4819      	ldr	r0, [pc, #100]	; (8011bbc <SPI3_MspInit+0xbc>)
 8011b56:	f001 fa23 	bl	8012fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8011b5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b60:	2302      	movs	r3, #2
 8011b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b64:	2300      	movs	r3, #0
 8011b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b68:	2303      	movs	r3, #3
 8011b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8011b6c:	2306      	movs	r3, #6
 8011b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8011b70:	f107 0314 	add.w	r3, r7, #20
 8011b74:	4619      	mov	r1, r3
 8011b76:	4811      	ldr	r0, [pc, #68]	; (8011bbc <SPI3_MspInit+0xbc>)
 8011b78:	f001 fa12 	bl	8012fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8011b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b82:	2302      	movs	r3, #2
 8011b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b86:	2300      	movs	r3, #0
 8011b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8011b8e:	2306      	movs	r3, #6
 8011b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8011b92:	f107 0314 	add.w	r3, r7, #20
 8011b96:	4619      	mov	r1, r3
 8011b98:	4808      	ldr	r0, [pc, #32]	; (8011bbc <SPI3_MspInit+0xbc>)
 8011b9a:	f001 fa01 	bl	8012fa0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	2100      	movs	r1, #0
 8011ba2:	2033      	movs	r0, #51	; 0x33
 8011ba4:	f001 f927 	bl	8012df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8011ba8:	2033      	movs	r0, #51	; 0x33
 8011baa:	f001 f940 	bl	8012e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8011bae:	bf00      	nop
 8011bb0:	3728      	adds	r7, #40	; 0x28
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	40021000 	.word	0x40021000
 8011bbc:	48000800 	.word	0x48000800

08011bc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011bca:	2003      	movs	r0, #3
 8011bcc:	f001 f908 	bl	8012de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011bd0:	2000      	movs	r0, #0
 8011bd2:	f000 f80d 	bl	8011bf0 <HAL_InitTick>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d002      	beq.n	8011be2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8011bdc:	2301      	movs	r3, #1
 8011bde:	71fb      	strb	r3, [r7, #7]
 8011be0:	e001      	b.n	8011be6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011be2:	f7ff fc6f 	bl	80114c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8011be6:	79fb      	ldrb	r3, [r7, #7]
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3708      	adds	r7, #8
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8011bfc:	4b17      	ldr	r3, [pc, #92]	; (8011c5c <HAL_InitTick+0x6c>)
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d023      	beq.n	8011c4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8011c04:	4b16      	ldr	r3, [pc, #88]	; (8011c60 <HAL_InitTick+0x70>)
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	4b14      	ldr	r3, [pc, #80]	; (8011c5c <HAL_InitTick+0x6c>)
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f001 f915 	bl	8012e4a <HAL_SYSTICK_Config>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d10f      	bne.n	8011c46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2b0f      	cmp	r3, #15
 8011c2a:	d809      	bhi.n	8011c40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	6879      	ldr	r1, [r7, #4]
 8011c30:	f04f 30ff 	mov.w	r0, #4294967295
 8011c34:	f001 f8df 	bl	8012df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011c38:	4a0a      	ldr	r2, [pc, #40]	; (8011c64 <HAL_InitTick+0x74>)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6013      	str	r3, [r2, #0]
 8011c3e:	e007      	b.n	8011c50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8011c40:	2301      	movs	r3, #1
 8011c42:	73fb      	strb	r3, [r7, #15]
 8011c44:	e004      	b.n	8011c50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8011c46:	2301      	movs	r3, #1
 8011c48:	73fb      	strb	r3, [r7, #15]
 8011c4a:	e001      	b.n	8011c50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8011c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3710      	adds	r7, #16
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}
 8011c5a:	bf00      	nop
 8011c5c:	20000018 	.word	0x20000018
 8011c60:	20000004 	.word	0x20000004
 8011c64:	20000014 	.word	0x20000014

08011c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8011c6c:	4b06      	ldr	r3, [pc, #24]	; (8011c88 <HAL_IncTick+0x20>)
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	461a      	mov	r2, r3
 8011c72:	4b06      	ldr	r3, [pc, #24]	; (8011c8c <HAL_IncTick+0x24>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	4413      	add	r3, r2
 8011c78:	4a04      	ldr	r2, [pc, #16]	; (8011c8c <HAL_IncTick+0x24>)
 8011c7a:	6013      	str	r3, [r2, #0]
}
 8011c7c:	bf00      	nop
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop
 8011c88:	20000018 	.word	0x20000018
 8011c8c:	20000604 	.word	0x20000604

08011c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011c90:	b480      	push	{r7}
 8011c92:	af00      	add	r7, sp, #0
  return uwTick;
 8011c94:	4b03      	ldr	r3, [pc, #12]	; (8011ca4 <HAL_GetTick+0x14>)
 8011c96:	681b      	ldr	r3, [r3, #0]
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop
 8011ca4:	20000604 	.word	0x20000604

08011ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b084      	sub	sp, #16
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011cb0:	f7ff ffee 	bl	8011c90 <HAL_GetTick>
 8011cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc0:	d005      	beq.n	8011cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8011cc2:	4b0a      	ldr	r3, [pc, #40]	; (8011cec <HAL_Delay+0x44>)
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	4413      	add	r3, r2
 8011ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011cce:	bf00      	nop
 8011cd0:	f7ff ffde 	bl	8011c90 <HAL_GetTick>
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	1ad3      	subs	r3, r2, r3
 8011cda:	68fa      	ldr	r2, [r7, #12]
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d8f7      	bhi.n	8011cd0 <HAL_Delay+0x28>
  {
  }
}
 8011ce0:	bf00      	nop
 8011ce2:	bf00      	nop
 8011ce4:	3710      	adds	r7, #16
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	20000018 	.word	0x20000018

08011cf0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	431a      	orrs	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	609a      	str	r2, [r3, #8]
}
 8011d0a:	bf00      	nop
 8011d0c:	370c      	adds	r7, #12
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d14:	4770      	bx	lr

08011d16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8011d16:	b480      	push	{r7}
 8011d18:	b083      	sub	sp, #12
 8011d1a:	af00      	add	r7, sp, #0
 8011d1c:	6078      	str	r0, [r7, #4]
 8011d1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	689b      	ldr	r3, [r3, #8]
 8011d24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	431a      	orrs	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	609a      	str	r2, [r3, #8]
}
 8011d30:	bf00      	nop
 8011d32:	370c      	adds	r7, #12
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr

08011d3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	689b      	ldr	r3, [r3, #8]
 8011d48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b087      	sub	sp, #28
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	60f8      	str	r0, [r7, #12]
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	607a      	str	r2, [r7, #4]
 8011d64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	3360      	adds	r3, #96	; 0x60
 8011d6a:	461a      	mov	r2, r3
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	009b      	lsls	r3, r3, #2
 8011d70:	4413      	add	r3, r2
 8011d72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011d74:	697b      	ldr	r3, [r7, #20]
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	4b08      	ldr	r3, [pc, #32]	; (8011d9c <LL_ADC_SetOffset+0x44>)
 8011d7a:	4013      	ands	r3, r2
 8011d7c:	687a      	ldr	r2, [r7, #4]
 8011d7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8011d82:	683a      	ldr	r2, [r7, #0]
 8011d84:	430a      	orrs	r2, r1
 8011d86:	4313      	orrs	r3, r2
 8011d88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8011d90:	bf00      	nop
 8011d92:	371c      	adds	r7, #28
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr
 8011d9c:	03fff000 	.word	0x03fff000

08011da0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b085      	sub	sp, #20
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	3360      	adds	r3, #96	; 0x60
 8011dae:	461a      	mov	r2, r3
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	4413      	add	r3, r2
 8011db6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3714      	adds	r7, #20
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr

08011dcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b087      	sub	sp, #28
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	60b9      	str	r1, [r7, #8]
 8011dd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	3360      	adds	r3, #96	; 0x60
 8011ddc:	461a      	mov	r2, r3
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	009b      	lsls	r3, r3, #2
 8011de2:	4413      	add	r3, r2
 8011de4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	431a      	orrs	r2, r3
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8011df6:	bf00      	nop
 8011df8:	371c      	adds	r7, #28
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr

08011e02 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8011e02:	b480      	push	{r7}
 8011e04:	b087      	sub	sp, #28
 8011e06:	af00      	add	r7, sp, #0
 8011e08:	60f8      	str	r0, [r7, #12]
 8011e0a:	60b9      	str	r1, [r7, #8]
 8011e0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	3330      	adds	r3, #48	; 0x30
 8011e12:	461a      	mov	r2, r3
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	0a1b      	lsrs	r3, r3, #8
 8011e18:	009b      	lsls	r3, r3, #2
 8011e1a:	f003 030c 	and.w	r3, r3, #12
 8011e1e:	4413      	add	r3, r2
 8011e20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	681a      	ldr	r2, [r3, #0]
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	f003 031f 	and.w	r3, r3, #31
 8011e2c:	211f      	movs	r1, #31
 8011e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8011e32:	43db      	mvns	r3, r3
 8011e34:	401a      	ands	r2, r3
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	0e9b      	lsrs	r3, r3, #26
 8011e3a:	f003 011f 	and.w	r1, r3, #31
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	f003 031f 	and.w	r3, r3, #31
 8011e44:	fa01 f303 	lsl.w	r3, r1, r3
 8011e48:	431a      	orrs	r2, r3
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8011e4e:	bf00      	nop
 8011e50:	371c      	adds	r7, #28
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr

08011e5a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8011e5a:	b480      	push	{r7}
 8011e5c:	b087      	sub	sp, #28
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	60f8      	str	r0, [r7, #12]
 8011e62:	60b9      	str	r1, [r7, #8]
 8011e64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	3314      	adds	r3, #20
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	0e5b      	lsrs	r3, r3, #25
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	f003 0304 	and.w	r3, r3, #4
 8011e76:	4413      	add	r3, r2
 8011e78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	681a      	ldr	r2, [r3, #0]
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	0d1b      	lsrs	r3, r3, #20
 8011e82:	f003 031f 	and.w	r3, r3, #31
 8011e86:	2107      	movs	r1, #7
 8011e88:	fa01 f303 	lsl.w	r3, r1, r3
 8011e8c:	43db      	mvns	r3, r3
 8011e8e:	401a      	ands	r2, r3
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	0d1b      	lsrs	r3, r3, #20
 8011e94:	f003 031f 	and.w	r3, r3, #31
 8011e98:	6879      	ldr	r1, [r7, #4]
 8011e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8011e9e:	431a      	orrs	r2, r3
 8011ea0:	697b      	ldr	r3, [r7, #20]
 8011ea2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8011ea4:	bf00      	nop
 8011ea6:	371c      	adds	r7, #28
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr

08011eb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ec8:	43db      	mvns	r3, r3
 8011eca:	401a      	ands	r2, r3
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f003 0318 	and.w	r3, r3, #24
 8011ed2:	4908      	ldr	r1, [pc, #32]	; (8011ef4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8011ed4:	40d9      	lsrs	r1, r3
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	400b      	ands	r3, r1
 8011eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ede:	431a      	orrs	r2, r3
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8011ee6:	bf00      	nop
 8011ee8:	3714      	adds	r7, #20
 8011eea:	46bd      	mov	sp, r7
 8011eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef0:	4770      	bx	lr
 8011ef2:	bf00      	nop
 8011ef4:	0007ffff 	.word	0x0007ffff

08011ef8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	689b      	ldr	r3, [r3, #8]
 8011f04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8011f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	6093      	str	r3, [r2, #8]
}
 8011f10:	bf00      	nop
 8011f12:	370c      	adds	r7, #12
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr

08011f1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	689b      	ldr	r3, [r3, #8]
 8011f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f30:	d101      	bne.n	8011f36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8011f32:	2301      	movs	r3, #1
 8011f34:	e000      	b.n	8011f38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8011f36:	2300      	movs	r3, #0
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	370c      	adds	r7, #12
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f42:	4770      	bx	lr

08011f44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8011f44:	b480      	push	{r7}
 8011f46:	b083      	sub	sp, #12
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	689b      	ldr	r3, [r3, #8]
 8011f50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8011f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011f58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8011f60:	bf00      	nop
 8011f62:	370c      	adds	r7, #12
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr

08011f6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	689b      	ldr	r3, [r3, #8]
 8011f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011f80:	d101      	bne.n	8011f86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8011f82:	2301      	movs	r3, #1
 8011f84:	e000      	b.n	8011f88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8011f86:	2300      	movs	r3, #0
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	370c      	adds	r7, #12
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr

08011f94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b083      	sub	sp, #12
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	689b      	ldr	r3, [r3, #8]
 8011fa0:	f003 0301 	and.w	r3, r3, #1
 8011fa4:	2b01      	cmp	r3, #1
 8011fa6:	d101      	bne.n	8011fac <LL_ADC_IsEnabled+0x18>
 8011fa8:	2301      	movs	r3, #1
 8011faa:	e000      	b.n	8011fae <LL_ADC_IsEnabled+0x1a>
 8011fac:	2300      	movs	r3, #0
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	370c      	adds	r7, #12
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr

08011fba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8011fba:	b480      	push	{r7}
 8011fbc:	b083      	sub	sp, #12
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	689b      	ldr	r3, [r3, #8]
 8011fc6:	f003 0304 	and.w	r3, r3, #4
 8011fca:	2b04      	cmp	r3, #4
 8011fcc:	d101      	bne.n	8011fd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8011fce:	2301      	movs	r3, #1
 8011fd0:	e000      	b.n	8011fd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8011fd2:	2300      	movs	r3, #0
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	370c      	adds	r7, #12
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	689b      	ldr	r3, [r3, #8]
 8011fec:	f003 0308 	and.w	r3, r3, #8
 8011ff0:	2b08      	cmp	r3, #8
 8011ff2:	d101      	bne.n	8011ff8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	e000      	b.n	8011ffa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8011ff8:	2300      	movs	r3, #0
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	370c      	adds	r7, #12
 8011ffe:	46bd      	mov	sp, r7
 8012000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012004:	4770      	bx	lr
	...

08012008 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8012008:	b590      	push	{r4, r7, lr}
 801200a:	b089      	sub	sp, #36	; 0x24
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012010:	2300      	movs	r3, #0
 8012012:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8012014:	2300      	movs	r3, #0
 8012016:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d101      	bne.n	8012022 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 801201e:	2301      	movs	r3, #1
 8012020:	e136      	b.n	8012290 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	691b      	ldr	r3, [r3, #16]
 8012026:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801202c:	2b00      	cmp	r3, #0
 801202e:	d109      	bne.n	8012044 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f7ff fa6b 	bl	801150c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2200      	movs	r2, #0
 801203a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2200      	movs	r2, #0
 8012040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4618      	mov	r0, r3
 801204a:	f7ff ff67 	bl	8011f1c <LL_ADC_IsDeepPowerDownEnabled>
 801204e:	4603      	mov	r3, r0
 8012050:	2b00      	cmp	r3, #0
 8012052:	d004      	beq.n	801205e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	4618      	mov	r0, r3
 801205a:	f7ff ff4d 	bl	8011ef8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	4618      	mov	r0, r3
 8012064:	f7ff ff82 	bl	8011f6c <LL_ADC_IsInternalRegulatorEnabled>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d115      	bne.n	801209a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	4618      	mov	r0, r3
 8012074:	f7ff ff66 	bl	8011f44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012078:	4b87      	ldr	r3, [pc, #540]	; (8012298 <HAL_ADC_Init+0x290>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	099b      	lsrs	r3, r3, #6
 801207e:	4a87      	ldr	r2, [pc, #540]	; (801229c <HAL_ADC_Init+0x294>)
 8012080:	fba2 2303 	umull	r2, r3, r2, r3
 8012084:	099b      	lsrs	r3, r3, #6
 8012086:	3301      	adds	r3, #1
 8012088:	005b      	lsls	r3, r3, #1
 801208a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 801208c:	e002      	b.n	8012094 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	3b01      	subs	r3, #1
 8012092:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d1f9      	bne.n	801208e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	4618      	mov	r0, r3
 80120a0:	f7ff ff64 	bl	8011f6c <LL_ADC_IsInternalRegulatorEnabled>
 80120a4:	4603      	mov	r3, r0
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d10d      	bne.n	80120c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120ae:	f043 0210 	orr.w	r2, r3, #16
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120ba:	f043 0201 	orr.w	r2, r3, #1
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80120c2:	2301      	movs	r3, #1
 80120c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7ff ff75 	bl	8011fba <LL_ADC_REG_IsConversionOngoing>
 80120d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120d6:	f003 0310 	and.w	r3, r3, #16
 80120da:	2b00      	cmp	r3, #0
 80120dc:	f040 80cf 	bne.w	801227e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	f040 80cb 	bne.w	801227e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80120f0:	f043 0202 	orr.w	r2, r3, #2
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7ff ff49 	bl	8011f94 <LL_ADC_IsEnabled>
 8012102:	4603      	mov	r3, r0
 8012104:	2b00      	cmp	r3, #0
 8012106:	d115      	bne.n	8012134 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012108:	4865      	ldr	r0, [pc, #404]	; (80122a0 <HAL_ADC_Init+0x298>)
 801210a:	f7ff ff43 	bl	8011f94 <LL_ADC_IsEnabled>
 801210e:	4604      	mov	r4, r0
 8012110:	4864      	ldr	r0, [pc, #400]	; (80122a4 <HAL_ADC_Init+0x29c>)
 8012112:	f7ff ff3f 	bl	8011f94 <LL_ADC_IsEnabled>
 8012116:	4603      	mov	r3, r0
 8012118:	431c      	orrs	r4, r3
 801211a:	4863      	ldr	r0, [pc, #396]	; (80122a8 <HAL_ADC_Init+0x2a0>)
 801211c:	f7ff ff3a 	bl	8011f94 <LL_ADC_IsEnabled>
 8012120:	4603      	mov	r3, r0
 8012122:	4323      	orrs	r3, r4
 8012124:	2b00      	cmp	r3, #0
 8012126:	d105      	bne.n	8012134 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	4619      	mov	r1, r3
 801212e:	485f      	ldr	r0, [pc, #380]	; (80122ac <HAL_ADC_Init+0x2a4>)
 8012130:	f7ff fdde 	bl	8011cf0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	7e5b      	ldrb	r3, [r3, #25]
 8012138:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801213e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8012144:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 801214a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012152:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8012154:	4313      	orrs	r3, r2
 8012156:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801215e:	2b01      	cmp	r3, #1
 8012160:	d106      	bne.n	8012170 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012166:	3b01      	subs	r3, #1
 8012168:	045b      	lsls	r3, r3, #17
 801216a:	69ba      	ldr	r2, [r7, #24]
 801216c:	4313      	orrs	r3, r2
 801216e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012174:	2b00      	cmp	r3, #0
 8012176:	d009      	beq.n	801218c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801217c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012184:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8012186:	69ba      	ldr	r2, [r7, #24]
 8012188:	4313      	orrs	r3, r2
 801218a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	68da      	ldr	r2, [r3, #12]
 8012192:	4b47      	ldr	r3, [pc, #284]	; (80122b0 <HAL_ADC_Init+0x2a8>)
 8012194:	4013      	ands	r3, r2
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	6812      	ldr	r2, [r2, #0]
 801219a:	69b9      	ldr	r1, [r7, #24]
 801219c:	430b      	orrs	r3, r1
 801219e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7ff ff08 	bl	8011fba <LL_ADC_REG_IsConversionOngoing>
 80121aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7ff ff15 	bl	8011fe0 <LL_ADC_INJ_IsConversionOngoing>
 80121b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d13d      	bne.n	801223a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d13a      	bne.n	801223a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80121c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80121d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80121d2:	4313      	orrs	r3, r2
 80121d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80121e0:	f023 0302 	bic.w	r3, r3, #2
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	6812      	ldr	r2, [r2, #0]
 80121e8:	69b9      	ldr	r1, [r7, #24]
 80121ea:	430b      	orrs	r3, r1
 80121ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80121f4:	2b01      	cmp	r3, #1
 80121f6:	d118      	bne.n	801222a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	691b      	ldr	r3, [r3, #16]
 80121fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012202:	f023 0304 	bic.w	r3, r3, #4
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801220a:	687a      	ldr	r2, [r7, #4]
 801220c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801220e:	4311      	orrs	r1, r2
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012214:	4311      	orrs	r1, r2
 8012216:	687a      	ldr	r2, [r7, #4]
 8012218:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801221a:	430a      	orrs	r2, r1
 801221c:	431a      	orrs	r2, r3
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	f042 0201 	orr.w	r2, r2, #1
 8012226:	611a      	str	r2, [r3, #16]
 8012228:	e007      	b.n	801223a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	691a      	ldr	r2, [r3, #16]
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f022 0201 	bic.w	r2, r2, #1
 8012238:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	691b      	ldr	r3, [r3, #16]
 801223e:	2b01      	cmp	r3, #1
 8012240:	d10c      	bne.n	801225c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012248:	f023 010f 	bic.w	r1, r3, #15
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	69db      	ldr	r3, [r3, #28]
 8012250:	1e5a      	subs	r2, r3, #1
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	430a      	orrs	r2, r1
 8012258:	631a      	str	r2, [r3, #48]	; 0x30
 801225a:	e007      	b.n	801226c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	f022 020f 	bic.w	r2, r2, #15
 801226a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012270:	f023 0303 	bic.w	r3, r3, #3
 8012274:	f043 0201 	orr.w	r2, r3, #1
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	655a      	str	r2, [r3, #84]	; 0x54
 801227c:	e007      	b.n	801228e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012282:	f043 0210 	orr.w	r2, r3, #16
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 801228a:	2301      	movs	r3, #1
 801228c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 801228e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012290:	4618      	mov	r0, r3
 8012292:	3724      	adds	r7, #36	; 0x24
 8012294:	46bd      	mov	sp, r7
 8012296:	bd90      	pop	{r4, r7, pc}
 8012298:	20000004 	.word	0x20000004
 801229c:	053e2d63 	.word	0x053e2d63
 80122a0:	50040000 	.word	0x50040000
 80122a4:	50040100 	.word	0x50040100
 80122a8:	50040200 	.word	0x50040200
 80122ac:	50040300 	.word	0x50040300
 80122b0:	fff0c007 	.word	0xfff0c007

080122b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b0b6      	sub	sp, #216	; 0xd8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80122be:	2300      	movs	r3, #0
 80122c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80122c4:	2300      	movs	r3, #0
 80122c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80122ce:	2b01      	cmp	r3, #1
 80122d0:	d101      	bne.n	80122d6 <HAL_ADC_ConfigChannel+0x22>
 80122d2:	2302      	movs	r3, #2
 80122d4:	e3c7      	b.n	8012a66 <HAL_ADC_ConfigChannel+0x7b2>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2201      	movs	r2, #1
 80122da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7ff fe69 	bl	8011fba <LL_ADC_REG_IsConversionOngoing>
 80122e8:	4603      	mov	r3, r0
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f040 83a8 	bne.w	8012a40 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	685b      	ldr	r3, [r3, #4]
 80122f4:	2b05      	cmp	r3, #5
 80122f6:	d824      	bhi.n	8012342 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	3b02      	subs	r3, #2
 80122fe:	2b03      	cmp	r3, #3
 8012300:	d81b      	bhi.n	801233a <HAL_ADC_ConfigChannel+0x86>
 8012302:	a201      	add	r2, pc, #4	; (adr r2, 8012308 <HAL_ADC_ConfigChannel+0x54>)
 8012304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012308:	08012319 	.word	0x08012319
 801230c:	08012321 	.word	0x08012321
 8012310:	08012329 	.word	0x08012329
 8012314:	08012331 	.word	0x08012331
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	220c      	movs	r2, #12
 801231c:	605a      	str	r2, [r3, #4]
          break;
 801231e:	e011      	b.n	8012344 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	2212      	movs	r2, #18
 8012324:	605a      	str	r2, [r3, #4]
          break;
 8012326:	e00d      	b.n	8012344 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	2218      	movs	r2, #24
 801232c:	605a      	str	r2, [r3, #4]
          break;
 801232e:	e009      	b.n	8012344 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012336:	605a      	str	r2, [r3, #4]
          break;
 8012338:	e004      	b.n	8012344 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	2206      	movs	r2, #6
 801233e:	605a      	str	r2, [r3, #4]
          break;
 8012340:	e000      	b.n	8012344 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8012342:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6818      	ldr	r0, [r3, #0]
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	6859      	ldr	r1, [r3, #4]
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	461a      	mov	r2, r3
 8012352:	f7ff fd56 	bl	8011e02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	4618      	mov	r0, r3
 801235c:	f7ff fe2d 	bl	8011fba <LL_ADC_REG_IsConversionOngoing>
 8012360:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	4618      	mov	r0, r3
 801236a:	f7ff fe39 	bl	8011fe0 <LL_ADC_INJ_IsConversionOngoing>
 801236e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8012372:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012376:	2b00      	cmp	r3, #0
 8012378:	f040 81a6 	bne.w	80126c8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801237c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012380:	2b00      	cmp	r3, #0
 8012382:	f040 81a1 	bne.w	80126c8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6818      	ldr	r0, [r3, #0]
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	6819      	ldr	r1, [r3, #0]
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	689b      	ldr	r3, [r3, #8]
 8012392:	461a      	mov	r2, r3
 8012394:	f7ff fd61 	bl	8011e5a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	695a      	ldr	r2, [r3, #20]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	68db      	ldr	r3, [r3, #12]
 80123a2:	08db      	lsrs	r3, r3, #3
 80123a4:	f003 0303 	and.w	r3, r3, #3
 80123a8:	005b      	lsls	r3, r3, #1
 80123aa:	fa02 f303 	lsl.w	r3, r2, r3
 80123ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	691b      	ldr	r3, [r3, #16]
 80123b6:	2b04      	cmp	r3, #4
 80123b8:	d00a      	beq.n	80123d0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6818      	ldr	r0, [r3, #0]
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	6919      	ldr	r1, [r3, #16]
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	681a      	ldr	r2, [r3, #0]
 80123c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123ca:	f7ff fcc5 	bl	8011d58 <LL_ADC_SetOffset>
 80123ce:	e17b      	b.n	80126c8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2100      	movs	r1, #0
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7ff fce2 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 80123dc:	4603      	mov	r3, r0
 80123de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d10a      	bne.n	80123fc <HAL_ADC_ConfigChannel+0x148>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	2100      	movs	r1, #0
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7ff fcd7 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 80123f2:	4603      	mov	r3, r0
 80123f4:	0e9b      	lsrs	r3, r3, #26
 80123f6:	f003 021f 	and.w	r2, r3, #31
 80123fa:	e01e      	b.n	801243a <HAL_ADC_ConfigChannel+0x186>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2100      	movs	r1, #0
 8012402:	4618      	mov	r0, r3
 8012404:	f7ff fccc 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 8012408:	4603      	mov	r3, r0
 801240a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801240e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012412:	fa93 f3a3 	rbit	r3, r3
 8012416:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801241a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801241e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8012422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012426:	2b00      	cmp	r3, #0
 8012428:	d101      	bne.n	801242e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 801242a:	2320      	movs	r3, #32
 801242c:	e004      	b.n	8012438 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 801242e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012432:	fab3 f383 	clz	r3, r3
 8012436:	b2db      	uxtb	r3, r3
 8012438:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012442:	2b00      	cmp	r3, #0
 8012444:	d105      	bne.n	8012452 <HAL_ADC_ConfigChannel+0x19e>
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	0e9b      	lsrs	r3, r3, #26
 801244c:	f003 031f 	and.w	r3, r3, #31
 8012450:	e018      	b.n	8012484 <HAL_ADC_ConfigChannel+0x1d0>
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801245a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801245e:	fa93 f3a3 	rbit	r3, r3
 8012462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8012466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801246a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801246e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012472:	2b00      	cmp	r3, #0
 8012474:	d101      	bne.n	801247a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8012476:	2320      	movs	r3, #32
 8012478:	e004      	b.n	8012484 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 801247a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801247e:	fab3 f383 	clz	r3, r3
 8012482:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8012484:	429a      	cmp	r2, r3
 8012486:	d106      	bne.n	8012496 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	2200      	movs	r2, #0
 801248e:	2100      	movs	r1, #0
 8012490:	4618      	mov	r0, r3
 8012492:	f7ff fc9b 	bl	8011dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	2101      	movs	r1, #1
 801249c:	4618      	mov	r0, r3
 801249e:	f7ff fc7f 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 80124a2:	4603      	mov	r3, r0
 80124a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d10a      	bne.n	80124c2 <HAL_ADC_ConfigChannel+0x20e>
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	2101      	movs	r1, #1
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7ff fc74 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 80124b8:	4603      	mov	r3, r0
 80124ba:	0e9b      	lsrs	r3, r3, #26
 80124bc:	f003 021f 	and.w	r2, r3, #31
 80124c0:	e01e      	b.n	8012500 <HAL_ADC_ConfigChannel+0x24c>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2101      	movs	r1, #1
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7ff fc69 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 80124ce:	4603      	mov	r3, r0
 80124d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80124d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80124d8:	fa93 f3a3 	rbit	r3, r3
 80124dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80124e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80124e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d101      	bne.n	80124f4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80124f0:	2320      	movs	r3, #32
 80124f2:	e004      	b.n	80124fe <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80124f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80124f8:	fab3 f383 	clz	r3, r3
 80124fc:	b2db      	uxtb	r3, r3
 80124fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012508:	2b00      	cmp	r3, #0
 801250a:	d105      	bne.n	8012518 <HAL_ADC_ConfigChannel+0x264>
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	0e9b      	lsrs	r3, r3, #26
 8012512:	f003 031f 	and.w	r3, r3, #31
 8012516:	e018      	b.n	801254a <HAL_ADC_ConfigChannel+0x296>
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012524:	fa93 f3a3 	rbit	r3, r3
 8012528:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801252c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8012534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012538:	2b00      	cmp	r3, #0
 801253a:	d101      	bne.n	8012540 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 801253c:	2320      	movs	r3, #32
 801253e:	e004      	b.n	801254a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8012540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012544:	fab3 f383 	clz	r3, r3
 8012548:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801254a:	429a      	cmp	r2, r3
 801254c:	d106      	bne.n	801255c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2200      	movs	r2, #0
 8012554:	2101      	movs	r1, #1
 8012556:	4618      	mov	r0, r3
 8012558:	f7ff fc38 	bl	8011dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2102      	movs	r1, #2
 8012562:	4618      	mov	r0, r3
 8012564:	f7ff fc1c 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 8012568:	4603      	mov	r3, r0
 801256a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801256e:	2b00      	cmp	r3, #0
 8012570:	d10a      	bne.n	8012588 <HAL_ADC_ConfigChannel+0x2d4>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	2102      	movs	r1, #2
 8012578:	4618      	mov	r0, r3
 801257a:	f7ff fc11 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 801257e:	4603      	mov	r3, r0
 8012580:	0e9b      	lsrs	r3, r3, #26
 8012582:	f003 021f 	and.w	r2, r3, #31
 8012586:	e01e      	b.n	80125c6 <HAL_ADC_ConfigChannel+0x312>
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	2102      	movs	r1, #2
 801258e:	4618      	mov	r0, r3
 8012590:	f7ff fc06 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 8012594:	4603      	mov	r3, r0
 8012596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801259a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801259e:	fa93 f3a3 	rbit	r3, r3
 80125a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80125a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80125aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80125ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d101      	bne.n	80125ba <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80125b6:	2320      	movs	r3, #32
 80125b8:	e004      	b.n	80125c4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80125ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80125be:	fab3 f383 	clz	r3, r3
 80125c2:	b2db      	uxtb	r3, r3
 80125c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d105      	bne.n	80125de <HAL_ADC_ConfigChannel+0x32a>
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	0e9b      	lsrs	r3, r3, #26
 80125d8:	f003 031f 	and.w	r3, r3, #31
 80125dc:	e016      	b.n	801260c <HAL_ADC_ConfigChannel+0x358>
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80125e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80125ea:	fa93 f3a3 	rbit	r3, r3
 80125ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80125f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80125f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80125f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d101      	bne.n	8012602 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80125fe:	2320      	movs	r3, #32
 8012600:	e004      	b.n	801260c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8012602:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012606:	fab3 f383 	clz	r3, r3
 801260a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801260c:	429a      	cmp	r2, r3
 801260e:	d106      	bne.n	801261e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2200      	movs	r2, #0
 8012616:	2102      	movs	r1, #2
 8012618:	4618      	mov	r0, r3
 801261a:	f7ff fbd7 	bl	8011dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2103      	movs	r1, #3
 8012624:	4618      	mov	r0, r3
 8012626:	f7ff fbbb 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 801262a:	4603      	mov	r3, r0
 801262c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012630:	2b00      	cmp	r3, #0
 8012632:	d10a      	bne.n	801264a <HAL_ADC_ConfigChannel+0x396>
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2103      	movs	r1, #3
 801263a:	4618      	mov	r0, r3
 801263c:	f7ff fbb0 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 8012640:	4603      	mov	r3, r0
 8012642:	0e9b      	lsrs	r3, r3, #26
 8012644:	f003 021f 	and.w	r2, r3, #31
 8012648:	e017      	b.n	801267a <HAL_ADC_ConfigChannel+0x3c6>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	2103      	movs	r1, #3
 8012650:	4618      	mov	r0, r3
 8012652:	f7ff fba5 	bl	8011da0 <LL_ADC_GetOffsetChannel>
 8012656:	4603      	mov	r3, r0
 8012658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801265a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801265c:	fa93 f3a3 	rbit	r3, r3
 8012660:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8012662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012664:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8012666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012668:	2b00      	cmp	r3, #0
 801266a:	d101      	bne.n	8012670 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 801266c:	2320      	movs	r3, #32
 801266e:	e003      	b.n	8012678 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8012670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012672:	fab3 f383 	clz	r3, r3
 8012676:	b2db      	uxtb	r3, r3
 8012678:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012682:	2b00      	cmp	r3, #0
 8012684:	d105      	bne.n	8012692 <HAL_ADC_ConfigChannel+0x3de>
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	0e9b      	lsrs	r3, r3, #26
 801268c:	f003 031f 	and.w	r3, r3, #31
 8012690:	e011      	b.n	80126b6 <HAL_ADC_ConfigChannel+0x402>
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801269a:	fa93 f3a3 	rbit	r3, r3
 801269e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80126a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80126a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d101      	bne.n	80126ae <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80126aa:	2320      	movs	r3, #32
 80126ac:	e003      	b.n	80126b6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80126ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126b0:	fab3 f383 	clz	r3, r3
 80126b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d106      	bne.n	80126c8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2200      	movs	r2, #0
 80126c0:	2103      	movs	r1, #3
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7ff fb82 	bl	8011dcc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7ff fc61 	bl	8011f94 <LL_ADC_IsEnabled>
 80126d2:	4603      	mov	r3, r0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	f040 813f 	bne.w	8012958 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6818      	ldr	r0, [r3, #0]
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	6819      	ldr	r1, [r3, #0]
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	461a      	mov	r2, r3
 80126e8:	f7ff fbe2 	bl	8011eb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	4a8e      	ldr	r2, [pc, #568]	; (801292c <HAL_ADC_ConfigChannel+0x678>)
 80126f2:	4293      	cmp	r3, r2
 80126f4:	f040 8130 	bne.w	8012958 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012704:	2b00      	cmp	r3, #0
 8012706:	d10b      	bne.n	8012720 <HAL_ADC_ConfigChannel+0x46c>
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	0e9b      	lsrs	r3, r3, #26
 801270e:	3301      	adds	r3, #1
 8012710:	f003 031f 	and.w	r3, r3, #31
 8012714:	2b09      	cmp	r3, #9
 8012716:	bf94      	ite	ls
 8012718:	2301      	movls	r3, #1
 801271a:	2300      	movhi	r3, #0
 801271c:	b2db      	uxtb	r3, r3
 801271e:	e019      	b.n	8012754 <HAL_ADC_ConfigChannel+0x4a0>
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012728:	fa93 f3a3 	rbit	r3, r3
 801272c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801272e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012730:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8012732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012734:	2b00      	cmp	r3, #0
 8012736:	d101      	bne.n	801273c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8012738:	2320      	movs	r3, #32
 801273a:	e003      	b.n	8012744 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 801273c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801273e:	fab3 f383 	clz	r3, r3
 8012742:	b2db      	uxtb	r3, r3
 8012744:	3301      	adds	r3, #1
 8012746:	f003 031f 	and.w	r3, r3, #31
 801274a:	2b09      	cmp	r3, #9
 801274c:	bf94      	ite	ls
 801274e:	2301      	movls	r3, #1
 8012750:	2300      	movhi	r3, #0
 8012752:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012754:	2b00      	cmp	r3, #0
 8012756:	d079      	beq.n	801284c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012760:	2b00      	cmp	r3, #0
 8012762:	d107      	bne.n	8012774 <HAL_ADC_ConfigChannel+0x4c0>
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	0e9b      	lsrs	r3, r3, #26
 801276a:	3301      	adds	r3, #1
 801276c:	069b      	lsls	r3, r3, #26
 801276e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8012772:	e015      	b.n	80127a0 <HAL_ADC_ConfigChannel+0x4ec>
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801277a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801277c:	fa93 f3a3 	rbit	r3, r3
 8012780:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8012782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012784:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8012786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012788:	2b00      	cmp	r3, #0
 801278a:	d101      	bne.n	8012790 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 801278c:	2320      	movs	r3, #32
 801278e:	e003      	b.n	8012798 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8012790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012792:	fab3 f383 	clz	r3, r3
 8012796:	b2db      	uxtb	r3, r3
 8012798:	3301      	adds	r3, #1
 801279a:	069b      	lsls	r3, r3, #26
 801279c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d109      	bne.n	80127c0 <HAL_ADC_ConfigChannel+0x50c>
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	0e9b      	lsrs	r3, r3, #26
 80127b2:	3301      	adds	r3, #1
 80127b4:	f003 031f 	and.w	r3, r3, #31
 80127b8:	2101      	movs	r1, #1
 80127ba:	fa01 f303 	lsl.w	r3, r1, r3
 80127be:	e017      	b.n	80127f0 <HAL_ADC_ConfigChannel+0x53c>
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80127c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127c8:	fa93 f3a3 	rbit	r3, r3
 80127cc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80127ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80127d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d101      	bne.n	80127dc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80127d8:	2320      	movs	r3, #32
 80127da:	e003      	b.n	80127e4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80127dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127de:	fab3 f383 	clz	r3, r3
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	3301      	adds	r3, #1
 80127e6:	f003 031f 	and.w	r3, r3, #31
 80127ea:	2101      	movs	r1, #1
 80127ec:	fa01 f303 	lsl.w	r3, r1, r3
 80127f0:	ea42 0103 	orr.w	r1, r2, r3
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d10a      	bne.n	8012816 <HAL_ADC_ConfigChannel+0x562>
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	0e9b      	lsrs	r3, r3, #26
 8012806:	3301      	adds	r3, #1
 8012808:	f003 021f 	and.w	r2, r3, #31
 801280c:	4613      	mov	r3, r2
 801280e:	005b      	lsls	r3, r3, #1
 8012810:	4413      	add	r3, r2
 8012812:	051b      	lsls	r3, r3, #20
 8012814:	e018      	b.n	8012848 <HAL_ADC_ConfigChannel+0x594>
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281e:	fa93 f3a3 	rbit	r3, r3
 8012822:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8012824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8012828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801282a:	2b00      	cmp	r3, #0
 801282c:	d101      	bne.n	8012832 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 801282e:	2320      	movs	r3, #32
 8012830:	e003      	b.n	801283a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8012832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012834:	fab3 f383 	clz	r3, r3
 8012838:	b2db      	uxtb	r3, r3
 801283a:	3301      	adds	r3, #1
 801283c:	f003 021f 	and.w	r2, r3, #31
 8012840:	4613      	mov	r3, r2
 8012842:	005b      	lsls	r3, r3, #1
 8012844:	4413      	add	r3, r2
 8012846:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012848:	430b      	orrs	r3, r1
 801284a:	e080      	b.n	801294e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012854:	2b00      	cmp	r3, #0
 8012856:	d107      	bne.n	8012868 <HAL_ADC_ConfigChannel+0x5b4>
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	0e9b      	lsrs	r3, r3, #26
 801285e:	3301      	adds	r3, #1
 8012860:	069b      	lsls	r3, r3, #26
 8012862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8012866:	e015      	b.n	8012894 <HAL_ADC_ConfigChannel+0x5e0>
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012870:	fa93 f3a3 	rbit	r3, r3
 8012874:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8012876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012878:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287c:	2b00      	cmp	r3, #0
 801287e:	d101      	bne.n	8012884 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8012880:	2320      	movs	r3, #32
 8012882:	e003      	b.n	801288c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8012884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012886:	fab3 f383 	clz	r3, r3
 801288a:	b2db      	uxtb	r3, r3
 801288c:	3301      	adds	r3, #1
 801288e:	069b      	lsls	r3, r3, #26
 8012890:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801289c:	2b00      	cmp	r3, #0
 801289e:	d109      	bne.n	80128b4 <HAL_ADC_ConfigChannel+0x600>
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	0e9b      	lsrs	r3, r3, #26
 80128a6:	3301      	adds	r3, #1
 80128a8:	f003 031f 	and.w	r3, r3, #31
 80128ac:	2101      	movs	r1, #1
 80128ae:	fa01 f303 	lsl.w	r3, r1, r3
 80128b2:	e017      	b.n	80128e4 <HAL_ADC_ConfigChannel+0x630>
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80128ba:	6a3b      	ldr	r3, [r7, #32]
 80128bc:	fa93 f3a3 	rbit	r3, r3
 80128c0:	61fb      	str	r3, [r7, #28]
  return result;
 80128c2:	69fb      	ldr	r3, [r7, #28]
 80128c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80128c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d101      	bne.n	80128d0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80128cc:	2320      	movs	r3, #32
 80128ce:	e003      	b.n	80128d8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80128d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d2:	fab3 f383 	clz	r3, r3
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	3301      	adds	r3, #1
 80128da:	f003 031f 	and.w	r3, r3, #31
 80128de:	2101      	movs	r1, #1
 80128e0:	fa01 f303 	lsl.w	r3, r1, r3
 80128e4:	ea42 0103 	orr.w	r1, r2, r3
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d10d      	bne.n	8012910 <HAL_ADC_ConfigChannel+0x65c>
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	0e9b      	lsrs	r3, r3, #26
 80128fa:	3301      	adds	r3, #1
 80128fc:	f003 021f 	and.w	r2, r3, #31
 8012900:	4613      	mov	r3, r2
 8012902:	005b      	lsls	r3, r3, #1
 8012904:	4413      	add	r3, r2
 8012906:	3b1e      	subs	r3, #30
 8012908:	051b      	lsls	r3, r3, #20
 801290a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801290e:	e01d      	b.n	801294c <HAL_ADC_ConfigChannel+0x698>
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012916:	697b      	ldr	r3, [r7, #20]
 8012918:	fa93 f3a3 	rbit	r3, r3
 801291c:	613b      	str	r3, [r7, #16]
  return result;
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d103      	bne.n	8012930 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8012928:	2320      	movs	r3, #32
 801292a:	e005      	b.n	8012938 <HAL_ADC_ConfigChannel+0x684>
 801292c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	fab3 f383 	clz	r3, r3
 8012936:	b2db      	uxtb	r3, r3
 8012938:	3301      	adds	r3, #1
 801293a:	f003 021f 	and.w	r2, r3, #31
 801293e:	4613      	mov	r3, r2
 8012940:	005b      	lsls	r3, r3, #1
 8012942:	4413      	add	r3, r2
 8012944:	3b1e      	subs	r3, #30
 8012946:	051b      	lsls	r3, r3, #20
 8012948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801294c:	430b      	orrs	r3, r1
 801294e:	683a      	ldr	r2, [r7, #0]
 8012950:	6892      	ldr	r2, [r2, #8]
 8012952:	4619      	mov	r1, r3
 8012954:	f7ff fa81 	bl	8011e5a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	681a      	ldr	r2, [r3, #0]
 801295c:	4b44      	ldr	r3, [pc, #272]	; (8012a70 <HAL_ADC_ConfigChannel+0x7bc>)
 801295e:	4013      	ands	r3, r2
 8012960:	2b00      	cmp	r3, #0
 8012962:	d07a      	beq.n	8012a5a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012964:	4843      	ldr	r0, [pc, #268]	; (8012a74 <HAL_ADC_ConfigChannel+0x7c0>)
 8012966:	f7ff f9e9 	bl	8011d3c <LL_ADC_GetCommonPathInternalCh>
 801296a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4a41      	ldr	r2, [pc, #260]	; (8012a78 <HAL_ADC_ConfigChannel+0x7c4>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d12c      	bne.n	80129d2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8012978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801297c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012980:	2b00      	cmp	r3, #0
 8012982:	d126      	bne.n	80129d2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	4a3c      	ldr	r2, [pc, #240]	; (8012a7c <HAL_ADC_ConfigChannel+0x7c8>)
 801298a:	4293      	cmp	r3, r2
 801298c:	d004      	beq.n	8012998 <HAL_ADC_ConfigChannel+0x6e4>
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	4a3b      	ldr	r2, [pc, #236]	; (8012a80 <HAL_ADC_ConfigChannel+0x7cc>)
 8012994:	4293      	cmp	r3, r2
 8012996:	d15d      	bne.n	8012a54 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801299c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80129a0:	4619      	mov	r1, r3
 80129a2:	4834      	ldr	r0, [pc, #208]	; (8012a74 <HAL_ADC_ConfigChannel+0x7c0>)
 80129a4:	f7ff f9b7 	bl	8011d16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80129a8:	4b36      	ldr	r3, [pc, #216]	; (8012a84 <HAL_ADC_ConfigChannel+0x7d0>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	099b      	lsrs	r3, r3, #6
 80129ae:	4a36      	ldr	r2, [pc, #216]	; (8012a88 <HAL_ADC_ConfigChannel+0x7d4>)
 80129b0:	fba2 2303 	umull	r2, r3, r2, r3
 80129b4:	099b      	lsrs	r3, r3, #6
 80129b6:	1c5a      	adds	r2, r3, #1
 80129b8:	4613      	mov	r3, r2
 80129ba:	005b      	lsls	r3, r3, #1
 80129bc:	4413      	add	r3, r2
 80129be:	009b      	lsls	r3, r3, #2
 80129c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80129c2:	e002      	b.n	80129ca <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	3b01      	subs	r3, #1
 80129c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d1f9      	bne.n	80129c4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80129d0:	e040      	b.n	8012a54 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	4a2d      	ldr	r2, [pc, #180]	; (8012a8c <HAL_ADC_ConfigChannel+0x7d8>)
 80129d8:	4293      	cmp	r3, r2
 80129da:	d118      	bne.n	8012a0e <HAL_ADC_ConfigChannel+0x75a>
 80129dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80129e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d112      	bne.n	8012a0e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	4a23      	ldr	r2, [pc, #140]	; (8012a7c <HAL_ADC_ConfigChannel+0x7c8>)
 80129ee:	4293      	cmp	r3, r2
 80129f0:	d004      	beq.n	80129fc <HAL_ADC_ConfigChannel+0x748>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	4a22      	ldr	r2, [pc, #136]	; (8012a80 <HAL_ADC_ConfigChannel+0x7cc>)
 80129f8:	4293      	cmp	r3, r2
 80129fa:	d12d      	bne.n	8012a58 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80129fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a04:	4619      	mov	r1, r3
 8012a06:	481b      	ldr	r0, [pc, #108]	; (8012a74 <HAL_ADC_ConfigChannel+0x7c0>)
 8012a08:	f7ff f985 	bl	8011d16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8012a0c:	e024      	b.n	8012a58 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	4a1f      	ldr	r2, [pc, #124]	; (8012a90 <HAL_ADC_ConfigChannel+0x7dc>)
 8012a14:	4293      	cmp	r3, r2
 8012a16:	d120      	bne.n	8012a5a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8012a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d11a      	bne.n	8012a5a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	4a14      	ldr	r2, [pc, #80]	; (8012a7c <HAL_ADC_ConfigChannel+0x7c8>)
 8012a2a:	4293      	cmp	r3, r2
 8012a2c:	d115      	bne.n	8012a5a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012a36:	4619      	mov	r1, r3
 8012a38:	480e      	ldr	r0, [pc, #56]	; (8012a74 <HAL_ADC_ConfigChannel+0x7c0>)
 8012a3a:	f7ff f96c 	bl	8011d16 <LL_ADC_SetCommonPathInternalCh>
 8012a3e:	e00c      	b.n	8012a5a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a44:	f043 0220 	orr.w	r2, r3, #32
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8012a52:	e002      	b.n	8012a5a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8012a54:	bf00      	nop
 8012a56:	e000      	b.n	8012a5a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8012a58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8012a62:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	37d8      	adds	r7, #216	; 0xd8
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	80080000 	.word	0x80080000
 8012a74:	50040300 	.word	0x50040300
 8012a78:	c7520000 	.word	0xc7520000
 8012a7c:	50040000 	.word	0x50040000
 8012a80:	50040200 	.word	0x50040200
 8012a84:	20000004 	.word	0x20000004
 8012a88:	053e2d63 	.word	0x053e2d63
 8012a8c:	cb840000 	.word	0xcb840000
 8012a90:	80000001 	.word	0x80000001

08012a94 <LL_ADC_IsEnabled>:
{
 8012a94:	b480      	push	{r7}
 8012a96:	b083      	sub	sp, #12
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	689b      	ldr	r3, [r3, #8]
 8012aa0:	f003 0301 	and.w	r3, r3, #1
 8012aa4:	2b01      	cmp	r3, #1
 8012aa6:	d101      	bne.n	8012aac <LL_ADC_IsEnabled+0x18>
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	e000      	b.n	8012aae <LL_ADC_IsEnabled+0x1a>
 8012aac:	2300      	movs	r3, #0
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	370c      	adds	r7, #12
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab8:	4770      	bx	lr

08012aba <LL_ADC_REG_IsConversionOngoing>:
{
 8012aba:	b480      	push	{r7}
 8012abc:	b083      	sub	sp, #12
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	689b      	ldr	r3, [r3, #8]
 8012ac6:	f003 0304 	and.w	r3, r3, #4
 8012aca:	2b04      	cmp	r3, #4
 8012acc:	d101      	bne.n	8012ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8012ace:	2301      	movs	r3, #1
 8012ad0:	e000      	b.n	8012ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8012ad2:	2300      	movs	r3, #0
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	370c      	adds	r7, #12
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8012ae0:	b590      	push	{r4, r7, lr}
 8012ae2:	b09f      	sub	sp, #124	; 0x7c
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012aea:	2300      	movs	r3, #0
 8012aec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d101      	bne.n	8012afe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8012afa:	2302      	movs	r3, #2
 8012afc:	e093      	b.n	8012c26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2201      	movs	r2, #1
 8012b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8012b06:	2300      	movs	r3, #0
 8012b08:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4a47      	ldr	r2, [pc, #284]	; (8012c30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d102      	bne.n	8012b1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8012b18:	4b46      	ldr	r3, [pc, #280]	; (8012c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8012b1a:	60bb      	str	r3, [r7, #8]
 8012b1c:	e001      	b.n	8012b22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8012b1e:	2300      	movs	r3, #0
 8012b20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d10b      	bne.n	8012b40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b2c:	f043 0220 	orr.w	r2, r3, #32
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2200      	movs	r2, #0
 8012b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	e072      	b.n	8012c26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7ff ffb9 	bl	8012aba <LL_ADC_REG_IsConversionOngoing>
 8012b48:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7ff ffb3 	bl	8012aba <LL_ADC_REG_IsConversionOngoing>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d154      	bne.n	8012c04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8012b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d151      	bne.n	8012c04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8012b60:	4b35      	ldr	r3, [pc, #212]	; (8012c38 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8012b62:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d02c      	beq.n	8012bc6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8012b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b6e:	689b      	ldr	r3, [r3, #8]
 8012b70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	6859      	ldr	r1, [r3, #4]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b7e:	035b      	lsls	r3, r3, #13
 8012b80:	430b      	orrs	r3, r1
 8012b82:	431a      	orrs	r2, r3
 8012b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012b88:	4829      	ldr	r0, [pc, #164]	; (8012c30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8012b8a:	f7ff ff83 	bl	8012a94 <LL_ADC_IsEnabled>
 8012b8e:	4604      	mov	r4, r0
 8012b90:	4828      	ldr	r0, [pc, #160]	; (8012c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8012b92:	f7ff ff7f 	bl	8012a94 <LL_ADC_IsEnabled>
 8012b96:	4603      	mov	r3, r0
 8012b98:	431c      	orrs	r4, r3
 8012b9a:	4828      	ldr	r0, [pc, #160]	; (8012c3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8012b9c:	f7ff ff7a 	bl	8012a94 <LL_ADC_IsEnabled>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	4323      	orrs	r3, r4
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d137      	bne.n	8012c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8012ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012baa:	689b      	ldr	r3, [r3, #8]
 8012bac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8012bb0:	f023 030f 	bic.w	r3, r3, #15
 8012bb4:	683a      	ldr	r2, [r7, #0]
 8012bb6:	6811      	ldr	r1, [r2, #0]
 8012bb8:	683a      	ldr	r2, [r7, #0]
 8012bba:	6892      	ldr	r2, [r2, #8]
 8012bbc:	430a      	orrs	r2, r1
 8012bbe:	431a      	orrs	r2, r3
 8012bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bc2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012bc4:	e028      	b.n	8012c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8012bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bc8:	689b      	ldr	r3, [r3, #8]
 8012bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bd0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012bd2:	4817      	ldr	r0, [pc, #92]	; (8012c30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8012bd4:	f7ff ff5e 	bl	8012a94 <LL_ADC_IsEnabled>
 8012bd8:	4604      	mov	r4, r0
 8012bda:	4816      	ldr	r0, [pc, #88]	; (8012c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8012bdc:	f7ff ff5a 	bl	8012a94 <LL_ADC_IsEnabled>
 8012be0:	4603      	mov	r3, r0
 8012be2:	431c      	orrs	r4, r3
 8012be4:	4815      	ldr	r0, [pc, #84]	; (8012c3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8012be6:	f7ff ff55 	bl	8012a94 <LL_ADC_IsEnabled>
 8012bea:	4603      	mov	r3, r0
 8012bec:	4323      	orrs	r3, r4
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d112      	bne.n	8012c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8012bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bf4:	689b      	ldr	r3, [r3, #8]
 8012bf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8012bfa:	f023 030f 	bic.w	r3, r3, #15
 8012bfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012c00:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012c02:	e009      	b.n	8012c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c08:	f043 0220 	orr.w	r2, r3, #32
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8012c10:	2301      	movs	r3, #1
 8012c12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012c16:	e000      	b.n	8012c1a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012c18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8012c22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	377c      	adds	r7, #124	; 0x7c
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd90      	pop	{r4, r7, pc}
 8012c2e:	bf00      	nop
 8012c30:	50040000 	.word	0x50040000
 8012c34:	50040100 	.word	0x50040100
 8012c38:	50040300 	.word	0x50040300
 8012c3c:	50040200 	.word	0x50040200

08012c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012c40:	b480      	push	{r7}
 8012c42:	b085      	sub	sp, #20
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f003 0307 	and.w	r3, r3, #7
 8012c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012c50:	4b0c      	ldr	r3, [pc, #48]	; (8012c84 <__NVIC_SetPriorityGrouping+0x44>)
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012c56:	68ba      	ldr	r2, [r7, #8]
 8012c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012c5c:	4013      	ands	r3, r2
 8012c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012c72:	4a04      	ldr	r2, [pc, #16]	; (8012c84 <__NVIC_SetPriorityGrouping+0x44>)
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	60d3      	str	r3, [r2, #12]
}
 8012c78:	bf00      	nop
 8012c7a:	3714      	adds	r7, #20
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr
 8012c84:	e000ed00 	.word	0xe000ed00

08012c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012c88:	b480      	push	{r7}
 8012c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012c8c:	4b04      	ldr	r3, [pc, #16]	; (8012ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	0a1b      	lsrs	r3, r3, #8
 8012c92:	f003 0307 	and.w	r3, r3, #7
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr
 8012ca0:	e000ed00 	.word	0xe000ed00

08012ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	4603      	mov	r3, r0
 8012cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	db0b      	blt.n	8012cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012cb6:	79fb      	ldrb	r3, [r7, #7]
 8012cb8:	f003 021f 	and.w	r2, r3, #31
 8012cbc:	4907      	ldr	r1, [pc, #28]	; (8012cdc <__NVIC_EnableIRQ+0x38>)
 8012cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cc2:	095b      	lsrs	r3, r3, #5
 8012cc4:	2001      	movs	r0, #1
 8012cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8012cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8012cce:	bf00      	nop
 8012cd0:	370c      	adds	r7, #12
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr
 8012cda:	bf00      	nop
 8012cdc:	e000e100 	.word	0xe000e100

08012ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	6039      	str	r1, [r7, #0]
 8012cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	db0a      	blt.n	8012d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	b2da      	uxtb	r2, r3
 8012cf8:	490c      	ldr	r1, [pc, #48]	; (8012d2c <__NVIC_SetPriority+0x4c>)
 8012cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cfe:	0112      	lsls	r2, r2, #4
 8012d00:	b2d2      	uxtb	r2, r2
 8012d02:	440b      	add	r3, r1
 8012d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012d08:	e00a      	b.n	8012d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	b2da      	uxtb	r2, r3
 8012d0e:	4908      	ldr	r1, [pc, #32]	; (8012d30 <__NVIC_SetPriority+0x50>)
 8012d10:	79fb      	ldrb	r3, [r7, #7]
 8012d12:	f003 030f 	and.w	r3, r3, #15
 8012d16:	3b04      	subs	r3, #4
 8012d18:	0112      	lsls	r2, r2, #4
 8012d1a:	b2d2      	uxtb	r2, r2
 8012d1c:	440b      	add	r3, r1
 8012d1e:	761a      	strb	r2, [r3, #24]
}
 8012d20:	bf00      	nop
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr
 8012d2c:	e000e100 	.word	0xe000e100
 8012d30:	e000ed00 	.word	0xe000ed00

08012d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012d34:	b480      	push	{r7}
 8012d36:	b089      	sub	sp, #36	; 0x24
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	f003 0307 	and.w	r3, r3, #7
 8012d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	f1c3 0307 	rsb	r3, r3, #7
 8012d4e:	2b04      	cmp	r3, #4
 8012d50:	bf28      	it	cs
 8012d52:	2304      	movcs	r3, #4
 8012d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	3304      	adds	r3, #4
 8012d5a:	2b06      	cmp	r3, #6
 8012d5c:	d902      	bls.n	8012d64 <NVIC_EncodePriority+0x30>
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	3b03      	subs	r3, #3
 8012d62:	e000      	b.n	8012d66 <NVIC_EncodePriority+0x32>
 8012d64:	2300      	movs	r3, #0
 8012d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012d68:	f04f 32ff 	mov.w	r2, #4294967295
 8012d6c:	69bb      	ldr	r3, [r7, #24]
 8012d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8012d72:	43da      	mvns	r2, r3
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	401a      	ands	r2, r3
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	fa01 f303 	lsl.w	r3, r1, r3
 8012d86:	43d9      	mvns	r1, r3
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012d8c:	4313      	orrs	r3, r2
         );
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3724      	adds	r7, #36	; 0x24
 8012d92:	46bd      	mov	sp, r7
 8012d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d98:	4770      	bx	lr
	...

08012d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	3b01      	subs	r3, #1
 8012da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012dac:	d301      	bcc.n	8012db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012dae:	2301      	movs	r3, #1
 8012db0:	e00f      	b.n	8012dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012db2:	4a0a      	ldr	r2, [pc, #40]	; (8012ddc <SysTick_Config+0x40>)
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	3b01      	subs	r3, #1
 8012db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012dba:	210f      	movs	r1, #15
 8012dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc0:	f7ff ff8e 	bl	8012ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012dc4:	4b05      	ldr	r3, [pc, #20]	; (8012ddc <SysTick_Config+0x40>)
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012dca:	4b04      	ldr	r3, [pc, #16]	; (8012ddc <SysTick_Config+0x40>)
 8012dcc:	2207      	movs	r2, #7
 8012dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012dd0:	2300      	movs	r3, #0
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3708      	adds	r7, #8
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	e000e010 	.word	0xe000e010

08012de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f7ff ff29 	bl	8012c40 <__NVIC_SetPriorityGrouping>
}
 8012dee:	bf00      	nop
 8012df0:	3708      	adds	r7, #8
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}

08012df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012df6:	b580      	push	{r7, lr}
 8012df8:	b086      	sub	sp, #24
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	60b9      	str	r1, [r7, #8]
 8012e00:	607a      	str	r2, [r7, #4]
 8012e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8012e04:	2300      	movs	r3, #0
 8012e06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012e08:	f7ff ff3e 	bl	8012c88 <__NVIC_GetPriorityGrouping>
 8012e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	68b9      	ldr	r1, [r7, #8]
 8012e12:	6978      	ldr	r0, [r7, #20]
 8012e14:	f7ff ff8e 	bl	8012d34 <NVIC_EncodePriority>
 8012e18:	4602      	mov	r2, r0
 8012e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e1e:	4611      	mov	r1, r2
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7ff ff5d 	bl	8012ce0 <__NVIC_SetPriority>
}
 8012e26:	bf00      	nop
 8012e28:	3718      	adds	r7, #24
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}

08012e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012e2e:	b580      	push	{r7, lr}
 8012e30:	b082      	sub	sp, #8
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	4603      	mov	r3, r0
 8012e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7ff ff31 	bl	8012ca4 <__NVIC_EnableIRQ>
}
 8012e42:	bf00      	nop
 8012e44:	3708      	adds	r7, #8
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}

08012e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012e4a:	b580      	push	{r7, lr}
 8012e4c:	b082      	sub	sp, #8
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f7ff ffa2 	bl	8012d9c <SysTick_Config>
 8012e58:	4603      	mov	r3, r0
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3708      	adds	r7, #8
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}

08012e62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012e62:	b580      	push	{r7, lr}
 8012e64:	b084      	sub	sp, #16
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	2b02      	cmp	r3, #2
 8012e78:	d005      	beq.n	8012e86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2204      	movs	r2, #4
 8012e7e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8012e80:	2301      	movs	r3, #1
 8012e82:	73fb      	strb	r3, [r7, #15]
 8012e84:	e029      	b.n	8012eda <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	681a      	ldr	r2, [r3, #0]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	f022 020e 	bic.w	r2, r2, #14
 8012e94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f022 0201 	bic.w	r2, r2, #1
 8012ea4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012eaa:	f003 021c 	and.w	r2, r3, #28
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eb2:	2101      	movs	r1, #1
 8012eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8012eb8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d003      	beq.n	8012eda <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	4798      	blx	r3
    }
  }
  return status;
 8012eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3710      	adds	r7, #16
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}

08012ee4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b087      	sub	sp, #28
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	60f8      	str	r0, [r7, #12]
 8012eec:	460b      	mov	r3, r1
 8012eee:	607a      	str	r2, [r7, #4]
 8012ef0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8012ef6:	7afb      	ldrb	r3, [r7, #11]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d103      	bne.n	8012f04 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	605a      	str	r2, [r3, #4]
      break;
 8012f02:	e002      	b.n	8012f0a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8012f04:	2301      	movs	r3, #1
 8012f06:	75fb      	strb	r3, [r7, #23]
      break;
 8012f08:	bf00      	nop
  }

  return status;
 8012f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	371c      	adds	r7, #28
 8012f10:	46bd      	mov	sp, r7
 8012f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f16:	4770      	bx	lr

08012f18 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b083      	sub	sp, #12
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d101      	bne.n	8012f2c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8012f28:	2301      	movs	r3, #1
 8012f2a:	e003      	b.n	8012f34 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	683a      	ldr	r2, [r7, #0]
 8012f30:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8012f32:	2300      	movs	r3, #0
  }
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	370c      	adds	r7, #12
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr

08012f40 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b086      	sub	sp, #24
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	0c1b      	lsrs	r3, r3, #16
 8012f4e:	f003 0301 	and.w	r3, r3, #1
 8012f52:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	f003 031f 	and.w	r3, r3, #31
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8012f62:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	015a      	lsls	r2, r3, #5
 8012f68:	4b0c      	ldr	r3, [pc, #48]	; (8012f9c <HAL_EXTI_IRQHandler+0x5c>)
 8012f6a:	4413      	add	r3, r2
 8012f6c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	693a      	ldr	r2, [r7, #16]
 8012f74:	4013      	ands	r3, r2
 8012f76:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d009      	beq.n	8012f92 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	693a      	ldr	r2, [r7, #16]
 8012f82:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	685b      	ldr	r3, [r3, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d002      	beq.n	8012f92 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	685b      	ldr	r3, [r3, #4]
 8012f90:	4798      	blx	r3
    }
  }
}
 8012f92:	bf00      	nop
 8012f94:	3718      	adds	r7, #24
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	40010414 	.word	0x40010414

08012fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b087      	sub	sp, #28
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8012faa:	2300      	movs	r3, #0
 8012fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012fae:	e17f      	b.n	80132b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	2101      	movs	r1, #1
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8012fbc:	4013      	ands	r3, r2
 8012fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	f000 8171 	beq.w	80132aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	2b01      	cmp	r3, #1
 8012fce:	d00b      	beq.n	8012fe8 <HAL_GPIO_Init+0x48>
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	2b02      	cmp	r3, #2
 8012fd6:	d007      	beq.n	8012fe8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012fdc:	2b11      	cmp	r3, #17
 8012fde:	d003      	beq.n	8012fe8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	685b      	ldr	r3, [r3, #4]
 8012fe4:	2b12      	cmp	r3, #18
 8012fe6:	d130      	bne.n	801304a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	005b      	lsls	r3, r3, #1
 8012ff2:	2203      	movs	r2, #3
 8012ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8012ff8:	43db      	mvns	r3, r3
 8012ffa:	693a      	ldr	r2, [r7, #16]
 8012ffc:	4013      	ands	r3, r2
 8012ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8013000:	683b      	ldr	r3, [r7, #0]
 8013002:	68da      	ldr	r2, [r3, #12]
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	005b      	lsls	r3, r3, #1
 8013008:	fa02 f303 	lsl.w	r3, r2, r3
 801300c:	693a      	ldr	r2, [r7, #16]
 801300e:	4313      	orrs	r3, r2
 8013010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	693a      	ldr	r2, [r7, #16]
 8013016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801301e:	2201      	movs	r2, #1
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	fa02 f303 	lsl.w	r3, r2, r3
 8013026:	43db      	mvns	r3, r3
 8013028:	693a      	ldr	r2, [r7, #16]
 801302a:	4013      	ands	r3, r2
 801302c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	685b      	ldr	r3, [r3, #4]
 8013032:	091b      	lsrs	r3, r3, #4
 8013034:	f003 0201 	and.w	r2, r3, #1
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	fa02 f303 	lsl.w	r3, r2, r3
 801303e:	693a      	ldr	r2, [r7, #16]
 8013040:	4313      	orrs	r3, r2
 8013042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	693a      	ldr	r2, [r7, #16]
 8013048:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	f003 0303 	and.w	r3, r3, #3
 8013052:	2b03      	cmp	r3, #3
 8013054:	d118      	bne.n	8013088 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801305a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 801305c:	2201      	movs	r2, #1
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	fa02 f303 	lsl.w	r3, r2, r3
 8013064:	43db      	mvns	r3, r3
 8013066:	693a      	ldr	r2, [r7, #16]
 8013068:	4013      	ands	r3, r2
 801306a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	08db      	lsrs	r3, r3, #3
 8013072:	f003 0201 	and.w	r2, r3, #1
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	fa02 f303 	lsl.w	r3, r2, r3
 801307c:	693a      	ldr	r2, [r7, #16]
 801307e:	4313      	orrs	r3, r2
 8013080:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	693a      	ldr	r2, [r7, #16]
 8013086:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	68db      	ldr	r3, [r3, #12]
 801308c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	005b      	lsls	r3, r3, #1
 8013092:	2203      	movs	r2, #3
 8013094:	fa02 f303 	lsl.w	r3, r2, r3
 8013098:	43db      	mvns	r3, r3
 801309a:	693a      	ldr	r2, [r7, #16]
 801309c:	4013      	ands	r3, r2
 801309e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	689a      	ldr	r2, [r3, #8]
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	005b      	lsls	r3, r3, #1
 80130a8:	fa02 f303 	lsl.w	r3, r2, r3
 80130ac:	693a      	ldr	r2, [r7, #16]
 80130ae:	4313      	orrs	r3, r2
 80130b0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	693a      	ldr	r2, [r7, #16]
 80130b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	685b      	ldr	r3, [r3, #4]
 80130bc:	2b02      	cmp	r3, #2
 80130be:	d003      	beq.n	80130c8 <HAL_GPIO_Init+0x128>
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	2b12      	cmp	r3, #18
 80130c6:	d123      	bne.n	8013110 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	08da      	lsrs	r2, r3, #3
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	3208      	adds	r2, #8
 80130d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	f003 0307 	and.w	r3, r3, #7
 80130dc:	009b      	lsls	r3, r3, #2
 80130de:	220f      	movs	r2, #15
 80130e0:	fa02 f303 	lsl.w	r3, r2, r3
 80130e4:	43db      	mvns	r3, r3
 80130e6:	693a      	ldr	r2, [r7, #16]
 80130e8:	4013      	ands	r3, r2
 80130ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	691a      	ldr	r2, [r3, #16]
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	f003 0307 	and.w	r3, r3, #7
 80130f6:	009b      	lsls	r3, r3, #2
 80130f8:	fa02 f303 	lsl.w	r3, r2, r3
 80130fc:	693a      	ldr	r2, [r7, #16]
 80130fe:	4313      	orrs	r3, r2
 8013100:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	08da      	lsrs	r2, r3, #3
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	3208      	adds	r2, #8
 801310a:	6939      	ldr	r1, [r7, #16]
 801310c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	005b      	lsls	r3, r3, #1
 801311a:	2203      	movs	r2, #3
 801311c:	fa02 f303 	lsl.w	r3, r2, r3
 8013120:	43db      	mvns	r3, r3
 8013122:	693a      	ldr	r2, [r7, #16]
 8013124:	4013      	ands	r3, r2
 8013126:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	f003 0203 	and.w	r2, r3, #3
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	005b      	lsls	r3, r3, #1
 8013134:	fa02 f303 	lsl.w	r3, r2, r3
 8013138:	693a      	ldr	r2, [r7, #16]
 801313a:	4313      	orrs	r3, r2
 801313c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	693a      	ldr	r2, [r7, #16]
 8013142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801314c:	2b00      	cmp	r3, #0
 801314e:	f000 80ac 	beq.w	80132aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013152:	4b5f      	ldr	r3, [pc, #380]	; (80132d0 <HAL_GPIO_Init+0x330>)
 8013154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013156:	4a5e      	ldr	r2, [pc, #376]	; (80132d0 <HAL_GPIO_Init+0x330>)
 8013158:	f043 0301 	orr.w	r3, r3, #1
 801315c:	6613      	str	r3, [r2, #96]	; 0x60
 801315e:	4b5c      	ldr	r3, [pc, #368]	; (80132d0 <HAL_GPIO_Init+0x330>)
 8013160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013162:	f003 0301 	and.w	r3, r3, #1
 8013166:	60bb      	str	r3, [r7, #8]
 8013168:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 801316a:	4a5a      	ldr	r2, [pc, #360]	; (80132d4 <HAL_GPIO_Init+0x334>)
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	089b      	lsrs	r3, r3, #2
 8013170:	3302      	adds	r3, #2
 8013172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013176:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	f003 0303 	and.w	r3, r3, #3
 801317e:	009b      	lsls	r3, r3, #2
 8013180:	220f      	movs	r2, #15
 8013182:	fa02 f303 	lsl.w	r3, r2, r3
 8013186:	43db      	mvns	r3, r3
 8013188:	693a      	ldr	r2, [r7, #16]
 801318a:	4013      	ands	r3, r2
 801318c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8013194:	d025      	beq.n	80131e2 <HAL_GPIO_Init+0x242>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	4a4f      	ldr	r2, [pc, #316]	; (80132d8 <HAL_GPIO_Init+0x338>)
 801319a:	4293      	cmp	r3, r2
 801319c:	d01f      	beq.n	80131de <HAL_GPIO_Init+0x23e>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	4a4e      	ldr	r2, [pc, #312]	; (80132dc <HAL_GPIO_Init+0x33c>)
 80131a2:	4293      	cmp	r3, r2
 80131a4:	d019      	beq.n	80131da <HAL_GPIO_Init+0x23a>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	4a4d      	ldr	r2, [pc, #308]	; (80132e0 <HAL_GPIO_Init+0x340>)
 80131aa:	4293      	cmp	r3, r2
 80131ac:	d013      	beq.n	80131d6 <HAL_GPIO_Init+0x236>
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	4a4c      	ldr	r2, [pc, #304]	; (80132e4 <HAL_GPIO_Init+0x344>)
 80131b2:	4293      	cmp	r3, r2
 80131b4:	d00d      	beq.n	80131d2 <HAL_GPIO_Init+0x232>
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	4a4b      	ldr	r2, [pc, #300]	; (80132e8 <HAL_GPIO_Init+0x348>)
 80131ba:	4293      	cmp	r3, r2
 80131bc:	d007      	beq.n	80131ce <HAL_GPIO_Init+0x22e>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	4a4a      	ldr	r2, [pc, #296]	; (80132ec <HAL_GPIO_Init+0x34c>)
 80131c2:	4293      	cmp	r3, r2
 80131c4:	d101      	bne.n	80131ca <HAL_GPIO_Init+0x22a>
 80131c6:	2306      	movs	r3, #6
 80131c8:	e00c      	b.n	80131e4 <HAL_GPIO_Init+0x244>
 80131ca:	2307      	movs	r3, #7
 80131cc:	e00a      	b.n	80131e4 <HAL_GPIO_Init+0x244>
 80131ce:	2305      	movs	r3, #5
 80131d0:	e008      	b.n	80131e4 <HAL_GPIO_Init+0x244>
 80131d2:	2304      	movs	r3, #4
 80131d4:	e006      	b.n	80131e4 <HAL_GPIO_Init+0x244>
 80131d6:	2303      	movs	r3, #3
 80131d8:	e004      	b.n	80131e4 <HAL_GPIO_Init+0x244>
 80131da:	2302      	movs	r3, #2
 80131dc:	e002      	b.n	80131e4 <HAL_GPIO_Init+0x244>
 80131de:	2301      	movs	r3, #1
 80131e0:	e000      	b.n	80131e4 <HAL_GPIO_Init+0x244>
 80131e2:	2300      	movs	r3, #0
 80131e4:	697a      	ldr	r2, [r7, #20]
 80131e6:	f002 0203 	and.w	r2, r2, #3
 80131ea:	0092      	lsls	r2, r2, #2
 80131ec:	4093      	lsls	r3, r2
 80131ee:	693a      	ldr	r2, [r7, #16]
 80131f0:	4313      	orrs	r3, r2
 80131f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80131f4:	4937      	ldr	r1, [pc, #220]	; (80132d4 <HAL_GPIO_Init+0x334>)
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	089b      	lsrs	r3, r3, #2
 80131fa:	3302      	adds	r3, #2
 80131fc:	693a      	ldr	r2, [r7, #16]
 80131fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8013202:	4b3b      	ldr	r3, [pc, #236]	; (80132f0 <HAL_GPIO_Init+0x350>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	43db      	mvns	r3, r3
 801320c:	693a      	ldr	r2, [r7, #16]
 801320e:	4013      	ands	r3, r2
 8013210:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	685b      	ldr	r3, [r3, #4]
 8013216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801321a:	2b00      	cmp	r3, #0
 801321c:	d003      	beq.n	8013226 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 801321e:	693a      	ldr	r2, [r7, #16]
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	4313      	orrs	r3, r2
 8013224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8013226:	4a32      	ldr	r2, [pc, #200]	; (80132f0 <HAL_GPIO_Init+0x350>)
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 801322c:	4b30      	ldr	r3, [pc, #192]	; (80132f0 <HAL_GPIO_Init+0x350>)
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	43db      	mvns	r3, r3
 8013236:	693a      	ldr	r2, [r7, #16]
 8013238:	4013      	ands	r3, r2
 801323a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	685b      	ldr	r3, [r3, #4]
 8013240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013244:	2b00      	cmp	r3, #0
 8013246:	d003      	beq.n	8013250 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8013248:	693a      	ldr	r2, [r7, #16]
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	4313      	orrs	r3, r2
 801324e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8013250:	4a27      	ldr	r2, [pc, #156]	; (80132f0 <HAL_GPIO_Init+0x350>)
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8013256:	4b26      	ldr	r3, [pc, #152]	; (80132f0 <HAL_GPIO_Init+0x350>)
 8013258:	689b      	ldr	r3, [r3, #8]
 801325a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	43db      	mvns	r3, r3
 8013260:	693a      	ldr	r2, [r7, #16]
 8013262:	4013      	ands	r3, r2
 8013264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	685b      	ldr	r3, [r3, #4]
 801326a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801326e:	2b00      	cmp	r3, #0
 8013270:	d003      	beq.n	801327a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8013272:	693a      	ldr	r2, [r7, #16]
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	4313      	orrs	r3, r2
 8013278:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801327a:	4a1d      	ldr	r2, [pc, #116]	; (80132f0 <HAL_GPIO_Init+0x350>)
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8013280:	4b1b      	ldr	r3, [pc, #108]	; (80132f0 <HAL_GPIO_Init+0x350>)
 8013282:	68db      	ldr	r3, [r3, #12]
 8013284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	43db      	mvns	r3, r3
 801328a:	693a      	ldr	r2, [r7, #16]
 801328c:	4013      	ands	r3, r2
 801328e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013298:	2b00      	cmp	r3, #0
 801329a:	d003      	beq.n	80132a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 801329c:	693a      	ldr	r2, [r7, #16]
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	4313      	orrs	r3, r2
 80132a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80132a4:	4a12      	ldr	r2, [pc, #72]	; (80132f0 <HAL_GPIO_Init+0x350>)
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80132aa:	697b      	ldr	r3, [r7, #20]
 80132ac:	3301      	adds	r3, #1
 80132ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	681a      	ldr	r2, [r3, #0]
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	fa22 f303 	lsr.w	r3, r2, r3
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	f47f ae78 	bne.w	8012fb0 <HAL_GPIO_Init+0x10>
  }
}
 80132c0:	bf00      	nop
 80132c2:	bf00      	nop
 80132c4:	371c      	adds	r7, #28
 80132c6:	46bd      	mov	sp, r7
 80132c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132cc:	4770      	bx	lr
 80132ce:	bf00      	nop
 80132d0:	40021000 	.word	0x40021000
 80132d4:	40010000 	.word	0x40010000
 80132d8:	48000400 	.word	0x48000400
 80132dc:	48000800 	.word	0x48000800
 80132e0:	48000c00 	.word	0x48000c00
 80132e4:	48001000 	.word	0x48001000
 80132e8:	48001400 	.word	0x48001400
 80132ec:	48001800 	.word	0x48001800
 80132f0:	40010400 	.word	0x40010400

080132f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b087      	sub	sp, #28
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80132fe:	2300      	movs	r3, #0
 8013300:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8013302:	e0cd      	b.n	80134a0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8013304:	2201      	movs	r2, #1
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	fa02 f303 	lsl.w	r3, r2, r3
 801330c:	683a      	ldr	r2, [r7, #0]
 801330e:	4013      	ands	r3, r2
 8013310:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	2b00      	cmp	r3, #0
 8013316:	f000 80c0 	beq.w	801349a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 801331a:	4a68      	ldr	r2, [pc, #416]	; (80134bc <HAL_GPIO_DeInit+0x1c8>)
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	089b      	lsrs	r3, r3, #2
 8013320:	3302      	adds	r3, #2
 8013322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013326:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	f003 0303 	and.w	r3, r3, #3
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	220f      	movs	r2, #15
 8013332:	fa02 f303 	lsl.w	r3, r2, r3
 8013336:	68fa      	ldr	r2, [r7, #12]
 8013338:	4013      	ands	r3, r2
 801333a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8013342:	d025      	beq.n	8013390 <HAL_GPIO_DeInit+0x9c>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	4a5e      	ldr	r2, [pc, #376]	; (80134c0 <HAL_GPIO_DeInit+0x1cc>)
 8013348:	4293      	cmp	r3, r2
 801334a:	d01f      	beq.n	801338c <HAL_GPIO_DeInit+0x98>
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	4a5d      	ldr	r2, [pc, #372]	; (80134c4 <HAL_GPIO_DeInit+0x1d0>)
 8013350:	4293      	cmp	r3, r2
 8013352:	d019      	beq.n	8013388 <HAL_GPIO_DeInit+0x94>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	4a5c      	ldr	r2, [pc, #368]	; (80134c8 <HAL_GPIO_DeInit+0x1d4>)
 8013358:	4293      	cmp	r3, r2
 801335a:	d013      	beq.n	8013384 <HAL_GPIO_DeInit+0x90>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	4a5b      	ldr	r2, [pc, #364]	; (80134cc <HAL_GPIO_DeInit+0x1d8>)
 8013360:	4293      	cmp	r3, r2
 8013362:	d00d      	beq.n	8013380 <HAL_GPIO_DeInit+0x8c>
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	4a5a      	ldr	r2, [pc, #360]	; (80134d0 <HAL_GPIO_DeInit+0x1dc>)
 8013368:	4293      	cmp	r3, r2
 801336a:	d007      	beq.n	801337c <HAL_GPIO_DeInit+0x88>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	4a59      	ldr	r2, [pc, #356]	; (80134d4 <HAL_GPIO_DeInit+0x1e0>)
 8013370:	4293      	cmp	r3, r2
 8013372:	d101      	bne.n	8013378 <HAL_GPIO_DeInit+0x84>
 8013374:	2306      	movs	r3, #6
 8013376:	e00c      	b.n	8013392 <HAL_GPIO_DeInit+0x9e>
 8013378:	2307      	movs	r3, #7
 801337a:	e00a      	b.n	8013392 <HAL_GPIO_DeInit+0x9e>
 801337c:	2305      	movs	r3, #5
 801337e:	e008      	b.n	8013392 <HAL_GPIO_DeInit+0x9e>
 8013380:	2304      	movs	r3, #4
 8013382:	e006      	b.n	8013392 <HAL_GPIO_DeInit+0x9e>
 8013384:	2303      	movs	r3, #3
 8013386:	e004      	b.n	8013392 <HAL_GPIO_DeInit+0x9e>
 8013388:	2302      	movs	r3, #2
 801338a:	e002      	b.n	8013392 <HAL_GPIO_DeInit+0x9e>
 801338c:	2301      	movs	r3, #1
 801338e:	e000      	b.n	8013392 <HAL_GPIO_DeInit+0x9e>
 8013390:	2300      	movs	r3, #0
 8013392:	697a      	ldr	r2, [r7, #20]
 8013394:	f002 0203 	and.w	r2, r2, #3
 8013398:	0092      	lsls	r2, r2, #2
 801339a:	4093      	lsls	r3, r2
 801339c:	68fa      	ldr	r2, [r7, #12]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d132      	bne.n	8013408 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80133a2:	4b4d      	ldr	r3, [pc, #308]	; (80134d8 <HAL_GPIO_DeInit+0x1e4>)
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	43db      	mvns	r3, r3
 80133aa:	494b      	ldr	r1, [pc, #300]	; (80134d8 <HAL_GPIO_DeInit+0x1e4>)
 80133ac:	4013      	ands	r3, r2
 80133ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80133b0:	4b49      	ldr	r3, [pc, #292]	; (80134d8 <HAL_GPIO_DeInit+0x1e4>)
 80133b2:	685a      	ldr	r2, [r3, #4]
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	43db      	mvns	r3, r3
 80133b8:	4947      	ldr	r1, [pc, #284]	; (80134d8 <HAL_GPIO_DeInit+0x1e4>)
 80133ba:	4013      	ands	r3, r2
 80133bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80133be:	4b46      	ldr	r3, [pc, #280]	; (80134d8 <HAL_GPIO_DeInit+0x1e4>)
 80133c0:	689a      	ldr	r2, [r3, #8]
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	43db      	mvns	r3, r3
 80133c6:	4944      	ldr	r1, [pc, #272]	; (80134d8 <HAL_GPIO_DeInit+0x1e4>)
 80133c8:	4013      	ands	r3, r2
 80133ca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80133cc:	4b42      	ldr	r3, [pc, #264]	; (80134d8 <HAL_GPIO_DeInit+0x1e4>)
 80133ce:	68da      	ldr	r2, [r3, #12]
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	43db      	mvns	r3, r3
 80133d4:	4940      	ldr	r1, [pc, #256]	; (80134d8 <HAL_GPIO_DeInit+0x1e4>)
 80133d6:	4013      	ands	r3, r2
 80133d8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	f003 0303 	and.w	r3, r3, #3
 80133e0:	009b      	lsls	r3, r3, #2
 80133e2:	220f      	movs	r2, #15
 80133e4:	fa02 f303 	lsl.w	r3, r2, r3
 80133e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80133ea:	4a34      	ldr	r2, [pc, #208]	; (80134bc <HAL_GPIO_DeInit+0x1c8>)
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	089b      	lsrs	r3, r3, #2
 80133f0:	3302      	adds	r3, #2
 80133f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	43da      	mvns	r2, r3
 80133fa:	4830      	ldr	r0, [pc, #192]	; (80134bc <HAL_GPIO_DeInit+0x1c8>)
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	089b      	lsrs	r3, r3, #2
 8013400:	400a      	ands	r2, r1
 8013402:	3302      	adds	r3, #2
 8013404:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681a      	ldr	r2, [r3, #0]
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	005b      	lsls	r3, r3, #1
 8013410:	2103      	movs	r1, #3
 8013412:	fa01 f303 	lsl.w	r3, r1, r3
 8013416:	431a      	orrs	r2, r3
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	08da      	lsrs	r2, r3, #3
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	3208      	adds	r2, #8
 8013424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	f003 0307 	and.w	r3, r3, #7
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	220f      	movs	r2, #15
 8013432:	fa02 f303 	lsl.w	r3, r2, r3
 8013436:	43db      	mvns	r3, r3
 8013438:	697a      	ldr	r2, [r7, #20]
 801343a:	08d2      	lsrs	r2, r2, #3
 801343c:	4019      	ands	r1, r3
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	3208      	adds	r2, #8
 8013442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	689a      	ldr	r2, [r3, #8]
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	005b      	lsls	r3, r3, #1
 801344e:	2103      	movs	r1, #3
 8013450:	fa01 f303 	lsl.w	r3, r1, r3
 8013454:	43db      	mvns	r3, r3
 8013456:	401a      	ands	r2, r3
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	685a      	ldr	r2, [r3, #4]
 8013460:	2101      	movs	r1, #1
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	fa01 f303 	lsl.w	r3, r1, r3
 8013468:	43db      	mvns	r3, r3
 801346a:	401a      	ands	r2, r3
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	68da      	ldr	r2, [r3, #12]
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	005b      	lsls	r3, r3, #1
 8013478:	2103      	movs	r1, #3
 801347a:	fa01 f303 	lsl.w	r3, r1, r3
 801347e:	43db      	mvns	r3, r3
 8013480:	401a      	ands	r2, r3
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801348a:	2101      	movs	r1, #1
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	fa01 f303 	lsl.w	r3, r1, r3
 8013492:	43db      	mvns	r3, r3
 8013494:	401a      	ands	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	3301      	adds	r3, #1
 801349e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80134a0:	683a      	ldr	r2, [r7, #0]
 80134a2:	697b      	ldr	r3, [r7, #20]
 80134a4:	fa22 f303 	lsr.w	r3, r2, r3
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	f47f af2b 	bne.w	8013304 <HAL_GPIO_DeInit+0x10>
  }
}
 80134ae:	bf00      	nop
 80134b0:	bf00      	nop
 80134b2:	371c      	adds	r7, #28
 80134b4:	46bd      	mov	sp, r7
 80134b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ba:	4770      	bx	lr
 80134bc:	40010000 	.word	0x40010000
 80134c0:	48000400 	.word	0x48000400
 80134c4:	48000800 	.word	0x48000800
 80134c8:	48000c00 	.word	0x48000c00
 80134cc:	48001000 	.word	0x48001000
 80134d0:	48001400 	.word	0x48001400
 80134d4:	48001800 	.word	0x48001800
 80134d8:	40010400 	.word	0x40010400

080134dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80134dc:	b480      	push	{r7}
 80134de:	b085      	sub	sp, #20
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	460b      	mov	r3, r1
 80134e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	691a      	ldr	r2, [r3, #16]
 80134ec:	887b      	ldrh	r3, [r7, #2]
 80134ee:	4013      	ands	r3, r2
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d002      	beq.n	80134fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80134f4:	2301      	movs	r3, #1
 80134f6:	73fb      	strb	r3, [r7, #15]
 80134f8:	e001      	b.n	80134fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80134fa:	2300      	movs	r3, #0
 80134fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80134fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013500:	4618      	mov	r0, r3
 8013502:	3714      	adds	r7, #20
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr

0801350c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801350c:	b480      	push	{r7}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	460b      	mov	r3, r1
 8013516:	807b      	strh	r3, [r7, #2]
 8013518:	4613      	mov	r3, r2
 801351a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801351c:	787b      	ldrb	r3, [r7, #1]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d003      	beq.n	801352a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8013522:	887a      	ldrh	r2, [r7, #2]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8013528:	e002      	b.n	8013530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801352a:	887a      	ldrh	r2, [r7, #2]
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013530:	bf00      	nop
 8013532:	370c      	adds	r7, #12
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr

0801353c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801353c:	b480      	push	{r7}
 801353e:	b085      	sub	sp, #20
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	460b      	mov	r3, r1
 8013546:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	695b      	ldr	r3, [r3, #20]
 801354c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801354e:	887a      	ldrh	r2, [r7, #2]
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4013      	ands	r3, r2
 8013554:	041a      	lsls	r2, r3, #16
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	43d9      	mvns	r1, r3
 801355a:	887b      	ldrh	r3, [r7, #2]
 801355c:	400b      	ands	r3, r1
 801355e:	431a      	orrs	r2, r3
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	619a      	str	r2, [r3, #24]
}
 8013564:	bf00      	nop
 8013566:	3714      	adds	r7, #20
 8013568:	46bd      	mov	sp, r7
 801356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356e:	4770      	bx	lr

08013570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b082      	sub	sp, #8
 8013574:	af00      	add	r7, sp, #0
 8013576:	4603      	mov	r3, r0
 8013578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801357a:	4b08      	ldr	r3, [pc, #32]	; (801359c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801357c:	695a      	ldr	r2, [r3, #20]
 801357e:	88fb      	ldrh	r3, [r7, #6]
 8013580:	4013      	ands	r3, r2
 8013582:	2b00      	cmp	r3, #0
 8013584:	d006      	beq.n	8013594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013586:	4a05      	ldr	r2, [pc, #20]	; (801359c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013588:	88fb      	ldrh	r3, [r7, #6]
 801358a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801358c:	88fb      	ldrh	r3, [r7, #6]
 801358e:	4618      	mov	r0, r3
 8013590:	f000 f806 	bl	80135a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8013594:	bf00      	nop
 8013596:	3708      	adds	r7, #8
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}
 801359c:	40010400 	.word	0x40010400

080135a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80135a0:	b480      	push	{r7}
 80135a2:	b083      	sub	sp, #12
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	4603      	mov	r3, r0
 80135a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80135aa:	bf00      	nop
 80135ac:	370c      	adds	r7, #12
 80135ae:	46bd      	mov	sp, r7
 80135b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b4:	4770      	bx	lr
	...

080135b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80135b8:	b480      	push	{r7}
 80135ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80135bc:	4b04      	ldr	r3, [pc, #16]	; (80135d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	46bd      	mov	sp, r7
 80135c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135cc:	4770      	bx	lr
 80135ce:	bf00      	nop
 80135d0:	40007000 	.word	0x40007000

080135d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80135d4:	b480      	push	{r7}
 80135d6:	b085      	sub	sp, #20
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80135e2:	d130      	bne.n	8013646 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80135e4:	4b23      	ldr	r3, [pc, #140]	; (8013674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80135ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80135f0:	d038      	beq.n	8013664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80135f2:	4b20      	ldr	r3, [pc, #128]	; (8013674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80135fa:	4a1e      	ldr	r2, [pc, #120]	; (8013674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80135fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013600:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8013602:	4b1d      	ldr	r3, [pc, #116]	; (8013678 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	2232      	movs	r2, #50	; 0x32
 8013608:	fb02 f303 	mul.w	r3, r2, r3
 801360c:	4a1b      	ldr	r2, [pc, #108]	; (801367c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801360e:	fba2 2303 	umull	r2, r3, r2, r3
 8013612:	0c9b      	lsrs	r3, r3, #18
 8013614:	3301      	adds	r3, #1
 8013616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013618:	e002      	b.n	8013620 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	3b01      	subs	r3, #1
 801361e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013620:	4b14      	ldr	r3, [pc, #80]	; (8013674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013622:	695b      	ldr	r3, [r3, #20]
 8013624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801362c:	d102      	bne.n	8013634 <HAL_PWREx_ControlVoltageScaling+0x60>
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d1f2      	bne.n	801361a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8013634:	4b0f      	ldr	r3, [pc, #60]	; (8013674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013636:	695b      	ldr	r3, [r3, #20]
 8013638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801363c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013640:	d110      	bne.n	8013664 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8013642:	2303      	movs	r3, #3
 8013644:	e00f      	b.n	8013666 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8013646:	4b0b      	ldr	r3, [pc, #44]	; (8013674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801364e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013652:	d007      	beq.n	8013664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8013654:	4b07      	ldr	r3, [pc, #28]	; (8013674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801365c:	4a05      	ldr	r2, [pc, #20]	; (8013674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801365e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013662:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8013664:	2300      	movs	r3, #0
}
 8013666:	4618      	mov	r0, r3
 8013668:	3714      	adds	r7, #20
 801366a:	46bd      	mov	sp, r7
 801366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013670:	4770      	bx	lr
 8013672:	bf00      	nop
 8013674:	40007000 	.word	0x40007000
 8013678:	20000004 	.word	0x20000004
 801367c:	431bde83 	.word	0x431bde83

08013680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b088      	sub	sp, #32
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d101      	bne.n	8013692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801368e:	2301      	movs	r3, #1
 8013690:	e3d4      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013692:	4ba1      	ldr	r3, [pc, #644]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013694:	689b      	ldr	r3, [r3, #8]
 8013696:	f003 030c 	and.w	r3, r3, #12
 801369a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801369c:	4b9e      	ldr	r3, [pc, #632]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 801369e:	68db      	ldr	r3, [r3, #12]
 80136a0:	f003 0303 	and.w	r3, r3, #3
 80136a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	f003 0310 	and.w	r3, r3, #16
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	f000 80e4 	beq.w	801387c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80136b4:	69bb      	ldr	r3, [r7, #24]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d007      	beq.n	80136ca <HAL_RCC_OscConfig+0x4a>
 80136ba:	69bb      	ldr	r3, [r7, #24]
 80136bc:	2b0c      	cmp	r3, #12
 80136be:	f040 808b 	bne.w	80137d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	2b01      	cmp	r3, #1
 80136c6:	f040 8087 	bne.w	80137d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80136ca:	4b93      	ldr	r3, [pc, #588]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	f003 0302 	and.w	r3, r3, #2
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d005      	beq.n	80136e2 <HAL_RCC_OscConfig+0x62>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	699b      	ldr	r3, [r3, #24]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d101      	bne.n	80136e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80136de:	2301      	movs	r3, #1
 80136e0:	e3ac      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6a1a      	ldr	r2, [r3, #32]
 80136e6:	4b8c      	ldr	r3, [pc, #560]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f003 0308 	and.w	r3, r3, #8
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d004      	beq.n	80136fc <HAL_RCC_OscConfig+0x7c>
 80136f2:	4b89      	ldr	r3, [pc, #548]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80136fa:	e005      	b.n	8013708 <HAL_RCC_OscConfig+0x88>
 80136fc:	4b86      	ldr	r3, [pc, #536]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80136fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013702:	091b      	lsrs	r3, r3, #4
 8013704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013708:	4293      	cmp	r3, r2
 801370a:	d223      	bcs.n	8013754 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6a1b      	ldr	r3, [r3, #32]
 8013710:	4618      	mov	r0, r3
 8013712:	f000 fd41 	bl	8014198 <RCC_SetFlashLatencyFromMSIRange>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d001      	beq.n	8013720 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 801371c:	2301      	movs	r3, #1
 801371e:	e38d      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013720:	4b7d      	ldr	r3, [pc, #500]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	4a7c      	ldr	r2, [pc, #496]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013726:	f043 0308 	orr.w	r3, r3, #8
 801372a:	6013      	str	r3, [r2, #0]
 801372c:	4b7a      	ldr	r3, [pc, #488]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6a1b      	ldr	r3, [r3, #32]
 8013738:	4977      	ldr	r1, [pc, #476]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 801373a:	4313      	orrs	r3, r2
 801373c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801373e:	4b76      	ldr	r3, [pc, #472]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	69db      	ldr	r3, [r3, #28]
 801374a:	021b      	lsls	r3, r3, #8
 801374c:	4972      	ldr	r1, [pc, #456]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 801374e:	4313      	orrs	r3, r2
 8013750:	604b      	str	r3, [r1, #4]
 8013752:	e025      	b.n	80137a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013754:	4b70      	ldr	r3, [pc, #448]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	4a6f      	ldr	r2, [pc, #444]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 801375a:	f043 0308 	orr.w	r3, r3, #8
 801375e:	6013      	str	r3, [r2, #0]
 8013760:	4b6d      	ldr	r3, [pc, #436]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6a1b      	ldr	r3, [r3, #32]
 801376c:	496a      	ldr	r1, [pc, #424]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 801376e:	4313      	orrs	r3, r2
 8013770:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013772:	4b69      	ldr	r3, [pc, #420]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	69db      	ldr	r3, [r3, #28]
 801377e:	021b      	lsls	r3, r3, #8
 8013780:	4965      	ldr	r1, [pc, #404]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013782:	4313      	orrs	r3, r2
 8013784:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8013786:	69bb      	ldr	r3, [r7, #24]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d109      	bne.n	80137a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6a1b      	ldr	r3, [r3, #32]
 8013790:	4618      	mov	r0, r3
 8013792:	f000 fd01 	bl	8014198 <RCC_SetFlashLatencyFromMSIRange>
 8013796:	4603      	mov	r3, r0
 8013798:	2b00      	cmp	r3, #0
 801379a:	d001      	beq.n	80137a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 801379c:	2301      	movs	r3, #1
 801379e:	e34d      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80137a0:	f000 fc36 	bl	8014010 <HAL_RCC_GetSysClockFreq>
 80137a4:	4602      	mov	r2, r0
 80137a6:	4b5c      	ldr	r3, [pc, #368]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80137a8:	689b      	ldr	r3, [r3, #8]
 80137aa:	091b      	lsrs	r3, r3, #4
 80137ac:	f003 030f 	and.w	r3, r3, #15
 80137b0:	495a      	ldr	r1, [pc, #360]	; (801391c <HAL_RCC_OscConfig+0x29c>)
 80137b2:	5ccb      	ldrb	r3, [r1, r3]
 80137b4:	f003 031f 	and.w	r3, r3, #31
 80137b8:	fa22 f303 	lsr.w	r3, r2, r3
 80137bc:	4a58      	ldr	r2, [pc, #352]	; (8013920 <HAL_RCC_OscConfig+0x2a0>)
 80137be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80137c0:	4b58      	ldr	r3, [pc, #352]	; (8013924 <HAL_RCC_OscConfig+0x2a4>)
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fe fa13 	bl	8011bf0 <HAL_InitTick>
 80137ca:	4603      	mov	r3, r0
 80137cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80137ce:	7bfb      	ldrb	r3, [r7, #15]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d052      	beq.n	801387a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80137d4:	7bfb      	ldrb	r3, [r7, #15]
 80137d6:	e331      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	699b      	ldr	r3, [r3, #24]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d032      	beq.n	8013846 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80137e0:	4b4d      	ldr	r3, [pc, #308]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	4a4c      	ldr	r2, [pc, #304]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80137e6:	f043 0301 	orr.w	r3, r3, #1
 80137ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80137ec:	f7fe fa50 	bl	8011c90 <HAL_GetTick>
 80137f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80137f2:	e008      	b.n	8013806 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80137f4:	f7fe fa4c 	bl	8011c90 <HAL_GetTick>
 80137f8:	4602      	mov	r2, r0
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	1ad3      	subs	r3, r2, r3
 80137fe:	2b02      	cmp	r3, #2
 8013800:	d901      	bls.n	8013806 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8013802:	2303      	movs	r3, #3
 8013804:	e31a      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013806:	4b44      	ldr	r3, [pc, #272]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f003 0302 	and.w	r3, r3, #2
 801380e:	2b00      	cmp	r3, #0
 8013810:	d0f0      	beq.n	80137f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013812:	4b41      	ldr	r3, [pc, #260]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	4a40      	ldr	r2, [pc, #256]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013818:	f043 0308 	orr.w	r3, r3, #8
 801381c:	6013      	str	r3, [r2, #0]
 801381e:	4b3e      	ldr	r3, [pc, #248]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6a1b      	ldr	r3, [r3, #32]
 801382a:	493b      	ldr	r1, [pc, #236]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 801382c:	4313      	orrs	r3, r2
 801382e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013830:	4b39      	ldr	r3, [pc, #228]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	69db      	ldr	r3, [r3, #28]
 801383c:	021b      	lsls	r3, r3, #8
 801383e:	4936      	ldr	r1, [pc, #216]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013840:	4313      	orrs	r3, r2
 8013842:	604b      	str	r3, [r1, #4]
 8013844:	e01a      	b.n	801387c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8013846:	4b34      	ldr	r3, [pc, #208]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	4a33      	ldr	r2, [pc, #204]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 801384c:	f023 0301 	bic.w	r3, r3, #1
 8013850:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013852:	f7fe fa1d 	bl	8011c90 <HAL_GetTick>
 8013856:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8013858:	e008      	b.n	801386c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801385a:	f7fe fa19 	bl	8011c90 <HAL_GetTick>
 801385e:	4602      	mov	r2, r0
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	1ad3      	subs	r3, r2, r3
 8013864:	2b02      	cmp	r3, #2
 8013866:	d901      	bls.n	801386c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8013868:	2303      	movs	r3, #3
 801386a:	e2e7      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801386c:	4b2a      	ldr	r3, [pc, #168]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f003 0302 	and.w	r3, r3, #2
 8013874:	2b00      	cmp	r3, #0
 8013876:	d1f0      	bne.n	801385a <HAL_RCC_OscConfig+0x1da>
 8013878:	e000      	b.n	801387c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801387a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	f003 0301 	and.w	r3, r3, #1
 8013884:	2b00      	cmp	r3, #0
 8013886:	d074      	beq.n	8013972 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	2b08      	cmp	r3, #8
 801388c:	d005      	beq.n	801389a <HAL_RCC_OscConfig+0x21a>
 801388e:	69bb      	ldr	r3, [r7, #24]
 8013890:	2b0c      	cmp	r3, #12
 8013892:	d10e      	bne.n	80138b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	2b03      	cmp	r3, #3
 8013898:	d10b      	bne.n	80138b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801389a:	4b1f      	ldr	r3, [pc, #124]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d064      	beq.n	8013970 <HAL_RCC_OscConfig+0x2f0>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d160      	bne.n	8013970 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80138ae:	2301      	movs	r3, #1
 80138b0:	e2c4      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80138ba:	d106      	bne.n	80138ca <HAL_RCC_OscConfig+0x24a>
 80138bc:	4b16      	ldr	r3, [pc, #88]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	4a15      	ldr	r2, [pc, #84]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80138c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80138c6:	6013      	str	r3, [r2, #0]
 80138c8:	e01d      	b.n	8013906 <HAL_RCC_OscConfig+0x286>
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	685b      	ldr	r3, [r3, #4]
 80138ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80138d2:	d10c      	bne.n	80138ee <HAL_RCC_OscConfig+0x26e>
 80138d4:	4b10      	ldr	r3, [pc, #64]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	4a0f      	ldr	r2, [pc, #60]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80138da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80138de:	6013      	str	r3, [r2, #0]
 80138e0:	4b0d      	ldr	r3, [pc, #52]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	4a0c      	ldr	r2, [pc, #48]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80138e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80138ea:	6013      	str	r3, [r2, #0]
 80138ec:	e00b      	b.n	8013906 <HAL_RCC_OscConfig+0x286>
 80138ee:	4b0a      	ldr	r3, [pc, #40]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	4a09      	ldr	r2, [pc, #36]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80138f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80138f8:	6013      	str	r3, [r2, #0]
 80138fa:	4b07      	ldr	r3, [pc, #28]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	4a06      	ldr	r2, [pc, #24]	; (8013918 <HAL_RCC_OscConfig+0x298>)
 8013900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013904:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d01c      	beq.n	8013948 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801390e:	f7fe f9bf 	bl	8011c90 <HAL_GetTick>
 8013912:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013914:	e011      	b.n	801393a <HAL_RCC_OscConfig+0x2ba>
 8013916:	bf00      	nop
 8013918:	40021000 	.word	0x40021000
 801391c:	08018190 	.word	0x08018190
 8013920:	20000004 	.word	0x20000004
 8013924:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013928:	f7fe f9b2 	bl	8011c90 <HAL_GetTick>
 801392c:	4602      	mov	r2, r0
 801392e:	693b      	ldr	r3, [r7, #16]
 8013930:	1ad3      	subs	r3, r2, r3
 8013932:	2b64      	cmp	r3, #100	; 0x64
 8013934:	d901      	bls.n	801393a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8013936:	2303      	movs	r3, #3
 8013938:	e280      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801393a:	4baf      	ldr	r3, [pc, #700]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013942:	2b00      	cmp	r3, #0
 8013944:	d0f0      	beq.n	8013928 <HAL_RCC_OscConfig+0x2a8>
 8013946:	e014      	b.n	8013972 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013948:	f7fe f9a2 	bl	8011c90 <HAL_GetTick>
 801394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801394e:	e008      	b.n	8013962 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013950:	f7fe f99e 	bl	8011c90 <HAL_GetTick>
 8013954:	4602      	mov	r2, r0
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	1ad3      	subs	r3, r2, r3
 801395a:	2b64      	cmp	r3, #100	; 0x64
 801395c:	d901      	bls.n	8013962 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801395e:	2303      	movs	r3, #3
 8013960:	e26c      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013962:	4ba5      	ldr	r3, [pc, #660]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801396a:	2b00      	cmp	r3, #0
 801396c:	d1f0      	bne.n	8013950 <HAL_RCC_OscConfig+0x2d0>
 801396e:	e000      	b.n	8013972 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	f003 0302 	and.w	r3, r3, #2
 801397a:	2b00      	cmp	r3, #0
 801397c:	d060      	beq.n	8013a40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801397e:	69bb      	ldr	r3, [r7, #24]
 8013980:	2b04      	cmp	r3, #4
 8013982:	d005      	beq.n	8013990 <HAL_RCC_OscConfig+0x310>
 8013984:	69bb      	ldr	r3, [r7, #24]
 8013986:	2b0c      	cmp	r3, #12
 8013988:	d119      	bne.n	80139be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	2b02      	cmp	r3, #2
 801398e:	d116      	bne.n	80139be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013990:	4b99      	ldr	r3, [pc, #612]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013998:	2b00      	cmp	r3, #0
 801399a:	d005      	beq.n	80139a8 <HAL_RCC_OscConfig+0x328>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	68db      	ldr	r3, [r3, #12]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d101      	bne.n	80139a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80139a4:	2301      	movs	r3, #1
 80139a6:	e249      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80139a8:	4b93      	ldr	r3, [pc, #588]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 80139aa:	685b      	ldr	r3, [r3, #4]
 80139ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	691b      	ldr	r3, [r3, #16]
 80139b4:	061b      	lsls	r3, r3, #24
 80139b6:	4990      	ldr	r1, [pc, #576]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 80139b8:	4313      	orrs	r3, r2
 80139ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80139bc:	e040      	b.n	8013a40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	68db      	ldr	r3, [r3, #12]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d023      	beq.n	8013a0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80139c6:	4b8c      	ldr	r3, [pc, #560]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	4a8b      	ldr	r2, [pc, #556]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 80139cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80139d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80139d2:	f7fe f95d 	bl	8011c90 <HAL_GetTick>
 80139d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80139d8:	e008      	b.n	80139ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80139da:	f7fe f959 	bl	8011c90 <HAL_GetTick>
 80139de:	4602      	mov	r2, r0
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	1ad3      	subs	r3, r2, r3
 80139e4:	2b02      	cmp	r3, #2
 80139e6:	d901      	bls.n	80139ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80139e8:	2303      	movs	r3, #3
 80139ea:	e227      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80139ec:	4b82      	ldr	r3, [pc, #520]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d0f0      	beq.n	80139da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80139f8:	4b7f      	ldr	r3, [pc, #508]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	691b      	ldr	r3, [r3, #16]
 8013a04:	061b      	lsls	r3, r3, #24
 8013a06:	497c      	ldr	r1, [pc, #496]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013a08:	4313      	orrs	r3, r2
 8013a0a:	604b      	str	r3, [r1, #4]
 8013a0c:	e018      	b.n	8013a40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013a0e:	4b7a      	ldr	r3, [pc, #488]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	4a79      	ldr	r2, [pc, #484]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a1a:	f7fe f939 	bl	8011c90 <HAL_GetTick>
 8013a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013a20:	e008      	b.n	8013a34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013a22:	f7fe f935 	bl	8011c90 <HAL_GetTick>
 8013a26:	4602      	mov	r2, r0
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	1ad3      	subs	r3, r2, r3
 8013a2c:	2b02      	cmp	r3, #2
 8013a2e:	d901      	bls.n	8013a34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8013a30:	2303      	movs	r3, #3
 8013a32:	e203      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013a34:	4b70      	ldr	r3, [pc, #448]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d1f0      	bne.n	8013a22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	f003 0308 	and.w	r3, r3, #8
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d03c      	beq.n	8013ac6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	695b      	ldr	r3, [r3, #20]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d01c      	beq.n	8013a8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013a54:	4b68      	ldr	r3, [pc, #416]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013a5a:	4a67      	ldr	r2, [pc, #412]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013a5c:	f043 0301 	orr.w	r3, r3, #1
 8013a60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013a64:	f7fe f914 	bl	8011c90 <HAL_GetTick>
 8013a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013a6a:	e008      	b.n	8013a7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013a6c:	f7fe f910 	bl	8011c90 <HAL_GetTick>
 8013a70:	4602      	mov	r2, r0
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	1ad3      	subs	r3, r2, r3
 8013a76:	2b02      	cmp	r3, #2
 8013a78:	d901      	bls.n	8013a7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8013a7a:	2303      	movs	r3, #3
 8013a7c:	e1de      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013a7e:	4b5e      	ldr	r3, [pc, #376]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013a84:	f003 0302 	and.w	r3, r3, #2
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d0ef      	beq.n	8013a6c <HAL_RCC_OscConfig+0x3ec>
 8013a8c:	e01b      	b.n	8013ac6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013a8e:	4b5a      	ldr	r3, [pc, #360]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013a94:	4a58      	ldr	r2, [pc, #352]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013a96:	f023 0301 	bic.w	r3, r3, #1
 8013a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013a9e:	f7fe f8f7 	bl	8011c90 <HAL_GetTick>
 8013aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013aa4:	e008      	b.n	8013ab8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013aa6:	f7fe f8f3 	bl	8011c90 <HAL_GetTick>
 8013aaa:	4602      	mov	r2, r0
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	1ad3      	subs	r3, r2, r3
 8013ab0:	2b02      	cmp	r3, #2
 8013ab2:	d901      	bls.n	8013ab8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8013ab4:	2303      	movs	r3, #3
 8013ab6:	e1c1      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013ab8:	4b4f      	ldr	r3, [pc, #316]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013abe:	f003 0302 	and.w	r3, r3, #2
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d1ef      	bne.n	8013aa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	f003 0304 	and.w	r3, r3, #4
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	f000 80a6 	beq.w	8013c20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8013ad8:	4b47      	ldr	r3, [pc, #284]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d10d      	bne.n	8013b00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013ae4:	4b44      	ldr	r3, [pc, #272]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ae8:	4a43      	ldr	r2, [pc, #268]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013aee:	6593      	str	r3, [r2, #88]	; 0x58
 8013af0:	4b41      	ldr	r3, [pc, #260]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013af8:	60bb      	str	r3, [r7, #8]
 8013afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013afc:	2301      	movs	r3, #1
 8013afe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013b00:	4b3e      	ldr	r3, [pc, #248]	; (8013bfc <HAL_RCC_OscConfig+0x57c>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d118      	bne.n	8013b3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013b0c:	4b3b      	ldr	r3, [pc, #236]	; (8013bfc <HAL_RCC_OscConfig+0x57c>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	4a3a      	ldr	r2, [pc, #232]	; (8013bfc <HAL_RCC_OscConfig+0x57c>)
 8013b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013b18:	f7fe f8ba 	bl	8011c90 <HAL_GetTick>
 8013b1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013b1e:	e008      	b.n	8013b32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013b20:	f7fe f8b6 	bl	8011c90 <HAL_GetTick>
 8013b24:	4602      	mov	r2, r0
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	1ad3      	subs	r3, r2, r3
 8013b2a:	2b02      	cmp	r3, #2
 8013b2c:	d901      	bls.n	8013b32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8013b2e:	2303      	movs	r3, #3
 8013b30:	e184      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013b32:	4b32      	ldr	r3, [pc, #200]	; (8013bfc <HAL_RCC_OscConfig+0x57c>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d0f0      	beq.n	8013b20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	689b      	ldr	r3, [r3, #8]
 8013b42:	2b01      	cmp	r3, #1
 8013b44:	d108      	bne.n	8013b58 <HAL_RCC_OscConfig+0x4d8>
 8013b46:	4b2c      	ldr	r3, [pc, #176]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b4c:	4a2a      	ldr	r2, [pc, #168]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013b4e:	f043 0301 	orr.w	r3, r3, #1
 8013b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013b56:	e024      	b.n	8013ba2 <HAL_RCC_OscConfig+0x522>
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	2b05      	cmp	r3, #5
 8013b5e:	d110      	bne.n	8013b82 <HAL_RCC_OscConfig+0x502>
 8013b60:	4b25      	ldr	r3, [pc, #148]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b66:	4a24      	ldr	r2, [pc, #144]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013b68:	f043 0304 	orr.w	r3, r3, #4
 8013b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013b70:	4b21      	ldr	r3, [pc, #132]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b76:	4a20      	ldr	r2, [pc, #128]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013b78:	f043 0301 	orr.w	r3, r3, #1
 8013b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013b80:	e00f      	b.n	8013ba2 <HAL_RCC_OscConfig+0x522>
 8013b82:	4b1d      	ldr	r3, [pc, #116]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b88:	4a1b      	ldr	r2, [pc, #108]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013b8a:	f023 0301 	bic.w	r3, r3, #1
 8013b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013b92:	4b19      	ldr	r3, [pc, #100]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b98:	4a17      	ldr	r2, [pc, #92]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013b9a:	f023 0304 	bic.w	r3, r3, #4
 8013b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	689b      	ldr	r3, [r3, #8]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d016      	beq.n	8013bd8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013baa:	f7fe f871 	bl	8011c90 <HAL_GetTick>
 8013bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013bb0:	e00a      	b.n	8013bc8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013bb2:	f7fe f86d 	bl	8011c90 <HAL_GetTick>
 8013bb6:	4602      	mov	r2, r0
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	1ad3      	subs	r3, r2, r3
 8013bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013bc0:	4293      	cmp	r3, r2
 8013bc2:	d901      	bls.n	8013bc8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8013bc4:	2303      	movs	r3, #3
 8013bc6:	e139      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013bc8:	4b0b      	ldr	r3, [pc, #44]	; (8013bf8 <HAL_RCC_OscConfig+0x578>)
 8013bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bce:	f003 0302 	and.w	r3, r3, #2
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d0ed      	beq.n	8013bb2 <HAL_RCC_OscConfig+0x532>
 8013bd6:	e01a      	b.n	8013c0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013bd8:	f7fe f85a 	bl	8011c90 <HAL_GetTick>
 8013bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013bde:	e00f      	b.n	8013c00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013be0:	f7fe f856 	bl	8011c90 <HAL_GetTick>
 8013be4:	4602      	mov	r2, r0
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	1ad3      	subs	r3, r2, r3
 8013bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8013bee:	4293      	cmp	r3, r2
 8013bf0:	d906      	bls.n	8013c00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8013bf2:	2303      	movs	r3, #3
 8013bf4:	e122      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
 8013bf6:	bf00      	nop
 8013bf8:	40021000 	.word	0x40021000
 8013bfc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013c00:	4b90      	ldr	r3, [pc, #576]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c06:	f003 0302 	and.w	r3, r3, #2
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d1e8      	bne.n	8013be0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013c0e:	7ffb      	ldrb	r3, [r7, #31]
 8013c10:	2b01      	cmp	r3, #1
 8013c12:	d105      	bne.n	8013c20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013c14:	4b8b      	ldr	r3, [pc, #556]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c18:	4a8a      	ldr	r2, [pc, #552]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013c1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	f000 8108 	beq.w	8013e3a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c2e:	2b02      	cmp	r3, #2
 8013c30:	f040 80d0 	bne.w	8013dd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8013c34:	4b83      	ldr	r3, [pc, #524]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013c36:	68db      	ldr	r3, [r3, #12]
 8013c38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	f003 0203 	and.w	r2, r3, #3
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c44:	429a      	cmp	r2, r3
 8013c46:	d130      	bne.n	8013caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c52:	3b01      	subs	r3, #1
 8013c54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d127      	bne.n	8013caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d11f      	bne.n	8013caa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013c70:	687a      	ldr	r2, [r7, #4]
 8013c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013c74:	2a07      	cmp	r2, #7
 8013c76:	bf14      	ite	ne
 8013c78:	2201      	movne	r2, #1
 8013c7a:	2200      	moveq	r2, #0
 8013c7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	d113      	bne.n	8013caa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c8c:	085b      	lsrs	r3, r3, #1
 8013c8e:	3b01      	subs	r3, #1
 8013c90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d109      	bne.n	8013caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ca0:	085b      	lsrs	r3, r3, #1
 8013ca2:	3b01      	subs	r3, #1
 8013ca4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d06e      	beq.n	8013d88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	2b0c      	cmp	r3, #12
 8013cae:	d069      	beq.n	8013d84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8013cb0:	4b64      	ldr	r3, [pc, #400]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d105      	bne.n	8013cc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8013cbc:	4b61      	ldr	r3, [pc, #388]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d001      	beq.n	8013ccc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8013cc8:	2301      	movs	r3, #1
 8013cca:	e0b7      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8013ccc:	4b5d      	ldr	r3, [pc, #372]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	4a5c      	ldr	r2, [pc, #368]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013cd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8013cd8:	f7fd ffda 	bl	8011c90 <HAL_GetTick>
 8013cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013cde:	e008      	b.n	8013cf2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013ce0:	f7fd ffd6 	bl	8011c90 <HAL_GetTick>
 8013ce4:	4602      	mov	r2, r0
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	1ad3      	subs	r3, r2, r3
 8013cea:	2b02      	cmp	r3, #2
 8013cec:	d901      	bls.n	8013cf2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8013cee:	2303      	movs	r3, #3
 8013cf0:	e0a4      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013cf2:	4b54      	ldr	r3, [pc, #336]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d1f0      	bne.n	8013ce0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013cfe:	4b51      	ldr	r3, [pc, #324]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013d00:	68da      	ldr	r2, [r3, #12]
 8013d02:	4b51      	ldr	r3, [pc, #324]	; (8013e48 <HAL_RCC_OscConfig+0x7c8>)
 8013d04:	4013      	ands	r3, r2
 8013d06:	687a      	ldr	r2, [r7, #4]
 8013d08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8013d0e:	3a01      	subs	r2, #1
 8013d10:	0112      	lsls	r2, r2, #4
 8013d12:	4311      	orrs	r1, r2
 8013d14:	687a      	ldr	r2, [r7, #4]
 8013d16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013d18:	0212      	lsls	r2, r2, #8
 8013d1a:	4311      	orrs	r1, r2
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8013d20:	0852      	lsrs	r2, r2, #1
 8013d22:	3a01      	subs	r2, #1
 8013d24:	0552      	lsls	r2, r2, #21
 8013d26:	4311      	orrs	r1, r2
 8013d28:	687a      	ldr	r2, [r7, #4]
 8013d2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013d2c:	0852      	lsrs	r2, r2, #1
 8013d2e:	3a01      	subs	r2, #1
 8013d30:	0652      	lsls	r2, r2, #25
 8013d32:	4311      	orrs	r1, r2
 8013d34:	687a      	ldr	r2, [r7, #4]
 8013d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013d38:	0912      	lsrs	r2, r2, #4
 8013d3a:	0452      	lsls	r2, r2, #17
 8013d3c:	430a      	orrs	r2, r1
 8013d3e:	4941      	ldr	r1, [pc, #260]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013d40:	4313      	orrs	r3, r2
 8013d42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8013d44:	4b3f      	ldr	r3, [pc, #252]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	4a3e      	ldr	r2, [pc, #248]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013d4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013d50:	4b3c      	ldr	r3, [pc, #240]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013d52:	68db      	ldr	r3, [r3, #12]
 8013d54:	4a3b      	ldr	r2, [pc, #236]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013d5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8013d5c:	f7fd ff98 	bl	8011c90 <HAL_GetTick>
 8013d60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013d62:	e008      	b.n	8013d76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013d64:	f7fd ff94 	bl	8011c90 <HAL_GetTick>
 8013d68:	4602      	mov	r2, r0
 8013d6a:	693b      	ldr	r3, [r7, #16]
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	2b02      	cmp	r3, #2
 8013d70:	d901      	bls.n	8013d76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8013d72:	2303      	movs	r3, #3
 8013d74:	e062      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013d76:	4b33      	ldr	r3, [pc, #204]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d0f0      	beq.n	8013d64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013d82:	e05a      	b.n	8013e3a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8013d84:	2301      	movs	r3, #1
 8013d86:	e059      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013d88:	4b2e      	ldr	r3, [pc, #184]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d152      	bne.n	8013e3a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8013d94:	4b2b      	ldr	r3, [pc, #172]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	4a2a      	ldr	r2, [pc, #168]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013d9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013da0:	4b28      	ldr	r3, [pc, #160]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013da2:	68db      	ldr	r3, [r3, #12]
 8013da4:	4a27      	ldr	r2, [pc, #156]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013daa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8013dac:	f7fd ff70 	bl	8011c90 <HAL_GetTick>
 8013db0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013db2:	e008      	b.n	8013dc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013db4:	f7fd ff6c 	bl	8011c90 <HAL_GetTick>
 8013db8:	4602      	mov	r2, r0
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	1ad3      	subs	r3, r2, r3
 8013dbe:	2b02      	cmp	r3, #2
 8013dc0:	d901      	bls.n	8013dc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8013dc2:	2303      	movs	r3, #3
 8013dc4:	e03a      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013dc6:	4b1f      	ldr	r3, [pc, #124]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d0f0      	beq.n	8013db4 <HAL_RCC_OscConfig+0x734>
 8013dd2:	e032      	b.n	8013e3a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013dd4:	69bb      	ldr	r3, [r7, #24]
 8013dd6:	2b0c      	cmp	r3, #12
 8013dd8:	d02d      	beq.n	8013e36 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013dda:	4b1a      	ldr	r3, [pc, #104]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	4a19      	ldr	r2, [pc, #100]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013de0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013de4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8013de6:	4b17      	ldr	r3, [pc, #92]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d105      	bne.n	8013dfe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8013df2:	4b14      	ldr	r3, [pc, #80]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013df4:	68db      	ldr	r3, [r3, #12]
 8013df6:	4a13      	ldr	r2, [pc, #76]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013df8:	f023 0303 	bic.w	r3, r3, #3
 8013dfc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8013dfe:	4b11      	ldr	r3, [pc, #68]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	4a10      	ldr	r2, [pc, #64]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013e04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8013e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013e0c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e0e:	f7fd ff3f 	bl	8011c90 <HAL_GetTick>
 8013e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013e14:	e008      	b.n	8013e28 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013e16:	f7fd ff3b 	bl	8011c90 <HAL_GetTick>
 8013e1a:	4602      	mov	r2, r0
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	1ad3      	subs	r3, r2, r3
 8013e20:	2b02      	cmp	r3, #2
 8013e22:	d901      	bls.n	8013e28 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8013e24:	2303      	movs	r3, #3
 8013e26:	e009      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013e28:	4b06      	ldr	r3, [pc, #24]	; (8013e44 <HAL_RCC_OscConfig+0x7c4>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d1f0      	bne.n	8013e16 <HAL_RCC_OscConfig+0x796>
 8013e34:	e001      	b.n	8013e3a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8013e36:	2301      	movs	r3, #1
 8013e38:	e000      	b.n	8013e3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8013e3a:	2300      	movs	r3, #0
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3720      	adds	r7, #32
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}
 8013e44:	40021000 	.word	0x40021000
 8013e48:	f99d808c 	.word	0xf99d808c

08013e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d101      	bne.n	8013e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	e0c8      	b.n	8013ff2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013e60:	4b66      	ldr	r3, [pc, #408]	; (8013ffc <HAL_RCC_ClockConfig+0x1b0>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f003 0307 	and.w	r3, r3, #7
 8013e68:	683a      	ldr	r2, [r7, #0]
 8013e6a:	429a      	cmp	r2, r3
 8013e6c:	d910      	bls.n	8013e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013e6e:	4b63      	ldr	r3, [pc, #396]	; (8013ffc <HAL_RCC_ClockConfig+0x1b0>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	f023 0207 	bic.w	r2, r3, #7
 8013e76:	4961      	ldr	r1, [pc, #388]	; (8013ffc <HAL_RCC_ClockConfig+0x1b0>)
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	4313      	orrs	r3, r2
 8013e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013e7e:	4b5f      	ldr	r3, [pc, #380]	; (8013ffc <HAL_RCC_ClockConfig+0x1b0>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	f003 0307 	and.w	r3, r3, #7
 8013e86:	683a      	ldr	r2, [r7, #0]
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d001      	beq.n	8013e90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	e0b0      	b.n	8013ff2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	f003 0301 	and.w	r3, r3, #1
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d04c      	beq.n	8013f36 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	685b      	ldr	r3, [r3, #4]
 8013ea0:	2b03      	cmp	r3, #3
 8013ea2:	d107      	bne.n	8013eb4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013ea4:	4b56      	ldr	r3, [pc, #344]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d121      	bne.n	8013ef4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	e09e      	b.n	8013ff2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	2b02      	cmp	r3, #2
 8013eba:	d107      	bne.n	8013ecc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013ebc:	4b50      	ldr	r3, [pc, #320]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d115      	bne.n	8013ef4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8013ec8:	2301      	movs	r3, #1
 8013eca:	e092      	b.n	8013ff2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d107      	bne.n	8013ee4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013ed4:	4b4a      	ldr	r3, [pc, #296]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	f003 0302 	and.w	r3, r3, #2
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d109      	bne.n	8013ef4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	e086      	b.n	8013ff2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013ee4:	4b46      	ldr	r3, [pc, #280]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d101      	bne.n	8013ef4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	e07e      	b.n	8013ff2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013ef4:	4b42      	ldr	r3, [pc, #264]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013ef6:	689b      	ldr	r3, [r3, #8]
 8013ef8:	f023 0203 	bic.w	r2, r3, #3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	685b      	ldr	r3, [r3, #4]
 8013f00:	493f      	ldr	r1, [pc, #252]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013f02:	4313      	orrs	r3, r2
 8013f04:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013f06:	f7fd fec3 	bl	8011c90 <HAL_GetTick>
 8013f0a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013f0c:	e00a      	b.n	8013f24 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013f0e:	f7fd febf 	bl	8011c90 <HAL_GetTick>
 8013f12:	4602      	mov	r2, r0
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	1ad3      	subs	r3, r2, r3
 8013f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	d901      	bls.n	8013f24 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8013f20:	2303      	movs	r3, #3
 8013f22:	e066      	b.n	8013ff2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013f24:	4b36      	ldr	r3, [pc, #216]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013f26:	689b      	ldr	r3, [r3, #8]
 8013f28:	f003 020c 	and.w	r2, r3, #12
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	009b      	lsls	r3, r3, #2
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d1eb      	bne.n	8013f0e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	f003 0302 	and.w	r3, r3, #2
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d008      	beq.n	8013f54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013f42:	4b2f      	ldr	r3, [pc, #188]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013f44:	689b      	ldr	r3, [r3, #8]
 8013f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	689b      	ldr	r3, [r3, #8]
 8013f4e:	492c      	ldr	r1, [pc, #176]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013f50:	4313      	orrs	r3, r2
 8013f52:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013f54:	4b29      	ldr	r3, [pc, #164]	; (8013ffc <HAL_RCC_ClockConfig+0x1b0>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	f003 0307 	and.w	r3, r3, #7
 8013f5c:	683a      	ldr	r2, [r7, #0]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d210      	bcs.n	8013f84 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013f62:	4b26      	ldr	r3, [pc, #152]	; (8013ffc <HAL_RCC_ClockConfig+0x1b0>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	f023 0207 	bic.w	r2, r3, #7
 8013f6a:	4924      	ldr	r1, [pc, #144]	; (8013ffc <HAL_RCC_ClockConfig+0x1b0>)
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	4313      	orrs	r3, r2
 8013f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013f72:	4b22      	ldr	r3, [pc, #136]	; (8013ffc <HAL_RCC_ClockConfig+0x1b0>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	f003 0307 	and.w	r3, r3, #7
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d001      	beq.n	8013f84 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8013f80:	2301      	movs	r3, #1
 8013f82:	e036      	b.n	8013ff2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	f003 0304 	and.w	r3, r3, #4
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d008      	beq.n	8013fa2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013f90:	4b1b      	ldr	r3, [pc, #108]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013f92:	689b      	ldr	r3, [r3, #8]
 8013f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	68db      	ldr	r3, [r3, #12]
 8013f9c:	4918      	ldr	r1, [pc, #96]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013f9e:	4313      	orrs	r3, r2
 8013fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	f003 0308 	and.w	r3, r3, #8
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d009      	beq.n	8013fc2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013fae:	4b14      	ldr	r3, [pc, #80]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013fb0:	689b      	ldr	r3, [r3, #8]
 8013fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	691b      	ldr	r3, [r3, #16]
 8013fba:	00db      	lsls	r3, r3, #3
 8013fbc:	4910      	ldr	r1, [pc, #64]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013fbe:	4313      	orrs	r3, r2
 8013fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013fc2:	f000 f825 	bl	8014010 <HAL_RCC_GetSysClockFreq>
 8013fc6:	4602      	mov	r2, r0
 8013fc8:	4b0d      	ldr	r3, [pc, #52]	; (8014000 <HAL_RCC_ClockConfig+0x1b4>)
 8013fca:	689b      	ldr	r3, [r3, #8]
 8013fcc:	091b      	lsrs	r3, r3, #4
 8013fce:	f003 030f 	and.w	r3, r3, #15
 8013fd2:	490c      	ldr	r1, [pc, #48]	; (8014004 <HAL_RCC_ClockConfig+0x1b8>)
 8013fd4:	5ccb      	ldrb	r3, [r1, r3]
 8013fd6:	f003 031f 	and.w	r3, r3, #31
 8013fda:	fa22 f303 	lsr.w	r3, r2, r3
 8013fde:	4a0a      	ldr	r2, [pc, #40]	; (8014008 <HAL_RCC_ClockConfig+0x1bc>)
 8013fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8013fe2:	4b0a      	ldr	r3, [pc, #40]	; (801400c <HAL_RCC_ClockConfig+0x1c0>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fd fe02 	bl	8011bf0 <HAL_InitTick>
 8013fec:	4603      	mov	r3, r0
 8013fee:	72fb      	strb	r3, [r7, #11]

  return status;
 8013ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3710      	adds	r7, #16
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	40022000 	.word	0x40022000
 8014000:	40021000 	.word	0x40021000
 8014004:	08018190 	.word	0x08018190
 8014008:	20000004 	.word	0x20000004
 801400c:	20000014 	.word	0x20000014

08014010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014010:	b480      	push	{r7}
 8014012:	b089      	sub	sp, #36	; 0x24
 8014014:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8014016:	2300      	movs	r3, #0
 8014018:	61fb      	str	r3, [r7, #28]
 801401a:	2300      	movs	r3, #0
 801401c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801401e:	4b3e      	ldr	r3, [pc, #248]	; (8014118 <HAL_RCC_GetSysClockFreq+0x108>)
 8014020:	689b      	ldr	r3, [r3, #8]
 8014022:	f003 030c 	and.w	r3, r3, #12
 8014026:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014028:	4b3b      	ldr	r3, [pc, #236]	; (8014118 <HAL_RCC_GetSysClockFreq+0x108>)
 801402a:	68db      	ldr	r3, [r3, #12]
 801402c:	f003 0303 	and.w	r3, r3, #3
 8014030:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8014032:	693b      	ldr	r3, [r7, #16]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d005      	beq.n	8014044 <HAL_RCC_GetSysClockFreq+0x34>
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	2b0c      	cmp	r3, #12
 801403c:	d121      	bne.n	8014082 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	2b01      	cmp	r3, #1
 8014042:	d11e      	bne.n	8014082 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8014044:	4b34      	ldr	r3, [pc, #208]	; (8014118 <HAL_RCC_GetSysClockFreq+0x108>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	f003 0308 	and.w	r3, r3, #8
 801404c:	2b00      	cmp	r3, #0
 801404e:	d107      	bne.n	8014060 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8014050:	4b31      	ldr	r3, [pc, #196]	; (8014118 <HAL_RCC_GetSysClockFreq+0x108>)
 8014052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014056:	0a1b      	lsrs	r3, r3, #8
 8014058:	f003 030f 	and.w	r3, r3, #15
 801405c:	61fb      	str	r3, [r7, #28]
 801405e:	e005      	b.n	801406c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8014060:	4b2d      	ldr	r3, [pc, #180]	; (8014118 <HAL_RCC_GetSysClockFreq+0x108>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	091b      	lsrs	r3, r3, #4
 8014066:	f003 030f 	and.w	r3, r3, #15
 801406a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801406c:	4a2b      	ldr	r2, [pc, #172]	; (801411c <HAL_RCC_GetSysClockFreq+0x10c>)
 801406e:	69fb      	ldr	r3, [r7, #28]
 8014070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014074:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d10d      	bne.n	8014098 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801407c:	69fb      	ldr	r3, [r7, #28]
 801407e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014080:	e00a      	b.n	8014098 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	2b04      	cmp	r3, #4
 8014086:	d102      	bne.n	801408e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8014088:	4b25      	ldr	r3, [pc, #148]	; (8014120 <HAL_RCC_GetSysClockFreq+0x110>)
 801408a:	61bb      	str	r3, [r7, #24]
 801408c:	e004      	b.n	8014098 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801408e:	693b      	ldr	r3, [r7, #16]
 8014090:	2b08      	cmp	r3, #8
 8014092:	d101      	bne.n	8014098 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8014094:	4b23      	ldr	r3, [pc, #140]	; (8014124 <HAL_RCC_GetSysClockFreq+0x114>)
 8014096:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	2b0c      	cmp	r3, #12
 801409c:	d134      	bne.n	8014108 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801409e:	4b1e      	ldr	r3, [pc, #120]	; (8014118 <HAL_RCC_GetSysClockFreq+0x108>)
 80140a0:	68db      	ldr	r3, [r3, #12]
 80140a2:	f003 0303 	and.w	r3, r3, #3
 80140a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	2b02      	cmp	r3, #2
 80140ac:	d003      	beq.n	80140b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	2b03      	cmp	r3, #3
 80140b2:	d003      	beq.n	80140bc <HAL_RCC_GetSysClockFreq+0xac>
 80140b4:	e005      	b.n	80140c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80140b6:	4b1a      	ldr	r3, [pc, #104]	; (8014120 <HAL_RCC_GetSysClockFreq+0x110>)
 80140b8:	617b      	str	r3, [r7, #20]
      break;
 80140ba:	e005      	b.n	80140c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80140bc:	4b19      	ldr	r3, [pc, #100]	; (8014124 <HAL_RCC_GetSysClockFreq+0x114>)
 80140be:	617b      	str	r3, [r7, #20]
      break;
 80140c0:	e002      	b.n	80140c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80140c2:	69fb      	ldr	r3, [r7, #28]
 80140c4:	617b      	str	r3, [r7, #20]
      break;
 80140c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80140c8:	4b13      	ldr	r3, [pc, #76]	; (8014118 <HAL_RCC_GetSysClockFreq+0x108>)
 80140ca:	68db      	ldr	r3, [r3, #12]
 80140cc:	091b      	lsrs	r3, r3, #4
 80140ce:	f003 0307 	and.w	r3, r3, #7
 80140d2:	3301      	adds	r3, #1
 80140d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80140d6:	4b10      	ldr	r3, [pc, #64]	; (8014118 <HAL_RCC_GetSysClockFreq+0x108>)
 80140d8:	68db      	ldr	r3, [r3, #12]
 80140da:	0a1b      	lsrs	r3, r3, #8
 80140dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140e0:	697a      	ldr	r2, [r7, #20]
 80140e2:	fb02 f203 	mul.w	r2, r2, r3
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80140ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80140ee:	4b0a      	ldr	r3, [pc, #40]	; (8014118 <HAL_RCC_GetSysClockFreq+0x108>)
 80140f0:	68db      	ldr	r3, [r3, #12]
 80140f2:	0e5b      	lsrs	r3, r3, #25
 80140f4:	f003 0303 	and.w	r3, r3, #3
 80140f8:	3301      	adds	r3, #1
 80140fa:	005b      	lsls	r3, r3, #1
 80140fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80140fe:	697a      	ldr	r2, [r7, #20]
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	fbb2 f3f3 	udiv	r3, r2, r3
 8014106:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8014108:	69bb      	ldr	r3, [r7, #24]
}
 801410a:	4618      	mov	r0, r3
 801410c:	3724      	adds	r7, #36	; 0x24
 801410e:	46bd      	mov	sp, r7
 8014110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014114:	4770      	bx	lr
 8014116:	bf00      	nop
 8014118:	40021000 	.word	0x40021000
 801411c:	080181a8 	.word	0x080181a8
 8014120:	00f42400 	.word	0x00f42400
 8014124:	007a1200 	.word	0x007a1200

08014128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014128:	b480      	push	{r7}
 801412a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801412c:	4b03      	ldr	r3, [pc, #12]	; (801413c <HAL_RCC_GetHCLKFreq+0x14>)
 801412e:	681b      	ldr	r3, [r3, #0]
}
 8014130:	4618      	mov	r0, r3
 8014132:	46bd      	mov	sp, r7
 8014134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014138:	4770      	bx	lr
 801413a:	bf00      	nop
 801413c:	20000004 	.word	0x20000004

08014140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8014144:	f7ff fff0 	bl	8014128 <HAL_RCC_GetHCLKFreq>
 8014148:	4602      	mov	r2, r0
 801414a:	4b06      	ldr	r3, [pc, #24]	; (8014164 <HAL_RCC_GetPCLK1Freq+0x24>)
 801414c:	689b      	ldr	r3, [r3, #8]
 801414e:	0a1b      	lsrs	r3, r3, #8
 8014150:	f003 0307 	and.w	r3, r3, #7
 8014154:	4904      	ldr	r1, [pc, #16]	; (8014168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014156:	5ccb      	ldrb	r3, [r1, r3]
 8014158:	f003 031f 	and.w	r3, r3, #31
 801415c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014160:	4618      	mov	r0, r3
 8014162:	bd80      	pop	{r7, pc}
 8014164:	40021000 	.word	0x40021000
 8014168:	080181a0 	.word	0x080181a0

0801416c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8014170:	f7ff ffda 	bl	8014128 <HAL_RCC_GetHCLKFreq>
 8014174:	4602      	mov	r2, r0
 8014176:	4b06      	ldr	r3, [pc, #24]	; (8014190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014178:	689b      	ldr	r3, [r3, #8]
 801417a:	0adb      	lsrs	r3, r3, #11
 801417c:	f003 0307 	and.w	r3, r3, #7
 8014180:	4904      	ldr	r1, [pc, #16]	; (8014194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014182:	5ccb      	ldrb	r3, [r1, r3]
 8014184:	f003 031f 	and.w	r3, r3, #31
 8014188:	fa22 f303 	lsr.w	r3, r2, r3
}
 801418c:	4618      	mov	r0, r3
 801418e:	bd80      	pop	{r7, pc}
 8014190:	40021000 	.word	0x40021000
 8014194:	080181a0 	.word	0x080181a0

08014198 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b086      	sub	sp, #24
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80141a0:	2300      	movs	r3, #0
 80141a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80141a4:	4b2a      	ldr	r3, [pc, #168]	; (8014250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80141a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d003      	beq.n	80141b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80141b0:	f7ff fa02 	bl	80135b8 <HAL_PWREx_GetVoltageRange>
 80141b4:	6178      	str	r0, [r7, #20]
 80141b6:	e014      	b.n	80141e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80141b8:	4b25      	ldr	r3, [pc, #148]	; (8014250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80141ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141bc:	4a24      	ldr	r2, [pc, #144]	; (8014250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80141be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80141c2:	6593      	str	r3, [r2, #88]	; 0x58
 80141c4:	4b22      	ldr	r3, [pc, #136]	; (8014250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80141c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80141cc:	60fb      	str	r3, [r7, #12]
 80141ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80141d0:	f7ff f9f2 	bl	80135b8 <HAL_PWREx_GetVoltageRange>
 80141d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80141d6:	4b1e      	ldr	r3, [pc, #120]	; (8014250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80141d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141da:	4a1d      	ldr	r2, [pc, #116]	; (8014250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80141dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80141e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80141e8:	d10b      	bne.n	8014202 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2b80      	cmp	r3, #128	; 0x80
 80141ee:	d919      	bls.n	8014224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2ba0      	cmp	r3, #160	; 0xa0
 80141f4:	d902      	bls.n	80141fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80141f6:	2302      	movs	r3, #2
 80141f8:	613b      	str	r3, [r7, #16]
 80141fa:	e013      	b.n	8014224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80141fc:	2301      	movs	r3, #1
 80141fe:	613b      	str	r3, [r7, #16]
 8014200:	e010      	b.n	8014224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2b80      	cmp	r3, #128	; 0x80
 8014206:	d902      	bls.n	801420e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8014208:	2303      	movs	r3, #3
 801420a:	613b      	str	r3, [r7, #16]
 801420c:	e00a      	b.n	8014224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	2b80      	cmp	r3, #128	; 0x80
 8014212:	d102      	bne.n	801421a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8014214:	2302      	movs	r3, #2
 8014216:	613b      	str	r3, [r7, #16]
 8014218:	e004      	b.n	8014224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	2b70      	cmp	r3, #112	; 0x70
 801421e:	d101      	bne.n	8014224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8014220:	2301      	movs	r3, #1
 8014222:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8014224:	4b0b      	ldr	r3, [pc, #44]	; (8014254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	f023 0207 	bic.w	r2, r3, #7
 801422c:	4909      	ldr	r1, [pc, #36]	; (8014254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	4313      	orrs	r3, r2
 8014232:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8014234:	4b07      	ldr	r3, [pc, #28]	; (8014254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	f003 0307 	and.w	r3, r3, #7
 801423c:	693a      	ldr	r2, [r7, #16]
 801423e:	429a      	cmp	r2, r3
 8014240:	d001      	beq.n	8014246 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8014242:	2301      	movs	r3, #1
 8014244:	e000      	b.n	8014248 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8014246:	2300      	movs	r3, #0
}
 8014248:	4618      	mov	r0, r3
 801424a:	3718      	adds	r7, #24
 801424c:	46bd      	mov	sp, r7
 801424e:	bd80      	pop	{r7, pc}
 8014250:	40021000 	.word	0x40021000
 8014254:	40022000 	.word	0x40022000

08014258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b086      	sub	sp, #24
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8014260:	2300      	movs	r3, #0
 8014262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8014264:	2300      	movs	r3, #0
 8014266:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014270:	2b00      	cmp	r3, #0
 8014272:	d041      	beq.n	80142f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014278:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801427c:	d02a      	beq.n	80142d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801427e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8014282:	d824      	bhi.n	80142ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8014284:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014288:	d008      	beq.n	801429c <HAL_RCCEx_PeriphCLKConfig+0x44>
 801428a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801428e:	d81e      	bhi.n	80142ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8014290:	2b00      	cmp	r3, #0
 8014292:	d00a      	beq.n	80142aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8014294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014298:	d010      	beq.n	80142bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 801429a:	e018      	b.n	80142ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801429c:	4b86      	ldr	r3, [pc, #536]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801429e:	68db      	ldr	r3, [r3, #12]
 80142a0:	4a85      	ldr	r2, [pc, #532]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80142a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80142a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80142a8:	e015      	b.n	80142d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	3304      	adds	r3, #4
 80142ae:	2100      	movs	r1, #0
 80142b0:	4618      	mov	r0, r3
 80142b2:	f000 fabb 	bl	801482c <RCCEx_PLLSAI1_Config>
 80142b6:	4603      	mov	r3, r0
 80142b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80142ba:	e00c      	b.n	80142d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	3320      	adds	r3, #32
 80142c0:	2100      	movs	r1, #0
 80142c2:	4618      	mov	r0, r3
 80142c4:	f000 fba6 	bl	8014a14 <RCCEx_PLLSAI2_Config>
 80142c8:	4603      	mov	r3, r0
 80142ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80142cc:	e003      	b.n	80142d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80142ce:	2301      	movs	r3, #1
 80142d0:	74fb      	strb	r3, [r7, #19]
      break;
 80142d2:	e000      	b.n	80142d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80142d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80142d6:	7cfb      	ldrb	r3, [r7, #19]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d10b      	bne.n	80142f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80142dc:	4b76      	ldr	r3, [pc, #472]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80142de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80142e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80142ea:	4973      	ldr	r1, [pc, #460]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80142ec:	4313      	orrs	r3, r2
 80142ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80142f2:	e001      	b.n	80142f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80142f4:	7cfb      	ldrb	r3, [r7, #19]
 80142f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014300:	2b00      	cmp	r3, #0
 8014302:	d041      	beq.n	8014388 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014308:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801430c:	d02a      	beq.n	8014364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 801430e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8014312:	d824      	bhi.n	801435e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8014314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014318:	d008      	beq.n	801432c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801431a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801431e:	d81e      	bhi.n	801435e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8014320:	2b00      	cmp	r3, #0
 8014322:	d00a      	beq.n	801433a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8014324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014328:	d010      	beq.n	801434c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801432a:	e018      	b.n	801435e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801432c:	4b62      	ldr	r3, [pc, #392]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	4a61      	ldr	r2, [pc, #388]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014336:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8014338:	e015      	b.n	8014366 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	3304      	adds	r3, #4
 801433e:	2100      	movs	r1, #0
 8014340:	4618      	mov	r0, r3
 8014342:	f000 fa73 	bl	801482c <RCCEx_PLLSAI1_Config>
 8014346:	4603      	mov	r3, r0
 8014348:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801434a:	e00c      	b.n	8014366 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	3320      	adds	r3, #32
 8014350:	2100      	movs	r1, #0
 8014352:	4618      	mov	r0, r3
 8014354:	f000 fb5e 	bl	8014a14 <RCCEx_PLLSAI2_Config>
 8014358:	4603      	mov	r3, r0
 801435a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801435c:	e003      	b.n	8014366 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801435e:	2301      	movs	r3, #1
 8014360:	74fb      	strb	r3, [r7, #19]
      break;
 8014362:	e000      	b.n	8014366 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8014364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014366:	7cfb      	ldrb	r3, [r7, #19]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10b      	bne.n	8014384 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801436c:	4b52      	ldr	r3, [pc, #328]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014372:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801437a:	494f      	ldr	r1, [pc, #316]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801437c:	4313      	orrs	r3, r2
 801437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8014382:	e001      	b.n	8014388 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014384:	7cfb      	ldrb	r3, [r7, #19]
 8014386:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014390:	2b00      	cmp	r3, #0
 8014392:	f000 80a0 	beq.w	80144d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014396:	2300      	movs	r3, #0
 8014398:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801439a:	4b47      	ldr	r3, [pc, #284]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801439e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d101      	bne.n	80143aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80143a6:	2301      	movs	r3, #1
 80143a8:	e000      	b.n	80143ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80143aa:	2300      	movs	r3, #0
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d00d      	beq.n	80143cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80143b0:	4b41      	ldr	r3, [pc, #260]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80143b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143b4:	4a40      	ldr	r2, [pc, #256]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80143b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80143ba:	6593      	str	r3, [r2, #88]	; 0x58
 80143bc:	4b3e      	ldr	r3, [pc, #248]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80143be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80143c4:	60bb      	str	r3, [r7, #8]
 80143c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80143c8:	2301      	movs	r3, #1
 80143ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80143cc:	4b3b      	ldr	r3, [pc, #236]	; (80144bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4a3a      	ldr	r2, [pc, #232]	; (80144bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80143d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80143d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80143d8:	f7fd fc5a 	bl	8011c90 <HAL_GetTick>
 80143dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80143de:	e009      	b.n	80143f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80143e0:	f7fd fc56 	bl	8011c90 <HAL_GetTick>
 80143e4:	4602      	mov	r2, r0
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	1ad3      	subs	r3, r2, r3
 80143ea:	2b02      	cmp	r3, #2
 80143ec:	d902      	bls.n	80143f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80143ee:	2303      	movs	r3, #3
 80143f0:	74fb      	strb	r3, [r7, #19]
        break;
 80143f2:	e005      	b.n	8014400 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80143f4:	4b31      	ldr	r3, [pc, #196]	; (80144bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d0ef      	beq.n	80143e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8014400:	7cfb      	ldrb	r3, [r7, #19]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d15c      	bne.n	80144c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8014406:	4b2c      	ldr	r3, [pc, #176]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801440c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014410:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d01f      	beq.n	8014458 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801441e:	697a      	ldr	r2, [r7, #20]
 8014420:	429a      	cmp	r2, r3
 8014422:	d019      	beq.n	8014458 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8014424:	4b24      	ldr	r3, [pc, #144]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801442e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8014430:	4b21      	ldr	r3, [pc, #132]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014436:	4a20      	ldr	r2, [pc, #128]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801443c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8014440:	4b1d      	ldr	r3, [pc, #116]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014446:	4a1c      	ldr	r2, [pc, #112]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801444c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8014450:	4a19      	ldr	r2, [pc, #100]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	f003 0301 	and.w	r3, r3, #1
 801445e:	2b00      	cmp	r3, #0
 8014460:	d016      	beq.n	8014490 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014462:	f7fd fc15 	bl	8011c90 <HAL_GetTick>
 8014466:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014468:	e00b      	b.n	8014482 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801446a:	f7fd fc11 	bl	8011c90 <HAL_GetTick>
 801446e:	4602      	mov	r2, r0
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	1ad3      	subs	r3, r2, r3
 8014474:	f241 3288 	movw	r2, #5000	; 0x1388
 8014478:	4293      	cmp	r3, r2
 801447a:	d902      	bls.n	8014482 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 801447c:	2303      	movs	r3, #3
 801447e:	74fb      	strb	r3, [r7, #19]
            break;
 8014480:	e006      	b.n	8014490 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014482:	4b0d      	ldr	r3, [pc, #52]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014488:	f003 0302 	and.w	r3, r3, #2
 801448c:	2b00      	cmp	r3, #0
 801448e:	d0ec      	beq.n	801446a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8014490:	7cfb      	ldrb	r3, [r7, #19]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d10c      	bne.n	80144b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014496:	4b08      	ldr	r3, [pc, #32]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801449c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80144a6:	4904      	ldr	r1, [pc, #16]	; (80144b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80144a8:	4313      	orrs	r3, r2
 80144aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80144ae:	e009      	b.n	80144c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80144b0:	7cfb      	ldrb	r3, [r7, #19]
 80144b2:	74bb      	strb	r3, [r7, #18]
 80144b4:	e006      	b.n	80144c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80144b6:	bf00      	nop
 80144b8:	40021000 	.word	0x40021000
 80144bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80144c0:	7cfb      	ldrb	r3, [r7, #19]
 80144c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80144c4:	7c7b      	ldrb	r3, [r7, #17]
 80144c6:	2b01      	cmp	r3, #1
 80144c8:	d105      	bne.n	80144d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80144ca:	4b9e      	ldr	r3, [pc, #632]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80144cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80144ce:	4a9d      	ldr	r2, [pc, #628]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80144d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80144d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	f003 0301 	and.w	r3, r3, #1
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d00a      	beq.n	80144f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80144e2:	4b98      	ldr	r3, [pc, #608]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80144e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144e8:	f023 0203 	bic.w	r2, r3, #3
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144f0:	4994      	ldr	r1, [pc, #592]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80144f2:	4313      	orrs	r3, r2
 80144f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	f003 0302 	and.w	r3, r3, #2
 8014500:	2b00      	cmp	r3, #0
 8014502:	d00a      	beq.n	801451a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8014504:	4b8f      	ldr	r3, [pc, #572]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801450a:	f023 020c 	bic.w	r2, r3, #12
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014512:	498c      	ldr	r1, [pc, #560]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014514:	4313      	orrs	r3, r2
 8014516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	f003 0304 	and.w	r3, r3, #4
 8014522:	2b00      	cmp	r3, #0
 8014524:	d00a      	beq.n	801453c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8014526:	4b87      	ldr	r3, [pc, #540]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801452c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014534:	4983      	ldr	r1, [pc, #524]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014536:	4313      	orrs	r3, r2
 8014538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	f003 0308 	and.w	r3, r3, #8
 8014544:	2b00      	cmp	r3, #0
 8014546:	d00a      	beq.n	801455e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8014548:	4b7e      	ldr	r3, [pc, #504]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801454e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014556:	497b      	ldr	r1, [pc, #492]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014558:	4313      	orrs	r3, r2
 801455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	f003 0310 	and.w	r3, r3, #16
 8014566:	2b00      	cmp	r3, #0
 8014568:	d00a      	beq.n	8014580 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801456a:	4b76      	ldr	r3, [pc, #472]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014578:	4972      	ldr	r1, [pc, #456]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801457a:	4313      	orrs	r3, r2
 801457c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	f003 0320 	and.w	r3, r3, #32
 8014588:	2b00      	cmp	r3, #0
 801458a:	d00a      	beq.n	80145a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801458c:	4b6d      	ldr	r3, [pc, #436]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014592:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801459a:	496a      	ldr	r1, [pc, #424]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801459c:	4313      	orrs	r3, r2
 801459e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d00a      	beq.n	80145c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80145ae:	4b65      	ldr	r3, [pc, #404]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80145b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80145bc:	4961      	ldr	r1, [pc, #388]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80145be:	4313      	orrs	r3, r2
 80145c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d00a      	beq.n	80145e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80145d0:	4b5c      	ldr	r3, [pc, #368]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80145d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80145de:	4959      	ldr	r1, [pc, #356]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80145e0:	4313      	orrs	r3, r2
 80145e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d00a      	beq.n	8014608 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80145f2:	4b54      	ldr	r3, [pc, #336]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80145f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014600:	4950      	ldr	r1, [pc, #320]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014602:	4313      	orrs	r3, r2
 8014604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014610:	2b00      	cmp	r3, #0
 8014612:	d00a      	beq.n	801462a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8014614:	4b4b      	ldr	r3, [pc, #300]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801461a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014622:	4948      	ldr	r1, [pc, #288]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014624:	4313      	orrs	r3, r2
 8014626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014632:	2b00      	cmp	r3, #0
 8014634:	d00a      	beq.n	801464c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8014636:	4b43      	ldr	r3, [pc, #268]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801463c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014644:	493f      	ldr	r1, [pc, #252]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014646:	4313      	orrs	r3, r2
 8014648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014654:	2b00      	cmp	r3, #0
 8014656:	d028      	beq.n	80146aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014658:	4b3a      	ldr	r3, [pc, #232]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801465e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014666:	4937      	ldr	r1, [pc, #220]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014668:	4313      	orrs	r3, r2
 801466a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014676:	d106      	bne.n	8014686 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014678:	4b32      	ldr	r3, [pc, #200]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801467a:	68db      	ldr	r3, [r3, #12]
 801467c:	4a31      	ldr	r2, [pc, #196]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801467e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014682:	60d3      	str	r3, [r2, #12]
 8014684:	e011      	b.n	80146aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801468a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801468e:	d10c      	bne.n	80146aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	3304      	adds	r3, #4
 8014694:	2101      	movs	r1, #1
 8014696:	4618      	mov	r0, r3
 8014698:	f000 f8c8 	bl	801482c <RCCEx_PLLSAI1_Config>
 801469c:	4603      	mov	r3, r0
 801469e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80146a0:	7cfb      	ldrb	r3, [r7, #19]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d001      	beq.n	80146aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80146a6:	7cfb      	ldrb	r3, [r7, #19]
 80146a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d028      	beq.n	8014708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80146b6:	4b23      	ldr	r3, [pc, #140]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80146b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146c4:	491f      	ldr	r1, [pc, #124]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80146c6:	4313      	orrs	r3, r2
 80146c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80146d4:	d106      	bne.n	80146e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80146d6:	4b1b      	ldr	r3, [pc, #108]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80146d8:	68db      	ldr	r3, [r3, #12]
 80146da:	4a1a      	ldr	r2, [pc, #104]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80146dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80146e0:	60d3      	str	r3, [r2, #12]
 80146e2:	e011      	b.n	8014708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80146ec:	d10c      	bne.n	8014708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	3304      	adds	r3, #4
 80146f2:	2101      	movs	r1, #1
 80146f4:	4618      	mov	r0, r3
 80146f6:	f000 f899 	bl	801482c <RCCEx_PLLSAI1_Config>
 80146fa:	4603      	mov	r3, r0
 80146fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80146fe:	7cfb      	ldrb	r3, [r7, #19]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d001      	beq.n	8014708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8014704:	7cfb      	ldrb	r3, [r7, #19]
 8014706:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014710:	2b00      	cmp	r3, #0
 8014712:	d02b      	beq.n	801476c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014714:	4b0b      	ldr	r3, [pc, #44]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801471a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014722:	4908      	ldr	r1, [pc, #32]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014724:	4313      	orrs	r3, r2
 8014726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801472e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8014732:	d109      	bne.n	8014748 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014734:	4b03      	ldr	r3, [pc, #12]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014736:	68db      	ldr	r3, [r3, #12]
 8014738:	4a02      	ldr	r2, [pc, #8]	; (8014744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801473a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801473e:	60d3      	str	r3, [r2, #12]
 8014740:	e014      	b.n	801476c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8014742:	bf00      	nop
 8014744:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801474c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014750:	d10c      	bne.n	801476c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	3304      	adds	r3, #4
 8014756:	2101      	movs	r1, #1
 8014758:	4618      	mov	r0, r3
 801475a:	f000 f867 	bl	801482c <RCCEx_PLLSAI1_Config>
 801475e:	4603      	mov	r3, r0
 8014760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014762:	7cfb      	ldrb	r3, [r7, #19]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d001      	beq.n	801476c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8014768:	7cfb      	ldrb	r3, [r7, #19]
 801476a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014774:	2b00      	cmp	r3, #0
 8014776:	d02f      	beq.n	80147d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8014778:	4b2b      	ldr	r3, [pc, #172]	; (8014828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801477e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014786:	4928      	ldr	r1, [pc, #160]	; (8014828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014788:	4313      	orrs	r3, r2
 801478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014796:	d10d      	bne.n	80147b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	3304      	adds	r3, #4
 801479c:	2102      	movs	r1, #2
 801479e:	4618      	mov	r0, r3
 80147a0:	f000 f844 	bl	801482c <RCCEx_PLLSAI1_Config>
 80147a4:	4603      	mov	r3, r0
 80147a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80147a8:	7cfb      	ldrb	r3, [r7, #19]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d014      	beq.n	80147d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80147ae:	7cfb      	ldrb	r3, [r7, #19]
 80147b0:	74bb      	strb	r3, [r7, #18]
 80147b2:	e011      	b.n	80147d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80147bc:	d10c      	bne.n	80147d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	3320      	adds	r3, #32
 80147c2:	2102      	movs	r1, #2
 80147c4:	4618      	mov	r0, r3
 80147c6:	f000 f925 	bl	8014a14 <RCCEx_PLLSAI2_Config>
 80147ca:	4603      	mov	r3, r0
 80147cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80147ce:	7cfb      	ldrb	r3, [r7, #19]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d001      	beq.n	80147d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80147d4:	7cfb      	ldrb	r3, [r7, #19]
 80147d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d00a      	beq.n	80147fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80147e4:	4b10      	ldr	r3, [pc, #64]	; (8014828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80147e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80147ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80147f2:	490d      	ldr	r1, [pc, #52]	; (8014828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80147f4:	4313      	orrs	r3, r2
 80147f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014802:	2b00      	cmp	r3, #0
 8014804:	d00b      	beq.n	801481e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8014806:	4b08      	ldr	r3, [pc, #32]	; (8014828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801480c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014816:	4904      	ldr	r1, [pc, #16]	; (8014828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014818:	4313      	orrs	r3, r2
 801481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801481e:	7cbb      	ldrb	r3, [r7, #18]
}
 8014820:	4618      	mov	r0, r3
 8014822:	3718      	adds	r7, #24
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	40021000 	.word	0x40021000

0801482c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014836:	2300      	movs	r3, #0
 8014838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801483a:	4b75      	ldr	r3, [pc, #468]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 801483c:	68db      	ldr	r3, [r3, #12]
 801483e:	f003 0303 	and.w	r3, r3, #3
 8014842:	2b00      	cmp	r3, #0
 8014844:	d018      	beq.n	8014878 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8014846:	4b72      	ldr	r3, [pc, #456]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014848:	68db      	ldr	r3, [r3, #12]
 801484a:	f003 0203 	and.w	r2, r3, #3
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	429a      	cmp	r2, r3
 8014854:	d10d      	bne.n	8014872 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	681b      	ldr	r3, [r3, #0]
       ||
 801485a:	2b00      	cmp	r3, #0
 801485c:	d009      	beq.n	8014872 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801485e:	4b6c      	ldr	r3, [pc, #432]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014860:	68db      	ldr	r3, [r3, #12]
 8014862:	091b      	lsrs	r3, r3, #4
 8014864:	f003 0307 	and.w	r3, r3, #7
 8014868:	1c5a      	adds	r2, r3, #1
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	685b      	ldr	r3, [r3, #4]
       ||
 801486e:	429a      	cmp	r2, r3
 8014870:	d047      	beq.n	8014902 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8014872:	2301      	movs	r3, #1
 8014874:	73fb      	strb	r3, [r7, #15]
 8014876:	e044      	b.n	8014902 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	2b03      	cmp	r3, #3
 801487e:	d018      	beq.n	80148b2 <RCCEx_PLLSAI1_Config+0x86>
 8014880:	2b03      	cmp	r3, #3
 8014882:	d825      	bhi.n	80148d0 <RCCEx_PLLSAI1_Config+0xa4>
 8014884:	2b01      	cmp	r3, #1
 8014886:	d002      	beq.n	801488e <RCCEx_PLLSAI1_Config+0x62>
 8014888:	2b02      	cmp	r3, #2
 801488a:	d009      	beq.n	80148a0 <RCCEx_PLLSAI1_Config+0x74>
 801488c:	e020      	b.n	80148d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801488e:	4b60      	ldr	r3, [pc, #384]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f003 0302 	and.w	r3, r3, #2
 8014896:	2b00      	cmp	r3, #0
 8014898:	d11d      	bne.n	80148d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801489a:	2301      	movs	r3, #1
 801489c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801489e:	e01a      	b.n	80148d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80148a0:	4b5b      	ldr	r3, [pc, #364]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d116      	bne.n	80148da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80148ac:	2301      	movs	r3, #1
 80148ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80148b0:	e013      	b.n	80148da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80148b2:	4b57      	ldr	r3, [pc, #348]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d10f      	bne.n	80148de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80148be:	4b54      	ldr	r3, [pc, #336]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d109      	bne.n	80148de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80148ca:	2301      	movs	r3, #1
 80148cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80148ce:	e006      	b.n	80148de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80148d0:	2301      	movs	r3, #1
 80148d2:	73fb      	strb	r3, [r7, #15]
      break;
 80148d4:	e004      	b.n	80148e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80148d6:	bf00      	nop
 80148d8:	e002      	b.n	80148e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80148da:	bf00      	nop
 80148dc:	e000      	b.n	80148e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80148de:	bf00      	nop
    }

    if(status == HAL_OK)
 80148e0:	7bfb      	ldrb	r3, [r7, #15]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d10d      	bne.n	8014902 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80148e6:	4b4a      	ldr	r3, [pc, #296]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	6819      	ldr	r1, [r3, #0]
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	685b      	ldr	r3, [r3, #4]
 80148f6:	3b01      	subs	r3, #1
 80148f8:	011b      	lsls	r3, r3, #4
 80148fa:	430b      	orrs	r3, r1
 80148fc:	4944      	ldr	r1, [pc, #272]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80148fe:	4313      	orrs	r3, r2
 8014900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8014902:	7bfb      	ldrb	r3, [r7, #15]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d17d      	bne.n	8014a04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8014908:	4b41      	ldr	r3, [pc, #260]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	4a40      	ldr	r2, [pc, #256]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 801490e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014914:	f7fd f9bc 	bl	8011c90 <HAL_GetTick>
 8014918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801491a:	e009      	b.n	8014930 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801491c:	f7fd f9b8 	bl	8011c90 <HAL_GetTick>
 8014920:	4602      	mov	r2, r0
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	2b02      	cmp	r3, #2
 8014928:	d902      	bls.n	8014930 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801492a:	2303      	movs	r3, #3
 801492c:	73fb      	strb	r3, [r7, #15]
        break;
 801492e:	e005      	b.n	801493c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8014930:	4b37      	ldr	r3, [pc, #220]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014938:	2b00      	cmp	r3, #0
 801493a:	d1ef      	bne.n	801491c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801493c:	7bfb      	ldrb	r3, [r7, #15]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d160      	bne.n	8014a04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d111      	bne.n	801496c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8014948:	4b31      	ldr	r3, [pc, #196]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 801494a:	691b      	ldr	r3, [r3, #16]
 801494c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8014950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014954:	687a      	ldr	r2, [r7, #4]
 8014956:	6892      	ldr	r2, [r2, #8]
 8014958:	0211      	lsls	r1, r2, #8
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	68d2      	ldr	r2, [r2, #12]
 801495e:	0912      	lsrs	r2, r2, #4
 8014960:	0452      	lsls	r2, r2, #17
 8014962:	430a      	orrs	r2, r1
 8014964:	492a      	ldr	r1, [pc, #168]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014966:	4313      	orrs	r3, r2
 8014968:	610b      	str	r3, [r1, #16]
 801496a:	e027      	b.n	80149bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	2b01      	cmp	r3, #1
 8014970:	d112      	bne.n	8014998 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8014972:	4b27      	ldr	r3, [pc, #156]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014974:	691b      	ldr	r3, [r3, #16]
 8014976:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 801497a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801497e:	687a      	ldr	r2, [r7, #4]
 8014980:	6892      	ldr	r2, [r2, #8]
 8014982:	0211      	lsls	r1, r2, #8
 8014984:	687a      	ldr	r2, [r7, #4]
 8014986:	6912      	ldr	r2, [r2, #16]
 8014988:	0852      	lsrs	r2, r2, #1
 801498a:	3a01      	subs	r2, #1
 801498c:	0552      	lsls	r2, r2, #21
 801498e:	430a      	orrs	r2, r1
 8014990:	491f      	ldr	r1, [pc, #124]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014992:	4313      	orrs	r3, r2
 8014994:	610b      	str	r3, [r1, #16]
 8014996:	e011      	b.n	80149bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8014998:	4b1d      	ldr	r3, [pc, #116]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 801499a:	691b      	ldr	r3, [r3, #16]
 801499c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80149a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	6892      	ldr	r2, [r2, #8]
 80149a8:	0211      	lsls	r1, r2, #8
 80149aa:	687a      	ldr	r2, [r7, #4]
 80149ac:	6952      	ldr	r2, [r2, #20]
 80149ae:	0852      	lsrs	r2, r2, #1
 80149b0:	3a01      	subs	r2, #1
 80149b2:	0652      	lsls	r2, r2, #25
 80149b4:	430a      	orrs	r2, r1
 80149b6:	4916      	ldr	r1, [pc, #88]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80149b8:	4313      	orrs	r3, r2
 80149ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80149bc:	4b14      	ldr	r3, [pc, #80]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	4a13      	ldr	r2, [pc, #76]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80149c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80149c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80149c8:	f7fd f962 	bl	8011c90 <HAL_GetTick>
 80149cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80149ce:	e009      	b.n	80149e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80149d0:	f7fd f95e 	bl	8011c90 <HAL_GetTick>
 80149d4:	4602      	mov	r2, r0
 80149d6:	68bb      	ldr	r3, [r7, #8]
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	2b02      	cmp	r3, #2
 80149dc:	d902      	bls.n	80149e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80149de:	2303      	movs	r3, #3
 80149e0:	73fb      	strb	r3, [r7, #15]
          break;
 80149e2:	e005      	b.n	80149f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80149e4:	4b0a      	ldr	r3, [pc, #40]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d0ef      	beq.n	80149d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80149f0:	7bfb      	ldrb	r3, [r7, #15]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d106      	bne.n	8014a04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80149f6:	4b06      	ldr	r3, [pc, #24]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80149f8:	691a      	ldr	r2, [r3, #16]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	699b      	ldr	r3, [r3, #24]
 80149fe:	4904      	ldr	r1, [pc, #16]	; (8014a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014a00:	4313      	orrs	r3, r2
 8014a02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8014a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	3710      	adds	r7, #16
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}
 8014a0e:	bf00      	nop
 8014a10:	40021000 	.word	0x40021000

08014a14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b084      	sub	sp, #16
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
 8014a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8014a22:	4b6a      	ldr	r3, [pc, #424]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014a24:	68db      	ldr	r3, [r3, #12]
 8014a26:	f003 0303 	and.w	r3, r3, #3
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d018      	beq.n	8014a60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8014a2e:	4b67      	ldr	r3, [pc, #412]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014a30:	68db      	ldr	r3, [r3, #12]
 8014a32:	f003 0203 	and.w	r2, r3, #3
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d10d      	bne.n	8014a5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
       ||
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d009      	beq.n	8014a5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8014a46:	4b61      	ldr	r3, [pc, #388]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014a48:	68db      	ldr	r3, [r3, #12]
 8014a4a:	091b      	lsrs	r3, r3, #4
 8014a4c:	f003 0307 	and.w	r3, r3, #7
 8014a50:	1c5a      	adds	r2, r3, #1
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	685b      	ldr	r3, [r3, #4]
       ||
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d047      	beq.n	8014aea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	73fb      	strb	r3, [r7, #15]
 8014a5e:	e044      	b.n	8014aea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2b03      	cmp	r3, #3
 8014a66:	d018      	beq.n	8014a9a <RCCEx_PLLSAI2_Config+0x86>
 8014a68:	2b03      	cmp	r3, #3
 8014a6a:	d825      	bhi.n	8014ab8 <RCCEx_PLLSAI2_Config+0xa4>
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d002      	beq.n	8014a76 <RCCEx_PLLSAI2_Config+0x62>
 8014a70:	2b02      	cmp	r3, #2
 8014a72:	d009      	beq.n	8014a88 <RCCEx_PLLSAI2_Config+0x74>
 8014a74:	e020      	b.n	8014ab8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8014a76:	4b55      	ldr	r3, [pc, #340]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	f003 0302 	and.w	r3, r3, #2
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d11d      	bne.n	8014abe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8014a82:	2301      	movs	r3, #1
 8014a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014a86:	e01a      	b.n	8014abe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8014a88:	4b50      	ldr	r3, [pc, #320]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d116      	bne.n	8014ac2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8014a94:	2301      	movs	r3, #1
 8014a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014a98:	e013      	b.n	8014ac2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8014a9a:	4b4c      	ldr	r3, [pc, #304]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d10f      	bne.n	8014ac6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8014aa6:	4b49      	ldr	r3, [pc, #292]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d109      	bne.n	8014ac6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014ab6:	e006      	b.n	8014ac6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8014ab8:	2301      	movs	r3, #1
 8014aba:	73fb      	strb	r3, [r7, #15]
      break;
 8014abc:	e004      	b.n	8014ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8014abe:	bf00      	nop
 8014ac0:	e002      	b.n	8014ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8014ac2:	bf00      	nop
 8014ac4:	e000      	b.n	8014ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8014ac6:	bf00      	nop
    }

    if(status == HAL_OK)
 8014ac8:	7bfb      	ldrb	r3, [r7, #15]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d10d      	bne.n	8014aea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8014ace:	4b3f      	ldr	r3, [pc, #252]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014ad0:	68db      	ldr	r3, [r3, #12]
 8014ad2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	6819      	ldr	r1, [r3, #0]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	685b      	ldr	r3, [r3, #4]
 8014ade:	3b01      	subs	r3, #1
 8014ae0:	011b      	lsls	r3, r3, #4
 8014ae2:	430b      	orrs	r3, r1
 8014ae4:	4939      	ldr	r1, [pc, #228]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014ae6:	4313      	orrs	r3, r2
 8014ae8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8014aea:	7bfb      	ldrb	r3, [r7, #15]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d167      	bne.n	8014bc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8014af0:	4b36      	ldr	r3, [pc, #216]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4a35      	ldr	r2, [pc, #212]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014afc:	f7fd f8c8 	bl	8011c90 <HAL_GetTick>
 8014b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8014b02:	e009      	b.n	8014b18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8014b04:	f7fd f8c4 	bl	8011c90 <HAL_GetTick>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	1ad3      	subs	r3, r2, r3
 8014b0e:	2b02      	cmp	r3, #2
 8014b10:	d902      	bls.n	8014b18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8014b12:	2303      	movs	r3, #3
 8014b14:	73fb      	strb	r3, [r7, #15]
        break;
 8014b16:	e005      	b.n	8014b24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8014b18:	4b2c      	ldr	r3, [pc, #176]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d1ef      	bne.n	8014b04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8014b24:	7bfb      	ldrb	r3, [r7, #15]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d14a      	bne.n	8014bc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d111      	bne.n	8014b54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8014b30:	4b26      	ldr	r3, [pc, #152]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b32:	695b      	ldr	r3, [r3, #20]
 8014b34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8014b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	6892      	ldr	r2, [r2, #8]
 8014b40:	0211      	lsls	r1, r2, #8
 8014b42:	687a      	ldr	r2, [r7, #4]
 8014b44:	68d2      	ldr	r2, [r2, #12]
 8014b46:	0912      	lsrs	r2, r2, #4
 8014b48:	0452      	lsls	r2, r2, #17
 8014b4a:	430a      	orrs	r2, r1
 8014b4c:	491f      	ldr	r1, [pc, #124]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b4e:	4313      	orrs	r3, r2
 8014b50:	614b      	str	r3, [r1, #20]
 8014b52:	e011      	b.n	8014b78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8014b54:	4b1d      	ldr	r3, [pc, #116]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b56:	695b      	ldr	r3, [r3, #20]
 8014b58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8014b5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	6892      	ldr	r2, [r2, #8]
 8014b64:	0211      	lsls	r1, r2, #8
 8014b66:	687a      	ldr	r2, [r7, #4]
 8014b68:	6912      	ldr	r2, [r2, #16]
 8014b6a:	0852      	lsrs	r2, r2, #1
 8014b6c:	3a01      	subs	r2, #1
 8014b6e:	0652      	lsls	r2, r2, #25
 8014b70:	430a      	orrs	r2, r1
 8014b72:	4916      	ldr	r1, [pc, #88]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b74:	4313      	orrs	r3, r2
 8014b76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8014b78:	4b14      	ldr	r3, [pc, #80]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	4a13      	ldr	r2, [pc, #76]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014b84:	f7fd f884 	bl	8011c90 <HAL_GetTick>
 8014b88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8014b8a:	e009      	b.n	8014ba0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8014b8c:	f7fd f880 	bl	8011c90 <HAL_GetTick>
 8014b90:	4602      	mov	r2, r0
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	1ad3      	subs	r3, r2, r3
 8014b96:	2b02      	cmp	r3, #2
 8014b98:	d902      	bls.n	8014ba0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8014b9a:	2303      	movs	r3, #3
 8014b9c:	73fb      	strb	r3, [r7, #15]
          break;
 8014b9e:	e005      	b.n	8014bac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8014ba0:	4b0a      	ldr	r3, [pc, #40]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d0ef      	beq.n	8014b8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8014bac:	7bfb      	ldrb	r3, [r7, #15]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d106      	bne.n	8014bc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8014bb2:	4b06      	ldr	r3, [pc, #24]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014bb4:	695a      	ldr	r2, [r3, #20]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	695b      	ldr	r3, [r3, #20]
 8014bba:	4904      	ldr	r1, [pc, #16]	; (8014bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8014bbc:	4313      	orrs	r3, r2
 8014bbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8014bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	3710      	adds	r7, #16
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}
 8014bca:	bf00      	nop
 8014bcc:	40021000 	.word	0x40021000

08014bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b084      	sub	sp, #16
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d101      	bne.n	8014be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014bde:	2301      	movs	r3, #1
 8014be0:	e095      	b.n	8014d0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d108      	bne.n	8014bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	685b      	ldr	r3, [r3, #4]
 8014bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014bf2:	d009      	beq.n	8014c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	61da      	str	r2, [r3, #28]
 8014bfa:	e005      	b.n	8014c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2200      	movs	r2, #0
 8014c06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014c14:	b2db      	uxtb	r3, r3
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d106      	bne.n	8014c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f000 f877 	bl	8014d16 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	2202      	movs	r2, #2
 8014c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	681a      	ldr	r2, [r3, #0]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014c3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	68db      	ldr	r3, [r3, #12]
 8014c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014c48:	d902      	bls.n	8014c50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	60fb      	str	r3, [r7, #12]
 8014c4e:	e002      	b.n	8014c56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8014c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014c54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	68db      	ldr	r3, [r3, #12]
 8014c5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8014c5e:	d007      	beq.n	8014c70 <HAL_SPI_Init+0xa0>
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014c68:	d002      	beq.n	8014c70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	685b      	ldr	r3, [r3, #4]
 8014c74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	689b      	ldr	r3, [r3, #8]
 8014c7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8014c80:	431a      	orrs	r2, r3
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	691b      	ldr	r3, [r3, #16]
 8014c86:	f003 0302 	and.w	r3, r3, #2
 8014c8a:	431a      	orrs	r2, r3
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	695b      	ldr	r3, [r3, #20]
 8014c90:	f003 0301 	and.w	r3, r3, #1
 8014c94:	431a      	orrs	r2, r3
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	699b      	ldr	r3, [r3, #24]
 8014c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014c9e:	431a      	orrs	r2, r3
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	69db      	ldr	r3, [r3, #28]
 8014ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014ca8:	431a      	orrs	r2, r3
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6a1b      	ldr	r3, [r3, #32]
 8014cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014cb2:	ea42 0103 	orr.w	r1, r2, r3
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	430a      	orrs	r2, r1
 8014cc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	699b      	ldr	r3, [r3, #24]
 8014cca:	0c1b      	lsrs	r3, r3, #16
 8014ccc:	f003 0204 	and.w	r2, r3, #4
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cd4:	f003 0310 	and.w	r3, r3, #16
 8014cd8:	431a      	orrs	r2, r3
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cde:	f003 0308 	and.w	r3, r3, #8
 8014ce2:	431a      	orrs	r2, r3
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	68db      	ldr	r3, [r3, #12]
 8014ce8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8014cec:	ea42 0103 	orr.w	r1, r2, r3
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	430a      	orrs	r2, r1
 8014cfc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2200      	movs	r2, #0
 8014d02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2201      	movs	r2, #1
 8014d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8014d0c:	2300      	movs	r3, #0
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3710      	adds	r7, #16
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}

08014d16 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8014d16:	b480      	push	{r7}
 8014d18:	b083      	sub	sp, #12
 8014d1a:	af00      	add	r7, sp, #0
 8014d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8014d1e:	bf00      	nop
 8014d20:	370c      	adds	r7, #12
 8014d22:	46bd      	mov	sp, r7
 8014d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d28:	4770      	bx	lr

08014d2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b08a      	sub	sp, #40	; 0x28
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	60f8      	str	r0, [r7, #12]
 8014d32:	60b9      	str	r1, [r7, #8]
 8014d34:	607a      	str	r2, [r7, #4]
 8014d36:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014d38:	2301      	movs	r3, #1
 8014d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014d48:	2b01      	cmp	r3, #1
 8014d4a:	d101      	bne.n	8014d50 <HAL_SPI_TransmitReceive+0x26>
 8014d4c:	2302      	movs	r3, #2
 8014d4e:	e1fb      	b.n	8015148 <HAL_SPI_TransmitReceive+0x41e>
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	2201      	movs	r2, #1
 8014d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014d58:	f7fc ff9a 	bl	8011c90 <HAL_GetTick>
 8014d5c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014d64:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	685b      	ldr	r3, [r3, #4]
 8014d6a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8014d6c:	887b      	ldrh	r3, [r7, #2]
 8014d6e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8014d70:	887b      	ldrh	r3, [r7, #2]
 8014d72:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014d74:	7efb      	ldrb	r3, [r7, #27]
 8014d76:	2b01      	cmp	r3, #1
 8014d78:	d00e      	beq.n	8014d98 <HAL_SPI_TransmitReceive+0x6e>
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014d80:	d106      	bne.n	8014d90 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	689b      	ldr	r3, [r3, #8]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d102      	bne.n	8014d90 <HAL_SPI_TransmitReceive+0x66>
 8014d8a:	7efb      	ldrb	r3, [r7, #27]
 8014d8c:	2b04      	cmp	r3, #4
 8014d8e:	d003      	beq.n	8014d98 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8014d90:	2302      	movs	r3, #2
 8014d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014d96:	e1cd      	b.n	8015134 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d005      	beq.n	8014daa <HAL_SPI_TransmitReceive+0x80>
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d002      	beq.n	8014daa <HAL_SPI_TransmitReceive+0x80>
 8014da4:	887b      	ldrh	r3, [r7, #2]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d103      	bne.n	8014db2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8014daa:	2301      	movs	r3, #1
 8014dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014db0:	e1c0      	b.n	8015134 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014db8:	b2db      	uxtb	r3, r3
 8014dba:	2b04      	cmp	r3, #4
 8014dbc:	d003      	beq.n	8014dc6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2205      	movs	r2, #5
 8014dc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	687a      	ldr	r2, [r7, #4]
 8014dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	887a      	ldrh	r2, [r7, #2]
 8014dd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	887a      	ldrh	r2, [r7, #2]
 8014dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	68ba      	ldr	r2, [r7, #8]
 8014de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	887a      	ldrh	r2, [r7, #2]
 8014dec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	887a      	ldrh	r2, [r7, #2]
 8014df2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	2200      	movs	r2, #0
 8014df8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	68db      	ldr	r3, [r3, #12]
 8014e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014e08:	d802      	bhi.n	8014e10 <HAL_SPI_TransmitReceive+0xe6>
 8014e0a:	8a3b      	ldrh	r3, [r7, #16]
 8014e0c:	2b01      	cmp	r3, #1
 8014e0e:	d908      	bls.n	8014e22 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	685a      	ldr	r2, [r3, #4]
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014e1e:	605a      	str	r2, [r3, #4]
 8014e20:	e007      	b.n	8014e32 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	685a      	ldr	r2, [r3, #4]
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014e30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e3c:	2b40      	cmp	r3, #64	; 0x40
 8014e3e:	d007      	beq.n	8014e50 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	681a      	ldr	r2, [r3, #0]
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	68db      	ldr	r3, [r3, #12]
 8014e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014e58:	d97c      	bls.n	8014f54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d002      	beq.n	8014e68 <HAL_SPI_TransmitReceive+0x13e>
 8014e62:	8a7b      	ldrh	r3, [r7, #18]
 8014e64:	2b01      	cmp	r3, #1
 8014e66:	d169      	bne.n	8014f3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e6c:	881a      	ldrh	r2, [r3, #0]
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e78:	1c9a      	adds	r2, r3, #2
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014e82:	b29b      	uxth	r3, r3
 8014e84:	3b01      	subs	r3, #1
 8014e86:	b29a      	uxth	r2, r3
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014e8c:	e056      	b.n	8014f3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	689b      	ldr	r3, [r3, #8]
 8014e94:	f003 0302 	and.w	r3, r3, #2
 8014e98:	2b02      	cmp	r3, #2
 8014e9a:	d11b      	bne.n	8014ed4 <HAL_SPI_TransmitReceive+0x1aa>
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ea0:	b29b      	uxth	r3, r3
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d016      	beq.n	8014ed4 <HAL_SPI_TransmitReceive+0x1aa>
 8014ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea8:	2b01      	cmp	r3, #1
 8014eaa:	d113      	bne.n	8014ed4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014eb0:	881a      	ldrh	r2, [r3, #0]
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ebc:	1c9a      	adds	r2, r3, #2
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ec6:	b29b      	uxth	r3, r3
 8014ec8:	3b01      	subs	r3, #1
 8014eca:	b29a      	uxth	r2, r3
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	689b      	ldr	r3, [r3, #8]
 8014eda:	f003 0301 	and.w	r3, r3, #1
 8014ede:	2b01      	cmp	r3, #1
 8014ee0:	d11c      	bne.n	8014f1c <HAL_SPI_TransmitReceive+0x1f2>
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014ee8:	b29b      	uxth	r3, r3
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d016      	beq.n	8014f1c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	68da      	ldr	r2, [r3, #12]
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ef8:	b292      	uxth	r2, r2
 8014efa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f00:	1c9a      	adds	r2, r3, #2
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	3b01      	subs	r3, #1
 8014f10:	b29a      	uxth	r2, r3
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014f18:	2301      	movs	r3, #1
 8014f1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8014f1c:	f7fc feb8 	bl	8011c90 <HAL_GetTick>
 8014f20:	4602      	mov	r2, r0
 8014f22:	69fb      	ldr	r3, [r7, #28]
 8014f24:	1ad3      	subs	r3, r2, r3
 8014f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	d807      	bhi.n	8014f3c <HAL_SPI_TransmitReceive+0x212>
 8014f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f32:	d003      	beq.n	8014f3c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8014f34:	2303      	movs	r3, #3
 8014f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014f3a:	e0fb      	b.n	8015134 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014f40:	b29b      	uxth	r3, r3
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d1a3      	bne.n	8014e8e <HAL_SPI_TransmitReceive+0x164>
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014f4c:	b29b      	uxth	r3, r3
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d19d      	bne.n	8014e8e <HAL_SPI_TransmitReceive+0x164>
 8014f52:	e0df      	b.n	8015114 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d003      	beq.n	8014f64 <HAL_SPI_TransmitReceive+0x23a>
 8014f5c:	8a7b      	ldrh	r3, [r7, #18]
 8014f5e:	2b01      	cmp	r3, #1
 8014f60:	f040 80cb 	bne.w	80150fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014f68:	b29b      	uxth	r3, r3
 8014f6a:	2b01      	cmp	r3, #1
 8014f6c:	d912      	bls.n	8014f94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f72:	881a      	ldrh	r2, [r3, #0]
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f7e:	1c9a      	adds	r2, r3, #2
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	3b02      	subs	r3, #2
 8014f8c:	b29a      	uxth	r2, r3
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014f92:	e0b2      	b.n	80150fa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	330c      	adds	r3, #12
 8014f9e:	7812      	ldrb	r2, [r2, #0]
 8014fa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fa6:	1c5a      	adds	r2, r3, #1
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014fb0:	b29b      	uxth	r3, r3
 8014fb2:	3b01      	subs	r3, #1
 8014fb4:	b29a      	uxth	r2, r3
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014fba:	e09e      	b.n	80150fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	689b      	ldr	r3, [r3, #8]
 8014fc2:	f003 0302 	and.w	r3, r3, #2
 8014fc6:	2b02      	cmp	r3, #2
 8014fc8:	d134      	bne.n	8015034 <HAL_SPI_TransmitReceive+0x30a>
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014fce:	b29b      	uxth	r3, r3
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d02f      	beq.n	8015034 <HAL_SPI_TransmitReceive+0x30a>
 8014fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd6:	2b01      	cmp	r3, #1
 8014fd8:	d12c      	bne.n	8015034 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	2b01      	cmp	r3, #1
 8014fe2:	d912      	bls.n	801500a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fe8:	881a      	ldrh	r2, [r3, #0]
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ff4:	1c9a      	adds	r2, r3, #2
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ffe:	b29b      	uxth	r3, r3
 8015000:	3b02      	subs	r3, #2
 8015002:	b29a      	uxth	r2, r3
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015008:	e012      	b.n	8015030 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	330c      	adds	r3, #12
 8015014:	7812      	ldrb	r2, [r2, #0]
 8015016:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801501c:	1c5a      	adds	r2, r3, #1
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015026:	b29b      	uxth	r3, r3
 8015028:	3b01      	subs	r3, #1
 801502a:	b29a      	uxth	r2, r3
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8015030:	2300      	movs	r3, #0
 8015032:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	689b      	ldr	r3, [r3, #8]
 801503a:	f003 0301 	and.w	r3, r3, #1
 801503e:	2b01      	cmp	r3, #1
 8015040:	d148      	bne.n	80150d4 <HAL_SPI_TransmitReceive+0x3aa>
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015048:	b29b      	uxth	r3, r3
 801504a:	2b00      	cmp	r3, #0
 801504c:	d042      	beq.n	80150d4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015054:	b29b      	uxth	r3, r3
 8015056:	2b01      	cmp	r3, #1
 8015058:	d923      	bls.n	80150a2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	68da      	ldr	r2, [r3, #12]
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015064:	b292      	uxth	r2, r2
 8015066:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801506c:	1c9a      	adds	r2, r3, #2
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015078:	b29b      	uxth	r3, r3
 801507a:	3b02      	subs	r3, #2
 801507c:	b29a      	uxth	r2, r3
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801508a:	b29b      	uxth	r3, r3
 801508c:	2b01      	cmp	r3, #1
 801508e:	d81f      	bhi.n	80150d0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	685a      	ldr	r2, [r3, #4]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801509e:	605a      	str	r2, [r3, #4]
 80150a0:	e016      	b.n	80150d0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	f103 020c 	add.w	r2, r3, #12
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150ae:	7812      	ldrb	r2, [r2, #0]
 80150b0:	b2d2      	uxtb	r2, r2
 80150b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150b8:	1c5a      	adds	r2, r3, #1
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	3b01      	subs	r3, #1
 80150c8:	b29a      	uxth	r2, r3
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80150d0:	2301      	movs	r3, #1
 80150d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80150d4:	f7fc fddc 	bl	8011c90 <HAL_GetTick>
 80150d8:	4602      	mov	r2, r0
 80150da:	69fb      	ldr	r3, [r7, #28]
 80150dc:	1ad3      	subs	r3, r2, r3
 80150de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150e0:	429a      	cmp	r2, r3
 80150e2:	d803      	bhi.n	80150ec <HAL_SPI_TransmitReceive+0x3c2>
 80150e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150ea:	d102      	bne.n	80150f2 <HAL_SPI_TransmitReceive+0x3c8>
 80150ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d103      	bne.n	80150fa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80150f2:	2303      	movs	r3, #3
 80150f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80150f8:	e01c      	b.n	8015134 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80150fe:	b29b      	uxth	r3, r3
 8015100:	2b00      	cmp	r3, #0
 8015102:	f47f af5b 	bne.w	8014fbc <HAL_SPI_TransmitReceive+0x292>
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801510c:	b29b      	uxth	r3, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	f47f af54 	bne.w	8014fbc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015114:	69fa      	ldr	r2, [r7, #28]
 8015116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015118:	68f8      	ldr	r0, [r7, #12]
 801511a:	f000 fa61 	bl	80155e0 <SPI_EndRxTxTransaction>
 801511e:	4603      	mov	r3, r0
 8015120:	2b00      	cmp	r3, #0
 8015122:	d006      	beq.n	8015132 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8015124:	2301      	movs	r3, #1
 8015126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2220      	movs	r2, #32
 801512e:	661a      	str	r2, [r3, #96]	; 0x60
 8015130:	e000      	b.n	8015134 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8015132:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	2201      	movs	r2, #1
 8015138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	2200      	movs	r2, #0
 8015140:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8015144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8015148:	4618      	mov	r0, r3
 801514a:	3728      	adds	r7, #40	; 0x28
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}

08015150 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b088      	sub	sp, #32
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	685b      	ldr	r3, [r3, #4]
 801515e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	689b      	ldr	r3, [r3, #8]
 8015166:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8015168:	69bb      	ldr	r3, [r7, #24]
 801516a:	099b      	lsrs	r3, r3, #6
 801516c:	f003 0301 	and.w	r3, r3, #1
 8015170:	2b00      	cmp	r3, #0
 8015172:	d10f      	bne.n	8015194 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8015174:	69bb      	ldr	r3, [r7, #24]
 8015176:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801517a:	2b00      	cmp	r3, #0
 801517c:	d00a      	beq.n	8015194 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801517e:	69fb      	ldr	r3, [r7, #28]
 8015180:	099b      	lsrs	r3, r3, #6
 8015182:	f003 0301 	and.w	r3, r3, #1
 8015186:	2b00      	cmp	r3, #0
 8015188:	d004      	beq.n	8015194 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	4798      	blx	r3
    return;
 8015192:	e0d7      	b.n	8015344 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8015194:	69bb      	ldr	r3, [r7, #24]
 8015196:	085b      	lsrs	r3, r3, #1
 8015198:	f003 0301 	and.w	r3, r3, #1
 801519c:	2b00      	cmp	r3, #0
 801519e:	d00a      	beq.n	80151b6 <HAL_SPI_IRQHandler+0x66>
 80151a0:	69fb      	ldr	r3, [r7, #28]
 80151a2:	09db      	lsrs	r3, r3, #7
 80151a4:	f003 0301 	and.w	r3, r3, #1
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d004      	beq.n	80151b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	4798      	blx	r3
    return;
 80151b4:	e0c6      	b.n	8015344 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80151b6:	69bb      	ldr	r3, [r7, #24]
 80151b8:	095b      	lsrs	r3, r3, #5
 80151ba:	f003 0301 	and.w	r3, r3, #1
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d10c      	bne.n	80151dc <HAL_SPI_IRQHandler+0x8c>
 80151c2:	69bb      	ldr	r3, [r7, #24]
 80151c4:	099b      	lsrs	r3, r3, #6
 80151c6:	f003 0301 	and.w	r3, r3, #1
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d106      	bne.n	80151dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80151ce:	69bb      	ldr	r3, [r7, #24]
 80151d0:	0a1b      	lsrs	r3, r3, #8
 80151d2:	f003 0301 	and.w	r3, r3, #1
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	f000 80b4 	beq.w	8015344 <HAL_SPI_IRQHandler+0x1f4>
 80151dc:	69fb      	ldr	r3, [r7, #28]
 80151de:	095b      	lsrs	r3, r3, #5
 80151e0:	f003 0301 	and.w	r3, r3, #1
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f000 80ad 	beq.w	8015344 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80151ea:	69bb      	ldr	r3, [r7, #24]
 80151ec:	099b      	lsrs	r3, r3, #6
 80151ee:	f003 0301 	and.w	r3, r3, #1
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d023      	beq.n	801523e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80151fc:	b2db      	uxtb	r3, r3
 80151fe:	2b03      	cmp	r3, #3
 8015200:	d011      	beq.n	8015226 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015206:	f043 0204 	orr.w	r2, r3, #4
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801520e:	2300      	movs	r3, #0
 8015210:	617b      	str	r3, [r7, #20]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	68db      	ldr	r3, [r3, #12]
 8015218:	617b      	str	r3, [r7, #20]
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	689b      	ldr	r3, [r3, #8]
 8015220:	617b      	str	r3, [r7, #20]
 8015222:	697b      	ldr	r3, [r7, #20]
 8015224:	e00b      	b.n	801523e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015226:	2300      	movs	r3, #0
 8015228:	613b      	str	r3, [r7, #16]
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	68db      	ldr	r3, [r3, #12]
 8015230:	613b      	str	r3, [r7, #16]
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	689b      	ldr	r3, [r3, #8]
 8015238:	613b      	str	r3, [r7, #16]
 801523a:	693b      	ldr	r3, [r7, #16]
        return;
 801523c:	e082      	b.n	8015344 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801523e:	69bb      	ldr	r3, [r7, #24]
 8015240:	095b      	lsrs	r3, r3, #5
 8015242:	f003 0301 	and.w	r3, r3, #1
 8015246:	2b00      	cmp	r3, #0
 8015248:	d014      	beq.n	8015274 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801524e:	f043 0201 	orr.w	r2, r3, #1
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015256:	2300      	movs	r3, #0
 8015258:	60fb      	str	r3, [r7, #12]
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	689b      	ldr	r3, [r3, #8]
 8015260:	60fb      	str	r3, [r7, #12]
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	681a      	ldr	r2, [r3, #0]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015270:	601a      	str	r2, [r3, #0]
 8015272:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8015274:	69bb      	ldr	r3, [r7, #24]
 8015276:	0a1b      	lsrs	r3, r3, #8
 8015278:	f003 0301 	and.w	r3, r3, #1
 801527c:	2b00      	cmp	r3, #0
 801527e:	d00c      	beq.n	801529a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015284:	f043 0208 	orr.w	r2, r3, #8
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801528c:	2300      	movs	r3, #0
 801528e:	60bb      	str	r3, [r7, #8]
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	689b      	ldr	r3, [r3, #8]
 8015296:	60bb      	str	r3, [r7, #8]
 8015298:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d04f      	beq.n	8015342 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	685a      	ldr	r2, [r3, #4]
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80152b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2201      	movs	r2, #1
 80152b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	f003 0302 	and.w	r3, r3, #2
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d104      	bne.n	80152ce <HAL_SPI_IRQHandler+0x17e>
 80152c4:	69fb      	ldr	r3, [r7, #28]
 80152c6:	f003 0301 	and.w	r3, r3, #1
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d034      	beq.n	8015338 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	685a      	ldr	r2, [r3, #4]
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	f022 0203 	bic.w	r2, r2, #3
 80152dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d011      	beq.n	801530a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80152ea:	4a18      	ldr	r2, [pc, #96]	; (801534c <HAL_SPI_IRQHandler+0x1fc>)
 80152ec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7fd fdb5 	bl	8012e62 <HAL_DMA_Abort_IT>
 80152f8:	4603      	mov	r3, r0
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d005      	beq.n	801530a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015302:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801530e:	2b00      	cmp	r3, #0
 8015310:	d016      	beq.n	8015340 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015316:	4a0d      	ldr	r2, [pc, #52]	; (801534c <HAL_SPI_IRQHandler+0x1fc>)
 8015318:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801531e:	4618      	mov	r0, r3
 8015320:	f7fd fd9f 	bl	8012e62 <HAL_DMA_Abort_IT>
 8015324:	4603      	mov	r3, r0
 8015326:	2b00      	cmp	r3, #0
 8015328:	d00a      	beq.n	8015340 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801532e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8015336:	e003      	b.n	8015340 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8015338:	6878      	ldr	r0, [r7, #4]
 801533a:	f000 f809 	bl	8015350 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801533e:	e000      	b.n	8015342 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8015340:	bf00      	nop
    return;
 8015342:	bf00      	nop
  }
}
 8015344:	3720      	adds	r7, #32
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}
 801534a:	bf00      	nop
 801534c:	08015381 	.word	0x08015381

08015350 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8015350:	b480      	push	{r7}
 8015352:	b083      	sub	sp, #12
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015358:	bf00      	nop
 801535a:	370c      	adds	r7, #12
 801535c:	46bd      	mov	sp, r7
 801535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015362:	4770      	bx	lr

08015364 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8015364:	b480      	push	{r7}
 8015366:	b083      	sub	sp, #12
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015372:	b2db      	uxtb	r3, r3
}
 8015374:	4618      	mov	r0, r3
 8015376:	370c      	adds	r7, #12
 8015378:	46bd      	mov	sp, r7
 801537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537e:	4770      	bx	lr

08015380 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801538c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	2200      	movs	r2, #0
 8015392:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	2200      	movs	r2, #0
 801539a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801539c:	68f8      	ldr	r0, [r7, #12]
 801539e:	f7ff ffd7 	bl	8015350 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80153a2:	bf00      	nop
 80153a4:	3710      	adds	r7, #16
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}
	...

080153ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b088      	sub	sp, #32
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	60f8      	str	r0, [r7, #12]
 80153b4:	60b9      	str	r1, [r7, #8]
 80153b6:	603b      	str	r3, [r7, #0]
 80153b8:	4613      	mov	r3, r2
 80153ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80153bc:	f7fc fc68 	bl	8011c90 <HAL_GetTick>
 80153c0:	4602      	mov	r2, r0
 80153c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153c4:	1a9b      	subs	r3, r3, r2
 80153c6:	683a      	ldr	r2, [r7, #0]
 80153c8:	4413      	add	r3, r2
 80153ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80153cc:	f7fc fc60 	bl	8011c90 <HAL_GetTick>
 80153d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80153d2:	4b39      	ldr	r3, [pc, #228]	; (80154b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	015b      	lsls	r3, r3, #5
 80153d8:	0d1b      	lsrs	r3, r3, #20
 80153da:	69fa      	ldr	r2, [r7, #28]
 80153dc:	fb02 f303 	mul.w	r3, r2, r3
 80153e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80153e2:	e054      	b.n	801548e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153ea:	d050      	beq.n	801548e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80153ec:	f7fc fc50 	bl	8011c90 <HAL_GetTick>
 80153f0:	4602      	mov	r2, r0
 80153f2:	69bb      	ldr	r3, [r7, #24]
 80153f4:	1ad3      	subs	r3, r2, r3
 80153f6:	69fa      	ldr	r2, [r7, #28]
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d902      	bls.n	8015402 <SPI_WaitFlagStateUntilTimeout+0x56>
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d13d      	bne.n	801547e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	685a      	ldr	r2, [r3, #4]
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8015410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801541a:	d111      	bne.n	8015440 <SPI_WaitFlagStateUntilTimeout+0x94>
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	689b      	ldr	r3, [r3, #8]
 8015420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015424:	d004      	beq.n	8015430 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	689b      	ldr	r3, [r3, #8]
 801542a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801542e:	d107      	bne.n	8015440 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	681a      	ldr	r2, [r3, #0]
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801543e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015448:	d10f      	bne.n	801546a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	681a      	ldr	r2, [r3, #0]
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015458:	601a      	str	r2, [r3, #0]
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	2201      	movs	r2, #1
 801546e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	2200      	movs	r2, #0
 8015476:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801547a:	2303      	movs	r3, #3
 801547c:	e017      	b.n	80154ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d101      	bne.n	8015488 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8015484:	2300      	movs	r3, #0
 8015486:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8015488:	697b      	ldr	r3, [r7, #20]
 801548a:	3b01      	subs	r3, #1
 801548c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	689a      	ldr	r2, [r3, #8]
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	4013      	ands	r3, r2
 8015498:	68ba      	ldr	r2, [r7, #8]
 801549a:	429a      	cmp	r2, r3
 801549c:	bf0c      	ite	eq
 801549e:	2301      	moveq	r3, #1
 80154a0:	2300      	movne	r3, #0
 80154a2:	b2db      	uxtb	r3, r3
 80154a4:	461a      	mov	r2, r3
 80154a6:	79fb      	ldrb	r3, [r7, #7]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d19b      	bne.n	80153e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80154ac:	2300      	movs	r3, #0
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3720      	adds	r7, #32
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}
 80154b6:	bf00      	nop
 80154b8:	20000004 	.word	0x20000004

080154bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b088      	sub	sp, #32
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	60f8      	str	r0, [r7, #12]
 80154c4:	60b9      	str	r1, [r7, #8]
 80154c6:	607a      	str	r2, [r7, #4]
 80154c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80154ca:	f7fc fbe1 	bl	8011c90 <HAL_GetTick>
 80154ce:	4602      	mov	r2, r0
 80154d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d2:	1a9b      	subs	r3, r3, r2
 80154d4:	683a      	ldr	r2, [r7, #0]
 80154d6:	4413      	add	r3, r2
 80154d8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80154da:	f7fc fbd9 	bl	8011c90 <HAL_GetTick>
 80154de:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80154e0:	4b3e      	ldr	r3, [pc, #248]	; (80155dc <SPI_WaitFifoStateUntilTimeout+0x120>)
 80154e2:	681a      	ldr	r2, [r3, #0]
 80154e4:	4613      	mov	r3, r2
 80154e6:	009b      	lsls	r3, r3, #2
 80154e8:	4413      	add	r3, r2
 80154ea:	00da      	lsls	r2, r3, #3
 80154ec:	1ad3      	subs	r3, r2, r3
 80154ee:	0d1b      	lsrs	r3, r3, #20
 80154f0:	69fa      	ldr	r2, [r7, #28]
 80154f2:	fb02 f303 	mul.w	r3, r2, r3
 80154f6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80154f8:	e062      	b.n	80155c0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8015500:	d109      	bne.n	8015516 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d106      	bne.n	8015516 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	330c      	adds	r3, #12
 801550e:	781b      	ldrb	r3, [r3, #0]
 8015510:	b2db      	uxtb	r3, r3
 8015512:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8015514:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801551c:	d050      	beq.n	80155c0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801551e:	f7fc fbb7 	bl	8011c90 <HAL_GetTick>
 8015522:	4602      	mov	r2, r0
 8015524:	69bb      	ldr	r3, [r7, #24]
 8015526:	1ad3      	subs	r3, r2, r3
 8015528:	69fa      	ldr	r2, [r7, #28]
 801552a:	429a      	cmp	r2, r3
 801552c:	d902      	bls.n	8015534 <SPI_WaitFifoStateUntilTimeout+0x78>
 801552e:	69fb      	ldr	r3, [r7, #28]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d13d      	bne.n	80155b0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	685a      	ldr	r2, [r3, #4]
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8015542:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	685b      	ldr	r3, [r3, #4]
 8015548:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801554c:	d111      	bne.n	8015572 <SPI_WaitFifoStateUntilTimeout+0xb6>
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	689b      	ldr	r3, [r3, #8]
 8015552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015556:	d004      	beq.n	8015562 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	689b      	ldr	r3, [r3, #8]
 801555c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015560:	d107      	bne.n	8015572 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	681a      	ldr	r2, [r3, #0]
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015570:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801557a:	d10f      	bne.n	801559c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	681a      	ldr	r2, [r3, #0]
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801558a:	601a      	str	r2, [r3, #0]
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801559a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	2201      	movs	r2, #1
 80155a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	2200      	movs	r2, #0
 80155a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80155ac:	2303      	movs	r3, #3
 80155ae:	e010      	b.n	80155d2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d101      	bne.n	80155ba <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80155b6:	2300      	movs	r3, #0
 80155b8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	3b01      	subs	r3, #1
 80155be:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	689a      	ldr	r2, [r3, #8]
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	4013      	ands	r3, r2
 80155ca:	687a      	ldr	r2, [r7, #4]
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d194      	bne.n	80154fa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3720      	adds	r7, #32
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}
 80155da:	bf00      	nop
 80155dc:	20000004 	.word	0x20000004

080155e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b086      	sub	sp, #24
 80155e4:	af02      	add	r7, sp, #8
 80155e6:	60f8      	str	r0, [r7, #12]
 80155e8:	60b9      	str	r1, [r7, #8]
 80155ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	9300      	str	r3, [sp, #0]
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	2200      	movs	r2, #0
 80155f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80155f8:	68f8      	ldr	r0, [r7, #12]
 80155fa:	f7ff ff5f 	bl	80154bc <SPI_WaitFifoStateUntilTimeout>
 80155fe:	4603      	mov	r3, r0
 8015600:	2b00      	cmp	r3, #0
 8015602:	d007      	beq.n	8015614 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015608:	f043 0220 	orr.w	r2, r3, #32
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8015610:	2303      	movs	r3, #3
 8015612:	e027      	b.n	8015664 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	9300      	str	r3, [sp, #0]
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	2200      	movs	r2, #0
 801561c:	2180      	movs	r1, #128	; 0x80
 801561e:	68f8      	ldr	r0, [r7, #12]
 8015620:	f7ff fec4 	bl	80153ac <SPI_WaitFlagStateUntilTimeout>
 8015624:	4603      	mov	r3, r0
 8015626:	2b00      	cmp	r3, #0
 8015628:	d007      	beq.n	801563a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801562e:	f043 0220 	orr.w	r2, r3, #32
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8015636:	2303      	movs	r3, #3
 8015638:	e014      	b.n	8015664 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	2200      	movs	r2, #0
 8015642:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8015646:	68f8      	ldr	r0, [r7, #12]
 8015648:	f7ff ff38 	bl	80154bc <SPI_WaitFifoStateUntilTimeout>
 801564c:	4603      	mov	r3, r0
 801564e:	2b00      	cmp	r3, #0
 8015650:	d007      	beq.n	8015662 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015656:	f043 0220 	orr.w	r2, r3, #32
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801565e:	2303      	movs	r3, #3
 8015660:	e000      	b.n	8015664 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8015662:	2300      	movs	r3, #0
}
 8015664:	4618      	mov	r0, r3
 8015666:	3710      	adds	r7, #16
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}

0801566c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b082      	sub	sp, #8
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d101      	bne.n	801567e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801567a:	2301      	movs	r3, #1
 801567c:	e040      	b.n	8015700 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015682:	2b00      	cmp	r3, #0
 8015684:	d106      	bne.n	8015694 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	2200      	movs	r2, #0
 801568a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f7fb ffde 	bl	8011650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	2224      	movs	r2, #36	; 0x24
 8015698:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	681a      	ldr	r2, [r3, #0]
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	f022 0201 	bic.w	r2, r2, #1
 80156a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f000 f8c0 	bl	8015830 <UART_SetConfig>
 80156b0:	4603      	mov	r3, r0
 80156b2:	2b01      	cmp	r3, #1
 80156b4:	d101      	bne.n	80156ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80156b6:	2301      	movs	r3, #1
 80156b8:	e022      	b.n	8015700 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d002      	beq.n	80156c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80156c2:	6878      	ldr	r0, [r7, #4]
 80156c4:	f000 fb3e 	bl	8015d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	685a      	ldr	r2, [r3, #4]
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80156d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	689a      	ldr	r2, [r3, #8]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80156e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	681a      	ldr	r2, [r3, #0]
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	f042 0201 	orr.w	r2, r2, #1
 80156f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f000 fbc5 	bl	8015e88 <UART_CheckIdleState>
 80156fe:	4603      	mov	r3, r0
}
 8015700:	4618      	mov	r0, r3
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b08a      	sub	sp, #40	; 0x28
 801570c:	af02      	add	r7, sp, #8
 801570e:	60f8      	str	r0, [r7, #12]
 8015710:	60b9      	str	r1, [r7, #8]
 8015712:	603b      	str	r3, [r7, #0]
 8015714:	4613      	mov	r3, r2
 8015716:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801571c:	2b20      	cmp	r3, #32
 801571e:	f040 8082 	bne.w	8015826 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8015722:	68bb      	ldr	r3, [r7, #8]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d002      	beq.n	801572e <HAL_UART_Transmit+0x26>
 8015728:	88fb      	ldrh	r3, [r7, #6]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d101      	bne.n	8015732 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801572e:	2301      	movs	r3, #1
 8015730:	e07a      	b.n	8015828 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8015738:	2b01      	cmp	r3, #1
 801573a:	d101      	bne.n	8015740 <HAL_UART_Transmit+0x38>
 801573c:	2302      	movs	r3, #2
 801573e:	e073      	b.n	8015828 <HAL_UART_Transmit+0x120>
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	2201      	movs	r2, #1
 8015744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2200      	movs	r2, #0
 801574c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	2221      	movs	r2, #33	; 0x21
 8015754:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015756:	f7fc fa9b 	bl	8011c90 <HAL_GetTick>
 801575a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	88fa      	ldrh	r2, [r7, #6]
 8015760:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	88fa      	ldrh	r2, [r7, #6]
 8015768:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	689b      	ldr	r3, [r3, #8]
 8015770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015774:	d108      	bne.n	8015788 <HAL_UART_Transmit+0x80>
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	691b      	ldr	r3, [r3, #16]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d104      	bne.n	8015788 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 801577e:	2300      	movs	r3, #0
 8015780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	61bb      	str	r3, [r7, #24]
 8015786:	e003      	b.n	8015790 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801578c:	2300      	movs	r3, #0
 801578e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	2200      	movs	r2, #0
 8015794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8015798:	e02d      	b.n	80157f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	9300      	str	r3, [sp, #0]
 801579e:	697b      	ldr	r3, [r7, #20]
 80157a0:	2200      	movs	r2, #0
 80157a2:	2180      	movs	r1, #128	; 0x80
 80157a4:	68f8      	ldr	r0, [r7, #12]
 80157a6:	f000 fbb8 	bl	8015f1a <UART_WaitOnFlagUntilTimeout>
 80157aa:	4603      	mov	r3, r0
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d001      	beq.n	80157b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80157b0:	2303      	movs	r3, #3
 80157b2:	e039      	b.n	8015828 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80157b4:	69fb      	ldr	r3, [r7, #28]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d10b      	bne.n	80157d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80157ba:	69bb      	ldr	r3, [r7, #24]
 80157bc:	881a      	ldrh	r2, [r3, #0]
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80157c6:	b292      	uxth	r2, r2
 80157c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	3302      	adds	r3, #2
 80157ce:	61bb      	str	r3, [r7, #24]
 80157d0:	e008      	b.n	80157e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80157d2:	69fb      	ldr	r3, [r7, #28]
 80157d4:	781a      	ldrb	r2, [r3, #0]
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	b292      	uxth	r2, r2
 80157dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80157de:	69fb      	ldr	r3, [r7, #28]
 80157e0:	3301      	adds	r3, #1
 80157e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80157ea:	b29b      	uxth	r3, r3
 80157ec:	3b01      	subs	r3, #1
 80157ee:	b29a      	uxth	r2, r3
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80157fc:	b29b      	uxth	r3, r3
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d1cb      	bne.n	801579a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	9300      	str	r3, [sp, #0]
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	2200      	movs	r2, #0
 801580a:	2140      	movs	r1, #64	; 0x40
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	f000 fb84 	bl	8015f1a <UART_WaitOnFlagUntilTimeout>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d001      	beq.n	801581c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8015818:	2303      	movs	r3, #3
 801581a:	e005      	b.n	8015828 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	2220      	movs	r2, #32
 8015820:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8015822:	2300      	movs	r3, #0
 8015824:	e000      	b.n	8015828 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8015826:	2302      	movs	r3, #2
  }
}
 8015828:	4618      	mov	r0, r3
 801582a:	3720      	adds	r7, #32
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015830:	b5b0      	push	{r4, r5, r7, lr}
 8015832:	b088      	sub	sp, #32
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015838:	2300      	movs	r3, #0
 801583a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	689a      	ldr	r2, [r3, #8]
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	691b      	ldr	r3, [r3, #16]
 8015844:	431a      	orrs	r2, r3
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	695b      	ldr	r3, [r3, #20]
 801584a:	431a      	orrs	r2, r3
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	69db      	ldr	r3, [r3, #28]
 8015850:	4313      	orrs	r3, r2
 8015852:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	4bad      	ldr	r3, [pc, #692]	; (8015b10 <UART_SetConfig+0x2e0>)
 801585c:	4013      	ands	r3, r2
 801585e:	687a      	ldr	r2, [r7, #4]
 8015860:	6812      	ldr	r2, [r2, #0]
 8015862:	69f9      	ldr	r1, [r7, #28]
 8015864:	430b      	orrs	r3, r1
 8015866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	685b      	ldr	r3, [r3, #4]
 801586e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	68da      	ldr	r2, [r3, #12]
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	430a      	orrs	r2, r1
 801587c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	699b      	ldr	r3, [r3, #24]
 8015882:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	4aa2      	ldr	r2, [pc, #648]	; (8015b14 <UART_SetConfig+0x2e4>)
 801588a:	4293      	cmp	r3, r2
 801588c:	d004      	beq.n	8015898 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	6a1b      	ldr	r3, [r3, #32]
 8015892:	69fa      	ldr	r2, [r7, #28]
 8015894:	4313      	orrs	r3, r2
 8015896:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	689b      	ldr	r3, [r3, #8]
 801589e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	69fa      	ldr	r2, [r7, #28]
 80158a8:	430a      	orrs	r2, r1
 80158aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	4a99      	ldr	r2, [pc, #612]	; (8015b18 <UART_SetConfig+0x2e8>)
 80158b2:	4293      	cmp	r3, r2
 80158b4:	d121      	bne.n	80158fa <UART_SetConfig+0xca>
 80158b6:	4b99      	ldr	r3, [pc, #612]	; (8015b1c <UART_SetConfig+0x2ec>)
 80158b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80158bc:	f003 0303 	and.w	r3, r3, #3
 80158c0:	2b03      	cmp	r3, #3
 80158c2:	d817      	bhi.n	80158f4 <UART_SetConfig+0xc4>
 80158c4:	a201      	add	r2, pc, #4	; (adr r2, 80158cc <UART_SetConfig+0x9c>)
 80158c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158ca:	bf00      	nop
 80158cc:	080158dd 	.word	0x080158dd
 80158d0:	080158e9 	.word	0x080158e9
 80158d4:	080158e3 	.word	0x080158e3
 80158d8:	080158ef 	.word	0x080158ef
 80158dc:	2301      	movs	r3, #1
 80158de:	76fb      	strb	r3, [r7, #27]
 80158e0:	e0e7      	b.n	8015ab2 <UART_SetConfig+0x282>
 80158e2:	2302      	movs	r3, #2
 80158e4:	76fb      	strb	r3, [r7, #27]
 80158e6:	e0e4      	b.n	8015ab2 <UART_SetConfig+0x282>
 80158e8:	2304      	movs	r3, #4
 80158ea:	76fb      	strb	r3, [r7, #27]
 80158ec:	e0e1      	b.n	8015ab2 <UART_SetConfig+0x282>
 80158ee:	2308      	movs	r3, #8
 80158f0:	76fb      	strb	r3, [r7, #27]
 80158f2:	e0de      	b.n	8015ab2 <UART_SetConfig+0x282>
 80158f4:	2310      	movs	r3, #16
 80158f6:	76fb      	strb	r3, [r7, #27]
 80158f8:	e0db      	b.n	8015ab2 <UART_SetConfig+0x282>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	4a88      	ldr	r2, [pc, #544]	; (8015b20 <UART_SetConfig+0x2f0>)
 8015900:	4293      	cmp	r3, r2
 8015902:	d132      	bne.n	801596a <UART_SetConfig+0x13a>
 8015904:	4b85      	ldr	r3, [pc, #532]	; (8015b1c <UART_SetConfig+0x2ec>)
 8015906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801590a:	f003 030c 	and.w	r3, r3, #12
 801590e:	2b0c      	cmp	r3, #12
 8015910:	d828      	bhi.n	8015964 <UART_SetConfig+0x134>
 8015912:	a201      	add	r2, pc, #4	; (adr r2, 8015918 <UART_SetConfig+0xe8>)
 8015914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015918:	0801594d 	.word	0x0801594d
 801591c:	08015965 	.word	0x08015965
 8015920:	08015965 	.word	0x08015965
 8015924:	08015965 	.word	0x08015965
 8015928:	08015959 	.word	0x08015959
 801592c:	08015965 	.word	0x08015965
 8015930:	08015965 	.word	0x08015965
 8015934:	08015965 	.word	0x08015965
 8015938:	08015953 	.word	0x08015953
 801593c:	08015965 	.word	0x08015965
 8015940:	08015965 	.word	0x08015965
 8015944:	08015965 	.word	0x08015965
 8015948:	0801595f 	.word	0x0801595f
 801594c:	2300      	movs	r3, #0
 801594e:	76fb      	strb	r3, [r7, #27]
 8015950:	e0af      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015952:	2302      	movs	r3, #2
 8015954:	76fb      	strb	r3, [r7, #27]
 8015956:	e0ac      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015958:	2304      	movs	r3, #4
 801595a:	76fb      	strb	r3, [r7, #27]
 801595c:	e0a9      	b.n	8015ab2 <UART_SetConfig+0x282>
 801595e:	2308      	movs	r3, #8
 8015960:	76fb      	strb	r3, [r7, #27]
 8015962:	e0a6      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015964:	2310      	movs	r3, #16
 8015966:	76fb      	strb	r3, [r7, #27]
 8015968:	e0a3      	b.n	8015ab2 <UART_SetConfig+0x282>
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	4a6d      	ldr	r2, [pc, #436]	; (8015b24 <UART_SetConfig+0x2f4>)
 8015970:	4293      	cmp	r3, r2
 8015972:	d120      	bne.n	80159b6 <UART_SetConfig+0x186>
 8015974:	4b69      	ldr	r3, [pc, #420]	; (8015b1c <UART_SetConfig+0x2ec>)
 8015976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801597a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801597e:	2b30      	cmp	r3, #48	; 0x30
 8015980:	d013      	beq.n	80159aa <UART_SetConfig+0x17a>
 8015982:	2b30      	cmp	r3, #48	; 0x30
 8015984:	d814      	bhi.n	80159b0 <UART_SetConfig+0x180>
 8015986:	2b20      	cmp	r3, #32
 8015988:	d009      	beq.n	801599e <UART_SetConfig+0x16e>
 801598a:	2b20      	cmp	r3, #32
 801598c:	d810      	bhi.n	80159b0 <UART_SetConfig+0x180>
 801598e:	2b00      	cmp	r3, #0
 8015990:	d002      	beq.n	8015998 <UART_SetConfig+0x168>
 8015992:	2b10      	cmp	r3, #16
 8015994:	d006      	beq.n	80159a4 <UART_SetConfig+0x174>
 8015996:	e00b      	b.n	80159b0 <UART_SetConfig+0x180>
 8015998:	2300      	movs	r3, #0
 801599a:	76fb      	strb	r3, [r7, #27]
 801599c:	e089      	b.n	8015ab2 <UART_SetConfig+0x282>
 801599e:	2302      	movs	r3, #2
 80159a0:	76fb      	strb	r3, [r7, #27]
 80159a2:	e086      	b.n	8015ab2 <UART_SetConfig+0x282>
 80159a4:	2304      	movs	r3, #4
 80159a6:	76fb      	strb	r3, [r7, #27]
 80159a8:	e083      	b.n	8015ab2 <UART_SetConfig+0x282>
 80159aa:	2308      	movs	r3, #8
 80159ac:	76fb      	strb	r3, [r7, #27]
 80159ae:	e080      	b.n	8015ab2 <UART_SetConfig+0x282>
 80159b0:	2310      	movs	r3, #16
 80159b2:	76fb      	strb	r3, [r7, #27]
 80159b4:	e07d      	b.n	8015ab2 <UART_SetConfig+0x282>
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	4a5b      	ldr	r2, [pc, #364]	; (8015b28 <UART_SetConfig+0x2f8>)
 80159bc:	4293      	cmp	r3, r2
 80159be:	d120      	bne.n	8015a02 <UART_SetConfig+0x1d2>
 80159c0:	4b56      	ldr	r3, [pc, #344]	; (8015b1c <UART_SetConfig+0x2ec>)
 80159c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80159c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80159ca:	2bc0      	cmp	r3, #192	; 0xc0
 80159cc:	d013      	beq.n	80159f6 <UART_SetConfig+0x1c6>
 80159ce:	2bc0      	cmp	r3, #192	; 0xc0
 80159d0:	d814      	bhi.n	80159fc <UART_SetConfig+0x1cc>
 80159d2:	2b80      	cmp	r3, #128	; 0x80
 80159d4:	d009      	beq.n	80159ea <UART_SetConfig+0x1ba>
 80159d6:	2b80      	cmp	r3, #128	; 0x80
 80159d8:	d810      	bhi.n	80159fc <UART_SetConfig+0x1cc>
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d002      	beq.n	80159e4 <UART_SetConfig+0x1b4>
 80159de:	2b40      	cmp	r3, #64	; 0x40
 80159e0:	d006      	beq.n	80159f0 <UART_SetConfig+0x1c0>
 80159e2:	e00b      	b.n	80159fc <UART_SetConfig+0x1cc>
 80159e4:	2300      	movs	r3, #0
 80159e6:	76fb      	strb	r3, [r7, #27]
 80159e8:	e063      	b.n	8015ab2 <UART_SetConfig+0x282>
 80159ea:	2302      	movs	r3, #2
 80159ec:	76fb      	strb	r3, [r7, #27]
 80159ee:	e060      	b.n	8015ab2 <UART_SetConfig+0x282>
 80159f0:	2304      	movs	r3, #4
 80159f2:	76fb      	strb	r3, [r7, #27]
 80159f4:	e05d      	b.n	8015ab2 <UART_SetConfig+0x282>
 80159f6:	2308      	movs	r3, #8
 80159f8:	76fb      	strb	r3, [r7, #27]
 80159fa:	e05a      	b.n	8015ab2 <UART_SetConfig+0x282>
 80159fc:	2310      	movs	r3, #16
 80159fe:	76fb      	strb	r3, [r7, #27]
 8015a00:	e057      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	4a49      	ldr	r2, [pc, #292]	; (8015b2c <UART_SetConfig+0x2fc>)
 8015a08:	4293      	cmp	r3, r2
 8015a0a:	d125      	bne.n	8015a58 <UART_SetConfig+0x228>
 8015a0c:	4b43      	ldr	r3, [pc, #268]	; (8015b1c <UART_SetConfig+0x2ec>)
 8015a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015a1a:	d017      	beq.n	8015a4c <UART_SetConfig+0x21c>
 8015a1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015a20:	d817      	bhi.n	8015a52 <UART_SetConfig+0x222>
 8015a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a26:	d00b      	beq.n	8015a40 <UART_SetConfig+0x210>
 8015a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a2c:	d811      	bhi.n	8015a52 <UART_SetConfig+0x222>
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d003      	beq.n	8015a3a <UART_SetConfig+0x20a>
 8015a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a36:	d006      	beq.n	8015a46 <UART_SetConfig+0x216>
 8015a38:	e00b      	b.n	8015a52 <UART_SetConfig+0x222>
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	76fb      	strb	r3, [r7, #27]
 8015a3e:	e038      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015a40:	2302      	movs	r3, #2
 8015a42:	76fb      	strb	r3, [r7, #27]
 8015a44:	e035      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015a46:	2304      	movs	r3, #4
 8015a48:	76fb      	strb	r3, [r7, #27]
 8015a4a:	e032      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015a4c:	2308      	movs	r3, #8
 8015a4e:	76fb      	strb	r3, [r7, #27]
 8015a50:	e02f      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015a52:	2310      	movs	r3, #16
 8015a54:	76fb      	strb	r3, [r7, #27]
 8015a56:	e02c      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	4a2d      	ldr	r2, [pc, #180]	; (8015b14 <UART_SetConfig+0x2e4>)
 8015a5e:	4293      	cmp	r3, r2
 8015a60:	d125      	bne.n	8015aae <UART_SetConfig+0x27e>
 8015a62:	4b2e      	ldr	r3, [pc, #184]	; (8015b1c <UART_SetConfig+0x2ec>)
 8015a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8015a6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015a70:	d017      	beq.n	8015aa2 <UART_SetConfig+0x272>
 8015a72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015a76:	d817      	bhi.n	8015aa8 <UART_SetConfig+0x278>
 8015a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015a7c:	d00b      	beq.n	8015a96 <UART_SetConfig+0x266>
 8015a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015a82:	d811      	bhi.n	8015aa8 <UART_SetConfig+0x278>
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d003      	beq.n	8015a90 <UART_SetConfig+0x260>
 8015a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015a8c:	d006      	beq.n	8015a9c <UART_SetConfig+0x26c>
 8015a8e:	e00b      	b.n	8015aa8 <UART_SetConfig+0x278>
 8015a90:	2300      	movs	r3, #0
 8015a92:	76fb      	strb	r3, [r7, #27]
 8015a94:	e00d      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015a96:	2302      	movs	r3, #2
 8015a98:	76fb      	strb	r3, [r7, #27]
 8015a9a:	e00a      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015a9c:	2304      	movs	r3, #4
 8015a9e:	76fb      	strb	r3, [r7, #27]
 8015aa0:	e007      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015aa2:	2308      	movs	r3, #8
 8015aa4:	76fb      	strb	r3, [r7, #27]
 8015aa6:	e004      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015aa8:	2310      	movs	r3, #16
 8015aaa:	76fb      	strb	r3, [r7, #27]
 8015aac:	e001      	b.n	8015ab2 <UART_SetConfig+0x282>
 8015aae:	2310      	movs	r3, #16
 8015ab0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	4a17      	ldr	r2, [pc, #92]	; (8015b14 <UART_SetConfig+0x2e4>)
 8015ab8:	4293      	cmp	r3, r2
 8015aba:	f040 8087 	bne.w	8015bcc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015abe:	7efb      	ldrb	r3, [r7, #27]
 8015ac0:	2b08      	cmp	r3, #8
 8015ac2:	d837      	bhi.n	8015b34 <UART_SetConfig+0x304>
 8015ac4:	a201      	add	r2, pc, #4	; (adr r2, 8015acc <UART_SetConfig+0x29c>)
 8015ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015aca:	bf00      	nop
 8015acc:	08015af1 	.word	0x08015af1
 8015ad0:	08015b35 	.word	0x08015b35
 8015ad4:	08015af9 	.word	0x08015af9
 8015ad8:	08015b35 	.word	0x08015b35
 8015adc:	08015aff 	.word	0x08015aff
 8015ae0:	08015b35 	.word	0x08015b35
 8015ae4:	08015b35 	.word	0x08015b35
 8015ae8:	08015b35 	.word	0x08015b35
 8015aec:	08015b07 	.word	0x08015b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015af0:	f7fe fb26 	bl	8014140 <HAL_RCC_GetPCLK1Freq>
 8015af4:	6178      	str	r0, [r7, #20]
        break;
 8015af6:	e022      	b.n	8015b3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015af8:	4b0d      	ldr	r3, [pc, #52]	; (8015b30 <UART_SetConfig+0x300>)
 8015afa:	617b      	str	r3, [r7, #20]
        break;
 8015afc:	e01f      	b.n	8015b3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015afe:	f7fe fa87 	bl	8014010 <HAL_RCC_GetSysClockFreq>
 8015b02:	6178      	str	r0, [r7, #20]
        break;
 8015b04:	e01b      	b.n	8015b3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b0a:	617b      	str	r3, [r7, #20]
        break;
 8015b0c:	e017      	b.n	8015b3e <UART_SetConfig+0x30e>
 8015b0e:	bf00      	nop
 8015b10:	efff69f3 	.word	0xefff69f3
 8015b14:	40008000 	.word	0x40008000
 8015b18:	40013800 	.word	0x40013800
 8015b1c:	40021000 	.word	0x40021000
 8015b20:	40004400 	.word	0x40004400
 8015b24:	40004800 	.word	0x40004800
 8015b28:	40004c00 	.word	0x40004c00
 8015b2c:	40005000 	.word	0x40005000
 8015b30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8015b34:	2300      	movs	r3, #0
 8015b36:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8015b38:	2301      	movs	r3, #1
 8015b3a:	76bb      	strb	r3, [r7, #26]
        break;
 8015b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	f000 80f1 	beq.w	8015d28 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	685a      	ldr	r2, [r3, #4]
 8015b4a:	4613      	mov	r3, r2
 8015b4c:	005b      	lsls	r3, r3, #1
 8015b4e:	4413      	add	r3, r2
 8015b50:	697a      	ldr	r2, [r7, #20]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d305      	bcc.n	8015b62 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	685b      	ldr	r3, [r3, #4]
 8015b5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015b5c:	697a      	ldr	r2, [r7, #20]
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d902      	bls.n	8015b68 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8015b62:	2301      	movs	r3, #1
 8015b64:	76bb      	strb	r3, [r7, #26]
 8015b66:	e0df      	b.n	8015d28 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f04f 0100 	mov.w	r1, #0
 8015b70:	f04f 0200 	mov.w	r2, #0
 8015b74:	f04f 0300 	mov.w	r3, #0
 8015b78:	020b      	lsls	r3, r1, #8
 8015b7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015b7e:	0202      	lsls	r2, r0, #8
 8015b80:	6879      	ldr	r1, [r7, #4]
 8015b82:	6849      	ldr	r1, [r1, #4]
 8015b84:	0849      	lsrs	r1, r1, #1
 8015b86:	4608      	mov	r0, r1
 8015b88:	f04f 0100 	mov.w	r1, #0
 8015b8c:	1814      	adds	r4, r2, r0
 8015b8e:	eb43 0501 	adc.w	r5, r3, r1
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	685b      	ldr	r3, [r3, #4]
 8015b96:	461a      	mov	r2, r3
 8015b98:	f04f 0300 	mov.w	r3, #0
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	4629      	mov	r1, r5
 8015ba0:	f7fa fb6e 	bl	8010280 <__aeabi_uldivmod>
 8015ba4:	4602      	mov	r2, r0
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	4613      	mov	r3, r2
 8015baa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015bac:	693b      	ldr	r3, [r7, #16]
 8015bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015bb2:	d308      	bcc.n	8015bc6 <UART_SetConfig+0x396>
 8015bb4:	693b      	ldr	r3, [r7, #16]
 8015bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015bba:	d204      	bcs.n	8015bc6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	693a      	ldr	r2, [r7, #16]
 8015bc2:	60da      	str	r2, [r3, #12]
 8015bc4:	e0b0      	b.n	8015d28 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	76bb      	strb	r3, [r7, #26]
 8015bca:	e0ad      	b.n	8015d28 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	69db      	ldr	r3, [r3, #28]
 8015bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015bd4:	d15c      	bne.n	8015c90 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8015bd6:	7efb      	ldrb	r3, [r7, #27]
 8015bd8:	2b08      	cmp	r3, #8
 8015bda:	d828      	bhi.n	8015c2e <UART_SetConfig+0x3fe>
 8015bdc:	a201      	add	r2, pc, #4	; (adr r2, 8015be4 <UART_SetConfig+0x3b4>)
 8015bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015be2:	bf00      	nop
 8015be4:	08015c09 	.word	0x08015c09
 8015be8:	08015c11 	.word	0x08015c11
 8015bec:	08015c19 	.word	0x08015c19
 8015bf0:	08015c2f 	.word	0x08015c2f
 8015bf4:	08015c1f 	.word	0x08015c1f
 8015bf8:	08015c2f 	.word	0x08015c2f
 8015bfc:	08015c2f 	.word	0x08015c2f
 8015c00:	08015c2f 	.word	0x08015c2f
 8015c04:	08015c27 	.word	0x08015c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015c08:	f7fe fa9a 	bl	8014140 <HAL_RCC_GetPCLK1Freq>
 8015c0c:	6178      	str	r0, [r7, #20]
        break;
 8015c0e:	e013      	b.n	8015c38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015c10:	f7fe faac 	bl	801416c <HAL_RCC_GetPCLK2Freq>
 8015c14:	6178      	str	r0, [r7, #20]
        break;
 8015c16:	e00f      	b.n	8015c38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015c18:	4b49      	ldr	r3, [pc, #292]	; (8015d40 <UART_SetConfig+0x510>)
 8015c1a:	617b      	str	r3, [r7, #20]
        break;
 8015c1c:	e00c      	b.n	8015c38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015c1e:	f7fe f9f7 	bl	8014010 <HAL_RCC_GetSysClockFreq>
 8015c22:	6178      	str	r0, [r7, #20]
        break;
 8015c24:	e008      	b.n	8015c38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015c2a:	617b      	str	r3, [r7, #20]
        break;
 8015c2c:	e004      	b.n	8015c38 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8015c32:	2301      	movs	r3, #1
 8015c34:	76bb      	strb	r3, [r7, #26]
        break;
 8015c36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d074      	beq.n	8015d28 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	005a      	lsls	r2, r3, #1
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	685b      	ldr	r3, [r3, #4]
 8015c46:	085b      	lsrs	r3, r3, #1
 8015c48:	441a      	add	r2, r3
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	685b      	ldr	r3, [r3, #4]
 8015c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015c52:	b29b      	uxth	r3, r3
 8015c54:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015c56:	693b      	ldr	r3, [r7, #16]
 8015c58:	2b0f      	cmp	r3, #15
 8015c5a:	d916      	bls.n	8015c8a <UART_SetConfig+0x45a>
 8015c5c:	693b      	ldr	r3, [r7, #16]
 8015c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c62:	d212      	bcs.n	8015c8a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015c64:	693b      	ldr	r3, [r7, #16]
 8015c66:	b29b      	uxth	r3, r3
 8015c68:	f023 030f 	bic.w	r3, r3, #15
 8015c6c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	085b      	lsrs	r3, r3, #1
 8015c72:	b29b      	uxth	r3, r3
 8015c74:	f003 0307 	and.w	r3, r3, #7
 8015c78:	b29a      	uxth	r2, r3
 8015c7a:	89fb      	ldrh	r3, [r7, #14]
 8015c7c:	4313      	orrs	r3, r2
 8015c7e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	89fa      	ldrh	r2, [r7, #14]
 8015c86:	60da      	str	r2, [r3, #12]
 8015c88:	e04e      	b.n	8015d28 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8015c8a:	2301      	movs	r3, #1
 8015c8c:	76bb      	strb	r3, [r7, #26]
 8015c8e:	e04b      	b.n	8015d28 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015c90:	7efb      	ldrb	r3, [r7, #27]
 8015c92:	2b08      	cmp	r3, #8
 8015c94:	d827      	bhi.n	8015ce6 <UART_SetConfig+0x4b6>
 8015c96:	a201      	add	r2, pc, #4	; (adr r2, 8015c9c <UART_SetConfig+0x46c>)
 8015c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c9c:	08015cc1 	.word	0x08015cc1
 8015ca0:	08015cc9 	.word	0x08015cc9
 8015ca4:	08015cd1 	.word	0x08015cd1
 8015ca8:	08015ce7 	.word	0x08015ce7
 8015cac:	08015cd7 	.word	0x08015cd7
 8015cb0:	08015ce7 	.word	0x08015ce7
 8015cb4:	08015ce7 	.word	0x08015ce7
 8015cb8:	08015ce7 	.word	0x08015ce7
 8015cbc:	08015cdf 	.word	0x08015cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015cc0:	f7fe fa3e 	bl	8014140 <HAL_RCC_GetPCLK1Freq>
 8015cc4:	6178      	str	r0, [r7, #20]
        break;
 8015cc6:	e013      	b.n	8015cf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015cc8:	f7fe fa50 	bl	801416c <HAL_RCC_GetPCLK2Freq>
 8015ccc:	6178      	str	r0, [r7, #20]
        break;
 8015cce:	e00f      	b.n	8015cf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015cd0:	4b1b      	ldr	r3, [pc, #108]	; (8015d40 <UART_SetConfig+0x510>)
 8015cd2:	617b      	str	r3, [r7, #20]
        break;
 8015cd4:	e00c      	b.n	8015cf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015cd6:	f7fe f99b 	bl	8014010 <HAL_RCC_GetSysClockFreq>
 8015cda:	6178      	str	r0, [r7, #20]
        break;
 8015cdc:	e008      	b.n	8015cf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015ce2:	617b      	str	r3, [r7, #20]
        break;
 8015ce4:	e004      	b.n	8015cf0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8015cea:	2301      	movs	r3, #1
 8015cec:	76bb      	strb	r3, [r7, #26]
        break;
 8015cee:	bf00      	nop
    }

    if (pclk != 0U)
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d018      	beq.n	8015d28 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	685b      	ldr	r3, [r3, #4]
 8015cfa:	085a      	lsrs	r2, r3, #1
 8015cfc:	697b      	ldr	r3, [r7, #20]
 8015cfe:	441a      	add	r2, r3
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	685b      	ldr	r3, [r3, #4]
 8015d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d08:	b29b      	uxth	r3, r3
 8015d0a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	2b0f      	cmp	r3, #15
 8015d10:	d908      	bls.n	8015d24 <UART_SetConfig+0x4f4>
 8015d12:	693b      	ldr	r3, [r7, #16]
 8015d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d18:	d204      	bcs.n	8015d24 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	693a      	ldr	r2, [r7, #16]
 8015d20:	60da      	str	r2, [r3, #12]
 8015d22:	e001      	b.n	8015d28 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8015d24:	2301      	movs	r3, #1
 8015d26:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	2200      	movs	r2, #0
 8015d32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8015d34:	7ebb      	ldrb	r3, [r7, #26]
}
 8015d36:	4618      	mov	r0, r3
 8015d38:	3720      	adds	r7, #32
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8015d3e:	bf00      	nop
 8015d40:	00f42400 	.word	0x00f42400

08015d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015d44:	b480      	push	{r7}
 8015d46:	b083      	sub	sp, #12
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d50:	f003 0301 	and.w	r3, r3, #1
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d00a      	beq.n	8015d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	430a      	orrs	r2, r1
 8015d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d72:	f003 0302 	and.w	r3, r3, #2
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d00a      	beq.n	8015d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	430a      	orrs	r2, r1
 8015d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d94:	f003 0304 	and.w	r3, r3, #4
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d00a      	beq.n	8015db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	430a      	orrs	r2, r1
 8015db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015db6:	f003 0308 	and.w	r3, r3, #8
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d00a      	beq.n	8015dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	430a      	orrs	r2, r1
 8015dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd8:	f003 0310 	and.w	r3, r3, #16
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d00a      	beq.n	8015df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	689b      	ldr	r3, [r3, #8]
 8015de6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	430a      	orrs	r2, r1
 8015df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dfa:	f003 0320 	and.w	r3, r3, #32
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d00a      	beq.n	8015e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	689b      	ldr	r3, [r3, #8]
 8015e08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	430a      	orrs	r2, r1
 8015e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d01a      	beq.n	8015e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	685b      	ldr	r3, [r3, #4]
 8015e2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	430a      	orrs	r2, r1
 8015e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015e42:	d10a      	bne.n	8015e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	685b      	ldr	r3, [r3, #4]
 8015e4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	430a      	orrs	r2, r1
 8015e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d00a      	beq.n	8015e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	685b      	ldr	r3, [r3, #4]
 8015e6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	430a      	orrs	r2, r1
 8015e7a:	605a      	str	r2, [r3, #4]
  }
}
 8015e7c:	bf00      	nop
 8015e7e:	370c      	adds	r7, #12
 8015e80:	46bd      	mov	sp, r7
 8015e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e86:	4770      	bx	lr

08015e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b086      	sub	sp, #24
 8015e8c:	af02      	add	r7, sp, #8
 8015e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2200      	movs	r2, #0
 8015e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015e98:	f7fb fefa 	bl	8011c90 <HAL_GetTick>
 8015e9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	f003 0308 	and.w	r3, r3, #8
 8015ea8:	2b08      	cmp	r3, #8
 8015eaa:	d10e      	bne.n	8015eca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015eb0:	9300      	str	r3, [sp, #0]
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f000 f82d 	bl	8015f1a <UART_WaitOnFlagUntilTimeout>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d001      	beq.n	8015eca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015ec6:	2303      	movs	r3, #3
 8015ec8:	e023      	b.n	8015f12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	f003 0304 	and.w	r3, r3, #4
 8015ed4:	2b04      	cmp	r3, #4
 8015ed6:	d10e      	bne.n	8015ef6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015edc:	9300      	str	r3, [sp, #0]
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f000 f817 	bl	8015f1a <UART_WaitOnFlagUntilTimeout>
 8015eec:	4603      	mov	r3, r0
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d001      	beq.n	8015ef6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015ef2:	2303      	movs	r3, #3
 8015ef4:	e00d      	b.n	8015f12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	2220      	movs	r2, #32
 8015efa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2220      	movs	r2, #32
 8015f00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2200      	movs	r2, #0
 8015f06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8015f10:	2300      	movs	r3, #0
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3710      	adds	r7, #16
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}

08015f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015f1a:	b580      	push	{r7, lr}
 8015f1c:	b084      	sub	sp, #16
 8015f1e:	af00      	add	r7, sp, #0
 8015f20:	60f8      	str	r0, [r7, #12]
 8015f22:	60b9      	str	r1, [r7, #8]
 8015f24:	603b      	str	r3, [r7, #0]
 8015f26:	4613      	mov	r3, r2
 8015f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015f2a:	e05e      	b.n	8015fea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015f2c:	69bb      	ldr	r3, [r7, #24]
 8015f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f32:	d05a      	beq.n	8015fea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015f34:	f7fb feac 	bl	8011c90 <HAL_GetTick>
 8015f38:	4602      	mov	r2, r0
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	1ad3      	subs	r3, r2, r3
 8015f3e:	69ba      	ldr	r2, [r7, #24]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d302      	bcc.n	8015f4a <UART_WaitOnFlagUntilTimeout+0x30>
 8015f44:	69bb      	ldr	r3, [r7, #24]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d11b      	bne.n	8015f82 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	681a      	ldr	r2, [r3, #0]
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8015f58:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	689a      	ldr	r2, [r3, #8]
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	f022 0201 	bic.w	r2, r2, #1
 8015f68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	2220      	movs	r2, #32
 8015f6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	2220      	movs	r2, #32
 8015f74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8015f7e:	2303      	movs	r3, #3
 8015f80:	e043      	b.n	801600a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	f003 0304 	and.w	r3, r3, #4
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d02c      	beq.n	8015fea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	69db      	ldr	r3, [r3, #28]
 8015f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015f9e:	d124      	bne.n	8015fea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015fa8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	681a      	ldr	r2, [r3, #0]
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8015fb8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	689a      	ldr	r2, [r3, #8]
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	f022 0201 	bic.w	r2, r2, #1
 8015fc8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	2220      	movs	r2, #32
 8015fce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	2220      	movs	r2, #32
 8015fd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	2220      	movs	r2, #32
 8015fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8015fe6:	2303      	movs	r3, #3
 8015fe8:	e00f      	b.n	801600a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	69da      	ldr	r2, [r3, #28]
 8015ff0:	68bb      	ldr	r3, [r7, #8]
 8015ff2:	4013      	ands	r3, r2
 8015ff4:	68ba      	ldr	r2, [r7, #8]
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	bf0c      	ite	eq
 8015ffa:	2301      	moveq	r3, #1
 8015ffc:	2300      	movne	r3, #0
 8015ffe:	b2db      	uxtb	r3, r3
 8016000:	461a      	mov	r2, r3
 8016002:	79fb      	ldrb	r3, [r7, #7]
 8016004:	429a      	cmp	r2, r3
 8016006:	d091      	beq.n	8015f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016008:	2300      	movs	r3, #0
}
 801600a:	4618      	mov	r0, r3
 801600c:	3710      	adds	r7, #16
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}

08016012 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8016012:	b580      	push	{r7, lr}
 8016014:	b08c      	sub	sp, #48	; 0x30
 8016016:	af00      	add	r7, sp, #0
 8016018:	603b      	str	r3, [r7, #0]
 801601a:	4603      	mov	r3, r0
 801601c:	71fb      	strb	r3, [r7, #7]
 801601e:	460b      	mov	r3, r1
 8016020:	71bb      	strb	r3, [r7, #6]
 8016022:	4613      	mov	r3, r2
 8016024:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8016026:	79fb      	ldrb	r3, [r7, #7]
 8016028:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 801602a:	79bb      	ldrb	r3, [r7, #6]
 801602c:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 801602e:	797b      	ldrb	r3, [r7, #5]
 8016030:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8016032:	f107 030c 	add.w	r3, r7, #12
 8016036:	2207      	movs	r2, #7
 8016038:	2100      	movs	r1, #0
 801603a:	4618      	mov	r0, r3
 801603c:	f001 f96f 	bl	801731e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8016040:	f107 0318 	add.w	r3, r7, #24
 8016044:	2218      	movs	r2, #24
 8016046:	2100      	movs	r1, #0
 8016048:	4618      	mov	r0, r3
 801604a:	f001 f968 	bl	801731e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 801604e:	233f      	movs	r3, #63	; 0x3f
 8016050:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8016052:	238a      	movs	r3, #138	; 0x8a
 8016054:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8016056:	f107 0314 	add.w	r3, r7, #20
 801605a:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 801605c:	2303      	movs	r3, #3
 801605e:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8016060:	f107 030c 	add.w	r3, r7, #12
 8016064:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8016066:	2307      	movs	r3, #7
 8016068:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 801606a:	f107 0318 	add.w	r3, r7, #24
 801606e:	2100      	movs	r1, #0
 8016070:	4618      	mov	r0, r3
 8016072:	f000 fca5 	bl	80169c0 <hci_send_req>
 8016076:	4603      	mov	r3, r0
 8016078:	2b00      	cmp	r3, #0
 801607a:	da01      	bge.n	8016080 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 801607c:	23ff      	movs	r3, #255	; 0xff
 801607e:	e014      	b.n	80160aa <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8016080:	7b3b      	ldrb	r3, [r7, #12]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d001      	beq.n	801608a <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8016086:	7b3b      	ldrb	r3, [r7, #12]
 8016088:	e00f      	b.n	80160aa <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 801608a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 801608e:	b29a      	uxth	r2, r3
 8016090:	683b      	ldr	r3, [r7, #0]
 8016092:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8016094:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8016098:	b29a      	uxth	r2, r3
 801609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801609c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 801609e:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80160a2:	b29a      	uxth	r2, r3
 80160a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160a6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80160a8:	2300      	movs	r3, #0
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3730      	adds	r7, #48	; 0x30
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}

080160b2 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80160b2:	b590      	push	{r4, r7, lr}
 80160b4:	b095      	sub	sp, #84	; 0x54
 80160b6:	af00      	add	r7, sp, #0
 80160b8:	4604      	mov	r4, r0
 80160ba:	4608      	mov	r0, r1
 80160bc:	4611      	mov	r1, r2
 80160be:	461a      	mov	r2, r3
 80160c0:	4623      	mov	r3, r4
 80160c2:	71fb      	strb	r3, [r7, #7]
 80160c4:	4603      	mov	r3, r0
 80160c6:	80bb      	strh	r3, [r7, #4]
 80160c8:	460b      	mov	r3, r1
 80160ca:	807b      	strh	r3, [r7, #2]
 80160cc:	4613      	mov	r3, r2
 80160ce:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80160d0:	2300      	movs	r3, #0
 80160d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80160d6:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80160da:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80160de:	4413      	add	r3, r2
 80160e0:	330e      	adds	r3, #14
 80160e2:	2b28      	cmp	r3, #40	; 0x28
 80160e4:	d901      	bls.n	80160ea <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80160e6:	2342      	movs	r3, #66	; 0x42
 80160e8:	e0ce      	b.n	8016288 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 80160ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80160ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80160f2:	4413      	add	r3, r2
 80160f4:	79fa      	ldrb	r2, [r7, #7]
 80160f6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80160fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80160fe:	3301      	adds	r3, #1
 8016100:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8016104:	88bb      	ldrh	r3, [r7, #4]
 8016106:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8016108:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801610c:	f107 0208 	add.w	r2, r7, #8
 8016110:	4413      	add	r3, r2
 8016112:	88ba      	ldrh	r2, [r7, #4]
 8016114:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8016116:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801611a:	3302      	adds	r3, #2
 801611c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8016120:	887b      	ldrh	r3, [r7, #2]
 8016122:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8016124:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016128:	f107 0208 	add.w	r2, r7, #8
 801612c:	4413      	add	r3, r2
 801612e:	887a      	ldrh	r2, [r7, #2]
 8016130:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8016132:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016136:	3302      	adds	r3, #2
 8016138:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 801613c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016140:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8016144:	4413      	add	r3, r2
 8016146:	79ba      	ldrb	r2, [r7, #6]
 8016148:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 801614c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016150:	3301      	adds	r3, #1
 8016152:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8016156:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801615a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801615e:	4413      	add	r3, r2
 8016160:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8016164:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8016168:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801616c:	3301      	adds	r3, #1
 801616e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8016172:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016176:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801617a:	4413      	add	r3, r2
 801617c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8016180:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8016184:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016188:	3301      	adds	r3, #1
 801618a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 801618e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016192:	f107 0208 	add.w	r2, r7, #8
 8016196:	4413      	add	r3, r2
 8016198:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 801619c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801619e:	4618      	mov	r0, r3
 80161a0:	f001 f8af 	bl	8017302 <memcpy>
  indx +=  LocalNameLen;
 80161a4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80161a8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80161ac:	4413      	add	r3, r2
 80161ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80161b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80161ba:	4413      	add	r3, r2
 80161bc:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80161c0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80161c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161c8:	3301      	adds	r3, #1
 80161ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80161ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161d2:	f107 0208 	add.w	r2, r7, #8
 80161d6:	4413      	add	r3, r2
 80161d8:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80161dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80161de:	4618      	mov	r0, r3
 80161e0:	f001 f88f 	bl	8017302 <memcpy>
  indx +=  ServiceUUIDLen;  
 80161e4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80161e8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80161ec:	4413      	add	r3, r2
 80161ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80161f2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80161f6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80161fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161fe:	f107 0208 	add.w	r2, r7, #8
 8016202:	4413      	add	r3, r2
 8016204:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8016208:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 801620a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801620e:	3302      	adds	r3, #2
 8016210:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8016214:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016218:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 801621c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016220:	f107 0208 	add.w	r2, r7, #8
 8016224:	4413      	add	r3, r2
 8016226:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 801622a:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 801622c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016230:	3302      	adds	r3, #2
 8016232:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8016236:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801623a:	2218      	movs	r2, #24
 801623c:	2100      	movs	r1, #0
 801623e:	4618      	mov	r0, r3
 8016240:	f001 f86d 	bl	801731e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8016244:	233f      	movs	r3, #63	; 0x3f
 8016246:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8016248:	2383      	movs	r3, #131	; 0x83
 801624a:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 801624c:	f107 0308 	add.w	r3, r7, #8
 8016250:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8016252:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016256:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8016258:	f107 0333 	add.w	r3, r7, #51	; 0x33
 801625c:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 801625e:	2301      	movs	r3, #1
 8016260:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8016262:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016266:	2100      	movs	r1, #0
 8016268:	4618      	mov	r0, r3
 801626a:	f000 fba9 	bl	80169c0 <hci_send_req>
 801626e:	4603      	mov	r3, r0
 8016270:	2b00      	cmp	r3, #0
 8016272:	da01      	bge.n	8016278 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8016274:	23ff      	movs	r3, #255	; 0xff
 8016276:	e007      	b.n	8016288 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8016278:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801627c:	2b00      	cmp	r3, #0
 801627e:	d002      	beq.n	8016286 <aci_gap_set_discoverable+0x1d4>
    return status;
 8016280:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016284:	e000      	b.n	8016288 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8016286:	2300      	movs	r3, #0
}
 8016288:	4618      	mov	r0, r3
 801628a:	3754      	adds	r7, #84	; 0x54
 801628c:	46bd      	mov	sp, r7
 801628e:	bd90      	pop	{r4, r7, pc}

08016290 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b088      	sub	sp, #32
 8016294:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8016296:	f107 0308 	add.w	r3, r7, #8
 801629a:	2218      	movs	r2, #24
 801629c:	2100      	movs	r1, #0
 801629e:	4618      	mov	r0, r3
 80162a0:	f001 f83d 	bl	801731e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80162a4:	233f      	movs	r3, #63	; 0x3f
 80162a6:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80162a8:	f240 1301 	movw	r3, #257	; 0x101
 80162ac:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80162ae:	1dfb      	adds	r3, r7, #7
 80162b0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80162b2:	2301      	movs	r3, #1
 80162b4:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80162b6:	f107 0308 	add.w	r3, r7, #8
 80162ba:	2100      	movs	r1, #0
 80162bc:	4618      	mov	r0, r3
 80162be:	f000 fb7f 	bl	80169c0 <hci_send_req>
 80162c2:	4603      	mov	r3, r0
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	da01      	bge.n	80162cc <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80162c8:	23ff      	movs	r3, #255	; 0xff
 80162ca:	e000      	b.n	80162ce <aci_gatt_init+0x3e>

  return status;
 80162cc:	79fb      	ldrb	r3, [r7, #7]
}
 80162ce:	4618      	mov	r0, r3
 80162d0:	3720      	adds	r7, #32
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}

080162d6 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80162d6:	b580      	push	{r7, lr}
 80162d8:	b090      	sub	sp, #64	; 0x40
 80162da:	af00      	add	r7, sp, #0
 80162dc:	6039      	str	r1, [r7, #0]
 80162de:	4611      	mov	r1, r2
 80162e0:	461a      	mov	r2, r3
 80162e2:	4603      	mov	r3, r0
 80162e4:	71fb      	strb	r3, [r7, #7]
 80162e6:	460b      	mov	r3, r1
 80162e8:	71bb      	strb	r3, [r7, #6]
 80162ea:	4613      	mov	r3, r2
 80162ec:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80162ee:	2300      	movs	r3, #0
 80162f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 80162f4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80162f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80162fc:	4413      	add	r3, r2
 80162fe:	79fa      	ldrb	r2, [r7, #7]
 8016300:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8016304:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016308:	3301      	adds	r3, #1
 801630a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 801630e:	79fb      	ldrb	r3, [r7, #7]
 8016310:	2b01      	cmp	r3, #1
 8016312:	d103      	bne.n	801631c <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8016314:	2302      	movs	r3, #2
 8016316:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801631a:	e002      	b.n	8016322 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 801631c:	2310      	movs	r3, #16
 801631e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8016322:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016326:	f107 020c 	add.w	r2, r7, #12
 801632a:	4413      	add	r3, r2
 801632c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8016330:	6839      	ldr	r1, [r7, #0]
 8016332:	4618      	mov	r0, r3
 8016334:	f000 ffe5 	bl	8017302 <memcpy>
  indx +=  uuid_len;
 8016338:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 801633c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016340:	4413      	add	r3, r2
 8016342:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8016346:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801634a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801634e:	4413      	add	r3, r2
 8016350:	79ba      	ldrb	r2, [r7, #6]
 8016352:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8016356:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801635a:	3301      	adds	r3, #1
 801635c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8016360:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016364:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016368:	4413      	add	r3, r2
 801636a:	797a      	ldrb	r2, [r7, #5]
 801636c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8016370:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016374:	3301      	adds	r3, #1
 8016376:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 801637a:	f107 0320 	add.w	r3, r7, #32
 801637e:	2203      	movs	r2, #3
 8016380:	2100      	movs	r1, #0
 8016382:	4618      	mov	r0, r3
 8016384:	f000 ffcb 	bl	801731e <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8016388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801638c:	2218      	movs	r2, #24
 801638e:	2100      	movs	r1, #0
 8016390:	4618      	mov	r0, r3
 8016392:	f000 ffc4 	bl	801731e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8016396:	233f      	movs	r3, #63	; 0x3f
 8016398:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 801639a:	f44f 7381 	mov.w	r3, #258	; 0x102
 801639e:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80163a0:	f107 030c 	add.w	r3, r7, #12
 80163a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80163a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80163aa:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80163ac:	f107 0320 	add.w	r3, r7, #32
 80163b0:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80163b2:	2303      	movs	r3, #3
 80163b4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80163b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163ba:	2100      	movs	r1, #0
 80163bc:	4618      	mov	r0, r3
 80163be:	f000 faff 	bl	80169c0 <hci_send_req>
 80163c2:	4603      	mov	r3, r0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	da01      	bge.n	80163cc <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 80163c8:	23ff      	movs	r3, #255	; 0xff
 80163ca:	e00c      	b.n	80163e6 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 80163cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d002      	beq.n	80163da <aci_gatt_add_serv+0x104>
    return resp.status;
 80163d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80163d8:	e005      	b.n	80163e6 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 80163da:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80163de:	b29a      	uxth	r2, r3
 80163e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80163e2:	801a      	strh	r2, [r3, #0]

  return 0;
 80163e4:	2300      	movs	r3, #0
}
 80163e6:	4618      	mov	r0, r3
 80163e8:	3740      	adds	r7, #64	; 0x40
 80163ea:	46bd      	mov	sp, r7
 80163ec:	bd80      	pop	{r7, pc}

080163ee <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80163ee:	b580      	push	{r7, lr}
 80163f0:	b092      	sub	sp, #72	; 0x48
 80163f2:	af00      	add	r7, sp, #0
 80163f4:	603a      	str	r2, [r7, #0]
 80163f6:	461a      	mov	r2, r3
 80163f8:	4603      	mov	r3, r0
 80163fa:	80fb      	strh	r3, [r7, #6]
 80163fc:	460b      	mov	r3, r1
 80163fe:	717b      	strb	r3, [r7, #5]
 8016400:	4613      	mov	r3, r2
 8016402:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8016404:	2300      	movs	r3, #0
 8016406:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 801640a:	88fb      	ldrh	r3, [r7, #6]
 801640c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 801640e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016412:	f107 020c 	add.w	r2, r7, #12
 8016416:	4413      	add	r3, r2
 8016418:	88fa      	ldrh	r2, [r7, #6]
 801641a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 801641c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016420:	3302      	adds	r3, #2
 8016422:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8016426:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801642a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801642e:	4413      	add	r3, r2
 8016430:	797a      	ldrb	r2, [r7, #5]
 8016432:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8016436:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801643a:	3301      	adds	r3, #1
 801643c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8016440:	797b      	ldrb	r3, [r7, #5]
 8016442:	2b01      	cmp	r3, #1
 8016444:	d103      	bne.n	801644e <aci_gatt_add_char+0x60>
    uuid_len = 2;
 8016446:	2302      	movs	r3, #2
 8016448:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801644c:	e002      	b.n	8016454 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 801644e:	2310      	movs	r3, #16
 8016450:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8016454:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016458:	f107 020c 	add.w	r2, r7, #12
 801645c:	4413      	add	r3, r2
 801645e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8016462:	6839      	ldr	r1, [r7, #0]
 8016464:	4618      	mov	r0, r3
 8016466:	f000 ff4c 	bl	8017302 <memcpy>
  indx +=  uuid_len;
 801646a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801646e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016472:	4413      	add	r3, r2
 8016474:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8016478:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801647c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016480:	4413      	add	r3, r2
 8016482:	793a      	ldrb	r2, [r7, #4]
 8016484:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8016488:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801648c:	3301      	adds	r3, #1
 801648e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8016492:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016496:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801649a:	4413      	add	r3, r2
 801649c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80164a0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80164a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164a8:	3301      	adds	r3, #1
 80164aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 80164ae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80164b6:	4413      	add	r3, r2
 80164b8:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80164bc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80164c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164c4:	3301      	adds	r3, #1
 80164c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80164ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80164d2:	4413      	add	r3, r2
 80164d4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80164d8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80164dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164e0:	3301      	adds	r3, #1
 80164e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80164e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80164ee:	4413      	add	r3, r2
 80164f0:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80164f4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80164f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164fc:	3301      	adds	r3, #1
 80164fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8016502:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016506:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801650a:	4413      	add	r3, r2
 801650c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8016510:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8016514:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016518:	3301      	adds	r3, #1
 801651a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 801651e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016522:	2203      	movs	r2, #3
 8016524:	2100      	movs	r1, #0
 8016526:	4618      	mov	r0, r3
 8016528:	f000 fef9 	bl	801731e <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 801652c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016530:	2218      	movs	r2, #24
 8016532:	2100      	movs	r1, #0
 8016534:	4618      	mov	r0, r3
 8016536:	f000 fef2 	bl	801731e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 801653a:	233f      	movs	r3, #63	; 0x3f
 801653c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 801653e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8016542:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8016544:	f107 030c 	add.w	r3, r7, #12
 8016548:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 801654a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801654e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8016550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016554:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8016556:	2303      	movs	r3, #3
 8016558:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 801655a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801655e:	2100      	movs	r1, #0
 8016560:	4618      	mov	r0, r3
 8016562:	f000 fa2d 	bl	80169c0 <hci_send_req>
 8016566:	4603      	mov	r3, r0
 8016568:	2b00      	cmp	r3, #0
 801656a:	da01      	bge.n	8016570 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 801656c:	23ff      	movs	r3, #255	; 0xff
 801656e:	e00c      	b.n	801658a <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8016570:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016574:	2b00      	cmp	r3, #0
 8016576:	d002      	beq.n	801657e <aci_gatt_add_char+0x190>
    return resp.status;
 8016578:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801657c:	e005      	b.n	801658a <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 801657e:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8016582:	b29a      	uxth	r2, r3
 8016584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016586:	801a      	strh	r2, [r3, #0]

  return 0;
 8016588:	2300      	movs	r3, #0
}
 801658a:	4618      	mov	r0, r3
 801658c:	3748      	adds	r7, #72	; 0x48
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}

08016592 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8016592:	b590      	push	{r4, r7, lr}
 8016594:	b0ab      	sub	sp, #172	; 0xac
 8016596:	af00      	add	r7, sp, #0
 8016598:	4604      	mov	r4, r0
 801659a:	4608      	mov	r0, r1
 801659c:	4611      	mov	r1, r2
 801659e:	461a      	mov	r2, r3
 80165a0:	4623      	mov	r3, r4
 80165a2:	80fb      	strh	r3, [r7, #6]
 80165a4:	4603      	mov	r3, r0
 80165a6:	80bb      	strh	r3, [r7, #4]
 80165a8:	460b      	mov	r3, r1
 80165aa:	70fb      	strb	r3, [r7, #3]
 80165ac:	4613      	mov	r3, r2
 80165ae:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80165b0:	2300      	movs	r3, #0
 80165b2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80165b6:	78bb      	ldrb	r3, [r7, #2]
 80165b8:	2b7a      	cmp	r3, #122	; 0x7a
 80165ba:	d901      	bls.n	80165c0 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 80165bc:	2342      	movs	r3, #66	; 0x42
 80165be:	e076      	b.n	80166ae <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 80165c0:	88fb      	ldrh	r3, [r7, #6]
 80165c2:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80165c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80165c8:	f107 0208 	add.w	r2, r7, #8
 80165cc:	4413      	add	r3, r2
 80165ce:	88fa      	ldrh	r2, [r7, #6]
 80165d0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80165d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80165d6:	3302      	adds	r3, #2
 80165d8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 80165dc:	88bb      	ldrh	r3, [r7, #4]
 80165de:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80165e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80165e4:	f107 0208 	add.w	r2, r7, #8
 80165e8:	4413      	add	r3, r2
 80165ea:	88ba      	ldrh	r2, [r7, #4]
 80165ec:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80165ee:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80165f2:	3302      	adds	r3, #2
 80165f4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 80165f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80165fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8016600:	4413      	add	r3, r2
 8016602:	78fa      	ldrb	r2, [r7, #3]
 8016604:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8016608:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801660c:	3301      	adds	r3, #1
 801660e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8016612:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016616:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801661a:	4413      	add	r3, r2
 801661c:	78ba      	ldrb	r2, [r7, #2]
 801661e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8016622:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016626:	3301      	adds	r3, #1
 8016628:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 801662c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016630:	f107 0208 	add.w	r2, r7, #8
 8016634:	4413      	add	r3, r2
 8016636:	78ba      	ldrb	r2, [r7, #2]
 8016638:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801663c:	4618      	mov	r0, r3
 801663e:	f000 fe60 	bl	8017302 <memcpy>
  indx +=  charValueLen;
 8016642:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8016646:	78bb      	ldrb	r3, [r7, #2]
 8016648:	4413      	add	r3, r2
 801664a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 801664e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016652:	2218      	movs	r2, #24
 8016654:	2100      	movs	r1, #0
 8016656:	4618      	mov	r0, r3
 8016658:	f000 fe61 	bl	801731e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 801665c:	233f      	movs	r3, #63	; 0x3f
 801665e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8016662:	f44f 7383 	mov.w	r3, #262	; 0x106
 8016666:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 801666a:	f107 0308 	add.w	r3, r7, #8
 801666e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8016672:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016676:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 801667a:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 801667e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8016682:	2301      	movs	r3, #1
 8016684:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8016688:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801668c:	2100      	movs	r1, #0
 801668e:	4618      	mov	r0, r3
 8016690:	f000 f996 	bl	80169c0 <hci_send_req>
 8016694:	4603      	mov	r3, r0
 8016696:	2b00      	cmp	r3, #0
 8016698:	da01      	bge.n	801669e <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 801669a:	23ff      	movs	r3, #255	; 0xff
 801669c:	e007      	b.n	80166ae <aci_gatt_update_char_value+0x11c>

  if (status) {
 801669e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d002      	beq.n	80166ac <aci_gatt_update_char_value+0x11a>
    return status;
 80166a6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80166aa:	e000      	b.n	80166ae <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 80166ac:	2300      	movs	r3, #0
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	37ac      	adds	r7, #172	; 0xac
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd90      	pop	{r4, r7, pc}

080166b6 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80166b6:	b580      	push	{r7, lr}
 80166b8:	b0aa      	sub	sp, #168	; 0xa8
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	4603      	mov	r3, r0
 80166be:	603a      	str	r2, [r7, #0]
 80166c0:	71fb      	strb	r3, [r7, #7]
 80166c2:	460b      	mov	r3, r1
 80166c4:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80166c6:	2300      	movs	r3, #0
 80166c8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80166cc:	79bb      	ldrb	r3, [r7, #6]
 80166ce:	2b7e      	cmp	r3, #126	; 0x7e
 80166d0:	d901      	bls.n	80166d6 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 80166d2:	2342      	movs	r3, #66	; 0x42
 80166d4:	e052      	b.n	801677c <aci_hal_write_config_data+0xc6>

  buffer[indx] = offset;
 80166d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80166da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80166de:	4413      	add	r3, r2
 80166e0:	79fa      	ldrb	r2, [r7, #7]
 80166e2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80166e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80166ea:	3301      	adds	r3, #1
 80166ec:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 80166f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80166f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80166f8:	4413      	add	r3, r2
 80166fa:	79ba      	ldrb	r2, [r7, #6]
 80166fc:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8016700:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016704:	3301      	adds	r3, #1
 8016706:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 801670a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801670e:	f107 0208 	add.w	r2, r7, #8
 8016712:	4413      	add	r3, r2
 8016714:	79ba      	ldrb	r2, [r7, #6]
 8016716:	6839      	ldr	r1, [r7, #0]
 8016718:	4618      	mov	r0, r3
 801671a:	f000 fdf2 	bl	8017302 <memcpy>
  indx +=  len;
 801671e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8016722:	79bb      	ldrb	r3, [r7, #6]
 8016724:	4413      	add	r3, r2
 8016726:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 801672a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801672e:	2218      	movs	r2, #24
 8016730:	2100      	movs	r1, #0
 8016732:	4618      	mov	r0, r3
 8016734:	f000 fdf3 	bl	801731e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8016738:	233f      	movs	r3, #63	; 0x3f
 801673a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 801673e:	230c      	movs	r3, #12
 8016740:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8016744:	f107 0308 	add.w	r3, r7, #8
 8016748:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 801674c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8016754:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8016758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 801675c:	2301      	movs	r3, #1
 801675e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8016762:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016766:	2100      	movs	r1, #0
 8016768:	4618      	mov	r0, r3
 801676a:	f000 f929 	bl	80169c0 <hci_send_req>
 801676e:	4603      	mov	r3, r0
 8016770:	2b00      	cmp	r3, #0
 8016772:	da01      	bge.n	8016778 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8016774:	23ff      	movs	r3, #255	; 0xff
 8016776:	e001      	b.n	801677c <aci_hal_write_config_data+0xc6>

  return status;
 8016778:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 801677c:	4618      	mov	r0, r3
 801677e:	37a8      	adds	r7, #168	; 0xa8
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}

08016784 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b088      	sub	sp, #32
 8016788:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 801678a:	f107 0308 	add.w	r3, r7, #8
 801678e:	2218      	movs	r2, #24
 8016790:	2100      	movs	r1, #0
 8016792:	4618      	mov	r0, r3
 8016794:	f000 fdc3 	bl	801731e <memset>
  rq.ogf = OGF_HOST_CTL;
 8016798:	2303      	movs	r3, #3
 801679a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 801679c:	2303      	movs	r3, #3
 801679e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80167a0:	1dfb      	adds	r3, r7, #7
 80167a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80167a4:	2301      	movs	r3, #1
 80167a6:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80167a8:	f107 0308 	add.w	r3, r7, #8
 80167ac:	2100      	movs	r1, #0
 80167ae:	4618      	mov	r0, r3
 80167b0:	f000 f906 	bl	80169c0 <hci_send_req>
 80167b4:	4603      	mov	r3, r0
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	da01      	bge.n	80167be <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 80167ba:	23ff      	movs	r3, #255	; 0xff
 80167bc:	e000      	b.n	80167c0 <hci_reset+0x3c>
  
  return status;  
 80167be:	79fb      	ldrb	r3, [r7, #7]
}
 80167c0:	4618      	mov	r0, r3
 80167c2:	3720      	adds	r7, #32
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}

080167c8 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80167c8:	b480      	push	{r7}
 80167ca:	b085      	sub	sp, #20
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	3308      	adds	r3, #8
 80167d4:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	781b      	ldrb	r3, [r3, #0]
 80167da:	2b04      	cmp	r3, #4
 80167dc:	d001      	beq.n	80167e2 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80167de:	2301      	movs	r3, #1
 80167e0:	e00c      	b.n	80167fc <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	3302      	adds	r3, #2
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	461a      	mov	r2, r3
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80167f0:	3b03      	subs	r3, #3
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d001      	beq.n	80167fa <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80167f6:	2302      	movs	r3, #2
 80167f8:	e000      	b.n	80167fc <verify_packet+0x34>
  
  return 0;      
 80167fa:	2300      	movs	r3, #0
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3714      	adds	r7, #20
 8016800:	46bd      	mov	sp, r7
 8016802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016806:	4770      	bx	lr

08016808 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b0a6      	sub	sp, #152	; 0x98
 801680c:	af00      	add	r7, sp, #0
 801680e:	607b      	str	r3, [r7, #4]
 8016810:	4603      	mov	r3, r0
 8016812:	81fb      	strh	r3, [r7, #14]
 8016814:	460b      	mov	r3, r1
 8016816:	81bb      	strh	r3, [r7, #12]
 8016818:	4613      	mov	r3, r2
 801681a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 801681c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016824:	b21a      	sxth	r2, r3
 8016826:	89fb      	ldrh	r3, [r7, #14]
 8016828:	029b      	lsls	r3, r3, #10
 801682a:	b21b      	sxth	r3, r3
 801682c:	4313      	orrs	r3, r2
 801682e:	b21b      	sxth	r3, r3
 8016830:	b29b      	uxth	r3, r3
 8016832:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8016834:	7afb      	ldrb	r3, [r7, #11]
 8016836:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8016838:	2301      	movs	r3, #1
 801683a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 801683c:	f107 0318 	add.w	r3, r7, #24
 8016840:	3301      	adds	r3, #1
 8016842:	461a      	mov	r2, r3
 8016844:	f107 0314 	add.w	r3, r7, #20
 8016848:	8819      	ldrh	r1, [r3, #0]
 801684a:	789b      	ldrb	r3, [r3, #2]
 801684c:	8011      	strh	r1, [r2, #0]
 801684e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8016850:	f107 0318 	add.w	r3, r7, #24
 8016854:	3304      	adds	r3, #4
 8016856:	7afa      	ldrb	r2, [r7, #11]
 8016858:	6879      	ldr	r1, [r7, #4]
 801685a:	4618      	mov	r0, r3
 801685c:	f000 fd51 	bl	8017302 <memcpy>
  
  if (hciContext.io.Send)
 8016860:	4b08      	ldr	r3, [pc, #32]	; (8016884 <send_cmd+0x7c>)
 8016862:	691b      	ldr	r3, [r3, #16]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d009      	beq.n	801687c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8016868:	4b06      	ldr	r3, [pc, #24]	; (8016884 <send_cmd+0x7c>)
 801686a:	691b      	ldr	r3, [r3, #16]
 801686c:	7afa      	ldrb	r2, [r7, #11]
 801686e:	b292      	uxth	r2, r2
 8016870:	3204      	adds	r2, #4
 8016872:	b291      	uxth	r1, r2
 8016874:	f107 0218 	add.w	r2, r7, #24
 8016878:	4610      	mov	r0, r2
 801687a:	4798      	blx	r3
  }
}
 801687c:	bf00      	nop
 801687e:	3798      	adds	r7, #152	; 0x98
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	2000046c 	.word	0x2000046c

08016888 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b084      	sub	sp, #16
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
 8016890:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8016892:	e00a      	b.n	80168aa <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8016894:	f107 030c 	add.w	r3, r7, #12
 8016898:	4619      	mov	r1, r3
 801689a:	6838      	ldr	r0, [r7, #0]
 801689c:	f000 faea 	bl	8016e74 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	4619      	mov	r1, r3
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f000 fa51 	bl	8016d4c <list_insert_head>
  while (!list_is_empty(src_list))
 80168aa:	6838      	ldr	r0, [r7, #0]
 80168ac:	f000 fa2c 	bl	8016d08 <list_is_empty>
 80168b0:	4603      	mov	r3, r0
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d0ee      	beq.n	8016894 <move_list+0xc>
  }
}
 80168b6:	bf00      	nop
 80168b8:	bf00      	nop
 80168ba:	3710      	adds	r7, #16
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}

080168c0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80168c6:	e009      	b.n	80168dc <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80168c8:	1d3b      	adds	r3, r7, #4
 80168ca:	4619      	mov	r1, r3
 80168cc:	4809      	ldr	r0, [pc, #36]	; (80168f4 <free_event_list+0x34>)
 80168ce:	f000 faaa 	bl	8016e26 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	4619      	mov	r1, r3
 80168d6:	4808      	ldr	r0, [pc, #32]	; (80168f8 <free_event_list+0x38>)
 80168d8:	f000 fa5e 	bl	8016d98 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80168dc:	4806      	ldr	r0, [pc, #24]	; (80168f8 <free_event_list+0x38>)
 80168de:	f000 faf0 	bl	8016ec2 <list_get_size>
 80168e2:	4603      	mov	r3, r0
 80168e4:	2b01      	cmp	r3, #1
 80168e6:	ddef      	ble.n	80168c8 <free_event_list+0x8>
  }
}
 80168e8:	bf00      	nop
 80168ea:	bf00      	nop
 80168ec:	3708      	adds	r7, #8
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	20000610 	.word	0x20000610
 80168f8:	20000608 	.word	0x20000608

080168fc <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b084      	sub	sp, #16
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d002      	beq.n	8016912 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 801690c:	4a18      	ldr	r2, [pc, #96]	; (8016970 <hci_init+0x74>)
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8016912:	4818      	ldr	r0, [pc, #96]	; (8016974 <hci_init+0x78>)
 8016914:	f000 f9e8 	bl	8016ce8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8016918:	4817      	ldr	r0, [pc, #92]	; (8016978 <hci_init+0x7c>)
 801691a:	f000 f9e5 	bl	8016ce8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 801691e:	f7fa fa7b 	bl	8010e18 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8016922:	2300      	movs	r3, #0
 8016924:	73fb      	strb	r3, [r7, #15]
 8016926:	e00c      	b.n	8016942 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8016928:	7bfb      	ldrb	r3, [r7, #15]
 801692a:	228c      	movs	r2, #140	; 0x8c
 801692c:	fb02 f303 	mul.w	r3, r2, r3
 8016930:	4a12      	ldr	r2, [pc, #72]	; (801697c <hci_init+0x80>)
 8016932:	4413      	add	r3, r2
 8016934:	4619      	mov	r1, r3
 8016936:	480f      	ldr	r0, [pc, #60]	; (8016974 <hci_init+0x78>)
 8016938:	f000 fa2e 	bl	8016d98 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 801693c:	7bfb      	ldrb	r3, [r7, #15]
 801693e:	3301      	adds	r3, #1
 8016940:	73fb      	strb	r3, [r7, #15]
 8016942:	7bfb      	ldrb	r3, [r7, #15]
 8016944:	2b04      	cmp	r3, #4
 8016946:	d9ef      	bls.n	8016928 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8016948:	4b09      	ldr	r3, [pc, #36]	; (8016970 <hci_init+0x74>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d003      	beq.n	8016958 <hci_init+0x5c>
 8016950:	4b07      	ldr	r3, [pc, #28]	; (8016970 <hci_init+0x74>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	2000      	movs	r0, #0
 8016956:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8016958:	4b05      	ldr	r3, [pc, #20]	; (8016970 <hci_init+0x74>)
 801695a:	689b      	ldr	r3, [r3, #8]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d002      	beq.n	8016966 <hci_init+0x6a>
 8016960:	4b03      	ldr	r3, [pc, #12]	; (8016970 <hci_init+0x74>)
 8016962:	689b      	ldr	r3, [r3, #8]
 8016964:	4798      	blx	r3
}
 8016966:	bf00      	nop
 8016968:	3710      	adds	r7, #16
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
 801696e:	bf00      	nop
 8016970:	2000046c 	.word	0x2000046c
 8016974:	20000608 	.word	0x20000608
 8016978:	20000610 	.word	0x20000610
 801697c:	200001b0 	.word	0x200001b0

08016980 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8016980:	b480      	push	{r7}
 8016982:	b083      	sub	sp, #12
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	4a0b      	ldr	r2, [pc, #44]	; (80169bc <hci_register_io_bus+0x3c>)
 801698e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	68db      	ldr	r3, [r3, #12]
 8016994:	4a09      	ldr	r2, [pc, #36]	; (80169bc <hci_register_io_bus+0x3c>)
 8016996:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	691b      	ldr	r3, [r3, #16]
 801699c:	4a07      	ldr	r2, [pc, #28]	; (80169bc <hci_register_io_bus+0x3c>)
 801699e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	699b      	ldr	r3, [r3, #24]
 80169a4:	4a05      	ldr	r2, [pc, #20]	; (80169bc <hci_register_io_bus+0x3c>)
 80169a6:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	689b      	ldr	r3, [r3, #8]
 80169ac:	4a03      	ldr	r2, [pc, #12]	; (80169bc <hci_register_io_bus+0x3c>)
 80169ae:	6093      	str	r3, [r2, #8]
}
 80169b0:	bf00      	nop
 80169b2:	370c      	adds	r7, #12
 80169b4:	46bd      	mov	sp, r7
 80169b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ba:	4770      	bx	lr
 80169bc:	2000046c 	.word	0x2000046c

080169c0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b08e      	sub	sp, #56	; 0x38
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
 80169c8:	460b      	mov	r3, r1
 80169ca:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	885b      	ldrh	r3, [r3, #2]
 80169d0:	b21b      	sxth	r3, r3
 80169d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80169d6:	b21a      	sxth	r2, r3
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	881b      	ldrh	r3, [r3, #0]
 80169dc:	029b      	lsls	r3, r3, #10
 80169de:	b21b      	sxth	r3, r3
 80169e0:	4313      	orrs	r3, r2
 80169e2:	b21b      	sxth	r3, r3
 80169e4:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80169e6:	2300      	movs	r3, #0
 80169e8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80169ea:	f107 0308 	add.w	r3, r7, #8
 80169ee:	4618      	mov	r0, r3
 80169f0:	f000 f97a 	bl	8016ce8 <list_init_head>

  free_event_list();
 80169f4:	f7ff ff64 	bl	80168c0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	8818      	ldrh	r0, [r3, #0]
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	8859      	ldrh	r1, [r3, #2]
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	68db      	ldr	r3, [r3, #12]
 8016a04:	b2da      	uxtb	r2, r3
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	689b      	ldr	r3, [r3, #8]
 8016a0a:	f7ff fefd 	bl	8016808 <send_cmd>
  
  if (async)
 8016a0e:	78fb      	ldrb	r3, [r7, #3]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d001      	beq.n	8016a18 <hci_send_req+0x58>
  {
    return 0;
 8016a14:	2300      	movs	r3, #0
 8016a16:	e0e5      	b.n	8016be4 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8016a18:	f7fb f93a 	bl	8011c90 <HAL_GetTick>
 8016a1c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8016a1e:	f7fb f937 	bl	8011c90 <HAL_GetTick>
 8016a22:	4602      	mov	r2, r0
 8016a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a26:	1ad3      	subs	r3, r2, r3
 8016a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016a2c:	f200 80b6 	bhi.w	8016b9c <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8016a30:	486e      	ldr	r0, [pc, #440]	; (8016bec <hci_send_req+0x22c>)
 8016a32:	f000 f969 	bl	8016d08 <list_is_empty>
 8016a36:	4603      	mov	r3, r0
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d000      	beq.n	8016a3e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8016a3c:	e7ef      	b.n	8016a1e <hci_send_req+0x5e>
      {
        break;
 8016a3e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8016a40:	f107 0310 	add.w	r3, r7, #16
 8016a44:	4619      	mov	r1, r3
 8016a46:	4869      	ldr	r0, [pc, #420]	; (8016bec <hci_send_req+0x22c>)
 8016a48:	f000 f9ed 	bl	8016e26 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	3308      	adds	r3, #8
 8016a50:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8016a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a54:	781b      	ldrb	r3, [r3, #0]
 8016a56:	2b04      	cmp	r3, #4
 8016a58:	d17b      	bne.n	8016b52 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8016a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a5c:	3301      	adds	r3, #1
 8016a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	3308      	adds	r3, #8
 8016a64:	3303      	adds	r3, #3
 8016a66:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8016a68:	693b      	ldr	r3, [r7, #16]
 8016a6a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8016a6e:	3b03      	subs	r3, #3
 8016a70:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8016a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a74:	781b      	ldrb	r3, [r3, #0]
 8016a76:	2b3e      	cmp	r3, #62	; 0x3e
 8016a78:	d04d      	beq.n	8016b16 <hci_send_req+0x156>
 8016a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8016a7c:	dc6b      	bgt.n	8016b56 <hci_send_req+0x196>
 8016a7e:	2b10      	cmp	r3, #16
 8016a80:	f000 808e 	beq.w	8016ba0 <hci_send_req+0x1e0>
 8016a84:	2b10      	cmp	r3, #16
 8016a86:	dc66      	bgt.n	8016b56 <hci_send_req+0x196>
 8016a88:	2b0e      	cmp	r3, #14
 8016a8a:	d024      	beq.n	8016ad6 <hci_send_req+0x116>
 8016a8c:	2b0f      	cmp	r3, #15
 8016a8e:	d162      	bne.n	8016b56 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8016a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a92:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8016a94:	69bb      	ldr	r3, [r7, #24]
 8016a96:	885b      	ldrh	r3, [r3, #2]
 8016a98:	b29b      	uxth	r3, r3
 8016a9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016a9c:	429a      	cmp	r2, r3
 8016a9e:	f040 8081 	bne.w	8016ba4 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	685b      	ldr	r3, [r3, #4]
 8016aa6:	2b0f      	cmp	r3, #15
 8016aa8:	d004      	beq.n	8016ab4 <hci_send_req+0xf4>
          if (cs->status) {
 8016aaa:	69bb      	ldr	r3, [r7, #24]
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d053      	beq.n	8016b5a <hci_send_req+0x19a>
            goto failed;
 8016ab2:	e07a      	b.n	8016baa <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	695a      	ldr	r2, [r3, #20]
 8016ab8:	6a3b      	ldr	r3, [r7, #32]
 8016aba:	429a      	cmp	r2, r3
 8016abc:	bf28      	it	cs
 8016abe:	461a      	movcs	r2, r3
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	6918      	ldr	r0, [r3, #16]
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	695b      	ldr	r3, [r3, #20]
 8016acc:	461a      	mov	r2, r3
 8016ace:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ad0:	f000 fc17 	bl	8017302 <memcpy>
        goto done;
 8016ad4:	e07a      	b.n	8016bcc <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8016ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad8:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8016ae0:	b29b      	uxth	r3, r3
 8016ae2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	d15f      	bne.n	8016ba8 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8016ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aea:	3303      	adds	r3, #3
 8016aec:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8016aee:	6a3b      	ldr	r3, [r7, #32]
 8016af0:	3b03      	subs	r3, #3
 8016af2:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	695a      	ldr	r2, [r3, #20]
 8016af8:	6a3b      	ldr	r3, [r7, #32]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	bf28      	it	cs
 8016afe:	461a      	movcs	r2, r3
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	6918      	ldr	r0, [r3, #16]
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	695b      	ldr	r3, [r3, #20]
 8016b0c:	461a      	mov	r2, r3
 8016b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b10:	f000 fbf7 	bl	8017302 <memcpy>
        goto done;
 8016b14:	e05a      	b.n	8016bcc <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8016b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b18:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8016b1a:	69fb      	ldr	r3, [r7, #28]
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	461a      	mov	r2, r3
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	429a      	cmp	r2, r3
 8016b26:	d11a      	bne.n	8016b5e <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8016b28:	6a3b      	ldr	r3, [r7, #32]
 8016b2a:	3b01      	subs	r3, #1
 8016b2c:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	695a      	ldr	r2, [r3, #20]
 8016b32:	6a3b      	ldr	r3, [r7, #32]
 8016b34:	429a      	cmp	r2, r3
 8016b36:	bf28      	it	cs
 8016b38:	461a      	movcs	r2, r3
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	6918      	ldr	r0, [r3, #16]
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	1c59      	adds	r1, r3, #1
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	695b      	ldr	r3, [r3, #20]
 8016b4a:	461a      	mov	r2, r3
 8016b4c:	f000 fbd9 	bl	8017302 <memcpy>
        goto done;
 8016b50:	e03c      	b.n	8016bcc <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8016b52:	bf00      	nop
 8016b54:	e004      	b.n	8016b60 <hci_send_req+0x1a0>
        break;
 8016b56:	bf00      	nop
 8016b58:	e002      	b.n	8016b60 <hci_send_req+0x1a0>
          break;
 8016b5a:	bf00      	nop
 8016b5c:	e000      	b.n	8016b60 <hci_send_req+0x1a0>
          break;
 8016b5e:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8016b60:	4823      	ldr	r0, [pc, #140]	; (8016bf0 <hci_send_req+0x230>)
 8016b62:	f000 f8d1 	bl	8016d08 <list_is_empty>
 8016b66:	4603      	mov	r3, r0
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d00d      	beq.n	8016b88 <hci_send_req+0x1c8>
 8016b6c:	481f      	ldr	r0, [pc, #124]	; (8016bec <hci_send_req+0x22c>)
 8016b6e:	f000 f8cb 	bl	8016d08 <list_is_empty>
 8016b72:	4603      	mov	r3, r0
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d007      	beq.n	8016b88 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8016b78:	693b      	ldr	r3, [r7, #16]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	481c      	ldr	r0, [pc, #112]	; (8016bf0 <hci_send_req+0x230>)
 8016b7e:	f000 f90b 	bl	8016d98 <list_insert_tail>
      hciReadPacket=NULL;
 8016b82:	2300      	movs	r3, #0
 8016b84:	613b      	str	r3, [r7, #16]
 8016b86:	e008      	b.n	8016b9a <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8016b88:	693a      	ldr	r2, [r7, #16]
 8016b8a:	f107 0308 	add.w	r3, r7, #8
 8016b8e:	4611      	mov	r1, r2
 8016b90:	4618      	mov	r0, r3
 8016b92:	f000 f901 	bl	8016d98 <list_insert_tail>
      hciReadPacket=NULL;
 8016b96:	2300      	movs	r3, #0
 8016b98:	613b      	str	r3, [r7, #16]
  {
 8016b9a:	e73d      	b.n	8016a18 <hci_send_req+0x58>
        goto failed;
 8016b9c:	bf00      	nop
 8016b9e:	e004      	b.n	8016baa <hci_send_req+0x1ea>
        goto failed;
 8016ba0:	bf00      	nop
 8016ba2:	e002      	b.n	8016baa <hci_send_req+0x1ea>
          goto failed;
 8016ba4:	bf00      	nop
 8016ba6:	e000      	b.n	8016baa <hci_send_req+0x1ea>
          goto failed;
 8016ba8:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8016baa:	693b      	ldr	r3, [r7, #16]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d004      	beq.n	8016bba <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	4619      	mov	r1, r3
 8016bb4:	480e      	ldr	r0, [pc, #56]	; (8016bf0 <hci_send_req+0x230>)
 8016bb6:	f000 f8c9 	bl	8016d4c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8016bba:	f107 0308 	add.w	r3, r7, #8
 8016bbe:	4619      	mov	r1, r3
 8016bc0:	480a      	ldr	r0, [pc, #40]	; (8016bec <hci_send_req+0x22c>)
 8016bc2:	f7ff fe61 	bl	8016888 <move_list>

  return -1;
 8016bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8016bca:	e00b      	b.n	8016be4 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8016bcc:	693b      	ldr	r3, [r7, #16]
 8016bce:	4619      	mov	r1, r3
 8016bd0:	4807      	ldr	r0, [pc, #28]	; (8016bf0 <hci_send_req+0x230>)
 8016bd2:	f000 f8bb 	bl	8016d4c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8016bd6:	f107 0308 	add.w	r3, r7, #8
 8016bda:	4619      	mov	r1, r3
 8016bdc:	4803      	ldr	r0, [pc, #12]	; (8016bec <hci_send_req+0x22c>)
 8016bde:	f7ff fe53 	bl	8016888 <move_list>

  return 0;
 8016be2:	2300      	movs	r3, #0
}
 8016be4:	4618      	mov	r0, r3
 8016be6:	3738      	adds	r7, #56	; 0x38
 8016be8:	46bd      	mov	sp, r7
 8016bea:	bd80      	pop	{r7, pc}
 8016bec:	20000610 	.word	0x20000610
 8016bf0:	20000608 	.word	0x20000608

08016bf4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b082      	sub	sp, #8
 8016bf8:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8016bfe:	e013      	b.n	8016c28 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8016c00:	1d3b      	adds	r3, r7, #4
 8016c02:	4619      	mov	r1, r3
 8016c04:	480e      	ldr	r0, [pc, #56]	; (8016c40 <hci_user_evt_proc+0x4c>)
 8016c06:	f000 f90e 	bl	8016e26 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8016c0a:	4b0e      	ldr	r3, [pc, #56]	; (8016c44 <hci_user_evt_proc+0x50>)
 8016c0c:	69db      	ldr	r3, [r3, #28]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d005      	beq.n	8016c1e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8016c12:	4b0c      	ldr	r3, [pc, #48]	; (8016c44 <hci_user_evt_proc+0x50>)
 8016c14:	69db      	ldr	r3, [r3, #28]
 8016c16:	687a      	ldr	r2, [r7, #4]
 8016c18:	3208      	adds	r2, #8
 8016c1a:	4610      	mov	r0, r2
 8016c1c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	4619      	mov	r1, r3
 8016c22:	4809      	ldr	r0, [pc, #36]	; (8016c48 <hci_user_evt_proc+0x54>)
 8016c24:	f000 f8b8 	bl	8016d98 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8016c28:	4805      	ldr	r0, [pc, #20]	; (8016c40 <hci_user_evt_proc+0x4c>)
 8016c2a:	f000 f86d 	bl	8016d08 <list_is_empty>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d0e5      	beq.n	8016c00 <hci_user_evt_proc+0xc>
  }
}
 8016c34:	bf00      	nop
 8016c36:	bf00      	nop
 8016c38:	3708      	adds	r7, #8
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop
 8016c40:	20000610 	.word	0x20000610
 8016c44:	2000046c 	.word	0x2000046c
 8016c48:	20000608 	.word	0x20000608

08016c4c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b086      	sub	sp, #24
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8016c54:	2300      	movs	r3, #0
 8016c56:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8016c5c:	481f      	ldr	r0, [pc, #124]	; (8016cdc <hci_notify_asynch_evt+0x90>)
 8016c5e:	f000 f853 	bl	8016d08 <list_is_empty>
 8016c62:	4603      	mov	r3, r0
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d132      	bne.n	8016cce <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8016c68:	f107 030c 	add.w	r3, r7, #12
 8016c6c:	4619      	mov	r1, r3
 8016c6e:	481b      	ldr	r0, [pc, #108]	; (8016cdc <hci_notify_asynch_evt+0x90>)
 8016c70:	f000 f8d9 	bl	8016e26 <list_remove_head>
    
    if (hciContext.io.Receive)
 8016c74:	4b1a      	ldr	r3, [pc, #104]	; (8016ce0 <hci_notify_asynch_evt+0x94>)
 8016c76:	68db      	ldr	r3, [r3, #12]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d02a      	beq.n	8016cd2 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8016c7c:	4b18      	ldr	r3, [pc, #96]	; (8016ce0 <hci_notify_asynch_evt+0x94>)
 8016c7e:	68db      	ldr	r3, [r3, #12]
 8016c80:	68fa      	ldr	r2, [r7, #12]
 8016c82:	3208      	adds	r2, #8
 8016c84:	2180      	movs	r1, #128	; 0x80
 8016c86:	4610      	mov	r0, r2
 8016c88:	4798      	blx	r3
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8016c8e:	7cfb      	ldrb	r3, [r7, #19]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d016      	beq.n	8016cc2 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	7cfa      	ldrb	r2, [r7, #19]
 8016c98:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f7ff fd92 	bl	80167c8 <verify_packet>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d105      	bne.n	8016cb6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	4619      	mov	r1, r3
 8016cae:	480d      	ldr	r0, [pc, #52]	; (8016ce4 <hci_notify_asynch_evt+0x98>)
 8016cb0:	f000 f872 	bl	8016d98 <list_insert_tail>
 8016cb4:	e00d      	b.n	8016cd2 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	4619      	mov	r1, r3
 8016cba:	4808      	ldr	r0, [pc, #32]	; (8016cdc <hci_notify_asynch_evt+0x90>)
 8016cbc:	f000 f846 	bl	8016d4c <list_insert_head>
 8016cc0:	e007      	b.n	8016cd2 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	4619      	mov	r1, r3
 8016cc6:	4805      	ldr	r0, [pc, #20]	; (8016cdc <hci_notify_asynch_evt+0x90>)
 8016cc8:	f000 f840 	bl	8016d4c <list_insert_head>
 8016ccc:	e001      	b.n	8016cd2 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8016cce:	2301      	movs	r3, #1
 8016cd0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8016cd2:	697b      	ldr	r3, [r7, #20]

}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3718      	adds	r7, #24
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	20000608 	.word	0x20000608
 8016ce0:	2000046c 	.word	0x2000046c
 8016ce4:	20000610 	.word	0x20000610

08016ce8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8016ce8:	b480      	push	{r7}
 8016cea:	b083      	sub	sp, #12
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	687a      	ldr	r2, [r7, #4]
 8016cf4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	687a      	ldr	r2, [r7, #4]
 8016cfa:	605a      	str	r2, [r3, #4]
}
 8016cfc:	bf00      	nop
 8016cfe:	370c      	adds	r7, #12
 8016d00:	46bd      	mov	sp, r7
 8016d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d06:	4770      	bx	lr

08016d08 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8016d08:	b480      	push	{r7}
 8016d0a:	b087      	sub	sp, #28
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d10:	f3ef 8310 	mrs	r3, PRIMASK
 8016d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8016d16:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016d18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016d1a:	b672      	cpsid	i
}
 8016d1c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	687a      	ldr	r2, [r7, #4]
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d102      	bne.n	8016d2e <list_is_empty+0x26>
  {
    return_value = 1;
 8016d28:	2301      	movs	r3, #1
 8016d2a:	75fb      	strb	r3, [r7, #23]
 8016d2c:	e001      	b.n	8016d32 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	75fb      	strb	r3, [r7, #23]
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d36:	68bb      	ldr	r3, [r7, #8]
 8016d38:	f383 8810 	msr	PRIMASK, r3
}
 8016d3c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8016d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d40:	4618      	mov	r0, r3
 8016d42:	371c      	adds	r7, #28
 8016d44:	46bd      	mov	sp, r7
 8016d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4a:	4770      	bx	lr

08016d4c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8016d4c:	b480      	push	{r7}
 8016d4e:	b087      	sub	sp, #28
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
 8016d54:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d56:	f3ef 8310 	mrs	r3, PRIMASK
 8016d5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8016d5c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016d5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016d60:	b672      	cpsid	i
}
 8016d62:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681a      	ldr	r2, [r3, #0]
 8016d68:	683b      	ldr	r3, [r7, #0]
 8016d6a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	687a      	ldr	r2, [r7, #4]
 8016d70:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	683a      	ldr	r2, [r7, #0]
 8016d76:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016d78:	683b      	ldr	r3, [r7, #0]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	683a      	ldr	r2, [r7, #0]
 8016d7e:	605a      	str	r2, [r3, #4]
 8016d80:	697b      	ldr	r3, [r7, #20]
 8016d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d84:	693b      	ldr	r3, [r7, #16]
 8016d86:	f383 8810 	msr	PRIMASK, r3
}
 8016d8a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016d8c:	bf00      	nop
 8016d8e:	371c      	adds	r7, #28
 8016d90:	46bd      	mov	sp, r7
 8016d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d96:	4770      	bx	lr

08016d98 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8016d98:	b480      	push	{r7}
 8016d9a:	b087      	sub	sp, #28
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
 8016da0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016da2:	f3ef 8310 	mrs	r3, PRIMASK
 8016da6:	60fb      	str	r3, [r7, #12]
  return(result);
 8016da8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016daa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016dac:	b672      	cpsid	i
}
 8016dae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	687a      	ldr	r2, [r7, #4]
 8016db4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	685a      	ldr	r2, [r3, #4]
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	683a      	ldr	r2, [r7, #0]
 8016dc2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	685b      	ldr	r3, [r3, #4]
 8016dc8:	683a      	ldr	r2, [r7, #0]
 8016dca:	601a      	str	r2, [r3, #0]
 8016dcc:	697b      	ldr	r3, [r7, #20]
 8016dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016dd0:	693b      	ldr	r3, [r7, #16]
 8016dd2:	f383 8810 	msr	PRIMASK, r3
}
 8016dd6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016dd8:	bf00      	nop
 8016dda:	371c      	adds	r7, #28
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de2:	4770      	bx	lr

08016de4 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8016de4:	b480      	push	{r7}
 8016de6:	b087      	sub	sp, #28
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016dec:	f3ef 8310 	mrs	r3, PRIMASK
 8016df0:	60fb      	str	r3, [r7, #12]
  return(result);
 8016df2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016df4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016df6:	b672      	cpsid	i
}
 8016df8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	685b      	ldr	r3, [r3, #4]
 8016dfe:	687a      	ldr	r2, [r7, #4]
 8016e00:	6812      	ldr	r2, [r2, #0]
 8016e02:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	687a      	ldr	r2, [r7, #4]
 8016e0a:	6852      	ldr	r2, [r2, #4]
 8016e0c:	605a      	str	r2, [r3, #4]
 8016e0e:	697b      	ldr	r3, [r7, #20]
 8016e10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e12:	693b      	ldr	r3, [r7, #16]
 8016e14:	f383 8810 	msr	PRIMASK, r3
}
 8016e18:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016e1a:	bf00      	nop
 8016e1c:	371c      	adds	r7, #28
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e24:	4770      	bx	lr

08016e26 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8016e26:	b580      	push	{r7, lr}
 8016e28:	b086      	sub	sp, #24
 8016e2a:	af00      	add	r7, sp, #0
 8016e2c:	6078      	str	r0, [r7, #4]
 8016e2e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e30:	f3ef 8310 	mrs	r3, PRIMASK
 8016e34:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e36:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016e38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016e3a:	b672      	cpsid	i
}
 8016e3c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	681a      	ldr	r2, [r3, #0]
 8016e42:	683b      	ldr	r3, [r7, #0]
 8016e44:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f7ff ffca 	bl	8016de4 <list_remove_node>
  (*node)->next = NULL;
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	2200      	movs	r2, #0
 8016e56:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	605a      	str	r2, [r3, #4]
 8016e60:	697b      	ldr	r3, [r7, #20]
 8016e62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e64:	693b      	ldr	r3, [r7, #16]
 8016e66:	f383 8810 	msr	PRIMASK, r3
}
 8016e6a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016e6c:	bf00      	nop
 8016e6e:	3718      	adds	r7, #24
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}

08016e74 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b086      	sub	sp, #24
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8016e82:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e84:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016e86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016e88:	b672      	cpsid	i
}
 8016e8a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	685a      	ldr	r2, [r3, #4]
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	685b      	ldr	r3, [r3, #4]
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7ff ffa3 	bl	8016de4 <list_remove_node>
  (*node)->next = NULL;
 8016e9e:	683b      	ldr	r3, [r7, #0]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	2200      	movs	r2, #0
 8016eac:	605a      	str	r2, [r3, #4]
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016eb2:	693b      	ldr	r3, [r7, #16]
 8016eb4:	f383 8810 	msr	PRIMASK, r3
}
 8016eb8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016eba:	bf00      	nop
 8016ebc:	3718      	adds	r7, #24
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}

08016ec2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8016ec2:	b480      	push	{r7}
 8016ec4:	b089      	sub	sp, #36	; 0x24
 8016ec6:	af00      	add	r7, sp, #0
 8016ec8:	6078      	str	r0, [r7, #4]
  int size = 0;
 8016eca:	2300      	movs	r3, #0
 8016ecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ece:	f3ef 8310 	mrs	r3, PRIMASK
 8016ed2:	613b      	str	r3, [r7, #16]
  return(result);
 8016ed4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ed6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ed8:	b672      	cpsid	i
}
 8016eda:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8016ee2:	e005      	b.n	8016ef0 <list_get_size+0x2e>
  {
    size++;
 8016ee4:	69fb      	ldr	r3, [r7, #28]
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8016eea:	69bb      	ldr	r3, [r7, #24]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8016ef0:	69ba      	ldr	r2, [r7, #24]
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	d1f5      	bne.n	8016ee4 <list_get_size+0x22>
 8016ef8:	697b      	ldr	r3, [r7, #20]
 8016efa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	f383 8810 	msr	PRIMASK, r3
}
 8016f02:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8016f04:	69fb      	ldr	r3, [r7, #28]
}
 8016f06:	4618      	mov	r0, r3
 8016f08:	3724      	adds	r7, #36	; 0x24
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f10:	4770      	bx	lr
	...

08016f14 <__errno>:
 8016f14:	4b01      	ldr	r3, [pc, #4]	; (8016f1c <__errno+0x8>)
 8016f16:	6818      	ldr	r0, [r3, #0]
 8016f18:	4770      	bx	lr
 8016f1a:	bf00      	nop
 8016f1c:	2000001c 	.word	0x2000001c

08016f20 <__sflush_r>:
 8016f20:	898a      	ldrh	r2, [r1, #12]
 8016f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f26:	4605      	mov	r5, r0
 8016f28:	0710      	lsls	r0, r2, #28
 8016f2a:	460c      	mov	r4, r1
 8016f2c:	d458      	bmi.n	8016fe0 <__sflush_r+0xc0>
 8016f2e:	684b      	ldr	r3, [r1, #4]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	dc05      	bgt.n	8016f40 <__sflush_r+0x20>
 8016f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	dc02      	bgt.n	8016f40 <__sflush_r+0x20>
 8016f3a:	2000      	movs	r0, #0
 8016f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f42:	2e00      	cmp	r6, #0
 8016f44:	d0f9      	beq.n	8016f3a <__sflush_r+0x1a>
 8016f46:	2300      	movs	r3, #0
 8016f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016f4c:	682f      	ldr	r7, [r5, #0]
 8016f4e:	602b      	str	r3, [r5, #0]
 8016f50:	d032      	beq.n	8016fb8 <__sflush_r+0x98>
 8016f52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016f54:	89a3      	ldrh	r3, [r4, #12]
 8016f56:	075a      	lsls	r2, r3, #29
 8016f58:	d505      	bpl.n	8016f66 <__sflush_r+0x46>
 8016f5a:	6863      	ldr	r3, [r4, #4]
 8016f5c:	1ac0      	subs	r0, r0, r3
 8016f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f60:	b10b      	cbz	r3, 8016f66 <__sflush_r+0x46>
 8016f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f64:	1ac0      	subs	r0, r0, r3
 8016f66:	2300      	movs	r3, #0
 8016f68:	4602      	mov	r2, r0
 8016f6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f6c:	6a21      	ldr	r1, [r4, #32]
 8016f6e:	4628      	mov	r0, r5
 8016f70:	47b0      	blx	r6
 8016f72:	1c43      	adds	r3, r0, #1
 8016f74:	89a3      	ldrh	r3, [r4, #12]
 8016f76:	d106      	bne.n	8016f86 <__sflush_r+0x66>
 8016f78:	6829      	ldr	r1, [r5, #0]
 8016f7a:	291d      	cmp	r1, #29
 8016f7c:	d82c      	bhi.n	8016fd8 <__sflush_r+0xb8>
 8016f7e:	4a2a      	ldr	r2, [pc, #168]	; (8017028 <__sflush_r+0x108>)
 8016f80:	40ca      	lsrs	r2, r1
 8016f82:	07d6      	lsls	r6, r2, #31
 8016f84:	d528      	bpl.n	8016fd8 <__sflush_r+0xb8>
 8016f86:	2200      	movs	r2, #0
 8016f88:	6062      	str	r2, [r4, #4]
 8016f8a:	04d9      	lsls	r1, r3, #19
 8016f8c:	6922      	ldr	r2, [r4, #16]
 8016f8e:	6022      	str	r2, [r4, #0]
 8016f90:	d504      	bpl.n	8016f9c <__sflush_r+0x7c>
 8016f92:	1c42      	adds	r2, r0, #1
 8016f94:	d101      	bne.n	8016f9a <__sflush_r+0x7a>
 8016f96:	682b      	ldr	r3, [r5, #0]
 8016f98:	b903      	cbnz	r3, 8016f9c <__sflush_r+0x7c>
 8016f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8016f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f9e:	602f      	str	r7, [r5, #0]
 8016fa0:	2900      	cmp	r1, #0
 8016fa2:	d0ca      	beq.n	8016f3a <__sflush_r+0x1a>
 8016fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fa8:	4299      	cmp	r1, r3
 8016faa:	d002      	beq.n	8016fb2 <__sflush_r+0x92>
 8016fac:	4628      	mov	r0, r5
 8016fae:	f000 f9bf 	bl	8017330 <_free_r>
 8016fb2:	2000      	movs	r0, #0
 8016fb4:	6360      	str	r0, [r4, #52]	; 0x34
 8016fb6:	e7c1      	b.n	8016f3c <__sflush_r+0x1c>
 8016fb8:	6a21      	ldr	r1, [r4, #32]
 8016fba:	2301      	movs	r3, #1
 8016fbc:	4628      	mov	r0, r5
 8016fbe:	47b0      	blx	r6
 8016fc0:	1c41      	adds	r1, r0, #1
 8016fc2:	d1c7      	bne.n	8016f54 <__sflush_r+0x34>
 8016fc4:	682b      	ldr	r3, [r5, #0]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d0c4      	beq.n	8016f54 <__sflush_r+0x34>
 8016fca:	2b1d      	cmp	r3, #29
 8016fcc:	d001      	beq.n	8016fd2 <__sflush_r+0xb2>
 8016fce:	2b16      	cmp	r3, #22
 8016fd0:	d101      	bne.n	8016fd6 <__sflush_r+0xb6>
 8016fd2:	602f      	str	r7, [r5, #0]
 8016fd4:	e7b1      	b.n	8016f3a <__sflush_r+0x1a>
 8016fd6:	89a3      	ldrh	r3, [r4, #12]
 8016fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fdc:	81a3      	strh	r3, [r4, #12]
 8016fde:	e7ad      	b.n	8016f3c <__sflush_r+0x1c>
 8016fe0:	690f      	ldr	r7, [r1, #16]
 8016fe2:	2f00      	cmp	r7, #0
 8016fe4:	d0a9      	beq.n	8016f3a <__sflush_r+0x1a>
 8016fe6:	0793      	lsls	r3, r2, #30
 8016fe8:	680e      	ldr	r6, [r1, #0]
 8016fea:	bf08      	it	eq
 8016fec:	694b      	ldreq	r3, [r1, #20]
 8016fee:	600f      	str	r7, [r1, #0]
 8016ff0:	bf18      	it	ne
 8016ff2:	2300      	movne	r3, #0
 8016ff4:	eba6 0807 	sub.w	r8, r6, r7
 8016ff8:	608b      	str	r3, [r1, #8]
 8016ffa:	f1b8 0f00 	cmp.w	r8, #0
 8016ffe:	dd9c      	ble.n	8016f3a <__sflush_r+0x1a>
 8017000:	6a21      	ldr	r1, [r4, #32]
 8017002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017004:	4643      	mov	r3, r8
 8017006:	463a      	mov	r2, r7
 8017008:	4628      	mov	r0, r5
 801700a:	47b0      	blx	r6
 801700c:	2800      	cmp	r0, #0
 801700e:	dc06      	bgt.n	801701e <__sflush_r+0xfe>
 8017010:	89a3      	ldrh	r3, [r4, #12]
 8017012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017016:	81a3      	strh	r3, [r4, #12]
 8017018:	f04f 30ff 	mov.w	r0, #4294967295
 801701c:	e78e      	b.n	8016f3c <__sflush_r+0x1c>
 801701e:	4407      	add	r7, r0
 8017020:	eba8 0800 	sub.w	r8, r8, r0
 8017024:	e7e9      	b.n	8016ffa <__sflush_r+0xda>
 8017026:	bf00      	nop
 8017028:	20400001 	.word	0x20400001

0801702c <_fflush_r>:
 801702c:	b538      	push	{r3, r4, r5, lr}
 801702e:	690b      	ldr	r3, [r1, #16]
 8017030:	4605      	mov	r5, r0
 8017032:	460c      	mov	r4, r1
 8017034:	b913      	cbnz	r3, 801703c <_fflush_r+0x10>
 8017036:	2500      	movs	r5, #0
 8017038:	4628      	mov	r0, r5
 801703a:	bd38      	pop	{r3, r4, r5, pc}
 801703c:	b118      	cbz	r0, 8017046 <_fflush_r+0x1a>
 801703e:	6983      	ldr	r3, [r0, #24]
 8017040:	b90b      	cbnz	r3, 8017046 <_fflush_r+0x1a>
 8017042:	f000 f899 	bl	8017178 <__sinit>
 8017046:	4b14      	ldr	r3, [pc, #80]	; (8017098 <_fflush_r+0x6c>)
 8017048:	429c      	cmp	r4, r3
 801704a:	d11b      	bne.n	8017084 <_fflush_r+0x58>
 801704c:	686c      	ldr	r4, [r5, #4]
 801704e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d0ef      	beq.n	8017036 <_fflush_r+0xa>
 8017056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017058:	07d0      	lsls	r0, r2, #31
 801705a:	d404      	bmi.n	8017066 <_fflush_r+0x3a>
 801705c:	0599      	lsls	r1, r3, #22
 801705e:	d402      	bmi.n	8017066 <_fflush_r+0x3a>
 8017060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017062:	f000 f94c 	bl	80172fe <__retarget_lock_acquire_recursive>
 8017066:	4628      	mov	r0, r5
 8017068:	4621      	mov	r1, r4
 801706a:	f7ff ff59 	bl	8016f20 <__sflush_r>
 801706e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017070:	07da      	lsls	r2, r3, #31
 8017072:	4605      	mov	r5, r0
 8017074:	d4e0      	bmi.n	8017038 <_fflush_r+0xc>
 8017076:	89a3      	ldrh	r3, [r4, #12]
 8017078:	059b      	lsls	r3, r3, #22
 801707a:	d4dd      	bmi.n	8017038 <_fflush_r+0xc>
 801707c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801707e:	f000 f93f 	bl	8017300 <__retarget_lock_release_recursive>
 8017082:	e7d9      	b.n	8017038 <_fflush_r+0xc>
 8017084:	4b05      	ldr	r3, [pc, #20]	; (801709c <_fflush_r+0x70>)
 8017086:	429c      	cmp	r4, r3
 8017088:	d101      	bne.n	801708e <_fflush_r+0x62>
 801708a:	68ac      	ldr	r4, [r5, #8]
 801708c:	e7df      	b.n	801704e <_fflush_r+0x22>
 801708e:	4b04      	ldr	r3, [pc, #16]	; (80170a0 <_fflush_r+0x74>)
 8017090:	429c      	cmp	r4, r3
 8017092:	bf08      	it	eq
 8017094:	68ec      	ldreq	r4, [r5, #12]
 8017096:	e7da      	b.n	801704e <_fflush_r+0x22>
 8017098:	080181f8 	.word	0x080181f8
 801709c:	08018218 	.word	0x08018218
 80170a0:	080181d8 	.word	0x080181d8

080170a4 <fflush>:
 80170a4:	4601      	mov	r1, r0
 80170a6:	b920      	cbnz	r0, 80170b2 <fflush+0xe>
 80170a8:	4b04      	ldr	r3, [pc, #16]	; (80170bc <fflush+0x18>)
 80170aa:	4905      	ldr	r1, [pc, #20]	; (80170c0 <fflush+0x1c>)
 80170ac:	6818      	ldr	r0, [r3, #0]
 80170ae:	f000 b8e1 	b.w	8017274 <_fwalk_reent>
 80170b2:	4b04      	ldr	r3, [pc, #16]	; (80170c4 <fflush+0x20>)
 80170b4:	6818      	ldr	r0, [r3, #0]
 80170b6:	f7ff bfb9 	b.w	801702c <_fflush_r>
 80170ba:	bf00      	nop
 80170bc:	08018238 	.word	0x08018238
 80170c0:	0801702d 	.word	0x0801702d
 80170c4:	2000001c 	.word	0x2000001c

080170c8 <std>:
 80170c8:	2300      	movs	r3, #0
 80170ca:	b510      	push	{r4, lr}
 80170cc:	4604      	mov	r4, r0
 80170ce:	e9c0 3300 	strd	r3, r3, [r0]
 80170d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80170d6:	6083      	str	r3, [r0, #8]
 80170d8:	8181      	strh	r1, [r0, #12]
 80170da:	6643      	str	r3, [r0, #100]	; 0x64
 80170dc:	81c2      	strh	r2, [r0, #14]
 80170de:	6183      	str	r3, [r0, #24]
 80170e0:	4619      	mov	r1, r3
 80170e2:	2208      	movs	r2, #8
 80170e4:	305c      	adds	r0, #92	; 0x5c
 80170e6:	f000 f91a 	bl	801731e <memset>
 80170ea:	4b05      	ldr	r3, [pc, #20]	; (8017100 <std+0x38>)
 80170ec:	6263      	str	r3, [r4, #36]	; 0x24
 80170ee:	4b05      	ldr	r3, [pc, #20]	; (8017104 <std+0x3c>)
 80170f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80170f2:	4b05      	ldr	r3, [pc, #20]	; (8017108 <std+0x40>)
 80170f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80170f6:	4b05      	ldr	r3, [pc, #20]	; (801710c <std+0x44>)
 80170f8:	6224      	str	r4, [r4, #32]
 80170fa:	6323      	str	r3, [r4, #48]	; 0x30
 80170fc:	bd10      	pop	{r4, pc}
 80170fe:	bf00      	nop
 8017100:	080175ed 	.word	0x080175ed
 8017104:	0801760f 	.word	0x0801760f
 8017108:	08017647 	.word	0x08017647
 801710c:	0801766b 	.word	0x0801766b

08017110 <_cleanup_r>:
 8017110:	4901      	ldr	r1, [pc, #4]	; (8017118 <_cleanup_r+0x8>)
 8017112:	f000 b8af 	b.w	8017274 <_fwalk_reent>
 8017116:	bf00      	nop
 8017118:	0801702d 	.word	0x0801702d

0801711c <__sfmoreglue>:
 801711c:	b570      	push	{r4, r5, r6, lr}
 801711e:	1e4a      	subs	r2, r1, #1
 8017120:	2568      	movs	r5, #104	; 0x68
 8017122:	4355      	muls	r5, r2
 8017124:	460e      	mov	r6, r1
 8017126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801712a:	f000 f951 	bl	80173d0 <_malloc_r>
 801712e:	4604      	mov	r4, r0
 8017130:	b140      	cbz	r0, 8017144 <__sfmoreglue+0x28>
 8017132:	2100      	movs	r1, #0
 8017134:	e9c0 1600 	strd	r1, r6, [r0]
 8017138:	300c      	adds	r0, #12
 801713a:	60a0      	str	r0, [r4, #8]
 801713c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017140:	f000 f8ed 	bl	801731e <memset>
 8017144:	4620      	mov	r0, r4
 8017146:	bd70      	pop	{r4, r5, r6, pc}

08017148 <__sfp_lock_acquire>:
 8017148:	4801      	ldr	r0, [pc, #4]	; (8017150 <__sfp_lock_acquire+0x8>)
 801714a:	f000 b8d8 	b.w	80172fe <__retarget_lock_acquire_recursive>
 801714e:	bf00      	nop
 8017150:	20000620 	.word	0x20000620

08017154 <__sfp_lock_release>:
 8017154:	4801      	ldr	r0, [pc, #4]	; (801715c <__sfp_lock_release+0x8>)
 8017156:	f000 b8d3 	b.w	8017300 <__retarget_lock_release_recursive>
 801715a:	bf00      	nop
 801715c:	20000620 	.word	0x20000620

08017160 <__sinit_lock_acquire>:
 8017160:	4801      	ldr	r0, [pc, #4]	; (8017168 <__sinit_lock_acquire+0x8>)
 8017162:	f000 b8cc 	b.w	80172fe <__retarget_lock_acquire_recursive>
 8017166:	bf00      	nop
 8017168:	2000061b 	.word	0x2000061b

0801716c <__sinit_lock_release>:
 801716c:	4801      	ldr	r0, [pc, #4]	; (8017174 <__sinit_lock_release+0x8>)
 801716e:	f000 b8c7 	b.w	8017300 <__retarget_lock_release_recursive>
 8017172:	bf00      	nop
 8017174:	2000061b 	.word	0x2000061b

08017178 <__sinit>:
 8017178:	b510      	push	{r4, lr}
 801717a:	4604      	mov	r4, r0
 801717c:	f7ff fff0 	bl	8017160 <__sinit_lock_acquire>
 8017180:	69a3      	ldr	r3, [r4, #24]
 8017182:	b11b      	cbz	r3, 801718c <__sinit+0x14>
 8017184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017188:	f7ff bff0 	b.w	801716c <__sinit_lock_release>
 801718c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017190:	6523      	str	r3, [r4, #80]	; 0x50
 8017192:	4b13      	ldr	r3, [pc, #76]	; (80171e0 <__sinit+0x68>)
 8017194:	4a13      	ldr	r2, [pc, #76]	; (80171e4 <__sinit+0x6c>)
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	62a2      	str	r2, [r4, #40]	; 0x28
 801719a:	42a3      	cmp	r3, r4
 801719c:	bf04      	itt	eq
 801719e:	2301      	moveq	r3, #1
 80171a0:	61a3      	streq	r3, [r4, #24]
 80171a2:	4620      	mov	r0, r4
 80171a4:	f000 f820 	bl	80171e8 <__sfp>
 80171a8:	6060      	str	r0, [r4, #4]
 80171aa:	4620      	mov	r0, r4
 80171ac:	f000 f81c 	bl	80171e8 <__sfp>
 80171b0:	60a0      	str	r0, [r4, #8]
 80171b2:	4620      	mov	r0, r4
 80171b4:	f000 f818 	bl	80171e8 <__sfp>
 80171b8:	2200      	movs	r2, #0
 80171ba:	60e0      	str	r0, [r4, #12]
 80171bc:	2104      	movs	r1, #4
 80171be:	6860      	ldr	r0, [r4, #4]
 80171c0:	f7ff ff82 	bl	80170c8 <std>
 80171c4:	68a0      	ldr	r0, [r4, #8]
 80171c6:	2201      	movs	r2, #1
 80171c8:	2109      	movs	r1, #9
 80171ca:	f7ff ff7d 	bl	80170c8 <std>
 80171ce:	68e0      	ldr	r0, [r4, #12]
 80171d0:	2202      	movs	r2, #2
 80171d2:	2112      	movs	r1, #18
 80171d4:	f7ff ff78 	bl	80170c8 <std>
 80171d8:	2301      	movs	r3, #1
 80171da:	61a3      	str	r3, [r4, #24]
 80171dc:	e7d2      	b.n	8017184 <__sinit+0xc>
 80171de:	bf00      	nop
 80171e0:	08018238 	.word	0x08018238
 80171e4:	08017111 	.word	0x08017111

080171e8 <__sfp>:
 80171e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ea:	4607      	mov	r7, r0
 80171ec:	f7ff ffac 	bl	8017148 <__sfp_lock_acquire>
 80171f0:	4b1e      	ldr	r3, [pc, #120]	; (801726c <__sfp+0x84>)
 80171f2:	681e      	ldr	r6, [r3, #0]
 80171f4:	69b3      	ldr	r3, [r6, #24]
 80171f6:	b913      	cbnz	r3, 80171fe <__sfp+0x16>
 80171f8:	4630      	mov	r0, r6
 80171fa:	f7ff ffbd 	bl	8017178 <__sinit>
 80171fe:	3648      	adds	r6, #72	; 0x48
 8017200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017204:	3b01      	subs	r3, #1
 8017206:	d503      	bpl.n	8017210 <__sfp+0x28>
 8017208:	6833      	ldr	r3, [r6, #0]
 801720a:	b30b      	cbz	r3, 8017250 <__sfp+0x68>
 801720c:	6836      	ldr	r6, [r6, #0]
 801720e:	e7f7      	b.n	8017200 <__sfp+0x18>
 8017210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017214:	b9d5      	cbnz	r5, 801724c <__sfp+0x64>
 8017216:	4b16      	ldr	r3, [pc, #88]	; (8017270 <__sfp+0x88>)
 8017218:	60e3      	str	r3, [r4, #12]
 801721a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801721e:	6665      	str	r5, [r4, #100]	; 0x64
 8017220:	f000 f86c 	bl	80172fc <__retarget_lock_init_recursive>
 8017224:	f7ff ff96 	bl	8017154 <__sfp_lock_release>
 8017228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801722c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017230:	6025      	str	r5, [r4, #0]
 8017232:	61a5      	str	r5, [r4, #24]
 8017234:	2208      	movs	r2, #8
 8017236:	4629      	mov	r1, r5
 8017238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801723c:	f000 f86f 	bl	801731e <memset>
 8017240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017248:	4620      	mov	r0, r4
 801724a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801724c:	3468      	adds	r4, #104	; 0x68
 801724e:	e7d9      	b.n	8017204 <__sfp+0x1c>
 8017250:	2104      	movs	r1, #4
 8017252:	4638      	mov	r0, r7
 8017254:	f7ff ff62 	bl	801711c <__sfmoreglue>
 8017258:	4604      	mov	r4, r0
 801725a:	6030      	str	r0, [r6, #0]
 801725c:	2800      	cmp	r0, #0
 801725e:	d1d5      	bne.n	801720c <__sfp+0x24>
 8017260:	f7ff ff78 	bl	8017154 <__sfp_lock_release>
 8017264:	230c      	movs	r3, #12
 8017266:	603b      	str	r3, [r7, #0]
 8017268:	e7ee      	b.n	8017248 <__sfp+0x60>
 801726a:	bf00      	nop
 801726c:	08018238 	.word	0x08018238
 8017270:	ffff0001 	.word	0xffff0001

08017274 <_fwalk_reent>:
 8017274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017278:	4606      	mov	r6, r0
 801727a:	4688      	mov	r8, r1
 801727c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017280:	2700      	movs	r7, #0
 8017282:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017286:	f1b9 0901 	subs.w	r9, r9, #1
 801728a:	d505      	bpl.n	8017298 <_fwalk_reent+0x24>
 801728c:	6824      	ldr	r4, [r4, #0]
 801728e:	2c00      	cmp	r4, #0
 8017290:	d1f7      	bne.n	8017282 <_fwalk_reent+0xe>
 8017292:	4638      	mov	r0, r7
 8017294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017298:	89ab      	ldrh	r3, [r5, #12]
 801729a:	2b01      	cmp	r3, #1
 801729c:	d907      	bls.n	80172ae <_fwalk_reent+0x3a>
 801729e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80172a2:	3301      	adds	r3, #1
 80172a4:	d003      	beq.n	80172ae <_fwalk_reent+0x3a>
 80172a6:	4629      	mov	r1, r5
 80172a8:	4630      	mov	r0, r6
 80172aa:	47c0      	blx	r8
 80172ac:	4307      	orrs	r7, r0
 80172ae:	3568      	adds	r5, #104	; 0x68
 80172b0:	e7e9      	b.n	8017286 <_fwalk_reent+0x12>
	...

080172b4 <__libc_init_array>:
 80172b4:	b570      	push	{r4, r5, r6, lr}
 80172b6:	4d0d      	ldr	r5, [pc, #52]	; (80172ec <__libc_init_array+0x38>)
 80172b8:	4c0d      	ldr	r4, [pc, #52]	; (80172f0 <__libc_init_array+0x3c>)
 80172ba:	1b64      	subs	r4, r4, r5
 80172bc:	10a4      	asrs	r4, r4, #2
 80172be:	2600      	movs	r6, #0
 80172c0:	42a6      	cmp	r6, r4
 80172c2:	d109      	bne.n	80172d8 <__libc_init_array+0x24>
 80172c4:	4d0b      	ldr	r5, [pc, #44]	; (80172f4 <__libc_init_array+0x40>)
 80172c6:	4c0c      	ldr	r4, [pc, #48]	; (80172f8 <__libc_init_array+0x44>)
 80172c8:	f000 fea2 	bl	8018010 <_init>
 80172cc:	1b64      	subs	r4, r4, r5
 80172ce:	10a4      	asrs	r4, r4, #2
 80172d0:	2600      	movs	r6, #0
 80172d2:	42a6      	cmp	r6, r4
 80172d4:	d105      	bne.n	80172e2 <__libc_init_array+0x2e>
 80172d6:	bd70      	pop	{r4, r5, r6, pc}
 80172d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80172dc:	4798      	blx	r3
 80172de:	3601      	adds	r6, #1
 80172e0:	e7ee      	b.n	80172c0 <__libc_init_array+0xc>
 80172e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80172e6:	4798      	blx	r3
 80172e8:	3601      	adds	r6, #1
 80172ea:	e7f2      	b.n	80172d2 <__libc_init_array+0x1e>
 80172ec:	08018278 	.word	0x08018278
 80172f0:	08018278 	.word	0x08018278
 80172f4:	08018278 	.word	0x08018278
 80172f8:	0801827c 	.word	0x0801827c

080172fc <__retarget_lock_init_recursive>:
 80172fc:	4770      	bx	lr

080172fe <__retarget_lock_acquire_recursive>:
 80172fe:	4770      	bx	lr

08017300 <__retarget_lock_release_recursive>:
 8017300:	4770      	bx	lr

08017302 <memcpy>:
 8017302:	440a      	add	r2, r1
 8017304:	4291      	cmp	r1, r2
 8017306:	f100 33ff 	add.w	r3, r0, #4294967295
 801730a:	d100      	bne.n	801730e <memcpy+0xc>
 801730c:	4770      	bx	lr
 801730e:	b510      	push	{r4, lr}
 8017310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017318:	4291      	cmp	r1, r2
 801731a:	d1f9      	bne.n	8017310 <memcpy+0xe>
 801731c:	bd10      	pop	{r4, pc}

0801731e <memset>:
 801731e:	4402      	add	r2, r0
 8017320:	4603      	mov	r3, r0
 8017322:	4293      	cmp	r3, r2
 8017324:	d100      	bne.n	8017328 <memset+0xa>
 8017326:	4770      	bx	lr
 8017328:	f803 1b01 	strb.w	r1, [r3], #1
 801732c:	e7f9      	b.n	8017322 <memset+0x4>
	...

08017330 <_free_r>:
 8017330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017332:	2900      	cmp	r1, #0
 8017334:	d048      	beq.n	80173c8 <_free_r+0x98>
 8017336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801733a:	9001      	str	r0, [sp, #4]
 801733c:	2b00      	cmp	r3, #0
 801733e:	f1a1 0404 	sub.w	r4, r1, #4
 8017342:	bfb8      	it	lt
 8017344:	18e4      	addlt	r4, r4, r3
 8017346:	f000 faed 	bl	8017924 <__malloc_lock>
 801734a:	4a20      	ldr	r2, [pc, #128]	; (80173cc <_free_r+0x9c>)
 801734c:	9801      	ldr	r0, [sp, #4]
 801734e:	6813      	ldr	r3, [r2, #0]
 8017350:	4615      	mov	r5, r2
 8017352:	b933      	cbnz	r3, 8017362 <_free_r+0x32>
 8017354:	6063      	str	r3, [r4, #4]
 8017356:	6014      	str	r4, [r2, #0]
 8017358:	b003      	add	sp, #12
 801735a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801735e:	f000 bae7 	b.w	8017930 <__malloc_unlock>
 8017362:	42a3      	cmp	r3, r4
 8017364:	d90b      	bls.n	801737e <_free_r+0x4e>
 8017366:	6821      	ldr	r1, [r4, #0]
 8017368:	1862      	adds	r2, r4, r1
 801736a:	4293      	cmp	r3, r2
 801736c:	bf04      	itt	eq
 801736e:	681a      	ldreq	r2, [r3, #0]
 8017370:	685b      	ldreq	r3, [r3, #4]
 8017372:	6063      	str	r3, [r4, #4]
 8017374:	bf04      	itt	eq
 8017376:	1852      	addeq	r2, r2, r1
 8017378:	6022      	streq	r2, [r4, #0]
 801737a:	602c      	str	r4, [r5, #0]
 801737c:	e7ec      	b.n	8017358 <_free_r+0x28>
 801737e:	461a      	mov	r2, r3
 8017380:	685b      	ldr	r3, [r3, #4]
 8017382:	b10b      	cbz	r3, 8017388 <_free_r+0x58>
 8017384:	42a3      	cmp	r3, r4
 8017386:	d9fa      	bls.n	801737e <_free_r+0x4e>
 8017388:	6811      	ldr	r1, [r2, #0]
 801738a:	1855      	adds	r5, r2, r1
 801738c:	42a5      	cmp	r5, r4
 801738e:	d10b      	bne.n	80173a8 <_free_r+0x78>
 8017390:	6824      	ldr	r4, [r4, #0]
 8017392:	4421      	add	r1, r4
 8017394:	1854      	adds	r4, r2, r1
 8017396:	42a3      	cmp	r3, r4
 8017398:	6011      	str	r1, [r2, #0]
 801739a:	d1dd      	bne.n	8017358 <_free_r+0x28>
 801739c:	681c      	ldr	r4, [r3, #0]
 801739e:	685b      	ldr	r3, [r3, #4]
 80173a0:	6053      	str	r3, [r2, #4]
 80173a2:	4421      	add	r1, r4
 80173a4:	6011      	str	r1, [r2, #0]
 80173a6:	e7d7      	b.n	8017358 <_free_r+0x28>
 80173a8:	d902      	bls.n	80173b0 <_free_r+0x80>
 80173aa:	230c      	movs	r3, #12
 80173ac:	6003      	str	r3, [r0, #0]
 80173ae:	e7d3      	b.n	8017358 <_free_r+0x28>
 80173b0:	6825      	ldr	r5, [r4, #0]
 80173b2:	1961      	adds	r1, r4, r5
 80173b4:	428b      	cmp	r3, r1
 80173b6:	bf04      	itt	eq
 80173b8:	6819      	ldreq	r1, [r3, #0]
 80173ba:	685b      	ldreq	r3, [r3, #4]
 80173bc:	6063      	str	r3, [r4, #4]
 80173be:	bf04      	itt	eq
 80173c0:	1949      	addeq	r1, r1, r5
 80173c2:	6021      	streq	r1, [r4, #0]
 80173c4:	6054      	str	r4, [r2, #4]
 80173c6:	e7c7      	b.n	8017358 <_free_r+0x28>
 80173c8:	b003      	add	sp, #12
 80173ca:	bd30      	pop	{r4, r5, pc}
 80173cc:	2000048c 	.word	0x2000048c

080173d0 <_malloc_r>:
 80173d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173d2:	1ccd      	adds	r5, r1, #3
 80173d4:	f025 0503 	bic.w	r5, r5, #3
 80173d8:	3508      	adds	r5, #8
 80173da:	2d0c      	cmp	r5, #12
 80173dc:	bf38      	it	cc
 80173de:	250c      	movcc	r5, #12
 80173e0:	2d00      	cmp	r5, #0
 80173e2:	4606      	mov	r6, r0
 80173e4:	db01      	blt.n	80173ea <_malloc_r+0x1a>
 80173e6:	42a9      	cmp	r1, r5
 80173e8:	d903      	bls.n	80173f2 <_malloc_r+0x22>
 80173ea:	230c      	movs	r3, #12
 80173ec:	6033      	str	r3, [r6, #0]
 80173ee:	2000      	movs	r0, #0
 80173f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173f2:	f000 fa97 	bl	8017924 <__malloc_lock>
 80173f6:	4921      	ldr	r1, [pc, #132]	; (801747c <_malloc_r+0xac>)
 80173f8:	680a      	ldr	r2, [r1, #0]
 80173fa:	4614      	mov	r4, r2
 80173fc:	b99c      	cbnz	r4, 8017426 <_malloc_r+0x56>
 80173fe:	4f20      	ldr	r7, [pc, #128]	; (8017480 <_malloc_r+0xb0>)
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	b923      	cbnz	r3, 801740e <_malloc_r+0x3e>
 8017404:	4621      	mov	r1, r4
 8017406:	4630      	mov	r0, r6
 8017408:	f000 f8e0 	bl	80175cc <_sbrk_r>
 801740c:	6038      	str	r0, [r7, #0]
 801740e:	4629      	mov	r1, r5
 8017410:	4630      	mov	r0, r6
 8017412:	f000 f8db 	bl	80175cc <_sbrk_r>
 8017416:	1c43      	adds	r3, r0, #1
 8017418:	d123      	bne.n	8017462 <_malloc_r+0x92>
 801741a:	230c      	movs	r3, #12
 801741c:	6033      	str	r3, [r6, #0]
 801741e:	4630      	mov	r0, r6
 8017420:	f000 fa86 	bl	8017930 <__malloc_unlock>
 8017424:	e7e3      	b.n	80173ee <_malloc_r+0x1e>
 8017426:	6823      	ldr	r3, [r4, #0]
 8017428:	1b5b      	subs	r3, r3, r5
 801742a:	d417      	bmi.n	801745c <_malloc_r+0x8c>
 801742c:	2b0b      	cmp	r3, #11
 801742e:	d903      	bls.n	8017438 <_malloc_r+0x68>
 8017430:	6023      	str	r3, [r4, #0]
 8017432:	441c      	add	r4, r3
 8017434:	6025      	str	r5, [r4, #0]
 8017436:	e004      	b.n	8017442 <_malloc_r+0x72>
 8017438:	6863      	ldr	r3, [r4, #4]
 801743a:	42a2      	cmp	r2, r4
 801743c:	bf0c      	ite	eq
 801743e:	600b      	streq	r3, [r1, #0]
 8017440:	6053      	strne	r3, [r2, #4]
 8017442:	4630      	mov	r0, r6
 8017444:	f000 fa74 	bl	8017930 <__malloc_unlock>
 8017448:	f104 000b 	add.w	r0, r4, #11
 801744c:	1d23      	adds	r3, r4, #4
 801744e:	f020 0007 	bic.w	r0, r0, #7
 8017452:	1ac2      	subs	r2, r0, r3
 8017454:	d0cc      	beq.n	80173f0 <_malloc_r+0x20>
 8017456:	1a1b      	subs	r3, r3, r0
 8017458:	50a3      	str	r3, [r4, r2]
 801745a:	e7c9      	b.n	80173f0 <_malloc_r+0x20>
 801745c:	4622      	mov	r2, r4
 801745e:	6864      	ldr	r4, [r4, #4]
 8017460:	e7cc      	b.n	80173fc <_malloc_r+0x2c>
 8017462:	1cc4      	adds	r4, r0, #3
 8017464:	f024 0403 	bic.w	r4, r4, #3
 8017468:	42a0      	cmp	r0, r4
 801746a:	d0e3      	beq.n	8017434 <_malloc_r+0x64>
 801746c:	1a21      	subs	r1, r4, r0
 801746e:	4630      	mov	r0, r6
 8017470:	f000 f8ac 	bl	80175cc <_sbrk_r>
 8017474:	3001      	adds	r0, #1
 8017476:	d1dd      	bne.n	8017434 <_malloc_r+0x64>
 8017478:	e7cf      	b.n	801741a <_malloc_r+0x4a>
 801747a:	bf00      	nop
 801747c:	2000048c 	.word	0x2000048c
 8017480:	20000490 	.word	0x20000490

08017484 <iprintf>:
 8017484:	b40f      	push	{r0, r1, r2, r3}
 8017486:	4b0a      	ldr	r3, [pc, #40]	; (80174b0 <iprintf+0x2c>)
 8017488:	b513      	push	{r0, r1, r4, lr}
 801748a:	681c      	ldr	r4, [r3, #0]
 801748c:	b124      	cbz	r4, 8017498 <iprintf+0x14>
 801748e:	69a3      	ldr	r3, [r4, #24]
 8017490:	b913      	cbnz	r3, 8017498 <iprintf+0x14>
 8017492:	4620      	mov	r0, r4
 8017494:	f7ff fe70 	bl	8017178 <__sinit>
 8017498:	ab05      	add	r3, sp, #20
 801749a:	9a04      	ldr	r2, [sp, #16]
 801749c:	68a1      	ldr	r1, [r4, #8]
 801749e:	9301      	str	r3, [sp, #4]
 80174a0:	4620      	mov	r0, r4
 80174a2:	f000 fa75 	bl	8017990 <_vfiprintf_r>
 80174a6:	b002      	add	sp, #8
 80174a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174ac:	b004      	add	sp, #16
 80174ae:	4770      	bx	lr
 80174b0:	2000001c 	.word	0x2000001c

080174b4 <putchar>:
 80174b4:	4b09      	ldr	r3, [pc, #36]	; (80174dc <putchar+0x28>)
 80174b6:	b513      	push	{r0, r1, r4, lr}
 80174b8:	681c      	ldr	r4, [r3, #0]
 80174ba:	4601      	mov	r1, r0
 80174bc:	b134      	cbz	r4, 80174cc <putchar+0x18>
 80174be:	69a3      	ldr	r3, [r4, #24]
 80174c0:	b923      	cbnz	r3, 80174cc <putchar+0x18>
 80174c2:	9001      	str	r0, [sp, #4]
 80174c4:	4620      	mov	r0, r4
 80174c6:	f7ff fe57 	bl	8017178 <__sinit>
 80174ca:	9901      	ldr	r1, [sp, #4]
 80174cc:	68a2      	ldr	r2, [r4, #8]
 80174ce:	4620      	mov	r0, r4
 80174d0:	b002      	add	sp, #8
 80174d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174d6:	f000 bd1f 	b.w	8017f18 <_putc_r>
 80174da:	bf00      	nop
 80174dc:	2000001c 	.word	0x2000001c

080174e0 <_puts_r>:
 80174e0:	b570      	push	{r4, r5, r6, lr}
 80174e2:	460e      	mov	r6, r1
 80174e4:	4605      	mov	r5, r0
 80174e6:	b118      	cbz	r0, 80174f0 <_puts_r+0x10>
 80174e8:	6983      	ldr	r3, [r0, #24]
 80174ea:	b90b      	cbnz	r3, 80174f0 <_puts_r+0x10>
 80174ec:	f7ff fe44 	bl	8017178 <__sinit>
 80174f0:	69ab      	ldr	r3, [r5, #24]
 80174f2:	68ac      	ldr	r4, [r5, #8]
 80174f4:	b913      	cbnz	r3, 80174fc <_puts_r+0x1c>
 80174f6:	4628      	mov	r0, r5
 80174f8:	f7ff fe3e 	bl	8017178 <__sinit>
 80174fc:	4b2c      	ldr	r3, [pc, #176]	; (80175b0 <_puts_r+0xd0>)
 80174fe:	429c      	cmp	r4, r3
 8017500:	d120      	bne.n	8017544 <_puts_r+0x64>
 8017502:	686c      	ldr	r4, [r5, #4]
 8017504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017506:	07db      	lsls	r3, r3, #31
 8017508:	d405      	bmi.n	8017516 <_puts_r+0x36>
 801750a:	89a3      	ldrh	r3, [r4, #12]
 801750c:	0598      	lsls	r0, r3, #22
 801750e:	d402      	bmi.n	8017516 <_puts_r+0x36>
 8017510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017512:	f7ff fef4 	bl	80172fe <__retarget_lock_acquire_recursive>
 8017516:	89a3      	ldrh	r3, [r4, #12]
 8017518:	0719      	lsls	r1, r3, #28
 801751a:	d51d      	bpl.n	8017558 <_puts_r+0x78>
 801751c:	6923      	ldr	r3, [r4, #16]
 801751e:	b1db      	cbz	r3, 8017558 <_puts_r+0x78>
 8017520:	3e01      	subs	r6, #1
 8017522:	68a3      	ldr	r3, [r4, #8]
 8017524:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017528:	3b01      	subs	r3, #1
 801752a:	60a3      	str	r3, [r4, #8]
 801752c:	bb39      	cbnz	r1, 801757e <_puts_r+0x9e>
 801752e:	2b00      	cmp	r3, #0
 8017530:	da38      	bge.n	80175a4 <_puts_r+0xc4>
 8017532:	4622      	mov	r2, r4
 8017534:	210a      	movs	r1, #10
 8017536:	4628      	mov	r0, r5
 8017538:	f000 f89c 	bl	8017674 <__swbuf_r>
 801753c:	3001      	adds	r0, #1
 801753e:	d011      	beq.n	8017564 <_puts_r+0x84>
 8017540:	250a      	movs	r5, #10
 8017542:	e011      	b.n	8017568 <_puts_r+0x88>
 8017544:	4b1b      	ldr	r3, [pc, #108]	; (80175b4 <_puts_r+0xd4>)
 8017546:	429c      	cmp	r4, r3
 8017548:	d101      	bne.n	801754e <_puts_r+0x6e>
 801754a:	68ac      	ldr	r4, [r5, #8]
 801754c:	e7da      	b.n	8017504 <_puts_r+0x24>
 801754e:	4b1a      	ldr	r3, [pc, #104]	; (80175b8 <_puts_r+0xd8>)
 8017550:	429c      	cmp	r4, r3
 8017552:	bf08      	it	eq
 8017554:	68ec      	ldreq	r4, [r5, #12]
 8017556:	e7d5      	b.n	8017504 <_puts_r+0x24>
 8017558:	4621      	mov	r1, r4
 801755a:	4628      	mov	r0, r5
 801755c:	f000 f8ee 	bl	801773c <__swsetup_r>
 8017560:	2800      	cmp	r0, #0
 8017562:	d0dd      	beq.n	8017520 <_puts_r+0x40>
 8017564:	f04f 35ff 	mov.w	r5, #4294967295
 8017568:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801756a:	07da      	lsls	r2, r3, #31
 801756c:	d405      	bmi.n	801757a <_puts_r+0x9a>
 801756e:	89a3      	ldrh	r3, [r4, #12]
 8017570:	059b      	lsls	r3, r3, #22
 8017572:	d402      	bmi.n	801757a <_puts_r+0x9a>
 8017574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017576:	f7ff fec3 	bl	8017300 <__retarget_lock_release_recursive>
 801757a:	4628      	mov	r0, r5
 801757c:	bd70      	pop	{r4, r5, r6, pc}
 801757e:	2b00      	cmp	r3, #0
 8017580:	da04      	bge.n	801758c <_puts_r+0xac>
 8017582:	69a2      	ldr	r2, [r4, #24]
 8017584:	429a      	cmp	r2, r3
 8017586:	dc06      	bgt.n	8017596 <_puts_r+0xb6>
 8017588:	290a      	cmp	r1, #10
 801758a:	d004      	beq.n	8017596 <_puts_r+0xb6>
 801758c:	6823      	ldr	r3, [r4, #0]
 801758e:	1c5a      	adds	r2, r3, #1
 8017590:	6022      	str	r2, [r4, #0]
 8017592:	7019      	strb	r1, [r3, #0]
 8017594:	e7c5      	b.n	8017522 <_puts_r+0x42>
 8017596:	4622      	mov	r2, r4
 8017598:	4628      	mov	r0, r5
 801759a:	f000 f86b 	bl	8017674 <__swbuf_r>
 801759e:	3001      	adds	r0, #1
 80175a0:	d1bf      	bne.n	8017522 <_puts_r+0x42>
 80175a2:	e7df      	b.n	8017564 <_puts_r+0x84>
 80175a4:	6823      	ldr	r3, [r4, #0]
 80175a6:	250a      	movs	r5, #10
 80175a8:	1c5a      	adds	r2, r3, #1
 80175aa:	6022      	str	r2, [r4, #0]
 80175ac:	701d      	strb	r5, [r3, #0]
 80175ae:	e7db      	b.n	8017568 <_puts_r+0x88>
 80175b0:	080181f8 	.word	0x080181f8
 80175b4:	08018218 	.word	0x08018218
 80175b8:	080181d8 	.word	0x080181d8

080175bc <puts>:
 80175bc:	4b02      	ldr	r3, [pc, #8]	; (80175c8 <puts+0xc>)
 80175be:	4601      	mov	r1, r0
 80175c0:	6818      	ldr	r0, [r3, #0]
 80175c2:	f7ff bf8d 	b.w	80174e0 <_puts_r>
 80175c6:	bf00      	nop
 80175c8:	2000001c 	.word	0x2000001c

080175cc <_sbrk_r>:
 80175cc:	b538      	push	{r3, r4, r5, lr}
 80175ce:	4d06      	ldr	r5, [pc, #24]	; (80175e8 <_sbrk_r+0x1c>)
 80175d0:	2300      	movs	r3, #0
 80175d2:	4604      	mov	r4, r0
 80175d4:	4608      	mov	r0, r1
 80175d6:	602b      	str	r3, [r5, #0]
 80175d8:	f7fa f94c 	bl	8011874 <_sbrk>
 80175dc:	1c43      	adds	r3, r0, #1
 80175de:	d102      	bne.n	80175e6 <_sbrk_r+0x1a>
 80175e0:	682b      	ldr	r3, [r5, #0]
 80175e2:	b103      	cbz	r3, 80175e6 <_sbrk_r+0x1a>
 80175e4:	6023      	str	r3, [r4, #0]
 80175e6:	bd38      	pop	{r3, r4, r5, pc}
 80175e8:	20000624 	.word	0x20000624

080175ec <__sread>:
 80175ec:	b510      	push	{r4, lr}
 80175ee:	460c      	mov	r4, r1
 80175f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175f4:	f000 fcd8 	bl	8017fa8 <_read_r>
 80175f8:	2800      	cmp	r0, #0
 80175fa:	bfab      	itete	ge
 80175fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80175fe:	89a3      	ldrhlt	r3, [r4, #12]
 8017600:	181b      	addge	r3, r3, r0
 8017602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017606:	bfac      	ite	ge
 8017608:	6563      	strge	r3, [r4, #84]	; 0x54
 801760a:	81a3      	strhlt	r3, [r4, #12]
 801760c:	bd10      	pop	{r4, pc}

0801760e <__swrite>:
 801760e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017612:	461f      	mov	r7, r3
 8017614:	898b      	ldrh	r3, [r1, #12]
 8017616:	05db      	lsls	r3, r3, #23
 8017618:	4605      	mov	r5, r0
 801761a:	460c      	mov	r4, r1
 801761c:	4616      	mov	r6, r2
 801761e:	d505      	bpl.n	801762c <__swrite+0x1e>
 8017620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017624:	2302      	movs	r3, #2
 8017626:	2200      	movs	r2, #0
 8017628:	f000 f906 	bl	8017838 <_lseek_r>
 801762c:	89a3      	ldrh	r3, [r4, #12]
 801762e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017636:	81a3      	strh	r3, [r4, #12]
 8017638:	4632      	mov	r2, r6
 801763a:	463b      	mov	r3, r7
 801763c:	4628      	mov	r0, r5
 801763e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017642:	f000 b869 	b.w	8017718 <_write_r>

08017646 <__sseek>:
 8017646:	b510      	push	{r4, lr}
 8017648:	460c      	mov	r4, r1
 801764a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801764e:	f000 f8f3 	bl	8017838 <_lseek_r>
 8017652:	1c43      	adds	r3, r0, #1
 8017654:	89a3      	ldrh	r3, [r4, #12]
 8017656:	bf15      	itete	ne
 8017658:	6560      	strne	r0, [r4, #84]	; 0x54
 801765a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801765e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017662:	81a3      	strheq	r3, [r4, #12]
 8017664:	bf18      	it	ne
 8017666:	81a3      	strhne	r3, [r4, #12]
 8017668:	bd10      	pop	{r4, pc}

0801766a <__sclose>:
 801766a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801766e:	f000 b8d3 	b.w	8017818 <_close_r>
	...

08017674 <__swbuf_r>:
 8017674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017676:	460e      	mov	r6, r1
 8017678:	4614      	mov	r4, r2
 801767a:	4605      	mov	r5, r0
 801767c:	b118      	cbz	r0, 8017686 <__swbuf_r+0x12>
 801767e:	6983      	ldr	r3, [r0, #24]
 8017680:	b90b      	cbnz	r3, 8017686 <__swbuf_r+0x12>
 8017682:	f7ff fd79 	bl	8017178 <__sinit>
 8017686:	4b21      	ldr	r3, [pc, #132]	; (801770c <__swbuf_r+0x98>)
 8017688:	429c      	cmp	r4, r3
 801768a:	d12b      	bne.n	80176e4 <__swbuf_r+0x70>
 801768c:	686c      	ldr	r4, [r5, #4]
 801768e:	69a3      	ldr	r3, [r4, #24]
 8017690:	60a3      	str	r3, [r4, #8]
 8017692:	89a3      	ldrh	r3, [r4, #12]
 8017694:	071a      	lsls	r2, r3, #28
 8017696:	d52f      	bpl.n	80176f8 <__swbuf_r+0x84>
 8017698:	6923      	ldr	r3, [r4, #16]
 801769a:	b36b      	cbz	r3, 80176f8 <__swbuf_r+0x84>
 801769c:	6923      	ldr	r3, [r4, #16]
 801769e:	6820      	ldr	r0, [r4, #0]
 80176a0:	1ac0      	subs	r0, r0, r3
 80176a2:	6963      	ldr	r3, [r4, #20]
 80176a4:	b2f6      	uxtb	r6, r6
 80176a6:	4283      	cmp	r3, r0
 80176a8:	4637      	mov	r7, r6
 80176aa:	dc04      	bgt.n	80176b6 <__swbuf_r+0x42>
 80176ac:	4621      	mov	r1, r4
 80176ae:	4628      	mov	r0, r5
 80176b0:	f7ff fcbc 	bl	801702c <_fflush_r>
 80176b4:	bb30      	cbnz	r0, 8017704 <__swbuf_r+0x90>
 80176b6:	68a3      	ldr	r3, [r4, #8]
 80176b8:	3b01      	subs	r3, #1
 80176ba:	60a3      	str	r3, [r4, #8]
 80176bc:	6823      	ldr	r3, [r4, #0]
 80176be:	1c5a      	adds	r2, r3, #1
 80176c0:	6022      	str	r2, [r4, #0]
 80176c2:	701e      	strb	r6, [r3, #0]
 80176c4:	6963      	ldr	r3, [r4, #20]
 80176c6:	3001      	adds	r0, #1
 80176c8:	4283      	cmp	r3, r0
 80176ca:	d004      	beq.n	80176d6 <__swbuf_r+0x62>
 80176cc:	89a3      	ldrh	r3, [r4, #12]
 80176ce:	07db      	lsls	r3, r3, #31
 80176d0:	d506      	bpl.n	80176e0 <__swbuf_r+0x6c>
 80176d2:	2e0a      	cmp	r6, #10
 80176d4:	d104      	bne.n	80176e0 <__swbuf_r+0x6c>
 80176d6:	4621      	mov	r1, r4
 80176d8:	4628      	mov	r0, r5
 80176da:	f7ff fca7 	bl	801702c <_fflush_r>
 80176de:	b988      	cbnz	r0, 8017704 <__swbuf_r+0x90>
 80176e0:	4638      	mov	r0, r7
 80176e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176e4:	4b0a      	ldr	r3, [pc, #40]	; (8017710 <__swbuf_r+0x9c>)
 80176e6:	429c      	cmp	r4, r3
 80176e8:	d101      	bne.n	80176ee <__swbuf_r+0x7a>
 80176ea:	68ac      	ldr	r4, [r5, #8]
 80176ec:	e7cf      	b.n	801768e <__swbuf_r+0x1a>
 80176ee:	4b09      	ldr	r3, [pc, #36]	; (8017714 <__swbuf_r+0xa0>)
 80176f0:	429c      	cmp	r4, r3
 80176f2:	bf08      	it	eq
 80176f4:	68ec      	ldreq	r4, [r5, #12]
 80176f6:	e7ca      	b.n	801768e <__swbuf_r+0x1a>
 80176f8:	4621      	mov	r1, r4
 80176fa:	4628      	mov	r0, r5
 80176fc:	f000 f81e 	bl	801773c <__swsetup_r>
 8017700:	2800      	cmp	r0, #0
 8017702:	d0cb      	beq.n	801769c <__swbuf_r+0x28>
 8017704:	f04f 37ff 	mov.w	r7, #4294967295
 8017708:	e7ea      	b.n	80176e0 <__swbuf_r+0x6c>
 801770a:	bf00      	nop
 801770c:	080181f8 	.word	0x080181f8
 8017710:	08018218 	.word	0x08018218
 8017714:	080181d8 	.word	0x080181d8

08017718 <_write_r>:
 8017718:	b538      	push	{r3, r4, r5, lr}
 801771a:	4d07      	ldr	r5, [pc, #28]	; (8017738 <_write_r+0x20>)
 801771c:	4604      	mov	r4, r0
 801771e:	4608      	mov	r0, r1
 8017720:	4611      	mov	r1, r2
 8017722:	2200      	movs	r2, #0
 8017724:	602a      	str	r2, [r5, #0]
 8017726:	461a      	mov	r2, r3
 8017728:	f7f9 fbc2 	bl	8010eb0 <_write>
 801772c:	1c43      	adds	r3, r0, #1
 801772e:	d102      	bne.n	8017736 <_write_r+0x1e>
 8017730:	682b      	ldr	r3, [r5, #0]
 8017732:	b103      	cbz	r3, 8017736 <_write_r+0x1e>
 8017734:	6023      	str	r3, [r4, #0]
 8017736:	bd38      	pop	{r3, r4, r5, pc}
 8017738:	20000624 	.word	0x20000624

0801773c <__swsetup_r>:
 801773c:	4b32      	ldr	r3, [pc, #200]	; (8017808 <__swsetup_r+0xcc>)
 801773e:	b570      	push	{r4, r5, r6, lr}
 8017740:	681d      	ldr	r5, [r3, #0]
 8017742:	4606      	mov	r6, r0
 8017744:	460c      	mov	r4, r1
 8017746:	b125      	cbz	r5, 8017752 <__swsetup_r+0x16>
 8017748:	69ab      	ldr	r3, [r5, #24]
 801774a:	b913      	cbnz	r3, 8017752 <__swsetup_r+0x16>
 801774c:	4628      	mov	r0, r5
 801774e:	f7ff fd13 	bl	8017178 <__sinit>
 8017752:	4b2e      	ldr	r3, [pc, #184]	; (801780c <__swsetup_r+0xd0>)
 8017754:	429c      	cmp	r4, r3
 8017756:	d10f      	bne.n	8017778 <__swsetup_r+0x3c>
 8017758:	686c      	ldr	r4, [r5, #4]
 801775a:	89a3      	ldrh	r3, [r4, #12]
 801775c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017760:	0719      	lsls	r1, r3, #28
 8017762:	d42c      	bmi.n	80177be <__swsetup_r+0x82>
 8017764:	06dd      	lsls	r5, r3, #27
 8017766:	d411      	bmi.n	801778c <__swsetup_r+0x50>
 8017768:	2309      	movs	r3, #9
 801776a:	6033      	str	r3, [r6, #0]
 801776c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017770:	81a3      	strh	r3, [r4, #12]
 8017772:	f04f 30ff 	mov.w	r0, #4294967295
 8017776:	e03e      	b.n	80177f6 <__swsetup_r+0xba>
 8017778:	4b25      	ldr	r3, [pc, #148]	; (8017810 <__swsetup_r+0xd4>)
 801777a:	429c      	cmp	r4, r3
 801777c:	d101      	bne.n	8017782 <__swsetup_r+0x46>
 801777e:	68ac      	ldr	r4, [r5, #8]
 8017780:	e7eb      	b.n	801775a <__swsetup_r+0x1e>
 8017782:	4b24      	ldr	r3, [pc, #144]	; (8017814 <__swsetup_r+0xd8>)
 8017784:	429c      	cmp	r4, r3
 8017786:	bf08      	it	eq
 8017788:	68ec      	ldreq	r4, [r5, #12]
 801778a:	e7e6      	b.n	801775a <__swsetup_r+0x1e>
 801778c:	0758      	lsls	r0, r3, #29
 801778e:	d512      	bpl.n	80177b6 <__swsetup_r+0x7a>
 8017790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017792:	b141      	cbz	r1, 80177a6 <__swsetup_r+0x6a>
 8017794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017798:	4299      	cmp	r1, r3
 801779a:	d002      	beq.n	80177a2 <__swsetup_r+0x66>
 801779c:	4630      	mov	r0, r6
 801779e:	f7ff fdc7 	bl	8017330 <_free_r>
 80177a2:	2300      	movs	r3, #0
 80177a4:	6363      	str	r3, [r4, #52]	; 0x34
 80177a6:	89a3      	ldrh	r3, [r4, #12]
 80177a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80177ac:	81a3      	strh	r3, [r4, #12]
 80177ae:	2300      	movs	r3, #0
 80177b0:	6063      	str	r3, [r4, #4]
 80177b2:	6923      	ldr	r3, [r4, #16]
 80177b4:	6023      	str	r3, [r4, #0]
 80177b6:	89a3      	ldrh	r3, [r4, #12]
 80177b8:	f043 0308 	orr.w	r3, r3, #8
 80177bc:	81a3      	strh	r3, [r4, #12]
 80177be:	6923      	ldr	r3, [r4, #16]
 80177c0:	b94b      	cbnz	r3, 80177d6 <__swsetup_r+0x9a>
 80177c2:	89a3      	ldrh	r3, [r4, #12]
 80177c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80177c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80177cc:	d003      	beq.n	80177d6 <__swsetup_r+0x9a>
 80177ce:	4621      	mov	r1, r4
 80177d0:	4630      	mov	r0, r6
 80177d2:	f000 f867 	bl	80178a4 <__smakebuf_r>
 80177d6:	89a0      	ldrh	r0, [r4, #12]
 80177d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80177dc:	f010 0301 	ands.w	r3, r0, #1
 80177e0:	d00a      	beq.n	80177f8 <__swsetup_r+0xbc>
 80177e2:	2300      	movs	r3, #0
 80177e4:	60a3      	str	r3, [r4, #8]
 80177e6:	6963      	ldr	r3, [r4, #20]
 80177e8:	425b      	negs	r3, r3
 80177ea:	61a3      	str	r3, [r4, #24]
 80177ec:	6923      	ldr	r3, [r4, #16]
 80177ee:	b943      	cbnz	r3, 8017802 <__swsetup_r+0xc6>
 80177f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80177f4:	d1ba      	bne.n	801776c <__swsetup_r+0x30>
 80177f6:	bd70      	pop	{r4, r5, r6, pc}
 80177f8:	0781      	lsls	r1, r0, #30
 80177fa:	bf58      	it	pl
 80177fc:	6963      	ldrpl	r3, [r4, #20]
 80177fe:	60a3      	str	r3, [r4, #8]
 8017800:	e7f4      	b.n	80177ec <__swsetup_r+0xb0>
 8017802:	2000      	movs	r0, #0
 8017804:	e7f7      	b.n	80177f6 <__swsetup_r+0xba>
 8017806:	bf00      	nop
 8017808:	2000001c 	.word	0x2000001c
 801780c:	080181f8 	.word	0x080181f8
 8017810:	08018218 	.word	0x08018218
 8017814:	080181d8 	.word	0x080181d8

08017818 <_close_r>:
 8017818:	b538      	push	{r3, r4, r5, lr}
 801781a:	4d06      	ldr	r5, [pc, #24]	; (8017834 <_close_r+0x1c>)
 801781c:	2300      	movs	r3, #0
 801781e:	4604      	mov	r4, r0
 8017820:	4608      	mov	r0, r1
 8017822:	602b      	str	r3, [r5, #0]
 8017824:	f7f9 fff1 	bl	801180a <_close>
 8017828:	1c43      	adds	r3, r0, #1
 801782a:	d102      	bne.n	8017832 <_close_r+0x1a>
 801782c:	682b      	ldr	r3, [r5, #0]
 801782e:	b103      	cbz	r3, 8017832 <_close_r+0x1a>
 8017830:	6023      	str	r3, [r4, #0]
 8017832:	bd38      	pop	{r3, r4, r5, pc}
 8017834:	20000624 	.word	0x20000624

08017838 <_lseek_r>:
 8017838:	b538      	push	{r3, r4, r5, lr}
 801783a:	4d07      	ldr	r5, [pc, #28]	; (8017858 <_lseek_r+0x20>)
 801783c:	4604      	mov	r4, r0
 801783e:	4608      	mov	r0, r1
 8017840:	4611      	mov	r1, r2
 8017842:	2200      	movs	r2, #0
 8017844:	602a      	str	r2, [r5, #0]
 8017846:	461a      	mov	r2, r3
 8017848:	f7fa f806 	bl	8011858 <_lseek>
 801784c:	1c43      	adds	r3, r0, #1
 801784e:	d102      	bne.n	8017856 <_lseek_r+0x1e>
 8017850:	682b      	ldr	r3, [r5, #0]
 8017852:	b103      	cbz	r3, 8017856 <_lseek_r+0x1e>
 8017854:	6023      	str	r3, [r4, #0]
 8017856:	bd38      	pop	{r3, r4, r5, pc}
 8017858:	20000624 	.word	0x20000624

0801785c <__swhatbuf_r>:
 801785c:	b570      	push	{r4, r5, r6, lr}
 801785e:	460e      	mov	r6, r1
 8017860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017864:	2900      	cmp	r1, #0
 8017866:	b096      	sub	sp, #88	; 0x58
 8017868:	4614      	mov	r4, r2
 801786a:	461d      	mov	r5, r3
 801786c:	da07      	bge.n	801787e <__swhatbuf_r+0x22>
 801786e:	2300      	movs	r3, #0
 8017870:	602b      	str	r3, [r5, #0]
 8017872:	89b3      	ldrh	r3, [r6, #12]
 8017874:	061a      	lsls	r2, r3, #24
 8017876:	d410      	bmi.n	801789a <__swhatbuf_r+0x3e>
 8017878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801787c:	e00e      	b.n	801789c <__swhatbuf_r+0x40>
 801787e:	466a      	mov	r2, sp
 8017880:	f000 fba4 	bl	8017fcc <_fstat_r>
 8017884:	2800      	cmp	r0, #0
 8017886:	dbf2      	blt.n	801786e <__swhatbuf_r+0x12>
 8017888:	9a01      	ldr	r2, [sp, #4]
 801788a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801788e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017892:	425a      	negs	r2, r3
 8017894:	415a      	adcs	r2, r3
 8017896:	602a      	str	r2, [r5, #0]
 8017898:	e7ee      	b.n	8017878 <__swhatbuf_r+0x1c>
 801789a:	2340      	movs	r3, #64	; 0x40
 801789c:	2000      	movs	r0, #0
 801789e:	6023      	str	r3, [r4, #0]
 80178a0:	b016      	add	sp, #88	; 0x58
 80178a2:	bd70      	pop	{r4, r5, r6, pc}

080178a4 <__smakebuf_r>:
 80178a4:	898b      	ldrh	r3, [r1, #12]
 80178a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178a8:	079d      	lsls	r5, r3, #30
 80178aa:	4606      	mov	r6, r0
 80178ac:	460c      	mov	r4, r1
 80178ae:	d507      	bpl.n	80178c0 <__smakebuf_r+0x1c>
 80178b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80178b4:	6023      	str	r3, [r4, #0]
 80178b6:	6123      	str	r3, [r4, #16]
 80178b8:	2301      	movs	r3, #1
 80178ba:	6163      	str	r3, [r4, #20]
 80178bc:	b002      	add	sp, #8
 80178be:	bd70      	pop	{r4, r5, r6, pc}
 80178c0:	ab01      	add	r3, sp, #4
 80178c2:	466a      	mov	r2, sp
 80178c4:	f7ff ffca 	bl	801785c <__swhatbuf_r>
 80178c8:	9900      	ldr	r1, [sp, #0]
 80178ca:	4605      	mov	r5, r0
 80178cc:	4630      	mov	r0, r6
 80178ce:	f7ff fd7f 	bl	80173d0 <_malloc_r>
 80178d2:	b948      	cbnz	r0, 80178e8 <__smakebuf_r+0x44>
 80178d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178d8:	059a      	lsls	r2, r3, #22
 80178da:	d4ef      	bmi.n	80178bc <__smakebuf_r+0x18>
 80178dc:	f023 0303 	bic.w	r3, r3, #3
 80178e0:	f043 0302 	orr.w	r3, r3, #2
 80178e4:	81a3      	strh	r3, [r4, #12]
 80178e6:	e7e3      	b.n	80178b0 <__smakebuf_r+0xc>
 80178e8:	4b0d      	ldr	r3, [pc, #52]	; (8017920 <__smakebuf_r+0x7c>)
 80178ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80178ec:	89a3      	ldrh	r3, [r4, #12]
 80178ee:	6020      	str	r0, [r4, #0]
 80178f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178f4:	81a3      	strh	r3, [r4, #12]
 80178f6:	9b00      	ldr	r3, [sp, #0]
 80178f8:	6163      	str	r3, [r4, #20]
 80178fa:	9b01      	ldr	r3, [sp, #4]
 80178fc:	6120      	str	r0, [r4, #16]
 80178fe:	b15b      	cbz	r3, 8017918 <__smakebuf_r+0x74>
 8017900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017904:	4630      	mov	r0, r6
 8017906:	f000 fb73 	bl	8017ff0 <_isatty_r>
 801790a:	b128      	cbz	r0, 8017918 <__smakebuf_r+0x74>
 801790c:	89a3      	ldrh	r3, [r4, #12]
 801790e:	f023 0303 	bic.w	r3, r3, #3
 8017912:	f043 0301 	orr.w	r3, r3, #1
 8017916:	81a3      	strh	r3, [r4, #12]
 8017918:	89a0      	ldrh	r0, [r4, #12]
 801791a:	4305      	orrs	r5, r0
 801791c:	81a5      	strh	r5, [r4, #12]
 801791e:	e7cd      	b.n	80178bc <__smakebuf_r+0x18>
 8017920:	08017111 	.word	0x08017111

08017924 <__malloc_lock>:
 8017924:	4801      	ldr	r0, [pc, #4]	; (801792c <__malloc_lock+0x8>)
 8017926:	f7ff bcea 	b.w	80172fe <__retarget_lock_acquire_recursive>
 801792a:	bf00      	nop
 801792c:	2000061c 	.word	0x2000061c

08017930 <__malloc_unlock>:
 8017930:	4801      	ldr	r0, [pc, #4]	; (8017938 <__malloc_unlock+0x8>)
 8017932:	f7ff bce5 	b.w	8017300 <__retarget_lock_release_recursive>
 8017936:	bf00      	nop
 8017938:	2000061c 	.word	0x2000061c

0801793c <__sfputc_r>:
 801793c:	6893      	ldr	r3, [r2, #8]
 801793e:	3b01      	subs	r3, #1
 8017940:	2b00      	cmp	r3, #0
 8017942:	b410      	push	{r4}
 8017944:	6093      	str	r3, [r2, #8]
 8017946:	da08      	bge.n	801795a <__sfputc_r+0x1e>
 8017948:	6994      	ldr	r4, [r2, #24]
 801794a:	42a3      	cmp	r3, r4
 801794c:	db01      	blt.n	8017952 <__sfputc_r+0x16>
 801794e:	290a      	cmp	r1, #10
 8017950:	d103      	bne.n	801795a <__sfputc_r+0x1e>
 8017952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017956:	f7ff be8d 	b.w	8017674 <__swbuf_r>
 801795a:	6813      	ldr	r3, [r2, #0]
 801795c:	1c58      	adds	r0, r3, #1
 801795e:	6010      	str	r0, [r2, #0]
 8017960:	7019      	strb	r1, [r3, #0]
 8017962:	4608      	mov	r0, r1
 8017964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017968:	4770      	bx	lr

0801796a <__sfputs_r>:
 801796a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801796c:	4606      	mov	r6, r0
 801796e:	460f      	mov	r7, r1
 8017970:	4614      	mov	r4, r2
 8017972:	18d5      	adds	r5, r2, r3
 8017974:	42ac      	cmp	r4, r5
 8017976:	d101      	bne.n	801797c <__sfputs_r+0x12>
 8017978:	2000      	movs	r0, #0
 801797a:	e007      	b.n	801798c <__sfputs_r+0x22>
 801797c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017980:	463a      	mov	r2, r7
 8017982:	4630      	mov	r0, r6
 8017984:	f7ff ffda 	bl	801793c <__sfputc_r>
 8017988:	1c43      	adds	r3, r0, #1
 801798a:	d1f3      	bne.n	8017974 <__sfputs_r+0xa>
 801798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017990 <_vfiprintf_r>:
 8017990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017994:	460d      	mov	r5, r1
 8017996:	b09d      	sub	sp, #116	; 0x74
 8017998:	4614      	mov	r4, r2
 801799a:	4698      	mov	r8, r3
 801799c:	4606      	mov	r6, r0
 801799e:	b118      	cbz	r0, 80179a8 <_vfiprintf_r+0x18>
 80179a0:	6983      	ldr	r3, [r0, #24]
 80179a2:	b90b      	cbnz	r3, 80179a8 <_vfiprintf_r+0x18>
 80179a4:	f7ff fbe8 	bl	8017178 <__sinit>
 80179a8:	4b89      	ldr	r3, [pc, #548]	; (8017bd0 <_vfiprintf_r+0x240>)
 80179aa:	429d      	cmp	r5, r3
 80179ac:	d11b      	bne.n	80179e6 <_vfiprintf_r+0x56>
 80179ae:	6875      	ldr	r5, [r6, #4]
 80179b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80179b2:	07d9      	lsls	r1, r3, #31
 80179b4:	d405      	bmi.n	80179c2 <_vfiprintf_r+0x32>
 80179b6:	89ab      	ldrh	r3, [r5, #12]
 80179b8:	059a      	lsls	r2, r3, #22
 80179ba:	d402      	bmi.n	80179c2 <_vfiprintf_r+0x32>
 80179bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80179be:	f7ff fc9e 	bl	80172fe <__retarget_lock_acquire_recursive>
 80179c2:	89ab      	ldrh	r3, [r5, #12]
 80179c4:	071b      	lsls	r3, r3, #28
 80179c6:	d501      	bpl.n	80179cc <_vfiprintf_r+0x3c>
 80179c8:	692b      	ldr	r3, [r5, #16]
 80179ca:	b9eb      	cbnz	r3, 8017a08 <_vfiprintf_r+0x78>
 80179cc:	4629      	mov	r1, r5
 80179ce:	4630      	mov	r0, r6
 80179d0:	f7ff feb4 	bl	801773c <__swsetup_r>
 80179d4:	b1c0      	cbz	r0, 8017a08 <_vfiprintf_r+0x78>
 80179d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80179d8:	07dc      	lsls	r4, r3, #31
 80179da:	d50e      	bpl.n	80179fa <_vfiprintf_r+0x6a>
 80179dc:	f04f 30ff 	mov.w	r0, #4294967295
 80179e0:	b01d      	add	sp, #116	; 0x74
 80179e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179e6:	4b7b      	ldr	r3, [pc, #492]	; (8017bd4 <_vfiprintf_r+0x244>)
 80179e8:	429d      	cmp	r5, r3
 80179ea:	d101      	bne.n	80179f0 <_vfiprintf_r+0x60>
 80179ec:	68b5      	ldr	r5, [r6, #8]
 80179ee:	e7df      	b.n	80179b0 <_vfiprintf_r+0x20>
 80179f0:	4b79      	ldr	r3, [pc, #484]	; (8017bd8 <_vfiprintf_r+0x248>)
 80179f2:	429d      	cmp	r5, r3
 80179f4:	bf08      	it	eq
 80179f6:	68f5      	ldreq	r5, [r6, #12]
 80179f8:	e7da      	b.n	80179b0 <_vfiprintf_r+0x20>
 80179fa:	89ab      	ldrh	r3, [r5, #12]
 80179fc:	0598      	lsls	r0, r3, #22
 80179fe:	d4ed      	bmi.n	80179dc <_vfiprintf_r+0x4c>
 8017a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a02:	f7ff fc7d 	bl	8017300 <__retarget_lock_release_recursive>
 8017a06:	e7e9      	b.n	80179dc <_vfiprintf_r+0x4c>
 8017a08:	2300      	movs	r3, #0
 8017a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8017a0c:	2320      	movs	r3, #32
 8017a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a16:	2330      	movs	r3, #48	; 0x30
 8017a18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017bdc <_vfiprintf_r+0x24c>
 8017a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a20:	f04f 0901 	mov.w	r9, #1
 8017a24:	4623      	mov	r3, r4
 8017a26:	469a      	mov	sl, r3
 8017a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a2c:	b10a      	cbz	r2, 8017a32 <_vfiprintf_r+0xa2>
 8017a2e:	2a25      	cmp	r2, #37	; 0x25
 8017a30:	d1f9      	bne.n	8017a26 <_vfiprintf_r+0x96>
 8017a32:	ebba 0b04 	subs.w	fp, sl, r4
 8017a36:	d00b      	beq.n	8017a50 <_vfiprintf_r+0xc0>
 8017a38:	465b      	mov	r3, fp
 8017a3a:	4622      	mov	r2, r4
 8017a3c:	4629      	mov	r1, r5
 8017a3e:	4630      	mov	r0, r6
 8017a40:	f7ff ff93 	bl	801796a <__sfputs_r>
 8017a44:	3001      	adds	r0, #1
 8017a46:	f000 80aa 	beq.w	8017b9e <_vfiprintf_r+0x20e>
 8017a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a4c:	445a      	add	r2, fp
 8017a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8017a50:	f89a 3000 	ldrb.w	r3, [sl]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	f000 80a2 	beq.w	8017b9e <_vfiprintf_r+0x20e>
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8017a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a64:	f10a 0a01 	add.w	sl, sl, #1
 8017a68:	9304      	str	r3, [sp, #16]
 8017a6a:	9307      	str	r3, [sp, #28]
 8017a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a70:	931a      	str	r3, [sp, #104]	; 0x68
 8017a72:	4654      	mov	r4, sl
 8017a74:	2205      	movs	r2, #5
 8017a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a7a:	4858      	ldr	r0, [pc, #352]	; (8017bdc <_vfiprintf_r+0x24c>)
 8017a7c:	f7f8 fbb0 	bl	80101e0 <memchr>
 8017a80:	9a04      	ldr	r2, [sp, #16]
 8017a82:	b9d8      	cbnz	r0, 8017abc <_vfiprintf_r+0x12c>
 8017a84:	06d1      	lsls	r1, r2, #27
 8017a86:	bf44      	itt	mi
 8017a88:	2320      	movmi	r3, #32
 8017a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a8e:	0713      	lsls	r3, r2, #28
 8017a90:	bf44      	itt	mi
 8017a92:	232b      	movmi	r3, #43	; 0x2b
 8017a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a98:	f89a 3000 	ldrb.w	r3, [sl]
 8017a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8017a9e:	d015      	beq.n	8017acc <_vfiprintf_r+0x13c>
 8017aa0:	9a07      	ldr	r2, [sp, #28]
 8017aa2:	4654      	mov	r4, sl
 8017aa4:	2000      	movs	r0, #0
 8017aa6:	f04f 0c0a 	mov.w	ip, #10
 8017aaa:	4621      	mov	r1, r4
 8017aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ab0:	3b30      	subs	r3, #48	; 0x30
 8017ab2:	2b09      	cmp	r3, #9
 8017ab4:	d94e      	bls.n	8017b54 <_vfiprintf_r+0x1c4>
 8017ab6:	b1b0      	cbz	r0, 8017ae6 <_vfiprintf_r+0x156>
 8017ab8:	9207      	str	r2, [sp, #28]
 8017aba:	e014      	b.n	8017ae6 <_vfiprintf_r+0x156>
 8017abc:	eba0 0308 	sub.w	r3, r0, r8
 8017ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8017ac4:	4313      	orrs	r3, r2
 8017ac6:	9304      	str	r3, [sp, #16]
 8017ac8:	46a2      	mov	sl, r4
 8017aca:	e7d2      	b.n	8017a72 <_vfiprintf_r+0xe2>
 8017acc:	9b03      	ldr	r3, [sp, #12]
 8017ace:	1d19      	adds	r1, r3, #4
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	9103      	str	r1, [sp, #12]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	bfbb      	ittet	lt
 8017ad8:	425b      	neglt	r3, r3
 8017ada:	f042 0202 	orrlt.w	r2, r2, #2
 8017ade:	9307      	strge	r3, [sp, #28]
 8017ae0:	9307      	strlt	r3, [sp, #28]
 8017ae2:	bfb8      	it	lt
 8017ae4:	9204      	strlt	r2, [sp, #16]
 8017ae6:	7823      	ldrb	r3, [r4, #0]
 8017ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8017aea:	d10c      	bne.n	8017b06 <_vfiprintf_r+0x176>
 8017aec:	7863      	ldrb	r3, [r4, #1]
 8017aee:	2b2a      	cmp	r3, #42	; 0x2a
 8017af0:	d135      	bne.n	8017b5e <_vfiprintf_r+0x1ce>
 8017af2:	9b03      	ldr	r3, [sp, #12]
 8017af4:	1d1a      	adds	r2, r3, #4
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	9203      	str	r2, [sp, #12]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	bfb8      	it	lt
 8017afe:	f04f 33ff 	movlt.w	r3, #4294967295
 8017b02:	3402      	adds	r4, #2
 8017b04:	9305      	str	r3, [sp, #20]
 8017b06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017bec <_vfiprintf_r+0x25c>
 8017b0a:	7821      	ldrb	r1, [r4, #0]
 8017b0c:	2203      	movs	r2, #3
 8017b0e:	4650      	mov	r0, sl
 8017b10:	f7f8 fb66 	bl	80101e0 <memchr>
 8017b14:	b140      	cbz	r0, 8017b28 <_vfiprintf_r+0x198>
 8017b16:	2340      	movs	r3, #64	; 0x40
 8017b18:	eba0 000a 	sub.w	r0, r0, sl
 8017b1c:	fa03 f000 	lsl.w	r0, r3, r0
 8017b20:	9b04      	ldr	r3, [sp, #16]
 8017b22:	4303      	orrs	r3, r0
 8017b24:	3401      	adds	r4, #1
 8017b26:	9304      	str	r3, [sp, #16]
 8017b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b2c:	482c      	ldr	r0, [pc, #176]	; (8017be0 <_vfiprintf_r+0x250>)
 8017b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b32:	2206      	movs	r2, #6
 8017b34:	f7f8 fb54 	bl	80101e0 <memchr>
 8017b38:	2800      	cmp	r0, #0
 8017b3a:	d03f      	beq.n	8017bbc <_vfiprintf_r+0x22c>
 8017b3c:	4b29      	ldr	r3, [pc, #164]	; (8017be4 <_vfiprintf_r+0x254>)
 8017b3e:	bb1b      	cbnz	r3, 8017b88 <_vfiprintf_r+0x1f8>
 8017b40:	9b03      	ldr	r3, [sp, #12]
 8017b42:	3307      	adds	r3, #7
 8017b44:	f023 0307 	bic.w	r3, r3, #7
 8017b48:	3308      	adds	r3, #8
 8017b4a:	9303      	str	r3, [sp, #12]
 8017b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b4e:	443b      	add	r3, r7
 8017b50:	9309      	str	r3, [sp, #36]	; 0x24
 8017b52:	e767      	b.n	8017a24 <_vfiprintf_r+0x94>
 8017b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b58:	460c      	mov	r4, r1
 8017b5a:	2001      	movs	r0, #1
 8017b5c:	e7a5      	b.n	8017aaa <_vfiprintf_r+0x11a>
 8017b5e:	2300      	movs	r3, #0
 8017b60:	3401      	adds	r4, #1
 8017b62:	9305      	str	r3, [sp, #20]
 8017b64:	4619      	mov	r1, r3
 8017b66:	f04f 0c0a 	mov.w	ip, #10
 8017b6a:	4620      	mov	r0, r4
 8017b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b70:	3a30      	subs	r2, #48	; 0x30
 8017b72:	2a09      	cmp	r2, #9
 8017b74:	d903      	bls.n	8017b7e <_vfiprintf_r+0x1ee>
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d0c5      	beq.n	8017b06 <_vfiprintf_r+0x176>
 8017b7a:	9105      	str	r1, [sp, #20]
 8017b7c:	e7c3      	b.n	8017b06 <_vfiprintf_r+0x176>
 8017b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b82:	4604      	mov	r4, r0
 8017b84:	2301      	movs	r3, #1
 8017b86:	e7f0      	b.n	8017b6a <_vfiprintf_r+0x1da>
 8017b88:	ab03      	add	r3, sp, #12
 8017b8a:	9300      	str	r3, [sp, #0]
 8017b8c:	462a      	mov	r2, r5
 8017b8e:	4b16      	ldr	r3, [pc, #88]	; (8017be8 <_vfiprintf_r+0x258>)
 8017b90:	a904      	add	r1, sp, #16
 8017b92:	4630      	mov	r0, r6
 8017b94:	f3af 8000 	nop.w
 8017b98:	4607      	mov	r7, r0
 8017b9a:	1c78      	adds	r0, r7, #1
 8017b9c:	d1d6      	bne.n	8017b4c <_vfiprintf_r+0x1bc>
 8017b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ba0:	07d9      	lsls	r1, r3, #31
 8017ba2:	d405      	bmi.n	8017bb0 <_vfiprintf_r+0x220>
 8017ba4:	89ab      	ldrh	r3, [r5, #12]
 8017ba6:	059a      	lsls	r2, r3, #22
 8017ba8:	d402      	bmi.n	8017bb0 <_vfiprintf_r+0x220>
 8017baa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017bac:	f7ff fba8 	bl	8017300 <__retarget_lock_release_recursive>
 8017bb0:	89ab      	ldrh	r3, [r5, #12]
 8017bb2:	065b      	lsls	r3, r3, #25
 8017bb4:	f53f af12 	bmi.w	80179dc <_vfiprintf_r+0x4c>
 8017bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017bba:	e711      	b.n	80179e0 <_vfiprintf_r+0x50>
 8017bbc:	ab03      	add	r3, sp, #12
 8017bbe:	9300      	str	r3, [sp, #0]
 8017bc0:	462a      	mov	r2, r5
 8017bc2:	4b09      	ldr	r3, [pc, #36]	; (8017be8 <_vfiprintf_r+0x258>)
 8017bc4:	a904      	add	r1, sp, #16
 8017bc6:	4630      	mov	r0, r6
 8017bc8:	f000 f880 	bl	8017ccc <_printf_i>
 8017bcc:	e7e4      	b.n	8017b98 <_vfiprintf_r+0x208>
 8017bce:	bf00      	nop
 8017bd0:	080181f8 	.word	0x080181f8
 8017bd4:	08018218 	.word	0x08018218
 8017bd8:	080181d8 	.word	0x080181d8
 8017bdc:	0801823c 	.word	0x0801823c
 8017be0:	08018246 	.word	0x08018246
 8017be4:	00000000 	.word	0x00000000
 8017be8:	0801796b 	.word	0x0801796b
 8017bec:	08018242 	.word	0x08018242

08017bf0 <_printf_common>:
 8017bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bf4:	4616      	mov	r6, r2
 8017bf6:	4699      	mov	r9, r3
 8017bf8:	688a      	ldr	r2, [r1, #8]
 8017bfa:	690b      	ldr	r3, [r1, #16]
 8017bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017c00:	4293      	cmp	r3, r2
 8017c02:	bfb8      	it	lt
 8017c04:	4613      	movlt	r3, r2
 8017c06:	6033      	str	r3, [r6, #0]
 8017c08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017c0c:	4607      	mov	r7, r0
 8017c0e:	460c      	mov	r4, r1
 8017c10:	b10a      	cbz	r2, 8017c16 <_printf_common+0x26>
 8017c12:	3301      	adds	r3, #1
 8017c14:	6033      	str	r3, [r6, #0]
 8017c16:	6823      	ldr	r3, [r4, #0]
 8017c18:	0699      	lsls	r1, r3, #26
 8017c1a:	bf42      	ittt	mi
 8017c1c:	6833      	ldrmi	r3, [r6, #0]
 8017c1e:	3302      	addmi	r3, #2
 8017c20:	6033      	strmi	r3, [r6, #0]
 8017c22:	6825      	ldr	r5, [r4, #0]
 8017c24:	f015 0506 	ands.w	r5, r5, #6
 8017c28:	d106      	bne.n	8017c38 <_printf_common+0x48>
 8017c2a:	f104 0a19 	add.w	sl, r4, #25
 8017c2e:	68e3      	ldr	r3, [r4, #12]
 8017c30:	6832      	ldr	r2, [r6, #0]
 8017c32:	1a9b      	subs	r3, r3, r2
 8017c34:	42ab      	cmp	r3, r5
 8017c36:	dc26      	bgt.n	8017c86 <_printf_common+0x96>
 8017c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017c3c:	1e13      	subs	r3, r2, #0
 8017c3e:	6822      	ldr	r2, [r4, #0]
 8017c40:	bf18      	it	ne
 8017c42:	2301      	movne	r3, #1
 8017c44:	0692      	lsls	r2, r2, #26
 8017c46:	d42b      	bmi.n	8017ca0 <_printf_common+0xb0>
 8017c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c4c:	4649      	mov	r1, r9
 8017c4e:	4638      	mov	r0, r7
 8017c50:	47c0      	blx	r8
 8017c52:	3001      	adds	r0, #1
 8017c54:	d01e      	beq.n	8017c94 <_printf_common+0xa4>
 8017c56:	6823      	ldr	r3, [r4, #0]
 8017c58:	68e5      	ldr	r5, [r4, #12]
 8017c5a:	6832      	ldr	r2, [r6, #0]
 8017c5c:	f003 0306 	and.w	r3, r3, #6
 8017c60:	2b04      	cmp	r3, #4
 8017c62:	bf08      	it	eq
 8017c64:	1aad      	subeq	r5, r5, r2
 8017c66:	68a3      	ldr	r3, [r4, #8]
 8017c68:	6922      	ldr	r2, [r4, #16]
 8017c6a:	bf0c      	ite	eq
 8017c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017c70:	2500      	movne	r5, #0
 8017c72:	4293      	cmp	r3, r2
 8017c74:	bfc4      	itt	gt
 8017c76:	1a9b      	subgt	r3, r3, r2
 8017c78:	18ed      	addgt	r5, r5, r3
 8017c7a:	2600      	movs	r6, #0
 8017c7c:	341a      	adds	r4, #26
 8017c7e:	42b5      	cmp	r5, r6
 8017c80:	d11a      	bne.n	8017cb8 <_printf_common+0xc8>
 8017c82:	2000      	movs	r0, #0
 8017c84:	e008      	b.n	8017c98 <_printf_common+0xa8>
 8017c86:	2301      	movs	r3, #1
 8017c88:	4652      	mov	r2, sl
 8017c8a:	4649      	mov	r1, r9
 8017c8c:	4638      	mov	r0, r7
 8017c8e:	47c0      	blx	r8
 8017c90:	3001      	adds	r0, #1
 8017c92:	d103      	bne.n	8017c9c <_printf_common+0xac>
 8017c94:	f04f 30ff 	mov.w	r0, #4294967295
 8017c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c9c:	3501      	adds	r5, #1
 8017c9e:	e7c6      	b.n	8017c2e <_printf_common+0x3e>
 8017ca0:	18e1      	adds	r1, r4, r3
 8017ca2:	1c5a      	adds	r2, r3, #1
 8017ca4:	2030      	movs	r0, #48	; 0x30
 8017ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017caa:	4422      	add	r2, r4
 8017cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017cb4:	3302      	adds	r3, #2
 8017cb6:	e7c7      	b.n	8017c48 <_printf_common+0x58>
 8017cb8:	2301      	movs	r3, #1
 8017cba:	4622      	mov	r2, r4
 8017cbc:	4649      	mov	r1, r9
 8017cbe:	4638      	mov	r0, r7
 8017cc0:	47c0      	blx	r8
 8017cc2:	3001      	adds	r0, #1
 8017cc4:	d0e6      	beq.n	8017c94 <_printf_common+0xa4>
 8017cc6:	3601      	adds	r6, #1
 8017cc8:	e7d9      	b.n	8017c7e <_printf_common+0x8e>
	...

08017ccc <_printf_i>:
 8017ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017cd0:	460c      	mov	r4, r1
 8017cd2:	4691      	mov	r9, r2
 8017cd4:	7e27      	ldrb	r7, [r4, #24]
 8017cd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017cd8:	2f78      	cmp	r7, #120	; 0x78
 8017cda:	4680      	mov	r8, r0
 8017cdc:	469a      	mov	sl, r3
 8017cde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ce2:	d807      	bhi.n	8017cf4 <_printf_i+0x28>
 8017ce4:	2f62      	cmp	r7, #98	; 0x62
 8017ce6:	d80a      	bhi.n	8017cfe <_printf_i+0x32>
 8017ce8:	2f00      	cmp	r7, #0
 8017cea:	f000 80d8 	beq.w	8017e9e <_printf_i+0x1d2>
 8017cee:	2f58      	cmp	r7, #88	; 0x58
 8017cf0:	f000 80a3 	beq.w	8017e3a <_printf_i+0x16e>
 8017cf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017cfc:	e03a      	b.n	8017d74 <_printf_i+0xa8>
 8017cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017d02:	2b15      	cmp	r3, #21
 8017d04:	d8f6      	bhi.n	8017cf4 <_printf_i+0x28>
 8017d06:	a001      	add	r0, pc, #4	; (adr r0, 8017d0c <_printf_i+0x40>)
 8017d08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017d0c:	08017d65 	.word	0x08017d65
 8017d10:	08017d79 	.word	0x08017d79
 8017d14:	08017cf5 	.word	0x08017cf5
 8017d18:	08017cf5 	.word	0x08017cf5
 8017d1c:	08017cf5 	.word	0x08017cf5
 8017d20:	08017cf5 	.word	0x08017cf5
 8017d24:	08017d79 	.word	0x08017d79
 8017d28:	08017cf5 	.word	0x08017cf5
 8017d2c:	08017cf5 	.word	0x08017cf5
 8017d30:	08017cf5 	.word	0x08017cf5
 8017d34:	08017cf5 	.word	0x08017cf5
 8017d38:	08017e85 	.word	0x08017e85
 8017d3c:	08017da9 	.word	0x08017da9
 8017d40:	08017e67 	.word	0x08017e67
 8017d44:	08017cf5 	.word	0x08017cf5
 8017d48:	08017cf5 	.word	0x08017cf5
 8017d4c:	08017ea7 	.word	0x08017ea7
 8017d50:	08017cf5 	.word	0x08017cf5
 8017d54:	08017da9 	.word	0x08017da9
 8017d58:	08017cf5 	.word	0x08017cf5
 8017d5c:	08017cf5 	.word	0x08017cf5
 8017d60:	08017e6f 	.word	0x08017e6f
 8017d64:	680b      	ldr	r3, [r1, #0]
 8017d66:	1d1a      	adds	r2, r3, #4
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	600a      	str	r2, [r1, #0]
 8017d6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017d74:	2301      	movs	r3, #1
 8017d76:	e0a3      	b.n	8017ec0 <_printf_i+0x1f4>
 8017d78:	6825      	ldr	r5, [r4, #0]
 8017d7a:	6808      	ldr	r0, [r1, #0]
 8017d7c:	062e      	lsls	r6, r5, #24
 8017d7e:	f100 0304 	add.w	r3, r0, #4
 8017d82:	d50a      	bpl.n	8017d9a <_printf_i+0xce>
 8017d84:	6805      	ldr	r5, [r0, #0]
 8017d86:	600b      	str	r3, [r1, #0]
 8017d88:	2d00      	cmp	r5, #0
 8017d8a:	da03      	bge.n	8017d94 <_printf_i+0xc8>
 8017d8c:	232d      	movs	r3, #45	; 0x2d
 8017d8e:	426d      	negs	r5, r5
 8017d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d94:	485e      	ldr	r0, [pc, #376]	; (8017f10 <_printf_i+0x244>)
 8017d96:	230a      	movs	r3, #10
 8017d98:	e019      	b.n	8017dce <_printf_i+0x102>
 8017d9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017d9e:	6805      	ldr	r5, [r0, #0]
 8017da0:	600b      	str	r3, [r1, #0]
 8017da2:	bf18      	it	ne
 8017da4:	b22d      	sxthne	r5, r5
 8017da6:	e7ef      	b.n	8017d88 <_printf_i+0xbc>
 8017da8:	680b      	ldr	r3, [r1, #0]
 8017daa:	6825      	ldr	r5, [r4, #0]
 8017dac:	1d18      	adds	r0, r3, #4
 8017dae:	6008      	str	r0, [r1, #0]
 8017db0:	0628      	lsls	r0, r5, #24
 8017db2:	d501      	bpl.n	8017db8 <_printf_i+0xec>
 8017db4:	681d      	ldr	r5, [r3, #0]
 8017db6:	e002      	b.n	8017dbe <_printf_i+0xf2>
 8017db8:	0669      	lsls	r1, r5, #25
 8017dba:	d5fb      	bpl.n	8017db4 <_printf_i+0xe8>
 8017dbc:	881d      	ldrh	r5, [r3, #0]
 8017dbe:	4854      	ldr	r0, [pc, #336]	; (8017f10 <_printf_i+0x244>)
 8017dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8017dc2:	bf0c      	ite	eq
 8017dc4:	2308      	moveq	r3, #8
 8017dc6:	230a      	movne	r3, #10
 8017dc8:	2100      	movs	r1, #0
 8017dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017dce:	6866      	ldr	r6, [r4, #4]
 8017dd0:	60a6      	str	r6, [r4, #8]
 8017dd2:	2e00      	cmp	r6, #0
 8017dd4:	bfa2      	ittt	ge
 8017dd6:	6821      	ldrge	r1, [r4, #0]
 8017dd8:	f021 0104 	bicge.w	r1, r1, #4
 8017ddc:	6021      	strge	r1, [r4, #0]
 8017dde:	b90d      	cbnz	r5, 8017de4 <_printf_i+0x118>
 8017de0:	2e00      	cmp	r6, #0
 8017de2:	d04d      	beq.n	8017e80 <_printf_i+0x1b4>
 8017de4:	4616      	mov	r6, r2
 8017de6:	fbb5 f1f3 	udiv	r1, r5, r3
 8017dea:	fb03 5711 	mls	r7, r3, r1, r5
 8017dee:	5dc7      	ldrb	r7, [r0, r7]
 8017df0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017df4:	462f      	mov	r7, r5
 8017df6:	42bb      	cmp	r3, r7
 8017df8:	460d      	mov	r5, r1
 8017dfa:	d9f4      	bls.n	8017de6 <_printf_i+0x11a>
 8017dfc:	2b08      	cmp	r3, #8
 8017dfe:	d10b      	bne.n	8017e18 <_printf_i+0x14c>
 8017e00:	6823      	ldr	r3, [r4, #0]
 8017e02:	07df      	lsls	r7, r3, #31
 8017e04:	d508      	bpl.n	8017e18 <_printf_i+0x14c>
 8017e06:	6923      	ldr	r3, [r4, #16]
 8017e08:	6861      	ldr	r1, [r4, #4]
 8017e0a:	4299      	cmp	r1, r3
 8017e0c:	bfde      	ittt	le
 8017e0e:	2330      	movle	r3, #48	; 0x30
 8017e10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017e14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017e18:	1b92      	subs	r2, r2, r6
 8017e1a:	6122      	str	r2, [r4, #16]
 8017e1c:	f8cd a000 	str.w	sl, [sp]
 8017e20:	464b      	mov	r3, r9
 8017e22:	aa03      	add	r2, sp, #12
 8017e24:	4621      	mov	r1, r4
 8017e26:	4640      	mov	r0, r8
 8017e28:	f7ff fee2 	bl	8017bf0 <_printf_common>
 8017e2c:	3001      	adds	r0, #1
 8017e2e:	d14c      	bne.n	8017eca <_printf_i+0x1fe>
 8017e30:	f04f 30ff 	mov.w	r0, #4294967295
 8017e34:	b004      	add	sp, #16
 8017e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e3a:	4835      	ldr	r0, [pc, #212]	; (8017f10 <_printf_i+0x244>)
 8017e3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017e40:	6823      	ldr	r3, [r4, #0]
 8017e42:	680e      	ldr	r6, [r1, #0]
 8017e44:	061f      	lsls	r7, r3, #24
 8017e46:	f856 5b04 	ldr.w	r5, [r6], #4
 8017e4a:	600e      	str	r6, [r1, #0]
 8017e4c:	d514      	bpl.n	8017e78 <_printf_i+0x1ac>
 8017e4e:	07d9      	lsls	r1, r3, #31
 8017e50:	bf44      	itt	mi
 8017e52:	f043 0320 	orrmi.w	r3, r3, #32
 8017e56:	6023      	strmi	r3, [r4, #0]
 8017e58:	b91d      	cbnz	r5, 8017e62 <_printf_i+0x196>
 8017e5a:	6823      	ldr	r3, [r4, #0]
 8017e5c:	f023 0320 	bic.w	r3, r3, #32
 8017e60:	6023      	str	r3, [r4, #0]
 8017e62:	2310      	movs	r3, #16
 8017e64:	e7b0      	b.n	8017dc8 <_printf_i+0xfc>
 8017e66:	6823      	ldr	r3, [r4, #0]
 8017e68:	f043 0320 	orr.w	r3, r3, #32
 8017e6c:	6023      	str	r3, [r4, #0]
 8017e6e:	2378      	movs	r3, #120	; 0x78
 8017e70:	4828      	ldr	r0, [pc, #160]	; (8017f14 <_printf_i+0x248>)
 8017e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017e76:	e7e3      	b.n	8017e40 <_printf_i+0x174>
 8017e78:	065e      	lsls	r6, r3, #25
 8017e7a:	bf48      	it	mi
 8017e7c:	b2ad      	uxthmi	r5, r5
 8017e7e:	e7e6      	b.n	8017e4e <_printf_i+0x182>
 8017e80:	4616      	mov	r6, r2
 8017e82:	e7bb      	b.n	8017dfc <_printf_i+0x130>
 8017e84:	680b      	ldr	r3, [r1, #0]
 8017e86:	6826      	ldr	r6, [r4, #0]
 8017e88:	6960      	ldr	r0, [r4, #20]
 8017e8a:	1d1d      	adds	r5, r3, #4
 8017e8c:	600d      	str	r5, [r1, #0]
 8017e8e:	0635      	lsls	r5, r6, #24
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	d501      	bpl.n	8017e98 <_printf_i+0x1cc>
 8017e94:	6018      	str	r0, [r3, #0]
 8017e96:	e002      	b.n	8017e9e <_printf_i+0x1d2>
 8017e98:	0671      	lsls	r1, r6, #25
 8017e9a:	d5fb      	bpl.n	8017e94 <_printf_i+0x1c8>
 8017e9c:	8018      	strh	r0, [r3, #0]
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	6123      	str	r3, [r4, #16]
 8017ea2:	4616      	mov	r6, r2
 8017ea4:	e7ba      	b.n	8017e1c <_printf_i+0x150>
 8017ea6:	680b      	ldr	r3, [r1, #0]
 8017ea8:	1d1a      	adds	r2, r3, #4
 8017eaa:	600a      	str	r2, [r1, #0]
 8017eac:	681e      	ldr	r6, [r3, #0]
 8017eae:	6862      	ldr	r2, [r4, #4]
 8017eb0:	2100      	movs	r1, #0
 8017eb2:	4630      	mov	r0, r6
 8017eb4:	f7f8 f994 	bl	80101e0 <memchr>
 8017eb8:	b108      	cbz	r0, 8017ebe <_printf_i+0x1f2>
 8017eba:	1b80      	subs	r0, r0, r6
 8017ebc:	6060      	str	r0, [r4, #4]
 8017ebe:	6863      	ldr	r3, [r4, #4]
 8017ec0:	6123      	str	r3, [r4, #16]
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ec8:	e7a8      	b.n	8017e1c <_printf_i+0x150>
 8017eca:	6923      	ldr	r3, [r4, #16]
 8017ecc:	4632      	mov	r2, r6
 8017ece:	4649      	mov	r1, r9
 8017ed0:	4640      	mov	r0, r8
 8017ed2:	47d0      	blx	sl
 8017ed4:	3001      	adds	r0, #1
 8017ed6:	d0ab      	beq.n	8017e30 <_printf_i+0x164>
 8017ed8:	6823      	ldr	r3, [r4, #0]
 8017eda:	079b      	lsls	r3, r3, #30
 8017edc:	d413      	bmi.n	8017f06 <_printf_i+0x23a>
 8017ede:	68e0      	ldr	r0, [r4, #12]
 8017ee0:	9b03      	ldr	r3, [sp, #12]
 8017ee2:	4298      	cmp	r0, r3
 8017ee4:	bfb8      	it	lt
 8017ee6:	4618      	movlt	r0, r3
 8017ee8:	e7a4      	b.n	8017e34 <_printf_i+0x168>
 8017eea:	2301      	movs	r3, #1
 8017eec:	4632      	mov	r2, r6
 8017eee:	4649      	mov	r1, r9
 8017ef0:	4640      	mov	r0, r8
 8017ef2:	47d0      	blx	sl
 8017ef4:	3001      	adds	r0, #1
 8017ef6:	d09b      	beq.n	8017e30 <_printf_i+0x164>
 8017ef8:	3501      	adds	r5, #1
 8017efa:	68e3      	ldr	r3, [r4, #12]
 8017efc:	9903      	ldr	r1, [sp, #12]
 8017efe:	1a5b      	subs	r3, r3, r1
 8017f00:	42ab      	cmp	r3, r5
 8017f02:	dcf2      	bgt.n	8017eea <_printf_i+0x21e>
 8017f04:	e7eb      	b.n	8017ede <_printf_i+0x212>
 8017f06:	2500      	movs	r5, #0
 8017f08:	f104 0619 	add.w	r6, r4, #25
 8017f0c:	e7f5      	b.n	8017efa <_printf_i+0x22e>
 8017f0e:	bf00      	nop
 8017f10:	0801824d 	.word	0x0801824d
 8017f14:	0801825e 	.word	0x0801825e

08017f18 <_putc_r>:
 8017f18:	b570      	push	{r4, r5, r6, lr}
 8017f1a:	460d      	mov	r5, r1
 8017f1c:	4614      	mov	r4, r2
 8017f1e:	4606      	mov	r6, r0
 8017f20:	b118      	cbz	r0, 8017f2a <_putc_r+0x12>
 8017f22:	6983      	ldr	r3, [r0, #24]
 8017f24:	b90b      	cbnz	r3, 8017f2a <_putc_r+0x12>
 8017f26:	f7ff f927 	bl	8017178 <__sinit>
 8017f2a:	4b1c      	ldr	r3, [pc, #112]	; (8017f9c <_putc_r+0x84>)
 8017f2c:	429c      	cmp	r4, r3
 8017f2e:	d124      	bne.n	8017f7a <_putc_r+0x62>
 8017f30:	6874      	ldr	r4, [r6, #4]
 8017f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f34:	07d8      	lsls	r0, r3, #31
 8017f36:	d405      	bmi.n	8017f44 <_putc_r+0x2c>
 8017f38:	89a3      	ldrh	r3, [r4, #12]
 8017f3a:	0599      	lsls	r1, r3, #22
 8017f3c:	d402      	bmi.n	8017f44 <_putc_r+0x2c>
 8017f3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f40:	f7ff f9dd 	bl	80172fe <__retarget_lock_acquire_recursive>
 8017f44:	68a3      	ldr	r3, [r4, #8]
 8017f46:	3b01      	subs	r3, #1
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	60a3      	str	r3, [r4, #8]
 8017f4c:	da05      	bge.n	8017f5a <_putc_r+0x42>
 8017f4e:	69a2      	ldr	r2, [r4, #24]
 8017f50:	4293      	cmp	r3, r2
 8017f52:	db1c      	blt.n	8017f8e <_putc_r+0x76>
 8017f54:	b2eb      	uxtb	r3, r5
 8017f56:	2b0a      	cmp	r3, #10
 8017f58:	d019      	beq.n	8017f8e <_putc_r+0x76>
 8017f5a:	6823      	ldr	r3, [r4, #0]
 8017f5c:	1c5a      	adds	r2, r3, #1
 8017f5e:	6022      	str	r2, [r4, #0]
 8017f60:	701d      	strb	r5, [r3, #0]
 8017f62:	b2ed      	uxtb	r5, r5
 8017f64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f66:	07da      	lsls	r2, r3, #31
 8017f68:	d405      	bmi.n	8017f76 <_putc_r+0x5e>
 8017f6a:	89a3      	ldrh	r3, [r4, #12]
 8017f6c:	059b      	lsls	r3, r3, #22
 8017f6e:	d402      	bmi.n	8017f76 <_putc_r+0x5e>
 8017f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f72:	f7ff f9c5 	bl	8017300 <__retarget_lock_release_recursive>
 8017f76:	4628      	mov	r0, r5
 8017f78:	bd70      	pop	{r4, r5, r6, pc}
 8017f7a:	4b09      	ldr	r3, [pc, #36]	; (8017fa0 <_putc_r+0x88>)
 8017f7c:	429c      	cmp	r4, r3
 8017f7e:	d101      	bne.n	8017f84 <_putc_r+0x6c>
 8017f80:	68b4      	ldr	r4, [r6, #8]
 8017f82:	e7d6      	b.n	8017f32 <_putc_r+0x1a>
 8017f84:	4b07      	ldr	r3, [pc, #28]	; (8017fa4 <_putc_r+0x8c>)
 8017f86:	429c      	cmp	r4, r3
 8017f88:	bf08      	it	eq
 8017f8a:	68f4      	ldreq	r4, [r6, #12]
 8017f8c:	e7d1      	b.n	8017f32 <_putc_r+0x1a>
 8017f8e:	4629      	mov	r1, r5
 8017f90:	4622      	mov	r2, r4
 8017f92:	4630      	mov	r0, r6
 8017f94:	f7ff fb6e 	bl	8017674 <__swbuf_r>
 8017f98:	4605      	mov	r5, r0
 8017f9a:	e7e3      	b.n	8017f64 <_putc_r+0x4c>
 8017f9c:	080181f8 	.word	0x080181f8
 8017fa0:	08018218 	.word	0x08018218
 8017fa4:	080181d8 	.word	0x080181d8

08017fa8 <_read_r>:
 8017fa8:	b538      	push	{r3, r4, r5, lr}
 8017faa:	4d07      	ldr	r5, [pc, #28]	; (8017fc8 <_read_r+0x20>)
 8017fac:	4604      	mov	r4, r0
 8017fae:	4608      	mov	r0, r1
 8017fb0:	4611      	mov	r1, r2
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	602a      	str	r2, [r5, #0]
 8017fb6:	461a      	mov	r2, r3
 8017fb8:	f7f9 fc0a 	bl	80117d0 <_read>
 8017fbc:	1c43      	adds	r3, r0, #1
 8017fbe:	d102      	bne.n	8017fc6 <_read_r+0x1e>
 8017fc0:	682b      	ldr	r3, [r5, #0]
 8017fc2:	b103      	cbz	r3, 8017fc6 <_read_r+0x1e>
 8017fc4:	6023      	str	r3, [r4, #0]
 8017fc6:	bd38      	pop	{r3, r4, r5, pc}
 8017fc8:	20000624 	.word	0x20000624

08017fcc <_fstat_r>:
 8017fcc:	b538      	push	{r3, r4, r5, lr}
 8017fce:	4d07      	ldr	r5, [pc, #28]	; (8017fec <_fstat_r+0x20>)
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	4604      	mov	r4, r0
 8017fd4:	4608      	mov	r0, r1
 8017fd6:	4611      	mov	r1, r2
 8017fd8:	602b      	str	r3, [r5, #0]
 8017fda:	f7f9 fc22 	bl	8011822 <_fstat>
 8017fde:	1c43      	adds	r3, r0, #1
 8017fe0:	d102      	bne.n	8017fe8 <_fstat_r+0x1c>
 8017fe2:	682b      	ldr	r3, [r5, #0]
 8017fe4:	b103      	cbz	r3, 8017fe8 <_fstat_r+0x1c>
 8017fe6:	6023      	str	r3, [r4, #0]
 8017fe8:	bd38      	pop	{r3, r4, r5, pc}
 8017fea:	bf00      	nop
 8017fec:	20000624 	.word	0x20000624

08017ff0 <_isatty_r>:
 8017ff0:	b538      	push	{r3, r4, r5, lr}
 8017ff2:	4d06      	ldr	r5, [pc, #24]	; (801800c <_isatty_r+0x1c>)
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	4604      	mov	r4, r0
 8017ff8:	4608      	mov	r0, r1
 8017ffa:	602b      	str	r3, [r5, #0]
 8017ffc:	f7f9 fc21 	bl	8011842 <_isatty>
 8018000:	1c43      	adds	r3, r0, #1
 8018002:	d102      	bne.n	801800a <_isatty_r+0x1a>
 8018004:	682b      	ldr	r3, [r5, #0]
 8018006:	b103      	cbz	r3, 801800a <_isatty_r+0x1a>
 8018008:	6023      	str	r3, [r4, #0]
 801800a:	bd38      	pop	{r3, r4, r5, pc}
 801800c:	20000624 	.word	0x20000624

08018010 <_init>:
 8018010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018012:	bf00      	nop
 8018014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018016:	bc08      	pop	{r3}
 8018018:	469e      	mov	lr, r3
 801801a:	4770      	bx	lr

0801801c <_fini>:
 801801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801801e:	bf00      	nop
 8018020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018022:	bc08      	pop	{r3}
 8018024:	469e      	mov	lr, r3
 8018026:	4770      	bx	lr
