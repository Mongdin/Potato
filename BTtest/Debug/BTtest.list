
BTtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad8  08010190  08010190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08019c68  08019c68  00019c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f90  08019f90  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08019f90  08019f90  00019f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f98  08019f98  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f98  08019f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f9c  08019f9c  00019f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08019fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200000a0  0801a040  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  0801a040  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029a2c  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ddd  00000000  00000000  00049afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  0004e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  000501c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e704  00000000  00000000  000518e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e949  00000000  00000000  0007ffec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010aecc  00000000  00000000  0009e935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a9801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007188  00000000  00000000  001a9854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010190 <__do_global_dtors_aux>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4c05      	ldr	r4, [pc, #20]	; (80101a8 <__do_global_dtors_aux+0x18>)
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	b933      	cbnz	r3, 80101a6 <__do_global_dtors_aux+0x16>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__do_global_dtors_aux+0x1c>)
 801019a:	b113      	cbz	r3, 80101a2 <__do_global_dtors_aux+0x12>
 801019c:	4804      	ldr	r0, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x20>)
 801019e:	f3af 8000 	nop.w
 80101a2:	2301      	movs	r3, #1
 80101a4:	7023      	strb	r3, [r4, #0]
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	200000a0 	.word	0x200000a0
 80101ac:	00000000 	.word	0x00000000
 80101b0:	08019c50 	.word	0x08019c50

080101b4 <frame_dummy>:
 80101b4:	b508      	push	{r3, lr}
 80101b6:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <frame_dummy+0x10>)
 80101b8:	b11b      	cbz	r3, 80101c2 <frame_dummy+0xe>
 80101ba:	4903      	ldr	r1, [pc, #12]	; (80101c8 <frame_dummy+0x14>)
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <frame_dummy+0x18>)
 80101be:	f3af 8000 	nop.w
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	00000000 	.word	0x00000000
 80101c8:	200000a4 	.word	0x200000a4
 80101cc:	08019c50 	.word	0x08019c50

080101d0 <strlen>:
 80101d0:	4603      	mov	r3, r0
 80101d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	d1fb      	bne.n	80101d2 <strlen+0x2>
 80101da:	1a18      	subs	r0, r3, r0
 80101dc:	3801      	subs	r0, #1
 80101de:	4770      	bx	lr

080101e0 <memchr>:
 80101e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80101e4:	2a10      	cmp	r2, #16
 80101e6:	db2b      	blt.n	8010240 <memchr+0x60>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	d008      	beq.n	8010200 <memchr+0x20>
 80101ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101f2:	3a01      	subs	r2, #1
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d02d      	beq.n	8010254 <memchr+0x74>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	b342      	cbz	r2, 8010250 <memchr+0x70>
 80101fe:	d1f6      	bne.n	80101ee <memchr+0xe>
 8010200:	b4f0      	push	{r4, r5, r6, r7}
 8010202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801020a:	f022 0407 	bic.w	r4, r2, #7
 801020e:	f07f 0700 	mvns.w	r7, #0
 8010212:	2300      	movs	r3, #0
 8010214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010218:	3c08      	subs	r4, #8
 801021a:	ea85 0501 	eor.w	r5, r5, r1
 801021e:	ea86 0601 	eor.w	r6, r6, r1
 8010222:	fa85 f547 	uadd8	r5, r5, r7
 8010226:	faa3 f587 	sel	r5, r3, r7
 801022a:	fa86 f647 	uadd8	r6, r6, r7
 801022e:	faa5 f687 	sel	r6, r5, r7
 8010232:	b98e      	cbnz	r6, 8010258 <memchr+0x78>
 8010234:	d1ee      	bne.n	8010214 <memchr+0x34>
 8010236:	bcf0      	pop	{r4, r5, r6, r7}
 8010238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801023c:	f002 0207 	and.w	r2, r2, #7
 8010240:	b132      	cbz	r2, 8010250 <memchr+0x70>
 8010242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010246:	3a01      	subs	r2, #1
 8010248:	ea83 0301 	eor.w	r3, r3, r1
 801024c:	b113      	cbz	r3, 8010254 <memchr+0x74>
 801024e:	d1f8      	bne.n	8010242 <memchr+0x62>
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	3801      	subs	r0, #1
 8010256:	4770      	bx	lr
 8010258:	2d00      	cmp	r5, #0
 801025a:	bf06      	itte	eq
 801025c:	4635      	moveq	r5, r6
 801025e:	3803      	subeq	r0, #3
 8010260:	3807      	subne	r0, #7
 8010262:	f015 0f01 	tst.w	r5, #1
 8010266:	d107      	bne.n	8010278 <memchr+0x98>
 8010268:	3001      	adds	r0, #1
 801026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801026e:	bf02      	ittt	eq
 8010270:	3001      	addeq	r0, #1
 8010272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010276:	3001      	addeq	r0, #1
 8010278:	bcf0      	pop	{r4, r5, r6, r7}
 801027a:	3801      	subs	r0, #1
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <__aeabi_dmul>:
 8010280:	b570      	push	{r4, r5, r6, lr}
 8010282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801028e:	bf1d      	ittte	ne
 8010290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010294:	ea94 0f0c 	teqne	r4, ip
 8010298:	ea95 0f0c 	teqne	r5, ip
 801029c:	f000 f8de 	bleq	801045c <__aeabi_dmul+0x1dc>
 80102a0:	442c      	add	r4, r5
 80102a2:	ea81 0603 	eor.w	r6, r1, r3
 80102a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80102aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80102ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80102b2:	bf18      	it	ne
 80102b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80102b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80102bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102c0:	d038      	beq.n	8010334 <__aeabi_dmul+0xb4>
 80102c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80102c6:	f04f 0500 	mov.w	r5, #0
 80102ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80102ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80102d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80102d6:	f04f 0600 	mov.w	r6, #0
 80102da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80102de:	f09c 0f00 	teq	ip, #0
 80102e2:	bf18      	it	ne
 80102e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80102e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80102ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80102f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80102f4:	d204      	bcs.n	8010300 <__aeabi_dmul+0x80>
 80102f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80102fa:	416d      	adcs	r5, r5
 80102fc:	eb46 0606 	adc.w	r6, r6, r6
 8010300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8010304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 801030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8010314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010318:	bf88      	it	hi
 801031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801031e:	d81e      	bhi.n	801035e <__aeabi_dmul+0xde>
 8010320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8010324:	bf08      	it	eq
 8010326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 801032a:	f150 0000 	adcs.w	r0, r0, #0
 801032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010332:	bd70      	pop	{r4, r5, r6, pc}
 8010334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010338:	ea46 0101 	orr.w	r1, r6, r1
 801033c:	ea40 0002 	orr.w	r0, r0, r2
 8010340:	ea81 0103 	eor.w	r1, r1, r3
 8010344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010348:	bfc2      	ittt	gt
 801034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 801034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010352:	bd70      	popgt	{r4, r5, r6, pc}
 8010354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010358:	f04f 0e00 	mov.w	lr, #0
 801035c:	3c01      	subs	r4, #1
 801035e:	f300 80ab 	bgt.w	80104b8 <__aeabi_dmul+0x238>
 8010362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8010366:	bfde      	ittt	le
 8010368:	2000      	movle	r0, #0
 801036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 801036e:	bd70      	pople	{r4, r5, r6, pc}
 8010370:	f1c4 0400 	rsb	r4, r4, #0
 8010374:	3c20      	subs	r4, #32
 8010376:	da35      	bge.n	80103e4 <__aeabi_dmul+0x164>
 8010378:	340c      	adds	r4, #12
 801037a:	dc1b      	bgt.n	80103b4 <__aeabi_dmul+0x134>
 801037c:	f104 0414 	add.w	r4, r4, #20
 8010380:	f1c4 0520 	rsb	r5, r4, #32
 8010384:	fa00 f305 	lsl.w	r3, r0, r5
 8010388:	fa20 f004 	lsr.w	r0, r0, r4
 801038c:	fa01 f205 	lsl.w	r2, r1, r5
 8010390:	ea40 0002 	orr.w	r0, r0, r2
 8010394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80103a0:	fa21 f604 	lsr.w	r6, r1, r4
 80103a4:	eb42 0106 	adc.w	r1, r2, r6
 80103a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80103ac:	bf08      	it	eq
 80103ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80103b2:	bd70      	pop	{r4, r5, r6, pc}
 80103b4:	f1c4 040c 	rsb	r4, r4, #12
 80103b8:	f1c4 0520 	rsb	r5, r4, #32
 80103bc:	fa00 f304 	lsl.w	r3, r0, r4
 80103c0:	fa20 f005 	lsr.w	r0, r0, r5
 80103c4:	fa01 f204 	lsl.w	r2, r1, r4
 80103c8:	ea40 0002 	orr.w	r0, r0, r2
 80103cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80103d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80103d4:	f141 0100 	adc.w	r1, r1, #0
 80103d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80103dc:	bf08      	it	eq
 80103de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80103e2:	bd70      	pop	{r4, r5, r6, pc}
 80103e4:	f1c4 0520 	rsb	r5, r4, #32
 80103e8:	fa00 f205 	lsl.w	r2, r0, r5
 80103ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80103f0:	fa20 f304 	lsr.w	r3, r0, r4
 80103f4:	fa01 f205 	lsl.w	r2, r1, r5
 80103f8:	ea43 0302 	orr.w	r3, r3, r2
 80103fc:	fa21 f004 	lsr.w	r0, r1, r4
 8010400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010404:	fa21 f204 	lsr.w	r2, r1, r4
 8010408:	ea20 0002 	bic.w	r0, r0, r2
 801040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010414:	bf08      	it	eq
 8010416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801041a:	bd70      	pop	{r4, r5, r6, pc}
 801041c:	f094 0f00 	teq	r4, #0
 8010420:	d10f      	bne.n	8010442 <__aeabi_dmul+0x1c2>
 8010422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8010426:	0040      	lsls	r0, r0, #1
 8010428:	eb41 0101 	adc.w	r1, r1, r1
 801042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010430:	bf08      	it	eq
 8010432:	3c01      	subeq	r4, #1
 8010434:	d0f7      	beq.n	8010426 <__aeabi_dmul+0x1a6>
 8010436:	ea41 0106 	orr.w	r1, r1, r6
 801043a:	f095 0f00 	teq	r5, #0
 801043e:	bf18      	it	ne
 8010440:	4770      	bxne	lr
 8010442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8010446:	0052      	lsls	r2, r2, #1
 8010448:	eb43 0303 	adc.w	r3, r3, r3
 801044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010450:	bf08      	it	eq
 8010452:	3d01      	subeq	r5, #1
 8010454:	d0f7      	beq.n	8010446 <__aeabi_dmul+0x1c6>
 8010456:	ea43 0306 	orr.w	r3, r3, r6
 801045a:	4770      	bx	lr
 801045c:	ea94 0f0c 	teq	r4, ip
 8010460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010464:	bf18      	it	ne
 8010466:	ea95 0f0c 	teqne	r5, ip
 801046a:	d00c      	beq.n	8010486 <__aeabi_dmul+0x206>
 801046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010470:	bf18      	it	ne
 8010472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010476:	d1d1      	bne.n	801041c <__aeabi_dmul+0x19c>
 8010478:	ea81 0103 	eor.w	r1, r1, r3
 801047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010480:	f04f 0000 	mov.w	r0, #0
 8010484:	bd70      	pop	{r4, r5, r6, pc}
 8010486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801048a:	bf06      	itte	eq
 801048c:	4610      	moveq	r0, r2
 801048e:	4619      	moveq	r1, r3
 8010490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010494:	d019      	beq.n	80104ca <__aeabi_dmul+0x24a>
 8010496:	ea94 0f0c 	teq	r4, ip
 801049a:	d102      	bne.n	80104a2 <__aeabi_dmul+0x222>
 801049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80104a0:	d113      	bne.n	80104ca <__aeabi_dmul+0x24a>
 80104a2:	ea95 0f0c 	teq	r5, ip
 80104a6:	d105      	bne.n	80104b4 <__aeabi_dmul+0x234>
 80104a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80104ac:	bf1c      	itt	ne
 80104ae:	4610      	movne	r0, r2
 80104b0:	4619      	movne	r1, r3
 80104b2:	d10a      	bne.n	80104ca <__aeabi_dmul+0x24a>
 80104b4:	ea81 0103 	eor.w	r1, r1, r3
 80104b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80104bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80104c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104c4:	f04f 0000 	mov.w	r0, #0
 80104c8:	bd70      	pop	{r4, r5, r6, pc}
 80104ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80104ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80104d2:	bd70      	pop	{r4, r5, r6, pc}

080104d4 <__aeabi_drsub>:
 80104d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80104d8:	e002      	b.n	80104e0 <__adddf3>
 80104da:	bf00      	nop

080104dc <__aeabi_dsub>:
 80104dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080104e0 <__adddf3>:
 80104e0:	b530      	push	{r4, r5, lr}
 80104e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80104e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80104ea:	ea94 0f05 	teq	r4, r5
 80104ee:	bf08      	it	eq
 80104f0:	ea90 0f02 	teqeq	r0, r2
 80104f4:	bf1f      	itttt	ne
 80104f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80104fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80104fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8010502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010506:	f000 80e2 	beq.w	80106ce <__adddf3+0x1ee>
 801050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8010512:	bfb8      	it	lt
 8010514:	426d      	neglt	r5, r5
 8010516:	dd0c      	ble.n	8010532 <__adddf3+0x52>
 8010518:	442c      	add	r4, r5
 801051a:	ea80 0202 	eor.w	r2, r0, r2
 801051e:	ea81 0303 	eor.w	r3, r1, r3
 8010522:	ea82 0000 	eor.w	r0, r2, r0
 8010526:	ea83 0101 	eor.w	r1, r3, r1
 801052a:	ea80 0202 	eor.w	r2, r0, r2
 801052e:	ea81 0303 	eor.w	r3, r1, r3
 8010532:	2d36      	cmp	r5, #54	; 0x36
 8010534:	bf88      	it	hi
 8010536:	bd30      	pophi	{r4, r5, pc}
 8010538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010548:	d002      	beq.n	8010550 <__adddf3+0x70>
 801054a:	4240      	negs	r0, r0
 801054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 801055c:	d002      	beq.n	8010564 <__adddf3+0x84>
 801055e:	4252      	negs	r2, r2
 8010560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010564:	ea94 0f05 	teq	r4, r5
 8010568:	f000 80a7 	beq.w	80106ba <__adddf3+0x1da>
 801056c:	f1a4 0401 	sub.w	r4, r4, #1
 8010570:	f1d5 0e20 	rsbs	lr, r5, #32
 8010574:	db0d      	blt.n	8010592 <__adddf3+0xb2>
 8010576:	fa02 fc0e 	lsl.w	ip, r2, lr
 801057a:	fa22 f205 	lsr.w	r2, r2, r5
 801057e:	1880      	adds	r0, r0, r2
 8010580:	f141 0100 	adc.w	r1, r1, #0
 8010584:	fa03 f20e 	lsl.w	r2, r3, lr
 8010588:	1880      	adds	r0, r0, r2
 801058a:	fa43 f305 	asr.w	r3, r3, r5
 801058e:	4159      	adcs	r1, r3
 8010590:	e00e      	b.n	80105b0 <__adddf3+0xd0>
 8010592:	f1a5 0520 	sub.w	r5, r5, #32
 8010596:	f10e 0e20 	add.w	lr, lr, #32
 801059a:	2a01      	cmp	r2, #1
 801059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80105a0:	bf28      	it	cs
 80105a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80105a6:	fa43 f305 	asr.w	r3, r3, r5
 80105aa:	18c0      	adds	r0, r0, r3
 80105ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80105b4:	d507      	bpl.n	80105c6 <__adddf3+0xe6>
 80105b6:	f04f 0e00 	mov.w	lr, #0
 80105ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80105be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80105c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80105c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80105ca:	d31b      	bcc.n	8010604 <__adddf3+0x124>
 80105cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80105d0:	d30c      	bcc.n	80105ec <__adddf3+0x10c>
 80105d2:	0849      	lsrs	r1, r1, #1
 80105d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80105d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80105dc:	f104 0401 	add.w	r4, r4, #1
 80105e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80105e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80105e8:	f080 809a 	bcs.w	8010720 <__adddf3+0x240>
 80105ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80105f0:	bf08      	it	eq
 80105f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80105f6:	f150 0000 	adcs.w	r0, r0, #0
 80105fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80105fe:	ea41 0105 	orr.w	r1, r1, r5
 8010602:	bd30      	pop	{r4, r5, pc}
 8010604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010608:	4140      	adcs	r0, r0
 801060a:	eb41 0101 	adc.w	r1, r1, r1
 801060e:	3c01      	subs	r4, #1
 8010610:	bf28      	it	cs
 8010612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8010616:	d2e9      	bcs.n	80105ec <__adddf3+0x10c>
 8010618:	f091 0f00 	teq	r1, #0
 801061c:	bf04      	itt	eq
 801061e:	4601      	moveq	r1, r0
 8010620:	2000      	moveq	r0, #0
 8010622:	fab1 f381 	clz	r3, r1
 8010626:	bf08      	it	eq
 8010628:	3320      	addeq	r3, #32
 801062a:	f1a3 030b 	sub.w	r3, r3, #11
 801062e:	f1b3 0220 	subs.w	r2, r3, #32
 8010632:	da0c      	bge.n	801064e <__adddf3+0x16e>
 8010634:	320c      	adds	r2, #12
 8010636:	dd08      	ble.n	801064a <__adddf3+0x16a>
 8010638:	f102 0c14 	add.w	ip, r2, #20
 801063c:	f1c2 020c 	rsb	r2, r2, #12
 8010640:	fa01 f00c 	lsl.w	r0, r1, ip
 8010644:	fa21 f102 	lsr.w	r1, r1, r2
 8010648:	e00c      	b.n	8010664 <__adddf3+0x184>
 801064a:	f102 0214 	add.w	r2, r2, #20
 801064e:	bfd8      	it	le
 8010650:	f1c2 0c20 	rsble	ip, r2, #32
 8010654:	fa01 f102 	lsl.w	r1, r1, r2
 8010658:	fa20 fc0c 	lsr.w	ip, r0, ip
 801065c:	bfdc      	itt	le
 801065e:	ea41 010c 	orrle.w	r1, r1, ip
 8010662:	4090      	lslle	r0, r2
 8010664:	1ae4      	subs	r4, r4, r3
 8010666:	bfa2      	ittt	ge
 8010668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 801066c:	4329      	orrge	r1, r5
 801066e:	bd30      	popge	{r4, r5, pc}
 8010670:	ea6f 0404 	mvn.w	r4, r4
 8010674:	3c1f      	subs	r4, #31
 8010676:	da1c      	bge.n	80106b2 <__adddf3+0x1d2>
 8010678:	340c      	adds	r4, #12
 801067a:	dc0e      	bgt.n	801069a <__adddf3+0x1ba>
 801067c:	f104 0414 	add.w	r4, r4, #20
 8010680:	f1c4 0220 	rsb	r2, r4, #32
 8010684:	fa20 f004 	lsr.w	r0, r0, r4
 8010688:	fa01 f302 	lsl.w	r3, r1, r2
 801068c:	ea40 0003 	orr.w	r0, r0, r3
 8010690:	fa21 f304 	lsr.w	r3, r1, r4
 8010694:	ea45 0103 	orr.w	r1, r5, r3
 8010698:	bd30      	pop	{r4, r5, pc}
 801069a:	f1c4 040c 	rsb	r4, r4, #12
 801069e:	f1c4 0220 	rsb	r2, r4, #32
 80106a2:	fa20 f002 	lsr.w	r0, r0, r2
 80106a6:	fa01 f304 	lsl.w	r3, r1, r4
 80106aa:	ea40 0003 	orr.w	r0, r0, r3
 80106ae:	4629      	mov	r1, r5
 80106b0:	bd30      	pop	{r4, r5, pc}
 80106b2:	fa21 f004 	lsr.w	r0, r1, r4
 80106b6:	4629      	mov	r1, r5
 80106b8:	bd30      	pop	{r4, r5, pc}
 80106ba:	f094 0f00 	teq	r4, #0
 80106be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80106c2:	bf06      	itte	eq
 80106c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80106c8:	3401      	addeq	r4, #1
 80106ca:	3d01      	subne	r5, #1
 80106cc:	e74e      	b.n	801056c <__adddf3+0x8c>
 80106ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80106d2:	bf18      	it	ne
 80106d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80106d8:	d029      	beq.n	801072e <__adddf3+0x24e>
 80106da:	ea94 0f05 	teq	r4, r5
 80106de:	bf08      	it	eq
 80106e0:	ea90 0f02 	teqeq	r0, r2
 80106e4:	d005      	beq.n	80106f2 <__adddf3+0x212>
 80106e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80106ea:	bf04      	itt	eq
 80106ec:	4619      	moveq	r1, r3
 80106ee:	4610      	moveq	r0, r2
 80106f0:	bd30      	pop	{r4, r5, pc}
 80106f2:	ea91 0f03 	teq	r1, r3
 80106f6:	bf1e      	ittt	ne
 80106f8:	2100      	movne	r1, #0
 80106fa:	2000      	movne	r0, #0
 80106fc:	bd30      	popne	{r4, r5, pc}
 80106fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8010702:	d105      	bne.n	8010710 <__adddf3+0x230>
 8010704:	0040      	lsls	r0, r0, #1
 8010706:	4149      	adcs	r1, r1
 8010708:	bf28      	it	cs
 801070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801070e:	bd30      	pop	{r4, r5, pc}
 8010710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010714:	bf3c      	itt	cc
 8010716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 801071a:	bd30      	popcc	{r4, r5, pc}
 801071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010728:	f04f 0000 	mov.w	r0, #0
 801072c:	bd30      	pop	{r4, r5, pc}
 801072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010732:	bf1a      	itte	ne
 8010734:	4619      	movne	r1, r3
 8010736:	4610      	movne	r0, r2
 8010738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 801073c:	bf1c      	itt	ne
 801073e:	460b      	movne	r3, r1
 8010740:	4602      	movne	r2, r0
 8010742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010746:	bf06      	itte	eq
 8010748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 801074c:	ea91 0f03 	teqeq	r1, r3
 8010750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010754:	bd30      	pop	{r4, r5, pc}
 8010756:	bf00      	nop

08010758 <__aeabi_ui2d>:
 8010758:	f090 0f00 	teq	r0, #0
 801075c:	bf04      	itt	eq
 801075e:	2100      	moveq	r1, #0
 8010760:	4770      	bxeq	lr
 8010762:	b530      	push	{r4, r5, lr}
 8010764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801076c:	f04f 0500 	mov.w	r5, #0
 8010770:	f04f 0100 	mov.w	r1, #0
 8010774:	e750      	b.n	8010618 <__adddf3+0x138>
 8010776:	bf00      	nop

08010778 <__aeabi_i2d>:
 8010778:	f090 0f00 	teq	r0, #0
 801077c:	bf04      	itt	eq
 801077e:	2100      	moveq	r1, #0
 8010780:	4770      	bxeq	lr
 8010782:	b530      	push	{r4, r5, lr}
 8010784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010790:	bf48      	it	mi
 8010792:	4240      	negmi	r0, r0
 8010794:	f04f 0100 	mov.w	r1, #0
 8010798:	e73e      	b.n	8010618 <__adddf3+0x138>
 801079a:	bf00      	nop

0801079c <__aeabi_f2d>:
 801079c:	0042      	lsls	r2, r0, #1
 801079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80107a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80107a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80107aa:	bf1f      	itttt	ne
 80107ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80107b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80107b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80107b8:	4770      	bxne	lr
 80107ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80107be:	bf08      	it	eq
 80107c0:	4770      	bxeq	lr
 80107c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80107c6:	bf04      	itt	eq
 80107c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80107cc:	4770      	bxeq	lr
 80107ce:	b530      	push	{r4, r5, lr}
 80107d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80107d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80107d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80107dc:	e71c      	b.n	8010618 <__adddf3+0x138>
 80107de:	bf00      	nop

080107e0 <__aeabi_ul2d>:
 80107e0:	ea50 0201 	orrs.w	r2, r0, r1
 80107e4:	bf08      	it	eq
 80107e6:	4770      	bxeq	lr
 80107e8:	b530      	push	{r4, r5, lr}
 80107ea:	f04f 0500 	mov.w	r5, #0
 80107ee:	e00a      	b.n	8010806 <__aeabi_l2d+0x16>

080107f0 <__aeabi_l2d>:
 80107f0:	ea50 0201 	orrs.w	r2, r0, r1
 80107f4:	bf08      	it	eq
 80107f6:	4770      	bxeq	lr
 80107f8:	b530      	push	{r4, r5, lr}
 80107fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80107fe:	d502      	bpl.n	8010806 <__aeabi_l2d+0x16>
 8010800:	4240      	negs	r0, r0
 8010802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8010812:	f43f aed8 	beq.w	80105c6 <__adddf3+0xe6>
 8010816:	f04f 0203 	mov.w	r2, #3
 801081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801081e:	bf18      	it	ne
 8010820:	3203      	addne	r2, #3
 8010822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010826:	bf18      	it	ne
 8010828:	3203      	addne	r2, #3
 801082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801082e:	f1c2 0320 	rsb	r3, r2, #32
 8010832:	fa00 fc03 	lsl.w	ip, r0, r3
 8010836:	fa20 f002 	lsr.w	r0, r0, r2
 801083a:	fa01 fe03 	lsl.w	lr, r1, r3
 801083e:	ea40 000e 	orr.w	r0, r0, lr
 8010842:	fa21 f102 	lsr.w	r1, r1, r2
 8010846:	4414      	add	r4, r2
 8010848:	e6bd      	b.n	80105c6 <__adddf3+0xe6>
 801084a:	bf00      	nop

0801084c <__aeabi_d2iz>:
 801084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010854:	d215      	bcs.n	8010882 <__aeabi_d2iz+0x36>
 8010856:	d511      	bpl.n	801087c <__aeabi_d2iz+0x30>
 8010858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010860:	d912      	bls.n	8010888 <__aeabi_d2iz+0x3c>
 8010862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010872:	fa23 f002 	lsr.w	r0, r3, r2
 8010876:	bf18      	it	ne
 8010878:	4240      	negne	r0, r0
 801087a:	4770      	bx	lr
 801087c:	f04f 0000 	mov.w	r0, #0
 8010880:	4770      	bx	lr
 8010882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010886:	d105      	bne.n	8010894 <__aeabi_d2iz+0x48>
 8010888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 801088c:	bf08      	it	eq
 801088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010892:	4770      	bx	lr
 8010894:	f04f 0000 	mov.w	r0, #0
 8010898:	4770      	bx	lr
 801089a:	bf00      	nop

0801089c <__aeabi_uldivmod>:
 801089c:	b953      	cbnz	r3, 80108b4 <__aeabi_uldivmod+0x18>
 801089e:	b94a      	cbnz	r2, 80108b4 <__aeabi_uldivmod+0x18>
 80108a0:	2900      	cmp	r1, #0
 80108a2:	bf08      	it	eq
 80108a4:	2800      	cmpeq	r0, #0
 80108a6:	bf1c      	itt	ne
 80108a8:	f04f 31ff 	movne.w	r1, #4294967295
 80108ac:	f04f 30ff 	movne.w	r0, #4294967295
 80108b0:	f000 b96e 	b.w	8010b90 <__aeabi_idiv0>
 80108b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80108b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80108bc:	f000 f806 	bl	80108cc <__udivmoddi4>
 80108c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80108c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80108c8:	b004      	add	sp, #16
 80108ca:	4770      	bx	lr

080108cc <__udivmoddi4>:
 80108cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108d0:	9d08      	ldr	r5, [sp, #32]
 80108d2:	4604      	mov	r4, r0
 80108d4:	468c      	mov	ip, r1
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	f040 8083 	bne.w	80109e2 <__udivmoddi4+0x116>
 80108dc:	428a      	cmp	r2, r1
 80108de:	4617      	mov	r7, r2
 80108e0:	d947      	bls.n	8010972 <__udivmoddi4+0xa6>
 80108e2:	fab2 f282 	clz	r2, r2
 80108e6:	b142      	cbz	r2, 80108fa <__udivmoddi4+0x2e>
 80108e8:	f1c2 0020 	rsb	r0, r2, #32
 80108ec:	fa24 f000 	lsr.w	r0, r4, r0
 80108f0:	4091      	lsls	r1, r2
 80108f2:	4097      	lsls	r7, r2
 80108f4:	ea40 0c01 	orr.w	ip, r0, r1
 80108f8:	4094      	lsls	r4, r2
 80108fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80108fe:	0c23      	lsrs	r3, r4, #16
 8010900:	fbbc f6f8 	udiv	r6, ip, r8
 8010904:	fa1f fe87 	uxth.w	lr, r7
 8010908:	fb08 c116 	mls	r1, r8, r6, ip
 801090c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010910:	fb06 f10e 	mul.w	r1, r6, lr
 8010914:	4299      	cmp	r1, r3
 8010916:	d909      	bls.n	801092c <__udivmoddi4+0x60>
 8010918:	18fb      	adds	r3, r7, r3
 801091a:	f106 30ff 	add.w	r0, r6, #4294967295
 801091e:	f080 8119 	bcs.w	8010b54 <__udivmoddi4+0x288>
 8010922:	4299      	cmp	r1, r3
 8010924:	f240 8116 	bls.w	8010b54 <__udivmoddi4+0x288>
 8010928:	3e02      	subs	r6, #2
 801092a:	443b      	add	r3, r7
 801092c:	1a5b      	subs	r3, r3, r1
 801092e:	b2a4      	uxth	r4, r4
 8010930:	fbb3 f0f8 	udiv	r0, r3, r8
 8010934:	fb08 3310 	mls	r3, r8, r0, r3
 8010938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8010940:	45a6      	cmp	lr, r4
 8010942:	d909      	bls.n	8010958 <__udivmoddi4+0x8c>
 8010944:	193c      	adds	r4, r7, r4
 8010946:	f100 33ff 	add.w	r3, r0, #4294967295
 801094a:	f080 8105 	bcs.w	8010b58 <__udivmoddi4+0x28c>
 801094e:	45a6      	cmp	lr, r4
 8010950:	f240 8102 	bls.w	8010b58 <__udivmoddi4+0x28c>
 8010954:	3802      	subs	r0, #2
 8010956:	443c      	add	r4, r7
 8010958:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801095c:	eba4 040e 	sub.w	r4, r4, lr
 8010960:	2600      	movs	r6, #0
 8010962:	b11d      	cbz	r5, 801096c <__udivmoddi4+0xa0>
 8010964:	40d4      	lsrs	r4, r2
 8010966:	2300      	movs	r3, #0
 8010968:	e9c5 4300 	strd	r4, r3, [r5]
 801096c:	4631      	mov	r1, r6
 801096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010972:	b902      	cbnz	r2, 8010976 <__udivmoddi4+0xaa>
 8010974:	deff      	udf	#255	; 0xff
 8010976:	fab2 f282 	clz	r2, r2
 801097a:	2a00      	cmp	r2, #0
 801097c:	d150      	bne.n	8010a20 <__udivmoddi4+0x154>
 801097e:	1bcb      	subs	r3, r1, r7
 8010980:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010984:	fa1f f887 	uxth.w	r8, r7
 8010988:	2601      	movs	r6, #1
 801098a:	fbb3 fcfe 	udiv	ip, r3, lr
 801098e:	0c21      	lsrs	r1, r4, #16
 8010990:	fb0e 331c 	mls	r3, lr, ip, r3
 8010994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010998:	fb08 f30c 	mul.w	r3, r8, ip
 801099c:	428b      	cmp	r3, r1
 801099e:	d907      	bls.n	80109b0 <__udivmoddi4+0xe4>
 80109a0:	1879      	adds	r1, r7, r1
 80109a2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80109a6:	d202      	bcs.n	80109ae <__udivmoddi4+0xe2>
 80109a8:	428b      	cmp	r3, r1
 80109aa:	f200 80e9 	bhi.w	8010b80 <__udivmoddi4+0x2b4>
 80109ae:	4684      	mov	ip, r0
 80109b0:	1ac9      	subs	r1, r1, r3
 80109b2:	b2a3      	uxth	r3, r4
 80109b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80109b8:	fb0e 1110 	mls	r1, lr, r0, r1
 80109bc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80109c0:	fb08 f800 	mul.w	r8, r8, r0
 80109c4:	45a0      	cmp	r8, r4
 80109c6:	d907      	bls.n	80109d8 <__udivmoddi4+0x10c>
 80109c8:	193c      	adds	r4, r7, r4
 80109ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80109ce:	d202      	bcs.n	80109d6 <__udivmoddi4+0x10a>
 80109d0:	45a0      	cmp	r8, r4
 80109d2:	f200 80d9 	bhi.w	8010b88 <__udivmoddi4+0x2bc>
 80109d6:	4618      	mov	r0, r3
 80109d8:	eba4 0408 	sub.w	r4, r4, r8
 80109dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80109e0:	e7bf      	b.n	8010962 <__udivmoddi4+0x96>
 80109e2:	428b      	cmp	r3, r1
 80109e4:	d909      	bls.n	80109fa <__udivmoddi4+0x12e>
 80109e6:	2d00      	cmp	r5, #0
 80109e8:	f000 80b1 	beq.w	8010b4e <__udivmoddi4+0x282>
 80109ec:	2600      	movs	r6, #0
 80109ee:	e9c5 0100 	strd	r0, r1, [r5]
 80109f2:	4630      	mov	r0, r6
 80109f4:	4631      	mov	r1, r6
 80109f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109fa:	fab3 f683 	clz	r6, r3
 80109fe:	2e00      	cmp	r6, #0
 8010a00:	d14a      	bne.n	8010a98 <__udivmoddi4+0x1cc>
 8010a02:	428b      	cmp	r3, r1
 8010a04:	d302      	bcc.n	8010a0c <__udivmoddi4+0x140>
 8010a06:	4282      	cmp	r2, r0
 8010a08:	f200 80b8 	bhi.w	8010b7c <__udivmoddi4+0x2b0>
 8010a0c:	1a84      	subs	r4, r0, r2
 8010a0e:	eb61 0103 	sbc.w	r1, r1, r3
 8010a12:	2001      	movs	r0, #1
 8010a14:	468c      	mov	ip, r1
 8010a16:	2d00      	cmp	r5, #0
 8010a18:	d0a8      	beq.n	801096c <__udivmoddi4+0xa0>
 8010a1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8010a1e:	e7a5      	b.n	801096c <__udivmoddi4+0xa0>
 8010a20:	f1c2 0320 	rsb	r3, r2, #32
 8010a24:	fa20 f603 	lsr.w	r6, r0, r3
 8010a28:	4097      	lsls	r7, r2
 8010a2a:	fa01 f002 	lsl.w	r0, r1, r2
 8010a2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010a32:	40d9      	lsrs	r1, r3
 8010a34:	4330      	orrs	r0, r6
 8010a36:	0c03      	lsrs	r3, r0, #16
 8010a38:	fbb1 f6fe 	udiv	r6, r1, lr
 8010a3c:	fa1f f887 	uxth.w	r8, r7
 8010a40:	fb0e 1116 	mls	r1, lr, r6, r1
 8010a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010a48:	fb06 f108 	mul.w	r1, r6, r8
 8010a4c:	4299      	cmp	r1, r3
 8010a4e:	fa04 f402 	lsl.w	r4, r4, r2
 8010a52:	d909      	bls.n	8010a68 <__udivmoddi4+0x19c>
 8010a54:	18fb      	adds	r3, r7, r3
 8010a56:	f106 3cff 	add.w	ip, r6, #4294967295
 8010a5a:	f080 808d 	bcs.w	8010b78 <__udivmoddi4+0x2ac>
 8010a5e:	4299      	cmp	r1, r3
 8010a60:	f240 808a 	bls.w	8010b78 <__udivmoddi4+0x2ac>
 8010a64:	3e02      	subs	r6, #2
 8010a66:	443b      	add	r3, r7
 8010a68:	1a5b      	subs	r3, r3, r1
 8010a6a:	b281      	uxth	r1, r0
 8010a6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8010a70:	fb0e 3310 	mls	r3, lr, r0, r3
 8010a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010a78:	fb00 f308 	mul.w	r3, r0, r8
 8010a7c:	428b      	cmp	r3, r1
 8010a7e:	d907      	bls.n	8010a90 <__udivmoddi4+0x1c4>
 8010a80:	1879      	adds	r1, r7, r1
 8010a82:	f100 3cff 	add.w	ip, r0, #4294967295
 8010a86:	d273      	bcs.n	8010b70 <__udivmoddi4+0x2a4>
 8010a88:	428b      	cmp	r3, r1
 8010a8a:	d971      	bls.n	8010b70 <__udivmoddi4+0x2a4>
 8010a8c:	3802      	subs	r0, #2
 8010a8e:	4439      	add	r1, r7
 8010a90:	1acb      	subs	r3, r1, r3
 8010a92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8010a96:	e778      	b.n	801098a <__udivmoddi4+0xbe>
 8010a98:	f1c6 0c20 	rsb	ip, r6, #32
 8010a9c:	fa03 f406 	lsl.w	r4, r3, r6
 8010aa0:	fa22 f30c 	lsr.w	r3, r2, ip
 8010aa4:	431c      	orrs	r4, r3
 8010aa6:	fa20 f70c 	lsr.w	r7, r0, ip
 8010aaa:	fa01 f306 	lsl.w	r3, r1, r6
 8010aae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8010ab2:	fa21 f10c 	lsr.w	r1, r1, ip
 8010ab6:	431f      	orrs	r7, r3
 8010ab8:	0c3b      	lsrs	r3, r7, #16
 8010aba:	fbb1 f9fe 	udiv	r9, r1, lr
 8010abe:	fa1f f884 	uxth.w	r8, r4
 8010ac2:	fb0e 1119 	mls	r1, lr, r9, r1
 8010ac6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8010aca:	fb09 fa08 	mul.w	sl, r9, r8
 8010ace:	458a      	cmp	sl, r1
 8010ad0:	fa02 f206 	lsl.w	r2, r2, r6
 8010ad4:	fa00 f306 	lsl.w	r3, r0, r6
 8010ad8:	d908      	bls.n	8010aec <__udivmoddi4+0x220>
 8010ada:	1861      	adds	r1, r4, r1
 8010adc:	f109 30ff 	add.w	r0, r9, #4294967295
 8010ae0:	d248      	bcs.n	8010b74 <__udivmoddi4+0x2a8>
 8010ae2:	458a      	cmp	sl, r1
 8010ae4:	d946      	bls.n	8010b74 <__udivmoddi4+0x2a8>
 8010ae6:	f1a9 0902 	sub.w	r9, r9, #2
 8010aea:	4421      	add	r1, r4
 8010aec:	eba1 010a 	sub.w	r1, r1, sl
 8010af0:	b2bf      	uxth	r7, r7
 8010af2:	fbb1 f0fe 	udiv	r0, r1, lr
 8010af6:	fb0e 1110 	mls	r1, lr, r0, r1
 8010afa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8010afe:	fb00 f808 	mul.w	r8, r0, r8
 8010b02:	45b8      	cmp	r8, r7
 8010b04:	d907      	bls.n	8010b16 <__udivmoddi4+0x24a>
 8010b06:	19e7      	adds	r7, r4, r7
 8010b08:	f100 31ff 	add.w	r1, r0, #4294967295
 8010b0c:	d22e      	bcs.n	8010b6c <__udivmoddi4+0x2a0>
 8010b0e:	45b8      	cmp	r8, r7
 8010b10:	d92c      	bls.n	8010b6c <__udivmoddi4+0x2a0>
 8010b12:	3802      	subs	r0, #2
 8010b14:	4427      	add	r7, r4
 8010b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010b1a:	eba7 0708 	sub.w	r7, r7, r8
 8010b1e:	fba0 8902 	umull	r8, r9, r0, r2
 8010b22:	454f      	cmp	r7, r9
 8010b24:	46c6      	mov	lr, r8
 8010b26:	4649      	mov	r1, r9
 8010b28:	d31a      	bcc.n	8010b60 <__udivmoddi4+0x294>
 8010b2a:	d017      	beq.n	8010b5c <__udivmoddi4+0x290>
 8010b2c:	b15d      	cbz	r5, 8010b46 <__udivmoddi4+0x27a>
 8010b2e:	ebb3 020e 	subs.w	r2, r3, lr
 8010b32:	eb67 0701 	sbc.w	r7, r7, r1
 8010b36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8010b3a:	40f2      	lsrs	r2, r6
 8010b3c:	ea4c 0202 	orr.w	r2, ip, r2
 8010b40:	40f7      	lsrs	r7, r6
 8010b42:	e9c5 2700 	strd	r2, r7, [r5]
 8010b46:	2600      	movs	r6, #0
 8010b48:	4631      	mov	r1, r6
 8010b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b4e:	462e      	mov	r6, r5
 8010b50:	4628      	mov	r0, r5
 8010b52:	e70b      	b.n	801096c <__udivmoddi4+0xa0>
 8010b54:	4606      	mov	r6, r0
 8010b56:	e6e9      	b.n	801092c <__udivmoddi4+0x60>
 8010b58:	4618      	mov	r0, r3
 8010b5a:	e6fd      	b.n	8010958 <__udivmoddi4+0x8c>
 8010b5c:	4543      	cmp	r3, r8
 8010b5e:	d2e5      	bcs.n	8010b2c <__udivmoddi4+0x260>
 8010b60:	ebb8 0e02 	subs.w	lr, r8, r2
 8010b64:	eb69 0104 	sbc.w	r1, r9, r4
 8010b68:	3801      	subs	r0, #1
 8010b6a:	e7df      	b.n	8010b2c <__udivmoddi4+0x260>
 8010b6c:	4608      	mov	r0, r1
 8010b6e:	e7d2      	b.n	8010b16 <__udivmoddi4+0x24a>
 8010b70:	4660      	mov	r0, ip
 8010b72:	e78d      	b.n	8010a90 <__udivmoddi4+0x1c4>
 8010b74:	4681      	mov	r9, r0
 8010b76:	e7b9      	b.n	8010aec <__udivmoddi4+0x220>
 8010b78:	4666      	mov	r6, ip
 8010b7a:	e775      	b.n	8010a68 <__udivmoddi4+0x19c>
 8010b7c:	4630      	mov	r0, r6
 8010b7e:	e74a      	b.n	8010a16 <__udivmoddi4+0x14a>
 8010b80:	f1ac 0c02 	sub.w	ip, ip, #2
 8010b84:	4439      	add	r1, r7
 8010b86:	e713      	b.n	80109b0 <__udivmoddi4+0xe4>
 8010b88:	3802      	subs	r0, #2
 8010b8a:	443c      	add	r4, r7
 8010b8c:	e724      	b.n	80109d8 <__udivmoddi4+0x10c>
 8010b8e:	bf00      	nop

08010b90 <__aeabi_idiv0>:
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop

08010b94 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8010b94:	b5b0      	push	{r4, r5, r7, lr}
 8010b96:	b08a      	sub	sp, #40	; 0x28
 8010b98:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN SV */

	const char *name = "test";
 8010b9a:	4b23      	ldr	r3, [pc, #140]	; (8010c28 <MX_BlueNRG_MS_Init+0x94>)
 8010b9c:	61fb      	str	r3, [r7, #28]


	uint8_t SERVER_BDADDR[] = {0x01,0x02,0x03,0x04,0x05,0x06};
 8010b9e:	4a23      	ldr	r2, [pc, #140]	; (8010c2c <MX_BlueNRG_MS_Init+0x98>)
 8010ba0:	f107 0314 	add.w	r3, r7, #20
 8010ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ba8:	6018      	str	r0, [r3, #0]
 8010baa:	3304      	adds	r3, #4
 8010bac:	8019      	strh	r1, [r3, #0]
	uint8_t bdaddr[BDADDR_SIZE];

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

	hci_init(user_notify,NULL);
 8010bae:	2100      	movs	r1, #0
 8010bb0:	481f      	ldr	r0, [pc, #124]	; (8010c30 <MX_BlueNRG_MS_Init+0x9c>)
 8010bb2:	f007 faff 	bl	80181b4 <hci_init>
	hci_reset();
 8010bb6:	f007 fa40 	bl	801803a <hci_reset>
	HAL_Delay(200);
 8010bba:	20c8      	movs	r0, #200	; 0xc8
 8010bbc:	f001 ffb4 	bl	8012b28 <HAL_Delay>

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8010bc0:	f107 030c 	add.w	r3, r7, #12
 8010bc4:	f107 0214 	add.w	r2, r7, #20
 8010bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bcc:	6018      	str	r0, [r3, #0]
 8010bce:	3304      	adds	r3, #4
 8010bd0:	8019      	strh	r1, [r3, #0]

	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8010bd2:	f107 030c 	add.w	r3, r7, #12
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	2106      	movs	r1, #6
 8010bda:	2000      	movs	r0, #0
 8010bdc:	f007 f9c6 	bl	8017f6c <aci_hal_write_config_data>

	aci_gatt_init();
 8010be0:	f006 ff84 	bl	8017aec <aci_gatt_init>

	aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8010be4:	f107 020a 	add.w	r2, r7, #10
 8010be8:	1dbb      	adds	r3, r7, #6
 8010bea:	9301      	str	r3, [sp, #4]
 8010bec:	f107 0308 	add.w	r3, r7, #8
 8010bf0:	9300      	str	r3, [sp, #0]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	2207      	movs	r2, #7
 8010bf6:	2100      	movs	r1, #0
 8010bf8:	2001      	movs	r0, #1
 8010bfa:	f006 fe38 	bl	801786e <aci_gap_init_IDB05A1>

	aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(POTATO_Save.POTATO_NAME), POTATO_Save.POTATO_NAME);
 8010bfe:	897c      	ldrh	r4, [r7, #10]
 8010c00:	893d      	ldrh	r5, [r7, #8]
 8010c02:	480c      	ldr	r0, [pc, #48]	; (8010c34 <MX_BlueNRG_MS_Init+0xa0>)
 8010c04:	f7ff fae4 	bl	80101d0 <strlen>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	4a09      	ldr	r2, [pc, #36]	; (8010c34 <MX_BlueNRG_MS_Init+0xa0>)
 8010c0e:	9200      	str	r2, [sp, #0]
 8010c10:	2200      	movs	r2, #0
 8010c12:	4629      	mov	r1, r5
 8010c14:	4620      	mov	r0, r4
 8010c16:	f007 f8ea 	bl	8017dee <aci_gatt_update_char_value>

	Add_Sample_Service();
 8010c1a:	f000 f83f 	bl	8010c9c <Add_Sample_Service>


  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8010c1e:	bf00      	nop
 8010c20:	3720      	adds	r7, #32
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bdb0      	pop	{r4, r5, r7, pc}
 8010c26:	bf00      	nop
 8010c28:	08019c68 	.word	0x08019c68
 8010c2c:	08019c70 	.word	0x08019c70
 8010c30:	080111d5 	.word	0x080111d5
 8010c34:	2000050e 	.word	0x2000050e

08010c38 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b08a      	sub	sp, #40	; 0x28
 8010c3c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

	tBleStatus ret;

	ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, strlen(POTATO_Save.POTATO_NAME), POTATO_Save.POTATO_NAME, 0, NULL, 0, 0);
 8010c3e:	4815      	ldr	r0, [pc, #84]	; (8010c94 <MX_BlueNRG_MS_Process+0x5c>)
 8010c40:	f7ff fac6 	bl	80101d0 <strlen>
 8010c44:	4603      	mov	r3, r0
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	2200      	movs	r2, #0
 8010c4a:	9206      	str	r2, [sp, #24]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	9205      	str	r2, [sp, #20]
 8010c50:	2200      	movs	r2, #0
 8010c52:	9204      	str	r2, [sp, #16]
 8010c54:	2200      	movs	r2, #0
 8010c56:	9203      	str	r2, [sp, #12]
 8010c58:	4a0e      	ldr	r2, [pc, #56]	; (8010c94 <MX_BlueNRG_MS_Process+0x5c>)
 8010c5a:	9202      	str	r2, [sp, #8]
 8010c5c:	9301      	str	r3, [sp, #4]
 8010c5e:	2300      	movs	r3, #0
 8010c60:	9300      	str	r3, [sp, #0]
 8010c62:	2300      	movs	r3, #0
 8010c64:	2200      	movs	r2, #0
 8010c66:	2100      	movs	r1, #0
 8010c68:	2000      	movs	r0, #0
 8010c6a:	f006 fe50 	bl	801790e <aci_gap_set_discoverable>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	71fb      	strb	r3, [r7, #7]


	if (SPIwasLocked == 1)
 8010c72:	4b09      	ldr	r3, [pc, #36]	; (8010c98 <MX_BlueNRG_MS_Process+0x60>)
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d104      	bne.n	8010c86 <MX_BlueNRG_MS_Process+0x4e>
	{
		SPIwasLocked = 0;
 8010c7c:	4b06      	ldr	r3, [pc, #24]	; (8010c98 <MX_BlueNRG_MS_Process+0x60>)
 8010c7e:	2200      	movs	r2, #0
 8010c80:	701a      	strb	r2, [r3, #0]
		hci_tl_lowlevel_isr();
 8010c82:	f000 fd47 	bl	8011714 <hci_tl_lowlevel_isr>
	}

	hci_user_evt_proc();
 8010c86:	f007 fc11 	bl	80184ac <hci_user_evt_proc>
  //hci_user_evt_proc();

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8010c8a:	bf00      	nop
 8010c8c:	3708      	adds	r7, #8
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	2000050e 	.word	0x2000050e
 8010c98:	200000bc 	.word	0x200000bc

08010c9c <Add_Sample_Service>:
 * @retval Status
 */


tBleStatus Add_Sample_Service(void)
{
 8010c9c:	b590      	push	{r4, r7, lr}
 8010c9e:	b08b      	sub	sp, #44	; 0x2c
 8010ca0:	af06      	add	r7, sp, #24
  UUIDs:
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */
    uint8_t POTATO_UUID[] = {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xAA,0xBB,0xCC,0xDD,0xEE,0xFF,0x00};
 8010ca2:	4b5b      	ldr	r3, [pc, #364]	; (8010e10 <Add_Sample_Service+0x174>)
 8010ca4:	463c      	mov	r4, r7
 8010ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    aci_gatt_add_serv(UUID_TYPE_128, POTATO_UUID, PRIMARY_SERVICE, 40, &(POTATO_Context.POTATO_Svc_Hdle));
 8010cac:	4639      	mov	r1, r7
 8010cae:	4b59      	ldr	r3, [pc, #356]	; (8010e14 <Add_Sample_Service+0x178>)
 8010cb0:	9300      	str	r3, [sp, #0]
 8010cb2:	2328      	movs	r3, #40	; 0x28
 8010cb4:	2201      	movs	r2, #1
 8010cb6:	2002      	movs	r0, #2
 8010cb8:	f006 ff3b 	bl	8017b32 <aci_gatt_add_serv>

  	POTATO_UUID[15] = 0x01;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	73fb      	strb	r3, [r7, #15]
  	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 31,
 8010cc0:	4b54      	ldr	r3, [pc, #336]	; (8010e14 <Add_Sample_Service+0x178>)
 8010cc2:	8818      	ldrh	r0, [r3, #0]
 8010cc4:	463a      	mov	r2, r7
 8010cc6:	4b54      	ldr	r3, [pc, #336]	; (8010e18 <Add_Sample_Service+0x17c>)
 8010cc8:	9305      	str	r3, [sp, #20]
 8010cca:	2301      	movs	r3, #1
 8010ccc:	9304      	str	r3, [sp, #16]
 8010cce:	230a      	movs	r3, #10
 8010cd0:	9303      	str	r3, [sp, #12]
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	9302      	str	r3, [sp, #8]
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	9301      	str	r3, [sp, #4]
 8010cda:	2306      	movs	r3, #6
 8010cdc:	9300      	str	r3, [sp, #0]
 8010cde:	231f      	movs	r3, #31
 8010ce0:	2102      	movs	r1, #2
 8010ce2:	f006 ffb2 	bl	8017c4a <aci_gatt_add_char>
  					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
  					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_SSID_Hdle));

  	POTATO_UUID[15] = 0x02;
 8010ce6:	2302      	movs	r3, #2
 8010ce8:	73fb      	strb	r3, [r7, #15]
  	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 31,
 8010cea:	4b4a      	ldr	r3, [pc, #296]	; (8010e14 <Add_Sample_Service+0x178>)
 8010cec:	8818      	ldrh	r0, [r3, #0]
 8010cee:	463a      	mov	r2, r7
 8010cf0:	4b4a      	ldr	r3, [pc, #296]	; (8010e1c <Add_Sample_Service+0x180>)
 8010cf2:	9305      	str	r3, [sp, #20]
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	9304      	str	r3, [sp, #16]
 8010cf8:	230a      	movs	r3, #10
 8010cfa:	9303      	str	r3, [sp, #12]
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	9302      	str	r3, [sp, #8]
 8010d00:	2300      	movs	r3, #0
 8010d02:	9301      	str	r3, [sp, #4]
 8010d04:	2306      	movs	r3, #6
 8010d06:	9300      	str	r3, [sp, #0]
 8010d08:	231f      	movs	r3, #31
 8010d0a:	2102      	movs	r1, #2
 8010d0c:	f006 ff9d 	bl	8017c4a <aci_gatt_add_char>
  					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
  					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_PW_Hdle));

  	POTATO_UUID[15] = 0x03;
 8010d10:	2303      	movs	r3, #3
 8010d12:	73fb      	strb	r3, [r7, #15]
  	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 31,
 8010d14:	4b3f      	ldr	r3, [pc, #252]	; (8010e14 <Add_Sample_Service+0x178>)
 8010d16:	8818      	ldrh	r0, [r3, #0]
 8010d18:	463a      	mov	r2, r7
 8010d1a:	4b41      	ldr	r3, [pc, #260]	; (8010e20 <Add_Sample_Service+0x184>)
 8010d1c:	9305      	str	r3, [sp, #20]
 8010d1e:	2301      	movs	r3, #1
 8010d20:	9304      	str	r3, [sp, #16]
 8010d22:	230a      	movs	r3, #10
 8010d24:	9303      	str	r3, [sp, #12]
 8010d26:	2301      	movs	r3, #1
 8010d28:	9302      	str	r3, [sp, #8]
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	9301      	str	r3, [sp, #4]
 8010d2e:	2306      	movs	r3, #6
 8010d30:	9300      	str	r3, [sp, #0]
 8010d32:	231f      	movs	r3, #31
 8010d34:	2102      	movs	r1, #2
 8010d36:	f006 ff88 	bl	8017c4a <aci_gatt_add_char>
  					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
  					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_NAME_Hdle));

  	POTATO_UUID[15] = 0x04;
 8010d3a:	2304      	movs	r3, #4
 8010d3c:	73fb      	strb	r3, [r7, #15]
  	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 4,
 8010d3e:	4b35      	ldr	r3, [pc, #212]	; (8010e14 <Add_Sample_Service+0x178>)
 8010d40:	8818      	ldrh	r0, [r3, #0]
 8010d42:	463a      	mov	r2, r7
 8010d44:	4b37      	ldr	r3, [pc, #220]	; (8010e24 <Add_Sample_Service+0x188>)
 8010d46:	9305      	str	r3, [sp, #20]
 8010d48:	2301      	movs	r3, #1
 8010d4a:	9304      	str	r3, [sp, #16]
 8010d4c:	230a      	movs	r3, #10
 8010d4e:	9303      	str	r3, [sp, #12]
 8010d50:	2301      	movs	r3, #1
 8010d52:	9302      	str	r3, [sp, #8]
 8010d54:	2300      	movs	r3, #0
 8010d56:	9301      	str	r3, [sp, #4]
 8010d58:	2306      	movs	r3, #6
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	2304      	movs	r3, #4
 8010d5e:	2102      	movs	r1, #2
 8010d60:	f006 ff73 	bl	8017c4a <aci_gatt_add_char>
  					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
  					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_IP_Hdle));

  	POTATO_UUID[15] = 0x05;
 8010d64:	2305      	movs	r3, #5
 8010d66:	73fb      	strb	r3, [r7, #15]
  	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 3,
 8010d68:	4b2a      	ldr	r3, [pc, #168]	; (8010e14 <Add_Sample_Service+0x178>)
 8010d6a:	8818      	ldrh	r0, [r3, #0]
 8010d6c:	463a      	mov	r2, r7
 8010d6e:	4b2e      	ldr	r3, [pc, #184]	; (8010e28 <Add_Sample_Service+0x18c>)
 8010d70:	9305      	str	r3, [sp, #20]
 8010d72:	2301      	movs	r3, #1
 8010d74:	9304      	str	r3, [sp, #16]
 8010d76:	230a      	movs	r3, #10
 8010d78:	9303      	str	r3, [sp, #12]
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	9302      	str	r3, [sp, #8]
 8010d7e:	2300      	movs	r3, #0
 8010d80:	9301      	str	r3, [sp, #4]
 8010d82:	2306      	movs	r3, #6
 8010d84:	9300      	str	r3, [sp, #0]
 8010d86:	2303      	movs	r3, #3
 8010d88:	2102      	movs	r1, #2
 8010d8a:	f006 ff5e 	bl	8017c4a <aci_gatt_add_char>
  					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
  					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_OP_Hdle));

  	POTATO_UUID[15] = 0x06;
 8010d8e:	2306      	movs	r3, #6
 8010d90:	73fb      	strb	r3, [r7, #15]
  	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 1,
 8010d92:	4b20      	ldr	r3, [pc, #128]	; (8010e14 <Add_Sample_Service+0x178>)
 8010d94:	8818      	ldrh	r0, [r3, #0]
 8010d96:	463a      	mov	r2, r7
 8010d98:	4b24      	ldr	r3, [pc, #144]	; (8010e2c <Add_Sample_Service+0x190>)
 8010d9a:	9305      	str	r3, [sp, #20]
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	9304      	str	r3, [sp, #16]
 8010da0:	230a      	movs	r3, #10
 8010da2:	9303      	str	r3, [sp, #12]
 8010da4:	2301      	movs	r3, #1
 8010da6:	9302      	str	r3, [sp, #8]
 8010da8:	2300      	movs	r3, #0
 8010daa:	9301      	str	r3, [sp, #4]
 8010dac:	2306      	movs	r3, #6
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	2301      	movs	r3, #1
 8010db2:	2102      	movs	r1, #2
 8010db4:	f006 ff49 	bl	8017c4a <aci_gatt_add_char>
  					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
  					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_Save_Hdle));

  	POTATO_UUID[15] = 0x07;
 8010db8:	2307      	movs	r3, #7
 8010dba:	73fb      	strb	r3, [r7, #15]
  	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 5,
 8010dbc:	4b15      	ldr	r3, [pc, #84]	; (8010e14 <Add_Sample_Service+0x178>)
 8010dbe:	8818      	ldrh	r0, [r3, #0]
 8010dc0:	463a      	mov	r2, r7
 8010dc2:	4b1b      	ldr	r3, [pc, #108]	; (8010e30 <Add_Sample_Service+0x194>)
 8010dc4:	9305      	str	r3, [sp, #20]
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	9304      	str	r3, [sp, #16]
 8010dca:	230a      	movs	r3, #10
 8010dcc:	9303      	str	r3, [sp, #12]
 8010dce:	2304      	movs	r3, #4
 8010dd0:	9302      	str	r3, [sp, #8]
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	9301      	str	r3, [sp, #4]
 8010dd6:	2302      	movs	r3, #2
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	2305      	movs	r3, #5
 8010ddc:	2102      	movs	r1, #2
 8010dde:	f006 ff34 	bl	8017c4a <aci_gatt_add_char>
  					  CHAR_PROP_READ,
  					  ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 10, 1, &(POTATO_Context.POTATO_Adc_Hdle));

    printf("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
 8010de2:	4b14      	ldr	r3, [pc, #80]	; (8010e34 <Add_Sample_Service+0x198>)
 8010de4:	881b      	ldrh	r3, [r3, #0]
 8010de6:	4619      	mov	r1, r3
 8010de8:	4b13      	ldr	r3, [pc, #76]	; (8010e38 <Add_Sample_Service+0x19c>)
 8010dea:	881b      	ldrh	r3, [r3, #0]
 8010dec:	461a      	mov	r2, r3
 8010dee:	4813      	ldr	r0, [pc, #76]	; (8010e3c <Add_Sample_Service+0x1a0>)
 8010df0:	f007 ffa4 	bl	8018d3c <iprintf>


    printf("Potato Load ret : %d\n",Potato_Load(&POTATO_Save));
 8010df4:	4812      	ldr	r0, [pc, #72]	; (8010e40 <Add_Sample_Service+0x1a4>)
 8010df6:	f001 f90d 	bl	8012014 <Potato_Load>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	4811      	ldr	r0, [pc, #68]	; (8010e44 <Add_Sample_Service+0x1a8>)
 8010e00:	f007 ff9c 	bl	8018d3c <iprintf>
    return BLE_STATUS_SUCCESS;
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3714      	adds	r7, #20
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd90      	pop	{r4, r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	08019ce4 	.word	0x08019ce4
 8010e14:	200004bc 	.word	0x200004bc
 8010e18:	200004be 	.word	0x200004be
 8010e1c:	200004c0 	.word	0x200004c0
 8010e20:	200004c2 	.word	0x200004c2
 8010e24:	200004c4 	.word	0x200004c4
 8010e28:	200004c6 	.word	0x200004c6
 8010e2c:	200004c8 	.word	0x200004c8
 8010e30:	200004ca 	.word	0x200004ca
 8010e34:	200004cc 	.word	0x200004cc
 8010e38:	20000536 	.word	0x20000536
 8010e3c:	08019c8c 	.word	0x08019c8c
 8010e40:	200004d0 	.word	0x200004d0
 8010e44:	08019ccc 	.word	0x08019ccc

08010e48 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	460b      	mov	r3, r1
 8010e52:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8010e54:	2000      	movs	r0, #0
 8010e56:	f001 fce3 	bl	8012820 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	60fb      	str	r3, [r7, #12]
 8010e5e:	e009      	b.n	8010e74 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	687a      	ldr	r2, [r7, #4]
 8010e64:	4413      	add	r3, r2
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f007 ff7f 	bl	8018d6c <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	3301      	adds	r3, #1
 8010e72:	60fb      	str	r3, [r7, #12]
 8010e74:	78fb      	ldrb	r3, [r7, #3]
 8010e76:	68fa      	ldr	r2, [r7, #12]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	dbf1      	blt.n	8010e60 <receiveData+0x18>
  }
  fflush(stdout);
 8010e7c:	4b04      	ldr	r3, [pc, #16]	; (8010e90 <receiveData+0x48>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	689b      	ldr	r3, [r3, #8]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f007 fd6a 	bl	801895c <fflush>
}
 8010e88:	bf00      	nop
 8010e8a:	3710      	adds	r7, #16
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}
 8010e90:	2000003c 	.word	0x2000003c

08010e94 <whynotwork>:
  notification_enabled = TRUE;
}


void whynotwork(uint8_t *POTATO, uint8_t data_length, uint8_t *att_data, uint8_t is_string)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b087      	sub	sp, #28
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	60f8      	str	r0, [r7, #12]
 8010e9c:	607a      	str	r2, [r7, #4]
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	72fb      	strb	r3, [r7, #11]
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	72bb      	strb	r3, [r7, #10]
	uint8_t i = 0;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	75fb      	strb	r3, [r7, #23]
	for(; i < data_length; i++)
 8010eac:	e00a      	b.n	8010ec4 <whynotwork+0x30>
	{
		POTATO[i] = att_data[i];
 8010eae:	7dfb      	ldrb	r3, [r7, #23]
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	441a      	add	r2, r3
 8010eb4:	7dfb      	ldrb	r3, [r7, #23]
 8010eb6:	68f9      	ldr	r1, [r7, #12]
 8010eb8:	440b      	add	r3, r1
 8010eba:	7812      	ldrb	r2, [r2, #0]
 8010ebc:	701a      	strb	r2, [r3, #0]
	for(; i < data_length; i++)
 8010ebe:	7dfb      	ldrb	r3, [r7, #23]
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	75fb      	strb	r3, [r7, #23]
 8010ec4:	7dfa      	ldrb	r2, [r7, #23]
 8010ec6:	7afb      	ldrb	r3, [r7, #11]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d3f0      	bcc.n	8010eae <whynotwork+0x1a>
	}
	if(is_string){
 8010ecc:	7abb      	ldrb	r3, [r7, #10]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d004      	beq.n	8010edc <whynotwork+0x48>
		POTATO[i] = '\0';
 8010ed2:	7dfb      	ldrb	r3, [r7, #23]
 8010ed4:	68fa      	ldr	r2, [r7, #12]
 8010ed6:	4413      	add	r3, r2
 8010ed8:	2200      	movs	r2, #0
 8010eda:	701a      	strb	r2, [r3, #0]
	}
}
 8010edc:	bf00      	nop
 8010ede:	371c      	adds	r7, #28
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr

08010ee8 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	603a      	str	r2, [r7, #0]
 8010ef2:	80fb      	strh	r3, [r7, #6]
 8010ef4:	460b      	mov	r3, r1
 8010ef6:	717b      	strb	r3, [r7, #5]
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
  */
	uint8_t ret = 0;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	73fb      	strb	r3, [r7, #15]

	if(handle == (POTATO_Context.POTATO_SSID_Hdle)+1)
 8010efc:	88fa      	ldrh	r2, [r7, #6]
 8010efe:	4b4c      	ldr	r3, [pc, #304]	; (8011030 <Attribute_Modified_CB+0x148>)
 8010f00:	885b      	ldrh	r3, [r3, #2]
 8010f02:	3301      	adds	r3, #1
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d109      	bne.n	8010f1c <Attribute_Modified_CB+0x34>
	{
		printf("1\n");
 8010f08:	484a      	ldr	r0, [pc, #296]	; (8011034 <Attribute_Modified_CB+0x14c>)
 8010f0a:	f007 ffb3 	bl	8018e74 <puts>
		//memcpy(&(POTATO_Save.POTATO_SSID),att_data,strlen(att_data));
		whynotwork(POTATO_Save.POTATO_SSID, data_length, att_data, 1);
 8010f0e:	7979      	ldrb	r1, [r7, #5]
 8010f10:	2301      	movs	r3, #1
 8010f12:	683a      	ldr	r2, [r7, #0]
 8010f14:	4848      	ldr	r0, [pc, #288]	; (8011038 <Attribute_Modified_CB+0x150>)
 8010f16:	f7ff ffbd 	bl	8010e94 <whynotwork>

		}
	}


}
 8010f1a:	e084      	b.n	8011026 <Attribute_Modified_CB+0x13e>
	else if(handle == (POTATO_Context.POTATO_PW_Hdle)+1)
 8010f1c:	88fa      	ldrh	r2, [r7, #6]
 8010f1e:	4b44      	ldr	r3, [pc, #272]	; (8011030 <Attribute_Modified_CB+0x148>)
 8010f20:	889b      	ldrh	r3, [r3, #4]
 8010f22:	3301      	adds	r3, #1
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d109      	bne.n	8010f3c <Attribute_Modified_CB+0x54>
		printf("2\n");
 8010f28:	4844      	ldr	r0, [pc, #272]	; (801103c <Attribute_Modified_CB+0x154>)
 8010f2a:	f007 ffa3 	bl	8018e74 <puts>
		whynotwork(POTATO_Save.POTATO_PW, data_length, att_data, 1);
 8010f2e:	7979      	ldrb	r1, [r7, #5]
 8010f30:	2301      	movs	r3, #1
 8010f32:	683a      	ldr	r2, [r7, #0]
 8010f34:	4842      	ldr	r0, [pc, #264]	; (8011040 <Attribute_Modified_CB+0x158>)
 8010f36:	f7ff ffad 	bl	8010e94 <whynotwork>
}
 8010f3a:	e074      	b.n	8011026 <Attribute_Modified_CB+0x13e>
	else if(handle == (POTATO_Context.POTATO_NAME_Hdle)+1)
 8010f3c:	88fa      	ldrh	r2, [r7, #6]
 8010f3e:	4b3c      	ldr	r3, [pc, #240]	; (8011030 <Attribute_Modified_CB+0x148>)
 8010f40:	88db      	ldrh	r3, [r3, #6]
 8010f42:	3301      	adds	r3, #1
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d109      	bne.n	8010f5c <Attribute_Modified_CB+0x74>
		printf("3\n");
 8010f48:	483e      	ldr	r0, [pc, #248]	; (8011044 <Attribute_Modified_CB+0x15c>)
 8010f4a:	f007 ff93 	bl	8018e74 <puts>
		whynotwork(POTATO_Save.POTATO_NAME, data_length, att_data, 1);
 8010f4e:	7979      	ldrb	r1, [r7, #5]
 8010f50:	2301      	movs	r3, #1
 8010f52:	683a      	ldr	r2, [r7, #0]
 8010f54:	483c      	ldr	r0, [pc, #240]	; (8011048 <Attribute_Modified_CB+0x160>)
 8010f56:	f7ff ff9d 	bl	8010e94 <whynotwork>
}
 8010f5a:	e064      	b.n	8011026 <Attribute_Modified_CB+0x13e>
	else if(handle == (POTATO_Context.POTATO_IP_Hdle)+1)
 8010f5c:	88fa      	ldrh	r2, [r7, #6]
 8010f5e:	4b34      	ldr	r3, [pc, #208]	; (8011030 <Attribute_Modified_CB+0x148>)
 8010f60:	891b      	ldrh	r3, [r3, #8]
 8010f62:	3301      	adds	r3, #1
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d109      	bne.n	8010f7c <Attribute_Modified_CB+0x94>
		printf("4\n");
 8010f68:	4838      	ldr	r0, [pc, #224]	; (801104c <Attribute_Modified_CB+0x164>)
 8010f6a:	f007 ff83 	bl	8018e74 <puts>
		whynotwork(POTATO_Save.POTATO_IP, data_length, att_data, 0);
 8010f6e:	7979      	ldrb	r1, [r7, #5]
 8010f70:	2300      	movs	r3, #0
 8010f72:	683a      	ldr	r2, [r7, #0]
 8010f74:	4836      	ldr	r0, [pc, #216]	; (8011050 <Attribute_Modified_CB+0x168>)
 8010f76:	f7ff ff8d 	bl	8010e94 <whynotwork>
}
 8010f7a:	e054      	b.n	8011026 <Attribute_Modified_CB+0x13e>
	else if(handle == (POTATO_Context.POTATO_OP_Hdle)+1)
 8010f7c:	88fa      	ldrh	r2, [r7, #6]
 8010f7e:	4b2c      	ldr	r3, [pc, #176]	; (8011030 <Attribute_Modified_CB+0x148>)
 8010f80:	895b      	ldrh	r3, [r3, #10]
 8010f82:	3301      	adds	r3, #1
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d109      	bne.n	8010f9c <Attribute_Modified_CB+0xb4>
		printf("5\n");
 8010f88:	4832      	ldr	r0, [pc, #200]	; (8011054 <Attribute_Modified_CB+0x16c>)
 8010f8a:	f007 ff73 	bl	8018e74 <puts>
		whynotwork(POTATO_Save.POTATO_OP, data_length, att_data, 0);
 8010f8e:	7979      	ldrb	r1, [r7, #5]
 8010f90:	2300      	movs	r3, #0
 8010f92:	683a      	ldr	r2, [r7, #0]
 8010f94:	4830      	ldr	r0, [pc, #192]	; (8011058 <Attribute_Modified_CB+0x170>)
 8010f96:	f7ff ff7d 	bl	8010e94 <whynotwork>
}
 8010f9a:	e044      	b.n	8011026 <Attribute_Modified_CB+0x13e>
	else if(handle == (POTATO_Context.POTATO_Save_Hdle)+1)
 8010f9c:	88fa      	ldrh	r2, [r7, #6]
 8010f9e:	4b24      	ldr	r3, [pc, #144]	; (8011030 <Attribute_Modified_CB+0x148>)
 8010fa0:	899b      	ldrh	r3, [r3, #12]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d13d      	bne.n	8011024 <Attribute_Modified_CB+0x13c>
		printf("6\n");
 8010fa8:	482c      	ldr	r0, [pc, #176]	; (801105c <Attribute_Modified_CB+0x174>)
 8010faa:	f007 ff63 	bl	8018e74 <puts>
		switch(*att_data)
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	2b05      	cmp	r3, #5
 8010fb4:	d837      	bhi.n	8011026 <Attribute_Modified_CB+0x13e>
 8010fb6:	a201      	add	r2, pc, #4	; (adr r2, 8010fbc <Attribute_Modified_CB+0xd4>)
 8010fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fbc:	08010fd5 	.word	0x08010fd5
 8010fc0:	08010ff1 	.word	0x08010ff1
 8010fc4:	08011009 	.word	0x08011009
 8010fc8:	0801100f 	.word	0x0801100f
 8010fcc:	08011017 	.word	0x08011017
 8010fd0:	0801101f 	.word	0x0801101f
				ret = Potato_Save(&POTATO_Save);
 8010fd4:	4818      	ldr	r0, [pc, #96]	; (8011038 <Attribute_Modified_CB+0x150>)
 8010fd6:	f000 ff61 	bl	8011e9c <Potato_Save>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	73fb      	strb	r3, [r7, #15]
				printf("Potato Save ret : %d\n",Potato_Save(&POTATO_Save));
 8010fde:	4816      	ldr	r0, [pc, #88]	; (8011038 <Attribute_Modified_CB+0x150>)
 8010fe0:	f000 ff5c 	bl	8011e9c <Potato_Save>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	481d      	ldr	r0, [pc, #116]	; (8011060 <Attribute_Modified_CB+0x178>)
 8010fea:	f007 fea7 	bl	8018d3c <iprintf>
				break;
 8010fee:	e01a      	b.n	8011026 <Attribute_Modified_CB+0x13e>
				Potato_Load(&POTATO_Save);
 8010ff0:	4811      	ldr	r0, [pc, #68]	; (8011038 <Attribute_Modified_CB+0x150>)
 8010ff2:	f001 f80f 	bl	8012014 <Potato_Load>
				printf("Potato Load ret : %d\n",Potato_Load(&POTATO_Save));
 8010ff6:	4810      	ldr	r0, [pc, #64]	; (8011038 <Attribute_Modified_CB+0x150>)
 8010ff8:	f001 f80c 	bl	8012014 <Potato_Load>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	4619      	mov	r1, r3
 8011000:	4818      	ldr	r0, [pc, #96]	; (8011064 <Attribute_Modified_CB+0x17c>)
 8011002:	f007 fe9b 	bl	8018d3c <iprintf>
				break;
 8011006:	e00e      	b.n	8011026 <Attribute_Modified_CB+0x13e>
				Potato_Backup_Load();
 8011008:	f001 f8b0 	bl	801216c <Potato_Backup_Load>
				break;
 801100c:	e00b      	b.n	8011026 <Attribute_Modified_CB+0x13e>
				Potato_Erase(normal);
 801100e:	2001      	movs	r0, #1
 8011010:	f001 f860 	bl	80120d4 <Potato_Erase>
				break;
 8011014:	e007      	b.n	8011026 <Attribute_Modified_CB+0x13e>
				Potato_Erase(both);
 8011016:	2002      	movs	r0, #2
 8011018:	f001 f85c 	bl	80120d4 <Potato_Erase>
				break;
 801101c:	e003      	b.n	8011026 <Attribute_Modified_CB+0x13e>
				Potato_Dummy_Backup();
 801101e:	f001 f91d 	bl	801225c <Potato_Dummy_Backup>
				break;
 8011022:	e000      	b.n	8011026 <Attribute_Modified_CB+0x13e>
	}
 8011024:	bf00      	nop
}
 8011026:	bf00      	nop
 8011028:	3710      	adds	r7, #16
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}
 801102e:	bf00      	nop
 8011030:	200004bc 	.word	0x200004bc
 8011034:	08019dcc 	.word	0x08019dcc
 8011038:	200004d0 	.word	0x200004d0
 801103c:	08019dd0 	.word	0x08019dd0
 8011040:	200004ef 	.word	0x200004ef
 8011044:	08019dd4 	.word	0x08019dd4
 8011048:	2000050e 	.word	0x2000050e
 801104c:	08019dd8 	.word	0x08019dd8
 8011050:	2000052d 	.word	0x2000052d
 8011054:	08019ddc 	.word	0x08019ddc
 8011058:	20000531 	.word	0x20000531
 801105c:	08019de0 	.word	0x08019de0
 8011060:	08019de4 	.word	0x08019de4
 8011064:	08019ccc 	.word	0x08019ccc

08011068 <Read_Request_CB>:

void Read_Request_CB(uint16_t handle)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b088      	sub	sp, #32
 801106c:	af02      	add	r7, sp, #8
 801106e:	4603      	mov	r3, r0
 8011070:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[5] = {0, };
 8011072:	2300      	movs	r3, #0
 8011074:	60fb      	str	r3, [r7, #12]
 8011076:	2300      	movs	r3, #0
 8011078:	743b      	strb	r3, [r7, #16]
	long adc_buffer = 0;
 801107a:	2300      	movs	r3, #0
 801107c:	617b      	str	r3, [r7, #20]
	if(handle == POTATO_Context.POTATO_Adc_Hdle + 1){
 801107e:	88fa      	ldrh	r2, [r7, #6]
 8011080:	4b14      	ldr	r3, [pc, #80]	; (80110d4 <Read_Request_CB+0x6c>)
 8011082:	89db      	ldrh	r3, [r3, #14]
 8011084:	3301      	adds	r3, #1
 8011086:	429a      	cmp	r2, r3
 8011088:	d114      	bne.n	80110b4 <Read_Request_CB+0x4c>
		adc_buffer = Potato_Readadc();
 801108a:	f000 fb61 	bl	8011750 <Potato_Readadc>
 801108e:	6178      	str	r0, [r7, #20]
		sprintf(buffer,"%ld",adc_buffer);
 8011090:	f107 030c 	add.w	r3, r7, #12
 8011094:	697a      	ldr	r2, [r7, #20]
 8011096:	4910      	ldr	r1, [pc, #64]	; (80110d8 <Read_Request_CB+0x70>)
 8011098:	4618      	mov	r0, r3
 801109a:	f007 ff03 	bl	8018ea4 <siprintf>
		aci_gatt_update_char_value(POTATO_Context.POTATO_Svc_Hdle, POTATO_Context.POTATO_Adc_Hdle, 0, 5, buffer);
 801109e:	4b0d      	ldr	r3, [pc, #52]	; (80110d4 <Read_Request_CB+0x6c>)
 80110a0:	8818      	ldrh	r0, [r3, #0]
 80110a2:	4b0c      	ldr	r3, [pc, #48]	; (80110d4 <Read_Request_CB+0x6c>)
 80110a4:	89d9      	ldrh	r1, [r3, #14]
 80110a6:	f107 030c 	add.w	r3, r7, #12
 80110aa:	9300      	str	r3, [sp, #0]
 80110ac:	2305      	movs	r3, #5
 80110ae:	2200      	movs	r2, #0
 80110b0:	f006 fe9d 	bl	8017dee <aci_gatt_update_char_value>
	}

	if(connection_handle != 0){
 80110b4:	4b09      	ldr	r3, [pc, #36]	; (80110dc <Read_Request_CB+0x74>)
 80110b6:	881b      	ldrh	r3, [r3, #0]
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d005      	beq.n	80110ca <Read_Request_CB+0x62>
	aci_gatt_allow_read(connection_handle);
 80110be:	4b07      	ldr	r3, [pc, #28]	; (80110dc <Read_Request_CB+0x74>)
 80110c0:	881b      	ldrh	r3, [r3, #0]
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	4618      	mov	r0, r3
 80110c6:	f006 ff24 	bl	8017f12 <aci_gatt_allow_read>
	}
}
 80110ca:	bf00      	nop
 80110cc:	3718      	adds	r7, #24
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	200004bc 	.word	0x200004bc
 80110d8:	08019dfc 	.word	0x08019dfc
 80110dc:	200000c4 	.word	0x200000c4

080110e0 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	460b      	mov	r3, r1
 80110ea:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 80110ec:	4b11      	ldr	r3, [pc, #68]	; (8011134 <GAP_ConnectionComplete_CB+0x54>)
 80110ee:	2201      	movs	r2, #1
 80110f0:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80110f2:	4a11      	ldr	r2, [pc, #68]	; (8011138 <GAP_ConnectionComplete_CB+0x58>)
 80110f4:	887b      	ldrh	r3, [r7, #2]
 80110f6:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 80110f8:	4810      	ldr	r0, [pc, #64]	; (801113c <GAP_ConnectionComplete_CB+0x5c>)
 80110fa:	f007 fe1f 	bl	8018d3c <iprintf>
  for(int i = 5; i > 0; i--){
 80110fe:	2305      	movs	r3, #5
 8011100:	60fb      	str	r3, [r7, #12]
 8011102:	e00a      	b.n	801111a <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	4413      	add	r3, r2
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	4619      	mov	r1, r3
 801110e:	480c      	ldr	r0, [pc, #48]	; (8011140 <GAP_ConnectionComplete_CB+0x60>)
 8011110:	f007 fe14 	bl	8018d3c <iprintf>
  for(int i = 5; i > 0; i--){
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	3b01      	subs	r3, #1
 8011118:	60fb      	str	r3, [r7, #12]
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	dcf1      	bgt.n	8011104 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	4619      	mov	r1, r3
 8011126:	4807      	ldr	r0, [pc, #28]	; (8011144 <GAP_ConnectionComplete_CB+0x64>)
 8011128:	f007 fe08 	bl	8018d3c <iprintf>
}
 801112c:	bf00      	nop
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	200000c0 	.word	0x200000c0
 8011138:	200000c4 	.word	0x200000c4
 801113c:	08019e00 	.word	0x08019e00
 8011140:	08019e18 	.word	0x08019e18
 8011144:	08019e20 	.word	0x08019e20

08011148 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
  connected = FALSE;
 801114c:	4b0c      	ldr	r3, [pc, #48]	; (8011180 <GAP_DisconnectionComplete_CB+0x38>)
 801114e:	2200      	movs	r2, #0
 8011150:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8011152:	480c      	ldr	r0, [pc, #48]	; (8011184 <GAP_DisconnectionComplete_CB+0x3c>)
 8011154:	f007 fe8e 	bl	8018e74 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8011158:	4b0b      	ldr	r3, [pc, #44]	; (8011188 <GAP_DisconnectionComplete_CB+0x40>)
 801115a:	2201      	movs	r2, #1
 801115c:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 801115e:	4b0b      	ldr	r3, [pc, #44]	; (801118c <GAP_DisconnectionComplete_CB+0x44>)
 8011160:	2200      	movs	r2, #0
 8011162:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8011164:	4b0a      	ldr	r3, [pc, #40]	; (8011190 <GAP_DisconnectionComplete_CB+0x48>)
 8011166:	2200      	movs	r2, #0
 8011168:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 801116a:	4b0a      	ldr	r3, [pc, #40]	; (8011194 <GAP_DisconnectionComplete_CB+0x4c>)
 801116c:	2200      	movs	r2, #0
 801116e:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8011170:	4b09      	ldr	r3, [pc, #36]	; (8011198 <GAP_DisconnectionComplete_CB+0x50>)
 8011172:	2200      	movs	r2, #0
 8011174:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8011176:	4b09      	ldr	r3, [pc, #36]	; (801119c <GAP_DisconnectionComplete_CB+0x54>)
 8011178:	2200      	movs	r2, #0
 801117a:	701a      	strb	r2, [r3, #0]
}
 801117c:	bf00      	nop
 801117e:	bd80      	pop	{r7, pc}
 8011180:	200000c0 	.word	0x200000c0
 8011184:	08019e28 	.word	0x08019e28
 8011188:	20000002 	.word	0x20000002
 801118c:	200000c6 	.word	0x200000c6
 8011190:	200000c7 	.word	0x200000c7
 8011194:	200000c8 	.word	0x200000c8
 8011198:	200000c9 	.word	0x200000c9
 801119c:	200000ca 	.word	0x200000ca

080111a0 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	4603      	mov	r3, r0
 80111a8:	603a      	str	r2, [r7, #0]
 80111aa:	80fb      	strh	r3, [r7, #6]
 80111ac:	460b      	mov	r3, r1
 80111ae:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 80111b0:	88fa      	ldrh	r2, [r7, #6]
 80111b2:	4b07      	ldr	r3, [pc, #28]	; (80111d0 <GATT_Notification_CB+0x30>)
 80111b4:	881b      	ldrh	r3, [r3, #0]
 80111b6:	3301      	adds	r3, #1
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d104      	bne.n	80111c6 <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 80111bc:	797b      	ldrb	r3, [r7, #5]
 80111be:	4619      	mov	r1, r3
 80111c0:	6838      	ldr	r0, [r7, #0]
 80111c2:	f7ff fe41 	bl	8010e48 <receiveData>
  }
}
 80111c6:	bf00      	nop
 80111c8:	3708      	adds	r7, #8
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	200004b8 	.word	0x200004b8

080111d4 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b08c      	sub	sp, #48	; 0x30
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80111e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e2:	3301      	adds	r3, #1
 80111e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 80111e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b04      	cmp	r3, #4
 80111ec:	f040 80f3 	bne.w	80113d6 <user_notify+0x202>
    return;

  switch(event_pckt->evt){
 80111f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	2bff      	cmp	r3, #255	; 0xff
 80111f6:	d021      	beq.n	801123c <user_notify+0x68>
 80111f8:	2bff      	cmp	r3, #255	; 0xff
 80111fa:	f300 80f1 	bgt.w	80113e0 <user_notify+0x20c>
 80111fe:	2b05      	cmp	r3, #5
 8011200:	d002      	beq.n	8011208 <user_notify+0x34>
 8011202:	2b3e      	cmp	r3, #62	; 0x3e
 8011204:	d003      	beq.n	801120e <user_notify+0x3a>
 8011206:	e0eb      	b.n	80113e0 <user_notify+0x20c>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8011208:	f7ff ff9e 	bl	8011148 <GAP_DisconnectionComplete_CB>
    }
    break;
 801120c:	e0e8      	b.n	80113e0 <user_notify+0x20c>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 801120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011210:	3302      	adds	r3, #2
 8011212:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	2b01      	cmp	r3, #1
 801121a:	f040 80de 	bne.w	80113da <user_notify+0x206>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	3301      	adds	r3, #1
 8011222:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	1d5a      	adds	r2, r3, #5
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801122e:	b29b      	uxth	r3, r3
 8011230:	4619      	mov	r1, r3
 8011232:	4610      	mov	r0, r2
 8011234:	f7ff ff54 	bl	80110e0 <GAP_ConnectionComplete_CB>
        }
        break;
 8011238:	bf00      	nop
      }
    }
    break;
 801123a:	e0ce      	b.n	80113da <user_notify+0x206>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 801123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123e:	3302      	adds	r3, #2
 8011240:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8011242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011244:	881b      	ldrh	r3, [r3, #0]
 8011246:	b29b      	uxth	r3, r3
 8011248:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 801124c:	2b13      	cmp	r3, #19
 801124e:	f200 80c6 	bhi.w	80113de <user_notify+0x20a>
 8011252:	a201      	add	r2, pc, #4	; (adr r2, 8011258 <user_notify+0x84>)
 8011254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011258:	080112bd 	.word	0x080112bd
 801125c:	080113df 	.word	0x080113df
 8011260:	080113df 	.word	0x080113df
 8011264:	080113df 	.word	0x080113df
 8011268:	080113df 	.word	0x080113df
 801126c:	080113df 	.word	0x080113df
 8011270:	080113df 	.word	0x080113df
 8011274:	080113df 	.word	0x080113df
 8011278:	080113df 	.word	0x080113df
 801127c:	080113df 	.word	0x080113df
 8011280:	080113df 	.word	0x080113df
 8011284:	080113df 	.word	0x080113df
 8011288:	080113df 	.word	0x080113df
 801128c:	080113df 	.word	0x080113df
 8011290:	080112fd 	.word	0x080112fd
 8011294:	0801138f 	.word	0x0801138f
 8011298:	080113df 	.word	0x080113df
 801129c:	0801131f 	.word	0x0801131f
 80112a0:	080113df 	.word	0x080113df
 80112a4:	080112a9 	.word	0x080112a9


      case EVT_BLUE_GATT_READ_PERMIT_REQ:
      {
    	  evt_gatt_read_permit_req *evt = (void *) blue_evt->data;
 80112a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112aa:	3302      	adds	r3, #2
 80112ac:	623b      	str	r3, [r7, #32]
    	  Read_Request_CB(evt->attr_handle);
 80112ae:	6a3b      	ldr	r3, [r7, #32]
 80112b0:	885b      	ldrh	r3, [r3, #2]
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7ff fed7 	bl	8011068 <Read_Request_CB>
      }
      break;
 80112ba:	e08b      	b.n	80113d4 <user_notify+0x200>


      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
        	//printf("EVT_BLUE_GATT_ATTRIBUTE_MODIFIED\n");
          if (bnrg_expansion_board == IDB05A1) {
 80112bc:	4b4a      	ldr	r3, [pc, #296]	; (80113e8 <user_notify+0x214>)
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	d10d      	bne.n	80112e0 <user_notify+0x10c>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 80112c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c6:	3302      	adds	r3, #2
 80112c8:	613b      	str	r3, [r7, #16]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	885b      	ldrh	r3, [r3, #2]
 80112ce:	b298      	uxth	r0, r3
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	7919      	ldrb	r1, [r3, #4]
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	3307      	adds	r3, #7
 80112d8:	461a      	mov	r2, r3
 80112da:	f7ff fe05 	bl	8010ee8 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 80112de:	e079      	b.n	80113d4 <user_notify+0x200>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 80112e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e2:	3302      	adds	r3, #2
 80112e4:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	885b      	ldrh	r3, [r3, #2]
 80112ea:	b298      	uxth	r0, r3
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	7919      	ldrb	r1, [r3, #4]
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	3305      	adds	r3, #5
 80112f4:	461a      	mov	r2, r3
 80112f6:	f7ff fdf7 	bl	8010ee8 <Attribute_Modified_CB>
        break;
 80112fa:	e06b      	b.n	80113d4 <user_notify+0x200>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 80112fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fe:	3302      	adds	r3, #2
 8011300:	61bb      	str	r3, [r7, #24]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8011308:	b298      	uxth	r0, r3
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	789b      	ldrb	r3, [r3, #2]
 801130e:	3b02      	subs	r3, #2
 8011310:	b2d9      	uxtb	r1, r3
 8011312:	69bb      	ldr	r3, [r7, #24]
 8011314:	3305      	adds	r3, #5
 8011316:	461a      	mov	r2, r3
 8011318:	f7ff ff42 	bl	80111a0 <GATT_Notification_CB>
        }
        break;
 801131c:	e05a      	b.n	80113d4 <user_notify+0x200>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 801131e:	4b33      	ldr	r3, [pc, #204]	; (80113ec <user_notify+0x218>)
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d153      	bne.n	80113ce <user_notify+0x1fa>
          printf("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");
 8011326:	4832      	ldr	r0, [pc, #200]	; (80113f0 <user_notify+0x21c>)
 8011328:	f007 fda4 	bl	8018e74 <puts>

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 801132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132e:	3302      	adds	r3, #2
 8011330:	61fb      	str	r3, [r7, #28]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8011332:	4b30      	ldr	r3, [pc, #192]	; (80113f4 <user_notify+0x220>)
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	b2db      	uxtb	r3, r3
 8011338:	2b00      	cmp	r3, #0
 801133a:	d011      	beq.n	8011360 <user_notify+0x18c>
 801133c:	4b2e      	ldr	r3, [pc, #184]	; (80113f8 <user_notify+0x224>)
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	d10c      	bne.n	8011360 <user_notify+0x18c>
          {
            tx_handle = resp->attr_handle;
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 801134c:	b29a      	uxth	r2, r3
 801134e:	4b2b      	ldr	r3, [pc, #172]	; (80113fc <user_notify+0x228>)
 8011350:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8011352:	4b2a      	ldr	r3, [pc, #168]	; (80113fc <user_notify+0x228>)
 8011354:	881b      	ldrh	r3, [r3, #0]
 8011356:	4619      	mov	r1, r3
 8011358:	4829      	ldr	r0, [pc, #164]	; (8011400 <user_notify+0x22c>)
 801135a:	f007 fcef 	bl	8018d3c <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 801135e:	e036      	b.n	80113ce <user_notify+0x1fa>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8011360:	4b28      	ldr	r3, [pc, #160]	; (8011404 <user_notify+0x230>)
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	b2db      	uxtb	r3, r3
 8011366:	2b00      	cmp	r3, #0
 8011368:	d031      	beq.n	80113ce <user_notify+0x1fa>
 801136a:	4b27      	ldr	r3, [pc, #156]	; (8011408 <user_notify+0x234>)
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	b2db      	uxtb	r3, r3
 8011370:	2b00      	cmp	r3, #0
 8011372:	d12c      	bne.n	80113ce <user_notify+0x1fa>
            rx_handle = resp->attr_handle;
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 801137a:	b29a      	uxth	r2, r3
 801137c:	4b23      	ldr	r3, [pc, #140]	; (801140c <user_notify+0x238>)
 801137e:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8011380:	4b22      	ldr	r3, [pc, #136]	; (801140c <user_notify+0x238>)
 8011382:	881b      	ldrh	r3, [r3, #0]
 8011384:	4619      	mov	r1, r3
 8011386:	4822      	ldr	r0, [pc, #136]	; (8011410 <user_notify+0x23c>)
 8011388:	f007 fcd8 	bl	8018d3c <iprintf>
        break;
 801138c:	e01f      	b.n	80113ce <user_notify+0x1fa>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 801138e:	4b17      	ldr	r3, [pc, #92]	; (80113ec <user_notify+0x218>)
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d11d      	bne.n	80113d2 <user_notify+0x1fe>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8011396:	4b17      	ldr	r3, [pc, #92]	; (80113f4 <user_notify+0x220>)
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	b2db      	uxtb	r3, r3
 801139c:	2b00      	cmp	r3, #0
 801139e:	d008      	beq.n	80113b2 <user_notify+0x1de>
 80113a0:	4b15      	ldr	r3, [pc, #84]	; (80113f8 <user_notify+0x224>)
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d103      	bne.n	80113b2 <user_notify+0x1de>
          {
            end_read_tx_char_handle = TRUE;
 80113aa:	4b13      	ldr	r3, [pc, #76]	; (80113f8 <user_notify+0x224>)
 80113ac:	2201      	movs	r2, #1
 80113ae:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 80113b0:	e00f      	b.n	80113d2 <user_notify+0x1fe>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 80113b2:	4b14      	ldr	r3, [pc, #80]	; (8011404 <user_notify+0x230>)
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d00a      	beq.n	80113d2 <user_notify+0x1fe>
 80113bc:	4b12      	ldr	r3, [pc, #72]	; (8011408 <user_notify+0x234>)
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	b2db      	uxtb	r3, r3
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d105      	bne.n	80113d2 <user_notify+0x1fe>
            end_read_rx_char_handle = TRUE;
 80113c6:	4b10      	ldr	r3, [pc, #64]	; (8011408 <user_notify+0x234>)
 80113c8:	2201      	movs	r2, #1
 80113ca:	701a      	strb	r2, [r3, #0]
        break;
 80113cc:	e001      	b.n	80113d2 <user_notify+0x1fe>
        break;
 80113ce:	bf00      	nop
 80113d0:	e005      	b.n	80113de <user_notify+0x20a>
        break;
 80113d2:	bf00      	nop
      }
    }
    break;
 80113d4:	e003      	b.n	80113de <user_notify+0x20a>
    return;
 80113d6:	bf00      	nop
 80113d8:	e002      	b.n	80113e0 <user_notify+0x20c>
    break;
 80113da:	bf00      	nop
 80113dc:	e000      	b.n	80113e0 <user_notify+0x20c>
    break;
 80113de:	bf00      	nop
  }
}
 80113e0:	3730      	adds	r7, #48	; 0x30
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	20000000 	.word	0x20000000
 80113ec:	20000001 	.word	0x20000001
 80113f0:	08019e38 	.word	0x08019e38
 80113f4:	200000c7 	.word	0x200000c7
 80113f8:	200000c9 	.word	0x200000c9
 80113fc:	200004b8 	.word	0x200004b8
 8011400:	08019e64 	.word	0x08019e64
 8011404:	200000c8 	.word	0x200000c8
 8011408:	200000ca 	.word	0x200000ca
 801140c:	200004ba 	.word	0x200004ba
 8011410:	08019e7c 	.word	0x08019e7c

08011414 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b088      	sub	sp, #32
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 801141c:	4b1e      	ldr	r3, [pc, #120]	; (8011498 <HCI_TL_SPI_Init+0x84>)
 801141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011420:	4a1d      	ldr	r2, [pc, #116]	; (8011498 <HCI_TL_SPI_Init+0x84>)
 8011422:	f043 0301 	orr.w	r3, r3, #1
 8011426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011428:	4b1b      	ldr	r3, [pc, #108]	; (8011498 <HCI_TL_SPI_Init+0x84>)
 801142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801142c:	f003 0301 	and.w	r3, r3, #1
 8011430:	60bb      	str	r3, [r7, #8]
 8011432:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8011434:	2340      	movs	r3, #64	; 0x40
 8011436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011438:	4b18      	ldr	r3, [pc, #96]	; (801149c <HCI_TL_SPI_Init+0x88>)
 801143a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801143c:	2300      	movs	r3, #0
 801143e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8011440:	f107 030c 	add.w	r3, r7, #12
 8011444:	4619      	mov	r1, r3
 8011446:	4816      	ldr	r0, [pc, #88]	; (80114a0 <HCI_TL_SPI_Init+0x8c>)
 8011448:	f003 f9d8 	bl	80147fc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 801144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011452:	2301      	movs	r3, #1
 8011454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011456:	2300      	movs	r3, #0
 8011458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801145a:	2300      	movs	r3, #0
 801145c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 801145e:	f107 030c 	add.w	r3, r7, #12
 8011462:	4619      	mov	r1, r3
 8011464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011468:	f003 f9c8 	bl	80147fc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 801146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011472:	2301      	movs	r3, #1
 8011474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011476:	2300      	movs	r3, #0
 8011478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801147a:	2300      	movs	r3, #0
 801147c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 801147e:	f107 030c 	add.w	r3, r7, #12
 8011482:	4619      	mov	r1, r3
 8011484:	4807      	ldr	r0, [pc, #28]	; (80114a4 <HCI_TL_SPI_Init+0x90>)
 8011486:	f003 f9b9 	bl	80147fc <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 801148a:	f001 f9df 	bl	801284c <BSP_SPI3_Init>
 801148e:	4603      	mov	r3, r0
}
 8011490:	4618      	mov	r0, r3
 8011492:	3720      	adds	r7, #32
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}
 8011498:	40021000 	.word	0x40021000
 801149c:	10110000 	.word	0x10110000
 80114a0:	48001000 	.word	0x48001000
 80114a4:	48000c00 	.word	0x48000c00

080114a8 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80114ac:	2140      	movs	r1, #64	; 0x40
 80114ae:	4808      	ldr	r0, [pc, #32]	; (80114d0 <HCI_TL_SPI_DeInit+0x28>)
 80114b0:	f003 fb4e 	bl	8014b50 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80114b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80114b8:	4806      	ldr	r0, [pc, #24]	; (80114d4 <HCI_TL_SPI_DeInit+0x2c>)
 80114ba:	f003 fb49 	bl	8014b50 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80114be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80114c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80114c6:	f003 fb43 	bl	8014b50 <HAL_GPIO_DeInit>
  return 0;
 80114ca:	2300      	movs	r3, #0
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	48001000 	.word	0x48001000
 80114d4:	48000c00 	.word	0x48000c00

080114d8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80114dc:	2201      	movs	r2, #1
 80114de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80114e2:	480d      	ldr	r0, [pc, #52]	; (8011518 <HCI_TL_SPI_Reset+0x40>)
 80114e4:	f003 fc40 	bl	8014d68 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80114e8:	2200      	movs	r2, #0
 80114ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80114ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80114f2:	f003 fc39 	bl	8014d68 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80114f6:	2005      	movs	r0, #5
 80114f8:	f001 fb16 	bl	8012b28 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80114fc:	2201      	movs	r2, #1
 80114fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011506:	f003 fc2f 	bl	8014d68 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 801150a:	2005      	movs	r0, #5
 801150c:	f001 fb0c 	bl	8012b28 <HAL_Delay>
  return 0;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	48000c00 	.word	0x48000c00

0801151c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b088      	sub	sp, #32
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	460b      	mov	r3, r1
 8011526:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8011528:	2300      	movs	r3, #0
 801152a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 801152c:	23ff      	movs	r3, #255	; 0xff
 801152e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8011530:	4a26      	ldr	r2, [pc, #152]	; (80115cc <HCI_TL_SPI_Receive+0xb0>)
 8011532:	f107 0314 	add.w	r3, r7, #20
 8011536:	e892 0003 	ldmia.w	r2, {r0, r1}
 801153a:	6018      	str	r0, [r3, #0]
 801153c:	3304      	adds	r3, #4
 801153e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8011540:	2200      	movs	r2, #0
 8011542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011546:	4822      	ldr	r0, [pc, #136]	; (80115d0 <HCI_TL_SPI_Receive+0xb4>)
 8011548:	f003 fc0e 	bl	8014d68 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 801154c:	f107 010c 	add.w	r1, r7, #12
 8011550:	f107 0314 	add.w	r3, r7, #20
 8011554:	2205      	movs	r2, #5
 8011556:	4618      	mov	r0, r3
 8011558:	f001 f9a8 	bl	80128ac <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 801155c:	7b3b      	ldrb	r3, [r7, #12]
 801155e:	2b02      	cmp	r3, #2
 8011560:	d129      	bne.n	80115b6 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8011562:	7c3b      	ldrb	r3, [r7, #16]
 8011564:	021b      	lsls	r3, r3, #8
 8011566:	b21a      	sxth	r2, r3
 8011568:	7bfb      	ldrb	r3, [r7, #15]
 801156a:	b21b      	sxth	r3, r3
 801156c:	4313      	orrs	r3, r2
 801156e:	b21b      	sxth	r3, r3
 8011570:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8011572:	8bfb      	ldrh	r3, [r7, #30]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d01e      	beq.n	80115b6 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8011578:	8bfa      	ldrh	r2, [r7, #30]
 801157a:	887b      	ldrh	r3, [r7, #2]
 801157c:	429a      	cmp	r2, r3
 801157e:	d901      	bls.n	8011584 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8011580:	887b      	ldrh	r3, [r7, #2]
 8011582:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8011584:	2300      	movs	r3, #0
 8011586:	777b      	strb	r3, [r7, #29]
 8011588:	e010      	b.n	80115ac <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 801158a:	f107 011b 	add.w	r1, r7, #27
 801158e:	f107 031c 	add.w	r3, r7, #28
 8011592:	2201      	movs	r2, #1
 8011594:	4618      	mov	r0, r3
 8011596:	f001 f989 	bl	80128ac <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 801159a:	7f7b      	ldrb	r3, [r7, #29]
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	4413      	add	r3, r2
 80115a0:	7efa      	ldrb	r2, [r7, #27]
 80115a2:	b2d2      	uxtb	r2, r2
 80115a4:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80115a6:	7f7b      	ldrb	r3, [r7, #29]
 80115a8:	3301      	adds	r3, #1
 80115aa:	777b      	strb	r3, [r7, #29]
 80115ac:	7f7b      	ldrb	r3, [r7, #29]
 80115ae:	b29b      	uxth	r3, r3
 80115b0:	8bfa      	ldrh	r2, [r7, #30]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d8e9      	bhi.n	801158a <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80115b6:	2201      	movs	r2, #1
 80115b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80115bc:	4804      	ldr	r0, [pc, #16]	; (80115d0 <HCI_TL_SPI_Receive+0xb4>)
 80115be:	f003 fbd3 	bl	8014d68 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80115c2:	7f7b      	ldrb	r3, [r7, #29]
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3720      	adds	r7, #32
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	08019e94 	.word	0x08019e94
 80115d0:	48000c00 	.word	0x48000c00

080115d4 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b088      	sub	sp, #32
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	460b      	mov	r3, r1
 80115de:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80115e0:	4a24      	ldr	r2, [pc, #144]	; (8011674 <HCI_TL_SPI_Send+0xa0>)
 80115e2:	f107 0310 	add.w	r3, r7, #16
 80115e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115ea:	6018      	str	r0, [r3, #0]
 80115ec:	3304      	adds	r3, #4
 80115ee:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80115f0:	f001 fa8e 	bl	8012b10 <HAL_GetTick>
 80115f4:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80115f6:	2300      	movs	r3, #0
 80115f8:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80115fa:	2200      	movs	r2, #0
 80115fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011600:	481d      	ldr	r0, [pc, #116]	; (8011678 <HCI_TL_SPI_Send+0xa4>)
 8011602:	f003 fbb1 	bl	8014d68 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8011606:	f107 0108 	add.w	r1, r7, #8
 801160a:	f107 0310 	add.w	r3, r7, #16
 801160e:	2205      	movs	r2, #5
 8011610:	4618      	mov	r0, r3
 8011612:	f001 f94b 	bl	80128ac <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8011616:	7a3b      	ldrb	r3, [r7, #8]
 8011618:	2b02      	cmp	r3, #2
 801161a:	d10f      	bne.n	801163c <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 801161c:	7a7b      	ldrb	r3, [r7, #9]
 801161e:	b29b      	uxth	r3, r3
 8011620:	887a      	ldrh	r2, [r7, #2]
 8011622:	429a      	cmp	r2, r3
 8011624:	d806      	bhi.n	8011634 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8011626:	887b      	ldrh	r3, [r7, #2]
 8011628:	461a      	mov	r2, r3
 801162a:	4914      	ldr	r1, [pc, #80]	; (801167c <HCI_TL_SPI_Send+0xa8>)
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f001 f93d 	bl	80128ac <BSP_SPI3_SendRecv>
 8011632:	e006      	b.n	8011642 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8011634:	f06f 0301 	mvn.w	r3, #1
 8011638:	61fb      	str	r3, [r7, #28]
 801163a:	e002      	b.n	8011642 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 801163c:	f04f 33ff 	mov.w	r3, #4294967295
 8011640:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8011642:	2201      	movs	r2, #1
 8011644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011648:	480b      	ldr	r0, [pc, #44]	; (8011678 <HCI_TL_SPI_Send+0xa4>)
 801164a:	f003 fb8d 	bl	8014d68 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 801164e:	f001 fa5f 	bl	8012b10 <HAL_GetTick>
 8011652:	4602      	mov	r2, r0
 8011654:	69bb      	ldr	r3, [r7, #24]
 8011656:	1ad3      	subs	r3, r2, r3
 8011658:	2b0f      	cmp	r3, #15
 801165a:	d903      	bls.n	8011664 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 801165c:	f06f 0302 	mvn.w	r3, #2
 8011660:	61fb      	str	r3, [r7, #28]
      break;
 8011662:	e002      	b.n	801166a <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	2b00      	cmp	r3, #0
 8011668:	dbc5      	blt.n	80115f6 <HCI_TL_SPI_Send+0x22>

  return result;
 801166a:	69fb      	ldr	r3, [r7, #28]
}
 801166c:	4618      	mov	r0, r3
 801166e:	3720      	adds	r7, #32
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}
 8011674:	08019e9c 	.word	0x08019e9c
 8011678:	48000c00 	.word	0x48000c00
 801167c:	200000cc 	.word	0x200000cc

08011680 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8011684:	2140      	movs	r1, #64	; 0x40
 8011686:	4805      	ldr	r0, [pc, #20]	; (801169c <IsDataAvailable+0x1c>)
 8011688:	f003 fb56 	bl	8014d38 <HAL_GPIO_ReadPin>
 801168c:	4603      	mov	r3, r0
 801168e:	2b01      	cmp	r3, #1
 8011690:	bf0c      	ite	eq
 8011692:	2301      	moveq	r3, #1
 8011694:	2300      	movne	r3, #0
 8011696:	b2db      	uxtb	r3, r3
}
 8011698:	4618      	mov	r0, r3
 801169a:	bd80      	pop	{r7, pc}
 801169c:	48001000 	.word	0x48001000

080116a0 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b088      	sub	sp, #32
 80116a4:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80116a6:	4b12      	ldr	r3, [pc, #72]	; (80116f0 <hci_tl_lowlevel_init+0x50>)
 80116a8:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80116aa:	4b12      	ldr	r3, [pc, #72]	; (80116f4 <hci_tl_lowlevel_init+0x54>)
 80116ac:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80116ae:	4b12      	ldr	r3, [pc, #72]	; (80116f8 <hci_tl_lowlevel_init+0x58>)
 80116b0:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80116b2:	4b12      	ldr	r3, [pc, #72]	; (80116fc <hci_tl_lowlevel_init+0x5c>)
 80116b4:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80116b6:	4b12      	ldr	r3, [pc, #72]	; (8011700 <hci_tl_lowlevel_init+0x60>)
 80116b8:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80116ba:	4b12      	ldr	r3, [pc, #72]	; (8011704 <hci_tl_lowlevel_init+0x64>)
 80116bc:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80116be:	1d3b      	adds	r3, r7, #4
 80116c0:	4618      	mov	r0, r3
 80116c2:	f006 fdb9 	bl	8018238 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 80116c6:	4910      	ldr	r1, [pc, #64]	; (8011708 <hci_tl_lowlevel_init+0x68>)
 80116c8:	4810      	ldr	r0, [pc, #64]	; (801170c <hci_tl_lowlevel_init+0x6c>)
 80116ca:	f002 fdbf 	bl	801424c <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80116ce:	4a10      	ldr	r2, [pc, #64]	; (8011710 <hci_tl_lowlevel_init+0x70>)
 80116d0:	2100      	movs	r1, #0
 80116d2:	480e      	ldr	r0, [pc, #56]	; (801170c <hci_tl_lowlevel_init+0x6c>)
 80116d4:	f002 fda0 	bl	8014218 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80116d8:	2200      	movs	r2, #0
 80116da:	2100      	movs	r1, #0
 80116dc:	2017      	movs	r0, #23
 80116de:	f002 fd24 	bl	801412a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80116e2:	2017      	movs	r0, #23
 80116e4:	f002 fd3d 	bl	8014162 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80116e8:	bf00      	nop
 80116ea:	3720      	adds	r7, #32
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	08011415 	.word	0x08011415
 80116f4:	080114a9 	.word	0x080114a9
 80116f8:	080115d5 	.word	0x080115d5
 80116fc:	0801151d 	.word	0x0801151d
 8011700:	080114d9 	.word	0x080114d9
 8011704:	080128ed 	.word	0x080128ed
 8011708:	16000006 	.word	0x16000006
 801170c:	20000538 	.word	0x20000538
 8011710:	08011715 	.word	0x08011715

08011714 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	af00      	add	r7, sp, #0
	extern volatile uint8_t SPIwasLocked;
	if (hspi3.Lock == HAL_LOCKED){
 8011718:	4b0b      	ldr	r3, [pc, #44]	; (8011748 <hci_tl_lowlevel_isr+0x34>)
 801171a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801171e:	2b01      	cmp	r3, #1
 8011720:	d109      	bne.n	8011736 <hci_tl_lowlevel_isr+0x22>
	             SPIwasLocked = 1;
 8011722:	4b0a      	ldr	r3, [pc, #40]	; (801174c <hci_tl_lowlevel_isr+0x38>)
 8011724:	2201      	movs	r2, #1
 8011726:	701a      	strb	r2, [r3, #0]
	             return;
 8011728:	e00c      	b.n	8011744 <hci_tl_lowlevel_isr+0x30>
	      }
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
  {
    if (hci_notify_asynch_evt(NULL))
 801172a:	2000      	movs	r0, #0
 801172c:	f006 feea 	bl	8018504 <hci_notify_asynch_evt>
 8011730:	4603      	mov	r3, r0
 8011732:	2b00      	cmp	r3, #0
 8011734:	d105      	bne.n	8011742 <hci_tl_lowlevel_isr+0x2e>
  while(IsDataAvailable())
 8011736:	f7ff ffa3 	bl	8011680 <IsDataAvailable>
 801173a:	4603      	mov	r3, r0
 801173c:	2b00      	cmp	r3, #0
 801173e:	d1f4      	bne.n	801172a <hci_tl_lowlevel_isr+0x16>
 8011740:	e000      	b.n	8011744 <hci_tl_lowlevel_isr+0x30>
    {
      return;
 8011742:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	20000628 	.word	0x20000628
 801174c:	200000bc 	.word	0x200000bc

08011750 <Potato_Readadc>:
#define POTATO_ADC_EN

extern ADC_HandleTypeDef hadc1;


long Potato_Readadc(void){
 8011750:	b580      	push	{r7, lr}
 8011752:	b086      	sub	sp, #24
 8011754:	af00      	add	r7, sp, #0
	volatile long adc_value = 0;
 8011756:	2300      	movs	r3, #0
 8011758:	603b      	str	r3, [r7, #0]
	double V_per_adcvalue = 0.805;
 801175a:	a32a      	add	r3, pc, #168	; (adr r3, 8011804 <Potato_Readadc+0xb4>)
 801175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011760:	e9c7 2302 	strd	r2, r3, [r7, #8]
	long real_A = 0;
 8011764:	2300      	movs	r3, #0
 8011766:	607b      	str	r3, [r7, #4]
	//uint8_t *buffer[30] = {0,};

	adc_value = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	603b      	str	r3, [r7, #0]
	adc_value += HAL_ADC_GetValue(&hadc1);

	//return adc_value;
*/

	for(uint8_t i = 0; i<10; i++){
 801176c:	2300      	movs	r3, #0
 801176e:	75fb      	strb	r3, [r7, #23]
 8011770:	e013      	b.n	801179a <Potato_Readadc+0x4a>
		HAL_ADC_Start(&hadc1);
 8011772:	4821      	ldr	r0, [pc, #132]	; (80117f8 <Potato_Readadc+0xa8>)
 8011774:	f001 fd36 	bl	80131e4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8011778:	2164      	movs	r1, #100	; 0x64
 801177a:	481f      	ldr	r0, [pc, #124]	; (80117f8 <Potato_Readadc+0xa8>)
 801177c:	f001 fdec 	bl	8013358 <HAL_ADC_PollForConversion>
		adc_value += HAL_ADC_GetValue(&hadc1);
 8011780:	481d      	ldr	r0, [pc, #116]	; (80117f8 <Potato_Readadc+0xa8>)
 8011782:	f001 fec1 	bl	8013508 <HAL_ADC_GetValue>
 8011786:	4603      	mov	r3, r0
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	4413      	add	r3, r2
 801178c:	603b      	str	r3, [r7, #0]
		HAL_Delay(10);
 801178e:	200a      	movs	r0, #10
 8011790:	f001 f9ca 	bl	8012b28 <HAL_Delay>
	for(uint8_t i = 0; i<10; i++){
 8011794:	7dfb      	ldrb	r3, [r7, #23]
 8011796:	3301      	adds	r3, #1
 8011798:	75fb      	strb	r3, [r7, #23]
 801179a:	7dfb      	ldrb	r3, [r7, #23]
 801179c:	2b09      	cmp	r3, #9
 801179e:	d9e8      	bls.n	8011772 <Potato_Readadc+0x22>
	}

	adc_value = (adc_value/10U);
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	461a      	mov	r2, r3
 80117a4:	4b15      	ldr	r3, [pc, #84]	; (80117fc <Potato_Readadc+0xac>)
 80117a6:	fba3 2302 	umull	r2, r3, r3, r2
 80117aa:	08db      	lsrs	r3, r3, #3
 80117ac:	603b      	str	r3, [r7, #0]
	/*
	sprintf(buffer,"adc_val_raw = %d\n",adc_value);
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 20);
	*/
	//adc_value -= 3065;
	adc_value -= 3005;
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	f6a3 33bd 	subw	r3, r3, #3005	; 0xbbd
 80117b4:	603b      	str	r3, [r7, #0]
	real_A = (long)(((double)adc_value * V_per_adcvalue)*10);
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7fe ffdd 	bl	8010778 <__aeabi_i2d>
 80117be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80117c2:	f7fe fd5d 	bl	8010280 <__aeabi_dmul>
 80117c6:	4602      	mov	r2, r0
 80117c8:	460b      	mov	r3, r1
 80117ca:	4610      	mov	r0, r2
 80117cc:	4619      	mov	r1, r3
 80117ce:	f04f 0200 	mov.w	r2, #0
 80117d2:	4b0b      	ldr	r3, [pc, #44]	; (8011800 <Potato_Readadc+0xb0>)
 80117d4:	f7fe fd54 	bl	8010280 <__aeabi_dmul>
 80117d8:	4602      	mov	r2, r0
 80117da:	460b      	mov	r3, r1
 80117dc:	4610      	mov	r0, r2
 80117de:	4619      	mov	r1, r3
 80117e0:	f7ff f834 	bl	801084c <__aeabi_d2iz>
 80117e4:	4603      	mov	r3, r0
 80117e6:	607b      	str	r3, [r7, #4]
	*/
	/*
	sprintf(buffer,"real_A = %d mA\n\n",real_A);
	HAL_UART_Transmit(&hDiscoUart, buffer, strlen(buffer), 20);
	*/
	return real_A;
 80117e8:	687b      	ldr	r3, [r7, #4]

	//HAL_Delay(1000);

}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3718      	adds	r7, #24
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	f3af 8000 	nop.w
 80117f8:	20000540 	.word	0x20000540
 80117fc:	cccccccd 	.word	0xcccccccd
 8011800:	40240000 	.word	0x40240000
 8011804:	5c28f5c3 	.word	0x5c28f5c3
 8011808:	3fe9c28f 	.word	0x3fe9c28f

0801180c <crcSlow>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
 801180c:	b480      	push	{r7}
 801180e:	b087      	sub	sp, #28
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
    crc            remainder = INITIAL_REMAINDER;
 8011816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801181a:	82fb      	strh	r3, [r7, #22]


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 801181c:	2300      	movs	r3, #0
 801181e:	613b      	str	r3, [r7, #16]
 8011820:	e027      	b.n	8011872 <crcSlow+0x66>
    {
        /*
         * Bring the next byte into the remainder.
         */
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	4413      	add	r3, r2
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	021b      	lsls	r3, r3, #8
 801182c:	b21a      	sxth	r2, r3
 801182e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011832:	4053      	eors	r3, r2
 8011834:	b21b      	sxth	r3, r3
 8011836:	82fb      	strh	r3, [r7, #22]

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
 8011838:	2308      	movs	r3, #8
 801183a:	73fb      	strb	r3, [r7, #15]
 801183c:	e013      	b.n	8011866 <crcSlow+0x5a>
        {
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
 801183e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011842:	2b00      	cmp	r3, #0
 8011844:	da09      	bge.n	801185a <crcSlow+0x4e>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8011846:	8afb      	ldrh	r3, [r7, #22]
 8011848:	005b      	lsls	r3, r3, #1
 801184a:	b21b      	sxth	r3, r3
 801184c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8011850:	f083 0301 	eor.w	r3, r3, #1
 8011854:	b21b      	sxth	r3, r3
 8011856:	82fb      	strh	r3, [r7, #22]
 8011858:	e002      	b.n	8011860 <crcSlow+0x54>
            }
            else
            {
                remainder = (remainder << 1);
 801185a:	8afb      	ldrh	r3, [r7, #22]
 801185c:	005b      	lsls	r3, r3, #1
 801185e:	82fb      	strh	r3, [r7, #22]
        for (bit = 8; bit > 0; --bit)
 8011860:	7bfb      	ldrb	r3, [r7, #15]
 8011862:	3b01      	subs	r3, #1
 8011864:	73fb      	strb	r3, [r7, #15]
 8011866:	7bfb      	ldrb	r3, [r7, #15]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1e8      	bne.n	801183e <crcSlow+0x32>
    for (byte = 0; byte < nBytes; ++byte)
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	3301      	adds	r3, #1
 8011870:	613b      	str	r3, [r7, #16]
 8011872:	693a      	ldr	r2, [r7, #16]
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	429a      	cmp	r2, r3
 8011878:	dbd3      	blt.n	8011822 <crcSlow+0x16>
    }

    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
 801187a:	8afb      	ldrh	r3, [r7, #22]

}   /* crcSlow() */
 801187c:	4618      	mov	r0, r3
 801187e:	371c      	adds	r7, #28
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr

08011888 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _write(int file, char *ptr, int len)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	af00      	add	r7, sp, #0
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	60b9      	str	r1, [r7, #8]
 8011892:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 500);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	b29a      	uxth	r2, r3
 8011898:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801189c:	68b9      	ldr	r1, [r7, #8]
 801189e:	4803      	ldr	r0, [pc, #12]	; (80118ac <_write+0x24>)
 80118a0:	f005 fb60 	bl	8016f64 <HAL_UART_Transmit>
}
 80118a4:	bf00      	nop
 80118a6:	3710      	adds	r7, #16
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	200005a4 	.word	0x200005a4

080118b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80118b4:	f001 f8c4 	bl	8012a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80118b8:	f000 f810 	bl	80118dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80118bc:	f000 f906 	bl	8011acc <MX_GPIO_Init>
  MX_ADC1_Init();
 80118c0:	f000 f85e 	bl	8011980 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80118c4:	f000 f8d2 	bl	8011a6c <MX_USART1_UART_Init>
  MX_BlueNRG_MS_Init();
 80118c8:	f7ff f964 	bl	8010b94 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  printf("while start\n");
 80118cc:	4802      	ldr	r0, [pc, #8]	; (80118d8 <main+0x28>)
 80118ce:	f007 fad1 	bl	8018e74 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 80118d2:	f7ff f9b1 	bl	8010c38 <MX_BlueNRG_MS_Process>
 80118d6:	e7fc      	b.n	80118d2 <main+0x22>
 80118d8:	08019ea4 	.word	0x08019ea4

080118dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b096      	sub	sp, #88	; 0x58
 80118e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80118e2:	f107 0314 	add.w	r3, r7, #20
 80118e6:	2244      	movs	r2, #68	; 0x44
 80118e8:	2100      	movs	r1, #0
 80118ea:	4618      	mov	r0, r3
 80118ec:	f007 f973 	bl	8018bd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80118f0:	463b      	mov	r3, r7
 80118f2:	2200      	movs	r2, #0
 80118f4:	601a      	str	r2, [r3, #0]
 80118f6:	605a      	str	r2, [r3, #4]
 80118f8:	609a      	str	r2, [r3, #8]
 80118fa:	60da      	str	r2, [r3, #12]
 80118fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80118fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011902:	f003 fa95 	bl	8014e30 <HAL_PWREx_ControlVoltageScaling>
 8011906:	4603      	mov	r3, r0
 8011908:	2b00      	cmp	r3, #0
 801190a:	d001      	beq.n	8011910 <SystemClock_Config+0x34>
  {
    Error_Handler();
 801190c:	f000 fac0 	bl	8011e90 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8011910:	2310      	movs	r3, #16
 8011912:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8011914:	2301      	movs	r3, #1
 8011916:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8011918:	2300      	movs	r3, #0
 801191a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 801191c:	2360      	movs	r3, #96	; 0x60
 801191e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011920:	2302      	movs	r3, #2
 8011922:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8011924:	2301      	movs	r3, #1
 8011926:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8011928:	2301      	movs	r3, #1
 801192a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 801192c:	2328      	movs	r3, #40	; 0x28
 801192e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8011930:	2307      	movs	r3, #7
 8011932:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8011934:	2302      	movs	r3, #2
 8011936:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8011938:	2302      	movs	r3, #2
 801193a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801193c:	f107 0314 	add.w	r3, r7, #20
 8011940:	4618      	mov	r0, r3
 8011942:	f003 facb 	bl	8014edc <HAL_RCC_OscConfig>
 8011946:	4603      	mov	r3, r0
 8011948:	2b00      	cmp	r3, #0
 801194a:	d001      	beq.n	8011950 <SystemClock_Config+0x74>
  {
    Error_Handler();
 801194c:	f000 faa0 	bl	8011e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011950:	230f      	movs	r3, #15
 8011952:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011954:	2303      	movs	r3, #3
 8011956:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011958:	2300      	movs	r3, #0
 801195a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801195c:	2300      	movs	r3, #0
 801195e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8011960:	2300      	movs	r3, #0
 8011962:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8011964:	463b      	mov	r3, r7
 8011966:	2104      	movs	r1, #4
 8011968:	4618      	mov	r0, r3
 801196a:	f003 fe9d 	bl	80156a8 <HAL_RCC_ClockConfig>
 801196e:	4603      	mov	r3, r0
 8011970:	2b00      	cmp	r3, #0
 8011972:	d001      	beq.n	8011978 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8011974:	f000 fa8c 	bl	8011e90 <Error_Handler>
  }
}
 8011978:	bf00      	nop
 801197a:	3758      	adds	r7, #88	; 0x58
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b08a      	sub	sp, #40	; 0x28
 8011984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8011986:	f107 031c 	add.w	r3, r7, #28
 801198a:	2200      	movs	r2, #0
 801198c:	601a      	str	r2, [r3, #0]
 801198e:	605a      	str	r2, [r3, #4]
 8011990:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8011992:	1d3b      	adds	r3, r7, #4
 8011994:	2200      	movs	r2, #0
 8011996:	601a      	str	r2, [r3, #0]
 8011998:	605a      	str	r2, [r3, #4]
 801199a:	609a      	str	r2, [r3, #8]
 801199c:	60da      	str	r2, [r3, #12]
 801199e:	611a      	str	r2, [r3, #16]
 80119a0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80119a2:	4b2f      	ldr	r3, [pc, #188]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119a4:	4a2f      	ldr	r2, [pc, #188]	; (8011a64 <MX_ADC1_Init+0xe4>)
 80119a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80119a8:	4b2d      	ldr	r3, [pc, #180]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119aa:	2200      	movs	r2, #0
 80119ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80119ae:	4b2c      	ldr	r3, [pc, #176]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119b0:	2200      	movs	r2, #0
 80119b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80119b4:	4b2a      	ldr	r3, [pc, #168]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119b6:	2200      	movs	r2, #0
 80119b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80119ba:	4b29      	ldr	r3, [pc, #164]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119bc:	2200      	movs	r2, #0
 80119be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80119c0:	4b27      	ldr	r3, [pc, #156]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119c2:	2204      	movs	r2, #4
 80119c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80119c6:	4b26      	ldr	r3, [pc, #152]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119c8:	2200      	movs	r2, #0
 80119ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80119cc:	4b24      	ldr	r3, [pc, #144]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119ce:	2200      	movs	r2, #0
 80119d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80119d2:	4b23      	ldr	r3, [pc, #140]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119d4:	2201      	movs	r2, #1
 80119d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80119d8:	4b21      	ldr	r3, [pc, #132]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119da:	2200      	movs	r2, #0
 80119dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80119e0:	4b1f      	ldr	r3, [pc, #124]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119e2:	2200      	movs	r2, #0
 80119e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80119e6:	4b1e      	ldr	r3, [pc, #120]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119e8:	2200      	movs	r2, #0
 80119ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80119ec:	4b1c      	ldr	r3, [pc, #112]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119ee:	2200      	movs	r2, #0
 80119f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80119f4:	4b1a      	ldr	r3, [pc, #104]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119f6:	2200      	movs	r2, #0
 80119f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80119fa:	4b19      	ldr	r3, [pc, #100]	; (8011a60 <MX_ADC1_Init+0xe0>)
 80119fc:	2200      	movs	r2, #0
 80119fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011a02:	4817      	ldr	r0, [pc, #92]	; (8011a60 <MX_ADC1_Init+0xe0>)
 8011a04:	f001 fa98 	bl	8012f38 <HAL_ADC_Init>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d001      	beq.n	8011a12 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8011a0e:	f000 fa3f 	bl	8011e90 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8011a12:	2300      	movs	r3, #0
 8011a14:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8011a16:	f107 031c 	add.w	r3, r7, #28
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	4810      	ldr	r0, [pc, #64]	; (8011a60 <MX_ADC1_Init+0xe0>)
 8011a1e:	f002 f9f9 	bl	8013e14 <HAL_ADCEx_MultiModeConfigChannel>
 8011a22:	4603      	mov	r3, r0
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d001      	beq.n	8011a2c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8011a28:	f000 fa32 	bl	8011e90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8011a2c:	4b0e      	ldr	r3, [pc, #56]	; (8011a68 <MX_ADC1_Init+0xe8>)
 8011a2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8011a30:	2306      	movs	r3, #6
 8011a32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8011a34:	2300      	movs	r3, #0
 8011a36:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8011a38:	237f      	movs	r3, #127	; 0x7f
 8011a3a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8011a3c:	2304      	movs	r3, #4
 8011a3e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8011a40:	2300      	movs	r3, #0
 8011a42:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011a44:	1d3b      	adds	r3, r7, #4
 8011a46:	4619      	mov	r1, r3
 8011a48:	4805      	ldr	r0, [pc, #20]	; (8011a60 <MX_ADC1_Init+0xe0>)
 8011a4a:	f001 fd6b 	bl	8013524 <HAL_ADC_ConfigChannel>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d001      	beq.n	8011a58 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8011a54:	f000 fa1c 	bl	8011e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8011a58:	bf00      	nop
 8011a5a:	3728      	adds	r7, #40	; 0x28
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	20000540 	.word	0x20000540
 8011a64:	50040000 	.word	0x50040000
 8011a68:	04300002 	.word	0x04300002

08011a6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8011a70:	4b14      	ldr	r3, [pc, #80]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011a72:	4a15      	ldr	r2, [pc, #84]	; (8011ac8 <MX_USART1_UART_Init+0x5c>)
 8011a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011a76:	4b13      	ldr	r3, [pc, #76]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011a7e:	4b11      	ldr	r3, [pc, #68]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011a80:	2200      	movs	r2, #0
 8011a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011a84:	4b0f      	ldr	r3, [pc, #60]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8011a8a:	4b0e      	ldr	r3, [pc, #56]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011a90:	4b0c      	ldr	r3, [pc, #48]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011a92:	220c      	movs	r2, #12
 8011a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011a96:	4b0b      	ldr	r3, [pc, #44]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011a98:	2200      	movs	r2, #0
 8011a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8011a9c:	4b09      	ldr	r3, [pc, #36]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011aa2:	4b08      	ldr	r3, [pc, #32]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011aa8:	4b06      	ldr	r3, [pc, #24]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011aaa:	2200      	movs	r2, #0
 8011aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8011aae:	4805      	ldr	r0, [pc, #20]	; (8011ac4 <MX_USART1_UART_Init+0x58>)
 8011ab0:	f005 fa0a 	bl	8016ec8 <HAL_UART_Init>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d001      	beq.n	8011abe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8011aba:	f000 f9e9 	bl	8011e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8011abe:	bf00      	nop
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	200005a4 	.word	0x200005a4
 8011ac8:	40013800 	.word	0x40013800

08011acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b08a      	sub	sp, #40	; 0x28
 8011ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ad2:	f107 0314 	add.w	r3, r7, #20
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	601a      	str	r2, [r3, #0]
 8011ada:	605a      	str	r2, [r3, #4]
 8011adc:	609a      	str	r2, [r3, #8]
 8011ade:	60da      	str	r2, [r3, #12]
 8011ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8011ae2:	4bba      	ldr	r3, [pc, #744]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ae6:	4ab9      	ldr	r2, [pc, #740]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011ae8:	f043 0310 	orr.w	r3, r3, #16
 8011aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011aee:	4bb7      	ldr	r3, [pc, #732]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011af2:	f003 0310 	and.w	r3, r3, #16
 8011af6:	613b      	str	r3, [r7, #16]
 8011af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011afa:	4bb4      	ldr	r3, [pc, #720]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011afe:	4ab3      	ldr	r2, [pc, #716]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b00:	f043 0304 	orr.w	r3, r3, #4
 8011b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b06:	4bb1      	ldr	r3, [pc, #708]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b0a:	f003 0304 	and.w	r3, r3, #4
 8011b0e:	60fb      	str	r3, [r7, #12]
 8011b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b12:	4bae      	ldr	r3, [pc, #696]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b16:	4aad      	ldr	r2, [pc, #692]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b18:	f043 0301 	orr.w	r3, r3, #1
 8011b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b1e:	4bab      	ldr	r3, [pc, #684]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b22:	f003 0301 	and.w	r3, r3, #1
 8011b26:	60bb      	str	r3, [r7, #8]
 8011b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011b2a:	4ba8      	ldr	r3, [pc, #672]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b2e:	4aa7      	ldr	r2, [pc, #668]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b30:	f043 0302 	orr.w	r3, r3, #2
 8011b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b36:	4ba5      	ldr	r3, [pc, #660]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b3a:	f003 0302 	and.w	r3, r3, #2
 8011b3e:	607b      	str	r3, [r7, #4]
 8011b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011b42:	4ba2      	ldr	r3, [pc, #648]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b46:	4aa1      	ldr	r2, [pc, #644]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b48:	f043 0308 	orr.w	r3, r3, #8
 8011b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b4e:	4b9f      	ldr	r3, [pc, #636]	; (8011dcc <MX_GPIO_Init+0x300>)
 8011b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b52:	f003 0308 	and.w	r3, r3, #8
 8011b56:	603b      	str	r3, [r7, #0]
 8011b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8011b60:	489b      	ldr	r0, [pc, #620]	; (8011dd0 <MX_GPIO_Init+0x304>)
 8011b62:	f003 f901 	bl	8014d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8011b66:	2200      	movs	r2, #0
 8011b68:	f248 1104 	movw	r1, #33028	; 0x8104
 8011b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011b70:	f003 f8fa 	bl	8014d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8011b74:	2200      	movs	r2, #0
 8011b76:	f24b 0114 	movw	r1, #45076	; 0xb014
 8011b7a:	4896      	ldr	r0, [pc, #600]	; (8011dd4 <MX_GPIO_Init+0x308>)
 8011b7c:	f003 f8f4 	bl	8014d68 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8011b80:	2200      	movs	r2, #0
 8011b82:	f241 0181 	movw	r1, #4225	; 0x1081
 8011b86:	4894      	ldr	r0, [pc, #592]	; (8011dd8 <MX_GPIO_Init+0x30c>)
 8011b88:	f003 f8ee 	bl	8014d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8011b8c:	2201      	movs	r2, #1
 8011b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011b92:	4891      	ldr	r0, [pc, #580]	; (8011dd8 <MX_GPIO_Init+0x30c>)
 8011b94:	f003 f8e8 	bl	8014d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8011b98:	2200      	movs	r2, #0
 8011b9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011b9e:	488f      	ldr	r0, [pc, #572]	; (8011ddc <MX_GPIO_Init+0x310>)
 8011ba0:	f003 f8e2 	bl	8014d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	2120      	movs	r1, #32
 8011ba8:	488a      	ldr	r0, [pc, #552]	; (8011dd4 <MX_GPIO_Init+0x308>)
 8011baa:	f003 f8dd 	bl	8014d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8011bae:	2201      	movs	r2, #1
 8011bb0:	2101      	movs	r1, #1
 8011bb2:	4887      	ldr	r0, [pc, #540]	; (8011dd0 <MX_GPIO_Init+0x304>)
 8011bb4:	f003 f8d8 	bl	8014d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8011bb8:	f240 1315 	movw	r3, #277	; 0x115
 8011bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011bca:	f107 0314 	add.w	r3, r7, #20
 8011bce:	4619      	mov	r1, r3
 8011bd0:	487f      	ldr	r0, [pc, #508]	; (8011dd0 <MX_GPIO_Init+0x304>)
 8011bd2:	f002 fe13 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8011bd6:	236a      	movs	r3, #106	; 0x6a
 8011bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011bda:	4b81      	ldr	r3, [pc, #516]	; (8011de0 <MX_GPIO_Init+0x314>)
 8011bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bde:	2300      	movs	r3, #0
 8011be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011be2:	f107 0314 	add.w	r3, r7, #20
 8011be6:	4619      	mov	r1, r3
 8011be8:	4879      	ldr	r0, [pc, #484]	; (8011dd0 <MX_GPIO_Init+0x304>)
 8011bea:	f002 fe07 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8011bee:	2303      	movs	r3, #3
 8011bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bf2:	2302      	movs	r3, #2
 8011bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bfa:	2303      	movs	r3, #3
 8011bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8011bfe:	2308      	movs	r3, #8
 8011c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c02:	f107 0314 	add.w	r3, r7, #20
 8011c06:	4619      	mov	r1, r3
 8011c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011c0c:	f002 fdf6 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8011c10:	f248 1304 	movw	r3, #33028	; 0x8104
 8011c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c16:	2301      	movs	r3, #1
 8011c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c22:	f107 0314 	add.w	r3, r7, #20
 8011c26:	4619      	mov	r1, r3
 8011c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011c2c:	f002 fde6 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8011c30:	2308      	movs	r3, #8
 8011c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c34:	2302      	movs	r3, #2
 8011c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011c40:	2301      	movs	r3, #1
 8011c42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8011c44:	f107 0314 	add.w	r3, r7, #20
 8011c48:	4619      	mov	r1, r3
 8011c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011c4e:	f002 fdd5 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8011c52:	23e0      	movs	r3, #224	; 0xe0
 8011c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c56:	2302      	movs	r3, #2
 8011c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c5e:	2303      	movs	r3, #3
 8011c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011c62:	2305      	movs	r3, #5
 8011c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c66:	f107 0314 	add.w	r3, r7, #20
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011c70:	f002 fdc4 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8011c74:	2301      	movs	r3, #1
 8011c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011c78:	4b59      	ldr	r3, [pc, #356]	; (8011de0 <MX_GPIO_Init+0x314>)
 8011c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8011c80:	f107 0314 	add.w	r3, r7, #20
 8011c84:	4619      	mov	r1, r3
 8011c86:	4853      	ldr	r0, [pc, #332]	; (8011dd4 <MX_GPIO_Init+0x308>)
 8011c88:	f002 fdb8 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8011c8c:	f24b 0334 	movw	r3, #45108	; 0xb034
 8011c90:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c92:	2301      	movs	r3, #1
 8011c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c96:	2300      	movs	r3, #0
 8011c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011c9e:	f107 0314 	add.w	r3, r7, #20
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	484b      	ldr	r0, [pc, #300]	; (8011dd4 <MX_GPIO_Init+0x308>)
 8011ca6:	f002 fda9 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8011caa:	f44f 7320 	mov.w	r3, #640	; 0x280
 8011cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cb0:	2302      	movs	r3, #2
 8011cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8011cbc:	2306      	movs	r3, #6
 8011cbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011cc0:	f107 0314 	add.w	r3, r7, #20
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	4842      	ldr	r0, [pc, #264]	; (8011dd0 <MX_GPIO_Init+0x304>)
 8011cc8:	f002 fd98 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8011ccc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8011cd0:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cd2:	2302      	movs	r3, #2
 8011cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011cda:	2303      	movs	r3, #3
 8011cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8011cde:	230a      	movs	r3, #10
 8011ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011ce2:	f107 0314 	add.w	r3, r7, #20
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	4839      	ldr	r0, [pc, #228]	; (8011dd0 <MX_GPIO_Init+0x304>)
 8011cea:	f002 fd87 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8011cee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8011cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011cf4:	2312      	movs	r3, #18
 8011cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011cfc:	2303      	movs	r3, #3
 8011cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8011d00:	2304      	movs	r3, #4
 8011d02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d04:	f107 0314 	add.w	r3, r7, #20
 8011d08:	4619      	mov	r1, r3
 8011d0a:	4832      	ldr	r0, [pc, #200]	; (8011dd4 <MX_GPIO_Init+0x308>)
 8011d0c:	f002 fd76 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8011d10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d16:	2302      	movs	r3, #2
 8011d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d1e:	2303      	movs	r3, #3
 8011d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8011d22:	2307      	movs	r3, #7
 8011d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011d26:	f107 0314 	add.w	r3, r7, #20
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	482a      	ldr	r0, [pc, #168]	; (8011dd8 <MX_GPIO_Init+0x30c>)
 8011d2e:	f002 fd65 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8011d32:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8011d36:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011d38:	4b29      	ldr	r3, [pc, #164]	; (8011de0 <MX_GPIO_Init+0x314>)
 8011d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011d40:	f107 0314 	add.w	r3, r7, #20
 8011d44:	4619      	mov	r1, r3
 8011d46:	4824      	ldr	r0, [pc, #144]	; (8011dd8 <MX_GPIO_Init+0x30c>)
 8011d48:	f002 fd58 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8011d4c:	f243 0381 	movw	r3, #12417	; 0x3081
 8011d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d52:	2301      	movs	r3, #1
 8011d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d56:	2300      	movs	r3, #0
 8011d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011d5e:	f107 0314 	add.w	r3, r7, #20
 8011d62:	4619      	mov	r1, r3
 8011d64:	481c      	ldr	r0, [pc, #112]	; (8011dd8 <MX_GPIO_Init+0x30c>)
 8011d66:	f002 fd49 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8011d6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8011d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d70:	2301      	movs	r3, #1
 8011d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d74:	2300      	movs	r3, #0
 8011d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011d7c:	f107 0314 	add.w	r3, r7, #20
 8011d80:	4619      	mov	r1, r3
 8011d82:	4816      	ldr	r0, [pc, #88]	; (8011ddc <MX_GPIO_Init+0x310>)
 8011d84:	f002 fd3a 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8011d88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8011d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011d8e:	4b14      	ldr	r3, [pc, #80]	; (8011de0 <MX_GPIO_Init+0x314>)
 8011d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d92:	2300      	movs	r3, #0
 8011d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011d96:	f107 0314 	add.w	r3, r7, #20
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	480f      	ldr	r0, [pc, #60]	; (8011ddc <MX_GPIO_Init+0x310>)
 8011d9e:	f002 fd2d 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8011da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011da8:	2300      	movs	r3, #0
 8011daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dac:	2300      	movs	r3, #0
 8011dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011db0:	f107 0314 	add.w	r3, r7, #20
 8011db4:	4619      	mov	r1, r3
 8011db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011dba:	f002 fd1f 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8011dbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011dc4:	2302      	movs	r3, #2
 8011dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	e00b      	b.n	8011de4 <MX_GPIO_Init+0x318>
 8011dcc:	40021000 	.word	0x40021000
 8011dd0:	48001000 	.word	0x48001000
 8011dd4:	48000400 	.word	0x48000400
 8011dd8:	48000c00 	.word	0x48000c00
 8011ddc:	48000800 	.word	0x48000800
 8011de0:	10110000 	.word	0x10110000
 8011de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011de6:	2303      	movs	r3, #3
 8011de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011dea:	230a      	movs	r3, #10
 8011dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011dee:	f107 0314 	add.w	r3, r7, #20
 8011df2:	4619      	mov	r1, r3
 8011df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011df8:	f002 fd00 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8011dfc:	2302      	movs	r3, #2
 8011dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e00:	2302      	movs	r3, #2
 8011e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e04:	2300      	movs	r3, #0
 8011e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e08:	2303      	movs	r3, #3
 8011e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011e0c:	2305      	movs	r3, #5
 8011e0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8011e10:	f107 0314 	add.w	r3, r7, #20
 8011e14:	4619      	mov	r1, r3
 8011e16:	481c      	ldr	r0, [pc, #112]	; (8011e88 <MX_GPIO_Init+0x3bc>)
 8011e18:	f002 fcf0 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8011e1c:	2378      	movs	r3, #120	; 0x78
 8011e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e20:	2302      	movs	r3, #2
 8011e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e24:	2300      	movs	r3, #0
 8011e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e28:	2303      	movs	r3, #3
 8011e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011e2c:	2307      	movs	r3, #7
 8011e2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011e30:	f107 0314 	add.w	r3, r7, #20
 8011e34:	4619      	mov	r1, r3
 8011e36:	4814      	ldr	r0, [pc, #80]	; (8011e88 <MX_GPIO_Init+0x3bc>)
 8011e38:	f002 fce0 	bl	80147fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8011e3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011e42:	2312      	movs	r3, #18
 8011e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e46:	2300      	movs	r3, #0
 8011e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e4a:	2303      	movs	r3, #3
 8011e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011e4e:	2304      	movs	r3, #4
 8011e50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011e52:	f107 0314 	add.w	r3, r7, #20
 8011e56:	4619      	mov	r1, r3
 8011e58:	480c      	ldr	r0, [pc, #48]	; (8011e8c <MX_GPIO_Init+0x3c0>)
 8011e5a:	f002 fccf 	bl	80147fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8011e5e:	2200      	movs	r2, #0
 8011e60:	2100      	movs	r1, #0
 8011e62:	2017      	movs	r0, #23
 8011e64:	f002 f961 	bl	801412a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8011e68:	2017      	movs	r0, #23
 8011e6a:	f002 f97a 	bl	8014162 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8011e6e:	2200      	movs	r2, #0
 8011e70:	2100      	movs	r1, #0
 8011e72:	2028      	movs	r0, #40	; 0x28
 8011e74:	f002 f959 	bl	801412a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8011e78:	2028      	movs	r0, #40	; 0x28
 8011e7a:	f002 f972 	bl	8014162 <HAL_NVIC_EnableIRQ>

}
 8011e7e:	bf00      	nop
 8011e80:	3728      	adds	r7, #40	; 0x28
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	48000c00 	.word	0x48000c00
 8011e8c:	48000400 	.word	0x48000400

08011e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011e90:	b480      	push	{r7}
 8011e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011e94:	b672      	cpsid	i
}
 8011e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011e98:	e7fe      	b.n	8011e98 <Error_Handler+0x8>
	...

08011e9c <Potato_Save>:
	return ret;
}
*/


save_ret_t Potato_Save(POTATO_Save_t *POTATO){
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b092      	sub	sp, #72	; 0x48
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
	uint64_t data = 0;
 8011ea4:	f04f 0200 	mov.w	r2, #0
 8011ea8:	f04f 0300 	mov.w	r3, #0
 8011eac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t i = 0;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint16_t crcval = 0;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	//uint64_t *potato_flash_address = (uint64_t *)Potato_Flash_Address;
	//uint64_t *potato_address = (uint64_t *)POTATO;
	uint64_t *dest_address = (uint64_t *)Potato_Flash_Address;
 8011ebc:	4b53      	ldr	r3, [pc, #332]	; (801200c <Potato_Save+0x170>)
 8011ebe:	643b      	str	r3, [r7, #64]	; 0x40
	uint64_t *dest_Backup_address = (uint64_t *)Potato_Flash_Backup_Address;
 8011ec0:	4b53      	ldr	r3, [pc, #332]	; (8012010 <Potato_Save+0x174>)
 8011ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t *source_address = (uint64_t *)POTATO;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t Page_Error = 0;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	61fb      	str	r3, [r7, #28]
	uint32_t primask_bit;
	save_ret_t ret = 0;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	60fb      	str	r3, [r7, #12]
	Erase_t.Banks = FLASH_BANK_1;
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	613b      	str	r3, [r7, #16]
	Erase_t.Page = Potato_Flash_Page;
 8011eda:	23fe      	movs	r3, #254	; 0xfe
 8011edc:	617b      	str	r3, [r7, #20]
	Erase_t.NbPages = 2;
 8011ede:	2302      	movs	r3, #2
 8011ee0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8011ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8011ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c


	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011eea:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8011eec:	b672      	cpsid	i
}
 8011eee:	bf00      	nop
	__disable_irq();

	//CRC ///////////////////////////////////////////////////////////////////

	crcval = crcSlow((uint8_t*)POTATO, Potato_Data_Length_Bytes_without_CRC);
 8011ef0:	2164      	movs	r1, #100	; 0x64
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f7ff fc8a 	bl	801180c <crcSlow>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	POTATO->POTATO_CRC[0] = (crcval&0xFF00)>>8;
 8011efe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011f02:	0a1b      	lsrs	r3, r3, #8
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	b2da      	uxtb	r2, r3
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	POTATO->POTATO_CRC[1] = crcval&0xFF;
 8011f0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011f12:	b2da      	uxtb	r2, r3
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	/////////////////////////////////////////////////////////////////////////

	if(HAL_FLASH_Unlock() != HAL_OK) {
 8011f1a:	f002 fa47 	bl	80143ac <HAL_FLASH_Unlock>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d005      	beq.n	8011f30 <Potato_Save+0x94>
		ret = unlock_error;
 8011f24:	2303      	movs	r3, #3
 8011f26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		return ret;
 8011f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f2e:	e068      	b.n	8012002 <Potato_Save+0x166>
	}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 8011f30:	f107 021c 	add.w	r2, r7, #28
 8011f34:	f107 030c 	add.w	r3, r7, #12
 8011f38:	4611      	mov	r1, r2
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f002 fb1a 	bl	8014574 <HAL_FLASHEx_Erase>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d005      	beq.n	8011f52 <Potato_Save+0xb6>
		ret = erase_error;
 8011f46:	2301      	movs	r3, #1
 8011f48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		return ret;
 8011f4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f50:	e057      	b.n	8012002 <Potato_Save+0x166>
	}

	for(i = 0; i < 13; i++){
 8011f52:	2300      	movs	r3, #0
 8011f54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011f58:	e03d      	b.n	8011fd6 <Potato_Save+0x13a>
		data = 0;
 8011f5a:	f04f 0200 	mov.w	r2, #0
 8011f5e:	f04f 0300 	mov.w	r3, #0
 8011f62:	e9c7 2308 	strd	r2, r3, [r7, #32]
		/*
		for(j = 0; j < 8; j++){
			data[i] |= (*potato_address)<<(7-j)*8;
			potato_address++;
		}*/
		memcpy(&data, (source_address + i),8);
 8011f66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011f6a:	00db      	lsls	r3, r3, #3
 8011f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f6e:	18d1      	adds	r1, r2, r3
 8011f70:	f107 0320 	add.w	r3, r7, #32
 8011f74:	2208      	movs	r2, #8
 8011f76:	4618      	mov	r0, r3
 8011f78:	f006 fe1f 	bl	8018bba <memcpy>

		//data = 0x1010101010101010;

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), data) != HAL_OK) {
 8011f7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011f80:	00db      	lsls	r3, r3, #3
 8011f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f84:	4413      	add	r3, r2
 8011f86:	4619      	mov	r1, r3
 8011f88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	f002 f9a1 	bl	80142d4 <HAL_FLASH_Program>
 8011f92:	4603      	mov	r3, r0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d005      	beq.n	8011fa4 <Potato_Save+0x108>
			ret = write_error;
 8011f98:	2302      	movs	r3, #2
 8011f9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			return ret;
 8011f9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011fa2:	e02e      	b.n	8012002 <Potato_Save+0x166>
		}

		//data = 0x1010101010101010;

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_Backup_address + i), data) != HAL_OK) {
 8011fa4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011fa8:	00db      	lsls	r3, r3, #3
 8011faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011fac:	4413      	add	r3, r2
 8011fae:	4619      	mov	r1, r3
 8011fb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011fb4:	2000      	movs	r0, #0
 8011fb6:	f002 f98d 	bl	80142d4 <HAL_FLASH_Program>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d005      	beq.n	8011fcc <Potato_Save+0x130>
			ret = write_error;
 8011fc0:	2302      	movs	r3, #2
 8011fc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			return ret;
 8011fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011fca:	e01a      	b.n	8012002 <Potato_Save+0x166>
	for(i = 0; i < 13; i++){
 8011fcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011fd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011fda:	2b0c      	cmp	r3, #12
 8011fdc:	d9bd      	bls.n	8011f5a <Potato_Save+0xbe>
		}

	}

	if(HAL_FLASH_Lock() != HAL_OK){
 8011fde:	f002 fa07 	bl	80143f0 <HAL_FLASH_Lock>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d005      	beq.n	8011ff4 <Potato_Save+0x158>
		ret = lock_error;
 8011fe8:	2304      	movs	r3, #4
 8011fea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		return ret;
 8011fee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ff2:	e006      	b.n	8012002 <Potato_Save+0x166>
 8011ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffa:	f383 8810 	msr	PRIMASK, r3
}
 8011ffe:	bf00      	nop
	}
	__set_PRIMASK(primask_bit);

	return save_ok;
 8012000:	2300      	movs	r3, #0

}
 8012002:	4618      	mov	r0, r3
 8012004:	3748      	adds	r7, #72	; 0x48
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
 801200a:	bf00      	nop
 801200c:	0807f000 	.word	0x0807f000
 8012010:	0807f800 	.word	0x0807f800

08012014 <Potato_Load>:

save_ret_t Potato_Load(POTATO_Save_t *POTATO){
 8012014:	b580      	push	{r7, lr}
 8012016:	b09e      	sub	sp, #120	; 0x78
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]

	save_ret_t ret = 0;
 801201c:	2300      	movs	r3, #0
 801201e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint16_t crcval = 0;
 8012022:	2300      	movs	r3, #0
 8012024:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	uint8_t temp[102] = {0,};
 8012028:	2300      	movs	r3, #0
 801202a:	60fb      	str	r3, [r7, #12]
 801202c:	f107 0310 	add.w	r3, r7, #16
 8012030:	2262      	movs	r2, #98	; 0x62
 8012032:	2100      	movs	r1, #0
 8012034:	4618      	mov	r0, r3
 8012036:	f006 fdce 	bl	8018bd6 <memset>
	//uint16_t saved_crcval = 0;
	//uint8_t *normal_crc_address = Potato_Flash_CRC_Address;
	//uint8_t *backup_crc_address = Potato_Flash_Backup_CRC_Address;

	memcpy(temp, Potato_Flash_Address,Potato_Data_Length_Bytes);
 801203a:	4a24      	ldr	r2, [pc, #144]	; (80120cc <Potato_Load+0xb8>)
 801203c:	f107 030c 	add.w	r3, r7, #12
 8012040:	4611      	mov	r1, r2
 8012042:	2266      	movs	r2, #102	; 0x66
 8012044:	4618      	mov	r0, r3
 8012046:	f006 fdb8 	bl	8018bba <memcpy>


	//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
	crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 801204a:	f107 030c 	add.w	r3, r7, #12
 801204e:	2166      	movs	r1, #102	; 0x66
 8012050:	4618      	mov	r0, r3
 8012052:	f7ff fbdb 	bl	801180c <crcSlow>
 8012056:	4603      	mov	r3, r0
 8012058:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	if(crcval == 0){
 801205c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012060:	2b00      	cmp	r3, #0
 8012062:	d10a      	bne.n	801207a <Potato_Load+0x66>
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 8012064:	2266      	movs	r2, #102	; 0x66
 8012066:	4919      	ldr	r1, [pc, #100]	; (80120cc <Potato_Load+0xb8>)
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f006 fda6 	bl	8018bba <memcpy>
		ret = save_ok;
 801206e:	2300      	movs	r3, #0
 8012070:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		return ret;
 8012074:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012078:	e024      	b.n	80120c4 <Potato_Load+0xb0>
	}

	else {
		memcpy(temp, Potato_Flash_Backup_Address, Potato_Data_Length_Bytes);
 801207a:	4a15      	ldr	r2, [pc, #84]	; (80120d0 <Potato_Load+0xbc>)
 801207c:	f107 030c 	add.w	r3, r7, #12
 8012080:	4611      	mov	r1, r2
 8012082:	2266      	movs	r2, #102	; 0x66
 8012084:	4618      	mov	r0, r3
 8012086:	f006 fd98 	bl	8018bba <memcpy>

		//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 801208a:	f107 030c 	add.w	r3, r7, #12
 801208e:	2166      	movs	r1, #102	; 0x66
 8012090:	4618      	mov	r0, r3
 8012092:	f7ff fbbb 	bl	801180c <crcSlow>
 8012096:	4603      	mov	r3, r0
 8012098:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

		if(crcval == 0){
 801209c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d10a      	bne.n	80120ba <Potato_Load+0xa6>
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 80120a4:	2266      	movs	r2, #102	; 0x66
 80120a6:	490a      	ldr	r1, [pc, #40]	; (80120d0 <Potato_Load+0xbc>)
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f006 fd86 	bl	8018bba <memcpy>
			ret = save_ok;
 80120ae:	2300      	movs	r3, #0
 80120b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			return ret;
 80120b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80120b8:	e004      	b.n	80120c4 <Potato_Load+0xb0>
		}

		else{
			ret = crc_error;
 80120ba:	2306      	movs	r3, #6
 80120bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			return ret;
 80120c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
		}
	}

}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3778      	adds	r7, #120	; 0x78
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}
 80120cc:	0807f000 	.word	0x0807f000
 80120d0:	0807f800 	.word	0x0807f800

080120d4 <Potato_Erase>:

save_ret_t Potato_Erase(erase_page_t pages){
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b08c      	sub	sp, #48	; 0x30
 80120d8:	af00      	add	r7, sp, #0
 80120da:	4603      	mov	r3, r0
 80120dc:	71fb      	strb	r3, [r7, #7]
	uint32_t Page_Error = 0;
 80120de:	2300      	movs	r3, #0
 80120e0:	61fb      	str	r3, [r7, #28]
	uint32_t primask_bit;
	save_ret_t ret = 0;
 80120e2:	2300      	movs	r3, #0
 80120e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 80120e8:	2300      	movs	r3, #0
 80120ea:	60fb      	str	r3, [r7, #12]
	Erase_t.Banks = FLASH_BANK_1;
 80120ec:	2301      	movs	r3, #1
 80120ee:	613b      	str	r3, [r7, #16]
	Erase_t.Page = Potato_Flash_Page;
 80120f0:	23fe      	movs	r3, #254	; 0xfe
 80120f2:	617b      	str	r3, [r7, #20]
	Erase_t.NbPages = pages;
 80120f4:	79fb      	ldrb	r3, [r7, #7]
 80120f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120f8:	f3ef 8310 	mrs	r3, PRIMASK
 80120fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80120fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012100:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8012102:	b672      	cpsid	i
}
 8012104:	bf00      	nop
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 8012106:	f002 f951 	bl	80143ac <HAL_FLASH_Unlock>
 801210a:	4603      	mov	r3, r0
 801210c:	2b00      	cmp	r3, #0
 801210e:	d005      	beq.n	801211c <Potato_Erase+0x48>
			ret = unlock_error;
 8012110:	2303      	movs	r3, #3
 8012112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return ret;
 8012116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801211a:	e023      	b.n	8012164 <Potato_Erase+0x90>
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 801211c:	f107 021c 	add.w	r2, r7, #28
 8012120:	f107 030c 	add.w	r3, r7, #12
 8012124:	4611      	mov	r1, r2
 8012126:	4618      	mov	r0, r3
 8012128:	f002 fa24 	bl	8014574 <HAL_FLASHEx_Erase>
 801212c:	4603      	mov	r3, r0
 801212e:	2b00      	cmp	r3, #0
 8012130:	d005      	beq.n	801213e <Potato_Erase+0x6a>
			ret = erase_error;
 8012132:	2301      	movs	r3, #1
 8012134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return ret;
 8012138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801213c:	e012      	b.n	8012164 <Potato_Erase+0x90>
		}


	if(HAL_FLASH_Lock() != HAL_OK){
 801213e:	f002 f957 	bl	80143f0 <HAL_FLASH_Lock>
 8012142:	4603      	mov	r3, r0
 8012144:	2b00      	cmp	r3, #0
 8012146:	d005      	beq.n	8012154 <Potato_Erase+0x80>
			ret = lock_error;
 8012148:	2304      	movs	r3, #4
 801214a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return ret;
 801214e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012152:	e007      	b.n	8012164 <Potato_Erase+0x90>
 8012154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012156:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012158:	6a3b      	ldr	r3, [r7, #32]
 801215a:	f383 8810 	msr	PRIMASK, r3
}
 801215e:	bf00      	nop
		}

	__set_PRIMASK(primask_bit);
	return ret;
 8012160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012164:	4618      	mov	r0, r3
 8012166:	3730      	adds	r7, #48	; 0x30
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <Potato_Backup_Load>:

save_ret_t Potato_Backup_Load(void){
 801216c:	b580      	push	{r7, lr}
 801216e:	b08c      	sub	sp, #48	; 0x30
 8012170:	af00      	add	r7, sp, #0
	uint64_t * dest_address = (uint64_t *)Potato_Flash_Address;
 8012172:	4b38      	ldr	r3, [pc, #224]	; (8012254 <Potato_Backup_Load+0xe8>)
 8012174:	62bb      	str	r3, [r7, #40]	; 0x28
	uint64_t *source_address = (uint64_t *)Potato_Flash_Backup_Address;
 8012176:	4b38      	ldr	r3, [pc, #224]	; (8012258 <Potato_Backup_Load+0xec>)
 8012178:	627b      	str	r3, [r7, #36]	; 0x24
	//uint64_t data;
	save_ret_t ret = 0;
 801217a:	2300      	movs	r3, #0
 801217c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t primask_bit;
	uint32_t Page_Error = 0;
 8012180:	2300      	movs	r3, #0
 8012182:	613b      	str	r3, [r7, #16]

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 8012184:	2300      	movs	r3, #0
 8012186:	603b      	str	r3, [r7, #0]
	Erase_t.Banks = FLASH_BANK_1;
 8012188:	2301      	movs	r3, #1
 801218a:	607b      	str	r3, [r7, #4]
	Erase_t.Page = Potato_Flash_Page;
 801218c:	23fe      	movs	r3, #254	; 0xfe
 801218e:	60bb      	str	r3, [r7, #8]
	Erase_t.NbPages = 1;
 8012190:	2301      	movs	r3, #1
 8012192:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012194:	f3ef 8310 	mrs	r3, PRIMASK
 8012198:	61bb      	str	r3, [r7, #24]
  return(result);
 801219a:	69bb      	ldr	r3, [r7, #24]

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801219c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801219e:	b672      	cpsid	i
}
 80121a0:	bf00      	nop
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 80121a2:	f002 f903 	bl	80143ac <HAL_FLASH_Unlock>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d005      	beq.n	80121b8 <Potato_Backup_Load+0x4c>
			ret = unlock_error;
 80121ac:	2303      	movs	r3, #3
 80121ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			return ret;
 80121b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80121b6:	e048      	b.n	801224a <Potato_Backup_Load+0xde>
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 80121b8:	f107 0210 	add.w	r2, r7, #16
 80121bc:	463b      	mov	r3, r7
 80121be:	4611      	mov	r1, r2
 80121c0:	4618      	mov	r0, r3
 80121c2:	f002 f9d7 	bl	8014574 <HAL_FLASHEx_Erase>
 80121c6:	4603      	mov	r3, r0
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d005      	beq.n	80121d8 <Potato_Backup_Load+0x6c>
			ret = erase_error;
 80121cc:	2301      	movs	r3, #1
 80121ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			return ret;
 80121d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80121d6:	e038      	b.n	801224a <Potato_Backup_Load+0xde>
		}

	for(uint8_t i = 0; i<13; i++){
 80121d8:	2300      	movs	r3, #0
 80121da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80121de:	e01d      	b.n	801221c <Potato_Backup_Load+0xb0>
		//memcpy(&data, source_address + i, 8);
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), *(source_address + i)) != HAL_OK) {
 80121e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121e4:	00db      	lsls	r3, r3, #3
 80121e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121e8:	4413      	add	r3, r2
 80121ea:	4619      	mov	r1, r3
 80121ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121f0:	00db      	lsls	r3, r3, #3
 80121f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121f4:	4413      	add	r3, r2
 80121f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fa:	2000      	movs	r0, #0
 80121fc:	f002 f86a 	bl	80142d4 <HAL_FLASH_Program>
 8012200:	4603      	mov	r3, r0
 8012202:	2b00      	cmp	r3, #0
 8012204:	d005      	beq.n	8012212 <Potato_Backup_Load+0xa6>
			ret = write_error;
 8012206:	2302      	movs	r3, #2
 8012208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			return ret;
 801220c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012210:	e01b      	b.n	801224a <Potato_Backup_Load+0xde>
	for(uint8_t i = 0; i<13; i++){
 8012212:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012216:	3301      	adds	r3, #1
 8012218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801221c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012220:	2b0c      	cmp	r3, #12
 8012222:	d9dd      	bls.n	80121e0 <Potato_Backup_Load+0x74>
		}
	}

	if(HAL_FLASH_Lock() != HAL_OK){
 8012224:	f002 f8e4 	bl	80143f0 <HAL_FLASH_Lock>
 8012228:	4603      	mov	r3, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	d005      	beq.n	801223a <Potato_Backup_Load+0xce>
			ret = lock_error;
 801222e:	2304      	movs	r3, #4
 8012230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			return ret;
 8012234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012238:	e007      	b.n	801224a <Potato_Backup_Load+0xde>
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	f383 8810 	msr	PRIMASK, r3
}
 8012244:	bf00      	nop
		}

	__set_PRIMASK(primask_bit);

	return ret;
 8012246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801224a:	4618      	mov	r0, r3
 801224c:	3730      	adds	r7, #48	; 0x30
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	0807f000 	.word	0x0807f000
 8012258:	0807f800 	.word	0x0807f800

0801225c <Potato_Dummy_Backup>:

save_ret_t Potato_Dummy_Backup(void){
 801225c:	b580      	push	{r7, lr}
 801225e:	b08e      	sub	sp, #56	; 0x38
 8012260:	af00      	add	r7, sp, #0
	uint64_t * dest_address = (uint64_t *)Potato_Flash_Backup_Address;
 8012262:	4b37      	ldr	r3, [pc, #220]	; (8012340 <Potato_Dummy_Backup+0xe4>)
 8012264:	633b      	str	r3, [r7, #48]	; 0x30
	save_ret_t ret = 0;
 8012266:	2300      	movs	r3, #0
 8012268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t primask_bit;
	uint32_t Page_Error = 0;
 801226c:	2300      	movs	r3, #0
 801226e:	613b      	str	r3, [r7, #16]
	uint64_t data = 0x1010101010101010;
 8012270:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8012274:	f04f 3310 	mov.w	r3, #269488144	; 0x10101010
 8012278:	e9c7 2308 	strd	r2, r3, [r7, #32]

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 801227c:	2300      	movs	r3, #0
 801227e:	603b      	str	r3, [r7, #0]
	Erase_t.Banks = FLASH_BANK_1;
 8012280:	2301      	movs	r3, #1
 8012282:	607b      	str	r3, [r7, #4]
	Erase_t.Page = Potato_Flash_Backup_Page;
 8012284:	23ff      	movs	r3, #255	; 0xff
 8012286:	60bb      	str	r3, [r7, #8]
	Erase_t.NbPages = 1;
 8012288:	2301      	movs	r3, #1
 801228a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801228c:	f3ef 8310 	mrs	r3, PRIMASK
 8012290:	61bb      	str	r3, [r7, #24]
  return(result);
 8012292:	69bb      	ldr	r3, [r7, #24]

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012294:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8012296:	b672      	cpsid	i
}
 8012298:	bf00      	nop
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 801229a:	f002 f887 	bl	80143ac <HAL_FLASH_Unlock>
 801229e:	4603      	mov	r3, r0
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d005      	beq.n	80122b0 <Potato_Dummy_Backup+0x54>
			ret = unlock_error;
 80122a4:	2303      	movs	r3, #3
 80122a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return ret;
 80122aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122ae:	e043      	b.n	8012338 <Potato_Dummy_Backup+0xdc>
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 80122b0:	f107 0210 	add.w	r2, r7, #16
 80122b4:	463b      	mov	r3, r7
 80122b6:	4611      	mov	r1, r2
 80122b8:	4618      	mov	r0, r3
 80122ba:	f002 f95b 	bl	8014574 <HAL_FLASHEx_Erase>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d005      	beq.n	80122d0 <Potato_Dummy_Backup+0x74>
			ret = erase_error;
 80122c4:	2301      	movs	r3, #1
 80122c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return ret;
 80122ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122ce:	e033      	b.n	8012338 <Potato_Dummy_Backup+0xdc>
		}

	for(uint8_t i = 0; i<13; i++){
 80122d0:	2300      	movs	r3, #0
 80122d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80122d6:	e018      	b.n	801230a <Potato_Dummy_Backup+0xae>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), data)) {
 80122d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122dc:	00db      	lsls	r3, r3, #3
 80122de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122e0:	4413      	add	r3, r2
 80122e2:	4619      	mov	r1, r3
 80122e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80122e8:	2000      	movs	r0, #0
 80122ea:	f001 fff3 	bl	80142d4 <HAL_FLASH_Program>
 80122ee:	4603      	mov	r3, r0
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d005      	beq.n	8012300 <Potato_Dummy_Backup+0xa4>
			ret = write_error;
 80122f4:	2302      	movs	r3, #2
 80122f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return ret;
 80122fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122fe:	e01b      	b.n	8012338 <Potato_Dummy_Backup+0xdc>
	for(uint8_t i = 0; i<13; i++){
 8012300:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012304:	3301      	adds	r3, #1
 8012306:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801230a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801230e:	2b0c      	cmp	r3, #12
 8012310:	d9e2      	bls.n	80122d8 <Potato_Dummy_Backup+0x7c>
		}
	}

	if(HAL_FLASH_Lock() != HAL_OK){
 8012312:	f002 f86d 	bl	80143f0 <HAL_FLASH_Lock>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d005      	beq.n	8012328 <Potato_Dummy_Backup+0xcc>
			ret = lock_error;
 801231c:	2304      	movs	r3, #4
 801231e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return ret;
 8012322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012326:	e007      	b.n	8012338 <Potato_Dummy_Backup+0xdc>
 8012328:	69fb      	ldr	r3, [r7, #28]
 801232a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	f383 8810 	msr	PRIMASK, r3
}
 8012332:	bf00      	nop
		}

	__set_PRIMASK(primask_bit);

	return ret;
 8012334:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012338:	4618      	mov	r0, r3
 801233a:	3738      	adds	r7, #56	; 0x38
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}
 8012340:	0807f800 	.word	0x0807f800

08012344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012344:	b480      	push	{r7}
 8012346:	b083      	sub	sp, #12
 8012348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801234a:	4b0f      	ldr	r3, [pc, #60]	; (8012388 <HAL_MspInit+0x44>)
 801234c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801234e:	4a0e      	ldr	r2, [pc, #56]	; (8012388 <HAL_MspInit+0x44>)
 8012350:	f043 0301 	orr.w	r3, r3, #1
 8012354:	6613      	str	r3, [r2, #96]	; 0x60
 8012356:	4b0c      	ldr	r3, [pc, #48]	; (8012388 <HAL_MspInit+0x44>)
 8012358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801235a:	f003 0301 	and.w	r3, r3, #1
 801235e:	607b      	str	r3, [r7, #4]
 8012360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012362:	4b09      	ldr	r3, [pc, #36]	; (8012388 <HAL_MspInit+0x44>)
 8012364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012366:	4a08      	ldr	r2, [pc, #32]	; (8012388 <HAL_MspInit+0x44>)
 8012368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801236c:	6593      	str	r3, [r2, #88]	; 0x58
 801236e:	4b06      	ldr	r3, [pc, #24]	; (8012388 <HAL_MspInit+0x44>)
 8012370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012376:	603b      	str	r3, [r7, #0]
 8012378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801237a:	bf00      	nop
 801237c:	370c      	adds	r7, #12
 801237e:	46bd      	mov	sp, r7
 8012380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012384:	4770      	bx	lr
 8012386:	bf00      	nop
 8012388:	40021000 	.word	0x40021000

0801238c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b0ae      	sub	sp, #184	; 0xb8
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012394:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012398:	2200      	movs	r2, #0
 801239a:	601a      	str	r2, [r3, #0]
 801239c:	605a      	str	r2, [r3, #4]
 801239e:	609a      	str	r2, [r3, #8]
 80123a0:	60da      	str	r2, [r3, #12]
 80123a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80123a4:	f107 031c 	add.w	r3, r7, #28
 80123a8:	2288      	movs	r2, #136	; 0x88
 80123aa:	2100      	movs	r1, #0
 80123ac:	4618      	mov	r0, r3
 80123ae:	f006 fc12 	bl	8018bd6 <memset>
  if(hadc->Instance==ADC1)
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	4a42      	ldr	r2, [pc, #264]	; (80124c0 <HAL_ADC_MspInit+0x134>)
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d17d      	bne.n	80124b8 <HAL_ADC_MspInit+0x12c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80123bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80123c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80123c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80123c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80123ca:	2301      	movs	r3, #1
 80123cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80123ce:	2301      	movs	r3, #1
 80123d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80123d2:	2318      	movs	r3, #24
 80123d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80123d6:	2307      	movs	r3, #7
 80123d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80123da:	2302      	movs	r3, #2
 80123dc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80123de:	2302      	movs	r3, #2
 80123e0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80123e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80123e6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80123e8:	f107 031c 	add.w	r3, r7, #28
 80123ec:	4618      	mov	r0, r3
 80123ee:	f003 fb61 	bl	8015ab4 <HAL_RCCEx_PeriphCLKConfig>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d001      	beq.n	80123fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80123f8:	f7ff fd4a 	bl	8011e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80123fc:	4b31      	ldr	r3, [pc, #196]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 80123fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012400:	4a30      	ldr	r2, [pc, #192]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 8012402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012408:	4b2e      	ldr	r3, [pc, #184]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 801240a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801240c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012410:	61bb      	str	r3, [r7, #24]
 8012412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012414:	4b2b      	ldr	r3, [pc, #172]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 8012416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012418:	4a2a      	ldr	r2, [pc, #168]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 801241a:	f043 0304 	orr.w	r3, r3, #4
 801241e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012420:	4b28      	ldr	r3, [pc, #160]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 8012422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012424:	f003 0304 	and.w	r3, r3, #4
 8012428:	617b      	str	r3, [r7, #20]
 801242a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801242c:	4b25      	ldr	r3, [pc, #148]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 801242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012430:	4a24      	ldr	r2, [pc, #144]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 8012432:	f043 0301 	orr.w	r3, r3, #1
 8012436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012438:	4b22      	ldr	r3, [pc, #136]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 801243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801243c:	f003 0301 	and.w	r3, r3, #1
 8012440:	613b      	str	r3, [r7, #16]
 8012442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012444:	4b1f      	ldr	r3, [pc, #124]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 8012446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012448:	4a1e      	ldr	r2, [pc, #120]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 801244a:	f043 0302 	orr.w	r3, r3, #2
 801244e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012450:	4b1c      	ldr	r3, [pc, #112]	; (80124c4 <HAL_ADC_MspInit+0x138>)
 8012452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012454:	f003 0302 	and.w	r3, r3, #2
 8012458:	60fb      	str	r3, [r7, #12]
 801245a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 801245c:	233f      	movs	r3, #63	; 0x3f
 801245e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8012462:	230b      	movs	r3, #11
 8012464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012468:	2300      	movs	r3, #0
 801246a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801246e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012472:	4619      	mov	r1, r3
 8012474:	4814      	ldr	r0, [pc, #80]	; (80124c8 <HAL_ADC_MspInit+0x13c>)
 8012476:	f002 f9c1 	bl	80147fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 801247a:	2310      	movs	r3, #16
 801247c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8012480:	230b      	movs	r3, #11
 8012482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012486:	2300      	movs	r3, #0
 8012488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 801248c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012490:	4619      	mov	r1, r3
 8012492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012496:	f002 f9b1 	bl	80147fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 801249a:	2302      	movs	r3, #2
 801249c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80124a0:	230b      	movs	r3, #11
 80124a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124a6:	2300      	movs	r3, #0
 80124a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80124ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80124b0:	4619      	mov	r1, r3
 80124b2:	4806      	ldr	r0, [pc, #24]	; (80124cc <HAL_ADC_MspInit+0x140>)
 80124b4:	f002 f9a2 	bl	80147fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80124b8:	bf00      	nop
 80124ba:	37b8      	adds	r7, #184	; 0xb8
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	50040000 	.word	0x50040000
 80124c4:	40021000 	.word	0x40021000
 80124c8:	48000800 	.word	0x48000800
 80124cc:	48000400 	.word	0x48000400

080124d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b0ac      	sub	sp, #176	; 0xb0
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80124d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80124dc:	2200      	movs	r2, #0
 80124de:	601a      	str	r2, [r3, #0]
 80124e0:	605a      	str	r2, [r3, #4]
 80124e2:	609a      	str	r2, [r3, #8]
 80124e4:	60da      	str	r2, [r3, #12]
 80124e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80124e8:	f107 0314 	add.w	r3, r7, #20
 80124ec:	2288      	movs	r2, #136	; 0x88
 80124ee:	2100      	movs	r1, #0
 80124f0:	4618      	mov	r0, r3
 80124f2:	f006 fb70 	bl	8018bd6 <memset>
  if(huart->Instance==USART1)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	4a21      	ldr	r2, [pc, #132]	; (8012580 <HAL_UART_MspInit+0xb0>)
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d13a      	bne.n	8012576 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8012500:	2301      	movs	r3, #1
 8012502:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8012504:	2300      	movs	r3, #0
 8012506:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012508:	f107 0314 	add.w	r3, r7, #20
 801250c:	4618      	mov	r0, r3
 801250e:	f003 fad1 	bl	8015ab4 <HAL_RCCEx_PeriphCLKConfig>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d001      	beq.n	801251c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8012518:	f7ff fcba 	bl	8011e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801251c:	4b19      	ldr	r3, [pc, #100]	; (8012584 <HAL_UART_MspInit+0xb4>)
 801251e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012520:	4a18      	ldr	r2, [pc, #96]	; (8012584 <HAL_UART_MspInit+0xb4>)
 8012522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012526:	6613      	str	r3, [r2, #96]	; 0x60
 8012528:	4b16      	ldr	r3, [pc, #88]	; (8012584 <HAL_UART_MspInit+0xb4>)
 801252a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801252c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012530:	613b      	str	r3, [r7, #16]
 8012532:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012534:	4b13      	ldr	r3, [pc, #76]	; (8012584 <HAL_UART_MspInit+0xb4>)
 8012536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012538:	4a12      	ldr	r2, [pc, #72]	; (8012584 <HAL_UART_MspInit+0xb4>)
 801253a:	f043 0302 	orr.w	r3, r3, #2
 801253e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012540:	4b10      	ldr	r3, [pc, #64]	; (8012584 <HAL_UART_MspInit+0xb4>)
 8012542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012544:	f003 0302 	and.w	r3, r3, #2
 8012548:	60fb      	str	r3, [r7, #12]
 801254a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 801254c:	23c0      	movs	r3, #192	; 0xc0
 801254e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012552:	2302      	movs	r3, #2
 8012554:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012558:	2300      	movs	r3, #0
 801255a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801255e:	2303      	movs	r3, #3
 8012560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8012564:	2307      	movs	r3, #7
 8012566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801256a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801256e:	4619      	mov	r1, r3
 8012570:	4805      	ldr	r0, [pc, #20]	; (8012588 <HAL_UART_MspInit+0xb8>)
 8012572:	f002 f943 	bl	80147fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8012576:	bf00      	nop
 8012578:	37b0      	adds	r7, #176	; 0xb0
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	40013800 	.word	0x40013800
 8012584:	40021000 	.word	0x40021000
 8012588:	48000400 	.word	0x48000400

0801258c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801258c:	b480      	push	{r7}
 801258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8012590:	e7fe      	b.n	8012590 <NMI_Handler+0x4>

08012592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012592:	b480      	push	{r7}
 8012594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012596:	e7fe      	b.n	8012596 <HardFault_Handler+0x4>

08012598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012598:	b480      	push	{r7}
 801259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801259c:	e7fe      	b.n	801259c <MemManage_Handler+0x4>

0801259e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801259e:	b480      	push	{r7}
 80125a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80125a2:	e7fe      	b.n	80125a2 <BusFault_Handler+0x4>

080125a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80125a4:	b480      	push	{r7}
 80125a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80125a8:	e7fe      	b.n	80125a8 <UsageFault_Handler+0x4>

080125aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80125aa:	b480      	push	{r7}
 80125ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80125ae:	bf00      	nop
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr

080125b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80125b8:	b480      	push	{r7}
 80125ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80125bc:	bf00      	nop
 80125be:	46bd      	mov	sp, r7
 80125c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c4:	4770      	bx	lr

080125c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80125c6:	b480      	push	{r7}
 80125c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80125ca:	bf00      	nop
 80125cc:	46bd      	mov	sp, r7
 80125ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d2:	4770      	bx	lr

080125d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80125d8:	f000 fa86 	bl	8012ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80125dc:	bf00      	nop
 80125de:	bd80      	pop	{r7, pc}

080125e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80125e4:	2020      	movs	r0, #32
 80125e6:	f002 fbf1 	bl	8014dcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80125ea:	4806      	ldr	r0, [pc, #24]	; (8012604 <EXTI9_5_IRQHandler+0x24>)
 80125ec:	f001 fe42 	bl	8014274 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80125f0:	2080      	movs	r0, #128	; 0x80
 80125f2:	f002 fbeb 	bl	8014dcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80125f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80125fa:	f002 fbe7 	bl	8014dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80125fe:	bf00      	nop
 8012600:	bd80      	pop	{r7, pc}
 8012602:	bf00      	nop
 8012604:	20000538 	.word	0x20000538

08012608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 801260c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012610:	f002 fbdc 	bl	8014dcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8012614:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012618:	f002 fbd8 	bl	8014dcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 801261c:	4806      	ldr	r0, [pc, #24]	; (8012638 <EXTI15_10_IRQHandler+0x30>)
 801261e:	f001 fe29 	bl	8014274 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8012622:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012626:	f002 fbd1 	bl	8014dcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 801262a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801262e:	f002 fbcd 	bl	8014dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8012632:	bf00      	nop
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	2000000c 	.word	0x2000000c

0801263c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8012640:	4802      	ldr	r0, [pc, #8]	; (801264c <SPI3_IRQHandler+0x10>)
 8012642:	f004 f9b3 	bl	80169ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8012646:	bf00      	nop
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	20000628 	.word	0x20000628

08012650 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b086      	sub	sp, #24
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801265c:	2300      	movs	r3, #0
 801265e:	617b      	str	r3, [r7, #20]
 8012660:	e00a      	b.n	8012678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8012662:	f3af 8000 	nop.w
 8012666:	4601      	mov	r1, r0
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	1c5a      	adds	r2, r3, #1
 801266c:	60ba      	str	r2, [r7, #8]
 801266e:	b2ca      	uxtb	r2, r1
 8012670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	3301      	adds	r3, #1
 8012676:	617b      	str	r3, [r7, #20]
 8012678:	697a      	ldr	r2, [r7, #20]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	429a      	cmp	r2, r3
 801267e:	dbf0      	blt.n	8012662 <_read+0x12>
	}

return len;
 8012680:	687b      	ldr	r3, [r7, #4]
}
 8012682:	4618      	mov	r0, r3
 8012684:	3718      	adds	r7, #24
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}

0801268a <_close>:
	}
	return len;
}

int _close(int file)
{
 801268a:	b480      	push	{r7}
 801268c:	b083      	sub	sp, #12
 801268e:	af00      	add	r7, sp, #0
 8012690:	6078      	str	r0, [r7, #4]
	return -1;
 8012692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012696:	4618      	mov	r0, r3
 8012698:	370c      	adds	r7, #12
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr

080126a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80126a2:	b480      	push	{r7}
 80126a4:	b083      	sub	sp, #12
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
 80126aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80126b2:	605a      	str	r2, [r3, #4]
	return 0;
 80126b4:	2300      	movs	r3, #0
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	370c      	adds	r7, #12
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr

080126c2 <_isatty>:

int _isatty(int file)
{
 80126c2:	b480      	push	{r7}
 80126c4:	b083      	sub	sp, #12
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	6078      	str	r0, [r7, #4]
	return 1;
 80126ca:	2301      	movs	r3, #1
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	370c      	adds	r7, #12
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr

080126d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80126d8:	b480      	push	{r7}
 80126da:	b085      	sub	sp, #20
 80126dc:	af00      	add	r7, sp, #0
 80126de:	60f8      	str	r0, [r7, #12]
 80126e0:	60b9      	str	r1, [r7, #8]
 80126e2:	607a      	str	r2, [r7, #4]
	return 0;
 80126e4:	2300      	movs	r3, #0
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3714      	adds	r7, #20
 80126ea:	46bd      	mov	sp, r7
 80126ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f0:	4770      	bx	lr
	...

080126f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b086      	sub	sp, #24
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80126fc:	4a14      	ldr	r2, [pc, #80]	; (8012750 <_sbrk+0x5c>)
 80126fe:	4b15      	ldr	r3, [pc, #84]	; (8012754 <_sbrk+0x60>)
 8012700:	1ad3      	subs	r3, r2, r3
 8012702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012708:	4b13      	ldr	r3, [pc, #76]	; (8012758 <_sbrk+0x64>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d102      	bne.n	8012716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012710:	4b11      	ldr	r3, [pc, #68]	; (8012758 <_sbrk+0x64>)
 8012712:	4a12      	ldr	r2, [pc, #72]	; (801275c <_sbrk+0x68>)
 8012714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012716:	4b10      	ldr	r3, [pc, #64]	; (8012758 <_sbrk+0x64>)
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4413      	add	r3, r2
 801271e:	693a      	ldr	r2, [r7, #16]
 8012720:	429a      	cmp	r2, r3
 8012722:	d207      	bcs.n	8012734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012724:	f006 f852 	bl	80187cc <__errno>
 8012728:	4603      	mov	r3, r0
 801272a:	220c      	movs	r2, #12
 801272c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801272e:	f04f 33ff 	mov.w	r3, #4294967295
 8012732:	e009      	b.n	8012748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012734:	4b08      	ldr	r3, [pc, #32]	; (8012758 <_sbrk+0x64>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801273a:	4b07      	ldr	r3, [pc, #28]	; (8012758 <_sbrk+0x64>)
 801273c:	681a      	ldr	r2, [r3, #0]
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	4413      	add	r3, r2
 8012742:	4a05      	ldr	r2, [pc, #20]	; (8012758 <_sbrk+0x64>)
 8012744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012746:	68fb      	ldr	r3, [r7, #12]
}
 8012748:	4618      	mov	r0, r3
 801274a:	3718      	adds	r7, #24
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	20018000 	.word	0x20018000
 8012754:	00000400 	.word	0x00000400
 8012758:	200001cc 	.word	0x200001cc
 801275c:	200006b0 	.word	0x200006b0

08012760 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8012760:	b480      	push	{r7}
 8012762:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8012764:	4b16      	ldr	r3, [pc, #88]	; (80127c0 <SystemInit+0x60>)
 8012766:	4a17      	ldr	r2, [pc, #92]	; (80127c4 <SystemInit+0x64>)
 8012768:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 801276a:	4b15      	ldr	r3, [pc, #84]	; (80127c0 <SystemInit+0x60>)
 801276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012770:	4a13      	ldr	r2, [pc, #76]	; (80127c0 <SystemInit+0x60>)
 8012772:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012776:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801277a:	4b13      	ldr	r3, [pc, #76]	; (80127c8 <SystemInit+0x68>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	4a12      	ldr	r2, [pc, #72]	; (80127c8 <SystemInit+0x68>)
 8012780:	f043 0301 	orr.w	r3, r3, #1
 8012784:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8012786:	4b10      	ldr	r3, [pc, #64]	; (80127c8 <SystemInit+0x68>)
 8012788:	2200      	movs	r2, #0
 801278a:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801278c:	4b0e      	ldr	r3, [pc, #56]	; (80127c8 <SystemInit+0x68>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	4a0d      	ldr	r2, [pc, #52]	; (80127c8 <SystemInit+0x68>)
 8012792:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8012796:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 801279a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801279c:	4b0a      	ldr	r3, [pc, #40]	; (80127c8 <SystemInit+0x68>)
 801279e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80127a2:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80127a4:	4b08      	ldr	r3, [pc, #32]	; (80127c8 <SystemInit+0x68>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	4a07      	ldr	r2, [pc, #28]	; (80127c8 <SystemInit+0x68>)
 80127aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80127ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80127b0:	4b05      	ldr	r3, [pc, #20]	; (80127c8 <SystemInit+0x68>)
 80127b2:	2200      	movs	r2, #0
 80127b4:	619a      	str	r2, [r3, #24]
}
 80127b6:	bf00      	nop
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr
 80127c0:	e000ed00 	.word	0xe000ed00
 80127c4:	08010000 	.word	0x08010000
 80127c8:	40021000 	.word	0x40021000

080127cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80127cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012804 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80127d0:	f7ff ffc6 	bl	8012760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80127d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80127d6:	e003      	b.n	80127e0 <LoopCopyDataInit>

080127d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80127d8:	4b0b      	ldr	r3, [pc, #44]	; (8012808 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80127da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80127dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80127de:	3104      	adds	r1, #4

080127e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80127e0:	480a      	ldr	r0, [pc, #40]	; (801280c <LoopForever+0xa>)
	ldr	r3, =_edata
 80127e2:	4b0b      	ldr	r3, [pc, #44]	; (8012810 <LoopForever+0xe>)
	adds	r2, r0, r1
 80127e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80127e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80127e8:	d3f6      	bcc.n	80127d8 <CopyDataInit>
	ldr	r2, =_sbss
 80127ea:	4a0a      	ldr	r2, [pc, #40]	; (8012814 <LoopForever+0x12>)
	b	LoopFillZerobss
 80127ec:	e002      	b.n	80127f4 <LoopFillZerobss>

080127ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80127ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80127f0:	f842 3b04 	str.w	r3, [r2], #4

080127f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80127f4:	4b08      	ldr	r3, [pc, #32]	; (8012818 <LoopForever+0x16>)
	cmp	r2, r3
 80127f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80127f8:	d3f9      	bcc.n	80127ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80127fa:	f006 f9b7 	bl	8018b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80127fe:	f7ff f857 	bl	80118b0 <main>

08012802 <LoopForever>:

LoopForever:
    b LoopForever
 8012802:	e7fe      	b.n	8012802 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8012804:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8012808:	08019fa0 	.word	0x08019fa0
	ldr	r0, =_sdata
 801280c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8012810:	200000a0 	.word	0x200000a0
	ldr	r2, =_sbss
 8012814:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 8012818:	200006b0 	.word	0x200006b0

0801281c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801281c:	e7fe      	b.n	801281c <ADC1_2_IRQHandler>
	...

08012820 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
 8012826:	4603      	mov	r3, r0
 8012828:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 801282a:	79fb      	ldrb	r3, [r7, #7]
 801282c:	4a06      	ldr	r2, [pc, #24]	; (8012848 <BSP_LED_Toggle+0x28>)
 801282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012836:	4611      	mov	r1, r2
 8012838:	4618      	mov	r0, r3
 801283a:	f002 faad 	bl	8014d98 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 801283e:	2300      	movs	r3, #0
}
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}
 8012848:	20000008 	.word	0x20000008

0801284c <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8012852:	2300      	movs	r3, #0
 8012854:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8012856:	4b12      	ldr	r3, [pc, #72]	; (80128a0 <BSP_SPI3_Init+0x54>)
 8012858:	4a12      	ldr	r2, [pc, #72]	; (80128a4 <BSP_SPI3_Init+0x58>)
 801285a:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 801285c:	4b12      	ldr	r3, [pc, #72]	; (80128a8 <BSP_SPI3_Init+0x5c>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	1c5a      	adds	r2, r3, #1
 8012862:	4911      	ldr	r1, [pc, #68]	; (80128a8 <BSP_SPI3_Init+0x5c>)
 8012864:	600a      	str	r2, [r1, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d114      	bne.n	8012894 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 801286a:	480d      	ldr	r0, [pc, #52]	; (80128a0 <BSP_SPI3_Init+0x54>)
 801286c:	f004 f9a8 	bl	8016bc0 <HAL_SPI_GetState>
 8012870:	4603      	mov	r3, r0
 8012872:	2b00      	cmp	r3, #0
 8012874:	d10e      	bne.n	8012894 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8012876:	480a      	ldr	r0, [pc, #40]	; (80128a0 <BSP_SPI3_Init+0x54>)
 8012878:	f000 f882 	bl	8012980 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d108      	bne.n	8012894 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8012882:	4807      	ldr	r0, [pc, #28]	; (80128a0 <BSP_SPI3_Init+0x54>)
 8012884:	f000 f83a 	bl	80128fc <MX_SPI3_Init>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d002      	beq.n	8012894 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 801288e:	f06f 0307 	mvn.w	r3, #7
 8012892:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8012894:	687b      	ldr	r3, [r7, #4]
}
 8012896:	4618      	mov	r0, r3
 8012898:	3708      	adds	r7, #8
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	20000628 	.word	0x20000628
 80128a4:	40003c00 	.word	0x40003c00
 80128a8:	200001d0 	.word	0x200001d0

080128ac <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b088      	sub	sp, #32
 80128b0:	af02      	add	r7, sp, #8
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	4613      	mov	r3, r2
 80128b8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80128ba:	2300      	movs	r3, #0
 80128bc:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80128be:	88fb      	ldrh	r3, [r7, #6]
 80128c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80128c4:	9200      	str	r2, [sp, #0]
 80128c6:	68ba      	ldr	r2, [r7, #8]
 80128c8:	68f9      	ldr	r1, [r7, #12]
 80128ca:	4807      	ldr	r0, [pc, #28]	; (80128e8 <BSP_SPI3_SendRecv+0x3c>)
 80128cc:	f003 fe5b 	bl	8016586 <HAL_SPI_TransmitReceive>
 80128d0:	4603      	mov	r3, r0
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d002      	beq.n	80128dc <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80128d6:	f06f 0305 	mvn.w	r3, #5
 80128da:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80128dc:	697b      	ldr	r3, [r7, #20]
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3718      	adds	r7, #24
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	20000628 	.word	0x20000628

080128ec <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80128ec:	b580      	push	{r7, lr}
 80128ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80128f0:	f000 f90e 	bl	8012b10 <HAL_GetTick>
 80128f4:	4603      	mov	r3, r0
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	bd80      	pop	{r7, pc}
	...

080128fc <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8012904:	2300      	movs	r3, #0
 8012906:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	4a1c      	ldr	r2, [pc, #112]	; (801297c <MX_SPI3_Init+0x80>)
 801290c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f44f 7282 	mov.w	r2, #260	; 0x104
 8012914:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2200      	movs	r2, #0
 801291a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8012922:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2200      	movs	r2, #0
 8012928:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2200      	movs	r2, #0
 801292e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012936:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2238      	movs	r2, #56	; 0x38
 801293c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	2200      	movs	r2, #0
 8012942:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2200      	movs	r2, #0
 8012948:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2200      	movs	r2, #0
 801294e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2207      	movs	r2, #7
 8012954:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2200      	movs	r2, #0
 801295a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2208      	movs	r2, #8
 8012960:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f003 fd62 	bl	801642c <HAL_SPI_Init>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d001      	beq.n	8012972 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 801296e:	2301      	movs	r3, #1
 8012970:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012972:	7bfb      	ldrb	r3, [r7, #15]
}
 8012974:	4618      	mov	r0, r3
 8012976:	3710      	adds	r7, #16
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	40003c00 	.word	0x40003c00

08012980 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b08a      	sub	sp, #40	; 0x28
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8012988:	4b2b      	ldr	r3, [pc, #172]	; (8012a38 <SPI3_MspInit+0xb8>)
 801298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801298c:	4a2a      	ldr	r2, [pc, #168]	; (8012a38 <SPI3_MspInit+0xb8>)
 801298e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012992:	6593      	str	r3, [r2, #88]	; 0x58
 8012994:	4b28      	ldr	r3, [pc, #160]	; (8012a38 <SPI3_MspInit+0xb8>)
 8012996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801299c:	613b      	str	r3, [r7, #16]
 801299e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80129a0:	4b25      	ldr	r3, [pc, #148]	; (8012a38 <SPI3_MspInit+0xb8>)
 80129a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80129a4:	4a24      	ldr	r2, [pc, #144]	; (8012a38 <SPI3_MspInit+0xb8>)
 80129a6:	f043 0304 	orr.w	r3, r3, #4
 80129aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80129ac:	4b22      	ldr	r3, [pc, #136]	; (8012a38 <SPI3_MspInit+0xb8>)
 80129ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80129b0:	f003 0304 	and.w	r3, r3, #4
 80129b4:	60fb      	str	r3, [r7, #12]
 80129b6:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80129b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129be:	2302      	movs	r3, #2
 80129c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129c2:	2300      	movs	r3, #0
 80129c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80129c6:	2303      	movs	r3, #3
 80129c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80129ca:	2306      	movs	r3, #6
 80129cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80129ce:	f107 0314 	add.w	r3, r7, #20
 80129d2:	4619      	mov	r1, r3
 80129d4:	4819      	ldr	r0, [pc, #100]	; (8012a3c <SPI3_MspInit+0xbc>)
 80129d6:	f001 ff11 	bl	80147fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80129da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80129de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129e0:	2302      	movs	r3, #2
 80129e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129e4:	2300      	movs	r3, #0
 80129e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80129e8:	2303      	movs	r3, #3
 80129ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80129ec:	2306      	movs	r3, #6
 80129ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80129f0:	f107 0314 	add.w	r3, r7, #20
 80129f4:	4619      	mov	r1, r3
 80129f6:	4811      	ldr	r0, [pc, #68]	; (8012a3c <SPI3_MspInit+0xbc>)
 80129f8:	f001 ff00 	bl	80147fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80129fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a02:	2302      	movs	r3, #2
 8012a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a06:	2300      	movs	r3, #0
 8012a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a0a:	2303      	movs	r3, #3
 8012a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8012a0e:	2306      	movs	r3, #6
 8012a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8012a12:	f107 0314 	add.w	r3, r7, #20
 8012a16:	4619      	mov	r1, r3
 8012a18:	4808      	ldr	r0, [pc, #32]	; (8012a3c <SPI3_MspInit+0xbc>)
 8012a1a:	f001 feef 	bl	80147fc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8012a1e:	2200      	movs	r2, #0
 8012a20:	2100      	movs	r1, #0
 8012a22:	2033      	movs	r0, #51	; 0x33
 8012a24:	f001 fb81 	bl	801412a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8012a28:	2033      	movs	r0, #51	; 0x33
 8012a2a:	f001 fb9a 	bl	8014162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8012a2e:	bf00      	nop
 8012a30:	3728      	adds	r7, #40	; 0x28
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}
 8012a36:	bf00      	nop
 8012a38:	40021000 	.word	0x40021000
 8012a3c:	48000800 	.word	0x48000800

08012a40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012a4a:	2003      	movs	r0, #3
 8012a4c:	f001 fb62 	bl	8014114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012a50:	2000      	movs	r0, #0
 8012a52:	f000 f80d 	bl	8012a70 <HAL_InitTick>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d002      	beq.n	8012a62 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	71fb      	strb	r3, [r7, #7]
 8012a60:	e001      	b.n	8012a66 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8012a62:	f7ff fc6f 	bl	8012344 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8012a66:	79fb      	ldrb	r3, [r7, #7]
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3708      	adds	r7, #8
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8012a7c:	4b17      	ldr	r3, [pc, #92]	; (8012adc <HAL_InitTick+0x6c>)
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d023      	beq.n	8012acc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8012a84:	4b16      	ldr	r3, [pc, #88]	; (8012ae0 <HAL_InitTick+0x70>)
 8012a86:	681a      	ldr	r2, [r3, #0]
 8012a88:	4b14      	ldr	r3, [pc, #80]	; (8012adc <HAL_InitTick+0x6c>)
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8012a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f001 fb6f 	bl	801417e <HAL_SYSTICK_Config>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d10f      	bne.n	8012ac6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2b0f      	cmp	r3, #15
 8012aaa:	d809      	bhi.n	8012ac0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8012aac:	2200      	movs	r2, #0
 8012aae:	6879      	ldr	r1, [r7, #4]
 8012ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab4:	f001 fb39 	bl	801412a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012ab8:	4a0a      	ldr	r2, [pc, #40]	; (8012ae4 <HAL_InitTick+0x74>)
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6013      	str	r3, [r2, #0]
 8012abe:	e007      	b.n	8012ad0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	73fb      	strb	r3, [r7, #15]
 8012ac4:	e004      	b.n	8012ad0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	73fb      	strb	r3, [r7, #15]
 8012aca:	e001      	b.n	8012ad0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8012acc:	2301      	movs	r3, #1
 8012ace:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8012ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3710      	adds	r7, #16
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	bf00      	nop
 8012adc:	20000018 	.word	0x20000018
 8012ae0:	20000004 	.word	0x20000004
 8012ae4:	20000014 	.word	0x20000014

08012ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012ae8:	b480      	push	{r7}
 8012aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012aec:	4b06      	ldr	r3, [pc, #24]	; (8012b08 <HAL_IncTick+0x20>)
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	461a      	mov	r2, r3
 8012af2:	4b06      	ldr	r3, [pc, #24]	; (8012b0c <HAL_IncTick+0x24>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	4413      	add	r3, r2
 8012af8:	4a04      	ldr	r2, [pc, #16]	; (8012b0c <HAL_IncTick+0x24>)
 8012afa:	6013      	str	r3, [r2, #0]
}
 8012afc:	bf00      	nop
 8012afe:	46bd      	mov	sp, r7
 8012b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b04:	4770      	bx	lr
 8012b06:	bf00      	nop
 8012b08:	20000018 	.word	0x20000018
 8012b0c:	2000068c 	.word	0x2000068c

08012b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012b10:	b480      	push	{r7}
 8012b12:	af00      	add	r7, sp, #0
  return uwTick;
 8012b14:	4b03      	ldr	r3, [pc, #12]	; (8012b24 <HAL_GetTick+0x14>)
 8012b16:	681b      	ldr	r3, [r3, #0]
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr
 8012b22:	bf00      	nop
 8012b24:	2000068c 	.word	0x2000068c

08012b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012b30:	f7ff ffee 	bl	8012b10 <HAL_GetTick>
 8012b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b40:	d005      	beq.n	8012b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8012b42:	4b0a      	ldr	r3, [pc, #40]	; (8012b6c <HAL_Delay+0x44>)
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	461a      	mov	r2, r3
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	4413      	add	r3, r2
 8012b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8012b4e:	bf00      	nop
 8012b50:	f7ff ffde 	bl	8012b10 <HAL_GetTick>
 8012b54:	4602      	mov	r2, r0
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	1ad3      	subs	r3, r2, r3
 8012b5a:	68fa      	ldr	r2, [r7, #12]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d8f7      	bhi.n	8012b50 <HAL_Delay+0x28>
  {
  }
}
 8012b60:	bf00      	nop
 8012b62:	bf00      	nop
 8012b64:	3710      	adds	r7, #16
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	20000018 	.word	0x20000018

08012b70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	689b      	ldr	r3, [r3, #8]
 8012b7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	431a      	orrs	r2, r3
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	609a      	str	r2, [r3, #8]
}
 8012b8a:	bf00      	nop
 8012b8c:	370c      	adds	r7, #12
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b94:	4770      	bx	lr

08012b96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8012b96:	b480      	push	{r7}
 8012b98:	b083      	sub	sp, #12
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	6078      	str	r0, [r7, #4]
 8012b9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	689b      	ldr	r3, [r3, #8]
 8012ba4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	431a      	orrs	r2, r3
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	609a      	str	r2, [r3, #8]
}
 8012bb0:	bf00      	nop
 8012bb2:	370c      	adds	r7, #12
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr

08012bbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	370c      	adds	r7, #12
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr

08012bd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8012bd8:	b480      	push	{r7}
 8012bda:	b087      	sub	sp, #28
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
 8012be4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	3360      	adds	r3, #96	; 0x60
 8012bea:	461a      	mov	r2, r3
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	4413      	add	r3, r2
 8012bf2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	681a      	ldr	r2, [r3, #0]
 8012bf8:	4b08      	ldr	r3, [pc, #32]	; (8012c1c <LL_ADC_SetOffset+0x44>)
 8012bfa:	4013      	ands	r3, r2
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8012c02:	683a      	ldr	r2, [r7, #0]
 8012c04:	430a      	orrs	r2, r1
 8012c06:	4313      	orrs	r3, r2
 8012c08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8012c10:	bf00      	nop
 8012c12:	371c      	adds	r7, #28
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr
 8012c1c:	03fff000 	.word	0x03fff000

08012c20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b085      	sub	sp, #20
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	3360      	adds	r3, #96	; 0x60
 8012c2e:	461a      	mov	r2, r3
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	4413      	add	r3, r2
 8012c36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3714      	adds	r7, #20
 8012c44:	46bd      	mov	sp, r7
 8012c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4a:	4770      	bx	lr

08012c4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b087      	sub	sp, #28
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	3360      	adds	r3, #96	; 0x60
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	68bb      	ldr	r3, [r7, #8]
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	4413      	add	r3, r2
 8012c64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	431a      	orrs	r2, r3
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8012c76:	bf00      	nop
 8012c78:	371c      	adds	r7, #28
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c80:	4770      	bx	lr

08012c82 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8012c82:	b480      	push	{r7}
 8012c84:	b083      	sub	sp, #12
 8012c86:	af00      	add	r7, sp, #0
 8012c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d101      	bne.n	8012c9a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8012c96:	2301      	movs	r3, #1
 8012c98:	e000      	b.n	8012c9c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8012c9a:	2300      	movs	r3, #0
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	370c      	adds	r7, #12
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca6:	4770      	bx	lr

08012ca8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b087      	sub	sp, #28
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	60f8      	str	r0, [r7, #12]
 8012cb0:	60b9      	str	r1, [r7, #8]
 8012cb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	3330      	adds	r3, #48	; 0x30
 8012cb8:	461a      	mov	r2, r3
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	0a1b      	lsrs	r3, r3, #8
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	f003 030c 	and.w	r3, r3, #12
 8012cc4:	4413      	add	r3, r2
 8012cc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	681a      	ldr	r2, [r3, #0]
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	f003 031f 	and.w	r3, r3, #31
 8012cd2:	211f      	movs	r1, #31
 8012cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8012cd8:	43db      	mvns	r3, r3
 8012cda:	401a      	ands	r2, r3
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	0e9b      	lsrs	r3, r3, #26
 8012ce0:	f003 011f 	and.w	r1, r3, #31
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	f003 031f 	and.w	r3, r3, #31
 8012cea:	fa01 f303 	lsl.w	r3, r1, r3
 8012cee:	431a      	orrs	r2, r3
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8012cf4:	bf00      	nop
 8012cf6:	371c      	adds	r7, #28
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfe:	4770      	bx	lr

08012d00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8012d00:	b480      	push	{r7}
 8012d02:	b087      	sub	sp, #28
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	60b9      	str	r1, [r7, #8]
 8012d0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	3314      	adds	r3, #20
 8012d10:	461a      	mov	r2, r3
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	0e5b      	lsrs	r3, r3, #25
 8012d16:	009b      	lsls	r3, r3, #2
 8012d18:	f003 0304 	and.w	r3, r3, #4
 8012d1c:	4413      	add	r3, r2
 8012d1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	0d1b      	lsrs	r3, r3, #20
 8012d28:	f003 031f 	and.w	r3, r3, #31
 8012d2c:	2107      	movs	r1, #7
 8012d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8012d32:	43db      	mvns	r3, r3
 8012d34:	401a      	ands	r2, r3
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	0d1b      	lsrs	r3, r3, #20
 8012d3a:	f003 031f 	and.w	r3, r3, #31
 8012d3e:	6879      	ldr	r1, [r7, #4]
 8012d40:	fa01 f303 	lsl.w	r3, r1, r3
 8012d44:	431a      	orrs	r2, r3
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8012d4a:	bf00      	nop
 8012d4c:	371c      	adds	r7, #28
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d54:	4770      	bx	lr
	...

08012d58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b085      	sub	sp, #20
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	60f8      	str	r0, [r7, #12]
 8012d60:	60b9      	str	r1, [r7, #8]
 8012d62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d70:	43db      	mvns	r3, r3
 8012d72:	401a      	ands	r2, r3
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f003 0318 	and.w	r3, r3, #24
 8012d7a:	4908      	ldr	r1, [pc, #32]	; (8012d9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8012d7c:	40d9      	lsrs	r1, r3
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	400b      	ands	r3, r1
 8012d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d86:	431a      	orrs	r2, r3
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8012d8e:	bf00      	nop
 8012d90:	3714      	adds	r7, #20
 8012d92:	46bd      	mov	sp, r7
 8012d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d98:	4770      	bx	lr
 8012d9a:	bf00      	nop
 8012d9c:	0007ffff 	.word	0x0007ffff

08012da0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b083      	sub	sp, #12
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	689b      	ldr	r3, [r3, #8]
 8012dac:	f003 031f 	and.w	r3, r3, #31
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	370c      	adds	r7, #12
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr

08012dbc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	370c      	adds	r7, #12
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr

08012dd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8012dd8:	b480      	push	{r7}
 8012dda:	b083      	sub	sp, #12
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	689b      	ldr	r3, [r3, #8]
 8012de4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8012de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	6093      	str	r3, [r2, #8]
}
 8012df0:	bf00      	nop
 8012df2:	370c      	adds	r7, #12
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr

08012dfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	b083      	sub	sp, #12
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	689b      	ldr	r3, [r3, #8]
 8012e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012e10:	d101      	bne.n	8012e16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8012e12:	2301      	movs	r3, #1
 8012e14:	e000      	b.n	8012e18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8012e16:	2300      	movs	r3, #0
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	370c      	adds	r7, #12
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr

08012e24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	689b      	ldr	r3, [r3, #8]
 8012e30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8012e34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012e38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8012e40:	bf00      	nop
 8012e42:	370c      	adds	r7, #12
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr

08012e4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	689b      	ldr	r3, [r3, #8]
 8012e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012e60:	d101      	bne.n	8012e66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8012e62:	2301      	movs	r3, #1
 8012e64:	e000      	b.n	8012e68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8012e66:	2300      	movs	r3, #0
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	370c      	adds	r7, #12
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr

08012e74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8012e74:	b480      	push	{r7}
 8012e76:	b083      	sub	sp, #12
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012e88:	f043 0201 	orr.w	r2, r3, #1
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8012e90:	bf00      	nop
 8012e92:	370c      	adds	r7, #12
 8012e94:	46bd      	mov	sp, r7
 8012e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9a:	4770      	bx	lr

08012e9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	689b      	ldr	r3, [r3, #8]
 8012ea8:	f003 0301 	and.w	r3, r3, #1
 8012eac:	2b01      	cmp	r3, #1
 8012eae:	d101      	bne.n	8012eb4 <LL_ADC_IsEnabled+0x18>
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	e000      	b.n	8012eb6 <LL_ADC_IsEnabled+0x1a>
 8012eb4:	2300      	movs	r3, #0
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	370c      	adds	r7, #12
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec0:	4770      	bx	lr

08012ec2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8012ec2:	b480      	push	{r7}
 8012ec4:	b083      	sub	sp, #12
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	689b      	ldr	r3, [r3, #8]
 8012ece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012ed2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012ed6:	f043 0204 	orr.w	r2, r3, #4
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8012ede:	bf00      	nop
 8012ee0:	370c      	adds	r7, #12
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee8:	4770      	bx	lr

08012eea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8012eea:	b480      	push	{r7}
 8012eec:	b083      	sub	sp, #12
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	689b      	ldr	r3, [r3, #8]
 8012ef6:	f003 0304 	and.w	r3, r3, #4
 8012efa:	2b04      	cmp	r3, #4
 8012efc:	d101      	bne.n	8012f02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8012efe:	2301      	movs	r3, #1
 8012f00:	e000      	b.n	8012f04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8012f02:	2300      	movs	r3, #0
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	370c      	adds	r7, #12
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr

08012f10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8012f10:	b480      	push	{r7}
 8012f12:	b083      	sub	sp, #12
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	689b      	ldr	r3, [r3, #8]
 8012f1c:	f003 0308 	and.w	r3, r3, #8
 8012f20:	2b08      	cmp	r3, #8
 8012f22:	d101      	bne.n	8012f28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8012f24:	2301      	movs	r3, #1
 8012f26:	e000      	b.n	8012f2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8012f28:	2300      	movs	r3, #0
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	370c      	adds	r7, #12
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr
	...

08012f38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8012f38:	b590      	push	{r4, r7, lr}
 8012f3a:	b089      	sub	sp, #36	; 0x24
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012f40:	2300      	movs	r3, #0
 8012f42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8012f44:	2300      	movs	r3, #0
 8012f46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d101      	bne.n	8012f52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8012f4e:	2301      	movs	r3, #1
 8012f50:	e136      	b.n	80131c0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	691b      	ldr	r3, [r3, #16]
 8012f56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d109      	bne.n	8012f74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f7ff fa13 	bl	801238c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7ff ff3f 	bl	8012dfc <LL_ADC_IsDeepPowerDownEnabled>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d004      	beq.n	8012f8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7ff ff25 	bl	8012dd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7ff ff5a 	bl	8012e4c <LL_ADC_IsInternalRegulatorEnabled>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d115      	bne.n	8012fca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7ff ff3e 	bl	8012e24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012fa8:	4b87      	ldr	r3, [pc, #540]	; (80131c8 <HAL_ADC_Init+0x290>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	099b      	lsrs	r3, r3, #6
 8012fae:	4a87      	ldr	r2, [pc, #540]	; (80131cc <HAL_ADC_Init+0x294>)
 8012fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8012fb4:	099b      	lsrs	r3, r3, #6
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	005b      	lsls	r3, r3, #1
 8012fba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8012fbc:	e002      	b.n	8012fc4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	3b01      	subs	r3, #1
 8012fc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d1f9      	bne.n	8012fbe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7ff ff3c 	bl	8012e4c <LL_ADC_IsInternalRegulatorEnabled>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d10d      	bne.n	8012ff6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fde:	f043 0210 	orr.w	r2, r3, #16
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fea:	f043 0201 	orr.w	r2, r3, #1
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7ff ff75 	bl	8012eea <LL_ADC_REG_IsConversionOngoing>
 8013000:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013006:	f003 0310 	and.w	r3, r3, #16
 801300a:	2b00      	cmp	r3, #0
 801300c:	f040 80cf 	bne.w	80131ae <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	2b00      	cmp	r3, #0
 8013014:	f040 80cb 	bne.w	80131ae <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801301c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8013020:	f043 0202 	orr.w	r2, r3, #2
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	4618      	mov	r0, r3
 801302e:	f7ff ff35 	bl	8012e9c <LL_ADC_IsEnabled>
 8013032:	4603      	mov	r3, r0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d115      	bne.n	8013064 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8013038:	4865      	ldr	r0, [pc, #404]	; (80131d0 <HAL_ADC_Init+0x298>)
 801303a:	f7ff ff2f 	bl	8012e9c <LL_ADC_IsEnabled>
 801303e:	4604      	mov	r4, r0
 8013040:	4864      	ldr	r0, [pc, #400]	; (80131d4 <HAL_ADC_Init+0x29c>)
 8013042:	f7ff ff2b 	bl	8012e9c <LL_ADC_IsEnabled>
 8013046:	4603      	mov	r3, r0
 8013048:	431c      	orrs	r4, r3
 801304a:	4863      	ldr	r0, [pc, #396]	; (80131d8 <HAL_ADC_Init+0x2a0>)
 801304c:	f7ff ff26 	bl	8012e9c <LL_ADC_IsEnabled>
 8013050:	4603      	mov	r3, r0
 8013052:	4323      	orrs	r3, r4
 8013054:	2b00      	cmp	r3, #0
 8013056:	d105      	bne.n	8013064 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	685b      	ldr	r3, [r3, #4]
 801305c:	4619      	mov	r1, r3
 801305e:	485f      	ldr	r0, [pc, #380]	; (80131dc <HAL_ADC_Init+0x2a4>)
 8013060:	f7ff fd86 	bl	8012b70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	7e5b      	ldrb	r3, [r3, #25]
 8013068:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801306e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8013074:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 801307a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013082:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013084:	4313      	orrs	r3, r2
 8013086:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801308e:	2b01      	cmp	r3, #1
 8013090:	d106      	bne.n	80130a0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013096:	3b01      	subs	r3, #1
 8013098:	045b      	lsls	r3, r3, #17
 801309a:	69ba      	ldr	r2, [r7, #24]
 801309c:	4313      	orrs	r3, r2
 801309e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d009      	beq.n	80130bc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130ac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80130b6:	69ba      	ldr	r2, [r7, #24]
 80130b8:	4313      	orrs	r3, r2
 80130ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	68da      	ldr	r2, [r3, #12]
 80130c2:	4b47      	ldr	r3, [pc, #284]	; (80131e0 <HAL_ADC_Init+0x2a8>)
 80130c4:	4013      	ands	r3, r2
 80130c6:	687a      	ldr	r2, [r7, #4]
 80130c8:	6812      	ldr	r2, [r2, #0]
 80130ca:	69b9      	ldr	r1, [r7, #24]
 80130cc:	430b      	orrs	r3, r1
 80130ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7ff ff08 	bl	8012eea <LL_ADC_REG_IsConversionOngoing>
 80130da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7ff ff15 	bl	8012f10 <LL_ADC_INJ_IsConversionOngoing>
 80130e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d13d      	bne.n	801316a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d13a      	bne.n	801316a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80130f8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013100:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8013102:	4313      	orrs	r3, r2
 8013104:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013110:	f023 0302 	bic.w	r3, r3, #2
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	6812      	ldr	r2, [r2, #0]
 8013118:	69b9      	ldr	r1, [r7, #24]
 801311a:	430b      	orrs	r3, r1
 801311c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013124:	2b01      	cmp	r3, #1
 8013126:	d118      	bne.n	801315a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	691b      	ldr	r3, [r3, #16]
 801312e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8013132:	f023 0304 	bic.w	r3, r3, #4
 8013136:	687a      	ldr	r2, [r7, #4]
 8013138:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801313a:	687a      	ldr	r2, [r7, #4]
 801313c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801313e:	4311      	orrs	r1, r2
 8013140:	687a      	ldr	r2, [r7, #4]
 8013142:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013144:	4311      	orrs	r1, r2
 8013146:	687a      	ldr	r2, [r7, #4]
 8013148:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801314a:	430a      	orrs	r2, r1
 801314c:	431a      	orrs	r2, r3
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	f042 0201 	orr.w	r2, r2, #1
 8013156:	611a      	str	r2, [r3, #16]
 8013158:	e007      	b.n	801316a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	691a      	ldr	r2, [r3, #16]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f022 0201 	bic.w	r2, r2, #1
 8013168:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	691b      	ldr	r3, [r3, #16]
 801316e:	2b01      	cmp	r3, #1
 8013170:	d10c      	bne.n	801318c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013178:	f023 010f 	bic.w	r1, r3, #15
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	69db      	ldr	r3, [r3, #28]
 8013180:	1e5a      	subs	r2, r3, #1
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	430a      	orrs	r2, r1
 8013188:	631a      	str	r2, [r3, #48]	; 0x30
 801318a:	e007      	b.n	801319c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f022 020f 	bic.w	r2, r2, #15
 801319a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131a0:	f023 0303 	bic.w	r3, r3, #3
 80131a4:	f043 0201 	orr.w	r2, r3, #1
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	655a      	str	r2, [r3, #84]	; 0x54
 80131ac:	e007      	b.n	80131be <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131b2:	f043 0210 	orr.w	r2, r3, #16
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80131ba:	2301      	movs	r3, #1
 80131bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80131be:	7ffb      	ldrb	r3, [r7, #31]
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3724      	adds	r7, #36	; 0x24
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd90      	pop	{r4, r7, pc}
 80131c8:	20000004 	.word	0x20000004
 80131cc:	053e2d63 	.word	0x053e2d63
 80131d0:	50040000 	.word	0x50040000
 80131d4:	50040100 	.word	0x50040100
 80131d8:	50040200 	.word	0x50040200
 80131dc:	50040300 	.word	0x50040300
 80131e0:	fff0c007 	.word	0xfff0c007

080131e4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b086      	sub	sp, #24
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80131ec:	4857      	ldr	r0, [pc, #348]	; (801334c <HAL_ADC_Start+0x168>)
 80131ee:	f7ff fdd7 	bl	8012da0 <LL_ADC_GetMultimode>
 80131f2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7ff fe76 	bl	8012eea <LL_ADC_REG_IsConversionOngoing>
 80131fe:	4603      	mov	r3, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	f040 809c 	bne.w	801333e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801320c:	2b01      	cmp	r3, #1
 801320e:	d101      	bne.n	8013214 <HAL_ADC_Start+0x30>
 8013210:	2302      	movs	r3, #2
 8013212:	e097      	b.n	8013344 <HAL_ADC_Start+0x160>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2201      	movs	r2, #1
 8013218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f000 fd71 	bl	8013d04 <ADC_Enable>
 8013222:	4603      	mov	r3, r0
 8013224:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8013226:	7dfb      	ldrb	r3, [r7, #23]
 8013228:	2b00      	cmp	r3, #0
 801322a:	f040 8083 	bne.w	8013334 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013232:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8013236:	f023 0301 	bic.w	r3, r3, #1
 801323a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	4a42      	ldr	r2, [pc, #264]	; (8013350 <HAL_ADC_Start+0x16c>)
 8013248:	4293      	cmp	r3, r2
 801324a:	d002      	beq.n	8013252 <HAL_ADC_Start+0x6e>
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	e000      	b.n	8013254 <HAL_ADC_Start+0x70>
 8013252:	4b40      	ldr	r3, [pc, #256]	; (8013354 <HAL_ADC_Start+0x170>)
 8013254:	687a      	ldr	r2, [r7, #4]
 8013256:	6812      	ldr	r2, [r2, #0]
 8013258:	4293      	cmp	r3, r2
 801325a:	d002      	beq.n	8013262 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d105      	bne.n	801326e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013266:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801327a:	d106      	bne.n	801328a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013280:	f023 0206 	bic.w	r2, r3, #6
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	659a      	str	r2, [r3, #88]	; 0x58
 8013288:	e002      	b.n	8013290 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2200      	movs	r2, #0
 801328e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	221c      	movs	r2, #28
 8013296:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2200      	movs	r2, #0
 801329c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4a2a      	ldr	r2, [pc, #168]	; (8013350 <HAL_ADC_Start+0x16c>)
 80132a6:	4293      	cmp	r3, r2
 80132a8:	d002      	beq.n	80132b0 <HAL_ADC_Start+0xcc>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	e000      	b.n	80132b2 <HAL_ADC_Start+0xce>
 80132b0:	4b28      	ldr	r3, [pc, #160]	; (8013354 <HAL_ADC_Start+0x170>)
 80132b2:	687a      	ldr	r2, [r7, #4]
 80132b4:	6812      	ldr	r2, [r2, #0]
 80132b6:	4293      	cmp	r3, r2
 80132b8:	d008      	beq.n	80132cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d005      	beq.n	80132cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	2b05      	cmp	r3, #5
 80132c4:	d002      	beq.n	80132cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	2b09      	cmp	r3, #9
 80132ca:	d114      	bne.n	80132f6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	68db      	ldr	r3, [r3, #12]
 80132d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d007      	beq.n	80132ea <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80132e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7ff fde7 	bl	8012ec2 <LL_ADC_REG_StartConversion>
 80132f4:	e025      	b.n	8013342 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	4a12      	ldr	r2, [pc, #72]	; (8013350 <HAL_ADC_Start+0x16c>)
 8013308:	4293      	cmp	r3, r2
 801330a:	d002      	beq.n	8013312 <HAL_ADC_Start+0x12e>
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	e000      	b.n	8013314 <HAL_ADC_Start+0x130>
 8013312:	4b10      	ldr	r3, [pc, #64]	; (8013354 <HAL_ADC_Start+0x170>)
 8013314:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	68db      	ldr	r3, [r3, #12]
 801331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801331e:	2b00      	cmp	r3, #0
 8013320:	d00f      	beq.n	8013342 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013326:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801332a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	655a      	str	r2, [r3, #84]	; 0x54
 8013332:	e006      	b.n	8013342 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2200      	movs	r2, #0
 8013338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801333c:	e001      	b.n	8013342 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801333e:	2302      	movs	r3, #2
 8013340:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8013342:	7dfb      	ldrb	r3, [r7, #23]
}
 8013344:	4618      	mov	r0, r3
 8013346:	3718      	adds	r7, #24
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	50040300 	.word	0x50040300
 8013350:	50040100 	.word	0x50040100
 8013354:	50040000 	.word	0x50040000

08013358 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b088      	sub	sp, #32
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013362:	4866      	ldr	r0, [pc, #408]	; (80134fc <HAL_ADC_PollForConversion+0x1a4>)
 8013364:	f7ff fd1c 	bl	8012da0 <LL_ADC_GetMultimode>
 8013368:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	695b      	ldr	r3, [r3, #20]
 801336e:	2b08      	cmp	r3, #8
 8013370:	d102      	bne.n	8013378 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8013372:	2308      	movs	r3, #8
 8013374:	61fb      	str	r3, [r7, #28]
 8013376:	e02a      	b.n	80133ce <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d005      	beq.n	801338a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	2b05      	cmp	r3, #5
 8013382:	d002      	beq.n	801338a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	2b09      	cmp	r3, #9
 8013388:	d111      	bne.n	80133ae <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	68db      	ldr	r3, [r3, #12]
 8013390:	f003 0301 	and.w	r3, r3, #1
 8013394:	2b00      	cmp	r3, #0
 8013396:	d007      	beq.n	80133a8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801339c:	f043 0220 	orr.w	r2, r3, #32
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80133a4:	2301      	movs	r3, #1
 80133a6:	e0a4      	b.n	80134f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80133a8:	2304      	movs	r3, #4
 80133aa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80133ac:	e00f      	b.n	80133ce <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80133ae:	4853      	ldr	r0, [pc, #332]	; (80134fc <HAL_ADC_PollForConversion+0x1a4>)
 80133b0:	f7ff fd04 	bl	8012dbc <LL_ADC_GetMultiDMATransfer>
 80133b4:	4603      	mov	r3, r0
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d007      	beq.n	80133ca <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133be:	f043 0220 	orr.w	r2, r3, #32
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80133c6:	2301      	movs	r3, #1
 80133c8:	e093      	b.n	80134f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80133ca:	2304      	movs	r3, #4
 80133cc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80133ce:	f7ff fb9f 	bl	8012b10 <HAL_GetTick>
 80133d2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80133d4:	e021      	b.n	801341a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133dc:	d01d      	beq.n	801341a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80133de:	f7ff fb97 	bl	8012b10 <HAL_GetTick>
 80133e2:	4602      	mov	r2, r0
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	1ad3      	subs	r3, r2, r3
 80133e8:	683a      	ldr	r2, [r7, #0]
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d302      	bcc.n	80133f4 <HAL_ADC_PollForConversion+0x9c>
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d112      	bne.n	801341a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	69fb      	ldr	r3, [r7, #28]
 80133fc:	4013      	ands	r3, r2
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d10b      	bne.n	801341a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013406:	f043 0204 	orr.w	r2, r3, #4
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2200      	movs	r2, #0
 8013412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8013416:	2303      	movs	r3, #3
 8013418:	e06b      	b.n	80134f2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	681a      	ldr	r2, [r3, #0]
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	4013      	ands	r3, r2
 8013424:	2b00      	cmp	r3, #0
 8013426:	d0d6      	beq.n	80133d6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801342c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	4618      	mov	r0, r3
 801343a:	f7ff fc22 	bl	8012c82 <LL_ADC_REG_IsTriggerSourceSWStart>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d01c      	beq.n	801347e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	7e5b      	ldrb	r3, [r3, #25]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d118      	bne.n	801347e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	f003 0308 	and.w	r3, r3, #8
 8013456:	2b08      	cmp	r3, #8
 8013458:	d111      	bne.n	801347e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801345e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801346a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801346e:	2b00      	cmp	r3, #0
 8013470:	d105      	bne.n	801347e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013476:	f043 0201 	orr.w	r2, r3, #1
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	4a1f      	ldr	r2, [pc, #124]	; (8013500 <HAL_ADC_PollForConversion+0x1a8>)
 8013484:	4293      	cmp	r3, r2
 8013486:	d002      	beq.n	801348e <HAL_ADC_PollForConversion+0x136>
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	e000      	b.n	8013490 <HAL_ADC_PollForConversion+0x138>
 801348e:	4b1d      	ldr	r3, [pc, #116]	; (8013504 <HAL_ADC_PollForConversion+0x1ac>)
 8013490:	687a      	ldr	r2, [r7, #4]
 8013492:	6812      	ldr	r2, [r2, #0]
 8013494:	4293      	cmp	r3, r2
 8013496:	d008      	beq.n	80134aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d005      	beq.n	80134aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	2b05      	cmp	r3, #5
 80134a2:	d002      	beq.n	80134aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	2b09      	cmp	r3, #9
 80134a8:	d104      	bne.n	80134b4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	61bb      	str	r3, [r7, #24]
 80134b2:	e00c      	b.n	80134ce <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	4a11      	ldr	r2, [pc, #68]	; (8013500 <HAL_ADC_PollForConversion+0x1a8>)
 80134ba:	4293      	cmp	r3, r2
 80134bc:	d002      	beq.n	80134c4 <HAL_ADC_PollForConversion+0x16c>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	e000      	b.n	80134c6 <HAL_ADC_PollForConversion+0x16e>
 80134c4:	4b0f      	ldr	r3, [pc, #60]	; (8013504 <HAL_ADC_PollForConversion+0x1ac>)
 80134c6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	2b08      	cmp	r3, #8
 80134d2:	d104      	bne.n	80134de <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2208      	movs	r2, #8
 80134da:	601a      	str	r2, [r3, #0]
 80134dc:	e008      	b.n	80134f0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d103      	bne.n	80134f0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	220c      	movs	r2, #12
 80134ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80134f0:	2300      	movs	r3, #0
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3720      	adds	r7, #32
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	bf00      	nop
 80134fc:	50040300 	.word	0x50040300
 8013500:	50040100 	.word	0x50040100
 8013504:	50040000 	.word	0x50040000

08013508 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8013508:	b480      	push	{r7}
 801350a:	b083      	sub	sp, #12
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8013516:	4618      	mov	r0, r3
 8013518:	370c      	adds	r7, #12
 801351a:	46bd      	mov	sp, r7
 801351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013520:	4770      	bx	lr
	...

08013524 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b0b6      	sub	sp, #216	; 0xd8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801352e:	2300      	movs	r3, #0
 8013530:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8013534:	2300      	movs	r3, #0
 8013536:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801353e:	2b01      	cmp	r3, #1
 8013540:	d101      	bne.n	8013546 <HAL_ADC_ConfigChannel+0x22>
 8013542:	2302      	movs	r3, #2
 8013544:	e3c7      	b.n	8013cd6 <HAL_ADC_ConfigChannel+0x7b2>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2201      	movs	r2, #1
 801354a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	4618      	mov	r0, r3
 8013554:	f7ff fcc9 	bl	8012eea <LL_ADC_REG_IsConversionOngoing>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	f040 83a8 	bne.w	8013cb0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	685b      	ldr	r3, [r3, #4]
 8013564:	2b05      	cmp	r3, #5
 8013566:	d824      	bhi.n	80135b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	685b      	ldr	r3, [r3, #4]
 801356c:	3b02      	subs	r3, #2
 801356e:	2b03      	cmp	r3, #3
 8013570:	d81b      	bhi.n	80135aa <HAL_ADC_ConfigChannel+0x86>
 8013572:	a201      	add	r2, pc, #4	; (adr r2, 8013578 <HAL_ADC_ConfigChannel+0x54>)
 8013574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013578:	08013589 	.word	0x08013589
 801357c:	08013591 	.word	0x08013591
 8013580:	08013599 	.word	0x08013599
 8013584:	080135a1 	.word	0x080135a1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	220c      	movs	r2, #12
 801358c:	605a      	str	r2, [r3, #4]
          break;
 801358e:	e011      	b.n	80135b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	2212      	movs	r2, #18
 8013594:	605a      	str	r2, [r3, #4]
          break;
 8013596:	e00d      	b.n	80135b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	2218      	movs	r2, #24
 801359c:	605a      	str	r2, [r3, #4]
          break;
 801359e:	e009      	b.n	80135b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80135a6:	605a      	str	r2, [r3, #4]
          break;
 80135a8:	e004      	b.n	80135b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	2206      	movs	r2, #6
 80135ae:	605a      	str	r2, [r3, #4]
          break;
 80135b0:	e000      	b.n	80135b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80135b2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6818      	ldr	r0, [r3, #0]
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	6859      	ldr	r1, [r3, #4]
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	461a      	mov	r2, r3
 80135c2:	f7ff fb71 	bl	8012ca8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7ff fc8d 	bl	8012eea <LL_ADC_REG_IsConversionOngoing>
 80135d0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	4618      	mov	r0, r3
 80135da:	f7ff fc99 	bl	8012f10 <LL_ADC_INJ_IsConversionOngoing>
 80135de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80135e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	f040 81a6 	bne.w	8013938 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80135ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	f040 81a1 	bne.w	8013938 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	6818      	ldr	r0, [r3, #0]
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	6819      	ldr	r1, [r3, #0]
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	689b      	ldr	r3, [r3, #8]
 8013602:	461a      	mov	r2, r3
 8013604:	f7ff fb7c 	bl	8012d00 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	695a      	ldr	r2, [r3, #20]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	08db      	lsrs	r3, r3, #3
 8013614:	f003 0303 	and.w	r3, r3, #3
 8013618:	005b      	lsls	r3, r3, #1
 801361a:	fa02 f303 	lsl.w	r3, r2, r3
 801361e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	691b      	ldr	r3, [r3, #16]
 8013626:	2b04      	cmp	r3, #4
 8013628:	d00a      	beq.n	8013640 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6818      	ldr	r0, [r3, #0]
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	6919      	ldr	r1, [r3, #16]
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	681a      	ldr	r2, [r3, #0]
 8013636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801363a:	f7ff facd 	bl	8012bd8 <LL_ADC_SetOffset>
 801363e:	e17b      	b.n	8013938 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2100      	movs	r1, #0
 8013646:	4618      	mov	r0, r3
 8013648:	f7ff faea 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 801364c:	4603      	mov	r3, r0
 801364e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013652:	2b00      	cmp	r3, #0
 8013654:	d10a      	bne.n	801366c <HAL_ADC_ConfigChannel+0x148>
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2100      	movs	r1, #0
 801365c:	4618      	mov	r0, r3
 801365e:	f7ff fadf 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 8013662:	4603      	mov	r3, r0
 8013664:	0e9b      	lsrs	r3, r3, #26
 8013666:	f003 021f 	and.w	r2, r3, #31
 801366a:	e01e      	b.n	80136aa <HAL_ADC_ConfigChannel+0x186>
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	2100      	movs	r1, #0
 8013672:	4618      	mov	r0, r3
 8013674:	f7ff fad4 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 8013678:	4603      	mov	r3, r0
 801367a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801367e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013682:	fa93 f3a3 	rbit	r3, r3
 8013686:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801368a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801368e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8013692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013696:	2b00      	cmp	r3, #0
 8013698:	d101      	bne.n	801369e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 801369a:	2320      	movs	r3, #32
 801369c:	e004      	b.n	80136a8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 801369e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80136a2:	fab3 f383 	clz	r3, r3
 80136a6:	b2db      	uxtb	r3, r3
 80136a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d105      	bne.n	80136c2 <HAL_ADC_ConfigChannel+0x19e>
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	0e9b      	lsrs	r3, r3, #26
 80136bc:	f003 031f 	and.w	r3, r3, #31
 80136c0:	e018      	b.n	80136f4 <HAL_ADC_ConfigChannel+0x1d0>
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80136ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80136ce:	fa93 f3a3 	rbit	r3, r3
 80136d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80136d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80136da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80136de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d101      	bne.n	80136ea <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80136e6:	2320      	movs	r3, #32
 80136e8:	e004      	b.n	80136f4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80136ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80136ee:	fab3 f383 	clz	r3, r3
 80136f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d106      	bne.n	8013706 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	2200      	movs	r2, #0
 80136fe:	2100      	movs	r1, #0
 8013700:	4618      	mov	r0, r3
 8013702:	f7ff faa3 	bl	8012c4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2101      	movs	r1, #1
 801370c:	4618      	mov	r0, r3
 801370e:	f7ff fa87 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 8013712:	4603      	mov	r3, r0
 8013714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013718:	2b00      	cmp	r3, #0
 801371a:	d10a      	bne.n	8013732 <HAL_ADC_ConfigChannel+0x20e>
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	2101      	movs	r1, #1
 8013722:	4618      	mov	r0, r3
 8013724:	f7ff fa7c 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 8013728:	4603      	mov	r3, r0
 801372a:	0e9b      	lsrs	r3, r3, #26
 801372c:	f003 021f 	and.w	r2, r3, #31
 8013730:	e01e      	b.n	8013770 <HAL_ADC_ConfigChannel+0x24c>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	2101      	movs	r1, #1
 8013738:	4618      	mov	r0, r3
 801373a:	f7ff fa71 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 801373e:	4603      	mov	r3, r0
 8013740:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013744:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013748:	fa93 f3a3 	rbit	r3, r3
 801374c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8013750:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8013758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801375c:	2b00      	cmp	r3, #0
 801375e:	d101      	bne.n	8013764 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8013760:	2320      	movs	r3, #32
 8013762:	e004      	b.n	801376e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8013764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013768:	fab3 f383 	clz	r3, r3
 801376c:	b2db      	uxtb	r3, r3
 801376e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013778:	2b00      	cmp	r3, #0
 801377a:	d105      	bne.n	8013788 <HAL_ADC_ConfigChannel+0x264>
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	0e9b      	lsrs	r3, r3, #26
 8013782:	f003 031f 	and.w	r3, r3, #31
 8013786:	e018      	b.n	80137ba <HAL_ADC_ConfigChannel+0x296>
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013794:	fa93 f3a3 	rbit	r3, r3
 8013798:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801379c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80137a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80137a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d101      	bne.n	80137b0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80137ac:	2320      	movs	r3, #32
 80137ae:	e004      	b.n	80137ba <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80137b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80137b4:	fab3 f383 	clz	r3, r3
 80137b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d106      	bne.n	80137cc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	2200      	movs	r2, #0
 80137c4:	2101      	movs	r1, #1
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7ff fa40 	bl	8012c4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	2102      	movs	r1, #2
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7ff fa24 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 80137d8:	4603      	mov	r3, r0
 80137da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d10a      	bne.n	80137f8 <HAL_ADC_ConfigChannel+0x2d4>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	2102      	movs	r1, #2
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7ff fa19 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 80137ee:	4603      	mov	r3, r0
 80137f0:	0e9b      	lsrs	r3, r3, #26
 80137f2:	f003 021f 	and.w	r2, r3, #31
 80137f6:	e01e      	b.n	8013836 <HAL_ADC_ConfigChannel+0x312>
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	2102      	movs	r1, #2
 80137fe:	4618      	mov	r0, r3
 8013800:	f7ff fa0e 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 8013804:	4603      	mov	r3, r0
 8013806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801380a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801380e:	fa93 f3a3 	rbit	r3, r3
 8013812:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8013816:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801381a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801381e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013822:	2b00      	cmp	r3, #0
 8013824:	d101      	bne.n	801382a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8013826:	2320      	movs	r3, #32
 8013828:	e004      	b.n	8013834 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 801382a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801382e:	fab3 f383 	clz	r3, r3
 8013832:	b2db      	uxtb	r3, r3
 8013834:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801383e:	2b00      	cmp	r3, #0
 8013840:	d105      	bne.n	801384e <HAL_ADC_ConfigChannel+0x32a>
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	0e9b      	lsrs	r3, r3, #26
 8013848:	f003 031f 	and.w	r3, r3, #31
 801384c:	e016      	b.n	801387c <HAL_ADC_ConfigChannel+0x358>
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801385a:	fa93 f3a3 	rbit	r3, r3
 801385e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8013860:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8013866:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801386a:	2b00      	cmp	r3, #0
 801386c:	d101      	bne.n	8013872 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 801386e:	2320      	movs	r3, #32
 8013870:	e004      	b.n	801387c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8013872:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013876:	fab3 f383 	clz	r3, r3
 801387a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801387c:	429a      	cmp	r2, r3
 801387e:	d106      	bne.n	801388e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	2200      	movs	r2, #0
 8013886:	2102      	movs	r1, #2
 8013888:	4618      	mov	r0, r3
 801388a:	f7ff f9df 	bl	8012c4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2103      	movs	r1, #3
 8013894:	4618      	mov	r0, r3
 8013896:	f7ff f9c3 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 801389a:	4603      	mov	r3, r0
 801389c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d10a      	bne.n	80138ba <HAL_ADC_ConfigChannel+0x396>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	2103      	movs	r1, #3
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7ff f9b8 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 80138b0:	4603      	mov	r3, r0
 80138b2:	0e9b      	lsrs	r3, r3, #26
 80138b4:	f003 021f 	and.w	r2, r3, #31
 80138b8:	e017      	b.n	80138ea <HAL_ADC_ConfigChannel+0x3c6>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	2103      	movs	r1, #3
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ff f9ad 	bl	8012c20 <LL_ADC_GetOffsetChannel>
 80138c6:	4603      	mov	r3, r0
 80138c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80138ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80138cc:	fa93 f3a3 	rbit	r3, r3
 80138d0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80138d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80138d4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80138d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d101      	bne.n	80138e0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80138dc:	2320      	movs	r3, #32
 80138de:	e003      	b.n	80138e8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80138e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80138e2:	fab3 f383 	clz	r3, r3
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d105      	bne.n	8013902 <HAL_ADC_ConfigChannel+0x3de>
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	0e9b      	lsrs	r3, r3, #26
 80138fc:	f003 031f 	and.w	r3, r3, #31
 8013900:	e011      	b.n	8013926 <HAL_ADC_ConfigChannel+0x402>
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801390a:	fa93 f3a3 	rbit	r3, r3
 801390e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8013910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013912:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8013914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013916:	2b00      	cmp	r3, #0
 8013918:	d101      	bne.n	801391e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 801391a:	2320      	movs	r3, #32
 801391c:	e003      	b.n	8013926 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 801391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013920:	fab3 f383 	clz	r3, r3
 8013924:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8013926:	429a      	cmp	r2, r3
 8013928:	d106      	bne.n	8013938 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	2200      	movs	r2, #0
 8013930:	2103      	movs	r1, #3
 8013932:	4618      	mov	r0, r3
 8013934:	f7ff f98a 	bl	8012c4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4618      	mov	r0, r3
 801393e:	f7ff faad 	bl	8012e9c <LL_ADC_IsEnabled>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	f040 813f 	bne.w	8013bc8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6818      	ldr	r0, [r3, #0]
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	6819      	ldr	r1, [r3, #0]
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	68db      	ldr	r3, [r3, #12]
 8013956:	461a      	mov	r2, r3
 8013958:	f7ff f9fe 	bl	8012d58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	4a8e      	ldr	r2, [pc, #568]	; (8013b9c <HAL_ADC_ConfigChannel+0x678>)
 8013962:	4293      	cmp	r3, r2
 8013964:	f040 8130 	bne.w	8013bc8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013974:	2b00      	cmp	r3, #0
 8013976:	d10b      	bne.n	8013990 <HAL_ADC_ConfigChannel+0x46c>
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	0e9b      	lsrs	r3, r3, #26
 801397e:	3301      	adds	r3, #1
 8013980:	f003 031f 	and.w	r3, r3, #31
 8013984:	2b09      	cmp	r3, #9
 8013986:	bf94      	ite	ls
 8013988:	2301      	movls	r3, #1
 801398a:	2300      	movhi	r3, #0
 801398c:	b2db      	uxtb	r3, r3
 801398e:	e019      	b.n	80139c4 <HAL_ADC_ConfigChannel+0x4a0>
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013998:	fa93 f3a3 	rbit	r3, r3
 801399c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801399e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80139a0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80139a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d101      	bne.n	80139ac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80139a8:	2320      	movs	r3, #32
 80139aa:	e003      	b.n	80139b4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80139ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80139ae:	fab3 f383 	clz	r3, r3
 80139b2:	b2db      	uxtb	r3, r3
 80139b4:	3301      	adds	r3, #1
 80139b6:	f003 031f 	and.w	r3, r3, #31
 80139ba:	2b09      	cmp	r3, #9
 80139bc:	bf94      	ite	ls
 80139be:	2301      	movls	r3, #1
 80139c0:	2300      	movhi	r3, #0
 80139c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d079      	beq.n	8013abc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80139c8:	683b      	ldr	r3, [r7, #0]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d107      	bne.n	80139e4 <HAL_ADC_ConfigChannel+0x4c0>
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	0e9b      	lsrs	r3, r3, #26
 80139da:	3301      	adds	r3, #1
 80139dc:	069b      	lsls	r3, r3, #26
 80139de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80139e2:	e015      	b.n	8013a10 <HAL_ADC_ConfigChannel+0x4ec>
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80139ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139ec:	fa93 f3a3 	rbit	r3, r3
 80139f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80139f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80139f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80139fc:	2320      	movs	r3, #32
 80139fe:	e003      	b.n	8013a08 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8013a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a02:	fab3 f383 	clz	r3, r3
 8013a06:	b2db      	uxtb	r3, r3
 8013a08:	3301      	adds	r3, #1
 8013a0a:	069b      	lsls	r3, r3, #26
 8013a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d109      	bne.n	8013a30 <HAL_ADC_ConfigChannel+0x50c>
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	0e9b      	lsrs	r3, r3, #26
 8013a22:	3301      	adds	r3, #1
 8013a24:	f003 031f 	and.w	r3, r3, #31
 8013a28:	2101      	movs	r1, #1
 8013a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a2e:	e017      	b.n	8013a60 <HAL_ADC_ConfigChannel+0x53c>
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a38:	fa93 f3a3 	rbit	r3, r3
 8013a3c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8013a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8013a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d101      	bne.n	8013a4c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8013a48:	2320      	movs	r3, #32
 8013a4a:	e003      	b.n	8013a54 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8013a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a4e:	fab3 f383 	clz	r3, r3
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	3301      	adds	r3, #1
 8013a56:	f003 031f 	and.w	r3, r3, #31
 8013a5a:	2101      	movs	r1, #1
 8013a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8013a60:	ea42 0103 	orr.w	r1, r2, r3
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d10a      	bne.n	8013a86 <HAL_ADC_ConfigChannel+0x562>
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	0e9b      	lsrs	r3, r3, #26
 8013a76:	3301      	adds	r3, #1
 8013a78:	f003 021f 	and.w	r2, r3, #31
 8013a7c:	4613      	mov	r3, r2
 8013a7e:	005b      	lsls	r3, r3, #1
 8013a80:	4413      	add	r3, r2
 8013a82:	051b      	lsls	r3, r3, #20
 8013a84:	e018      	b.n	8013ab8 <HAL_ADC_ConfigChannel+0x594>
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a8e:	fa93 f3a3 	rbit	r3, r3
 8013a92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8013a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8013a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d101      	bne.n	8013aa2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8013a9e:	2320      	movs	r3, #32
 8013aa0:	e003      	b.n	8013aaa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8013aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aa4:	fab3 f383 	clz	r3, r3
 8013aa8:	b2db      	uxtb	r3, r3
 8013aaa:	3301      	adds	r3, #1
 8013aac:	f003 021f 	and.w	r2, r3, #31
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	005b      	lsls	r3, r3, #1
 8013ab4:	4413      	add	r3, r2
 8013ab6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013ab8:	430b      	orrs	r3, r1
 8013aba:	e080      	b.n	8013bbe <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d107      	bne.n	8013ad8 <HAL_ADC_ConfigChannel+0x5b4>
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	0e9b      	lsrs	r3, r3, #26
 8013ace:	3301      	adds	r3, #1
 8013ad0:	069b      	lsls	r3, r3, #26
 8013ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013ad6:	e015      	b.n	8013b04 <HAL_ADC_ConfigChannel+0x5e0>
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae0:	fa93 f3a3 	rbit	r3, r3
 8013ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8013ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8013aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d101      	bne.n	8013af4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8013af0:	2320      	movs	r3, #32
 8013af2:	e003      	b.n	8013afc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8013af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af6:	fab3 f383 	clz	r3, r3
 8013afa:	b2db      	uxtb	r3, r3
 8013afc:	3301      	adds	r3, #1
 8013afe:	069b      	lsls	r3, r3, #26
 8013b00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d109      	bne.n	8013b24 <HAL_ADC_ConfigChannel+0x600>
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	0e9b      	lsrs	r3, r3, #26
 8013b16:	3301      	adds	r3, #1
 8013b18:	f003 031f 	and.w	r3, r3, #31
 8013b1c:	2101      	movs	r1, #1
 8013b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8013b22:	e017      	b.n	8013b54 <HAL_ADC_ConfigChannel+0x630>
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013b2a:	6a3b      	ldr	r3, [r7, #32]
 8013b2c:	fa93 f3a3 	rbit	r3, r3
 8013b30:	61fb      	str	r3, [r7, #28]
  return result;
 8013b32:	69fb      	ldr	r3, [r7, #28]
 8013b34:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d101      	bne.n	8013b40 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8013b3c:	2320      	movs	r3, #32
 8013b3e:	e003      	b.n	8013b48 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8013b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b42:	fab3 f383 	clz	r3, r3
 8013b46:	b2db      	uxtb	r3, r3
 8013b48:	3301      	adds	r3, #1
 8013b4a:	f003 031f 	and.w	r3, r3, #31
 8013b4e:	2101      	movs	r1, #1
 8013b50:	fa01 f303 	lsl.w	r3, r1, r3
 8013b54:	ea42 0103 	orr.w	r1, r2, r3
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10d      	bne.n	8013b80 <HAL_ADC_ConfigChannel+0x65c>
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	0e9b      	lsrs	r3, r3, #26
 8013b6a:	3301      	adds	r3, #1
 8013b6c:	f003 021f 	and.w	r2, r3, #31
 8013b70:	4613      	mov	r3, r2
 8013b72:	005b      	lsls	r3, r3, #1
 8013b74:	4413      	add	r3, r2
 8013b76:	3b1e      	subs	r3, #30
 8013b78:	051b      	lsls	r3, r3, #20
 8013b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013b7e:	e01d      	b.n	8013bbc <HAL_ADC_ConfigChannel+0x698>
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	fa93 f3a3 	rbit	r3, r3
 8013b8c:	613b      	str	r3, [r7, #16]
  return result;
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013b92:	69bb      	ldr	r3, [r7, #24]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d103      	bne.n	8013ba0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8013b98:	2320      	movs	r3, #32
 8013b9a:	e005      	b.n	8013ba8 <HAL_ADC_ConfigChannel+0x684>
 8013b9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8013ba0:	69bb      	ldr	r3, [r7, #24]
 8013ba2:	fab3 f383 	clz	r3, r3
 8013ba6:	b2db      	uxtb	r3, r3
 8013ba8:	3301      	adds	r3, #1
 8013baa:	f003 021f 	and.w	r2, r3, #31
 8013bae:	4613      	mov	r3, r2
 8013bb0:	005b      	lsls	r3, r3, #1
 8013bb2:	4413      	add	r3, r2
 8013bb4:	3b1e      	subs	r3, #30
 8013bb6:	051b      	lsls	r3, r3, #20
 8013bb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013bbc:	430b      	orrs	r3, r1
 8013bbe:	683a      	ldr	r2, [r7, #0]
 8013bc0:	6892      	ldr	r2, [r2, #8]
 8013bc2:	4619      	mov	r1, r3
 8013bc4:	f7ff f89c 	bl	8012d00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	4b44      	ldr	r3, [pc, #272]	; (8013ce0 <HAL_ADC_ConfigChannel+0x7bc>)
 8013bce:	4013      	ands	r3, r2
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d07a      	beq.n	8013cca <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013bd4:	4843      	ldr	r0, [pc, #268]	; (8013ce4 <HAL_ADC_ConfigChannel+0x7c0>)
 8013bd6:	f7fe fff1 	bl	8012bbc <LL_ADC_GetCommonPathInternalCh>
 8013bda:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	4a41      	ldr	r2, [pc, #260]	; (8013ce8 <HAL_ADC_ConfigChannel+0x7c4>)
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d12c      	bne.n	8013c42 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8013be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d126      	bne.n	8013c42 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	4a3c      	ldr	r2, [pc, #240]	; (8013cec <HAL_ADC_ConfigChannel+0x7c8>)
 8013bfa:	4293      	cmp	r3, r2
 8013bfc:	d004      	beq.n	8013c08 <HAL_ADC_ConfigChannel+0x6e4>
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	4a3b      	ldr	r2, [pc, #236]	; (8013cf0 <HAL_ADC_ConfigChannel+0x7cc>)
 8013c04:	4293      	cmp	r3, r2
 8013c06:	d15d      	bne.n	8013cc4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013c0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013c10:	4619      	mov	r1, r3
 8013c12:	4834      	ldr	r0, [pc, #208]	; (8013ce4 <HAL_ADC_ConfigChannel+0x7c0>)
 8013c14:	f7fe ffbf 	bl	8012b96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8013c18:	4b36      	ldr	r3, [pc, #216]	; (8013cf4 <HAL_ADC_ConfigChannel+0x7d0>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	099b      	lsrs	r3, r3, #6
 8013c1e:	4a36      	ldr	r2, [pc, #216]	; (8013cf8 <HAL_ADC_ConfigChannel+0x7d4>)
 8013c20:	fba2 2303 	umull	r2, r3, r2, r3
 8013c24:	099b      	lsrs	r3, r3, #6
 8013c26:	1c5a      	adds	r2, r3, #1
 8013c28:	4613      	mov	r3, r2
 8013c2a:	005b      	lsls	r3, r3, #1
 8013c2c:	4413      	add	r3, r2
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8013c32:	e002      	b.n	8013c3a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	3b01      	subs	r3, #1
 8013c38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d1f9      	bne.n	8013c34 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013c40:	e040      	b.n	8013cc4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	4a2d      	ldr	r2, [pc, #180]	; (8013cfc <HAL_ADC_ConfigChannel+0x7d8>)
 8013c48:	4293      	cmp	r3, r2
 8013c4a:	d118      	bne.n	8013c7e <HAL_ADC_ConfigChannel+0x75a>
 8013c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d112      	bne.n	8013c7e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	4a23      	ldr	r2, [pc, #140]	; (8013cec <HAL_ADC_ConfigChannel+0x7c8>)
 8013c5e:	4293      	cmp	r3, r2
 8013c60:	d004      	beq.n	8013c6c <HAL_ADC_ConfigChannel+0x748>
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	4a22      	ldr	r2, [pc, #136]	; (8013cf0 <HAL_ADC_ConfigChannel+0x7cc>)
 8013c68:	4293      	cmp	r3, r2
 8013c6a:	d12d      	bne.n	8013cc8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013c6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013c74:	4619      	mov	r1, r3
 8013c76:	481b      	ldr	r0, [pc, #108]	; (8013ce4 <HAL_ADC_ConfigChannel+0x7c0>)
 8013c78:	f7fe ff8d 	bl	8012b96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013c7c:	e024      	b.n	8013cc8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	4a1f      	ldr	r2, [pc, #124]	; (8013d00 <HAL_ADC_ConfigChannel+0x7dc>)
 8013c84:	4293      	cmp	r3, r2
 8013c86:	d120      	bne.n	8013cca <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8013c88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d11a      	bne.n	8013cca <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	4a14      	ldr	r2, [pc, #80]	; (8013cec <HAL_ADC_ConfigChannel+0x7c8>)
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	d115      	bne.n	8013cca <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013ca2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	480e      	ldr	r0, [pc, #56]	; (8013ce4 <HAL_ADC_ConfigChannel+0x7c0>)
 8013caa:	f7fe ff74 	bl	8012b96 <LL_ADC_SetCommonPathInternalCh>
 8013cae:	e00c      	b.n	8013cca <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cb4:	f043 0220 	orr.w	r2, r3, #32
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8013cc2:	e002      	b.n	8013cca <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013cc4:	bf00      	nop
 8013cc6:	e000      	b.n	8013cca <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013cc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8013cd2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	37d8      	adds	r7, #216	; 0xd8
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	80080000 	.word	0x80080000
 8013ce4:	50040300 	.word	0x50040300
 8013ce8:	c7520000 	.word	0xc7520000
 8013cec:	50040000 	.word	0x50040000
 8013cf0:	50040200 	.word	0x50040200
 8013cf4:	20000004 	.word	0x20000004
 8013cf8:	053e2d63 	.word	0x053e2d63
 8013cfc:	cb840000 	.word	0xcb840000
 8013d00:	80000001 	.word	0x80000001

08013d04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7ff f8c3 	bl	8012e9c <LL_ADC_IsEnabled>
 8013d16:	4603      	mov	r3, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d14d      	bne.n	8013db8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	689a      	ldr	r2, [r3, #8]
 8013d22:	4b28      	ldr	r3, [pc, #160]	; (8013dc4 <ADC_Enable+0xc0>)
 8013d24:	4013      	ands	r3, r2
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d00d      	beq.n	8013d46 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d2e:	f043 0210 	orr.w	r2, r3, #16
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d3a:	f043 0201 	orr.w	r2, r3, #1
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8013d42:	2301      	movs	r3, #1
 8013d44:	e039      	b.n	8013dba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7ff f892 	bl	8012e74 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8013d50:	f7fe fede 	bl	8012b10 <HAL_GetTick>
 8013d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8013d56:	e028      	b.n	8013daa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7ff f89d 	bl	8012e9c <LL_ADC_IsEnabled>
 8013d62:	4603      	mov	r3, r0
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d104      	bne.n	8013d72 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7ff f881 	bl	8012e74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8013d72:	f7fe fecd 	bl	8012b10 <HAL_GetTick>
 8013d76:	4602      	mov	r2, r0
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	1ad3      	subs	r3, r2, r3
 8013d7c:	2b02      	cmp	r3, #2
 8013d7e:	d914      	bls.n	8013daa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	f003 0301 	and.w	r3, r3, #1
 8013d8a:	2b01      	cmp	r3, #1
 8013d8c:	d00d      	beq.n	8013daa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d92:	f043 0210 	orr.w	r2, r3, #16
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d9e:	f043 0201 	orr.w	r2, r3, #1
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8013da6:	2301      	movs	r3, #1
 8013da8:	e007      	b.n	8013dba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	f003 0301 	and.w	r3, r3, #1
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d1cf      	bne.n	8013d58 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8013db8:	2300      	movs	r3, #0
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3710      	adds	r7, #16
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	8000003f 	.word	0x8000003f

08013dc8 <LL_ADC_IsEnabled>:
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b083      	sub	sp, #12
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	689b      	ldr	r3, [r3, #8]
 8013dd4:	f003 0301 	and.w	r3, r3, #1
 8013dd8:	2b01      	cmp	r3, #1
 8013dda:	d101      	bne.n	8013de0 <LL_ADC_IsEnabled+0x18>
 8013ddc:	2301      	movs	r3, #1
 8013dde:	e000      	b.n	8013de2 <LL_ADC_IsEnabled+0x1a>
 8013de0:	2300      	movs	r3, #0
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	370c      	adds	r7, #12
 8013de6:	46bd      	mov	sp, r7
 8013de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dec:	4770      	bx	lr

08013dee <LL_ADC_REG_IsConversionOngoing>:
{
 8013dee:	b480      	push	{r7}
 8013df0:	b083      	sub	sp, #12
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	689b      	ldr	r3, [r3, #8]
 8013dfa:	f003 0304 	and.w	r3, r3, #4
 8013dfe:	2b04      	cmp	r3, #4
 8013e00:	d101      	bne.n	8013e06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8013e02:	2301      	movs	r3, #1
 8013e04:	e000      	b.n	8013e08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8013e06:	2300      	movs	r3, #0
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	370c      	adds	r7, #12
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e12:	4770      	bx	lr

08013e14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8013e14:	b590      	push	{r4, r7, lr}
 8013e16:	b09f      	sub	sp, #124	; 0x7c
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013e2a:	2b01      	cmp	r3, #1
 8013e2c:	d101      	bne.n	8013e32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8013e2e:	2302      	movs	r3, #2
 8013e30:	e093      	b.n	8013f5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2201      	movs	r2, #1
 8013e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8013e3e:	2300      	movs	r3, #0
 8013e40:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	4a47      	ldr	r2, [pc, #284]	; (8013f64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8013e48:	4293      	cmp	r3, r2
 8013e4a:	d102      	bne.n	8013e52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8013e4c:	4b46      	ldr	r3, [pc, #280]	; (8013f68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8013e4e:	60bb      	str	r3, [r7, #8]
 8013e50:	e001      	b.n	8013e56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8013e52:	2300      	movs	r3, #0
 8013e54:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8013e56:	68bb      	ldr	r3, [r7, #8]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d10b      	bne.n	8013e74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e60:	f043 0220 	orr.w	r2, r3, #32
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8013e70:	2301      	movs	r3, #1
 8013e72:	e072      	b.n	8013f5a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7ff ffb9 	bl	8013dee <LL_ADC_REG_IsConversionOngoing>
 8013e7c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7ff ffb3 	bl	8013dee <LL_ADC_REG_IsConversionOngoing>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d154      	bne.n	8013f38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8013e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d151      	bne.n	8013f38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8013e94:	4b35      	ldr	r3, [pc, #212]	; (8013f6c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8013e96:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d02c      	beq.n	8013efa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8013ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ea2:	689b      	ldr	r3, [r3, #8]
 8013ea4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	6859      	ldr	r1, [r3, #4]
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013eb2:	035b      	lsls	r3, r3, #13
 8013eb4:	430b      	orrs	r3, r1
 8013eb6:	431a      	orrs	r2, r3
 8013eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013eba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8013ebc:	4829      	ldr	r0, [pc, #164]	; (8013f64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8013ebe:	f7ff ff83 	bl	8013dc8 <LL_ADC_IsEnabled>
 8013ec2:	4604      	mov	r4, r0
 8013ec4:	4828      	ldr	r0, [pc, #160]	; (8013f68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8013ec6:	f7ff ff7f 	bl	8013dc8 <LL_ADC_IsEnabled>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	431c      	orrs	r4, r3
 8013ece:	4828      	ldr	r0, [pc, #160]	; (8013f70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8013ed0:	f7ff ff7a 	bl	8013dc8 <LL_ADC_IsEnabled>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	4323      	orrs	r3, r4
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d137      	bne.n	8013f4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8013edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ede:	689b      	ldr	r3, [r3, #8]
 8013ee0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8013ee4:	f023 030f 	bic.w	r3, r3, #15
 8013ee8:	683a      	ldr	r2, [r7, #0]
 8013eea:	6811      	ldr	r1, [r2, #0]
 8013eec:	683a      	ldr	r2, [r7, #0]
 8013eee:	6892      	ldr	r2, [r2, #8]
 8013ef0:	430a      	orrs	r2, r1
 8013ef2:	431a      	orrs	r2, r3
 8013ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ef6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8013ef8:	e028      	b.n	8013f4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8013efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013efc:	689b      	ldr	r3, [r3, #8]
 8013efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8013f06:	4817      	ldr	r0, [pc, #92]	; (8013f64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8013f08:	f7ff ff5e 	bl	8013dc8 <LL_ADC_IsEnabled>
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	4816      	ldr	r0, [pc, #88]	; (8013f68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8013f10:	f7ff ff5a 	bl	8013dc8 <LL_ADC_IsEnabled>
 8013f14:	4603      	mov	r3, r0
 8013f16:	431c      	orrs	r4, r3
 8013f18:	4815      	ldr	r0, [pc, #84]	; (8013f70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8013f1a:	f7ff ff55 	bl	8013dc8 <LL_ADC_IsEnabled>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	4323      	orrs	r3, r4
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d112      	bne.n	8013f4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8013f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f28:	689b      	ldr	r3, [r3, #8]
 8013f2a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8013f2e:	f023 030f 	bic.w	r3, r3, #15
 8013f32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013f34:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8013f36:	e009      	b.n	8013f4c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f3c:	f043 0220 	orr.w	r2, r3, #32
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8013f44:	2301      	movs	r3, #1
 8013f46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013f4a:	e000      	b.n	8013f4e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8013f4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	2200      	movs	r2, #0
 8013f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8013f56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	377c      	adds	r7, #124	; 0x7c
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd90      	pop	{r4, r7, pc}
 8013f62:	bf00      	nop
 8013f64:	50040000 	.word	0x50040000
 8013f68:	50040100 	.word	0x50040100
 8013f6c:	50040300 	.word	0x50040300
 8013f70:	50040200 	.word	0x50040200

08013f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013f74:	b480      	push	{r7}
 8013f76:	b085      	sub	sp, #20
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f003 0307 	and.w	r3, r3, #7
 8013f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013f84:	4b0c      	ldr	r3, [pc, #48]	; (8013fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8013f8a:	68ba      	ldr	r2, [r7, #8]
 8013f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8013f90:	4013      	ands	r3, r2
 8013f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8013f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8013fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8013fa6:	4a04      	ldr	r2, [pc, #16]	; (8013fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	60d3      	str	r3, [r2, #12]
}
 8013fac:	bf00      	nop
 8013fae:	3714      	adds	r7, #20
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb6:	4770      	bx	lr
 8013fb8:	e000ed00 	.word	0xe000ed00

08013fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013fc0:	4b04      	ldr	r3, [pc, #16]	; (8013fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8013fc2:	68db      	ldr	r3, [r3, #12]
 8013fc4:	0a1b      	lsrs	r3, r3, #8
 8013fc6:	f003 0307 	and.w	r3, r3, #7
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd2:	4770      	bx	lr
 8013fd4:	e000ed00 	.word	0xe000ed00

08013fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013fd8:	b480      	push	{r7}
 8013fda:	b083      	sub	sp, #12
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	4603      	mov	r3, r0
 8013fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	db0b      	blt.n	8014002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013fea:	79fb      	ldrb	r3, [r7, #7]
 8013fec:	f003 021f 	and.w	r2, r3, #31
 8013ff0:	4907      	ldr	r1, [pc, #28]	; (8014010 <__NVIC_EnableIRQ+0x38>)
 8013ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ff6:	095b      	lsrs	r3, r3, #5
 8013ff8:	2001      	movs	r0, #1
 8013ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8013ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8014002:	bf00      	nop
 8014004:	370c      	adds	r7, #12
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr
 801400e:	bf00      	nop
 8014010:	e000e100 	.word	0xe000e100

08014014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014014:	b480      	push	{r7}
 8014016:	b083      	sub	sp, #12
 8014018:	af00      	add	r7, sp, #0
 801401a:	4603      	mov	r3, r0
 801401c:	6039      	str	r1, [r7, #0]
 801401e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014024:	2b00      	cmp	r3, #0
 8014026:	db0a      	blt.n	801403e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	b2da      	uxtb	r2, r3
 801402c:	490c      	ldr	r1, [pc, #48]	; (8014060 <__NVIC_SetPriority+0x4c>)
 801402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014032:	0112      	lsls	r2, r2, #4
 8014034:	b2d2      	uxtb	r2, r2
 8014036:	440b      	add	r3, r1
 8014038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801403c:	e00a      	b.n	8014054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	b2da      	uxtb	r2, r3
 8014042:	4908      	ldr	r1, [pc, #32]	; (8014064 <__NVIC_SetPriority+0x50>)
 8014044:	79fb      	ldrb	r3, [r7, #7]
 8014046:	f003 030f 	and.w	r3, r3, #15
 801404a:	3b04      	subs	r3, #4
 801404c:	0112      	lsls	r2, r2, #4
 801404e:	b2d2      	uxtb	r2, r2
 8014050:	440b      	add	r3, r1
 8014052:	761a      	strb	r2, [r3, #24]
}
 8014054:	bf00      	nop
 8014056:	370c      	adds	r7, #12
 8014058:	46bd      	mov	sp, r7
 801405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405e:	4770      	bx	lr
 8014060:	e000e100 	.word	0xe000e100
 8014064:	e000ed00 	.word	0xe000ed00

08014068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014068:	b480      	push	{r7}
 801406a:	b089      	sub	sp, #36	; 0x24
 801406c:	af00      	add	r7, sp, #0
 801406e:	60f8      	str	r0, [r7, #12]
 8014070:	60b9      	str	r1, [r7, #8]
 8014072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	f003 0307 	and.w	r3, r3, #7
 801407a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801407c:	69fb      	ldr	r3, [r7, #28]
 801407e:	f1c3 0307 	rsb	r3, r3, #7
 8014082:	2b04      	cmp	r3, #4
 8014084:	bf28      	it	cs
 8014086:	2304      	movcs	r3, #4
 8014088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801408a:	69fb      	ldr	r3, [r7, #28]
 801408c:	3304      	adds	r3, #4
 801408e:	2b06      	cmp	r3, #6
 8014090:	d902      	bls.n	8014098 <NVIC_EncodePriority+0x30>
 8014092:	69fb      	ldr	r3, [r7, #28]
 8014094:	3b03      	subs	r3, #3
 8014096:	e000      	b.n	801409a <NVIC_EncodePriority+0x32>
 8014098:	2300      	movs	r3, #0
 801409a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801409c:	f04f 32ff 	mov.w	r2, #4294967295
 80140a0:	69bb      	ldr	r3, [r7, #24]
 80140a2:	fa02 f303 	lsl.w	r3, r2, r3
 80140a6:	43da      	mvns	r2, r3
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	401a      	ands	r2, r3
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80140b0:	f04f 31ff 	mov.w	r1, #4294967295
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	fa01 f303 	lsl.w	r3, r1, r3
 80140ba:	43d9      	mvns	r1, r3
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80140c0:	4313      	orrs	r3, r2
         );
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3724      	adds	r7, #36	; 0x24
 80140c6:	46bd      	mov	sp, r7
 80140c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140cc:	4770      	bx	lr
	...

080140d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	3b01      	subs	r3, #1
 80140dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80140e0:	d301      	bcc.n	80140e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80140e2:	2301      	movs	r3, #1
 80140e4:	e00f      	b.n	8014106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80140e6:	4a0a      	ldr	r2, [pc, #40]	; (8014110 <SysTick_Config+0x40>)
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	3b01      	subs	r3, #1
 80140ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80140ee:	210f      	movs	r1, #15
 80140f0:	f04f 30ff 	mov.w	r0, #4294967295
 80140f4:	f7ff ff8e 	bl	8014014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80140f8:	4b05      	ldr	r3, [pc, #20]	; (8014110 <SysTick_Config+0x40>)
 80140fa:	2200      	movs	r2, #0
 80140fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80140fe:	4b04      	ldr	r3, [pc, #16]	; (8014110 <SysTick_Config+0x40>)
 8014100:	2207      	movs	r2, #7
 8014102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8014104:	2300      	movs	r3, #0
}
 8014106:	4618      	mov	r0, r3
 8014108:	3708      	adds	r7, #8
 801410a:	46bd      	mov	sp, r7
 801410c:	bd80      	pop	{r7, pc}
 801410e:	bf00      	nop
 8014110:	e000e010 	.word	0xe000e010

08014114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f7ff ff29 	bl	8013f74 <__NVIC_SetPriorityGrouping>
}
 8014122:	bf00      	nop
 8014124:	3708      	adds	r7, #8
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801412a:	b580      	push	{r7, lr}
 801412c:	b086      	sub	sp, #24
 801412e:	af00      	add	r7, sp, #0
 8014130:	4603      	mov	r3, r0
 8014132:	60b9      	str	r1, [r7, #8]
 8014134:	607a      	str	r2, [r7, #4]
 8014136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8014138:	2300      	movs	r3, #0
 801413a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801413c:	f7ff ff3e 	bl	8013fbc <__NVIC_GetPriorityGrouping>
 8014140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	68b9      	ldr	r1, [r7, #8]
 8014146:	6978      	ldr	r0, [r7, #20]
 8014148:	f7ff ff8e 	bl	8014068 <NVIC_EncodePriority>
 801414c:	4602      	mov	r2, r0
 801414e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014152:	4611      	mov	r1, r2
 8014154:	4618      	mov	r0, r3
 8014156:	f7ff ff5d 	bl	8014014 <__NVIC_SetPriority>
}
 801415a:	bf00      	nop
 801415c:	3718      	adds	r7, #24
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}

08014162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014162:	b580      	push	{r7, lr}
 8014164:	b082      	sub	sp, #8
 8014166:	af00      	add	r7, sp, #0
 8014168:	4603      	mov	r3, r0
 801416a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801416c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014170:	4618      	mov	r0, r3
 8014172:	f7ff ff31 	bl	8013fd8 <__NVIC_EnableIRQ>
}
 8014176:	bf00      	nop
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}

0801417e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801417e:	b580      	push	{r7, lr}
 8014180:	b082      	sub	sp, #8
 8014182:	af00      	add	r7, sp, #0
 8014184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f7ff ffa2 	bl	80140d0 <SysTick_Config>
 801418c:	4603      	mov	r3, r0
}
 801418e:	4618      	mov	r0, r3
 8014190:	3708      	adds	r7, #8
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}

08014196 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8014196:	b580      	push	{r7, lr}
 8014198:	b084      	sub	sp, #16
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801419e:	2300      	movs	r3, #0
 80141a0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80141a8:	b2db      	uxtb	r3, r3
 80141aa:	2b02      	cmp	r3, #2
 80141ac:	d005      	beq.n	80141ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2204      	movs	r2, #4
 80141b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80141b4:	2301      	movs	r3, #1
 80141b6:	73fb      	strb	r3, [r7, #15]
 80141b8:	e029      	b.n	801420e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	681a      	ldr	r2, [r3, #0]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	f022 020e 	bic.w	r2, r2, #14
 80141c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f022 0201 	bic.w	r2, r2, #1
 80141d8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141de:	f003 021c 	and.w	r2, r3, #28
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141e6:	2101      	movs	r1, #1
 80141e8:	fa01 f202 	lsl.w	r2, r1, r2
 80141ec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2201      	movs	r2, #1
 80141f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	2200      	movs	r2, #0
 80141fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014202:	2b00      	cmp	r3, #0
 8014204:	d003      	beq.n	801420e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	4798      	blx	r3
    }
  }
  return status;
 801420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014210:	4618      	mov	r0, r3
 8014212:	3710      	adds	r7, #16
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}

08014218 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8014218:	b480      	push	{r7}
 801421a:	b087      	sub	sp, #28
 801421c:	af00      	add	r7, sp, #0
 801421e:	60f8      	str	r0, [r7, #12]
 8014220:	460b      	mov	r3, r1
 8014222:	607a      	str	r2, [r7, #4]
 8014224:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8014226:	2300      	movs	r3, #0
 8014228:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 801422a:	7afb      	ldrb	r3, [r7, #11]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d103      	bne.n	8014238 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	687a      	ldr	r2, [r7, #4]
 8014234:	605a      	str	r2, [r3, #4]
      break;
 8014236:	e002      	b.n	801423e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8014238:	2301      	movs	r3, #1
 801423a:	75fb      	strb	r3, [r7, #23]
      break;
 801423c:	bf00      	nop
  }

  return status;
 801423e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014240:	4618      	mov	r0, r3
 8014242:	371c      	adds	r7, #28
 8014244:	46bd      	mov	sp, r7
 8014246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424a:	4770      	bx	lr

0801424c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 801424c:	b480      	push	{r7}
 801424e:	b083      	sub	sp, #12
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d101      	bne.n	8014260 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 801425c:	2301      	movs	r3, #1
 801425e:	e003      	b.n	8014268 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	683a      	ldr	r2, [r7, #0]
 8014264:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8014266:	2300      	movs	r3, #0
  }
}
 8014268:	4618      	mov	r0, r3
 801426a:	370c      	adds	r7, #12
 801426c:	46bd      	mov	sp, r7
 801426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014272:	4770      	bx	lr

08014274 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b086      	sub	sp, #24
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	0c1b      	lsrs	r3, r3, #16
 8014282:	f003 0301 	and.w	r3, r3, #1
 8014286:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	f003 031f 	and.w	r3, r3, #31
 8014290:	2201      	movs	r2, #1
 8014292:	fa02 f303 	lsl.w	r3, r2, r3
 8014296:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	015a      	lsls	r2, r3, #5
 801429c:	4b0c      	ldr	r3, [pc, #48]	; (80142d0 <HAL_EXTI_IRQHandler+0x5c>)
 801429e:	4413      	add	r3, r2
 80142a0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	693a      	ldr	r2, [r7, #16]
 80142a8:	4013      	ands	r3, r2
 80142aa:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d009      	beq.n	80142c6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	693a      	ldr	r2, [r7, #16]
 80142b6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d002      	beq.n	80142c6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	4798      	blx	r3
    }
  }
}
 80142c6:	bf00      	nop
 80142c8:	3718      	adds	r7, #24
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	bf00      	nop
 80142d0:	40010414 	.word	0x40010414

080142d4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b086      	sub	sp, #24
 80142d8:	af00      	add	r7, sp, #0
 80142da:	60f8      	str	r0, [r7, #12]
 80142dc:	60b9      	str	r1, [r7, #8]
 80142de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80142e2:	2300      	movs	r3, #0
 80142e4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80142e6:	4b2f      	ldr	r3, [pc, #188]	; (80143a4 <HAL_FLASH_Program+0xd0>)
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	2b01      	cmp	r3, #1
 80142ec:	d101      	bne.n	80142f2 <HAL_FLASH_Program+0x1e>
 80142ee:	2302      	movs	r3, #2
 80142f0:	e053      	b.n	801439a <HAL_FLASH_Program+0xc6>
 80142f2:	4b2c      	ldr	r3, [pc, #176]	; (80143a4 <HAL_FLASH_Program+0xd0>)
 80142f4:	2201      	movs	r2, #1
 80142f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80142f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80142fc:	f000 f888 	bl	8014410 <FLASH_WaitForLastOperation>
 8014300:	4603      	mov	r3, r0
 8014302:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8014304:	7dfb      	ldrb	r3, [r7, #23]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d143      	bne.n	8014392 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801430a:	4b26      	ldr	r3, [pc, #152]	; (80143a4 <HAL_FLASH_Program+0xd0>)
 801430c:	2200      	movs	r2, #0
 801430e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8014310:	4b25      	ldr	r3, [pc, #148]	; (80143a8 <HAL_FLASH_Program+0xd4>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014318:	2b00      	cmp	r3, #0
 801431a:	d009      	beq.n	8014330 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801431c:	4b22      	ldr	r3, [pc, #136]	; (80143a8 <HAL_FLASH_Program+0xd4>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	4a21      	ldr	r2, [pc, #132]	; (80143a8 <HAL_FLASH_Program+0xd4>)
 8014322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014326:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8014328:	4b1e      	ldr	r3, [pc, #120]	; (80143a4 <HAL_FLASH_Program+0xd0>)
 801432a:	2202      	movs	r2, #2
 801432c:	771a      	strb	r2, [r3, #28]
 801432e:	e002      	b.n	8014336 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8014330:	4b1c      	ldr	r3, [pc, #112]	; (80143a4 <HAL_FLASH_Program+0xd0>)
 8014332:	2200      	movs	r2, #0
 8014334:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d107      	bne.n	801434c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801433c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014340:	68b8      	ldr	r0, [r7, #8]
 8014342:	f000 f8bb 	bl	80144bc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8014346:	2301      	movs	r3, #1
 8014348:	613b      	str	r3, [r7, #16]
 801434a:	e010      	b.n	801436e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	2b01      	cmp	r3, #1
 8014350:	d002      	beq.n	8014358 <HAL_FLASH_Program+0x84>
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	2b02      	cmp	r3, #2
 8014356:	d10a      	bne.n	801436e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	4619      	mov	r1, r3
 801435c:	68b8      	ldr	r0, [r7, #8]
 801435e:	f000 f8d3 	bl	8014508 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	2b02      	cmp	r3, #2
 8014366:	d102      	bne.n	801436e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8014368:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801436c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801436e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8014372:	f000 f84d 	bl	8014410 <FLASH_WaitForLastOperation>
 8014376:	4603      	mov	r3, r0
 8014378:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d006      	beq.n	801438e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8014380:	4b09      	ldr	r3, [pc, #36]	; (80143a8 <HAL_FLASH_Program+0xd4>)
 8014382:	695a      	ldr	r2, [r3, #20]
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	43db      	mvns	r3, r3
 8014388:	4907      	ldr	r1, [pc, #28]	; (80143a8 <HAL_FLASH_Program+0xd4>)
 801438a:	4013      	ands	r3, r2
 801438c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801438e:	f000 f9f1 	bl	8014774 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8014392:	4b04      	ldr	r3, [pc, #16]	; (80143a4 <HAL_FLASH_Program+0xd0>)
 8014394:	2200      	movs	r2, #0
 8014396:	701a      	strb	r2, [r3, #0]

  return status;
 8014398:	7dfb      	ldrb	r3, [r7, #23]
}
 801439a:	4618      	mov	r0, r3
 801439c:	3718      	adds	r7, #24
 801439e:	46bd      	mov	sp, r7
 80143a0:	bd80      	pop	{r7, pc}
 80143a2:	bf00      	nop
 80143a4:	2000001c 	.word	0x2000001c
 80143a8:	40022000 	.word	0x40022000

080143ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80143b2:	2300      	movs	r3, #0
 80143b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80143b6:	4b0b      	ldr	r3, [pc, #44]	; (80143e4 <HAL_FLASH_Unlock+0x38>)
 80143b8:	695b      	ldr	r3, [r3, #20]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	da0b      	bge.n	80143d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80143be:	4b09      	ldr	r3, [pc, #36]	; (80143e4 <HAL_FLASH_Unlock+0x38>)
 80143c0:	4a09      	ldr	r2, [pc, #36]	; (80143e8 <HAL_FLASH_Unlock+0x3c>)
 80143c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80143c4:	4b07      	ldr	r3, [pc, #28]	; (80143e4 <HAL_FLASH_Unlock+0x38>)
 80143c6:	4a09      	ldr	r2, [pc, #36]	; (80143ec <HAL_FLASH_Unlock+0x40>)
 80143c8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80143ca:	4b06      	ldr	r3, [pc, #24]	; (80143e4 <HAL_FLASH_Unlock+0x38>)
 80143cc:	695b      	ldr	r3, [r3, #20]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	da01      	bge.n	80143d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80143d2:	2301      	movs	r3, #1
 80143d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80143d6:	79fb      	ldrb	r3, [r7, #7]
}
 80143d8:	4618      	mov	r0, r3
 80143da:	370c      	adds	r7, #12
 80143dc:	46bd      	mov	sp, r7
 80143de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e2:	4770      	bx	lr
 80143e4:	40022000 	.word	0x40022000
 80143e8:	45670123 	.word	0x45670123
 80143ec:	cdef89ab 	.word	0xcdef89ab

080143f0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80143f0:	b480      	push	{r7}
 80143f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80143f4:	4b05      	ldr	r3, [pc, #20]	; (801440c <HAL_FLASH_Lock+0x1c>)
 80143f6:	695b      	ldr	r3, [r3, #20]
 80143f8:	4a04      	ldr	r2, [pc, #16]	; (801440c <HAL_FLASH_Lock+0x1c>)
 80143fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80143fe:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8014400:	2300      	movs	r3, #0
}
 8014402:	4618      	mov	r0, r3
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr
 801440c:	40022000 	.word	0x40022000

08014410 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8014418:	f7fe fb7a 	bl	8012b10 <HAL_GetTick>
 801441c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801441e:	e00d      	b.n	801443c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014426:	d009      	beq.n	801443c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8014428:	f7fe fb72 	bl	8012b10 <HAL_GetTick>
 801442c:	4602      	mov	r2, r0
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	1ad3      	subs	r3, r2, r3
 8014432:	687a      	ldr	r2, [r7, #4]
 8014434:	429a      	cmp	r2, r3
 8014436:	d801      	bhi.n	801443c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8014438:	2303      	movs	r3, #3
 801443a:	e037      	b.n	80144ac <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801443c:	4b1d      	ldr	r3, [pc, #116]	; (80144b4 <FLASH_WaitForLastOperation+0xa4>)
 801443e:	691b      	ldr	r3, [r3, #16]
 8014440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014444:	2b00      	cmp	r3, #0
 8014446:	d1eb      	bne.n	8014420 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8014448:	4b1a      	ldr	r3, [pc, #104]	; (80144b4 <FLASH_WaitForLastOperation+0xa4>)
 801444a:	691a      	ldr	r2, [r3, #16]
 801444c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8014450:	4013      	ands	r3, r2
 8014452:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d01e      	beq.n	8014498 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 801445a:	4b17      	ldr	r3, [pc, #92]	; (80144b8 <FLASH_WaitForLastOperation+0xa8>)
 801445c:	685a      	ldr	r2, [r3, #4]
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	4313      	orrs	r3, r2
 8014462:	4a15      	ldr	r2, [pc, #84]	; (80144b8 <FLASH_WaitForLastOperation+0xa8>)
 8014464:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801446c:	2b00      	cmp	r3, #0
 801446e:	d007      	beq.n	8014480 <FLASH_WaitForLastOperation+0x70>
 8014470:	4b10      	ldr	r3, [pc, #64]	; (80144b4 <FLASH_WaitForLastOperation+0xa4>)
 8014472:	699a      	ldr	r2, [r3, #24]
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801447a:	490e      	ldr	r1, [pc, #56]	; (80144b4 <FLASH_WaitForLastOperation+0xa4>)
 801447c:	4313      	orrs	r3, r2
 801447e:	618b      	str	r3, [r1, #24]
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8014486:	2b00      	cmp	r3, #0
 8014488:	d004      	beq.n	8014494 <FLASH_WaitForLastOperation+0x84>
 801448a:	4a0a      	ldr	r2, [pc, #40]	; (80144b4 <FLASH_WaitForLastOperation+0xa4>)
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8014492:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8014494:	2301      	movs	r3, #1
 8014496:	e009      	b.n	80144ac <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8014498:	4b06      	ldr	r3, [pc, #24]	; (80144b4 <FLASH_WaitForLastOperation+0xa4>)
 801449a:	691b      	ldr	r3, [r3, #16]
 801449c:	f003 0301 	and.w	r3, r3, #1
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d002      	beq.n	80144aa <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80144a4:	4b03      	ldr	r3, [pc, #12]	; (80144b4 <FLASH_WaitForLastOperation+0xa4>)
 80144a6:	2201      	movs	r2, #1
 80144a8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80144aa:	2300      	movs	r3, #0
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	3710      	adds	r7, #16
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	40022000 	.word	0x40022000
 80144b8:	2000001c 	.word	0x2000001c

080144bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80144bc:	b480      	push	{r7}
 80144be:	b085      	sub	sp, #20
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	60f8      	str	r0, [r7, #12]
 80144c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80144c8:	4b0e      	ldr	r3, [pc, #56]	; (8014504 <FLASH_Program_DoubleWord+0x48>)
 80144ca:	695b      	ldr	r3, [r3, #20]
 80144cc:	4a0d      	ldr	r2, [pc, #52]	; (8014504 <FLASH_Program_DoubleWord+0x48>)
 80144ce:	f043 0301 	orr.w	r3, r3, #1
 80144d2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	683a      	ldr	r2, [r7, #0]
 80144d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80144da:	f3bf 8f6f 	isb	sy
}
 80144de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80144e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80144e4:	f04f 0200 	mov.w	r2, #0
 80144e8:	f04f 0300 	mov.w	r3, #0
 80144ec:	000a      	movs	r2, r1
 80144ee:	2300      	movs	r3, #0
 80144f0:	68f9      	ldr	r1, [r7, #12]
 80144f2:	3104      	adds	r1, #4
 80144f4:	4613      	mov	r3, r2
 80144f6:	600b      	str	r3, [r1, #0]
}
 80144f8:	bf00      	nop
 80144fa:	3714      	adds	r7, #20
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr
 8014504:	40022000 	.word	0x40022000

08014508 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8014508:	b480      	push	{r7}
 801450a:	b089      	sub	sp, #36	; 0x24
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8014512:	2340      	movs	r3, #64	; 0x40
 8014514:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801451e:	4b14      	ldr	r3, [pc, #80]	; (8014570 <FLASH_Program_Fast+0x68>)
 8014520:	695b      	ldr	r3, [r3, #20]
 8014522:	4a13      	ldr	r2, [pc, #76]	; (8014570 <FLASH_Program_Fast+0x68>)
 8014524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014528:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801452a:	f3ef 8310 	mrs	r3, PRIMASK
 801452e:	60fb      	str	r3, [r7, #12]
  return(result);
 8014530:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8014532:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014534:	b672      	cpsid	i
}
 8014536:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	69bb      	ldr	r3, [r7, #24]
 801453e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8014540:	69bb      	ldr	r3, [r7, #24]
 8014542:	3304      	adds	r3, #4
 8014544:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	3304      	adds	r3, #4
 801454a:	617b      	str	r3, [r7, #20]
    row_index--;
 801454c:	7ffb      	ldrb	r3, [r7, #31]
 801454e:	3b01      	subs	r3, #1
 8014550:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8014552:	7ffb      	ldrb	r3, [r7, #31]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d1ef      	bne.n	8014538 <FLASH_Program_Fast+0x30>
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	f383 8810 	msr	PRIMASK, r3
}
 8014562:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8014564:	bf00      	nop
 8014566:	3724      	adds	r7, #36	; 0x24
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr
 8014570:	40022000 	.word	0x40022000

08014574 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801457e:	4b4c      	ldr	r3, [pc, #304]	; (80146b0 <HAL_FLASHEx_Erase+0x13c>)
 8014580:	781b      	ldrb	r3, [r3, #0]
 8014582:	2b01      	cmp	r3, #1
 8014584:	d101      	bne.n	801458a <HAL_FLASHEx_Erase+0x16>
 8014586:	2302      	movs	r3, #2
 8014588:	e08d      	b.n	80146a6 <HAL_FLASHEx_Erase+0x132>
 801458a:	4b49      	ldr	r3, [pc, #292]	; (80146b0 <HAL_FLASHEx_Erase+0x13c>)
 801458c:	2201      	movs	r2, #1
 801458e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8014590:	f24c 3050 	movw	r0, #50000	; 0xc350
 8014594:	f7ff ff3c 	bl	8014410 <FLASH_WaitForLastOperation>
 8014598:	4603      	mov	r3, r0
 801459a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801459c:	7bfb      	ldrb	r3, [r7, #15]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d17d      	bne.n	801469e <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80145a2:	4b43      	ldr	r3, [pc, #268]	; (80146b0 <HAL_FLASHEx_Erase+0x13c>)
 80145a4:	2200      	movs	r2, #0
 80145a6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80145a8:	4b42      	ldr	r3, [pc, #264]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d019      	beq.n	80145e8 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80145b4:	4b3f      	ldr	r3, [pc, #252]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	4a3e      	ldr	r2, [pc, #248]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 80145ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80145be:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80145c0:	4b3c      	ldr	r3, [pc, #240]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d009      	beq.n	80145e0 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80145cc:	4b39      	ldr	r3, [pc, #228]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	4a38      	ldr	r2, [pc, #224]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 80145d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80145d6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80145d8:	4b35      	ldr	r3, [pc, #212]	; (80146b0 <HAL_FLASHEx_Erase+0x13c>)
 80145da:	2203      	movs	r2, #3
 80145dc:	771a      	strb	r2, [r3, #28]
 80145de:	e016      	b.n	801460e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80145e0:	4b33      	ldr	r3, [pc, #204]	; (80146b0 <HAL_FLASHEx_Erase+0x13c>)
 80145e2:	2201      	movs	r2, #1
 80145e4:	771a      	strb	r2, [r3, #28]
 80145e6:	e012      	b.n	801460e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80145e8:	4b32      	ldr	r3, [pc, #200]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d009      	beq.n	8014608 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80145f4:	4b2f      	ldr	r3, [pc, #188]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	4a2e      	ldr	r2, [pc, #184]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 80145fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80145fe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8014600:	4b2b      	ldr	r3, [pc, #172]	; (80146b0 <HAL_FLASHEx_Erase+0x13c>)
 8014602:	2202      	movs	r2, #2
 8014604:	771a      	strb	r2, [r3, #28]
 8014606:	e002      	b.n	801460e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8014608:	4b29      	ldr	r3, [pc, #164]	; (80146b0 <HAL_FLASHEx_Erase+0x13c>)
 801460a:	2200      	movs	r2, #0
 801460c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	2b01      	cmp	r3, #1
 8014614:	d113      	bne.n	801463e <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	685b      	ldr	r3, [r3, #4]
 801461a:	4618      	mov	r0, r3
 801461c:	f000 f84c 	bl	80146b8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8014620:	f24c 3050 	movw	r0, #50000	; 0xc350
 8014624:	f7ff fef4 	bl	8014410 <FLASH_WaitForLastOperation>
 8014628:	4603      	mov	r3, r0
 801462a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 801462c:	4b21      	ldr	r3, [pc, #132]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 801462e:	695b      	ldr	r3, [r3, #20]
 8014630:	4a20      	ldr	r2, [pc, #128]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 8014632:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014636:	f023 0304 	bic.w	r3, r3, #4
 801463a:	6153      	str	r3, [r2, #20]
 801463c:	e02d      	b.n	801469a <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	f04f 32ff 	mov.w	r2, #4294967295
 8014644:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	689b      	ldr	r3, [r3, #8]
 801464a:	60bb      	str	r3, [r7, #8]
 801464c:	e01d      	b.n	801468a <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	685b      	ldr	r3, [r3, #4]
 8014652:	4619      	mov	r1, r3
 8014654:	68b8      	ldr	r0, [r7, #8]
 8014656:	f000 f857 	bl	8014708 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801465a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801465e:	f7ff fed7 	bl	8014410 <FLASH_WaitForLastOperation>
 8014662:	4603      	mov	r3, r0
 8014664:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8014666:	4b13      	ldr	r3, [pc, #76]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 8014668:	695b      	ldr	r3, [r3, #20]
 801466a:	4a12      	ldr	r2, [pc, #72]	; (80146b4 <HAL_FLASHEx_Erase+0x140>)
 801466c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014670:	f023 0302 	bic.w	r3, r3, #2
 8014674:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8014676:	7bfb      	ldrb	r3, [r7, #15]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d003      	beq.n	8014684 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	68ba      	ldr	r2, [r7, #8]
 8014680:	601a      	str	r2, [r3, #0]
          break;
 8014682:	e00a      	b.n	801469a <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	3301      	adds	r3, #1
 8014688:	60bb      	str	r3, [r7, #8]
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	689a      	ldr	r2, [r3, #8]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	68db      	ldr	r3, [r3, #12]
 8014692:	4413      	add	r3, r2
 8014694:	68ba      	ldr	r2, [r7, #8]
 8014696:	429a      	cmp	r2, r3
 8014698:	d3d9      	bcc.n	801464e <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801469a:	f000 f86b 	bl	8014774 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801469e:	4b04      	ldr	r3, [pc, #16]	; (80146b0 <HAL_FLASHEx_Erase+0x13c>)
 80146a0:	2200      	movs	r2, #0
 80146a2:	701a      	strb	r2, [r3, #0]

  return status;
 80146a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3710      	adds	r7, #16
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop
 80146b0:	2000001c 	.word	0x2000001c
 80146b4:	40022000 	.word	0x40022000

080146b8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80146b8:	b480      	push	{r7}
 80146ba:	b083      	sub	sp, #12
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	f003 0301 	and.w	r3, r3, #1
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d005      	beq.n	80146d6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80146ca:	4b0e      	ldr	r3, [pc, #56]	; (8014704 <FLASH_MassErase+0x4c>)
 80146cc:	695b      	ldr	r3, [r3, #20]
 80146ce:	4a0d      	ldr	r2, [pc, #52]	; (8014704 <FLASH_MassErase+0x4c>)
 80146d0:	f043 0304 	orr.w	r3, r3, #4
 80146d4:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f003 0302 	and.w	r3, r3, #2
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d005      	beq.n	80146ec <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80146e0:	4b08      	ldr	r3, [pc, #32]	; (8014704 <FLASH_MassErase+0x4c>)
 80146e2:	695b      	ldr	r3, [r3, #20]
 80146e4:	4a07      	ldr	r2, [pc, #28]	; (8014704 <FLASH_MassErase+0x4c>)
 80146e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80146ea:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80146ec:	4b05      	ldr	r3, [pc, #20]	; (8014704 <FLASH_MassErase+0x4c>)
 80146ee:	695b      	ldr	r3, [r3, #20]
 80146f0:	4a04      	ldr	r2, [pc, #16]	; (8014704 <FLASH_MassErase+0x4c>)
 80146f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80146f6:	6153      	str	r3, [r2, #20]
}
 80146f8:	bf00      	nop
 80146fa:	370c      	adds	r7, #12
 80146fc:	46bd      	mov	sp, r7
 80146fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014702:	4770      	bx	lr
 8014704:	40022000 	.word	0x40022000

08014708 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8014708:	b480      	push	{r7}
 801470a:	b083      	sub	sp, #12
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	f003 0301 	and.w	r3, r3, #1
 8014718:	2b00      	cmp	r3, #0
 801471a:	d006      	beq.n	801472a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 801471c:	4b14      	ldr	r3, [pc, #80]	; (8014770 <FLASH_PageErase+0x68>)
 801471e:	695b      	ldr	r3, [r3, #20]
 8014720:	4a13      	ldr	r2, [pc, #76]	; (8014770 <FLASH_PageErase+0x68>)
 8014722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014726:	6153      	str	r3, [r2, #20]
 8014728:	e005      	b.n	8014736 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 801472a:	4b11      	ldr	r3, [pc, #68]	; (8014770 <FLASH_PageErase+0x68>)
 801472c:	695b      	ldr	r3, [r3, #20]
 801472e:	4a10      	ldr	r2, [pc, #64]	; (8014770 <FLASH_PageErase+0x68>)
 8014730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014734:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8014736:	4b0e      	ldr	r3, [pc, #56]	; (8014770 <FLASH_PageErase+0x68>)
 8014738:	695b      	ldr	r3, [r3, #20]
 801473a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	00db      	lsls	r3, r3, #3
 8014742:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8014746:	490a      	ldr	r1, [pc, #40]	; (8014770 <FLASH_PageErase+0x68>)
 8014748:	4313      	orrs	r3, r2
 801474a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801474c:	4b08      	ldr	r3, [pc, #32]	; (8014770 <FLASH_PageErase+0x68>)
 801474e:	695b      	ldr	r3, [r3, #20]
 8014750:	4a07      	ldr	r2, [pc, #28]	; (8014770 <FLASH_PageErase+0x68>)
 8014752:	f043 0302 	orr.w	r3, r3, #2
 8014756:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8014758:	4b05      	ldr	r3, [pc, #20]	; (8014770 <FLASH_PageErase+0x68>)
 801475a:	695b      	ldr	r3, [r3, #20]
 801475c:	4a04      	ldr	r2, [pc, #16]	; (8014770 <FLASH_PageErase+0x68>)
 801475e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014762:	6153      	str	r3, [r2, #20]
}
 8014764:	bf00      	nop
 8014766:	370c      	adds	r7, #12
 8014768:	46bd      	mov	sp, r7
 801476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476e:	4770      	bx	lr
 8014770:	40022000 	.word	0x40022000

08014774 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801477a:	4b1e      	ldr	r3, [pc, #120]	; (80147f4 <FLASH_FlushCaches+0x80>)
 801477c:	7f1b      	ldrb	r3, [r3, #28]
 801477e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8014780:	79fb      	ldrb	r3, [r7, #7]
 8014782:	2b01      	cmp	r3, #1
 8014784:	d002      	beq.n	801478c <FLASH_FlushCaches+0x18>
 8014786:	79fb      	ldrb	r3, [r7, #7]
 8014788:	2b03      	cmp	r3, #3
 801478a:	d111      	bne.n	80147b0 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801478c:	4b1a      	ldr	r3, [pc, #104]	; (80147f8 <FLASH_FlushCaches+0x84>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	4a19      	ldr	r2, [pc, #100]	; (80147f8 <FLASH_FlushCaches+0x84>)
 8014792:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014796:	6013      	str	r3, [r2, #0]
 8014798:	4b17      	ldr	r3, [pc, #92]	; (80147f8 <FLASH_FlushCaches+0x84>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	4a16      	ldr	r2, [pc, #88]	; (80147f8 <FLASH_FlushCaches+0x84>)
 801479e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80147a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80147a4:	4b14      	ldr	r3, [pc, #80]	; (80147f8 <FLASH_FlushCaches+0x84>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	4a13      	ldr	r2, [pc, #76]	; (80147f8 <FLASH_FlushCaches+0x84>)
 80147aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80147ae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80147b0:	79fb      	ldrb	r3, [r7, #7]
 80147b2:	2b02      	cmp	r3, #2
 80147b4:	d002      	beq.n	80147bc <FLASH_FlushCaches+0x48>
 80147b6:	79fb      	ldrb	r3, [r7, #7]
 80147b8:	2b03      	cmp	r3, #3
 80147ba:	d111      	bne.n	80147e0 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80147bc:	4b0e      	ldr	r3, [pc, #56]	; (80147f8 <FLASH_FlushCaches+0x84>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4a0d      	ldr	r2, [pc, #52]	; (80147f8 <FLASH_FlushCaches+0x84>)
 80147c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80147c6:	6013      	str	r3, [r2, #0]
 80147c8:	4b0b      	ldr	r3, [pc, #44]	; (80147f8 <FLASH_FlushCaches+0x84>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	4a0a      	ldr	r2, [pc, #40]	; (80147f8 <FLASH_FlushCaches+0x84>)
 80147ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80147d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80147d4:	4b08      	ldr	r3, [pc, #32]	; (80147f8 <FLASH_FlushCaches+0x84>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	4a07      	ldr	r2, [pc, #28]	; (80147f8 <FLASH_FlushCaches+0x84>)
 80147da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80147de:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80147e0:	4b04      	ldr	r3, [pc, #16]	; (80147f4 <FLASH_FlushCaches+0x80>)
 80147e2:	2200      	movs	r2, #0
 80147e4:	771a      	strb	r2, [r3, #28]
}
 80147e6:	bf00      	nop
 80147e8:	370c      	adds	r7, #12
 80147ea:	46bd      	mov	sp, r7
 80147ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f0:	4770      	bx	lr
 80147f2:	bf00      	nop
 80147f4:	2000001c 	.word	0x2000001c
 80147f8:	40022000 	.word	0x40022000

080147fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80147fc:	b480      	push	{r7}
 80147fe:	b087      	sub	sp, #28
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
 8014804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8014806:	2300      	movs	r3, #0
 8014808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801480a:	e17f      	b.n	8014b0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	681a      	ldr	r2, [r3, #0]
 8014810:	2101      	movs	r1, #1
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	fa01 f303 	lsl.w	r3, r1, r3
 8014818:	4013      	ands	r3, r2
 801481a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2b00      	cmp	r3, #0
 8014820:	f000 8171 	beq.w	8014b06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	685b      	ldr	r3, [r3, #4]
 8014828:	2b01      	cmp	r3, #1
 801482a:	d00b      	beq.n	8014844 <HAL_GPIO_Init+0x48>
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	685b      	ldr	r3, [r3, #4]
 8014830:	2b02      	cmp	r3, #2
 8014832:	d007      	beq.n	8014844 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8014838:	2b11      	cmp	r3, #17
 801483a:	d003      	beq.n	8014844 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	685b      	ldr	r3, [r3, #4]
 8014840:	2b12      	cmp	r3, #18
 8014842:	d130      	bne.n	80148a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	689b      	ldr	r3, [r3, #8]
 8014848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801484a:	697b      	ldr	r3, [r7, #20]
 801484c:	005b      	lsls	r3, r3, #1
 801484e:	2203      	movs	r2, #3
 8014850:	fa02 f303 	lsl.w	r3, r2, r3
 8014854:	43db      	mvns	r3, r3
 8014856:	693a      	ldr	r2, [r7, #16]
 8014858:	4013      	ands	r3, r2
 801485a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	68da      	ldr	r2, [r3, #12]
 8014860:	697b      	ldr	r3, [r7, #20]
 8014862:	005b      	lsls	r3, r3, #1
 8014864:	fa02 f303 	lsl.w	r3, r2, r3
 8014868:	693a      	ldr	r2, [r7, #16]
 801486a:	4313      	orrs	r3, r2
 801486c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	693a      	ldr	r2, [r7, #16]
 8014872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	685b      	ldr	r3, [r3, #4]
 8014878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801487a:	2201      	movs	r2, #1
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	fa02 f303 	lsl.w	r3, r2, r3
 8014882:	43db      	mvns	r3, r3
 8014884:	693a      	ldr	r2, [r7, #16]
 8014886:	4013      	ands	r3, r2
 8014888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	091b      	lsrs	r3, r3, #4
 8014890:	f003 0201 	and.w	r2, r3, #1
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	fa02 f303 	lsl.w	r3, r2, r3
 801489a:	693a      	ldr	r2, [r7, #16]
 801489c:	4313      	orrs	r3, r2
 801489e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	693a      	ldr	r2, [r7, #16]
 80148a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	f003 0303 	and.w	r3, r3, #3
 80148ae:	2b03      	cmp	r3, #3
 80148b0:	d118      	bne.n	80148e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80148b8:	2201      	movs	r2, #1
 80148ba:	697b      	ldr	r3, [r7, #20]
 80148bc:	fa02 f303 	lsl.w	r3, r2, r3
 80148c0:	43db      	mvns	r3, r3
 80148c2:	693a      	ldr	r2, [r7, #16]
 80148c4:	4013      	ands	r3, r2
 80148c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	685b      	ldr	r3, [r3, #4]
 80148cc:	08db      	lsrs	r3, r3, #3
 80148ce:	f003 0201 	and.w	r2, r3, #1
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	fa02 f303 	lsl.w	r3, r2, r3
 80148d8:	693a      	ldr	r2, [r7, #16]
 80148da:	4313      	orrs	r3, r2
 80148dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	693a      	ldr	r2, [r7, #16]
 80148e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80148ea:	697b      	ldr	r3, [r7, #20]
 80148ec:	005b      	lsls	r3, r3, #1
 80148ee:	2203      	movs	r2, #3
 80148f0:	fa02 f303 	lsl.w	r3, r2, r3
 80148f4:	43db      	mvns	r3, r3
 80148f6:	693a      	ldr	r2, [r7, #16]
 80148f8:	4013      	ands	r3, r2
 80148fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	689a      	ldr	r2, [r3, #8]
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	005b      	lsls	r3, r3, #1
 8014904:	fa02 f303 	lsl.w	r3, r2, r3
 8014908:	693a      	ldr	r2, [r7, #16]
 801490a:	4313      	orrs	r3, r2
 801490c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	693a      	ldr	r2, [r7, #16]
 8014912:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	2b02      	cmp	r3, #2
 801491a:	d003      	beq.n	8014924 <HAL_GPIO_Init+0x128>
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	685b      	ldr	r3, [r3, #4]
 8014920:	2b12      	cmp	r3, #18
 8014922:	d123      	bne.n	801496c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	08da      	lsrs	r2, r3, #3
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	3208      	adds	r2, #8
 801492c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014930:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	f003 0307 	and.w	r3, r3, #7
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	220f      	movs	r2, #15
 801493c:	fa02 f303 	lsl.w	r3, r2, r3
 8014940:	43db      	mvns	r3, r3
 8014942:	693a      	ldr	r2, [r7, #16]
 8014944:	4013      	ands	r3, r2
 8014946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	691a      	ldr	r2, [r3, #16]
 801494c:	697b      	ldr	r3, [r7, #20]
 801494e:	f003 0307 	and.w	r3, r3, #7
 8014952:	009b      	lsls	r3, r3, #2
 8014954:	fa02 f303 	lsl.w	r3, r2, r3
 8014958:	693a      	ldr	r2, [r7, #16]
 801495a:	4313      	orrs	r3, r2
 801495c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801495e:	697b      	ldr	r3, [r7, #20]
 8014960:	08da      	lsrs	r2, r3, #3
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	3208      	adds	r2, #8
 8014966:	6939      	ldr	r1, [r7, #16]
 8014968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8014972:	697b      	ldr	r3, [r7, #20]
 8014974:	005b      	lsls	r3, r3, #1
 8014976:	2203      	movs	r2, #3
 8014978:	fa02 f303 	lsl.w	r3, r2, r3
 801497c:	43db      	mvns	r3, r3
 801497e:	693a      	ldr	r2, [r7, #16]
 8014980:	4013      	ands	r3, r2
 8014982:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	685b      	ldr	r3, [r3, #4]
 8014988:	f003 0203 	and.w	r2, r3, #3
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	fa02 f303 	lsl.w	r3, r2, r3
 8014994:	693a      	ldr	r2, [r7, #16]
 8014996:	4313      	orrs	r3, r2
 8014998:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	693a      	ldr	r2, [r7, #16]
 801499e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	f000 80ac 	beq.w	8014b06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80149ae:	4b5f      	ldr	r3, [pc, #380]	; (8014b2c <HAL_GPIO_Init+0x330>)
 80149b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80149b2:	4a5e      	ldr	r2, [pc, #376]	; (8014b2c <HAL_GPIO_Init+0x330>)
 80149b4:	f043 0301 	orr.w	r3, r3, #1
 80149b8:	6613      	str	r3, [r2, #96]	; 0x60
 80149ba:	4b5c      	ldr	r3, [pc, #368]	; (8014b2c <HAL_GPIO_Init+0x330>)
 80149bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80149be:	f003 0301 	and.w	r3, r3, #1
 80149c2:	60bb      	str	r3, [r7, #8]
 80149c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80149c6:	4a5a      	ldr	r2, [pc, #360]	; (8014b30 <HAL_GPIO_Init+0x334>)
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	089b      	lsrs	r3, r3, #2
 80149cc:	3302      	adds	r3, #2
 80149ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80149d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	f003 0303 	and.w	r3, r3, #3
 80149da:	009b      	lsls	r3, r3, #2
 80149dc:	220f      	movs	r2, #15
 80149de:	fa02 f303 	lsl.w	r3, r2, r3
 80149e2:	43db      	mvns	r3, r3
 80149e4:	693a      	ldr	r2, [r7, #16]
 80149e6:	4013      	ands	r3, r2
 80149e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80149f0:	d025      	beq.n	8014a3e <HAL_GPIO_Init+0x242>
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	4a4f      	ldr	r2, [pc, #316]	; (8014b34 <HAL_GPIO_Init+0x338>)
 80149f6:	4293      	cmp	r3, r2
 80149f8:	d01f      	beq.n	8014a3a <HAL_GPIO_Init+0x23e>
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	4a4e      	ldr	r2, [pc, #312]	; (8014b38 <HAL_GPIO_Init+0x33c>)
 80149fe:	4293      	cmp	r3, r2
 8014a00:	d019      	beq.n	8014a36 <HAL_GPIO_Init+0x23a>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	4a4d      	ldr	r2, [pc, #308]	; (8014b3c <HAL_GPIO_Init+0x340>)
 8014a06:	4293      	cmp	r3, r2
 8014a08:	d013      	beq.n	8014a32 <HAL_GPIO_Init+0x236>
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	4a4c      	ldr	r2, [pc, #304]	; (8014b40 <HAL_GPIO_Init+0x344>)
 8014a0e:	4293      	cmp	r3, r2
 8014a10:	d00d      	beq.n	8014a2e <HAL_GPIO_Init+0x232>
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	4a4b      	ldr	r2, [pc, #300]	; (8014b44 <HAL_GPIO_Init+0x348>)
 8014a16:	4293      	cmp	r3, r2
 8014a18:	d007      	beq.n	8014a2a <HAL_GPIO_Init+0x22e>
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	4a4a      	ldr	r2, [pc, #296]	; (8014b48 <HAL_GPIO_Init+0x34c>)
 8014a1e:	4293      	cmp	r3, r2
 8014a20:	d101      	bne.n	8014a26 <HAL_GPIO_Init+0x22a>
 8014a22:	2306      	movs	r3, #6
 8014a24:	e00c      	b.n	8014a40 <HAL_GPIO_Init+0x244>
 8014a26:	2307      	movs	r3, #7
 8014a28:	e00a      	b.n	8014a40 <HAL_GPIO_Init+0x244>
 8014a2a:	2305      	movs	r3, #5
 8014a2c:	e008      	b.n	8014a40 <HAL_GPIO_Init+0x244>
 8014a2e:	2304      	movs	r3, #4
 8014a30:	e006      	b.n	8014a40 <HAL_GPIO_Init+0x244>
 8014a32:	2303      	movs	r3, #3
 8014a34:	e004      	b.n	8014a40 <HAL_GPIO_Init+0x244>
 8014a36:	2302      	movs	r3, #2
 8014a38:	e002      	b.n	8014a40 <HAL_GPIO_Init+0x244>
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	e000      	b.n	8014a40 <HAL_GPIO_Init+0x244>
 8014a3e:	2300      	movs	r3, #0
 8014a40:	697a      	ldr	r2, [r7, #20]
 8014a42:	f002 0203 	and.w	r2, r2, #3
 8014a46:	0092      	lsls	r2, r2, #2
 8014a48:	4093      	lsls	r3, r2
 8014a4a:	693a      	ldr	r2, [r7, #16]
 8014a4c:	4313      	orrs	r3, r2
 8014a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8014a50:	4937      	ldr	r1, [pc, #220]	; (8014b30 <HAL_GPIO_Init+0x334>)
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	089b      	lsrs	r3, r3, #2
 8014a56:	3302      	adds	r3, #2
 8014a58:	693a      	ldr	r2, [r7, #16]
 8014a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8014a5e:	4b3b      	ldr	r3, [pc, #236]	; (8014b4c <HAL_GPIO_Init+0x350>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	43db      	mvns	r3, r3
 8014a68:	693a      	ldr	r2, [r7, #16]
 8014a6a:	4013      	ands	r3, r2
 8014a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d003      	beq.n	8014a82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8014a7a:	693a      	ldr	r2, [r7, #16]
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	4313      	orrs	r3, r2
 8014a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8014a82:	4a32      	ldr	r2, [pc, #200]	; (8014b4c <HAL_GPIO_Init+0x350>)
 8014a84:	693b      	ldr	r3, [r7, #16]
 8014a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8014a88:	4b30      	ldr	r3, [pc, #192]	; (8014b4c <HAL_GPIO_Init+0x350>)
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	43db      	mvns	r3, r3
 8014a92:	693a      	ldr	r2, [r7, #16]
 8014a94:	4013      	ands	r3, r2
 8014a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d003      	beq.n	8014aac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8014aa4:	693a      	ldr	r2, [r7, #16]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	4313      	orrs	r3, r2
 8014aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8014aac:	4a27      	ldr	r2, [pc, #156]	; (8014b4c <HAL_GPIO_Init+0x350>)
 8014aae:	693b      	ldr	r3, [r7, #16]
 8014ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8014ab2:	4b26      	ldr	r3, [pc, #152]	; (8014b4c <HAL_GPIO_Init+0x350>)
 8014ab4:	689b      	ldr	r3, [r3, #8]
 8014ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	43db      	mvns	r3, r3
 8014abc:	693a      	ldr	r2, [r7, #16]
 8014abe:	4013      	ands	r3, r2
 8014ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d003      	beq.n	8014ad6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8014ace:	693a      	ldr	r2, [r7, #16]
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	4313      	orrs	r3, r2
 8014ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8014ad6:	4a1d      	ldr	r2, [pc, #116]	; (8014b4c <HAL_GPIO_Init+0x350>)
 8014ad8:	693b      	ldr	r3, [r7, #16]
 8014ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8014adc:	4b1b      	ldr	r3, [pc, #108]	; (8014b4c <HAL_GPIO_Init+0x350>)
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	43db      	mvns	r3, r3
 8014ae6:	693a      	ldr	r2, [r7, #16]
 8014ae8:	4013      	ands	r3, r2
 8014aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8014aec:	683b      	ldr	r3, [r7, #0]
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d003      	beq.n	8014b00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8014af8:	693a      	ldr	r2, [r7, #16]
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	4313      	orrs	r3, r2
 8014afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8014b00:	4a12      	ldr	r2, [pc, #72]	; (8014b4c <HAL_GPIO_Init+0x350>)
 8014b02:	693b      	ldr	r3, [r7, #16]
 8014b04:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	3301      	adds	r3, #1
 8014b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	681a      	ldr	r2, [r3, #0]
 8014b10:	697b      	ldr	r3, [r7, #20]
 8014b12:	fa22 f303 	lsr.w	r3, r2, r3
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	f47f ae78 	bne.w	801480c <HAL_GPIO_Init+0x10>
  }
}
 8014b1c:	bf00      	nop
 8014b1e:	bf00      	nop
 8014b20:	371c      	adds	r7, #28
 8014b22:	46bd      	mov	sp, r7
 8014b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop
 8014b2c:	40021000 	.word	0x40021000
 8014b30:	40010000 	.word	0x40010000
 8014b34:	48000400 	.word	0x48000400
 8014b38:	48000800 	.word	0x48000800
 8014b3c:	48000c00 	.word	0x48000c00
 8014b40:	48001000 	.word	0x48001000
 8014b44:	48001400 	.word	0x48001400
 8014b48:	48001800 	.word	0x48001800
 8014b4c:	40010400 	.word	0x40010400

08014b50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8014b50:	b480      	push	{r7}
 8014b52:	b087      	sub	sp, #28
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
 8014b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8014b5e:	e0cd      	b.n	8014cfc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8014b60:	2201      	movs	r2, #1
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	fa02 f303 	lsl.w	r3, r2, r3
 8014b68:	683a      	ldr	r2, [r7, #0]
 8014b6a:	4013      	ands	r3, r2
 8014b6c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8014b6e:	693b      	ldr	r3, [r7, #16]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	f000 80c0 	beq.w	8014cf6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8014b76:	4a68      	ldr	r2, [pc, #416]	; (8014d18 <HAL_GPIO_DeInit+0x1c8>)
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	089b      	lsrs	r3, r3, #2
 8014b7c:	3302      	adds	r3, #2
 8014b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b82:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	f003 0303 	and.w	r3, r3, #3
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	220f      	movs	r2, #15
 8014b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8014b92:	68fa      	ldr	r2, [r7, #12]
 8014b94:	4013      	ands	r3, r2
 8014b96:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8014b9e:	d025      	beq.n	8014bec <HAL_GPIO_DeInit+0x9c>
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	4a5e      	ldr	r2, [pc, #376]	; (8014d1c <HAL_GPIO_DeInit+0x1cc>)
 8014ba4:	4293      	cmp	r3, r2
 8014ba6:	d01f      	beq.n	8014be8 <HAL_GPIO_DeInit+0x98>
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	4a5d      	ldr	r2, [pc, #372]	; (8014d20 <HAL_GPIO_DeInit+0x1d0>)
 8014bac:	4293      	cmp	r3, r2
 8014bae:	d019      	beq.n	8014be4 <HAL_GPIO_DeInit+0x94>
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	4a5c      	ldr	r2, [pc, #368]	; (8014d24 <HAL_GPIO_DeInit+0x1d4>)
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	d013      	beq.n	8014be0 <HAL_GPIO_DeInit+0x90>
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	4a5b      	ldr	r2, [pc, #364]	; (8014d28 <HAL_GPIO_DeInit+0x1d8>)
 8014bbc:	4293      	cmp	r3, r2
 8014bbe:	d00d      	beq.n	8014bdc <HAL_GPIO_DeInit+0x8c>
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	4a5a      	ldr	r2, [pc, #360]	; (8014d2c <HAL_GPIO_DeInit+0x1dc>)
 8014bc4:	4293      	cmp	r3, r2
 8014bc6:	d007      	beq.n	8014bd8 <HAL_GPIO_DeInit+0x88>
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	4a59      	ldr	r2, [pc, #356]	; (8014d30 <HAL_GPIO_DeInit+0x1e0>)
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	d101      	bne.n	8014bd4 <HAL_GPIO_DeInit+0x84>
 8014bd0:	2306      	movs	r3, #6
 8014bd2:	e00c      	b.n	8014bee <HAL_GPIO_DeInit+0x9e>
 8014bd4:	2307      	movs	r3, #7
 8014bd6:	e00a      	b.n	8014bee <HAL_GPIO_DeInit+0x9e>
 8014bd8:	2305      	movs	r3, #5
 8014bda:	e008      	b.n	8014bee <HAL_GPIO_DeInit+0x9e>
 8014bdc:	2304      	movs	r3, #4
 8014bde:	e006      	b.n	8014bee <HAL_GPIO_DeInit+0x9e>
 8014be0:	2303      	movs	r3, #3
 8014be2:	e004      	b.n	8014bee <HAL_GPIO_DeInit+0x9e>
 8014be4:	2302      	movs	r3, #2
 8014be6:	e002      	b.n	8014bee <HAL_GPIO_DeInit+0x9e>
 8014be8:	2301      	movs	r3, #1
 8014bea:	e000      	b.n	8014bee <HAL_GPIO_DeInit+0x9e>
 8014bec:	2300      	movs	r3, #0
 8014bee:	697a      	ldr	r2, [r7, #20]
 8014bf0:	f002 0203 	and.w	r2, r2, #3
 8014bf4:	0092      	lsls	r2, r2, #2
 8014bf6:	4093      	lsls	r3, r2
 8014bf8:	68fa      	ldr	r2, [r7, #12]
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d132      	bne.n	8014c64 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8014bfe:	4b4d      	ldr	r3, [pc, #308]	; (8014d34 <HAL_GPIO_DeInit+0x1e4>)
 8014c00:	681a      	ldr	r2, [r3, #0]
 8014c02:	693b      	ldr	r3, [r7, #16]
 8014c04:	43db      	mvns	r3, r3
 8014c06:	494b      	ldr	r1, [pc, #300]	; (8014d34 <HAL_GPIO_DeInit+0x1e4>)
 8014c08:	4013      	ands	r3, r2
 8014c0a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8014c0c:	4b49      	ldr	r3, [pc, #292]	; (8014d34 <HAL_GPIO_DeInit+0x1e4>)
 8014c0e:	685a      	ldr	r2, [r3, #4]
 8014c10:	693b      	ldr	r3, [r7, #16]
 8014c12:	43db      	mvns	r3, r3
 8014c14:	4947      	ldr	r1, [pc, #284]	; (8014d34 <HAL_GPIO_DeInit+0x1e4>)
 8014c16:	4013      	ands	r3, r2
 8014c18:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8014c1a:	4b46      	ldr	r3, [pc, #280]	; (8014d34 <HAL_GPIO_DeInit+0x1e4>)
 8014c1c:	689a      	ldr	r2, [r3, #8]
 8014c1e:	693b      	ldr	r3, [r7, #16]
 8014c20:	43db      	mvns	r3, r3
 8014c22:	4944      	ldr	r1, [pc, #272]	; (8014d34 <HAL_GPIO_DeInit+0x1e4>)
 8014c24:	4013      	ands	r3, r2
 8014c26:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8014c28:	4b42      	ldr	r3, [pc, #264]	; (8014d34 <HAL_GPIO_DeInit+0x1e4>)
 8014c2a:	68da      	ldr	r2, [r3, #12]
 8014c2c:	693b      	ldr	r3, [r7, #16]
 8014c2e:	43db      	mvns	r3, r3
 8014c30:	4940      	ldr	r1, [pc, #256]	; (8014d34 <HAL_GPIO_DeInit+0x1e4>)
 8014c32:	4013      	ands	r3, r2
 8014c34:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	f003 0303 	and.w	r3, r3, #3
 8014c3c:	009b      	lsls	r3, r3, #2
 8014c3e:	220f      	movs	r2, #15
 8014c40:	fa02 f303 	lsl.w	r3, r2, r3
 8014c44:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8014c46:	4a34      	ldr	r2, [pc, #208]	; (8014d18 <HAL_GPIO_DeInit+0x1c8>)
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	089b      	lsrs	r3, r3, #2
 8014c4c:	3302      	adds	r3, #2
 8014c4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	43da      	mvns	r2, r3
 8014c56:	4830      	ldr	r0, [pc, #192]	; (8014d18 <HAL_GPIO_DeInit+0x1c8>)
 8014c58:	697b      	ldr	r3, [r7, #20]
 8014c5a:	089b      	lsrs	r3, r3, #2
 8014c5c:	400a      	ands	r2, r1
 8014c5e:	3302      	adds	r3, #2
 8014c60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	681a      	ldr	r2, [r3, #0]
 8014c68:	697b      	ldr	r3, [r7, #20]
 8014c6a:	005b      	lsls	r3, r3, #1
 8014c6c:	2103      	movs	r1, #3
 8014c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8014c72:	431a      	orrs	r2, r3
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8014c78:	697b      	ldr	r3, [r7, #20]
 8014c7a:	08da      	lsrs	r2, r3, #3
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	3208      	adds	r2, #8
 8014c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014c84:	697b      	ldr	r3, [r7, #20]
 8014c86:	f003 0307 	and.w	r3, r3, #7
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	220f      	movs	r2, #15
 8014c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8014c92:	43db      	mvns	r3, r3
 8014c94:	697a      	ldr	r2, [r7, #20]
 8014c96:	08d2      	lsrs	r2, r2, #3
 8014c98:	4019      	ands	r1, r3
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	3208      	adds	r2, #8
 8014c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	689a      	ldr	r2, [r3, #8]
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	005b      	lsls	r3, r3, #1
 8014caa:	2103      	movs	r1, #3
 8014cac:	fa01 f303 	lsl.w	r3, r1, r3
 8014cb0:	43db      	mvns	r3, r3
 8014cb2:	401a      	ands	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	685a      	ldr	r2, [r3, #4]
 8014cbc:	2101      	movs	r1, #1
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8014cc4:	43db      	mvns	r3, r3
 8014cc6:	401a      	ands	r2, r3
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	68da      	ldr	r2, [r3, #12]
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	005b      	lsls	r3, r3, #1
 8014cd4:	2103      	movs	r1, #3
 8014cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8014cda:	43db      	mvns	r3, r3
 8014cdc:	401a      	ands	r2, r3
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ce6:	2101      	movs	r1, #1
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	fa01 f303 	lsl.w	r3, r1, r3
 8014cee:	43db      	mvns	r3, r3
 8014cf0:	401a      	ands	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8014cf6:	697b      	ldr	r3, [r7, #20]
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8014cfc:	683a      	ldr	r2, [r7, #0]
 8014cfe:	697b      	ldr	r3, [r7, #20]
 8014d00:	fa22 f303 	lsr.w	r3, r2, r3
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	f47f af2b 	bne.w	8014b60 <HAL_GPIO_DeInit+0x10>
  }
}
 8014d0a:	bf00      	nop
 8014d0c:	bf00      	nop
 8014d0e:	371c      	adds	r7, #28
 8014d10:	46bd      	mov	sp, r7
 8014d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d16:	4770      	bx	lr
 8014d18:	40010000 	.word	0x40010000
 8014d1c:	48000400 	.word	0x48000400
 8014d20:	48000800 	.word	0x48000800
 8014d24:	48000c00 	.word	0x48000c00
 8014d28:	48001000 	.word	0x48001000
 8014d2c:	48001400 	.word	0x48001400
 8014d30:	48001800 	.word	0x48001800
 8014d34:	40010400 	.word	0x40010400

08014d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8014d38:	b480      	push	{r7}
 8014d3a:	b085      	sub	sp, #20
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	460b      	mov	r3, r1
 8014d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	691a      	ldr	r2, [r3, #16]
 8014d48:	887b      	ldrh	r3, [r7, #2]
 8014d4a:	4013      	ands	r3, r2
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d002      	beq.n	8014d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8014d50:	2301      	movs	r3, #1
 8014d52:	73fb      	strb	r3, [r7, #15]
 8014d54:	e001      	b.n	8014d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8014d56:	2300      	movs	r3, #0
 8014d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8014d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	3714      	adds	r7, #20
 8014d60:	46bd      	mov	sp, r7
 8014d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d66:	4770      	bx	lr

08014d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014d68:	b480      	push	{r7}
 8014d6a:	b083      	sub	sp, #12
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
 8014d70:	460b      	mov	r3, r1
 8014d72:	807b      	strh	r3, [r7, #2]
 8014d74:	4613      	mov	r3, r2
 8014d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8014d78:	787b      	ldrb	r3, [r7, #1]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d003      	beq.n	8014d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8014d7e:	887a      	ldrh	r2, [r7, #2]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8014d84:	e002      	b.n	8014d8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8014d86:	887a      	ldrh	r2, [r7, #2]
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014d8c:	bf00      	nop
 8014d8e:	370c      	adds	r7, #12
 8014d90:	46bd      	mov	sp, r7
 8014d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d96:	4770      	bx	lr

08014d98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b085      	sub	sp, #20
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	460b      	mov	r3, r1
 8014da2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	695b      	ldr	r3, [r3, #20]
 8014da8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8014daa:	887a      	ldrh	r2, [r7, #2]
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	4013      	ands	r3, r2
 8014db0:	041a      	lsls	r2, r3, #16
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	43d9      	mvns	r1, r3
 8014db6:	887b      	ldrh	r3, [r7, #2]
 8014db8:	400b      	ands	r3, r1
 8014dba:	431a      	orrs	r2, r3
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	619a      	str	r2, [r3, #24]
}
 8014dc0:	bf00      	nop
 8014dc2:	3714      	adds	r7, #20
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr

08014dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8014dd6:	4b08      	ldr	r3, [pc, #32]	; (8014df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8014dd8:	695a      	ldr	r2, [r3, #20]
 8014dda:	88fb      	ldrh	r3, [r7, #6]
 8014ddc:	4013      	ands	r3, r2
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d006      	beq.n	8014df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8014de2:	4a05      	ldr	r2, [pc, #20]	; (8014df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8014de4:	88fb      	ldrh	r3, [r7, #6]
 8014de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8014de8:	88fb      	ldrh	r3, [r7, #6]
 8014dea:	4618      	mov	r0, r3
 8014dec:	f000 f806 	bl	8014dfc <HAL_GPIO_EXTI_Callback>
  }
}
 8014df0:	bf00      	nop
 8014df2:	3708      	adds	r7, #8
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}
 8014df8:	40010400 	.word	0x40010400

08014dfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	4603      	mov	r3, r0
 8014e04:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8014e06:	bf00      	nop
 8014e08:	370c      	adds	r7, #12
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e10:	4770      	bx	lr
	...

08014e14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8014e14:	b480      	push	{r7}
 8014e16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8014e18:	4b04      	ldr	r3, [pc, #16]	; (8014e2c <HAL_PWREx_GetVoltageRange+0x18>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8014e20:	4618      	mov	r0, r3
 8014e22:	46bd      	mov	sp, r7
 8014e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e28:	4770      	bx	lr
 8014e2a:	bf00      	nop
 8014e2c:	40007000 	.word	0x40007000

08014e30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8014e30:	b480      	push	{r7}
 8014e32:	b085      	sub	sp, #20
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e3e:	d130      	bne.n	8014ea2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8014e40:	4b23      	ldr	r3, [pc, #140]	; (8014ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e4c:	d038      	beq.n	8014ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8014e4e:	4b20      	ldr	r3, [pc, #128]	; (8014ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8014e56:	4a1e      	ldr	r2, [pc, #120]	; (8014ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014e5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8014e5e:	4b1d      	ldr	r3, [pc, #116]	; (8014ed4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	2232      	movs	r2, #50	; 0x32
 8014e64:	fb02 f303 	mul.w	r3, r2, r3
 8014e68:	4a1b      	ldr	r2, [pc, #108]	; (8014ed8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8014e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8014e6e:	0c9b      	lsrs	r3, r3, #18
 8014e70:	3301      	adds	r3, #1
 8014e72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014e74:	e002      	b.n	8014e7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	3b01      	subs	r3, #1
 8014e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014e7c:	4b14      	ldr	r3, [pc, #80]	; (8014ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014e7e:	695b      	ldr	r3, [r3, #20]
 8014e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014e88:	d102      	bne.n	8014e90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d1f2      	bne.n	8014e76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8014e90:	4b0f      	ldr	r3, [pc, #60]	; (8014ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014e92:	695b      	ldr	r3, [r3, #20]
 8014e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014e9c:	d110      	bne.n	8014ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8014e9e:	2303      	movs	r3, #3
 8014ea0:	e00f      	b.n	8014ec2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8014ea2:	4b0b      	ldr	r3, [pc, #44]	; (8014ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014eae:	d007      	beq.n	8014ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8014eb0:	4b07      	ldr	r3, [pc, #28]	; (8014ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8014eb8:	4a05      	ldr	r2, [pc, #20]	; (8014ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8014eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014ebe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8014ec0:	2300      	movs	r3, #0
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3714      	adds	r7, #20
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
 8014ece:	bf00      	nop
 8014ed0:	40007000 	.word	0x40007000
 8014ed4:	20000004 	.word	0x20000004
 8014ed8:	431bde83 	.word	0x431bde83

08014edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b088      	sub	sp, #32
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d101      	bne.n	8014eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014eea:	2301      	movs	r3, #1
 8014eec:	e3d4      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014eee:	4ba1      	ldr	r3, [pc, #644]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014ef0:	689b      	ldr	r3, [r3, #8]
 8014ef2:	f003 030c 	and.w	r3, r3, #12
 8014ef6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014ef8:	4b9e      	ldr	r3, [pc, #632]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014efa:	68db      	ldr	r3, [r3, #12]
 8014efc:	f003 0303 	and.w	r3, r3, #3
 8014f00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	f003 0310 	and.w	r3, r3, #16
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	f000 80e4 	beq.w	80150d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8014f10:	69bb      	ldr	r3, [r7, #24]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d007      	beq.n	8014f26 <HAL_RCC_OscConfig+0x4a>
 8014f16:	69bb      	ldr	r3, [r7, #24]
 8014f18:	2b0c      	cmp	r3, #12
 8014f1a:	f040 808b 	bne.w	8015034 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	2b01      	cmp	r3, #1
 8014f22:	f040 8087 	bne.w	8015034 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8014f26:	4b93      	ldr	r3, [pc, #588]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	f003 0302 	and.w	r3, r3, #2
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d005      	beq.n	8014f3e <HAL_RCC_OscConfig+0x62>
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	699b      	ldr	r3, [r3, #24]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d101      	bne.n	8014f3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	e3ac      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6a1a      	ldr	r2, [r3, #32]
 8014f42:	4b8c      	ldr	r3, [pc, #560]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	f003 0308 	and.w	r3, r3, #8
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d004      	beq.n	8014f58 <HAL_RCC_OscConfig+0x7c>
 8014f4e:	4b89      	ldr	r3, [pc, #548]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f56:	e005      	b.n	8014f64 <HAL_RCC_OscConfig+0x88>
 8014f58:	4b86      	ldr	r3, [pc, #536]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014f5e:	091b      	lsrs	r3, r3, #4
 8014f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f64:	4293      	cmp	r3, r2
 8014f66:	d223      	bcs.n	8014fb0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6a1b      	ldr	r3, [r3, #32]
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f000 fd41 	bl	80159f4 <RCC_SetFlashLatencyFromMSIRange>
 8014f72:	4603      	mov	r3, r0
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d001      	beq.n	8014f7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8014f78:	2301      	movs	r3, #1
 8014f7a:	e38d      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014f7c:	4b7d      	ldr	r3, [pc, #500]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	4a7c      	ldr	r2, [pc, #496]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014f82:	f043 0308 	orr.w	r3, r3, #8
 8014f86:	6013      	str	r3, [r2, #0]
 8014f88:	4b7a      	ldr	r3, [pc, #488]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	6a1b      	ldr	r3, [r3, #32]
 8014f94:	4977      	ldr	r1, [pc, #476]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014f96:	4313      	orrs	r3, r2
 8014f98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014f9a:	4b76      	ldr	r3, [pc, #472]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	69db      	ldr	r3, [r3, #28]
 8014fa6:	021b      	lsls	r3, r3, #8
 8014fa8:	4972      	ldr	r1, [pc, #456]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014faa:	4313      	orrs	r3, r2
 8014fac:	604b      	str	r3, [r1, #4]
 8014fae:	e025      	b.n	8014ffc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014fb0:	4b70      	ldr	r3, [pc, #448]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	4a6f      	ldr	r2, [pc, #444]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014fb6:	f043 0308 	orr.w	r3, r3, #8
 8014fba:	6013      	str	r3, [r2, #0]
 8014fbc:	4b6d      	ldr	r3, [pc, #436]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6a1b      	ldr	r3, [r3, #32]
 8014fc8:	496a      	ldr	r1, [pc, #424]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014fca:	4313      	orrs	r3, r2
 8014fcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014fce:	4b69      	ldr	r3, [pc, #420]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014fd0:	685b      	ldr	r3, [r3, #4]
 8014fd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	69db      	ldr	r3, [r3, #28]
 8014fda:	021b      	lsls	r3, r3, #8
 8014fdc:	4965      	ldr	r1, [pc, #404]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8014fde:	4313      	orrs	r3, r2
 8014fe0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014fe2:	69bb      	ldr	r3, [r7, #24]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d109      	bne.n	8014ffc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	6a1b      	ldr	r3, [r3, #32]
 8014fec:	4618      	mov	r0, r3
 8014fee:	f000 fd01 	bl	80159f4 <RCC_SetFlashLatencyFromMSIRange>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d001      	beq.n	8014ffc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	e34d      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8014ffc:	f000 fc36 	bl	801586c <HAL_RCC_GetSysClockFreq>
 8015000:	4602      	mov	r2, r0
 8015002:	4b5c      	ldr	r3, [pc, #368]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015004:	689b      	ldr	r3, [r3, #8]
 8015006:	091b      	lsrs	r3, r3, #4
 8015008:	f003 030f 	and.w	r3, r3, #15
 801500c:	495a      	ldr	r1, [pc, #360]	; (8015178 <HAL_RCC_OscConfig+0x29c>)
 801500e:	5ccb      	ldrb	r3, [r1, r3]
 8015010:	f003 031f 	and.w	r3, r3, #31
 8015014:	fa22 f303 	lsr.w	r3, r2, r3
 8015018:	4a58      	ldr	r2, [pc, #352]	; (801517c <HAL_RCC_OscConfig+0x2a0>)
 801501a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 801501c:	4b58      	ldr	r3, [pc, #352]	; (8015180 <HAL_RCC_OscConfig+0x2a4>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	4618      	mov	r0, r3
 8015022:	f7fd fd25 	bl	8012a70 <HAL_InitTick>
 8015026:	4603      	mov	r3, r0
 8015028:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 801502a:	7bfb      	ldrb	r3, [r7, #15]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d052      	beq.n	80150d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8015030:	7bfb      	ldrb	r3, [r7, #15]
 8015032:	e331      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	699b      	ldr	r3, [r3, #24]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d032      	beq.n	80150a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801503c:	4b4d      	ldr	r3, [pc, #308]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	4a4c      	ldr	r2, [pc, #304]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015042:	f043 0301 	orr.w	r3, r3, #1
 8015046:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8015048:	f7fd fd62 	bl	8012b10 <HAL_GetTick>
 801504c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801504e:	e008      	b.n	8015062 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015050:	f7fd fd5e 	bl	8012b10 <HAL_GetTick>
 8015054:	4602      	mov	r2, r0
 8015056:	693b      	ldr	r3, [r7, #16]
 8015058:	1ad3      	subs	r3, r2, r3
 801505a:	2b02      	cmp	r3, #2
 801505c:	d901      	bls.n	8015062 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 801505e:	2303      	movs	r3, #3
 8015060:	e31a      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015062:	4b44      	ldr	r3, [pc, #272]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	f003 0302 	and.w	r3, r3, #2
 801506a:	2b00      	cmp	r3, #0
 801506c:	d0f0      	beq.n	8015050 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801506e:	4b41      	ldr	r3, [pc, #260]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	4a40      	ldr	r2, [pc, #256]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015074:	f043 0308 	orr.w	r3, r3, #8
 8015078:	6013      	str	r3, [r2, #0]
 801507a:	4b3e      	ldr	r3, [pc, #248]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6a1b      	ldr	r3, [r3, #32]
 8015086:	493b      	ldr	r1, [pc, #236]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015088:	4313      	orrs	r3, r2
 801508a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801508c:	4b39      	ldr	r3, [pc, #228]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	69db      	ldr	r3, [r3, #28]
 8015098:	021b      	lsls	r3, r3, #8
 801509a:	4936      	ldr	r1, [pc, #216]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 801509c:	4313      	orrs	r3, r2
 801509e:	604b      	str	r3, [r1, #4]
 80150a0:	e01a      	b.n	80150d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80150a2:	4b34      	ldr	r3, [pc, #208]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	4a33      	ldr	r2, [pc, #204]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 80150a8:	f023 0301 	bic.w	r3, r3, #1
 80150ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80150ae:	f7fd fd2f 	bl	8012b10 <HAL_GetTick>
 80150b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80150b4:	e008      	b.n	80150c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80150b6:	f7fd fd2b 	bl	8012b10 <HAL_GetTick>
 80150ba:	4602      	mov	r2, r0
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	1ad3      	subs	r3, r2, r3
 80150c0:	2b02      	cmp	r3, #2
 80150c2:	d901      	bls.n	80150c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80150c4:	2303      	movs	r3, #3
 80150c6:	e2e7      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80150c8:	4b2a      	ldr	r3, [pc, #168]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	f003 0302 	and.w	r3, r3, #2
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d1f0      	bne.n	80150b6 <HAL_RCC_OscConfig+0x1da>
 80150d4:	e000      	b.n	80150d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80150d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	f003 0301 	and.w	r3, r3, #1
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d074      	beq.n	80151ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80150e4:	69bb      	ldr	r3, [r7, #24]
 80150e6:	2b08      	cmp	r3, #8
 80150e8:	d005      	beq.n	80150f6 <HAL_RCC_OscConfig+0x21a>
 80150ea:	69bb      	ldr	r3, [r7, #24]
 80150ec:	2b0c      	cmp	r3, #12
 80150ee:	d10e      	bne.n	801510e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80150f0:	697b      	ldr	r3, [r7, #20]
 80150f2:	2b03      	cmp	r3, #3
 80150f4:	d10b      	bne.n	801510e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80150f6:	4b1f      	ldr	r3, [pc, #124]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d064      	beq.n	80151cc <HAL_RCC_OscConfig+0x2f0>
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	685b      	ldr	r3, [r3, #4]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d160      	bne.n	80151cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 801510a:	2301      	movs	r3, #1
 801510c:	e2c4      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	685b      	ldr	r3, [r3, #4]
 8015112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015116:	d106      	bne.n	8015126 <HAL_RCC_OscConfig+0x24a>
 8015118:	4b16      	ldr	r3, [pc, #88]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	4a15      	ldr	r2, [pc, #84]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 801511e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015122:	6013      	str	r3, [r2, #0]
 8015124:	e01d      	b.n	8015162 <HAL_RCC_OscConfig+0x286>
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	685b      	ldr	r3, [r3, #4]
 801512a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801512e:	d10c      	bne.n	801514a <HAL_RCC_OscConfig+0x26e>
 8015130:	4b10      	ldr	r3, [pc, #64]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	4a0f      	ldr	r2, [pc, #60]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015136:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801513a:	6013      	str	r3, [r2, #0]
 801513c:	4b0d      	ldr	r3, [pc, #52]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	4a0c      	ldr	r2, [pc, #48]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015146:	6013      	str	r3, [r2, #0]
 8015148:	e00b      	b.n	8015162 <HAL_RCC_OscConfig+0x286>
 801514a:	4b0a      	ldr	r3, [pc, #40]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	4a09      	ldr	r2, [pc, #36]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015154:	6013      	str	r3, [r2, #0]
 8015156:	4b07      	ldr	r3, [pc, #28]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	4a06      	ldr	r2, [pc, #24]	; (8015174 <HAL_RCC_OscConfig+0x298>)
 801515c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015160:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	685b      	ldr	r3, [r3, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d01c      	beq.n	80151a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801516a:	f7fd fcd1 	bl	8012b10 <HAL_GetTick>
 801516e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015170:	e011      	b.n	8015196 <HAL_RCC_OscConfig+0x2ba>
 8015172:	bf00      	nop
 8015174:	40021000 	.word	0x40021000
 8015178:	08019eb0 	.word	0x08019eb0
 801517c:	20000004 	.word	0x20000004
 8015180:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8015184:	f7fd fcc4 	bl	8012b10 <HAL_GetTick>
 8015188:	4602      	mov	r2, r0
 801518a:	693b      	ldr	r3, [r7, #16]
 801518c:	1ad3      	subs	r3, r2, r3
 801518e:	2b64      	cmp	r3, #100	; 0x64
 8015190:	d901      	bls.n	8015196 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8015192:	2303      	movs	r3, #3
 8015194:	e280      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015196:	4baf      	ldr	r3, [pc, #700]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d0f0      	beq.n	8015184 <HAL_RCC_OscConfig+0x2a8>
 80151a2:	e014      	b.n	80151ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80151a4:	f7fd fcb4 	bl	8012b10 <HAL_GetTick>
 80151a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80151aa:	e008      	b.n	80151be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80151ac:	f7fd fcb0 	bl	8012b10 <HAL_GetTick>
 80151b0:	4602      	mov	r2, r0
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	1ad3      	subs	r3, r2, r3
 80151b6:	2b64      	cmp	r3, #100	; 0x64
 80151b8:	d901      	bls.n	80151be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80151ba:	2303      	movs	r3, #3
 80151bc:	e26c      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80151be:	4ba5      	ldr	r3, [pc, #660]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d1f0      	bne.n	80151ac <HAL_RCC_OscConfig+0x2d0>
 80151ca:	e000      	b.n	80151ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80151cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	f003 0302 	and.w	r3, r3, #2
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d060      	beq.n	801529c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80151da:	69bb      	ldr	r3, [r7, #24]
 80151dc:	2b04      	cmp	r3, #4
 80151de:	d005      	beq.n	80151ec <HAL_RCC_OscConfig+0x310>
 80151e0:	69bb      	ldr	r3, [r7, #24]
 80151e2:	2b0c      	cmp	r3, #12
 80151e4:	d119      	bne.n	801521a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	2b02      	cmp	r3, #2
 80151ea:	d116      	bne.n	801521a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80151ec:	4b99      	ldr	r3, [pc, #612]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d005      	beq.n	8015204 <HAL_RCC_OscConfig+0x328>
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	68db      	ldr	r3, [r3, #12]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d101      	bne.n	8015204 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8015200:	2301      	movs	r3, #1
 8015202:	e249      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015204:	4b93      	ldr	r3, [pc, #588]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015206:	685b      	ldr	r3, [r3, #4]
 8015208:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	691b      	ldr	r3, [r3, #16]
 8015210:	061b      	lsls	r3, r3, #24
 8015212:	4990      	ldr	r1, [pc, #576]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015214:	4313      	orrs	r3, r2
 8015216:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015218:	e040      	b.n	801529c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	68db      	ldr	r3, [r3, #12]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d023      	beq.n	801526a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015222:	4b8c      	ldr	r3, [pc, #560]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	4a8b      	ldr	r2, [pc, #556]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801522c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801522e:	f7fd fc6f 	bl	8012b10 <HAL_GetTick>
 8015232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015234:	e008      	b.n	8015248 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8015236:	f7fd fc6b 	bl	8012b10 <HAL_GetTick>
 801523a:	4602      	mov	r2, r0
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	1ad3      	subs	r3, r2, r3
 8015240:	2b02      	cmp	r3, #2
 8015242:	d901      	bls.n	8015248 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8015244:	2303      	movs	r3, #3
 8015246:	e227      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015248:	4b82      	ldr	r3, [pc, #520]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015250:	2b00      	cmp	r3, #0
 8015252:	d0f0      	beq.n	8015236 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015254:	4b7f      	ldr	r3, [pc, #508]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	691b      	ldr	r3, [r3, #16]
 8015260:	061b      	lsls	r3, r3, #24
 8015262:	497c      	ldr	r1, [pc, #496]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015264:	4313      	orrs	r3, r2
 8015266:	604b      	str	r3, [r1, #4]
 8015268:	e018      	b.n	801529c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801526a:	4b7a      	ldr	r3, [pc, #488]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	4a79      	ldr	r2, [pc, #484]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015276:	f7fd fc4b 	bl	8012b10 <HAL_GetTick>
 801527a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801527c:	e008      	b.n	8015290 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801527e:	f7fd fc47 	bl	8012b10 <HAL_GetTick>
 8015282:	4602      	mov	r2, r0
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	1ad3      	subs	r3, r2, r3
 8015288:	2b02      	cmp	r3, #2
 801528a:	d901      	bls.n	8015290 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 801528c:	2303      	movs	r3, #3
 801528e:	e203      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8015290:	4b70      	ldr	r3, [pc, #448]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015298:	2b00      	cmp	r3, #0
 801529a:	d1f0      	bne.n	801527e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	f003 0308 	and.w	r3, r3, #8
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d03c      	beq.n	8015322 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	695b      	ldr	r3, [r3, #20]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d01c      	beq.n	80152ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80152b0:	4b68      	ldr	r3, [pc, #416]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80152b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80152b6:	4a67      	ldr	r2, [pc, #412]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80152b8:	f043 0301 	orr.w	r3, r3, #1
 80152bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80152c0:	f7fd fc26 	bl	8012b10 <HAL_GetTick>
 80152c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80152c6:	e008      	b.n	80152da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80152c8:	f7fd fc22 	bl	8012b10 <HAL_GetTick>
 80152cc:	4602      	mov	r2, r0
 80152ce:	693b      	ldr	r3, [r7, #16]
 80152d0:	1ad3      	subs	r3, r2, r3
 80152d2:	2b02      	cmp	r3, #2
 80152d4:	d901      	bls.n	80152da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80152d6:	2303      	movs	r3, #3
 80152d8:	e1de      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80152da:	4b5e      	ldr	r3, [pc, #376]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80152dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80152e0:	f003 0302 	and.w	r3, r3, #2
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d0ef      	beq.n	80152c8 <HAL_RCC_OscConfig+0x3ec>
 80152e8:	e01b      	b.n	8015322 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80152ea:	4b5a      	ldr	r3, [pc, #360]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80152ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80152f0:	4a58      	ldr	r2, [pc, #352]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80152f2:	f023 0301 	bic.w	r3, r3, #1
 80152f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80152fa:	f7fd fc09 	bl	8012b10 <HAL_GetTick>
 80152fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8015300:	e008      	b.n	8015314 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015302:	f7fd fc05 	bl	8012b10 <HAL_GetTick>
 8015306:	4602      	mov	r2, r0
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	1ad3      	subs	r3, r2, r3
 801530c:	2b02      	cmp	r3, #2
 801530e:	d901      	bls.n	8015314 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8015310:	2303      	movs	r3, #3
 8015312:	e1c1      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8015314:	4b4f      	ldr	r3, [pc, #316]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801531a:	f003 0302 	and.w	r3, r3, #2
 801531e:	2b00      	cmp	r3, #0
 8015320:	d1ef      	bne.n	8015302 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	f003 0304 	and.w	r3, r3, #4
 801532a:	2b00      	cmp	r3, #0
 801532c:	f000 80a6 	beq.w	801547c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015330:	2300      	movs	r3, #0
 8015332:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8015334:	4b47      	ldr	r3, [pc, #284]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801533c:	2b00      	cmp	r3, #0
 801533e:	d10d      	bne.n	801535c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015340:	4b44      	ldr	r3, [pc, #272]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015344:	4a43      	ldr	r2, [pc, #268]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801534a:	6593      	str	r3, [r2, #88]	; 0x58
 801534c:	4b41      	ldr	r3, [pc, #260]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 801534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015354:	60bb      	str	r3, [r7, #8]
 8015356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015358:	2301      	movs	r3, #1
 801535a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801535c:	4b3e      	ldr	r3, [pc, #248]	; (8015458 <HAL_RCC_OscConfig+0x57c>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015364:	2b00      	cmp	r3, #0
 8015366:	d118      	bne.n	801539a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015368:	4b3b      	ldr	r3, [pc, #236]	; (8015458 <HAL_RCC_OscConfig+0x57c>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4a3a      	ldr	r2, [pc, #232]	; (8015458 <HAL_RCC_OscConfig+0x57c>)
 801536e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015372:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015374:	f7fd fbcc 	bl	8012b10 <HAL_GetTick>
 8015378:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801537a:	e008      	b.n	801538e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801537c:	f7fd fbc8 	bl	8012b10 <HAL_GetTick>
 8015380:	4602      	mov	r2, r0
 8015382:	693b      	ldr	r3, [r7, #16]
 8015384:	1ad3      	subs	r3, r2, r3
 8015386:	2b02      	cmp	r3, #2
 8015388:	d901      	bls.n	801538e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801538a:	2303      	movs	r3, #3
 801538c:	e184      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801538e:	4b32      	ldr	r3, [pc, #200]	; (8015458 <HAL_RCC_OscConfig+0x57c>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015396:	2b00      	cmp	r3, #0
 8015398:	d0f0      	beq.n	801537c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	689b      	ldr	r3, [r3, #8]
 801539e:	2b01      	cmp	r3, #1
 80153a0:	d108      	bne.n	80153b4 <HAL_RCC_OscConfig+0x4d8>
 80153a2:	4b2c      	ldr	r3, [pc, #176]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80153a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153a8:	4a2a      	ldr	r2, [pc, #168]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80153aa:	f043 0301 	orr.w	r3, r3, #1
 80153ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80153b2:	e024      	b.n	80153fe <HAL_RCC_OscConfig+0x522>
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	689b      	ldr	r3, [r3, #8]
 80153b8:	2b05      	cmp	r3, #5
 80153ba:	d110      	bne.n	80153de <HAL_RCC_OscConfig+0x502>
 80153bc:	4b25      	ldr	r3, [pc, #148]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80153be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153c2:	4a24      	ldr	r2, [pc, #144]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80153c4:	f043 0304 	orr.w	r3, r3, #4
 80153c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80153cc:	4b21      	ldr	r3, [pc, #132]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80153ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153d2:	4a20      	ldr	r2, [pc, #128]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80153d4:	f043 0301 	orr.w	r3, r3, #1
 80153d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80153dc:	e00f      	b.n	80153fe <HAL_RCC_OscConfig+0x522>
 80153de:	4b1d      	ldr	r3, [pc, #116]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80153e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153e4:	4a1b      	ldr	r2, [pc, #108]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80153e6:	f023 0301 	bic.w	r3, r3, #1
 80153ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80153ee:	4b19      	ldr	r3, [pc, #100]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80153f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153f4:	4a17      	ldr	r2, [pc, #92]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 80153f6:	f023 0304 	bic.w	r3, r3, #4
 80153fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	689b      	ldr	r3, [r3, #8]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d016      	beq.n	8015434 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015406:	f7fd fb83 	bl	8012b10 <HAL_GetTick>
 801540a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801540c:	e00a      	b.n	8015424 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801540e:	f7fd fb7f 	bl	8012b10 <HAL_GetTick>
 8015412:	4602      	mov	r2, r0
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	1ad3      	subs	r3, r2, r3
 8015418:	f241 3288 	movw	r2, #5000	; 0x1388
 801541c:	4293      	cmp	r3, r2
 801541e:	d901      	bls.n	8015424 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8015420:	2303      	movs	r3, #3
 8015422:	e139      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015424:	4b0b      	ldr	r3, [pc, #44]	; (8015454 <HAL_RCC_OscConfig+0x578>)
 8015426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801542a:	f003 0302 	and.w	r3, r3, #2
 801542e:	2b00      	cmp	r3, #0
 8015430:	d0ed      	beq.n	801540e <HAL_RCC_OscConfig+0x532>
 8015432:	e01a      	b.n	801546a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015434:	f7fd fb6c 	bl	8012b10 <HAL_GetTick>
 8015438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801543a:	e00f      	b.n	801545c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801543c:	f7fd fb68 	bl	8012b10 <HAL_GetTick>
 8015440:	4602      	mov	r2, r0
 8015442:	693b      	ldr	r3, [r7, #16]
 8015444:	1ad3      	subs	r3, r2, r3
 8015446:	f241 3288 	movw	r2, #5000	; 0x1388
 801544a:	4293      	cmp	r3, r2
 801544c:	d906      	bls.n	801545c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 801544e:	2303      	movs	r3, #3
 8015450:	e122      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
 8015452:	bf00      	nop
 8015454:	40021000 	.word	0x40021000
 8015458:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801545c:	4b90      	ldr	r3, [pc, #576]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 801545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015462:	f003 0302 	and.w	r3, r3, #2
 8015466:	2b00      	cmp	r3, #0
 8015468:	d1e8      	bne.n	801543c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801546a:	7ffb      	ldrb	r3, [r7, #31]
 801546c:	2b01      	cmp	r3, #1
 801546e:	d105      	bne.n	801547c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015470:	4b8b      	ldr	r3, [pc, #556]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015474:	4a8a      	ldr	r2, [pc, #552]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801547a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015480:	2b00      	cmp	r3, #0
 8015482:	f000 8108 	beq.w	8015696 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801548a:	2b02      	cmp	r3, #2
 801548c:	f040 80d0 	bne.w	8015630 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8015490:	4b83      	ldr	r3, [pc, #524]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8015496:	697b      	ldr	r3, [r7, #20]
 8015498:	f003 0203 	and.w	r2, r3, #3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154a0:	429a      	cmp	r2, r3
 80154a2:	d130      	bne.n	8015506 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154ae:	3b01      	subs	r3, #1
 80154b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80154b2:	429a      	cmp	r2, r3
 80154b4:	d127      	bne.n	8015506 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80154b6:	697b      	ldr	r3, [r7, #20]
 80154b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d11f      	bne.n	8015506 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80154cc:	687a      	ldr	r2, [r7, #4]
 80154ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80154d0:	2a07      	cmp	r2, #7
 80154d2:	bf14      	ite	ne
 80154d4:	2201      	movne	r2, #1
 80154d6:	2200      	moveq	r2, #0
 80154d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80154da:	4293      	cmp	r3, r2
 80154dc:	d113      	bne.n	8015506 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154e8:	085b      	lsrs	r3, r3, #1
 80154ea:	3b01      	subs	r3, #1
 80154ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d109      	bne.n	8015506 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154fc:	085b      	lsrs	r3, r3, #1
 80154fe:	3b01      	subs	r3, #1
 8015500:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8015502:	429a      	cmp	r2, r3
 8015504:	d06e      	beq.n	80155e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8015506:	69bb      	ldr	r3, [r7, #24]
 8015508:	2b0c      	cmp	r3, #12
 801550a:	d069      	beq.n	80155e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801550c:	4b64      	ldr	r3, [pc, #400]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015514:	2b00      	cmp	r3, #0
 8015516:	d105      	bne.n	8015524 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8015518:	4b61      	ldr	r3, [pc, #388]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015520:	2b00      	cmp	r3, #0
 8015522:	d001      	beq.n	8015528 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8015524:	2301      	movs	r3, #1
 8015526:	e0b7      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8015528:	4b5d      	ldr	r3, [pc, #372]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	4a5c      	ldr	r2, [pc, #368]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 801552e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015532:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8015534:	f7fd faec 	bl	8012b10 <HAL_GetTick>
 8015538:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801553a:	e008      	b.n	801554e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801553c:	f7fd fae8 	bl	8012b10 <HAL_GetTick>
 8015540:	4602      	mov	r2, r0
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	1ad3      	subs	r3, r2, r3
 8015546:	2b02      	cmp	r3, #2
 8015548:	d901      	bls.n	801554e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 801554a:	2303      	movs	r3, #3
 801554c:	e0a4      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801554e:	4b54      	ldr	r3, [pc, #336]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015556:	2b00      	cmp	r3, #0
 8015558:	d1f0      	bne.n	801553c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801555a:	4b51      	ldr	r3, [pc, #324]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 801555c:	68da      	ldr	r2, [r3, #12]
 801555e:	4b51      	ldr	r3, [pc, #324]	; (80156a4 <HAL_RCC_OscConfig+0x7c8>)
 8015560:	4013      	ands	r3, r2
 8015562:	687a      	ldr	r2, [r7, #4]
 8015564:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8015566:	687a      	ldr	r2, [r7, #4]
 8015568:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801556a:	3a01      	subs	r2, #1
 801556c:	0112      	lsls	r2, r2, #4
 801556e:	4311      	orrs	r1, r2
 8015570:	687a      	ldr	r2, [r7, #4]
 8015572:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8015574:	0212      	lsls	r2, r2, #8
 8015576:	4311      	orrs	r1, r2
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801557c:	0852      	lsrs	r2, r2, #1
 801557e:	3a01      	subs	r2, #1
 8015580:	0552      	lsls	r2, r2, #21
 8015582:	4311      	orrs	r1, r2
 8015584:	687a      	ldr	r2, [r7, #4]
 8015586:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8015588:	0852      	lsrs	r2, r2, #1
 801558a:	3a01      	subs	r2, #1
 801558c:	0652      	lsls	r2, r2, #25
 801558e:	4311      	orrs	r1, r2
 8015590:	687a      	ldr	r2, [r7, #4]
 8015592:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015594:	0912      	lsrs	r2, r2, #4
 8015596:	0452      	lsls	r2, r2, #17
 8015598:	430a      	orrs	r2, r1
 801559a:	4941      	ldr	r1, [pc, #260]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 801559c:	4313      	orrs	r3, r2
 801559e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80155a0:	4b3f      	ldr	r3, [pc, #252]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	4a3e      	ldr	r2, [pc, #248]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 80155a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80155aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80155ac:	4b3c      	ldr	r3, [pc, #240]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 80155ae:	68db      	ldr	r3, [r3, #12]
 80155b0:	4a3b      	ldr	r2, [pc, #236]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 80155b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80155b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80155b8:	f7fd faaa 	bl	8012b10 <HAL_GetTick>
 80155bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80155be:	e008      	b.n	80155d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80155c0:	f7fd faa6 	bl	8012b10 <HAL_GetTick>
 80155c4:	4602      	mov	r2, r0
 80155c6:	693b      	ldr	r3, [r7, #16]
 80155c8:	1ad3      	subs	r3, r2, r3
 80155ca:	2b02      	cmp	r3, #2
 80155cc:	d901      	bls.n	80155d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80155ce:	2303      	movs	r3, #3
 80155d0:	e062      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80155d2:	4b33      	ldr	r3, [pc, #204]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d0f0      	beq.n	80155c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80155de:	e05a      	b.n	8015696 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80155e0:	2301      	movs	r3, #1
 80155e2:	e059      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80155e4:	4b2e      	ldr	r3, [pc, #184]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d152      	bne.n	8015696 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80155f0:	4b2b      	ldr	r3, [pc, #172]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	4a2a      	ldr	r2, [pc, #168]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 80155f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80155fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80155fc:	4b28      	ldr	r3, [pc, #160]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	4a27      	ldr	r2, [pc, #156]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015606:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8015608:	f7fd fa82 	bl	8012b10 <HAL_GetTick>
 801560c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801560e:	e008      	b.n	8015622 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015610:	f7fd fa7e 	bl	8012b10 <HAL_GetTick>
 8015614:	4602      	mov	r2, r0
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	1ad3      	subs	r3, r2, r3
 801561a:	2b02      	cmp	r3, #2
 801561c:	d901      	bls.n	8015622 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 801561e:	2303      	movs	r3, #3
 8015620:	e03a      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8015622:	4b1f      	ldr	r3, [pc, #124]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801562a:	2b00      	cmp	r3, #0
 801562c:	d0f0      	beq.n	8015610 <HAL_RCC_OscConfig+0x734>
 801562e:	e032      	b.n	8015696 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8015630:	69bb      	ldr	r3, [r7, #24]
 8015632:	2b0c      	cmp	r3, #12
 8015634:	d02d      	beq.n	8015692 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015636:	4b1a      	ldr	r3, [pc, #104]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	4a19      	ldr	r2, [pc, #100]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 801563c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015640:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8015642:	4b17      	ldr	r3, [pc, #92]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 801564a:	2b00      	cmp	r3, #0
 801564c:	d105      	bne.n	801565a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801564e:	4b14      	ldr	r3, [pc, #80]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015650:	68db      	ldr	r3, [r3, #12]
 8015652:	4a13      	ldr	r2, [pc, #76]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015654:	f023 0303 	bic.w	r3, r3, #3
 8015658:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801565a:	4b11      	ldr	r3, [pc, #68]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 801565c:	68db      	ldr	r3, [r3, #12]
 801565e:	4a10      	ldr	r2, [pc, #64]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015660:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8015664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015668:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801566a:	f7fd fa51 	bl	8012b10 <HAL_GetTick>
 801566e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015670:	e008      	b.n	8015684 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015672:	f7fd fa4d 	bl	8012b10 <HAL_GetTick>
 8015676:	4602      	mov	r2, r0
 8015678:	693b      	ldr	r3, [r7, #16]
 801567a:	1ad3      	subs	r3, r2, r3
 801567c:	2b02      	cmp	r3, #2
 801567e:	d901      	bls.n	8015684 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8015680:	2303      	movs	r3, #3
 8015682:	e009      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015684:	4b06      	ldr	r3, [pc, #24]	; (80156a0 <HAL_RCC_OscConfig+0x7c4>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801568c:	2b00      	cmp	r3, #0
 801568e:	d1f0      	bne.n	8015672 <HAL_RCC_OscConfig+0x796>
 8015690:	e001      	b.n	8015696 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8015692:	2301      	movs	r3, #1
 8015694:	e000      	b.n	8015698 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8015696:	2300      	movs	r3, #0
}
 8015698:	4618      	mov	r0, r3
 801569a:	3720      	adds	r7, #32
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	40021000 	.word	0x40021000
 80156a4:	f99d808c 	.word	0xf99d808c

080156a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b084      	sub	sp, #16
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d101      	bne.n	80156bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80156b8:	2301      	movs	r3, #1
 80156ba:	e0c8      	b.n	801584e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80156bc:	4b66      	ldr	r3, [pc, #408]	; (8015858 <HAL_RCC_ClockConfig+0x1b0>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	f003 0307 	and.w	r3, r3, #7
 80156c4:	683a      	ldr	r2, [r7, #0]
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d910      	bls.n	80156ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80156ca:	4b63      	ldr	r3, [pc, #396]	; (8015858 <HAL_RCC_ClockConfig+0x1b0>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	f023 0207 	bic.w	r2, r3, #7
 80156d2:	4961      	ldr	r1, [pc, #388]	; (8015858 <HAL_RCC_ClockConfig+0x1b0>)
 80156d4:	683b      	ldr	r3, [r7, #0]
 80156d6:	4313      	orrs	r3, r2
 80156d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80156da:	4b5f      	ldr	r3, [pc, #380]	; (8015858 <HAL_RCC_ClockConfig+0x1b0>)
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	f003 0307 	and.w	r3, r3, #7
 80156e2:	683a      	ldr	r2, [r7, #0]
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d001      	beq.n	80156ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80156e8:	2301      	movs	r3, #1
 80156ea:	e0b0      	b.n	801584e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	f003 0301 	and.w	r3, r3, #1
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d04c      	beq.n	8015792 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	685b      	ldr	r3, [r3, #4]
 80156fc:	2b03      	cmp	r3, #3
 80156fe:	d107      	bne.n	8015710 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8015700:	4b56      	ldr	r3, [pc, #344]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015708:	2b00      	cmp	r3, #0
 801570a:	d121      	bne.n	8015750 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 801570c:	2301      	movs	r3, #1
 801570e:	e09e      	b.n	801584e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	685b      	ldr	r3, [r3, #4]
 8015714:	2b02      	cmp	r3, #2
 8015716:	d107      	bne.n	8015728 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015718:	4b50      	ldr	r3, [pc, #320]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015720:	2b00      	cmp	r3, #0
 8015722:	d115      	bne.n	8015750 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8015724:	2301      	movs	r3, #1
 8015726:	e092      	b.n	801584e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	685b      	ldr	r3, [r3, #4]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d107      	bne.n	8015740 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015730:	4b4a      	ldr	r3, [pc, #296]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	f003 0302 	and.w	r3, r3, #2
 8015738:	2b00      	cmp	r3, #0
 801573a:	d109      	bne.n	8015750 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801573c:	2301      	movs	r3, #1
 801573e:	e086      	b.n	801584e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015740:	4b46      	ldr	r3, [pc, #280]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015748:	2b00      	cmp	r3, #0
 801574a:	d101      	bne.n	8015750 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801574c:	2301      	movs	r3, #1
 801574e:	e07e      	b.n	801584e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8015750:	4b42      	ldr	r3, [pc, #264]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 8015752:	689b      	ldr	r3, [r3, #8]
 8015754:	f023 0203 	bic.w	r2, r3, #3
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	685b      	ldr	r3, [r3, #4]
 801575c:	493f      	ldr	r1, [pc, #252]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 801575e:	4313      	orrs	r3, r2
 8015760:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015762:	f7fd f9d5 	bl	8012b10 <HAL_GetTick>
 8015766:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015768:	e00a      	b.n	8015780 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801576a:	f7fd f9d1 	bl	8012b10 <HAL_GetTick>
 801576e:	4602      	mov	r2, r0
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	1ad3      	subs	r3, r2, r3
 8015774:	f241 3288 	movw	r2, #5000	; 0x1388
 8015778:	4293      	cmp	r3, r2
 801577a:	d901      	bls.n	8015780 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 801577c:	2303      	movs	r3, #3
 801577e:	e066      	b.n	801584e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015780:	4b36      	ldr	r3, [pc, #216]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 8015782:	689b      	ldr	r3, [r3, #8]
 8015784:	f003 020c 	and.w	r2, r3, #12
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	685b      	ldr	r3, [r3, #4]
 801578c:	009b      	lsls	r3, r3, #2
 801578e:	429a      	cmp	r2, r3
 8015790:	d1eb      	bne.n	801576a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	f003 0302 	and.w	r3, r3, #2
 801579a:	2b00      	cmp	r3, #0
 801579c:	d008      	beq.n	80157b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801579e:	4b2f      	ldr	r3, [pc, #188]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 80157a0:	689b      	ldr	r3, [r3, #8]
 80157a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	689b      	ldr	r3, [r3, #8]
 80157aa:	492c      	ldr	r1, [pc, #176]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 80157ac:	4313      	orrs	r3, r2
 80157ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80157b0:	4b29      	ldr	r3, [pc, #164]	; (8015858 <HAL_RCC_ClockConfig+0x1b0>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	f003 0307 	and.w	r3, r3, #7
 80157b8:	683a      	ldr	r2, [r7, #0]
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d210      	bcs.n	80157e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80157be:	4b26      	ldr	r3, [pc, #152]	; (8015858 <HAL_RCC_ClockConfig+0x1b0>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	f023 0207 	bic.w	r2, r3, #7
 80157c6:	4924      	ldr	r1, [pc, #144]	; (8015858 <HAL_RCC_ClockConfig+0x1b0>)
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	4313      	orrs	r3, r2
 80157cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80157ce:	4b22      	ldr	r3, [pc, #136]	; (8015858 <HAL_RCC_ClockConfig+0x1b0>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	f003 0307 	and.w	r3, r3, #7
 80157d6:	683a      	ldr	r2, [r7, #0]
 80157d8:	429a      	cmp	r2, r3
 80157da:	d001      	beq.n	80157e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80157dc:	2301      	movs	r3, #1
 80157de:	e036      	b.n	801584e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	f003 0304 	and.w	r3, r3, #4
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d008      	beq.n	80157fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80157ec:	4b1b      	ldr	r3, [pc, #108]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 80157ee:	689b      	ldr	r3, [r3, #8]
 80157f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	68db      	ldr	r3, [r3, #12]
 80157f8:	4918      	ldr	r1, [pc, #96]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 80157fa:	4313      	orrs	r3, r2
 80157fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	f003 0308 	and.w	r3, r3, #8
 8015806:	2b00      	cmp	r3, #0
 8015808:	d009      	beq.n	801581e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801580a:	4b14      	ldr	r3, [pc, #80]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 801580c:	689b      	ldr	r3, [r3, #8]
 801580e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	691b      	ldr	r3, [r3, #16]
 8015816:	00db      	lsls	r3, r3, #3
 8015818:	4910      	ldr	r1, [pc, #64]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 801581a:	4313      	orrs	r3, r2
 801581c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801581e:	f000 f825 	bl	801586c <HAL_RCC_GetSysClockFreq>
 8015822:	4602      	mov	r2, r0
 8015824:	4b0d      	ldr	r3, [pc, #52]	; (801585c <HAL_RCC_ClockConfig+0x1b4>)
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	091b      	lsrs	r3, r3, #4
 801582a:	f003 030f 	and.w	r3, r3, #15
 801582e:	490c      	ldr	r1, [pc, #48]	; (8015860 <HAL_RCC_ClockConfig+0x1b8>)
 8015830:	5ccb      	ldrb	r3, [r1, r3]
 8015832:	f003 031f 	and.w	r3, r3, #31
 8015836:	fa22 f303 	lsr.w	r3, r2, r3
 801583a:	4a0a      	ldr	r2, [pc, #40]	; (8015864 <HAL_RCC_ClockConfig+0x1bc>)
 801583c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801583e:	4b0a      	ldr	r3, [pc, #40]	; (8015868 <HAL_RCC_ClockConfig+0x1c0>)
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	4618      	mov	r0, r3
 8015844:	f7fd f914 	bl	8012a70 <HAL_InitTick>
 8015848:	4603      	mov	r3, r0
 801584a:	72fb      	strb	r3, [r7, #11]

  return status;
 801584c:	7afb      	ldrb	r3, [r7, #11]
}
 801584e:	4618      	mov	r0, r3
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop
 8015858:	40022000 	.word	0x40022000
 801585c:	40021000 	.word	0x40021000
 8015860:	08019eb0 	.word	0x08019eb0
 8015864:	20000004 	.word	0x20000004
 8015868:	20000014 	.word	0x20000014

0801586c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801586c:	b480      	push	{r7}
 801586e:	b089      	sub	sp, #36	; 0x24
 8015870:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8015872:	2300      	movs	r3, #0
 8015874:	61fb      	str	r3, [r7, #28]
 8015876:	2300      	movs	r3, #0
 8015878:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801587a:	4b3e      	ldr	r3, [pc, #248]	; (8015974 <HAL_RCC_GetSysClockFreq+0x108>)
 801587c:	689b      	ldr	r3, [r3, #8]
 801587e:	f003 030c 	and.w	r3, r3, #12
 8015882:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015884:	4b3b      	ldr	r3, [pc, #236]	; (8015974 <HAL_RCC_GetSysClockFreq+0x108>)
 8015886:	68db      	ldr	r3, [r3, #12]
 8015888:	f003 0303 	and.w	r3, r3, #3
 801588c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801588e:	693b      	ldr	r3, [r7, #16]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d005      	beq.n	80158a0 <HAL_RCC_GetSysClockFreq+0x34>
 8015894:	693b      	ldr	r3, [r7, #16]
 8015896:	2b0c      	cmp	r3, #12
 8015898:	d121      	bne.n	80158de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	2b01      	cmp	r3, #1
 801589e:	d11e      	bne.n	80158de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80158a0:	4b34      	ldr	r3, [pc, #208]	; (8015974 <HAL_RCC_GetSysClockFreq+0x108>)
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	f003 0308 	and.w	r3, r3, #8
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d107      	bne.n	80158bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80158ac:	4b31      	ldr	r3, [pc, #196]	; (8015974 <HAL_RCC_GetSysClockFreq+0x108>)
 80158ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80158b2:	0a1b      	lsrs	r3, r3, #8
 80158b4:	f003 030f 	and.w	r3, r3, #15
 80158b8:	61fb      	str	r3, [r7, #28]
 80158ba:	e005      	b.n	80158c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80158bc:	4b2d      	ldr	r3, [pc, #180]	; (8015974 <HAL_RCC_GetSysClockFreq+0x108>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	091b      	lsrs	r3, r3, #4
 80158c2:	f003 030f 	and.w	r3, r3, #15
 80158c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80158c8:	4a2b      	ldr	r2, [pc, #172]	; (8015978 <HAL_RCC_GetSysClockFreq+0x10c>)
 80158ca:	69fb      	ldr	r3, [r7, #28]
 80158cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d10d      	bne.n	80158f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80158d8:	69fb      	ldr	r3, [r7, #28]
 80158da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80158dc:	e00a      	b.n	80158f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	2b04      	cmp	r3, #4
 80158e2:	d102      	bne.n	80158ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80158e4:	4b25      	ldr	r3, [pc, #148]	; (801597c <HAL_RCC_GetSysClockFreq+0x110>)
 80158e6:	61bb      	str	r3, [r7, #24]
 80158e8:	e004      	b.n	80158f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	2b08      	cmp	r3, #8
 80158ee:	d101      	bne.n	80158f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80158f0:	4b23      	ldr	r3, [pc, #140]	; (8015980 <HAL_RCC_GetSysClockFreq+0x114>)
 80158f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80158f4:	693b      	ldr	r3, [r7, #16]
 80158f6:	2b0c      	cmp	r3, #12
 80158f8:	d134      	bne.n	8015964 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80158fa:	4b1e      	ldr	r3, [pc, #120]	; (8015974 <HAL_RCC_GetSysClockFreq+0x108>)
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	f003 0303 	and.w	r3, r3, #3
 8015902:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8015904:	68bb      	ldr	r3, [r7, #8]
 8015906:	2b02      	cmp	r3, #2
 8015908:	d003      	beq.n	8015912 <HAL_RCC_GetSysClockFreq+0xa6>
 801590a:	68bb      	ldr	r3, [r7, #8]
 801590c:	2b03      	cmp	r3, #3
 801590e:	d003      	beq.n	8015918 <HAL_RCC_GetSysClockFreq+0xac>
 8015910:	e005      	b.n	801591e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8015912:	4b1a      	ldr	r3, [pc, #104]	; (801597c <HAL_RCC_GetSysClockFreq+0x110>)
 8015914:	617b      	str	r3, [r7, #20]
      break;
 8015916:	e005      	b.n	8015924 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8015918:	4b19      	ldr	r3, [pc, #100]	; (8015980 <HAL_RCC_GetSysClockFreq+0x114>)
 801591a:	617b      	str	r3, [r7, #20]
      break;
 801591c:	e002      	b.n	8015924 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801591e:	69fb      	ldr	r3, [r7, #28]
 8015920:	617b      	str	r3, [r7, #20]
      break;
 8015922:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8015924:	4b13      	ldr	r3, [pc, #76]	; (8015974 <HAL_RCC_GetSysClockFreq+0x108>)
 8015926:	68db      	ldr	r3, [r3, #12]
 8015928:	091b      	lsrs	r3, r3, #4
 801592a:	f003 0307 	and.w	r3, r3, #7
 801592e:	3301      	adds	r3, #1
 8015930:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8015932:	4b10      	ldr	r3, [pc, #64]	; (8015974 <HAL_RCC_GetSysClockFreq+0x108>)
 8015934:	68db      	ldr	r3, [r3, #12]
 8015936:	0a1b      	lsrs	r3, r3, #8
 8015938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801593c:	697a      	ldr	r2, [r7, #20]
 801593e:	fb02 f203 	mul.w	r2, r2, r3
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	fbb2 f3f3 	udiv	r3, r2, r3
 8015948:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801594a:	4b0a      	ldr	r3, [pc, #40]	; (8015974 <HAL_RCC_GetSysClockFreq+0x108>)
 801594c:	68db      	ldr	r3, [r3, #12]
 801594e:	0e5b      	lsrs	r3, r3, #25
 8015950:	f003 0303 	and.w	r3, r3, #3
 8015954:	3301      	adds	r3, #1
 8015956:	005b      	lsls	r3, r3, #1
 8015958:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801595a:	697a      	ldr	r2, [r7, #20]
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015962:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8015964:	69bb      	ldr	r3, [r7, #24]
}
 8015966:	4618      	mov	r0, r3
 8015968:	3724      	adds	r7, #36	; 0x24
 801596a:	46bd      	mov	sp, r7
 801596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015970:	4770      	bx	lr
 8015972:	bf00      	nop
 8015974:	40021000 	.word	0x40021000
 8015978:	08019ec8 	.word	0x08019ec8
 801597c:	00f42400 	.word	0x00f42400
 8015980:	007a1200 	.word	0x007a1200

08015984 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015984:	b480      	push	{r7}
 8015986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015988:	4b03      	ldr	r3, [pc, #12]	; (8015998 <HAL_RCC_GetHCLKFreq+0x14>)
 801598a:	681b      	ldr	r3, [r3, #0]
}
 801598c:	4618      	mov	r0, r3
 801598e:	46bd      	mov	sp, r7
 8015990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015994:	4770      	bx	lr
 8015996:	bf00      	nop
 8015998:	20000004 	.word	0x20000004

0801599c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80159a0:	f7ff fff0 	bl	8015984 <HAL_RCC_GetHCLKFreq>
 80159a4:	4602      	mov	r2, r0
 80159a6:	4b06      	ldr	r3, [pc, #24]	; (80159c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80159a8:	689b      	ldr	r3, [r3, #8]
 80159aa:	0a1b      	lsrs	r3, r3, #8
 80159ac:	f003 0307 	and.w	r3, r3, #7
 80159b0:	4904      	ldr	r1, [pc, #16]	; (80159c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80159b2:	5ccb      	ldrb	r3, [r1, r3]
 80159b4:	f003 031f 	and.w	r3, r3, #31
 80159b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80159bc:	4618      	mov	r0, r3
 80159be:	bd80      	pop	{r7, pc}
 80159c0:	40021000 	.word	0x40021000
 80159c4:	08019ec0 	.word	0x08019ec0

080159c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80159cc:	f7ff ffda 	bl	8015984 <HAL_RCC_GetHCLKFreq>
 80159d0:	4602      	mov	r2, r0
 80159d2:	4b06      	ldr	r3, [pc, #24]	; (80159ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80159d4:	689b      	ldr	r3, [r3, #8]
 80159d6:	0adb      	lsrs	r3, r3, #11
 80159d8:	f003 0307 	and.w	r3, r3, #7
 80159dc:	4904      	ldr	r1, [pc, #16]	; (80159f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80159de:	5ccb      	ldrb	r3, [r1, r3]
 80159e0:	f003 031f 	and.w	r3, r3, #31
 80159e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80159e8:	4618      	mov	r0, r3
 80159ea:	bd80      	pop	{r7, pc}
 80159ec:	40021000 	.word	0x40021000
 80159f0:	08019ec0 	.word	0x08019ec0

080159f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b086      	sub	sp, #24
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80159fc:	2300      	movs	r3, #0
 80159fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8015a00:	4b2a      	ldr	r3, [pc, #168]	; (8015aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d003      	beq.n	8015a14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8015a0c:	f7ff fa02 	bl	8014e14 <HAL_PWREx_GetVoltageRange>
 8015a10:	6178      	str	r0, [r7, #20]
 8015a12:	e014      	b.n	8015a3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8015a14:	4b25      	ldr	r3, [pc, #148]	; (8015aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a18:	4a24      	ldr	r2, [pc, #144]	; (8015aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8015a20:	4b22      	ldr	r3, [pc, #136]	; (8015aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015a28:	60fb      	str	r3, [r7, #12]
 8015a2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8015a2c:	f7ff f9f2 	bl	8014e14 <HAL_PWREx_GetVoltageRange>
 8015a30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8015a32:	4b1e      	ldr	r3, [pc, #120]	; (8015aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a36:	4a1d      	ldr	r2, [pc, #116]	; (8015aac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8015a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a44:	d10b      	bne.n	8015a5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2b80      	cmp	r3, #128	; 0x80
 8015a4a:	d919      	bls.n	8015a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2ba0      	cmp	r3, #160	; 0xa0
 8015a50:	d902      	bls.n	8015a58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8015a52:	2302      	movs	r3, #2
 8015a54:	613b      	str	r3, [r7, #16]
 8015a56:	e013      	b.n	8015a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8015a58:	2301      	movs	r3, #1
 8015a5a:	613b      	str	r3, [r7, #16]
 8015a5c:	e010      	b.n	8015a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2b80      	cmp	r3, #128	; 0x80
 8015a62:	d902      	bls.n	8015a6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8015a64:	2303      	movs	r3, #3
 8015a66:	613b      	str	r3, [r7, #16]
 8015a68:	e00a      	b.n	8015a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2b80      	cmp	r3, #128	; 0x80
 8015a6e:	d102      	bne.n	8015a76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8015a70:	2302      	movs	r3, #2
 8015a72:	613b      	str	r3, [r7, #16]
 8015a74:	e004      	b.n	8015a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2b70      	cmp	r3, #112	; 0x70
 8015a7a:	d101      	bne.n	8015a80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8015a80:	4b0b      	ldr	r3, [pc, #44]	; (8015ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	f023 0207 	bic.w	r2, r3, #7
 8015a88:	4909      	ldr	r1, [pc, #36]	; (8015ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8015a8a:	693b      	ldr	r3, [r7, #16]
 8015a8c:	4313      	orrs	r3, r2
 8015a8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8015a90:	4b07      	ldr	r3, [pc, #28]	; (8015ab0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	f003 0307 	and.w	r3, r3, #7
 8015a98:	693a      	ldr	r2, [r7, #16]
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d001      	beq.n	8015aa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8015a9e:	2301      	movs	r3, #1
 8015aa0:	e000      	b.n	8015aa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8015aa2:	2300      	movs	r3, #0
}
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	3718      	adds	r7, #24
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bd80      	pop	{r7, pc}
 8015aac:	40021000 	.word	0x40021000
 8015ab0:	40022000 	.word	0x40022000

08015ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b086      	sub	sp, #24
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8015abc:	2300      	movs	r3, #0
 8015abe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d041      	beq.n	8015b54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015ad4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8015ad8:	d02a      	beq.n	8015b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8015ada:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8015ade:	d824      	bhi.n	8015b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8015ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015ae4:	d008      	beq.n	8015af8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8015ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015aea:	d81e      	bhi.n	8015b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d00a      	beq.n	8015b06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8015af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015af4:	d010      	beq.n	8015b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8015af6:	e018      	b.n	8015b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8015af8:	4b86      	ldr	r3, [pc, #536]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015afa:	68db      	ldr	r3, [r3, #12]
 8015afc:	4a85      	ldr	r2, [pc, #532]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015b02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8015b04:	e015      	b.n	8015b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	3304      	adds	r3, #4
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f000 fabb 	bl	8016088 <RCCEx_PLLSAI1_Config>
 8015b12:	4603      	mov	r3, r0
 8015b14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8015b16:	e00c      	b.n	8015b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	3320      	adds	r3, #32
 8015b1c:	2100      	movs	r1, #0
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f000 fba6 	bl	8016270 <RCCEx_PLLSAI2_Config>
 8015b24:	4603      	mov	r3, r0
 8015b26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8015b28:	e003      	b.n	8015b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	74fb      	strb	r3, [r7, #19]
      break;
 8015b2e:	e000      	b.n	8015b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8015b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015b32:	7cfb      	ldrb	r3, [r7, #19]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d10b      	bne.n	8015b50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015b38:	4b76      	ldr	r3, [pc, #472]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015b3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015b46:	4973      	ldr	r1, [pc, #460]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015b48:	4313      	orrs	r3, r2
 8015b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8015b4e:	e001      	b.n	8015b54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b50:	7cfb      	ldrb	r3, [r7, #19]
 8015b52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d041      	beq.n	8015be4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015b64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8015b68:	d02a      	beq.n	8015bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8015b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8015b6e:	d824      	bhi.n	8015bba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8015b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015b74:	d008      	beq.n	8015b88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8015b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015b7a:	d81e      	bhi.n	8015bba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d00a      	beq.n	8015b96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8015b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015b84:	d010      	beq.n	8015ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8015b86:	e018      	b.n	8015bba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8015b88:	4b62      	ldr	r3, [pc, #392]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015b8a:	68db      	ldr	r3, [r3, #12]
 8015b8c:	4a61      	ldr	r2, [pc, #388]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015b92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8015b94:	e015      	b.n	8015bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	3304      	adds	r3, #4
 8015b9a:	2100      	movs	r1, #0
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f000 fa73 	bl	8016088 <RCCEx_PLLSAI1_Config>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8015ba6:	e00c      	b.n	8015bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	3320      	adds	r3, #32
 8015bac:	2100      	movs	r1, #0
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f000 fb5e 	bl	8016270 <RCCEx_PLLSAI2_Config>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8015bb8:	e003      	b.n	8015bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015bba:	2301      	movs	r3, #1
 8015bbc:	74fb      	strb	r3, [r7, #19]
      break;
 8015bbe:	e000      	b.n	8015bc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8015bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015bc2:	7cfb      	ldrb	r3, [r7, #19]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d10b      	bne.n	8015be0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8015bc8:	4b52      	ldr	r3, [pc, #328]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015bce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015bd6:	494f      	ldr	r1, [pc, #316]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015bd8:	4313      	orrs	r3, r2
 8015bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8015bde:	e001      	b.n	8015be4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015be0:	7cfb      	ldrb	r3, [r7, #19]
 8015be2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	f000 80a0 	beq.w	8015d32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8015bf6:	4b47      	ldr	r3, [pc, #284]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d101      	bne.n	8015c06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8015c02:	2301      	movs	r3, #1
 8015c04:	e000      	b.n	8015c08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8015c06:	2300      	movs	r3, #0
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d00d      	beq.n	8015c28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015c0c:	4b41      	ldr	r3, [pc, #260]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c10:	4a40      	ldr	r2, [pc, #256]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015c16:	6593      	str	r3, [r2, #88]	; 0x58
 8015c18:	4b3e      	ldr	r3, [pc, #248]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c20:	60bb      	str	r3, [r7, #8]
 8015c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015c24:	2301      	movs	r3, #1
 8015c26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015c28:	4b3b      	ldr	r3, [pc, #236]	; (8015d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	4a3a      	ldr	r2, [pc, #232]	; (8015d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8015c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015c32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015c34:	f7fc ff6c 	bl	8012b10 <HAL_GetTick>
 8015c38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8015c3a:	e009      	b.n	8015c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015c3c:	f7fc ff68 	bl	8012b10 <HAL_GetTick>
 8015c40:	4602      	mov	r2, r0
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	1ad3      	subs	r3, r2, r3
 8015c46:	2b02      	cmp	r3, #2
 8015c48:	d902      	bls.n	8015c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8015c4a:	2303      	movs	r3, #3
 8015c4c:	74fb      	strb	r3, [r7, #19]
        break;
 8015c4e:	e005      	b.n	8015c5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8015c50:	4b31      	ldr	r3, [pc, #196]	; (8015d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d0ef      	beq.n	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8015c5c:	7cfb      	ldrb	r3, [r7, #19]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d15c      	bne.n	8015d1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8015c62:	4b2c      	ldr	r3, [pc, #176]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015c6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d01f      	beq.n	8015cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015c7a:	697a      	ldr	r2, [r7, #20]
 8015c7c:	429a      	cmp	r2, r3
 8015c7e:	d019      	beq.n	8015cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8015c80:	4b24      	ldr	r3, [pc, #144]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015c8c:	4b21      	ldr	r3, [pc, #132]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015c92:	4a20      	ldr	r2, [pc, #128]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015c9c:	4b1d      	ldr	r3, [pc, #116]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ca2:	4a1c      	ldr	r2, [pc, #112]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8015cac:	4a19      	ldr	r2, [pc, #100]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	f003 0301 	and.w	r3, r3, #1
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d016      	beq.n	8015cec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015cbe:	f7fc ff27 	bl	8012b10 <HAL_GetTick>
 8015cc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015cc4:	e00b      	b.n	8015cde <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015cc6:	f7fc ff23 	bl	8012b10 <HAL_GetTick>
 8015cca:	4602      	mov	r2, r0
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	1ad3      	subs	r3, r2, r3
 8015cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8015cd4:	4293      	cmp	r3, r2
 8015cd6:	d902      	bls.n	8015cde <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8015cd8:	2303      	movs	r3, #3
 8015cda:	74fb      	strb	r3, [r7, #19]
            break;
 8015cdc:	e006      	b.n	8015cec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015cde:	4b0d      	ldr	r3, [pc, #52]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ce4:	f003 0302 	and.w	r3, r3, #2
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d0ec      	beq.n	8015cc6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8015cec:	7cfb      	ldrb	r3, [r7, #19]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d10c      	bne.n	8015d0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015cf2:	4b08      	ldr	r3, [pc, #32]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015d02:	4904      	ldr	r1, [pc, #16]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8015d04:	4313      	orrs	r3, r2
 8015d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8015d0a:	e009      	b.n	8015d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015d0c:	7cfb      	ldrb	r3, [r7, #19]
 8015d0e:	74bb      	strb	r3, [r7, #18]
 8015d10:	e006      	b.n	8015d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8015d12:	bf00      	nop
 8015d14:	40021000 	.word	0x40021000
 8015d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d1c:	7cfb      	ldrb	r3, [r7, #19]
 8015d1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8015d20:	7c7b      	ldrb	r3, [r7, #17]
 8015d22:	2b01      	cmp	r3, #1
 8015d24:	d105      	bne.n	8015d32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015d26:	4b9e      	ldr	r3, [pc, #632]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d2a:	4a9d      	ldr	r2, [pc, #628]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015d30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	f003 0301 	and.w	r3, r3, #1
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d00a      	beq.n	8015d54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015d3e:	4b98      	ldr	r3, [pc, #608]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015d44:	f023 0203 	bic.w	r2, r3, #3
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d4c:	4994      	ldr	r1, [pc, #592]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015d4e:	4313      	orrs	r3, r2
 8015d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	f003 0302 	and.w	r3, r3, #2
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d00a      	beq.n	8015d76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015d60:	4b8f      	ldr	r3, [pc, #572]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015d66:	f023 020c 	bic.w	r2, r3, #12
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d6e:	498c      	ldr	r1, [pc, #560]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015d70:	4313      	orrs	r3, r2
 8015d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	f003 0304 	and.w	r3, r3, #4
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d00a      	beq.n	8015d98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8015d82:	4b87      	ldr	r3, [pc, #540]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015d88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d90:	4983      	ldr	r1, [pc, #524]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015d92:	4313      	orrs	r3, r2
 8015d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	f003 0308 	and.w	r3, r3, #8
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d00a      	beq.n	8015dba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8015da4:	4b7e      	ldr	r3, [pc, #504]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015daa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015db2:	497b      	ldr	r1, [pc, #492]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015db4:	4313      	orrs	r3, r2
 8015db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	f003 0310 	and.w	r3, r3, #16
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d00a      	beq.n	8015ddc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8015dc6:	4b76      	ldr	r3, [pc, #472]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015dd4:	4972      	ldr	r1, [pc, #456]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015dd6:	4313      	orrs	r3, r2
 8015dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	f003 0320 	and.w	r3, r3, #32
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d00a      	beq.n	8015dfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015de8:	4b6d      	ldr	r3, [pc, #436]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015df6:	496a      	ldr	r1, [pc, #424]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015df8:	4313      	orrs	r3, r2
 8015dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d00a      	beq.n	8015e20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015e0a:	4b65      	ldr	r3, [pc, #404]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015e10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015e18:	4961      	ldr	r1, [pc, #388]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015e1a:	4313      	orrs	r3, r2
 8015e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d00a      	beq.n	8015e42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8015e2c:	4b5c      	ldr	r3, [pc, #368]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015e3a:	4959      	ldr	r1, [pc, #356]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015e3c:	4313      	orrs	r3, r2
 8015e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d00a      	beq.n	8015e64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015e4e:	4b54      	ldr	r3, [pc, #336]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015e54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e5c:	4950      	ldr	r1, [pc, #320]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015e5e:	4313      	orrs	r3, r2
 8015e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d00a      	beq.n	8015e86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8015e70:	4b4b      	ldr	r3, [pc, #300]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015e76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e7e:	4948      	ldr	r1, [pc, #288]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015e80:	4313      	orrs	r3, r2
 8015e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d00a      	beq.n	8015ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015e92:	4b43      	ldr	r3, [pc, #268]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ea0:	493f      	ldr	r1, [pc, #252]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015ea2:	4313      	orrs	r3, r2
 8015ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d028      	beq.n	8015f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015eb4:	4b3a      	ldr	r3, [pc, #232]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015eba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ec2:	4937      	ldr	r1, [pc, #220]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015ec4:	4313      	orrs	r3, r2
 8015ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015ed2:	d106      	bne.n	8015ee2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015ed4:	4b32      	ldr	r3, [pc, #200]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015ed6:	68db      	ldr	r3, [r3, #12]
 8015ed8:	4a31      	ldr	r2, [pc, #196]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015ede:	60d3      	str	r3, [r2, #12]
 8015ee0:	e011      	b.n	8015f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015eea:	d10c      	bne.n	8015f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	3304      	adds	r3, #4
 8015ef0:	2101      	movs	r1, #1
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	f000 f8c8 	bl	8016088 <RCCEx_PLLSAI1_Config>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8015efc:	7cfb      	ldrb	r3, [r7, #19]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d001      	beq.n	8015f06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8015f02:	7cfb      	ldrb	r3, [r7, #19]
 8015f04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d028      	beq.n	8015f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8015f12:	4b23      	ldr	r3, [pc, #140]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015f18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f20:	491f      	ldr	r1, [pc, #124]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015f22:	4313      	orrs	r3, r2
 8015f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015f30:	d106      	bne.n	8015f40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015f32:	4b1b      	ldr	r3, [pc, #108]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015f34:	68db      	ldr	r3, [r3, #12]
 8015f36:	4a1a      	ldr	r2, [pc, #104]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015f38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015f3c:	60d3      	str	r3, [r2, #12]
 8015f3e:	e011      	b.n	8015f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015f48:	d10c      	bne.n	8015f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	3304      	adds	r3, #4
 8015f4e:	2101      	movs	r1, #1
 8015f50:	4618      	mov	r0, r3
 8015f52:	f000 f899 	bl	8016088 <RCCEx_PLLSAI1_Config>
 8015f56:	4603      	mov	r3, r0
 8015f58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8015f5a:	7cfb      	ldrb	r3, [r7, #19]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d001      	beq.n	8015f64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8015f60:	7cfb      	ldrb	r3, [r7, #19]
 8015f62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d02b      	beq.n	8015fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8015f70:	4b0b      	ldr	r3, [pc, #44]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015f76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f7e:	4908      	ldr	r1, [pc, #32]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015f80:	4313      	orrs	r3, r2
 8015f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015f8e:	d109      	bne.n	8015fa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015f90:	4b03      	ldr	r3, [pc, #12]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015f92:	68db      	ldr	r3, [r3, #12]
 8015f94:	4a02      	ldr	r2, [pc, #8]	; (8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8015f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015f9a:	60d3      	str	r3, [r2, #12]
 8015f9c:	e014      	b.n	8015fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8015f9e:	bf00      	nop
 8015fa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015fac:	d10c      	bne.n	8015fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	3304      	adds	r3, #4
 8015fb2:	2101      	movs	r1, #1
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f000 f867 	bl	8016088 <RCCEx_PLLSAI1_Config>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8015fbe:	7cfb      	ldrb	r3, [r7, #19]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d001      	beq.n	8015fc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8015fc4:	7cfb      	ldrb	r3, [r7, #19]
 8015fc6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d02f      	beq.n	8016034 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8015fd4:	4b2b      	ldr	r3, [pc, #172]	; (8016084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8015fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015fda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015fe2:	4928      	ldr	r1, [pc, #160]	; (8016084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8015fe4:	4313      	orrs	r3, r2
 8015fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015ff2:	d10d      	bne.n	8016010 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	3304      	adds	r3, #4
 8015ff8:	2102      	movs	r1, #2
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f000 f844 	bl	8016088 <RCCEx_PLLSAI1_Config>
 8016000:	4603      	mov	r3, r0
 8016002:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8016004:	7cfb      	ldrb	r3, [r7, #19]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d014      	beq.n	8016034 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 801600a:	7cfb      	ldrb	r3, [r7, #19]
 801600c:	74bb      	strb	r3, [r7, #18]
 801600e:	e011      	b.n	8016034 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016018:	d10c      	bne.n	8016034 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	3320      	adds	r3, #32
 801601e:	2102      	movs	r1, #2
 8016020:	4618      	mov	r0, r3
 8016022:	f000 f925 	bl	8016270 <RCCEx_PLLSAI2_Config>
 8016026:	4603      	mov	r3, r0
 8016028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801602a:	7cfb      	ldrb	r3, [r7, #19]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d001      	beq.n	8016034 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8016030:	7cfb      	ldrb	r3, [r7, #19]
 8016032:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801603c:	2b00      	cmp	r3, #0
 801603e:	d00a      	beq.n	8016056 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8016040:	4b10      	ldr	r3, [pc, #64]	; (8016084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8016042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016046:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801604e:	490d      	ldr	r1, [pc, #52]	; (8016084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8016050:	4313      	orrs	r3, r2
 8016052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801605e:	2b00      	cmp	r3, #0
 8016060:	d00b      	beq.n	801607a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8016062:	4b08      	ldr	r3, [pc, #32]	; (8016084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8016064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016068:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016072:	4904      	ldr	r1, [pc, #16]	; (8016084 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8016074:	4313      	orrs	r3, r2
 8016076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801607a:	7cbb      	ldrb	r3, [r7, #18]
}
 801607c:	4618      	mov	r0, r3
 801607e:	3718      	adds	r7, #24
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}
 8016084:	40021000 	.word	0x40021000

08016088 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b084      	sub	sp, #16
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016092:	2300      	movs	r3, #0
 8016094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8016096:	4b75      	ldr	r3, [pc, #468]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 8016098:	68db      	ldr	r3, [r3, #12]
 801609a:	f003 0303 	and.w	r3, r3, #3
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d018      	beq.n	80160d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80160a2:	4b72      	ldr	r3, [pc, #456]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 80160a4:	68db      	ldr	r3, [r3, #12]
 80160a6:	f003 0203 	and.w	r2, r3, #3
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d10d      	bne.n	80160ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	681b      	ldr	r3, [r3, #0]
       ||
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d009      	beq.n	80160ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80160ba:	4b6c      	ldr	r3, [pc, #432]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 80160bc:	68db      	ldr	r3, [r3, #12]
 80160be:	091b      	lsrs	r3, r3, #4
 80160c0:	f003 0307 	and.w	r3, r3, #7
 80160c4:	1c5a      	adds	r2, r3, #1
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	685b      	ldr	r3, [r3, #4]
       ||
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d047      	beq.n	801615e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80160ce:	2301      	movs	r3, #1
 80160d0:	73fb      	strb	r3, [r7, #15]
 80160d2:	e044      	b.n	801615e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	2b03      	cmp	r3, #3
 80160da:	d018      	beq.n	801610e <RCCEx_PLLSAI1_Config+0x86>
 80160dc:	2b03      	cmp	r3, #3
 80160de:	d825      	bhi.n	801612c <RCCEx_PLLSAI1_Config+0xa4>
 80160e0:	2b01      	cmp	r3, #1
 80160e2:	d002      	beq.n	80160ea <RCCEx_PLLSAI1_Config+0x62>
 80160e4:	2b02      	cmp	r3, #2
 80160e6:	d009      	beq.n	80160fc <RCCEx_PLLSAI1_Config+0x74>
 80160e8:	e020      	b.n	801612c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80160ea:	4b60      	ldr	r3, [pc, #384]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	f003 0302 	and.w	r3, r3, #2
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d11d      	bne.n	8016132 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80160f6:	2301      	movs	r3, #1
 80160f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80160fa:	e01a      	b.n	8016132 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80160fc:	4b5b      	ldr	r3, [pc, #364]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016104:	2b00      	cmp	r3, #0
 8016106:	d116      	bne.n	8016136 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8016108:	2301      	movs	r3, #1
 801610a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801610c:	e013      	b.n	8016136 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801610e:	4b57      	ldr	r3, [pc, #348]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016116:	2b00      	cmp	r3, #0
 8016118:	d10f      	bne.n	801613a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801611a:	4b54      	ldr	r3, [pc, #336]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016122:	2b00      	cmp	r3, #0
 8016124:	d109      	bne.n	801613a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8016126:	2301      	movs	r3, #1
 8016128:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801612a:	e006      	b.n	801613a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 801612c:	2301      	movs	r3, #1
 801612e:	73fb      	strb	r3, [r7, #15]
      break;
 8016130:	e004      	b.n	801613c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8016132:	bf00      	nop
 8016134:	e002      	b.n	801613c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8016136:	bf00      	nop
 8016138:	e000      	b.n	801613c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801613a:	bf00      	nop
    }

    if(status == HAL_OK)
 801613c:	7bfb      	ldrb	r3, [r7, #15]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d10d      	bne.n	801615e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8016142:	4b4a      	ldr	r3, [pc, #296]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 8016144:	68db      	ldr	r3, [r3, #12]
 8016146:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	6819      	ldr	r1, [r3, #0]
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	685b      	ldr	r3, [r3, #4]
 8016152:	3b01      	subs	r3, #1
 8016154:	011b      	lsls	r3, r3, #4
 8016156:	430b      	orrs	r3, r1
 8016158:	4944      	ldr	r1, [pc, #272]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 801615a:	4313      	orrs	r3, r2
 801615c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801615e:	7bfb      	ldrb	r3, [r7, #15]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d17d      	bne.n	8016260 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8016164:	4b41      	ldr	r3, [pc, #260]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	4a40      	ldr	r2, [pc, #256]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 801616a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801616e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016170:	f7fc fcce 	bl	8012b10 <HAL_GetTick>
 8016174:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8016176:	e009      	b.n	801618c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8016178:	f7fc fcca 	bl	8012b10 <HAL_GetTick>
 801617c:	4602      	mov	r2, r0
 801617e:	68bb      	ldr	r3, [r7, #8]
 8016180:	1ad3      	subs	r3, r2, r3
 8016182:	2b02      	cmp	r3, #2
 8016184:	d902      	bls.n	801618c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8016186:	2303      	movs	r3, #3
 8016188:	73fb      	strb	r3, [r7, #15]
        break;
 801618a:	e005      	b.n	8016198 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801618c:	4b37      	ldr	r3, [pc, #220]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016194:	2b00      	cmp	r3, #0
 8016196:	d1ef      	bne.n	8016178 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8016198:	7bfb      	ldrb	r3, [r7, #15]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d160      	bne.n	8016260 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d111      	bne.n	80161c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80161a4:	4b31      	ldr	r3, [pc, #196]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 80161a6:	691b      	ldr	r3, [r3, #16]
 80161a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80161ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80161b0:	687a      	ldr	r2, [r7, #4]
 80161b2:	6892      	ldr	r2, [r2, #8]
 80161b4:	0211      	lsls	r1, r2, #8
 80161b6:	687a      	ldr	r2, [r7, #4]
 80161b8:	68d2      	ldr	r2, [r2, #12]
 80161ba:	0912      	lsrs	r2, r2, #4
 80161bc:	0452      	lsls	r2, r2, #17
 80161be:	430a      	orrs	r2, r1
 80161c0:	492a      	ldr	r1, [pc, #168]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 80161c2:	4313      	orrs	r3, r2
 80161c4:	610b      	str	r3, [r1, #16]
 80161c6:	e027      	b.n	8016218 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	2b01      	cmp	r3, #1
 80161cc:	d112      	bne.n	80161f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80161ce:	4b27      	ldr	r3, [pc, #156]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 80161d0:	691b      	ldr	r3, [r3, #16]
 80161d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80161d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80161da:	687a      	ldr	r2, [r7, #4]
 80161dc:	6892      	ldr	r2, [r2, #8]
 80161de:	0211      	lsls	r1, r2, #8
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	6912      	ldr	r2, [r2, #16]
 80161e4:	0852      	lsrs	r2, r2, #1
 80161e6:	3a01      	subs	r2, #1
 80161e8:	0552      	lsls	r2, r2, #21
 80161ea:	430a      	orrs	r2, r1
 80161ec:	491f      	ldr	r1, [pc, #124]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 80161ee:	4313      	orrs	r3, r2
 80161f0:	610b      	str	r3, [r1, #16]
 80161f2:	e011      	b.n	8016218 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80161f4:	4b1d      	ldr	r3, [pc, #116]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 80161f6:	691b      	ldr	r3, [r3, #16]
 80161f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80161fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8016200:	687a      	ldr	r2, [r7, #4]
 8016202:	6892      	ldr	r2, [r2, #8]
 8016204:	0211      	lsls	r1, r2, #8
 8016206:	687a      	ldr	r2, [r7, #4]
 8016208:	6952      	ldr	r2, [r2, #20]
 801620a:	0852      	lsrs	r2, r2, #1
 801620c:	3a01      	subs	r2, #1
 801620e:	0652      	lsls	r2, r2, #25
 8016210:	430a      	orrs	r2, r1
 8016212:	4916      	ldr	r1, [pc, #88]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 8016214:	4313      	orrs	r3, r2
 8016216:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8016218:	4b14      	ldr	r3, [pc, #80]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	4a13      	ldr	r2, [pc, #76]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 801621e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016222:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016224:	f7fc fc74 	bl	8012b10 <HAL_GetTick>
 8016228:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801622a:	e009      	b.n	8016240 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801622c:	f7fc fc70 	bl	8012b10 <HAL_GetTick>
 8016230:	4602      	mov	r2, r0
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	1ad3      	subs	r3, r2, r3
 8016236:	2b02      	cmp	r3, #2
 8016238:	d902      	bls.n	8016240 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 801623a:	2303      	movs	r3, #3
 801623c:	73fb      	strb	r3, [r7, #15]
          break;
 801623e:	e005      	b.n	801624c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8016240:	4b0a      	ldr	r3, [pc, #40]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016248:	2b00      	cmp	r3, #0
 801624a:	d0ef      	beq.n	801622c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 801624c:	7bfb      	ldrb	r3, [r7, #15]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d106      	bne.n	8016260 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8016252:	4b06      	ldr	r3, [pc, #24]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 8016254:	691a      	ldr	r2, [r3, #16]
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	699b      	ldr	r3, [r3, #24]
 801625a:	4904      	ldr	r1, [pc, #16]	; (801626c <RCCEx_PLLSAI1_Config+0x1e4>)
 801625c:	4313      	orrs	r3, r2
 801625e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8016260:	7bfb      	ldrb	r3, [r7, #15]
}
 8016262:	4618      	mov	r0, r3
 8016264:	3710      	adds	r7, #16
 8016266:	46bd      	mov	sp, r7
 8016268:	bd80      	pop	{r7, pc}
 801626a:	bf00      	nop
 801626c:	40021000 	.word	0x40021000

08016270 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b084      	sub	sp, #16
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
 8016278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801627a:	2300      	movs	r3, #0
 801627c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801627e:	4b6a      	ldr	r3, [pc, #424]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8016280:	68db      	ldr	r3, [r3, #12]
 8016282:	f003 0303 	and.w	r3, r3, #3
 8016286:	2b00      	cmp	r3, #0
 8016288:	d018      	beq.n	80162bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 801628a:	4b67      	ldr	r3, [pc, #412]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 801628c:	68db      	ldr	r3, [r3, #12]
 801628e:	f003 0203 	and.w	r2, r3, #3
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	429a      	cmp	r2, r3
 8016298:	d10d      	bne.n	80162b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
       ||
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d009      	beq.n	80162b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80162a2:	4b61      	ldr	r3, [pc, #388]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80162a4:	68db      	ldr	r3, [r3, #12]
 80162a6:	091b      	lsrs	r3, r3, #4
 80162a8:	f003 0307 	and.w	r3, r3, #7
 80162ac:	1c5a      	adds	r2, r3, #1
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	685b      	ldr	r3, [r3, #4]
       ||
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d047      	beq.n	8016346 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80162b6:	2301      	movs	r3, #1
 80162b8:	73fb      	strb	r3, [r7, #15]
 80162ba:	e044      	b.n	8016346 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2b03      	cmp	r3, #3
 80162c2:	d018      	beq.n	80162f6 <RCCEx_PLLSAI2_Config+0x86>
 80162c4:	2b03      	cmp	r3, #3
 80162c6:	d825      	bhi.n	8016314 <RCCEx_PLLSAI2_Config+0xa4>
 80162c8:	2b01      	cmp	r3, #1
 80162ca:	d002      	beq.n	80162d2 <RCCEx_PLLSAI2_Config+0x62>
 80162cc:	2b02      	cmp	r3, #2
 80162ce:	d009      	beq.n	80162e4 <RCCEx_PLLSAI2_Config+0x74>
 80162d0:	e020      	b.n	8016314 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80162d2:	4b55      	ldr	r3, [pc, #340]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	f003 0302 	and.w	r3, r3, #2
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d11d      	bne.n	801631a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80162de:	2301      	movs	r3, #1
 80162e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80162e2:	e01a      	b.n	801631a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80162e4:	4b50      	ldr	r3, [pc, #320]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d116      	bne.n	801631e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80162f0:	2301      	movs	r3, #1
 80162f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80162f4:	e013      	b.n	801631e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80162f6:	4b4c      	ldr	r3, [pc, #304]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d10f      	bne.n	8016322 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8016302:	4b49      	ldr	r3, [pc, #292]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801630a:	2b00      	cmp	r3, #0
 801630c:	d109      	bne.n	8016322 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 801630e:	2301      	movs	r3, #1
 8016310:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016312:	e006      	b.n	8016322 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8016314:	2301      	movs	r3, #1
 8016316:	73fb      	strb	r3, [r7, #15]
      break;
 8016318:	e004      	b.n	8016324 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801631a:	bf00      	nop
 801631c:	e002      	b.n	8016324 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801631e:	bf00      	nop
 8016320:	e000      	b.n	8016324 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8016322:	bf00      	nop
    }

    if(status == HAL_OK)
 8016324:	7bfb      	ldrb	r3, [r7, #15]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d10d      	bne.n	8016346 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801632a:	4b3f      	ldr	r3, [pc, #252]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 801632c:	68db      	ldr	r3, [r3, #12]
 801632e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6819      	ldr	r1, [r3, #0]
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	3b01      	subs	r3, #1
 801633c:	011b      	lsls	r3, r3, #4
 801633e:	430b      	orrs	r3, r1
 8016340:	4939      	ldr	r1, [pc, #228]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8016342:	4313      	orrs	r3, r2
 8016344:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8016346:	7bfb      	ldrb	r3, [r7, #15]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d167      	bne.n	801641c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801634c:	4b36      	ldr	r3, [pc, #216]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	4a35      	ldr	r2, [pc, #212]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8016352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016358:	f7fc fbda 	bl	8012b10 <HAL_GetTick>
 801635c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801635e:	e009      	b.n	8016374 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8016360:	f7fc fbd6 	bl	8012b10 <HAL_GetTick>
 8016364:	4602      	mov	r2, r0
 8016366:	68bb      	ldr	r3, [r7, #8]
 8016368:	1ad3      	subs	r3, r2, r3
 801636a:	2b02      	cmp	r3, #2
 801636c:	d902      	bls.n	8016374 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801636e:	2303      	movs	r3, #3
 8016370:	73fb      	strb	r3, [r7, #15]
        break;
 8016372:	e005      	b.n	8016380 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8016374:	4b2c      	ldr	r3, [pc, #176]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801637c:	2b00      	cmp	r3, #0
 801637e:	d1ef      	bne.n	8016360 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8016380:	7bfb      	ldrb	r3, [r7, #15]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d14a      	bne.n	801641c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8016386:	683b      	ldr	r3, [r7, #0]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d111      	bne.n	80163b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801638c:	4b26      	ldr	r3, [pc, #152]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 801638e:	695b      	ldr	r3, [r3, #20]
 8016390:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8016394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016398:	687a      	ldr	r2, [r7, #4]
 801639a:	6892      	ldr	r2, [r2, #8]
 801639c:	0211      	lsls	r1, r2, #8
 801639e:	687a      	ldr	r2, [r7, #4]
 80163a0:	68d2      	ldr	r2, [r2, #12]
 80163a2:	0912      	lsrs	r2, r2, #4
 80163a4:	0452      	lsls	r2, r2, #17
 80163a6:	430a      	orrs	r2, r1
 80163a8:	491f      	ldr	r1, [pc, #124]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80163aa:	4313      	orrs	r3, r2
 80163ac:	614b      	str	r3, [r1, #20]
 80163ae:	e011      	b.n	80163d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80163b0:	4b1d      	ldr	r3, [pc, #116]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80163b2:	695b      	ldr	r3, [r3, #20]
 80163b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80163b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80163bc:	687a      	ldr	r2, [r7, #4]
 80163be:	6892      	ldr	r2, [r2, #8]
 80163c0:	0211      	lsls	r1, r2, #8
 80163c2:	687a      	ldr	r2, [r7, #4]
 80163c4:	6912      	ldr	r2, [r2, #16]
 80163c6:	0852      	lsrs	r2, r2, #1
 80163c8:	3a01      	subs	r2, #1
 80163ca:	0652      	lsls	r2, r2, #25
 80163cc:	430a      	orrs	r2, r1
 80163ce:	4916      	ldr	r1, [pc, #88]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80163d0:	4313      	orrs	r3, r2
 80163d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80163d4:	4b14      	ldr	r3, [pc, #80]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	4a13      	ldr	r2, [pc, #76]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80163da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80163de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80163e0:	f7fc fb96 	bl	8012b10 <HAL_GetTick>
 80163e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80163e6:	e009      	b.n	80163fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80163e8:	f7fc fb92 	bl	8012b10 <HAL_GetTick>
 80163ec:	4602      	mov	r2, r0
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	1ad3      	subs	r3, r2, r3
 80163f2:	2b02      	cmp	r3, #2
 80163f4:	d902      	bls.n	80163fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80163f6:	2303      	movs	r3, #3
 80163f8:	73fb      	strb	r3, [r7, #15]
          break;
 80163fa:	e005      	b.n	8016408 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80163fc:	4b0a      	ldr	r3, [pc, #40]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016404:	2b00      	cmp	r3, #0
 8016406:	d0ef      	beq.n	80163e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8016408:	7bfb      	ldrb	r3, [r7, #15]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d106      	bne.n	801641c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 801640e:	4b06      	ldr	r3, [pc, #24]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8016410:	695a      	ldr	r2, [r3, #20]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	695b      	ldr	r3, [r3, #20]
 8016416:	4904      	ldr	r1, [pc, #16]	; (8016428 <RCCEx_PLLSAI2_Config+0x1b8>)
 8016418:	4313      	orrs	r3, r2
 801641a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 801641c:	7bfb      	ldrb	r3, [r7, #15]
}
 801641e:	4618      	mov	r0, r3
 8016420:	3710      	adds	r7, #16
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}
 8016426:	bf00      	nop
 8016428:	40021000 	.word	0x40021000

0801642c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b084      	sub	sp, #16
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d101      	bne.n	801643e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801643a:	2301      	movs	r3, #1
 801643c:	e095      	b.n	801656a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016442:	2b00      	cmp	r3, #0
 8016444:	d108      	bne.n	8016458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	685b      	ldr	r3, [r3, #4]
 801644a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801644e:	d009      	beq.n	8016464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	2200      	movs	r2, #0
 8016454:	61da      	str	r2, [r3, #28]
 8016456:	e005      	b.n	8016464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2200      	movs	r2, #0
 801645c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	2200      	movs	r2, #0
 8016462:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2200      	movs	r2, #0
 8016468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016470:	b2db      	uxtb	r3, r3
 8016472:	2b00      	cmp	r3, #0
 8016474:	d106      	bne.n	8016484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2200      	movs	r2, #0
 801647a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f000 f877 	bl	8016572 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2202      	movs	r2, #2
 8016488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	681a      	ldr	r2, [r3, #0]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801649a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	68db      	ldr	r3, [r3, #12]
 80164a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80164a4:	d902      	bls.n	80164ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80164a6:	2300      	movs	r3, #0
 80164a8:	60fb      	str	r3, [r7, #12]
 80164aa:	e002      	b.n	80164b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80164ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80164b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	68db      	ldr	r3, [r3, #12]
 80164b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80164ba:	d007      	beq.n	80164cc <HAL_SPI_Init+0xa0>
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	68db      	ldr	r3, [r3, #12]
 80164c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80164c4:	d002      	beq.n	80164cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2200      	movs	r2, #0
 80164ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	685b      	ldr	r3, [r3, #4]
 80164d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	689b      	ldr	r3, [r3, #8]
 80164d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80164dc:	431a      	orrs	r2, r3
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	691b      	ldr	r3, [r3, #16]
 80164e2:	f003 0302 	and.w	r3, r3, #2
 80164e6:	431a      	orrs	r2, r3
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	695b      	ldr	r3, [r3, #20]
 80164ec:	f003 0301 	and.w	r3, r3, #1
 80164f0:	431a      	orrs	r2, r3
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	699b      	ldr	r3, [r3, #24]
 80164f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80164fa:	431a      	orrs	r2, r3
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	69db      	ldr	r3, [r3, #28]
 8016500:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016504:	431a      	orrs	r2, r3
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6a1b      	ldr	r3, [r3, #32]
 801650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801650e:	ea42 0103 	orr.w	r1, r2, r3
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016516:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	430a      	orrs	r2, r1
 8016520:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	699b      	ldr	r3, [r3, #24]
 8016526:	0c1b      	lsrs	r3, r3, #16
 8016528:	f003 0204 	and.w	r2, r3, #4
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016530:	f003 0310 	and.w	r3, r3, #16
 8016534:	431a      	orrs	r2, r3
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801653a:	f003 0308 	and.w	r3, r3, #8
 801653e:	431a      	orrs	r2, r3
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	68db      	ldr	r3, [r3, #12]
 8016544:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8016548:	ea42 0103 	orr.w	r1, r2, r3
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	430a      	orrs	r2, r1
 8016558:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	2200      	movs	r2, #0
 801655e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2201      	movs	r2, #1
 8016564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8016568:	2300      	movs	r3, #0
}
 801656a:	4618      	mov	r0, r3
 801656c:	3710      	adds	r7, #16
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}

08016572 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8016572:	b480      	push	{r7}
 8016574:	b083      	sub	sp, #12
 8016576:	af00      	add	r7, sp, #0
 8016578:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 801657a:	bf00      	nop
 801657c:	370c      	adds	r7, #12
 801657e:	46bd      	mov	sp, r7
 8016580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016584:	4770      	bx	lr

08016586 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8016586:	b580      	push	{r7, lr}
 8016588:	b08a      	sub	sp, #40	; 0x28
 801658a:	af00      	add	r7, sp, #0
 801658c:	60f8      	str	r0, [r7, #12]
 801658e:	60b9      	str	r1, [r7, #8]
 8016590:	607a      	str	r2, [r7, #4]
 8016592:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8016594:	2301      	movs	r3, #1
 8016596:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8016598:	2300      	movs	r3, #0
 801659a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80165a4:	2b01      	cmp	r3, #1
 80165a6:	d101      	bne.n	80165ac <HAL_SPI_TransmitReceive+0x26>
 80165a8:	2302      	movs	r3, #2
 80165aa:	e1fb      	b.n	80169a4 <HAL_SPI_TransmitReceive+0x41e>
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	2201      	movs	r2, #1
 80165b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80165b4:	f7fc faac 	bl	8012b10 <HAL_GetTick>
 80165b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80165c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	685b      	ldr	r3, [r3, #4]
 80165c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80165c8:	887b      	ldrh	r3, [r7, #2]
 80165ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80165cc:	887b      	ldrh	r3, [r7, #2]
 80165ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80165d0:	7efb      	ldrb	r3, [r7, #27]
 80165d2:	2b01      	cmp	r3, #1
 80165d4:	d00e      	beq.n	80165f4 <HAL_SPI_TransmitReceive+0x6e>
 80165d6:	697b      	ldr	r3, [r7, #20]
 80165d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80165dc:	d106      	bne.n	80165ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	689b      	ldr	r3, [r3, #8]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d102      	bne.n	80165ec <HAL_SPI_TransmitReceive+0x66>
 80165e6:	7efb      	ldrb	r3, [r7, #27]
 80165e8:	2b04      	cmp	r3, #4
 80165ea:	d003      	beq.n	80165f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80165ec:	2302      	movs	r3, #2
 80165ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80165f2:	e1cd      	b.n	8016990 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d005      	beq.n	8016606 <HAL_SPI_TransmitReceive+0x80>
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d002      	beq.n	8016606 <HAL_SPI_TransmitReceive+0x80>
 8016600:	887b      	ldrh	r3, [r7, #2]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d103      	bne.n	801660e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8016606:	2301      	movs	r3, #1
 8016608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801660c:	e1c0      	b.n	8016990 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016614:	b2db      	uxtb	r3, r3
 8016616:	2b04      	cmp	r3, #4
 8016618:	d003      	beq.n	8016622 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	2205      	movs	r2, #5
 801661e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	2200      	movs	r2, #0
 8016626:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	687a      	ldr	r2, [r7, #4]
 801662c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	887a      	ldrh	r2, [r7, #2]
 8016632:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	887a      	ldrh	r2, [r7, #2]
 801663a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	68ba      	ldr	r2, [r7, #8]
 8016642:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	887a      	ldrh	r2, [r7, #2]
 8016648:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	887a      	ldrh	r2, [r7, #2]
 801664e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	2200      	movs	r2, #0
 8016654:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	2200      	movs	r2, #0
 801665a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	68db      	ldr	r3, [r3, #12]
 8016660:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8016664:	d802      	bhi.n	801666c <HAL_SPI_TransmitReceive+0xe6>
 8016666:	8a3b      	ldrh	r3, [r7, #16]
 8016668:	2b01      	cmp	r3, #1
 801666a:	d908      	bls.n	801667e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	685a      	ldr	r2, [r3, #4]
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801667a:	605a      	str	r2, [r3, #4]
 801667c:	e007      	b.n	801668e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	685a      	ldr	r2, [r3, #4]
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801668c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016698:	2b40      	cmp	r3, #64	; 0x40
 801669a:	d007      	beq.n	80166ac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	681a      	ldr	r2, [r3, #0]
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80166aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	68db      	ldr	r3, [r3, #12]
 80166b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80166b4:	d97c      	bls.n	80167b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	685b      	ldr	r3, [r3, #4]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d002      	beq.n	80166c4 <HAL_SPI_TransmitReceive+0x13e>
 80166be:	8a7b      	ldrh	r3, [r7, #18]
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d169      	bne.n	8016798 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166c8:	881a      	ldrh	r2, [r3, #0]
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166d4:	1c9a      	adds	r2, r3, #2
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80166de:	b29b      	uxth	r3, r3
 80166e0:	3b01      	subs	r3, #1
 80166e2:	b29a      	uxth	r2, r3
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80166e8:	e056      	b.n	8016798 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	689b      	ldr	r3, [r3, #8]
 80166f0:	f003 0302 	and.w	r3, r3, #2
 80166f4:	2b02      	cmp	r3, #2
 80166f6:	d11b      	bne.n	8016730 <HAL_SPI_TransmitReceive+0x1aa>
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80166fc:	b29b      	uxth	r3, r3
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d016      	beq.n	8016730 <HAL_SPI_TransmitReceive+0x1aa>
 8016702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016704:	2b01      	cmp	r3, #1
 8016706:	d113      	bne.n	8016730 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801670c:	881a      	ldrh	r2, [r3, #0]
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016718:	1c9a      	adds	r2, r3, #2
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016722:	b29b      	uxth	r3, r3
 8016724:	3b01      	subs	r3, #1
 8016726:	b29a      	uxth	r2, r3
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801672c:	2300      	movs	r3, #0
 801672e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	689b      	ldr	r3, [r3, #8]
 8016736:	f003 0301 	and.w	r3, r3, #1
 801673a:	2b01      	cmp	r3, #1
 801673c:	d11c      	bne.n	8016778 <HAL_SPI_TransmitReceive+0x1f2>
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8016744:	b29b      	uxth	r3, r3
 8016746:	2b00      	cmp	r3, #0
 8016748:	d016      	beq.n	8016778 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	68da      	ldr	r2, [r3, #12]
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016754:	b292      	uxth	r2, r2
 8016756:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801675c:	1c9a      	adds	r2, r3, #2
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8016768:	b29b      	uxth	r3, r3
 801676a:	3b01      	subs	r3, #1
 801676c:	b29a      	uxth	r2, r3
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8016774:	2301      	movs	r3, #1
 8016776:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8016778:	f7fc f9ca 	bl	8012b10 <HAL_GetTick>
 801677c:	4602      	mov	r2, r0
 801677e:	69fb      	ldr	r3, [r7, #28]
 8016780:	1ad3      	subs	r3, r2, r3
 8016782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016784:	429a      	cmp	r2, r3
 8016786:	d807      	bhi.n	8016798 <HAL_SPI_TransmitReceive+0x212>
 8016788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801678e:	d003      	beq.n	8016798 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8016790:	2303      	movs	r3, #3
 8016792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8016796:	e0fb      	b.n	8016990 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801679c:	b29b      	uxth	r3, r3
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d1a3      	bne.n	80166ea <HAL_SPI_TransmitReceive+0x164>
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80167a8:	b29b      	uxth	r3, r3
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d19d      	bne.n	80166ea <HAL_SPI_TransmitReceive+0x164>
 80167ae:	e0df      	b.n	8016970 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	685b      	ldr	r3, [r3, #4]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d003      	beq.n	80167c0 <HAL_SPI_TransmitReceive+0x23a>
 80167b8:	8a7b      	ldrh	r3, [r7, #18]
 80167ba:	2b01      	cmp	r3, #1
 80167bc:	f040 80cb 	bne.w	8016956 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80167c4:	b29b      	uxth	r3, r3
 80167c6:	2b01      	cmp	r3, #1
 80167c8:	d912      	bls.n	80167f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167ce:	881a      	ldrh	r2, [r3, #0]
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167da:	1c9a      	adds	r2, r3, #2
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80167e4:	b29b      	uxth	r3, r3
 80167e6:	3b02      	subs	r3, #2
 80167e8:	b29a      	uxth	r2, r3
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80167ee:	e0b2      	b.n	8016956 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	330c      	adds	r3, #12
 80167fa:	7812      	ldrb	r2, [r2, #0]
 80167fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016802:	1c5a      	adds	r2, r3, #1
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801680c:	b29b      	uxth	r3, r3
 801680e:	3b01      	subs	r3, #1
 8016810:	b29a      	uxth	r2, r3
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016816:	e09e      	b.n	8016956 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	689b      	ldr	r3, [r3, #8]
 801681e:	f003 0302 	and.w	r3, r3, #2
 8016822:	2b02      	cmp	r3, #2
 8016824:	d134      	bne.n	8016890 <HAL_SPI_TransmitReceive+0x30a>
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801682a:	b29b      	uxth	r3, r3
 801682c:	2b00      	cmp	r3, #0
 801682e:	d02f      	beq.n	8016890 <HAL_SPI_TransmitReceive+0x30a>
 8016830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016832:	2b01      	cmp	r3, #1
 8016834:	d12c      	bne.n	8016890 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801683a:	b29b      	uxth	r3, r3
 801683c:	2b01      	cmp	r3, #1
 801683e:	d912      	bls.n	8016866 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016844:	881a      	ldrh	r2, [r3, #0]
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016850:	1c9a      	adds	r2, r3, #2
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801685a:	b29b      	uxth	r3, r3
 801685c:	3b02      	subs	r3, #2
 801685e:	b29a      	uxth	r2, r3
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016864:	e012      	b.n	801688c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	330c      	adds	r3, #12
 8016870:	7812      	ldrb	r2, [r2, #0]
 8016872:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016878:	1c5a      	adds	r2, r3, #1
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016882:	b29b      	uxth	r3, r3
 8016884:	3b01      	subs	r3, #1
 8016886:	b29a      	uxth	r2, r3
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801688c:	2300      	movs	r3, #0
 801688e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	689b      	ldr	r3, [r3, #8]
 8016896:	f003 0301 	and.w	r3, r3, #1
 801689a:	2b01      	cmp	r3, #1
 801689c:	d148      	bne.n	8016930 <HAL_SPI_TransmitReceive+0x3aa>
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80168a4:	b29b      	uxth	r3, r3
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d042      	beq.n	8016930 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80168b0:	b29b      	uxth	r3, r3
 80168b2:	2b01      	cmp	r3, #1
 80168b4:	d923      	bls.n	80168fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	68da      	ldr	r2, [r3, #12]
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168c0:	b292      	uxth	r2, r2
 80168c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168c8:	1c9a      	adds	r2, r3, #2
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	3b02      	subs	r3, #2
 80168d8:	b29a      	uxth	r2, r3
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	2b01      	cmp	r3, #1
 80168ea:	d81f      	bhi.n	801692c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	685a      	ldr	r2, [r3, #4]
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80168fa:	605a      	str	r2, [r3, #4]
 80168fc:	e016      	b.n	801692c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	f103 020c 	add.w	r2, r3, #12
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801690a:	7812      	ldrb	r2, [r2, #0]
 801690c:	b2d2      	uxtb	r2, r2
 801690e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016914:	1c5a      	adds	r2, r3, #1
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8016920:	b29b      	uxth	r3, r3
 8016922:	3b01      	subs	r3, #1
 8016924:	b29a      	uxth	r2, r3
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801692c:	2301      	movs	r3, #1
 801692e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8016930:	f7fc f8ee 	bl	8012b10 <HAL_GetTick>
 8016934:	4602      	mov	r2, r0
 8016936:	69fb      	ldr	r3, [r7, #28]
 8016938:	1ad3      	subs	r3, r2, r3
 801693a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801693c:	429a      	cmp	r2, r3
 801693e:	d803      	bhi.n	8016948 <HAL_SPI_TransmitReceive+0x3c2>
 8016940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016946:	d102      	bne.n	801694e <HAL_SPI_TransmitReceive+0x3c8>
 8016948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801694a:	2b00      	cmp	r3, #0
 801694c:	d103      	bne.n	8016956 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801694e:	2303      	movs	r3, #3
 8016950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8016954:	e01c      	b.n	8016990 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801695a:	b29b      	uxth	r3, r3
 801695c:	2b00      	cmp	r3, #0
 801695e:	f47f af5b 	bne.w	8016818 <HAL_SPI_TransmitReceive+0x292>
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8016968:	b29b      	uxth	r3, r3
 801696a:	2b00      	cmp	r3, #0
 801696c:	f47f af54 	bne.w	8016818 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016970:	69fa      	ldr	r2, [r7, #28]
 8016972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016974:	68f8      	ldr	r0, [r7, #12]
 8016976:	f000 fa61 	bl	8016e3c <SPI_EndRxTxTransaction>
 801697a:	4603      	mov	r3, r0
 801697c:	2b00      	cmp	r3, #0
 801697e:	d006      	beq.n	801698e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8016980:	2301      	movs	r3, #1
 8016982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	2220      	movs	r2, #32
 801698a:	661a      	str	r2, [r3, #96]	; 0x60
 801698c:	e000      	b.n	8016990 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801698e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	2201      	movs	r2, #1
 8016994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	2200      	movs	r2, #0
 801699c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80169a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80169a4:	4618      	mov	r0, r3
 80169a6:	3728      	adds	r7, #40	; 0x28
 80169a8:	46bd      	mov	sp, r7
 80169aa:	bd80      	pop	{r7, pc}

080169ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b088      	sub	sp, #32
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	685b      	ldr	r3, [r3, #4]
 80169ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	689b      	ldr	r3, [r3, #8]
 80169c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80169c4:	69bb      	ldr	r3, [r7, #24]
 80169c6:	099b      	lsrs	r3, r3, #6
 80169c8:	f003 0301 	and.w	r3, r3, #1
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d10f      	bne.n	80169f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80169d0:	69bb      	ldr	r3, [r7, #24]
 80169d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d00a      	beq.n	80169f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80169da:	69fb      	ldr	r3, [r7, #28]
 80169dc:	099b      	lsrs	r3, r3, #6
 80169de:	f003 0301 	and.w	r3, r3, #1
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d004      	beq.n	80169f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	4798      	blx	r3
    return;
 80169ee:	e0d7      	b.n	8016ba0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80169f0:	69bb      	ldr	r3, [r7, #24]
 80169f2:	085b      	lsrs	r3, r3, #1
 80169f4:	f003 0301 	and.w	r3, r3, #1
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d00a      	beq.n	8016a12 <HAL_SPI_IRQHandler+0x66>
 80169fc:	69fb      	ldr	r3, [r7, #28]
 80169fe:	09db      	lsrs	r3, r3, #7
 8016a00:	f003 0301 	and.w	r3, r3, #1
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d004      	beq.n	8016a12 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	4798      	blx	r3
    return;
 8016a10:	e0c6      	b.n	8016ba0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8016a12:	69bb      	ldr	r3, [r7, #24]
 8016a14:	095b      	lsrs	r3, r3, #5
 8016a16:	f003 0301 	and.w	r3, r3, #1
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d10c      	bne.n	8016a38 <HAL_SPI_IRQHandler+0x8c>
 8016a1e:	69bb      	ldr	r3, [r7, #24]
 8016a20:	099b      	lsrs	r3, r3, #6
 8016a22:	f003 0301 	and.w	r3, r3, #1
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d106      	bne.n	8016a38 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8016a2a:	69bb      	ldr	r3, [r7, #24]
 8016a2c:	0a1b      	lsrs	r3, r3, #8
 8016a2e:	f003 0301 	and.w	r3, r3, #1
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	f000 80b4 	beq.w	8016ba0 <HAL_SPI_IRQHandler+0x1f4>
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	095b      	lsrs	r3, r3, #5
 8016a3c:	f003 0301 	and.w	r3, r3, #1
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	f000 80ad 	beq.w	8016ba0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	099b      	lsrs	r3, r3, #6
 8016a4a:	f003 0301 	and.w	r3, r3, #1
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d023      	beq.n	8016a9a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016a58:	b2db      	uxtb	r3, r3
 8016a5a:	2b03      	cmp	r3, #3
 8016a5c:	d011      	beq.n	8016a82 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016a62:	f043 0204 	orr.w	r2, r3, #4
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	617b      	str	r3, [r7, #20]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	68db      	ldr	r3, [r3, #12]
 8016a74:	617b      	str	r3, [r7, #20]
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	689b      	ldr	r3, [r3, #8]
 8016a7c:	617b      	str	r3, [r7, #20]
 8016a7e:	697b      	ldr	r3, [r7, #20]
 8016a80:	e00b      	b.n	8016a9a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016a82:	2300      	movs	r3, #0
 8016a84:	613b      	str	r3, [r7, #16]
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	68db      	ldr	r3, [r3, #12]
 8016a8c:	613b      	str	r3, [r7, #16]
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	689b      	ldr	r3, [r3, #8]
 8016a94:	613b      	str	r3, [r7, #16]
 8016a96:	693b      	ldr	r3, [r7, #16]
        return;
 8016a98:	e082      	b.n	8016ba0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8016a9a:	69bb      	ldr	r3, [r7, #24]
 8016a9c:	095b      	lsrs	r3, r3, #5
 8016a9e:	f003 0301 	and.w	r3, r3, #1
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d014      	beq.n	8016ad0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016aaa:	f043 0201 	orr.w	r2, r3, #1
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	60fb      	str	r3, [r7, #12]
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	689b      	ldr	r3, [r3, #8]
 8016abc:	60fb      	str	r3, [r7, #12]
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	681a      	ldr	r2, [r3, #0]
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016acc:	601a      	str	r2, [r3, #0]
 8016ace:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8016ad0:	69bb      	ldr	r3, [r7, #24]
 8016ad2:	0a1b      	lsrs	r3, r3, #8
 8016ad4:	f003 0301 	and.w	r3, r3, #1
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d00c      	beq.n	8016af6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ae0:	f043 0208 	orr.w	r2, r3, #8
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8016ae8:	2300      	movs	r3, #0
 8016aea:	60bb      	str	r3, [r7, #8]
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	689b      	ldr	r3, [r3, #8]
 8016af2:	60bb      	str	r3, [r7, #8]
 8016af4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d04f      	beq.n	8016b9e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	685a      	ldr	r2, [r3, #4]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8016b0c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	2201      	movs	r2, #1
 8016b12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8016b16:	69fb      	ldr	r3, [r7, #28]
 8016b18:	f003 0302 	and.w	r3, r3, #2
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d104      	bne.n	8016b2a <HAL_SPI_IRQHandler+0x17e>
 8016b20:	69fb      	ldr	r3, [r7, #28]
 8016b22:	f003 0301 	and.w	r3, r3, #1
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d034      	beq.n	8016b94 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	685a      	ldr	r2, [r3, #4]
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	f022 0203 	bic.w	r2, r2, #3
 8016b38:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d011      	beq.n	8016b66 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016b46:	4a18      	ldr	r2, [pc, #96]	; (8016ba8 <HAL_SPI_IRQHandler+0x1fc>)
 8016b48:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016b4e:	4618      	mov	r0, r3
 8016b50:	f7fd fb21 	bl	8014196 <HAL_DMA_Abort_IT>
 8016b54:	4603      	mov	r3, r0
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d005      	beq.n	8016b66 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016b5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d016      	beq.n	8016b9c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b72:	4a0d      	ldr	r2, [pc, #52]	; (8016ba8 <HAL_SPI_IRQHandler+0x1fc>)
 8016b74:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f7fd fb0b 	bl	8014196 <HAL_DMA_Abort_IT>
 8016b80:	4603      	mov	r3, r0
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d00a      	beq.n	8016b9c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016b8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8016b92:	e003      	b.n	8016b9c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8016b94:	6878      	ldr	r0, [r7, #4]
 8016b96:	f000 f809 	bl	8016bac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8016b9a:	e000      	b.n	8016b9e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8016b9c:	bf00      	nop
    return;
 8016b9e:	bf00      	nop
  }
}
 8016ba0:	3720      	adds	r7, #32
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}
 8016ba6:	bf00      	nop
 8016ba8:	08016bdd 	.word	0x08016bdd

08016bac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8016bac:	b480      	push	{r7}
 8016bae:	b083      	sub	sp, #12
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8016bb4:	bf00      	nop
 8016bb6:	370c      	adds	r7, #12
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbe:	4770      	bx	lr

08016bc0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8016bc0:	b480      	push	{r7}
 8016bc2:	b083      	sub	sp, #12
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016bce:	b2db      	uxtb	r3, r3
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	370c      	adds	r7, #12
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bda:	4770      	bx	lr

08016bdc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b084      	sub	sp, #16
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016be8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	2200      	movs	r2, #0
 8016bee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8016bf8:	68f8      	ldr	r0, [r7, #12]
 8016bfa:	f7ff ffd7 	bl	8016bac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8016bfe:	bf00      	nop
 8016c00:	3710      	adds	r7, #16
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}
	...

08016c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b088      	sub	sp, #32
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	60f8      	str	r0, [r7, #12]
 8016c10:	60b9      	str	r1, [r7, #8]
 8016c12:	603b      	str	r3, [r7, #0]
 8016c14:	4613      	mov	r3, r2
 8016c16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8016c18:	f7fb ff7a 	bl	8012b10 <HAL_GetTick>
 8016c1c:	4602      	mov	r2, r0
 8016c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c20:	1a9b      	subs	r3, r3, r2
 8016c22:	683a      	ldr	r2, [r7, #0]
 8016c24:	4413      	add	r3, r2
 8016c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8016c28:	f7fb ff72 	bl	8012b10 <HAL_GetTick>
 8016c2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8016c2e:	4b39      	ldr	r3, [pc, #228]	; (8016d14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	015b      	lsls	r3, r3, #5
 8016c34:	0d1b      	lsrs	r3, r3, #20
 8016c36:	69fa      	ldr	r2, [r7, #28]
 8016c38:	fb02 f303 	mul.w	r3, r2, r3
 8016c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016c3e:	e054      	b.n	8016cea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c46:	d050      	beq.n	8016cea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8016c48:	f7fb ff62 	bl	8012b10 <HAL_GetTick>
 8016c4c:	4602      	mov	r2, r0
 8016c4e:	69bb      	ldr	r3, [r7, #24]
 8016c50:	1ad3      	subs	r3, r2, r3
 8016c52:	69fa      	ldr	r2, [r7, #28]
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d902      	bls.n	8016c5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8016c58:	69fb      	ldr	r3, [r7, #28]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d13d      	bne.n	8016cda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	685a      	ldr	r2, [r3, #4]
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8016c6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	685b      	ldr	r3, [r3, #4]
 8016c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016c76:	d111      	bne.n	8016c9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	689b      	ldr	r3, [r3, #8]
 8016c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016c80:	d004      	beq.n	8016c8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	689b      	ldr	r3, [r3, #8]
 8016c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c8a:	d107      	bne.n	8016c9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	681a      	ldr	r2, [r3, #0]
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016c9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016ca4:	d10f      	bne.n	8016cc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	681a      	ldr	r2, [r3, #0]
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016cb4:	601a      	str	r2, [r3, #0]
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	681a      	ldr	r2, [r3, #0]
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016cc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	2201      	movs	r2, #1
 8016cca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8016cd6:	2303      	movs	r3, #3
 8016cd8:	e017      	b.n	8016d0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8016cda:	697b      	ldr	r3, [r7, #20]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d101      	bne.n	8016ce4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	3b01      	subs	r3, #1
 8016ce8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	689a      	ldr	r2, [r3, #8]
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	4013      	ands	r3, r2
 8016cf4:	68ba      	ldr	r2, [r7, #8]
 8016cf6:	429a      	cmp	r2, r3
 8016cf8:	bf0c      	ite	eq
 8016cfa:	2301      	moveq	r3, #1
 8016cfc:	2300      	movne	r3, #0
 8016cfe:	b2db      	uxtb	r3, r3
 8016d00:	461a      	mov	r2, r3
 8016d02:	79fb      	ldrb	r3, [r7, #7]
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d19b      	bne.n	8016c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8016d08:	2300      	movs	r3, #0
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	3720      	adds	r7, #32
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bd80      	pop	{r7, pc}
 8016d12:	bf00      	nop
 8016d14:	20000004 	.word	0x20000004

08016d18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b088      	sub	sp, #32
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	60f8      	str	r0, [r7, #12]
 8016d20:	60b9      	str	r1, [r7, #8]
 8016d22:	607a      	str	r2, [r7, #4]
 8016d24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8016d26:	f7fb fef3 	bl	8012b10 <HAL_GetTick>
 8016d2a:	4602      	mov	r2, r0
 8016d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d2e:	1a9b      	subs	r3, r3, r2
 8016d30:	683a      	ldr	r2, [r7, #0]
 8016d32:	4413      	add	r3, r2
 8016d34:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8016d36:	f7fb feeb 	bl	8012b10 <HAL_GetTick>
 8016d3a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8016d3c:	4b3e      	ldr	r3, [pc, #248]	; (8016e38 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8016d3e:	681a      	ldr	r2, [r3, #0]
 8016d40:	4613      	mov	r3, r2
 8016d42:	009b      	lsls	r3, r3, #2
 8016d44:	4413      	add	r3, r2
 8016d46:	00da      	lsls	r2, r3, #3
 8016d48:	1ad3      	subs	r3, r2, r3
 8016d4a:	0d1b      	lsrs	r3, r3, #20
 8016d4c:	69fa      	ldr	r2, [r7, #28]
 8016d4e:	fb02 f303 	mul.w	r3, r2, r3
 8016d52:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8016d54:	e062      	b.n	8016e1c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8016d56:	68bb      	ldr	r3, [r7, #8]
 8016d58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8016d5c:	d109      	bne.n	8016d72 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d106      	bne.n	8016d72 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	330c      	adds	r3, #12
 8016d6a:	781b      	ldrb	r3, [r3, #0]
 8016d6c:	b2db      	uxtb	r3, r3
 8016d6e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8016d70:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8016d72:	683b      	ldr	r3, [r7, #0]
 8016d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d78:	d050      	beq.n	8016e1c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8016d7a:	f7fb fec9 	bl	8012b10 <HAL_GetTick>
 8016d7e:	4602      	mov	r2, r0
 8016d80:	69bb      	ldr	r3, [r7, #24]
 8016d82:	1ad3      	subs	r3, r2, r3
 8016d84:	69fa      	ldr	r2, [r7, #28]
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d902      	bls.n	8016d90 <SPI_WaitFifoStateUntilTimeout+0x78>
 8016d8a:	69fb      	ldr	r3, [r7, #28]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d13d      	bne.n	8016e0c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	685a      	ldr	r2, [r3, #4]
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8016d9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	685b      	ldr	r3, [r3, #4]
 8016da4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016da8:	d111      	bne.n	8016dce <SPI_WaitFifoStateUntilTimeout+0xb6>
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	689b      	ldr	r3, [r3, #8]
 8016dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016db2:	d004      	beq.n	8016dbe <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	689b      	ldr	r3, [r3, #8]
 8016db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016dbc:	d107      	bne.n	8016dce <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	681a      	ldr	r2, [r3, #0]
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016dcc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016dd6:	d10f      	bne.n	8016df8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	681a      	ldr	r2, [r3, #0]
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016de6:	601a      	str	r2, [r3, #0]
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	681a      	ldr	r2, [r3, #0]
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016df6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	2201      	movs	r2, #1
 8016dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	2200      	movs	r2, #0
 8016e04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8016e08:	2303      	movs	r3, #3
 8016e0a:	e010      	b.n	8016e2e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8016e0c:	693b      	ldr	r3, [r7, #16]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d101      	bne.n	8016e16 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8016e12:	2300      	movs	r3, #0
 8016e14:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	3b01      	subs	r3, #1
 8016e1a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	689a      	ldr	r2, [r3, #8]
 8016e22:	68bb      	ldr	r3, [r7, #8]
 8016e24:	4013      	ands	r3, r2
 8016e26:	687a      	ldr	r2, [r7, #4]
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	d194      	bne.n	8016d56 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8016e2c:	2300      	movs	r3, #0
}
 8016e2e:	4618      	mov	r0, r3
 8016e30:	3720      	adds	r7, #32
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	20000004 	.word	0x20000004

08016e3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b086      	sub	sp, #24
 8016e40:	af02      	add	r7, sp, #8
 8016e42:	60f8      	str	r0, [r7, #12]
 8016e44:	60b9      	str	r1, [r7, #8]
 8016e46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	9300      	str	r3, [sp, #0]
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	2200      	movs	r2, #0
 8016e50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8016e54:	68f8      	ldr	r0, [r7, #12]
 8016e56:	f7ff ff5f 	bl	8016d18 <SPI_WaitFifoStateUntilTimeout>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d007      	beq.n	8016e70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e64:	f043 0220 	orr.w	r2, r3, #32
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8016e6c:	2303      	movs	r3, #3
 8016e6e:	e027      	b.n	8016ec0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	9300      	str	r3, [sp, #0]
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	2200      	movs	r2, #0
 8016e78:	2180      	movs	r1, #128	; 0x80
 8016e7a:	68f8      	ldr	r0, [r7, #12]
 8016e7c:	f7ff fec4 	bl	8016c08 <SPI_WaitFlagStateUntilTimeout>
 8016e80:	4603      	mov	r3, r0
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d007      	beq.n	8016e96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e8a:	f043 0220 	orr.w	r2, r3, #32
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8016e92:	2303      	movs	r3, #3
 8016e94:	e014      	b.n	8016ec0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	9300      	str	r3, [sp, #0]
 8016e9a:	68bb      	ldr	r3, [r7, #8]
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8016ea2:	68f8      	ldr	r0, [r7, #12]
 8016ea4:	f7ff ff38 	bl	8016d18 <SPI_WaitFifoStateUntilTimeout>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d007      	beq.n	8016ebe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016eb2:	f043 0220 	orr.w	r2, r3, #32
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8016eba:	2303      	movs	r3, #3
 8016ebc:	e000      	b.n	8016ec0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8016ebe:	2300      	movs	r3, #0
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	3710      	adds	r7, #16
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}

08016ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b082      	sub	sp, #8
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d101      	bne.n	8016eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	e040      	b.n	8016f5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d106      	bne.n	8016ef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016eea:	6878      	ldr	r0, [r7, #4]
 8016eec:	f7fb faf0 	bl	80124d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	2224      	movs	r2, #36	; 0x24
 8016ef4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	681a      	ldr	r2, [r3, #0]
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	f022 0201 	bic.w	r2, r2, #1
 8016f04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016f06:	6878      	ldr	r0, [r7, #4]
 8016f08:	f000 f8c0 	bl	801708c <UART_SetConfig>
 8016f0c:	4603      	mov	r3, r0
 8016f0e:	2b01      	cmp	r3, #1
 8016f10:	d101      	bne.n	8016f16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8016f12:	2301      	movs	r3, #1
 8016f14:	e022      	b.n	8016f5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d002      	beq.n	8016f24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	f000 fb3e 	bl	80175a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	685a      	ldr	r2, [r3, #4]
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	689a      	ldr	r2, [r3, #8]
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	681a      	ldr	r2, [r3, #0]
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	f042 0201 	orr.w	r2, r2, #1
 8016f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016f54:	6878      	ldr	r0, [r7, #4]
 8016f56:	f000 fbc5 	bl	80176e4 <UART_CheckIdleState>
 8016f5a:	4603      	mov	r3, r0
}
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	3708      	adds	r7, #8
 8016f60:	46bd      	mov	sp, r7
 8016f62:	bd80      	pop	{r7, pc}

08016f64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b08a      	sub	sp, #40	; 0x28
 8016f68:	af02      	add	r7, sp, #8
 8016f6a:	60f8      	str	r0, [r7, #12]
 8016f6c:	60b9      	str	r1, [r7, #8]
 8016f6e:	603b      	str	r3, [r7, #0]
 8016f70:	4613      	mov	r3, r2
 8016f72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f78:	2b20      	cmp	r3, #32
 8016f7a:	f040 8082 	bne.w	8017082 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d002      	beq.n	8016f8a <HAL_UART_Transmit+0x26>
 8016f84:	88fb      	ldrh	r3, [r7, #6]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d101      	bne.n	8016f8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8016f8a:	2301      	movs	r3, #1
 8016f8c:	e07a      	b.n	8017084 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8016f94:	2b01      	cmp	r3, #1
 8016f96:	d101      	bne.n	8016f9c <HAL_UART_Transmit+0x38>
 8016f98:	2302      	movs	r3, #2
 8016f9a:	e073      	b.n	8017084 <HAL_UART_Transmit+0x120>
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	2201      	movs	r2, #1
 8016fa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	2221      	movs	r2, #33	; 0x21
 8016fb0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8016fb2:	f7fb fdad 	bl	8012b10 <HAL_GetTick>
 8016fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	88fa      	ldrh	r2, [r7, #6]
 8016fbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	88fa      	ldrh	r2, [r7, #6]
 8016fc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	689b      	ldr	r3, [r3, #8]
 8016fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016fd0:	d108      	bne.n	8016fe4 <HAL_UART_Transmit+0x80>
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	691b      	ldr	r3, [r3, #16]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d104      	bne.n	8016fe4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8016fda:	2300      	movs	r3, #0
 8016fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	61bb      	str	r3, [r7, #24]
 8016fe2:	e003      	b.n	8016fec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016fe8:	2300      	movs	r3, #0
 8016fea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8016ff4:	e02d      	b.n	8017052 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016ff6:	683b      	ldr	r3, [r7, #0]
 8016ff8:	9300      	str	r3, [sp, #0]
 8016ffa:	697b      	ldr	r3, [r7, #20]
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	2180      	movs	r1, #128	; 0x80
 8017000:	68f8      	ldr	r0, [r7, #12]
 8017002:	f000 fbb8 	bl	8017776 <UART_WaitOnFlagUntilTimeout>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d001      	beq.n	8017010 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 801700c:	2303      	movs	r3, #3
 801700e:	e039      	b.n	8017084 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8017010:	69fb      	ldr	r3, [r7, #28]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d10b      	bne.n	801702e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017016:	69bb      	ldr	r3, [r7, #24]
 8017018:	881a      	ldrh	r2, [r3, #0]
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017022:	b292      	uxth	r2, r2
 8017024:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8017026:	69bb      	ldr	r3, [r7, #24]
 8017028:	3302      	adds	r3, #2
 801702a:	61bb      	str	r3, [r7, #24]
 801702c:	e008      	b.n	8017040 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801702e:	69fb      	ldr	r3, [r7, #28]
 8017030:	781a      	ldrb	r2, [r3, #0]
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	b292      	uxth	r2, r2
 8017038:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801703a:	69fb      	ldr	r3, [r7, #28]
 801703c:	3301      	adds	r3, #1
 801703e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8017046:	b29b      	uxth	r3, r3
 8017048:	3b01      	subs	r3, #1
 801704a:	b29a      	uxth	r2, r3
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8017058:	b29b      	uxth	r3, r3
 801705a:	2b00      	cmp	r3, #0
 801705c:	d1cb      	bne.n	8016ff6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	9300      	str	r3, [sp, #0]
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	2200      	movs	r2, #0
 8017066:	2140      	movs	r1, #64	; 0x40
 8017068:	68f8      	ldr	r0, [r7, #12]
 801706a:	f000 fb84 	bl	8017776 <UART_WaitOnFlagUntilTimeout>
 801706e:	4603      	mov	r3, r0
 8017070:	2b00      	cmp	r3, #0
 8017072:	d001      	beq.n	8017078 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8017074:	2303      	movs	r3, #3
 8017076:	e005      	b.n	8017084 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	2220      	movs	r2, #32
 801707c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801707e:	2300      	movs	r3, #0
 8017080:	e000      	b.n	8017084 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8017082:	2302      	movs	r3, #2
  }
}
 8017084:	4618      	mov	r0, r3
 8017086:	3720      	adds	r7, #32
 8017088:	46bd      	mov	sp, r7
 801708a:	bd80      	pop	{r7, pc}

0801708c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801708c:	b5b0      	push	{r4, r5, r7, lr}
 801708e:	b088      	sub	sp, #32
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017094:	2300      	movs	r3, #0
 8017096:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	689a      	ldr	r2, [r3, #8]
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	691b      	ldr	r3, [r3, #16]
 80170a0:	431a      	orrs	r2, r3
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	695b      	ldr	r3, [r3, #20]
 80170a6:	431a      	orrs	r2, r3
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	69db      	ldr	r3, [r3, #28]
 80170ac:	4313      	orrs	r3, r2
 80170ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	681a      	ldr	r2, [r3, #0]
 80170b6:	4bad      	ldr	r3, [pc, #692]	; (801736c <UART_SetConfig+0x2e0>)
 80170b8:	4013      	ands	r3, r2
 80170ba:	687a      	ldr	r2, [r7, #4]
 80170bc:	6812      	ldr	r2, [r2, #0]
 80170be:	69f9      	ldr	r1, [r7, #28]
 80170c0:	430b      	orrs	r3, r1
 80170c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	685b      	ldr	r3, [r3, #4]
 80170ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	68da      	ldr	r2, [r3, #12]
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	430a      	orrs	r2, r1
 80170d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	699b      	ldr	r3, [r3, #24]
 80170de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	4aa2      	ldr	r2, [pc, #648]	; (8017370 <UART_SetConfig+0x2e4>)
 80170e6:	4293      	cmp	r3, r2
 80170e8:	d004      	beq.n	80170f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	6a1b      	ldr	r3, [r3, #32]
 80170ee:	69fa      	ldr	r2, [r7, #28]
 80170f0:	4313      	orrs	r3, r2
 80170f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	689b      	ldr	r3, [r3, #8]
 80170fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	69fa      	ldr	r2, [r7, #28]
 8017104:	430a      	orrs	r2, r1
 8017106:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	4a99      	ldr	r2, [pc, #612]	; (8017374 <UART_SetConfig+0x2e8>)
 801710e:	4293      	cmp	r3, r2
 8017110:	d121      	bne.n	8017156 <UART_SetConfig+0xca>
 8017112:	4b99      	ldr	r3, [pc, #612]	; (8017378 <UART_SetConfig+0x2ec>)
 8017114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017118:	f003 0303 	and.w	r3, r3, #3
 801711c:	2b03      	cmp	r3, #3
 801711e:	d817      	bhi.n	8017150 <UART_SetConfig+0xc4>
 8017120:	a201      	add	r2, pc, #4	; (adr r2, 8017128 <UART_SetConfig+0x9c>)
 8017122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017126:	bf00      	nop
 8017128:	08017139 	.word	0x08017139
 801712c:	08017145 	.word	0x08017145
 8017130:	0801713f 	.word	0x0801713f
 8017134:	0801714b 	.word	0x0801714b
 8017138:	2301      	movs	r3, #1
 801713a:	76fb      	strb	r3, [r7, #27]
 801713c:	e0e7      	b.n	801730e <UART_SetConfig+0x282>
 801713e:	2302      	movs	r3, #2
 8017140:	76fb      	strb	r3, [r7, #27]
 8017142:	e0e4      	b.n	801730e <UART_SetConfig+0x282>
 8017144:	2304      	movs	r3, #4
 8017146:	76fb      	strb	r3, [r7, #27]
 8017148:	e0e1      	b.n	801730e <UART_SetConfig+0x282>
 801714a:	2308      	movs	r3, #8
 801714c:	76fb      	strb	r3, [r7, #27]
 801714e:	e0de      	b.n	801730e <UART_SetConfig+0x282>
 8017150:	2310      	movs	r3, #16
 8017152:	76fb      	strb	r3, [r7, #27]
 8017154:	e0db      	b.n	801730e <UART_SetConfig+0x282>
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	4a88      	ldr	r2, [pc, #544]	; (801737c <UART_SetConfig+0x2f0>)
 801715c:	4293      	cmp	r3, r2
 801715e:	d132      	bne.n	80171c6 <UART_SetConfig+0x13a>
 8017160:	4b85      	ldr	r3, [pc, #532]	; (8017378 <UART_SetConfig+0x2ec>)
 8017162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017166:	f003 030c 	and.w	r3, r3, #12
 801716a:	2b0c      	cmp	r3, #12
 801716c:	d828      	bhi.n	80171c0 <UART_SetConfig+0x134>
 801716e:	a201      	add	r2, pc, #4	; (adr r2, 8017174 <UART_SetConfig+0xe8>)
 8017170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017174:	080171a9 	.word	0x080171a9
 8017178:	080171c1 	.word	0x080171c1
 801717c:	080171c1 	.word	0x080171c1
 8017180:	080171c1 	.word	0x080171c1
 8017184:	080171b5 	.word	0x080171b5
 8017188:	080171c1 	.word	0x080171c1
 801718c:	080171c1 	.word	0x080171c1
 8017190:	080171c1 	.word	0x080171c1
 8017194:	080171af 	.word	0x080171af
 8017198:	080171c1 	.word	0x080171c1
 801719c:	080171c1 	.word	0x080171c1
 80171a0:	080171c1 	.word	0x080171c1
 80171a4:	080171bb 	.word	0x080171bb
 80171a8:	2300      	movs	r3, #0
 80171aa:	76fb      	strb	r3, [r7, #27]
 80171ac:	e0af      	b.n	801730e <UART_SetConfig+0x282>
 80171ae:	2302      	movs	r3, #2
 80171b0:	76fb      	strb	r3, [r7, #27]
 80171b2:	e0ac      	b.n	801730e <UART_SetConfig+0x282>
 80171b4:	2304      	movs	r3, #4
 80171b6:	76fb      	strb	r3, [r7, #27]
 80171b8:	e0a9      	b.n	801730e <UART_SetConfig+0x282>
 80171ba:	2308      	movs	r3, #8
 80171bc:	76fb      	strb	r3, [r7, #27]
 80171be:	e0a6      	b.n	801730e <UART_SetConfig+0x282>
 80171c0:	2310      	movs	r3, #16
 80171c2:	76fb      	strb	r3, [r7, #27]
 80171c4:	e0a3      	b.n	801730e <UART_SetConfig+0x282>
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	4a6d      	ldr	r2, [pc, #436]	; (8017380 <UART_SetConfig+0x2f4>)
 80171cc:	4293      	cmp	r3, r2
 80171ce:	d120      	bne.n	8017212 <UART_SetConfig+0x186>
 80171d0:	4b69      	ldr	r3, [pc, #420]	; (8017378 <UART_SetConfig+0x2ec>)
 80171d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80171d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80171da:	2b30      	cmp	r3, #48	; 0x30
 80171dc:	d013      	beq.n	8017206 <UART_SetConfig+0x17a>
 80171de:	2b30      	cmp	r3, #48	; 0x30
 80171e0:	d814      	bhi.n	801720c <UART_SetConfig+0x180>
 80171e2:	2b20      	cmp	r3, #32
 80171e4:	d009      	beq.n	80171fa <UART_SetConfig+0x16e>
 80171e6:	2b20      	cmp	r3, #32
 80171e8:	d810      	bhi.n	801720c <UART_SetConfig+0x180>
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d002      	beq.n	80171f4 <UART_SetConfig+0x168>
 80171ee:	2b10      	cmp	r3, #16
 80171f0:	d006      	beq.n	8017200 <UART_SetConfig+0x174>
 80171f2:	e00b      	b.n	801720c <UART_SetConfig+0x180>
 80171f4:	2300      	movs	r3, #0
 80171f6:	76fb      	strb	r3, [r7, #27]
 80171f8:	e089      	b.n	801730e <UART_SetConfig+0x282>
 80171fa:	2302      	movs	r3, #2
 80171fc:	76fb      	strb	r3, [r7, #27]
 80171fe:	e086      	b.n	801730e <UART_SetConfig+0x282>
 8017200:	2304      	movs	r3, #4
 8017202:	76fb      	strb	r3, [r7, #27]
 8017204:	e083      	b.n	801730e <UART_SetConfig+0x282>
 8017206:	2308      	movs	r3, #8
 8017208:	76fb      	strb	r3, [r7, #27]
 801720a:	e080      	b.n	801730e <UART_SetConfig+0x282>
 801720c:	2310      	movs	r3, #16
 801720e:	76fb      	strb	r3, [r7, #27]
 8017210:	e07d      	b.n	801730e <UART_SetConfig+0x282>
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	4a5b      	ldr	r2, [pc, #364]	; (8017384 <UART_SetConfig+0x2f8>)
 8017218:	4293      	cmp	r3, r2
 801721a:	d120      	bne.n	801725e <UART_SetConfig+0x1d2>
 801721c:	4b56      	ldr	r3, [pc, #344]	; (8017378 <UART_SetConfig+0x2ec>)
 801721e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017222:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017226:	2bc0      	cmp	r3, #192	; 0xc0
 8017228:	d013      	beq.n	8017252 <UART_SetConfig+0x1c6>
 801722a:	2bc0      	cmp	r3, #192	; 0xc0
 801722c:	d814      	bhi.n	8017258 <UART_SetConfig+0x1cc>
 801722e:	2b80      	cmp	r3, #128	; 0x80
 8017230:	d009      	beq.n	8017246 <UART_SetConfig+0x1ba>
 8017232:	2b80      	cmp	r3, #128	; 0x80
 8017234:	d810      	bhi.n	8017258 <UART_SetConfig+0x1cc>
 8017236:	2b00      	cmp	r3, #0
 8017238:	d002      	beq.n	8017240 <UART_SetConfig+0x1b4>
 801723a:	2b40      	cmp	r3, #64	; 0x40
 801723c:	d006      	beq.n	801724c <UART_SetConfig+0x1c0>
 801723e:	e00b      	b.n	8017258 <UART_SetConfig+0x1cc>
 8017240:	2300      	movs	r3, #0
 8017242:	76fb      	strb	r3, [r7, #27]
 8017244:	e063      	b.n	801730e <UART_SetConfig+0x282>
 8017246:	2302      	movs	r3, #2
 8017248:	76fb      	strb	r3, [r7, #27]
 801724a:	e060      	b.n	801730e <UART_SetConfig+0x282>
 801724c:	2304      	movs	r3, #4
 801724e:	76fb      	strb	r3, [r7, #27]
 8017250:	e05d      	b.n	801730e <UART_SetConfig+0x282>
 8017252:	2308      	movs	r3, #8
 8017254:	76fb      	strb	r3, [r7, #27]
 8017256:	e05a      	b.n	801730e <UART_SetConfig+0x282>
 8017258:	2310      	movs	r3, #16
 801725a:	76fb      	strb	r3, [r7, #27]
 801725c:	e057      	b.n	801730e <UART_SetConfig+0x282>
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	4a49      	ldr	r2, [pc, #292]	; (8017388 <UART_SetConfig+0x2fc>)
 8017264:	4293      	cmp	r3, r2
 8017266:	d125      	bne.n	80172b4 <UART_SetConfig+0x228>
 8017268:	4b43      	ldr	r3, [pc, #268]	; (8017378 <UART_SetConfig+0x2ec>)
 801726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801726e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017276:	d017      	beq.n	80172a8 <UART_SetConfig+0x21c>
 8017278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801727c:	d817      	bhi.n	80172ae <UART_SetConfig+0x222>
 801727e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017282:	d00b      	beq.n	801729c <UART_SetConfig+0x210>
 8017284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017288:	d811      	bhi.n	80172ae <UART_SetConfig+0x222>
 801728a:	2b00      	cmp	r3, #0
 801728c:	d003      	beq.n	8017296 <UART_SetConfig+0x20a>
 801728e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017292:	d006      	beq.n	80172a2 <UART_SetConfig+0x216>
 8017294:	e00b      	b.n	80172ae <UART_SetConfig+0x222>
 8017296:	2300      	movs	r3, #0
 8017298:	76fb      	strb	r3, [r7, #27]
 801729a:	e038      	b.n	801730e <UART_SetConfig+0x282>
 801729c:	2302      	movs	r3, #2
 801729e:	76fb      	strb	r3, [r7, #27]
 80172a0:	e035      	b.n	801730e <UART_SetConfig+0x282>
 80172a2:	2304      	movs	r3, #4
 80172a4:	76fb      	strb	r3, [r7, #27]
 80172a6:	e032      	b.n	801730e <UART_SetConfig+0x282>
 80172a8:	2308      	movs	r3, #8
 80172aa:	76fb      	strb	r3, [r7, #27]
 80172ac:	e02f      	b.n	801730e <UART_SetConfig+0x282>
 80172ae:	2310      	movs	r3, #16
 80172b0:	76fb      	strb	r3, [r7, #27]
 80172b2:	e02c      	b.n	801730e <UART_SetConfig+0x282>
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	4a2d      	ldr	r2, [pc, #180]	; (8017370 <UART_SetConfig+0x2e4>)
 80172ba:	4293      	cmp	r3, r2
 80172bc:	d125      	bne.n	801730a <UART_SetConfig+0x27e>
 80172be:	4b2e      	ldr	r3, [pc, #184]	; (8017378 <UART_SetConfig+0x2ec>)
 80172c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80172c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80172c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80172cc:	d017      	beq.n	80172fe <UART_SetConfig+0x272>
 80172ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80172d2:	d817      	bhi.n	8017304 <UART_SetConfig+0x278>
 80172d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80172d8:	d00b      	beq.n	80172f2 <UART_SetConfig+0x266>
 80172da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80172de:	d811      	bhi.n	8017304 <UART_SetConfig+0x278>
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d003      	beq.n	80172ec <UART_SetConfig+0x260>
 80172e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80172e8:	d006      	beq.n	80172f8 <UART_SetConfig+0x26c>
 80172ea:	e00b      	b.n	8017304 <UART_SetConfig+0x278>
 80172ec:	2300      	movs	r3, #0
 80172ee:	76fb      	strb	r3, [r7, #27]
 80172f0:	e00d      	b.n	801730e <UART_SetConfig+0x282>
 80172f2:	2302      	movs	r3, #2
 80172f4:	76fb      	strb	r3, [r7, #27]
 80172f6:	e00a      	b.n	801730e <UART_SetConfig+0x282>
 80172f8:	2304      	movs	r3, #4
 80172fa:	76fb      	strb	r3, [r7, #27]
 80172fc:	e007      	b.n	801730e <UART_SetConfig+0x282>
 80172fe:	2308      	movs	r3, #8
 8017300:	76fb      	strb	r3, [r7, #27]
 8017302:	e004      	b.n	801730e <UART_SetConfig+0x282>
 8017304:	2310      	movs	r3, #16
 8017306:	76fb      	strb	r3, [r7, #27]
 8017308:	e001      	b.n	801730e <UART_SetConfig+0x282>
 801730a:	2310      	movs	r3, #16
 801730c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	4a17      	ldr	r2, [pc, #92]	; (8017370 <UART_SetConfig+0x2e4>)
 8017314:	4293      	cmp	r3, r2
 8017316:	f040 8087 	bne.w	8017428 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801731a:	7efb      	ldrb	r3, [r7, #27]
 801731c:	2b08      	cmp	r3, #8
 801731e:	d837      	bhi.n	8017390 <UART_SetConfig+0x304>
 8017320:	a201      	add	r2, pc, #4	; (adr r2, 8017328 <UART_SetConfig+0x29c>)
 8017322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017326:	bf00      	nop
 8017328:	0801734d 	.word	0x0801734d
 801732c:	08017391 	.word	0x08017391
 8017330:	08017355 	.word	0x08017355
 8017334:	08017391 	.word	0x08017391
 8017338:	0801735b 	.word	0x0801735b
 801733c:	08017391 	.word	0x08017391
 8017340:	08017391 	.word	0x08017391
 8017344:	08017391 	.word	0x08017391
 8017348:	08017363 	.word	0x08017363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801734c:	f7fe fb26 	bl	801599c <HAL_RCC_GetPCLK1Freq>
 8017350:	6178      	str	r0, [r7, #20]
        break;
 8017352:	e022      	b.n	801739a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8017354:	4b0d      	ldr	r3, [pc, #52]	; (801738c <UART_SetConfig+0x300>)
 8017356:	617b      	str	r3, [r7, #20]
        break;
 8017358:	e01f      	b.n	801739a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801735a:	f7fe fa87 	bl	801586c <HAL_RCC_GetSysClockFreq>
 801735e:	6178      	str	r0, [r7, #20]
        break;
 8017360:	e01b      	b.n	801739a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017366:	617b      	str	r3, [r7, #20]
        break;
 8017368:	e017      	b.n	801739a <UART_SetConfig+0x30e>
 801736a:	bf00      	nop
 801736c:	efff69f3 	.word	0xefff69f3
 8017370:	40008000 	.word	0x40008000
 8017374:	40013800 	.word	0x40013800
 8017378:	40021000 	.word	0x40021000
 801737c:	40004400 	.word	0x40004400
 8017380:	40004800 	.word	0x40004800
 8017384:	40004c00 	.word	0x40004c00
 8017388:	40005000 	.word	0x40005000
 801738c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8017390:	2300      	movs	r3, #0
 8017392:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8017394:	2301      	movs	r3, #1
 8017396:	76bb      	strb	r3, [r7, #26]
        break;
 8017398:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801739a:	697b      	ldr	r3, [r7, #20]
 801739c:	2b00      	cmp	r3, #0
 801739e:	f000 80f1 	beq.w	8017584 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	685a      	ldr	r2, [r3, #4]
 80173a6:	4613      	mov	r3, r2
 80173a8:	005b      	lsls	r3, r3, #1
 80173aa:	4413      	add	r3, r2
 80173ac:	697a      	ldr	r2, [r7, #20]
 80173ae:	429a      	cmp	r2, r3
 80173b0:	d305      	bcc.n	80173be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	685b      	ldr	r3, [r3, #4]
 80173b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80173b8:	697a      	ldr	r2, [r7, #20]
 80173ba:	429a      	cmp	r2, r3
 80173bc:	d902      	bls.n	80173c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80173be:	2301      	movs	r3, #1
 80173c0:	76bb      	strb	r3, [r7, #26]
 80173c2:	e0df      	b.n	8017584 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80173c4:	697b      	ldr	r3, [r7, #20]
 80173c6:	4618      	mov	r0, r3
 80173c8:	f04f 0100 	mov.w	r1, #0
 80173cc:	f04f 0200 	mov.w	r2, #0
 80173d0:	f04f 0300 	mov.w	r3, #0
 80173d4:	020b      	lsls	r3, r1, #8
 80173d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80173da:	0202      	lsls	r2, r0, #8
 80173dc:	6879      	ldr	r1, [r7, #4]
 80173de:	6849      	ldr	r1, [r1, #4]
 80173e0:	0849      	lsrs	r1, r1, #1
 80173e2:	4608      	mov	r0, r1
 80173e4:	f04f 0100 	mov.w	r1, #0
 80173e8:	1814      	adds	r4, r2, r0
 80173ea:	eb43 0501 	adc.w	r5, r3, r1
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	685b      	ldr	r3, [r3, #4]
 80173f2:	461a      	mov	r2, r3
 80173f4:	f04f 0300 	mov.w	r3, #0
 80173f8:	4620      	mov	r0, r4
 80173fa:	4629      	mov	r1, r5
 80173fc:	f7f9 fa4e 	bl	801089c <__aeabi_uldivmod>
 8017400:	4602      	mov	r2, r0
 8017402:	460b      	mov	r3, r1
 8017404:	4613      	mov	r3, r2
 8017406:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017408:	693b      	ldr	r3, [r7, #16]
 801740a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801740e:	d308      	bcc.n	8017422 <UART_SetConfig+0x396>
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017416:	d204      	bcs.n	8017422 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	693a      	ldr	r2, [r7, #16]
 801741e:	60da      	str	r2, [r3, #12]
 8017420:	e0b0      	b.n	8017584 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8017422:	2301      	movs	r3, #1
 8017424:	76bb      	strb	r3, [r7, #26]
 8017426:	e0ad      	b.n	8017584 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	69db      	ldr	r3, [r3, #28]
 801742c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017430:	d15c      	bne.n	80174ec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8017432:	7efb      	ldrb	r3, [r7, #27]
 8017434:	2b08      	cmp	r3, #8
 8017436:	d828      	bhi.n	801748a <UART_SetConfig+0x3fe>
 8017438:	a201      	add	r2, pc, #4	; (adr r2, 8017440 <UART_SetConfig+0x3b4>)
 801743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801743e:	bf00      	nop
 8017440:	08017465 	.word	0x08017465
 8017444:	0801746d 	.word	0x0801746d
 8017448:	08017475 	.word	0x08017475
 801744c:	0801748b 	.word	0x0801748b
 8017450:	0801747b 	.word	0x0801747b
 8017454:	0801748b 	.word	0x0801748b
 8017458:	0801748b 	.word	0x0801748b
 801745c:	0801748b 	.word	0x0801748b
 8017460:	08017483 	.word	0x08017483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017464:	f7fe fa9a 	bl	801599c <HAL_RCC_GetPCLK1Freq>
 8017468:	6178      	str	r0, [r7, #20]
        break;
 801746a:	e013      	b.n	8017494 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801746c:	f7fe faac 	bl	80159c8 <HAL_RCC_GetPCLK2Freq>
 8017470:	6178      	str	r0, [r7, #20]
        break;
 8017472:	e00f      	b.n	8017494 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8017474:	4b49      	ldr	r3, [pc, #292]	; (801759c <UART_SetConfig+0x510>)
 8017476:	617b      	str	r3, [r7, #20]
        break;
 8017478:	e00c      	b.n	8017494 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801747a:	f7fe f9f7 	bl	801586c <HAL_RCC_GetSysClockFreq>
 801747e:	6178      	str	r0, [r7, #20]
        break;
 8017480:	e008      	b.n	8017494 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017486:	617b      	str	r3, [r7, #20]
        break;
 8017488:	e004      	b.n	8017494 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 801748a:	2300      	movs	r3, #0
 801748c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801748e:	2301      	movs	r3, #1
 8017490:	76bb      	strb	r3, [r7, #26]
        break;
 8017492:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017494:	697b      	ldr	r3, [r7, #20]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d074      	beq.n	8017584 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	005a      	lsls	r2, r3, #1
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	685b      	ldr	r3, [r3, #4]
 80174a2:	085b      	lsrs	r3, r3, #1
 80174a4:	441a      	add	r2, r3
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	685b      	ldr	r3, [r3, #4]
 80174aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80174ae:	b29b      	uxth	r3, r3
 80174b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	2b0f      	cmp	r3, #15
 80174b6:	d916      	bls.n	80174e6 <UART_SetConfig+0x45a>
 80174b8:	693b      	ldr	r3, [r7, #16]
 80174ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80174be:	d212      	bcs.n	80174e6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80174c0:	693b      	ldr	r3, [r7, #16]
 80174c2:	b29b      	uxth	r3, r3
 80174c4:	f023 030f 	bic.w	r3, r3, #15
 80174c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80174ca:	693b      	ldr	r3, [r7, #16]
 80174cc:	085b      	lsrs	r3, r3, #1
 80174ce:	b29b      	uxth	r3, r3
 80174d0:	f003 0307 	and.w	r3, r3, #7
 80174d4:	b29a      	uxth	r2, r3
 80174d6:	89fb      	ldrh	r3, [r7, #14]
 80174d8:	4313      	orrs	r3, r2
 80174da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	89fa      	ldrh	r2, [r7, #14]
 80174e2:	60da      	str	r2, [r3, #12]
 80174e4:	e04e      	b.n	8017584 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80174e6:	2301      	movs	r3, #1
 80174e8:	76bb      	strb	r3, [r7, #26]
 80174ea:	e04b      	b.n	8017584 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80174ec:	7efb      	ldrb	r3, [r7, #27]
 80174ee:	2b08      	cmp	r3, #8
 80174f0:	d827      	bhi.n	8017542 <UART_SetConfig+0x4b6>
 80174f2:	a201      	add	r2, pc, #4	; (adr r2, 80174f8 <UART_SetConfig+0x46c>)
 80174f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174f8:	0801751d 	.word	0x0801751d
 80174fc:	08017525 	.word	0x08017525
 8017500:	0801752d 	.word	0x0801752d
 8017504:	08017543 	.word	0x08017543
 8017508:	08017533 	.word	0x08017533
 801750c:	08017543 	.word	0x08017543
 8017510:	08017543 	.word	0x08017543
 8017514:	08017543 	.word	0x08017543
 8017518:	0801753b 	.word	0x0801753b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801751c:	f7fe fa3e 	bl	801599c <HAL_RCC_GetPCLK1Freq>
 8017520:	6178      	str	r0, [r7, #20]
        break;
 8017522:	e013      	b.n	801754c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017524:	f7fe fa50 	bl	80159c8 <HAL_RCC_GetPCLK2Freq>
 8017528:	6178      	str	r0, [r7, #20]
        break;
 801752a:	e00f      	b.n	801754c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801752c:	4b1b      	ldr	r3, [pc, #108]	; (801759c <UART_SetConfig+0x510>)
 801752e:	617b      	str	r3, [r7, #20]
        break;
 8017530:	e00c      	b.n	801754c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017532:	f7fe f99b 	bl	801586c <HAL_RCC_GetSysClockFreq>
 8017536:	6178      	str	r0, [r7, #20]
        break;
 8017538:	e008      	b.n	801754c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801753a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801753e:	617b      	str	r3, [r7, #20]
        break;
 8017540:	e004      	b.n	801754c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8017542:	2300      	movs	r3, #0
 8017544:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8017546:	2301      	movs	r3, #1
 8017548:	76bb      	strb	r3, [r7, #26]
        break;
 801754a:	bf00      	nop
    }

    if (pclk != 0U)
 801754c:	697b      	ldr	r3, [r7, #20]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d018      	beq.n	8017584 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	685b      	ldr	r3, [r3, #4]
 8017556:	085a      	lsrs	r2, r3, #1
 8017558:	697b      	ldr	r3, [r7, #20]
 801755a:	441a      	add	r2, r3
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	685b      	ldr	r3, [r3, #4]
 8017560:	fbb2 f3f3 	udiv	r3, r2, r3
 8017564:	b29b      	uxth	r3, r3
 8017566:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017568:	693b      	ldr	r3, [r7, #16]
 801756a:	2b0f      	cmp	r3, #15
 801756c:	d908      	bls.n	8017580 <UART_SetConfig+0x4f4>
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017574:	d204      	bcs.n	8017580 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	693a      	ldr	r2, [r7, #16]
 801757c:	60da      	str	r2, [r3, #12]
 801757e:	e001      	b.n	8017584 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8017580:	2301      	movs	r3, #1
 8017582:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2200      	movs	r2, #0
 8017588:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	2200      	movs	r2, #0
 801758e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8017590:	7ebb      	ldrb	r3, [r7, #26]
}
 8017592:	4618      	mov	r0, r3
 8017594:	3720      	adds	r7, #32
 8017596:	46bd      	mov	sp, r7
 8017598:	bdb0      	pop	{r4, r5, r7, pc}
 801759a:	bf00      	nop
 801759c:	00f42400 	.word	0x00f42400

080175a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80175a0:	b480      	push	{r7}
 80175a2:	b083      	sub	sp, #12
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175ac:	f003 0301 	and.w	r3, r3, #1
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d00a      	beq.n	80175ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	685b      	ldr	r3, [r3, #4]
 80175ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	430a      	orrs	r2, r1
 80175c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175ce:	f003 0302 	and.w	r3, r3, #2
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d00a      	beq.n	80175ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	685b      	ldr	r3, [r3, #4]
 80175dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	430a      	orrs	r2, r1
 80175ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175f0:	f003 0304 	and.w	r3, r3, #4
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d00a      	beq.n	801760e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	685b      	ldr	r3, [r3, #4]
 80175fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	430a      	orrs	r2, r1
 801760c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017612:	f003 0308 	and.w	r3, r3, #8
 8017616:	2b00      	cmp	r3, #0
 8017618:	d00a      	beq.n	8017630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	685b      	ldr	r3, [r3, #4]
 8017620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	430a      	orrs	r2, r1
 801762e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017634:	f003 0310 	and.w	r3, r3, #16
 8017638:	2b00      	cmp	r3, #0
 801763a:	d00a      	beq.n	8017652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	689b      	ldr	r3, [r3, #8]
 8017642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	430a      	orrs	r2, r1
 8017650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017656:	f003 0320 	and.w	r3, r3, #32
 801765a:	2b00      	cmp	r3, #0
 801765c:	d00a      	beq.n	8017674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	689b      	ldr	r3, [r3, #8]
 8017664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	430a      	orrs	r2, r1
 8017672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801767c:	2b00      	cmp	r3, #0
 801767e:	d01a      	beq.n	80176b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	685b      	ldr	r3, [r3, #4]
 8017686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	430a      	orrs	r2, r1
 8017694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801769a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801769e:	d10a      	bne.n	80176b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	685b      	ldr	r3, [r3, #4]
 80176a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	430a      	orrs	r2, r1
 80176b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d00a      	beq.n	80176d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	685b      	ldr	r3, [r3, #4]
 80176c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	430a      	orrs	r2, r1
 80176d6:	605a      	str	r2, [r3, #4]
  }
}
 80176d8:	bf00      	nop
 80176da:	370c      	adds	r7, #12
 80176dc:	46bd      	mov	sp, r7
 80176de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e2:	4770      	bx	lr

080176e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b086      	sub	sp, #24
 80176e8:	af02      	add	r7, sp, #8
 80176ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2200      	movs	r2, #0
 80176f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80176f4:	f7fb fa0c 	bl	8012b10 <HAL_GetTick>
 80176f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	f003 0308 	and.w	r3, r3, #8
 8017704:	2b08      	cmp	r3, #8
 8017706:	d10e      	bne.n	8017726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801770c:	9300      	str	r3, [sp, #0]
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	2200      	movs	r2, #0
 8017712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f000 f82d 	bl	8017776 <UART_WaitOnFlagUntilTimeout>
 801771c:	4603      	mov	r3, r0
 801771e:	2b00      	cmp	r3, #0
 8017720:	d001      	beq.n	8017726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017722:	2303      	movs	r3, #3
 8017724:	e023      	b.n	801776e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	f003 0304 	and.w	r3, r3, #4
 8017730:	2b04      	cmp	r3, #4
 8017732:	d10e      	bne.n	8017752 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8017738:	9300      	str	r3, [sp, #0]
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	2200      	movs	r2, #0
 801773e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8017742:	6878      	ldr	r0, [r7, #4]
 8017744:	f000 f817 	bl	8017776 <UART_WaitOnFlagUntilTimeout>
 8017748:	4603      	mov	r3, r0
 801774a:	2b00      	cmp	r3, #0
 801774c:	d001      	beq.n	8017752 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801774e:	2303      	movs	r3, #3
 8017750:	e00d      	b.n	801776e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	2220      	movs	r2, #32
 8017756:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	2220      	movs	r2, #32
 801775c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	2200      	movs	r2, #0
 8017762:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2200      	movs	r2, #0
 8017768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 801776c:	2300      	movs	r3, #0
}
 801776e:	4618      	mov	r0, r3
 8017770:	3710      	adds	r7, #16
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}

08017776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017776:	b580      	push	{r7, lr}
 8017778:	b084      	sub	sp, #16
 801777a:	af00      	add	r7, sp, #0
 801777c:	60f8      	str	r0, [r7, #12]
 801777e:	60b9      	str	r1, [r7, #8]
 8017780:	603b      	str	r3, [r7, #0]
 8017782:	4613      	mov	r3, r2
 8017784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017786:	e05e      	b.n	8017846 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017788:	69bb      	ldr	r3, [r7, #24]
 801778a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801778e:	d05a      	beq.n	8017846 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017790:	f7fb f9be 	bl	8012b10 <HAL_GetTick>
 8017794:	4602      	mov	r2, r0
 8017796:	683b      	ldr	r3, [r7, #0]
 8017798:	1ad3      	subs	r3, r2, r3
 801779a:	69ba      	ldr	r2, [r7, #24]
 801779c:	429a      	cmp	r2, r3
 801779e:	d302      	bcc.n	80177a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80177a0:	69bb      	ldr	r3, [r7, #24]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d11b      	bne.n	80177de <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	681a      	ldr	r2, [r3, #0]
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80177b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	689a      	ldr	r2, [r3, #8]
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	f022 0201 	bic.w	r2, r2, #1
 80177c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	2220      	movs	r2, #32
 80177ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	2220      	movs	r2, #32
 80177d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	2200      	movs	r2, #0
 80177d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80177da:	2303      	movs	r3, #3
 80177dc:	e043      	b.n	8017866 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	f003 0304 	and.w	r3, r3, #4
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d02c      	beq.n	8017846 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	69db      	ldr	r3, [r3, #28]
 80177f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80177f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80177fa:	d124      	bne.n	8017846 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017804:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	681a      	ldr	r2, [r3, #0]
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8017814:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	689a      	ldr	r2, [r3, #8]
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	f022 0201 	bic.w	r2, r2, #1
 8017824:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	2220      	movs	r2, #32
 801782a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	2220      	movs	r2, #32
 8017830:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	2220      	movs	r2, #32
 8017836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	2200      	movs	r2, #0
 801783e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8017842:	2303      	movs	r3, #3
 8017844:	e00f      	b.n	8017866 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	69da      	ldr	r2, [r3, #28]
 801784c:	68bb      	ldr	r3, [r7, #8]
 801784e:	4013      	ands	r3, r2
 8017850:	68ba      	ldr	r2, [r7, #8]
 8017852:	429a      	cmp	r2, r3
 8017854:	bf0c      	ite	eq
 8017856:	2301      	moveq	r3, #1
 8017858:	2300      	movne	r3, #0
 801785a:	b2db      	uxtb	r3, r3
 801785c:	461a      	mov	r2, r3
 801785e:	79fb      	ldrb	r3, [r7, #7]
 8017860:	429a      	cmp	r2, r3
 8017862:	d091      	beq.n	8017788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017864:	2300      	movs	r3, #0
}
 8017866:	4618      	mov	r0, r3
 8017868:	3710      	adds	r7, #16
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}

0801786e <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 801786e:	b580      	push	{r7, lr}
 8017870:	b08c      	sub	sp, #48	; 0x30
 8017872:	af00      	add	r7, sp, #0
 8017874:	603b      	str	r3, [r7, #0]
 8017876:	4603      	mov	r3, r0
 8017878:	71fb      	strb	r3, [r7, #7]
 801787a:	460b      	mov	r3, r1
 801787c:	71bb      	strb	r3, [r7, #6]
 801787e:	4613      	mov	r3, r2
 8017880:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8017882:	79fb      	ldrb	r3, [r7, #7]
 8017884:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8017886:	79bb      	ldrb	r3, [r7, #6]
 8017888:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 801788a:	797b      	ldrb	r3, [r7, #5]
 801788c:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 801788e:	f107 030c 	add.w	r3, r7, #12
 8017892:	2207      	movs	r2, #7
 8017894:	2100      	movs	r1, #0
 8017896:	4618      	mov	r0, r3
 8017898:	f001 f99d 	bl	8018bd6 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 801789c:	f107 0318 	add.w	r3, r7, #24
 80178a0:	2218      	movs	r2, #24
 80178a2:	2100      	movs	r1, #0
 80178a4:	4618      	mov	r0, r3
 80178a6:	f001 f996 	bl	8018bd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80178aa:	233f      	movs	r3, #63	; 0x3f
 80178ac:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80178ae:	238a      	movs	r3, #138	; 0x8a
 80178b0:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80178b2:	f107 0314 	add.w	r3, r7, #20
 80178b6:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80178b8:	2303      	movs	r3, #3
 80178ba:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 80178bc:	f107 030c 	add.w	r3, r7, #12
 80178c0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80178c2:	2307      	movs	r3, #7
 80178c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80178c6:	f107 0318 	add.w	r3, r7, #24
 80178ca:	2100      	movs	r1, #0
 80178cc:	4618      	mov	r0, r3
 80178ce:	f000 fcd3 	bl	8018278 <hci_send_req>
 80178d2:	4603      	mov	r3, r0
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	da01      	bge.n	80178dc <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 80178d8:	23ff      	movs	r3, #255	; 0xff
 80178da:	e014      	b.n	8017906 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 80178dc:	7b3b      	ldrb	r3, [r7, #12]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d001      	beq.n	80178e6 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 80178e2:	7b3b      	ldrb	r3, [r7, #12]
 80178e4:	e00f      	b.n	8017906 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80178e6:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80178ea:	b29a      	uxth	r2, r3
 80178ec:	683b      	ldr	r3, [r7, #0]
 80178ee:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80178f0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80178f4:	b29a      	uxth	r2, r3
 80178f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178f8:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80178fa:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80178fe:	b29a      	uxth	r2, r3
 8017900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017902:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8017904:	2300      	movs	r3, #0
}
 8017906:	4618      	mov	r0, r3
 8017908:	3730      	adds	r7, #48	; 0x30
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}

0801790e <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 801790e:	b590      	push	{r4, r7, lr}
 8017910:	b095      	sub	sp, #84	; 0x54
 8017912:	af00      	add	r7, sp, #0
 8017914:	4604      	mov	r4, r0
 8017916:	4608      	mov	r0, r1
 8017918:	4611      	mov	r1, r2
 801791a:	461a      	mov	r2, r3
 801791c:	4623      	mov	r3, r4
 801791e:	71fb      	strb	r3, [r7, #7]
 8017920:	4603      	mov	r3, r0
 8017922:	80bb      	strh	r3, [r7, #4]
 8017924:	460b      	mov	r3, r1
 8017926:	807b      	strh	r3, [r7, #2]
 8017928:	4613      	mov	r3, r2
 801792a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 801792c:	2300      	movs	r3, #0
 801792e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8017932:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8017936:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 801793a:	4413      	add	r3, r2
 801793c:	330e      	adds	r3, #14
 801793e:	2b28      	cmp	r3, #40	; 0x28
 8017940:	d901      	bls.n	8017946 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8017942:	2342      	movs	r3, #66	; 0x42
 8017944:	e0ce      	b.n	8017ae4 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8017946:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801794a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801794e:	4413      	add	r3, r2
 8017950:	79fa      	ldrb	r2, [r7, #7]
 8017952:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8017956:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801795a:	3301      	adds	r3, #1
 801795c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8017960:	88bb      	ldrh	r3, [r7, #4]
 8017962:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8017964:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017968:	f107 0208 	add.w	r2, r7, #8
 801796c:	4413      	add	r3, r2
 801796e:	88ba      	ldrh	r2, [r7, #4]
 8017970:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8017972:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017976:	3302      	adds	r3, #2
 8017978:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 801797c:	887b      	ldrh	r3, [r7, #2]
 801797e:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8017980:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017984:	f107 0208 	add.w	r2, r7, #8
 8017988:	4413      	add	r3, r2
 801798a:	887a      	ldrh	r2, [r7, #2]
 801798c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 801798e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017992:	3302      	adds	r3, #2
 8017994:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8017998:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801799c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80179a0:	4413      	add	r3, r2
 80179a2:	79ba      	ldrb	r2, [r7, #6]
 80179a4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80179a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80179ac:	3301      	adds	r3, #1
 80179ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80179b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80179b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80179ba:	4413      	add	r3, r2
 80179bc:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80179c0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80179c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80179c8:	3301      	adds	r3, #1
 80179ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 80179ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80179d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80179d6:	4413      	add	r3, r2
 80179d8:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80179dc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80179e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80179e4:	3301      	adds	r3, #1
 80179e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80179ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80179ee:	f107 0208 	add.w	r2, r7, #8
 80179f2:	4413      	add	r3, r2
 80179f4:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80179f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80179fa:	4618      	mov	r0, r3
 80179fc:	f001 f8dd 	bl	8018bba <memcpy>
  indx +=  LocalNameLen;
 8017a00:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8017a04:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8017a08:	4413      	add	r3, r2
 8017a0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8017a0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017a12:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017a16:	4413      	add	r3, r2
 8017a18:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8017a1c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8017a20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017a24:	3301      	adds	r3, #1
 8017a26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8017a2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017a2e:	f107 0208 	add.w	r2, r7, #8
 8017a32:	4413      	add	r3, r2
 8017a34:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8017a38:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	f001 f8bd 	bl	8018bba <memcpy>
  indx +=  ServiceUUIDLen;  
 8017a40:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8017a44:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8017a48:	4413      	add	r3, r2
 8017a4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8017a4e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8017a52:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8017a56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017a5a:	f107 0208 	add.w	r2, r7, #8
 8017a5e:	4413      	add	r3, r2
 8017a60:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8017a64:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8017a66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017a6a:	3302      	adds	r3, #2
 8017a6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8017a70:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8017a74:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8017a78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017a7c:	f107 0208 	add.w	r2, r7, #8
 8017a80:	4413      	add	r3, r2
 8017a82:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8017a86:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8017a88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017a8c:	3302      	adds	r3, #2
 8017a8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8017a92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017a96:	2218      	movs	r2, #24
 8017a98:	2100      	movs	r1, #0
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f001 f89b 	bl	8018bd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8017aa0:	233f      	movs	r3, #63	; 0x3f
 8017aa2:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8017aa4:	2383      	movs	r3, #131	; 0x83
 8017aa6:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8017aa8:	f107 0308 	add.w	r3, r7, #8
 8017aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8017aae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017ab2:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8017ab4:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8017ab8:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8017aba:	2301      	movs	r3, #1
 8017abc:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8017abe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017ac2:	2100      	movs	r1, #0
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f000 fbd7 	bl	8018278 <hci_send_req>
 8017aca:	4603      	mov	r3, r0
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	da01      	bge.n	8017ad4 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8017ad0:	23ff      	movs	r3, #255	; 0xff
 8017ad2:	e007      	b.n	8017ae4 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8017ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d002      	beq.n	8017ae2 <aci_gap_set_discoverable+0x1d4>
    return status;
 8017adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017ae0:	e000      	b.n	8017ae4 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8017ae2:	2300      	movs	r3, #0
}
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	3754      	adds	r7, #84	; 0x54
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	bd90      	pop	{r4, r7, pc}

08017aec <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b088      	sub	sp, #32
 8017af0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8017af2:	f107 0308 	add.w	r3, r7, #8
 8017af6:	2218      	movs	r2, #24
 8017af8:	2100      	movs	r1, #0
 8017afa:	4618      	mov	r0, r3
 8017afc:	f001 f86b 	bl	8018bd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8017b00:	233f      	movs	r3, #63	; 0x3f
 8017b02:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8017b04:	f240 1301 	movw	r3, #257	; 0x101
 8017b08:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8017b0a:	1dfb      	adds	r3, r7, #7
 8017b0c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8017b0e:	2301      	movs	r3, #1
 8017b10:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8017b12:	f107 0308 	add.w	r3, r7, #8
 8017b16:	2100      	movs	r1, #0
 8017b18:	4618      	mov	r0, r3
 8017b1a:	f000 fbad 	bl	8018278 <hci_send_req>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	da01      	bge.n	8017b28 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8017b24:	23ff      	movs	r3, #255	; 0xff
 8017b26:	e000      	b.n	8017b2a <aci_gatt_init+0x3e>

  return status;
 8017b28:	79fb      	ldrb	r3, [r7, #7]
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3720      	adds	r7, #32
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}

08017b32 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8017b32:	b580      	push	{r7, lr}
 8017b34:	b090      	sub	sp, #64	; 0x40
 8017b36:	af00      	add	r7, sp, #0
 8017b38:	6039      	str	r1, [r7, #0]
 8017b3a:	4611      	mov	r1, r2
 8017b3c:	461a      	mov	r2, r3
 8017b3e:	4603      	mov	r3, r0
 8017b40:	71fb      	strb	r3, [r7, #7]
 8017b42:	460b      	mov	r3, r1
 8017b44:	71bb      	strb	r3, [r7, #6]
 8017b46:	4613      	mov	r3, r2
 8017b48:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8017b50:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8017b54:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017b58:	4413      	add	r3, r2
 8017b5a:	79fa      	ldrb	r2, [r7, #7]
 8017b5c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8017b60:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8017b64:	3301      	adds	r3, #1
 8017b66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8017b6a:	79fb      	ldrb	r3, [r7, #7]
 8017b6c:	2b01      	cmp	r3, #1
 8017b6e:	d103      	bne.n	8017b78 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8017b70:	2302      	movs	r3, #2
 8017b72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8017b76:	e002      	b.n	8017b7e <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8017b78:	2310      	movs	r3, #16
 8017b7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8017b7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8017b82:	f107 020c 	add.w	r2, r7, #12
 8017b86:	4413      	add	r3, r2
 8017b88:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8017b8c:	6839      	ldr	r1, [r7, #0]
 8017b8e:	4618      	mov	r0, r3
 8017b90:	f001 f813 	bl	8018bba <memcpy>
  indx +=  uuid_len;
 8017b94:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8017b98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017b9c:	4413      	add	r3, r2
 8017b9e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8017ba2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8017ba6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017baa:	4413      	add	r3, r2
 8017bac:	79ba      	ldrb	r2, [r7, #6]
 8017bae:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8017bb2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8017bb6:	3301      	adds	r3, #1
 8017bb8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8017bbc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8017bc0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017bc4:	4413      	add	r3, r2
 8017bc6:	797a      	ldrb	r2, [r7, #5]
 8017bc8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8017bcc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8017bd6:	f107 0320 	add.w	r3, r7, #32
 8017bda:	2203      	movs	r2, #3
 8017bdc:	2100      	movs	r1, #0
 8017bde:	4618      	mov	r0, r3
 8017be0:	f000 fff9 	bl	8018bd6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8017be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017be8:	2218      	movs	r2, #24
 8017bea:	2100      	movs	r1, #0
 8017bec:	4618      	mov	r0, r3
 8017bee:	f000 fff2 	bl	8018bd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8017bf2:	233f      	movs	r3, #63	; 0x3f
 8017bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8017bf6:	f44f 7381 	mov.w	r3, #258	; 0x102
 8017bfa:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8017bfc:	f107 030c 	add.w	r3, r7, #12
 8017c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8017c02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8017c06:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8017c08:	f107 0320 	add.w	r3, r7, #32
 8017c0c:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8017c0e:	2303      	movs	r3, #3
 8017c10:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8017c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017c16:	2100      	movs	r1, #0
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f000 fb2d 	bl	8018278 <hci_send_req>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	da01      	bge.n	8017c28 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 8017c24:	23ff      	movs	r3, #255	; 0xff
 8017c26:	e00c      	b.n	8017c42 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 8017c28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d002      	beq.n	8017c36 <aci_gatt_add_serv+0x104>
    return resp.status;
 8017c30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017c34:	e005      	b.n	8017c42 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 8017c36:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8017c3a:	b29a      	uxth	r2, r3
 8017c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c3e:	801a      	strh	r2, [r3, #0]

  return 0;
 8017c40:	2300      	movs	r3, #0
}
 8017c42:	4618      	mov	r0, r3
 8017c44:	3740      	adds	r7, #64	; 0x40
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd80      	pop	{r7, pc}

08017c4a <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8017c4a:	b580      	push	{r7, lr}
 8017c4c:	b092      	sub	sp, #72	; 0x48
 8017c4e:	af00      	add	r7, sp, #0
 8017c50:	603a      	str	r2, [r7, #0]
 8017c52:	461a      	mov	r2, r3
 8017c54:	4603      	mov	r3, r0
 8017c56:	80fb      	strh	r3, [r7, #6]
 8017c58:	460b      	mov	r3, r1
 8017c5a:	717b      	strb	r3, [r7, #5]
 8017c5c:	4613      	mov	r3, r2
 8017c5e:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8017c60:	2300      	movs	r3, #0
 8017c62:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8017c66:	88fb      	ldrh	r3, [r7, #6]
 8017c68:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8017c6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017c6e:	f107 020c 	add.w	r2, r7, #12
 8017c72:	4413      	add	r3, r2
 8017c74:	88fa      	ldrh	r2, [r7, #6]
 8017c76:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8017c78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017c7c:	3302      	adds	r3, #2
 8017c7e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8017c82:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017c86:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017c8a:	4413      	add	r3, r2
 8017c8c:	797a      	ldrb	r2, [r7, #5]
 8017c8e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8017c92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017c96:	3301      	adds	r3, #1
 8017c98:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8017c9c:	797b      	ldrb	r3, [r7, #5]
 8017c9e:	2b01      	cmp	r3, #1
 8017ca0:	d103      	bne.n	8017caa <aci_gatt_add_char+0x60>
    uuid_len = 2;
 8017ca2:	2302      	movs	r3, #2
 8017ca4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017ca8:	e002      	b.n	8017cb0 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 8017caa:	2310      	movs	r3, #16
 8017cac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8017cb0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017cb4:	f107 020c 	add.w	r2, r7, #12
 8017cb8:	4413      	add	r3, r2
 8017cba:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8017cbe:	6839      	ldr	r1, [r7, #0]
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f000 ff7a 	bl	8018bba <memcpy>
  indx +=  uuid_len;
 8017cc6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017cca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017cce:	4413      	add	r3, r2
 8017cd0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8017cd4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017cd8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017cdc:	4413      	add	r3, r2
 8017cde:	793a      	ldrb	r2, [r7, #4]
 8017ce0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8017ce4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017ce8:	3301      	adds	r3, #1
 8017cea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8017cee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017cf2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017cf6:	4413      	add	r3, r2
 8017cf8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8017cfc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8017d00:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017d04:	3301      	adds	r3, #1
 8017d06:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8017d0a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017d0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017d12:	4413      	add	r3, r2
 8017d14:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8017d18:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8017d1c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017d20:	3301      	adds	r3, #1
 8017d22:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8017d26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017d2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017d2e:	4413      	add	r3, r2
 8017d30:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8017d34:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8017d38:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017d3c:	3301      	adds	r3, #1
 8017d3e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8017d42:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017d46:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017d4a:	4413      	add	r3, r2
 8017d4c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8017d50:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8017d54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017d58:	3301      	adds	r3, #1
 8017d5a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8017d5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017d62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017d66:	4413      	add	r3, r2
 8017d68:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8017d6c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8017d70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017d74:	3301      	adds	r3, #1
 8017d76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8017d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017d7e:	2203      	movs	r2, #3
 8017d80:	2100      	movs	r1, #0
 8017d82:	4618      	mov	r0, r3
 8017d84:	f000 ff27 	bl	8018bd6 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8017d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017d8c:	2218      	movs	r2, #24
 8017d8e:	2100      	movs	r1, #0
 8017d90:	4618      	mov	r0, r3
 8017d92:	f000 ff20 	bl	8018bd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8017d96:	233f      	movs	r3, #63	; 0x3f
 8017d98:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8017d9a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8017d9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8017da0:	f107 030c 	add.w	r3, r7, #12
 8017da4:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8017da6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017daa:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8017dac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8017db2:	2303      	movs	r3, #3
 8017db4:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8017db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017dba:	2100      	movs	r1, #0
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f000 fa5b 	bl	8018278 <hci_send_req>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	da01      	bge.n	8017dcc <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 8017dc8:	23ff      	movs	r3, #255	; 0xff
 8017dca:	e00c      	b.n	8017de6 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8017dcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d002      	beq.n	8017dda <aci_gatt_add_char+0x190>
    return resp.status;
 8017dd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017dd8:	e005      	b.n	8017de6 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 8017dda:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8017dde:	b29a      	uxth	r2, r3
 8017de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017de2:	801a      	strh	r2, [r3, #0]

  return 0;
 8017de4:	2300      	movs	r3, #0
}
 8017de6:	4618      	mov	r0, r3
 8017de8:	3748      	adds	r7, #72	; 0x48
 8017dea:	46bd      	mov	sp, r7
 8017dec:	bd80      	pop	{r7, pc}

08017dee <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8017dee:	b590      	push	{r4, r7, lr}
 8017df0:	b0ab      	sub	sp, #172	; 0xac
 8017df2:	af00      	add	r7, sp, #0
 8017df4:	4604      	mov	r4, r0
 8017df6:	4608      	mov	r0, r1
 8017df8:	4611      	mov	r1, r2
 8017dfa:	461a      	mov	r2, r3
 8017dfc:	4623      	mov	r3, r4
 8017dfe:	80fb      	strh	r3, [r7, #6]
 8017e00:	4603      	mov	r3, r0
 8017e02:	80bb      	strh	r3, [r7, #4]
 8017e04:	460b      	mov	r3, r1
 8017e06:	70fb      	strb	r3, [r7, #3]
 8017e08:	4613      	mov	r3, r2
 8017e0a:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8017e12:	78bb      	ldrb	r3, [r7, #2]
 8017e14:	2b7a      	cmp	r3, #122	; 0x7a
 8017e16:	d901      	bls.n	8017e1c <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8017e18:	2342      	movs	r3, #66	; 0x42
 8017e1a:	e076      	b.n	8017f0a <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 8017e1c:	88fb      	ldrh	r3, [r7, #6]
 8017e1e:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8017e20:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017e24:	f107 0208 	add.w	r2, r7, #8
 8017e28:	4413      	add	r3, r2
 8017e2a:	88fa      	ldrh	r2, [r7, #6]
 8017e2c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8017e2e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017e32:	3302      	adds	r3, #2
 8017e34:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8017e38:	88bb      	ldrh	r3, [r7, #4]
 8017e3a:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8017e3c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017e40:	f107 0208 	add.w	r2, r7, #8
 8017e44:	4413      	add	r3, r2
 8017e46:	88ba      	ldrh	r2, [r7, #4]
 8017e48:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8017e4a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017e4e:	3302      	adds	r3, #2
 8017e50:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8017e54:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017e58:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8017e5c:	4413      	add	r3, r2
 8017e5e:	78fa      	ldrb	r2, [r7, #3]
 8017e60:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8017e64:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017e68:	3301      	adds	r3, #1
 8017e6a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8017e6e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017e72:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8017e76:	4413      	add	r3, r2
 8017e78:	78ba      	ldrb	r2, [r7, #2]
 8017e7a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8017e7e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017e82:	3301      	adds	r3, #1
 8017e84:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8017e88:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017e8c:	f107 0208 	add.w	r2, r7, #8
 8017e90:	4413      	add	r3, r2
 8017e92:	78ba      	ldrb	r2, [r7, #2]
 8017e94:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8017e98:	4618      	mov	r0, r3
 8017e9a:	f000 fe8e 	bl	8018bba <memcpy>
  indx +=  charValueLen;
 8017e9e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8017ea2:	78bb      	ldrb	r3, [r7, #2]
 8017ea4:	4413      	add	r3, r2
 8017ea6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8017eaa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017eae:	2218      	movs	r2, #24
 8017eb0:	2100      	movs	r1, #0
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	f000 fe8f 	bl	8018bd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8017eb8:	233f      	movs	r3, #63	; 0x3f
 8017eba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8017ebe:	f44f 7383 	mov.w	r3, #262	; 0x106
 8017ec2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8017ec6:	f107 0308 	add.w	r3, r7, #8
 8017eca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8017ece:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017ed2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8017ed6:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8017eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8017ede:	2301      	movs	r3, #1
 8017ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8017ee4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017ee8:	2100      	movs	r1, #0
 8017eea:	4618      	mov	r0, r3
 8017eec:	f000 f9c4 	bl	8018278 <hci_send_req>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	da01      	bge.n	8017efa <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 8017ef6:	23ff      	movs	r3, #255	; 0xff
 8017ef8:	e007      	b.n	8017f0a <aci_gatt_update_char_value+0x11c>

  if (status) {
 8017efa:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d002      	beq.n	8017f08 <aci_gatt_update_char_value+0x11a>
    return status;
 8017f02:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8017f06:	e000      	b.n	8017f0a <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 8017f08:	2300      	movs	r3, #0
}
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	37ac      	adds	r7, #172	; 0xac
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd90      	pop	{r4, r7, pc}

08017f12 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8017f12:	b580      	push	{r7, lr}
 8017f14:	b08a      	sub	sp, #40	; 0x28
 8017f16:	af00      	add	r7, sp, #0
 8017f18:	4603      	mov	r3, r0
 8017f1a:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8017f1c:	88fb      	ldrh	r3, [r7, #6]
 8017f1e:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8017f20:	f107 0310 	add.w	r3, r7, #16
 8017f24:	2218      	movs	r2, #24
 8017f26:	2100      	movs	r1, #0
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f000 fe54 	bl	8018bd6 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8017f2e:	233f      	movs	r3, #63	; 0x3f
 8017f30:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8017f32:	f240 1327 	movw	r3, #295	; 0x127
 8017f36:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8017f38:	f107 030c 	add.w	r3, r7, #12
 8017f3c:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8017f3e:	2302      	movs	r3, #2
 8017f40:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8017f42:	f107 030b 	add.w	r3, r7, #11
 8017f46:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8017f48:	2301      	movs	r3, #1
 8017f4a:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8017f4c:	f107 0310 	add.w	r3, r7, #16
 8017f50:	2100      	movs	r1, #0
 8017f52:	4618      	mov	r0, r3
 8017f54:	f000 f990 	bl	8018278 <hci_send_req>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	da01      	bge.n	8017f62 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8017f5e:	23ff      	movs	r3, #255	; 0xff
 8017f60:	e000      	b.n	8017f64 <aci_gatt_allow_read+0x52>

    return status;
 8017f62:	7afb      	ldrb	r3, [r7, #11]
}
 8017f64:	4618      	mov	r0, r3
 8017f66:	3728      	adds	r7, #40	; 0x28
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}

08017f6c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b0aa      	sub	sp, #168	; 0xa8
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	4603      	mov	r3, r0
 8017f74:	603a      	str	r2, [r7, #0]
 8017f76:	71fb      	strb	r3, [r7, #7]
 8017f78:	460b      	mov	r3, r1
 8017f7a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8017f82:	79bb      	ldrb	r3, [r7, #6]
 8017f84:	2b7e      	cmp	r3, #126	; 0x7e
 8017f86:	d901      	bls.n	8017f8c <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 8017f88:	2342      	movs	r3, #66	; 0x42
 8017f8a:	e052      	b.n	8018032 <aci_hal_write_config_data+0xc6>

  buffer[indx] = offset;
 8017f8c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017f90:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8017f94:	4413      	add	r3, r2
 8017f96:	79fa      	ldrb	r2, [r7, #7]
 8017f98:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8017f9c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017fa0:	3301      	adds	r3, #1
 8017fa2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8017fa6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017faa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8017fae:	4413      	add	r3, r2
 8017fb0:	79ba      	ldrb	r2, [r7, #6]
 8017fb2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8017fb6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017fba:	3301      	adds	r3, #1
 8017fbc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8017fc0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8017fc4:	f107 0208 	add.w	r2, r7, #8
 8017fc8:	4413      	add	r3, r2
 8017fca:	79ba      	ldrb	r2, [r7, #6]
 8017fcc:	6839      	ldr	r1, [r7, #0]
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f000 fdf3 	bl	8018bba <memcpy>
  indx +=  len;
 8017fd4:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8017fd8:	79bb      	ldrb	r3, [r7, #6]
 8017fda:	4413      	add	r3, r2
 8017fdc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8017fe0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017fe4:	2218      	movs	r2, #24
 8017fe6:	2100      	movs	r1, #0
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f000 fdf4 	bl	8018bd6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8017fee:	233f      	movs	r3, #63	; 0x3f
 8017ff0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8017ff4:	230c      	movs	r3, #12
 8017ff6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8017ffa:	f107 0308 	add.w	r3, r7, #8
 8017ffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8018002:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8018006:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 801800a:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 801800e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8018012:	2301      	movs	r3, #1
 8018014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8018018:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801801c:	2100      	movs	r1, #0
 801801e:	4618      	mov	r0, r3
 8018020:	f000 f92a 	bl	8018278 <hci_send_req>
 8018024:	4603      	mov	r3, r0
 8018026:	2b00      	cmp	r3, #0
 8018028:	da01      	bge.n	801802e <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 801802a:	23ff      	movs	r3, #255	; 0xff
 801802c:	e001      	b.n	8018032 <aci_hal_write_config_data+0xc6>

  return status;
 801802e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8018032:	4618      	mov	r0, r3
 8018034:	37a8      	adds	r7, #168	; 0xa8
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}

0801803a <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 801803a:	b580      	push	{r7, lr}
 801803c:	b088      	sub	sp, #32
 801803e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8018040:	f107 0308 	add.w	r3, r7, #8
 8018044:	2218      	movs	r2, #24
 8018046:	2100      	movs	r1, #0
 8018048:	4618      	mov	r0, r3
 801804a:	f000 fdc4 	bl	8018bd6 <memset>
  rq.ogf = OGF_HOST_CTL;
 801804e:	2303      	movs	r3, #3
 8018050:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8018052:	2303      	movs	r3, #3
 8018054:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8018056:	1dfb      	adds	r3, r7, #7
 8018058:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801805a:	2301      	movs	r3, #1
 801805c:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 801805e:	f107 0308 	add.w	r3, r7, #8
 8018062:	2100      	movs	r1, #0
 8018064:	4618      	mov	r0, r3
 8018066:	f000 f907 	bl	8018278 <hci_send_req>
 801806a:	4603      	mov	r3, r0
 801806c:	2b00      	cmp	r3, #0
 801806e:	da01      	bge.n	8018074 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8018070:	23ff      	movs	r3, #255	; 0xff
 8018072:	e000      	b.n	8018076 <hci_reset+0x3c>
  
  return status;  
 8018074:	79fb      	ldrb	r3, [r7, #7]
}
 8018076:	4618      	mov	r0, r3
 8018078:	3720      	adds	r7, #32
 801807a:	46bd      	mov	sp, r7
 801807c:	bd80      	pop	{r7, pc}

0801807e <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 801807e:	b480      	push	{r7}
 8018080:	b085      	sub	sp, #20
 8018082:	af00      	add	r7, sp, #0
 8018084:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	3308      	adds	r3, #8
 801808a:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	781b      	ldrb	r3, [r3, #0]
 8018090:	2b04      	cmp	r3, #4
 8018092:	d001      	beq.n	8018098 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8018094:	2301      	movs	r3, #1
 8018096:	e00c      	b.n	80180b2 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	3302      	adds	r3, #2
 801809c:	781b      	ldrb	r3, [r3, #0]
 801809e:	461a      	mov	r2, r3
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80180a6:	3b03      	subs	r3, #3
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d001      	beq.n	80180b0 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80180ac:	2302      	movs	r3, #2
 80180ae:	e000      	b.n	80180b2 <verify_packet+0x34>
  
  return 0;      
 80180b0:	2300      	movs	r3, #0
}
 80180b2:	4618      	mov	r0, r3
 80180b4:	3714      	adds	r7, #20
 80180b6:	46bd      	mov	sp, r7
 80180b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180bc:	4770      	bx	lr
	...

080180c0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b0a6      	sub	sp, #152	; 0x98
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	607b      	str	r3, [r7, #4]
 80180c8:	4603      	mov	r3, r0
 80180ca:	81fb      	strh	r3, [r7, #14]
 80180cc:	460b      	mov	r3, r1
 80180ce:	81bb      	strh	r3, [r7, #12]
 80180d0:	4613      	mov	r3, r2
 80180d2:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80180d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80180d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80180dc:	b21a      	sxth	r2, r3
 80180de:	89fb      	ldrh	r3, [r7, #14]
 80180e0:	029b      	lsls	r3, r3, #10
 80180e2:	b21b      	sxth	r3, r3
 80180e4:	4313      	orrs	r3, r2
 80180e6:	b21b      	sxth	r3, r3
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80180ec:	7afb      	ldrb	r3, [r7, #11]
 80180ee:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80180f0:	2301      	movs	r3, #1
 80180f2:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80180f4:	f107 0318 	add.w	r3, r7, #24
 80180f8:	3301      	adds	r3, #1
 80180fa:	461a      	mov	r2, r3
 80180fc:	f107 0314 	add.w	r3, r7, #20
 8018100:	8819      	ldrh	r1, [r3, #0]
 8018102:	789b      	ldrb	r3, [r3, #2]
 8018104:	8011      	strh	r1, [r2, #0]
 8018106:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8018108:	f107 0318 	add.w	r3, r7, #24
 801810c:	3304      	adds	r3, #4
 801810e:	7afa      	ldrb	r2, [r7, #11]
 8018110:	6879      	ldr	r1, [r7, #4]
 8018112:	4618      	mov	r0, r3
 8018114:	f000 fd51 	bl	8018bba <memcpy>
  
  if (hciContext.io.Send)
 8018118:	4b08      	ldr	r3, [pc, #32]	; (801813c <send_cmd+0x7c>)
 801811a:	691b      	ldr	r3, [r3, #16]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d009      	beq.n	8018134 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8018120:	4b06      	ldr	r3, [pc, #24]	; (801813c <send_cmd+0x7c>)
 8018122:	691b      	ldr	r3, [r3, #16]
 8018124:	7afa      	ldrb	r2, [r7, #11]
 8018126:	b292      	uxth	r2, r2
 8018128:	3204      	adds	r2, #4
 801812a:	b291      	uxth	r1, r2
 801812c:	f107 0218 	add.w	r2, r7, #24
 8018130:	4610      	mov	r0, r2
 8018132:	4798      	blx	r3
  }
}
 8018134:	bf00      	nop
 8018136:	3798      	adds	r7, #152	; 0x98
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}
 801813c:	20000490 	.word	0x20000490

08018140 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b084      	sub	sp, #16
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
 8018148:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 801814a:	e00a      	b.n	8018162 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 801814c:	f107 030c 	add.w	r3, r7, #12
 8018150:	4619      	mov	r1, r3
 8018152:	6838      	ldr	r0, [r7, #0]
 8018154:	f000 faea 	bl	801872c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	4619      	mov	r1, r3
 801815c:	6878      	ldr	r0, [r7, #4]
 801815e:	f000 fa51 	bl	8018604 <list_insert_head>
  while (!list_is_empty(src_list))
 8018162:	6838      	ldr	r0, [r7, #0]
 8018164:	f000 fa2c 	bl	80185c0 <list_is_empty>
 8018168:	4603      	mov	r3, r0
 801816a:	2b00      	cmp	r3, #0
 801816c:	d0ee      	beq.n	801814c <move_list+0xc>
  }
}
 801816e:	bf00      	nop
 8018170:	bf00      	nop
 8018172:	3710      	adds	r7, #16
 8018174:	46bd      	mov	sp, r7
 8018176:	bd80      	pop	{r7, pc}

08018178 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b082      	sub	sp, #8
 801817c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 801817e:	e009      	b.n	8018194 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8018180:	1d3b      	adds	r3, r7, #4
 8018182:	4619      	mov	r1, r3
 8018184:	4809      	ldr	r0, [pc, #36]	; (80181ac <free_event_list+0x34>)
 8018186:	f000 faaa 	bl	80186de <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	4619      	mov	r1, r3
 801818e:	4808      	ldr	r0, [pc, #32]	; (80181b0 <free_event_list+0x38>)
 8018190:	f000 fa5e 	bl	8018650 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8018194:	4806      	ldr	r0, [pc, #24]	; (80181b0 <free_event_list+0x38>)
 8018196:	f000 faf0 	bl	801877a <list_get_size>
 801819a:	4603      	mov	r3, r0
 801819c:	2b01      	cmp	r3, #1
 801819e:	ddef      	ble.n	8018180 <free_event_list+0x8>
  }
}
 80181a0:	bf00      	nop
 80181a2:	bf00      	nop
 80181a4:	3708      	adds	r7, #8
 80181a6:	46bd      	mov	sp, r7
 80181a8:	bd80      	pop	{r7, pc}
 80181aa:	bf00      	nop
 80181ac:	20000698 	.word	0x20000698
 80181b0:	20000690 	.word	0x20000690

080181b4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b084      	sub	sp, #16
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
 80181bc:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d002      	beq.n	80181ca <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80181c4:	4a18      	ldr	r2, [pc, #96]	; (8018228 <hci_init+0x74>)
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80181ca:	4818      	ldr	r0, [pc, #96]	; (801822c <hci_init+0x78>)
 80181cc:	f000 f9e8 	bl	80185a0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80181d0:	4817      	ldr	r0, [pc, #92]	; (8018230 <hci_init+0x7c>)
 80181d2:	f000 f9e5 	bl	80185a0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80181d6:	f7f9 fa63 	bl	80116a0 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80181da:	2300      	movs	r3, #0
 80181dc:	73fb      	strb	r3, [r7, #15]
 80181de:	e00c      	b.n	80181fa <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80181e0:	7bfb      	ldrb	r3, [r7, #15]
 80181e2:	228c      	movs	r2, #140	; 0x8c
 80181e4:	fb02 f303 	mul.w	r3, r2, r3
 80181e8:	4a12      	ldr	r2, [pc, #72]	; (8018234 <hci_init+0x80>)
 80181ea:	4413      	add	r3, r2
 80181ec:	4619      	mov	r1, r3
 80181ee:	480f      	ldr	r0, [pc, #60]	; (801822c <hci_init+0x78>)
 80181f0:	f000 fa2e 	bl	8018650 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80181f4:	7bfb      	ldrb	r3, [r7, #15]
 80181f6:	3301      	adds	r3, #1
 80181f8:	73fb      	strb	r3, [r7, #15]
 80181fa:	7bfb      	ldrb	r3, [r7, #15]
 80181fc:	2b04      	cmp	r3, #4
 80181fe:	d9ef      	bls.n	80181e0 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8018200:	4b09      	ldr	r3, [pc, #36]	; (8018228 <hci_init+0x74>)
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d003      	beq.n	8018210 <hci_init+0x5c>
 8018208:	4b07      	ldr	r3, [pc, #28]	; (8018228 <hci_init+0x74>)
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	2000      	movs	r0, #0
 801820e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8018210:	4b05      	ldr	r3, [pc, #20]	; (8018228 <hci_init+0x74>)
 8018212:	689b      	ldr	r3, [r3, #8]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d002      	beq.n	801821e <hci_init+0x6a>
 8018218:	4b03      	ldr	r3, [pc, #12]	; (8018228 <hci_init+0x74>)
 801821a:	689b      	ldr	r3, [r3, #8]
 801821c:	4798      	blx	r3
}
 801821e:	bf00      	nop
 8018220:	3710      	adds	r7, #16
 8018222:	46bd      	mov	sp, r7
 8018224:	bd80      	pop	{r7, pc}
 8018226:	bf00      	nop
 8018228:	20000490 	.word	0x20000490
 801822c:	20000690 	.word	0x20000690
 8018230:	20000698 	.word	0x20000698
 8018234:	200001d4 	.word	0x200001d4

08018238 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8018238:	b480      	push	{r7}
 801823a:	b083      	sub	sp, #12
 801823c:	af00      	add	r7, sp, #0
 801823e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	4a0b      	ldr	r2, [pc, #44]	; (8018274 <hci_register_io_bus+0x3c>)
 8018246:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	68db      	ldr	r3, [r3, #12]
 801824c:	4a09      	ldr	r2, [pc, #36]	; (8018274 <hci_register_io_bus+0x3c>)
 801824e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	691b      	ldr	r3, [r3, #16]
 8018254:	4a07      	ldr	r2, [pc, #28]	; (8018274 <hci_register_io_bus+0x3c>)
 8018256:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	699b      	ldr	r3, [r3, #24]
 801825c:	4a05      	ldr	r2, [pc, #20]	; (8018274 <hci_register_io_bus+0x3c>)
 801825e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	689b      	ldr	r3, [r3, #8]
 8018264:	4a03      	ldr	r2, [pc, #12]	; (8018274 <hci_register_io_bus+0x3c>)
 8018266:	6093      	str	r3, [r2, #8]
}
 8018268:	bf00      	nop
 801826a:	370c      	adds	r7, #12
 801826c:	46bd      	mov	sp, r7
 801826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018272:	4770      	bx	lr
 8018274:	20000490 	.word	0x20000490

08018278 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b08e      	sub	sp, #56	; 0x38
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]
 8018280:	460b      	mov	r3, r1
 8018282:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	885b      	ldrh	r3, [r3, #2]
 8018288:	b21b      	sxth	r3, r3
 801828a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801828e:	b21a      	sxth	r2, r3
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	881b      	ldrh	r3, [r3, #0]
 8018294:	029b      	lsls	r3, r3, #10
 8018296:	b21b      	sxth	r3, r3
 8018298:	4313      	orrs	r3, r2
 801829a:	b21b      	sxth	r3, r3
 801829c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 801829e:	2300      	movs	r3, #0
 80182a0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80182a2:	f107 0308 	add.w	r3, r7, #8
 80182a6:	4618      	mov	r0, r3
 80182a8:	f000 f97a 	bl	80185a0 <list_init_head>

  free_event_list();
 80182ac:	f7ff ff64 	bl	8018178 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	8818      	ldrh	r0, [r3, #0]
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	8859      	ldrh	r1, [r3, #2]
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	68db      	ldr	r3, [r3, #12]
 80182bc:	b2da      	uxtb	r2, r3
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	689b      	ldr	r3, [r3, #8]
 80182c2:	f7ff fefd 	bl	80180c0 <send_cmd>
  
  if (async)
 80182c6:	78fb      	ldrb	r3, [r7, #3]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d001      	beq.n	80182d0 <hci_send_req+0x58>
  {
    return 0;
 80182cc:	2300      	movs	r3, #0
 80182ce:	e0e5      	b.n	801849c <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80182d0:	f7fa fc1e 	bl	8012b10 <HAL_GetTick>
 80182d4:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80182d6:	f7fa fc1b 	bl	8012b10 <HAL_GetTick>
 80182da:	4602      	mov	r2, r0
 80182dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182de:	1ad3      	subs	r3, r2, r3
 80182e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80182e4:	f200 80b6 	bhi.w	8018454 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80182e8:	486e      	ldr	r0, [pc, #440]	; (80184a4 <hci_send_req+0x22c>)
 80182ea:	f000 f969 	bl	80185c0 <list_is_empty>
 80182ee:	4603      	mov	r3, r0
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d000      	beq.n	80182f6 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80182f4:	e7ef      	b.n	80182d6 <hci_send_req+0x5e>
      {
        break;
 80182f6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80182f8:	f107 0310 	add.w	r3, r7, #16
 80182fc:	4619      	mov	r1, r3
 80182fe:	4869      	ldr	r0, [pc, #420]	; (80184a4 <hci_send_req+0x22c>)
 8018300:	f000 f9ed 	bl	80186de <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8018304:	693b      	ldr	r3, [r7, #16]
 8018306:	3308      	adds	r3, #8
 8018308:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 801830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801830c:	781b      	ldrb	r3, [r3, #0]
 801830e:	2b04      	cmp	r3, #4
 8018310:	d17b      	bne.n	801840a <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8018312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018314:	3301      	adds	r3, #1
 8018316:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8018318:	693b      	ldr	r3, [r7, #16]
 801831a:	3308      	adds	r3, #8
 801831c:	3303      	adds	r3, #3
 801831e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8018320:	693b      	ldr	r3, [r7, #16]
 8018322:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8018326:	3b03      	subs	r3, #3
 8018328:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 801832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801832c:	781b      	ldrb	r3, [r3, #0]
 801832e:	2b3e      	cmp	r3, #62	; 0x3e
 8018330:	d04d      	beq.n	80183ce <hci_send_req+0x156>
 8018332:	2b3e      	cmp	r3, #62	; 0x3e
 8018334:	dc6b      	bgt.n	801840e <hci_send_req+0x196>
 8018336:	2b10      	cmp	r3, #16
 8018338:	f000 808e 	beq.w	8018458 <hci_send_req+0x1e0>
 801833c:	2b10      	cmp	r3, #16
 801833e:	dc66      	bgt.n	801840e <hci_send_req+0x196>
 8018340:	2b0e      	cmp	r3, #14
 8018342:	d024      	beq.n	801838e <hci_send_req+0x116>
 8018344:	2b0f      	cmp	r3, #15
 8018346:	d162      	bne.n	801840e <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8018348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801834a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 801834c:	69bb      	ldr	r3, [r7, #24]
 801834e:	885b      	ldrh	r3, [r3, #2]
 8018350:	b29b      	uxth	r3, r3
 8018352:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018354:	429a      	cmp	r2, r3
 8018356:	f040 8081 	bne.w	801845c <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	685b      	ldr	r3, [r3, #4]
 801835e:	2b0f      	cmp	r3, #15
 8018360:	d004      	beq.n	801836c <hci_send_req+0xf4>
          if (cs->status) {
 8018362:	69bb      	ldr	r3, [r7, #24]
 8018364:	781b      	ldrb	r3, [r3, #0]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d053      	beq.n	8018412 <hci_send_req+0x19a>
            goto failed;
 801836a:	e07a      	b.n	8018462 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	695a      	ldr	r2, [r3, #20]
 8018370:	6a3b      	ldr	r3, [r7, #32]
 8018372:	429a      	cmp	r2, r3
 8018374:	bf28      	it	cs
 8018376:	461a      	movcs	r2, r3
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	6918      	ldr	r0, [r3, #16]
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	695b      	ldr	r3, [r3, #20]
 8018384:	461a      	mov	r2, r3
 8018386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018388:	f000 fc17 	bl	8018bba <memcpy>
        goto done;
 801838c:	e07a      	b.n	8018484 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 801838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018390:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8018392:	697b      	ldr	r3, [r7, #20]
 8018394:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8018398:	b29b      	uxth	r3, r3
 801839a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801839c:	429a      	cmp	r2, r3
 801839e:	d15f      	bne.n	8018460 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80183a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183a2:	3303      	adds	r3, #3
 80183a4:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80183a6:	6a3b      	ldr	r3, [r7, #32]
 80183a8:	3b03      	subs	r3, #3
 80183aa:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	695a      	ldr	r2, [r3, #20]
 80183b0:	6a3b      	ldr	r3, [r7, #32]
 80183b2:	429a      	cmp	r2, r3
 80183b4:	bf28      	it	cs
 80183b6:	461a      	movcs	r2, r3
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	6918      	ldr	r0, [r3, #16]
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	695b      	ldr	r3, [r3, #20]
 80183c4:	461a      	mov	r2, r3
 80183c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80183c8:	f000 fbf7 	bl	8018bba <memcpy>
        goto done;
 80183cc:	e05a      	b.n	8018484 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80183ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d0:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80183d2:	69fb      	ldr	r3, [r7, #28]
 80183d4:	781b      	ldrb	r3, [r3, #0]
 80183d6:	461a      	mov	r2, r3
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	685b      	ldr	r3, [r3, #4]
 80183dc:	429a      	cmp	r2, r3
 80183de:	d11a      	bne.n	8018416 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 80183e0:	6a3b      	ldr	r3, [r7, #32]
 80183e2:	3b01      	subs	r3, #1
 80183e4:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	695a      	ldr	r2, [r3, #20]
 80183ea:	6a3b      	ldr	r3, [r7, #32]
 80183ec:	429a      	cmp	r2, r3
 80183ee:	bf28      	it	cs
 80183f0:	461a      	movcs	r2, r3
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	6918      	ldr	r0, [r3, #16]
 80183fa:	69fb      	ldr	r3, [r7, #28]
 80183fc:	1c59      	adds	r1, r3, #1
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	695b      	ldr	r3, [r3, #20]
 8018402:	461a      	mov	r2, r3
 8018404:	f000 fbd9 	bl	8018bba <memcpy>
        goto done;
 8018408:	e03c      	b.n	8018484 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 801840a:	bf00      	nop
 801840c:	e004      	b.n	8018418 <hci_send_req+0x1a0>
        break;
 801840e:	bf00      	nop
 8018410:	e002      	b.n	8018418 <hci_send_req+0x1a0>
          break;
 8018412:	bf00      	nop
 8018414:	e000      	b.n	8018418 <hci_send_req+0x1a0>
          break;
 8018416:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8018418:	4823      	ldr	r0, [pc, #140]	; (80184a8 <hci_send_req+0x230>)
 801841a:	f000 f8d1 	bl	80185c0 <list_is_empty>
 801841e:	4603      	mov	r3, r0
 8018420:	2b00      	cmp	r3, #0
 8018422:	d00d      	beq.n	8018440 <hci_send_req+0x1c8>
 8018424:	481f      	ldr	r0, [pc, #124]	; (80184a4 <hci_send_req+0x22c>)
 8018426:	f000 f8cb 	bl	80185c0 <list_is_empty>
 801842a:	4603      	mov	r3, r0
 801842c:	2b00      	cmp	r3, #0
 801842e:	d007      	beq.n	8018440 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8018430:	693b      	ldr	r3, [r7, #16]
 8018432:	4619      	mov	r1, r3
 8018434:	481c      	ldr	r0, [pc, #112]	; (80184a8 <hci_send_req+0x230>)
 8018436:	f000 f90b 	bl	8018650 <list_insert_tail>
      hciReadPacket=NULL;
 801843a:	2300      	movs	r3, #0
 801843c:	613b      	str	r3, [r7, #16]
 801843e:	e008      	b.n	8018452 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8018440:	693a      	ldr	r2, [r7, #16]
 8018442:	f107 0308 	add.w	r3, r7, #8
 8018446:	4611      	mov	r1, r2
 8018448:	4618      	mov	r0, r3
 801844a:	f000 f901 	bl	8018650 <list_insert_tail>
      hciReadPacket=NULL;
 801844e:	2300      	movs	r3, #0
 8018450:	613b      	str	r3, [r7, #16]
  {
 8018452:	e73d      	b.n	80182d0 <hci_send_req+0x58>
        goto failed;
 8018454:	bf00      	nop
 8018456:	e004      	b.n	8018462 <hci_send_req+0x1ea>
        goto failed;
 8018458:	bf00      	nop
 801845a:	e002      	b.n	8018462 <hci_send_req+0x1ea>
          goto failed;
 801845c:	bf00      	nop
 801845e:	e000      	b.n	8018462 <hci_send_req+0x1ea>
          goto failed;
 8018460:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8018462:	693b      	ldr	r3, [r7, #16]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d004      	beq.n	8018472 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8018468:	693b      	ldr	r3, [r7, #16]
 801846a:	4619      	mov	r1, r3
 801846c:	480e      	ldr	r0, [pc, #56]	; (80184a8 <hci_send_req+0x230>)
 801846e:	f000 f8c9 	bl	8018604 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8018472:	f107 0308 	add.w	r3, r7, #8
 8018476:	4619      	mov	r1, r3
 8018478:	480a      	ldr	r0, [pc, #40]	; (80184a4 <hci_send_req+0x22c>)
 801847a:	f7ff fe61 	bl	8018140 <move_list>

  return -1;
 801847e:	f04f 33ff 	mov.w	r3, #4294967295
 8018482:	e00b      	b.n	801849c <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8018484:	693b      	ldr	r3, [r7, #16]
 8018486:	4619      	mov	r1, r3
 8018488:	4807      	ldr	r0, [pc, #28]	; (80184a8 <hci_send_req+0x230>)
 801848a:	f000 f8bb 	bl	8018604 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 801848e:	f107 0308 	add.w	r3, r7, #8
 8018492:	4619      	mov	r1, r3
 8018494:	4803      	ldr	r0, [pc, #12]	; (80184a4 <hci_send_req+0x22c>)
 8018496:	f7ff fe53 	bl	8018140 <move_list>

  return 0;
 801849a:	2300      	movs	r3, #0
}
 801849c:	4618      	mov	r0, r3
 801849e:	3738      	adds	r7, #56	; 0x38
 80184a0:	46bd      	mov	sp, r7
 80184a2:	bd80      	pop	{r7, pc}
 80184a4:	20000698 	.word	0x20000698
 80184a8:	20000690 	.word	0x20000690

080184ac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b082      	sub	sp, #8
 80184b0:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80184b2:	2300      	movs	r3, #0
 80184b4:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80184b6:	e013      	b.n	80184e0 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80184b8:	1d3b      	adds	r3, r7, #4
 80184ba:	4619      	mov	r1, r3
 80184bc:	480e      	ldr	r0, [pc, #56]	; (80184f8 <hci_user_evt_proc+0x4c>)
 80184be:	f000 f90e 	bl	80186de <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80184c2:	4b0e      	ldr	r3, [pc, #56]	; (80184fc <hci_user_evt_proc+0x50>)
 80184c4:	69db      	ldr	r3, [r3, #28]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d005      	beq.n	80184d6 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80184ca:	4b0c      	ldr	r3, [pc, #48]	; (80184fc <hci_user_evt_proc+0x50>)
 80184cc:	69db      	ldr	r3, [r3, #28]
 80184ce:	687a      	ldr	r2, [r7, #4]
 80184d0:	3208      	adds	r2, #8
 80184d2:	4610      	mov	r0, r2
 80184d4:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	4619      	mov	r1, r3
 80184da:	4809      	ldr	r0, [pc, #36]	; (8018500 <hci_user_evt_proc+0x54>)
 80184dc:	f000 f8b8 	bl	8018650 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80184e0:	4805      	ldr	r0, [pc, #20]	; (80184f8 <hci_user_evt_proc+0x4c>)
 80184e2:	f000 f86d 	bl	80185c0 <list_is_empty>
 80184e6:	4603      	mov	r3, r0
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d0e5      	beq.n	80184b8 <hci_user_evt_proc+0xc>
  }
}
 80184ec:	bf00      	nop
 80184ee:	bf00      	nop
 80184f0:	3708      	adds	r7, #8
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd80      	pop	{r7, pc}
 80184f6:	bf00      	nop
 80184f8:	20000698 	.word	0x20000698
 80184fc:	20000490 	.word	0x20000490
 8018500:	20000690 	.word	0x20000690

08018504 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b086      	sub	sp, #24
 8018508:	af00      	add	r7, sp, #0
 801850a:	6078      	str	r0, [r7, #4]

  tHciDataPacket * hciReadPacket = NULL;
 801850c:	2300      	movs	r3, #0
 801850e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8018510:	2300      	movs	r3, #0
 8018512:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8018514:	481f      	ldr	r0, [pc, #124]	; (8018594 <hci_notify_asynch_evt+0x90>)
 8018516:	f000 f853 	bl	80185c0 <list_is_empty>
 801851a:	4603      	mov	r3, r0
 801851c:	2b00      	cmp	r3, #0
 801851e:	d132      	bne.n	8018586 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8018520:	f107 030c 	add.w	r3, r7, #12
 8018524:	4619      	mov	r1, r3
 8018526:	481b      	ldr	r0, [pc, #108]	; (8018594 <hci_notify_asynch_evt+0x90>)
 8018528:	f000 f8d9 	bl	80186de <list_remove_head>
    
    if (hciContext.io.Receive)
 801852c:	4b1a      	ldr	r3, [pc, #104]	; (8018598 <hci_notify_asynch_evt+0x94>)
 801852e:	68db      	ldr	r3, [r3, #12]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d02a      	beq.n	801858a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8018534:	4b18      	ldr	r3, [pc, #96]	; (8018598 <hci_notify_asynch_evt+0x94>)
 8018536:	68db      	ldr	r3, [r3, #12]
 8018538:	68fa      	ldr	r2, [r7, #12]
 801853a:	3208      	adds	r2, #8
 801853c:	2180      	movs	r1, #128	; 0x80
 801853e:	4610      	mov	r0, r2
 8018540:	4798      	blx	r3
 8018542:	4603      	mov	r3, r0
 8018544:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8018546:	7cfb      	ldrb	r3, [r7, #19]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d016      	beq.n	801857a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	7cfa      	ldrb	r2, [r7, #19]
 8018550:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	4618      	mov	r0, r3
 8018558:	f7ff fd91 	bl	801807e <verify_packet>
 801855c:	4603      	mov	r3, r0
 801855e:	2b00      	cmp	r3, #0
 8018560:	d105      	bne.n	801856e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	4619      	mov	r1, r3
 8018566:	480d      	ldr	r0, [pc, #52]	; (801859c <hci_notify_asynch_evt+0x98>)
 8018568:	f000 f872 	bl	8018650 <list_insert_tail>
 801856c:	e00d      	b.n	801858a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	4619      	mov	r1, r3
 8018572:	4808      	ldr	r0, [pc, #32]	; (8018594 <hci_notify_asynch_evt+0x90>)
 8018574:	f000 f846 	bl	8018604 <list_insert_head>
 8018578:	e007      	b.n	801858a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	4619      	mov	r1, r3
 801857e:	4805      	ldr	r0, [pc, #20]	; (8018594 <hci_notify_asynch_evt+0x90>)
 8018580:	f000 f840 	bl	8018604 <list_insert_head>
 8018584:	e001      	b.n	801858a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8018586:	2301      	movs	r3, #1
 8018588:	617b      	str	r3, [r7, #20]
  }
  return ret;
 801858a:	697b      	ldr	r3, [r7, #20]

}
 801858c:	4618      	mov	r0, r3
 801858e:	3718      	adds	r7, #24
 8018590:	46bd      	mov	sp, r7
 8018592:	bd80      	pop	{r7, pc}
 8018594:	20000690 	.word	0x20000690
 8018598:	20000490 	.word	0x20000490
 801859c:	20000698 	.word	0x20000698

080185a0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80185a0:	b480      	push	{r7}
 80185a2:	b083      	sub	sp, #12
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	687a      	ldr	r2, [r7, #4]
 80185ac:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	687a      	ldr	r2, [r7, #4]
 80185b2:	605a      	str	r2, [r3, #4]
}
 80185b4:	bf00      	nop
 80185b6:	370c      	adds	r7, #12
 80185b8:	46bd      	mov	sp, r7
 80185ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185be:	4770      	bx	lr

080185c0 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80185c0:	b480      	push	{r7}
 80185c2:	b087      	sub	sp, #28
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80185c8:	f3ef 8310 	mrs	r3, PRIMASK
 80185cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80185ce:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80185d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80185d2:	b672      	cpsid	i
}
 80185d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	687a      	ldr	r2, [r7, #4]
 80185dc:	429a      	cmp	r2, r3
 80185de:	d102      	bne.n	80185e6 <list_is_empty+0x26>
  {
    return_value = 1;
 80185e0:	2301      	movs	r3, #1
 80185e2:	75fb      	strb	r3, [r7, #23]
 80185e4:	e001      	b.n	80185ea <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80185e6:	2300      	movs	r3, #0
 80185e8:	75fb      	strb	r3, [r7, #23]
 80185ea:	693b      	ldr	r3, [r7, #16]
 80185ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185ee:	68bb      	ldr	r3, [r7, #8]
 80185f0:	f383 8810 	msr	PRIMASK, r3
}
 80185f4:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80185f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	371c      	adds	r7, #28
 80185fc:	46bd      	mov	sp, r7
 80185fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018602:	4770      	bx	lr

08018604 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8018604:	b480      	push	{r7}
 8018606:	b087      	sub	sp, #28
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801860e:	f3ef 8310 	mrs	r3, PRIMASK
 8018612:	60fb      	str	r3, [r7, #12]
  return(result);
 8018614:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8018616:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018618:	b672      	cpsid	i
}
 801861a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	681a      	ldr	r2, [r3, #0]
 8018620:	683b      	ldr	r3, [r7, #0]
 8018622:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	687a      	ldr	r2, [r7, #4]
 8018628:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	683a      	ldr	r2, [r7, #0]
 801862e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8018630:	683b      	ldr	r3, [r7, #0]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	683a      	ldr	r2, [r7, #0]
 8018636:	605a      	str	r2, [r3, #4]
 8018638:	697b      	ldr	r3, [r7, #20]
 801863a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801863c:	693b      	ldr	r3, [r7, #16]
 801863e:	f383 8810 	msr	PRIMASK, r3
}
 8018642:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8018644:	bf00      	nop
 8018646:	371c      	adds	r7, #28
 8018648:	46bd      	mov	sp, r7
 801864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801864e:	4770      	bx	lr

08018650 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8018650:	b480      	push	{r7}
 8018652:	b087      	sub	sp, #28
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
 8018658:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801865a:	f3ef 8310 	mrs	r3, PRIMASK
 801865e:	60fb      	str	r3, [r7, #12]
  return(result);
 8018660:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8018662:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018664:	b672      	cpsid	i
}
 8018666:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	687a      	ldr	r2, [r7, #4]
 801866c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	685a      	ldr	r2, [r3, #4]
 8018672:	683b      	ldr	r3, [r7, #0]
 8018674:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	683a      	ldr	r2, [r7, #0]
 801867a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 801867c:	683b      	ldr	r3, [r7, #0]
 801867e:	685b      	ldr	r3, [r3, #4]
 8018680:	683a      	ldr	r2, [r7, #0]
 8018682:	601a      	str	r2, [r3, #0]
 8018684:	697b      	ldr	r3, [r7, #20]
 8018686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018688:	693b      	ldr	r3, [r7, #16]
 801868a:	f383 8810 	msr	PRIMASK, r3
}
 801868e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8018690:	bf00      	nop
 8018692:	371c      	adds	r7, #28
 8018694:	46bd      	mov	sp, r7
 8018696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869a:	4770      	bx	lr

0801869c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 801869c:	b480      	push	{r7}
 801869e:	b087      	sub	sp, #28
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80186a4:	f3ef 8310 	mrs	r3, PRIMASK
 80186a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80186aa:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80186ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80186ae:	b672      	cpsid	i
}
 80186b0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	685b      	ldr	r3, [r3, #4]
 80186b6:	687a      	ldr	r2, [r7, #4]
 80186b8:	6812      	ldr	r2, [r2, #0]
 80186ba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	687a      	ldr	r2, [r7, #4]
 80186c2:	6852      	ldr	r2, [r2, #4]
 80186c4:	605a      	str	r2, [r3, #4]
 80186c6:	697b      	ldr	r3, [r7, #20]
 80186c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186ca:	693b      	ldr	r3, [r7, #16]
 80186cc:	f383 8810 	msr	PRIMASK, r3
}
 80186d0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80186d2:	bf00      	nop
 80186d4:	371c      	adds	r7, #28
 80186d6:	46bd      	mov	sp, r7
 80186d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186dc:	4770      	bx	lr

080186de <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80186de:	b580      	push	{r7, lr}
 80186e0:	b086      	sub	sp, #24
 80186e2:	af00      	add	r7, sp, #0
 80186e4:	6078      	str	r0, [r7, #4]
 80186e6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80186e8:	f3ef 8310 	mrs	r3, PRIMASK
 80186ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80186ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80186f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80186f2:	b672      	cpsid	i
}
 80186f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	681a      	ldr	r2, [r3, #0]
 80186fa:	683b      	ldr	r3, [r7, #0]
 80186fc:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	4618      	mov	r0, r3
 8018704:	f7ff ffca 	bl	801869c <list_remove_node>
  (*node)->next = NULL;
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	2200      	movs	r2, #0
 801870e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8018710:	683b      	ldr	r3, [r7, #0]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	2200      	movs	r2, #0
 8018716:	605a      	str	r2, [r3, #4]
 8018718:	697b      	ldr	r3, [r7, #20]
 801871a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801871c:	693b      	ldr	r3, [r7, #16]
 801871e:	f383 8810 	msr	PRIMASK, r3
}
 8018722:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8018724:	bf00      	nop
 8018726:	3718      	adds	r7, #24
 8018728:	46bd      	mov	sp, r7
 801872a:	bd80      	pop	{r7, pc}

0801872c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 801872c:	b580      	push	{r7, lr}
 801872e:	b086      	sub	sp, #24
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
 8018734:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018736:	f3ef 8310 	mrs	r3, PRIMASK
 801873a:	60fb      	str	r3, [r7, #12]
  return(result);
 801873c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801873e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018740:	b672      	cpsid	i
}
 8018742:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	685a      	ldr	r2, [r3, #4]
 8018748:	683b      	ldr	r3, [r7, #0]
 801874a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	685b      	ldr	r3, [r3, #4]
 8018750:	4618      	mov	r0, r3
 8018752:	f7ff ffa3 	bl	801869c <list_remove_node>
  (*node)->next = NULL;
 8018756:	683b      	ldr	r3, [r7, #0]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	2200      	movs	r2, #0
 801875c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	2200      	movs	r2, #0
 8018764:	605a      	str	r2, [r3, #4]
 8018766:	697b      	ldr	r3, [r7, #20]
 8018768:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801876a:	693b      	ldr	r3, [r7, #16]
 801876c:	f383 8810 	msr	PRIMASK, r3
}
 8018770:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8018772:	bf00      	nop
 8018774:	3718      	adds	r7, #24
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}

0801877a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 801877a:	b480      	push	{r7}
 801877c:	b089      	sub	sp, #36	; 0x24
 801877e:	af00      	add	r7, sp, #0
 8018780:	6078      	str	r0, [r7, #4]
  int size = 0;
 8018782:	2300      	movs	r3, #0
 8018784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018786:	f3ef 8310 	mrs	r3, PRIMASK
 801878a:	613b      	str	r3, [r7, #16]
  return(result);
 801878c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801878e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018790:	b672      	cpsid	i
}
 8018792:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 801879a:	e005      	b.n	80187a8 <list_get_size+0x2e>
  {
    size++;
 801879c:	69fb      	ldr	r3, [r7, #28]
 801879e:	3301      	adds	r3, #1
 80187a0:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80187a2:	69bb      	ldr	r3, [r7, #24]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80187a8:	69ba      	ldr	r2, [r7, #24]
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	429a      	cmp	r2, r3
 80187ae:	d1f5      	bne.n	801879c <list_get_size+0x22>
 80187b0:	697b      	ldr	r3, [r7, #20]
 80187b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	f383 8810 	msr	PRIMASK, r3
}
 80187ba:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80187bc:	69fb      	ldr	r3, [r7, #28]
}
 80187be:	4618      	mov	r0, r3
 80187c0:	3724      	adds	r7, #36	; 0x24
 80187c2:	46bd      	mov	sp, r7
 80187c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c8:	4770      	bx	lr
	...

080187cc <__errno>:
 80187cc:	4b01      	ldr	r3, [pc, #4]	; (80187d4 <__errno+0x8>)
 80187ce:	6818      	ldr	r0, [r3, #0]
 80187d0:	4770      	bx	lr
 80187d2:	bf00      	nop
 80187d4:	2000003c 	.word	0x2000003c

080187d8 <__sflush_r>:
 80187d8:	898a      	ldrh	r2, [r1, #12]
 80187da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187de:	4605      	mov	r5, r0
 80187e0:	0710      	lsls	r0, r2, #28
 80187e2:	460c      	mov	r4, r1
 80187e4:	d458      	bmi.n	8018898 <__sflush_r+0xc0>
 80187e6:	684b      	ldr	r3, [r1, #4]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	dc05      	bgt.n	80187f8 <__sflush_r+0x20>
 80187ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	dc02      	bgt.n	80187f8 <__sflush_r+0x20>
 80187f2:	2000      	movs	r0, #0
 80187f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80187fa:	2e00      	cmp	r6, #0
 80187fc:	d0f9      	beq.n	80187f2 <__sflush_r+0x1a>
 80187fe:	2300      	movs	r3, #0
 8018800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018804:	682f      	ldr	r7, [r5, #0]
 8018806:	602b      	str	r3, [r5, #0]
 8018808:	d032      	beq.n	8018870 <__sflush_r+0x98>
 801880a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801880c:	89a3      	ldrh	r3, [r4, #12]
 801880e:	075a      	lsls	r2, r3, #29
 8018810:	d505      	bpl.n	801881e <__sflush_r+0x46>
 8018812:	6863      	ldr	r3, [r4, #4]
 8018814:	1ac0      	subs	r0, r0, r3
 8018816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018818:	b10b      	cbz	r3, 801881e <__sflush_r+0x46>
 801881a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801881c:	1ac0      	subs	r0, r0, r3
 801881e:	2300      	movs	r3, #0
 8018820:	4602      	mov	r2, r0
 8018822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018824:	6a21      	ldr	r1, [r4, #32]
 8018826:	4628      	mov	r0, r5
 8018828:	47b0      	blx	r6
 801882a:	1c43      	adds	r3, r0, #1
 801882c:	89a3      	ldrh	r3, [r4, #12]
 801882e:	d106      	bne.n	801883e <__sflush_r+0x66>
 8018830:	6829      	ldr	r1, [r5, #0]
 8018832:	291d      	cmp	r1, #29
 8018834:	d82c      	bhi.n	8018890 <__sflush_r+0xb8>
 8018836:	4a2a      	ldr	r2, [pc, #168]	; (80188e0 <__sflush_r+0x108>)
 8018838:	40ca      	lsrs	r2, r1
 801883a:	07d6      	lsls	r6, r2, #31
 801883c:	d528      	bpl.n	8018890 <__sflush_r+0xb8>
 801883e:	2200      	movs	r2, #0
 8018840:	6062      	str	r2, [r4, #4]
 8018842:	04d9      	lsls	r1, r3, #19
 8018844:	6922      	ldr	r2, [r4, #16]
 8018846:	6022      	str	r2, [r4, #0]
 8018848:	d504      	bpl.n	8018854 <__sflush_r+0x7c>
 801884a:	1c42      	adds	r2, r0, #1
 801884c:	d101      	bne.n	8018852 <__sflush_r+0x7a>
 801884e:	682b      	ldr	r3, [r5, #0]
 8018850:	b903      	cbnz	r3, 8018854 <__sflush_r+0x7c>
 8018852:	6560      	str	r0, [r4, #84]	; 0x54
 8018854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018856:	602f      	str	r7, [r5, #0]
 8018858:	2900      	cmp	r1, #0
 801885a:	d0ca      	beq.n	80187f2 <__sflush_r+0x1a>
 801885c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018860:	4299      	cmp	r1, r3
 8018862:	d002      	beq.n	801886a <__sflush_r+0x92>
 8018864:	4628      	mov	r0, r5
 8018866:	f000 f9bf 	bl	8018be8 <_free_r>
 801886a:	2000      	movs	r0, #0
 801886c:	6360      	str	r0, [r4, #52]	; 0x34
 801886e:	e7c1      	b.n	80187f4 <__sflush_r+0x1c>
 8018870:	6a21      	ldr	r1, [r4, #32]
 8018872:	2301      	movs	r3, #1
 8018874:	4628      	mov	r0, r5
 8018876:	47b0      	blx	r6
 8018878:	1c41      	adds	r1, r0, #1
 801887a:	d1c7      	bne.n	801880c <__sflush_r+0x34>
 801887c:	682b      	ldr	r3, [r5, #0]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d0c4      	beq.n	801880c <__sflush_r+0x34>
 8018882:	2b1d      	cmp	r3, #29
 8018884:	d001      	beq.n	801888a <__sflush_r+0xb2>
 8018886:	2b16      	cmp	r3, #22
 8018888:	d101      	bne.n	801888e <__sflush_r+0xb6>
 801888a:	602f      	str	r7, [r5, #0]
 801888c:	e7b1      	b.n	80187f2 <__sflush_r+0x1a>
 801888e:	89a3      	ldrh	r3, [r4, #12]
 8018890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018894:	81a3      	strh	r3, [r4, #12]
 8018896:	e7ad      	b.n	80187f4 <__sflush_r+0x1c>
 8018898:	690f      	ldr	r7, [r1, #16]
 801889a:	2f00      	cmp	r7, #0
 801889c:	d0a9      	beq.n	80187f2 <__sflush_r+0x1a>
 801889e:	0793      	lsls	r3, r2, #30
 80188a0:	680e      	ldr	r6, [r1, #0]
 80188a2:	bf08      	it	eq
 80188a4:	694b      	ldreq	r3, [r1, #20]
 80188a6:	600f      	str	r7, [r1, #0]
 80188a8:	bf18      	it	ne
 80188aa:	2300      	movne	r3, #0
 80188ac:	eba6 0807 	sub.w	r8, r6, r7
 80188b0:	608b      	str	r3, [r1, #8]
 80188b2:	f1b8 0f00 	cmp.w	r8, #0
 80188b6:	dd9c      	ble.n	80187f2 <__sflush_r+0x1a>
 80188b8:	6a21      	ldr	r1, [r4, #32]
 80188ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80188bc:	4643      	mov	r3, r8
 80188be:	463a      	mov	r2, r7
 80188c0:	4628      	mov	r0, r5
 80188c2:	47b0      	blx	r6
 80188c4:	2800      	cmp	r0, #0
 80188c6:	dc06      	bgt.n	80188d6 <__sflush_r+0xfe>
 80188c8:	89a3      	ldrh	r3, [r4, #12]
 80188ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188ce:	81a3      	strh	r3, [r4, #12]
 80188d0:	f04f 30ff 	mov.w	r0, #4294967295
 80188d4:	e78e      	b.n	80187f4 <__sflush_r+0x1c>
 80188d6:	4407      	add	r7, r0
 80188d8:	eba8 0800 	sub.w	r8, r8, r0
 80188dc:	e7e9      	b.n	80188b2 <__sflush_r+0xda>
 80188de:	bf00      	nop
 80188e0:	20400001 	.word	0x20400001

080188e4 <_fflush_r>:
 80188e4:	b538      	push	{r3, r4, r5, lr}
 80188e6:	690b      	ldr	r3, [r1, #16]
 80188e8:	4605      	mov	r5, r0
 80188ea:	460c      	mov	r4, r1
 80188ec:	b913      	cbnz	r3, 80188f4 <_fflush_r+0x10>
 80188ee:	2500      	movs	r5, #0
 80188f0:	4628      	mov	r0, r5
 80188f2:	bd38      	pop	{r3, r4, r5, pc}
 80188f4:	b118      	cbz	r0, 80188fe <_fflush_r+0x1a>
 80188f6:	6983      	ldr	r3, [r0, #24]
 80188f8:	b90b      	cbnz	r3, 80188fe <_fflush_r+0x1a>
 80188fa:	f000 f899 	bl	8018a30 <__sinit>
 80188fe:	4b14      	ldr	r3, [pc, #80]	; (8018950 <_fflush_r+0x6c>)
 8018900:	429c      	cmp	r4, r3
 8018902:	d11b      	bne.n	801893c <_fflush_r+0x58>
 8018904:	686c      	ldr	r4, [r5, #4]
 8018906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d0ef      	beq.n	80188ee <_fflush_r+0xa>
 801890e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018910:	07d0      	lsls	r0, r2, #31
 8018912:	d404      	bmi.n	801891e <_fflush_r+0x3a>
 8018914:	0599      	lsls	r1, r3, #22
 8018916:	d402      	bmi.n	801891e <_fflush_r+0x3a>
 8018918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801891a:	f000 f94c 	bl	8018bb6 <__retarget_lock_acquire_recursive>
 801891e:	4628      	mov	r0, r5
 8018920:	4621      	mov	r1, r4
 8018922:	f7ff ff59 	bl	80187d8 <__sflush_r>
 8018926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018928:	07da      	lsls	r2, r3, #31
 801892a:	4605      	mov	r5, r0
 801892c:	d4e0      	bmi.n	80188f0 <_fflush_r+0xc>
 801892e:	89a3      	ldrh	r3, [r4, #12]
 8018930:	059b      	lsls	r3, r3, #22
 8018932:	d4dd      	bmi.n	80188f0 <_fflush_r+0xc>
 8018934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018936:	f000 f93f 	bl	8018bb8 <__retarget_lock_release_recursive>
 801893a:	e7d9      	b.n	80188f0 <_fflush_r+0xc>
 801893c:	4b05      	ldr	r3, [pc, #20]	; (8018954 <_fflush_r+0x70>)
 801893e:	429c      	cmp	r4, r3
 8018940:	d101      	bne.n	8018946 <_fflush_r+0x62>
 8018942:	68ac      	ldr	r4, [r5, #8]
 8018944:	e7df      	b.n	8018906 <_fflush_r+0x22>
 8018946:	4b04      	ldr	r3, [pc, #16]	; (8018958 <_fflush_r+0x74>)
 8018948:	429c      	cmp	r4, r3
 801894a:	bf08      	it	eq
 801894c:	68ec      	ldreq	r4, [r5, #12]
 801894e:	e7da      	b.n	8018906 <_fflush_r+0x22>
 8018950:	08019f18 	.word	0x08019f18
 8018954:	08019f38 	.word	0x08019f38
 8018958:	08019ef8 	.word	0x08019ef8

0801895c <fflush>:
 801895c:	4601      	mov	r1, r0
 801895e:	b920      	cbnz	r0, 801896a <fflush+0xe>
 8018960:	4b04      	ldr	r3, [pc, #16]	; (8018974 <fflush+0x18>)
 8018962:	4905      	ldr	r1, [pc, #20]	; (8018978 <fflush+0x1c>)
 8018964:	6818      	ldr	r0, [r3, #0]
 8018966:	f000 b8e1 	b.w	8018b2c <_fwalk_reent>
 801896a:	4b04      	ldr	r3, [pc, #16]	; (801897c <fflush+0x20>)
 801896c:	6818      	ldr	r0, [r3, #0]
 801896e:	f7ff bfb9 	b.w	80188e4 <_fflush_r>
 8018972:	bf00      	nop
 8018974:	08019f58 	.word	0x08019f58
 8018978:	080188e5 	.word	0x080188e5
 801897c:	2000003c 	.word	0x2000003c

08018980 <std>:
 8018980:	2300      	movs	r3, #0
 8018982:	b510      	push	{r4, lr}
 8018984:	4604      	mov	r4, r0
 8018986:	e9c0 3300 	strd	r3, r3, [r0]
 801898a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801898e:	6083      	str	r3, [r0, #8]
 8018990:	8181      	strh	r1, [r0, #12]
 8018992:	6643      	str	r3, [r0, #100]	; 0x64
 8018994:	81c2      	strh	r2, [r0, #14]
 8018996:	6183      	str	r3, [r0, #24]
 8018998:	4619      	mov	r1, r3
 801899a:	2208      	movs	r2, #8
 801899c:	305c      	adds	r0, #92	; 0x5c
 801899e:	f000 f91a 	bl	8018bd6 <memset>
 80189a2:	4b05      	ldr	r3, [pc, #20]	; (80189b8 <std+0x38>)
 80189a4:	6263      	str	r3, [r4, #36]	; 0x24
 80189a6:	4b05      	ldr	r3, [pc, #20]	; (80189bc <std+0x3c>)
 80189a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80189aa:	4b05      	ldr	r3, [pc, #20]	; (80189c0 <std+0x40>)
 80189ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80189ae:	4b05      	ldr	r3, [pc, #20]	; (80189c4 <std+0x44>)
 80189b0:	6224      	str	r4, [r4, #32]
 80189b2:	6323      	str	r3, [r4, #48]	; 0x30
 80189b4:	bd10      	pop	{r4, pc}
 80189b6:	bf00      	nop
 80189b8:	08018ee5 	.word	0x08018ee5
 80189bc:	08018f07 	.word	0x08018f07
 80189c0:	08018f3f 	.word	0x08018f3f
 80189c4:	08018f63 	.word	0x08018f63

080189c8 <_cleanup_r>:
 80189c8:	4901      	ldr	r1, [pc, #4]	; (80189d0 <_cleanup_r+0x8>)
 80189ca:	f000 b8af 	b.w	8018b2c <_fwalk_reent>
 80189ce:	bf00      	nop
 80189d0:	080188e5 	.word	0x080188e5

080189d4 <__sfmoreglue>:
 80189d4:	b570      	push	{r4, r5, r6, lr}
 80189d6:	1e4a      	subs	r2, r1, #1
 80189d8:	2568      	movs	r5, #104	; 0x68
 80189da:	4355      	muls	r5, r2
 80189dc:	460e      	mov	r6, r1
 80189de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80189e2:	f000 f951 	bl	8018c88 <_malloc_r>
 80189e6:	4604      	mov	r4, r0
 80189e8:	b140      	cbz	r0, 80189fc <__sfmoreglue+0x28>
 80189ea:	2100      	movs	r1, #0
 80189ec:	e9c0 1600 	strd	r1, r6, [r0]
 80189f0:	300c      	adds	r0, #12
 80189f2:	60a0      	str	r0, [r4, #8]
 80189f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80189f8:	f000 f8ed 	bl	8018bd6 <memset>
 80189fc:	4620      	mov	r0, r4
 80189fe:	bd70      	pop	{r4, r5, r6, pc}

08018a00 <__sfp_lock_acquire>:
 8018a00:	4801      	ldr	r0, [pc, #4]	; (8018a08 <__sfp_lock_acquire+0x8>)
 8018a02:	f000 b8d8 	b.w	8018bb6 <__retarget_lock_acquire_recursive>
 8018a06:	bf00      	nop
 8018a08:	200006a8 	.word	0x200006a8

08018a0c <__sfp_lock_release>:
 8018a0c:	4801      	ldr	r0, [pc, #4]	; (8018a14 <__sfp_lock_release+0x8>)
 8018a0e:	f000 b8d3 	b.w	8018bb8 <__retarget_lock_release_recursive>
 8018a12:	bf00      	nop
 8018a14:	200006a8 	.word	0x200006a8

08018a18 <__sinit_lock_acquire>:
 8018a18:	4801      	ldr	r0, [pc, #4]	; (8018a20 <__sinit_lock_acquire+0x8>)
 8018a1a:	f000 b8cc 	b.w	8018bb6 <__retarget_lock_acquire_recursive>
 8018a1e:	bf00      	nop
 8018a20:	200006a3 	.word	0x200006a3

08018a24 <__sinit_lock_release>:
 8018a24:	4801      	ldr	r0, [pc, #4]	; (8018a2c <__sinit_lock_release+0x8>)
 8018a26:	f000 b8c7 	b.w	8018bb8 <__retarget_lock_release_recursive>
 8018a2a:	bf00      	nop
 8018a2c:	200006a3 	.word	0x200006a3

08018a30 <__sinit>:
 8018a30:	b510      	push	{r4, lr}
 8018a32:	4604      	mov	r4, r0
 8018a34:	f7ff fff0 	bl	8018a18 <__sinit_lock_acquire>
 8018a38:	69a3      	ldr	r3, [r4, #24]
 8018a3a:	b11b      	cbz	r3, 8018a44 <__sinit+0x14>
 8018a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a40:	f7ff bff0 	b.w	8018a24 <__sinit_lock_release>
 8018a44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018a48:	6523      	str	r3, [r4, #80]	; 0x50
 8018a4a:	4b13      	ldr	r3, [pc, #76]	; (8018a98 <__sinit+0x68>)
 8018a4c:	4a13      	ldr	r2, [pc, #76]	; (8018a9c <__sinit+0x6c>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	62a2      	str	r2, [r4, #40]	; 0x28
 8018a52:	42a3      	cmp	r3, r4
 8018a54:	bf04      	itt	eq
 8018a56:	2301      	moveq	r3, #1
 8018a58:	61a3      	streq	r3, [r4, #24]
 8018a5a:	4620      	mov	r0, r4
 8018a5c:	f000 f820 	bl	8018aa0 <__sfp>
 8018a60:	6060      	str	r0, [r4, #4]
 8018a62:	4620      	mov	r0, r4
 8018a64:	f000 f81c 	bl	8018aa0 <__sfp>
 8018a68:	60a0      	str	r0, [r4, #8]
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	f000 f818 	bl	8018aa0 <__sfp>
 8018a70:	2200      	movs	r2, #0
 8018a72:	60e0      	str	r0, [r4, #12]
 8018a74:	2104      	movs	r1, #4
 8018a76:	6860      	ldr	r0, [r4, #4]
 8018a78:	f7ff ff82 	bl	8018980 <std>
 8018a7c:	68a0      	ldr	r0, [r4, #8]
 8018a7e:	2201      	movs	r2, #1
 8018a80:	2109      	movs	r1, #9
 8018a82:	f7ff ff7d 	bl	8018980 <std>
 8018a86:	68e0      	ldr	r0, [r4, #12]
 8018a88:	2202      	movs	r2, #2
 8018a8a:	2112      	movs	r1, #18
 8018a8c:	f7ff ff78 	bl	8018980 <std>
 8018a90:	2301      	movs	r3, #1
 8018a92:	61a3      	str	r3, [r4, #24]
 8018a94:	e7d2      	b.n	8018a3c <__sinit+0xc>
 8018a96:	bf00      	nop
 8018a98:	08019f58 	.word	0x08019f58
 8018a9c:	080189c9 	.word	0x080189c9

08018aa0 <__sfp>:
 8018aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aa2:	4607      	mov	r7, r0
 8018aa4:	f7ff ffac 	bl	8018a00 <__sfp_lock_acquire>
 8018aa8:	4b1e      	ldr	r3, [pc, #120]	; (8018b24 <__sfp+0x84>)
 8018aaa:	681e      	ldr	r6, [r3, #0]
 8018aac:	69b3      	ldr	r3, [r6, #24]
 8018aae:	b913      	cbnz	r3, 8018ab6 <__sfp+0x16>
 8018ab0:	4630      	mov	r0, r6
 8018ab2:	f7ff ffbd 	bl	8018a30 <__sinit>
 8018ab6:	3648      	adds	r6, #72	; 0x48
 8018ab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018abc:	3b01      	subs	r3, #1
 8018abe:	d503      	bpl.n	8018ac8 <__sfp+0x28>
 8018ac0:	6833      	ldr	r3, [r6, #0]
 8018ac2:	b30b      	cbz	r3, 8018b08 <__sfp+0x68>
 8018ac4:	6836      	ldr	r6, [r6, #0]
 8018ac6:	e7f7      	b.n	8018ab8 <__sfp+0x18>
 8018ac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018acc:	b9d5      	cbnz	r5, 8018b04 <__sfp+0x64>
 8018ace:	4b16      	ldr	r3, [pc, #88]	; (8018b28 <__sfp+0x88>)
 8018ad0:	60e3      	str	r3, [r4, #12]
 8018ad2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018ad6:	6665      	str	r5, [r4, #100]	; 0x64
 8018ad8:	f000 f86c 	bl	8018bb4 <__retarget_lock_init_recursive>
 8018adc:	f7ff ff96 	bl	8018a0c <__sfp_lock_release>
 8018ae0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018ae4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018ae8:	6025      	str	r5, [r4, #0]
 8018aea:	61a5      	str	r5, [r4, #24]
 8018aec:	2208      	movs	r2, #8
 8018aee:	4629      	mov	r1, r5
 8018af0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018af4:	f000 f86f 	bl	8018bd6 <memset>
 8018af8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018afc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018b00:	4620      	mov	r0, r4
 8018b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b04:	3468      	adds	r4, #104	; 0x68
 8018b06:	e7d9      	b.n	8018abc <__sfp+0x1c>
 8018b08:	2104      	movs	r1, #4
 8018b0a:	4638      	mov	r0, r7
 8018b0c:	f7ff ff62 	bl	80189d4 <__sfmoreglue>
 8018b10:	4604      	mov	r4, r0
 8018b12:	6030      	str	r0, [r6, #0]
 8018b14:	2800      	cmp	r0, #0
 8018b16:	d1d5      	bne.n	8018ac4 <__sfp+0x24>
 8018b18:	f7ff ff78 	bl	8018a0c <__sfp_lock_release>
 8018b1c:	230c      	movs	r3, #12
 8018b1e:	603b      	str	r3, [r7, #0]
 8018b20:	e7ee      	b.n	8018b00 <__sfp+0x60>
 8018b22:	bf00      	nop
 8018b24:	08019f58 	.word	0x08019f58
 8018b28:	ffff0001 	.word	0xffff0001

08018b2c <_fwalk_reent>:
 8018b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b30:	4606      	mov	r6, r0
 8018b32:	4688      	mov	r8, r1
 8018b34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018b38:	2700      	movs	r7, #0
 8018b3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018b3e:	f1b9 0901 	subs.w	r9, r9, #1
 8018b42:	d505      	bpl.n	8018b50 <_fwalk_reent+0x24>
 8018b44:	6824      	ldr	r4, [r4, #0]
 8018b46:	2c00      	cmp	r4, #0
 8018b48:	d1f7      	bne.n	8018b3a <_fwalk_reent+0xe>
 8018b4a:	4638      	mov	r0, r7
 8018b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b50:	89ab      	ldrh	r3, [r5, #12]
 8018b52:	2b01      	cmp	r3, #1
 8018b54:	d907      	bls.n	8018b66 <_fwalk_reent+0x3a>
 8018b56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018b5a:	3301      	adds	r3, #1
 8018b5c:	d003      	beq.n	8018b66 <_fwalk_reent+0x3a>
 8018b5e:	4629      	mov	r1, r5
 8018b60:	4630      	mov	r0, r6
 8018b62:	47c0      	blx	r8
 8018b64:	4307      	orrs	r7, r0
 8018b66:	3568      	adds	r5, #104	; 0x68
 8018b68:	e7e9      	b.n	8018b3e <_fwalk_reent+0x12>
	...

08018b6c <__libc_init_array>:
 8018b6c:	b570      	push	{r4, r5, r6, lr}
 8018b6e:	4d0d      	ldr	r5, [pc, #52]	; (8018ba4 <__libc_init_array+0x38>)
 8018b70:	4c0d      	ldr	r4, [pc, #52]	; (8018ba8 <__libc_init_array+0x3c>)
 8018b72:	1b64      	subs	r4, r4, r5
 8018b74:	10a4      	asrs	r4, r4, #2
 8018b76:	2600      	movs	r6, #0
 8018b78:	42a6      	cmp	r6, r4
 8018b7a:	d109      	bne.n	8018b90 <__libc_init_array+0x24>
 8018b7c:	4d0b      	ldr	r5, [pc, #44]	; (8018bac <__libc_init_array+0x40>)
 8018b7e:	4c0c      	ldr	r4, [pc, #48]	; (8018bb0 <__libc_init_array+0x44>)
 8018b80:	f001 f866 	bl	8019c50 <_init>
 8018b84:	1b64      	subs	r4, r4, r5
 8018b86:	10a4      	asrs	r4, r4, #2
 8018b88:	2600      	movs	r6, #0
 8018b8a:	42a6      	cmp	r6, r4
 8018b8c:	d105      	bne.n	8018b9a <__libc_init_array+0x2e>
 8018b8e:	bd70      	pop	{r4, r5, r6, pc}
 8018b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b94:	4798      	blx	r3
 8018b96:	3601      	adds	r6, #1
 8018b98:	e7ee      	b.n	8018b78 <__libc_init_array+0xc>
 8018b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b9e:	4798      	blx	r3
 8018ba0:	3601      	adds	r6, #1
 8018ba2:	e7f2      	b.n	8018b8a <__libc_init_array+0x1e>
 8018ba4:	08019f98 	.word	0x08019f98
 8018ba8:	08019f98 	.word	0x08019f98
 8018bac:	08019f98 	.word	0x08019f98
 8018bb0:	08019f9c 	.word	0x08019f9c

08018bb4 <__retarget_lock_init_recursive>:
 8018bb4:	4770      	bx	lr

08018bb6 <__retarget_lock_acquire_recursive>:
 8018bb6:	4770      	bx	lr

08018bb8 <__retarget_lock_release_recursive>:
 8018bb8:	4770      	bx	lr

08018bba <memcpy>:
 8018bba:	440a      	add	r2, r1
 8018bbc:	4291      	cmp	r1, r2
 8018bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8018bc2:	d100      	bne.n	8018bc6 <memcpy+0xc>
 8018bc4:	4770      	bx	lr
 8018bc6:	b510      	push	{r4, lr}
 8018bc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018bcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018bd0:	4291      	cmp	r1, r2
 8018bd2:	d1f9      	bne.n	8018bc8 <memcpy+0xe>
 8018bd4:	bd10      	pop	{r4, pc}

08018bd6 <memset>:
 8018bd6:	4402      	add	r2, r0
 8018bd8:	4603      	mov	r3, r0
 8018bda:	4293      	cmp	r3, r2
 8018bdc:	d100      	bne.n	8018be0 <memset+0xa>
 8018bde:	4770      	bx	lr
 8018be0:	f803 1b01 	strb.w	r1, [r3], #1
 8018be4:	e7f9      	b.n	8018bda <memset+0x4>
	...

08018be8 <_free_r>:
 8018be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018bea:	2900      	cmp	r1, #0
 8018bec:	d048      	beq.n	8018c80 <_free_r+0x98>
 8018bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018bf2:	9001      	str	r0, [sp, #4]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	f1a1 0404 	sub.w	r4, r1, #4
 8018bfa:	bfb8      	it	lt
 8018bfc:	18e4      	addlt	r4, r4, r3
 8018bfe:	f000 fb0d 	bl	801921c <__malloc_lock>
 8018c02:	4a20      	ldr	r2, [pc, #128]	; (8018c84 <_free_r+0x9c>)
 8018c04:	9801      	ldr	r0, [sp, #4]
 8018c06:	6813      	ldr	r3, [r2, #0]
 8018c08:	4615      	mov	r5, r2
 8018c0a:	b933      	cbnz	r3, 8018c1a <_free_r+0x32>
 8018c0c:	6063      	str	r3, [r4, #4]
 8018c0e:	6014      	str	r4, [r2, #0]
 8018c10:	b003      	add	sp, #12
 8018c12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c16:	f000 bb07 	b.w	8019228 <__malloc_unlock>
 8018c1a:	42a3      	cmp	r3, r4
 8018c1c:	d90b      	bls.n	8018c36 <_free_r+0x4e>
 8018c1e:	6821      	ldr	r1, [r4, #0]
 8018c20:	1862      	adds	r2, r4, r1
 8018c22:	4293      	cmp	r3, r2
 8018c24:	bf04      	itt	eq
 8018c26:	681a      	ldreq	r2, [r3, #0]
 8018c28:	685b      	ldreq	r3, [r3, #4]
 8018c2a:	6063      	str	r3, [r4, #4]
 8018c2c:	bf04      	itt	eq
 8018c2e:	1852      	addeq	r2, r2, r1
 8018c30:	6022      	streq	r2, [r4, #0]
 8018c32:	602c      	str	r4, [r5, #0]
 8018c34:	e7ec      	b.n	8018c10 <_free_r+0x28>
 8018c36:	461a      	mov	r2, r3
 8018c38:	685b      	ldr	r3, [r3, #4]
 8018c3a:	b10b      	cbz	r3, 8018c40 <_free_r+0x58>
 8018c3c:	42a3      	cmp	r3, r4
 8018c3e:	d9fa      	bls.n	8018c36 <_free_r+0x4e>
 8018c40:	6811      	ldr	r1, [r2, #0]
 8018c42:	1855      	adds	r5, r2, r1
 8018c44:	42a5      	cmp	r5, r4
 8018c46:	d10b      	bne.n	8018c60 <_free_r+0x78>
 8018c48:	6824      	ldr	r4, [r4, #0]
 8018c4a:	4421      	add	r1, r4
 8018c4c:	1854      	adds	r4, r2, r1
 8018c4e:	42a3      	cmp	r3, r4
 8018c50:	6011      	str	r1, [r2, #0]
 8018c52:	d1dd      	bne.n	8018c10 <_free_r+0x28>
 8018c54:	681c      	ldr	r4, [r3, #0]
 8018c56:	685b      	ldr	r3, [r3, #4]
 8018c58:	6053      	str	r3, [r2, #4]
 8018c5a:	4421      	add	r1, r4
 8018c5c:	6011      	str	r1, [r2, #0]
 8018c5e:	e7d7      	b.n	8018c10 <_free_r+0x28>
 8018c60:	d902      	bls.n	8018c68 <_free_r+0x80>
 8018c62:	230c      	movs	r3, #12
 8018c64:	6003      	str	r3, [r0, #0]
 8018c66:	e7d3      	b.n	8018c10 <_free_r+0x28>
 8018c68:	6825      	ldr	r5, [r4, #0]
 8018c6a:	1961      	adds	r1, r4, r5
 8018c6c:	428b      	cmp	r3, r1
 8018c6e:	bf04      	itt	eq
 8018c70:	6819      	ldreq	r1, [r3, #0]
 8018c72:	685b      	ldreq	r3, [r3, #4]
 8018c74:	6063      	str	r3, [r4, #4]
 8018c76:	bf04      	itt	eq
 8018c78:	1949      	addeq	r1, r1, r5
 8018c7a:	6021      	streq	r1, [r4, #0]
 8018c7c:	6054      	str	r4, [r2, #4]
 8018c7e:	e7c7      	b.n	8018c10 <_free_r+0x28>
 8018c80:	b003      	add	sp, #12
 8018c82:	bd30      	pop	{r4, r5, pc}
 8018c84:	200004b0 	.word	0x200004b0

08018c88 <_malloc_r>:
 8018c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c8a:	1ccd      	adds	r5, r1, #3
 8018c8c:	f025 0503 	bic.w	r5, r5, #3
 8018c90:	3508      	adds	r5, #8
 8018c92:	2d0c      	cmp	r5, #12
 8018c94:	bf38      	it	cc
 8018c96:	250c      	movcc	r5, #12
 8018c98:	2d00      	cmp	r5, #0
 8018c9a:	4606      	mov	r6, r0
 8018c9c:	db01      	blt.n	8018ca2 <_malloc_r+0x1a>
 8018c9e:	42a9      	cmp	r1, r5
 8018ca0:	d903      	bls.n	8018caa <_malloc_r+0x22>
 8018ca2:	230c      	movs	r3, #12
 8018ca4:	6033      	str	r3, [r6, #0]
 8018ca6:	2000      	movs	r0, #0
 8018ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018caa:	f000 fab7 	bl	801921c <__malloc_lock>
 8018cae:	4921      	ldr	r1, [pc, #132]	; (8018d34 <_malloc_r+0xac>)
 8018cb0:	680a      	ldr	r2, [r1, #0]
 8018cb2:	4614      	mov	r4, r2
 8018cb4:	b99c      	cbnz	r4, 8018cde <_malloc_r+0x56>
 8018cb6:	4f20      	ldr	r7, [pc, #128]	; (8018d38 <_malloc_r+0xb0>)
 8018cb8:	683b      	ldr	r3, [r7, #0]
 8018cba:	b923      	cbnz	r3, 8018cc6 <_malloc_r+0x3e>
 8018cbc:	4621      	mov	r1, r4
 8018cbe:	4630      	mov	r0, r6
 8018cc0:	f000 f8e0 	bl	8018e84 <_sbrk_r>
 8018cc4:	6038      	str	r0, [r7, #0]
 8018cc6:	4629      	mov	r1, r5
 8018cc8:	4630      	mov	r0, r6
 8018cca:	f000 f8db 	bl	8018e84 <_sbrk_r>
 8018cce:	1c43      	adds	r3, r0, #1
 8018cd0:	d123      	bne.n	8018d1a <_malloc_r+0x92>
 8018cd2:	230c      	movs	r3, #12
 8018cd4:	6033      	str	r3, [r6, #0]
 8018cd6:	4630      	mov	r0, r6
 8018cd8:	f000 faa6 	bl	8019228 <__malloc_unlock>
 8018cdc:	e7e3      	b.n	8018ca6 <_malloc_r+0x1e>
 8018cde:	6823      	ldr	r3, [r4, #0]
 8018ce0:	1b5b      	subs	r3, r3, r5
 8018ce2:	d417      	bmi.n	8018d14 <_malloc_r+0x8c>
 8018ce4:	2b0b      	cmp	r3, #11
 8018ce6:	d903      	bls.n	8018cf0 <_malloc_r+0x68>
 8018ce8:	6023      	str	r3, [r4, #0]
 8018cea:	441c      	add	r4, r3
 8018cec:	6025      	str	r5, [r4, #0]
 8018cee:	e004      	b.n	8018cfa <_malloc_r+0x72>
 8018cf0:	6863      	ldr	r3, [r4, #4]
 8018cf2:	42a2      	cmp	r2, r4
 8018cf4:	bf0c      	ite	eq
 8018cf6:	600b      	streq	r3, [r1, #0]
 8018cf8:	6053      	strne	r3, [r2, #4]
 8018cfa:	4630      	mov	r0, r6
 8018cfc:	f000 fa94 	bl	8019228 <__malloc_unlock>
 8018d00:	f104 000b 	add.w	r0, r4, #11
 8018d04:	1d23      	adds	r3, r4, #4
 8018d06:	f020 0007 	bic.w	r0, r0, #7
 8018d0a:	1ac2      	subs	r2, r0, r3
 8018d0c:	d0cc      	beq.n	8018ca8 <_malloc_r+0x20>
 8018d0e:	1a1b      	subs	r3, r3, r0
 8018d10:	50a3      	str	r3, [r4, r2]
 8018d12:	e7c9      	b.n	8018ca8 <_malloc_r+0x20>
 8018d14:	4622      	mov	r2, r4
 8018d16:	6864      	ldr	r4, [r4, #4]
 8018d18:	e7cc      	b.n	8018cb4 <_malloc_r+0x2c>
 8018d1a:	1cc4      	adds	r4, r0, #3
 8018d1c:	f024 0403 	bic.w	r4, r4, #3
 8018d20:	42a0      	cmp	r0, r4
 8018d22:	d0e3      	beq.n	8018cec <_malloc_r+0x64>
 8018d24:	1a21      	subs	r1, r4, r0
 8018d26:	4630      	mov	r0, r6
 8018d28:	f000 f8ac 	bl	8018e84 <_sbrk_r>
 8018d2c:	3001      	adds	r0, #1
 8018d2e:	d1dd      	bne.n	8018cec <_malloc_r+0x64>
 8018d30:	e7cf      	b.n	8018cd2 <_malloc_r+0x4a>
 8018d32:	bf00      	nop
 8018d34:	200004b0 	.word	0x200004b0
 8018d38:	200004b4 	.word	0x200004b4

08018d3c <iprintf>:
 8018d3c:	b40f      	push	{r0, r1, r2, r3}
 8018d3e:	4b0a      	ldr	r3, [pc, #40]	; (8018d68 <iprintf+0x2c>)
 8018d40:	b513      	push	{r0, r1, r4, lr}
 8018d42:	681c      	ldr	r4, [r3, #0]
 8018d44:	b124      	cbz	r4, 8018d50 <iprintf+0x14>
 8018d46:	69a3      	ldr	r3, [r4, #24]
 8018d48:	b913      	cbnz	r3, 8018d50 <iprintf+0x14>
 8018d4a:	4620      	mov	r0, r4
 8018d4c:	f7ff fe70 	bl	8018a30 <__sinit>
 8018d50:	ab05      	add	r3, sp, #20
 8018d52:	9a04      	ldr	r2, [sp, #16]
 8018d54:	68a1      	ldr	r1, [r4, #8]
 8018d56:	9301      	str	r3, [sp, #4]
 8018d58:	4620      	mov	r0, r4
 8018d5a:	f000 fbf1 	bl	8019540 <_vfiprintf_r>
 8018d5e:	b002      	add	sp, #8
 8018d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d64:	b004      	add	sp, #16
 8018d66:	4770      	bx	lr
 8018d68:	2000003c 	.word	0x2000003c

08018d6c <putchar>:
 8018d6c:	4b09      	ldr	r3, [pc, #36]	; (8018d94 <putchar+0x28>)
 8018d6e:	b513      	push	{r0, r1, r4, lr}
 8018d70:	681c      	ldr	r4, [r3, #0]
 8018d72:	4601      	mov	r1, r0
 8018d74:	b134      	cbz	r4, 8018d84 <putchar+0x18>
 8018d76:	69a3      	ldr	r3, [r4, #24]
 8018d78:	b923      	cbnz	r3, 8018d84 <putchar+0x18>
 8018d7a:	9001      	str	r0, [sp, #4]
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	f7ff fe57 	bl	8018a30 <__sinit>
 8018d82:	9901      	ldr	r1, [sp, #4]
 8018d84:	68a2      	ldr	r2, [r4, #8]
 8018d86:	4620      	mov	r0, r4
 8018d88:	b002      	add	sp, #8
 8018d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d8e:	f000 be9b 	b.w	8019ac8 <_putc_r>
 8018d92:	bf00      	nop
 8018d94:	2000003c 	.word	0x2000003c

08018d98 <_puts_r>:
 8018d98:	b570      	push	{r4, r5, r6, lr}
 8018d9a:	460e      	mov	r6, r1
 8018d9c:	4605      	mov	r5, r0
 8018d9e:	b118      	cbz	r0, 8018da8 <_puts_r+0x10>
 8018da0:	6983      	ldr	r3, [r0, #24]
 8018da2:	b90b      	cbnz	r3, 8018da8 <_puts_r+0x10>
 8018da4:	f7ff fe44 	bl	8018a30 <__sinit>
 8018da8:	69ab      	ldr	r3, [r5, #24]
 8018daa:	68ac      	ldr	r4, [r5, #8]
 8018dac:	b913      	cbnz	r3, 8018db4 <_puts_r+0x1c>
 8018dae:	4628      	mov	r0, r5
 8018db0:	f7ff fe3e 	bl	8018a30 <__sinit>
 8018db4:	4b2c      	ldr	r3, [pc, #176]	; (8018e68 <_puts_r+0xd0>)
 8018db6:	429c      	cmp	r4, r3
 8018db8:	d120      	bne.n	8018dfc <_puts_r+0x64>
 8018dba:	686c      	ldr	r4, [r5, #4]
 8018dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018dbe:	07db      	lsls	r3, r3, #31
 8018dc0:	d405      	bmi.n	8018dce <_puts_r+0x36>
 8018dc2:	89a3      	ldrh	r3, [r4, #12]
 8018dc4:	0598      	lsls	r0, r3, #22
 8018dc6:	d402      	bmi.n	8018dce <_puts_r+0x36>
 8018dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018dca:	f7ff fef4 	bl	8018bb6 <__retarget_lock_acquire_recursive>
 8018dce:	89a3      	ldrh	r3, [r4, #12]
 8018dd0:	0719      	lsls	r1, r3, #28
 8018dd2:	d51d      	bpl.n	8018e10 <_puts_r+0x78>
 8018dd4:	6923      	ldr	r3, [r4, #16]
 8018dd6:	b1db      	cbz	r3, 8018e10 <_puts_r+0x78>
 8018dd8:	3e01      	subs	r6, #1
 8018dda:	68a3      	ldr	r3, [r4, #8]
 8018ddc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018de0:	3b01      	subs	r3, #1
 8018de2:	60a3      	str	r3, [r4, #8]
 8018de4:	bb39      	cbnz	r1, 8018e36 <_puts_r+0x9e>
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	da38      	bge.n	8018e5c <_puts_r+0xc4>
 8018dea:	4622      	mov	r2, r4
 8018dec:	210a      	movs	r1, #10
 8018dee:	4628      	mov	r0, r5
 8018df0:	f000 f8bc 	bl	8018f6c <__swbuf_r>
 8018df4:	3001      	adds	r0, #1
 8018df6:	d011      	beq.n	8018e1c <_puts_r+0x84>
 8018df8:	250a      	movs	r5, #10
 8018dfa:	e011      	b.n	8018e20 <_puts_r+0x88>
 8018dfc:	4b1b      	ldr	r3, [pc, #108]	; (8018e6c <_puts_r+0xd4>)
 8018dfe:	429c      	cmp	r4, r3
 8018e00:	d101      	bne.n	8018e06 <_puts_r+0x6e>
 8018e02:	68ac      	ldr	r4, [r5, #8]
 8018e04:	e7da      	b.n	8018dbc <_puts_r+0x24>
 8018e06:	4b1a      	ldr	r3, [pc, #104]	; (8018e70 <_puts_r+0xd8>)
 8018e08:	429c      	cmp	r4, r3
 8018e0a:	bf08      	it	eq
 8018e0c:	68ec      	ldreq	r4, [r5, #12]
 8018e0e:	e7d5      	b.n	8018dbc <_puts_r+0x24>
 8018e10:	4621      	mov	r1, r4
 8018e12:	4628      	mov	r0, r5
 8018e14:	f000 f90e 	bl	8019034 <__swsetup_r>
 8018e18:	2800      	cmp	r0, #0
 8018e1a:	d0dd      	beq.n	8018dd8 <_puts_r+0x40>
 8018e1c:	f04f 35ff 	mov.w	r5, #4294967295
 8018e20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e22:	07da      	lsls	r2, r3, #31
 8018e24:	d405      	bmi.n	8018e32 <_puts_r+0x9a>
 8018e26:	89a3      	ldrh	r3, [r4, #12]
 8018e28:	059b      	lsls	r3, r3, #22
 8018e2a:	d402      	bmi.n	8018e32 <_puts_r+0x9a>
 8018e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e2e:	f7ff fec3 	bl	8018bb8 <__retarget_lock_release_recursive>
 8018e32:	4628      	mov	r0, r5
 8018e34:	bd70      	pop	{r4, r5, r6, pc}
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	da04      	bge.n	8018e44 <_puts_r+0xac>
 8018e3a:	69a2      	ldr	r2, [r4, #24]
 8018e3c:	429a      	cmp	r2, r3
 8018e3e:	dc06      	bgt.n	8018e4e <_puts_r+0xb6>
 8018e40:	290a      	cmp	r1, #10
 8018e42:	d004      	beq.n	8018e4e <_puts_r+0xb6>
 8018e44:	6823      	ldr	r3, [r4, #0]
 8018e46:	1c5a      	adds	r2, r3, #1
 8018e48:	6022      	str	r2, [r4, #0]
 8018e4a:	7019      	strb	r1, [r3, #0]
 8018e4c:	e7c5      	b.n	8018dda <_puts_r+0x42>
 8018e4e:	4622      	mov	r2, r4
 8018e50:	4628      	mov	r0, r5
 8018e52:	f000 f88b 	bl	8018f6c <__swbuf_r>
 8018e56:	3001      	adds	r0, #1
 8018e58:	d1bf      	bne.n	8018dda <_puts_r+0x42>
 8018e5a:	e7df      	b.n	8018e1c <_puts_r+0x84>
 8018e5c:	6823      	ldr	r3, [r4, #0]
 8018e5e:	250a      	movs	r5, #10
 8018e60:	1c5a      	adds	r2, r3, #1
 8018e62:	6022      	str	r2, [r4, #0]
 8018e64:	701d      	strb	r5, [r3, #0]
 8018e66:	e7db      	b.n	8018e20 <_puts_r+0x88>
 8018e68:	08019f18 	.word	0x08019f18
 8018e6c:	08019f38 	.word	0x08019f38
 8018e70:	08019ef8 	.word	0x08019ef8

08018e74 <puts>:
 8018e74:	4b02      	ldr	r3, [pc, #8]	; (8018e80 <puts+0xc>)
 8018e76:	4601      	mov	r1, r0
 8018e78:	6818      	ldr	r0, [r3, #0]
 8018e7a:	f7ff bf8d 	b.w	8018d98 <_puts_r>
 8018e7e:	bf00      	nop
 8018e80:	2000003c 	.word	0x2000003c

08018e84 <_sbrk_r>:
 8018e84:	b538      	push	{r3, r4, r5, lr}
 8018e86:	4d06      	ldr	r5, [pc, #24]	; (8018ea0 <_sbrk_r+0x1c>)
 8018e88:	2300      	movs	r3, #0
 8018e8a:	4604      	mov	r4, r0
 8018e8c:	4608      	mov	r0, r1
 8018e8e:	602b      	str	r3, [r5, #0]
 8018e90:	f7f9 fc30 	bl	80126f4 <_sbrk>
 8018e94:	1c43      	adds	r3, r0, #1
 8018e96:	d102      	bne.n	8018e9e <_sbrk_r+0x1a>
 8018e98:	682b      	ldr	r3, [r5, #0]
 8018e9a:	b103      	cbz	r3, 8018e9e <_sbrk_r+0x1a>
 8018e9c:	6023      	str	r3, [r4, #0]
 8018e9e:	bd38      	pop	{r3, r4, r5, pc}
 8018ea0:	200006ac 	.word	0x200006ac

08018ea4 <siprintf>:
 8018ea4:	b40e      	push	{r1, r2, r3}
 8018ea6:	b500      	push	{lr}
 8018ea8:	b09c      	sub	sp, #112	; 0x70
 8018eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8018eac:	9002      	str	r0, [sp, #8]
 8018eae:	9006      	str	r0, [sp, #24]
 8018eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018eb4:	4809      	ldr	r0, [pc, #36]	; (8018edc <siprintf+0x38>)
 8018eb6:	9107      	str	r1, [sp, #28]
 8018eb8:	9104      	str	r1, [sp, #16]
 8018eba:	4909      	ldr	r1, [pc, #36]	; (8018ee0 <siprintf+0x3c>)
 8018ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ec0:	9105      	str	r1, [sp, #20]
 8018ec2:	6800      	ldr	r0, [r0, #0]
 8018ec4:	9301      	str	r3, [sp, #4]
 8018ec6:	a902      	add	r1, sp, #8
 8018ec8:	f000 fa10 	bl	80192ec <_svfiprintf_r>
 8018ecc:	9b02      	ldr	r3, [sp, #8]
 8018ece:	2200      	movs	r2, #0
 8018ed0:	701a      	strb	r2, [r3, #0]
 8018ed2:	b01c      	add	sp, #112	; 0x70
 8018ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ed8:	b003      	add	sp, #12
 8018eda:	4770      	bx	lr
 8018edc:	2000003c 	.word	0x2000003c
 8018ee0:	ffff0208 	.word	0xffff0208

08018ee4 <__sread>:
 8018ee4:	b510      	push	{r4, lr}
 8018ee6:	460c      	mov	r4, r1
 8018ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018eec:	f000 fe34 	bl	8019b58 <_read_r>
 8018ef0:	2800      	cmp	r0, #0
 8018ef2:	bfab      	itete	ge
 8018ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8018ef8:	181b      	addge	r3, r3, r0
 8018efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018efe:	bfac      	ite	ge
 8018f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8018f02:	81a3      	strhlt	r3, [r4, #12]
 8018f04:	bd10      	pop	{r4, pc}

08018f06 <__swrite>:
 8018f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f0a:	461f      	mov	r7, r3
 8018f0c:	898b      	ldrh	r3, [r1, #12]
 8018f0e:	05db      	lsls	r3, r3, #23
 8018f10:	4605      	mov	r5, r0
 8018f12:	460c      	mov	r4, r1
 8018f14:	4616      	mov	r6, r2
 8018f16:	d505      	bpl.n	8018f24 <__swrite+0x1e>
 8018f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f1c:	2302      	movs	r3, #2
 8018f1e:	2200      	movs	r2, #0
 8018f20:	f000 f906 	bl	8019130 <_lseek_r>
 8018f24:	89a3      	ldrh	r3, [r4, #12]
 8018f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018f2e:	81a3      	strh	r3, [r4, #12]
 8018f30:	4632      	mov	r2, r6
 8018f32:	463b      	mov	r3, r7
 8018f34:	4628      	mov	r0, r5
 8018f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f3a:	f000 b869 	b.w	8019010 <_write_r>

08018f3e <__sseek>:
 8018f3e:	b510      	push	{r4, lr}
 8018f40:	460c      	mov	r4, r1
 8018f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f46:	f000 f8f3 	bl	8019130 <_lseek_r>
 8018f4a:	1c43      	adds	r3, r0, #1
 8018f4c:	89a3      	ldrh	r3, [r4, #12]
 8018f4e:	bf15      	itete	ne
 8018f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8018f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018f5a:	81a3      	strheq	r3, [r4, #12]
 8018f5c:	bf18      	it	ne
 8018f5e:	81a3      	strhne	r3, [r4, #12]
 8018f60:	bd10      	pop	{r4, pc}

08018f62 <__sclose>:
 8018f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f66:	f000 b8d3 	b.w	8019110 <_close_r>
	...

08018f6c <__swbuf_r>:
 8018f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f6e:	460e      	mov	r6, r1
 8018f70:	4614      	mov	r4, r2
 8018f72:	4605      	mov	r5, r0
 8018f74:	b118      	cbz	r0, 8018f7e <__swbuf_r+0x12>
 8018f76:	6983      	ldr	r3, [r0, #24]
 8018f78:	b90b      	cbnz	r3, 8018f7e <__swbuf_r+0x12>
 8018f7a:	f7ff fd59 	bl	8018a30 <__sinit>
 8018f7e:	4b21      	ldr	r3, [pc, #132]	; (8019004 <__swbuf_r+0x98>)
 8018f80:	429c      	cmp	r4, r3
 8018f82:	d12b      	bne.n	8018fdc <__swbuf_r+0x70>
 8018f84:	686c      	ldr	r4, [r5, #4]
 8018f86:	69a3      	ldr	r3, [r4, #24]
 8018f88:	60a3      	str	r3, [r4, #8]
 8018f8a:	89a3      	ldrh	r3, [r4, #12]
 8018f8c:	071a      	lsls	r2, r3, #28
 8018f8e:	d52f      	bpl.n	8018ff0 <__swbuf_r+0x84>
 8018f90:	6923      	ldr	r3, [r4, #16]
 8018f92:	b36b      	cbz	r3, 8018ff0 <__swbuf_r+0x84>
 8018f94:	6923      	ldr	r3, [r4, #16]
 8018f96:	6820      	ldr	r0, [r4, #0]
 8018f98:	1ac0      	subs	r0, r0, r3
 8018f9a:	6963      	ldr	r3, [r4, #20]
 8018f9c:	b2f6      	uxtb	r6, r6
 8018f9e:	4283      	cmp	r3, r0
 8018fa0:	4637      	mov	r7, r6
 8018fa2:	dc04      	bgt.n	8018fae <__swbuf_r+0x42>
 8018fa4:	4621      	mov	r1, r4
 8018fa6:	4628      	mov	r0, r5
 8018fa8:	f7ff fc9c 	bl	80188e4 <_fflush_r>
 8018fac:	bb30      	cbnz	r0, 8018ffc <__swbuf_r+0x90>
 8018fae:	68a3      	ldr	r3, [r4, #8]
 8018fb0:	3b01      	subs	r3, #1
 8018fb2:	60a3      	str	r3, [r4, #8]
 8018fb4:	6823      	ldr	r3, [r4, #0]
 8018fb6:	1c5a      	adds	r2, r3, #1
 8018fb8:	6022      	str	r2, [r4, #0]
 8018fba:	701e      	strb	r6, [r3, #0]
 8018fbc:	6963      	ldr	r3, [r4, #20]
 8018fbe:	3001      	adds	r0, #1
 8018fc0:	4283      	cmp	r3, r0
 8018fc2:	d004      	beq.n	8018fce <__swbuf_r+0x62>
 8018fc4:	89a3      	ldrh	r3, [r4, #12]
 8018fc6:	07db      	lsls	r3, r3, #31
 8018fc8:	d506      	bpl.n	8018fd8 <__swbuf_r+0x6c>
 8018fca:	2e0a      	cmp	r6, #10
 8018fcc:	d104      	bne.n	8018fd8 <__swbuf_r+0x6c>
 8018fce:	4621      	mov	r1, r4
 8018fd0:	4628      	mov	r0, r5
 8018fd2:	f7ff fc87 	bl	80188e4 <_fflush_r>
 8018fd6:	b988      	cbnz	r0, 8018ffc <__swbuf_r+0x90>
 8018fd8:	4638      	mov	r0, r7
 8018fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fdc:	4b0a      	ldr	r3, [pc, #40]	; (8019008 <__swbuf_r+0x9c>)
 8018fde:	429c      	cmp	r4, r3
 8018fe0:	d101      	bne.n	8018fe6 <__swbuf_r+0x7a>
 8018fe2:	68ac      	ldr	r4, [r5, #8]
 8018fe4:	e7cf      	b.n	8018f86 <__swbuf_r+0x1a>
 8018fe6:	4b09      	ldr	r3, [pc, #36]	; (801900c <__swbuf_r+0xa0>)
 8018fe8:	429c      	cmp	r4, r3
 8018fea:	bf08      	it	eq
 8018fec:	68ec      	ldreq	r4, [r5, #12]
 8018fee:	e7ca      	b.n	8018f86 <__swbuf_r+0x1a>
 8018ff0:	4621      	mov	r1, r4
 8018ff2:	4628      	mov	r0, r5
 8018ff4:	f000 f81e 	bl	8019034 <__swsetup_r>
 8018ff8:	2800      	cmp	r0, #0
 8018ffa:	d0cb      	beq.n	8018f94 <__swbuf_r+0x28>
 8018ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8019000:	e7ea      	b.n	8018fd8 <__swbuf_r+0x6c>
 8019002:	bf00      	nop
 8019004:	08019f18 	.word	0x08019f18
 8019008:	08019f38 	.word	0x08019f38
 801900c:	08019ef8 	.word	0x08019ef8

08019010 <_write_r>:
 8019010:	b538      	push	{r3, r4, r5, lr}
 8019012:	4d07      	ldr	r5, [pc, #28]	; (8019030 <_write_r+0x20>)
 8019014:	4604      	mov	r4, r0
 8019016:	4608      	mov	r0, r1
 8019018:	4611      	mov	r1, r2
 801901a:	2200      	movs	r2, #0
 801901c:	602a      	str	r2, [r5, #0]
 801901e:	461a      	mov	r2, r3
 8019020:	f7f8 fc32 	bl	8011888 <_write>
 8019024:	1c43      	adds	r3, r0, #1
 8019026:	d102      	bne.n	801902e <_write_r+0x1e>
 8019028:	682b      	ldr	r3, [r5, #0]
 801902a:	b103      	cbz	r3, 801902e <_write_r+0x1e>
 801902c:	6023      	str	r3, [r4, #0]
 801902e:	bd38      	pop	{r3, r4, r5, pc}
 8019030:	200006ac 	.word	0x200006ac

08019034 <__swsetup_r>:
 8019034:	4b32      	ldr	r3, [pc, #200]	; (8019100 <__swsetup_r+0xcc>)
 8019036:	b570      	push	{r4, r5, r6, lr}
 8019038:	681d      	ldr	r5, [r3, #0]
 801903a:	4606      	mov	r6, r0
 801903c:	460c      	mov	r4, r1
 801903e:	b125      	cbz	r5, 801904a <__swsetup_r+0x16>
 8019040:	69ab      	ldr	r3, [r5, #24]
 8019042:	b913      	cbnz	r3, 801904a <__swsetup_r+0x16>
 8019044:	4628      	mov	r0, r5
 8019046:	f7ff fcf3 	bl	8018a30 <__sinit>
 801904a:	4b2e      	ldr	r3, [pc, #184]	; (8019104 <__swsetup_r+0xd0>)
 801904c:	429c      	cmp	r4, r3
 801904e:	d10f      	bne.n	8019070 <__swsetup_r+0x3c>
 8019050:	686c      	ldr	r4, [r5, #4]
 8019052:	89a3      	ldrh	r3, [r4, #12]
 8019054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019058:	0719      	lsls	r1, r3, #28
 801905a:	d42c      	bmi.n	80190b6 <__swsetup_r+0x82>
 801905c:	06dd      	lsls	r5, r3, #27
 801905e:	d411      	bmi.n	8019084 <__swsetup_r+0x50>
 8019060:	2309      	movs	r3, #9
 8019062:	6033      	str	r3, [r6, #0]
 8019064:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019068:	81a3      	strh	r3, [r4, #12]
 801906a:	f04f 30ff 	mov.w	r0, #4294967295
 801906e:	e03e      	b.n	80190ee <__swsetup_r+0xba>
 8019070:	4b25      	ldr	r3, [pc, #148]	; (8019108 <__swsetup_r+0xd4>)
 8019072:	429c      	cmp	r4, r3
 8019074:	d101      	bne.n	801907a <__swsetup_r+0x46>
 8019076:	68ac      	ldr	r4, [r5, #8]
 8019078:	e7eb      	b.n	8019052 <__swsetup_r+0x1e>
 801907a:	4b24      	ldr	r3, [pc, #144]	; (801910c <__swsetup_r+0xd8>)
 801907c:	429c      	cmp	r4, r3
 801907e:	bf08      	it	eq
 8019080:	68ec      	ldreq	r4, [r5, #12]
 8019082:	e7e6      	b.n	8019052 <__swsetup_r+0x1e>
 8019084:	0758      	lsls	r0, r3, #29
 8019086:	d512      	bpl.n	80190ae <__swsetup_r+0x7a>
 8019088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801908a:	b141      	cbz	r1, 801909e <__swsetup_r+0x6a>
 801908c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019090:	4299      	cmp	r1, r3
 8019092:	d002      	beq.n	801909a <__swsetup_r+0x66>
 8019094:	4630      	mov	r0, r6
 8019096:	f7ff fda7 	bl	8018be8 <_free_r>
 801909a:	2300      	movs	r3, #0
 801909c:	6363      	str	r3, [r4, #52]	; 0x34
 801909e:	89a3      	ldrh	r3, [r4, #12]
 80190a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80190a4:	81a3      	strh	r3, [r4, #12]
 80190a6:	2300      	movs	r3, #0
 80190a8:	6063      	str	r3, [r4, #4]
 80190aa:	6923      	ldr	r3, [r4, #16]
 80190ac:	6023      	str	r3, [r4, #0]
 80190ae:	89a3      	ldrh	r3, [r4, #12]
 80190b0:	f043 0308 	orr.w	r3, r3, #8
 80190b4:	81a3      	strh	r3, [r4, #12]
 80190b6:	6923      	ldr	r3, [r4, #16]
 80190b8:	b94b      	cbnz	r3, 80190ce <__swsetup_r+0x9a>
 80190ba:	89a3      	ldrh	r3, [r4, #12]
 80190bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80190c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80190c4:	d003      	beq.n	80190ce <__swsetup_r+0x9a>
 80190c6:	4621      	mov	r1, r4
 80190c8:	4630      	mov	r0, r6
 80190ca:	f000 f867 	bl	801919c <__smakebuf_r>
 80190ce:	89a0      	ldrh	r0, [r4, #12]
 80190d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80190d4:	f010 0301 	ands.w	r3, r0, #1
 80190d8:	d00a      	beq.n	80190f0 <__swsetup_r+0xbc>
 80190da:	2300      	movs	r3, #0
 80190dc:	60a3      	str	r3, [r4, #8]
 80190de:	6963      	ldr	r3, [r4, #20]
 80190e0:	425b      	negs	r3, r3
 80190e2:	61a3      	str	r3, [r4, #24]
 80190e4:	6923      	ldr	r3, [r4, #16]
 80190e6:	b943      	cbnz	r3, 80190fa <__swsetup_r+0xc6>
 80190e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80190ec:	d1ba      	bne.n	8019064 <__swsetup_r+0x30>
 80190ee:	bd70      	pop	{r4, r5, r6, pc}
 80190f0:	0781      	lsls	r1, r0, #30
 80190f2:	bf58      	it	pl
 80190f4:	6963      	ldrpl	r3, [r4, #20]
 80190f6:	60a3      	str	r3, [r4, #8]
 80190f8:	e7f4      	b.n	80190e4 <__swsetup_r+0xb0>
 80190fa:	2000      	movs	r0, #0
 80190fc:	e7f7      	b.n	80190ee <__swsetup_r+0xba>
 80190fe:	bf00      	nop
 8019100:	2000003c 	.word	0x2000003c
 8019104:	08019f18 	.word	0x08019f18
 8019108:	08019f38 	.word	0x08019f38
 801910c:	08019ef8 	.word	0x08019ef8

08019110 <_close_r>:
 8019110:	b538      	push	{r3, r4, r5, lr}
 8019112:	4d06      	ldr	r5, [pc, #24]	; (801912c <_close_r+0x1c>)
 8019114:	2300      	movs	r3, #0
 8019116:	4604      	mov	r4, r0
 8019118:	4608      	mov	r0, r1
 801911a:	602b      	str	r3, [r5, #0]
 801911c:	f7f9 fab5 	bl	801268a <_close>
 8019120:	1c43      	adds	r3, r0, #1
 8019122:	d102      	bne.n	801912a <_close_r+0x1a>
 8019124:	682b      	ldr	r3, [r5, #0]
 8019126:	b103      	cbz	r3, 801912a <_close_r+0x1a>
 8019128:	6023      	str	r3, [r4, #0]
 801912a:	bd38      	pop	{r3, r4, r5, pc}
 801912c:	200006ac 	.word	0x200006ac

08019130 <_lseek_r>:
 8019130:	b538      	push	{r3, r4, r5, lr}
 8019132:	4d07      	ldr	r5, [pc, #28]	; (8019150 <_lseek_r+0x20>)
 8019134:	4604      	mov	r4, r0
 8019136:	4608      	mov	r0, r1
 8019138:	4611      	mov	r1, r2
 801913a:	2200      	movs	r2, #0
 801913c:	602a      	str	r2, [r5, #0]
 801913e:	461a      	mov	r2, r3
 8019140:	f7f9 faca 	bl	80126d8 <_lseek>
 8019144:	1c43      	adds	r3, r0, #1
 8019146:	d102      	bne.n	801914e <_lseek_r+0x1e>
 8019148:	682b      	ldr	r3, [r5, #0]
 801914a:	b103      	cbz	r3, 801914e <_lseek_r+0x1e>
 801914c:	6023      	str	r3, [r4, #0]
 801914e:	bd38      	pop	{r3, r4, r5, pc}
 8019150:	200006ac 	.word	0x200006ac

08019154 <__swhatbuf_r>:
 8019154:	b570      	push	{r4, r5, r6, lr}
 8019156:	460e      	mov	r6, r1
 8019158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801915c:	2900      	cmp	r1, #0
 801915e:	b096      	sub	sp, #88	; 0x58
 8019160:	4614      	mov	r4, r2
 8019162:	461d      	mov	r5, r3
 8019164:	da07      	bge.n	8019176 <__swhatbuf_r+0x22>
 8019166:	2300      	movs	r3, #0
 8019168:	602b      	str	r3, [r5, #0]
 801916a:	89b3      	ldrh	r3, [r6, #12]
 801916c:	061a      	lsls	r2, r3, #24
 801916e:	d410      	bmi.n	8019192 <__swhatbuf_r+0x3e>
 8019170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019174:	e00e      	b.n	8019194 <__swhatbuf_r+0x40>
 8019176:	466a      	mov	r2, sp
 8019178:	f000 fd00 	bl	8019b7c <_fstat_r>
 801917c:	2800      	cmp	r0, #0
 801917e:	dbf2      	blt.n	8019166 <__swhatbuf_r+0x12>
 8019180:	9a01      	ldr	r2, [sp, #4]
 8019182:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019186:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801918a:	425a      	negs	r2, r3
 801918c:	415a      	adcs	r2, r3
 801918e:	602a      	str	r2, [r5, #0]
 8019190:	e7ee      	b.n	8019170 <__swhatbuf_r+0x1c>
 8019192:	2340      	movs	r3, #64	; 0x40
 8019194:	2000      	movs	r0, #0
 8019196:	6023      	str	r3, [r4, #0]
 8019198:	b016      	add	sp, #88	; 0x58
 801919a:	bd70      	pop	{r4, r5, r6, pc}

0801919c <__smakebuf_r>:
 801919c:	898b      	ldrh	r3, [r1, #12]
 801919e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80191a0:	079d      	lsls	r5, r3, #30
 80191a2:	4606      	mov	r6, r0
 80191a4:	460c      	mov	r4, r1
 80191a6:	d507      	bpl.n	80191b8 <__smakebuf_r+0x1c>
 80191a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80191ac:	6023      	str	r3, [r4, #0]
 80191ae:	6123      	str	r3, [r4, #16]
 80191b0:	2301      	movs	r3, #1
 80191b2:	6163      	str	r3, [r4, #20]
 80191b4:	b002      	add	sp, #8
 80191b6:	bd70      	pop	{r4, r5, r6, pc}
 80191b8:	ab01      	add	r3, sp, #4
 80191ba:	466a      	mov	r2, sp
 80191bc:	f7ff ffca 	bl	8019154 <__swhatbuf_r>
 80191c0:	9900      	ldr	r1, [sp, #0]
 80191c2:	4605      	mov	r5, r0
 80191c4:	4630      	mov	r0, r6
 80191c6:	f7ff fd5f 	bl	8018c88 <_malloc_r>
 80191ca:	b948      	cbnz	r0, 80191e0 <__smakebuf_r+0x44>
 80191cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191d0:	059a      	lsls	r2, r3, #22
 80191d2:	d4ef      	bmi.n	80191b4 <__smakebuf_r+0x18>
 80191d4:	f023 0303 	bic.w	r3, r3, #3
 80191d8:	f043 0302 	orr.w	r3, r3, #2
 80191dc:	81a3      	strh	r3, [r4, #12]
 80191de:	e7e3      	b.n	80191a8 <__smakebuf_r+0xc>
 80191e0:	4b0d      	ldr	r3, [pc, #52]	; (8019218 <__smakebuf_r+0x7c>)
 80191e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80191e4:	89a3      	ldrh	r3, [r4, #12]
 80191e6:	6020      	str	r0, [r4, #0]
 80191e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80191ec:	81a3      	strh	r3, [r4, #12]
 80191ee:	9b00      	ldr	r3, [sp, #0]
 80191f0:	6163      	str	r3, [r4, #20]
 80191f2:	9b01      	ldr	r3, [sp, #4]
 80191f4:	6120      	str	r0, [r4, #16]
 80191f6:	b15b      	cbz	r3, 8019210 <__smakebuf_r+0x74>
 80191f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191fc:	4630      	mov	r0, r6
 80191fe:	f000 fccf 	bl	8019ba0 <_isatty_r>
 8019202:	b128      	cbz	r0, 8019210 <__smakebuf_r+0x74>
 8019204:	89a3      	ldrh	r3, [r4, #12]
 8019206:	f023 0303 	bic.w	r3, r3, #3
 801920a:	f043 0301 	orr.w	r3, r3, #1
 801920e:	81a3      	strh	r3, [r4, #12]
 8019210:	89a0      	ldrh	r0, [r4, #12]
 8019212:	4305      	orrs	r5, r0
 8019214:	81a5      	strh	r5, [r4, #12]
 8019216:	e7cd      	b.n	80191b4 <__smakebuf_r+0x18>
 8019218:	080189c9 	.word	0x080189c9

0801921c <__malloc_lock>:
 801921c:	4801      	ldr	r0, [pc, #4]	; (8019224 <__malloc_lock+0x8>)
 801921e:	f7ff bcca 	b.w	8018bb6 <__retarget_lock_acquire_recursive>
 8019222:	bf00      	nop
 8019224:	200006a4 	.word	0x200006a4

08019228 <__malloc_unlock>:
 8019228:	4801      	ldr	r0, [pc, #4]	; (8019230 <__malloc_unlock+0x8>)
 801922a:	f7ff bcc5 	b.w	8018bb8 <__retarget_lock_release_recursive>
 801922e:	bf00      	nop
 8019230:	200006a4 	.word	0x200006a4

08019234 <__ssputs_r>:
 8019234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019238:	688e      	ldr	r6, [r1, #8]
 801923a:	429e      	cmp	r6, r3
 801923c:	4682      	mov	sl, r0
 801923e:	460c      	mov	r4, r1
 8019240:	4690      	mov	r8, r2
 8019242:	461f      	mov	r7, r3
 8019244:	d838      	bhi.n	80192b8 <__ssputs_r+0x84>
 8019246:	898a      	ldrh	r2, [r1, #12]
 8019248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801924c:	d032      	beq.n	80192b4 <__ssputs_r+0x80>
 801924e:	6825      	ldr	r5, [r4, #0]
 8019250:	6909      	ldr	r1, [r1, #16]
 8019252:	eba5 0901 	sub.w	r9, r5, r1
 8019256:	6965      	ldr	r5, [r4, #20]
 8019258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801925c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019260:	3301      	adds	r3, #1
 8019262:	444b      	add	r3, r9
 8019264:	106d      	asrs	r5, r5, #1
 8019266:	429d      	cmp	r5, r3
 8019268:	bf38      	it	cc
 801926a:	461d      	movcc	r5, r3
 801926c:	0553      	lsls	r3, r2, #21
 801926e:	d531      	bpl.n	80192d4 <__ssputs_r+0xa0>
 8019270:	4629      	mov	r1, r5
 8019272:	f7ff fd09 	bl	8018c88 <_malloc_r>
 8019276:	4606      	mov	r6, r0
 8019278:	b950      	cbnz	r0, 8019290 <__ssputs_r+0x5c>
 801927a:	230c      	movs	r3, #12
 801927c:	f8ca 3000 	str.w	r3, [sl]
 8019280:	89a3      	ldrh	r3, [r4, #12]
 8019282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019286:	81a3      	strh	r3, [r4, #12]
 8019288:	f04f 30ff 	mov.w	r0, #4294967295
 801928c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019290:	6921      	ldr	r1, [r4, #16]
 8019292:	464a      	mov	r2, r9
 8019294:	f7ff fc91 	bl	8018bba <memcpy>
 8019298:	89a3      	ldrh	r3, [r4, #12]
 801929a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801929e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80192a2:	81a3      	strh	r3, [r4, #12]
 80192a4:	6126      	str	r6, [r4, #16]
 80192a6:	6165      	str	r5, [r4, #20]
 80192a8:	444e      	add	r6, r9
 80192aa:	eba5 0509 	sub.w	r5, r5, r9
 80192ae:	6026      	str	r6, [r4, #0]
 80192b0:	60a5      	str	r5, [r4, #8]
 80192b2:	463e      	mov	r6, r7
 80192b4:	42be      	cmp	r6, r7
 80192b6:	d900      	bls.n	80192ba <__ssputs_r+0x86>
 80192b8:	463e      	mov	r6, r7
 80192ba:	4632      	mov	r2, r6
 80192bc:	6820      	ldr	r0, [r4, #0]
 80192be:	4641      	mov	r1, r8
 80192c0:	f000 fc7e 	bl	8019bc0 <memmove>
 80192c4:	68a3      	ldr	r3, [r4, #8]
 80192c6:	6822      	ldr	r2, [r4, #0]
 80192c8:	1b9b      	subs	r3, r3, r6
 80192ca:	4432      	add	r2, r6
 80192cc:	60a3      	str	r3, [r4, #8]
 80192ce:	6022      	str	r2, [r4, #0]
 80192d0:	2000      	movs	r0, #0
 80192d2:	e7db      	b.n	801928c <__ssputs_r+0x58>
 80192d4:	462a      	mov	r2, r5
 80192d6:	f000 fc8d 	bl	8019bf4 <_realloc_r>
 80192da:	4606      	mov	r6, r0
 80192dc:	2800      	cmp	r0, #0
 80192de:	d1e1      	bne.n	80192a4 <__ssputs_r+0x70>
 80192e0:	6921      	ldr	r1, [r4, #16]
 80192e2:	4650      	mov	r0, sl
 80192e4:	f7ff fc80 	bl	8018be8 <_free_r>
 80192e8:	e7c7      	b.n	801927a <__ssputs_r+0x46>
	...

080192ec <_svfiprintf_r>:
 80192ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192f0:	4698      	mov	r8, r3
 80192f2:	898b      	ldrh	r3, [r1, #12]
 80192f4:	061b      	lsls	r3, r3, #24
 80192f6:	b09d      	sub	sp, #116	; 0x74
 80192f8:	4607      	mov	r7, r0
 80192fa:	460d      	mov	r5, r1
 80192fc:	4614      	mov	r4, r2
 80192fe:	d50e      	bpl.n	801931e <_svfiprintf_r+0x32>
 8019300:	690b      	ldr	r3, [r1, #16]
 8019302:	b963      	cbnz	r3, 801931e <_svfiprintf_r+0x32>
 8019304:	2140      	movs	r1, #64	; 0x40
 8019306:	f7ff fcbf 	bl	8018c88 <_malloc_r>
 801930a:	6028      	str	r0, [r5, #0]
 801930c:	6128      	str	r0, [r5, #16]
 801930e:	b920      	cbnz	r0, 801931a <_svfiprintf_r+0x2e>
 8019310:	230c      	movs	r3, #12
 8019312:	603b      	str	r3, [r7, #0]
 8019314:	f04f 30ff 	mov.w	r0, #4294967295
 8019318:	e0d1      	b.n	80194be <_svfiprintf_r+0x1d2>
 801931a:	2340      	movs	r3, #64	; 0x40
 801931c:	616b      	str	r3, [r5, #20]
 801931e:	2300      	movs	r3, #0
 8019320:	9309      	str	r3, [sp, #36]	; 0x24
 8019322:	2320      	movs	r3, #32
 8019324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019328:	f8cd 800c 	str.w	r8, [sp, #12]
 801932c:	2330      	movs	r3, #48	; 0x30
 801932e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80194d8 <_svfiprintf_r+0x1ec>
 8019332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019336:	f04f 0901 	mov.w	r9, #1
 801933a:	4623      	mov	r3, r4
 801933c:	469a      	mov	sl, r3
 801933e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019342:	b10a      	cbz	r2, 8019348 <_svfiprintf_r+0x5c>
 8019344:	2a25      	cmp	r2, #37	; 0x25
 8019346:	d1f9      	bne.n	801933c <_svfiprintf_r+0x50>
 8019348:	ebba 0b04 	subs.w	fp, sl, r4
 801934c:	d00b      	beq.n	8019366 <_svfiprintf_r+0x7a>
 801934e:	465b      	mov	r3, fp
 8019350:	4622      	mov	r2, r4
 8019352:	4629      	mov	r1, r5
 8019354:	4638      	mov	r0, r7
 8019356:	f7ff ff6d 	bl	8019234 <__ssputs_r>
 801935a:	3001      	adds	r0, #1
 801935c:	f000 80aa 	beq.w	80194b4 <_svfiprintf_r+0x1c8>
 8019360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019362:	445a      	add	r2, fp
 8019364:	9209      	str	r2, [sp, #36]	; 0x24
 8019366:	f89a 3000 	ldrb.w	r3, [sl]
 801936a:	2b00      	cmp	r3, #0
 801936c:	f000 80a2 	beq.w	80194b4 <_svfiprintf_r+0x1c8>
 8019370:	2300      	movs	r3, #0
 8019372:	f04f 32ff 	mov.w	r2, #4294967295
 8019376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801937a:	f10a 0a01 	add.w	sl, sl, #1
 801937e:	9304      	str	r3, [sp, #16]
 8019380:	9307      	str	r3, [sp, #28]
 8019382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019386:	931a      	str	r3, [sp, #104]	; 0x68
 8019388:	4654      	mov	r4, sl
 801938a:	2205      	movs	r2, #5
 801938c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019390:	4851      	ldr	r0, [pc, #324]	; (80194d8 <_svfiprintf_r+0x1ec>)
 8019392:	f7f6 ff25 	bl	80101e0 <memchr>
 8019396:	9a04      	ldr	r2, [sp, #16]
 8019398:	b9d8      	cbnz	r0, 80193d2 <_svfiprintf_r+0xe6>
 801939a:	06d0      	lsls	r0, r2, #27
 801939c:	bf44      	itt	mi
 801939e:	2320      	movmi	r3, #32
 80193a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80193a4:	0711      	lsls	r1, r2, #28
 80193a6:	bf44      	itt	mi
 80193a8:	232b      	movmi	r3, #43	; 0x2b
 80193aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80193ae:	f89a 3000 	ldrb.w	r3, [sl]
 80193b2:	2b2a      	cmp	r3, #42	; 0x2a
 80193b4:	d015      	beq.n	80193e2 <_svfiprintf_r+0xf6>
 80193b6:	9a07      	ldr	r2, [sp, #28]
 80193b8:	4654      	mov	r4, sl
 80193ba:	2000      	movs	r0, #0
 80193bc:	f04f 0c0a 	mov.w	ip, #10
 80193c0:	4621      	mov	r1, r4
 80193c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80193c6:	3b30      	subs	r3, #48	; 0x30
 80193c8:	2b09      	cmp	r3, #9
 80193ca:	d94e      	bls.n	801946a <_svfiprintf_r+0x17e>
 80193cc:	b1b0      	cbz	r0, 80193fc <_svfiprintf_r+0x110>
 80193ce:	9207      	str	r2, [sp, #28]
 80193d0:	e014      	b.n	80193fc <_svfiprintf_r+0x110>
 80193d2:	eba0 0308 	sub.w	r3, r0, r8
 80193d6:	fa09 f303 	lsl.w	r3, r9, r3
 80193da:	4313      	orrs	r3, r2
 80193dc:	9304      	str	r3, [sp, #16]
 80193de:	46a2      	mov	sl, r4
 80193e0:	e7d2      	b.n	8019388 <_svfiprintf_r+0x9c>
 80193e2:	9b03      	ldr	r3, [sp, #12]
 80193e4:	1d19      	adds	r1, r3, #4
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	9103      	str	r1, [sp, #12]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	bfbb      	ittet	lt
 80193ee:	425b      	neglt	r3, r3
 80193f0:	f042 0202 	orrlt.w	r2, r2, #2
 80193f4:	9307      	strge	r3, [sp, #28]
 80193f6:	9307      	strlt	r3, [sp, #28]
 80193f8:	bfb8      	it	lt
 80193fa:	9204      	strlt	r2, [sp, #16]
 80193fc:	7823      	ldrb	r3, [r4, #0]
 80193fe:	2b2e      	cmp	r3, #46	; 0x2e
 8019400:	d10c      	bne.n	801941c <_svfiprintf_r+0x130>
 8019402:	7863      	ldrb	r3, [r4, #1]
 8019404:	2b2a      	cmp	r3, #42	; 0x2a
 8019406:	d135      	bne.n	8019474 <_svfiprintf_r+0x188>
 8019408:	9b03      	ldr	r3, [sp, #12]
 801940a:	1d1a      	adds	r2, r3, #4
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	9203      	str	r2, [sp, #12]
 8019410:	2b00      	cmp	r3, #0
 8019412:	bfb8      	it	lt
 8019414:	f04f 33ff 	movlt.w	r3, #4294967295
 8019418:	3402      	adds	r4, #2
 801941a:	9305      	str	r3, [sp, #20]
 801941c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80194e8 <_svfiprintf_r+0x1fc>
 8019420:	7821      	ldrb	r1, [r4, #0]
 8019422:	2203      	movs	r2, #3
 8019424:	4650      	mov	r0, sl
 8019426:	f7f6 fedb 	bl	80101e0 <memchr>
 801942a:	b140      	cbz	r0, 801943e <_svfiprintf_r+0x152>
 801942c:	2340      	movs	r3, #64	; 0x40
 801942e:	eba0 000a 	sub.w	r0, r0, sl
 8019432:	fa03 f000 	lsl.w	r0, r3, r0
 8019436:	9b04      	ldr	r3, [sp, #16]
 8019438:	4303      	orrs	r3, r0
 801943a:	3401      	adds	r4, #1
 801943c:	9304      	str	r3, [sp, #16]
 801943e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019442:	4826      	ldr	r0, [pc, #152]	; (80194dc <_svfiprintf_r+0x1f0>)
 8019444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019448:	2206      	movs	r2, #6
 801944a:	f7f6 fec9 	bl	80101e0 <memchr>
 801944e:	2800      	cmp	r0, #0
 8019450:	d038      	beq.n	80194c4 <_svfiprintf_r+0x1d8>
 8019452:	4b23      	ldr	r3, [pc, #140]	; (80194e0 <_svfiprintf_r+0x1f4>)
 8019454:	bb1b      	cbnz	r3, 801949e <_svfiprintf_r+0x1b2>
 8019456:	9b03      	ldr	r3, [sp, #12]
 8019458:	3307      	adds	r3, #7
 801945a:	f023 0307 	bic.w	r3, r3, #7
 801945e:	3308      	adds	r3, #8
 8019460:	9303      	str	r3, [sp, #12]
 8019462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019464:	4433      	add	r3, r6
 8019466:	9309      	str	r3, [sp, #36]	; 0x24
 8019468:	e767      	b.n	801933a <_svfiprintf_r+0x4e>
 801946a:	fb0c 3202 	mla	r2, ip, r2, r3
 801946e:	460c      	mov	r4, r1
 8019470:	2001      	movs	r0, #1
 8019472:	e7a5      	b.n	80193c0 <_svfiprintf_r+0xd4>
 8019474:	2300      	movs	r3, #0
 8019476:	3401      	adds	r4, #1
 8019478:	9305      	str	r3, [sp, #20]
 801947a:	4619      	mov	r1, r3
 801947c:	f04f 0c0a 	mov.w	ip, #10
 8019480:	4620      	mov	r0, r4
 8019482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019486:	3a30      	subs	r2, #48	; 0x30
 8019488:	2a09      	cmp	r2, #9
 801948a:	d903      	bls.n	8019494 <_svfiprintf_r+0x1a8>
 801948c:	2b00      	cmp	r3, #0
 801948e:	d0c5      	beq.n	801941c <_svfiprintf_r+0x130>
 8019490:	9105      	str	r1, [sp, #20]
 8019492:	e7c3      	b.n	801941c <_svfiprintf_r+0x130>
 8019494:	fb0c 2101 	mla	r1, ip, r1, r2
 8019498:	4604      	mov	r4, r0
 801949a:	2301      	movs	r3, #1
 801949c:	e7f0      	b.n	8019480 <_svfiprintf_r+0x194>
 801949e:	ab03      	add	r3, sp, #12
 80194a0:	9300      	str	r3, [sp, #0]
 80194a2:	462a      	mov	r2, r5
 80194a4:	4b0f      	ldr	r3, [pc, #60]	; (80194e4 <_svfiprintf_r+0x1f8>)
 80194a6:	a904      	add	r1, sp, #16
 80194a8:	4638      	mov	r0, r7
 80194aa:	f3af 8000 	nop.w
 80194ae:	1c42      	adds	r2, r0, #1
 80194b0:	4606      	mov	r6, r0
 80194b2:	d1d6      	bne.n	8019462 <_svfiprintf_r+0x176>
 80194b4:	89ab      	ldrh	r3, [r5, #12]
 80194b6:	065b      	lsls	r3, r3, #25
 80194b8:	f53f af2c 	bmi.w	8019314 <_svfiprintf_r+0x28>
 80194bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80194be:	b01d      	add	sp, #116	; 0x74
 80194c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194c4:	ab03      	add	r3, sp, #12
 80194c6:	9300      	str	r3, [sp, #0]
 80194c8:	462a      	mov	r2, r5
 80194ca:	4b06      	ldr	r3, [pc, #24]	; (80194e4 <_svfiprintf_r+0x1f8>)
 80194cc:	a904      	add	r1, sp, #16
 80194ce:	4638      	mov	r0, r7
 80194d0:	f000 f9d4 	bl	801987c <_printf_i>
 80194d4:	e7eb      	b.n	80194ae <_svfiprintf_r+0x1c2>
 80194d6:	bf00      	nop
 80194d8:	08019f5c 	.word	0x08019f5c
 80194dc:	08019f66 	.word	0x08019f66
 80194e0:	00000000 	.word	0x00000000
 80194e4:	08019235 	.word	0x08019235
 80194e8:	08019f62 	.word	0x08019f62

080194ec <__sfputc_r>:
 80194ec:	6893      	ldr	r3, [r2, #8]
 80194ee:	3b01      	subs	r3, #1
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	b410      	push	{r4}
 80194f4:	6093      	str	r3, [r2, #8]
 80194f6:	da08      	bge.n	801950a <__sfputc_r+0x1e>
 80194f8:	6994      	ldr	r4, [r2, #24]
 80194fa:	42a3      	cmp	r3, r4
 80194fc:	db01      	blt.n	8019502 <__sfputc_r+0x16>
 80194fe:	290a      	cmp	r1, #10
 8019500:	d103      	bne.n	801950a <__sfputc_r+0x1e>
 8019502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019506:	f7ff bd31 	b.w	8018f6c <__swbuf_r>
 801950a:	6813      	ldr	r3, [r2, #0]
 801950c:	1c58      	adds	r0, r3, #1
 801950e:	6010      	str	r0, [r2, #0]
 8019510:	7019      	strb	r1, [r3, #0]
 8019512:	4608      	mov	r0, r1
 8019514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019518:	4770      	bx	lr

0801951a <__sfputs_r>:
 801951a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801951c:	4606      	mov	r6, r0
 801951e:	460f      	mov	r7, r1
 8019520:	4614      	mov	r4, r2
 8019522:	18d5      	adds	r5, r2, r3
 8019524:	42ac      	cmp	r4, r5
 8019526:	d101      	bne.n	801952c <__sfputs_r+0x12>
 8019528:	2000      	movs	r0, #0
 801952a:	e007      	b.n	801953c <__sfputs_r+0x22>
 801952c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019530:	463a      	mov	r2, r7
 8019532:	4630      	mov	r0, r6
 8019534:	f7ff ffda 	bl	80194ec <__sfputc_r>
 8019538:	1c43      	adds	r3, r0, #1
 801953a:	d1f3      	bne.n	8019524 <__sfputs_r+0xa>
 801953c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019540 <_vfiprintf_r>:
 8019540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019544:	460d      	mov	r5, r1
 8019546:	b09d      	sub	sp, #116	; 0x74
 8019548:	4614      	mov	r4, r2
 801954a:	4698      	mov	r8, r3
 801954c:	4606      	mov	r6, r0
 801954e:	b118      	cbz	r0, 8019558 <_vfiprintf_r+0x18>
 8019550:	6983      	ldr	r3, [r0, #24]
 8019552:	b90b      	cbnz	r3, 8019558 <_vfiprintf_r+0x18>
 8019554:	f7ff fa6c 	bl	8018a30 <__sinit>
 8019558:	4b89      	ldr	r3, [pc, #548]	; (8019780 <_vfiprintf_r+0x240>)
 801955a:	429d      	cmp	r5, r3
 801955c:	d11b      	bne.n	8019596 <_vfiprintf_r+0x56>
 801955e:	6875      	ldr	r5, [r6, #4]
 8019560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019562:	07d9      	lsls	r1, r3, #31
 8019564:	d405      	bmi.n	8019572 <_vfiprintf_r+0x32>
 8019566:	89ab      	ldrh	r3, [r5, #12]
 8019568:	059a      	lsls	r2, r3, #22
 801956a:	d402      	bmi.n	8019572 <_vfiprintf_r+0x32>
 801956c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801956e:	f7ff fb22 	bl	8018bb6 <__retarget_lock_acquire_recursive>
 8019572:	89ab      	ldrh	r3, [r5, #12]
 8019574:	071b      	lsls	r3, r3, #28
 8019576:	d501      	bpl.n	801957c <_vfiprintf_r+0x3c>
 8019578:	692b      	ldr	r3, [r5, #16]
 801957a:	b9eb      	cbnz	r3, 80195b8 <_vfiprintf_r+0x78>
 801957c:	4629      	mov	r1, r5
 801957e:	4630      	mov	r0, r6
 8019580:	f7ff fd58 	bl	8019034 <__swsetup_r>
 8019584:	b1c0      	cbz	r0, 80195b8 <_vfiprintf_r+0x78>
 8019586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019588:	07dc      	lsls	r4, r3, #31
 801958a:	d50e      	bpl.n	80195aa <_vfiprintf_r+0x6a>
 801958c:	f04f 30ff 	mov.w	r0, #4294967295
 8019590:	b01d      	add	sp, #116	; 0x74
 8019592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019596:	4b7b      	ldr	r3, [pc, #492]	; (8019784 <_vfiprintf_r+0x244>)
 8019598:	429d      	cmp	r5, r3
 801959a:	d101      	bne.n	80195a0 <_vfiprintf_r+0x60>
 801959c:	68b5      	ldr	r5, [r6, #8]
 801959e:	e7df      	b.n	8019560 <_vfiprintf_r+0x20>
 80195a0:	4b79      	ldr	r3, [pc, #484]	; (8019788 <_vfiprintf_r+0x248>)
 80195a2:	429d      	cmp	r5, r3
 80195a4:	bf08      	it	eq
 80195a6:	68f5      	ldreq	r5, [r6, #12]
 80195a8:	e7da      	b.n	8019560 <_vfiprintf_r+0x20>
 80195aa:	89ab      	ldrh	r3, [r5, #12]
 80195ac:	0598      	lsls	r0, r3, #22
 80195ae:	d4ed      	bmi.n	801958c <_vfiprintf_r+0x4c>
 80195b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80195b2:	f7ff fb01 	bl	8018bb8 <__retarget_lock_release_recursive>
 80195b6:	e7e9      	b.n	801958c <_vfiprintf_r+0x4c>
 80195b8:	2300      	movs	r3, #0
 80195ba:	9309      	str	r3, [sp, #36]	; 0x24
 80195bc:	2320      	movs	r3, #32
 80195be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80195c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80195c6:	2330      	movs	r3, #48	; 0x30
 80195c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801978c <_vfiprintf_r+0x24c>
 80195cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80195d0:	f04f 0901 	mov.w	r9, #1
 80195d4:	4623      	mov	r3, r4
 80195d6:	469a      	mov	sl, r3
 80195d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80195dc:	b10a      	cbz	r2, 80195e2 <_vfiprintf_r+0xa2>
 80195de:	2a25      	cmp	r2, #37	; 0x25
 80195e0:	d1f9      	bne.n	80195d6 <_vfiprintf_r+0x96>
 80195e2:	ebba 0b04 	subs.w	fp, sl, r4
 80195e6:	d00b      	beq.n	8019600 <_vfiprintf_r+0xc0>
 80195e8:	465b      	mov	r3, fp
 80195ea:	4622      	mov	r2, r4
 80195ec:	4629      	mov	r1, r5
 80195ee:	4630      	mov	r0, r6
 80195f0:	f7ff ff93 	bl	801951a <__sfputs_r>
 80195f4:	3001      	adds	r0, #1
 80195f6:	f000 80aa 	beq.w	801974e <_vfiprintf_r+0x20e>
 80195fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80195fc:	445a      	add	r2, fp
 80195fe:	9209      	str	r2, [sp, #36]	; 0x24
 8019600:	f89a 3000 	ldrb.w	r3, [sl]
 8019604:	2b00      	cmp	r3, #0
 8019606:	f000 80a2 	beq.w	801974e <_vfiprintf_r+0x20e>
 801960a:	2300      	movs	r3, #0
 801960c:	f04f 32ff 	mov.w	r2, #4294967295
 8019610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019614:	f10a 0a01 	add.w	sl, sl, #1
 8019618:	9304      	str	r3, [sp, #16]
 801961a:	9307      	str	r3, [sp, #28]
 801961c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019620:	931a      	str	r3, [sp, #104]	; 0x68
 8019622:	4654      	mov	r4, sl
 8019624:	2205      	movs	r2, #5
 8019626:	f814 1b01 	ldrb.w	r1, [r4], #1
 801962a:	4858      	ldr	r0, [pc, #352]	; (801978c <_vfiprintf_r+0x24c>)
 801962c:	f7f6 fdd8 	bl	80101e0 <memchr>
 8019630:	9a04      	ldr	r2, [sp, #16]
 8019632:	b9d8      	cbnz	r0, 801966c <_vfiprintf_r+0x12c>
 8019634:	06d1      	lsls	r1, r2, #27
 8019636:	bf44      	itt	mi
 8019638:	2320      	movmi	r3, #32
 801963a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801963e:	0713      	lsls	r3, r2, #28
 8019640:	bf44      	itt	mi
 8019642:	232b      	movmi	r3, #43	; 0x2b
 8019644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019648:	f89a 3000 	ldrb.w	r3, [sl]
 801964c:	2b2a      	cmp	r3, #42	; 0x2a
 801964e:	d015      	beq.n	801967c <_vfiprintf_r+0x13c>
 8019650:	9a07      	ldr	r2, [sp, #28]
 8019652:	4654      	mov	r4, sl
 8019654:	2000      	movs	r0, #0
 8019656:	f04f 0c0a 	mov.w	ip, #10
 801965a:	4621      	mov	r1, r4
 801965c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019660:	3b30      	subs	r3, #48	; 0x30
 8019662:	2b09      	cmp	r3, #9
 8019664:	d94e      	bls.n	8019704 <_vfiprintf_r+0x1c4>
 8019666:	b1b0      	cbz	r0, 8019696 <_vfiprintf_r+0x156>
 8019668:	9207      	str	r2, [sp, #28]
 801966a:	e014      	b.n	8019696 <_vfiprintf_r+0x156>
 801966c:	eba0 0308 	sub.w	r3, r0, r8
 8019670:	fa09 f303 	lsl.w	r3, r9, r3
 8019674:	4313      	orrs	r3, r2
 8019676:	9304      	str	r3, [sp, #16]
 8019678:	46a2      	mov	sl, r4
 801967a:	e7d2      	b.n	8019622 <_vfiprintf_r+0xe2>
 801967c:	9b03      	ldr	r3, [sp, #12]
 801967e:	1d19      	adds	r1, r3, #4
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	9103      	str	r1, [sp, #12]
 8019684:	2b00      	cmp	r3, #0
 8019686:	bfbb      	ittet	lt
 8019688:	425b      	neglt	r3, r3
 801968a:	f042 0202 	orrlt.w	r2, r2, #2
 801968e:	9307      	strge	r3, [sp, #28]
 8019690:	9307      	strlt	r3, [sp, #28]
 8019692:	bfb8      	it	lt
 8019694:	9204      	strlt	r2, [sp, #16]
 8019696:	7823      	ldrb	r3, [r4, #0]
 8019698:	2b2e      	cmp	r3, #46	; 0x2e
 801969a:	d10c      	bne.n	80196b6 <_vfiprintf_r+0x176>
 801969c:	7863      	ldrb	r3, [r4, #1]
 801969e:	2b2a      	cmp	r3, #42	; 0x2a
 80196a0:	d135      	bne.n	801970e <_vfiprintf_r+0x1ce>
 80196a2:	9b03      	ldr	r3, [sp, #12]
 80196a4:	1d1a      	adds	r2, r3, #4
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	9203      	str	r2, [sp, #12]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	bfb8      	it	lt
 80196ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80196b2:	3402      	adds	r4, #2
 80196b4:	9305      	str	r3, [sp, #20]
 80196b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801979c <_vfiprintf_r+0x25c>
 80196ba:	7821      	ldrb	r1, [r4, #0]
 80196bc:	2203      	movs	r2, #3
 80196be:	4650      	mov	r0, sl
 80196c0:	f7f6 fd8e 	bl	80101e0 <memchr>
 80196c4:	b140      	cbz	r0, 80196d8 <_vfiprintf_r+0x198>
 80196c6:	2340      	movs	r3, #64	; 0x40
 80196c8:	eba0 000a 	sub.w	r0, r0, sl
 80196cc:	fa03 f000 	lsl.w	r0, r3, r0
 80196d0:	9b04      	ldr	r3, [sp, #16]
 80196d2:	4303      	orrs	r3, r0
 80196d4:	3401      	adds	r4, #1
 80196d6:	9304      	str	r3, [sp, #16]
 80196d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196dc:	482c      	ldr	r0, [pc, #176]	; (8019790 <_vfiprintf_r+0x250>)
 80196de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80196e2:	2206      	movs	r2, #6
 80196e4:	f7f6 fd7c 	bl	80101e0 <memchr>
 80196e8:	2800      	cmp	r0, #0
 80196ea:	d03f      	beq.n	801976c <_vfiprintf_r+0x22c>
 80196ec:	4b29      	ldr	r3, [pc, #164]	; (8019794 <_vfiprintf_r+0x254>)
 80196ee:	bb1b      	cbnz	r3, 8019738 <_vfiprintf_r+0x1f8>
 80196f0:	9b03      	ldr	r3, [sp, #12]
 80196f2:	3307      	adds	r3, #7
 80196f4:	f023 0307 	bic.w	r3, r3, #7
 80196f8:	3308      	adds	r3, #8
 80196fa:	9303      	str	r3, [sp, #12]
 80196fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196fe:	443b      	add	r3, r7
 8019700:	9309      	str	r3, [sp, #36]	; 0x24
 8019702:	e767      	b.n	80195d4 <_vfiprintf_r+0x94>
 8019704:	fb0c 3202 	mla	r2, ip, r2, r3
 8019708:	460c      	mov	r4, r1
 801970a:	2001      	movs	r0, #1
 801970c:	e7a5      	b.n	801965a <_vfiprintf_r+0x11a>
 801970e:	2300      	movs	r3, #0
 8019710:	3401      	adds	r4, #1
 8019712:	9305      	str	r3, [sp, #20]
 8019714:	4619      	mov	r1, r3
 8019716:	f04f 0c0a 	mov.w	ip, #10
 801971a:	4620      	mov	r0, r4
 801971c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019720:	3a30      	subs	r2, #48	; 0x30
 8019722:	2a09      	cmp	r2, #9
 8019724:	d903      	bls.n	801972e <_vfiprintf_r+0x1ee>
 8019726:	2b00      	cmp	r3, #0
 8019728:	d0c5      	beq.n	80196b6 <_vfiprintf_r+0x176>
 801972a:	9105      	str	r1, [sp, #20]
 801972c:	e7c3      	b.n	80196b6 <_vfiprintf_r+0x176>
 801972e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019732:	4604      	mov	r4, r0
 8019734:	2301      	movs	r3, #1
 8019736:	e7f0      	b.n	801971a <_vfiprintf_r+0x1da>
 8019738:	ab03      	add	r3, sp, #12
 801973a:	9300      	str	r3, [sp, #0]
 801973c:	462a      	mov	r2, r5
 801973e:	4b16      	ldr	r3, [pc, #88]	; (8019798 <_vfiprintf_r+0x258>)
 8019740:	a904      	add	r1, sp, #16
 8019742:	4630      	mov	r0, r6
 8019744:	f3af 8000 	nop.w
 8019748:	4607      	mov	r7, r0
 801974a:	1c78      	adds	r0, r7, #1
 801974c:	d1d6      	bne.n	80196fc <_vfiprintf_r+0x1bc>
 801974e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019750:	07d9      	lsls	r1, r3, #31
 8019752:	d405      	bmi.n	8019760 <_vfiprintf_r+0x220>
 8019754:	89ab      	ldrh	r3, [r5, #12]
 8019756:	059a      	lsls	r2, r3, #22
 8019758:	d402      	bmi.n	8019760 <_vfiprintf_r+0x220>
 801975a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801975c:	f7ff fa2c 	bl	8018bb8 <__retarget_lock_release_recursive>
 8019760:	89ab      	ldrh	r3, [r5, #12]
 8019762:	065b      	lsls	r3, r3, #25
 8019764:	f53f af12 	bmi.w	801958c <_vfiprintf_r+0x4c>
 8019768:	9809      	ldr	r0, [sp, #36]	; 0x24
 801976a:	e711      	b.n	8019590 <_vfiprintf_r+0x50>
 801976c:	ab03      	add	r3, sp, #12
 801976e:	9300      	str	r3, [sp, #0]
 8019770:	462a      	mov	r2, r5
 8019772:	4b09      	ldr	r3, [pc, #36]	; (8019798 <_vfiprintf_r+0x258>)
 8019774:	a904      	add	r1, sp, #16
 8019776:	4630      	mov	r0, r6
 8019778:	f000 f880 	bl	801987c <_printf_i>
 801977c:	e7e4      	b.n	8019748 <_vfiprintf_r+0x208>
 801977e:	bf00      	nop
 8019780:	08019f18 	.word	0x08019f18
 8019784:	08019f38 	.word	0x08019f38
 8019788:	08019ef8 	.word	0x08019ef8
 801978c:	08019f5c 	.word	0x08019f5c
 8019790:	08019f66 	.word	0x08019f66
 8019794:	00000000 	.word	0x00000000
 8019798:	0801951b 	.word	0x0801951b
 801979c:	08019f62 	.word	0x08019f62

080197a0 <_printf_common>:
 80197a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197a4:	4616      	mov	r6, r2
 80197a6:	4699      	mov	r9, r3
 80197a8:	688a      	ldr	r2, [r1, #8]
 80197aa:	690b      	ldr	r3, [r1, #16]
 80197ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80197b0:	4293      	cmp	r3, r2
 80197b2:	bfb8      	it	lt
 80197b4:	4613      	movlt	r3, r2
 80197b6:	6033      	str	r3, [r6, #0]
 80197b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80197bc:	4607      	mov	r7, r0
 80197be:	460c      	mov	r4, r1
 80197c0:	b10a      	cbz	r2, 80197c6 <_printf_common+0x26>
 80197c2:	3301      	adds	r3, #1
 80197c4:	6033      	str	r3, [r6, #0]
 80197c6:	6823      	ldr	r3, [r4, #0]
 80197c8:	0699      	lsls	r1, r3, #26
 80197ca:	bf42      	ittt	mi
 80197cc:	6833      	ldrmi	r3, [r6, #0]
 80197ce:	3302      	addmi	r3, #2
 80197d0:	6033      	strmi	r3, [r6, #0]
 80197d2:	6825      	ldr	r5, [r4, #0]
 80197d4:	f015 0506 	ands.w	r5, r5, #6
 80197d8:	d106      	bne.n	80197e8 <_printf_common+0x48>
 80197da:	f104 0a19 	add.w	sl, r4, #25
 80197de:	68e3      	ldr	r3, [r4, #12]
 80197e0:	6832      	ldr	r2, [r6, #0]
 80197e2:	1a9b      	subs	r3, r3, r2
 80197e4:	42ab      	cmp	r3, r5
 80197e6:	dc26      	bgt.n	8019836 <_printf_common+0x96>
 80197e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80197ec:	1e13      	subs	r3, r2, #0
 80197ee:	6822      	ldr	r2, [r4, #0]
 80197f0:	bf18      	it	ne
 80197f2:	2301      	movne	r3, #1
 80197f4:	0692      	lsls	r2, r2, #26
 80197f6:	d42b      	bmi.n	8019850 <_printf_common+0xb0>
 80197f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80197fc:	4649      	mov	r1, r9
 80197fe:	4638      	mov	r0, r7
 8019800:	47c0      	blx	r8
 8019802:	3001      	adds	r0, #1
 8019804:	d01e      	beq.n	8019844 <_printf_common+0xa4>
 8019806:	6823      	ldr	r3, [r4, #0]
 8019808:	68e5      	ldr	r5, [r4, #12]
 801980a:	6832      	ldr	r2, [r6, #0]
 801980c:	f003 0306 	and.w	r3, r3, #6
 8019810:	2b04      	cmp	r3, #4
 8019812:	bf08      	it	eq
 8019814:	1aad      	subeq	r5, r5, r2
 8019816:	68a3      	ldr	r3, [r4, #8]
 8019818:	6922      	ldr	r2, [r4, #16]
 801981a:	bf0c      	ite	eq
 801981c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019820:	2500      	movne	r5, #0
 8019822:	4293      	cmp	r3, r2
 8019824:	bfc4      	itt	gt
 8019826:	1a9b      	subgt	r3, r3, r2
 8019828:	18ed      	addgt	r5, r5, r3
 801982a:	2600      	movs	r6, #0
 801982c:	341a      	adds	r4, #26
 801982e:	42b5      	cmp	r5, r6
 8019830:	d11a      	bne.n	8019868 <_printf_common+0xc8>
 8019832:	2000      	movs	r0, #0
 8019834:	e008      	b.n	8019848 <_printf_common+0xa8>
 8019836:	2301      	movs	r3, #1
 8019838:	4652      	mov	r2, sl
 801983a:	4649      	mov	r1, r9
 801983c:	4638      	mov	r0, r7
 801983e:	47c0      	blx	r8
 8019840:	3001      	adds	r0, #1
 8019842:	d103      	bne.n	801984c <_printf_common+0xac>
 8019844:	f04f 30ff 	mov.w	r0, #4294967295
 8019848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801984c:	3501      	adds	r5, #1
 801984e:	e7c6      	b.n	80197de <_printf_common+0x3e>
 8019850:	18e1      	adds	r1, r4, r3
 8019852:	1c5a      	adds	r2, r3, #1
 8019854:	2030      	movs	r0, #48	; 0x30
 8019856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801985a:	4422      	add	r2, r4
 801985c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019864:	3302      	adds	r3, #2
 8019866:	e7c7      	b.n	80197f8 <_printf_common+0x58>
 8019868:	2301      	movs	r3, #1
 801986a:	4622      	mov	r2, r4
 801986c:	4649      	mov	r1, r9
 801986e:	4638      	mov	r0, r7
 8019870:	47c0      	blx	r8
 8019872:	3001      	adds	r0, #1
 8019874:	d0e6      	beq.n	8019844 <_printf_common+0xa4>
 8019876:	3601      	adds	r6, #1
 8019878:	e7d9      	b.n	801982e <_printf_common+0x8e>
	...

0801987c <_printf_i>:
 801987c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019880:	460c      	mov	r4, r1
 8019882:	4691      	mov	r9, r2
 8019884:	7e27      	ldrb	r7, [r4, #24]
 8019886:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019888:	2f78      	cmp	r7, #120	; 0x78
 801988a:	4680      	mov	r8, r0
 801988c:	469a      	mov	sl, r3
 801988e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019892:	d807      	bhi.n	80198a4 <_printf_i+0x28>
 8019894:	2f62      	cmp	r7, #98	; 0x62
 8019896:	d80a      	bhi.n	80198ae <_printf_i+0x32>
 8019898:	2f00      	cmp	r7, #0
 801989a:	f000 80d8 	beq.w	8019a4e <_printf_i+0x1d2>
 801989e:	2f58      	cmp	r7, #88	; 0x58
 80198a0:	f000 80a3 	beq.w	80199ea <_printf_i+0x16e>
 80198a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80198a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80198ac:	e03a      	b.n	8019924 <_printf_i+0xa8>
 80198ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80198b2:	2b15      	cmp	r3, #21
 80198b4:	d8f6      	bhi.n	80198a4 <_printf_i+0x28>
 80198b6:	a001      	add	r0, pc, #4	; (adr r0, 80198bc <_printf_i+0x40>)
 80198b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80198bc:	08019915 	.word	0x08019915
 80198c0:	08019929 	.word	0x08019929
 80198c4:	080198a5 	.word	0x080198a5
 80198c8:	080198a5 	.word	0x080198a5
 80198cc:	080198a5 	.word	0x080198a5
 80198d0:	080198a5 	.word	0x080198a5
 80198d4:	08019929 	.word	0x08019929
 80198d8:	080198a5 	.word	0x080198a5
 80198dc:	080198a5 	.word	0x080198a5
 80198e0:	080198a5 	.word	0x080198a5
 80198e4:	080198a5 	.word	0x080198a5
 80198e8:	08019a35 	.word	0x08019a35
 80198ec:	08019959 	.word	0x08019959
 80198f0:	08019a17 	.word	0x08019a17
 80198f4:	080198a5 	.word	0x080198a5
 80198f8:	080198a5 	.word	0x080198a5
 80198fc:	08019a57 	.word	0x08019a57
 8019900:	080198a5 	.word	0x080198a5
 8019904:	08019959 	.word	0x08019959
 8019908:	080198a5 	.word	0x080198a5
 801990c:	080198a5 	.word	0x080198a5
 8019910:	08019a1f 	.word	0x08019a1f
 8019914:	680b      	ldr	r3, [r1, #0]
 8019916:	1d1a      	adds	r2, r3, #4
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	600a      	str	r2, [r1, #0]
 801991c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019924:	2301      	movs	r3, #1
 8019926:	e0a3      	b.n	8019a70 <_printf_i+0x1f4>
 8019928:	6825      	ldr	r5, [r4, #0]
 801992a:	6808      	ldr	r0, [r1, #0]
 801992c:	062e      	lsls	r6, r5, #24
 801992e:	f100 0304 	add.w	r3, r0, #4
 8019932:	d50a      	bpl.n	801994a <_printf_i+0xce>
 8019934:	6805      	ldr	r5, [r0, #0]
 8019936:	600b      	str	r3, [r1, #0]
 8019938:	2d00      	cmp	r5, #0
 801993a:	da03      	bge.n	8019944 <_printf_i+0xc8>
 801993c:	232d      	movs	r3, #45	; 0x2d
 801993e:	426d      	negs	r5, r5
 8019940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019944:	485e      	ldr	r0, [pc, #376]	; (8019ac0 <_printf_i+0x244>)
 8019946:	230a      	movs	r3, #10
 8019948:	e019      	b.n	801997e <_printf_i+0x102>
 801994a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801994e:	6805      	ldr	r5, [r0, #0]
 8019950:	600b      	str	r3, [r1, #0]
 8019952:	bf18      	it	ne
 8019954:	b22d      	sxthne	r5, r5
 8019956:	e7ef      	b.n	8019938 <_printf_i+0xbc>
 8019958:	680b      	ldr	r3, [r1, #0]
 801995a:	6825      	ldr	r5, [r4, #0]
 801995c:	1d18      	adds	r0, r3, #4
 801995e:	6008      	str	r0, [r1, #0]
 8019960:	0628      	lsls	r0, r5, #24
 8019962:	d501      	bpl.n	8019968 <_printf_i+0xec>
 8019964:	681d      	ldr	r5, [r3, #0]
 8019966:	e002      	b.n	801996e <_printf_i+0xf2>
 8019968:	0669      	lsls	r1, r5, #25
 801996a:	d5fb      	bpl.n	8019964 <_printf_i+0xe8>
 801996c:	881d      	ldrh	r5, [r3, #0]
 801996e:	4854      	ldr	r0, [pc, #336]	; (8019ac0 <_printf_i+0x244>)
 8019970:	2f6f      	cmp	r7, #111	; 0x6f
 8019972:	bf0c      	ite	eq
 8019974:	2308      	moveq	r3, #8
 8019976:	230a      	movne	r3, #10
 8019978:	2100      	movs	r1, #0
 801997a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801997e:	6866      	ldr	r6, [r4, #4]
 8019980:	60a6      	str	r6, [r4, #8]
 8019982:	2e00      	cmp	r6, #0
 8019984:	bfa2      	ittt	ge
 8019986:	6821      	ldrge	r1, [r4, #0]
 8019988:	f021 0104 	bicge.w	r1, r1, #4
 801998c:	6021      	strge	r1, [r4, #0]
 801998e:	b90d      	cbnz	r5, 8019994 <_printf_i+0x118>
 8019990:	2e00      	cmp	r6, #0
 8019992:	d04d      	beq.n	8019a30 <_printf_i+0x1b4>
 8019994:	4616      	mov	r6, r2
 8019996:	fbb5 f1f3 	udiv	r1, r5, r3
 801999a:	fb03 5711 	mls	r7, r3, r1, r5
 801999e:	5dc7      	ldrb	r7, [r0, r7]
 80199a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80199a4:	462f      	mov	r7, r5
 80199a6:	42bb      	cmp	r3, r7
 80199a8:	460d      	mov	r5, r1
 80199aa:	d9f4      	bls.n	8019996 <_printf_i+0x11a>
 80199ac:	2b08      	cmp	r3, #8
 80199ae:	d10b      	bne.n	80199c8 <_printf_i+0x14c>
 80199b0:	6823      	ldr	r3, [r4, #0]
 80199b2:	07df      	lsls	r7, r3, #31
 80199b4:	d508      	bpl.n	80199c8 <_printf_i+0x14c>
 80199b6:	6923      	ldr	r3, [r4, #16]
 80199b8:	6861      	ldr	r1, [r4, #4]
 80199ba:	4299      	cmp	r1, r3
 80199bc:	bfde      	ittt	le
 80199be:	2330      	movle	r3, #48	; 0x30
 80199c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80199c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80199c8:	1b92      	subs	r2, r2, r6
 80199ca:	6122      	str	r2, [r4, #16]
 80199cc:	f8cd a000 	str.w	sl, [sp]
 80199d0:	464b      	mov	r3, r9
 80199d2:	aa03      	add	r2, sp, #12
 80199d4:	4621      	mov	r1, r4
 80199d6:	4640      	mov	r0, r8
 80199d8:	f7ff fee2 	bl	80197a0 <_printf_common>
 80199dc:	3001      	adds	r0, #1
 80199de:	d14c      	bne.n	8019a7a <_printf_i+0x1fe>
 80199e0:	f04f 30ff 	mov.w	r0, #4294967295
 80199e4:	b004      	add	sp, #16
 80199e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199ea:	4835      	ldr	r0, [pc, #212]	; (8019ac0 <_printf_i+0x244>)
 80199ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80199f0:	6823      	ldr	r3, [r4, #0]
 80199f2:	680e      	ldr	r6, [r1, #0]
 80199f4:	061f      	lsls	r7, r3, #24
 80199f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80199fa:	600e      	str	r6, [r1, #0]
 80199fc:	d514      	bpl.n	8019a28 <_printf_i+0x1ac>
 80199fe:	07d9      	lsls	r1, r3, #31
 8019a00:	bf44      	itt	mi
 8019a02:	f043 0320 	orrmi.w	r3, r3, #32
 8019a06:	6023      	strmi	r3, [r4, #0]
 8019a08:	b91d      	cbnz	r5, 8019a12 <_printf_i+0x196>
 8019a0a:	6823      	ldr	r3, [r4, #0]
 8019a0c:	f023 0320 	bic.w	r3, r3, #32
 8019a10:	6023      	str	r3, [r4, #0]
 8019a12:	2310      	movs	r3, #16
 8019a14:	e7b0      	b.n	8019978 <_printf_i+0xfc>
 8019a16:	6823      	ldr	r3, [r4, #0]
 8019a18:	f043 0320 	orr.w	r3, r3, #32
 8019a1c:	6023      	str	r3, [r4, #0]
 8019a1e:	2378      	movs	r3, #120	; 0x78
 8019a20:	4828      	ldr	r0, [pc, #160]	; (8019ac4 <_printf_i+0x248>)
 8019a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019a26:	e7e3      	b.n	80199f0 <_printf_i+0x174>
 8019a28:	065e      	lsls	r6, r3, #25
 8019a2a:	bf48      	it	mi
 8019a2c:	b2ad      	uxthmi	r5, r5
 8019a2e:	e7e6      	b.n	80199fe <_printf_i+0x182>
 8019a30:	4616      	mov	r6, r2
 8019a32:	e7bb      	b.n	80199ac <_printf_i+0x130>
 8019a34:	680b      	ldr	r3, [r1, #0]
 8019a36:	6826      	ldr	r6, [r4, #0]
 8019a38:	6960      	ldr	r0, [r4, #20]
 8019a3a:	1d1d      	adds	r5, r3, #4
 8019a3c:	600d      	str	r5, [r1, #0]
 8019a3e:	0635      	lsls	r5, r6, #24
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	d501      	bpl.n	8019a48 <_printf_i+0x1cc>
 8019a44:	6018      	str	r0, [r3, #0]
 8019a46:	e002      	b.n	8019a4e <_printf_i+0x1d2>
 8019a48:	0671      	lsls	r1, r6, #25
 8019a4a:	d5fb      	bpl.n	8019a44 <_printf_i+0x1c8>
 8019a4c:	8018      	strh	r0, [r3, #0]
 8019a4e:	2300      	movs	r3, #0
 8019a50:	6123      	str	r3, [r4, #16]
 8019a52:	4616      	mov	r6, r2
 8019a54:	e7ba      	b.n	80199cc <_printf_i+0x150>
 8019a56:	680b      	ldr	r3, [r1, #0]
 8019a58:	1d1a      	adds	r2, r3, #4
 8019a5a:	600a      	str	r2, [r1, #0]
 8019a5c:	681e      	ldr	r6, [r3, #0]
 8019a5e:	6862      	ldr	r2, [r4, #4]
 8019a60:	2100      	movs	r1, #0
 8019a62:	4630      	mov	r0, r6
 8019a64:	f7f6 fbbc 	bl	80101e0 <memchr>
 8019a68:	b108      	cbz	r0, 8019a6e <_printf_i+0x1f2>
 8019a6a:	1b80      	subs	r0, r0, r6
 8019a6c:	6060      	str	r0, [r4, #4]
 8019a6e:	6863      	ldr	r3, [r4, #4]
 8019a70:	6123      	str	r3, [r4, #16]
 8019a72:	2300      	movs	r3, #0
 8019a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a78:	e7a8      	b.n	80199cc <_printf_i+0x150>
 8019a7a:	6923      	ldr	r3, [r4, #16]
 8019a7c:	4632      	mov	r2, r6
 8019a7e:	4649      	mov	r1, r9
 8019a80:	4640      	mov	r0, r8
 8019a82:	47d0      	blx	sl
 8019a84:	3001      	adds	r0, #1
 8019a86:	d0ab      	beq.n	80199e0 <_printf_i+0x164>
 8019a88:	6823      	ldr	r3, [r4, #0]
 8019a8a:	079b      	lsls	r3, r3, #30
 8019a8c:	d413      	bmi.n	8019ab6 <_printf_i+0x23a>
 8019a8e:	68e0      	ldr	r0, [r4, #12]
 8019a90:	9b03      	ldr	r3, [sp, #12]
 8019a92:	4298      	cmp	r0, r3
 8019a94:	bfb8      	it	lt
 8019a96:	4618      	movlt	r0, r3
 8019a98:	e7a4      	b.n	80199e4 <_printf_i+0x168>
 8019a9a:	2301      	movs	r3, #1
 8019a9c:	4632      	mov	r2, r6
 8019a9e:	4649      	mov	r1, r9
 8019aa0:	4640      	mov	r0, r8
 8019aa2:	47d0      	blx	sl
 8019aa4:	3001      	adds	r0, #1
 8019aa6:	d09b      	beq.n	80199e0 <_printf_i+0x164>
 8019aa8:	3501      	adds	r5, #1
 8019aaa:	68e3      	ldr	r3, [r4, #12]
 8019aac:	9903      	ldr	r1, [sp, #12]
 8019aae:	1a5b      	subs	r3, r3, r1
 8019ab0:	42ab      	cmp	r3, r5
 8019ab2:	dcf2      	bgt.n	8019a9a <_printf_i+0x21e>
 8019ab4:	e7eb      	b.n	8019a8e <_printf_i+0x212>
 8019ab6:	2500      	movs	r5, #0
 8019ab8:	f104 0619 	add.w	r6, r4, #25
 8019abc:	e7f5      	b.n	8019aaa <_printf_i+0x22e>
 8019abe:	bf00      	nop
 8019ac0:	08019f6d 	.word	0x08019f6d
 8019ac4:	08019f7e 	.word	0x08019f7e

08019ac8 <_putc_r>:
 8019ac8:	b570      	push	{r4, r5, r6, lr}
 8019aca:	460d      	mov	r5, r1
 8019acc:	4614      	mov	r4, r2
 8019ace:	4606      	mov	r6, r0
 8019ad0:	b118      	cbz	r0, 8019ada <_putc_r+0x12>
 8019ad2:	6983      	ldr	r3, [r0, #24]
 8019ad4:	b90b      	cbnz	r3, 8019ada <_putc_r+0x12>
 8019ad6:	f7fe ffab 	bl	8018a30 <__sinit>
 8019ada:	4b1c      	ldr	r3, [pc, #112]	; (8019b4c <_putc_r+0x84>)
 8019adc:	429c      	cmp	r4, r3
 8019ade:	d124      	bne.n	8019b2a <_putc_r+0x62>
 8019ae0:	6874      	ldr	r4, [r6, #4]
 8019ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019ae4:	07d8      	lsls	r0, r3, #31
 8019ae6:	d405      	bmi.n	8019af4 <_putc_r+0x2c>
 8019ae8:	89a3      	ldrh	r3, [r4, #12]
 8019aea:	0599      	lsls	r1, r3, #22
 8019aec:	d402      	bmi.n	8019af4 <_putc_r+0x2c>
 8019aee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019af0:	f7ff f861 	bl	8018bb6 <__retarget_lock_acquire_recursive>
 8019af4:	68a3      	ldr	r3, [r4, #8]
 8019af6:	3b01      	subs	r3, #1
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	60a3      	str	r3, [r4, #8]
 8019afc:	da05      	bge.n	8019b0a <_putc_r+0x42>
 8019afe:	69a2      	ldr	r2, [r4, #24]
 8019b00:	4293      	cmp	r3, r2
 8019b02:	db1c      	blt.n	8019b3e <_putc_r+0x76>
 8019b04:	b2eb      	uxtb	r3, r5
 8019b06:	2b0a      	cmp	r3, #10
 8019b08:	d019      	beq.n	8019b3e <_putc_r+0x76>
 8019b0a:	6823      	ldr	r3, [r4, #0]
 8019b0c:	1c5a      	adds	r2, r3, #1
 8019b0e:	6022      	str	r2, [r4, #0]
 8019b10:	701d      	strb	r5, [r3, #0]
 8019b12:	b2ed      	uxtb	r5, r5
 8019b14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b16:	07da      	lsls	r2, r3, #31
 8019b18:	d405      	bmi.n	8019b26 <_putc_r+0x5e>
 8019b1a:	89a3      	ldrh	r3, [r4, #12]
 8019b1c:	059b      	lsls	r3, r3, #22
 8019b1e:	d402      	bmi.n	8019b26 <_putc_r+0x5e>
 8019b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b22:	f7ff f849 	bl	8018bb8 <__retarget_lock_release_recursive>
 8019b26:	4628      	mov	r0, r5
 8019b28:	bd70      	pop	{r4, r5, r6, pc}
 8019b2a:	4b09      	ldr	r3, [pc, #36]	; (8019b50 <_putc_r+0x88>)
 8019b2c:	429c      	cmp	r4, r3
 8019b2e:	d101      	bne.n	8019b34 <_putc_r+0x6c>
 8019b30:	68b4      	ldr	r4, [r6, #8]
 8019b32:	e7d6      	b.n	8019ae2 <_putc_r+0x1a>
 8019b34:	4b07      	ldr	r3, [pc, #28]	; (8019b54 <_putc_r+0x8c>)
 8019b36:	429c      	cmp	r4, r3
 8019b38:	bf08      	it	eq
 8019b3a:	68f4      	ldreq	r4, [r6, #12]
 8019b3c:	e7d1      	b.n	8019ae2 <_putc_r+0x1a>
 8019b3e:	4629      	mov	r1, r5
 8019b40:	4622      	mov	r2, r4
 8019b42:	4630      	mov	r0, r6
 8019b44:	f7ff fa12 	bl	8018f6c <__swbuf_r>
 8019b48:	4605      	mov	r5, r0
 8019b4a:	e7e3      	b.n	8019b14 <_putc_r+0x4c>
 8019b4c:	08019f18 	.word	0x08019f18
 8019b50:	08019f38 	.word	0x08019f38
 8019b54:	08019ef8 	.word	0x08019ef8

08019b58 <_read_r>:
 8019b58:	b538      	push	{r3, r4, r5, lr}
 8019b5a:	4d07      	ldr	r5, [pc, #28]	; (8019b78 <_read_r+0x20>)
 8019b5c:	4604      	mov	r4, r0
 8019b5e:	4608      	mov	r0, r1
 8019b60:	4611      	mov	r1, r2
 8019b62:	2200      	movs	r2, #0
 8019b64:	602a      	str	r2, [r5, #0]
 8019b66:	461a      	mov	r2, r3
 8019b68:	f7f8 fd72 	bl	8012650 <_read>
 8019b6c:	1c43      	adds	r3, r0, #1
 8019b6e:	d102      	bne.n	8019b76 <_read_r+0x1e>
 8019b70:	682b      	ldr	r3, [r5, #0]
 8019b72:	b103      	cbz	r3, 8019b76 <_read_r+0x1e>
 8019b74:	6023      	str	r3, [r4, #0]
 8019b76:	bd38      	pop	{r3, r4, r5, pc}
 8019b78:	200006ac 	.word	0x200006ac

08019b7c <_fstat_r>:
 8019b7c:	b538      	push	{r3, r4, r5, lr}
 8019b7e:	4d07      	ldr	r5, [pc, #28]	; (8019b9c <_fstat_r+0x20>)
 8019b80:	2300      	movs	r3, #0
 8019b82:	4604      	mov	r4, r0
 8019b84:	4608      	mov	r0, r1
 8019b86:	4611      	mov	r1, r2
 8019b88:	602b      	str	r3, [r5, #0]
 8019b8a:	f7f8 fd8a 	bl	80126a2 <_fstat>
 8019b8e:	1c43      	adds	r3, r0, #1
 8019b90:	d102      	bne.n	8019b98 <_fstat_r+0x1c>
 8019b92:	682b      	ldr	r3, [r5, #0]
 8019b94:	b103      	cbz	r3, 8019b98 <_fstat_r+0x1c>
 8019b96:	6023      	str	r3, [r4, #0]
 8019b98:	bd38      	pop	{r3, r4, r5, pc}
 8019b9a:	bf00      	nop
 8019b9c:	200006ac 	.word	0x200006ac

08019ba0 <_isatty_r>:
 8019ba0:	b538      	push	{r3, r4, r5, lr}
 8019ba2:	4d06      	ldr	r5, [pc, #24]	; (8019bbc <_isatty_r+0x1c>)
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	4604      	mov	r4, r0
 8019ba8:	4608      	mov	r0, r1
 8019baa:	602b      	str	r3, [r5, #0]
 8019bac:	f7f8 fd89 	bl	80126c2 <_isatty>
 8019bb0:	1c43      	adds	r3, r0, #1
 8019bb2:	d102      	bne.n	8019bba <_isatty_r+0x1a>
 8019bb4:	682b      	ldr	r3, [r5, #0]
 8019bb6:	b103      	cbz	r3, 8019bba <_isatty_r+0x1a>
 8019bb8:	6023      	str	r3, [r4, #0]
 8019bba:	bd38      	pop	{r3, r4, r5, pc}
 8019bbc:	200006ac 	.word	0x200006ac

08019bc0 <memmove>:
 8019bc0:	4288      	cmp	r0, r1
 8019bc2:	b510      	push	{r4, lr}
 8019bc4:	eb01 0402 	add.w	r4, r1, r2
 8019bc8:	d902      	bls.n	8019bd0 <memmove+0x10>
 8019bca:	4284      	cmp	r4, r0
 8019bcc:	4623      	mov	r3, r4
 8019bce:	d807      	bhi.n	8019be0 <memmove+0x20>
 8019bd0:	1e43      	subs	r3, r0, #1
 8019bd2:	42a1      	cmp	r1, r4
 8019bd4:	d008      	beq.n	8019be8 <memmove+0x28>
 8019bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019bde:	e7f8      	b.n	8019bd2 <memmove+0x12>
 8019be0:	4402      	add	r2, r0
 8019be2:	4601      	mov	r1, r0
 8019be4:	428a      	cmp	r2, r1
 8019be6:	d100      	bne.n	8019bea <memmove+0x2a>
 8019be8:	bd10      	pop	{r4, pc}
 8019bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019bf2:	e7f7      	b.n	8019be4 <memmove+0x24>

08019bf4 <_realloc_r>:
 8019bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bf6:	4607      	mov	r7, r0
 8019bf8:	4614      	mov	r4, r2
 8019bfa:	460e      	mov	r6, r1
 8019bfc:	b921      	cbnz	r1, 8019c08 <_realloc_r+0x14>
 8019bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019c02:	4611      	mov	r1, r2
 8019c04:	f7ff b840 	b.w	8018c88 <_malloc_r>
 8019c08:	b922      	cbnz	r2, 8019c14 <_realloc_r+0x20>
 8019c0a:	f7fe ffed 	bl	8018be8 <_free_r>
 8019c0e:	4625      	mov	r5, r4
 8019c10:	4628      	mov	r0, r5
 8019c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c14:	f000 f814 	bl	8019c40 <_malloc_usable_size_r>
 8019c18:	42a0      	cmp	r0, r4
 8019c1a:	d20f      	bcs.n	8019c3c <_realloc_r+0x48>
 8019c1c:	4621      	mov	r1, r4
 8019c1e:	4638      	mov	r0, r7
 8019c20:	f7ff f832 	bl	8018c88 <_malloc_r>
 8019c24:	4605      	mov	r5, r0
 8019c26:	2800      	cmp	r0, #0
 8019c28:	d0f2      	beq.n	8019c10 <_realloc_r+0x1c>
 8019c2a:	4631      	mov	r1, r6
 8019c2c:	4622      	mov	r2, r4
 8019c2e:	f7fe ffc4 	bl	8018bba <memcpy>
 8019c32:	4631      	mov	r1, r6
 8019c34:	4638      	mov	r0, r7
 8019c36:	f7fe ffd7 	bl	8018be8 <_free_r>
 8019c3a:	e7e9      	b.n	8019c10 <_realloc_r+0x1c>
 8019c3c:	4635      	mov	r5, r6
 8019c3e:	e7e7      	b.n	8019c10 <_realloc_r+0x1c>

08019c40 <_malloc_usable_size_r>:
 8019c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c44:	1f18      	subs	r0, r3, #4
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	bfbc      	itt	lt
 8019c4a:	580b      	ldrlt	r3, [r1, r0]
 8019c4c:	18c0      	addlt	r0, r0, r3
 8019c4e:	4770      	bx	lr

08019c50 <_init>:
 8019c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c52:	bf00      	nop
 8019c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c56:	bc08      	pop	{r3}
 8019c58:	469e      	mov	lr, r3
 8019c5a:	4770      	bx	lr

08019c5c <_fini>:
 8019c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c5e:	bf00      	nop
 8019c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c62:	bc08      	pop	{r3}
 8019c64:	469e      	mov	lr, r3
 8019c66:	4770      	bx	lr
