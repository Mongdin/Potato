
BTtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e68  08010188  08010188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08016ff0  08016ff0  00016ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080170e4  080170e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080170e4  080170e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080170ec  080170ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080170ec  080170ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080170f0  080170f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080170f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000078  0801716c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0801716c  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c42  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c7  00000000  00000000  00044cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  00048db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  0004a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cbe4  00000000  00000000  0004b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aabe  00000000  00000000  0007858c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109e03  00000000  00000000  0009304a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019ce4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006508  00000000  00000000  0019cea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010188 <__do_global_dtors_aux>:
 8010188:	b510      	push	{r4, lr}
 801018a:	4c05      	ldr	r4, [pc, #20]	; (80101a0 <__do_global_dtors_aux+0x18>)
 801018c:	7823      	ldrb	r3, [r4, #0]
 801018e:	b933      	cbnz	r3, 801019e <__do_global_dtors_aux+0x16>
 8010190:	4b04      	ldr	r3, [pc, #16]	; (80101a4 <__do_global_dtors_aux+0x1c>)
 8010192:	b113      	cbz	r3, 801019a <__do_global_dtors_aux+0x12>
 8010194:	4804      	ldr	r0, [pc, #16]	; (80101a8 <__do_global_dtors_aux+0x20>)
 8010196:	f3af 8000 	nop.w
 801019a:	2301      	movs	r3, #1
 801019c:	7023      	strb	r3, [r4, #0]
 801019e:	bd10      	pop	{r4, pc}
 80101a0:	20000078 	.word	0x20000078
 80101a4:	00000000 	.word	0x00000000
 80101a8:	08016fd8 	.word	0x08016fd8

080101ac <frame_dummy>:
 80101ac:	b508      	push	{r3, lr}
 80101ae:	4b03      	ldr	r3, [pc, #12]	; (80101bc <frame_dummy+0x10>)
 80101b0:	b11b      	cbz	r3, 80101ba <frame_dummy+0xe>
 80101b2:	4903      	ldr	r1, [pc, #12]	; (80101c0 <frame_dummy+0x14>)
 80101b4:	4803      	ldr	r0, [pc, #12]	; (80101c4 <frame_dummy+0x18>)
 80101b6:	f3af 8000 	nop.w
 80101ba:	bd08      	pop	{r3, pc}
 80101bc:	00000000 	.word	0x00000000
 80101c0:	2000007c 	.word	0x2000007c
 80101c4:	08016fd8 	.word	0x08016fd8

080101c8 <strlen>:
 80101c8:	4603      	mov	r3, r0
 80101ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101ce:	2a00      	cmp	r2, #0
 80101d0:	d1fb      	bne.n	80101ca <strlen+0x2>
 80101d2:	1a18      	subs	r0, r3, r0
 80101d4:	3801      	subs	r0, #1
 80101d6:	4770      	bx	lr

080101d8 <__aeabi_uldivmod>:
 80101d8:	b953      	cbnz	r3, 80101f0 <__aeabi_uldivmod+0x18>
 80101da:	b94a      	cbnz	r2, 80101f0 <__aeabi_uldivmod+0x18>
 80101dc:	2900      	cmp	r1, #0
 80101de:	bf08      	it	eq
 80101e0:	2800      	cmpeq	r0, #0
 80101e2:	bf1c      	itt	ne
 80101e4:	f04f 31ff 	movne.w	r1, #4294967295
 80101e8:	f04f 30ff 	movne.w	r0, #4294967295
 80101ec:	f000 b96e 	b.w	80104cc <__aeabi_idiv0>
 80101f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80101f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80101f8:	f000 f806 	bl	8010208 <__udivmoddi4>
 80101fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010204:	b004      	add	sp, #16
 8010206:	4770      	bx	lr

08010208 <__udivmoddi4>:
 8010208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801020c:	9d08      	ldr	r5, [sp, #32]
 801020e:	4604      	mov	r4, r0
 8010210:	468c      	mov	ip, r1
 8010212:	2b00      	cmp	r3, #0
 8010214:	f040 8083 	bne.w	801031e <__udivmoddi4+0x116>
 8010218:	428a      	cmp	r2, r1
 801021a:	4617      	mov	r7, r2
 801021c:	d947      	bls.n	80102ae <__udivmoddi4+0xa6>
 801021e:	fab2 f282 	clz	r2, r2
 8010222:	b142      	cbz	r2, 8010236 <__udivmoddi4+0x2e>
 8010224:	f1c2 0020 	rsb	r0, r2, #32
 8010228:	fa24 f000 	lsr.w	r0, r4, r0
 801022c:	4091      	lsls	r1, r2
 801022e:	4097      	lsls	r7, r2
 8010230:	ea40 0c01 	orr.w	ip, r0, r1
 8010234:	4094      	lsls	r4, r2
 8010236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 801023a:	0c23      	lsrs	r3, r4, #16
 801023c:	fbbc f6f8 	udiv	r6, ip, r8
 8010240:	fa1f fe87 	uxth.w	lr, r7
 8010244:	fb08 c116 	mls	r1, r8, r6, ip
 8010248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801024c:	fb06 f10e 	mul.w	r1, r6, lr
 8010250:	4299      	cmp	r1, r3
 8010252:	d909      	bls.n	8010268 <__udivmoddi4+0x60>
 8010254:	18fb      	adds	r3, r7, r3
 8010256:	f106 30ff 	add.w	r0, r6, #4294967295
 801025a:	f080 8119 	bcs.w	8010490 <__udivmoddi4+0x288>
 801025e:	4299      	cmp	r1, r3
 8010260:	f240 8116 	bls.w	8010490 <__udivmoddi4+0x288>
 8010264:	3e02      	subs	r6, #2
 8010266:	443b      	add	r3, r7
 8010268:	1a5b      	subs	r3, r3, r1
 801026a:	b2a4      	uxth	r4, r4
 801026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8010270:	fb08 3310 	mls	r3, r8, r0, r3
 8010274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010278:	fb00 fe0e 	mul.w	lr, r0, lr
 801027c:	45a6      	cmp	lr, r4
 801027e:	d909      	bls.n	8010294 <__udivmoddi4+0x8c>
 8010280:	193c      	adds	r4, r7, r4
 8010282:	f100 33ff 	add.w	r3, r0, #4294967295
 8010286:	f080 8105 	bcs.w	8010494 <__udivmoddi4+0x28c>
 801028a:	45a6      	cmp	lr, r4
 801028c:	f240 8102 	bls.w	8010494 <__udivmoddi4+0x28c>
 8010290:	3802      	subs	r0, #2
 8010292:	443c      	add	r4, r7
 8010294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010298:	eba4 040e 	sub.w	r4, r4, lr
 801029c:	2600      	movs	r6, #0
 801029e:	b11d      	cbz	r5, 80102a8 <__udivmoddi4+0xa0>
 80102a0:	40d4      	lsrs	r4, r2
 80102a2:	2300      	movs	r3, #0
 80102a4:	e9c5 4300 	strd	r4, r3, [r5]
 80102a8:	4631      	mov	r1, r6
 80102aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ae:	b902      	cbnz	r2, 80102b2 <__udivmoddi4+0xaa>
 80102b0:	deff      	udf	#255	; 0xff
 80102b2:	fab2 f282 	clz	r2, r2
 80102b6:	2a00      	cmp	r2, #0
 80102b8:	d150      	bne.n	801035c <__udivmoddi4+0x154>
 80102ba:	1bcb      	subs	r3, r1, r7
 80102bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80102c0:	fa1f f887 	uxth.w	r8, r7
 80102c4:	2601      	movs	r6, #1
 80102c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80102ca:	0c21      	lsrs	r1, r4, #16
 80102cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80102d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80102d4:	fb08 f30c 	mul.w	r3, r8, ip
 80102d8:	428b      	cmp	r3, r1
 80102da:	d907      	bls.n	80102ec <__udivmoddi4+0xe4>
 80102dc:	1879      	adds	r1, r7, r1
 80102de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80102e2:	d202      	bcs.n	80102ea <__udivmoddi4+0xe2>
 80102e4:	428b      	cmp	r3, r1
 80102e6:	f200 80e9 	bhi.w	80104bc <__udivmoddi4+0x2b4>
 80102ea:	4684      	mov	ip, r0
 80102ec:	1ac9      	subs	r1, r1, r3
 80102ee:	b2a3      	uxth	r3, r4
 80102f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80102f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80102f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80102fc:	fb08 f800 	mul.w	r8, r8, r0
 8010300:	45a0      	cmp	r8, r4
 8010302:	d907      	bls.n	8010314 <__udivmoddi4+0x10c>
 8010304:	193c      	adds	r4, r7, r4
 8010306:	f100 33ff 	add.w	r3, r0, #4294967295
 801030a:	d202      	bcs.n	8010312 <__udivmoddi4+0x10a>
 801030c:	45a0      	cmp	r8, r4
 801030e:	f200 80d9 	bhi.w	80104c4 <__udivmoddi4+0x2bc>
 8010312:	4618      	mov	r0, r3
 8010314:	eba4 0408 	sub.w	r4, r4, r8
 8010318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 801031c:	e7bf      	b.n	801029e <__udivmoddi4+0x96>
 801031e:	428b      	cmp	r3, r1
 8010320:	d909      	bls.n	8010336 <__udivmoddi4+0x12e>
 8010322:	2d00      	cmp	r5, #0
 8010324:	f000 80b1 	beq.w	801048a <__udivmoddi4+0x282>
 8010328:	2600      	movs	r6, #0
 801032a:	e9c5 0100 	strd	r0, r1, [r5]
 801032e:	4630      	mov	r0, r6
 8010330:	4631      	mov	r1, r6
 8010332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010336:	fab3 f683 	clz	r6, r3
 801033a:	2e00      	cmp	r6, #0
 801033c:	d14a      	bne.n	80103d4 <__udivmoddi4+0x1cc>
 801033e:	428b      	cmp	r3, r1
 8010340:	d302      	bcc.n	8010348 <__udivmoddi4+0x140>
 8010342:	4282      	cmp	r2, r0
 8010344:	f200 80b8 	bhi.w	80104b8 <__udivmoddi4+0x2b0>
 8010348:	1a84      	subs	r4, r0, r2
 801034a:	eb61 0103 	sbc.w	r1, r1, r3
 801034e:	2001      	movs	r0, #1
 8010350:	468c      	mov	ip, r1
 8010352:	2d00      	cmp	r5, #0
 8010354:	d0a8      	beq.n	80102a8 <__udivmoddi4+0xa0>
 8010356:	e9c5 4c00 	strd	r4, ip, [r5]
 801035a:	e7a5      	b.n	80102a8 <__udivmoddi4+0xa0>
 801035c:	f1c2 0320 	rsb	r3, r2, #32
 8010360:	fa20 f603 	lsr.w	r6, r0, r3
 8010364:	4097      	lsls	r7, r2
 8010366:	fa01 f002 	lsl.w	r0, r1, r2
 801036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 801036e:	40d9      	lsrs	r1, r3
 8010370:	4330      	orrs	r0, r6
 8010372:	0c03      	lsrs	r3, r0, #16
 8010374:	fbb1 f6fe 	udiv	r6, r1, lr
 8010378:	fa1f f887 	uxth.w	r8, r7
 801037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8010380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010384:	fb06 f108 	mul.w	r1, r6, r8
 8010388:	4299      	cmp	r1, r3
 801038a:	fa04 f402 	lsl.w	r4, r4, r2
 801038e:	d909      	bls.n	80103a4 <__udivmoddi4+0x19c>
 8010390:	18fb      	adds	r3, r7, r3
 8010392:	f106 3cff 	add.w	ip, r6, #4294967295
 8010396:	f080 808d 	bcs.w	80104b4 <__udivmoddi4+0x2ac>
 801039a:	4299      	cmp	r1, r3
 801039c:	f240 808a 	bls.w	80104b4 <__udivmoddi4+0x2ac>
 80103a0:	3e02      	subs	r6, #2
 80103a2:	443b      	add	r3, r7
 80103a4:	1a5b      	subs	r3, r3, r1
 80103a6:	b281      	uxth	r1, r0
 80103a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80103ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80103b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80103b4:	fb00 f308 	mul.w	r3, r0, r8
 80103b8:	428b      	cmp	r3, r1
 80103ba:	d907      	bls.n	80103cc <__udivmoddi4+0x1c4>
 80103bc:	1879      	adds	r1, r7, r1
 80103be:	f100 3cff 	add.w	ip, r0, #4294967295
 80103c2:	d273      	bcs.n	80104ac <__udivmoddi4+0x2a4>
 80103c4:	428b      	cmp	r3, r1
 80103c6:	d971      	bls.n	80104ac <__udivmoddi4+0x2a4>
 80103c8:	3802      	subs	r0, #2
 80103ca:	4439      	add	r1, r7
 80103cc:	1acb      	subs	r3, r1, r3
 80103ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80103d2:	e778      	b.n	80102c6 <__udivmoddi4+0xbe>
 80103d4:	f1c6 0c20 	rsb	ip, r6, #32
 80103d8:	fa03 f406 	lsl.w	r4, r3, r6
 80103dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80103e0:	431c      	orrs	r4, r3
 80103e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80103e6:	fa01 f306 	lsl.w	r3, r1, r6
 80103ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80103ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80103f2:	431f      	orrs	r7, r3
 80103f4:	0c3b      	lsrs	r3, r7, #16
 80103f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80103fa:	fa1f f884 	uxth.w	r8, r4
 80103fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8010402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8010406:	fb09 fa08 	mul.w	sl, r9, r8
 801040a:	458a      	cmp	sl, r1
 801040c:	fa02 f206 	lsl.w	r2, r2, r6
 8010410:	fa00 f306 	lsl.w	r3, r0, r6
 8010414:	d908      	bls.n	8010428 <__udivmoddi4+0x220>
 8010416:	1861      	adds	r1, r4, r1
 8010418:	f109 30ff 	add.w	r0, r9, #4294967295
 801041c:	d248      	bcs.n	80104b0 <__udivmoddi4+0x2a8>
 801041e:	458a      	cmp	sl, r1
 8010420:	d946      	bls.n	80104b0 <__udivmoddi4+0x2a8>
 8010422:	f1a9 0902 	sub.w	r9, r9, #2
 8010426:	4421      	add	r1, r4
 8010428:	eba1 010a 	sub.w	r1, r1, sl
 801042c:	b2bf      	uxth	r7, r7
 801042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8010432:	fb0e 1110 	mls	r1, lr, r0, r1
 8010436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 801043a:	fb00 f808 	mul.w	r8, r0, r8
 801043e:	45b8      	cmp	r8, r7
 8010440:	d907      	bls.n	8010452 <__udivmoddi4+0x24a>
 8010442:	19e7      	adds	r7, r4, r7
 8010444:	f100 31ff 	add.w	r1, r0, #4294967295
 8010448:	d22e      	bcs.n	80104a8 <__udivmoddi4+0x2a0>
 801044a:	45b8      	cmp	r8, r7
 801044c:	d92c      	bls.n	80104a8 <__udivmoddi4+0x2a0>
 801044e:	3802      	subs	r0, #2
 8010450:	4427      	add	r7, r4
 8010452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010456:	eba7 0708 	sub.w	r7, r7, r8
 801045a:	fba0 8902 	umull	r8, r9, r0, r2
 801045e:	454f      	cmp	r7, r9
 8010460:	46c6      	mov	lr, r8
 8010462:	4649      	mov	r1, r9
 8010464:	d31a      	bcc.n	801049c <__udivmoddi4+0x294>
 8010466:	d017      	beq.n	8010498 <__udivmoddi4+0x290>
 8010468:	b15d      	cbz	r5, 8010482 <__udivmoddi4+0x27a>
 801046a:	ebb3 020e 	subs.w	r2, r3, lr
 801046e:	eb67 0701 	sbc.w	r7, r7, r1
 8010472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8010476:	40f2      	lsrs	r2, r6
 8010478:	ea4c 0202 	orr.w	r2, ip, r2
 801047c:	40f7      	lsrs	r7, r6
 801047e:	e9c5 2700 	strd	r2, r7, [r5]
 8010482:	2600      	movs	r6, #0
 8010484:	4631      	mov	r1, r6
 8010486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801048a:	462e      	mov	r6, r5
 801048c:	4628      	mov	r0, r5
 801048e:	e70b      	b.n	80102a8 <__udivmoddi4+0xa0>
 8010490:	4606      	mov	r6, r0
 8010492:	e6e9      	b.n	8010268 <__udivmoddi4+0x60>
 8010494:	4618      	mov	r0, r3
 8010496:	e6fd      	b.n	8010294 <__udivmoddi4+0x8c>
 8010498:	4543      	cmp	r3, r8
 801049a:	d2e5      	bcs.n	8010468 <__udivmoddi4+0x260>
 801049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80104a0:	eb69 0104 	sbc.w	r1, r9, r4
 80104a4:	3801      	subs	r0, #1
 80104a6:	e7df      	b.n	8010468 <__udivmoddi4+0x260>
 80104a8:	4608      	mov	r0, r1
 80104aa:	e7d2      	b.n	8010452 <__udivmoddi4+0x24a>
 80104ac:	4660      	mov	r0, ip
 80104ae:	e78d      	b.n	80103cc <__udivmoddi4+0x1c4>
 80104b0:	4681      	mov	r9, r0
 80104b2:	e7b9      	b.n	8010428 <__udivmoddi4+0x220>
 80104b4:	4666      	mov	r6, ip
 80104b6:	e775      	b.n	80103a4 <__udivmoddi4+0x19c>
 80104b8:	4630      	mov	r0, r6
 80104ba:	e74a      	b.n	8010352 <__udivmoddi4+0x14a>
 80104bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80104c0:	4439      	add	r1, r7
 80104c2:	e713      	b.n	80102ec <__udivmoddi4+0xe4>
 80104c4:	3802      	subs	r0, #2
 80104c6:	443c      	add	r4, r7
 80104c8:	e724      	b.n	8010314 <__udivmoddi4+0x10c>
 80104ca:	bf00      	nop

080104cc <__aeabi_idiv0>:
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop

080104d0 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 80104d0:	b5b0      	push	{r4, r5, r7, lr}
 80104d2:	b08a      	sub	sp, #40	; 0x28
 80104d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SV */
	const char *name = "test";
 80104d6:	4b22      	ldr	r3, [pc, #136]	; (8010560 <MX_BlueNRG_MS_Init+0x90>)
 80104d8:	61fb      	str	r3, [r7, #28]
	uint8_t SERVER_BDADDR[] = {0x01,0x02,0x03,0x04,0x05,0x06};
 80104da:	4a22      	ldr	r2, [pc, #136]	; (8010564 <MX_BlueNRG_MS_Init+0x94>)
 80104dc:	f107 0314 	add.w	r3, r7, #20
 80104e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104e4:	6018      	str	r0, [r3, #0]
 80104e6:	3304      	adds	r3, #4
 80104e8:	8019      	strh	r1, [r3, #0]
	uint8_t bdaddr[BDADDR_SIZE];

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

	hci_init(NULL,NULL);
 80104ea:	2100      	movs	r1, #0
 80104ec:	2000      	movs	r0, #0
 80104ee:	f005 fd8b 	bl	8016008 <hci_init>
	hci_reset();
 80104f2:	f005 fccd 	bl	8015e90 <hci_reset>
	HAL_Delay(200);
 80104f6:	20c8      	movs	r0, #200	; 0xc8
 80104f8:	f001 f8d4 	bl	80116a4 <HAL_Delay>

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80104fc:	f107 030c 	add.w	r3, r7, #12
 8010500:	f107 0214 	add.w	r2, r7, #20
 8010504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010508:	6018      	str	r0, [r3, #0]
 801050a:	3304      	adds	r3, #4
 801050c:	8019      	strh	r1, [r3, #0]

	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 801050e:	f107 030c 	add.w	r3, r7, #12
 8010512:	461a      	mov	r2, r3
 8010514:	2106      	movs	r1, #6
 8010516:	2000      	movs	r0, #0
 8010518:	f005 fc53 	bl	8015dc2 <aci_hal_write_config_data>

	aci_gatt_init();
 801051c:	f005 fb9c 	bl	8015c58 <aci_gatt_init>

	aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8010520:	f107 020a 	add.w	r2, r7, #10
 8010524:	1dbb      	adds	r3, r7, #6
 8010526:	9301      	str	r3, [sp, #4]
 8010528:	f107 0308 	add.w	r3, r7, #8
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	4613      	mov	r3, r2
 8010530:	2207      	movs	r2, #7
 8010532:	2100      	movs	r1, #0
 8010534:	2001      	movs	r0, #1
 8010536:	f005 fa50 	bl	80159da <aci_gap_init_IDB05A1>

	aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), name);
 801053a:	897c      	ldrh	r4, [r7, #10]
 801053c:	893d      	ldrh	r5, [r7, #8]
 801053e:	69f8      	ldr	r0, [r7, #28]
 8010540:	f7ff fe42 	bl	80101c8 <strlen>
 8010544:	4603      	mov	r3, r0
 8010546:	b2da      	uxtb	r2, r3
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	4613      	mov	r3, r2
 801054e:	2200      	movs	r2, #0
 8010550:	4629      	mov	r1, r5
 8010552:	4620      	mov	r0, r4
 8010554:	f005 fba3 	bl	8015c9e <aci_gatt_update_char_value>


  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8010558:	bf00      	nop
 801055a:	3720      	adds	r7, #32
 801055c:	46bd      	mov	sp, r7
 801055e:	bdb0      	pop	{r4, r5, r7, pc}
 8010560:	08016ff0 	.word	0x08016ff0
 8010564:	08016ff8 	.word	0x08016ff8

08010568 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b08c      	sub	sp, #48	; 0x30
 801056c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

	tBleStatus ret;
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'B','L','E','T','E','S','T'};
 801056e:	4a10      	ldr	r2, [pc, #64]	; (80105b0 <MX_BlueNRG_MS_Process+0x48>)
 8010570:	1d3b      	adds	r3, r7, #4
 8010572:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010576:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 801057a:	2300      	movs	r3, #0
 801057c:	9306      	str	r3, [sp, #24]
 801057e:	2300      	movs	r3, #0
 8010580:	9305      	str	r3, [sp, #20]
 8010582:	2300      	movs	r3, #0
 8010584:	9304      	str	r3, [sp, #16]
 8010586:	2300      	movs	r3, #0
 8010588:	9303      	str	r3, [sp, #12]
 801058a:	1d3b      	adds	r3, r7, #4
 801058c:	9302      	str	r3, [sp, #8]
 801058e:	2308      	movs	r3, #8
 8010590:	9301      	str	r3, [sp, #4]
 8010592:	2300      	movs	r3, #0
 8010594:	9300      	str	r3, [sp, #0]
 8010596:	2300      	movs	r3, #0
 8010598:	2200      	movs	r2, #0
 801059a:	2100      	movs	r1, #0
 801059c:	2000      	movs	r0, #0
 801059e:	f005 fa6c 	bl	8015a7a <aci_gap_set_discoverable>
 80105a2:	4603      	mov	r3, r0
 80105a4:	73fb      	strb	r3, [r7, #15]
  //hci_user_evt_proc();

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80105a6:	bf00      	nop
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	08017000 	.word	0x08017000

080105b4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b088      	sub	sp, #32
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80105bc:	4b1e      	ldr	r3, [pc, #120]	; (8010638 <HCI_TL_SPI_Init+0x84>)
 80105be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105c0:	4a1d      	ldr	r2, [pc, #116]	; (8010638 <HCI_TL_SPI_Init+0x84>)
 80105c2:	f043 0301 	orr.w	r3, r3, #1
 80105c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80105c8:	4b1b      	ldr	r3, [pc, #108]	; (8010638 <HCI_TL_SPI_Init+0x84>)
 80105ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105cc:	f003 0301 	and.w	r3, r3, #1
 80105d0:	60bb      	str	r3, [r7, #8]
 80105d2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80105d4:	2340      	movs	r3, #64	; 0x40
 80105d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80105d8:	4b18      	ldr	r3, [pc, #96]	; (801063c <HCI_TL_SPI_Init+0x88>)
 80105da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105dc:	2300      	movs	r3, #0
 80105de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80105e0:	f107 030c 	add.w	r3, r7, #12
 80105e4:	4619      	mov	r1, r3
 80105e6:	4816      	ldr	r0, [pc, #88]	; (8010640 <HCI_TL_SPI_Init+0x8c>)
 80105e8:	f002 f9d8 	bl	801299c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80105ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80105f2:	2301      	movs	r3, #1
 80105f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105f6:	2300      	movs	r3, #0
 80105f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105fa:	2300      	movs	r3, #0
 80105fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80105fe:	f107 030c 	add.w	r3, r7, #12
 8010602:	4619      	mov	r1, r3
 8010604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010608:	f002 f9c8 	bl	801299c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 801060c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010612:	2301      	movs	r3, #1
 8010614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010616:	2300      	movs	r3, #0
 8010618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801061a:	2300      	movs	r3, #0
 801061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 801061e:	f107 030c 	add.w	r3, r7, #12
 8010622:	4619      	mov	r1, r3
 8010624:	4807      	ldr	r0, [pc, #28]	; (8010644 <HCI_TL_SPI_Init+0x90>)
 8010626:	f002 f9b9 	bl	801299c <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 801062a:	f000 fecd 	bl	80113c8 <BSP_SPI3_Init>
 801062e:	4603      	mov	r3, r0
}
 8010630:	4618      	mov	r0, r3
 8010632:	3720      	adds	r7, #32
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	40021000 	.word	0x40021000
 801063c:	10110000 	.word	0x10110000
 8010640:	48001000 	.word	0x48001000
 8010644:	48000c00 	.word	0x48000c00

08010648 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 801064c:	2140      	movs	r1, #64	; 0x40
 801064e:	4808      	ldr	r0, [pc, #32]	; (8010670 <HCI_TL_SPI_DeInit+0x28>)
 8010650:	f002 fb4e 	bl	8012cf0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8010654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010658:	4806      	ldr	r0, [pc, #24]	; (8010674 <HCI_TL_SPI_DeInit+0x2c>)
 801065a:	f002 fb49 	bl	8012cf0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 801065e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010666:	f002 fb43 	bl	8012cf0 <HAL_GPIO_DeInit>
  return 0;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	bd80      	pop	{r7, pc}
 8010670:	48001000 	.word	0x48001000
 8010674:	48000c00 	.word	0x48000c00

08010678 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 801067c:	2201      	movs	r2, #1
 801067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010682:	480d      	ldr	r0, [pc, #52]	; (80106b8 <HCI_TL_SPI_Reset+0x40>)
 8010684:	f002 fc40 	bl	8012f08 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8010688:	2200      	movs	r2, #0
 801068a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010692:	f002 fc39 	bl	8012f08 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8010696:	2005      	movs	r0, #5
 8010698:	f001 f804 	bl	80116a4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 801069c:	2201      	movs	r2, #1
 801069e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80106a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80106a6:	f002 fc2f 	bl	8012f08 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80106aa:	2005      	movs	r0, #5
 80106ac:	f000 fffa 	bl	80116a4 <HAL_Delay>
  return 0;
 80106b0:	2300      	movs	r3, #0
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	48000c00 	.word	0x48000c00

080106bc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b088      	sub	sp, #32
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	460b      	mov	r3, r1
 80106c6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80106c8:	2300      	movs	r3, #0
 80106ca:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80106cc:	23ff      	movs	r3, #255	; 0xff
 80106ce:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80106d0:	4a26      	ldr	r2, [pc, #152]	; (801076c <HCI_TL_SPI_Receive+0xb0>)
 80106d2:	f107 0314 	add.w	r3, r7, #20
 80106d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106da:	6018      	str	r0, [r3, #0]
 80106dc:	3304      	adds	r3, #4
 80106de:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80106e0:	2200      	movs	r2, #0
 80106e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80106e6:	4822      	ldr	r0, [pc, #136]	; (8010770 <HCI_TL_SPI_Receive+0xb4>)
 80106e8:	f002 fc0e 	bl	8012f08 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80106ec:	f107 010c 	add.w	r1, r7, #12
 80106f0:	f107 0314 	add.w	r3, r7, #20
 80106f4:	2205      	movs	r2, #5
 80106f6:	4618      	mov	r0, r3
 80106f8:	f000 fe96 	bl	8011428 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80106fc:	7b3b      	ldrb	r3, [r7, #12]
 80106fe:	2b02      	cmp	r3, #2
 8010700:	d129      	bne.n	8010756 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8010702:	7c3b      	ldrb	r3, [r7, #16]
 8010704:	021b      	lsls	r3, r3, #8
 8010706:	b21a      	sxth	r2, r3
 8010708:	7bfb      	ldrb	r3, [r7, #15]
 801070a:	b21b      	sxth	r3, r3
 801070c:	4313      	orrs	r3, r2
 801070e:	b21b      	sxth	r3, r3
 8010710:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8010712:	8bfb      	ldrh	r3, [r7, #30]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d01e      	beq.n	8010756 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8010718:	8bfa      	ldrh	r2, [r7, #30]
 801071a:	887b      	ldrh	r3, [r7, #2]
 801071c:	429a      	cmp	r2, r3
 801071e:	d901      	bls.n	8010724 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8010720:	887b      	ldrh	r3, [r7, #2]
 8010722:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8010724:	2300      	movs	r3, #0
 8010726:	777b      	strb	r3, [r7, #29]
 8010728:	e010      	b.n	801074c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 801072a:	f107 011b 	add.w	r1, r7, #27
 801072e:	f107 031c 	add.w	r3, r7, #28
 8010732:	2201      	movs	r2, #1
 8010734:	4618      	mov	r0, r3
 8010736:	f000 fe77 	bl	8011428 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 801073a:	7f7b      	ldrb	r3, [r7, #29]
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	4413      	add	r3, r2
 8010740:	7efa      	ldrb	r2, [r7, #27]
 8010742:	b2d2      	uxtb	r2, r2
 8010744:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8010746:	7f7b      	ldrb	r3, [r7, #29]
 8010748:	3301      	adds	r3, #1
 801074a:	777b      	strb	r3, [r7, #29]
 801074c:	7f7b      	ldrb	r3, [r7, #29]
 801074e:	b29b      	uxth	r3, r3
 8010750:	8bfa      	ldrh	r2, [r7, #30]
 8010752:	429a      	cmp	r2, r3
 8010754:	d8e9      	bhi.n	801072a <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8010756:	2201      	movs	r2, #1
 8010758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801075c:	4804      	ldr	r0, [pc, #16]	; (8010770 <HCI_TL_SPI_Receive+0xb4>)
 801075e:	f002 fbd3 	bl	8012f08 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8010762:	7f7b      	ldrb	r3, [r7, #29]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3720      	adds	r7, #32
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	0801701c 	.word	0x0801701c
 8010770:	48000c00 	.word	0x48000c00

08010774 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b088      	sub	sp, #32
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	460b      	mov	r3, r1
 801077e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8010780:	4a24      	ldr	r2, [pc, #144]	; (8010814 <HCI_TL_SPI_Send+0xa0>)
 8010782:	f107 0310 	add.w	r3, r7, #16
 8010786:	e892 0003 	ldmia.w	r2, {r0, r1}
 801078a:	6018      	str	r0, [r3, #0]
 801078c:	3304      	adds	r3, #4
 801078e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8010790:	f000 ff7c 	bl	801168c <HAL_GetTick>
 8010794:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 801079a:	2200      	movs	r2, #0
 801079c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80107a0:	481d      	ldr	r0, [pc, #116]	; (8010818 <HCI_TL_SPI_Send+0xa4>)
 80107a2:	f002 fbb1 	bl	8012f08 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80107a6:	f107 0108 	add.w	r1, r7, #8
 80107aa:	f107 0310 	add.w	r3, r7, #16
 80107ae:	2205      	movs	r2, #5
 80107b0:	4618      	mov	r0, r3
 80107b2:	f000 fe39 	bl	8011428 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 80107b6:	7a3b      	ldrb	r3, [r7, #8]
 80107b8:	2b02      	cmp	r3, #2
 80107ba:	d10f      	bne.n	80107dc <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80107bc:	7a7b      	ldrb	r3, [r7, #9]
 80107be:	b29b      	uxth	r3, r3
 80107c0:	887a      	ldrh	r2, [r7, #2]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d806      	bhi.n	80107d4 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80107c6:	887b      	ldrh	r3, [r7, #2]
 80107c8:	461a      	mov	r2, r3
 80107ca:	4914      	ldr	r1, [pc, #80]	; (801081c <HCI_TL_SPI_Send+0xa8>)
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 fe2b 	bl	8011428 <BSP_SPI3_SendRecv>
 80107d2:	e006      	b.n	80107e2 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80107d4:	f06f 0301 	mvn.w	r3, #1
 80107d8:	61fb      	str	r3, [r7, #28]
 80107da:	e002      	b.n	80107e2 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80107dc:	f04f 33ff 	mov.w	r3, #4294967295
 80107e0:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80107e2:	2201      	movs	r2, #1
 80107e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80107e8:	480b      	ldr	r0, [pc, #44]	; (8010818 <HCI_TL_SPI_Send+0xa4>)
 80107ea:	f002 fb8d 	bl	8012f08 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80107ee:	f000 ff4d 	bl	801168c <HAL_GetTick>
 80107f2:	4602      	mov	r2, r0
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	2b0f      	cmp	r3, #15
 80107fa:	d903      	bls.n	8010804 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80107fc:	f06f 0302 	mvn.w	r3, #2
 8010800:	61fb      	str	r3, [r7, #28]
      break;
 8010802:	e002      	b.n	801080a <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	2b00      	cmp	r3, #0
 8010808:	dbc5      	blt.n	8010796 <HCI_TL_SPI_Send+0x22>

  return result;
 801080a:	69fb      	ldr	r3, [r7, #28]
}
 801080c:	4618      	mov	r0, r3
 801080e:	3720      	adds	r7, #32
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	08017024 	.word	0x08017024
 8010818:	48000c00 	.word	0x48000c00
 801081c:	20000094 	.word	0x20000094

08010820 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8010824:	2140      	movs	r1, #64	; 0x40
 8010826:	4805      	ldr	r0, [pc, #20]	; (801083c <IsDataAvailable+0x1c>)
 8010828:	f002 fb56 	bl	8012ed8 <HAL_GPIO_ReadPin>
 801082c:	4603      	mov	r3, r0
 801082e:	2b01      	cmp	r3, #1
 8010830:	bf0c      	ite	eq
 8010832:	2301      	moveq	r3, #1
 8010834:	2300      	movne	r3, #0
 8010836:	b2db      	uxtb	r3, r3
}
 8010838:	4618      	mov	r0, r3
 801083a:	bd80      	pop	{r7, pc}
 801083c:	48001000 	.word	0x48001000

08010840 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b088      	sub	sp, #32
 8010844:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8010846:	4b12      	ldr	r3, [pc, #72]	; (8010890 <hci_tl_lowlevel_init+0x50>)
 8010848:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 801084a:	4b12      	ldr	r3, [pc, #72]	; (8010894 <hci_tl_lowlevel_init+0x54>)
 801084c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 801084e:	4b12      	ldr	r3, [pc, #72]	; (8010898 <hci_tl_lowlevel_init+0x58>)
 8010850:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8010852:	4b12      	ldr	r3, [pc, #72]	; (801089c <hci_tl_lowlevel_init+0x5c>)
 8010854:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8010856:	4b12      	ldr	r3, [pc, #72]	; (80108a0 <hci_tl_lowlevel_init+0x60>)
 8010858:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 801085a:	4b12      	ldr	r3, [pc, #72]	; (80108a4 <hci_tl_lowlevel_init+0x64>)
 801085c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 801085e:	1d3b      	adds	r3, r7, #4
 8010860:	4618      	mov	r0, r3
 8010862:	f005 fc13 	bl	801608c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8010866:	4910      	ldr	r1, [pc, #64]	; (80108a8 <hci_tl_lowlevel_init+0x68>)
 8010868:	4810      	ldr	r0, [pc, #64]	; (80108ac <hci_tl_lowlevel_init+0x6c>)
 801086a:	f002 f853 	bl	8012914 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 801086e:	4a10      	ldr	r2, [pc, #64]	; (80108b0 <hci_tl_lowlevel_init+0x70>)
 8010870:	2100      	movs	r1, #0
 8010872:	480e      	ldr	r0, [pc, #56]	; (80108ac <hci_tl_lowlevel_init+0x6c>)
 8010874:	f002 f834 	bl	80128e0 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8010878:	2200      	movs	r2, #0
 801087a:	2100      	movs	r1, #0
 801087c:	2017      	movs	r0, #23
 801087e:	f001 ffb8 	bl	80127f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8010882:	2017      	movs	r0, #23
 8010884:	f001 ffd1 	bl	801282a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8010888:	bf00      	nop
 801088a:	3720      	adds	r7, #32
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	080105b5 	.word	0x080105b5
 8010894:	08010649 	.word	0x08010649
 8010898:	08010775 	.word	0x08010775
 801089c:	080106bd 	.word	0x080106bd
 80108a0:	08010679 	.word	0x08010679
 80108a4:	08011469 	.word	0x08011469
 80108a8:	16000006 	.word	0x16000006
 80108ac:	20000480 	.word	0x20000480
 80108b0:	080108b5 	.word	0x080108b5

080108b4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80108b8:	e005      	b.n	80108c6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80108ba:	2000      	movs	r0, #0
 80108bc:	f005 fd20 	bl	8016300 <hci_notify_asynch_evt>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d105      	bne.n	80108d2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80108c6:	f7ff ffab 	bl	8010820 <IsDataAvailable>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1f4      	bne.n	80108ba <hci_tl_lowlevel_isr+0x6>
 80108d0:	e000      	b.n	80108d4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80108d2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80108d4:	bd80      	pop	{r7, pc}
	...

080108d8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _write(int file, char *ptr, int len)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 500);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80108ec:	68b9      	ldr	r1, [r7, #8]
 80108ee:	4803      	ldr	r0, [pc, #12]	; (80108fc <_write+0x24>)
 80108f0:	f004 fbee 	bl	80150d0 <HAL_UART_Transmit>
}
 80108f4:	bf00      	nop
 80108f6:	3710      	adds	r7, #16
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	200004ec 	.word	0x200004ec

08010900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010904:	f000 fe5a 	bl	80115bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010908:	f000 f810 	bl	801092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801090c:	f000 f906 	bl	8010b1c <MX_GPIO_Init>
  MX_ADC1_Init();
 8010910:	f000 f85e 	bl	80109d0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8010914:	f000 f8d2 	bl	8010abc <MX_USART1_UART_Init>
  MX_BlueNRG_MS_Init();
 8010918:	f7ff fdda 	bl	80104d0 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  printf("while start\n");
 801091c:	4802      	ldr	r0, [pc, #8]	; (8010928 <main+0x28>)
 801091e:	f006 f967 	bl	8016bf0 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8010922:	f7ff fe21 	bl	8010568 <MX_BlueNRG_MS_Process>
 8010926:	e7fc      	b.n	8010922 <main+0x22>
 8010928:	0801702c 	.word	0x0801702c

0801092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b096      	sub	sp, #88	; 0x58
 8010930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010932:	f107 0314 	add.w	r3, r7, #20
 8010936:	2244      	movs	r2, #68	; 0x44
 8010938:	2100      	movs	r1, #0
 801093a:	4618      	mov	r0, r3
 801093c:	f006 f837 	bl	80169ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010940:	463b      	mov	r3, r7
 8010942:	2200      	movs	r2, #0
 8010944:	601a      	str	r2, [r3, #0]
 8010946:	605a      	str	r2, [r3, #4]
 8010948:	609a      	str	r2, [r3, #8]
 801094a:	60da      	str	r2, [r3, #12]
 801094c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 801094e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010952:	f002 fb23 	bl	8012f9c <HAL_PWREx_ControlVoltageScaling>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d001      	beq.n	8010960 <SystemClock_Config+0x34>
  {
    Error_Handler();
 801095c:	f000 fac0 	bl	8010ee0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8010960:	2310      	movs	r3, #16
 8010962:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8010964:	2301      	movs	r3, #1
 8010966:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8010968:	2300      	movs	r3, #0
 801096a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 801096c:	2360      	movs	r3, #96	; 0x60
 801096e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010970:	2302      	movs	r3, #2
 8010972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8010974:	2301      	movs	r3, #1
 8010976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8010978:	2301      	movs	r3, #1
 801097a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 801097c:	2328      	movs	r3, #40	; 0x28
 801097e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8010980:	2307      	movs	r3, #7
 8010982:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8010984:	2302      	movs	r3, #2
 8010986:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8010988:	2302      	movs	r3, #2
 801098a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801098c:	f107 0314 	add.w	r3, r7, #20
 8010990:	4618      	mov	r0, r3
 8010992:	f002 fb59 	bl	8013048 <HAL_RCC_OscConfig>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d001      	beq.n	80109a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 801099c:	f000 faa0 	bl	8010ee0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80109a0:	230f      	movs	r3, #15
 80109a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80109a4:	2303      	movs	r3, #3
 80109a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80109a8:	2300      	movs	r3, #0
 80109aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80109ac:	2300      	movs	r3, #0
 80109ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80109b0:	2300      	movs	r3, #0
 80109b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80109b4:	463b      	mov	r3, r7
 80109b6:	2104      	movs	r1, #4
 80109b8:	4618      	mov	r0, r3
 80109ba:	f002 ff2b 	bl	8013814 <HAL_RCC_ClockConfig>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d001      	beq.n	80109c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80109c4:	f000 fa8c 	bl	8010ee0 <Error_Handler>
  }
}
 80109c8:	bf00      	nop
 80109ca:	3758      	adds	r7, #88	; 0x58
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b08a      	sub	sp, #40	; 0x28
 80109d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80109d6:	f107 031c 	add.w	r3, r7, #28
 80109da:	2200      	movs	r2, #0
 80109dc:	601a      	str	r2, [r3, #0]
 80109de:	605a      	str	r2, [r3, #4]
 80109e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80109e2:	1d3b      	adds	r3, r7, #4
 80109e4:	2200      	movs	r2, #0
 80109e6:	601a      	str	r2, [r3, #0]
 80109e8:	605a      	str	r2, [r3, #4]
 80109ea:	609a      	str	r2, [r3, #8]
 80109ec:	60da      	str	r2, [r3, #12]
 80109ee:	611a      	str	r2, [r3, #16]
 80109f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80109f2:	4b2f      	ldr	r3, [pc, #188]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 80109f4:	4a2f      	ldr	r2, [pc, #188]	; (8010ab4 <MX_ADC1_Init+0xe4>)
 80109f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80109f8:	4b2d      	ldr	r3, [pc, #180]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 80109fa:	2200      	movs	r2, #0
 80109fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80109fe:	4b2c      	ldr	r3, [pc, #176]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a00:	2200      	movs	r2, #0
 8010a02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010a04:	4b2a      	ldr	r3, [pc, #168]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a06:	2200      	movs	r2, #0
 8010a08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8010a0a:	4b29      	ldr	r3, [pc, #164]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8010a10:	4b27      	ldr	r3, [pc, #156]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a12:	2204      	movs	r2, #4
 8010a14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8010a16:	4b26      	ldr	r3, [pc, #152]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a18:	2200      	movs	r2, #0
 8010a1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8010a1c:	4b24      	ldr	r3, [pc, #144]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a1e:	2200      	movs	r2, #0
 8010a20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8010a22:	4b23      	ldr	r3, [pc, #140]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a24:	2201      	movs	r2, #1
 8010a26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8010a28:	4b21      	ldr	r3, [pc, #132]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010a30:	4b1f      	ldr	r3, [pc, #124]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a32:	2200      	movs	r2, #0
 8010a34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010a36:	4b1e      	ldr	r3, [pc, #120]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a38:	2200      	movs	r2, #0
 8010a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8010a3c:	4b1c      	ldr	r3, [pc, #112]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8010a44:	4b1a      	ldr	r3, [pc, #104]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a46:	2200      	movs	r2, #0
 8010a48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8010a4a:	4b19      	ldr	r3, [pc, #100]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010a52:	4817      	ldr	r0, [pc, #92]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a54:	f000 ffd6 	bl	8011a04 <HAL_ADC_Init>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d001      	beq.n	8010a62 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8010a5e:	f000 fa3f 	bl	8010ee0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8010a62:	2300      	movs	r3, #0
 8010a64:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8010a66:	f107 031c 	add.w	r3, r7, #28
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	4810      	ldr	r0, [pc, #64]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a6e:	f001 fd35 	bl	80124dc <HAL_ADCEx_MultiModeConfigChannel>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d001      	beq.n	8010a7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8010a78:	f000 fa32 	bl	8010ee0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8010a7c:	4b0e      	ldr	r3, [pc, #56]	; (8010ab8 <MX_ADC1_Init+0xe8>)
 8010a7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010a80:	2306      	movs	r3, #6
 8010a82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8010a84:	2300      	movs	r3, #0
 8010a86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8010a88:	237f      	movs	r3, #127	; 0x7f
 8010a8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010a8c:	2304      	movs	r3, #4
 8010a8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8010a90:	2300      	movs	r3, #0
 8010a92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010a94:	1d3b      	adds	r3, r7, #4
 8010a96:	4619      	mov	r1, r3
 8010a98:	4805      	ldr	r0, [pc, #20]	; (8010ab0 <MX_ADC1_Init+0xe0>)
 8010a9a:	f001 f909 	bl	8011cb0 <HAL_ADC_ConfigChannel>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d001      	beq.n	8010aa8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8010aa4:	f000 fa1c 	bl	8010ee0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8010aa8:	bf00      	nop
 8010aaa:	3728      	adds	r7, #40	; 0x28
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	20000488 	.word	0x20000488
 8010ab4:	50040000 	.word	0x50040000
 8010ab8:	04300002 	.word	0x04300002

08010abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010ac0:	4b14      	ldr	r3, [pc, #80]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010ac2:	4a15      	ldr	r2, [pc, #84]	; (8010b18 <MX_USART1_UART_Init+0x5c>)
 8010ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8010ac6:	4b13      	ldr	r3, [pc, #76]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010ace:	4b11      	ldr	r3, [pc, #68]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010ad4:	4b0f      	ldr	r3, [pc, #60]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8010ada:	4b0e      	ldr	r3, [pc, #56]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010adc:	2200      	movs	r2, #0
 8010ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010ae0:	4b0c      	ldr	r3, [pc, #48]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010ae2:	220c      	movs	r2, #12
 8010ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010ae6:	4b0b      	ldr	r3, [pc, #44]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010ae8:	2200      	movs	r2, #0
 8010aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010aec:	4b09      	ldr	r3, [pc, #36]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010aee:	2200      	movs	r2, #0
 8010af0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010af2:	4b08      	ldr	r3, [pc, #32]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010af4:	2200      	movs	r2, #0
 8010af6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010af8:	4b06      	ldr	r3, [pc, #24]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010afa:	2200      	movs	r2, #0
 8010afc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010afe:	4805      	ldr	r0, [pc, #20]	; (8010b14 <MX_USART1_UART_Init+0x58>)
 8010b00:	f004 fa98 	bl	8015034 <HAL_UART_Init>
 8010b04:	4603      	mov	r3, r0
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d001      	beq.n	8010b0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8010b0a:	f000 f9e9 	bl	8010ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8010b0e:	bf00      	nop
 8010b10:	bd80      	pop	{r7, pc}
 8010b12:	bf00      	nop
 8010b14:	200004ec 	.word	0x200004ec
 8010b18:	40013800 	.word	0x40013800

08010b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b08a      	sub	sp, #40	; 0x28
 8010b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b22:	f107 0314 	add.w	r3, r7, #20
 8010b26:	2200      	movs	r2, #0
 8010b28:	601a      	str	r2, [r3, #0]
 8010b2a:	605a      	str	r2, [r3, #4]
 8010b2c:	609a      	str	r2, [r3, #8]
 8010b2e:	60da      	str	r2, [r3, #12]
 8010b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8010b32:	4bba      	ldr	r3, [pc, #744]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b36:	4ab9      	ldr	r2, [pc, #740]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b38:	f043 0310 	orr.w	r3, r3, #16
 8010b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010b3e:	4bb7      	ldr	r3, [pc, #732]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b42:	f003 0310 	and.w	r3, r3, #16
 8010b46:	613b      	str	r3, [r7, #16]
 8010b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010b4a:	4bb4      	ldr	r3, [pc, #720]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b4e:	4ab3      	ldr	r2, [pc, #716]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b50:	f043 0304 	orr.w	r3, r3, #4
 8010b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010b56:	4bb1      	ldr	r3, [pc, #708]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b5a:	f003 0304 	and.w	r3, r3, #4
 8010b5e:	60fb      	str	r3, [r7, #12]
 8010b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b62:	4bae      	ldr	r3, [pc, #696]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b66:	4aad      	ldr	r2, [pc, #692]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b68:	f043 0301 	orr.w	r3, r3, #1
 8010b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010b6e:	4bab      	ldr	r3, [pc, #684]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b72:	f003 0301 	and.w	r3, r3, #1
 8010b76:	60bb      	str	r3, [r7, #8]
 8010b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b7a:	4ba8      	ldr	r3, [pc, #672]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b7e:	4aa7      	ldr	r2, [pc, #668]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b80:	f043 0302 	orr.w	r3, r3, #2
 8010b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010b86:	4ba5      	ldr	r3, [pc, #660]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b8a:	f003 0302 	and.w	r3, r3, #2
 8010b8e:	607b      	str	r3, [r7, #4]
 8010b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010b92:	4ba2      	ldr	r3, [pc, #648]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b96:	4aa1      	ldr	r2, [pc, #644]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010b98:	f043 0308 	orr.w	r3, r3, #8
 8010b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010b9e:	4b9f      	ldr	r3, [pc, #636]	; (8010e1c <MX_GPIO_Init+0x300>)
 8010ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ba2:	f003 0308 	and.w	r3, r3, #8
 8010ba6:	603b      	str	r3, [r7, #0]
 8010ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8010baa:	2200      	movs	r2, #0
 8010bac:	f44f 718a 	mov.w	r1, #276	; 0x114
 8010bb0:	489b      	ldr	r0, [pc, #620]	; (8010e20 <MX_GPIO_Init+0x304>)
 8010bb2:	f002 f9a9 	bl	8012f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f248 1104 	movw	r1, #33028	; 0x8104
 8010bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010bc0:	f002 f9a2 	bl	8012f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	f24b 0114 	movw	r1, #45076	; 0xb014
 8010bca:	4896      	ldr	r0, [pc, #600]	; (8010e24 <MX_GPIO_Init+0x308>)
 8010bcc:	f002 f99c 	bl	8012f08 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f241 0181 	movw	r1, #4225	; 0x1081
 8010bd6:	4894      	ldr	r0, [pc, #592]	; (8010e28 <MX_GPIO_Init+0x30c>)
 8010bd8:	f002 f996 	bl	8012f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8010bdc:	2201      	movs	r2, #1
 8010bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010be2:	4891      	ldr	r0, [pc, #580]	; (8010e28 <MX_GPIO_Init+0x30c>)
 8010be4:	f002 f990 	bl	8012f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8010be8:	2200      	movs	r2, #0
 8010bea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010bee:	488f      	ldr	r0, [pc, #572]	; (8010e2c <MX_GPIO_Init+0x310>)
 8010bf0:	f002 f98a 	bl	8012f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	2120      	movs	r1, #32
 8010bf8:	488a      	ldr	r0, [pc, #552]	; (8010e24 <MX_GPIO_Init+0x308>)
 8010bfa:	f002 f985 	bl	8012f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8010bfe:	2201      	movs	r2, #1
 8010c00:	2101      	movs	r1, #1
 8010c02:	4887      	ldr	r0, [pc, #540]	; (8010e20 <MX_GPIO_Init+0x304>)
 8010c04:	f002 f980 	bl	8012f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8010c08:	f240 1315 	movw	r3, #277	; 0x115
 8010c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c0e:	2301      	movs	r3, #1
 8010c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c12:	2300      	movs	r3, #0
 8010c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c16:	2300      	movs	r3, #0
 8010c18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010c1a:	f107 0314 	add.w	r3, r7, #20
 8010c1e:	4619      	mov	r1, r3
 8010c20:	487f      	ldr	r0, [pc, #508]	; (8010e20 <MX_GPIO_Init+0x304>)
 8010c22:	f001 febb 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8010c26:	236a      	movs	r3, #106	; 0x6a
 8010c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010c2a:	4b81      	ldr	r3, [pc, #516]	; (8010e30 <MX_GPIO_Init+0x314>)
 8010c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010c32:	f107 0314 	add.w	r3, r7, #20
 8010c36:	4619      	mov	r1, r3
 8010c38:	4879      	ldr	r0, [pc, #484]	; (8010e20 <MX_GPIO_Init+0x304>)
 8010c3a:	f001 feaf 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8010c3e:	2303      	movs	r3, #3
 8010c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c42:	2302      	movs	r3, #2
 8010c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c46:	2300      	movs	r3, #0
 8010c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c4a:	2303      	movs	r3, #3
 8010c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8010c4e:	2308      	movs	r3, #8
 8010c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c52:	f107 0314 	add.w	r3, r7, #20
 8010c56:	4619      	mov	r1, r3
 8010c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c5c:	f001 fe9e 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8010c60:	f248 1304 	movw	r3, #33028	; 0x8104
 8010c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c66:	2301      	movs	r3, #1
 8010c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c72:	f107 0314 	add.w	r3, r7, #20
 8010c76:	4619      	mov	r1, r3
 8010c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c7c:	f001 fe8e 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8010c80:	2308      	movs	r3, #8
 8010c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c84:	2302      	movs	r3, #2
 8010c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8010c90:	2301      	movs	r3, #1
 8010c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8010c94:	f107 0314 	add.w	r3, r7, #20
 8010c98:	4619      	mov	r1, r3
 8010c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c9e:	f001 fe7d 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8010ca2:	23e0      	movs	r3, #224	; 0xe0
 8010ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ca6:	2302      	movs	r3, #2
 8010ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010caa:	2300      	movs	r3, #0
 8010cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010cae:	2303      	movs	r3, #3
 8010cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010cb2:	2305      	movs	r3, #5
 8010cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010cb6:	f107 0314 	add.w	r3, r7, #20
 8010cba:	4619      	mov	r1, r3
 8010cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010cc0:	f001 fe6c 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010cc8:	4b59      	ldr	r3, [pc, #356]	; (8010e30 <MX_GPIO_Init+0x314>)
 8010cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8010cd0:	f107 0314 	add.w	r3, r7, #20
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	4853      	ldr	r0, [pc, #332]	; (8010e24 <MX_GPIO_Init+0x308>)
 8010cd8:	f001 fe60 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8010cdc:	f24b 0334 	movw	r3, #45108	; 0xb034
 8010ce0:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010cea:	2300      	movs	r3, #0
 8010cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010cee:	f107 0314 	add.w	r3, r7, #20
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	484b      	ldr	r0, [pc, #300]	; (8010e24 <MX_GPIO_Init+0x308>)
 8010cf6:	f001 fe51 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8010cfa:	f44f 7320 	mov.w	r3, #640	; 0x280
 8010cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d00:	2302      	movs	r3, #2
 8010d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d04:	2300      	movs	r3, #0
 8010d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8010d0c:	2306      	movs	r3, #6
 8010d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010d10:	f107 0314 	add.w	r3, r7, #20
 8010d14:	4619      	mov	r1, r3
 8010d16:	4842      	ldr	r0, [pc, #264]	; (8010e20 <MX_GPIO_Init+0x304>)
 8010d18:	f001 fe40 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8010d1c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8010d20:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d22:	2302      	movs	r3, #2
 8010d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d26:	2300      	movs	r3, #0
 8010d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d2a:	2303      	movs	r3, #3
 8010d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8010d2e:	230a      	movs	r3, #10
 8010d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010d32:	f107 0314 	add.w	r3, r7, #20
 8010d36:	4619      	mov	r1, r3
 8010d38:	4839      	ldr	r0, [pc, #228]	; (8010e20 <MX_GPIO_Init+0x304>)
 8010d3a:	f001 fe2f 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8010d3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010d44:	2312      	movs	r3, #18
 8010d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d4c:	2303      	movs	r3, #3
 8010d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8010d50:	2304      	movs	r3, #4
 8010d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010d54:	f107 0314 	add.w	r3, r7, #20
 8010d58:	4619      	mov	r1, r3
 8010d5a:	4832      	ldr	r0, [pc, #200]	; (8010e24 <MX_GPIO_Init+0x308>)
 8010d5c:	f001 fe1e 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8010d60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d66:	2302      	movs	r3, #2
 8010d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d6e:	2303      	movs	r3, #3
 8010d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010d72:	2307      	movs	r3, #7
 8010d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010d76:	f107 0314 	add.w	r3, r7, #20
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	482a      	ldr	r0, [pc, #168]	; (8010e28 <MX_GPIO_Init+0x30c>)
 8010d7e:	f001 fe0d 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8010d82:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8010d86:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010d88:	4b29      	ldr	r3, [pc, #164]	; (8010e30 <MX_GPIO_Init+0x314>)
 8010d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010d90:	f107 0314 	add.w	r3, r7, #20
 8010d94:	4619      	mov	r1, r3
 8010d96:	4824      	ldr	r0, [pc, #144]	; (8010e28 <MX_GPIO_Init+0x30c>)
 8010d98:	f001 fe00 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8010d9c:	f243 0381 	movw	r3, #12417	; 0x3081
 8010da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010da2:	2301      	movs	r3, #1
 8010da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010da6:	2300      	movs	r3, #0
 8010da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010daa:	2300      	movs	r3, #0
 8010dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010dae:	f107 0314 	add.w	r3, r7, #20
 8010db2:	4619      	mov	r1, r3
 8010db4:	481c      	ldr	r0, [pc, #112]	; (8010e28 <MX_GPIO_Init+0x30c>)
 8010db6:	f001 fdf1 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8010dba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8010dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010dcc:	f107 0314 	add.w	r3, r7, #20
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	4816      	ldr	r0, [pc, #88]	; (8010e2c <MX_GPIO_Init+0x310>)
 8010dd4:	f001 fde2 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8010dd8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8010ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010dde:	4b14      	ldr	r3, [pc, #80]	; (8010e30 <MX_GPIO_Init+0x314>)
 8010de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010de2:	2300      	movs	r3, #0
 8010de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010de6:	f107 0314 	add.w	r3, r7, #20
 8010dea:	4619      	mov	r1, r3
 8010dec:	480f      	ldr	r0, [pc, #60]	; (8010e2c <MX_GPIO_Init+0x310>)
 8010dee:	f001 fdd5 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8010df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8010e00:	f107 0314 	add.w	r3, r7, #20
 8010e04:	4619      	mov	r1, r3
 8010e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010e0a:	f001 fdc7 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8010e0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e14:	2302      	movs	r3, #2
 8010e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e00b      	b.n	8010e34 <MX_GPIO_Init+0x318>
 8010e1c:	40021000 	.word	0x40021000
 8010e20:	48001000 	.word	0x48001000
 8010e24:	48000400 	.word	0x48000400
 8010e28:	48000c00 	.word	0x48000c00
 8010e2c:	48000800 	.word	0x48000800
 8010e30:	10110000 	.word	0x10110000
 8010e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e36:	2303      	movs	r3, #3
 8010e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010e3a:	230a      	movs	r3, #10
 8010e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e3e:	f107 0314 	add.w	r3, r7, #20
 8010e42:	4619      	mov	r1, r3
 8010e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010e48:	f001 fda8 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8010e4c:	2302      	movs	r3, #2
 8010e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e50:	2302      	movs	r3, #2
 8010e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e54:	2300      	movs	r3, #0
 8010e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e58:	2303      	movs	r3, #3
 8010e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010e5c:	2305      	movs	r3, #5
 8010e5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8010e60:	f107 0314 	add.w	r3, r7, #20
 8010e64:	4619      	mov	r1, r3
 8010e66:	481c      	ldr	r0, [pc, #112]	; (8010ed8 <MX_GPIO_Init+0x3bc>)
 8010e68:	f001 fd98 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8010e6c:	2378      	movs	r3, #120	; 0x78
 8010e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e70:	2302      	movs	r3, #2
 8010e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e74:	2300      	movs	r3, #0
 8010e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e78:	2303      	movs	r3, #3
 8010e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010e7c:	2307      	movs	r3, #7
 8010e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010e80:	f107 0314 	add.w	r3, r7, #20
 8010e84:	4619      	mov	r1, r3
 8010e86:	4814      	ldr	r0, [pc, #80]	; (8010ed8 <MX_GPIO_Init+0x3bc>)
 8010e88:	f001 fd88 	bl	801299c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8010e8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010e92:	2312      	movs	r3, #18
 8010e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e96:	2300      	movs	r3, #0
 8010e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e9a:	2303      	movs	r3, #3
 8010e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8010e9e:	2304      	movs	r3, #4
 8010ea0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010ea2:	f107 0314 	add.w	r3, r7, #20
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	480c      	ldr	r0, [pc, #48]	; (8010edc <MX_GPIO_Init+0x3c0>)
 8010eaa:	f001 fd77 	bl	801299c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8010eae:	2200      	movs	r2, #0
 8010eb0:	2100      	movs	r1, #0
 8010eb2:	2017      	movs	r0, #23
 8010eb4:	f001 fc9d 	bl	80127f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8010eb8:	2017      	movs	r0, #23
 8010eba:	f001 fcb6 	bl	801282a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	2028      	movs	r0, #40	; 0x28
 8010ec4:	f001 fc95 	bl	80127f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8010ec8:	2028      	movs	r0, #40	; 0x28
 8010eca:	f001 fcae 	bl	801282a <HAL_NVIC_EnableIRQ>

}
 8010ece:	bf00      	nop
 8010ed0:	3728      	adds	r7, #40	; 0x28
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	48000c00 	.word	0x48000c00
 8010edc:	48000400 	.word	0x48000400

08010ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010ee4:	b672      	cpsid	i
}
 8010ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010ee8:	e7fe      	b.n	8010ee8 <Error_Handler+0x8>
	...

08010eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010eec:	b480      	push	{r7}
 8010eee:	b083      	sub	sp, #12
 8010ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010ef2:	4b0f      	ldr	r3, [pc, #60]	; (8010f30 <HAL_MspInit+0x44>)
 8010ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ef6:	4a0e      	ldr	r2, [pc, #56]	; (8010f30 <HAL_MspInit+0x44>)
 8010ef8:	f043 0301 	orr.w	r3, r3, #1
 8010efc:	6613      	str	r3, [r2, #96]	; 0x60
 8010efe:	4b0c      	ldr	r3, [pc, #48]	; (8010f30 <HAL_MspInit+0x44>)
 8010f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010f02:	f003 0301 	and.w	r3, r3, #1
 8010f06:	607b      	str	r3, [r7, #4]
 8010f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010f0a:	4b09      	ldr	r3, [pc, #36]	; (8010f30 <HAL_MspInit+0x44>)
 8010f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f0e:	4a08      	ldr	r2, [pc, #32]	; (8010f30 <HAL_MspInit+0x44>)
 8010f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010f14:	6593      	str	r3, [r2, #88]	; 0x58
 8010f16:	4b06      	ldr	r3, [pc, #24]	; (8010f30 <HAL_MspInit+0x44>)
 8010f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010f1e:	603b      	str	r3, [r7, #0]
 8010f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010f22:	bf00      	nop
 8010f24:	370c      	adds	r7, #12
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr
 8010f2e:	bf00      	nop
 8010f30:	40021000 	.word	0x40021000

08010f34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b0ae      	sub	sp, #184	; 0xb8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010f40:	2200      	movs	r2, #0
 8010f42:	601a      	str	r2, [r3, #0]
 8010f44:	605a      	str	r2, [r3, #4]
 8010f46:	609a      	str	r2, [r3, #8]
 8010f48:	60da      	str	r2, [r3, #12]
 8010f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010f4c:	f107 031c 	add.w	r3, r7, #28
 8010f50:	2288      	movs	r2, #136	; 0x88
 8010f52:	2100      	movs	r1, #0
 8010f54:	4618      	mov	r0, r3
 8010f56:	f005 fd2a 	bl	80169ae <memset>
  if(hadc->Instance==ADC1)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	4a42      	ldr	r2, [pc, #264]	; (8011068 <HAL_ADC_MspInit+0x134>)
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d17d      	bne.n	8011060 <HAL_ADC_MspInit+0x12c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8010f64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010f68:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8010f6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8010f72:	2301      	movs	r3, #1
 8010f74:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8010f76:	2301      	movs	r3, #1
 8010f78:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8010f7a:	2318      	movs	r3, #24
 8010f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8010f7e:	2307      	movs	r3, #7
 8010f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8010f82:	2302      	movs	r3, #2
 8010f84:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8010f86:	2302      	movs	r3, #2
 8010f88:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8010f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010f90:	f107 031c 	add.w	r3, r7, #28
 8010f94:	4618      	mov	r0, r3
 8010f96:	f002 fe43 	bl	8013c20 <HAL_RCCEx_PeriphCLKConfig>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d001      	beq.n	8010fa4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8010fa0:	f7ff ff9e 	bl	8010ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8010fa4:	4b31      	ldr	r3, [pc, #196]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fa8:	4a30      	ldr	r2, [pc, #192]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010faa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010fb0:	4b2e      	ldr	r3, [pc, #184]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010fb8:	61bb      	str	r3, [r7, #24]
 8010fba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010fbc:	4b2b      	ldr	r3, [pc, #172]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fc0:	4a2a      	ldr	r2, [pc, #168]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010fc2:	f043 0304 	orr.w	r3, r3, #4
 8010fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010fc8:	4b28      	ldr	r3, [pc, #160]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fcc:	f003 0304 	and.w	r3, r3, #4
 8010fd0:	617b      	str	r3, [r7, #20]
 8010fd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010fd4:	4b25      	ldr	r3, [pc, #148]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fd8:	4a24      	ldr	r2, [pc, #144]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010fda:	f043 0301 	orr.w	r3, r3, #1
 8010fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010fe0:	4b22      	ldr	r3, [pc, #136]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fe4:	f003 0301 	and.w	r3, r3, #1
 8010fe8:	613b      	str	r3, [r7, #16]
 8010fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010fec:	4b1f      	ldr	r3, [pc, #124]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ff0:	4a1e      	ldr	r2, [pc, #120]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010ff2:	f043 0302 	orr.w	r3, r3, #2
 8010ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010ff8:	4b1c      	ldr	r3, [pc, #112]	; (801106c <HAL_ADC_MspInit+0x138>)
 8010ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ffc:	f003 0302 	and.w	r3, r3, #2
 8011000:	60fb      	str	r3, [r7, #12]
 8011002:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8011004:	233f      	movs	r3, #63	; 0x3f
 8011006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 801100a:	230b      	movs	r3, #11
 801100c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011010:	2300      	movs	r3, #0
 8011012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011016:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801101a:	4619      	mov	r1, r3
 801101c:	4814      	ldr	r0, [pc, #80]	; (8011070 <HAL_ADC_MspInit+0x13c>)
 801101e:	f001 fcbd 	bl	801299c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8011022:	2310      	movs	r3, #16
 8011024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8011028:	230b      	movs	r3, #11
 801102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801102e:	2300      	movs	r3, #0
 8011030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8011034:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011038:	4619      	mov	r1, r3
 801103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801103e:	f001 fcad 	bl	801299c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8011042:	2302      	movs	r3, #2
 8011044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8011048:	230b      	movs	r3, #11
 801104a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801104e:	2300      	movs	r3, #0
 8011050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8011054:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011058:	4619      	mov	r1, r3
 801105a:	4806      	ldr	r0, [pc, #24]	; (8011074 <HAL_ADC_MspInit+0x140>)
 801105c:	f001 fc9e 	bl	801299c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8011060:	bf00      	nop
 8011062:	37b8      	adds	r7, #184	; 0xb8
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	50040000 	.word	0x50040000
 801106c:	40021000 	.word	0x40021000
 8011070:	48000800 	.word	0x48000800
 8011074:	48000400 	.word	0x48000400

08011078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b0ac      	sub	sp, #176	; 0xb0
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011080:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011084:	2200      	movs	r2, #0
 8011086:	601a      	str	r2, [r3, #0]
 8011088:	605a      	str	r2, [r3, #4]
 801108a:	609a      	str	r2, [r3, #8]
 801108c:	60da      	str	r2, [r3, #12]
 801108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011090:	f107 0314 	add.w	r3, r7, #20
 8011094:	2288      	movs	r2, #136	; 0x88
 8011096:	2100      	movs	r1, #0
 8011098:	4618      	mov	r0, r3
 801109a:	f005 fc88 	bl	80169ae <memset>
  if(huart->Instance==USART1)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	4a21      	ldr	r2, [pc, #132]	; (8011128 <HAL_UART_MspInit+0xb0>)
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d13a      	bne.n	801111e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80110a8:	2301      	movs	r3, #1
 80110aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80110ac:	2300      	movs	r3, #0
 80110ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80110b0:	f107 0314 	add.w	r3, r7, #20
 80110b4:	4618      	mov	r0, r3
 80110b6:	f002 fdb3 	bl	8013c20 <HAL_RCCEx_PeriphCLKConfig>
 80110ba:	4603      	mov	r3, r0
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d001      	beq.n	80110c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80110c0:	f7ff ff0e 	bl	8010ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80110c4:	4b19      	ldr	r3, [pc, #100]	; (801112c <HAL_UART_MspInit+0xb4>)
 80110c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80110c8:	4a18      	ldr	r2, [pc, #96]	; (801112c <HAL_UART_MspInit+0xb4>)
 80110ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80110ce:	6613      	str	r3, [r2, #96]	; 0x60
 80110d0:	4b16      	ldr	r3, [pc, #88]	; (801112c <HAL_UART_MspInit+0xb4>)
 80110d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80110d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110d8:	613b      	str	r3, [r7, #16]
 80110da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80110dc:	4b13      	ldr	r3, [pc, #76]	; (801112c <HAL_UART_MspInit+0xb4>)
 80110de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110e0:	4a12      	ldr	r2, [pc, #72]	; (801112c <HAL_UART_MspInit+0xb4>)
 80110e2:	f043 0302 	orr.w	r3, r3, #2
 80110e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80110e8:	4b10      	ldr	r3, [pc, #64]	; (801112c <HAL_UART_MspInit+0xb4>)
 80110ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110ec:	f003 0302 	and.w	r3, r3, #2
 80110f0:	60fb      	str	r3, [r7, #12]
 80110f2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80110f4:	23c0      	movs	r3, #192	; 0xc0
 80110f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80110fa:	2302      	movs	r3, #2
 80110fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011100:	2300      	movs	r3, #0
 8011102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011106:	2303      	movs	r3, #3
 8011108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801110c:	2307      	movs	r3, #7
 801110e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011112:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011116:	4619      	mov	r1, r3
 8011118:	4805      	ldr	r0, [pc, #20]	; (8011130 <HAL_UART_MspInit+0xb8>)
 801111a:	f001 fc3f 	bl	801299c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 801111e:	bf00      	nop
 8011120:	37b0      	adds	r7, #176	; 0xb0
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	40013800 	.word	0x40013800
 801112c:	40021000 	.word	0x40021000
 8011130:	48000400 	.word	0x48000400

08011134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011134:	b480      	push	{r7}
 8011136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8011138:	e7fe      	b.n	8011138 <NMI_Handler+0x4>

0801113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801113a:	b480      	push	{r7}
 801113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801113e:	e7fe      	b.n	801113e <HardFault_Handler+0x4>

08011140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011140:	b480      	push	{r7}
 8011142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011144:	e7fe      	b.n	8011144 <MemManage_Handler+0x4>

08011146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011146:	b480      	push	{r7}
 8011148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801114a:	e7fe      	b.n	801114a <BusFault_Handler+0x4>

0801114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801114c:	b480      	push	{r7}
 801114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011150:	e7fe      	b.n	8011150 <UsageFault_Handler+0x4>

08011152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011152:	b480      	push	{r7}
 8011154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011156:	bf00      	nop
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr

08011160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011160:	b480      	push	{r7}
 8011162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011164:	bf00      	nop
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr

0801116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801116e:	b480      	push	{r7}
 8011170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011172:	bf00      	nop
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr

0801117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011180:	f000 fa70 	bl	8011664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011184:	bf00      	nop
 8011186:	bd80      	pop	{r7, pc}

08011188 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 801118c:	2020      	movs	r0, #32
 801118e:	f001 fed3 	bl	8012f38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8011192:	4806      	ldr	r0, [pc, #24]	; (80111ac <EXTI9_5_IRQHandler+0x24>)
 8011194:	f001 fbd2 	bl	801293c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8011198:	2080      	movs	r0, #128	; 0x80
 801119a:	f001 fecd 	bl	8012f38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 801119e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80111a2:	f001 fec9 	bl	8012f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80111a6:	bf00      	nop
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	20000480 	.word	0x20000480

080111b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80111b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80111b8:	f001 febe 	bl	8012f38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80111bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80111c0:	f001 feba 	bl	8012f38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80111c4:	4806      	ldr	r0, [pc, #24]	; (80111e0 <EXTI15_10_IRQHandler+0x30>)
 80111c6:	f001 fbb9 	bl	801293c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80111ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80111ce:	f001 feb3 	bl	8012f38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80111d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80111d6:	f001 feaf 	bl	8012f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80111da:	bf00      	nop
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	20000004 	.word	0x20000004

080111e4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80111e8:	4802      	ldr	r0, [pc, #8]	; (80111f4 <SPI3_IRQHandler+0x10>)
 80111ea:	f003 fc95 	bl	8014b18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80111ee:	bf00      	nop
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	20000570 	.word	0x20000570

080111f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b086      	sub	sp, #24
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	60f8      	str	r0, [r7, #12]
 8011200:	60b9      	str	r1, [r7, #8]
 8011202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011204:	2300      	movs	r3, #0
 8011206:	617b      	str	r3, [r7, #20]
 8011208:	e00a      	b.n	8011220 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801120a:	f3af 8000 	nop.w
 801120e:	4601      	mov	r1, r0
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	1c5a      	adds	r2, r3, #1
 8011214:	60ba      	str	r2, [r7, #8]
 8011216:	b2ca      	uxtb	r2, r1
 8011218:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	3301      	adds	r3, #1
 801121e:	617b      	str	r3, [r7, #20]
 8011220:	697a      	ldr	r2, [r7, #20]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	429a      	cmp	r2, r3
 8011226:	dbf0      	blt.n	801120a <_read+0x12>
	}

return len;
 8011228:	687b      	ldr	r3, [r7, #4]
}
 801122a:	4618      	mov	r0, r3
 801122c:	3718      	adds	r7, #24
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}

08011232 <_close>:
	}
	return len;
}

int _close(int file)
{
 8011232:	b480      	push	{r7}
 8011234:	b083      	sub	sp, #12
 8011236:	af00      	add	r7, sp, #0
 8011238:	6078      	str	r0, [r7, #4]
	return -1;
 801123a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801123e:	4618      	mov	r0, r3
 8011240:	370c      	adds	r7, #12
 8011242:	46bd      	mov	sp, r7
 8011244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011248:	4770      	bx	lr

0801124a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801124a:	b480      	push	{r7}
 801124c:	b083      	sub	sp, #12
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
 8011252:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801125a:	605a      	str	r2, [r3, #4]
	return 0;
 801125c:	2300      	movs	r3, #0
}
 801125e:	4618      	mov	r0, r3
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr

0801126a <_isatty>:

int _isatty(int file)
{
 801126a:	b480      	push	{r7}
 801126c:	b083      	sub	sp, #12
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
	return 1;
 8011272:	2301      	movs	r3, #1
}
 8011274:	4618      	mov	r0, r3
 8011276:	370c      	adds	r7, #12
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	60f8      	str	r0, [r7, #12]
 8011288:	60b9      	str	r1, [r7, #8]
 801128a:	607a      	str	r2, [r7, #4]
	return 0;
 801128c:	2300      	movs	r3, #0
}
 801128e:	4618      	mov	r0, r3
 8011290:	3714      	adds	r7, #20
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
	...

0801129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b086      	sub	sp, #24
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80112a4:	4a14      	ldr	r2, [pc, #80]	; (80112f8 <_sbrk+0x5c>)
 80112a6:	4b15      	ldr	r3, [pc, #84]	; (80112fc <_sbrk+0x60>)
 80112a8:	1ad3      	subs	r3, r2, r3
 80112aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80112b0:	4b13      	ldr	r3, [pc, #76]	; (8011300 <_sbrk+0x64>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d102      	bne.n	80112be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80112b8:	4b11      	ldr	r3, [pc, #68]	; (8011300 <_sbrk+0x64>)
 80112ba:	4a12      	ldr	r2, [pc, #72]	; (8011304 <_sbrk+0x68>)
 80112bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80112be:	4b10      	ldr	r3, [pc, #64]	; (8011300 <_sbrk+0x64>)
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	4413      	add	r3, r2
 80112c6:	693a      	ldr	r2, [r7, #16]
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d207      	bcs.n	80112dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80112cc:	f005 f97c 	bl	80165c8 <__errno>
 80112d0:	4603      	mov	r3, r0
 80112d2:	220c      	movs	r2, #12
 80112d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80112d6:	f04f 33ff 	mov.w	r3, #4294967295
 80112da:	e009      	b.n	80112f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80112dc:	4b08      	ldr	r3, [pc, #32]	; (8011300 <_sbrk+0x64>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80112e2:	4b07      	ldr	r3, [pc, #28]	; (8011300 <_sbrk+0x64>)
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4413      	add	r3, r2
 80112ea:	4a05      	ldr	r2, [pc, #20]	; (8011300 <_sbrk+0x64>)
 80112ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80112ee:	68fb      	ldr	r3, [r7, #12]
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3718      	adds	r7, #24
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	20018000 	.word	0x20018000
 80112fc:	00000400 	.word	0x00000400
 8011300:	20000194 	.word	0x20000194
 8011304:	200005f8 	.word	0x200005f8

08011308 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8011308:	b480      	push	{r7}
 801130a:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 801130c:	4b16      	ldr	r3, [pc, #88]	; (8011368 <SystemInit+0x60>)
 801130e:	4a17      	ldr	r2, [pc, #92]	; (801136c <SystemInit+0x64>)
 8011310:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8011312:	4b15      	ldr	r3, [pc, #84]	; (8011368 <SystemInit+0x60>)
 8011314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011318:	4a13      	ldr	r2, [pc, #76]	; (8011368 <SystemInit+0x60>)
 801131a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801131e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8011322:	4b13      	ldr	r3, [pc, #76]	; (8011370 <SystemInit+0x68>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	4a12      	ldr	r2, [pc, #72]	; (8011370 <SystemInit+0x68>)
 8011328:	f043 0301 	orr.w	r3, r3, #1
 801132c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801132e:	4b10      	ldr	r3, [pc, #64]	; (8011370 <SystemInit+0x68>)
 8011330:	2200      	movs	r2, #0
 8011332:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8011334:	4b0e      	ldr	r3, [pc, #56]	; (8011370 <SystemInit+0x68>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	4a0d      	ldr	r2, [pc, #52]	; (8011370 <SystemInit+0x68>)
 801133a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 801133e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8011342:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8011344:	4b0a      	ldr	r3, [pc, #40]	; (8011370 <SystemInit+0x68>)
 8011346:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801134a:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801134c:	4b08      	ldr	r3, [pc, #32]	; (8011370 <SystemInit+0x68>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	4a07      	ldr	r2, [pc, #28]	; (8011370 <SystemInit+0x68>)
 8011352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011356:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8011358:	4b05      	ldr	r3, [pc, #20]	; (8011370 <SystemInit+0x68>)
 801135a:	2200      	movs	r2, #0
 801135c:	619a      	str	r2, [r3, #24]
}
 801135e:	bf00      	nop
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr
 8011368:	e000ed00 	.word	0xe000ed00
 801136c:	08010000 	.word	0x08010000
 8011370:	40021000 	.word	0x40021000

08011374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8011374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80113ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8011378:	f7ff ffc6 	bl	8011308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801137c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801137e:	e003      	b.n	8011388 <LoopCopyDataInit>

08011380 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8011380:	4b0b      	ldr	r3, [pc, #44]	; (80113b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8011382:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8011384:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8011386:	3104      	adds	r1, #4

08011388 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8011388:	480a      	ldr	r0, [pc, #40]	; (80113b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 801138a:	4b0b      	ldr	r3, [pc, #44]	; (80113b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 801138c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801138e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8011390:	d3f6      	bcc.n	8011380 <CopyDataInit>
	ldr	r2, =_sbss
 8011392:	4a0a      	ldr	r2, [pc, #40]	; (80113bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8011394:	e002      	b.n	801139c <LoopFillZerobss>

08011396 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8011396:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8011398:	f842 3b04 	str.w	r3, [r2], #4

0801139c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801139c:	4b08      	ldr	r3, [pc, #32]	; (80113c0 <LoopForever+0x16>)
	cmp	r2, r3
 801139e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80113a0:	d3f9      	bcc.n	8011396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80113a2:	f005 facf 	bl	8016944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80113a6:	f7ff faab 	bl	8010900 <main>

080113aa <LoopForever>:

LoopForever:
    b LoopForever
 80113aa:	e7fe      	b.n	80113aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80113ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80113b0:	080170f4 	.word	0x080170f4
	ldr	r0, =_sdata
 80113b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80113b8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80113bc:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80113c0:	200005f8 	.word	0x200005f8

080113c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80113c4:	e7fe      	b.n	80113c4 <ADC1_2_IRQHandler>
	...

080113c8 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80113ce:	2300      	movs	r3, #0
 80113d0:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 80113d2:	4b12      	ldr	r3, [pc, #72]	; (801141c <BSP_SPI3_Init+0x54>)
 80113d4:	4a12      	ldr	r2, [pc, #72]	; (8011420 <BSP_SPI3_Init+0x58>)
 80113d6:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80113d8:	4b12      	ldr	r3, [pc, #72]	; (8011424 <BSP_SPI3_Init+0x5c>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	1c5a      	adds	r2, r3, #1
 80113de:	4911      	ldr	r1, [pc, #68]	; (8011424 <BSP_SPI3_Init+0x5c>)
 80113e0:	600a      	str	r2, [r1, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d114      	bne.n	8011410 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80113e6:	480d      	ldr	r0, [pc, #52]	; (801141c <BSP_SPI3_Init+0x54>)
 80113e8:	f003 fca0 	bl	8014d2c <HAL_SPI_GetState>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d10e      	bne.n	8011410 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 80113f2:	480a      	ldr	r0, [pc, #40]	; (801141c <BSP_SPI3_Init+0x54>)
 80113f4:	f000 f882 	bl	80114fc <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d108      	bne.n	8011410 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80113fe:	4807      	ldr	r0, [pc, #28]	; (801141c <BSP_SPI3_Init+0x54>)
 8011400:	f000 f83a 	bl	8011478 <MX_SPI3_Init>
 8011404:	4603      	mov	r3, r0
 8011406:	2b00      	cmp	r3, #0
 8011408:	d002      	beq.n	8011410 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 801140a:	f06f 0307 	mvn.w	r3, #7
 801140e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8011410:	687b      	ldr	r3, [r7, #4]
}
 8011412:	4618      	mov	r0, r3
 8011414:	3708      	adds	r7, #8
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	20000570 	.word	0x20000570
 8011420:	40003c00 	.word	0x40003c00
 8011424:	20000198 	.word	0x20000198

08011428 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b088      	sub	sp, #32
 801142c:	af02      	add	r7, sp, #8
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	60b9      	str	r1, [r7, #8]
 8011432:	4613      	mov	r3, r2
 8011434:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8011436:	2300      	movs	r3, #0
 8011438:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 801143a:	88fb      	ldrh	r3, [r7, #6]
 801143c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011440:	9200      	str	r2, [sp, #0]
 8011442:	68ba      	ldr	r2, [r7, #8]
 8011444:	68f9      	ldr	r1, [r7, #12]
 8011446:	4807      	ldr	r0, [pc, #28]	; (8011464 <BSP_SPI3_SendRecv+0x3c>)
 8011448:	f003 f953 	bl	80146f2 <HAL_SPI_TransmitReceive>
 801144c:	4603      	mov	r3, r0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d002      	beq.n	8011458 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8011452:	f06f 0305 	mvn.w	r3, #5
 8011456:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8011458:	697b      	ldr	r3, [r7, #20]
}
 801145a:	4618      	mov	r0, r3
 801145c:	3718      	adds	r7, #24
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	20000570 	.word	0x20000570

08011468 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8011468:	b580      	push	{r7, lr}
 801146a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801146c:	f000 f90e 	bl	801168c <HAL_GetTick>
 8011470:	4603      	mov	r3, r0
}
 8011472:	4618      	mov	r0, r3
 8011474:	bd80      	pop	{r7, pc}
	...

08011478 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011480:	2300      	movs	r3, #0
 8011482:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	4a1c      	ldr	r2, [pc, #112]	; (80114f8 <MX_SPI3_Init+0x80>)
 8011488:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011490:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2200      	movs	r2, #0
 8011496:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801149e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2200      	movs	r2, #0
 80114a4:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2200      	movs	r2, #0
 80114aa:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80114b2:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2230      	movs	r2, #48	; 0x30
 80114b8:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2200      	movs	r2, #0
 80114be:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2200      	movs	r2, #0
 80114ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2207      	movs	r2, #7
 80114d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2200      	movs	r2, #0
 80114d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2208      	movs	r2, #8
 80114dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f003 f85a 	bl	8014598 <HAL_SPI_Init>
 80114e4:	4603      	mov	r3, r0
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d001      	beq.n	80114ee <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 80114ea:	2301      	movs	r3, #1
 80114ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80114ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3710      	adds	r7, #16
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	40003c00 	.word	0x40003c00

080114fc <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b08a      	sub	sp, #40	; 0x28
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8011504:	4b2b      	ldr	r3, [pc, #172]	; (80115b4 <SPI3_MspInit+0xb8>)
 8011506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011508:	4a2a      	ldr	r2, [pc, #168]	; (80115b4 <SPI3_MspInit+0xb8>)
 801150a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801150e:	6593      	str	r3, [r2, #88]	; 0x58
 8011510:	4b28      	ldr	r3, [pc, #160]	; (80115b4 <SPI3_MspInit+0xb8>)
 8011512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011518:	613b      	str	r3, [r7, #16]
 801151a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801151c:	4b25      	ldr	r3, [pc, #148]	; (80115b4 <SPI3_MspInit+0xb8>)
 801151e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011520:	4a24      	ldr	r2, [pc, #144]	; (80115b4 <SPI3_MspInit+0xb8>)
 8011522:	f043 0304 	orr.w	r3, r3, #4
 8011526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011528:	4b22      	ldr	r3, [pc, #136]	; (80115b4 <SPI3_MspInit+0xb8>)
 801152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801152c:	f003 0304 	and.w	r3, r3, #4
 8011530:	60fb      	str	r3, [r7, #12]
 8011532:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8011534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801153a:	2302      	movs	r3, #2
 801153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801153e:	2300      	movs	r3, #0
 8011540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011542:	2303      	movs	r3, #3
 8011544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8011546:	2306      	movs	r3, #6
 8011548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 801154a:	f107 0314 	add.w	r3, r7, #20
 801154e:	4619      	mov	r1, r3
 8011550:	4819      	ldr	r0, [pc, #100]	; (80115b8 <SPI3_MspInit+0xbc>)
 8011552:	f001 fa23 	bl	801299c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8011556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801155c:	2302      	movs	r3, #2
 801155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011560:	2300      	movs	r3, #0
 8011562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011564:	2303      	movs	r3, #3
 8011566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8011568:	2306      	movs	r3, #6
 801156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 801156c:	f107 0314 	add.w	r3, r7, #20
 8011570:	4619      	mov	r1, r3
 8011572:	4811      	ldr	r0, [pc, #68]	; (80115b8 <SPI3_MspInit+0xbc>)
 8011574:	f001 fa12 	bl	801299c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8011578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801157e:	2302      	movs	r3, #2
 8011580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011582:	2300      	movs	r3, #0
 8011584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011586:	2303      	movs	r3, #3
 8011588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 801158a:	2306      	movs	r3, #6
 801158c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 801158e:	f107 0314 	add.w	r3, r7, #20
 8011592:	4619      	mov	r1, r3
 8011594:	4808      	ldr	r0, [pc, #32]	; (80115b8 <SPI3_MspInit+0xbc>)
 8011596:	f001 fa01 	bl	801299c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 801159a:	2200      	movs	r2, #0
 801159c:	2100      	movs	r1, #0
 801159e:	2033      	movs	r0, #51	; 0x33
 80115a0:	f001 f927 	bl	80127f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80115a4:	2033      	movs	r0, #51	; 0x33
 80115a6:	f001 f940 	bl	801282a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 80115aa:	bf00      	nop
 80115ac:	3728      	adds	r7, #40	; 0x28
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	40021000 	.word	0x40021000
 80115b8:	48000800 	.word	0x48000800

080115bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80115c2:	2300      	movs	r3, #0
 80115c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80115c6:	2003      	movs	r0, #3
 80115c8:	f001 f908 	bl	80127dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80115cc:	2000      	movs	r0, #0
 80115ce:	f000 f80d 	bl	80115ec <HAL_InitTick>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d002      	beq.n	80115de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80115d8:	2301      	movs	r3, #1
 80115da:	71fb      	strb	r3, [r7, #7]
 80115dc:	e001      	b.n	80115e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80115de:	f7ff fc85 	bl	8010eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80115e2:	79fb      	ldrb	r3, [r7, #7]
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3708      	adds	r7, #8
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}

080115ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80115f4:	2300      	movs	r3, #0
 80115f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80115f8:	4b17      	ldr	r3, [pc, #92]	; (8011658 <HAL_InitTick+0x6c>)
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d023      	beq.n	8011648 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8011600:	4b16      	ldr	r3, [pc, #88]	; (801165c <HAL_InitTick+0x70>)
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	4b14      	ldr	r3, [pc, #80]	; (8011658 <HAL_InitTick+0x6c>)
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	4619      	mov	r1, r3
 801160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011612:	fbb2 f3f3 	udiv	r3, r2, r3
 8011616:	4618      	mov	r0, r3
 8011618:	f001 f915 	bl	8012846 <HAL_SYSTICK_Config>
 801161c:	4603      	mov	r3, r0
 801161e:	2b00      	cmp	r3, #0
 8011620:	d10f      	bne.n	8011642 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	2b0f      	cmp	r3, #15
 8011626:	d809      	bhi.n	801163c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011628:	2200      	movs	r2, #0
 801162a:	6879      	ldr	r1, [r7, #4]
 801162c:	f04f 30ff 	mov.w	r0, #4294967295
 8011630:	f001 f8df 	bl	80127f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011634:	4a0a      	ldr	r2, [pc, #40]	; (8011660 <HAL_InitTick+0x74>)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6013      	str	r3, [r2, #0]
 801163a:	e007      	b.n	801164c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 801163c:	2301      	movs	r3, #1
 801163e:	73fb      	strb	r3, [r7, #15]
 8011640:	e004      	b.n	801164c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8011642:	2301      	movs	r3, #1
 8011644:	73fb      	strb	r3, [r7, #15]
 8011646:	e001      	b.n	801164c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8011648:	2301      	movs	r3, #1
 801164a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801164c:	7bfb      	ldrb	r3, [r7, #15]
}
 801164e:	4618      	mov	r0, r3
 8011650:	3710      	adds	r7, #16
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}
 8011656:	bf00      	nop
 8011658:	20000010 	.word	0x20000010
 801165c:	20000000 	.word	0x20000000
 8011660:	2000000c 	.word	0x2000000c

08011664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011664:	b480      	push	{r7}
 8011666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8011668:	4b06      	ldr	r3, [pc, #24]	; (8011684 <HAL_IncTick+0x20>)
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	461a      	mov	r2, r3
 801166e:	4b06      	ldr	r3, [pc, #24]	; (8011688 <HAL_IncTick+0x24>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	4413      	add	r3, r2
 8011674:	4a04      	ldr	r2, [pc, #16]	; (8011688 <HAL_IncTick+0x24>)
 8011676:	6013      	str	r3, [r2, #0]
}
 8011678:	bf00      	nop
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr
 8011682:	bf00      	nop
 8011684:	20000010 	.word	0x20000010
 8011688:	200005d4 	.word	0x200005d4

0801168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801168c:	b480      	push	{r7}
 801168e:	af00      	add	r7, sp, #0
  return uwTick;
 8011690:	4b03      	ldr	r3, [pc, #12]	; (80116a0 <HAL_GetTick+0x14>)
 8011692:	681b      	ldr	r3, [r3, #0]
}
 8011694:	4618      	mov	r0, r3
 8011696:	46bd      	mov	sp, r7
 8011698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169c:	4770      	bx	lr
 801169e:	bf00      	nop
 80116a0:	200005d4 	.word	0x200005d4

080116a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b084      	sub	sp, #16
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80116ac:	f7ff ffee 	bl	801168c <HAL_GetTick>
 80116b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116bc:	d005      	beq.n	80116ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80116be:	4b0a      	ldr	r3, [pc, #40]	; (80116e8 <HAL_Delay+0x44>)
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	461a      	mov	r2, r3
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	4413      	add	r3, r2
 80116c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80116ca:	bf00      	nop
 80116cc:	f7ff ffde 	bl	801168c <HAL_GetTick>
 80116d0:	4602      	mov	r2, r0
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	68fa      	ldr	r2, [r7, #12]
 80116d8:	429a      	cmp	r2, r3
 80116da:	d8f7      	bhi.n	80116cc <HAL_Delay+0x28>
  {
  }
}
 80116dc:	bf00      	nop
 80116de:	bf00      	nop
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	20000010 	.word	0x20000010

080116ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80116ec:	b480      	push	{r7}
 80116ee:	b083      	sub	sp, #12
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	689b      	ldr	r3, [r3, #8]
 80116fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	431a      	orrs	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	609a      	str	r2, [r3, #8]
}
 8011706:	bf00      	nop
 8011708:	370c      	adds	r7, #12
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr

08011712 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8011712:	b480      	push	{r7}
 8011714:	b083      	sub	sp, #12
 8011716:	af00      	add	r7, sp, #0
 8011718:	6078      	str	r0, [r7, #4]
 801171a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	431a      	orrs	r2, r3
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	609a      	str	r2, [r3, #8]
}
 801172c:	bf00      	nop
 801172e:	370c      	adds	r7, #12
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8011748:	4618      	mov	r0, r3
 801174a:	370c      	adds	r7, #12
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8011754:	b480      	push	{r7}
 8011756:	b087      	sub	sp, #28
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	607a      	str	r2, [r7, #4]
 8011760:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	3360      	adds	r3, #96	; 0x60
 8011766:	461a      	mov	r2, r3
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	4413      	add	r3, r2
 801176e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	681a      	ldr	r2, [r3, #0]
 8011774:	4b08      	ldr	r3, [pc, #32]	; (8011798 <LL_ADC_SetOffset+0x44>)
 8011776:	4013      	ands	r3, r2
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 801177e:	683a      	ldr	r2, [r7, #0]
 8011780:	430a      	orrs	r2, r1
 8011782:	4313      	orrs	r3, r2
 8011784:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 801178c:	bf00      	nop
 801178e:	371c      	adds	r7, #28
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr
 8011798:	03fff000 	.word	0x03fff000

0801179c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 801179c:	b480      	push	{r7}
 801179e:	b085      	sub	sp, #20
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	3360      	adds	r3, #96	; 0x60
 80117aa:	461a      	mov	r2, r3
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	009b      	lsls	r3, r3, #2
 80117b0:	4413      	add	r3, r2
 80117b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3714      	adds	r7, #20
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr

080117c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b087      	sub	sp, #28
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	60f8      	str	r0, [r7, #12]
 80117d0:	60b9      	str	r1, [r7, #8]
 80117d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	3360      	adds	r3, #96	; 0x60
 80117d8:	461a      	mov	r2, r3
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	4413      	add	r3, r2
 80117e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	431a      	orrs	r2, r3
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80117f2:	bf00      	nop
 80117f4:	371c      	adds	r7, #28
 80117f6:	46bd      	mov	sp, r7
 80117f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fc:	4770      	bx	lr

080117fe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80117fe:	b480      	push	{r7}
 8011800:	b087      	sub	sp, #28
 8011802:	af00      	add	r7, sp, #0
 8011804:	60f8      	str	r0, [r7, #12]
 8011806:	60b9      	str	r1, [r7, #8]
 8011808:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	3330      	adds	r3, #48	; 0x30
 801180e:	461a      	mov	r2, r3
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	0a1b      	lsrs	r3, r3, #8
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	f003 030c 	and.w	r3, r3, #12
 801181a:	4413      	add	r3, r2
 801181c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	f003 031f 	and.w	r3, r3, #31
 8011828:	211f      	movs	r1, #31
 801182a:	fa01 f303 	lsl.w	r3, r1, r3
 801182e:	43db      	mvns	r3, r3
 8011830:	401a      	ands	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	0e9b      	lsrs	r3, r3, #26
 8011836:	f003 011f 	and.w	r1, r3, #31
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	f003 031f 	and.w	r3, r3, #31
 8011840:	fa01 f303 	lsl.w	r3, r1, r3
 8011844:	431a      	orrs	r2, r3
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 801184a:	bf00      	nop
 801184c:	371c      	adds	r7, #28
 801184e:	46bd      	mov	sp, r7
 8011850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011854:	4770      	bx	lr

08011856 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8011856:	b480      	push	{r7}
 8011858:	b087      	sub	sp, #28
 801185a:	af00      	add	r7, sp, #0
 801185c:	60f8      	str	r0, [r7, #12]
 801185e:	60b9      	str	r1, [r7, #8]
 8011860:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	3314      	adds	r3, #20
 8011866:	461a      	mov	r2, r3
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	0e5b      	lsrs	r3, r3, #25
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	f003 0304 	and.w	r3, r3, #4
 8011872:	4413      	add	r3, r2
 8011874:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	681a      	ldr	r2, [r3, #0]
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	0d1b      	lsrs	r3, r3, #20
 801187e:	f003 031f 	and.w	r3, r3, #31
 8011882:	2107      	movs	r1, #7
 8011884:	fa01 f303 	lsl.w	r3, r1, r3
 8011888:	43db      	mvns	r3, r3
 801188a:	401a      	ands	r2, r3
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	0d1b      	lsrs	r3, r3, #20
 8011890:	f003 031f 	and.w	r3, r3, #31
 8011894:	6879      	ldr	r1, [r7, #4]
 8011896:	fa01 f303 	lsl.w	r3, r1, r3
 801189a:	431a      	orrs	r2, r3
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80118a0:	bf00      	nop
 80118a2:	371c      	adds	r7, #28
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr

080118ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b085      	sub	sp, #20
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80118c4:	43db      	mvns	r3, r3
 80118c6:	401a      	ands	r2, r3
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f003 0318 	and.w	r3, r3, #24
 80118ce:	4908      	ldr	r1, [pc, #32]	; (80118f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80118d0:	40d9      	lsrs	r1, r3
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	400b      	ands	r3, r1
 80118d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80118da:	431a      	orrs	r2, r3
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80118e2:	bf00      	nop
 80118e4:	3714      	adds	r7, #20
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr
 80118ee:	bf00      	nop
 80118f0:	0007ffff 	.word	0x0007ffff

080118f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	689b      	ldr	r3, [r3, #8]
 8011900:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8011904:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	6093      	str	r3, [r2, #8]
}
 801190c:	bf00      	nop
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr

08011918 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	689b      	ldr	r3, [r3, #8]
 8011924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801192c:	d101      	bne.n	8011932 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801192e:	2301      	movs	r3, #1
 8011930:	e000      	b.n	8011934 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8011932:	2300      	movs	r3, #0
}
 8011934:	4618      	mov	r0, r3
 8011936:	370c      	adds	r7, #12
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr

08011940 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	689b      	ldr	r3, [r3, #8]
 801194c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8011950:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011954:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 801195c:	bf00      	nop
 801195e:	370c      	adds	r7, #12
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr

08011968 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	689b      	ldr	r3, [r3, #8]
 8011974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801197c:	d101      	bne.n	8011982 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801197e:	2301      	movs	r3, #1
 8011980:	e000      	b.n	8011984 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8011982:	2300      	movs	r3, #0
}
 8011984:	4618      	mov	r0, r3
 8011986:	370c      	adds	r7, #12
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8011990:	b480      	push	{r7}
 8011992:	b083      	sub	sp, #12
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	689b      	ldr	r3, [r3, #8]
 801199c:	f003 0301 	and.w	r3, r3, #1
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d101      	bne.n	80119a8 <LL_ADC_IsEnabled+0x18>
 80119a4:	2301      	movs	r3, #1
 80119a6:	e000      	b.n	80119aa <LL_ADC_IsEnabled+0x1a>
 80119a8:	2300      	movs	r3, #0
}
 80119aa:	4618      	mov	r0, r3
 80119ac:	370c      	adds	r7, #12
 80119ae:	46bd      	mov	sp, r7
 80119b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b4:	4770      	bx	lr

080119b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80119b6:	b480      	push	{r7}
 80119b8:	b083      	sub	sp, #12
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	689b      	ldr	r3, [r3, #8]
 80119c2:	f003 0304 	and.w	r3, r3, #4
 80119c6:	2b04      	cmp	r3, #4
 80119c8:	d101      	bne.n	80119ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80119ca:	2301      	movs	r3, #1
 80119cc:	e000      	b.n	80119d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80119ce:	2300      	movs	r3, #0
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	370c      	adds	r7, #12
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr

080119dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80119dc:	b480      	push	{r7}
 80119de:	b083      	sub	sp, #12
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	689b      	ldr	r3, [r3, #8]
 80119e8:	f003 0308 	and.w	r3, r3, #8
 80119ec:	2b08      	cmp	r3, #8
 80119ee:	d101      	bne.n	80119f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80119f0:	2301      	movs	r3, #1
 80119f2:	e000      	b.n	80119f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80119f4:	2300      	movs	r3, #0
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	370c      	adds	r7, #12
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr
	...

08011a04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8011a04:	b590      	push	{r4, r7, lr}
 8011a06:	b089      	sub	sp, #36	; 0x24
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8011a10:	2300      	movs	r3, #0
 8011a12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d101      	bne.n	8011a1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	e136      	b.n	8011c8c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	691b      	ldr	r3, [r3, #16]
 8011a22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d109      	bne.n	8011a40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f7ff fa81 	bl	8010f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2200      	movs	r2, #0
 8011a36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7ff ff67 	bl	8011918 <LL_ADC_IsDeepPowerDownEnabled>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d004      	beq.n	8011a5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7ff ff4d 	bl	80118f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7ff ff82 	bl	8011968 <LL_ADC_IsInternalRegulatorEnabled>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d115      	bne.n	8011a96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7ff ff66 	bl	8011940 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8011a74:	4b87      	ldr	r3, [pc, #540]	; (8011c94 <HAL_ADC_Init+0x290>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	099b      	lsrs	r3, r3, #6
 8011a7a:	4a87      	ldr	r2, [pc, #540]	; (8011c98 <HAL_ADC_Init+0x294>)
 8011a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8011a80:	099b      	lsrs	r3, r3, #6
 8011a82:	3301      	adds	r3, #1
 8011a84:	005b      	lsls	r3, r3, #1
 8011a86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8011a88:	e002      	b.n	8011a90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d1f9      	bne.n	8011a8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7ff ff64 	bl	8011968 <LL_ADC_IsInternalRegulatorEnabled>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d10d      	bne.n	8011ac2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011aaa:	f043 0210 	orr.w	r2, r3, #16
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ab6:	f043 0201 	orr.w	r2, r3, #1
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8011abe:	2301      	movs	r3, #1
 8011ac0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7ff ff75 	bl	80119b6 <LL_ADC_REG_IsConversionOngoing>
 8011acc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ad2:	f003 0310 	and.w	r3, r3, #16
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	f040 80cf 	bne.w	8011c7a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	f040 80cb 	bne.w	8011c7a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ae8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8011aec:	f043 0202 	orr.w	r2, r3, #2
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7ff ff49 	bl	8011990 <LL_ADC_IsEnabled>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d115      	bne.n	8011b30 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8011b04:	4865      	ldr	r0, [pc, #404]	; (8011c9c <HAL_ADC_Init+0x298>)
 8011b06:	f7ff ff43 	bl	8011990 <LL_ADC_IsEnabled>
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	4864      	ldr	r0, [pc, #400]	; (8011ca0 <HAL_ADC_Init+0x29c>)
 8011b0e:	f7ff ff3f 	bl	8011990 <LL_ADC_IsEnabled>
 8011b12:	4603      	mov	r3, r0
 8011b14:	431c      	orrs	r4, r3
 8011b16:	4863      	ldr	r0, [pc, #396]	; (8011ca4 <HAL_ADC_Init+0x2a0>)
 8011b18:	f7ff ff3a 	bl	8011990 <LL_ADC_IsEnabled>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	4323      	orrs	r3, r4
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d105      	bne.n	8011b30 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	485f      	ldr	r0, [pc, #380]	; (8011ca8 <HAL_ADC_Init+0x2a4>)
 8011b2c:	f7ff fdde 	bl	80116ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	7e5b      	ldrb	r3, [r3, #25]
 8011b34:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8011b3a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8011b40:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8011b46:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011b4e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8011b50:	4313      	orrs	r3, r2
 8011b52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	d106      	bne.n	8011b6c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b62:	3b01      	subs	r3, #1
 8011b64:	045b      	lsls	r3, r3, #17
 8011b66:	69ba      	ldr	r2, [r7, #24]
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d009      	beq.n	8011b88 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b78:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b80:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8011b82:	69ba      	ldr	r2, [r7, #24]
 8011b84:	4313      	orrs	r3, r2
 8011b86:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	68da      	ldr	r2, [r3, #12]
 8011b8e:	4b47      	ldr	r3, [pc, #284]	; (8011cac <HAL_ADC_Init+0x2a8>)
 8011b90:	4013      	ands	r3, r2
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	6812      	ldr	r2, [r2, #0]
 8011b96:	69b9      	ldr	r1, [r7, #24]
 8011b98:	430b      	orrs	r3, r1
 8011b9a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7ff ff08 	bl	80119b6 <LL_ADC_REG_IsConversionOngoing>
 8011ba6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7ff ff15 	bl	80119dc <LL_ADC_INJ_IsConversionOngoing>
 8011bb2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d13d      	bne.n	8011c36 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d13a      	bne.n	8011c36 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8011bc4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011bcc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011bdc:	f023 0302 	bic.w	r3, r3, #2
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	6812      	ldr	r2, [r2, #0]
 8011be4:	69b9      	ldr	r1, [r7, #24]
 8011be6:	430b      	orrs	r3, r1
 8011be8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011bf0:	2b01      	cmp	r3, #1
 8011bf2:	d118      	bne.n	8011c26 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	691b      	ldr	r3, [r3, #16]
 8011bfa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011bfe:	f023 0304 	bic.w	r3, r3, #4
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8011c06:	687a      	ldr	r2, [r7, #4]
 8011c08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011c0a:	4311      	orrs	r1, r2
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8011c10:	4311      	orrs	r1, r2
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011c16:	430a      	orrs	r2, r1
 8011c18:	431a      	orrs	r2, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	f042 0201 	orr.w	r2, r2, #1
 8011c22:	611a      	str	r2, [r3, #16]
 8011c24:	e007      	b.n	8011c36 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	691a      	ldr	r2, [r3, #16]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f022 0201 	bic.w	r2, r2, #1
 8011c34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	691b      	ldr	r3, [r3, #16]
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	d10c      	bne.n	8011c58 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c44:	f023 010f 	bic.w	r1, r3, #15
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	69db      	ldr	r3, [r3, #28]
 8011c4c:	1e5a      	subs	r2, r3, #1
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	430a      	orrs	r2, r1
 8011c54:	631a      	str	r2, [r3, #48]	; 0x30
 8011c56:	e007      	b.n	8011c68 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	f022 020f 	bic.w	r2, r2, #15
 8011c66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c6c:	f023 0303 	bic.w	r3, r3, #3
 8011c70:	f043 0201 	orr.w	r2, r3, #1
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	655a      	str	r2, [r3, #84]	; 0x54
 8011c78:	e007      	b.n	8011c8a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c7e:	f043 0210 	orr.w	r2, r3, #16
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8011c86:	2301      	movs	r3, #1
 8011c88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8011c8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3724      	adds	r7, #36	; 0x24
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd90      	pop	{r4, r7, pc}
 8011c94:	20000000 	.word	0x20000000
 8011c98:	053e2d63 	.word	0x053e2d63
 8011c9c:	50040000 	.word	0x50040000
 8011ca0:	50040100 	.word	0x50040100
 8011ca4:	50040200 	.word	0x50040200
 8011ca8:	50040300 	.word	0x50040300
 8011cac:	fff0c007 	.word	0xfff0c007

08011cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b0b6      	sub	sp, #216	; 0xd8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d101      	bne.n	8011cd2 <HAL_ADC_ConfigChannel+0x22>
 8011cce:	2302      	movs	r3, #2
 8011cd0:	e3c7      	b.n	8012462 <HAL_ADC_ConfigChannel+0x7b2>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7ff fe69 	bl	80119b6 <LL_ADC_REG_IsConversionOngoing>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	f040 83a8 	bne.w	801243c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	2b05      	cmp	r3, #5
 8011cf2:	d824      	bhi.n	8011d3e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	3b02      	subs	r3, #2
 8011cfa:	2b03      	cmp	r3, #3
 8011cfc:	d81b      	bhi.n	8011d36 <HAL_ADC_ConfigChannel+0x86>
 8011cfe:	a201      	add	r2, pc, #4	; (adr r2, 8011d04 <HAL_ADC_ConfigChannel+0x54>)
 8011d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d04:	08011d15 	.word	0x08011d15
 8011d08:	08011d1d 	.word	0x08011d1d
 8011d0c:	08011d25 	.word	0x08011d25
 8011d10:	08011d2d 	.word	0x08011d2d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	220c      	movs	r2, #12
 8011d18:	605a      	str	r2, [r3, #4]
          break;
 8011d1a:	e011      	b.n	8011d40 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	2212      	movs	r2, #18
 8011d20:	605a      	str	r2, [r3, #4]
          break;
 8011d22:	e00d      	b.n	8011d40 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	2218      	movs	r2, #24
 8011d28:	605a      	str	r2, [r3, #4]
          break;
 8011d2a:	e009      	b.n	8011d40 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d32:	605a      	str	r2, [r3, #4]
          break;
 8011d34:	e004      	b.n	8011d40 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	2206      	movs	r2, #6
 8011d3a:	605a      	str	r2, [r3, #4]
          break;
 8011d3c:	e000      	b.n	8011d40 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8011d3e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6818      	ldr	r0, [r3, #0]
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	6859      	ldr	r1, [r3, #4]
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	f7ff fd56 	bl	80117fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7ff fe2d 	bl	80119b6 <LL_ADC_REG_IsConversionOngoing>
 8011d5c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7ff fe39 	bl	80119dc <LL_ADC_INJ_IsConversionOngoing>
 8011d6a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8011d6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	f040 81a6 	bne.w	80120c4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8011d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	f040 81a1 	bne.w	80120c4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6818      	ldr	r0, [r3, #0]
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	6819      	ldr	r1, [r3, #0]
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	689b      	ldr	r3, [r3, #8]
 8011d8e:	461a      	mov	r2, r3
 8011d90:	f7ff fd61 	bl	8011856 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	695a      	ldr	r2, [r3, #20]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	08db      	lsrs	r3, r3, #3
 8011da0:	f003 0303 	and.w	r3, r3, #3
 8011da4:	005b      	lsls	r3, r3, #1
 8011da6:	fa02 f303 	lsl.w	r3, r2, r3
 8011daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	691b      	ldr	r3, [r3, #16]
 8011db2:	2b04      	cmp	r3, #4
 8011db4:	d00a      	beq.n	8011dcc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6818      	ldr	r0, [r3, #0]
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	6919      	ldr	r1, [r3, #16]
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	681a      	ldr	r2, [r3, #0]
 8011dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011dc6:	f7ff fcc5 	bl	8011754 <LL_ADC_SetOffset>
 8011dca:	e17b      	b.n	80120c4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7ff fce2 	bl	801179c <LL_ADC_GetOffsetChannel>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d10a      	bne.n	8011df8 <HAL_ADC_ConfigChannel+0x148>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	2100      	movs	r1, #0
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7ff fcd7 	bl	801179c <LL_ADC_GetOffsetChannel>
 8011dee:	4603      	mov	r3, r0
 8011df0:	0e9b      	lsrs	r3, r3, #26
 8011df2:	f003 021f 	and.w	r2, r3, #31
 8011df6:	e01e      	b.n	8011e36 <HAL_ADC_ConfigChannel+0x186>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	2100      	movs	r1, #0
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7ff fccc 	bl	801179c <LL_ADC_GetOffsetChannel>
 8011e04:	4603      	mov	r3, r0
 8011e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011e0e:	fa93 f3a3 	rbit	r3, r3
 8011e12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8011e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8011e1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d101      	bne.n	8011e2a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8011e26:	2320      	movs	r3, #32
 8011e28:	e004      	b.n	8011e34 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8011e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011e2e:	fab3 f383 	clz	r3, r3
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d105      	bne.n	8011e4e <HAL_ADC_ConfigChannel+0x19e>
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	0e9b      	lsrs	r3, r3, #26
 8011e48:	f003 031f 	and.w	r3, r3, #31
 8011e4c:	e018      	b.n	8011e80 <HAL_ADC_ConfigChannel+0x1d0>
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011e5a:	fa93 f3a3 	rbit	r3, r3
 8011e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8011e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011e66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8011e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d101      	bne.n	8011e76 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8011e72:	2320      	movs	r3, #32
 8011e74:	e004      	b.n	8011e80 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8011e76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e7a:	fab3 f383 	clz	r3, r3
 8011e7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d106      	bne.n	8011e92 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	2100      	movs	r1, #0
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7ff fc9b 	bl	80117c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2101      	movs	r1, #1
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7ff fc7f 	bl	801179c <LL_ADC_GetOffsetChannel>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d10a      	bne.n	8011ebe <HAL_ADC_ConfigChannel+0x20e>
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	2101      	movs	r1, #1
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7ff fc74 	bl	801179c <LL_ADC_GetOffsetChannel>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	0e9b      	lsrs	r3, r3, #26
 8011eb8:	f003 021f 	and.w	r2, r3, #31
 8011ebc:	e01e      	b.n	8011efc <HAL_ADC_ConfigChannel+0x24c>
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7ff fc69 	bl	801179c <LL_ADC_GetOffsetChannel>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011ed0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011ed4:	fa93 f3a3 	rbit	r3, r3
 8011ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8011edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8011ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d101      	bne.n	8011ef0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8011eec:	2320      	movs	r3, #32
 8011eee:	e004      	b.n	8011efa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8011ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011ef4:	fab3 f383 	clz	r3, r3
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d105      	bne.n	8011f14 <HAL_ADC_ConfigChannel+0x264>
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	0e9b      	lsrs	r3, r3, #26
 8011f0e:	f003 031f 	and.w	r3, r3, #31
 8011f12:	e018      	b.n	8011f46 <HAL_ADC_ConfigChannel+0x296>
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011f20:	fa93 f3a3 	rbit	r3, r3
 8011f24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8011f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8011f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d101      	bne.n	8011f3c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8011f38:	2320      	movs	r3, #32
 8011f3a:	e004      	b.n	8011f46 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8011f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011f40:	fab3 f383 	clz	r3, r3
 8011f44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d106      	bne.n	8011f58 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	2101      	movs	r1, #1
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7ff fc38 	bl	80117c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	2102      	movs	r1, #2
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7ff fc1c 	bl	801179c <LL_ADC_GetOffsetChannel>
 8011f64:	4603      	mov	r3, r0
 8011f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d10a      	bne.n	8011f84 <HAL_ADC_ConfigChannel+0x2d4>
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2102      	movs	r1, #2
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7ff fc11 	bl	801179c <LL_ADC_GetOffsetChannel>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	0e9b      	lsrs	r3, r3, #26
 8011f7e:	f003 021f 	and.w	r2, r3, #31
 8011f82:	e01e      	b.n	8011fc2 <HAL_ADC_ConfigChannel+0x312>
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	2102      	movs	r1, #2
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7ff fc06 	bl	801179c <LL_ADC_GetOffsetChannel>
 8011f90:	4603      	mov	r3, r0
 8011f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f9a:	fa93 f3a3 	rbit	r3, r3
 8011f9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8011fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8011faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d101      	bne.n	8011fb6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8011fb2:	2320      	movs	r3, #32
 8011fb4:	e004      	b.n	8011fc0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8011fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011fba:	fab3 f383 	clz	r3, r3
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d105      	bne.n	8011fda <HAL_ADC_ConfigChannel+0x32a>
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	0e9b      	lsrs	r3, r3, #26
 8011fd4:	f003 031f 	and.w	r3, r3, #31
 8011fd8:	e016      	b.n	8012008 <HAL_ADC_ConfigChannel+0x358>
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011fe6:	fa93 f3a3 	rbit	r3, r3
 8011fea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8011fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8011ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d101      	bne.n	8011ffe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8011ffa:	2320      	movs	r3, #32
 8011ffc:	e004      	b.n	8012008 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8011ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012002:	fab3 f383 	clz	r3, r3
 8012006:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8012008:	429a      	cmp	r2, r3
 801200a:	d106      	bne.n	801201a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2200      	movs	r2, #0
 8012012:	2102      	movs	r1, #2
 8012014:	4618      	mov	r0, r3
 8012016:	f7ff fbd7 	bl	80117c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	2103      	movs	r1, #3
 8012020:	4618      	mov	r0, r3
 8012022:	f7ff fbbb 	bl	801179c <LL_ADC_GetOffsetChannel>
 8012026:	4603      	mov	r3, r0
 8012028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801202c:	2b00      	cmp	r3, #0
 801202e:	d10a      	bne.n	8012046 <HAL_ADC_ConfigChannel+0x396>
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	2103      	movs	r1, #3
 8012036:	4618      	mov	r0, r3
 8012038:	f7ff fbb0 	bl	801179c <LL_ADC_GetOffsetChannel>
 801203c:	4603      	mov	r3, r0
 801203e:	0e9b      	lsrs	r3, r3, #26
 8012040:	f003 021f 	and.w	r2, r3, #31
 8012044:	e017      	b.n	8012076 <HAL_ADC_ConfigChannel+0x3c6>
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	2103      	movs	r1, #3
 801204c:	4618      	mov	r0, r3
 801204e:	f7ff fba5 	bl	801179c <LL_ADC_GetOffsetChannel>
 8012052:	4603      	mov	r3, r0
 8012054:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012058:	fa93 f3a3 	rbit	r3, r3
 801205c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801205e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012060:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8012062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012064:	2b00      	cmp	r3, #0
 8012066:	d101      	bne.n	801206c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8012068:	2320      	movs	r3, #32
 801206a:	e003      	b.n	8012074 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 801206c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801206e:	fab3 f383 	clz	r3, r3
 8012072:	b2db      	uxtb	r3, r3
 8012074:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801207e:	2b00      	cmp	r3, #0
 8012080:	d105      	bne.n	801208e <HAL_ADC_ConfigChannel+0x3de>
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	0e9b      	lsrs	r3, r3, #26
 8012088:	f003 031f 	and.w	r3, r3, #31
 801208c:	e011      	b.n	80120b2 <HAL_ADC_ConfigChannel+0x402>
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012096:	fa93 f3a3 	rbit	r3, r3
 801209a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801209c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801209e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80120a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d101      	bne.n	80120aa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80120a6:	2320      	movs	r3, #32
 80120a8:	e003      	b.n	80120b2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80120aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120ac:	fab3 f383 	clz	r3, r3
 80120b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d106      	bne.n	80120c4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	2200      	movs	r2, #0
 80120bc:	2103      	movs	r1, #3
 80120be:	4618      	mov	r0, r3
 80120c0:	f7ff fb82 	bl	80117c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7ff fc61 	bl	8011990 <LL_ADC_IsEnabled>
 80120ce:	4603      	mov	r3, r0
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	f040 813f 	bne.w	8012354 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6818      	ldr	r0, [r3, #0]
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	6819      	ldr	r1, [r3, #0]
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	461a      	mov	r2, r3
 80120e4:	f7ff fbe2 	bl	80118ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	4a8e      	ldr	r2, [pc, #568]	; (8012328 <HAL_ADC_ConfigChannel+0x678>)
 80120ee:	4293      	cmp	r3, r2
 80120f0:	f040 8130 	bne.w	8012354 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012100:	2b00      	cmp	r3, #0
 8012102:	d10b      	bne.n	801211c <HAL_ADC_ConfigChannel+0x46c>
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	0e9b      	lsrs	r3, r3, #26
 801210a:	3301      	adds	r3, #1
 801210c:	f003 031f 	and.w	r3, r3, #31
 8012110:	2b09      	cmp	r3, #9
 8012112:	bf94      	ite	ls
 8012114:	2301      	movls	r3, #1
 8012116:	2300      	movhi	r3, #0
 8012118:	b2db      	uxtb	r3, r3
 801211a:	e019      	b.n	8012150 <HAL_ADC_ConfigChannel+0x4a0>
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012124:	fa93 f3a3 	rbit	r3, r3
 8012128:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801212a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801212c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801212e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012130:	2b00      	cmp	r3, #0
 8012132:	d101      	bne.n	8012138 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8012134:	2320      	movs	r3, #32
 8012136:	e003      	b.n	8012140 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8012138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801213a:	fab3 f383 	clz	r3, r3
 801213e:	b2db      	uxtb	r3, r3
 8012140:	3301      	adds	r3, #1
 8012142:	f003 031f 	and.w	r3, r3, #31
 8012146:	2b09      	cmp	r3, #9
 8012148:	bf94      	ite	ls
 801214a:	2301      	movls	r3, #1
 801214c:	2300      	movhi	r3, #0
 801214e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012150:	2b00      	cmp	r3, #0
 8012152:	d079      	beq.n	8012248 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801215c:	2b00      	cmp	r3, #0
 801215e:	d107      	bne.n	8012170 <HAL_ADC_ConfigChannel+0x4c0>
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	0e9b      	lsrs	r3, r3, #26
 8012166:	3301      	adds	r3, #1
 8012168:	069b      	lsls	r3, r3, #26
 801216a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801216e:	e015      	b.n	801219c <HAL_ADC_ConfigChannel+0x4ec>
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012178:	fa93 f3a3 	rbit	r3, r3
 801217c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801217e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012180:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8012182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012184:	2b00      	cmp	r3, #0
 8012186:	d101      	bne.n	801218c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8012188:	2320      	movs	r3, #32
 801218a:	e003      	b.n	8012194 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 801218c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801218e:	fab3 f383 	clz	r3, r3
 8012192:	b2db      	uxtb	r3, r3
 8012194:	3301      	adds	r3, #1
 8012196:	069b      	lsls	r3, r3, #26
 8012198:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d109      	bne.n	80121bc <HAL_ADC_ConfigChannel+0x50c>
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	0e9b      	lsrs	r3, r3, #26
 80121ae:	3301      	adds	r3, #1
 80121b0:	f003 031f 	and.w	r3, r3, #31
 80121b4:	2101      	movs	r1, #1
 80121b6:	fa01 f303 	lsl.w	r3, r1, r3
 80121ba:	e017      	b.n	80121ec <HAL_ADC_ConfigChannel+0x53c>
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80121c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121c4:	fa93 f3a3 	rbit	r3, r3
 80121c8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80121ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80121ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d101      	bne.n	80121d8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80121d4:	2320      	movs	r3, #32
 80121d6:	e003      	b.n	80121e0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80121d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121da:	fab3 f383 	clz	r3, r3
 80121de:	b2db      	uxtb	r3, r3
 80121e0:	3301      	adds	r3, #1
 80121e2:	f003 031f 	and.w	r3, r3, #31
 80121e6:	2101      	movs	r1, #1
 80121e8:	fa01 f303 	lsl.w	r3, r1, r3
 80121ec:	ea42 0103 	orr.w	r1, r2, r3
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d10a      	bne.n	8012212 <HAL_ADC_ConfigChannel+0x562>
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	0e9b      	lsrs	r3, r3, #26
 8012202:	3301      	adds	r3, #1
 8012204:	f003 021f 	and.w	r2, r3, #31
 8012208:	4613      	mov	r3, r2
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	4413      	add	r3, r2
 801220e:	051b      	lsls	r3, r3, #20
 8012210:	e018      	b.n	8012244 <HAL_ADC_ConfigChannel+0x594>
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221a:	fa93 f3a3 	rbit	r3, r3
 801221e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8012220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012222:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8012224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012226:	2b00      	cmp	r3, #0
 8012228:	d101      	bne.n	801222e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 801222a:	2320      	movs	r3, #32
 801222c:	e003      	b.n	8012236 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 801222e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012230:	fab3 f383 	clz	r3, r3
 8012234:	b2db      	uxtb	r3, r3
 8012236:	3301      	adds	r3, #1
 8012238:	f003 021f 	and.w	r2, r3, #31
 801223c:	4613      	mov	r3, r2
 801223e:	005b      	lsls	r3, r3, #1
 8012240:	4413      	add	r3, r2
 8012242:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012244:	430b      	orrs	r3, r1
 8012246:	e080      	b.n	801234a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012250:	2b00      	cmp	r3, #0
 8012252:	d107      	bne.n	8012264 <HAL_ADC_ConfigChannel+0x5b4>
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	0e9b      	lsrs	r3, r3, #26
 801225a:	3301      	adds	r3, #1
 801225c:	069b      	lsls	r3, r3, #26
 801225e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8012262:	e015      	b.n	8012290 <HAL_ADC_ConfigChannel+0x5e0>
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801226c:	fa93 f3a3 	rbit	r3, r3
 8012270:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8012272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012274:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8012276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012278:	2b00      	cmp	r3, #0
 801227a:	d101      	bne.n	8012280 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 801227c:	2320      	movs	r3, #32
 801227e:	e003      	b.n	8012288 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8012280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012282:	fab3 f383 	clz	r3, r3
 8012286:	b2db      	uxtb	r3, r3
 8012288:	3301      	adds	r3, #1
 801228a:	069b      	lsls	r3, r3, #26
 801228c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012298:	2b00      	cmp	r3, #0
 801229a:	d109      	bne.n	80122b0 <HAL_ADC_ConfigChannel+0x600>
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	0e9b      	lsrs	r3, r3, #26
 80122a2:	3301      	adds	r3, #1
 80122a4:	f003 031f 	and.w	r3, r3, #31
 80122a8:	2101      	movs	r1, #1
 80122aa:	fa01 f303 	lsl.w	r3, r1, r3
 80122ae:	e017      	b.n	80122e0 <HAL_ADC_ConfigChannel+0x630>
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80122b6:	6a3b      	ldr	r3, [r7, #32]
 80122b8:	fa93 f3a3 	rbit	r3, r3
 80122bc:	61fb      	str	r3, [r7, #28]
  return result;
 80122be:	69fb      	ldr	r3, [r7, #28]
 80122c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80122c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d101      	bne.n	80122cc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80122c8:	2320      	movs	r3, #32
 80122ca:	e003      	b.n	80122d4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80122cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ce:	fab3 f383 	clz	r3, r3
 80122d2:	b2db      	uxtb	r3, r3
 80122d4:	3301      	adds	r3, #1
 80122d6:	f003 031f 	and.w	r3, r3, #31
 80122da:	2101      	movs	r1, #1
 80122dc:	fa01 f303 	lsl.w	r3, r1, r3
 80122e0:	ea42 0103 	orr.w	r1, r2, r3
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d10d      	bne.n	801230c <HAL_ADC_ConfigChannel+0x65c>
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	0e9b      	lsrs	r3, r3, #26
 80122f6:	3301      	adds	r3, #1
 80122f8:	f003 021f 	and.w	r2, r3, #31
 80122fc:	4613      	mov	r3, r2
 80122fe:	005b      	lsls	r3, r3, #1
 8012300:	4413      	add	r3, r2
 8012302:	3b1e      	subs	r3, #30
 8012304:	051b      	lsls	r3, r3, #20
 8012306:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801230a:	e01d      	b.n	8012348 <HAL_ADC_ConfigChannel+0x698>
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	fa93 f3a3 	rbit	r3, r3
 8012318:	613b      	str	r3, [r7, #16]
  return result;
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801231e:	69bb      	ldr	r3, [r7, #24]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d103      	bne.n	801232c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8012324:	2320      	movs	r3, #32
 8012326:	e005      	b.n	8012334 <HAL_ADC_ConfigChannel+0x684>
 8012328:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 801232c:	69bb      	ldr	r3, [r7, #24]
 801232e:	fab3 f383 	clz	r3, r3
 8012332:	b2db      	uxtb	r3, r3
 8012334:	3301      	adds	r3, #1
 8012336:	f003 021f 	and.w	r2, r3, #31
 801233a:	4613      	mov	r3, r2
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	4413      	add	r3, r2
 8012340:	3b1e      	subs	r3, #30
 8012342:	051b      	lsls	r3, r3, #20
 8012344:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012348:	430b      	orrs	r3, r1
 801234a:	683a      	ldr	r2, [r7, #0]
 801234c:	6892      	ldr	r2, [r2, #8]
 801234e:	4619      	mov	r1, r3
 8012350:	f7ff fa81 	bl	8011856 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	4b44      	ldr	r3, [pc, #272]	; (801246c <HAL_ADC_ConfigChannel+0x7bc>)
 801235a:	4013      	ands	r3, r2
 801235c:	2b00      	cmp	r3, #0
 801235e:	d07a      	beq.n	8012456 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012360:	4843      	ldr	r0, [pc, #268]	; (8012470 <HAL_ADC_ConfigChannel+0x7c0>)
 8012362:	f7ff f9e9 	bl	8011738 <LL_ADC_GetCommonPathInternalCh>
 8012366:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	4a41      	ldr	r2, [pc, #260]	; (8012474 <HAL_ADC_ConfigChannel+0x7c4>)
 8012370:	4293      	cmp	r3, r2
 8012372:	d12c      	bne.n	80123ce <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8012374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801237c:	2b00      	cmp	r3, #0
 801237e:	d126      	bne.n	80123ce <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	4a3c      	ldr	r2, [pc, #240]	; (8012478 <HAL_ADC_ConfigChannel+0x7c8>)
 8012386:	4293      	cmp	r3, r2
 8012388:	d004      	beq.n	8012394 <HAL_ADC_ConfigChannel+0x6e4>
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4a3b      	ldr	r2, [pc, #236]	; (801247c <HAL_ADC_ConfigChannel+0x7cc>)
 8012390:	4293      	cmp	r3, r2
 8012392:	d15d      	bne.n	8012450 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012398:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801239c:	4619      	mov	r1, r3
 801239e:	4834      	ldr	r0, [pc, #208]	; (8012470 <HAL_ADC_ConfigChannel+0x7c0>)
 80123a0:	f7ff f9b7 	bl	8011712 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80123a4:	4b36      	ldr	r3, [pc, #216]	; (8012480 <HAL_ADC_ConfigChannel+0x7d0>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	099b      	lsrs	r3, r3, #6
 80123aa:	4a36      	ldr	r2, [pc, #216]	; (8012484 <HAL_ADC_ConfigChannel+0x7d4>)
 80123ac:	fba2 2303 	umull	r2, r3, r2, r3
 80123b0:	099b      	lsrs	r3, r3, #6
 80123b2:	1c5a      	adds	r2, r3, #1
 80123b4:	4613      	mov	r3, r2
 80123b6:	005b      	lsls	r3, r3, #1
 80123b8:	4413      	add	r3, r2
 80123ba:	009b      	lsls	r3, r3, #2
 80123bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80123be:	e002      	b.n	80123c6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	3b01      	subs	r3, #1
 80123c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d1f9      	bne.n	80123c0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80123cc:	e040      	b.n	8012450 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	4a2d      	ldr	r2, [pc, #180]	; (8012488 <HAL_ADC_ConfigChannel+0x7d8>)
 80123d4:	4293      	cmp	r3, r2
 80123d6:	d118      	bne.n	801240a <HAL_ADC_ConfigChannel+0x75a>
 80123d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80123dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d112      	bne.n	801240a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	4a23      	ldr	r2, [pc, #140]	; (8012478 <HAL_ADC_ConfigChannel+0x7c8>)
 80123ea:	4293      	cmp	r3, r2
 80123ec:	d004      	beq.n	80123f8 <HAL_ADC_ConfigChannel+0x748>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	4a22      	ldr	r2, [pc, #136]	; (801247c <HAL_ADC_ConfigChannel+0x7cc>)
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d12d      	bne.n	8012454 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80123f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80123fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012400:	4619      	mov	r1, r3
 8012402:	481b      	ldr	r0, [pc, #108]	; (8012470 <HAL_ADC_ConfigChannel+0x7c0>)
 8012404:	f7ff f985 	bl	8011712 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8012408:	e024      	b.n	8012454 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	4a1f      	ldr	r2, [pc, #124]	; (801248c <HAL_ADC_ConfigChannel+0x7dc>)
 8012410:	4293      	cmp	r3, r2
 8012412:	d120      	bne.n	8012456 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8012414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801241c:	2b00      	cmp	r3, #0
 801241e:	d11a      	bne.n	8012456 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	4a14      	ldr	r2, [pc, #80]	; (8012478 <HAL_ADC_ConfigChannel+0x7c8>)
 8012426:	4293      	cmp	r3, r2
 8012428:	d115      	bne.n	8012456 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801242a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801242e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012432:	4619      	mov	r1, r3
 8012434:	480e      	ldr	r0, [pc, #56]	; (8012470 <HAL_ADC_ConfigChannel+0x7c0>)
 8012436:	f7ff f96c 	bl	8011712 <LL_ADC_SetCommonPathInternalCh>
 801243a:	e00c      	b.n	8012456 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012440:	f043 0220 	orr.w	r2, r3, #32
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8012448:	2301      	movs	r3, #1
 801244a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 801244e:	e002      	b.n	8012456 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8012450:	bf00      	nop
 8012452:	e000      	b.n	8012456 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8012454:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2200      	movs	r2, #0
 801245a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 801245e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8012462:	4618      	mov	r0, r3
 8012464:	37d8      	adds	r7, #216	; 0xd8
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	80080000 	.word	0x80080000
 8012470:	50040300 	.word	0x50040300
 8012474:	c7520000 	.word	0xc7520000
 8012478:	50040000 	.word	0x50040000
 801247c:	50040200 	.word	0x50040200
 8012480:	20000000 	.word	0x20000000
 8012484:	053e2d63 	.word	0x053e2d63
 8012488:	cb840000 	.word	0xcb840000
 801248c:	80000001 	.word	0x80000001

08012490 <LL_ADC_IsEnabled>:
{
 8012490:	b480      	push	{r7}
 8012492:	b083      	sub	sp, #12
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	689b      	ldr	r3, [r3, #8]
 801249c:	f003 0301 	and.w	r3, r3, #1
 80124a0:	2b01      	cmp	r3, #1
 80124a2:	d101      	bne.n	80124a8 <LL_ADC_IsEnabled+0x18>
 80124a4:	2301      	movs	r3, #1
 80124a6:	e000      	b.n	80124aa <LL_ADC_IsEnabled+0x1a>
 80124a8:	2300      	movs	r3, #0
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	370c      	adds	r7, #12
 80124ae:	46bd      	mov	sp, r7
 80124b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b4:	4770      	bx	lr

080124b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80124b6:	b480      	push	{r7}
 80124b8:	b083      	sub	sp, #12
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	689b      	ldr	r3, [r3, #8]
 80124c2:	f003 0304 	and.w	r3, r3, #4
 80124c6:	2b04      	cmp	r3, #4
 80124c8:	d101      	bne.n	80124ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80124ca:	2301      	movs	r3, #1
 80124cc:	e000      	b.n	80124d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80124ce:	2300      	movs	r3, #0
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	370c      	adds	r7, #12
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr

080124dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80124dc:	b590      	push	{r4, r7, lr}
 80124de:	b09f      	sub	sp, #124	; 0x7c
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80124e6:	2300      	movs	r3, #0
 80124e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80124f2:	2b01      	cmp	r3, #1
 80124f4:	d101      	bne.n	80124fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80124f6:	2302      	movs	r3, #2
 80124f8:	e093      	b.n	8012622 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2201      	movs	r2, #1
 80124fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8012502:	2300      	movs	r3, #0
 8012504:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8012506:	2300      	movs	r3, #0
 8012508:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	4a47      	ldr	r2, [pc, #284]	; (801262c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8012510:	4293      	cmp	r3, r2
 8012512:	d102      	bne.n	801251a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8012514:	4b46      	ldr	r3, [pc, #280]	; (8012630 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8012516:	60bb      	str	r3, [r7, #8]
 8012518:	e001      	b.n	801251e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801251a:	2300      	movs	r3, #0
 801251c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d10b      	bne.n	801253c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012528:	f043 0220 	orr.w	r2, r3, #32
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2200      	movs	r2, #0
 8012534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8012538:	2301      	movs	r3, #1
 801253a:	e072      	b.n	8012622 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	4618      	mov	r0, r3
 8012540:	f7ff ffb9 	bl	80124b6 <LL_ADC_REG_IsConversionOngoing>
 8012544:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4618      	mov	r0, r3
 801254c:	f7ff ffb3 	bl	80124b6 <LL_ADC_REG_IsConversionOngoing>
 8012550:	4603      	mov	r3, r0
 8012552:	2b00      	cmp	r3, #0
 8012554:	d154      	bne.n	8012600 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8012556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012558:	2b00      	cmp	r3, #0
 801255a:	d151      	bne.n	8012600 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801255c:	4b35      	ldr	r3, [pc, #212]	; (8012634 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 801255e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d02c      	beq.n	80125c2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8012568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801256a:	689b      	ldr	r3, [r3, #8]
 801256c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	6859      	ldr	r1, [r3, #4]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801257a:	035b      	lsls	r3, r3, #13
 801257c:	430b      	orrs	r3, r1
 801257e:	431a      	orrs	r2, r3
 8012580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012582:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012584:	4829      	ldr	r0, [pc, #164]	; (801262c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8012586:	f7ff ff83 	bl	8012490 <LL_ADC_IsEnabled>
 801258a:	4604      	mov	r4, r0
 801258c:	4828      	ldr	r0, [pc, #160]	; (8012630 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 801258e:	f7ff ff7f 	bl	8012490 <LL_ADC_IsEnabled>
 8012592:	4603      	mov	r3, r0
 8012594:	431c      	orrs	r4, r3
 8012596:	4828      	ldr	r0, [pc, #160]	; (8012638 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8012598:	f7ff ff7a 	bl	8012490 <LL_ADC_IsEnabled>
 801259c:	4603      	mov	r3, r0
 801259e:	4323      	orrs	r3, r4
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d137      	bne.n	8012614 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80125a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125a6:	689b      	ldr	r3, [r3, #8]
 80125a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80125ac:	f023 030f 	bic.w	r3, r3, #15
 80125b0:	683a      	ldr	r2, [r7, #0]
 80125b2:	6811      	ldr	r1, [r2, #0]
 80125b4:	683a      	ldr	r2, [r7, #0]
 80125b6:	6892      	ldr	r2, [r2, #8]
 80125b8:	430a      	orrs	r2, r1
 80125ba:	431a      	orrs	r2, r3
 80125bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80125c0:	e028      	b.n	8012614 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80125c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125c4:	689b      	ldr	r3, [r3, #8]
 80125c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80125ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80125ce:	4817      	ldr	r0, [pc, #92]	; (801262c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80125d0:	f7ff ff5e 	bl	8012490 <LL_ADC_IsEnabled>
 80125d4:	4604      	mov	r4, r0
 80125d6:	4816      	ldr	r0, [pc, #88]	; (8012630 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80125d8:	f7ff ff5a 	bl	8012490 <LL_ADC_IsEnabled>
 80125dc:	4603      	mov	r3, r0
 80125de:	431c      	orrs	r4, r3
 80125e0:	4815      	ldr	r0, [pc, #84]	; (8012638 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80125e2:	f7ff ff55 	bl	8012490 <LL_ADC_IsEnabled>
 80125e6:	4603      	mov	r3, r0
 80125e8:	4323      	orrs	r3, r4
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d112      	bne.n	8012614 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80125ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125f0:	689b      	ldr	r3, [r3, #8]
 80125f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80125f6:	f023 030f 	bic.w	r3, r3, #15
 80125fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80125fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80125fe:	e009      	b.n	8012614 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012604:	f043 0220 	orr.w	r2, r3, #32
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 801260c:	2301      	movs	r3, #1
 801260e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012612:	e000      	b.n	8012616 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012614:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2200      	movs	r2, #0
 801261a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 801261e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8012622:	4618      	mov	r0, r3
 8012624:	377c      	adds	r7, #124	; 0x7c
 8012626:	46bd      	mov	sp, r7
 8012628:	bd90      	pop	{r4, r7, pc}
 801262a:	bf00      	nop
 801262c:	50040000 	.word	0x50040000
 8012630:	50040100 	.word	0x50040100
 8012634:	50040300 	.word	0x50040300
 8012638:	50040200 	.word	0x50040200

0801263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801263c:	b480      	push	{r7}
 801263e:	b085      	sub	sp, #20
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f003 0307 	and.w	r3, r3, #7
 801264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801264c:	4b0c      	ldr	r3, [pc, #48]	; (8012680 <__NVIC_SetPriorityGrouping+0x44>)
 801264e:	68db      	ldr	r3, [r3, #12]
 8012650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012652:	68ba      	ldr	r2, [r7, #8]
 8012654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012658:	4013      	ands	r3, r2
 801265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801266e:	4a04      	ldr	r2, [pc, #16]	; (8012680 <__NVIC_SetPriorityGrouping+0x44>)
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	60d3      	str	r3, [r2, #12]
}
 8012674:	bf00      	nop
 8012676:	3714      	adds	r7, #20
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr
 8012680:	e000ed00 	.word	0xe000ed00

08012684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012684:	b480      	push	{r7}
 8012686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012688:	4b04      	ldr	r3, [pc, #16]	; (801269c <__NVIC_GetPriorityGrouping+0x18>)
 801268a:	68db      	ldr	r3, [r3, #12]
 801268c:	0a1b      	lsrs	r3, r3, #8
 801268e:	f003 0307 	and.w	r3, r3, #7
}
 8012692:	4618      	mov	r0, r3
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr
 801269c:	e000ed00 	.word	0xe000ed00

080126a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b083      	sub	sp, #12
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	4603      	mov	r3, r0
 80126a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80126aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	db0b      	blt.n	80126ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80126b2:	79fb      	ldrb	r3, [r7, #7]
 80126b4:	f003 021f 	and.w	r2, r3, #31
 80126b8:	4907      	ldr	r1, [pc, #28]	; (80126d8 <__NVIC_EnableIRQ+0x38>)
 80126ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126be:	095b      	lsrs	r3, r3, #5
 80126c0:	2001      	movs	r0, #1
 80126c2:	fa00 f202 	lsl.w	r2, r0, r2
 80126c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80126ca:	bf00      	nop
 80126cc:	370c      	adds	r7, #12
 80126ce:	46bd      	mov	sp, r7
 80126d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	e000e100 	.word	0xe000e100

080126dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	4603      	mov	r3, r0
 80126e4:	6039      	str	r1, [r7, #0]
 80126e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80126e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	db0a      	blt.n	8012706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	b2da      	uxtb	r2, r3
 80126f4:	490c      	ldr	r1, [pc, #48]	; (8012728 <__NVIC_SetPriority+0x4c>)
 80126f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126fa:	0112      	lsls	r2, r2, #4
 80126fc:	b2d2      	uxtb	r2, r2
 80126fe:	440b      	add	r3, r1
 8012700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012704:	e00a      	b.n	801271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	b2da      	uxtb	r2, r3
 801270a:	4908      	ldr	r1, [pc, #32]	; (801272c <__NVIC_SetPriority+0x50>)
 801270c:	79fb      	ldrb	r3, [r7, #7]
 801270e:	f003 030f 	and.w	r3, r3, #15
 8012712:	3b04      	subs	r3, #4
 8012714:	0112      	lsls	r2, r2, #4
 8012716:	b2d2      	uxtb	r2, r2
 8012718:	440b      	add	r3, r1
 801271a:	761a      	strb	r2, [r3, #24]
}
 801271c:	bf00      	nop
 801271e:	370c      	adds	r7, #12
 8012720:	46bd      	mov	sp, r7
 8012722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012726:	4770      	bx	lr
 8012728:	e000e100 	.word	0xe000e100
 801272c:	e000ed00 	.word	0xe000ed00

08012730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012730:	b480      	push	{r7}
 8012732:	b089      	sub	sp, #36	; 0x24
 8012734:	af00      	add	r7, sp, #0
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	f003 0307 	and.w	r3, r3, #7
 8012742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	f1c3 0307 	rsb	r3, r3, #7
 801274a:	2b04      	cmp	r3, #4
 801274c:	bf28      	it	cs
 801274e:	2304      	movcs	r3, #4
 8012750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	3304      	adds	r3, #4
 8012756:	2b06      	cmp	r3, #6
 8012758:	d902      	bls.n	8012760 <NVIC_EncodePriority+0x30>
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	3b03      	subs	r3, #3
 801275e:	e000      	b.n	8012762 <NVIC_EncodePriority+0x32>
 8012760:	2300      	movs	r3, #0
 8012762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012764:	f04f 32ff 	mov.w	r2, #4294967295
 8012768:	69bb      	ldr	r3, [r7, #24]
 801276a:	fa02 f303 	lsl.w	r3, r2, r3
 801276e:	43da      	mvns	r2, r3
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	401a      	ands	r2, r3
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012778:	f04f 31ff 	mov.w	r1, #4294967295
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	fa01 f303 	lsl.w	r3, r1, r3
 8012782:	43d9      	mvns	r1, r3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012788:	4313      	orrs	r3, r2
         );
}
 801278a:	4618      	mov	r0, r3
 801278c:	3724      	adds	r7, #36	; 0x24
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr
	...

08012798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	3b01      	subs	r3, #1
 80127a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80127a8:	d301      	bcc.n	80127ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80127aa:	2301      	movs	r3, #1
 80127ac:	e00f      	b.n	80127ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80127ae:	4a0a      	ldr	r2, [pc, #40]	; (80127d8 <SysTick_Config+0x40>)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	3b01      	subs	r3, #1
 80127b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80127b6:	210f      	movs	r1, #15
 80127b8:	f04f 30ff 	mov.w	r0, #4294967295
 80127bc:	f7ff ff8e 	bl	80126dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80127c0:	4b05      	ldr	r3, [pc, #20]	; (80127d8 <SysTick_Config+0x40>)
 80127c2:	2200      	movs	r2, #0
 80127c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80127c6:	4b04      	ldr	r3, [pc, #16]	; (80127d8 <SysTick_Config+0x40>)
 80127c8:	2207      	movs	r2, #7
 80127ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80127cc:	2300      	movs	r3, #0
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3708      	adds	r7, #8
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
 80127d6:	bf00      	nop
 80127d8:	e000e010 	.word	0xe000e010

080127dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f7ff ff29 	bl	801263c <__NVIC_SetPriorityGrouping>
}
 80127ea:	bf00      	nop
 80127ec:	3708      	adds	r7, #8
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b086      	sub	sp, #24
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	4603      	mov	r3, r0
 80127fa:	60b9      	str	r1, [r7, #8]
 80127fc:	607a      	str	r2, [r7, #4]
 80127fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8012800:	2300      	movs	r3, #0
 8012802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012804:	f7ff ff3e 	bl	8012684 <__NVIC_GetPriorityGrouping>
 8012808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	68b9      	ldr	r1, [r7, #8]
 801280e:	6978      	ldr	r0, [r7, #20]
 8012810:	f7ff ff8e 	bl	8012730 <NVIC_EncodePriority>
 8012814:	4602      	mov	r2, r0
 8012816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801281a:	4611      	mov	r1, r2
 801281c:	4618      	mov	r0, r3
 801281e:	f7ff ff5d 	bl	80126dc <__NVIC_SetPriority>
}
 8012822:	bf00      	nop
 8012824:	3718      	adds	r7, #24
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801282a:	b580      	push	{r7, lr}
 801282c:	b082      	sub	sp, #8
 801282e:	af00      	add	r7, sp, #0
 8012830:	4603      	mov	r3, r0
 8012832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012838:	4618      	mov	r0, r3
 801283a:	f7ff ff31 	bl	80126a0 <__NVIC_EnableIRQ>
}
 801283e:	bf00      	nop
 8012840:	3708      	adds	r7, #8
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b082      	sub	sp, #8
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f7ff ffa2 	bl	8012798 <SysTick_Config>
 8012854:	4603      	mov	r3, r0
}
 8012856:	4618      	mov	r0, r3
 8012858:	3708      	adds	r7, #8
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}

0801285e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801285e:	b580      	push	{r7, lr}
 8012860:	b084      	sub	sp, #16
 8012862:	af00      	add	r7, sp, #0
 8012864:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012866:	2300      	movs	r3, #0
 8012868:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012870:	b2db      	uxtb	r3, r3
 8012872:	2b02      	cmp	r3, #2
 8012874:	d005      	beq.n	8012882 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2204      	movs	r2, #4
 801287a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801287c:	2301      	movs	r3, #1
 801287e:	73fb      	strb	r3, [r7, #15]
 8012880:	e029      	b.n	80128d6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	f022 020e 	bic.w	r2, r2, #14
 8012890:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	f022 0201 	bic.w	r2, r2, #1
 80128a0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128a6:	f003 021c 	and.w	r2, r3, #28
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ae:	2101      	movs	r1, #1
 80128b0:	fa01 f202 	lsl.w	r2, r1, r2
 80128b4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2201      	movs	r2, #1
 80128ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2200      	movs	r2, #0
 80128c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d003      	beq.n	80128d6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	4798      	blx	r3
    }
  }
  return status;
 80128d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3710      	adds	r7, #16
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80128e0:	b480      	push	{r7}
 80128e2:	b087      	sub	sp, #28
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	60f8      	str	r0, [r7, #12]
 80128e8:	460b      	mov	r3, r1
 80128ea:	607a      	str	r2, [r7, #4]
 80128ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80128ee:	2300      	movs	r3, #0
 80128f0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80128f2:	7afb      	ldrb	r3, [r7, #11]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d103      	bne.n	8012900 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	605a      	str	r2, [r3, #4]
      break;
 80128fe:	e002      	b.n	8012906 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8012900:	2301      	movs	r3, #1
 8012902:	75fb      	strb	r3, [r7, #23]
      break;
 8012904:	bf00      	nop
  }

  return status;
 8012906:	7dfb      	ldrb	r3, [r7, #23]
}
 8012908:	4618      	mov	r0, r3
 801290a:	371c      	adds	r7, #28
 801290c:	46bd      	mov	sp, r7
 801290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012912:	4770      	bx	lr

08012914 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8012914:	b480      	push	{r7}
 8012916:	b083      	sub	sp, #12
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d101      	bne.n	8012928 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8012924:	2301      	movs	r3, #1
 8012926:	e003      	b.n	8012930 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	683a      	ldr	r2, [r7, #0]
 801292c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 801292e:	2300      	movs	r3, #0
  }
}
 8012930:	4618      	mov	r0, r3
 8012932:	370c      	adds	r7, #12
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr

0801293c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b086      	sub	sp, #24
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	0c1b      	lsrs	r3, r3, #16
 801294a:	f003 0301 	and.w	r3, r3, #1
 801294e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f003 031f 	and.w	r3, r3, #31
 8012958:	2201      	movs	r2, #1
 801295a:	fa02 f303 	lsl.w	r3, r2, r3
 801295e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	015a      	lsls	r2, r3, #5
 8012964:	4b0c      	ldr	r3, [pc, #48]	; (8012998 <HAL_EXTI_IRQHandler+0x5c>)
 8012966:	4413      	add	r3, r2
 8012968:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	693a      	ldr	r2, [r7, #16]
 8012970:	4013      	ands	r3, r2
 8012972:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d009      	beq.n	801298e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	693a      	ldr	r2, [r7, #16]
 801297e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d002      	beq.n	801298e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	4798      	blx	r3
    }
  }
}
 801298e:	bf00      	nop
 8012990:	3718      	adds	r7, #24
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	40010414 	.word	0x40010414

0801299c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801299c:	b480      	push	{r7}
 801299e:	b087      	sub	sp, #28
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80129a6:	2300      	movs	r3, #0
 80129a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80129aa:	e17f      	b.n	8012cac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	2101      	movs	r1, #1
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	fa01 f303 	lsl.w	r3, r1, r3
 80129b8:	4013      	ands	r3, r2
 80129ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	f000 8171 	beq.w	8012ca6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	685b      	ldr	r3, [r3, #4]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d00b      	beq.n	80129e4 <HAL_GPIO_Init+0x48>
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	2b02      	cmp	r3, #2
 80129d2:	d007      	beq.n	80129e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80129d8:	2b11      	cmp	r3, #17
 80129da:	d003      	beq.n	80129e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	2b12      	cmp	r3, #18
 80129e2:	d130      	bne.n	8012a46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	689b      	ldr	r3, [r3, #8]
 80129e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	005b      	lsls	r3, r3, #1
 80129ee:	2203      	movs	r2, #3
 80129f0:	fa02 f303 	lsl.w	r3, r2, r3
 80129f4:	43db      	mvns	r3, r3
 80129f6:	693a      	ldr	r2, [r7, #16]
 80129f8:	4013      	ands	r3, r2
 80129fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	68da      	ldr	r2, [r3, #12]
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	005b      	lsls	r3, r3, #1
 8012a04:	fa02 f303 	lsl.w	r3, r2, r3
 8012a08:	693a      	ldr	r2, [r7, #16]
 8012a0a:	4313      	orrs	r3, r2
 8012a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	693a      	ldr	r2, [r7, #16]
 8012a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8012a22:	43db      	mvns	r3, r3
 8012a24:	693a      	ldr	r2, [r7, #16]
 8012a26:	4013      	ands	r3, r2
 8012a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	091b      	lsrs	r3, r3, #4
 8012a30:	f003 0201 	and.w	r2, r3, #1
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	fa02 f303 	lsl.w	r3, r2, r3
 8012a3a:	693a      	ldr	r2, [r7, #16]
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	693a      	ldr	r2, [r7, #16]
 8012a44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	f003 0303 	and.w	r3, r3, #3
 8012a4e:	2b03      	cmp	r3, #3
 8012a50:	d118      	bne.n	8012a84 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8012a58:	2201      	movs	r2, #1
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a60:	43db      	mvns	r3, r3
 8012a62:	693a      	ldr	r2, [r7, #16]
 8012a64:	4013      	ands	r3, r2
 8012a66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	685b      	ldr	r3, [r3, #4]
 8012a6c:	08db      	lsrs	r3, r3, #3
 8012a6e:	f003 0201 	and.w	r2, r3, #1
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	fa02 f303 	lsl.w	r3, r2, r3
 8012a78:	693a      	ldr	r2, [r7, #16]
 8012a7a:	4313      	orrs	r3, r2
 8012a7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	693a      	ldr	r2, [r7, #16]
 8012a82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	2203      	movs	r2, #3
 8012a90:	fa02 f303 	lsl.w	r3, r2, r3
 8012a94:	43db      	mvns	r3, r3
 8012a96:	693a      	ldr	r2, [r7, #16]
 8012a98:	4013      	ands	r3, r2
 8012a9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	689a      	ldr	r2, [r3, #8]
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	005b      	lsls	r3, r3, #1
 8012aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8012aa8:	693a      	ldr	r2, [r7, #16]
 8012aaa:	4313      	orrs	r3, r2
 8012aac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	693a      	ldr	r2, [r7, #16]
 8012ab2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	2b02      	cmp	r3, #2
 8012aba:	d003      	beq.n	8012ac4 <HAL_GPIO_Init+0x128>
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	2b12      	cmp	r3, #18
 8012ac2:	d123      	bne.n	8012b0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	08da      	lsrs	r2, r3, #3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	3208      	adds	r2, #8
 8012acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	f003 0307 	and.w	r3, r3, #7
 8012ad8:	009b      	lsls	r3, r3, #2
 8012ada:	220f      	movs	r2, #15
 8012adc:	fa02 f303 	lsl.w	r3, r2, r3
 8012ae0:	43db      	mvns	r3, r3
 8012ae2:	693a      	ldr	r2, [r7, #16]
 8012ae4:	4013      	ands	r3, r2
 8012ae6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	691a      	ldr	r2, [r3, #16]
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	f003 0307 	and.w	r3, r3, #7
 8012af2:	009b      	lsls	r3, r3, #2
 8012af4:	fa02 f303 	lsl.w	r3, r2, r3
 8012af8:	693a      	ldr	r2, [r7, #16]
 8012afa:	4313      	orrs	r3, r2
 8012afc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	08da      	lsrs	r2, r3, #3
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	3208      	adds	r2, #8
 8012b06:	6939      	ldr	r1, [r7, #16]
 8012b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	005b      	lsls	r3, r3, #1
 8012b16:	2203      	movs	r2, #3
 8012b18:	fa02 f303 	lsl.w	r3, r2, r3
 8012b1c:	43db      	mvns	r3, r3
 8012b1e:	693a      	ldr	r2, [r7, #16]
 8012b20:	4013      	ands	r3, r2
 8012b22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	f003 0203 	and.w	r2, r3, #3
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	005b      	lsls	r3, r3, #1
 8012b30:	fa02 f303 	lsl.w	r3, r2, r3
 8012b34:	693a      	ldr	r2, [r7, #16]
 8012b36:	4313      	orrs	r3, r2
 8012b38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	693a      	ldr	r2, [r7, #16]
 8012b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	685b      	ldr	r3, [r3, #4]
 8012b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	f000 80ac 	beq.w	8012ca6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012b4e:	4b5f      	ldr	r3, [pc, #380]	; (8012ccc <HAL_GPIO_Init+0x330>)
 8012b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012b52:	4a5e      	ldr	r2, [pc, #376]	; (8012ccc <HAL_GPIO_Init+0x330>)
 8012b54:	f043 0301 	orr.w	r3, r3, #1
 8012b58:	6613      	str	r3, [r2, #96]	; 0x60
 8012b5a:	4b5c      	ldr	r3, [pc, #368]	; (8012ccc <HAL_GPIO_Init+0x330>)
 8012b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012b5e:	f003 0301 	and.w	r3, r3, #1
 8012b62:	60bb      	str	r3, [r7, #8]
 8012b64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8012b66:	4a5a      	ldr	r2, [pc, #360]	; (8012cd0 <HAL_GPIO_Init+0x334>)
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	089b      	lsrs	r3, r3, #2
 8012b6c:	3302      	adds	r3, #2
 8012b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	f003 0303 	and.w	r3, r3, #3
 8012b7a:	009b      	lsls	r3, r3, #2
 8012b7c:	220f      	movs	r2, #15
 8012b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8012b82:	43db      	mvns	r3, r3
 8012b84:	693a      	ldr	r2, [r7, #16]
 8012b86:	4013      	ands	r3, r2
 8012b88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8012b90:	d025      	beq.n	8012bde <HAL_GPIO_Init+0x242>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	4a4f      	ldr	r2, [pc, #316]	; (8012cd4 <HAL_GPIO_Init+0x338>)
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d01f      	beq.n	8012bda <HAL_GPIO_Init+0x23e>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4a4e      	ldr	r2, [pc, #312]	; (8012cd8 <HAL_GPIO_Init+0x33c>)
 8012b9e:	4293      	cmp	r3, r2
 8012ba0:	d019      	beq.n	8012bd6 <HAL_GPIO_Init+0x23a>
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	4a4d      	ldr	r2, [pc, #308]	; (8012cdc <HAL_GPIO_Init+0x340>)
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	d013      	beq.n	8012bd2 <HAL_GPIO_Init+0x236>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4a4c      	ldr	r2, [pc, #304]	; (8012ce0 <HAL_GPIO_Init+0x344>)
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	d00d      	beq.n	8012bce <HAL_GPIO_Init+0x232>
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	4a4b      	ldr	r2, [pc, #300]	; (8012ce4 <HAL_GPIO_Init+0x348>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d007      	beq.n	8012bca <HAL_GPIO_Init+0x22e>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	4a4a      	ldr	r2, [pc, #296]	; (8012ce8 <HAL_GPIO_Init+0x34c>)
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d101      	bne.n	8012bc6 <HAL_GPIO_Init+0x22a>
 8012bc2:	2306      	movs	r3, #6
 8012bc4:	e00c      	b.n	8012be0 <HAL_GPIO_Init+0x244>
 8012bc6:	2307      	movs	r3, #7
 8012bc8:	e00a      	b.n	8012be0 <HAL_GPIO_Init+0x244>
 8012bca:	2305      	movs	r3, #5
 8012bcc:	e008      	b.n	8012be0 <HAL_GPIO_Init+0x244>
 8012bce:	2304      	movs	r3, #4
 8012bd0:	e006      	b.n	8012be0 <HAL_GPIO_Init+0x244>
 8012bd2:	2303      	movs	r3, #3
 8012bd4:	e004      	b.n	8012be0 <HAL_GPIO_Init+0x244>
 8012bd6:	2302      	movs	r3, #2
 8012bd8:	e002      	b.n	8012be0 <HAL_GPIO_Init+0x244>
 8012bda:	2301      	movs	r3, #1
 8012bdc:	e000      	b.n	8012be0 <HAL_GPIO_Init+0x244>
 8012bde:	2300      	movs	r3, #0
 8012be0:	697a      	ldr	r2, [r7, #20]
 8012be2:	f002 0203 	and.w	r2, r2, #3
 8012be6:	0092      	lsls	r2, r2, #2
 8012be8:	4093      	lsls	r3, r2
 8012bea:	693a      	ldr	r2, [r7, #16]
 8012bec:	4313      	orrs	r3, r2
 8012bee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8012bf0:	4937      	ldr	r1, [pc, #220]	; (8012cd0 <HAL_GPIO_Init+0x334>)
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	089b      	lsrs	r3, r3, #2
 8012bf6:	3302      	adds	r3, #2
 8012bf8:	693a      	ldr	r2, [r7, #16]
 8012bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8012bfe:	4b3b      	ldr	r3, [pc, #236]	; (8012cec <HAL_GPIO_Init+0x350>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	43db      	mvns	r3, r3
 8012c08:	693a      	ldr	r2, [r7, #16]
 8012c0a:	4013      	ands	r3, r2
 8012c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d003      	beq.n	8012c22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8012c1a:	693a      	ldr	r2, [r7, #16]
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	4313      	orrs	r3, r2
 8012c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8012c22:	4a32      	ldr	r2, [pc, #200]	; (8012cec <HAL_GPIO_Init+0x350>)
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8012c28:	4b30      	ldr	r3, [pc, #192]	; (8012cec <HAL_GPIO_Init+0x350>)
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	43db      	mvns	r3, r3
 8012c32:	693a      	ldr	r2, [r7, #16]
 8012c34:	4013      	ands	r3, r2
 8012c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d003      	beq.n	8012c4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8012c44:	693a      	ldr	r2, [r7, #16]
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	4313      	orrs	r3, r2
 8012c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8012c4c:	4a27      	ldr	r2, [pc, #156]	; (8012cec <HAL_GPIO_Init+0x350>)
 8012c4e:	693b      	ldr	r3, [r7, #16]
 8012c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8012c52:	4b26      	ldr	r3, [pc, #152]	; (8012cec <HAL_GPIO_Init+0x350>)
 8012c54:	689b      	ldr	r3, [r3, #8]
 8012c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	43db      	mvns	r3, r3
 8012c5c:	693a      	ldr	r2, [r7, #16]
 8012c5e:	4013      	ands	r3, r2
 8012c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	685b      	ldr	r3, [r3, #4]
 8012c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d003      	beq.n	8012c76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8012c6e:	693a      	ldr	r2, [r7, #16]
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	4313      	orrs	r3, r2
 8012c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8012c76:	4a1d      	ldr	r2, [pc, #116]	; (8012cec <HAL_GPIO_Init+0x350>)
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8012c7c:	4b1b      	ldr	r3, [pc, #108]	; (8012cec <HAL_GPIO_Init+0x350>)
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	43db      	mvns	r3, r3
 8012c86:	693a      	ldr	r2, [r7, #16]
 8012c88:	4013      	ands	r3, r2
 8012c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d003      	beq.n	8012ca0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8012c98:	693a      	ldr	r2, [r7, #16]
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	4313      	orrs	r3, r2
 8012c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8012ca0:	4a12      	ldr	r2, [pc, #72]	; (8012cec <HAL_GPIO_Init+0x350>)
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	3301      	adds	r3, #1
 8012caa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	f47f ae78 	bne.w	80129ac <HAL_GPIO_Init+0x10>
  }
}
 8012cbc:	bf00      	nop
 8012cbe:	bf00      	nop
 8012cc0:	371c      	adds	r7, #28
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc8:	4770      	bx	lr
 8012cca:	bf00      	nop
 8012ccc:	40021000 	.word	0x40021000
 8012cd0:	40010000 	.word	0x40010000
 8012cd4:	48000400 	.word	0x48000400
 8012cd8:	48000800 	.word	0x48000800
 8012cdc:	48000c00 	.word	0x48000c00
 8012ce0:	48001000 	.word	0x48001000
 8012ce4:	48001400 	.word	0x48001400
 8012ce8:	48001800 	.word	0x48001800
 8012cec:	40010400 	.word	0x40010400

08012cf0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012cf0:	b480      	push	{r7}
 8012cf2:	b087      	sub	sp, #28
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8012cfe:	e0cd      	b.n	8012e9c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8012d00:	2201      	movs	r2, #1
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	fa02 f303 	lsl.w	r3, r2, r3
 8012d08:	683a      	ldr	r2, [r7, #0]
 8012d0a:	4013      	ands	r3, r2
 8012d0c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f000 80c0 	beq.w	8012e96 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8012d16:	4a68      	ldr	r2, [pc, #416]	; (8012eb8 <HAL_GPIO_DeInit+0x1c8>)
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	089b      	lsrs	r3, r3, #2
 8012d1c:	3302      	adds	r3, #2
 8012d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d22:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	f003 0303 	and.w	r3, r3, #3
 8012d2a:	009b      	lsls	r3, r3, #2
 8012d2c:	220f      	movs	r2, #15
 8012d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8012d32:	68fa      	ldr	r2, [r7, #12]
 8012d34:	4013      	ands	r3, r2
 8012d36:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8012d3e:	d025      	beq.n	8012d8c <HAL_GPIO_DeInit+0x9c>
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	4a5e      	ldr	r2, [pc, #376]	; (8012ebc <HAL_GPIO_DeInit+0x1cc>)
 8012d44:	4293      	cmp	r3, r2
 8012d46:	d01f      	beq.n	8012d88 <HAL_GPIO_DeInit+0x98>
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	4a5d      	ldr	r2, [pc, #372]	; (8012ec0 <HAL_GPIO_DeInit+0x1d0>)
 8012d4c:	4293      	cmp	r3, r2
 8012d4e:	d019      	beq.n	8012d84 <HAL_GPIO_DeInit+0x94>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	4a5c      	ldr	r2, [pc, #368]	; (8012ec4 <HAL_GPIO_DeInit+0x1d4>)
 8012d54:	4293      	cmp	r3, r2
 8012d56:	d013      	beq.n	8012d80 <HAL_GPIO_DeInit+0x90>
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	4a5b      	ldr	r2, [pc, #364]	; (8012ec8 <HAL_GPIO_DeInit+0x1d8>)
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	d00d      	beq.n	8012d7c <HAL_GPIO_DeInit+0x8c>
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	4a5a      	ldr	r2, [pc, #360]	; (8012ecc <HAL_GPIO_DeInit+0x1dc>)
 8012d64:	4293      	cmp	r3, r2
 8012d66:	d007      	beq.n	8012d78 <HAL_GPIO_DeInit+0x88>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	4a59      	ldr	r2, [pc, #356]	; (8012ed0 <HAL_GPIO_DeInit+0x1e0>)
 8012d6c:	4293      	cmp	r3, r2
 8012d6e:	d101      	bne.n	8012d74 <HAL_GPIO_DeInit+0x84>
 8012d70:	2306      	movs	r3, #6
 8012d72:	e00c      	b.n	8012d8e <HAL_GPIO_DeInit+0x9e>
 8012d74:	2307      	movs	r3, #7
 8012d76:	e00a      	b.n	8012d8e <HAL_GPIO_DeInit+0x9e>
 8012d78:	2305      	movs	r3, #5
 8012d7a:	e008      	b.n	8012d8e <HAL_GPIO_DeInit+0x9e>
 8012d7c:	2304      	movs	r3, #4
 8012d7e:	e006      	b.n	8012d8e <HAL_GPIO_DeInit+0x9e>
 8012d80:	2303      	movs	r3, #3
 8012d82:	e004      	b.n	8012d8e <HAL_GPIO_DeInit+0x9e>
 8012d84:	2302      	movs	r3, #2
 8012d86:	e002      	b.n	8012d8e <HAL_GPIO_DeInit+0x9e>
 8012d88:	2301      	movs	r3, #1
 8012d8a:	e000      	b.n	8012d8e <HAL_GPIO_DeInit+0x9e>
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	697a      	ldr	r2, [r7, #20]
 8012d90:	f002 0203 	and.w	r2, r2, #3
 8012d94:	0092      	lsls	r2, r2, #2
 8012d96:	4093      	lsls	r3, r2
 8012d98:	68fa      	ldr	r2, [r7, #12]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d132      	bne.n	8012e04 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8012d9e:	4b4d      	ldr	r3, [pc, #308]	; (8012ed4 <HAL_GPIO_DeInit+0x1e4>)
 8012da0:	681a      	ldr	r2, [r3, #0]
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	43db      	mvns	r3, r3
 8012da6:	494b      	ldr	r1, [pc, #300]	; (8012ed4 <HAL_GPIO_DeInit+0x1e4>)
 8012da8:	4013      	ands	r3, r2
 8012daa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8012dac:	4b49      	ldr	r3, [pc, #292]	; (8012ed4 <HAL_GPIO_DeInit+0x1e4>)
 8012dae:	685a      	ldr	r2, [r3, #4]
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	43db      	mvns	r3, r3
 8012db4:	4947      	ldr	r1, [pc, #284]	; (8012ed4 <HAL_GPIO_DeInit+0x1e4>)
 8012db6:	4013      	ands	r3, r2
 8012db8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8012dba:	4b46      	ldr	r3, [pc, #280]	; (8012ed4 <HAL_GPIO_DeInit+0x1e4>)
 8012dbc:	689a      	ldr	r2, [r3, #8]
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	43db      	mvns	r3, r3
 8012dc2:	4944      	ldr	r1, [pc, #272]	; (8012ed4 <HAL_GPIO_DeInit+0x1e4>)
 8012dc4:	4013      	ands	r3, r2
 8012dc6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8012dc8:	4b42      	ldr	r3, [pc, #264]	; (8012ed4 <HAL_GPIO_DeInit+0x1e4>)
 8012dca:	68da      	ldr	r2, [r3, #12]
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	43db      	mvns	r3, r3
 8012dd0:	4940      	ldr	r1, [pc, #256]	; (8012ed4 <HAL_GPIO_DeInit+0x1e4>)
 8012dd2:	4013      	ands	r3, r2
 8012dd4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	f003 0303 	and.w	r3, r3, #3
 8012ddc:	009b      	lsls	r3, r3, #2
 8012dde:	220f      	movs	r2, #15
 8012de0:	fa02 f303 	lsl.w	r3, r2, r3
 8012de4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8012de6:	4a34      	ldr	r2, [pc, #208]	; (8012eb8 <HAL_GPIO_DeInit+0x1c8>)
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	089b      	lsrs	r3, r3, #2
 8012dec:	3302      	adds	r3, #2
 8012dee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	43da      	mvns	r2, r3
 8012df6:	4830      	ldr	r0, [pc, #192]	; (8012eb8 <HAL_GPIO_DeInit+0x1c8>)
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	089b      	lsrs	r3, r3, #2
 8012dfc:	400a      	ands	r2, r1
 8012dfe:	3302      	adds	r3, #2
 8012e00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	005b      	lsls	r3, r3, #1
 8012e0c:	2103      	movs	r1, #3
 8012e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8012e12:	431a      	orrs	r2, r3
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	08da      	lsrs	r2, r3, #3
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	3208      	adds	r2, #8
 8012e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	f003 0307 	and.w	r3, r3, #7
 8012e2a:	009b      	lsls	r3, r3, #2
 8012e2c:	220f      	movs	r2, #15
 8012e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8012e32:	43db      	mvns	r3, r3
 8012e34:	697a      	ldr	r2, [r7, #20]
 8012e36:	08d2      	lsrs	r2, r2, #3
 8012e38:	4019      	ands	r1, r3
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	3208      	adds	r2, #8
 8012e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	689a      	ldr	r2, [r3, #8]
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	005b      	lsls	r3, r3, #1
 8012e4a:	2103      	movs	r1, #3
 8012e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8012e50:	43db      	mvns	r3, r3
 8012e52:	401a      	ands	r2, r3
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	685a      	ldr	r2, [r3, #4]
 8012e5c:	2101      	movs	r1, #1
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	fa01 f303 	lsl.w	r3, r1, r3
 8012e64:	43db      	mvns	r3, r3
 8012e66:	401a      	ands	r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	68da      	ldr	r2, [r3, #12]
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	005b      	lsls	r3, r3, #1
 8012e74:	2103      	movs	r1, #3
 8012e76:	fa01 f303 	lsl.w	r3, r1, r3
 8012e7a:	43db      	mvns	r3, r3
 8012e7c:	401a      	ands	r2, r3
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e86:	2101      	movs	r1, #1
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8012e8e:	43db      	mvns	r3, r3
 8012e90:	401a      	ands	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	3301      	adds	r3, #1
 8012e9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8012e9c:	683a      	ldr	r2, [r7, #0]
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	f47f af2b 	bne.w	8012d00 <HAL_GPIO_DeInit+0x10>
  }
}
 8012eaa:	bf00      	nop
 8012eac:	bf00      	nop
 8012eae:	371c      	adds	r7, #28
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb6:	4770      	bx	lr
 8012eb8:	40010000 	.word	0x40010000
 8012ebc:	48000400 	.word	0x48000400
 8012ec0:	48000800 	.word	0x48000800
 8012ec4:	48000c00 	.word	0x48000c00
 8012ec8:	48001000 	.word	0x48001000
 8012ecc:	48001400 	.word	0x48001400
 8012ed0:	48001800 	.word	0x48001800
 8012ed4:	40010400 	.word	0x40010400

08012ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012ed8:	b480      	push	{r7}
 8012eda:	b085      	sub	sp, #20
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
 8012ee0:	460b      	mov	r3, r1
 8012ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	691a      	ldr	r2, [r3, #16]
 8012ee8:	887b      	ldrh	r3, [r7, #2]
 8012eea:	4013      	ands	r3, r2
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d002      	beq.n	8012ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012ef0:	2301      	movs	r3, #1
 8012ef2:	73fb      	strb	r3, [r7, #15]
 8012ef4:	e001      	b.n	8012efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3714      	adds	r7, #20
 8012f00:	46bd      	mov	sp, r7
 8012f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f06:	4770      	bx	lr

08012f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b083      	sub	sp, #12
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	460b      	mov	r3, r1
 8012f12:	807b      	strh	r3, [r7, #2]
 8012f14:	4613      	mov	r3, r2
 8012f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012f18:	787b      	ldrb	r3, [r7, #1]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d003      	beq.n	8012f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012f1e:	887a      	ldrh	r2, [r7, #2]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8012f24:	e002      	b.n	8012f2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8012f26:	887a      	ldrh	r2, [r7, #2]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012f2c:	bf00      	nop
 8012f2e:	370c      	adds	r7, #12
 8012f30:	46bd      	mov	sp, r7
 8012f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f36:	4770      	bx	lr

08012f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	4603      	mov	r3, r0
 8012f40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8012f42:	4b08      	ldr	r3, [pc, #32]	; (8012f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012f44:	695a      	ldr	r2, [r3, #20]
 8012f46:	88fb      	ldrh	r3, [r7, #6]
 8012f48:	4013      	ands	r3, r2
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d006      	beq.n	8012f5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8012f4e:	4a05      	ldr	r2, [pc, #20]	; (8012f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012f50:	88fb      	ldrh	r3, [r7, #6]
 8012f52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012f54:	88fb      	ldrh	r3, [r7, #6]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f000 f806 	bl	8012f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8012f5c:	bf00      	nop
 8012f5e:	3708      	adds	r7, #8
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	40010400 	.word	0x40010400

08012f68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8012f72:	bf00      	nop
 8012f74:	370c      	adds	r7, #12
 8012f76:	46bd      	mov	sp, r7
 8012f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7c:	4770      	bx	lr
	...

08012f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8012f80:	b480      	push	{r7}
 8012f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8012f84:	4b04      	ldr	r3, [pc, #16]	; (8012f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f94:	4770      	bx	lr
 8012f96:	bf00      	nop
 8012f98:	40007000 	.word	0x40007000

08012f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b085      	sub	sp, #20
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012faa:	d130      	bne.n	801300e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8012fac:	4b23      	ldr	r3, [pc, #140]	; (801303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012fb8:	d038      	beq.n	801302c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8012fba:	4b20      	ldr	r3, [pc, #128]	; (801303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8012fc2:	4a1e      	ldr	r2, [pc, #120]	; (801303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8012fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8012fca:	4b1d      	ldr	r3, [pc, #116]	; (8013040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	2232      	movs	r2, #50	; 0x32
 8012fd0:	fb02 f303 	mul.w	r3, r2, r3
 8012fd4:	4a1b      	ldr	r2, [pc, #108]	; (8013044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8012fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8012fda:	0c9b      	lsrs	r3, r3, #18
 8012fdc:	3301      	adds	r3, #1
 8012fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8012fe0:	e002      	b.n	8012fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	3b01      	subs	r3, #1
 8012fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8012fe8:	4b14      	ldr	r3, [pc, #80]	; (801303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8012fea:	695b      	ldr	r3, [r3, #20]
 8012fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ff4:	d102      	bne.n	8012ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d1f2      	bne.n	8012fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8012ffc:	4b0f      	ldr	r3, [pc, #60]	; (801303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8012ffe:	695b      	ldr	r3, [r3, #20]
 8013000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013008:	d110      	bne.n	801302c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 801300a:	2303      	movs	r3, #3
 801300c:	e00f      	b.n	801302e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 801300e:	4b0b      	ldr	r3, [pc, #44]	; (801303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801301a:	d007      	beq.n	801302c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801301c:	4b07      	ldr	r3, [pc, #28]	; (801303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8013024:	4a05      	ldr	r2, [pc, #20]	; (801303c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801302a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 801302c:	2300      	movs	r3, #0
}
 801302e:	4618      	mov	r0, r3
 8013030:	3714      	adds	r7, #20
 8013032:	46bd      	mov	sp, r7
 8013034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013038:	4770      	bx	lr
 801303a:	bf00      	nop
 801303c:	40007000 	.word	0x40007000
 8013040:	20000000 	.word	0x20000000
 8013044:	431bde83 	.word	0x431bde83

08013048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b088      	sub	sp, #32
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d101      	bne.n	801305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013056:	2301      	movs	r3, #1
 8013058:	e3d4      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801305a:	4ba1      	ldr	r3, [pc, #644]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 801305c:	689b      	ldr	r3, [r3, #8]
 801305e:	f003 030c 	and.w	r3, r3, #12
 8013062:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013064:	4b9e      	ldr	r3, [pc, #632]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	f003 0303 	and.w	r3, r3, #3
 801306c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	f003 0310 	and.w	r3, r3, #16
 8013076:	2b00      	cmp	r3, #0
 8013078:	f000 80e4 	beq.w	8013244 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801307c:	69bb      	ldr	r3, [r7, #24]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d007      	beq.n	8013092 <HAL_RCC_OscConfig+0x4a>
 8013082:	69bb      	ldr	r3, [r7, #24]
 8013084:	2b0c      	cmp	r3, #12
 8013086:	f040 808b 	bne.w	80131a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	2b01      	cmp	r3, #1
 801308e:	f040 8087 	bne.w	80131a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8013092:	4b93      	ldr	r3, [pc, #588]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	f003 0302 	and.w	r3, r3, #2
 801309a:	2b00      	cmp	r3, #0
 801309c:	d005      	beq.n	80130aa <HAL_RCC_OscConfig+0x62>
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	699b      	ldr	r3, [r3, #24]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d101      	bne.n	80130aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80130a6:	2301      	movs	r3, #1
 80130a8:	e3ac      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6a1a      	ldr	r2, [r3, #32]
 80130ae:	4b8c      	ldr	r3, [pc, #560]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	f003 0308 	and.w	r3, r3, #8
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d004      	beq.n	80130c4 <HAL_RCC_OscConfig+0x7c>
 80130ba:	4b89      	ldr	r3, [pc, #548]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130c2:	e005      	b.n	80130d0 <HAL_RCC_OscConfig+0x88>
 80130c4:	4b86      	ldr	r3, [pc, #536]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80130c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80130ca:	091b      	lsrs	r3, r3, #4
 80130cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130d0:	4293      	cmp	r3, r2
 80130d2:	d223      	bcs.n	801311c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6a1b      	ldr	r3, [r3, #32]
 80130d8:	4618      	mov	r0, r3
 80130da:	f000 fd41 	bl	8013b60 <RCC_SetFlashLatencyFromMSIRange>
 80130de:	4603      	mov	r3, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d001      	beq.n	80130e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80130e4:	2301      	movs	r3, #1
 80130e6:	e38d      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80130e8:	4b7d      	ldr	r3, [pc, #500]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	4a7c      	ldr	r2, [pc, #496]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80130ee:	f043 0308 	orr.w	r3, r3, #8
 80130f2:	6013      	str	r3, [r2, #0]
 80130f4:	4b7a      	ldr	r3, [pc, #488]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6a1b      	ldr	r3, [r3, #32]
 8013100:	4977      	ldr	r1, [pc, #476]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013102:	4313      	orrs	r3, r2
 8013104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013106:	4b76      	ldr	r3, [pc, #472]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	69db      	ldr	r3, [r3, #28]
 8013112:	021b      	lsls	r3, r3, #8
 8013114:	4972      	ldr	r1, [pc, #456]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013116:	4313      	orrs	r3, r2
 8013118:	604b      	str	r3, [r1, #4]
 801311a:	e025      	b.n	8013168 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801311c:	4b70      	ldr	r3, [pc, #448]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4a6f      	ldr	r2, [pc, #444]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013122:	f043 0308 	orr.w	r3, r3, #8
 8013126:	6013      	str	r3, [r2, #0]
 8013128:	4b6d      	ldr	r3, [pc, #436]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6a1b      	ldr	r3, [r3, #32]
 8013134:	496a      	ldr	r1, [pc, #424]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013136:	4313      	orrs	r3, r2
 8013138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801313a:	4b69      	ldr	r3, [pc, #420]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	69db      	ldr	r3, [r3, #28]
 8013146:	021b      	lsls	r3, r3, #8
 8013148:	4965      	ldr	r1, [pc, #404]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 801314a:	4313      	orrs	r3, r2
 801314c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d109      	bne.n	8013168 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6a1b      	ldr	r3, [r3, #32]
 8013158:	4618      	mov	r0, r3
 801315a:	f000 fd01 	bl	8013b60 <RCC_SetFlashLatencyFromMSIRange>
 801315e:	4603      	mov	r3, r0
 8013160:	2b00      	cmp	r3, #0
 8013162:	d001      	beq.n	8013168 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8013164:	2301      	movs	r3, #1
 8013166:	e34d      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013168:	f000 fc36 	bl	80139d8 <HAL_RCC_GetSysClockFreq>
 801316c:	4602      	mov	r2, r0
 801316e:	4b5c      	ldr	r3, [pc, #368]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013170:	689b      	ldr	r3, [r3, #8]
 8013172:	091b      	lsrs	r3, r3, #4
 8013174:	f003 030f 	and.w	r3, r3, #15
 8013178:	495a      	ldr	r1, [pc, #360]	; (80132e4 <HAL_RCC_OscConfig+0x29c>)
 801317a:	5ccb      	ldrb	r3, [r1, r3]
 801317c:	f003 031f 	and.w	r3, r3, #31
 8013180:	fa22 f303 	lsr.w	r3, r2, r3
 8013184:	4a58      	ldr	r2, [pc, #352]	; (80132e8 <HAL_RCC_OscConfig+0x2a0>)
 8013186:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8013188:	4b58      	ldr	r3, [pc, #352]	; (80132ec <HAL_RCC_OscConfig+0x2a4>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4618      	mov	r0, r3
 801318e:	f7fe fa2d 	bl	80115ec <HAL_InitTick>
 8013192:	4603      	mov	r3, r0
 8013194:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8013196:	7bfb      	ldrb	r3, [r7, #15]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d052      	beq.n	8013242 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 801319c:	7bfb      	ldrb	r3, [r7, #15]
 801319e:	e331      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	699b      	ldr	r3, [r3, #24]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d032      	beq.n	801320e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80131a8:	4b4d      	ldr	r3, [pc, #308]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	4a4c      	ldr	r2, [pc, #304]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80131ae:	f043 0301 	orr.w	r3, r3, #1
 80131b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80131b4:	f7fe fa6a 	bl	801168c <HAL_GetTick>
 80131b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80131ba:	e008      	b.n	80131ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80131bc:	f7fe fa66 	bl	801168c <HAL_GetTick>
 80131c0:	4602      	mov	r2, r0
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	1ad3      	subs	r3, r2, r3
 80131c6:	2b02      	cmp	r3, #2
 80131c8:	d901      	bls.n	80131ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80131ca:	2303      	movs	r3, #3
 80131cc:	e31a      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80131ce:	4b44      	ldr	r3, [pc, #272]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	f003 0302 	and.w	r3, r3, #2
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d0f0      	beq.n	80131bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80131da:	4b41      	ldr	r3, [pc, #260]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	4a40      	ldr	r2, [pc, #256]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80131e0:	f043 0308 	orr.w	r3, r3, #8
 80131e4:	6013      	str	r3, [r2, #0]
 80131e6:	4b3e      	ldr	r3, [pc, #248]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	6a1b      	ldr	r3, [r3, #32]
 80131f2:	493b      	ldr	r1, [pc, #236]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80131f4:	4313      	orrs	r3, r2
 80131f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80131f8:	4b39      	ldr	r3, [pc, #228]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	69db      	ldr	r3, [r3, #28]
 8013204:	021b      	lsls	r3, r3, #8
 8013206:	4936      	ldr	r1, [pc, #216]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013208:	4313      	orrs	r3, r2
 801320a:	604b      	str	r3, [r1, #4]
 801320c:	e01a      	b.n	8013244 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801320e:	4b34      	ldr	r3, [pc, #208]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	4a33      	ldr	r2, [pc, #204]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013214:	f023 0301 	bic.w	r3, r3, #1
 8013218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801321a:	f7fe fa37 	bl	801168c <HAL_GetTick>
 801321e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8013220:	e008      	b.n	8013234 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013222:	f7fe fa33 	bl	801168c <HAL_GetTick>
 8013226:	4602      	mov	r2, r0
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	1ad3      	subs	r3, r2, r3
 801322c:	2b02      	cmp	r3, #2
 801322e:	d901      	bls.n	8013234 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8013230:	2303      	movs	r3, #3
 8013232:	e2e7      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8013234:	4b2a      	ldr	r3, [pc, #168]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f003 0302 	and.w	r3, r3, #2
 801323c:	2b00      	cmp	r3, #0
 801323e:	d1f0      	bne.n	8013222 <HAL_RCC_OscConfig+0x1da>
 8013240:	e000      	b.n	8013244 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8013242:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	f003 0301 	and.w	r3, r3, #1
 801324c:	2b00      	cmp	r3, #0
 801324e:	d074      	beq.n	801333a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8013250:	69bb      	ldr	r3, [r7, #24]
 8013252:	2b08      	cmp	r3, #8
 8013254:	d005      	beq.n	8013262 <HAL_RCC_OscConfig+0x21a>
 8013256:	69bb      	ldr	r3, [r7, #24]
 8013258:	2b0c      	cmp	r3, #12
 801325a:	d10e      	bne.n	801327a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	2b03      	cmp	r3, #3
 8013260:	d10b      	bne.n	801327a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013262:	4b1f      	ldr	r3, [pc, #124]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801326a:	2b00      	cmp	r3, #0
 801326c:	d064      	beq.n	8013338 <HAL_RCC_OscConfig+0x2f0>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d160      	bne.n	8013338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8013276:	2301      	movs	r3, #1
 8013278:	e2c4      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013282:	d106      	bne.n	8013292 <HAL_RCC_OscConfig+0x24a>
 8013284:	4b16      	ldr	r3, [pc, #88]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4a15      	ldr	r2, [pc, #84]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 801328a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801328e:	6013      	str	r3, [r2, #0]
 8013290:	e01d      	b.n	80132ce <HAL_RCC_OscConfig+0x286>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801329a:	d10c      	bne.n	80132b6 <HAL_RCC_OscConfig+0x26e>
 801329c:	4b10      	ldr	r3, [pc, #64]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	4a0f      	ldr	r2, [pc, #60]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80132a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80132a6:	6013      	str	r3, [r2, #0]
 80132a8:	4b0d      	ldr	r3, [pc, #52]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	4a0c      	ldr	r2, [pc, #48]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80132ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80132b2:	6013      	str	r3, [r2, #0]
 80132b4:	e00b      	b.n	80132ce <HAL_RCC_OscConfig+0x286>
 80132b6:	4b0a      	ldr	r3, [pc, #40]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	4a09      	ldr	r2, [pc, #36]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80132bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80132c0:	6013      	str	r3, [r2, #0]
 80132c2:	4b07      	ldr	r3, [pc, #28]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	4a06      	ldr	r2, [pc, #24]	; (80132e0 <HAL_RCC_OscConfig+0x298>)
 80132c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80132cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d01c      	beq.n	8013310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80132d6:	f7fe f9d9 	bl	801168c <HAL_GetTick>
 80132da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80132dc:	e011      	b.n	8013302 <HAL_RCC_OscConfig+0x2ba>
 80132de:	bf00      	nop
 80132e0:	40021000 	.word	0x40021000
 80132e4:	08017038 	.word	0x08017038
 80132e8:	20000000 	.word	0x20000000
 80132ec:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80132f0:	f7fe f9cc 	bl	801168c <HAL_GetTick>
 80132f4:	4602      	mov	r2, r0
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	1ad3      	subs	r3, r2, r3
 80132fa:	2b64      	cmp	r3, #100	; 0x64
 80132fc:	d901      	bls.n	8013302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80132fe:	2303      	movs	r3, #3
 8013300:	e280      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013302:	4baf      	ldr	r3, [pc, #700]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801330a:	2b00      	cmp	r3, #0
 801330c:	d0f0      	beq.n	80132f0 <HAL_RCC_OscConfig+0x2a8>
 801330e:	e014      	b.n	801333a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013310:	f7fe f9bc 	bl	801168c <HAL_GetTick>
 8013314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013316:	e008      	b.n	801332a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013318:	f7fe f9b8 	bl	801168c <HAL_GetTick>
 801331c:	4602      	mov	r2, r0
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	1ad3      	subs	r3, r2, r3
 8013322:	2b64      	cmp	r3, #100	; 0x64
 8013324:	d901      	bls.n	801332a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8013326:	2303      	movs	r3, #3
 8013328:	e26c      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801332a:	4ba5      	ldr	r3, [pc, #660]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013332:	2b00      	cmp	r3, #0
 8013334:	d1f0      	bne.n	8013318 <HAL_RCC_OscConfig+0x2d0>
 8013336:	e000      	b.n	801333a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	f003 0302 	and.w	r3, r3, #2
 8013342:	2b00      	cmp	r3, #0
 8013344:	d060      	beq.n	8013408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8013346:	69bb      	ldr	r3, [r7, #24]
 8013348:	2b04      	cmp	r3, #4
 801334a:	d005      	beq.n	8013358 <HAL_RCC_OscConfig+0x310>
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	2b0c      	cmp	r3, #12
 8013350:	d119      	bne.n	8013386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	2b02      	cmp	r3, #2
 8013356:	d116      	bne.n	8013386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013358:	4b99      	ldr	r3, [pc, #612]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013360:	2b00      	cmp	r3, #0
 8013362:	d005      	beq.n	8013370 <HAL_RCC_OscConfig+0x328>
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	68db      	ldr	r3, [r3, #12]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d101      	bne.n	8013370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 801336c:	2301      	movs	r3, #1
 801336e:	e249      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013370:	4b93      	ldr	r3, [pc, #588]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013372:	685b      	ldr	r3, [r3, #4]
 8013374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	691b      	ldr	r3, [r3, #16]
 801337c:	061b      	lsls	r3, r3, #24
 801337e:	4990      	ldr	r1, [pc, #576]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013380:	4313      	orrs	r3, r2
 8013382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013384:	e040      	b.n	8013408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	68db      	ldr	r3, [r3, #12]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d023      	beq.n	80133d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801338e:	4b8c      	ldr	r3, [pc, #560]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	4a8b      	ldr	r2, [pc, #556]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801339a:	f7fe f977 	bl	801168c <HAL_GetTick>
 801339e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80133a0:	e008      	b.n	80133b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80133a2:	f7fe f973 	bl	801168c <HAL_GetTick>
 80133a6:	4602      	mov	r2, r0
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	1ad3      	subs	r3, r2, r3
 80133ac:	2b02      	cmp	r3, #2
 80133ae:	d901      	bls.n	80133b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80133b0:	2303      	movs	r3, #3
 80133b2:	e227      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80133b4:	4b82      	ldr	r3, [pc, #520]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d0f0      	beq.n	80133a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80133c0:	4b7f      	ldr	r3, [pc, #508]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	691b      	ldr	r3, [r3, #16]
 80133cc:	061b      	lsls	r3, r3, #24
 80133ce:	497c      	ldr	r1, [pc, #496]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 80133d0:	4313      	orrs	r3, r2
 80133d2:	604b      	str	r3, [r1, #4]
 80133d4:	e018      	b.n	8013408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80133d6:	4b7a      	ldr	r3, [pc, #488]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	4a79      	ldr	r2, [pc, #484]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 80133dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80133e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80133e2:	f7fe f953 	bl	801168c <HAL_GetTick>
 80133e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80133e8:	e008      	b.n	80133fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80133ea:	f7fe f94f 	bl	801168c <HAL_GetTick>
 80133ee:	4602      	mov	r2, r0
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	1ad3      	subs	r3, r2, r3
 80133f4:	2b02      	cmp	r3, #2
 80133f6:	d901      	bls.n	80133fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80133f8:	2303      	movs	r3, #3
 80133fa:	e203      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80133fc:	4b70      	ldr	r3, [pc, #448]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013404:	2b00      	cmp	r3, #0
 8013406:	d1f0      	bne.n	80133ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f003 0308 	and.w	r3, r3, #8
 8013410:	2b00      	cmp	r3, #0
 8013412:	d03c      	beq.n	801348e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	695b      	ldr	r3, [r3, #20]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d01c      	beq.n	8013456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801341c:	4b68      	ldr	r3, [pc, #416]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 801341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013422:	4a67      	ldr	r2, [pc, #412]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013424:	f043 0301 	orr.w	r3, r3, #1
 8013428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801342c:	f7fe f92e 	bl	801168c <HAL_GetTick>
 8013430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013432:	e008      	b.n	8013446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013434:	f7fe f92a 	bl	801168c <HAL_GetTick>
 8013438:	4602      	mov	r2, r0
 801343a:	693b      	ldr	r3, [r7, #16]
 801343c:	1ad3      	subs	r3, r2, r3
 801343e:	2b02      	cmp	r3, #2
 8013440:	d901      	bls.n	8013446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8013442:	2303      	movs	r3, #3
 8013444:	e1de      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013446:	4b5e      	ldr	r3, [pc, #376]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801344c:	f003 0302 	and.w	r3, r3, #2
 8013450:	2b00      	cmp	r3, #0
 8013452:	d0ef      	beq.n	8013434 <HAL_RCC_OscConfig+0x3ec>
 8013454:	e01b      	b.n	801348e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013456:	4b5a      	ldr	r3, [pc, #360]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801345c:	4a58      	ldr	r2, [pc, #352]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 801345e:	f023 0301 	bic.w	r3, r3, #1
 8013462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013466:	f7fe f911 	bl	801168c <HAL_GetTick>
 801346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801346c:	e008      	b.n	8013480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801346e:	f7fe f90d 	bl	801168c <HAL_GetTick>
 8013472:	4602      	mov	r2, r0
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	1ad3      	subs	r3, r2, r3
 8013478:	2b02      	cmp	r3, #2
 801347a:	d901      	bls.n	8013480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 801347c:	2303      	movs	r3, #3
 801347e:	e1c1      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013480:	4b4f      	ldr	r3, [pc, #316]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013486:	f003 0302 	and.w	r3, r3, #2
 801348a:	2b00      	cmp	r3, #0
 801348c:	d1ef      	bne.n	801346e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	f003 0304 	and.w	r3, r3, #4
 8013496:	2b00      	cmp	r3, #0
 8013498:	f000 80a6 	beq.w	80135e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 801349c:	2300      	movs	r3, #0
 801349e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80134a0:	4b47      	ldr	r3, [pc, #284]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 80134a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d10d      	bne.n	80134c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80134ac:	4b44      	ldr	r3, [pc, #272]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 80134ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134b0:	4a43      	ldr	r2, [pc, #268]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 80134b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80134b6:	6593      	str	r3, [r2, #88]	; 0x58
 80134b8:	4b41      	ldr	r3, [pc, #260]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 80134ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80134c0:	60bb      	str	r3, [r7, #8]
 80134c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80134c4:	2301      	movs	r3, #1
 80134c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80134c8:	4b3e      	ldr	r3, [pc, #248]	; (80135c4 <HAL_RCC_OscConfig+0x57c>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d118      	bne.n	8013506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80134d4:	4b3b      	ldr	r3, [pc, #236]	; (80135c4 <HAL_RCC_OscConfig+0x57c>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	4a3a      	ldr	r2, [pc, #232]	; (80135c4 <HAL_RCC_OscConfig+0x57c>)
 80134da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80134de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80134e0:	f7fe f8d4 	bl	801168c <HAL_GetTick>
 80134e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80134e6:	e008      	b.n	80134fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80134e8:	f7fe f8d0 	bl	801168c <HAL_GetTick>
 80134ec:	4602      	mov	r2, r0
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	1ad3      	subs	r3, r2, r3
 80134f2:	2b02      	cmp	r3, #2
 80134f4:	d901      	bls.n	80134fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80134f6:	2303      	movs	r3, #3
 80134f8:	e184      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80134fa:	4b32      	ldr	r3, [pc, #200]	; (80135c4 <HAL_RCC_OscConfig+0x57c>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013502:	2b00      	cmp	r3, #0
 8013504:	d0f0      	beq.n	80134e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	689b      	ldr	r3, [r3, #8]
 801350a:	2b01      	cmp	r3, #1
 801350c:	d108      	bne.n	8013520 <HAL_RCC_OscConfig+0x4d8>
 801350e:	4b2c      	ldr	r3, [pc, #176]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013514:	4a2a      	ldr	r2, [pc, #168]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013516:	f043 0301 	orr.w	r3, r3, #1
 801351a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801351e:	e024      	b.n	801356a <HAL_RCC_OscConfig+0x522>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	689b      	ldr	r3, [r3, #8]
 8013524:	2b05      	cmp	r3, #5
 8013526:	d110      	bne.n	801354a <HAL_RCC_OscConfig+0x502>
 8013528:	4b25      	ldr	r3, [pc, #148]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 801352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801352e:	4a24      	ldr	r2, [pc, #144]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013530:	f043 0304 	orr.w	r3, r3, #4
 8013534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013538:	4b21      	ldr	r3, [pc, #132]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 801353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801353e:	4a20      	ldr	r2, [pc, #128]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013540:	f043 0301 	orr.w	r3, r3, #1
 8013544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013548:	e00f      	b.n	801356a <HAL_RCC_OscConfig+0x522>
 801354a:	4b1d      	ldr	r3, [pc, #116]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 801354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013550:	4a1b      	ldr	r2, [pc, #108]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013552:	f023 0301 	bic.w	r3, r3, #1
 8013556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801355a:	4b19      	ldr	r3, [pc, #100]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 801355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013560:	4a17      	ldr	r2, [pc, #92]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013562:	f023 0304 	bic.w	r3, r3, #4
 8013566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	689b      	ldr	r3, [r3, #8]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d016      	beq.n	80135a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013572:	f7fe f88b 	bl	801168c <HAL_GetTick>
 8013576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013578:	e00a      	b.n	8013590 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801357a:	f7fe f887 	bl	801168c <HAL_GetTick>
 801357e:	4602      	mov	r2, r0
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	1ad3      	subs	r3, r2, r3
 8013584:	f241 3288 	movw	r2, #5000	; 0x1388
 8013588:	4293      	cmp	r3, r2
 801358a:	d901      	bls.n	8013590 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 801358c:	2303      	movs	r3, #3
 801358e:	e139      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013590:	4b0b      	ldr	r3, [pc, #44]	; (80135c0 <HAL_RCC_OscConfig+0x578>)
 8013592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013596:	f003 0302 	and.w	r3, r3, #2
 801359a:	2b00      	cmp	r3, #0
 801359c:	d0ed      	beq.n	801357a <HAL_RCC_OscConfig+0x532>
 801359e:	e01a      	b.n	80135d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80135a0:	f7fe f874 	bl	801168c <HAL_GetTick>
 80135a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80135a6:	e00f      	b.n	80135c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80135a8:	f7fe f870 	bl	801168c <HAL_GetTick>
 80135ac:	4602      	mov	r2, r0
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	1ad3      	subs	r3, r2, r3
 80135b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d906      	bls.n	80135c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80135ba:	2303      	movs	r3, #3
 80135bc:	e122      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
 80135be:	bf00      	nop
 80135c0:	40021000 	.word	0x40021000
 80135c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80135c8:	4b90      	ldr	r3, [pc, #576]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80135ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80135ce:	f003 0302 	and.w	r3, r3, #2
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d1e8      	bne.n	80135a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80135d6:	7ffb      	ldrb	r3, [r7, #31]
 80135d8:	2b01      	cmp	r3, #1
 80135da:	d105      	bne.n	80135e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80135dc:	4b8b      	ldr	r3, [pc, #556]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80135de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135e0:	4a8a      	ldr	r2, [pc, #552]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80135e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80135e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f000 8108 	beq.w	8013802 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135f6:	2b02      	cmp	r3, #2
 80135f8:	f040 80d0 	bne.w	801379c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80135fc:	4b83      	ldr	r3, [pc, #524]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80135fe:	68db      	ldr	r3, [r3, #12]
 8013600:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	f003 0203 	and.w	r2, r3, #3
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801360c:	429a      	cmp	r2, r3
 801360e:	d130      	bne.n	8013672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801361a:	3b01      	subs	r3, #1
 801361c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801361e:	429a      	cmp	r2, r3
 8013620:	d127      	bne.n	8013672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801362c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801362e:	429a      	cmp	r2, r3
 8013630:	d11f      	bne.n	8013672 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013638:	687a      	ldr	r2, [r7, #4]
 801363a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801363c:	2a07      	cmp	r2, #7
 801363e:	bf14      	ite	ne
 8013640:	2201      	movne	r2, #1
 8013642:	2200      	moveq	r2, #0
 8013644:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013646:	4293      	cmp	r3, r2
 8013648:	d113      	bne.n	8013672 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013654:	085b      	lsrs	r3, r3, #1
 8013656:	3b01      	subs	r3, #1
 8013658:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 801365a:	429a      	cmp	r2, r3
 801365c:	d109      	bne.n	8013672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013668:	085b      	lsrs	r3, r3, #1
 801366a:	3b01      	subs	r3, #1
 801366c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801366e:	429a      	cmp	r2, r3
 8013670:	d06e      	beq.n	8013750 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013672:	69bb      	ldr	r3, [r7, #24]
 8013674:	2b0c      	cmp	r3, #12
 8013676:	d069      	beq.n	801374c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8013678:	4b64      	ldr	r3, [pc, #400]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013680:	2b00      	cmp	r3, #0
 8013682:	d105      	bne.n	8013690 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8013684:	4b61      	ldr	r3, [pc, #388]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801368c:	2b00      	cmp	r3, #0
 801368e:	d001      	beq.n	8013694 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8013690:	2301      	movs	r3, #1
 8013692:	e0b7      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8013694:	4b5d      	ldr	r3, [pc, #372]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	4a5c      	ldr	r2, [pc, #368]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 801369a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801369e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80136a0:	f7fd fff4 	bl	801168c <HAL_GetTick>
 80136a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80136a6:	e008      	b.n	80136ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80136a8:	f7fd fff0 	bl	801168c <HAL_GetTick>
 80136ac:	4602      	mov	r2, r0
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	1ad3      	subs	r3, r2, r3
 80136b2:	2b02      	cmp	r3, #2
 80136b4:	d901      	bls.n	80136ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80136b6:	2303      	movs	r3, #3
 80136b8:	e0a4      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80136ba:	4b54      	ldr	r3, [pc, #336]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d1f0      	bne.n	80136a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80136c6:	4b51      	ldr	r3, [pc, #324]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80136c8:	68da      	ldr	r2, [r3, #12]
 80136ca:	4b51      	ldr	r3, [pc, #324]	; (8013810 <HAL_RCC_OscConfig+0x7c8>)
 80136cc:	4013      	ands	r3, r2
 80136ce:	687a      	ldr	r2, [r7, #4]
 80136d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80136d6:	3a01      	subs	r2, #1
 80136d8:	0112      	lsls	r2, r2, #4
 80136da:	4311      	orrs	r1, r2
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80136e0:	0212      	lsls	r2, r2, #8
 80136e2:	4311      	orrs	r1, r2
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80136e8:	0852      	lsrs	r2, r2, #1
 80136ea:	3a01      	subs	r2, #1
 80136ec:	0552      	lsls	r2, r2, #21
 80136ee:	4311      	orrs	r1, r2
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80136f4:	0852      	lsrs	r2, r2, #1
 80136f6:	3a01      	subs	r2, #1
 80136f8:	0652      	lsls	r2, r2, #25
 80136fa:	4311      	orrs	r1, r2
 80136fc:	687a      	ldr	r2, [r7, #4]
 80136fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013700:	0912      	lsrs	r2, r2, #4
 8013702:	0452      	lsls	r2, r2, #17
 8013704:	430a      	orrs	r2, r1
 8013706:	4941      	ldr	r1, [pc, #260]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 8013708:	4313      	orrs	r3, r2
 801370a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801370c:	4b3f      	ldr	r3, [pc, #252]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	4a3e      	ldr	r2, [pc, #248]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 8013712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013718:	4b3c      	ldr	r3, [pc, #240]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	4a3b      	ldr	r2, [pc, #236]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 801371e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8013724:	f7fd ffb2 	bl	801168c <HAL_GetTick>
 8013728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801372a:	e008      	b.n	801373e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801372c:	f7fd ffae 	bl	801168c <HAL_GetTick>
 8013730:	4602      	mov	r2, r0
 8013732:	693b      	ldr	r3, [r7, #16]
 8013734:	1ad3      	subs	r3, r2, r3
 8013736:	2b02      	cmp	r3, #2
 8013738:	d901      	bls.n	801373e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 801373a:	2303      	movs	r3, #3
 801373c:	e062      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801373e:	4b33      	ldr	r3, [pc, #204]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013746:	2b00      	cmp	r3, #0
 8013748:	d0f0      	beq.n	801372c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801374a:	e05a      	b.n	8013802 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801374c:	2301      	movs	r3, #1
 801374e:	e059      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013750:	4b2e      	ldr	r3, [pc, #184]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013758:	2b00      	cmp	r3, #0
 801375a:	d152      	bne.n	8013802 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801375c:	4b2b      	ldr	r3, [pc, #172]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	4a2a      	ldr	r2, [pc, #168]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 8013762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013768:	4b28      	ldr	r3, [pc, #160]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 801376a:	68db      	ldr	r3, [r3, #12]
 801376c:	4a27      	ldr	r2, [pc, #156]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 801376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8013774:	f7fd ff8a 	bl	801168c <HAL_GetTick>
 8013778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801377a:	e008      	b.n	801378e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801377c:	f7fd ff86 	bl	801168c <HAL_GetTick>
 8013780:	4602      	mov	r2, r0
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	1ad3      	subs	r3, r2, r3
 8013786:	2b02      	cmp	r3, #2
 8013788:	d901      	bls.n	801378e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 801378a:	2303      	movs	r3, #3
 801378c:	e03a      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801378e:	4b1f      	ldr	r3, [pc, #124]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013796:	2b00      	cmp	r3, #0
 8013798:	d0f0      	beq.n	801377c <HAL_RCC_OscConfig+0x734>
 801379a:	e032      	b.n	8013802 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801379c:	69bb      	ldr	r3, [r7, #24]
 801379e:	2b0c      	cmp	r3, #12
 80137a0:	d02d      	beq.n	80137fe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80137a2:	4b1a      	ldr	r3, [pc, #104]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	4a19      	ldr	r2, [pc, #100]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80137a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80137ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80137ae:	4b17      	ldr	r3, [pc, #92]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d105      	bne.n	80137c6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80137ba:	4b14      	ldr	r3, [pc, #80]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80137bc:	68db      	ldr	r3, [r3, #12]
 80137be:	4a13      	ldr	r2, [pc, #76]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80137c0:	f023 0303 	bic.w	r3, r3, #3
 80137c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80137c6:	4b11      	ldr	r3, [pc, #68]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80137c8:	68db      	ldr	r3, [r3, #12]
 80137ca:	4a10      	ldr	r2, [pc, #64]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80137cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80137d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80137d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80137d6:	f7fd ff59 	bl	801168c <HAL_GetTick>
 80137da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80137dc:	e008      	b.n	80137f0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80137de:	f7fd ff55 	bl	801168c <HAL_GetTick>
 80137e2:	4602      	mov	r2, r0
 80137e4:	693b      	ldr	r3, [r7, #16]
 80137e6:	1ad3      	subs	r3, r2, r3
 80137e8:	2b02      	cmp	r3, #2
 80137ea:	d901      	bls.n	80137f0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80137ec:	2303      	movs	r3, #3
 80137ee:	e009      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80137f0:	4b06      	ldr	r3, [pc, #24]	; (801380c <HAL_RCC_OscConfig+0x7c4>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d1f0      	bne.n	80137de <HAL_RCC_OscConfig+0x796>
 80137fc:	e001      	b.n	8013802 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80137fe:	2301      	movs	r3, #1
 8013800:	e000      	b.n	8013804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8013802:	2300      	movs	r3, #0
}
 8013804:	4618      	mov	r0, r3
 8013806:	3720      	adds	r7, #32
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	40021000 	.word	0x40021000
 8013810:	f99d808c 	.word	0xf99d808c

08013814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b084      	sub	sp, #16
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d101      	bne.n	8013828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013824:	2301      	movs	r3, #1
 8013826:	e0c8      	b.n	80139ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013828:	4b66      	ldr	r3, [pc, #408]	; (80139c4 <HAL_RCC_ClockConfig+0x1b0>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	f003 0307 	and.w	r3, r3, #7
 8013830:	683a      	ldr	r2, [r7, #0]
 8013832:	429a      	cmp	r2, r3
 8013834:	d910      	bls.n	8013858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013836:	4b63      	ldr	r3, [pc, #396]	; (80139c4 <HAL_RCC_ClockConfig+0x1b0>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	f023 0207 	bic.w	r2, r3, #7
 801383e:	4961      	ldr	r1, [pc, #388]	; (80139c4 <HAL_RCC_ClockConfig+0x1b0>)
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	4313      	orrs	r3, r2
 8013844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013846:	4b5f      	ldr	r3, [pc, #380]	; (80139c4 <HAL_RCC_ClockConfig+0x1b0>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	f003 0307 	and.w	r3, r3, #7
 801384e:	683a      	ldr	r2, [r7, #0]
 8013850:	429a      	cmp	r2, r3
 8013852:	d001      	beq.n	8013858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8013854:	2301      	movs	r3, #1
 8013856:	e0b0      	b.n	80139ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	f003 0301 	and.w	r3, r3, #1
 8013860:	2b00      	cmp	r3, #0
 8013862:	d04c      	beq.n	80138fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	2b03      	cmp	r3, #3
 801386a:	d107      	bne.n	801387c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801386c:	4b56      	ldr	r3, [pc, #344]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013874:	2b00      	cmp	r3, #0
 8013876:	d121      	bne.n	80138bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8013878:	2301      	movs	r3, #1
 801387a:	e09e      	b.n	80139ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	685b      	ldr	r3, [r3, #4]
 8013880:	2b02      	cmp	r3, #2
 8013882:	d107      	bne.n	8013894 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013884:	4b50      	ldr	r3, [pc, #320]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801388c:	2b00      	cmp	r3, #0
 801388e:	d115      	bne.n	80138bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8013890:	2301      	movs	r3, #1
 8013892:	e092      	b.n	80139ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d107      	bne.n	80138ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801389c:	4b4a      	ldr	r3, [pc, #296]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f003 0302 	and.w	r3, r3, #2
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d109      	bne.n	80138bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80138a8:	2301      	movs	r3, #1
 80138aa:	e086      	b.n	80139ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80138ac:	4b46      	ldr	r3, [pc, #280]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d101      	bne.n	80138bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80138b8:	2301      	movs	r3, #1
 80138ba:	e07e      	b.n	80139ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80138bc:	4b42      	ldr	r3, [pc, #264]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 80138be:	689b      	ldr	r3, [r3, #8]
 80138c0:	f023 0203 	bic.w	r2, r3, #3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	685b      	ldr	r3, [r3, #4]
 80138c8:	493f      	ldr	r1, [pc, #252]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 80138ca:	4313      	orrs	r3, r2
 80138cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80138ce:	f7fd fedd 	bl	801168c <HAL_GetTick>
 80138d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80138d4:	e00a      	b.n	80138ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80138d6:	f7fd fed9 	bl	801168c <HAL_GetTick>
 80138da:	4602      	mov	r2, r0
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	1ad3      	subs	r3, r2, r3
 80138e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80138e4:	4293      	cmp	r3, r2
 80138e6:	d901      	bls.n	80138ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80138e8:	2303      	movs	r3, #3
 80138ea:	e066      	b.n	80139ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80138ec:	4b36      	ldr	r3, [pc, #216]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 80138ee:	689b      	ldr	r3, [r3, #8]
 80138f0:	f003 020c 	and.w	r2, r3, #12
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	009b      	lsls	r3, r3, #2
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d1eb      	bne.n	80138d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f003 0302 	and.w	r3, r3, #2
 8013906:	2b00      	cmp	r3, #0
 8013908:	d008      	beq.n	801391c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801390a:	4b2f      	ldr	r3, [pc, #188]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 801390c:	689b      	ldr	r3, [r3, #8]
 801390e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	689b      	ldr	r3, [r3, #8]
 8013916:	492c      	ldr	r1, [pc, #176]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 8013918:	4313      	orrs	r3, r2
 801391a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801391c:	4b29      	ldr	r3, [pc, #164]	; (80139c4 <HAL_RCC_ClockConfig+0x1b0>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	f003 0307 	and.w	r3, r3, #7
 8013924:	683a      	ldr	r2, [r7, #0]
 8013926:	429a      	cmp	r2, r3
 8013928:	d210      	bcs.n	801394c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801392a:	4b26      	ldr	r3, [pc, #152]	; (80139c4 <HAL_RCC_ClockConfig+0x1b0>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	f023 0207 	bic.w	r2, r3, #7
 8013932:	4924      	ldr	r1, [pc, #144]	; (80139c4 <HAL_RCC_ClockConfig+0x1b0>)
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	4313      	orrs	r3, r2
 8013938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801393a:	4b22      	ldr	r3, [pc, #136]	; (80139c4 <HAL_RCC_ClockConfig+0x1b0>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	f003 0307 	and.w	r3, r3, #7
 8013942:	683a      	ldr	r2, [r7, #0]
 8013944:	429a      	cmp	r2, r3
 8013946:	d001      	beq.n	801394c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8013948:	2301      	movs	r3, #1
 801394a:	e036      	b.n	80139ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	f003 0304 	and.w	r3, r3, #4
 8013954:	2b00      	cmp	r3, #0
 8013956:	d008      	beq.n	801396a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013958:	4b1b      	ldr	r3, [pc, #108]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 801395a:	689b      	ldr	r3, [r3, #8]
 801395c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	4918      	ldr	r1, [pc, #96]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 8013966:	4313      	orrs	r3, r2
 8013968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	f003 0308 	and.w	r3, r3, #8
 8013972:	2b00      	cmp	r3, #0
 8013974:	d009      	beq.n	801398a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013976:	4b14      	ldr	r3, [pc, #80]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 8013978:	689b      	ldr	r3, [r3, #8]
 801397a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	691b      	ldr	r3, [r3, #16]
 8013982:	00db      	lsls	r3, r3, #3
 8013984:	4910      	ldr	r1, [pc, #64]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 8013986:	4313      	orrs	r3, r2
 8013988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801398a:	f000 f825 	bl	80139d8 <HAL_RCC_GetSysClockFreq>
 801398e:	4602      	mov	r2, r0
 8013990:	4b0d      	ldr	r3, [pc, #52]	; (80139c8 <HAL_RCC_ClockConfig+0x1b4>)
 8013992:	689b      	ldr	r3, [r3, #8]
 8013994:	091b      	lsrs	r3, r3, #4
 8013996:	f003 030f 	and.w	r3, r3, #15
 801399a:	490c      	ldr	r1, [pc, #48]	; (80139cc <HAL_RCC_ClockConfig+0x1b8>)
 801399c:	5ccb      	ldrb	r3, [r1, r3]
 801399e:	f003 031f 	and.w	r3, r3, #31
 80139a2:	fa22 f303 	lsr.w	r3, r2, r3
 80139a6:	4a0a      	ldr	r2, [pc, #40]	; (80139d0 <HAL_RCC_ClockConfig+0x1bc>)
 80139a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80139aa:	4b0a      	ldr	r3, [pc, #40]	; (80139d4 <HAL_RCC_ClockConfig+0x1c0>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7fd fe1c 	bl	80115ec <HAL_InitTick>
 80139b4:	4603      	mov	r3, r0
 80139b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80139b8:	7afb      	ldrb	r3, [r7, #11]
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3710      	adds	r7, #16
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}
 80139c2:	bf00      	nop
 80139c4:	40022000 	.word	0x40022000
 80139c8:	40021000 	.word	0x40021000
 80139cc:	08017038 	.word	0x08017038
 80139d0:	20000000 	.word	0x20000000
 80139d4:	2000000c 	.word	0x2000000c

080139d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80139d8:	b480      	push	{r7}
 80139da:	b089      	sub	sp, #36	; 0x24
 80139dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80139de:	2300      	movs	r3, #0
 80139e0:	61fb      	str	r3, [r7, #28]
 80139e2:	2300      	movs	r3, #0
 80139e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80139e6:	4b3e      	ldr	r3, [pc, #248]	; (8013ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 80139e8:	689b      	ldr	r3, [r3, #8]
 80139ea:	f003 030c 	and.w	r3, r3, #12
 80139ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80139f0:	4b3b      	ldr	r3, [pc, #236]	; (8013ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 80139f2:	68db      	ldr	r3, [r3, #12]
 80139f4:	f003 0303 	and.w	r3, r3, #3
 80139f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d005      	beq.n	8013a0c <HAL_RCC_GetSysClockFreq+0x34>
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	2b0c      	cmp	r3, #12
 8013a04:	d121      	bne.n	8013a4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	2b01      	cmp	r3, #1
 8013a0a:	d11e      	bne.n	8013a4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8013a0c:	4b34      	ldr	r3, [pc, #208]	; (8013ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	f003 0308 	and.w	r3, r3, #8
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d107      	bne.n	8013a28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8013a18:	4b31      	ldr	r3, [pc, #196]	; (8013ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8013a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013a1e:	0a1b      	lsrs	r3, r3, #8
 8013a20:	f003 030f 	and.w	r3, r3, #15
 8013a24:	61fb      	str	r3, [r7, #28]
 8013a26:	e005      	b.n	8013a34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8013a28:	4b2d      	ldr	r3, [pc, #180]	; (8013ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	091b      	lsrs	r3, r3, #4
 8013a2e:	f003 030f 	and.w	r3, r3, #15
 8013a32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8013a34:	4a2b      	ldr	r2, [pc, #172]	; (8013ae4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8013a36:	69fb      	ldr	r3, [r7, #28]
 8013a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d10d      	bne.n	8013a60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8013a48:	e00a      	b.n	8013a60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	2b04      	cmp	r3, #4
 8013a4e:	d102      	bne.n	8013a56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8013a50:	4b25      	ldr	r3, [pc, #148]	; (8013ae8 <HAL_RCC_GetSysClockFreq+0x110>)
 8013a52:	61bb      	str	r3, [r7, #24]
 8013a54:	e004      	b.n	8013a60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8013a56:	693b      	ldr	r3, [r7, #16]
 8013a58:	2b08      	cmp	r3, #8
 8013a5a:	d101      	bne.n	8013a60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8013a5c:	4b23      	ldr	r3, [pc, #140]	; (8013aec <HAL_RCC_GetSysClockFreq+0x114>)
 8013a5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	2b0c      	cmp	r3, #12
 8013a64:	d134      	bne.n	8013ad0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8013a66:	4b1e      	ldr	r3, [pc, #120]	; (8013ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8013a68:	68db      	ldr	r3, [r3, #12]
 8013a6a:	f003 0303 	and.w	r3, r3, #3
 8013a6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	2b02      	cmp	r3, #2
 8013a74:	d003      	beq.n	8013a7e <HAL_RCC_GetSysClockFreq+0xa6>
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	2b03      	cmp	r3, #3
 8013a7a:	d003      	beq.n	8013a84 <HAL_RCC_GetSysClockFreq+0xac>
 8013a7c:	e005      	b.n	8013a8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8013a7e:	4b1a      	ldr	r3, [pc, #104]	; (8013ae8 <HAL_RCC_GetSysClockFreq+0x110>)
 8013a80:	617b      	str	r3, [r7, #20]
      break;
 8013a82:	e005      	b.n	8013a90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8013a84:	4b19      	ldr	r3, [pc, #100]	; (8013aec <HAL_RCC_GetSysClockFreq+0x114>)
 8013a86:	617b      	str	r3, [r7, #20]
      break;
 8013a88:	e002      	b.n	8013a90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8013a8a:	69fb      	ldr	r3, [r7, #28]
 8013a8c:	617b      	str	r3, [r7, #20]
      break;
 8013a8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8013a90:	4b13      	ldr	r3, [pc, #76]	; (8013ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8013a92:	68db      	ldr	r3, [r3, #12]
 8013a94:	091b      	lsrs	r3, r3, #4
 8013a96:	f003 0307 	and.w	r3, r3, #7
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8013a9e:	4b10      	ldr	r3, [pc, #64]	; (8013ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8013aa0:	68db      	ldr	r3, [r3, #12]
 8013aa2:	0a1b      	lsrs	r3, r3, #8
 8013aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013aa8:	697a      	ldr	r2, [r7, #20]
 8013aaa:	fb02 f203 	mul.w	r2, r2, r3
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ab4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8013ab6:	4b0a      	ldr	r3, [pc, #40]	; (8013ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8013ab8:	68db      	ldr	r3, [r3, #12]
 8013aba:	0e5b      	lsrs	r3, r3, #25
 8013abc:	f003 0303 	and.w	r3, r3, #3
 8013ac0:	3301      	adds	r3, #1
 8013ac2:	005b      	lsls	r3, r3, #1
 8013ac4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8013ac6:	697a      	ldr	r2, [r7, #20]
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ace:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8013ad0:	69bb      	ldr	r3, [r7, #24]
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3724      	adds	r7, #36	; 0x24
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013adc:	4770      	bx	lr
 8013ade:	bf00      	nop
 8013ae0:	40021000 	.word	0x40021000
 8013ae4:	08017050 	.word	0x08017050
 8013ae8:	00f42400 	.word	0x00f42400
 8013aec:	007a1200 	.word	0x007a1200

08013af0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013af0:	b480      	push	{r7}
 8013af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013af4:	4b03      	ldr	r3, [pc, #12]	; (8013b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8013af6:	681b      	ldr	r3, [r3, #0]
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	46bd      	mov	sp, r7
 8013afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b00:	4770      	bx	lr
 8013b02:	bf00      	nop
 8013b04:	20000000 	.word	0x20000000

08013b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8013b0c:	f7ff fff0 	bl	8013af0 <HAL_RCC_GetHCLKFreq>
 8013b10:	4602      	mov	r2, r0
 8013b12:	4b06      	ldr	r3, [pc, #24]	; (8013b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8013b14:	689b      	ldr	r3, [r3, #8]
 8013b16:	0a1b      	lsrs	r3, r3, #8
 8013b18:	f003 0307 	and.w	r3, r3, #7
 8013b1c:	4904      	ldr	r1, [pc, #16]	; (8013b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8013b1e:	5ccb      	ldrb	r3, [r1, r3]
 8013b20:	f003 031f 	and.w	r3, r3, #31
 8013b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	bd80      	pop	{r7, pc}
 8013b2c:	40021000 	.word	0x40021000
 8013b30:	08017048 	.word	0x08017048

08013b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8013b38:	f7ff ffda 	bl	8013af0 <HAL_RCC_GetHCLKFreq>
 8013b3c:	4602      	mov	r2, r0
 8013b3e:	4b06      	ldr	r3, [pc, #24]	; (8013b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013b40:	689b      	ldr	r3, [r3, #8]
 8013b42:	0adb      	lsrs	r3, r3, #11
 8013b44:	f003 0307 	and.w	r3, r3, #7
 8013b48:	4904      	ldr	r1, [pc, #16]	; (8013b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8013b4a:	5ccb      	ldrb	r3, [r1, r3]
 8013b4c:	f003 031f 	and.w	r3, r3, #31
 8013b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	40021000 	.word	0x40021000
 8013b5c:	08017048 	.word	0x08017048

08013b60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b086      	sub	sp, #24
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8013b68:	2300      	movs	r3, #0
 8013b6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8013b6c:	4b2a      	ldr	r3, [pc, #168]	; (8013c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8013b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d003      	beq.n	8013b80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8013b78:	f7ff fa02 	bl	8012f80 <HAL_PWREx_GetVoltageRange>
 8013b7c:	6178      	str	r0, [r7, #20]
 8013b7e:	e014      	b.n	8013baa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8013b80:	4b25      	ldr	r3, [pc, #148]	; (8013c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8013b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b84:	4a24      	ldr	r2, [pc, #144]	; (8013c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8013b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8013b8c:	4b22      	ldr	r3, [pc, #136]	; (8013c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8013b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b94:	60fb      	str	r3, [r7, #12]
 8013b96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8013b98:	f7ff f9f2 	bl	8012f80 <HAL_PWREx_GetVoltageRange>
 8013b9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8013b9e:	4b1e      	ldr	r3, [pc, #120]	; (8013c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8013ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ba2:	4a1d      	ldr	r2, [pc, #116]	; (8013c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8013ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013ba8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013bb0:	d10b      	bne.n	8013bca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2b80      	cmp	r3, #128	; 0x80
 8013bb6:	d919      	bls.n	8013bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2ba0      	cmp	r3, #160	; 0xa0
 8013bbc:	d902      	bls.n	8013bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8013bbe:	2302      	movs	r3, #2
 8013bc0:	613b      	str	r3, [r7, #16]
 8013bc2:	e013      	b.n	8013bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	613b      	str	r3, [r7, #16]
 8013bc8:	e010      	b.n	8013bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2b80      	cmp	r3, #128	; 0x80
 8013bce:	d902      	bls.n	8013bd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8013bd0:	2303      	movs	r3, #3
 8013bd2:	613b      	str	r3, [r7, #16]
 8013bd4:	e00a      	b.n	8013bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2b80      	cmp	r3, #128	; 0x80
 8013bda:	d102      	bne.n	8013be2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8013bdc:	2302      	movs	r3, #2
 8013bde:	613b      	str	r3, [r7, #16]
 8013be0:	e004      	b.n	8013bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2b70      	cmp	r3, #112	; 0x70
 8013be6:	d101      	bne.n	8013bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8013be8:	2301      	movs	r3, #1
 8013bea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8013bec:	4b0b      	ldr	r3, [pc, #44]	; (8013c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	f023 0207 	bic.w	r2, r3, #7
 8013bf4:	4909      	ldr	r1, [pc, #36]	; (8013c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8013bf6:	693b      	ldr	r3, [r7, #16]
 8013bf8:	4313      	orrs	r3, r2
 8013bfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8013bfc:	4b07      	ldr	r3, [pc, #28]	; (8013c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f003 0307 	and.w	r3, r3, #7
 8013c04:	693a      	ldr	r2, [r7, #16]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d001      	beq.n	8013c0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	e000      	b.n	8013c10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8013c0e:	2300      	movs	r3, #0
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3718      	adds	r7, #24
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}
 8013c18:	40021000 	.word	0x40021000
 8013c1c:	40022000 	.word	0x40022000

08013c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b086      	sub	sp, #24
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8013c28:	2300      	movs	r3, #0
 8013c2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d041      	beq.n	8013cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013c40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8013c44:	d02a      	beq.n	8013c9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8013c46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8013c4a:	d824      	bhi.n	8013c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8013c4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013c50:	d008      	beq.n	8013c64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8013c52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013c56:	d81e      	bhi.n	8013c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d00a      	beq.n	8013c72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8013c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013c60:	d010      	beq.n	8013c84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8013c62:	e018      	b.n	8013c96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8013c64:	4b86      	ldr	r3, [pc, #536]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013c66:	68db      	ldr	r3, [r3, #12]
 8013c68:	4a85      	ldr	r2, [pc, #532]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013c6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8013c70:	e015      	b.n	8013c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	3304      	adds	r3, #4
 8013c76:	2100      	movs	r1, #0
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f000 fabb 	bl	80141f4 <RCCEx_PLLSAI1_Config>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8013c82:	e00c      	b.n	8013c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	3320      	adds	r3, #32
 8013c88:	2100      	movs	r1, #0
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f000 fba6 	bl	80143dc <RCCEx_PLLSAI2_Config>
 8013c90:	4603      	mov	r3, r0
 8013c92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8013c94:	e003      	b.n	8013c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013c96:	2301      	movs	r3, #1
 8013c98:	74fb      	strb	r3, [r7, #19]
      break;
 8013c9a:	e000      	b.n	8013c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8013c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013c9e:	7cfb      	ldrb	r3, [r7, #19]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d10b      	bne.n	8013cbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013ca4:	4b76      	ldr	r3, [pc, #472]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013cb2:	4973      	ldr	r1, [pc, #460]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013cb4:	4313      	orrs	r3, r2
 8013cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8013cba:	e001      	b.n	8013cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013cbc:	7cfb      	ldrb	r3, [r7, #19]
 8013cbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d041      	beq.n	8013d50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013cd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8013cd4:	d02a      	beq.n	8013d2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8013cd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8013cda:	d824      	bhi.n	8013d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8013cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013ce0:	d008      	beq.n	8013cf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8013ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013ce6:	d81e      	bhi.n	8013d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d00a      	beq.n	8013d02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8013cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013cf0:	d010      	beq.n	8013d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8013cf2:	e018      	b.n	8013d26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8013cf4:	4b62      	ldr	r3, [pc, #392]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013cf6:	68db      	ldr	r3, [r3, #12]
 8013cf8:	4a61      	ldr	r2, [pc, #388]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013cfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8013d00:	e015      	b.n	8013d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	3304      	adds	r3, #4
 8013d06:	2100      	movs	r1, #0
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f000 fa73 	bl	80141f4 <RCCEx_PLLSAI1_Config>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8013d12:	e00c      	b.n	8013d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	3320      	adds	r3, #32
 8013d18:	2100      	movs	r1, #0
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f000 fb5e 	bl	80143dc <RCCEx_PLLSAI2_Config>
 8013d20:	4603      	mov	r3, r0
 8013d22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8013d24:	e003      	b.n	8013d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013d26:	2301      	movs	r3, #1
 8013d28:	74fb      	strb	r3, [r7, #19]
      break;
 8013d2a:	e000      	b.n	8013d2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8013d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013d2e:	7cfb      	ldrb	r3, [r7, #19]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d10b      	bne.n	8013d4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8013d34:	4b52      	ldr	r3, [pc, #328]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013d42:	494f      	ldr	r1, [pc, #316]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013d44:	4313      	orrs	r3, r2
 8013d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8013d4a:	e001      	b.n	8013d50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013d4c:	7cfb      	ldrb	r3, [r7, #19]
 8013d4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	f000 80a0 	beq.w	8013e9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8013d62:	4b47      	ldr	r3, [pc, #284]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d101      	bne.n	8013d72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8013d6e:	2301      	movs	r3, #1
 8013d70:	e000      	b.n	8013d74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8013d72:	2300      	movs	r3, #0
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d00d      	beq.n	8013d94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013d78:	4b41      	ldr	r3, [pc, #260]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d7c:	4a40      	ldr	r2, [pc, #256]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d82:	6593      	str	r3, [r2, #88]	; 0x58
 8013d84:	4b3e      	ldr	r3, [pc, #248]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013d8c:	60bb      	str	r3, [r7, #8]
 8013d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013d90:	2301      	movs	r3, #1
 8013d92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013d94:	4b3b      	ldr	r3, [pc, #236]	; (8013e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	4a3a      	ldr	r2, [pc, #232]	; (8013e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8013d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013d9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013da0:	f7fd fc74 	bl	801168c <HAL_GetTick>
 8013da4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8013da6:	e009      	b.n	8013dbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013da8:	f7fd fc70 	bl	801168c <HAL_GetTick>
 8013dac:	4602      	mov	r2, r0
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	1ad3      	subs	r3, r2, r3
 8013db2:	2b02      	cmp	r3, #2
 8013db4:	d902      	bls.n	8013dbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8013db6:	2303      	movs	r3, #3
 8013db8:	74fb      	strb	r3, [r7, #19]
        break;
 8013dba:	e005      	b.n	8013dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8013dbc:	4b31      	ldr	r3, [pc, #196]	; (8013e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d0ef      	beq.n	8013da8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8013dc8:	7cfb      	ldrb	r3, [r7, #19]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d15c      	bne.n	8013e88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8013dce:	4b2c      	ldr	r3, [pc, #176]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013dd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d01f      	beq.n	8013e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013de6:	697a      	ldr	r2, [r7, #20]
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d019      	beq.n	8013e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8013dec:	4b24      	ldr	r3, [pc, #144]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013df6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8013df8:	4b21      	ldr	r3, [pc, #132]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013dfe:	4a20      	ldr	r2, [pc, #128]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013e08:	4b1d      	ldr	r3, [pc, #116]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e0e:	4a1c      	ldr	r2, [pc, #112]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8013e18:	4a19      	ldr	r2, [pc, #100]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8013e20:	697b      	ldr	r3, [r7, #20]
 8013e22:	f003 0301 	and.w	r3, r3, #1
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d016      	beq.n	8013e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e2a:	f7fd fc2f 	bl	801168c <HAL_GetTick>
 8013e2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013e30:	e00b      	b.n	8013e4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013e32:	f7fd fc2b 	bl	801168c <HAL_GetTick>
 8013e36:	4602      	mov	r2, r0
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	1ad3      	subs	r3, r2, r3
 8013e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e40:	4293      	cmp	r3, r2
 8013e42:	d902      	bls.n	8013e4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8013e44:	2303      	movs	r3, #3
 8013e46:	74fb      	strb	r3, [r7, #19]
            break;
 8013e48:	e006      	b.n	8013e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013e4a:	4b0d      	ldr	r3, [pc, #52]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e50:	f003 0302 	and.w	r3, r3, #2
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d0ec      	beq.n	8013e32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8013e58:	7cfb      	ldrb	r3, [r7, #19]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d10c      	bne.n	8013e78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013e5e:	4b08      	ldr	r3, [pc, #32]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013e6e:	4904      	ldr	r1, [pc, #16]	; (8013e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8013e70:	4313      	orrs	r3, r2
 8013e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8013e76:	e009      	b.n	8013e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013e78:	7cfb      	ldrb	r3, [r7, #19]
 8013e7a:	74bb      	strb	r3, [r7, #18]
 8013e7c:	e006      	b.n	8013e8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8013e7e:	bf00      	nop
 8013e80:	40021000 	.word	0x40021000
 8013e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013e88:	7cfb      	ldrb	r3, [r7, #19]
 8013e8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013e8c:	7c7b      	ldrb	r3, [r7, #17]
 8013e8e:	2b01      	cmp	r3, #1
 8013e90:	d105      	bne.n	8013e9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013e92:	4b9e      	ldr	r3, [pc, #632]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e96:	4a9d      	ldr	r2, [pc, #628]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013e9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f003 0301 	and.w	r3, r3, #1
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d00a      	beq.n	8013ec0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013eaa:	4b98      	ldr	r3, [pc, #608]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013eb0:	f023 0203 	bic.w	r2, r3, #3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013eb8:	4994      	ldr	r1, [pc, #592]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013eba:	4313      	orrs	r3, r2
 8013ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	f003 0302 	and.w	r3, r3, #2
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d00a      	beq.n	8013ee2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013ecc:	4b8f      	ldr	r3, [pc, #572]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ed2:	f023 020c 	bic.w	r2, r3, #12
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eda:	498c      	ldr	r1, [pc, #560]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013edc:	4313      	orrs	r3, r2
 8013ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	f003 0304 	and.w	r3, r3, #4
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d00a      	beq.n	8013f04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8013eee:	4b87      	ldr	r3, [pc, #540]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ef4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013efc:	4983      	ldr	r1, [pc, #524]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013efe:	4313      	orrs	r3, r2
 8013f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	f003 0308 	and.w	r3, r3, #8
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d00a      	beq.n	8013f26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8013f10:	4b7e      	ldr	r3, [pc, #504]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f1e:	497b      	ldr	r1, [pc, #492]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013f20:	4313      	orrs	r3, r2
 8013f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	f003 0310 	and.w	r3, r3, #16
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d00a      	beq.n	8013f48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8013f32:	4b76      	ldr	r3, [pc, #472]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f40:	4972      	ldr	r1, [pc, #456]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013f42:	4313      	orrs	r3, r2
 8013f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	f003 0320 	and.w	r3, r3, #32
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d00a      	beq.n	8013f6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8013f54:	4b6d      	ldr	r3, [pc, #436]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f62:	496a      	ldr	r1, [pc, #424]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013f64:	4313      	orrs	r3, r2
 8013f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d00a      	beq.n	8013f8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013f76:	4b65      	ldr	r3, [pc, #404]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f84:	4961      	ldr	r1, [pc, #388]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013f86:	4313      	orrs	r3, r2
 8013f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d00a      	beq.n	8013fae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013f98:	4b5c      	ldr	r3, [pc, #368]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013fa6:	4959      	ldr	r1, [pc, #356]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013fa8:	4313      	orrs	r3, r2
 8013faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d00a      	beq.n	8013fd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013fba:	4b54      	ldr	r3, [pc, #336]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013fc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fc8:	4950      	ldr	r1, [pc, #320]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013fca:	4313      	orrs	r3, r2
 8013fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d00a      	beq.n	8013ff2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8013fdc:	4b4b      	ldr	r3, [pc, #300]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013fe2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fea:	4948      	ldr	r1, [pc, #288]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8013fec:	4313      	orrs	r3, r2
 8013fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d00a      	beq.n	8014014 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8013ffe:	4b43      	ldr	r3, [pc, #268]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801400c:	493f      	ldr	r1, [pc, #252]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801400e:	4313      	orrs	r3, r2
 8014010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801401c:	2b00      	cmp	r3, #0
 801401e:	d028      	beq.n	8014072 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014020:	4b3a      	ldr	r3, [pc, #232]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801402e:	4937      	ldr	r1, [pc, #220]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014030:	4313      	orrs	r3, r2
 8014032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801403a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801403e:	d106      	bne.n	801404e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8014040:	4b32      	ldr	r3, [pc, #200]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014042:	68db      	ldr	r3, [r3, #12]
 8014044:	4a31      	ldr	r2, [pc, #196]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801404a:	60d3      	str	r3, [r2, #12]
 801404c:	e011      	b.n	8014072 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014056:	d10c      	bne.n	8014072 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	3304      	adds	r3, #4
 801405c:	2101      	movs	r1, #1
 801405e:	4618      	mov	r0, r3
 8014060:	f000 f8c8 	bl	80141f4 <RCCEx_PLLSAI1_Config>
 8014064:	4603      	mov	r3, r0
 8014066:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8014068:	7cfb      	ldrb	r3, [r7, #19]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d001      	beq.n	8014072 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 801406e:	7cfb      	ldrb	r3, [r7, #19]
 8014070:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801407a:	2b00      	cmp	r3, #0
 801407c:	d028      	beq.n	80140d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801407e:	4b23      	ldr	r3, [pc, #140]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014084:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801408c:	491f      	ldr	r1, [pc, #124]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801408e:	4313      	orrs	r3, r2
 8014090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801409c:	d106      	bne.n	80140ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801409e:	4b1b      	ldr	r3, [pc, #108]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80140a0:	68db      	ldr	r3, [r3, #12]
 80140a2:	4a1a      	ldr	r2, [pc, #104]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80140a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80140a8:	60d3      	str	r3, [r2, #12]
 80140aa:	e011      	b.n	80140d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80140b4:	d10c      	bne.n	80140d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	3304      	adds	r3, #4
 80140ba:	2101      	movs	r1, #1
 80140bc:	4618      	mov	r0, r3
 80140be:	f000 f899 	bl	80141f4 <RCCEx_PLLSAI1_Config>
 80140c2:	4603      	mov	r3, r0
 80140c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80140c6:	7cfb      	ldrb	r3, [r7, #19]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d001      	beq.n	80140d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80140cc:	7cfb      	ldrb	r3, [r7, #19]
 80140ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d02b      	beq.n	8014134 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80140dc:	4b0b      	ldr	r3, [pc, #44]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80140de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80140e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140ea:	4908      	ldr	r1, [pc, #32]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80140ec:	4313      	orrs	r3, r2
 80140ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80140fa:	d109      	bne.n	8014110 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80140fc:	4b03      	ldr	r3, [pc, #12]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80140fe:	68db      	ldr	r3, [r3, #12]
 8014100:	4a02      	ldr	r2, [pc, #8]	; (801410c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014106:	60d3      	str	r3, [r2, #12]
 8014108:	e014      	b.n	8014134 <HAL_RCCEx_PeriphCLKConfig+0x514>
 801410a:	bf00      	nop
 801410c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014118:	d10c      	bne.n	8014134 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	3304      	adds	r3, #4
 801411e:	2101      	movs	r1, #1
 8014120:	4618      	mov	r0, r3
 8014122:	f000 f867 	bl	80141f4 <RCCEx_PLLSAI1_Config>
 8014126:	4603      	mov	r3, r0
 8014128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801412a:	7cfb      	ldrb	r3, [r7, #19]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d001      	beq.n	8014134 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8014130:	7cfb      	ldrb	r3, [r7, #19]
 8014132:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801413c:	2b00      	cmp	r3, #0
 801413e:	d02f      	beq.n	80141a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8014140:	4b2b      	ldr	r3, [pc, #172]	; (80141f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014146:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801414e:	4928      	ldr	r1, [pc, #160]	; (80141f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014150:	4313      	orrs	r3, r2
 8014152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801415a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801415e:	d10d      	bne.n	801417c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	3304      	adds	r3, #4
 8014164:	2102      	movs	r1, #2
 8014166:	4618      	mov	r0, r3
 8014168:	f000 f844 	bl	80141f4 <RCCEx_PLLSAI1_Config>
 801416c:	4603      	mov	r3, r0
 801416e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014170:	7cfb      	ldrb	r3, [r7, #19]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d014      	beq.n	80141a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8014176:	7cfb      	ldrb	r3, [r7, #19]
 8014178:	74bb      	strb	r3, [r7, #18]
 801417a:	e011      	b.n	80141a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014184:	d10c      	bne.n	80141a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	3320      	adds	r3, #32
 801418a:	2102      	movs	r1, #2
 801418c:	4618      	mov	r0, r3
 801418e:	f000 f925 	bl	80143dc <RCCEx_PLLSAI2_Config>
 8014192:	4603      	mov	r3, r0
 8014194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014196:	7cfb      	ldrb	r3, [r7, #19]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d001      	beq.n	80141a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 801419c:	7cfb      	ldrb	r3, [r7, #19]
 801419e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d00a      	beq.n	80141c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80141ac:	4b10      	ldr	r3, [pc, #64]	; (80141f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80141ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80141ba:	490d      	ldr	r1, [pc, #52]	; (80141f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80141bc:	4313      	orrs	r3, r2
 80141be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d00b      	beq.n	80141e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80141ce:	4b08      	ldr	r3, [pc, #32]	; (80141f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80141d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80141d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80141de:	4904      	ldr	r1, [pc, #16]	; (80141f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80141e0:	4313      	orrs	r3, r2
 80141e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80141e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	3718      	adds	r7, #24
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}
 80141f0:	40021000 	.word	0x40021000

080141f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b084      	sub	sp, #16
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80141fe:	2300      	movs	r3, #0
 8014200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8014202:	4b75      	ldr	r3, [pc, #468]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014204:	68db      	ldr	r3, [r3, #12]
 8014206:	f003 0303 	and.w	r3, r3, #3
 801420a:	2b00      	cmp	r3, #0
 801420c:	d018      	beq.n	8014240 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801420e:	4b72      	ldr	r3, [pc, #456]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014210:	68db      	ldr	r3, [r3, #12]
 8014212:	f003 0203 	and.w	r2, r3, #3
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	429a      	cmp	r2, r3
 801421c:	d10d      	bne.n	801423a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
       ||
 8014222:	2b00      	cmp	r3, #0
 8014224:	d009      	beq.n	801423a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8014226:	4b6c      	ldr	r3, [pc, #432]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	091b      	lsrs	r3, r3, #4
 801422c:	f003 0307 	and.w	r3, r3, #7
 8014230:	1c5a      	adds	r2, r3, #1
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	685b      	ldr	r3, [r3, #4]
       ||
 8014236:	429a      	cmp	r2, r3
 8014238:	d047      	beq.n	80142ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801423a:	2301      	movs	r3, #1
 801423c:	73fb      	strb	r3, [r7, #15]
 801423e:	e044      	b.n	80142ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	2b03      	cmp	r3, #3
 8014246:	d018      	beq.n	801427a <RCCEx_PLLSAI1_Config+0x86>
 8014248:	2b03      	cmp	r3, #3
 801424a:	d825      	bhi.n	8014298 <RCCEx_PLLSAI1_Config+0xa4>
 801424c:	2b01      	cmp	r3, #1
 801424e:	d002      	beq.n	8014256 <RCCEx_PLLSAI1_Config+0x62>
 8014250:	2b02      	cmp	r3, #2
 8014252:	d009      	beq.n	8014268 <RCCEx_PLLSAI1_Config+0x74>
 8014254:	e020      	b.n	8014298 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8014256:	4b60      	ldr	r3, [pc, #384]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	f003 0302 	and.w	r3, r3, #2
 801425e:	2b00      	cmp	r3, #0
 8014260:	d11d      	bne.n	801429e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8014262:	2301      	movs	r3, #1
 8014264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014266:	e01a      	b.n	801429e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8014268:	4b5b      	ldr	r3, [pc, #364]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014270:	2b00      	cmp	r3, #0
 8014272:	d116      	bne.n	80142a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8014274:	2301      	movs	r3, #1
 8014276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014278:	e013      	b.n	80142a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801427a:	4b57      	ldr	r3, [pc, #348]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014282:	2b00      	cmp	r3, #0
 8014284:	d10f      	bne.n	80142a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8014286:	4b54      	ldr	r3, [pc, #336]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801428e:	2b00      	cmp	r3, #0
 8014290:	d109      	bne.n	80142a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8014292:	2301      	movs	r3, #1
 8014294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014296:	e006      	b.n	80142a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8014298:	2301      	movs	r3, #1
 801429a:	73fb      	strb	r3, [r7, #15]
      break;
 801429c:	e004      	b.n	80142a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801429e:	bf00      	nop
 80142a0:	e002      	b.n	80142a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80142a2:	bf00      	nop
 80142a4:	e000      	b.n	80142a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80142a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80142a8:	7bfb      	ldrb	r3, [r7, #15]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d10d      	bne.n	80142ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80142ae:	4b4a      	ldr	r3, [pc, #296]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80142b0:	68db      	ldr	r3, [r3, #12]
 80142b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6819      	ldr	r1, [r3, #0]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	3b01      	subs	r3, #1
 80142c0:	011b      	lsls	r3, r3, #4
 80142c2:	430b      	orrs	r3, r1
 80142c4:	4944      	ldr	r1, [pc, #272]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80142c6:	4313      	orrs	r3, r2
 80142c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80142ca:	7bfb      	ldrb	r3, [r7, #15]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d17d      	bne.n	80143cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80142d0:	4b41      	ldr	r3, [pc, #260]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4a40      	ldr	r2, [pc, #256]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80142d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80142da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80142dc:	f7fd f9d6 	bl	801168c <HAL_GetTick>
 80142e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80142e2:	e009      	b.n	80142f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80142e4:	f7fd f9d2 	bl	801168c <HAL_GetTick>
 80142e8:	4602      	mov	r2, r0
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	1ad3      	subs	r3, r2, r3
 80142ee:	2b02      	cmp	r3, #2
 80142f0:	d902      	bls.n	80142f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80142f2:	2303      	movs	r3, #3
 80142f4:	73fb      	strb	r3, [r7, #15]
        break;
 80142f6:	e005      	b.n	8014304 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80142f8:	4b37      	ldr	r3, [pc, #220]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014300:	2b00      	cmp	r3, #0
 8014302:	d1ef      	bne.n	80142e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8014304:	7bfb      	ldrb	r3, [r7, #15]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d160      	bne.n	80143cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d111      	bne.n	8014334 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8014310:	4b31      	ldr	r3, [pc, #196]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014312:	691b      	ldr	r3, [r3, #16]
 8014314:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8014318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801431c:	687a      	ldr	r2, [r7, #4]
 801431e:	6892      	ldr	r2, [r2, #8]
 8014320:	0211      	lsls	r1, r2, #8
 8014322:	687a      	ldr	r2, [r7, #4]
 8014324:	68d2      	ldr	r2, [r2, #12]
 8014326:	0912      	lsrs	r2, r2, #4
 8014328:	0452      	lsls	r2, r2, #17
 801432a:	430a      	orrs	r2, r1
 801432c:	492a      	ldr	r1, [pc, #168]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801432e:	4313      	orrs	r3, r2
 8014330:	610b      	str	r3, [r1, #16]
 8014332:	e027      	b.n	8014384 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	2b01      	cmp	r3, #1
 8014338:	d112      	bne.n	8014360 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801433a:	4b27      	ldr	r3, [pc, #156]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801433c:	691b      	ldr	r3, [r3, #16]
 801433e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8014342:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8014346:	687a      	ldr	r2, [r7, #4]
 8014348:	6892      	ldr	r2, [r2, #8]
 801434a:	0211      	lsls	r1, r2, #8
 801434c:	687a      	ldr	r2, [r7, #4]
 801434e:	6912      	ldr	r2, [r2, #16]
 8014350:	0852      	lsrs	r2, r2, #1
 8014352:	3a01      	subs	r2, #1
 8014354:	0552      	lsls	r2, r2, #21
 8014356:	430a      	orrs	r2, r1
 8014358:	491f      	ldr	r1, [pc, #124]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801435a:	4313      	orrs	r3, r2
 801435c:	610b      	str	r3, [r1, #16]
 801435e:	e011      	b.n	8014384 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8014360:	4b1d      	ldr	r3, [pc, #116]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014362:	691b      	ldr	r3, [r3, #16]
 8014364:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8014368:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801436c:	687a      	ldr	r2, [r7, #4]
 801436e:	6892      	ldr	r2, [r2, #8]
 8014370:	0211      	lsls	r1, r2, #8
 8014372:	687a      	ldr	r2, [r7, #4]
 8014374:	6952      	ldr	r2, [r2, #20]
 8014376:	0852      	lsrs	r2, r2, #1
 8014378:	3a01      	subs	r2, #1
 801437a:	0652      	lsls	r2, r2, #25
 801437c:	430a      	orrs	r2, r1
 801437e:	4916      	ldr	r1, [pc, #88]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014380:	4313      	orrs	r3, r2
 8014382:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8014384:	4b14      	ldr	r3, [pc, #80]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	4a13      	ldr	r2, [pc, #76]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801438a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801438e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014390:	f7fd f97c 	bl	801168c <HAL_GetTick>
 8014394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8014396:	e009      	b.n	80143ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014398:	f7fd f978 	bl	801168c <HAL_GetTick>
 801439c:	4602      	mov	r2, r0
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	1ad3      	subs	r3, r2, r3
 80143a2:	2b02      	cmp	r3, #2
 80143a4:	d902      	bls.n	80143ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80143a6:	2303      	movs	r3, #3
 80143a8:	73fb      	strb	r3, [r7, #15]
          break;
 80143aa:	e005      	b.n	80143b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80143ac:	4b0a      	ldr	r3, [pc, #40]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d0ef      	beq.n	8014398 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80143b8:	7bfb      	ldrb	r3, [r7, #15]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d106      	bne.n	80143cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80143be:	4b06      	ldr	r3, [pc, #24]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80143c0:	691a      	ldr	r2, [r3, #16]
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	699b      	ldr	r3, [r3, #24]
 80143c6:	4904      	ldr	r1, [pc, #16]	; (80143d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80143c8:	4313      	orrs	r3, r2
 80143ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80143cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3710      	adds	r7, #16
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}
 80143d6:	bf00      	nop
 80143d8:	40021000 	.word	0x40021000

080143dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b084      	sub	sp, #16
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80143e6:	2300      	movs	r3, #0
 80143e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80143ea:	4b6a      	ldr	r3, [pc, #424]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80143ec:	68db      	ldr	r3, [r3, #12]
 80143ee:	f003 0303 	and.w	r3, r3, #3
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d018      	beq.n	8014428 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80143f6:	4b67      	ldr	r3, [pc, #412]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80143f8:	68db      	ldr	r3, [r3, #12]
 80143fa:	f003 0203 	and.w	r2, r3, #3
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	429a      	cmp	r2, r3
 8014404:	d10d      	bne.n	8014422 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
       ||
 801440a:	2b00      	cmp	r3, #0
 801440c:	d009      	beq.n	8014422 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 801440e:	4b61      	ldr	r3, [pc, #388]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014410:	68db      	ldr	r3, [r3, #12]
 8014412:	091b      	lsrs	r3, r3, #4
 8014414:	f003 0307 	and.w	r3, r3, #7
 8014418:	1c5a      	adds	r2, r3, #1
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	685b      	ldr	r3, [r3, #4]
       ||
 801441e:	429a      	cmp	r2, r3
 8014420:	d047      	beq.n	80144b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8014422:	2301      	movs	r3, #1
 8014424:	73fb      	strb	r3, [r7, #15]
 8014426:	e044      	b.n	80144b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	2b03      	cmp	r3, #3
 801442e:	d018      	beq.n	8014462 <RCCEx_PLLSAI2_Config+0x86>
 8014430:	2b03      	cmp	r3, #3
 8014432:	d825      	bhi.n	8014480 <RCCEx_PLLSAI2_Config+0xa4>
 8014434:	2b01      	cmp	r3, #1
 8014436:	d002      	beq.n	801443e <RCCEx_PLLSAI2_Config+0x62>
 8014438:	2b02      	cmp	r3, #2
 801443a:	d009      	beq.n	8014450 <RCCEx_PLLSAI2_Config+0x74>
 801443c:	e020      	b.n	8014480 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801443e:	4b55      	ldr	r3, [pc, #340]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	f003 0302 	and.w	r3, r3, #2
 8014446:	2b00      	cmp	r3, #0
 8014448:	d11d      	bne.n	8014486 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 801444a:	2301      	movs	r3, #1
 801444c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801444e:	e01a      	b.n	8014486 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8014450:	4b50      	ldr	r3, [pc, #320]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014458:	2b00      	cmp	r3, #0
 801445a:	d116      	bne.n	801448a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 801445c:	2301      	movs	r3, #1
 801445e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014460:	e013      	b.n	801448a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8014462:	4b4c      	ldr	r3, [pc, #304]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801446a:	2b00      	cmp	r3, #0
 801446c:	d10f      	bne.n	801448e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801446e:	4b49      	ldr	r3, [pc, #292]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014476:	2b00      	cmp	r3, #0
 8014478:	d109      	bne.n	801448e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 801447a:	2301      	movs	r3, #1
 801447c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801447e:	e006      	b.n	801448e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8014480:	2301      	movs	r3, #1
 8014482:	73fb      	strb	r3, [r7, #15]
      break;
 8014484:	e004      	b.n	8014490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8014486:	bf00      	nop
 8014488:	e002      	b.n	8014490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801448a:	bf00      	nop
 801448c:	e000      	b.n	8014490 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801448e:	bf00      	nop
    }

    if(status == HAL_OK)
 8014490:	7bfb      	ldrb	r3, [r7, #15]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d10d      	bne.n	80144b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8014496:	4b3f      	ldr	r3, [pc, #252]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014498:	68db      	ldr	r3, [r3, #12]
 801449a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	6819      	ldr	r1, [r3, #0]
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	3b01      	subs	r3, #1
 80144a8:	011b      	lsls	r3, r3, #4
 80144aa:	430b      	orrs	r3, r1
 80144ac:	4939      	ldr	r1, [pc, #228]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80144ae:	4313      	orrs	r3, r2
 80144b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80144b2:	7bfb      	ldrb	r3, [r7, #15]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d167      	bne.n	8014588 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80144b8:	4b36      	ldr	r3, [pc, #216]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	4a35      	ldr	r2, [pc, #212]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80144be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80144c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80144c4:	f7fd f8e2 	bl	801168c <HAL_GetTick>
 80144c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80144ca:	e009      	b.n	80144e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80144cc:	f7fd f8de 	bl	801168c <HAL_GetTick>
 80144d0:	4602      	mov	r2, r0
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	1ad3      	subs	r3, r2, r3
 80144d6:	2b02      	cmp	r3, #2
 80144d8:	d902      	bls.n	80144e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80144da:	2303      	movs	r3, #3
 80144dc:	73fb      	strb	r3, [r7, #15]
        break;
 80144de:	e005      	b.n	80144ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80144e0:	4b2c      	ldr	r3, [pc, #176]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d1ef      	bne.n	80144cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80144ec:	7bfb      	ldrb	r3, [r7, #15]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d14a      	bne.n	8014588 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d111      	bne.n	801451c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80144f8:	4b26      	ldr	r3, [pc, #152]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 80144fa:	695b      	ldr	r3, [r3, #20]
 80144fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8014500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014504:	687a      	ldr	r2, [r7, #4]
 8014506:	6892      	ldr	r2, [r2, #8]
 8014508:	0211      	lsls	r1, r2, #8
 801450a:	687a      	ldr	r2, [r7, #4]
 801450c:	68d2      	ldr	r2, [r2, #12]
 801450e:	0912      	lsrs	r2, r2, #4
 8014510:	0452      	lsls	r2, r2, #17
 8014512:	430a      	orrs	r2, r1
 8014514:	491f      	ldr	r1, [pc, #124]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014516:	4313      	orrs	r3, r2
 8014518:	614b      	str	r3, [r1, #20]
 801451a:	e011      	b.n	8014540 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801451c:	4b1d      	ldr	r3, [pc, #116]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 801451e:	695b      	ldr	r3, [r3, #20]
 8014520:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8014524:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8014528:	687a      	ldr	r2, [r7, #4]
 801452a:	6892      	ldr	r2, [r2, #8]
 801452c:	0211      	lsls	r1, r2, #8
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	6912      	ldr	r2, [r2, #16]
 8014532:	0852      	lsrs	r2, r2, #1
 8014534:	3a01      	subs	r2, #1
 8014536:	0652      	lsls	r2, r2, #25
 8014538:	430a      	orrs	r2, r1
 801453a:	4916      	ldr	r1, [pc, #88]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 801453c:	4313      	orrs	r3, r2
 801453e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8014540:	4b14      	ldr	r3, [pc, #80]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4a13      	ldr	r2, [pc, #76]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801454a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801454c:	f7fd f89e 	bl	801168c <HAL_GetTick>
 8014550:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8014552:	e009      	b.n	8014568 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8014554:	f7fd f89a 	bl	801168c <HAL_GetTick>
 8014558:	4602      	mov	r2, r0
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	1ad3      	subs	r3, r2, r3
 801455e:	2b02      	cmp	r3, #2
 8014560:	d902      	bls.n	8014568 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8014562:	2303      	movs	r3, #3
 8014564:	73fb      	strb	r3, [r7, #15]
          break;
 8014566:	e005      	b.n	8014574 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8014568:	4b0a      	ldr	r3, [pc, #40]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014570:	2b00      	cmp	r3, #0
 8014572:	d0ef      	beq.n	8014554 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8014574:	7bfb      	ldrb	r3, [r7, #15]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d106      	bne.n	8014588 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 801457a:	4b06      	ldr	r3, [pc, #24]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 801457c:	695a      	ldr	r2, [r3, #20]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	695b      	ldr	r3, [r3, #20]
 8014582:	4904      	ldr	r1, [pc, #16]	; (8014594 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014584:	4313      	orrs	r3, r2
 8014586:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8014588:	7bfb      	ldrb	r3, [r7, #15]
}
 801458a:	4618      	mov	r0, r3
 801458c:	3710      	adds	r7, #16
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	40021000 	.word	0x40021000

08014598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b084      	sub	sp, #16
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d101      	bne.n	80145aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80145a6:	2301      	movs	r3, #1
 80145a8:	e095      	b.n	80146d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d108      	bne.n	80145c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80145ba:	d009      	beq.n	80145d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2200      	movs	r2, #0
 80145c0:	61da      	str	r2, [r3, #28]
 80145c2:	e005      	b.n	80145d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2200      	movs	r2, #0
 80145c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2200      	movs	r2, #0
 80145ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2200      	movs	r2, #0
 80145d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80145dc:	b2db      	uxtb	r3, r3
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d106      	bne.n	80145f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2200      	movs	r2, #0
 80145e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f000 f877 	bl	80146de <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2202      	movs	r2, #2
 80145f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	681a      	ldr	r2, [r3, #0]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014606:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	68db      	ldr	r3, [r3, #12]
 801460c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014610:	d902      	bls.n	8014618 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8014612:	2300      	movs	r3, #0
 8014614:	60fb      	str	r3, [r7, #12]
 8014616:	e002      	b.n	801461e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8014618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801461c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	68db      	ldr	r3, [r3, #12]
 8014622:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8014626:	d007      	beq.n	8014638 <HAL_SPI_Init+0xa0>
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	68db      	ldr	r3, [r3, #12]
 801462c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014630:	d002      	beq.n	8014638 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2200      	movs	r2, #0
 8014636:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	685b      	ldr	r3, [r3, #4]
 801463c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	689b      	ldr	r3, [r3, #8]
 8014644:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8014648:	431a      	orrs	r2, r3
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	691b      	ldr	r3, [r3, #16]
 801464e:	f003 0302 	and.w	r3, r3, #2
 8014652:	431a      	orrs	r2, r3
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	695b      	ldr	r3, [r3, #20]
 8014658:	f003 0301 	and.w	r3, r3, #1
 801465c:	431a      	orrs	r2, r3
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	699b      	ldr	r3, [r3, #24]
 8014662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014666:	431a      	orrs	r2, r3
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	69db      	ldr	r3, [r3, #28]
 801466c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014670:	431a      	orrs	r2, r3
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	6a1b      	ldr	r3, [r3, #32]
 8014676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801467a:	ea42 0103 	orr.w	r1, r2, r3
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014682:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	430a      	orrs	r2, r1
 801468c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	699b      	ldr	r3, [r3, #24]
 8014692:	0c1b      	lsrs	r3, r3, #16
 8014694:	f003 0204 	and.w	r2, r3, #4
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801469c:	f003 0310 	and.w	r3, r3, #16
 80146a0:	431a      	orrs	r2, r3
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146a6:	f003 0308 	and.w	r3, r3, #8
 80146aa:	431a      	orrs	r2, r3
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80146b4:	ea42 0103 	orr.w	r1, r2, r3
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	430a      	orrs	r2, r1
 80146c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2200      	movs	r2, #0
 80146ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2201      	movs	r2, #1
 80146d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80146d4:	2300      	movs	r3, #0
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3710      	adds	r7, #16
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}

080146de <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80146de:	b480      	push	{r7}
 80146e0:	b083      	sub	sp, #12
 80146e2:	af00      	add	r7, sp, #0
 80146e4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80146e6:	bf00      	nop
 80146e8:	370c      	adds	r7, #12
 80146ea:	46bd      	mov	sp, r7
 80146ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f0:	4770      	bx	lr

080146f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80146f2:	b580      	push	{r7, lr}
 80146f4:	b08a      	sub	sp, #40	; 0x28
 80146f6:	af00      	add	r7, sp, #0
 80146f8:	60f8      	str	r0, [r7, #12]
 80146fa:	60b9      	str	r1, [r7, #8]
 80146fc:	607a      	str	r2, [r7, #4]
 80146fe:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014700:	2301      	movs	r3, #1
 8014702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8014704:	2300      	movs	r3, #0
 8014706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014710:	2b01      	cmp	r3, #1
 8014712:	d101      	bne.n	8014718 <HAL_SPI_TransmitReceive+0x26>
 8014714:	2302      	movs	r3, #2
 8014716:	e1fb      	b.n	8014b10 <HAL_SPI_TransmitReceive+0x41e>
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	2201      	movs	r2, #1
 801471c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014720:	f7fc ffb4 	bl	801168c <HAL_GetTick>
 8014724:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801472c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	685b      	ldr	r3, [r3, #4]
 8014732:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8014734:	887b      	ldrh	r3, [r7, #2]
 8014736:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8014738:	887b      	ldrh	r3, [r7, #2]
 801473a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801473c:	7efb      	ldrb	r3, [r7, #27]
 801473e:	2b01      	cmp	r3, #1
 8014740:	d00e      	beq.n	8014760 <HAL_SPI_TransmitReceive+0x6e>
 8014742:	697b      	ldr	r3, [r7, #20]
 8014744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014748:	d106      	bne.n	8014758 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	689b      	ldr	r3, [r3, #8]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d102      	bne.n	8014758 <HAL_SPI_TransmitReceive+0x66>
 8014752:	7efb      	ldrb	r3, [r7, #27]
 8014754:	2b04      	cmp	r3, #4
 8014756:	d003      	beq.n	8014760 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8014758:	2302      	movs	r3, #2
 801475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801475e:	e1cd      	b.n	8014afc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014760:	68bb      	ldr	r3, [r7, #8]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d005      	beq.n	8014772 <HAL_SPI_TransmitReceive+0x80>
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d002      	beq.n	8014772 <HAL_SPI_TransmitReceive+0x80>
 801476c:	887b      	ldrh	r3, [r7, #2]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d103      	bne.n	801477a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8014772:	2301      	movs	r3, #1
 8014774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014778:	e1c0      	b.n	8014afc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014780:	b2db      	uxtb	r3, r3
 8014782:	2b04      	cmp	r3, #4
 8014784:	d003      	beq.n	801478e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2205      	movs	r2, #5
 801478a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	2200      	movs	r2, #0
 8014792:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	887a      	ldrh	r2, [r7, #2]
 801479e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	887a      	ldrh	r2, [r7, #2]
 80147a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	68ba      	ldr	r2, [r7, #8]
 80147ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	887a      	ldrh	r2, [r7, #2]
 80147b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	887a      	ldrh	r2, [r7, #2]
 80147ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	2200      	movs	r2, #0
 80147c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2200      	movs	r2, #0
 80147c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	68db      	ldr	r3, [r3, #12]
 80147cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80147d0:	d802      	bhi.n	80147d8 <HAL_SPI_TransmitReceive+0xe6>
 80147d2:	8a3b      	ldrh	r3, [r7, #16]
 80147d4:	2b01      	cmp	r3, #1
 80147d6:	d908      	bls.n	80147ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	685a      	ldr	r2, [r3, #4]
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80147e6:	605a      	str	r2, [r3, #4]
 80147e8:	e007      	b.n	80147fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	685a      	ldr	r2, [r3, #4]
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80147f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014804:	2b40      	cmp	r3, #64	; 0x40
 8014806:	d007      	beq.n	8014818 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	681a      	ldr	r2, [r3, #0]
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014820:	d97c      	bls.n	801491c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d002      	beq.n	8014830 <HAL_SPI_TransmitReceive+0x13e>
 801482a:	8a7b      	ldrh	r3, [r7, #18]
 801482c:	2b01      	cmp	r3, #1
 801482e:	d169      	bne.n	8014904 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014834:	881a      	ldrh	r2, [r3, #0]
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014840:	1c9a      	adds	r2, r3, #2
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801484a:	b29b      	uxth	r3, r3
 801484c:	3b01      	subs	r3, #1
 801484e:	b29a      	uxth	r2, r3
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014854:	e056      	b.n	8014904 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	689b      	ldr	r3, [r3, #8]
 801485c:	f003 0302 	and.w	r3, r3, #2
 8014860:	2b02      	cmp	r3, #2
 8014862:	d11b      	bne.n	801489c <HAL_SPI_TransmitReceive+0x1aa>
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014868:	b29b      	uxth	r3, r3
 801486a:	2b00      	cmp	r3, #0
 801486c:	d016      	beq.n	801489c <HAL_SPI_TransmitReceive+0x1aa>
 801486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014870:	2b01      	cmp	r3, #1
 8014872:	d113      	bne.n	801489c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014878:	881a      	ldrh	r2, [r3, #0]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014884:	1c9a      	adds	r2, r3, #2
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801488e:	b29b      	uxth	r3, r3
 8014890:	3b01      	subs	r3, #1
 8014892:	b29a      	uxth	r2, r3
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014898:	2300      	movs	r3, #0
 801489a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	689b      	ldr	r3, [r3, #8]
 80148a2:	f003 0301 	and.w	r3, r3, #1
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d11c      	bne.n	80148e4 <HAL_SPI_TransmitReceive+0x1f2>
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80148b0:	b29b      	uxth	r3, r3
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d016      	beq.n	80148e4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	68da      	ldr	r2, [r3, #12]
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148c0:	b292      	uxth	r2, r2
 80148c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148c8:	1c9a      	adds	r2, r3, #2
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	3b01      	subs	r3, #1
 80148d8:	b29a      	uxth	r2, r3
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80148e0:	2301      	movs	r3, #1
 80148e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80148e4:	f7fc fed2 	bl	801168c <HAL_GetTick>
 80148e8:	4602      	mov	r2, r0
 80148ea:	69fb      	ldr	r3, [r7, #28]
 80148ec:	1ad3      	subs	r3, r2, r3
 80148ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d807      	bhi.n	8014904 <HAL_SPI_TransmitReceive+0x212>
 80148f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148fa:	d003      	beq.n	8014904 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80148fc:	2303      	movs	r3, #3
 80148fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014902:	e0fb      	b.n	8014afc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014908:	b29b      	uxth	r3, r3
 801490a:	2b00      	cmp	r3, #0
 801490c:	d1a3      	bne.n	8014856 <HAL_SPI_TransmitReceive+0x164>
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014914:	b29b      	uxth	r3, r3
 8014916:	2b00      	cmp	r3, #0
 8014918:	d19d      	bne.n	8014856 <HAL_SPI_TransmitReceive+0x164>
 801491a:	e0df      	b.n	8014adc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	685b      	ldr	r3, [r3, #4]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d003      	beq.n	801492c <HAL_SPI_TransmitReceive+0x23a>
 8014924:	8a7b      	ldrh	r3, [r7, #18]
 8014926:	2b01      	cmp	r3, #1
 8014928:	f040 80cb 	bne.w	8014ac2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014930:	b29b      	uxth	r3, r3
 8014932:	2b01      	cmp	r3, #1
 8014934:	d912      	bls.n	801495c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801493a:	881a      	ldrh	r2, [r3, #0]
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014946:	1c9a      	adds	r2, r3, #2
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014950:	b29b      	uxth	r3, r3
 8014952:	3b02      	subs	r3, #2
 8014954:	b29a      	uxth	r2, r3
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	87da      	strh	r2, [r3, #62]	; 0x3e
 801495a:	e0b2      	b.n	8014ac2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	330c      	adds	r3, #12
 8014966:	7812      	ldrb	r2, [r2, #0]
 8014968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801496e:	1c5a      	adds	r2, r3, #1
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014978:	b29b      	uxth	r3, r3
 801497a:	3b01      	subs	r3, #1
 801497c:	b29a      	uxth	r2, r3
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014982:	e09e      	b.n	8014ac2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	689b      	ldr	r3, [r3, #8]
 801498a:	f003 0302 	and.w	r3, r3, #2
 801498e:	2b02      	cmp	r3, #2
 8014990:	d134      	bne.n	80149fc <HAL_SPI_TransmitReceive+0x30a>
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014996:	b29b      	uxth	r3, r3
 8014998:	2b00      	cmp	r3, #0
 801499a:	d02f      	beq.n	80149fc <HAL_SPI_TransmitReceive+0x30a>
 801499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801499e:	2b01      	cmp	r3, #1
 80149a0:	d12c      	bne.n	80149fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	2b01      	cmp	r3, #1
 80149aa:	d912      	bls.n	80149d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149b0:	881a      	ldrh	r2, [r3, #0]
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149bc:	1c9a      	adds	r2, r3, #2
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	3b02      	subs	r3, #2
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80149d0:	e012      	b.n	80149f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	330c      	adds	r3, #12
 80149dc:	7812      	ldrb	r2, [r2, #0]
 80149de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149e4:	1c5a      	adds	r2, r3, #1
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149ee:	b29b      	uxth	r3, r3
 80149f0:	3b01      	subs	r3, #1
 80149f2:	b29a      	uxth	r2, r3
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80149f8:	2300      	movs	r3, #0
 80149fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	689b      	ldr	r3, [r3, #8]
 8014a02:	f003 0301 	and.w	r3, r3, #1
 8014a06:	2b01      	cmp	r3, #1
 8014a08:	d148      	bne.n	8014a9c <HAL_SPI_TransmitReceive+0x3aa>
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014a10:	b29b      	uxth	r3, r3
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d042      	beq.n	8014a9c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d923      	bls.n	8014a6a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	68da      	ldr	r2, [r3, #12]
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a2c:	b292      	uxth	r2, r2
 8014a2e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a34:	1c9a      	adds	r2, r3, #2
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	3b02      	subs	r3, #2
 8014a44:	b29a      	uxth	r2, r3
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014a52:	b29b      	uxth	r3, r3
 8014a54:	2b01      	cmp	r3, #1
 8014a56:	d81f      	bhi.n	8014a98 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	685a      	ldr	r2, [r3, #4]
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014a66:	605a      	str	r2, [r3, #4]
 8014a68:	e016      	b.n	8014a98 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	f103 020c 	add.w	r2, r3, #12
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a76:	7812      	ldrb	r2, [r2, #0]
 8014a78:	b2d2      	uxtb	r2, r2
 8014a7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a80:	1c5a      	adds	r2, r3, #1
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014a8c:	b29b      	uxth	r3, r3
 8014a8e:	3b01      	subs	r3, #1
 8014a90:	b29a      	uxth	r2, r3
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014a98:	2301      	movs	r3, #1
 8014a9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014a9c:	f7fc fdf6 	bl	801168c <HAL_GetTick>
 8014aa0:	4602      	mov	r2, r0
 8014aa2:	69fb      	ldr	r3, [r7, #28]
 8014aa4:	1ad3      	subs	r3, r2, r3
 8014aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d803      	bhi.n	8014ab4 <HAL_SPI_TransmitReceive+0x3c2>
 8014aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ab2:	d102      	bne.n	8014aba <HAL_SPI_TransmitReceive+0x3c8>
 8014ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d103      	bne.n	8014ac2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8014aba:	2303      	movs	r3, #3
 8014abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014ac0:	e01c      	b.n	8014afc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f47f af5b 	bne.w	8014984 <HAL_SPI_TransmitReceive+0x292>
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014ad4:	b29b      	uxth	r3, r3
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	f47f af54 	bne.w	8014984 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014adc:	69fa      	ldr	r2, [r7, #28]
 8014ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014ae0:	68f8      	ldr	r0, [r7, #12]
 8014ae2:	f000 fa61 	bl	8014fa8 <SPI_EndRxTxTransaction>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d006      	beq.n	8014afa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8014aec:	2301      	movs	r3, #1
 8014aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	2220      	movs	r2, #32
 8014af6:	661a      	str	r2, [r3, #96]	; 0x60
 8014af8:	e000      	b.n	8014afc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8014afa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	2201      	movs	r2, #1
 8014b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	2200      	movs	r2, #0
 8014b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8014b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8014b10:	4618      	mov	r0, r3
 8014b12:	3728      	adds	r7, #40	; 0x28
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b088      	sub	sp, #32
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	685b      	ldr	r3, [r3, #4]
 8014b26:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	689b      	ldr	r3, [r3, #8]
 8014b2e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014b30:	69bb      	ldr	r3, [r7, #24]
 8014b32:	099b      	lsrs	r3, r3, #6
 8014b34:	f003 0301 	and.w	r3, r3, #1
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d10f      	bne.n	8014b5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014b3c:	69bb      	ldr	r3, [r7, #24]
 8014b3e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d00a      	beq.n	8014b5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	099b      	lsrs	r3, r3, #6
 8014b4a:	f003 0301 	and.w	r3, r3, #1
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d004      	beq.n	8014b5c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	4798      	blx	r3
    return;
 8014b5a:	e0d7      	b.n	8014d0c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8014b5c:	69bb      	ldr	r3, [r7, #24]
 8014b5e:	085b      	lsrs	r3, r3, #1
 8014b60:	f003 0301 	and.w	r3, r3, #1
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d00a      	beq.n	8014b7e <HAL_SPI_IRQHandler+0x66>
 8014b68:	69fb      	ldr	r3, [r7, #28]
 8014b6a:	09db      	lsrs	r3, r3, #7
 8014b6c:	f003 0301 	and.w	r3, r3, #1
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d004      	beq.n	8014b7e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	4798      	blx	r3
    return;
 8014b7c:	e0c6      	b.n	8014d0c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014b7e:	69bb      	ldr	r3, [r7, #24]
 8014b80:	095b      	lsrs	r3, r3, #5
 8014b82:	f003 0301 	and.w	r3, r3, #1
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d10c      	bne.n	8014ba4 <HAL_SPI_IRQHandler+0x8c>
 8014b8a:	69bb      	ldr	r3, [r7, #24]
 8014b8c:	099b      	lsrs	r3, r3, #6
 8014b8e:	f003 0301 	and.w	r3, r3, #1
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d106      	bne.n	8014ba4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8014b96:	69bb      	ldr	r3, [r7, #24]
 8014b98:	0a1b      	lsrs	r3, r3, #8
 8014b9a:	f003 0301 	and.w	r3, r3, #1
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f000 80b4 	beq.w	8014d0c <HAL_SPI_IRQHandler+0x1f4>
 8014ba4:	69fb      	ldr	r3, [r7, #28]
 8014ba6:	095b      	lsrs	r3, r3, #5
 8014ba8:	f003 0301 	and.w	r3, r3, #1
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	f000 80ad 	beq.w	8014d0c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014bb2:	69bb      	ldr	r3, [r7, #24]
 8014bb4:	099b      	lsrs	r3, r3, #6
 8014bb6:	f003 0301 	and.w	r3, r3, #1
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d023      	beq.n	8014c06 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	2b03      	cmp	r3, #3
 8014bc8:	d011      	beq.n	8014bee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014bce:	f043 0204 	orr.w	r2, r3, #4
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	617b      	str	r3, [r7, #20]
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	617b      	str	r3, [r7, #20]
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	689b      	ldr	r3, [r3, #8]
 8014be8:	617b      	str	r3, [r7, #20]
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	e00b      	b.n	8014c06 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014bee:	2300      	movs	r3, #0
 8014bf0:	613b      	str	r3, [r7, #16]
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	68db      	ldr	r3, [r3, #12]
 8014bf8:	613b      	str	r3, [r7, #16]
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	689b      	ldr	r3, [r3, #8]
 8014c00:	613b      	str	r3, [r7, #16]
 8014c02:	693b      	ldr	r3, [r7, #16]
        return;
 8014c04:	e082      	b.n	8014d0c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8014c06:	69bb      	ldr	r3, [r7, #24]
 8014c08:	095b      	lsrs	r3, r3, #5
 8014c0a:	f003 0301 	and.w	r3, r3, #1
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d014      	beq.n	8014c3c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014c16:	f043 0201 	orr.w	r2, r3, #1
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8014c1e:	2300      	movs	r3, #0
 8014c20:	60fb      	str	r3, [r7, #12]
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	689b      	ldr	r3, [r3, #8]
 8014c28:	60fb      	str	r3, [r7, #12]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	681a      	ldr	r2, [r3, #0]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014c38:	601a      	str	r2, [r3, #0]
 8014c3a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	0a1b      	lsrs	r3, r3, #8
 8014c40:	f003 0301 	and.w	r3, r3, #1
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d00c      	beq.n	8014c62 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014c4c:	f043 0208 	orr.w	r2, r3, #8
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014c54:	2300      	movs	r3, #0
 8014c56:	60bb      	str	r3, [r7, #8]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	689b      	ldr	r3, [r3, #8]
 8014c5e:	60bb      	str	r3, [r7, #8]
 8014c60:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d04f      	beq.n	8014d0a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	685a      	ldr	r2, [r3, #4]
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014c78:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	2201      	movs	r2, #1
 8014c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014c82:	69fb      	ldr	r3, [r7, #28]
 8014c84:	f003 0302 	and.w	r3, r3, #2
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d104      	bne.n	8014c96 <HAL_SPI_IRQHandler+0x17e>
 8014c8c:	69fb      	ldr	r3, [r7, #28]
 8014c8e:	f003 0301 	and.w	r3, r3, #1
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d034      	beq.n	8014d00 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	685a      	ldr	r2, [r3, #4]
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	f022 0203 	bic.w	r2, r2, #3
 8014ca4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d011      	beq.n	8014cd2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cb2:	4a18      	ldr	r2, [pc, #96]	; (8014d14 <HAL_SPI_IRQHandler+0x1fc>)
 8014cb4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fd fdcf 	bl	801285e <HAL_DMA_Abort_IT>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d005      	beq.n	8014cd2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014cca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d016      	beq.n	8014d08 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cde:	4a0d      	ldr	r2, [pc, #52]	; (8014d14 <HAL_SPI_IRQHandler+0x1fc>)
 8014ce0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7fd fdb9 	bl	801285e <HAL_DMA_Abort_IT>
 8014cec:	4603      	mov	r3, r0
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d00a      	beq.n	8014d08 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8014cfe:	e003      	b.n	8014d08 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f000 f809 	bl	8014d18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8014d06:	e000      	b.n	8014d0a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8014d08:	bf00      	nop
    return;
 8014d0a:	bf00      	nop
  }
}
 8014d0c:	3720      	adds	r7, #32
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd80      	pop	{r7, pc}
 8014d12:	bf00      	nop
 8014d14:	08014d49 	.word	0x08014d49

08014d18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b083      	sub	sp, #12
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014d20:	bf00      	nop
 8014d22:	370c      	adds	r7, #12
 8014d24:	46bd      	mov	sp, r7
 8014d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2a:	4770      	bx	lr

08014d2c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b083      	sub	sp, #12
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014d3a:	b2db      	uxtb	r3, r3
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	370c      	adds	r7, #12
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr

08014d48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b084      	sub	sp, #16
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	2200      	movs	r2, #0
 8014d62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	f7ff ffd7 	bl	8014d18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014d6a:	bf00      	nop
 8014d6c:	3710      	adds	r7, #16
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
	...

08014d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b088      	sub	sp, #32
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	603b      	str	r3, [r7, #0]
 8014d80:	4613      	mov	r3, r2
 8014d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014d84:	f7fc fc82 	bl	801168c <HAL_GetTick>
 8014d88:	4602      	mov	r2, r0
 8014d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d8c:	1a9b      	subs	r3, r3, r2
 8014d8e:	683a      	ldr	r2, [r7, #0]
 8014d90:	4413      	add	r3, r2
 8014d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014d94:	f7fc fc7a 	bl	801168c <HAL_GetTick>
 8014d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014d9a:	4b39      	ldr	r3, [pc, #228]	; (8014e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	015b      	lsls	r3, r3, #5
 8014da0:	0d1b      	lsrs	r3, r3, #20
 8014da2:	69fa      	ldr	r2, [r7, #28]
 8014da4:	fb02 f303 	mul.w	r3, r2, r3
 8014da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014daa:	e054      	b.n	8014e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014db2:	d050      	beq.n	8014e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014db4:	f7fc fc6a 	bl	801168c <HAL_GetTick>
 8014db8:	4602      	mov	r2, r0
 8014dba:	69bb      	ldr	r3, [r7, #24]
 8014dbc:	1ad3      	subs	r3, r2, r3
 8014dbe:	69fa      	ldr	r2, [r7, #28]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d902      	bls.n	8014dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8014dc4:	69fb      	ldr	r3, [r7, #28]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d13d      	bne.n	8014e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	685a      	ldr	r2, [r3, #4]
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	685b      	ldr	r3, [r3, #4]
 8014dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014de2:	d111      	bne.n	8014e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	689b      	ldr	r3, [r3, #8]
 8014de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014dec:	d004      	beq.n	8014df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	689b      	ldr	r3, [r3, #8]
 8014df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014df6:	d107      	bne.n	8014e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	681a      	ldr	r2, [r3, #0]
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014e10:	d10f      	bne.n	8014e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	681a      	ldr	r2, [r3, #0]
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014e20:	601a      	str	r2, [r3, #0]
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	681a      	ldr	r2, [r3, #0]
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	2201      	movs	r2, #1
 8014e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8014e42:	2303      	movs	r3, #3
 8014e44:	e017      	b.n	8014e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d101      	bne.n	8014e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014e50:	697b      	ldr	r3, [r7, #20]
 8014e52:	3b01      	subs	r3, #1
 8014e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	689a      	ldr	r2, [r3, #8]
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	4013      	ands	r3, r2
 8014e60:	68ba      	ldr	r2, [r7, #8]
 8014e62:	429a      	cmp	r2, r3
 8014e64:	bf0c      	ite	eq
 8014e66:	2301      	moveq	r3, #1
 8014e68:	2300      	movne	r3, #0
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	79fb      	ldrb	r3, [r7, #7]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d19b      	bne.n	8014dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014e74:	2300      	movs	r3, #0
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3720      	adds	r7, #32
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	20000000 	.word	0x20000000

08014e84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b088      	sub	sp, #32
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	60f8      	str	r0, [r7, #12]
 8014e8c:	60b9      	str	r1, [r7, #8]
 8014e8e:	607a      	str	r2, [r7, #4]
 8014e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8014e92:	f7fc fbfb 	bl	801168c <HAL_GetTick>
 8014e96:	4602      	mov	r2, r0
 8014e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e9a:	1a9b      	subs	r3, r3, r2
 8014e9c:	683a      	ldr	r2, [r7, #0]
 8014e9e:	4413      	add	r3, r2
 8014ea0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014ea2:	f7fc fbf3 	bl	801168c <HAL_GetTick>
 8014ea6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8014ea8:	4b3e      	ldr	r3, [pc, #248]	; (8014fa4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8014eaa:	681a      	ldr	r2, [r3, #0]
 8014eac:	4613      	mov	r3, r2
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	4413      	add	r3, r2
 8014eb2:	00da      	lsls	r2, r3, #3
 8014eb4:	1ad3      	subs	r3, r2, r3
 8014eb6:	0d1b      	lsrs	r3, r3, #20
 8014eb8:	69fa      	ldr	r2, [r7, #28]
 8014eba:	fb02 f303 	mul.w	r3, r2, r3
 8014ebe:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8014ec0:	e062      	b.n	8014f88 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8014ec8:	d109      	bne.n	8014ede <SPI_WaitFifoStateUntilTimeout+0x5a>
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d106      	bne.n	8014ede <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	330c      	adds	r3, #12
 8014ed6:	781b      	ldrb	r3, [r3, #0]
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8014edc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ee4:	d050      	beq.n	8014f88 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014ee6:	f7fc fbd1 	bl	801168c <HAL_GetTick>
 8014eea:	4602      	mov	r2, r0
 8014eec:	69bb      	ldr	r3, [r7, #24]
 8014eee:	1ad3      	subs	r3, r2, r3
 8014ef0:	69fa      	ldr	r2, [r7, #28]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d902      	bls.n	8014efc <SPI_WaitFifoStateUntilTimeout+0x78>
 8014ef6:	69fb      	ldr	r3, [r7, #28]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d13d      	bne.n	8014f78 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	685a      	ldr	r2, [r3, #4]
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014f0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	685b      	ldr	r3, [r3, #4]
 8014f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014f14:	d111      	bne.n	8014f3a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	689b      	ldr	r3, [r3, #8]
 8014f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014f1e:	d004      	beq.n	8014f2a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	689b      	ldr	r3, [r3, #8]
 8014f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014f28:	d107      	bne.n	8014f3a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	681a      	ldr	r2, [r3, #0]
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014f38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014f42:	d10f      	bne.n	8014f64 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	681a      	ldr	r2, [r3, #0]
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014f52:	601a      	str	r2, [r3, #0]
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	681a      	ldr	r2, [r3, #0]
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014f62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	2201      	movs	r2, #1
 8014f68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	2200      	movs	r2, #0
 8014f70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8014f74:	2303      	movs	r3, #3
 8014f76:	e010      	b.n	8014f9a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d101      	bne.n	8014f82 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	3b01      	subs	r3, #1
 8014f86:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	689a      	ldr	r2, [r3, #8]
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	4013      	ands	r3, r2
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	429a      	cmp	r2, r3
 8014f96:	d194      	bne.n	8014ec2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8014f98:	2300      	movs	r3, #0
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3720      	adds	r7, #32
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	20000000 	.word	0x20000000

08014fa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b086      	sub	sp, #24
 8014fac:	af02      	add	r7, sp, #8
 8014fae:	60f8      	str	r0, [r7, #12]
 8014fb0:	60b9      	str	r1, [r7, #8]
 8014fb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	9300      	str	r3, [sp, #0]
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8014fc0:	68f8      	ldr	r0, [r7, #12]
 8014fc2:	f7ff ff5f 	bl	8014e84 <SPI_WaitFifoStateUntilTimeout>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d007      	beq.n	8014fdc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014fd0:	f043 0220 	orr.w	r2, r3, #32
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8014fd8:	2303      	movs	r3, #3
 8014fda:	e027      	b.n	801502c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	9300      	str	r3, [sp, #0]
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	2180      	movs	r1, #128	; 0x80
 8014fe6:	68f8      	ldr	r0, [r7, #12]
 8014fe8:	f7ff fec4 	bl	8014d74 <SPI_WaitFlagStateUntilTimeout>
 8014fec:	4603      	mov	r3, r0
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d007      	beq.n	8015002 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014ff6:	f043 0220 	orr.w	r2, r3, #32
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8014ffe:	2303      	movs	r3, #3
 8015000:	e014      	b.n	801502c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	9300      	str	r3, [sp, #0]
 8015006:	68bb      	ldr	r3, [r7, #8]
 8015008:	2200      	movs	r2, #0
 801500a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801500e:	68f8      	ldr	r0, [r7, #12]
 8015010:	f7ff ff38 	bl	8014e84 <SPI_WaitFifoStateUntilTimeout>
 8015014:	4603      	mov	r3, r0
 8015016:	2b00      	cmp	r3, #0
 8015018:	d007      	beq.n	801502a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801501e:	f043 0220 	orr.w	r2, r3, #32
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8015026:	2303      	movs	r3, #3
 8015028:	e000      	b.n	801502c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801502a:	2300      	movs	r3, #0
}
 801502c:	4618      	mov	r0, r3
 801502e:	3710      	adds	r7, #16
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}

08015034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d101      	bne.n	8015046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015042:	2301      	movs	r3, #1
 8015044:	e040      	b.n	80150c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801504a:	2b00      	cmp	r3, #0
 801504c:	d106      	bne.n	801505c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2200      	movs	r2, #0
 8015052:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f7fc f80e 	bl	8011078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2224      	movs	r2, #36	; 0x24
 8015060:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	681a      	ldr	r2, [r3, #0]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	f022 0201 	bic.w	r2, r2, #1
 8015070:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f000 f8c0 	bl	80151f8 <UART_SetConfig>
 8015078:	4603      	mov	r3, r0
 801507a:	2b01      	cmp	r3, #1
 801507c:	d101      	bne.n	8015082 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801507e:	2301      	movs	r3, #1
 8015080:	e022      	b.n	80150c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015086:	2b00      	cmp	r3, #0
 8015088:	d002      	beq.n	8015090 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801508a:	6878      	ldr	r0, [r7, #4]
 801508c:	f000 fb3e 	bl	801570c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	685a      	ldr	r2, [r3, #4]
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801509e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	689a      	ldr	r2, [r3, #8]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80150ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	f042 0201 	orr.w	r2, r2, #1
 80150be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80150c0:	6878      	ldr	r0, [r7, #4]
 80150c2:	f000 fbc5 	bl	8015850 <UART_CheckIdleState>
 80150c6:	4603      	mov	r3, r0
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b08a      	sub	sp, #40	; 0x28
 80150d4:	af02      	add	r7, sp, #8
 80150d6:	60f8      	str	r0, [r7, #12]
 80150d8:	60b9      	str	r1, [r7, #8]
 80150da:	603b      	str	r3, [r7, #0]
 80150dc:	4613      	mov	r3, r2
 80150de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80150e4:	2b20      	cmp	r3, #32
 80150e6:	f040 8082 	bne.w	80151ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d002      	beq.n	80150f6 <HAL_UART_Transmit+0x26>
 80150f0:	88fb      	ldrh	r3, [r7, #6]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d101      	bne.n	80150fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80150f6:	2301      	movs	r3, #1
 80150f8:	e07a      	b.n	80151f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8015100:	2b01      	cmp	r3, #1
 8015102:	d101      	bne.n	8015108 <HAL_UART_Transmit+0x38>
 8015104:	2302      	movs	r3, #2
 8015106:	e073      	b.n	80151f0 <HAL_UART_Transmit+0x120>
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	2201      	movs	r2, #1
 801510c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	2200      	movs	r2, #0
 8015114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	2221      	movs	r2, #33	; 0x21
 801511c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801511e:	f7fc fab5 	bl	801168c <HAL_GetTick>
 8015122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	88fa      	ldrh	r2, [r7, #6]
 8015128:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	88fa      	ldrh	r2, [r7, #6]
 8015130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	689b      	ldr	r3, [r3, #8]
 8015138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801513c:	d108      	bne.n	8015150 <HAL_UART_Transmit+0x80>
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	691b      	ldr	r3, [r3, #16]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d104      	bne.n	8015150 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8015146:	2300      	movs	r3, #0
 8015148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	61bb      	str	r3, [r7, #24]
 801514e:	e003      	b.n	8015158 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015154:	2300      	movs	r3, #0
 8015156:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2200      	movs	r2, #0
 801515c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8015160:	e02d      	b.n	80151be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	9300      	str	r3, [sp, #0]
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	2200      	movs	r2, #0
 801516a:	2180      	movs	r1, #128	; 0x80
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	f000 fbb8 	bl	80158e2 <UART_WaitOnFlagUntilTimeout>
 8015172:	4603      	mov	r3, r0
 8015174:	2b00      	cmp	r3, #0
 8015176:	d001      	beq.n	801517c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8015178:	2303      	movs	r3, #3
 801517a:	e039      	b.n	80151f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 801517c:	69fb      	ldr	r3, [r7, #28]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d10b      	bne.n	801519a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015182:	69bb      	ldr	r3, [r7, #24]
 8015184:	881a      	ldrh	r2, [r3, #0]
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801518e:	b292      	uxth	r2, r2
 8015190:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8015192:	69bb      	ldr	r3, [r7, #24]
 8015194:	3302      	adds	r3, #2
 8015196:	61bb      	str	r3, [r7, #24]
 8015198:	e008      	b.n	80151ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801519a:	69fb      	ldr	r3, [r7, #28]
 801519c:	781a      	ldrb	r2, [r3, #0]
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	b292      	uxth	r2, r2
 80151a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80151a6:	69fb      	ldr	r3, [r7, #28]
 80151a8:	3301      	adds	r3, #1
 80151aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	3b01      	subs	r3, #1
 80151b6:	b29a      	uxth	r2, r3
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d1cb      	bne.n	8015162 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	9300      	str	r3, [sp, #0]
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	2200      	movs	r2, #0
 80151d2:	2140      	movs	r1, #64	; 0x40
 80151d4:	68f8      	ldr	r0, [r7, #12]
 80151d6:	f000 fb84 	bl	80158e2 <UART_WaitOnFlagUntilTimeout>
 80151da:	4603      	mov	r3, r0
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d001      	beq.n	80151e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80151e0:	2303      	movs	r3, #3
 80151e2:	e005      	b.n	80151f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	2220      	movs	r2, #32
 80151e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80151ea:	2300      	movs	r3, #0
 80151ec:	e000      	b.n	80151f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80151ee:	2302      	movs	r3, #2
  }
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3720      	adds	r7, #32
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}

080151f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80151f8:	b5b0      	push	{r4, r5, r7, lr}
 80151fa:	b088      	sub	sp, #32
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015200:	2300      	movs	r3, #0
 8015202:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	689a      	ldr	r2, [r3, #8]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	691b      	ldr	r3, [r3, #16]
 801520c:	431a      	orrs	r2, r3
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	695b      	ldr	r3, [r3, #20]
 8015212:	431a      	orrs	r2, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	69db      	ldr	r3, [r3, #28]
 8015218:	4313      	orrs	r3, r2
 801521a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	681a      	ldr	r2, [r3, #0]
 8015222:	4bad      	ldr	r3, [pc, #692]	; (80154d8 <UART_SetConfig+0x2e0>)
 8015224:	4013      	ands	r3, r2
 8015226:	687a      	ldr	r2, [r7, #4]
 8015228:	6812      	ldr	r2, [r2, #0]
 801522a:	69f9      	ldr	r1, [r7, #28]
 801522c:	430b      	orrs	r3, r1
 801522e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	68da      	ldr	r2, [r3, #12]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	430a      	orrs	r2, r1
 8015244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	699b      	ldr	r3, [r3, #24]
 801524a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	4aa2      	ldr	r2, [pc, #648]	; (80154dc <UART_SetConfig+0x2e4>)
 8015252:	4293      	cmp	r3, r2
 8015254:	d004      	beq.n	8015260 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	6a1b      	ldr	r3, [r3, #32]
 801525a:	69fa      	ldr	r2, [r7, #28]
 801525c:	4313      	orrs	r3, r2
 801525e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	689b      	ldr	r3, [r3, #8]
 8015266:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	69fa      	ldr	r2, [r7, #28]
 8015270:	430a      	orrs	r2, r1
 8015272:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	4a99      	ldr	r2, [pc, #612]	; (80154e0 <UART_SetConfig+0x2e8>)
 801527a:	4293      	cmp	r3, r2
 801527c:	d121      	bne.n	80152c2 <UART_SetConfig+0xca>
 801527e:	4b99      	ldr	r3, [pc, #612]	; (80154e4 <UART_SetConfig+0x2ec>)
 8015280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015284:	f003 0303 	and.w	r3, r3, #3
 8015288:	2b03      	cmp	r3, #3
 801528a:	d817      	bhi.n	80152bc <UART_SetConfig+0xc4>
 801528c:	a201      	add	r2, pc, #4	; (adr r2, 8015294 <UART_SetConfig+0x9c>)
 801528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015292:	bf00      	nop
 8015294:	080152a5 	.word	0x080152a5
 8015298:	080152b1 	.word	0x080152b1
 801529c:	080152ab 	.word	0x080152ab
 80152a0:	080152b7 	.word	0x080152b7
 80152a4:	2301      	movs	r3, #1
 80152a6:	76fb      	strb	r3, [r7, #27]
 80152a8:	e0e7      	b.n	801547a <UART_SetConfig+0x282>
 80152aa:	2302      	movs	r3, #2
 80152ac:	76fb      	strb	r3, [r7, #27]
 80152ae:	e0e4      	b.n	801547a <UART_SetConfig+0x282>
 80152b0:	2304      	movs	r3, #4
 80152b2:	76fb      	strb	r3, [r7, #27]
 80152b4:	e0e1      	b.n	801547a <UART_SetConfig+0x282>
 80152b6:	2308      	movs	r3, #8
 80152b8:	76fb      	strb	r3, [r7, #27]
 80152ba:	e0de      	b.n	801547a <UART_SetConfig+0x282>
 80152bc:	2310      	movs	r3, #16
 80152be:	76fb      	strb	r3, [r7, #27]
 80152c0:	e0db      	b.n	801547a <UART_SetConfig+0x282>
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	4a88      	ldr	r2, [pc, #544]	; (80154e8 <UART_SetConfig+0x2f0>)
 80152c8:	4293      	cmp	r3, r2
 80152ca:	d132      	bne.n	8015332 <UART_SetConfig+0x13a>
 80152cc:	4b85      	ldr	r3, [pc, #532]	; (80154e4 <UART_SetConfig+0x2ec>)
 80152ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80152d2:	f003 030c 	and.w	r3, r3, #12
 80152d6:	2b0c      	cmp	r3, #12
 80152d8:	d828      	bhi.n	801532c <UART_SetConfig+0x134>
 80152da:	a201      	add	r2, pc, #4	; (adr r2, 80152e0 <UART_SetConfig+0xe8>)
 80152dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152e0:	08015315 	.word	0x08015315
 80152e4:	0801532d 	.word	0x0801532d
 80152e8:	0801532d 	.word	0x0801532d
 80152ec:	0801532d 	.word	0x0801532d
 80152f0:	08015321 	.word	0x08015321
 80152f4:	0801532d 	.word	0x0801532d
 80152f8:	0801532d 	.word	0x0801532d
 80152fc:	0801532d 	.word	0x0801532d
 8015300:	0801531b 	.word	0x0801531b
 8015304:	0801532d 	.word	0x0801532d
 8015308:	0801532d 	.word	0x0801532d
 801530c:	0801532d 	.word	0x0801532d
 8015310:	08015327 	.word	0x08015327
 8015314:	2300      	movs	r3, #0
 8015316:	76fb      	strb	r3, [r7, #27]
 8015318:	e0af      	b.n	801547a <UART_SetConfig+0x282>
 801531a:	2302      	movs	r3, #2
 801531c:	76fb      	strb	r3, [r7, #27]
 801531e:	e0ac      	b.n	801547a <UART_SetConfig+0x282>
 8015320:	2304      	movs	r3, #4
 8015322:	76fb      	strb	r3, [r7, #27]
 8015324:	e0a9      	b.n	801547a <UART_SetConfig+0x282>
 8015326:	2308      	movs	r3, #8
 8015328:	76fb      	strb	r3, [r7, #27]
 801532a:	e0a6      	b.n	801547a <UART_SetConfig+0x282>
 801532c:	2310      	movs	r3, #16
 801532e:	76fb      	strb	r3, [r7, #27]
 8015330:	e0a3      	b.n	801547a <UART_SetConfig+0x282>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	4a6d      	ldr	r2, [pc, #436]	; (80154ec <UART_SetConfig+0x2f4>)
 8015338:	4293      	cmp	r3, r2
 801533a:	d120      	bne.n	801537e <UART_SetConfig+0x186>
 801533c:	4b69      	ldr	r3, [pc, #420]	; (80154e4 <UART_SetConfig+0x2ec>)
 801533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015342:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8015346:	2b30      	cmp	r3, #48	; 0x30
 8015348:	d013      	beq.n	8015372 <UART_SetConfig+0x17a>
 801534a:	2b30      	cmp	r3, #48	; 0x30
 801534c:	d814      	bhi.n	8015378 <UART_SetConfig+0x180>
 801534e:	2b20      	cmp	r3, #32
 8015350:	d009      	beq.n	8015366 <UART_SetConfig+0x16e>
 8015352:	2b20      	cmp	r3, #32
 8015354:	d810      	bhi.n	8015378 <UART_SetConfig+0x180>
 8015356:	2b00      	cmp	r3, #0
 8015358:	d002      	beq.n	8015360 <UART_SetConfig+0x168>
 801535a:	2b10      	cmp	r3, #16
 801535c:	d006      	beq.n	801536c <UART_SetConfig+0x174>
 801535e:	e00b      	b.n	8015378 <UART_SetConfig+0x180>
 8015360:	2300      	movs	r3, #0
 8015362:	76fb      	strb	r3, [r7, #27]
 8015364:	e089      	b.n	801547a <UART_SetConfig+0x282>
 8015366:	2302      	movs	r3, #2
 8015368:	76fb      	strb	r3, [r7, #27]
 801536a:	e086      	b.n	801547a <UART_SetConfig+0x282>
 801536c:	2304      	movs	r3, #4
 801536e:	76fb      	strb	r3, [r7, #27]
 8015370:	e083      	b.n	801547a <UART_SetConfig+0x282>
 8015372:	2308      	movs	r3, #8
 8015374:	76fb      	strb	r3, [r7, #27]
 8015376:	e080      	b.n	801547a <UART_SetConfig+0x282>
 8015378:	2310      	movs	r3, #16
 801537a:	76fb      	strb	r3, [r7, #27]
 801537c:	e07d      	b.n	801547a <UART_SetConfig+0x282>
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	4a5b      	ldr	r2, [pc, #364]	; (80154f0 <UART_SetConfig+0x2f8>)
 8015384:	4293      	cmp	r3, r2
 8015386:	d120      	bne.n	80153ca <UART_SetConfig+0x1d2>
 8015388:	4b56      	ldr	r3, [pc, #344]	; (80154e4 <UART_SetConfig+0x2ec>)
 801538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801538e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015392:	2bc0      	cmp	r3, #192	; 0xc0
 8015394:	d013      	beq.n	80153be <UART_SetConfig+0x1c6>
 8015396:	2bc0      	cmp	r3, #192	; 0xc0
 8015398:	d814      	bhi.n	80153c4 <UART_SetConfig+0x1cc>
 801539a:	2b80      	cmp	r3, #128	; 0x80
 801539c:	d009      	beq.n	80153b2 <UART_SetConfig+0x1ba>
 801539e:	2b80      	cmp	r3, #128	; 0x80
 80153a0:	d810      	bhi.n	80153c4 <UART_SetConfig+0x1cc>
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d002      	beq.n	80153ac <UART_SetConfig+0x1b4>
 80153a6:	2b40      	cmp	r3, #64	; 0x40
 80153a8:	d006      	beq.n	80153b8 <UART_SetConfig+0x1c0>
 80153aa:	e00b      	b.n	80153c4 <UART_SetConfig+0x1cc>
 80153ac:	2300      	movs	r3, #0
 80153ae:	76fb      	strb	r3, [r7, #27]
 80153b0:	e063      	b.n	801547a <UART_SetConfig+0x282>
 80153b2:	2302      	movs	r3, #2
 80153b4:	76fb      	strb	r3, [r7, #27]
 80153b6:	e060      	b.n	801547a <UART_SetConfig+0x282>
 80153b8:	2304      	movs	r3, #4
 80153ba:	76fb      	strb	r3, [r7, #27]
 80153bc:	e05d      	b.n	801547a <UART_SetConfig+0x282>
 80153be:	2308      	movs	r3, #8
 80153c0:	76fb      	strb	r3, [r7, #27]
 80153c2:	e05a      	b.n	801547a <UART_SetConfig+0x282>
 80153c4:	2310      	movs	r3, #16
 80153c6:	76fb      	strb	r3, [r7, #27]
 80153c8:	e057      	b.n	801547a <UART_SetConfig+0x282>
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	4a49      	ldr	r2, [pc, #292]	; (80154f4 <UART_SetConfig+0x2fc>)
 80153d0:	4293      	cmp	r3, r2
 80153d2:	d125      	bne.n	8015420 <UART_SetConfig+0x228>
 80153d4:	4b43      	ldr	r3, [pc, #268]	; (80154e4 <UART_SetConfig+0x2ec>)
 80153d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80153da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80153de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80153e2:	d017      	beq.n	8015414 <UART_SetConfig+0x21c>
 80153e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80153e8:	d817      	bhi.n	801541a <UART_SetConfig+0x222>
 80153ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153ee:	d00b      	beq.n	8015408 <UART_SetConfig+0x210>
 80153f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153f4:	d811      	bhi.n	801541a <UART_SetConfig+0x222>
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d003      	beq.n	8015402 <UART_SetConfig+0x20a>
 80153fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153fe:	d006      	beq.n	801540e <UART_SetConfig+0x216>
 8015400:	e00b      	b.n	801541a <UART_SetConfig+0x222>
 8015402:	2300      	movs	r3, #0
 8015404:	76fb      	strb	r3, [r7, #27]
 8015406:	e038      	b.n	801547a <UART_SetConfig+0x282>
 8015408:	2302      	movs	r3, #2
 801540a:	76fb      	strb	r3, [r7, #27]
 801540c:	e035      	b.n	801547a <UART_SetConfig+0x282>
 801540e:	2304      	movs	r3, #4
 8015410:	76fb      	strb	r3, [r7, #27]
 8015412:	e032      	b.n	801547a <UART_SetConfig+0x282>
 8015414:	2308      	movs	r3, #8
 8015416:	76fb      	strb	r3, [r7, #27]
 8015418:	e02f      	b.n	801547a <UART_SetConfig+0x282>
 801541a:	2310      	movs	r3, #16
 801541c:	76fb      	strb	r3, [r7, #27]
 801541e:	e02c      	b.n	801547a <UART_SetConfig+0x282>
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	4a2d      	ldr	r2, [pc, #180]	; (80154dc <UART_SetConfig+0x2e4>)
 8015426:	4293      	cmp	r3, r2
 8015428:	d125      	bne.n	8015476 <UART_SetConfig+0x27e>
 801542a:	4b2e      	ldr	r3, [pc, #184]	; (80154e4 <UART_SetConfig+0x2ec>)
 801542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015430:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8015434:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015438:	d017      	beq.n	801546a <UART_SetConfig+0x272>
 801543a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801543e:	d817      	bhi.n	8015470 <UART_SetConfig+0x278>
 8015440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015444:	d00b      	beq.n	801545e <UART_SetConfig+0x266>
 8015446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801544a:	d811      	bhi.n	8015470 <UART_SetConfig+0x278>
 801544c:	2b00      	cmp	r3, #0
 801544e:	d003      	beq.n	8015458 <UART_SetConfig+0x260>
 8015450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015454:	d006      	beq.n	8015464 <UART_SetConfig+0x26c>
 8015456:	e00b      	b.n	8015470 <UART_SetConfig+0x278>
 8015458:	2300      	movs	r3, #0
 801545a:	76fb      	strb	r3, [r7, #27]
 801545c:	e00d      	b.n	801547a <UART_SetConfig+0x282>
 801545e:	2302      	movs	r3, #2
 8015460:	76fb      	strb	r3, [r7, #27]
 8015462:	e00a      	b.n	801547a <UART_SetConfig+0x282>
 8015464:	2304      	movs	r3, #4
 8015466:	76fb      	strb	r3, [r7, #27]
 8015468:	e007      	b.n	801547a <UART_SetConfig+0x282>
 801546a:	2308      	movs	r3, #8
 801546c:	76fb      	strb	r3, [r7, #27]
 801546e:	e004      	b.n	801547a <UART_SetConfig+0x282>
 8015470:	2310      	movs	r3, #16
 8015472:	76fb      	strb	r3, [r7, #27]
 8015474:	e001      	b.n	801547a <UART_SetConfig+0x282>
 8015476:	2310      	movs	r3, #16
 8015478:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	4a17      	ldr	r2, [pc, #92]	; (80154dc <UART_SetConfig+0x2e4>)
 8015480:	4293      	cmp	r3, r2
 8015482:	f040 8087 	bne.w	8015594 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015486:	7efb      	ldrb	r3, [r7, #27]
 8015488:	2b08      	cmp	r3, #8
 801548a:	d837      	bhi.n	80154fc <UART_SetConfig+0x304>
 801548c:	a201      	add	r2, pc, #4	; (adr r2, 8015494 <UART_SetConfig+0x29c>)
 801548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015492:	bf00      	nop
 8015494:	080154b9 	.word	0x080154b9
 8015498:	080154fd 	.word	0x080154fd
 801549c:	080154c1 	.word	0x080154c1
 80154a0:	080154fd 	.word	0x080154fd
 80154a4:	080154c7 	.word	0x080154c7
 80154a8:	080154fd 	.word	0x080154fd
 80154ac:	080154fd 	.word	0x080154fd
 80154b0:	080154fd 	.word	0x080154fd
 80154b4:	080154cf 	.word	0x080154cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80154b8:	f7fe fb26 	bl	8013b08 <HAL_RCC_GetPCLK1Freq>
 80154bc:	6178      	str	r0, [r7, #20]
        break;
 80154be:	e022      	b.n	8015506 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80154c0:	4b0d      	ldr	r3, [pc, #52]	; (80154f8 <UART_SetConfig+0x300>)
 80154c2:	617b      	str	r3, [r7, #20]
        break;
 80154c4:	e01f      	b.n	8015506 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80154c6:	f7fe fa87 	bl	80139d8 <HAL_RCC_GetSysClockFreq>
 80154ca:	6178      	str	r0, [r7, #20]
        break;
 80154cc:	e01b      	b.n	8015506 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80154ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80154d2:	617b      	str	r3, [r7, #20]
        break;
 80154d4:	e017      	b.n	8015506 <UART_SetConfig+0x30e>
 80154d6:	bf00      	nop
 80154d8:	efff69f3 	.word	0xefff69f3
 80154dc:	40008000 	.word	0x40008000
 80154e0:	40013800 	.word	0x40013800
 80154e4:	40021000 	.word	0x40021000
 80154e8:	40004400 	.word	0x40004400
 80154ec:	40004800 	.word	0x40004800
 80154f0:	40004c00 	.word	0x40004c00
 80154f4:	40005000 	.word	0x40005000
 80154f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80154fc:	2300      	movs	r3, #0
 80154fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8015500:	2301      	movs	r3, #1
 8015502:	76bb      	strb	r3, [r7, #26]
        break;
 8015504:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015506:	697b      	ldr	r3, [r7, #20]
 8015508:	2b00      	cmp	r3, #0
 801550a:	f000 80f1 	beq.w	80156f0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	685a      	ldr	r2, [r3, #4]
 8015512:	4613      	mov	r3, r2
 8015514:	005b      	lsls	r3, r3, #1
 8015516:	4413      	add	r3, r2
 8015518:	697a      	ldr	r2, [r7, #20]
 801551a:	429a      	cmp	r2, r3
 801551c:	d305      	bcc.n	801552a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	685b      	ldr	r3, [r3, #4]
 8015522:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015524:	697a      	ldr	r2, [r7, #20]
 8015526:	429a      	cmp	r2, r3
 8015528:	d902      	bls.n	8015530 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 801552a:	2301      	movs	r3, #1
 801552c:	76bb      	strb	r3, [r7, #26]
 801552e:	e0df      	b.n	80156f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	4618      	mov	r0, r3
 8015534:	f04f 0100 	mov.w	r1, #0
 8015538:	f04f 0200 	mov.w	r2, #0
 801553c:	f04f 0300 	mov.w	r3, #0
 8015540:	020b      	lsls	r3, r1, #8
 8015542:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015546:	0202      	lsls	r2, r0, #8
 8015548:	6879      	ldr	r1, [r7, #4]
 801554a:	6849      	ldr	r1, [r1, #4]
 801554c:	0849      	lsrs	r1, r1, #1
 801554e:	4608      	mov	r0, r1
 8015550:	f04f 0100 	mov.w	r1, #0
 8015554:	1814      	adds	r4, r2, r0
 8015556:	eb43 0501 	adc.w	r5, r3, r1
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	461a      	mov	r2, r3
 8015560:	f04f 0300 	mov.w	r3, #0
 8015564:	4620      	mov	r0, r4
 8015566:	4629      	mov	r1, r5
 8015568:	f7fa fe36 	bl	80101d8 <__aeabi_uldivmod>
 801556c:	4602      	mov	r2, r0
 801556e:	460b      	mov	r3, r1
 8015570:	4613      	mov	r3, r2
 8015572:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801557a:	d308      	bcc.n	801558e <UART_SetConfig+0x396>
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015582:	d204      	bcs.n	801558e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	693a      	ldr	r2, [r7, #16]
 801558a:	60da      	str	r2, [r3, #12]
 801558c:	e0b0      	b.n	80156f0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 801558e:	2301      	movs	r3, #1
 8015590:	76bb      	strb	r3, [r7, #26]
 8015592:	e0ad      	b.n	80156f0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	69db      	ldr	r3, [r3, #28]
 8015598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801559c:	d15c      	bne.n	8015658 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 801559e:	7efb      	ldrb	r3, [r7, #27]
 80155a0:	2b08      	cmp	r3, #8
 80155a2:	d828      	bhi.n	80155f6 <UART_SetConfig+0x3fe>
 80155a4:	a201      	add	r2, pc, #4	; (adr r2, 80155ac <UART_SetConfig+0x3b4>)
 80155a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155aa:	bf00      	nop
 80155ac:	080155d1 	.word	0x080155d1
 80155b0:	080155d9 	.word	0x080155d9
 80155b4:	080155e1 	.word	0x080155e1
 80155b8:	080155f7 	.word	0x080155f7
 80155bc:	080155e7 	.word	0x080155e7
 80155c0:	080155f7 	.word	0x080155f7
 80155c4:	080155f7 	.word	0x080155f7
 80155c8:	080155f7 	.word	0x080155f7
 80155cc:	080155ef 	.word	0x080155ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80155d0:	f7fe fa9a 	bl	8013b08 <HAL_RCC_GetPCLK1Freq>
 80155d4:	6178      	str	r0, [r7, #20]
        break;
 80155d6:	e013      	b.n	8015600 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80155d8:	f7fe faac 	bl	8013b34 <HAL_RCC_GetPCLK2Freq>
 80155dc:	6178      	str	r0, [r7, #20]
        break;
 80155de:	e00f      	b.n	8015600 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80155e0:	4b49      	ldr	r3, [pc, #292]	; (8015708 <UART_SetConfig+0x510>)
 80155e2:	617b      	str	r3, [r7, #20]
        break;
 80155e4:	e00c      	b.n	8015600 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80155e6:	f7fe f9f7 	bl	80139d8 <HAL_RCC_GetSysClockFreq>
 80155ea:	6178      	str	r0, [r7, #20]
        break;
 80155ec:	e008      	b.n	8015600 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80155ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80155f2:	617b      	str	r3, [r7, #20]
        break;
 80155f4:	e004      	b.n	8015600 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80155f6:	2300      	movs	r3, #0
 80155f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80155fa:	2301      	movs	r3, #1
 80155fc:	76bb      	strb	r3, [r7, #26]
        break;
 80155fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d074      	beq.n	80156f0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8015606:	697b      	ldr	r3, [r7, #20]
 8015608:	005a      	lsls	r2, r3, #1
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	085b      	lsrs	r3, r3, #1
 8015610:	441a      	add	r2, r3
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	fbb2 f3f3 	udiv	r3, r2, r3
 801561a:	b29b      	uxth	r3, r3
 801561c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	2b0f      	cmp	r3, #15
 8015622:	d916      	bls.n	8015652 <UART_SetConfig+0x45a>
 8015624:	693b      	ldr	r3, [r7, #16]
 8015626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801562a:	d212      	bcs.n	8015652 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801562c:	693b      	ldr	r3, [r7, #16]
 801562e:	b29b      	uxth	r3, r3
 8015630:	f023 030f 	bic.w	r3, r3, #15
 8015634:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015636:	693b      	ldr	r3, [r7, #16]
 8015638:	085b      	lsrs	r3, r3, #1
 801563a:	b29b      	uxth	r3, r3
 801563c:	f003 0307 	and.w	r3, r3, #7
 8015640:	b29a      	uxth	r2, r3
 8015642:	89fb      	ldrh	r3, [r7, #14]
 8015644:	4313      	orrs	r3, r2
 8015646:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	89fa      	ldrh	r2, [r7, #14]
 801564e:	60da      	str	r2, [r3, #12]
 8015650:	e04e      	b.n	80156f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8015652:	2301      	movs	r3, #1
 8015654:	76bb      	strb	r3, [r7, #26]
 8015656:	e04b      	b.n	80156f0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015658:	7efb      	ldrb	r3, [r7, #27]
 801565a:	2b08      	cmp	r3, #8
 801565c:	d827      	bhi.n	80156ae <UART_SetConfig+0x4b6>
 801565e:	a201      	add	r2, pc, #4	; (adr r2, 8015664 <UART_SetConfig+0x46c>)
 8015660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015664:	08015689 	.word	0x08015689
 8015668:	08015691 	.word	0x08015691
 801566c:	08015699 	.word	0x08015699
 8015670:	080156af 	.word	0x080156af
 8015674:	0801569f 	.word	0x0801569f
 8015678:	080156af 	.word	0x080156af
 801567c:	080156af 	.word	0x080156af
 8015680:	080156af 	.word	0x080156af
 8015684:	080156a7 	.word	0x080156a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015688:	f7fe fa3e 	bl	8013b08 <HAL_RCC_GetPCLK1Freq>
 801568c:	6178      	str	r0, [r7, #20]
        break;
 801568e:	e013      	b.n	80156b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015690:	f7fe fa50 	bl	8013b34 <HAL_RCC_GetPCLK2Freq>
 8015694:	6178      	str	r0, [r7, #20]
        break;
 8015696:	e00f      	b.n	80156b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015698:	4b1b      	ldr	r3, [pc, #108]	; (8015708 <UART_SetConfig+0x510>)
 801569a:	617b      	str	r3, [r7, #20]
        break;
 801569c:	e00c      	b.n	80156b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801569e:	f7fe f99b 	bl	80139d8 <HAL_RCC_GetSysClockFreq>
 80156a2:	6178      	str	r0, [r7, #20]
        break;
 80156a4:	e008      	b.n	80156b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80156a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80156aa:	617b      	str	r3, [r7, #20]
        break;
 80156ac:	e004      	b.n	80156b8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80156ae:	2300      	movs	r3, #0
 80156b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80156b2:	2301      	movs	r3, #1
 80156b4:	76bb      	strb	r3, [r7, #26]
        break;
 80156b6:	bf00      	nop
    }

    if (pclk != 0U)
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d018      	beq.n	80156f0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	085a      	lsrs	r2, r3, #1
 80156c4:	697b      	ldr	r3, [r7, #20]
 80156c6:	441a      	add	r2, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80156d0:	b29b      	uxth	r3, r3
 80156d2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	2b0f      	cmp	r3, #15
 80156d8:	d908      	bls.n	80156ec <UART_SetConfig+0x4f4>
 80156da:	693b      	ldr	r3, [r7, #16]
 80156dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80156e0:	d204      	bcs.n	80156ec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	693a      	ldr	r2, [r7, #16]
 80156e8:	60da      	str	r2, [r3, #12]
 80156ea:	e001      	b.n	80156f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80156ec:	2301      	movs	r3, #1
 80156ee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2200      	movs	r2, #0
 80156f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2200      	movs	r2, #0
 80156fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80156fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80156fe:	4618      	mov	r0, r3
 8015700:	3720      	adds	r7, #32
 8015702:	46bd      	mov	sp, r7
 8015704:	bdb0      	pop	{r4, r5, r7, pc}
 8015706:	bf00      	nop
 8015708:	00f42400 	.word	0x00f42400

0801570c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801570c:	b480      	push	{r7}
 801570e:	b083      	sub	sp, #12
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015718:	f003 0301 	and.w	r3, r3, #1
 801571c:	2b00      	cmp	r3, #0
 801571e:	d00a      	beq.n	8015736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	430a      	orrs	r2, r1
 8015734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801573a:	f003 0302 	and.w	r3, r3, #2
 801573e:	2b00      	cmp	r3, #0
 8015740:	d00a      	beq.n	8015758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	430a      	orrs	r2, r1
 8015756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801575c:	f003 0304 	and.w	r3, r3, #4
 8015760:	2b00      	cmp	r3, #0
 8015762:	d00a      	beq.n	801577a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	430a      	orrs	r2, r1
 8015778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801577e:	f003 0308 	and.w	r3, r3, #8
 8015782:	2b00      	cmp	r3, #0
 8015784:	d00a      	beq.n	801579c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	685b      	ldr	r3, [r3, #4]
 801578c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	430a      	orrs	r2, r1
 801579a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157a0:	f003 0310 	and.w	r3, r3, #16
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d00a      	beq.n	80157be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	689b      	ldr	r3, [r3, #8]
 80157ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	430a      	orrs	r2, r1
 80157bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157c2:	f003 0320 	and.w	r3, r3, #32
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d00a      	beq.n	80157e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	689b      	ldr	r3, [r3, #8]
 80157d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	430a      	orrs	r2, r1
 80157de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d01a      	beq.n	8015822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	685b      	ldr	r3, [r3, #4]
 80157f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	430a      	orrs	r2, r1
 8015800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801580a:	d10a      	bne.n	8015822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	430a      	orrs	r2, r1
 8015820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801582a:	2b00      	cmp	r3, #0
 801582c:	d00a      	beq.n	8015844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	685b      	ldr	r3, [r3, #4]
 8015834:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	430a      	orrs	r2, r1
 8015842:	605a      	str	r2, [r3, #4]
  }
}
 8015844:	bf00      	nop
 8015846:	370c      	adds	r7, #12
 8015848:	46bd      	mov	sp, r7
 801584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584e:	4770      	bx	lr

08015850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b086      	sub	sp, #24
 8015854:	af02      	add	r7, sp, #8
 8015856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	2200      	movs	r2, #0
 801585c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015860:	f7fb ff14 	bl	801168c <HAL_GetTick>
 8015864:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	f003 0308 	and.w	r3, r3, #8
 8015870:	2b08      	cmp	r3, #8
 8015872:	d10e      	bne.n	8015892 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015878:	9300      	str	r3, [sp, #0]
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	2200      	movs	r2, #0
 801587e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f000 f82d 	bl	80158e2 <UART_WaitOnFlagUntilTimeout>
 8015888:	4603      	mov	r3, r0
 801588a:	2b00      	cmp	r3, #0
 801588c:	d001      	beq.n	8015892 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801588e:	2303      	movs	r3, #3
 8015890:	e023      	b.n	80158da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	f003 0304 	and.w	r3, r3, #4
 801589c:	2b04      	cmp	r3, #4
 801589e:	d10e      	bne.n	80158be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80158a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80158a4:	9300      	str	r3, [sp, #0]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	2200      	movs	r2, #0
 80158aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f000 f817 	bl	80158e2 <UART_WaitOnFlagUntilTimeout>
 80158b4:	4603      	mov	r3, r0
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d001      	beq.n	80158be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80158ba:	2303      	movs	r3, #3
 80158bc:	e00d      	b.n	80158da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	2220      	movs	r2, #32
 80158c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2220      	movs	r2, #32
 80158c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	2200      	movs	r2, #0
 80158ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2200      	movs	r2, #0
 80158d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80158d8:	2300      	movs	r3, #0
}
 80158da:	4618      	mov	r0, r3
 80158dc:	3710      	adds	r7, #16
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}

080158e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80158e2:	b580      	push	{r7, lr}
 80158e4:	b084      	sub	sp, #16
 80158e6:	af00      	add	r7, sp, #0
 80158e8:	60f8      	str	r0, [r7, #12]
 80158ea:	60b9      	str	r1, [r7, #8]
 80158ec:	603b      	str	r3, [r7, #0]
 80158ee:	4613      	mov	r3, r2
 80158f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80158f2:	e05e      	b.n	80159b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80158f4:	69bb      	ldr	r3, [r7, #24]
 80158f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158fa:	d05a      	beq.n	80159b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80158fc:	f7fb fec6 	bl	801168c <HAL_GetTick>
 8015900:	4602      	mov	r2, r0
 8015902:	683b      	ldr	r3, [r7, #0]
 8015904:	1ad3      	subs	r3, r2, r3
 8015906:	69ba      	ldr	r2, [r7, #24]
 8015908:	429a      	cmp	r2, r3
 801590a:	d302      	bcc.n	8015912 <UART_WaitOnFlagUntilTimeout+0x30>
 801590c:	69bb      	ldr	r3, [r7, #24]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d11b      	bne.n	801594a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	681a      	ldr	r2, [r3, #0]
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8015920:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	689a      	ldr	r2, [r3, #8]
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	f022 0201 	bic.w	r2, r2, #1
 8015930:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	2220      	movs	r2, #32
 8015936:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	2220      	movs	r2, #32
 801593c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	2200      	movs	r2, #0
 8015942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8015946:	2303      	movs	r3, #3
 8015948:	e043      	b.n	80159d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	f003 0304 	and.w	r3, r3, #4
 8015954:	2b00      	cmp	r3, #0
 8015956:	d02c      	beq.n	80159b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	69db      	ldr	r3, [r3, #28]
 801595e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015966:	d124      	bne.n	80159b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015970:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	681a      	ldr	r2, [r3, #0]
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8015980:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	689a      	ldr	r2, [r3, #8]
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	f022 0201 	bic.w	r2, r2, #1
 8015990:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	2220      	movs	r2, #32
 8015996:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	2220      	movs	r2, #32
 801599c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	2220      	movs	r2, #32
 80159a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	2200      	movs	r2, #0
 80159aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80159ae:	2303      	movs	r3, #3
 80159b0:	e00f      	b.n	80159d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	69da      	ldr	r2, [r3, #28]
 80159b8:	68bb      	ldr	r3, [r7, #8]
 80159ba:	4013      	ands	r3, r2
 80159bc:	68ba      	ldr	r2, [r7, #8]
 80159be:	429a      	cmp	r2, r3
 80159c0:	bf0c      	ite	eq
 80159c2:	2301      	moveq	r3, #1
 80159c4:	2300      	movne	r3, #0
 80159c6:	b2db      	uxtb	r3, r3
 80159c8:	461a      	mov	r2, r3
 80159ca:	79fb      	ldrb	r3, [r7, #7]
 80159cc:	429a      	cmp	r2, r3
 80159ce:	d091      	beq.n	80158f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80159d0:	2300      	movs	r3, #0
}
 80159d2:	4618      	mov	r0, r3
 80159d4:	3710      	adds	r7, #16
 80159d6:	46bd      	mov	sp, r7
 80159d8:	bd80      	pop	{r7, pc}

080159da <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80159da:	b580      	push	{r7, lr}
 80159dc:	b08c      	sub	sp, #48	; 0x30
 80159de:	af00      	add	r7, sp, #0
 80159e0:	603b      	str	r3, [r7, #0]
 80159e2:	4603      	mov	r3, r0
 80159e4:	71fb      	strb	r3, [r7, #7]
 80159e6:	460b      	mov	r3, r1
 80159e8:	71bb      	strb	r3, [r7, #6]
 80159ea:	4613      	mov	r3, r2
 80159ec:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80159ee:	79fb      	ldrb	r3, [r7, #7]
 80159f0:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80159f2:	79bb      	ldrb	r3, [r7, #6]
 80159f4:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80159f6:	797b      	ldrb	r3, [r7, #5]
 80159f8:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80159fa:	f107 030c 	add.w	r3, r7, #12
 80159fe:	2207      	movs	r2, #7
 8015a00:	2100      	movs	r1, #0
 8015a02:	4618      	mov	r0, r3
 8015a04:	f000 ffd3 	bl	80169ae <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8015a08:	f107 0318 	add.w	r3, r7, #24
 8015a0c:	2218      	movs	r2, #24
 8015a0e:	2100      	movs	r1, #0
 8015a10:	4618      	mov	r0, r3
 8015a12:	f000 ffcc 	bl	80169ae <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8015a16:	233f      	movs	r3, #63	; 0x3f
 8015a18:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8015a1a:	238a      	movs	r3, #138	; 0x8a
 8015a1c:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8015a1e:	f107 0314 	add.w	r3, r7, #20
 8015a22:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8015a24:	2303      	movs	r3, #3
 8015a26:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8015a28:	f107 030c 	add.w	r3, r7, #12
 8015a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8015a2e:	2307      	movs	r3, #7
 8015a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8015a32:	f107 0318 	add.w	r3, r7, #24
 8015a36:	2100      	movs	r1, #0
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f000 fb47 	bl	80160cc <hci_send_req>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	da01      	bge.n	8015a48 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8015a44:	23ff      	movs	r3, #255	; 0xff
 8015a46:	e014      	b.n	8015a72 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8015a48:	7b3b      	ldrb	r3, [r7, #12]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d001      	beq.n	8015a52 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8015a4e:	7b3b      	ldrb	r3, [r7, #12]
 8015a50:	e00f      	b.n	8015a72 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8015a52:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8015a56:	b29a      	uxth	r2, r3
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8015a5c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8015a60:	b29a      	uxth	r2, r3
 8015a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a64:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8015a66:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8015a6a:	b29a      	uxth	r2, r3
 8015a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a6e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8015a70:	2300      	movs	r3, #0
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	3730      	adds	r7, #48	; 0x30
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}

08015a7a <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8015a7a:	b590      	push	{r4, r7, lr}
 8015a7c:	b095      	sub	sp, #84	; 0x54
 8015a7e:	af00      	add	r7, sp, #0
 8015a80:	4604      	mov	r4, r0
 8015a82:	4608      	mov	r0, r1
 8015a84:	4611      	mov	r1, r2
 8015a86:	461a      	mov	r2, r3
 8015a88:	4623      	mov	r3, r4
 8015a8a:	71fb      	strb	r3, [r7, #7]
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	80bb      	strh	r3, [r7, #4]
 8015a90:	460b      	mov	r3, r1
 8015a92:	807b      	strh	r3, [r7, #2]
 8015a94:	4613      	mov	r3, r2
 8015a96:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8015a9e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8015aa2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8015aa6:	4413      	add	r3, r2
 8015aa8:	330e      	adds	r3, #14
 8015aaa:	2b28      	cmp	r3, #40	; 0x28
 8015aac:	d901      	bls.n	8015ab2 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8015aae:	2342      	movs	r3, #66	; 0x42
 8015ab0:	e0ce      	b.n	8015c50 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8015ab2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015ab6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8015aba:	4413      	add	r3, r2
 8015abc:	79fa      	ldrb	r2, [r7, #7]
 8015abe:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8015ac2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8015acc:	88bb      	ldrh	r3, [r7, #4]
 8015ace:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8015ad0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015ad4:	f107 0208 	add.w	r2, r7, #8
 8015ad8:	4413      	add	r3, r2
 8015ada:	88ba      	ldrh	r2, [r7, #4]
 8015adc:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8015ade:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015ae2:	3302      	adds	r3, #2
 8015ae4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8015ae8:	887b      	ldrh	r3, [r7, #2]
 8015aea:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8015aec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015af0:	f107 0208 	add.w	r2, r7, #8
 8015af4:	4413      	add	r3, r2
 8015af6:	887a      	ldrh	r2, [r7, #2]
 8015af8:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8015afa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015afe:	3302      	adds	r3, #2
 8015b00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8015b04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b08:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8015b0c:	4413      	add	r3, r2
 8015b0e:	79ba      	ldrb	r2, [r7, #6]
 8015b10:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8015b14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b18:	3301      	adds	r3, #1
 8015b1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8015b1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b22:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8015b26:	4413      	add	r3, r2
 8015b28:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8015b2c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8015b30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b34:	3301      	adds	r3, #1
 8015b36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8015b3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8015b42:	4413      	add	r3, r2
 8015b44:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8015b48:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8015b4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b50:	3301      	adds	r3, #1
 8015b52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8015b56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b5a:	f107 0208 	add.w	r2, r7, #8
 8015b5e:	4413      	add	r3, r2
 8015b60:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8015b64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015b66:	4618      	mov	r0, r3
 8015b68:	f000 ff13 	bl	8016992 <memcpy>
  indx +=  LocalNameLen;
 8015b6c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8015b70:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8015b74:	4413      	add	r3, r2
 8015b76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8015b7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b7e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8015b82:	4413      	add	r3, r2
 8015b84:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8015b88:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8015b8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b90:	3301      	adds	r3, #1
 8015b92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8015b96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b9a:	f107 0208 	add.w	r2, r7, #8
 8015b9e:	4413      	add	r3, r2
 8015ba0:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8015ba4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f000 fef3 	bl	8016992 <memcpy>
  indx +=  ServiceUUIDLen;  
 8015bac:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8015bb0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8015bb4:	4413      	add	r3, r2
 8015bb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8015bba:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8015bbe:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8015bc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015bc6:	f107 0208 	add.w	r2, r7, #8
 8015bca:	4413      	add	r3, r2
 8015bcc:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8015bd0:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8015bd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015bd6:	3302      	adds	r3, #2
 8015bd8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8015bdc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8015be0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8015be4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015be8:	f107 0208 	add.w	r2, r7, #8
 8015bec:	4413      	add	r3, r2
 8015bee:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8015bf2:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8015bf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015bf8:	3302      	adds	r3, #2
 8015bfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8015bfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015c02:	2218      	movs	r2, #24
 8015c04:	2100      	movs	r1, #0
 8015c06:	4618      	mov	r0, r3
 8015c08:	f000 fed1 	bl	80169ae <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8015c0c:	233f      	movs	r3, #63	; 0x3f
 8015c0e:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8015c10:	2383      	movs	r3, #131	; 0x83
 8015c12:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8015c14:	f107 0308 	add.w	r3, r7, #8
 8015c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8015c1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015c1e:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8015c20:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8015c24:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8015c26:	2301      	movs	r3, #1
 8015c28:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8015c2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015c2e:	2100      	movs	r1, #0
 8015c30:	4618      	mov	r0, r3
 8015c32:	f000 fa4b 	bl	80160cc <hci_send_req>
 8015c36:	4603      	mov	r3, r0
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	da01      	bge.n	8015c40 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8015c3c:	23ff      	movs	r3, #255	; 0xff
 8015c3e:	e007      	b.n	8015c50 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8015c40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d002      	beq.n	8015c4e <aci_gap_set_discoverable+0x1d4>
    return status;
 8015c48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015c4c:	e000      	b.n	8015c50 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8015c4e:	2300      	movs	r3, #0
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3754      	adds	r7, #84	; 0x54
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd90      	pop	{r4, r7, pc}

08015c58 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b088      	sub	sp, #32
 8015c5c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8015c5e:	f107 0308 	add.w	r3, r7, #8
 8015c62:	2218      	movs	r2, #24
 8015c64:	2100      	movs	r1, #0
 8015c66:	4618      	mov	r0, r3
 8015c68:	f000 fea1 	bl	80169ae <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8015c6c:	233f      	movs	r3, #63	; 0x3f
 8015c6e:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8015c70:	f240 1301 	movw	r3, #257	; 0x101
 8015c74:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015c76:	1dfb      	adds	r3, r7, #7
 8015c78:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8015c7e:	f107 0308 	add.w	r3, r7, #8
 8015c82:	2100      	movs	r1, #0
 8015c84:	4618      	mov	r0, r3
 8015c86:	f000 fa21 	bl	80160cc <hci_send_req>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	da01      	bge.n	8015c94 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8015c90:	23ff      	movs	r3, #255	; 0xff
 8015c92:	e000      	b.n	8015c96 <aci_gatt_init+0x3e>

  return status;
 8015c94:	79fb      	ldrb	r3, [r7, #7]
}
 8015c96:	4618      	mov	r0, r3
 8015c98:	3720      	adds	r7, #32
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bd80      	pop	{r7, pc}

08015c9e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8015c9e:	b590      	push	{r4, r7, lr}
 8015ca0:	b0ab      	sub	sp, #172	; 0xac
 8015ca2:	af00      	add	r7, sp, #0
 8015ca4:	4604      	mov	r4, r0
 8015ca6:	4608      	mov	r0, r1
 8015ca8:	4611      	mov	r1, r2
 8015caa:	461a      	mov	r2, r3
 8015cac:	4623      	mov	r3, r4
 8015cae:	80fb      	strh	r3, [r7, #6]
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	80bb      	strh	r3, [r7, #4]
 8015cb4:	460b      	mov	r3, r1
 8015cb6:	70fb      	strb	r3, [r7, #3]
 8015cb8:	4613      	mov	r3, r2
 8015cba:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8015cc2:	78bb      	ldrb	r3, [r7, #2]
 8015cc4:	2b7a      	cmp	r3, #122	; 0x7a
 8015cc6:	d901      	bls.n	8015ccc <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8015cc8:	2342      	movs	r3, #66	; 0x42
 8015cca:	e076      	b.n	8015dba <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 8015ccc:	88fb      	ldrh	r3, [r7, #6]
 8015cce:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8015cd0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015cd4:	f107 0208 	add.w	r2, r7, #8
 8015cd8:	4413      	add	r3, r2
 8015cda:	88fa      	ldrh	r2, [r7, #6]
 8015cdc:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8015cde:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015ce2:	3302      	adds	r3, #2
 8015ce4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8015ce8:	88bb      	ldrh	r3, [r7, #4]
 8015cea:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8015cec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015cf0:	f107 0208 	add.w	r2, r7, #8
 8015cf4:	4413      	add	r3, r2
 8015cf6:	88ba      	ldrh	r2, [r7, #4]
 8015cf8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8015cfa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015cfe:	3302      	adds	r3, #2
 8015d00:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8015d04:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015d08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8015d0c:	4413      	add	r3, r2
 8015d0e:	78fa      	ldrb	r2, [r7, #3]
 8015d10:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8015d14:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015d18:	3301      	adds	r3, #1
 8015d1a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8015d1e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015d22:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8015d26:	4413      	add	r3, r2
 8015d28:	78ba      	ldrb	r2, [r7, #2]
 8015d2a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8015d2e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015d32:	3301      	adds	r3, #1
 8015d34:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8015d38:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015d3c:	f107 0208 	add.w	r2, r7, #8
 8015d40:	4413      	add	r3, r2
 8015d42:	78ba      	ldrb	r2, [r7, #2]
 8015d44:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f000 fe22 	bl	8016992 <memcpy>
  indx +=  charValueLen;
 8015d4e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8015d52:	78bb      	ldrb	r3, [r7, #2]
 8015d54:	4413      	add	r3, r2
 8015d56:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8015d5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015d5e:	2218      	movs	r2, #24
 8015d60:	2100      	movs	r1, #0
 8015d62:	4618      	mov	r0, r3
 8015d64:	f000 fe23 	bl	80169ae <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8015d68:	233f      	movs	r3, #63	; 0x3f
 8015d6a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8015d6e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8015d72:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8015d76:	f107 0308 	add.w	r3, r7, #8
 8015d7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8015d7e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015d82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8015d86:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8015d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8015d8e:	2301      	movs	r3, #1
 8015d90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8015d94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015d98:	2100      	movs	r1, #0
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f000 f996 	bl	80160cc <hci_send_req>
 8015da0:	4603      	mov	r3, r0
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	da01      	bge.n	8015daa <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 8015da6:	23ff      	movs	r3, #255	; 0xff
 8015da8:	e007      	b.n	8015dba <aci_gatt_update_char_value+0x11c>

  if (status) {
 8015daa:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d002      	beq.n	8015db8 <aci_gatt_update_char_value+0x11a>
    return status;
 8015db2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8015db6:	e000      	b.n	8015dba <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 8015db8:	2300      	movs	r3, #0
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	37ac      	adds	r7, #172	; 0xac
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd90      	pop	{r4, r7, pc}

08015dc2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8015dc2:	b580      	push	{r7, lr}
 8015dc4:	b0aa      	sub	sp, #168	; 0xa8
 8015dc6:	af00      	add	r7, sp, #0
 8015dc8:	4603      	mov	r3, r0
 8015dca:	603a      	str	r2, [r7, #0]
 8015dcc:	71fb      	strb	r3, [r7, #7]
 8015dce:	460b      	mov	r3, r1
 8015dd0:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8015dd8:	79bb      	ldrb	r3, [r7, #6]
 8015dda:	2b7e      	cmp	r3, #126	; 0x7e
 8015ddc:	d901      	bls.n	8015de2 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 8015dde:	2342      	movs	r3, #66	; 0x42
 8015de0:	e052      	b.n	8015e88 <aci_hal_write_config_data+0xc6>

  buffer[indx] = offset;
 8015de2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015de6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8015dea:	4413      	add	r3, r2
 8015dec:	79fa      	ldrb	r2, [r7, #7]
 8015dee:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8015df2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015df6:	3301      	adds	r3, #1
 8015df8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8015dfc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015e00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8015e04:	4413      	add	r3, r2
 8015e06:	79ba      	ldrb	r2, [r7, #6]
 8015e08:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8015e0c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015e10:	3301      	adds	r3, #1
 8015e12:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8015e16:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015e1a:	f107 0208 	add.w	r2, r7, #8
 8015e1e:	4413      	add	r3, r2
 8015e20:	79ba      	ldrb	r2, [r7, #6]
 8015e22:	6839      	ldr	r1, [r7, #0]
 8015e24:	4618      	mov	r0, r3
 8015e26:	f000 fdb4 	bl	8016992 <memcpy>
  indx +=  len;
 8015e2a:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8015e2e:	79bb      	ldrb	r3, [r7, #6]
 8015e30:	4413      	add	r3, r2
 8015e32:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8015e36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015e3a:	2218      	movs	r2, #24
 8015e3c:	2100      	movs	r1, #0
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f000 fdb5 	bl	80169ae <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8015e44:	233f      	movs	r3, #63	; 0x3f
 8015e46:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8015e4a:	230c      	movs	r3, #12
 8015e4c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8015e50:	f107 0308 	add.w	r3, r7, #8
 8015e54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8015e58:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8015e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8015e60:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8015e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8015e68:	2301      	movs	r3, #1
 8015e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8015e6e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015e72:	2100      	movs	r1, #0
 8015e74:	4618      	mov	r0, r3
 8015e76:	f000 f929 	bl	80160cc <hci_send_req>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	da01      	bge.n	8015e84 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8015e80:	23ff      	movs	r3, #255	; 0xff
 8015e82:	e001      	b.n	8015e88 <aci_hal_write_config_data+0xc6>

  return status;
 8015e84:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	37a8      	adds	r7, #168	; 0xa8
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	bd80      	pop	{r7, pc}

08015e90 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b088      	sub	sp, #32
 8015e94:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8015e96:	f107 0308 	add.w	r3, r7, #8
 8015e9a:	2218      	movs	r2, #24
 8015e9c:	2100      	movs	r1, #0
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f000 fd85 	bl	80169ae <memset>
  rq.ogf = OGF_HOST_CTL;
 8015ea4:	2303      	movs	r3, #3
 8015ea6:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8015ea8:	2303      	movs	r3, #3
 8015eaa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015eac:	1dfb      	adds	r3, r7, #7
 8015eae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015eb0:	2301      	movs	r3, #1
 8015eb2:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8015eb4:	f107 0308 	add.w	r3, r7, #8
 8015eb8:	2100      	movs	r1, #0
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f000 f906 	bl	80160cc <hci_send_req>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	da01      	bge.n	8015eca <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8015ec6:	23ff      	movs	r3, #255	; 0xff
 8015ec8:	e000      	b.n	8015ecc <hci_reset+0x3c>
  
  return status;  
 8015eca:	79fb      	ldrb	r3, [r7, #7]
}
 8015ecc:	4618      	mov	r0, r3
 8015ece:	3720      	adds	r7, #32
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bd80      	pop	{r7, pc}

08015ed4 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	b085      	sub	sp, #20
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	3308      	adds	r3, #8
 8015ee0:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	2b04      	cmp	r3, #4
 8015ee8:	d001      	beq.n	8015eee <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8015eea:	2301      	movs	r3, #1
 8015eec:	e00c      	b.n	8015f08 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	3302      	adds	r3, #2
 8015ef2:	781b      	ldrb	r3, [r3, #0]
 8015ef4:	461a      	mov	r2, r3
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8015efc:	3b03      	subs	r3, #3
 8015efe:	429a      	cmp	r2, r3
 8015f00:	d001      	beq.n	8015f06 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8015f02:	2302      	movs	r3, #2
 8015f04:	e000      	b.n	8015f08 <verify_packet+0x34>
  
  return 0;      
 8015f06:	2300      	movs	r3, #0
}
 8015f08:	4618      	mov	r0, r3
 8015f0a:	3714      	adds	r7, #20
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr

08015f14 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b0a6      	sub	sp, #152	; 0x98
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	607b      	str	r3, [r7, #4]
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	81fb      	strh	r3, [r7, #14]
 8015f20:	460b      	mov	r3, r1
 8015f22:	81bb      	strh	r3, [r7, #12]
 8015f24:	4613      	mov	r3, r2
 8015f26:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8015f28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015f30:	b21a      	sxth	r2, r3
 8015f32:	89fb      	ldrh	r3, [r7, #14]
 8015f34:	029b      	lsls	r3, r3, #10
 8015f36:	b21b      	sxth	r3, r3
 8015f38:	4313      	orrs	r3, r2
 8015f3a:	b21b      	sxth	r3, r3
 8015f3c:	b29b      	uxth	r3, r3
 8015f3e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8015f40:	7afb      	ldrb	r3, [r7, #11]
 8015f42:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8015f44:	2301      	movs	r3, #1
 8015f46:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8015f48:	f107 0318 	add.w	r3, r7, #24
 8015f4c:	3301      	adds	r3, #1
 8015f4e:	461a      	mov	r2, r3
 8015f50:	f107 0314 	add.w	r3, r7, #20
 8015f54:	8819      	ldrh	r1, [r3, #0]
 8015f56:	789b      	ldrb	r3, [r3, #2]
 8015f58:	8011      	strh	r1, [r2, #0]
 8015f5a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8015f5c:	f107 0318 	add.w	r3, r7, #24
 8015f60:	3304      	adds	r3, #4
 8015f62:	7afa      	ldrb	r2, [r7, #11]
 8015f64:	6879      	ldr	r1, [r7, #4]
 8015f66:	4618      	mov	r0, r3
 8015f68:	f000 fd13 	bl	8016992 <memcpy>
  
  if (hciContext.io.Send)
 8015f6c:	4b08      	ldr	r3, [pc, #32]	; (8015f90 <send_cmd+0x7c>)
 8015f6e:	691b      	ldr	r3, [r3, #16]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d009      	beq.n	8015f88 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8015f74:	4b06      	ldr	r3, [pc, #24]	; (8015f90 <send_cmd+0x7c>)
 8015f76:	691b      	ldr	r3, [r3, #16]
 8015f78:	7afa      	ldrb	r2, [r7, #11]
 8015f7a:	b292      	uxth	r2, r2
 8015f7c:	3204      	adds	r2, #4
 8015f7e:	b291      	uxth	r1, r2
 8015f80:	f107 0218 	add.w	r2, r7, #24
 8015f84:	4610      	mov	r0, r2
 8015f86:	4798      	blx	r3
  }
}
 8015f88:	bf00      	nop
 8015f8a:	3798      	adds	r7, #152	; 0x98
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	20000458 	.word	0x20000458

08015f94 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b084      	sub	sp, #16
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
 8015f9c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8015f9e:	e00a      	b.n	8015fb6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8015fa0:	f107 030c 	add.w	r3, r7, #12
 8015fa4:	4619      	mov	r1, r3
 8015fa6:	6838      	ldr	r0, [r7, #0]
 8015fa8:	f000 fabe 	bl	8016528 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	4619      	mov	r1, r3
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 fa25 	bl	8016400 <list_insert_head>
  while (!list_is_empty(src_list))
 8015fb6:	6838      	ldr	r0, [r7, #0]
 8015fb8:	f000 fa00 	bl	80163bc <list_is_empty>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d0ee      	beq.n	8015fa0 <move_list+0xc>
  }
}
 8015fc2:	bf00      	nop
 8015fc4:	bf00      	nop
 8015fc6:	3710      	adds	r7, #16
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}

08015fcc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b082      	sub	sp, #8
 8015fd0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8015fd2:	e009      	b.n	8015fe8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8015fd4:	1d3b      	adds	r3, r7, #4
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	4809      	ldr	r0, [pc, #36]	; (8016000 <free_event_list+0x34>)
 8015fda:	f000 fa7e 	bl	80164da <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	4619      	mov	r1, r3
 8015fe2:	4808      	ldr	r0, [pc, #32]	; (8016004 <free_event_list+0x38>)
 8015fe4:	f000 fa32 	bl	801644c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8015fe8:	4806      	ldr	r0, [pc, #24]	; (8016004 <free_event_list+0x38>)
 8015fea:	f000 fac4 	bl	8016576 <list_get_size>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	2b01      	cmp	r3, #1
 8015ff2:	ddef      	ble.n	8015fd4 <free_event_list+0x8>
  }
}
 8015ff4:	bf00      	nop
 8015ff6:	bf00      	nop
 8015ff8:	3708      	adds	r7, #8
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}
 8015ffe:	bf00      	nop
 8016000:	200005e0 	.word	0x200005e0
 8016004:	200005d8 	.word	0x200005d8

08016008 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b084      	sub	sp, #16
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
 8016010:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d002      	beq.n	801601e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8016018:	4a18      	ldr	r2, [pc, #96]	; (801607c <hci_init+0x74>)
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 801601e:	4818      	ldr	r0, [pc, #96]	; (8016080 <hci_init+0x78>)
 8016020:	f000 f9bc 	bl	801639c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8016024:	4817      	ldr	r0, [pc, #92]	; (8016084 <hci_init+0x7c>)
 8016026:	f000 f9b9 	bl	801639c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 801602a:	f7fa fc09 	bl	8010840 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 801602e:	2300      	movs	r3, #0
 8016030:	73fb      	strb	r3, [r7, #15]
 8016032:	e00c      	b.n	801604e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8016034:	7bfb      	ldrb	r3, [r7, #15]
 8016036:	228c      	movs	r2, #140	; 0x8c
 8016038:	fb02 f303 	mul.w	r3, r2, r3
 801603c:	4a12      	ldr	r2, [pc, #72]	; (8016088 <hci_init+0x80>)
 801603e:	4413      	add	r3, r2
 8016040:	4619      	mov	r1, r3
 8016042:	480f      	ldr	r0, [pc, #60]	; (8016080 <hci_init+0x78>)
 8016044:	f000 fa02 	bl	801644c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8016048:	7bfb      	ldrb	r3, [r7, #15]
 801604a:	3301      	adds	r3, #1
 801604c:	73fb      	strb	r3, [r7, #15]
 801604e:	7bfb      	ldrb	r3, [r7, #15]
 8016050:	2b04      	cmp	r3, #4
 8016052:	d9ef      	bls.n	8016034 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8016054:	4b09      	ldr	r3, [pc, #36]	; (801607c <hci_init+0x74>)
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d003      	beq.n	8016064 <hci_init+0x5c>
 801605c:	4b07      	ldr	r3, [pc, #28]	; (801607c <hci_init+0x74>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	2000      	movs	r0, #0
 8016062:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8016064:	4b05      	ldr	r3, [pc, #20]	; (801607c <hci_init+0x74>)
 8016066:	689b      	ldr	r3, [r3, #8]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d002      	beq.n	8016072 <hci_init+0x6a>
 801606c:	4b03      	ldr	r3, [pc, #12]	; (801607c <hci_init+0x74>)
 801606e:	689b      	ldr	r3, [r3, #8]
 8016070:	4798      	blx	r3
}
 8016072:	bf00      	nop
 8016074:	3710      	adds	r7, #16
 8016076:	46bd      	mov	sp, r7
 8016078:	bd80      	pop	{r7, pc}
 801607a:	bf00      	nop
 801607c:	20000458 	.word	0x20000458
 8016080:	200005d8 	.word	0x200005d8
 8016084:	200005e0 	.word	0x200005e0
 8016088:	2000019c 	.word	0x2000019c

0801608c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 801608c:	b480      	push	{r7}
 801608e:	b083      	sub	sp, #12
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	4a0b      	ldr	r2, [pc, #44]	; (80160c8 <hci_register_io_bus+0x3c>)
 801609a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	68db      	ldr	r3, [r3, #12]
 80160a0:	4a09      	ldr	r2, [pc, #36]	; (80160c8 <hci_register_io_bus+0x3c>)
 80160a2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	691b      	ldr	r3, [r3, #16]
 80160a8:	4a07      	ldr	r2, [pc, #28]	; (80160c8 <hci_register_io_bus+0x3c>)
 80160aa:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	699b      	ldr	r3, [r3, #24]
 80160b0:	4a05      	ldr	r2, [pc, #20]	; (80160c8 <hci_register_io_bus+0x3c>)
 80160b2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	689b      	ldr	r3, [r3, #8]
 80160b8:	4a03      	ldr	r2, [pc, #12]	; (80160c8 <hci_register_io_bus+0x3c>)
 80160ba:	6093      	str	r3, [r2, #8]
}
 80160bc:	bf00      	nop
 80160be:	370c      	adds	r7, #12
 80160c0:	46bd      	mov	sp, r7
 80160c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c6:	4770      	bx	lr
 80160c8:	20000458 	.word	0x20000458

080160cc <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b08e      	sub	sp, #56	; 0x38
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	460b      	mov	r3, r1
 80160d6:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	885b      	ldrh	r3, [r3, #2]
 80160dc:	b21b      	sxth	r3, r3
 80160de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80160e2:	b21a      	sxth	r2, r3
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	881b      	ldrh	r3, [r3, #0]
 80160e8:	029b      	lsls	r3, r3, #10
 80160ea:	b21b      	sxth	r3, r3
 80160ec:	4313      	orrs	r3, r2
 80160ee:	b21b      	sxth	r3, r3
 80160f0:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80160f2:	2300      	movs	r3, #0
 80160f4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80160f6:	f107 0308 	add.w	r3, r7, #8
 80160fa:	4618      	mov	r0, r3
 80160fc:	f000 f94e 	bl	801639c <list_init_head>

  free_event_list();
 8016100:	f7ff ff64 	bl	8015fcc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	8818      	ldrh	r0, [r3, #0]
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	8859      	ldrh	r1, [r3, #2]
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	68db      	ldr	r3, [r3, #12]
 8016110:	b2da      	uxtb	r2, r3
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	689b      	ldr	r3, [r3, #8]
 8016116:	f7ff fefd 	bl	8015f14 <send_cmd>
  
  if (async)
 801611a:	78fb      	ldrb	r3, [r7, #3]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d001      	beq.n	8016124 <hci_send_req+0x58>
  {
    return 0;
 8016120:	2300      	movs	r3, #0
 8016122:	e0e5      	b.n	80162f0 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8016124:	f7fb fab2 	bl	801168c <HAL_GetTick>
 8016128:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 801612a:	f7fb faaf 	bl	801168c <HAL_GetTick>
 801612e:	4602      	mov	r2, r0
 8016130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016132:	1ad3      	subs	r3, r2, r3
 8016134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016138:	f200 80b6 	bhi.w	80162a8 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 801613c:	486e      	ldr	r0, [pc, #440]	; (80162f8 <hci_send_req+0x22c>)
 801613e:	f000 f93d 	bl	80163bc <list_is_empty>
 8016142:	4603      	mov	r3, r0
 8016144:	2b00      	cmp	r3, #0
 8016146:	d000      	beq.n	801614a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8016148:	e7ef      	b.n	801612a <hci_send_req+0x5e>
      {
        break;
 801614a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 801614c:	f107 0310 	add.w	r3, r7, #16
 8016150:	4619      	mov	r1, r3
 8016152:	4869      	ldr	r0, [pc, #420]	; (80162f8 <hci_send_req+0x22c>)
 8016154:	f000 f9c1 	bl	80164da <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	3308      	adds	r3, #8
 801615c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 801615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	2b04      	cmp	r3, #4
 8016164:	d17b      	bne.n	801625e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8016166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016168:	3301      	adds	r3, #1
 801616a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	3308      	adds	r3, #8
 8016170:	3303      	adds	r3, #3
 8016172:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8016174:	693b      	ldr	r3, [r7, #16]
 8016176:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 801617a:	3b03      	subs	r3, #3
 801617c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 801617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	2b3e      	cmp	r3, #62	; 0x3e
 8016184:	d04d      	beq.n	8016222 <hci_send_req+0x156>
 8016186:	2b3e      	cmp	r3, #62	; 0x3e
 8016188:	dc6b      	bgt.n	8016262 <hci_send_req+0x196>
 801618a:	2b10      	cmp	r3, #16
 801618c:	f000 808e 	beq.w	80162ac <hci_send_req+0x1e0>
 8016190:	2b10      	cmp	r3, #16
 8016192:	dc66      	bgt.n	8016262 <hci_send_req+0x196>
 8016194:	2b0e      	cmp	r3, #14
 8016196:	d024      	beq.n	80161e2 <hci_send_req+0x116>
 8016198:	2b0f      	cmp	r3, #15
 801619a:	d162      	bne.n	8016262 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 801619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801619e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80161a0:	69bb      	ldr	r3, [r7, #24]
 80161a2:	885b      	ldrh	r3, [r3, #2]
 80161a4:	b29b      	uxth	r3, r3
 80161a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80161a8:	429a      	cmp	r2, r3
 80161aa:	f040 8081 	bne.w	80162b0 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	685b      	ldr	r3, [r3, #4]
 80161b2:	2b0f      	cmp	r3, #15
 80161b4:	d004      	beq.n	80161c0 <hci_send_req+0xf4>
          if (cs->status) {
 80161b6:	69bb      	ldr	r3, [r7, #24]
 80161b8:	781b      	ldrb	r3, [r3, #0]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d053      	beq.n	8016266 <hci_send_req+0x19a>
            goto failed;
 80161be:	e07a      	b.n	80162b6 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	695a      	ldr	r2, [r3, #20]
 80161c4:	6a3b      	ldr	r3, [r7, #32]
 80161c6:	429a      	cmp	r2, r3
 80161c8:	bf28      	it	cs
 80161ca:	461a      	movcs	r2, r3
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6918      	ldr	r0, [r3, #16]
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	695b      	ldr	r3, [r3, #20]
 80161d8:	461a      	mov	r2, r3
 80161da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80161dc:	f000 fbd9 	bl	8016992 <memcpy>
        goto done;
 80161e0:	e07a      	b.n	80162d8 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80161e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e4:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80161f0:	429a      	cmp	r2, r3
 80161f2:	d15f      	bne.n	80162b4 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80161f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f6:	3303      	adds	r3, #3
 80161f8:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80161fa:	6a3b      	ldr	r3, [r7, #32]
 80161fc:	3b03      	subs	r3, #3
 80161fe:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	695a      	ldr	r2, [r3, #20]
 8016204:	6a3b      	ldr	r3, [r7, #32]
 8016206:	429a      	cmp	r2, r3
 8016208:	bf28      	it	cs
 801620a:	461a      	movcs	r2, r3
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	6918      	ldr	r0, [r3, #16]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	695b      	ldr	r3, [r3, #20]
 8016218:	461a      	mov	r2, r3
 801621a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801621c:	f000 fbb9 	bl	8016992 <memcpy>
        goto done;
 8016220:	e05a      	b.n	80162d8 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8016222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016224:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8016226:	69fb      	ldr	r3, [r7, #28]
 8016228:	781b      	ldrb	r3, [r3, #0]
 801622a:	461a      	mov	r2, r3
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	685b      	ldr	r3, [r3, #4]
 8016230:	429a      	cmp	r2, r3
 8016232:	d11a      	bne.n	801626a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8016234:	6a3b      	ldr	r3, [r7, #32]
 8016236:	3b01      	subs	r3, #1
 8016238:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	695a      	ldr	r2, [r3, #20]
 801623e:	6a3b      	ldr	r3, [r7, #32]
 8016240:	429a      	cmp	r2, r3
 8016242:	bf28      	it	cs
 8016244:	461a      	movcs	r2, r3
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	6918      	ldr	r0, [r3, #16]
 801624e:	69fb      	ldr	r3, [r7, #28]
 8016250:	1c59      	adds	r1, r3, #1
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	695b      	ldr	r3, [r3, #20]
 8016256:	461a      	mov	r2, r3
 8016258:	f000 fb9b 	bl	8016992 <memcpy>
        goto done;
 801625c:	e03c      	b.n	80162d8 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 801625e:	bf00      	nop
 8016260:	e004      	b.n	801626c <hci_send_req+0x1a0>
        break;
 8016262:	bf00      	nop
 8016264:	e002      	b.n	801626c <hci_send_req+0x1a0>
          break;
 8016266:	bf00      	nop
 8016268:	e000      	b.n	801626c <hci_send_req+0x1a0>
          break;
 801626a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 801626c:	4823      	ldr	r0, [pc, #140]	; (80162fc <hci_send_req+0x230>)
 801626e:	f000 f8a5 	bl	80163bc <list_is_empty>
 8016272:	4603      	mov	r3, r0
 8016274:	2b00      	cmp	r3, #0
 8016276:	d00d      	beq.n	8016294 <hci_send_req+0x1c8>
 8016278:	481f      	ldr	r0, [pc, #124]	; (80162f8 <hci_send_req+0x22c>)
 801627a:	f000 f89f 	bl	80163bc <list_is_empty>
 801627e:	4603      	mov	r3, r0
 8016280:	2b00      	cmp	r3, #0
 8016282:	d007      	beq.n	8016294 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8016284:	693b      	ldr	r3, [r7, #16]
 8016286:	4619      	mov	r1, r3
 8016288:	481c      	ldr	r0, [pc, #112]	; (80162fc <hci_send_req+0x230>)
 801628a:	f000 f8df 	bl	801644c <list_insert_tail>
      hciReadPacket=NULL;
 801628e:	2300      	movs	r3, #0
 8016290:	613b      	str	r3, [r7, #16]
 8016292:	e008      	b.n	80162a6 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8016294:	693a      	ldr	r2, [r7, #16]
 8016296:	f107 0308 	add.w	r3, r7, #8
 801629a:	4611      	mov	r1, r2
 801629c:	4618      	mov	r0, r3
 801629e:	f000 f8d5 	bl	801644c <list_insert_tail>
      hciReadPacket=NULL;
 80162a2:	2300      	movs	r3, #0
 80162a4:	613b      	str	r3, [r7, #16]
  {
 80162a6:	e73d      	b.n	8016124 <hci_send_req+0x58>
        goto failed;
 80162a8:	bf00      	nop
 80162aa:	e004      	b.n	80162b6 <hci_send_req+0x1ea>
        goto failed;
 80162ac:	bf00      	nop
 80162ae:	e002      	b.n	80162b6 <hci_send_req+0x1ea>
          goto failed;
 80162b0:	bf00      	nop
 80162b2:	e000      	b.n	80162b6 <hci_send_req+0x1ea>
          goto failed;
 80162b4:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80162b6:	693b      	ldr	r3, [r7, #16]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d004      	beq.n	80162c6 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80162bc:	693b      	ldr	r3, [r7, #16]
 80162be:	4619      	mov	r1, r3
 80162c0:	480e      	ldr	r0, [pc, #56]	; (80162fc <hci_send_req+0x230>)
 80162c2:	f000 f89d 	bl	8016400 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80162c6:	f107 0308 	add.w	r3, r7, #8
 80162ca:	4619      	mov	r1, r3
 80162cc:	480a      	ldr	r0, [pc, #40]	; (80162f8 <hci_send_req+0x22c>)
 80162ce:	f7ff fe61 	bl	8015f94 <move_list>

  return -1;
 80162d2:	f04f 33ff 	mov.w	r3, #4294967295
 80162d6:	e00b      	b.n	80162f0 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80162d8:	693b      	ldr	r3, [r7, #16]
 80162da:	4619      	mov	r1, r3
 80162dc:	4807      	ldr	r0, [pc, #28]	; (80162fc <hci_send_req+0x230>)
 80162de:	f000 f88f 	bl	8016400 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80162e2:	f107 0308 	add.w	r3, r7, #8
 80162e6:	4619      	mov	r1, r3
 80162e8:	4803      	ldr	r0, [pc, #12]	; (80162f8 <hci_send_req+0x22c>)
 80162ea:	f7ff fe53 	bl	8015f94 <move_list>

  return 0;
 80162ee:	2300      	movs	r3, #0
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3738      	adds	r7, #56	; 0x38
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	200005e0 	.word	0x200005e0
 80162fc:	200005d8 	.word	0x200005d8

08016300 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b086      	sub	sp, #24
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8016308:	2300      	movs	r3, #0
 801630a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 801630c:	2300      	movs	r3, #0
 801630e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8016310:	481f      	ldr	r0, [pc, #124]	; (8016390 <hci_notify_asynch_evt+0x90>)
 8016312:	f000 f853 	bl	80163bc <list_is_empty>
 8016316:	4603      	mov	r3, r0
 8016318:	2b00      	cmp	r3, #0
 801631a:	d132      	bne.n	8016382 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 801631c:	f107 030c 	add.w	r3, r7, #12
 8016320:	4619      	mov	r1, r3
 8016322:	481b      	ldr	r0, [pc, #108]	; (8016390 <hci_notify_asynch_evt+0x90>)
 8016324:	f000 f8d9 	bl	80164da <list_remove_head>
    
    if (hciContext.io.Receive)
 8016328:	4b1a      	ldr	r3, [pc, #104]	; (8016394 <hci_notify_asynch_evt+0x94>)
 801632a:	68db      	ldr	r3, [r3, #12]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d02a      	beq.n	8016386 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8016330:	4b18      	ldr	r3, [pc, #96]	; (8016394 <hci_notify_asynch_evt+0x94>)
 8016332:	68db      	ldr	r3, [r3, #12]
 8016334:	68fa      	ldr	r2, [r7, #12]
 8016336:	3208      	adds	r2, #8
 8016338:	2180      	movs	r1, #128	; 0x80
 801633a:	4610      	mov	r0, r2
 801633c:	4798      	blx	r3
 801633e:	4603      	mov	r3, r0
 8016340:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8016342:	7cfb      	ldrb	r3, [r7, #19]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d016      	beq.n	8016376 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	7cfa      	ldrb	r2, [r7, #19]
 801634c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	4618      	mov	r0, r3
 8016354:	f7ff fdbe 	bl	8015ed4 <verify_packet>
 8016358:	4603      	mov	r3, r0
 801635a:	2b00      	cmp	r3, #0
 801635c:	d105      	bne.n	801636a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	4619      	mov	r1, r3
 8016362:	480d      	ldr	r0, [pc, #52]	; (8016398 <hci_notify_asynch_evt+0x98>)
 8016364:	f000 f872 	bl	801644c <list_insert_tail>
 8016368:	e00d      	b.n	8016386 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	4619      	mov	r1, r3
 801636e:	4808      	ldr	r0, [pc, #32]	; (8016390 <hci_notify_asynch_evt+0x90>)
 8016370:	f000 f846 	bl	8016400 <list_insert_head>
 8016374:	e007      	b.n	8016386 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	4619      	mov	r1, r3
 801637a:	4805      	ldr	r0, [pc, #20]	; (8016390 <hci_notify_asynch_evt+0x90>)
 801637c:	f000 f840 	bl	8016400 <list_insert_head>
 8016380:	e001      	b.n	8016386 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8016382:	2301      	movs	r3, #1
 8016384:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8016386:	697b      	ldr	r3, [r7, #20]

}
 8016388:	4618      	mov	r0, r3
 801638a:	3718      	adds	r7, #24
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}
 8016390:	200005d8 	.word	0x200005d8
 8016394:	20000458 	.word	0x20000458
 8016398:	200005e0 	.word	0x200005e0

0801639c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 801639c:	b480      	push	{r7}
 801639e:	b083      	sub	sp, #12
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	687a      	ldr	r2, [r7, #4]
 80163a8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	687a      	ldr	r2, [r7, #4]
 80163ae:	605a      	str	r2, [r3, #4]
}
 80163b0:	bf00      	nop
 80163b2:	370c      	adds	r7, #12
 80163b4:	46bd      	mov	sp, r7
 80163b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ba:	4770      	bx	lr

080163bc <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80163bc:	b480      	push	{r7}
 80163be:	b087      	sub	sp, #28
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80163c4:	f3ef 8310 	mrs	r3, PRIMASK
 80163c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80163ca:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80163cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80163ce:	b672      	cpsid	i
}
 80163d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	687a      	ldr	r2, [r7, #4]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d102      	bne.n	80163e2 <list_is_empty+0x26>
  {
    return_value = 1;
 80163dc:	2301      	movs	r3, #1
 80163de:	75fb      	strb	r3, [r7, #23]
 80163e0:	e001      	b.n	80163e6 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80163e2:	2300      	movs	r3, #0
 80163e4:	75fb      	strb	r3, [r7, #23]
 80163e6:	693b      	ldr	r3, [r7, #16]
 80163e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	f383 8810 	msr	PRIMASK, r3
}
 80163f0:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80163f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	371c      	adds	r7, #28
 80163f8:	46bd      	mov	sp, r7
 80163fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fe:	4770      	bx	lr

08016400 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8016400:	b480      	push	{r7}
 8016402:	b087      	sub	sp, #28
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
 8016408:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801640a:	f3ef 8310 	mrs	r3, PRIMASK
 801640e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016410:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016412:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016414:	b672      	cpsid	i
}
 8016416:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681a      	ldr	r2, [r3, #0]
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	687a      	ldr	r2, [r7, #4]
 8016424:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	683a      	ldr	r2, [r7, #0]
 801642a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	683a      	ldr	r2, [r7, #0]
 8016432:	605a      	str	r2, [r3, #4]
 8016434:	697b      	ldr	r3, [r7, #20]
 8016436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016438:	693b      	ldr	r3, [r7, #16]
 801643a:	f383 8810 	msr	PRIMASK, r3
}
 801643e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016440:	bf00      	nop
 8016442:	371c      	adds	r7, #28
 8016444:	46bd      	mov	sp, r7
 8016446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644a:	4770      	bx	lr

0801644c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 801644c:	b480      	push	{r7}
 801644e:	b087      	sub	sp, #28
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016456:	f3ef 8310 	mrs	r3, PRIMASK
 801645a:	60fb      	str	r3, [r7, #12]
  return(result);
 801645c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801645e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016460:	b672      	cpsid	i
}
 8016462:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	687a      	ldr	r2, [r7, #4]
 8016468:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	685a      	ldr	r2, [r3, #4]
 801646e:	683b      	ldr	r3, [r7, #0]
 8016470:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	683a      	ldr	r2, [r7, #0]
 8016476:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	683a      	ldr	r2, [r7, #0]
 801647e:	601a      	str	r2, [r3, #0]
 8016480:	697b      	ldr	r3, [r7, #20]
 8016482:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	f383 8810 	msr	PRIMASK, r3
}
 801648a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 801648c:	bf00      	nop
 801648e:	371c      	adds	r7, #28
 8016490:	46bd      	mov	sp, r7
 8016492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016496:	4770      	bx	lr

08016498 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8016498:	b480      	push	{r7}
 801649a:	b087      	sub	sp, #28
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164a0:	f3ef 8310 	mrs	r3, PRIMASK
 80164a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80164a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80164a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80164aa:	b672      	cpsid	i
}
 80164ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	685b      	ldr	r3, [r3, #4]
 80164b2:	687a      	ldr	r2, [r7, #4]
 80164b4:	6812      	ldr	r2, [r2, #0]
 80164b6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	687a      	ldr	r2, [r7, #4]
 80164be:	6852      	ldr	r2, [r2, #4]
 80164c0:	605a      	str	r2, [r3, #4]
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	f383 8810 	msr	PRIMASK, r3
}
 80164cc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80164ce:	bf00      	nop
 80164d0:	371c      	adds	r7, #28
 80164d2:	46bd      	mov	sp, r7
 80164d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d8:	4770      	bx	lr

080164da <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80164da:	b580      	push	{r7, lr}
 80164dc:	b086      	sub	sp, #24
 80164de:	af00      	add	r7, sp, #0
 80164e0:	6078      	str	r0, [r7, #4]
 80164e2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164e4:	f3ef 8310 	mrs	r3, PRIMASK
 80164e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80164ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80164ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80164ee:	b672      	cpsid	i
}
 80164f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681a      	ldr	r2, [r3, #0]
 80164f6:	683b      	ldr	r3, [r7, #0]
 80164f8:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	4618      	mov	r0, r3
 8016500:	f7ff ffca 	bl	8016498 <list_remove_node>
  (*node)->next = NULL;
 8016504:	683b      	ldr	r3, [r7, #0]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	2200      	movs	r2, #0
 801650a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	2200      	movs	r2, #0
 8016512:	605a      	str	r2, [r3, #4]
 8016514:	697b      	ldr	r3, [r7, #20]
 8016516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016518:	693b      	ldr	r3, [r7, #16]
 801651a:	f383 8810 	msr	PRIMASK, r3
}
 801651e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016520:	bf00      	nop
 8016522:	3718      	adds	r7, #24
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}

08016528 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b086      	sub	sp, #24
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016532:	f3ef 8310 	mrs	r3, PRIMASK
 8016536:	60fb      	str	r3, [r7, #12]
  return(result);
 8016538:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801653a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801653c:	b672      	cpsid	i
}
 801653e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	685a      	ldr	r2, [r3, #4]
 8016544:	683b      	ldr	r3, [r7, #0]
 8016546:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	4618      	mov	r0, r3
 801654e:	f7ff ffa3 	bl	8016498 <list_remove_node>
  (*node)->next = NULL;
 8016552:	683b      	ldr	r3, [r7, #0]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	2200      	movs	r2, #0
 8016558:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	2200      	movs	r2, #0
 8016560:	605a      	str	r2, [r3, #4]
 8016562:	697b      	ldr	r3, [r7, #20]
 8016564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	f383 8810 	msr	PRIMASK, r3
}
 801656c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 801656e:	bf00      	nop
 8016570:	3718      	adds	r7, #24
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}

08016576 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8016576:	b480      	push	{r7}
 8016578:	b089      	sub	sp, #36	; 0x24
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
  int size = 0;
 801657e:	2300      	movs	r3, #0
 8016580:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016582:	f3ef 8310 	mrs	r3, PRIMASK
 8016586:	613b      	str	r3, [r7, #16]
  return(result);
 8016588:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801658a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801658c:	b672      	cpsid	i
}
 801658e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8016596:	e005      	b.n	80165a4 <list_get_size+0x2e>
  {
    size++;
 8016598:	69fb      	ldr	r3, [r7, #28]
 801659a:	3301      	adds	r3, #1
 801659c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 801659e:	69bb      	ldr	r3, [r7, #24]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80165a4:	69ba      	ldr	r2, [r7, #24]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d1f5      	bne.n	8016598 <list_get_size+0x22>
 80165ac:	697b      	ldr	r3, [r7, #20]
 80165ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	f383 8810 	msr	PRIMASK, r3
}
 80165b6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80165b8:	69fb      	ldr	r3, [r7, #28]
}
 80165ba:	4618      	mov	r0, r3
 80165bc:	3724      	adds	r7, #36	; 0x24
 80165be:	46bd      	mov	sp, r7
 80165c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c4:	4770      	bx	lr
	...

080165c8 <__errno>:
 80165c8:	4b01      	ldr	r3, [pc, #4]	; (80165d0 <__errno+0x8>)
 80165ca:	6818      	ldr	r0, [r3, #0]
 80165cc:	4770      	bx	lr
 80165ce:	bf00      	nop
 80165d0:	20000014 	.word	0x20000014

080165d4 <__sflush_r>:
 80165d4:	898a      	ldrh	r2, [r1, #12]
 80165d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165da:	4605      	mov	r5, r0
 80165dc:	0710      	lsls	r0, r2, #28
 80165de:	460c      	mov	r4, r1
 80165e0:	d458      	bmi.n	8016694 <__sflush_r+0xc0>
 80165e2:	684b      	ldr	r3, [r1, #4]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	dc05      	bgt.n	80165f4 <__sflush_r+0x20>
 80165e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	dc02      	bgt.n	80165f4 <__sflush_r+0x20>
 80165ee:	2000      	movs	r0, #0
 80165f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80165f6:	2e00      	cmp	r6, #0
 80165f8:	d0f9      	beq.n	80165ee <__sflush_r+0x1a>
 80165fa:	2300      	movs	r3, #0
 80165fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016600:	682f      	ldr	r7, [r5, #0]
 8016602:	602b      	str	r3, [r5, #0]
 8016604:	d032      	beq.n	801666c <__sflush_r+0x98>
 8016606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016608:	89a3      	ldrh	r3, [r4, #12]
 801660a:	075a      	lsls	r2, r3, #29
 801660c:	d505      	bpl.n	801661a <__sflush_r+0x46>
 801660e:	6863      	ldr	r3, [r4, #4]
 8016610:	1ac0      	subs	r0, r0, r3
 8016612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016614:	b10b      	cbz	r3, 801661a <__sflush_r+0x46>
 8016616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016618:	1ac0      	subs	r0, r0, r3
 801661a:	2300      	movs	r3, #0
 801661c:	4602      	mov	r2, r0
 801661e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016620:	6a21      	ldr	r1, [r4, #32]
 8016622:	4628      	mov	r0, r5
 8016624:	47b0      	blx	r6
 8016626:	1c43      	adds	r3, r0, #1
 8016628:	89a3      	ldrh	r3, [r4, #12]
 801662a:	d106      	bne.n	801663a <__sflush_r+0x66>
 801662c:	6829      	ldr	r1, [r5, #0]
 801662e:	291d      	cmp	r1, #29
 8016630:	d82c      	bhi.n	801668c <__sflush_r+0xb8>
 8016632:	4a2a      	ldr	r2, [pc, #168]	; (80166dc <__sflush_r+0x108>)
 8016634:	40ca      	lsrs	r2, r1
 8016636:	07d6      	lsls	r6, r2, #31
 8016638:	d528      	bpl.n	801668c <__sflush_r+0xb8>
 801663a:	2200      	movs	r2, #0
 801663c:	6062      	str	r2, [r4, #4]
 801663e:	04d9      	lsls	r1, r3, #19
 8016640:	6922      	ldr	r2, [r4, #16]
 8016642:	6022      	str	r2, [r4, #0]
 8016644:	d504      	bpl.n	8016650 <__sflush_r+0x7c>
 8016646:	1c42      	adds	r2, r0, #1
 8016648:	d101      	bne.n	801664e <__sflush_r+0x7a>
 801664a:	682b      	ldr	r3, [r5, #0]
 801664c:	b903      	cbnz	r3, 8016650 <__sflush_r+0x7c>
 801664e:	6560      	str	r0, [r4, #84]	; 0x54
 8016650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016652:	602f      	str	r7, [r5, #0]
 8016654:	2900      	cmp	r1, #0
 8016656:	d0ca      	beq.n	80165ee <__sflush_r+0x1a>
 8016658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801665c:	4299      	cmp	r1, r3
 801665e:	d002      	beq.n	8016666 <__sflush_r+0x92>
 8016660:	4628      	mov	r0, r5
 8016662:	f000 f9ad 	bl	80169c0 <_free_r>
 8016666:	2000      	movs	r0, #0
 8016668:	6360      	str	r0, [r4, #52]	; 0x34
 801666a:	e7c1      	b.n	80165f0 <__sflush_r+0x1c>
 801666c:	6a21      	ldr	r1, [r4, #32]
 801666e:	2301      	movs	r3, #1
 8016670:	4628      	mov	r0, r5
 8016672:	47b0      	blx	r6
 8016674:	1c41      	adds	r1, r0, #1
 8016676:	d1c7      	bne.n	8016608 <__sflush_r+0x34>
 8016678:	682b      	ldr	r3, [r5, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d0c4      	beq.n	8016608 <__sflush_r+0x34>
 801667e:	2b1d      	cmp	r3, #29
 8016680:	d001      	beq.n	8016686 <__sflush_r+0xb2>
 8016682:	2b16      	cmp	r3, #22
 8016684:	d101      	bne.n	801668a <__sflush_r+0xb6>
 8016686:	602f      	str	r7, [r5, #0]
 8016688:	e7b1      	b.n	80165ee <__sflush_r+0x1a>
 801668a:	89a3      	ldrh	r3, [r4, #12]
 801668c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016690:	81a3      	strh	r3, [r4, #12]
 8016692:	e7ad      	b.n	80165f0 <__sflush_r+0x1c>
 8016694:	690f      	ldr	r7, [r1, #16]
 8016696:	2f00      	cmp	r7, #0
 8016698:	d0a9      	beq.n	80165ee <__sflush_r+0x1a>
 801669a:	0793      	lsls	r3, r2, #30
 801669c:	680e      	ldr	r6, [r1, #0]
 801669e:	bf08      	it	eq
 80166a0:	694b      	ldreq	r3, [r1, #20]
 80166a2:	600f      	str	r7, [r1, #0]
 80166a4:	bf18      	it	ne
 80166a6:	2300      	movne	r3, #0
 80166a8:	eba6 0807 	sub.w	r8, r6, r7
 80166ac:	608b      	str	r3, [r1, #8]
 80166ae:	f1b8 0f00 	cmp.w	r8, #0
 80166b2:	dd9c      	ble.n	80165ee <__sflush_r+0x1a>
 80166b4:	6a21      	ldr	r1, [r4, #32]
 80166b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80166b8:	4643      	mov	r3, r8
 80166ba:	463a      	mov	r2, r7
 80166bc:	4628      	mov	r0, r5
 80166be:	47b0      	blx	r6
 80166c0:	2800      	cmp	r0, #0
 80166c2:	dc06      	bgt.n	80166d2 <__sflush_r+0xfe>
 80166c4:	89a3      	ldrh	r3, [r4, #12]
 80166c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166ca:	81a3      	strh	r3, [r4, #12]
 80166cc:	f04f 30ff 	mov.w	r0, #4294967295
 80166d0:	e78e      	b.n	80165f0 <__sflush_r+0x1c>
 80166d2:	4407      	add	r7, r0
 80166d4:	eba8 0800 	sub.w	r8, r8, r0
 80166d8:	e7e9      	b.n	80166ae <__sflush_r+0xda>
 80166da:	bf00      	nop
 80166dc:	20400001 	.word	0x20400001

080166e0 <_fflush_r>:
 80166e0:	b538      	push	{r3, r4, r5, lr}
 80166e2:	690b      	ldr	r3, [r1, #16]
 80166e4:	4605      	mov	r5, r0
 80166e6:	460c      	mov	r4, r1
 80166e8:	b913      	cbnz	r3, 80166f0 <_fflush_r+0x10>
 80166ea:	2500      	movs	r5, #0
 80166ec:	4628      	mov	r0, r5
 80166ee:	bd38      	pop	{r3, r4, r5, pc}
 80166f0:	b118      	cbz	r0, 80166fa <_fflush_r+0x1a>
 80166f2:	6983      	ldr	r3, [r0, #24]
 80166f4:	b90b      	cbnz	r3, 80166fa <_fflush_r+0x1a>
 80166f6:	f000 f887 	bl	8016808 <__sinit>
 80166fa:	4b14      	ldr	r3, [pc, #80]	; (801674c <_fflush_r+0x6c>)
 80166fc:	429c      	cmp	r4, r3
 80166fe:	d11b      	bne.n	8016738 <_fflush_r+0x58>
 8016700:	686c      	ldr	r4, [r5, #4]
 8016702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d0ef      	beq.n	80166ea <_fflush_r+0xa>
 801670a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801670c:	07d0      	lsls	r0, r2, #31
 801670e:	d404      	bmi.n	801671a <_fflush_r+0x3a>
 8016710:	0599      	lsls	r1, r3, #22
 8016712:	d402      	bmi.n	801671a <_fflush_r+0x3a>
 8016714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016716:	f000 f93a 	bl	801698e <__retarget_lock_acquire_recursive>
 801671a:	4628      	mov	r0, r5
 801671c:	4621      	mov	r1, r4
 801671e:	f7ff ff59 	bl	80165d4 <__sflush_r>
 8016722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016724:	07da      	lsls	r2, r3, #31
 8016726:	4605      	mov	r5, r0
 8016728:	d4e0      	bmi.n	80166ec <_fflush_r+0xc>
 801672a:	89a3      	ldrh	r3, [r4, #12]
 801672c:	059b      	lsls	r3, r3, #22
 801672e:	d4dd      	bmi.n	80166ec <_fflush_r+0xc>
 8016730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016732:	f000 f92d 	bl	8016990 <__retarget_lock_release_recursive>
 8016736:	e7d9      	b.n	80166ec <_fflush_r+0xc>
 8016738:	4b05      	ldr	r3, [pc, #20]	; (8016750 <_fflush_r+0x70>)
 801673a:	429c      	cmp	r4, r3
 801673c:	d101      	bne.n	8016742 <_fflush_r+0x62>
 801673e:	68ac      	ldr	r4, [r5, #8]
 8016740:	e7df      	b.n	8016702 <_fflush_r+0x22>
 8016742:	4b04      	ldr	r3, [pc, #16]	; (8016754 <_fflush_r+0x74>)
 8016744:	429c      	cmp	r4, r3
 8016746:	bf08      	it	eq
 8016748:	68ec      	ldreq	r4, [r5, #12]
 801674a:	e7da      	b.n	8016702 <_fflush_r+0x22>
 801674c:	080170a0 	.word	0x080170a0
 8016750:	080170c0 	.word	0x080170c0
 8016754:	08017080 	.word	0x08017080

08016758 <std>:
 8016758:	2300      	movs	r3, #0
 801675a:	b510      	push	{r4, lr}
 801675c:	4604      	mov	r4, r0
 801675e:	e9c0 3300 	strd	r3, r3, [r0]
 8016762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016766:	6083      	str	r3, [r0, #8]
 8016768:	8181      	strh	r1, [r0, #12]
 801676a:	6643      	str	r3, [r0, #100]	; 0x64
 801676c:	81c2      	strh	r2, [r0, #14]
 801676e:	6183      	str	r3, [r0, #24]
 8016770:	4619      	mov	r1, r3
 8016772:	2208      	movs	r2, #8
 8016774:	305c      	adds	r0, #92	; 0x5c
 8016776:	f000 f91a 	bl	80169ae <memset>
 801677a:	4b05      	ldr	r3, [pc, #20]	; (8016790 <std+0x38>)
 801677c:	6263      	str	r3, [r4, #36]	; 0x24
 801677e:	4b05      	ldr	r3, [pc, #20]	; (8016794 <std+0x3c>)
 8016780:	62a3      	str	r3, [r4, #40]	; 0x28
 8016782:	4b05      	ldr	r3, [pc, #20]	; (8016798 <std+0x40>)
 8016784:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016786:	4b05      	ldr	r3, [pc, #20]	; (801679c <std+0x44>)
 8016788:	6224      	str	r4, [r4, #32]
 801678a:	6323      	str	r3, [r4, #48]	; 0x30
 801678c:	bd10      	pop	{r4, pc}
 801678e:	bf00      	nop
 8016790:	08016c21 	.word	0x08016c21
 8016794:	08016c43 	.word	0x08016c43
 8016798:	08016c7b 	.word	0x08016c7b
 801679c:	08016c9f 	.word	0x08016c9f

080167a0 <_cleanup_r>:
 80167a0:	4901      	ldr	r1, [pc, #4]	; (80167a8 <_cleanup_r+0x8>)
 80167a2:	f000 b8af 	b.w	8016904 <_fwalk_reent>
 80167a6:	bf00      	nop
 80167a8:	080166e1 	.word	0x080166e1

080167ac <__sfmoreglue>:
 80167ac:	b570      	push	{r4, r5, r6, lr}
 80167ae:	1e4a      	subs	r2, r1, #1
 80167b0:	2568      	movs	r5, #104	; 0x68
 80167b2:	4355      	muls	r5, r2
 80167b4:	460e      	mov	r6, r1
 80167b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80167ba:	f000 f951 	bl	8016a60 <_malloc_r>
 80167be:	4604      	mov	r4, r0
 80167c0:	b140      	cbz	r0, 80167d4 <__sfmoreglue+0x28>
 80167c2:	2100      	movs	r1, #0
 80167c4:	e9c0 1600 	strd	r1, r6, [r0]
 80167c8:	300c      	adds	r0, #12
 80167ca:	60a0      	str	r0, [r4, #8]
 80167cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80167d0:	f000 f8ed 	bl	80169ae <memset>
 80167d4:	4620      	mov	r0, r4
 80167d6:	bd70      	pop	{r4, r5, r6, pc}

080167d8 <__sfp_lock_acquire>:
 80167d8:	4801      	ldr	r0, [pc, #4]	; (80167e0 <__sfp_lock_acquire+0x8>)
 80167da:	f000 b8d8 	b.w	801698e <__retarget_lock_acquire_recursive>
 80167de:	bf00      	nop
 80167e0:	200005f0 	.word	0x200005f0

080167e4 <__sfp_lock_release>:
 80167e4:	4801      	ldr	r0, [pc, #4]	; (80167ec <__sfp_lock_release+0x8>)
 80167e6:	f000 b8d3 	b.w	8016990 <__retarget_lock_release_recursive>
 80167ea:	bf00      	nop
 80167ec:	200005f0 	.word	0x200005f0

080167f0 <__sinit_lock_acquire>:
 80167f0:	4801      	ldr	r0, [pc, #4]	; (80167f8 <__sinit_lock_acquire+0x8>)
 80167f2:	f000 b8cc 	b.w	801698e <__retarget_lock_acquire_recursive>
 80167f6:	bf00      	nop
 80167f8:	200005eb 	.word	0x200005eb

080167fc <__sinit_lock_release>:
 80167fc:	4801      	ldr	r0, [pc, #4]	; (8016804 <__sinit_lock_release+0x8>)
 80167fe:	f000 b8c7 	b.w	8016990 <__retarget_lock_release_recursive>
 8016802:	bf00      	nop
 8016804:	200005eb 	.word	0x200005eb

08016808 <__sinit>:
 8016808:	b510      	push	{r4, lr}
 801680a:	4604      	mov	r4, r0
 801680c:	f7ff fff0 	bl	80167f0 <__sinit_lock_acquire>
 8016810:	69a3      	ldr	r3, [r4, #24]
 8016812:	b11b      	cbz	r3, 801681c <__sinit+0x14>
 8016814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016818:	f7ff bff0 	b.w	80167fc <__sinit_lock_release>
 801681c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016820:	6523      	str	r3, [r4, #80]	; 0x50
 8016822:	4b13      	ldr	r3, [pc, #76]	; (8016870 <__sinit+0x68>)
 8016824:	4a13      	ldr	r2, [pc, #76]	; (8016874 <__sinit+0x6c>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	62a2      	str	r2, [r4, #40]	; 0x28
 801682a:	42a3      	cmp	r3, r4
 801682c:	bf04      	itt	eq
 801682e:	2301      	moveq	r3, #1
 8016830:	61a3      	streq	r3, [r4, #24]
 8016832:	4620      	mov	r0, r4
 8016834:	f000 f820 	bl	8016878 <__sfp>
 8016838:	6060      	str	r0, [r4, #4]
 801683a:	4620      	mov	r0, r4
 801683c:	f000 f81c 	bl	8016878 <__sfp>
 8016840:	60a0      	str	r0, [r4, #8]
 8016842:	4620      	mov	r0, r4
 8016844:	f000 f818 	bl	8016878 <__sfp>
 8016848:	2200      	movs	r2, #0
 801684a:	60e0      	str	r0, [r4, #12]
 801684c:	2104      	movs	r1, #4
 801684e:	6860      	ldr	r0, [r4, #4]
 8016850:	f7ff ff82 	bl	8016758 <std>
 8016854:	68a0      	ldr	r0, [r4, #8]
 8016856:	2201      	movs	r2, #1
 8016858:	2109      	movs	r1, #9
 801685a:	f7ff ff7d 	bl	8016758 <std>
 801685e:	68e0      	ldr	r0, [r4, #12]
 8016860:	2202      	movs	r2, #2
 8016862:	2112      	movs	r1, #18
 8016864:	f7ff ff78 	bl	8016758 <std>
 8016868:	2301      	movs	r3, #1
 801686a:	61a3      	str	r3, [r4, #24]
 801686c:	e7d2      	b.n	8016814 <__sinit+0xc>
 801686e:	bf00      	nop
 8016870:	080170e0 	.word	0x080170e0
 8016874:	080167a1 	.word	0x080167a1

08016878 <__sfp>:
 8016878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801687a:	4607      	mov	r7, r0
 801687c:	f7ff ffac 	bl	80167d8 <__sfp_lock_acquire>
 8016880:	4b1e      	ldr	r3, [pc, #120]	; (80168fc <__sfp+0x84>)
 8016882:	681e      	ldr	r6, [r3, #0]
 8016884:	69b3      	ldr	r3, [r6, #24]
 8016886:	b913      	cbnz	r3, 801688e <__sfp+0x16>
 8016888:	4630      	mov	r0, r6
 801688a:	f7ff ffbd 	bl	8016808 <__sinit>
 801688e:	3648      	adds	r6, #72	; 0x48
 8016890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016894:	3b01      	subs	r3, #1
 8016896:	d503      	bpl.n	80168a0 <__sfp+0x28>
 8016898:	6833      	ldr	r3, [r6, #0]
 801689a:	b30b      	cbz	r3, 80168e0 <__sfp+0x68>
 801689c:	6836      	ldr	r6, [r6, #0]
 801689e:	e7f7      	b.n	8016890 <__sfp+0x18>
 80168a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80168a4:	b9d5      	cbnz	r5, 80168dc <__sfp+0x64>
 80168a6:	4b16      	ldr	r3, [pc, #88]	; (8016900 <__sfp+0x88>)
 80168a8:	60e3      	str	r3, [r4, #12]
 80168aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80168ae:	6665      	str	r5, [r4, #100]	; 0x64
 80168b0:	f000 f86c 	bl	801698c <__retarget_lock_init_recursive>
 80168b4:	f7ff ff96 	bl	80167e4 <__sfp_lock_release>
 80168b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80168bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80168c0:	6025      	str	r5, [r4, #0]
 80168c2:	61a5      	str	r5, [r4, #24]
 80168c4:	2208      	movs	r2, #8
 80168c6:	4629      	mov	r1, r5
 80168c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80168cc:	f000 f86f 	bl	80169ae <memset>
 80168d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80168d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80168d8:	4620      	mov	r0, r4
 80168da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168dc:	3468      	adds	r4, #104	; 0x68
 80168de:	e7d9      	b.n	8016894 <__sfp+0x1c>
 80168e0:	2104      	movs	r1, #4
 80168e2:	4638      	mov	r0, r7
 80168e4:	f7ff ff62 	bl	80167ac <__sfmoreglue>
 80168e8:	4604      	mov	r4, r0
 80168ea:	6030      	str	r0, [r6, #0]
 80168ec:	2800      	cmp	r0, #0
 80168ee:	d1d5      	bne.n	801689c <__sfp+0x24>
 80168f0:	f7ff ff78 	bl	80167e4 <__sfp_lock_release>
 80168f4:	230c      	movs	r3, #12
 80168f6:	603b      	str	r3, [r7, #0]
 80168f8:	e7ee      	b.n	80168d8 <__sfp+0x60>
 80168fa:	bf00      	nop
 80168fc:	080170e0 	.word	0x080170e0
 8016900:	ffff0001 	.word	0xffff0001

08016904 <_fwalk_reent>:
 8016904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016908:	4606      	mov	r6, r0
 801690a:	4688      	mov	r8, r1
 801690c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016910:	2700      	movs	r7, #0
 8016912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016916:	f1b9 0901 	subs.w	r9, r9, #1
 801691a:	d505      	bpl.n	8016928 <_fwalk_reent+0x24>
 801691c:	6824      	ldr	r4, [r4, #0]
 801691e:	2c00      	cmp	r4, #0
 8016920:	d1f7      	bne.n	8016912 <_fwalk_reent+0xe>
 8016922:	4638      	mov	r0, r7
 8016924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016928:	89ab      	ldrh	r3, [r5, #12]
 801692a:	2b01      	cmp	r3, #1
 801692c:	d907      	bls.n	801693e <_fwalk_reent+0x3a>
 801692e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016932:	3301      	adds	r3, #1
 8016934:	d003      	beq.n	801693e <_fwalk_reent+0x3a>
 8016936:	4629      	mov	r1, r5
 8016938:	4630      	mov	r0, r6
 801693a:	47c0      	blx	r8
 801693c:	4307      	orrs	r7, r0
 801693e:	3568      	adds	r5, #104	; 0x68
 8016940:	e7e9      	b.n	8016916 <_fwalk_reent+0x12>
	...

08016944 <__libc_init_array>:
 8016944:	b570      	push	{r4, r5, r6, lr}
 8016946:	4d0d      	ldr	r5, [pc, #52]	; (801697c <__libc_init_array+0x38>)
 8016948:	4c0d      	ldr	r4, [pc, #52]	; (8016980 <__libc_init_array+0x3c>)
 801694a:	1b64      	subs	r4, r4, r5
 801694c:	10a4      	asrs	r4, r4, #2
 801694e:	2600      	movs	r6, #0
 8016950:	42a6      	cmp	r6, r4
 8016952:	d109      	bne.n	8016968 <__libc_init_array+0x24>
 8016954:	4d0b      	ldr	r5, [pc, #44]	; (8016984 <__libc_init_array+0x40>)
 8016956:	4c0c      	ldr	r4, [pc, #48]	; (8016988 <__libc_init_array+0x44>)
 8016958:	f000 fb3e 	bl	8016fd8 <_init>
 801695c:	1b64      	subs	r4, r4, r5
 801695e:	10a4      	asrs	r4, r4, #2
 8016960:	2600      	movs	r6, #0
 8016962:	42a6      	cmp	r6, r4
 8016964:	d105      	bne.n	8016972 <__libc_init_array+0x2e>
 8016966:	bd70      	pop	{r4, r5, r6, pc}
 8016968:	f855 3b04 	ldr.w	r3, [r5], #4
 801696c:	4798      	blx	r3
 801696e:	3601      	adds	r6, #1
 8016970:	e7ee      	b.n	8016950 <__libc_init_array+0xc>
 8016972:	f855 3b04 	ldr.w	r3, [r5], #4
 8016976:	4798      	blx	r3
 8016978:	3601      	adds	r6, #1
 801697a:	e7f2      	b.n	8016962 <__libc_init_array+0x1e>
 801697c:	080170ec 	.word	0x080170ec
 8016980:	080170ec 	.word	0x080170ec
 8016984:	080170ec 	.word	0x080170ec
 8016988:	080170f0 	.word	0x080170f0

0801698c <__retarget_lock_init_recursive>:
 801698c:	4770      	bx	lr

0801698e <__retarget_lock_acquire_recursive>:
 801698e:	4770      	bx	lr

08016990 <__retarget_lock_release_recursive>:
 8016990:	4770      	bx	lr

08016992 <memcpy>:
 8016992:	440a      	add	r2, r1
 8016994:	4291      	cmp	r1, r2
 8016996:	f100 33ff 	add.w	r3, r0, #4294967295
 801699a:	d100      	bne.n	801699e <memcpy+0xc>
 801699c:	4770      	bx	lr
 801699e:	b510      	push	{r4, lr}
 80169a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169a8:	4291      	cmp	r1, r2
 80169aa:	d1f9      	bne.n	80169a0 <memcpy+0xe>
 80169ac:	bd10      	pop	{r4, pc}

080169ae <memset>:
 80169ae:	4402      	add	r2, r0
 80169b0:	4603      	mov	r3, r0
 80169b2:	4293      	cmp	r3, r2
 80169b4:	d100      	bne.n	80169b8 <memset+0xa>
 80169b6:	4770      	bx	lr
 80169b8:	f803 1b01 	strb.w	r1, [r3], #1
 80169bc:	e7f9      	b.n	80169b2 <memset+0x4>
	...

080169c0 <_free_r>:
 80169c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80169c2:	2900      	cmp	r1, #0
 80169c4:	d048      	beq.n	8016a58 <_free_r+0x98>
 80169c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169ca:	9001      	str	r0, [sp, #4]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	f1a1 0404 	sub.w	r4, r1, #4
 80169d2:	bfb8      	it	lt
 80169d4:	18e4      	addlt	r4, r4, r3
 80169d6:	f000 fabf 	bl	8016f58 <__malloc_lock>
 80169da:	4a20      	ldr	r2, [pc, #128]	; (8016a5c <_free_r+0x9c>)
 80169dc:	9801      	ldr	r0, [sp, #4]
 80169de:	6813      	ldr	r3, [r2, #0]
 80169e0:	4615      	mov	r5, r2
 80169e2:	b933      	cbnz	r3, 80169f2 <_free_r+0x32>
 80169e4:	6063      	str	r3, [r4, #4]
 80169e6:	6014      	str	r4, [r2, #0]
 80169e8:	b003      	add	sp, #12
 80169ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80169ee:	f000 bab9 	b.w	8016f64 <__malloc_unlock>
 80169f2:	42a3      	cmp	r3, r4
 80169f4:	d90b      	bls.n	8016a0e <_free_r+0x4e>
 80169f6:	6821      	ldr	r1, [r4, #0]
 80169f8:	1862      	adds	r2, r4, r1
 80169fa:	4293      	cmp	r3, r2
 80169fc:	bf04      	itt	eq
 80169fe:	681a      	ldreq	r2, [r3, #0]
 8016a00:	685b      	ldreq	r3, [r3, #4]
 8016a02:	6063      	str	r3, [r4, #4]
 8016a04:	bf04      	itt	eq
 8016a06:	1852      	addeq	r2, r2, r1
 8016a08:	6022      	streq	r2, [r4, #0]
 8016a0a:	602c      	str	r4, [r5, #0]
 8016a0c:	e7ec      	b.n	80169e8 <_free_r+0x28>
 8016a0e:	461a      	mov	r2, r3
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	b10b      	cbz	r3, 8016a18 <_free_r+0x58>
 8016a14:	42a3      	cmp	r3, r4
 8016a16:	d9fa      	bls.n	8016a0e <_free_r+0x4e>
 8016a18:	6811      	ldr	r1, [r2, #0]
 8016a1a:	1855      	adds	r5, r2, r1
 8016a1c:	42a5      	cmp	r5, r4
 8016a1e:	d10b      	bne.n	8016a38 <_free_r+0x78>
 8016a20:	6824      	ldr	r4, [r4, #0]
 8016a22:	4421      	add	r1, r4
 8016a24:	1854      	adds	r4, r2, r1
 8016a26:	42a3      	cmp	r3, r4
 8016a28:	6011      	str	r1, [r2, #0]
 8016a2a:	d1dd      	bne.n	80169e8 <_free_r+0x28>
 8016a2c:	681c      	ldr	r4, [r3, #0]
 8016a2e:	685b      	ldr	r3, [r3, #4]
 8016a30:	6053      	str	r3, [r2, #4]
 8016a32:	4421      	add	r1, r4
 8016a34:	6011      	str	r1, [r2, #0]
 8016a36:	e7d7      	b.n	80169e8 <_free_r+0x28>
 8016a38:	d902      	bls.n	8016a40 <_free_r+0x80>
 8016a3a:	230c      	movs	r3, #12
 8016a3c:	6003      	str	r3, [r0, #0]
 8016a3e:	e7d3      	b.n	80169e8 <_free_r+0x28>
 8016a40:	6825      	ldr	r5, [r4, #0]
 8016a42:	1961      	adds	r1, r4, r5
 8016a44:	428b      	cmp	r3, r1
 8016a46:	bf04      	itt	eq
 8016a48:	6819      	ldreq	r1, [r3, #0]
 8016a4a:	685b      	ldreq	r3, [r3, #4]
 8016a4c:	6063      	str	r3, [r4, #4]
 8016a4e:	bf04      	itt	eq
 8016a50:	1949      	addeq	r1, r1, r5
 8016a52:	6021      	streq	r1, [r4, #0]
 8016a54:	6054      	str	r4, [r2, #4]
 8016a56:	e7c7      	b.n	80169e8 <_free_r+0x28>
 8016a58:	b003      	add	sp, #12
 8016a5a:	bd30      	pop	{r4, r5, pc}
 8016a5c:	20000478 	.word	0x20000478

08016a60 <_malloc_r>:
 8016a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a62:	1ccd      	adds	r5, r1, #3
 8016a64:	f025 0503 	bic.w	r5, r5, #3
 8016a68:	3508      	adds	r5, #8
 8016a6a:	2d0c      	cmp	r5, #12
 8016a6c:	bf38      	it	cc
 8016a6e:	250c      	movcc	r5, #12
 8016a70:	2d00      	cmp	r5, #0
 8016a72:	4606      	mov	r6, r0
 8016a74:	db01      	blt.n	8016a7a <_malloc_r+0x1a>
 8016a76:	42a9      	cmp	r1, r5
 8016a78:	d903      	bls.n	8016a82 <_malloc_r+0x22>
 8016a7a:	230c      	movs	r3, #12
 8016a7c:	6033      	str	r3, [r6, #0]
 8016a7e:	2000      	movs	r0, #0
 8016a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a82:	f000 fa69 	bl	8016f58 <__malloc_lock>
 8016a86:	4921      	ldr	r1, [pc, #132]	; (8016b0c <_malloc_r+0xac>)
 8016a88:	680a      	ldr	r2, [r1, #0]
 8016a8a:	4614      	mov	r4, r2
 8016a8c:	b99c      	cbnz	r4, 8016ab6 <_malloc_r+0x56>
 8016a8e:	4f20      	ldr	r7, [pc, #128]	; (8016b10 <_malloc_r+0xb0>)
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	b923      	cbnz	r3, 8016a9e <_malloc_r+0x3e>
 8016a94:	4621      	mov	r1, r4
 8016a96:	4630      	mov	r0, r6
 8016a98:	f000 f8b2 	bl	8016c00 <_sbrk_r>
 8016a9c:	6038      	str	r0, [r7, #0]
 8016a9e:	4629      	mov	r1, r5
 8016aa0:	4630      	mov	r0, r6
 8016aa2:	f000 f8ad 	bl	8016c00 <_sbrk_r>
 8016aa6:	1c43      	adds	r3, r0, #1
 8016aa8:	d123      	bne.n	8016af2 <_malloc_r+0x92>
 8016aaa:	230c      	movs	r3, #12
 8016aac:	6033      	str	r3, [r6, #0]
 8016aae:	4630      	mov	r0, r6
 8016ab0:	f000 fa58 	bl	8016f64 <__malloc_unlock>
 8016ab4:	e7e3      	b.n	8016a7e <_malloc_r+0x1e>
 8016ab6:	6823      	ldr	r3, [r4, #0]
 8016ab8:	1b5b      	subs	r3, r3, r5
 8016aba:	d417      	bmi.n	8016aec <_malloc_r+0x8c>
 8016abc:	2b0b      	cmp	r3, #11
 8016abe:	d903      	bls.n	8016ac8 <_malloc_r+0x68>
 8016ac0:	6023      	str	r3, [r4, #0]
 8016ac2:	441c      	add	r4, r3
 8016ac4:	6025      	str	r5, [r4, #0]
 8016ac6:	e004      	b.n	8016ad2 <_malloc_r+0x72>
 8016ac8:	6863      	ldr	r3, [r4, #4]
 8016aca:	42a2      	cmp	r2, r4
 8016acc:	bf0c      	ite	eq
 8016ace:	600b      	streq	r3, [r1, #0]
 8016ad0:	6053      	strne	r3, [r2, #4]
 8016ad2:	4630      	mov	r0, r6
 8016ad4:	f000 fa46 	bl	8016f64 <__malloc_unlock>
 8016ad8:	f104 000b 	add.w	r0, r4, #11
 8016adc:	1d23      	adds	r3, r4, #4
 8016ade:	f020 0007 	bic.w	r0, r0, #7
 8016ae2:	1ac2      	subs	r2, r0, r3
 8016ae4:	d0cc      	beq.n	8016a80 <_malloc_r+0x20>
 8016ae6:	1a1b      	subs	r3, r3, r0
 8016ae8:	50a3      	str	r3, [r4, r2]
 8016aea:	e7c9      	b.n	8016a80 <_malloc_r+0x20>
 8016aec:	4622      	mov	r2, r4
 8016aee:	6864      	ldr	r4, [r4, #4]
 8016af0:	e7cc      	b.n	8016a8c <_malloc_r+0x2c>
 8016af2:	1cc4      	adds	r4, r0, #3
 8016af4:	f024 0403 	bic.w	r4, r4, #3
 8016af8:	42a0      	cmp	r0, r4
 8016afa:	d0e3      	beq.n	8016ac4 <_malloc_r+0x64>
 8016afc:	1a21      	subs	r1, r4, r0
 8016afe:	4630      	mov	r0, r6
 8016b00:	f000 f87e 	bl	8016c00 <_sbrk_r>
 8016b04:	3001      	adds	r0, #1
 8016b06:	d1dd      	bne.n	8016ac4 <_malloc_r+0x64>
 8016b08:	e7cf      	b.n	8016aaa <_malloc_r+0x4a>
 8016b0a:	bf00      	nop
 8016b0c:	20000478 	.word	0x20000478
 8016b10:	2000047c 	.word	0x2000047c

08016b14 <_puts_r>:
 8016b14:	b570      	push	{r4, r5, r6, lr}
 8016b16:	460e      	mov	r6, r1
 8016b18:	4605      	mov	r5, r0
 8016b1a:	b118      	cbz	r0, 8016b24 <_puts_r+0x10>
 8016b1c:	6983      	ldr	r3, [r0, #24]
 8016b1e:	b90b      	cbnz	r3, 8016b24 <_puts_r+0x10>
 8016b20:	f7ff fe72 	bl	8016808 <__sinit>
 8016b24:	69ab      	ldr	r3, [r5, #24]
 8016b26:	68ac      	ldr	r4, [r5, #8]
 8016b28:	b913      	cbnz	r3, 8016b30 <_puts_r+0x1c>
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	f7ff fe6c 	bl	8016808 <__sinit>
 8016b30:	4b2c      	ldr	r3, [pc, #176]	; (8016be4 <_puts_r+0xd0>)
 8016b32:	429c      	cmp	r4, r3
 8016b34:	d120      	bne.n	8016b78 <_puts_r+0x64>
 8016b36:	686c      	ldr	r4, [r5, #4]
 8016b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b3a:	07db      	lsls	r3, r3, #31
 8016b3c:	d405      	bmi.n	8016b4a <_puts_r+0x36>
 8016b3e:	89a3      	ldrh	r3, [r4, #12]
 8016b40:	0598      	lsls	r0, r3, #22
 8016b42:	d402      	bmi.n	8016b4a <_puts_r+0x36>
 8016b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b46:	f7ff ff22 	bl	801698e <__retarget_lock_acquire_recursive>
 8016b4a:	89a3      	ldrh	r3, [r4, #12]
 8016b4c:	0719      	lsls	r1, r3, #28
 8016b4e:	d51d      	bpl.n	8016b8c <_puts_r+0x78>
 8016b50:	6923      	ldr	r3, [r4, #16]
 8016b52:	b1db      	cbz	r3, 8016b8c <_puts_r+0x78>
 8016b54:	3e01      	subs	r6, #1
 8016b56:	68a3      	ldr	r3, [r4, #8]
 8016b58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016b5c:	3b01      	subs	r3, #1
 8016b5e:	60a3      	str	r3, [r4, #8]
 8016b60:	bb39      	cbnz	r1, 8016bb2 <_puts_r+0x9e>
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	da38      	bge.n	8016bd8 <_puts_r+0xc4>
 8016b66:	4622      	mov	r2, r4
 8016b68:	210a      	movs	r1, #10
 8016b6a:	4628      	mov	r0, r5
 8016b6c:	f000 f89c 	bl	8016ca8 <__swbuf_r>
 8016b70:	3001      	adds	r0, #1
 8016b72:	d011      	beq.n	8016b98 <_puts_r+0x84>
 8016b74:	250a      	movs	r5, #10
 8016b76:	e011      	b.n	8016b9c <_puts_r+0x88>
 8016b78:	4b1b      	ldr	r3, [pc, #108]	; (8016be8 <_puts_r+0xd4>)
 8016b7a:	429c      	cmp	r4, r3
 8016b7c:	d101      	bne.n	8016b82 <_puts_r+0x6e>
 8016b7e:	68ac      	ldr	r4, [r5, #8]
 8016b80:	e7da      	b.n	8016b38 <_puts_r+0x24>
 8016b82:	4b1a      	ldr	r3, [pc, #104]	; (8016bec <_puts_r+0xd8>)
 8016b84:	429c      	cmp	r4, r3
 8016b86:	bf08      	it	eq
 8016b88:	68ec      	ldreq	r4, [r5, #12]
 8016b8a:	e7d5      	b.n	8016b38 <_puts_r+0x24>
 8016b8c:	4621      	mov	r1, r4
 8016b8e:	4628      	mov	r0, r5
 8016b90:	f000 f8ee 	bl	8016d70 <__swsetup_r>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	d0dd      	beq.n	8016b54 <_puts_r+0x40>
 8016b98:	f04f 35ff 	mov.w	r5, #4294967295
 8016b9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b9e:	07da      	lsls	r2, r3, #31
 8016ba0:	d405      	bmi.n	8016bae <_puts_r+0x9a>
 8016ba2:	89a3      	ldrh	r3, [r4, #12]
 8016ba4:	059b      	lsls	r3, r3, #22
 8016ba6:	d402      	bmi.n	8016bae <_puts_r+0x9a>
 8016ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016baa:	f7ff fef1 	bl	8016990 <__retarget_lock_release_recursive>
 8016bae:	4628      	mov	r0, r5
 8016bb0:	bd70      	pop	{r4, r5, r6, pc}
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	da04      	bge.n	8016bc0 <_puts_r+0xac>
 8016bb6:	69a2      	ldr	r2, [r4, #24]
 8016bb8:	429a      	cmp	r2, r3
 8016bba:	dc06      	bgt.n	8016bca <_puts_r+0xb6>
 8016bbc:	290a      	cmp	r1, #10
 8016bbe:	d004      	beq.n	8016bca <_puts_r+0xb6>
 8016bc0:	6823      	ldr	r3, [r4, #0]
 8016bc2:	1c5a      	adds	r2, r3, #1
 8016bc4:	6022      	str	r2, [r4, #0]
 8016bc6:	7019      	strb	r1, [r3, #0]
 8016bc8:	e7c5      	b.n	8016b56 <_puts_r+0x42>
 8016bca:	4622      	mov	r2, r4
 8016bcc:	4628      	mov	r0, r5
 8016bce:	f000 f86b 	bl	8016ca8 <__swbuf_r>
 8016bd2:	3001      	adds	r0, #1
 8016bd4:	d1bf      	bne.n	8016b56 <_puts_r+0x42>
 8016bd6:	e7df      	b.n	8016b98 <_puts_r+0x84>
 8016bd8:	6823      	ldr	r3, [r4, #0]
 8016bda:	250a      	movs	r5, #10
 8016bdc:	1c5a      	adds	r2, r3, #1
 8016bde:	6022      	str	r2, [r4, #0]
 8016be0:	701d      	strb	r5, [r3, #0]
 8016be2:	e7db      	b.n	8016b9c <_puts_r+0x88>
 8016be4:	080170a0 	.word	0x080170a0
 8016be8:	080170c0 	.word	0x080170c0
 8016bec:	08017080 	.word	0x08017080

08016bf0 <puts>:
 8016bf0:	4b02      	ldr	r3, [pc, #8]	; (8016bfc <puts+0xc>)
 8016bf2:	4601      	mov	r1, r0
 8016bf4:	6818      	ldr	r0, [r3, #0]
 8016bf6:	f7ff bf8d 	b.w	8016b14 <_puts_r>
 8016bfa:	bf00      	nop
 8016bfc:	20000014 	.word	0x20000014

08016c00 <_sbrk_r>:
 8016c00:	b538      	push	{r3, r4, r5, lr}
 8016c02:	4d06      	ldr	r5, [pc, #24]	; (8016c1c <_sbrk_r+0x1c>)
 8016c04:	2300      	movs	r3, #0
 8016c06:	4604      	mov	r4, r0
 8016c08:	4608      	mov	r0, r1
 8016c0a:	602b      	str	r3, [r5, #0]
 8016c0c:	f7fa fb46 	bl	801129c <_sbrk>
 8016c10:	1c43      	adds	r3, r0, #1
 8016c12:	d102      	bne.n	8016c1a <_sbrk_r+0x1a>
 8016c14:	682b      	ldr	r3, [r5, #0]
 8016c16:	b103      	cbz	r3, 8016c1a <_sbrk_r+0x1a>
 8016c18:	6023      	str	r3, [r4, #0]
 8016c1a:	bd38      	pop	{r3, r4, r5, pc}
 8016c1c:	200005f4 	.word	0x200005f4

08016c20 <__sread>:
 8016c20:	b510      	push	{r4, lr}
 8016c22:	460c      	mov	r4, r1
 8016c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c28:	f000 f9a2 	bl	8016f70 <_read_r>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	bfab      	itete	ge
 8016c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c32:	89a3      	ldrhlt	r3, [r4, #12]
 8016c34:	181b      	addge	r3, r3, r0
 8016c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c3a:	bfac      	ite	ge
 8016c3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c3e:	81a3      	strhlt	r3, [r4, #12]
 8016c40:	bd10      	pop	{r4, pc}

08016c42 <__swrite>:
 8016c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c46:	461f      	mov	r7, r3
 8016c48:	898b      	ldrh	r3, [r1, #12]
 8016c4a:	05db      	lsls	r3, r3, #23
 8016c4c:	4605      	mov	r5, r0
 8016c4e:	460c      	mov	r4, r1
 8016c50:	4616      	mov	r6, r2
 8016c52:	d505      	bpl.n	8016c60 <__swrite+0x1e>
 8016c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c58:	2302      	movs	r3, #2
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	f000 f906 	bl	8016e6c <_lseek_r>
 8016c60:	89a3      	ldrh	r3, [r4, #12]
 8016c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c6a:	81a3      	strh	r3, [r4, #12]
 8016c6c:	4632      	mov	r2, r6
 8016c6e:	463b      	mov	r3, r7
 8016c70:	4628      	mov	r0, r5
 8016c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c76:	f000 b869 	b.w	8016d4c <_write_r>

08016c7a <__sseek>:
 8016c7a:	b510      	push	{r4, lr}
 8016c7c:	460c      	mov	r4, r1
 8016c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c82:	f000 f8f3 	bl	8016e6c <_lseek_r>
 8016c86:	1c43      	adds	r3, r0, #1
 8016c88:	89a3      	ldrh	r3, [r4, #12]
 8016c8a:	bf15      	itete	ne
 8016c8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c96:	81a3      	strheq	r3, [r4, #12]
 8016c98:	bf18      	it	ne
 8016c9a:	81a3      	strhne	r3, [r4, #12]
 8016c9c:	bd10      	pop	{r4, pc}

08016c9e <__sclose>:
 8016c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ca2:	f000 b8d3 	b.w	8016e4c <_close_r>
	...

08016ca8 <__swbuf_r>:
 8016ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016caa:	460e      	mov	r6, r1
 8016cac:	4614      	mov	r4, r2
 8016cae:	4605      	mov	r5, r0
 8016cb0:	b118      	cbz	r0, 8016cba <__swbuf_r+0x12>
 8016cb2:	6983      	ldr	r3, [r0, #24]
 8016cb4:	b90b      	cbnz	r3, 8016cba <__swbuf_r+0x12>
 8016cb6:	f7ff fda7 	bl	8016808 <__sinit>
 8016cba:	4b21      	ldr	r3, [pc, #132]	; (8016d40 <__swbuf_r+0x98>)
 8016cbc:	429c      	cmp	r4, r3
 8016cbe:	d12b      	bne.n	8016d18 <__swbuf_r+0x70>
 8016cc0:	686c      	ldr	r4, [r5, #4]
 8016cc2:	69a3      	ldr	r3, [r4, #24]
 8016cc4:	60a3      	str	r3, [r4, #8]
 8016cc6:	89a3      	ldrh	r3, [r4, #12]
 8016cc8:	071a      	lsls	r2, r3, #28
 8016cca:	d52f      	bpl.n	8016d2c <__swbuf_r+0x84>
 8016ccc:	6923      	ldr	r3, [r4, #16]
 8016cce:	b36b      	cbz	r3, 8016d2c <__swbuf_r+0x84>
 8016cd0:	6923      	ldr	r3, [r4, #16]
 8016cd2:	6820      	ldr	r0, [r4, #0]
 8016cd4:	1ac0      	subs	r0, r0, r3
 8016cd6:	6963      	ldr	r3, [r4, #20]
 8016cd8:	b2f6      	uxtb	r6, r6
 8016cda:	4283      	cmp	r3, r0
 8016cdc:	4637      	mov	r7, r6
 8016cde:	dc04      	bgt.n	8016cea <__swbuf_r+0x42>
 8016ce0:	4621      	mov	r1, r4
 8016ce2:	4628      	mov	r0, r5
 8016ce4:	f7ff fcfc 	bl	80166e0 <_fflush_r>
 8016ce8:	bb30      	cbnz	r0, 8016d38 <__swbuf_r+0x90>
 8016cea:	68a3      	ldr	r3, [r4, #8]
 8016cec:	3b01      	subs	r3, #1
 8016cee:	60a3      	str	r3, [r4, #8]
 8016cf0:	6823      	ldr	r3, [r4, #0]
 8016cf2:	1c5a      	adds	r2, r3, #1
 8016cf4:	6022      	str	r2, [r4, #0]
 8016cf6:	701e      	strb	r6, [r3, #0]
 8016cf8:	6963      	ldr	r3, [r4, #20]
 8016cfa:	3001      	adds	r0, #1
 8016cfc:	4283      	cmp	r3, r0
 8016cfe:	d004      	beq.n	8016d0a <__swbuf_r+0x62>
 8016d00:	89a3      	ldrh	r3, [r4, #12]
 8016d02:	07db      	lsls	r3, r3, #31
 8016d04:	d506      	bpl.n	8016d14 <__swbuf_r+0x6c>
 8016d06:	2e0a      	cmp	r6, #10
 8016d08:	d104      	bne.n	8016d14 <__swbuf_r+0x6c>
 8016d0a:	4621      	mov	r1, r4
 8016d0c:	4628      	mov	r0, r5
 8016d0e:	f7ff fce7 	bl	80166e0 <_fflush_r>
 8016d12:	b988      	cbnz	r0, 8016d38 <__swbuf_r+0x90>
 8016d14:	4638      	mov	r0, r7
 8016d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d18:	4b0a      	ldr	r3, [pc, #40]	; (8016d44 <__swbuf_r+0x9c>)
 8016d1a:	429c      	cmp	r4, r3
 8016d1c:	d101      	bne.n	8016d22 <__swbuf_r+0x7a>
 8016d1e:	68ac      	ldr	r4, [r5, #8]
 8016d20:	e7cf      	b.n	8016cc2 <__swbuf_r+0x1a>
 8016d22:	4b09      	ldr	r3, [pc, #36]	; (8016d48 <__swbuf_r+0xa0>)
 8016d24:	429c      	cmp	r4, r3
 8016d26:	bf08      	it	eq
 8016d28:	68ec      	ldreq	r4, [r5, #12]
 8016d2a:	e7ca      	b.n	8016cc2 <__swbuf_r+0x1a>
 8016d2c:	4621      	mov	r1, r4
 8016d2e:	4628      	mov	r0, r5
 8016d30:	f000 f81e 	bl	8016d70 <__swsetup_r>
 8016d34:	2800      	cmp	r0, #0
 8016d36:	d0cb      	beq.n	8016cd0 <__swbuf_r+0x28>
 8016d38:	f04f 37ff 	mov.w	r7, #4294967295
 8016d3c:	e7ea      	b.n	8016d14 <__swbuf_r+0x6c>
 8016d3e:	bf00      	nop
 8016d40:	080170a0 	.word	0x080170a0
 8016d44:	080170c0 	.word	0x080170c0
 8016d48:	08017080 	.word	0x08017080

08016d4c <_write_r>:
 8016d4c:	b538      	push	{r3, r4, r5, lr}
 8016d4e:	4d07      	ldr	r5, [pc, #28]	; (8016d6c <_write_r+0x20>)
 8016d50:	4604      	mov	r4, r0
 8016d52:	4608      	mov	r0, r1
 8016d54:	4611      	mov	r1, r2
 8016d56:	2200      	movs	r2, #0
 8016d58:	602a      	str	r2, [r5, #0]
 8016d5a:	461a      	mov	r2, r3
 8016d5c:	f7f9 fdbc 	bl	80108d8 <_write>
 8016d60:	1c43      	adds	r3, r0, #1
 8016d62:	d102      	bne.n	8016d6a <_write_r+0x1e>
 8016d64:	682b      	ldr	r3, [r5, #0]
 8016d66:	b103      	cbz	r3, 8016d6a <_write_r+0x1e>
 8016d68:	6023      	str	r3, [r4, #0]
 8016d6a:	bd38      	pop	{r3, r4, r5, pc}
 8016d6c:	200005f4 	.word	0x200005f4

08016d70 <__swsetup_r>:
 8016d70:	4b32      	ldr	r3, [pc, #200]	; (8016e3c <__swsetup_r+0xcc>)
 8016d72:	b570      	push	{r4, r5, r6, lr}
 8016d74:	681d      	ldr	r5, [r3, #0]
 8016d76:	4606      	mov	r6, r0
 8016d78:	460c      	mov	r4, r1
 8016d7a:	b125      	cbz	r5, 8016d86 <__swsetup_r+0x16>
 8016d7c:	69ab      	ldr	r3, [r5, #24]
 8016d7e:	b913      	cbnz	r3, 8016d86 <__swsetup_r+0x16>
 8016d80:	4628      	mov	r0, r5
 8016d82:	f7ff fd41 	bl	8016808 <__sinit>
 8016d86:	4b2e      	ldr	r3, [pc, #184]	; (8016e40 <__swsetup_r+0xd0>)
 8016d88:	429c      	cmp	r4, r3
 8016d8a:	d10f      	bne.n	8016dac <__swsetup_r+0x3c>
 8016d8c:	686c      	ldr	r4, [r5, #4]
 8016d8e:	89a3      	ldrh	r3, [r4, #12]
 8016d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d94:	0719      	lsls	r1, r3, #28
 8016d96:	d42c      	bmi.n	8016df2 <__swsetup_r+0x82>
 8016d98:	06dd      	lsls	r5, r3, #27
 8016d9a:	d411      	bmi.n	8016dc0 <__swsetup_r+0x50>
 8016d9c:	2309      	movs	r3, #9
 8016d9e:	6033      	str	r3, [r6, #0]
 8016da0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016da4:	81a3      	strh	r3, [r4, #12]
 8016da6:	f04f 30ff 	mov.w	r0, #4294967295
 8016daa:	e03e      	b.n	8016e2a <__swsetup_r+0xba>
 8016dac:	4b25      	ldr	r3, [pc, #148]	; (8016e44 <__swsetup_r+0xd4>)
 8016dae:	429c      	cmp	r4, r3
 8016db0:	d101      	bne.n	8016db6 <__swsetup_r+0x46>
 8016db2:	68ac      	ldr	r4, [r5, #8]
 8016db4:	e7eb      	b.n	8016d8e <__swsetup_r+0x1e>
 8016db6:	4b24      	ldr	r3, [pc, #144]	; (8016e48 <__swsetup_r+0xd8>)
 8016db8:	429c      	cmp	r4, r3
 8016dba:	bf08      	it	eq
 8016dbc:	68ec      	ldreq	r4, [r5, #12]
 8016dbe:	e7e6      	b.n	8016d8e <__swsetup_r+0x1e>
 8016dc0:	0758      	lsls	r0, r3, #29
 8016dc2:	d512      	bpl.n	8016dea <__swsetup_r+0x7a>
 8016dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016dc6:	b141      	cbz	r1, 8016dda <__swsetup_r+0x6a>
 8016dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016dcc:	4299      	cmp	r1, r3
 8016dce:	d002      	beq.n	8016dd6 <__swsetup_r+0x66>
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	f7ff fdf5 	bl	80169c0 <_free_r>
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8016dda:	89a3      	ldrh	r3, [r4, #12]
 8016ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016de0:	81a3      	strh	r3, [r4, #12]
 8016de2:	2300      	movs	r3, #0
 8016de4:	6063      	str	r3, [r4, #4]
 8016de6:	6923      	ldr	r3, [r4, #16]
 8016de8:	6023      	str	r3, [r4, #0]
 8016dea:	89a3      	ldrh	r3, [r4, #12]
 8016dec:	f043 0308 	orr.w	r3, r3, #8
 8016df0:	81a3      	strh	r3, [r4, #12]
 8016df2:	6923      	ldr	r3, [r4, #16]
 8016df4:	b94b      	cbnz	r3, 8016e0a <__swsetup_r+0x9a>
 8016df6:	89a3      	ldrh	r3, [r4, #12]
 8016df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e00:	d003      	beq.n	8016e0a <__swsetup_r+0x9a>
 8016e02:	4621      	mov	r1, r4
 8016e04:	4630      	mov	r0, r6
 8016e06:	f000 f867 	bl	8016ed8 <__smakebuf_r>
 8016e0a:	89a0      	ldrh	r0, [r4, #12]
 8016e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e10:	f010 0301 	ands.w	r3, r0, #1
 8016e14:	d00a      	beq.n	8016e2c <__swsetup_r+0xbc>
 8016e16:	2300      	movs	r3, #0
 8016e18:	60a3      	str	r3, [r4, #8]
 8016e1a:	6963      	ldr	r3, [r4, #20]
 8016e1c:	425b      	negs	r3, r3
 8016e1e:	61a3      	str	r3, [r4, #24]
 8016e20:	6923      	ldr	r3, [r4, #16]
 8016e22:	b943      	cbnz	r3, 8016e36 <__swsetup_r+0xc6>
 8016e24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016e28:	d1ba      	bne.n	8016da0 <__swsetup_r+0x30>
 8016e2a:	bd70      	pop	{r4, r5, r6, pc}
 8016e2c:	0781      	lsls	r1, r0, #30
 8016e2e:	bf58      	it	pl
 8016e30:	6963      	ldrpl	r3, [r4, #20]
 8016e32:	60a3      	str	r3, [r4, #8]
 8016e34:	e7f4      	b.n	8016e20 <__swsetup_r+0xb0>
 8016e36:	2000      	movs	r0, #0
 8016e38:	e7f7      	b.n	8016e2a <__swsetup_r+0xba>
 8016e3a:	bf00      	nop
 8016e3c:	20000014 	.word	0x20000014
 8016e40:	080170a0 	.word	0x080170a0
 8016e44:	080170c0 	.word	0x080170c0
 8016e48:	08017080 	.word	0x08017080

08016e4c <_close_r>:
 8016e4c:	b538      	push	{r3, r4, r5, lr}
 8016e4e:	4d06      	ldr	r5, [pc, #24]	; (8016e68 <_close_r+0x1c>)
 8016e50:	2300      	movs	r3, #0
 8016e52:	4604      	mov	r4, r0
 8016e54:	4608      	mov	r0, r1
 8016e56:	602b      	str	r3, [r5, #0]
 8016e58:	f7fa f9eb 	bl	8011232 <_close>
 8016e5c:	1c43      	adds	r3, r0, #1
 8016e5e:	d102      	bne.n	8016e66 <_close_r+0x1a>
 8016e60:	682b      	ldr	r3, [r5, #0]
 8016e62:	b103      	cbz	r3, 8016e66 <_close_r+0x1a>
 8016e64:	6023      	str	r3, [r4, #0]
 8016e66:	bd38      	pop	{r3, r4, r5, pc}
 8016e68:	200005f4 	.word	0x200005f4

08016e6c <_lseek_r>:
 8016e6c:	b538      	push	{r3, r4, r5, lr}
 8016e6e:	4d07      	ldr	r5, [pc, #28]	; (8016e8c <_lseek_r+0x20>)
 8016e70:	4604      	mov	r4, r0
 8016e72:	4608      	mov	r0, r1
 8016e74:	4611      	mov	r1, r2
 8016e76:	2200      	movs	r2, #0
 8016e78:	602a      	str	r2, [r5, #0]
 8016e7a:	461a      	mov	r2, r3
 8016e7c:	f7fa fa00 	bl	8011280 <_lseek>
 8016e80:	1c43      	adds	r3, r0, #1
 8016e82:	d102      	bne.n	8016e8a <_lseek_r+0x1e>
 8016e84:	682b      	ldr	r3, [r5, #0]
 8016e86:	b103      	cbz	r3, 8016e8a <_lseek_r+0x1e>
 8016e88:	6023      	str	r3, [r4, #0]
 8016e8a:	bd38      	pop	{r3, r4, r5, pc}
 8016e8c:	200005f4 	.word	0x200005f4

08016e90 <__swhatbuf_r>:
 8016e90:	b570      	push	{r4, r5, r6, lr}
 8016e92:	460e      	mov	r6, r1
 8016e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e98:	2900      	cmp	r1, #0
 8016e9a:	b096      	sub	sp, #88	; 0x58
 8016e9c:	4614      	mov	r4, r2
 8016e9e:	461d      	mov	r5, r3
 8016ea0:	da07      	bge.n	8016eb2 <__swhatbuf_r+0x22>
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	602b      	str	r3, [r5, #0]
 8016ea6:	89b3      	ldrh	r3, [r6, #12]
 8016ea8:	061a      	lsls	r2, r3, #24
 8016eaa:	d410      	bmi.n	8016ece <__swhatbuf_r+0x3e>
 8016eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016eb0:	e00e      	b.n	8016ed0 <__swhatbuf_r+0x40>
 8016eb2:	466a      	mov	r2, sp
 8016eb4:	f000 f86e 	bl	8016f94 <_fstat_r>
 8016eb8:	2800      	cmp	r0, #0
 8016eba:	dbf2      	blt.n	8016ea2 <__swhatbuf_r+0x12>
 8016ebc:	9a01      	ldr	r2, [sp, #4]
 8016ebe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016ec2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016ec6:	425a      	negs	r2, r3
 8016ec8:	415a      	adcs	r2, r3
 8016eca:	602a      	str	r2, [r5, #0]
 8016ecc:	e7ee      	b.n	8016eac <__swhatbuf_r+0x1c>
 8016ece:	2340      	movs	r3, #64	; 0x40
 8016ed0:	2000      	movs	r0, #0
 8016ed2:	6023      	str	r3, [r4, #0]
 8016ed4:	b016      	add	sp, #88	; 0x58
 8016ed6:	bd70      	pop	{r4, r5, r6, pc}

08016ed8 <__smakebuf_r>:
 8016ed8:	898b      	ldrh	r3, [r1, #12]
 8016eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016edc:	079d      	lsls	r5, r3, #30
 8016ede:	4606      	mov	r6, r0
 8016ee0:	460c      	mov	r4, r1
 8016ee2:	d507      	bpl.n	8016ef4 <__smakebuf_r+0x1c>
 8016ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016ee8:	6023      	str	r3, [r4, #0]
 8016eea:	6123      	str	r3, [r4, #16]
 8016eec:	2301      	movs	r3, #1
 8016eee:	6163      	str	r3, [r4, #20]
 8016ef0:	b002      	add	sp, #8
 8016ef2:	bd70      	pop	{r4, r5, r6, pc}
 8016ef4:	ab01      	add	r3, sp, #4
 8016ef6:	466a      	mov	r2, sp
 8016ef8:	f7ff ffca 	bl	8016e90 <__swhatbuf_r>
 8016efc:	9900      	ldr	r1, [sp, #0]
 8016efe:	4605      	mov	r5, r0
 8016f00:	4630      	mov	r0, r6
 8016f02:	f7ff fdad 	bl	8016a60 <_malloc_r>
 8016f06:	b948      	cbnz	r0, 8016f1c <__smakebuf_r+0x44>
 8016f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f0c:	059a      	lsls	r2, r3, #22
 8016f0e:	d4ef      	bmi.n	8016ef0 <__smakebuf_r+0x18>
 8016f10:	f023 0303 	bic.w	r3, r3, #3
 8016f14:	f043 0302 	orr.w	r3, r3, #2
 8016f18:	81a3      	strh	r3, [r4, #12]
 8016f1a:	e7e3      	b.n	8016ee4 <__smakebuf_r+0xc>
 8016f1c:	4b0d      	ldr	r3, [pc, #52]	; (8016f54 <__smakebuf_r+0x7c>)
 8016f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	6020      	str	r0, [r4, #0]
 8016f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f28:	81a3      	strh	r3, [r4, #12]
 8016f2a:	9b00      	ldr	r3, [sp, #0]
 8016f2c:	6163      	str	r3, [r4, #20]
 8016f2e:	9b01      	ldr	r3, [sp, #4]
 8016f30:	6120      	str	r0, [r4, #16]
 8016f32:	b15b      	cbz	r3, 8016f4c <__smakebuf_r+0x74>
 8016f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f38:	4630      	mov	r0, r6
 8016f3a:	f000 f83d 	bl	8016fb8 <_isatty_r>
 8016f3e:	b128      	cbz	r0, 8016f4c <__smakebuf_r+0x74>
 8016f40:	89a3      	ldrh	r3, [r4, #12]
 8016f42:	f023 0303 	bic.w	r3, r3, #3
 8016f46:	f043 0301 	orr.w	r3, r3, #1
 8016f4a:	81a3      	strh	r3, [r4, #12]
 8016f4c:	89a0      	ldrh	r0, [r4, #12]
 8016f4e:	4305      	orrs	r5, r0
 8016f50:	81a5      	strh	r5, [r4, #12]
 8016f52:	e7cd      	b.n	8016ef0 <__smakebuf_r+0x18>
 8016f54:	080167a1 	.word	0x080167a1

08016f58 <__malloc_lock>:
 8016f58:	4801      	ldr	r0, [pc, #4]	; (8016f60 <__malloc_lock+0x8>)
 8016f5a:	f7ff bd18 	b.w	801698e <__retarget_lock_acquire_recursive>
 8016f5e:	bf00      	nop
 8016f60:	200005ec 	.word	0x200005ec

08016f64 <__malloc_unlock>:
 8016f64:	4801      	ldr	r0, [pc, #4]	; (8016f6c <__malloc_unlock+0x8>)
 8016f66:	f7ff bd13 	b.w	8016990 <__retarget_lock_release_recursive>
 8016f6a:	bf00      	nop
 8016f6c:	200005ec 	.word	0x200005ec

08016f70 <_read_r>:
 8016f70:	b538      	push	{r3, r4, r5, lr}
 8016f72:	4d07      	ldr	r5, [pc, #28]	; (8016f90 <_read_r+0x20>)
 8016f74:	4604      	mov	r4, r0
 8016f76:	4608      	mov	r0, r1
 8016f78:	4611      	mov	r1, r2
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	602a      	str	r2, [r5, #0]
 8016f7e:	461a      	mov	r2, r3
 8016f80:	f7fa f93a 	bl	80111f8 <_read>
 8016f84:	1c43      	adds	r3, r0, #1
 8016f86:	d102      	bne.n	8016f8e <_read_r+0x1e>
 8016f88:	682b      	ldr	r3, [r5, #0]
 8016f8a:	b103      	cbz	r3, 8016f8e <_read_r+0x1e>
 8016f8c:	6023      	str	r3, [r4, #0]
 8016f8e:	bd38      	pop	{r3, r4, r5, pc}
 8016f90:	200005f4 	.word	0x200005f4

08016f94 <_fstat_r>:
 8016f94:	b538      	push	{r3, r4, r5, lr}
 8016f96:	4d07      	ldr	r5, [pc, #28]	; (8016fb4 <_fstat_r+0x20>)
 8016f98:	2300      	movs	r3, #0
 8016f9a:	4604      	mov	r4, r0
 8016f9c:	4608      	mov	r0, r1
 8016f9e:	4611      	mov	r1, r2
 8016fa0:	602b      	str	r3, [r5, #0]
 8016fa2:	f7fa f952 	bl	801124a <_fstat>
 8016fa6:	1c43      	adds	r3, r0, #1
 8016fa8:	d102      	bne.n	8016fb0 <_fstat_r+0x1c>
 8016faa:	682b      	ldr	r3, [r5, #0]
 8016fac:	b103      	cbz	r3, 8016fb0 <_fstat_r+0x1c>
 8016fae:	6023      	str	r3, [r4, #0]
 8016fb0:	bd38      	pop	{r3, r4, r5, pc}
 8016fb2:	bf00      	nop
 8016fb4:	200005f4 	.word	0x200005f4

08016fb8 <_isatty_r>:
 8016fb8:	b538      	push	{r3, r4, r5, lr}
 8016fba:	4d06      	ldr	r5, [pc, #24]	; (8016fd4 <_isatty_r+0x1c>)
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	4604      	mov	r4, r0
 8016fc0:	4608      	mov	r0, r1
 8016fc2:	602b      	str	r3, [r5, #0]
 8016fc4:	f7fa f951 	bl	801126a <_isatty>
 8016fc8:	1c43      	adds	r3, r0, #1
 8016fca:	d102      	bne.n	8016fd2 <_isatty_r+0x1a>
 8016fcc:	682b      	ldr	r3, [r5, #0]
 8016fce:	b103      	cbz	r3, 8016fd2 <_isatty_r+0x1a>
 8016fd0:	6023      	str	r3, [r4, #0]
 8016fd2:	bd38      	pop	{r3, r4, r5, pc}
 8016fd4:	200005f4 	.word	0x200005f4

08016fd8 <_init>:
 8016fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fda:	bf00      	nop
 8016fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fde:	bc08      	pop	{r3}
 8016fe0:	469e      	mov	lr, r3
 8016fe2:	4770      	bx	lr

08016fe4 <_fini>:
 8016fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fe6:	bf00      	nop
 8016fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fea:	bc08      	pop	{r3}
 8016fec:	469e      	mov	lr, r3
 8016fee:	4770      	bx	lr
