
BTtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f00  08010190  08010190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08018090  08018090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080182d8  080182d8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080182d8  080182d8  000182d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080182e0  080182e0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080182e0  080182e0  000182e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080182e4  080182e4  000182e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080182e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000080  08018368  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08018368  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000266e4  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043a2  00000000  00000000  00046794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0004ab38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  0004c270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dcb3  00000000  00000000  0004d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba27  00000000  00000000  0007b4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a482  00000000  00000000  00096f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a138c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000690c  00000000  00000000  001a13e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010190 <__do_global_dtors_aux>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4c05      	ldr	r4, [pc, #20]	; (80101a8 <__do_global_dtors_aux+0x18>)
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	b933      	cbnz	r3, 80101a6 <__do_global_dtors_aux+0x16>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__do_global_dtors_aux+0x1c>)
 801019a:	b113      	cbz	r3, 80101a2 <__do_global_dtors_aux+0x12>
 801019c:	4804      	ldr	r0, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x20>)
 801019e:	f3af 8000 	nop.w
 80101a2:	2301      	movs	r3, #1
 80101a4:	7023      	strb	r3, [r4, #0]
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	20000080 	.word	0x20000080
 80101ac:	00000000 	.word	0x00000000
 80101b0:	08018078 	.word	0x08018078

080101b4 <frame_dummy>:
 80101b4:	b508      	push	{r3, lr}
 80101b6:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <frame_dummy+0x10>)
 80101b8:	b11b      	cbz	r3, 80101c2 <frame_dummy+0xe>
 80101ba:	4903      	ldr	r1, [pc, #12]	; (80101c8 <frame_dummy+0x14>)
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <frame_dummy+0x18>)
 80101be:	f3af 8000 	nop.w
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	00000000 	.word	0x00000000
 80101c8:	20000084 	.word	0x20000084
 80101cc:	08018078 	.word	0x08018078

080101d0 <strlen>:
 80101d0:	4603      	mov	r3, r0
 80101d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	d1fb      	bne.n	80101d2 <strlen+0x2>
 80101da:	1a18      	subs	r0, r3, r0
 80101dc:	3801      	subs	r0, #1
 80101de:	4770      	bx	lr

080101e0 <memchr>:
 80101e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80101e4:	2a10      	cmp	r2, #16
 80101e6:	db2b      	blt.n	8010240 <memchr+0x60>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	d008      	beq.n	8010200 <memchr+0x20>
 80101ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101f2:	3a01      	subs	r2, #1
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d02d      	beq.n	8010254 <memchr+0x74>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	b342      	cbz	r2, 8010250 <memchr+0x70>
 80101fe:	d1f6      	bne.n	80101ee <memchr+0xe>
 8010200:	b4f0      	push	{r4, r5, r6, r7}
 8010202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801020a:	f022 0407 	bic.w	r4, r2, #7
 801020e:	f07f 0700 	mvns.w	r7, #0
 8010212:	2300      	movs	r3, #0
 8010214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010218:	3c08      	subs	r4, #8
 801021a:	ea85 0501 	eor.w	r5, r5, r1
 801021e:	ea86 0601 	eor.w	r6, r6, r1
 8010222:	fa85 f547 	uadd8	r5, r5, r7
 8010226:	faa3 f587 	sel	r5, r3, r7
 801022a:	fa86 f647 	uadd8	r6, r6, r7
 801022e:	faa5 f687 	sel	r6, r5, r7
 8010232:	b98e      	cbnz	r6, 8010258 <memchr+0x78>
 8010234:	d1ee      	bne.n	8010214 <memchr+0x34>
 8010236:	bcf0      	pop	{r4, r5, r6, r7}
 8010238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801023c:	f002 0207 	and.w	r2, r2, #7
 8010240:	b132      	cbz	r2, 8010250 <memchr+0x70>
 8010242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010246:	3a01      	subs	r2, #1
 8010248:	ea83 0301 	eor.w	r3, r3, r1
 801024c:	b113      	cbz	r3, 8010254 <memchr+0x74>
 801024e:	d1f8      	bne.n	8010242 <memchr+0x62>
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	3801      	subs	r0, #1
 8010256:	4770      	bx	lr
 8010258:	2d00      	cmp	r5, #0
 801025a:	bf06      	itte	eq
 801025c:	4635      	moveq	r5, r6
 801025e:	3803      	subeq	r0, #3
 8010260:	3807      	subne	r0, #7
 8010262:	f015 0f01 	tst.w	r5, #1
 8010266:	d107      	bne.n	8010278 <memchr+0x98>
 8010268:	3001      	adds	r0, #1
 801026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801026e:	bf02      	ittt	eq
 8010270:	3001      	addeq	r0, #1
 8010272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010276:	3001      	addeq	r0, #1
 8010278:	bcf0      	pop	{r4, r5, r6, r7}
 801027a:	3801      	subs	r0, #1
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <__aeabi_uldivmod>:
 8010280:	b953      	cbnz	r3, 8010298 <__aeabi_uldivmod+0x18>
 8010282:	b94a      	cbnz	r2, 8010298 <__aeabi_uldivmod+0x18>
 8010284:	2900      	cmp	r1, #0
 8010286:	bf08      	it	eq
 8010288:	2800      	cmpeq	r0, #0
 801028a:	bf1c      	itt	ne
 801028c:	f04f 31ff 	movne.w	r1, #4294967295
 8010290:	f04f 30ff 	movne.w	r0, #4294967295
 8010294:	f000 b96e 	b.w	8010574 <__aeabi_idiv0>
 8010298:	f1ad 0c08 	sub.w	ip, sp, #8
 801029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80102a0:	f000 f806 	bl	80102b0 <__udivmoddi4>
 80102a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80102a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102ac:	b004      	add	sp, #16
 80102ae:	4770      	bx	lr

080102b0 <__udivmoddi4>:
 80102b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b4:	9d08      	ldr	r5, [sp, #32]
 80102b6:	4604      	mov	r4, r0
 80102b8:	468c      	mov	ip, r1
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	f040 8083 	bne.w	80103c6 <__udivmoddi4+0x116>
 80102c0:	428a      	cmp	r2, r1
 80102c2:	4617      	mov	r7, r2
 80102c4:	d947      	bls.n	8010356 <__udivmoddi4+0xa6>
 80102c6:	fab2 f282 	clz	r2, r2
 80102ca:	b142      	cbz	r2, 80102de <__udivmoddi4+0x2e>
 80102cc:	f1c2 0020 	rsb	r0, r2, #32
 80102d0:	fa24 f000 	lsr.w	r0, r4, r0
 80102d4:	4091      	lsls	r1, r2
 80102d6:	4097      	lsls	r7, r2
 80102d8:	ea40 0c01 	orr.w	ip, r0, r1
 80102dc:	4094      	lsls	r4, r2
 80102de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80102e2:	0c23      	lsrs	r3, r4, #16
 80102e4:	fbbc f6f8 	udiv	r6, ip, r8
 80102e8:	fa1f fe87 	uxth.w	lr, r7
 80102ec:	fb08 c116 	mls	r1, r8, r6, ip
 80102f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80102f4:	fb06 f10e 	mul.w	r1, r6, lr
 80102f8:	4299      	cmp	r1, r3
 80102fa:	d909      	bls.n	8010310 <__udivmoddi4+0x60>
 80102fc:	18fb      	adds	r3, r7, r3
 80102fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8010302:	f080 8119 	bcs.w	8010538 <__udivmoddi4+0x288>
 8010306:	4299      	cmp	r1, r3
 8010308:	f240 8116 	bls.w	8010538 <__udivmoddi4+0x288>
 801030c:	3e02      	subs	r6, #2
 801030e:	443b      	add	r3, r7
 8010310:	1a5b      	subs	r3, r3, r1
 8010312:	b2a4      	uxth	r4, r4
 8010314:	fbb3 f0f8 	udiv	r0, r3, r8
 8010318:	fb08 3310 	mls	r3, r8, r0, r3
 801031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010320:	fb00 fe0e 	mul.w	lr, r0, lr
 8010324:	45a6      	cmp	lr, r4
 8010326:	d909      	bls.n	801033c <__udivmoddi4+0x8c>
 8010328:	193c      	adds	r4, r7, r4
 801032a:	f100 33ff 	add.w	r3, r0, #4294967295
 801032e:	f080 8105 	bcs.w	801053c <__udivmoddi4+0x28c>
 8010332:	45a6      	cmp	lr, r4
 8010334:	f240 8102 	bls.w	801053c <__udivmoddi4+0x28c>
 8010338:	3802      	subs	r0, #2
 801033a:	443c      	add	r4, r7
 801033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010340:	eba4 040e 	sub.w	r4, r4, lr
 8010344:	2600      	movs	r6, #0
 8010346:	b11d      	cbz	r5, 8010350 <__udivmoddi4+0xa0>
 8010348:	40d4      	lsrs	r4, r2
 801034a:	2300      	movs	r3, #0
 801034c:	e9c5 4300 	strd	r4, r3, [r5]
 8010350:	4631      	mov	r1, r6
 8010352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010356:	b902      	cbnz	r2, 801035a <__udivmoddi4+0xaa>
 8010358:	deff      	udf	#255	; 0xff
 801035a:	fab2 f282 	clz	r2, r2
 801035e:	2a00      	cmp	r2, #0
 8010360:	d150      	bne.n	8010404 <__udivmoddi4+0x154>
 8010362:	1bcb      	subs	r3, r1, r7
 8010364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010368:	fa1f f887 	uxth.w	r8, r7
 801036c:	2601      	movs	r6, #1
 801036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8010372:	0c21      	lsrs	r1, r4, #16
 8010374:	fb0e 331c 	mls	r3, lr, ip, r3
 8010378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801037c:	fb08 f30c 	mul.w	r3, r8, ip
 8010380:	428b      	cmp	r3, r1
 8010382:	d907      	bls.n	8010394 <__udivmoddi4+0xe4>
 8010384:	1879      	adds	r1, r7, r1
 8010386:	f10c 30ff 	add.w	r0, ip, #4294967295
 801038a:	d202      	bcs.n	8010392 <__udivmoddi4+0xe2>
 801038c:	428b      	cmp	r3, r1
 801038e:	f200 80e9 	bhi.w	8010564 <__udivmoddi4+0x2b4>
 8010392:	4684      	mov	ip, r0
 8010394:	1ac9      	subs	r1, r1, r3
 8010396:	b2a3      	uxth	r3, r4
 8010398:	fbb1 f0fe 	udiv	r0, r1, lr
 801039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80103a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80103a4:	fb08 f800 	mul.w	r8, r8, r0
 80103a8:	45a0      	cmp	r8, r4
 80103aa:	d907      	bls.n	80103bc <__udivmoddi4+0x10c>
 80103ac:	193c      	adds	r4, r7, r4
 80103ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80103b2:	d202      	bcs.n	80103ba <__udivmoddi4+0x10a>
 80103b4:	45a0      	cmp	r8, r4
 80103b6:	f200 80d9 	bhi.w	801056c <__udivmoddi4+0x2bc>
 80103ba:	4618      	mov	r0, r3
 80103bc:	eba4 0408 	sub.w	r4, r4, r8
 80103c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80103c4:	e7bf      	b.n	8010346 <__udivmoddi4+0x96>
 80103c6:	428b      	cmp	r3, r1
 80103c8:	d909      	bls.n	80103de <__udivmoddi4+0x12e>
 80103ca:	2d00      	cmp	r5, #0
 80103cc:	f000 80b1 	beq.w	8010532 <__udivmoddi4+0x282>
 80103d0:	2600      	movs	r6, #0
 80103d2:	e9c5 0100 	strd	r0, r1, [r5]
 80103d6:	4630      	mov	r0, r6
 80103d8:	4631      	mov	r1, r6
 80103da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103de:	fab3 f683 	clz	r6, r3
 80103e2:	2e00      	cmp	r6, #0
 80103e4:	d14a      	bne.n	801047c <__udivmoddi4+0x1cc>
 80103e6:	428b      	cmp	r3, r1
 80103e8:	d302      	bcc.n	80103f0 <__udivmoddi4+0x140>
 80103ea:	4282      	cmp	r2, r0
 80103ec:	f200 80b8 	bhi.w	8010560 <__udivmoddi4+0x2b0>
 80103f0:	1a84      	subs	r4, r0, r2
 80103f2:	eb61 0103 	sbc.w	r1, r1, r3
 80103f6:	2001      	movs	r0, #1
 80103f8:	468c      	mov	ip, r1
 80103fa:	2d00      	cmp	r5, #0
 80103fc:	d0a8      	beq.n	8010350 <__udivmoddi4+0xa0>
 80103fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8010402:	e7a5      	b.n	8010350 <__udivmoddi4+0xa0>
 8010404:	f1c2 0320 	rsb	r3, r2, #32
 8010408:	fa20 f603 	lsr.w	r6, r0, r3
 801040c:	4097      	lsls	r7, r2
 801040e:	fa01 f002 	lsl.w	r0, r1, r2
 8010412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010416:	40d9      	lsrs	r1, r3
 8010418:	4330      	orrs	r0, r6
 801041a:	0c03      	lsrs	r3, r0, #16
 801041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8010420:	fa1f f887 	uxth.w	r8, r7
 8010424:	fb0e 1116 	mls	r1, lr, r6, r1
 8010428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801042c:	fb06 f108 	mul.w	r1, r6, r8
 8010430:	4299      	cmp	r1, r3
 8010432:	fa04 f402 	lsl.w	r4, r4, r2
 8010436:	d909      	bls.n	801044c <__udivmoddi4+0x19c>
 8010438:	18fb      	adds	r3, r7, r3
 801043a:	f106 3cff 	add.w	ip, r6, #4294967295
 801043e:	f080 808d 	bcs.w	801055c <__udivmoddi4+0x2ac>
 8010442:	4299      	cmp	r1, r3
 8010444:	f240 808a 	bls.w	801055c <__udivmoddi4+0x2ac>
 8010448:	3e02      	subs	r6, #2
 801044a:	443b      	add	r3, r7
 801044c:	1a5b      	subs	r3, r3, r1
 801044e:	b281      	uxth	r1, r0
 8010450:	fbb3 f0fe 	udiv	r0, r3, lr
 8010454:	fb0e 3310 	mls	r3, lr, r0, r3
 8010458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801045c:	fb00 f308 	mul.w	r3, r0, r8
 8010460:	428b      	cmp	r3, r1
 8010462:	d907      	bls.n	8010474 <__udivmoddi4+0x1c4>
 8010464:	1879      	adds	r1, r7, r1
 8010466:	f100 3cff 	add.w	ip, r0, #4294967295
 801046a:	d273      	bcs.n	8010554 <__udivmoddi4+0x2a4>
 801046c:	428b      	cmp	r3, r1
 801046e:	d971      	bls.n	8010554 <__udivmoddi4+0x2a4>
 8010470:	3802      	subs	r0, #2
 8010472:	4439      	add	r1, r7
 8010474:	1acb      	subs	r3, r1, r3
 8010476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 801047a:	e778      	b.n	801036e <__udivmoddi4+0xbe>
 801047c:	f1c6 0c20 	rsb	ip, r6, #32
 8010480:	fa03 f406 	lsl.w	r4, r3, r6
 8010484:	fa22 f30c 	lsr.w	r3, r2, ip
 8010488:	431c      	orrs	r4, r3
 801048a:	fa20 f70c 	lsr.w	r7, r0, ip
 801048e:	fa01 f306 	lsl.w	r3, r1, r6
 8010492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8010496:	fa21 f10c 	lsr.w	r1, r1, ip
 801049a:	431f      	orrs	r7, r3
 801049c:	0c3b      	lsrs	r3, r7, #16
 801049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80104a2:	fa1f f884 	uxth.w	r8, r4
 80104a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80104aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80104ae:	fb09 fa08 	mul.w	sl, r9, r8
 80104b2:	458a      	cmp	sl, r1
 80104b4:	fa02 f206 	lsl.w	r2, r2, r6
 80104b8:	fa00 f306 	lsl.w	r3, r0, r6
 80104bc:	d908      	bls.n	80104d0 <__udivmoddi4+0x220>
 80104be:	1861      	adds	r1, r4, r1
 80104c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80104c4:	d248      	bcs.n	8010558 <__udivmoddi4+0x2a8>
 80104c6:	458a      	cmp	sl, r1
 80104c8:	d946      	bls.n	8010558 <__udivmoddi4+0x2a8>
 80104ca:	f1a9 0902 	sub.w	r9, r9, #2
 80104ce:	4421      	add	r1, r4
 80104d0:	eba1 010a 	sub.w	r1, r1, sl
 80104d4:	b2bf      	uxth	r7, r7
 80104d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80104da:	fb0e 1110 	mls	r1, lr, r0, r1
 80104de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80104e2:	fb00 f808 	mul.w	r8, r0, r8
 80104e6:	45b8      	cmp	r8, r7
 80104e8:	d907      	bls.n	80104fa <__udivmoddi4+0x24a>
 80104ea:	19e7      	adds	r7, r4, r7
 80104ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80104f0:	d22e      	bcs.n	8010550 <__udivmoddi4+0x2a0>
 80104f2:	45b8      	cmp	r8, r7
 80104f4:	d92c      	bls.n	8010550 <__udivmoddi4+0x2a0>
 80104f6:	3802      	subs	r0, #2
 80104f8:	4427      	add	r7, r4
 80104fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80104fe:	eba7 0708 	sub.w	r7, r7, r8
 8010502:	fba0 8902 	umull	r8, r9, r0, r2
 8010506:	454f      	cmp	r7, r9
 8010508:	46c6      	mov	lr, r8
 801050a:	4649      	mov	r1, r9
 801050c:	d31a      	bcc.n	8010544 <__udivmoddi4+0x294>
 801050e:	d017      	beq.n	8010540 <__udivmoddi4+0x290>
 8010510:	b15d      	cbz	r5, 801052a <__udivmoddi4+0x27a>
 8010512:	ebb3 020e 	subs.w	r2, r3, lr
 8010516:	eb67 0701 	sbc.w	r7, r7, r1
 801051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 801051e:	40f2      	lsrs	r2, r6
 8010520:	ea4c 0202 	orr.w	r2, ip, r2
 8010524:	40f7      	lsrs	r7, r6
 8010526:	e9c5 2700 	strd	r2, r7, [r5]
 801052a:	2600      	movs	r6, #0
 801052c:	4631      	mov	r1, r6
 801052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010532:	462e      	mov	r6, r5
 8010534:	4628      	mov	r0, r5
 8010536:	e70b      	b.n	8010350 <__udivmoddi4+0xa0>
 8010538:	4606      	mov	r6, r0
 801053a:	e6e9      	b.n	8010310 <__udivmoddi4+0x60>
 801053c:	4618      	mov	r0, r3
 801053e:	e6fd      	b.n	801033c <__udivmoddi4+0x8c>
 8010540:	4543      	cmp	r3, r8
 8010542:	d2e5      	bcs.n	8010510 <__udivmoddi4+0x260>
 8010544:	ebb8 0e02 	subs.w	lr, r8, r2
 8010548:	eb69 0104 	sbc.w	r1, r9, r4
 801054c:	3801      	subs	r0, #1
 801054e:	e7df      	b.n	8010510 <__udivmoddi4+0x260>
 8010550:	4608      	mov	r0, r1
 8010552:	e7d2      	b.n	80104fa <__udivmoddi4+0x24a>
 8010554:	4660      	mov	r0, ip
 8010556:	e78d      	b.n	8010474 <__udivmoddi4+0x1c4>
 8010558:	4681      	mov	r9, r0
 801055a:	e7b9      	b.n	80104d0 <__udivmoddi4+0x220>
 801055c:	4666      	mov	r6, ip
 801055e:	e775      	b.n	801044c <__udivmoddi4+0x19c>
 8010560:	4630      	mov	r0, r6
 8010562:	e74a      	b.n	80103fa <__udivmoddi4+0x14a>
 8010564:	f1ac 0c02 	sub.w	ip, ip, #2
 8010568:	4439      	add	r1, r7
 801056a:	e713      	b.n	8010394 <__udivmoddi4+0xe4>
 801056c:	3802      	subs	r0, #2
 801056e:	443c      	add	r4, r7
 8010570:	e724      	b.n	80103bc <__udivmoddi4+0x10c>
 8010572:	bf00      	nop

08010574 <__aeabi_idiv0>:
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop

08010578 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8010578:	b5b0      	push	{r4, r5, r7, lr}
 801057a:	b092      	sub	sp, #72	; 0x48
 801057c:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN SV */

	const char *name = "test";
 801057e:	4b7a      	ldr	r3, [pc, #488]	; (8010768 <MX_BlueNRG_MS_Init+0x1f0>)
 8010580:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t POTATO_UUID[] = {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xAA,0xBB,0xCC,0xDD,0xEE,0xFF,0x00};
 8010582:	4b7a      	ldr	r3, [pc, #488]	; (801076c <MX_BlueNRG_MS_Init+0x1f4>)
 8010584:	f107 041c 	add.w	r4, r7, #28
 8010588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801058a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t SERVER_BDADDR[] = {0x01,0x02,0x03,0x04,0x05,0x06};
 801058e:	4a78      	ldr	r2, [pc, #480]	; (8010770 <MX_BlueNRG_MS_Init+0x1f8>)
 8010590:	f107 0314 	add.w	r3, r7, #20
 8010594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010598:	6018      	str	r0, [r3, #0]
 801059a:	3304      	adds	r3, #4
 801059c:	8019      	strh	r1, [r3, #0]
	uint8_t bdaddr[BDADDR_SIZE];

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

	hci_init(user_notify,NULL);
 801059e:	2100      	movs	r1, #0
 80105a0:	4874      	ldr	r0, [pc, #464]	; (8010774 <MX_BlueNRG_MS_Init+0x1fc>)
 80105a2:	f006 f9df 	bl	8016964 <hci_init>
	hci_reset();
 80105a6:	f006 f921 	bl	80167ec <hci_reset>
	HAL_Delay(200);
 80105aa:	20c8      	movs	r0, #200	; 0xc8
 80105ac:	f001 fbb0 	bl	8011d10 <HAL_Delay>

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80105b0:	f107 030c 	add.w	r3, r7, #12
 80105b4:	f107 0214 	add.w	r2, r7, #20
 80105b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105bc:	6018      	str	r0, [r3, #0]
 80105be:	3304      	adds	r3, #4
 80105c0:	8019      	strh	r1, [r3, #0]

	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 80105c2:	f107 030c 	add.w	r3, r7, #12
 80105c6:	461a      	mov	r2, r3
 80105c8:	2106      	movs	r1, #6
 80105ca:	2000      	movs	r0, #0
 80105cc:	f006 f8a7 	bl	801671e <aci_hal_write_config_data>

	aci_gatt_init();
 80105d0:	f005 fe92 	bl	80162f8 <aci_gatt_init>

	aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80105d4:	f107 020a 	add.w	r2, r7, #10
 80105d8:	1dbb      	adds	r3, r7, #6
 80105da:	9301      	str	r3, [sp, #4]
 80105dc:	f107 0308 	add.w	r3, r7, #8
 80105e0:	9300      	str	r3, [sp, #0]
 80105e2:	4613      	mov	r3, r2
 80105e4:	2207      	movs	r2, #7
 80105e6:	2100      	movs	r1, #0
 80105e8:	2001      	movs	r0, #1
 80105ea:	f005 fd46 	bl	801607a <aci_gap_init_IDB05A1>

	aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), name);
 80105ee:	897c      	ldrh	r4, [r7, #10]
 80105f0:	893d      	ldrh	r5, [r7, #8]
 80105f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105f4:	f7ff fdec 	bl	80101d0 <strlen>
 80105f8:	4603      	mov	r3, r0
 80105fa:	b2da      	uxtb	r2, r3
 80105fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	4613      	mov	r3, r2
 8010602:	2200      	movs	r2, #0
 8010604:	4629      	mov	r1, r5
 8010606:	4620      	mov	r0, r4
 8010608:	f005 fff7 	bl	80165fa <aci_gatt_update_char_value>

	aci_gatt_add_serv(UUID_TYPE_128, POTATO_UUID, PRIMARY_SERVICE, 30, &(POTATO_Context.POTATO_Svc_Hdle));
 801060c:	f107 011c 	add.w	r1, r7, #28
 8010610:	4b59      	ldr	r3, [pc, #356]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 8010612:	9300      	str	r3, [sp, #0]
 8010614:	231e      	movs	r3, #30
 8010616:	2201      	movs	r2, #1
 8010618:	2002      	movs	r0, #2
 801061a:	f005 fe90 	bl	801633e <aci_gatt_add_serv>

	POTATO_UUID[15] = 0x01;
 801061e:	2301      	movs	r3, #1
 8010620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 31,
 8010624:	4b54      	ldr	r3, [pc, #336]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 8010626:	8818      	ldrh	r0, [r3, #0]
 8010628:	f107 021c 	add.w	r2, r7, #28
 801062c:	4b53      	ldr	r3, [pc, #332]	; (801077c <MX_BlueNRG_MS_Init+0x204>)
 801062e:	9305      	str	r3, [sp, #20]
 8010630:	2301      	movs	r3, #1
 8010632:	9304      	str	r3, [sp, #16]
 8010634:	230a      	movs	r3, #10
 8010636:	9303      	str	r3, [sp, #12]
 8010638:	2301      	movs	r3, #1
 801063a:	9302      	str	r3, [sp, #8]
 801063c:	2300      	movs	r3, #0
 801063e:	9301      	str	r3, [sp, #4]
 8010640:	2306      	movs	r3, #6
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	231f      	movs	r3, #31
 8010646:	2102      	movs	r1, #2
 8010648:	f005 ff05 	bl	8016456 <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_SSID_Hdle));

	POTATO_UUID[15] = 0x02;
 801064c:	2302      	movs	r3, #2
 801064e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 31,
 8010652:	4b49      	ldr	r3, [pc, #292]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 8010654:	8818      	ldrh	r0, [r3, #0]
 8010656:	f107 021c 	add.w	r2, r7, #28
 801065a:	4b49      	ldr	r3, [pc, #292]	; (8010780 <MX_BlueNRG_MS_Init+0x208>)
 801065c:	9305      	str	r3, [sp, #20]
 801065e:	2301      	movs	r3, #1
 8010660:	9304      	str	r3, [sp, #16]
 8010662:	230a      	movs	r3, #10
 8010664:	9303      	str	r3, [sp, #12]
 8010666:	2301      	movs	r3, #1
 8010668:	9302      	str	r3, [sp, #8]
 801066a:	2300      	movs	r3, #0
 801066c:	9301      	str	r3, [sp, #4]
 801066e:	2306      	movs	r3, #6
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	231f      	movs	r3, #31
 8010674:	2102      	movs	r1, #2
 8010676:	f005 feee 	bl	8016456 <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_PW_Hdle));

	POTATO_UUID[15] = 0x03;
 801067a:	2303      	movs	r3, #3
 801067c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 31,
 8010680:	4b3d      	ldr	r3, [pc, #244]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 8010682:	8818      	ldrh	r0, [r3, #0]
 8010684:	f107 021c 	add.w	r2, r7, #28
 8010688:	4b3e      	ldr	r3, [pc, #248]	; (8010784 <MX_BlueNRG_MS_Init+0x20c>)
 801068a:	9305      	str	r3, [sp, #20]
 801068c:	2301      	movs	r3, #1
 801068e:	9304      	str	r3, [sp, #16]
 8010690:	230a      	movs	r3, #10
 8010692:	9303      	str	r3, [sp, #12]
 8010694:	2301      	movs	r3, #1
 8010696:	9302      	str	r3, [sp, #8]
 8010698:	2300      	movs	r3, #0
 801069a:	9301      	str	r3, [sp, #4]
 801069c:	2306      	movs	r3, #6
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	231f      	movs	r3, #31
 80106a2:	2102      	movs	r1, #2
 80106a4:	f005 fed7 	bl	8016456 <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_NAME_Hdle));

	POTATO_UUID[15] = 0x04;
 80106a8:	2304      	movs	r3, #4
 80106aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 4,
 80106ae:	4b32      	ldr	r3, [pc, #200]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 80106b0:	8818      	ldrh	r0, [r3, #0]
 80106b2:	f107 021c 	add.w	r2, r7, #28
 80106b6:	4b34      	ldr	r3, [pc, #208]	; (8010788 <MX_BlueNRG_MS_Init+0x210>)
 80106b8:	9305      	str	r3, [sp, #20]
 80106ba:	2301      	movs	r3, #1
 80106bc:	9304      	str	r3, [sp, #16]
 80106be:	230a      	movs	r3, #10
 80106c0:	9303      	str	r3, [sp, #12]
 80106c2:	2301      	movs	r3, #1
 80106c4:	9302      	str	r3, [sp, #8]
 80106c6:	2300      	movs	r3, #0
 80106c8:	9301      	str	r3, [sp, #4]
 80106ca:	2306      	movs	r3, #6
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	2304      	movs	r3, #4
 80106d0:	2102      	movs	r1, #2
 80106d2:	f005 fec0 	bl	8016456 <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_IP_Hdle));

	POTATO_UUID[15] = 0x05;
 80106d6:	2305      	movs	r3, #5
 80106d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 1,
 80106dc:	4b26      	ldr	r3, [pc, #152]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 80106de:	8818      	ldrh	r0, [r3, #0]
 80106e0:	f107 021c 	add.w	r2, r7, #28
 80106e4:	4b29      	ldr	r3, [pc, #164]	; (801078c <MX_BlueNRG_MS_Init+0x214>)
 80106e6:	9305      	str	r3, [sp, #20]
 80106e8:	2301      	movs	r3, #1
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	230a      	movs	r3, #10
 80106ee:	9303      	str	r3, [sp, #12]
 80106f0:	2301      	movs	r3, #1
 80106f2:	9302      	str	r3, [sp, #8]
 80106f4:	2300      	movs	r3, #0
 80106f6:	9301      	str	r3, [sp, #4]
 80106f8:	2306      	movs	r3, #6
 80106fa:	9300      	str	r3, [sp, #0]
 80106fc:	2301      	movs	r3, #1
 80106fe:	2102      	movs	r1, #2
 8010700:	f005 fea9 	bl	8016456 <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_OP_Hdle));

	POTATO_UUID[15] = 0x06;
 8010704:	2306      	movs	r3, #6
 8010706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 2,
 801070a:	4b1b      	ldr	r3, [pc, #108]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 801070c:	8818      	ldrh	r0, [r3, #0]
 801070e:	f107 021c 	add.w	r2, r7, #28
 8010712:	4b1f      	ldr	r3, [pc, #124]	; (8010790 <MX_BlueNRG_MS_Init+0x218>)
 8010714:	9305      	str	r3, [sp, #20]
 8010716:	2301      	movs	r3, #1
 8010718:	9304      	str	r3, [sp, #16]
 801071a:	230a      	movs	r3, #10
 801071c:	9303      	str	r3, [sp, #12]
 801071e:	2301      	movs	r3, #1
 8010720:	9302      	str	r3, [sp, #8]
 8010722:	2300      	movs	r3, #0
 8010724:	9301      	str	r3, [sp, #4]
 8010726:	2306      	movs	r3, #6
 8010728:	9300      	str	r3, [sp, #0]
 801072a:	2302      	movs	r3, #2
 801072c:	2102      	movs	r1, #2
 801072e:	f005 fe92 	bl	8016456 <aci_gatt_add_char>
					  CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
					  ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(POTATO_Context.POTATO_Save_Hdle));

	POTATO_UUID[15] = 0x07;
 8010732:	2307      	movs	r3, #7
 8010734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	aci_gatt_add_char(POTATO_Context.POTATO_Svc_Hdle, UUID_TYPE_128, POTATO_UUID, 5,
 8010738:	4b0f      	ldr	r3, [pc, #60]	; (8010778 <MX_BlueNRG_MS_Init+0x200>)
 801073a:	8818      	ldrh	r0, [r3, #0]
 801073c:	f107 021c 	add.w	r2, r7, #28
 8010740:	4b14      	ldr	r3, [pc, #80]	; (8010794 <MX_BlueNRG_MS_Init+0x21c>)
 8010742:	9305      	str	r3, [sp, #20]
 8010744:	2301      	movs	r3, #1
 8010746:	9304      	str	r3, [sp, #16]
 8010748:	230a      	movs	r3, #10
 801074a:	9303      	str	r3, [sp, #12]
 801074c:	2304      	movs	r3, #4
 801074e:	9302      	str	r3, [sp, #8]
 8010750:	2300      	movs	r3, #0
 8010752:	9301      	str	r3, [sp, #4]
 8010754:	2306      	movs	r3, #6
 8010756:	9300      	str	r3, [sp, #0]
 8010758:	2305      	movs	r3, #5
 801075a:	2102      	movs	r1, #2
 801075c:	f005 fe7b 	bl	8016456 <aci_gatt_add_char>


  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8010760:	bf00      	nop
 8010762:	3730      	adds	r7, #48	; 0x30
 8010764:	46bd      	mov	sp, r7
 8010766:	bdb0      	pop	{r4, r5, r7, pc}
 8010768:	08018090 	.word	0x08018090
 801076c:	08018098 	.word	0x08018098
 8010770:	080180a8 	.word	0x080180a8
 8010774:	080109a9 	.word	0x080109a9
 8010778:	20000498 	.word	0x20000498
 801077c:	2000049a 	.word	0x2000049a
 8010780:	2000049c 	.word	0x2000049c
 8010784:	2000049e 	.word	0x2000049e
 8010788:	200004a0 	.word	0x200004a0
 801078c:	200004a2 	.word	0x200004a2
 8010790:	200004a4 	.word	0x200004a4
 8010794:	200004a6 	.word	0x200004a6

08010798 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b08a      	sub	sp, #40	; 0x28
 801079c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

	tBleStatus ret;

	ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 801079e:	2300      	movs	r3, #0
 80107a0:	9306      	str	r3, [sp, #24]
 80107a2:	2300      	movs	r3, #0
 80107a4:	9305      	str	r3, [sp, #20]
 80107a6:	2300      	movs	r3, #0
 80107a8:	9304      	str	r3, [sp, #16]
 80107aa:	2300      	movs	r3, #0
 80107ac:	9303      	str	r3, [sp, #12]
 80107ae:	4b0f      	ldr	r3, [pc, #60]	; (80107ec <MX_BlueNRG_MS_Process+0x54>)
 80107b0:	9302      	str	r3, [sp, #8]
 80107b2:	2308      	movs	r3, #8
 80107b4:	9301      	str	r3, [sp, #4]
 80107b6:	2300      	movs	r3, #0
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	2300      	movs	r3, #0
 80107bc:	2200      	movs	r2, #0
 80107be:	2100      	movs	r1, #0
 80107c0:	2000      	movs	r0, #0
 80107c2:	f005 fcaa 	bl	801611a <aci_gap_set_discoverable>
 80107c6:	4603      	mov	r3, r0
 80107c8:	71fb      	strb	r3, [r7, #7]


	if (SPIwasLocked == 1)
 80107ca:	4b09      	ldr	r3, [pc, #36]	; (80107f0 <MX_BlueNRG_MS_Process+0x58>)
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	2b01      	cmp	r3, #1
 80107d2:	d104      	bne.n	80107de <MX_BlueNRG_MS_Process+0x46>
	{
		SPIwasLocked = 0;
 80107d4:	4b06      	ldr	r3, [pc, #24]	; (80107f0 <MX_BlueNRG_MS_Process+0x58>)
 80107d6:	2200      	movs	r2, #0
 80107d8:	701a      	strb	r2, [r3, #0]
		hci_tl_lowlevel_isr();
 80107da:	f000 fb7f 	bl	8010edc <hci_tl_lowlevel_isr>
	}

	hci_user_evt_proc();
 80107de:	f006 fa3d 	bl	8016c5c <hci_user_evt_proc>
  //hci_user_evt_proc();

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80107e2:	bf00      	nop
 80107e4:	3708      	adds	r7, #8
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
 80107ea:	bf00      	nop
 80107ec:	080181f0 	.word	0x080181f0
 80107f0:	2000009c 	.word	0x2000009c

080107f4 <Read_Request_CB>:
{
	printf("testCB called");
}

void Read_Request_CB(uint16_t handle)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	4603      	mov	r3, r0
 80107fc:	80fb      	strh	r3, [r7, #6]
	printf("Read_Request_CB");
 80107fe:	4803      	ldr	r0, [pc, #12]	; (801080c <Read_Request_CB+0x18>)
 8010800:	f006 fe74 	bl	80174ec <iprintf>
}
 8010804:	bf00      	nop
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}
 801080c:	080180d4 	.word	0x080180d4

08010810 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	460b      	mov	r3, r1
 801081a:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 801081c:	2000      	movs	r0, #0
 801081e:	f001 f8f3 	bl	8011a08 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8010822:	2300      	movs	r3, #0
 8010824:	60fb      	str	r3, [r7, #12]
 8010826:	e009      	b.n	801083c <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	4413      	add	r3, r2
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	4618      	mov	r0, r3
 8010832:	f006 fe73 	bl	801751c <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	3301      	adds	r3, #1
 801083a:	60fb      	str	r3, [r7, #12]
 801083c:	78fb      	ldrb	r3, [r7, #3]
 801083e:	68fa      	ldr	r2, [r7, #12]
 8010840:	429a      	cmp	r2, r3
 8010842:	dbf1      	blt.n	8010828 <receiveData+0x18>
  }
  fflush(stdout);
 8010844:	4b04      	ldr	r3, [pc, #16]	; (8010858 <receiveData+0x48>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	4618      	mov	r0, r3
 801084c:	f006 fc5e 	bl	801710c <fflush>
}
 8010850:	bf00      	nop
 8010852:	3710      	adds	r7, #16
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	2000001c 	.word	0x2000001c

0801085c <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	4603      	mov	r3, r0
 8010864:	603a      	str	r2, [r7, #0]
 8010866:	80fb      	strh	r3, [r7, #6]
 8010868:	460b      	mov	r3, r1
 801086a:	717b      	strb	r3, [r7, #5]
	//printf("Attribute_Modified_CB\n");
  if(handle == RXCharHandle + 1){
 801086c:	88fa      	ldrh	r2, [r7, #6]
 801086e:	4b0e      	ldr	r3, [pc, #56]	; (80108a8 <Attribute_Modified_CB+0x4c>)
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	3301      	adds	r3, #1
 8010874:	429a      	cmp	r2, r3
 8010876:	d105      	bne.n	8010884 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8010878:	797b      	ldrb	r3, [r7, #5]
 801087a:	4619      	mov	r1, r3
 801087c:	6838      	ldr	r0, [r7, #0]
 801087e:	f7ff ffc7 	bl	8010810 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8010882:	e00c      	b.n	801089e <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8010884:	88fa      	ldrh	r2, [r7, #6]
 8010886:	4b09      	ldr	r3, [pc, #36]	; (80108ac <Attribute_Modified_CB+0x50>)
 8010888:	881b      	ldrh	r3, [r3, #0]
 801088a:	3302      	adds	r3, #2
 801088c:	429a      	cmp	r2, r3
 801088e:	d106      	bne.n	801089e <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	2b01      	cmp	r3, #1
 8010896:	d102      	bne.n	801089e <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8010898:	4b05      	ldr	r3, [pc, #20]	; (80108b0 <Attribute_Modified_CB+0x54>)
 801089a:	2201      	movs	r2, #1
 801089c:	701a      	strb	r2, [r3, #0]
}
 801089e:	bf00      	nop
 80108a0:	3708      	adds	r7, #8
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	200004b0 	.word	0x200004b0
 80108ac:	200004ac 	.word	0x200004ac
 80108b0:	200000a6 	.word	0x200000a6

080108b4 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	460b      	mov	r3, r1
 80108be:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 80108c0:	4b11      	ldr	r3, [pc, #68]	; (8010908 <GAP_ConnectionComplete_CB+0x54>)
 80108c2:	2201      	movs	r2, #1
 80108c4:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80108c6:	4a11      	ldr	r2, [pc, #68]	; (801090c <GAP_ConnectionComplete_CB+0x58>)
 80108c8:	887b      	ldrh	r3, [r7, #2]
 80108ca:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 80108cc:	4810      	ldr	r0, [pc, #64]	; (8010910 <GAP_ConnectionComplete_CB+0x5c>)
 80108ce:	f006 fe0d 	bl	80174ec <iprintf>
  for(int i = 5; i > 0; i--){
 80108d2:	2305      	movs	r3, #5
 80108d4:	60fb      	str	r3, [r7, #12]
 80108d6:	e00a      	b.n	80108ee <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	687a      	ldr	r2, [r7, #4]
 80108dc:	4413      	add	r3, r2
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	4619      	mov	r1, r3
 80108e2:	480c      	ldr	r0, [pc, #48]	; (8010914 <GAP_ConnectionComplete_CB+0x60>)
 80108e4:	f006 fe02 	bl	80174ec <iprintf>
  for(int i = 5; i > 0; i--){
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	3b01      	subs	r3, #1
 80108ec:	60fb      	str	r3, [r7, #12]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	dcf1      	bgt.n	80108d8 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	4619      	mov	r1, r3
 80108fa:	4807      	ldr	r0, [pc, #28]	; (8010918 <GAP_ConnectionComplete_CB+0x64>)
 80108fc:	f006 fdf6 	bl	80174ec <iprintf>
}
 8010900:	bf00      	nop
 8010902:	3710      	adds	r7, #16
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	200000a0 	.word	0x200000a0
 801090c:	200000a4 	.word	0x200000a4
 8010910:	0801816c 	.word	0x0801816c
 8010914:	08018184 	.word	0x08018184
 8010918:	0801818c 	.word	0x0801818c

0801091c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	af00      	add	r7, sp, #0
  connected = FALSE;
 8010920:	4b0c      	ldr	r3, [pc, #48]	; (8010954 <GAP_DisconnectionComplete_CB+0x38>)
 8010922:	2200      	movs	r2, #0
 8010924:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8010926:	480c      	ldr	r0, [pc, #48]	; (8010958 <GAP_DisconnectionComplete_CB+0x3c>)
 8010928:	f006 fe7c 	bl	8017624 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 801092c:	4b0b      	ldr	r3, [pc, #44]	; (801095c <GAP_DisconnectionComplete_CB+0x40>)
 801092e:	2201      	movs	r2, #1
 8010930:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8010932:	4b0b      	ldr	r3, [pc, #44]	; (8010960 <GAP_DisconnectionComplete_CB+0x44>)
 8010934:	2200      	movs	r2, #0
 8010936:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8010938:	4b0a      	ldr	r3, [pc, #40]	; (8010964 <GAP_DisconnectionComplete_CB+0x48>)
 801093a:	2200      	movs	r2, #0
 801093c:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 801093e:	4b0a      	ldr	r3, [pc, #40]	; (8010968 <GAP_DisconnectionComplete_CB+0x4c>)
 8010940:	2200      	movs	r2, #0
 8010942:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8010944:	4b09      	ldr	r3, [pc, #36]	; (801096c <GAP_DisconnectionComplete_CB+0x50>)
 8010946:	2200      	movs	r2, #0
 8010948:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 801094a:	4b09      	ldr	r3, [pc, #36]	; (8010970 <GAP_DisconnectionComplete_CB+0x54>)
 801094c:	2200      	movs	r2, #0
 801094e:	701a      	strb	r2, [r3, #0]
}
 8010950:	bf00      	nop
 8010952:	bd80      	pop	{r7, pc}
 8010954:	200000a0 	.word	0x200000a0
 8010958:	08018194 	.word	0x08018194
 801095c:	20000002 	.word	0x20000002
 8010960:	200000a6 	.word	0x200000a6
 8010964:	200000a7 	.word	0x200000a7
 8010968:	200000a8 	.word	0x200000a8
 801096c:	200000a9 	.word	0x200000a9
 8010970:	200000aa 	.word	0x200000aa

08010974 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	4603      	mov	r3, r0
 801097c:	603a      	str	r2, [r7, #0]
 801097e:	80fb      	strh	r3, [r7, #6]
 8010980:	460b      	mov	r3, r1
 8010982:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8010984:	88fa      	ldrh	r2, [r7, #6]
 8010986:	4b07      	ldr	r3, [pc, #28]	; (80109a4 <GATT_Notification_CB+0x30>)
 8010988:	881b      	ldrh	r3, [r3, #0]
 801098a:	3301      	adds	r3, #1
 801098c:	429a      	cmp	r2, r3
 801098e:	d104      	bne.n	801099a <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8010990:	797b      	ldrb	r3, [r7, #5]
 8010992:	4619      	mov	r1, r3
 8010994:	6838      	ldr	r0, [r7, #0]
 8010996:	f7ff ff3b 	bl	8010810 <receiveData>
  }
}
 801099a:	bf00      	nop
 801099c:	3708      	adds	r7, #8
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	200004a8 	.word	0x200004a8

080109a8 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b08c      	sub	sp, #48	; 0x30
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80109b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b6:	3301      	adds	r3, #1
 80109b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 80109ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	2b04      	cmp	r3, #4
 80109c0:	f040 80f0 	bne.w	8010ba4 <user_notify+0x1fc>
    return;

  switch(event_pckt->evt){
 80109c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	2bff      	cmp	r3, #255	; 0xff
 80109ca:	d021      	beq.n	8010a10 <user_notify+0x68>
 80109cc:	2bff      	cmp	r3, #255	; 0xff
 80109ce:	f300 80ee 	bgt.w	8010bae <user_notify+0x206>
 80109d2:	2b05      	cmp	r3, #5
 80109d4:	d002      	beq.n	80109dc <user_notify+0x34>
 80109d6:	2b3e      	cmp	r3, #62	; 0x3e
 80109d8:	d003      	beq.n	80109e2 <user_notify+0x3a>
 80109da:	e0e8      	b.n	8010bae <user_notify+0x206>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80109dc:	f7ff ff9e 	bl	801091c <GAP_DisconnectionComplete_CB>
    }
    break;
 80109e0:	e0e5      	b.n	8010bae <user_notify+0x206>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80109e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e4:	3302      	adds	r3, #2
 80109e6:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	f040 80db 	bne.w	8010ba8 <user_notify+0x200>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	3301      	adds	r3, #1
 80109f6:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	1d5a      	adds	r2, r3, #5
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	4619      	mov	r1, r3
 8010a06:	4610      	mov	r0, r2
 8010a08:	f7ff ff54 	bl	80108b4 <GAP_ConnectionComplete_CB>
        }
        break;
 8010a0c:	bf00      	nop
      }
    }
    break;
 8010a0e:	e0cb      	b.n	8010ba8 <user_notify+0x200>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8010a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a12:	3302      	adds	r3, #2
 8010a14:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8010a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a18:	881b      	ldrh	r3, [r3, #0]
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8010a20:	2b13      	cmp	r3, #19
 8010a22:	f200 80c3 	bhi.w	8010bac <user_notify+0x204>
 8010a26:	a201      	add	r2, pc, #4	; (adr r2, 8010a2c <user_notify+0x84>)
 8010a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a2c:	08010a91 	.word	0x08010a91
 8010a30:	08010bad 	.word	0x08010bad
 8010a34:	08010bad 	.word	0x08010bad
 8010a38:	08010bad 	.word	0x08010bad
 8010a3c:	08010bad 	.word	0x08010bad
 8010a40:	08010bad 	.word	0x08010bad
 8010a44:	08010bad 	.word	0x08010bad
 8010a48:	08010bad 	.word	0x08010bad
 8010a4c:	08010bad 	.word	0x08010bad
 8010a50:	08010bad 	.word	0x08010bad
 8010a54:	08010bad 	.word	0x08010bad
 8010a58:	08010bad 	.word	0x08010bad
 8010a5c:	08010bad 	.word	0x08010bad
 8010a60:	08010bad 	.word	0x08010bad
 8010a64:	08010ad1 	.word	0x08010ad1
 8010a68:	08010b5d 	.word	0x08010b5d
 8010a6c:	08010bad 	.word	0x08010bad
 8010a70:	08010af3 	.word	0x08010af3
 8010a74:	08010bad 	.word	0x08010bad
 8010a78:	08010a7d 	.word	0x08010a7d


      case EVT_BLUE_GATT_READ_PERMIT_REQ:
      {
    	  evt_gatt_read_permit_req *evt = (void *) blue_evt->data;
 8010a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7e:	3302      	adds	r3, #2
 8010a80:	623b      	str	r3, [r7, #32]
    	  Read_Request_CB(evt->attr_handle);
 8010a82:	6a3b      	ldr	r3, [r7, #32]
 8010a84:	885b      	ldrh	r3, [r3, #2]
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7ff feb3 	bl	80107f4 <Read_Request_CB>
      }
      break;
 8010a8e:	e088      	b.n	8010ba2 <user_notify+0x1fa>


      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
        	//printf("EVT_BLUE_GATT_ATTRIBUTE_MODIFIED\n");
          if (bnrg_expansion_board == IDB05A1) {
 8010a90:	4b48      	ldr	r3, [pc, #288]	; (8010bb4 <user_notify+0x20c>)
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d10d      	bne.n	8010ab4 <user_notify+0x10c>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8010a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9a:	3302      	adds	r3, #2
 8010a9c:	613b      	str	r3, [r7, #16]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	885b      	ldrh	r3, [r3, #2]
 8010aa2:	b298      	uxth	r0, r3
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	7919      	ldrb	r1, [r3, #4]
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	3307      	adds	r3, #7
 8010aac:	461a      	mov	r2, r3
 8010aae:	f7ff fed5 	bl	801085c <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8010ab2:	e076      	b.n	8010ba2 <user_notify+0x1fa>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8010ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab6:	3302      	adds	r3, #2
 8010ab8:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	885b      	ldrh	r3, [r3, #2]
 8010abe:	b298      	uxth	r0, r3
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	7919      	ldrb	r1, [r3, #4]
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	3305      	adds	r3, #5
 8010ac8:	461a      	mov	r2, r3
 8010aca:	f7ff fec7 	bl	801085c <Attribute_Modified_CB>
        break;
 8010ace:	e068      	b.n	8010ba2 <user_notify+0x1fa>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad2:	3302      	adds	r3, #2
 8010ad4:	61bb      	str	r3, [r7, #24]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010adc:	b298      	uxth	r0, r3
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	789b      	ldrb	r3, [r3, #2]
 8010ae2:	3b02      	subs	r3, #2
 8010ae4:	b2d9      	uxtb	r1, r3
 8010ae6:	69bb      	ldr	r3, [r7, #24]
 8010ae8:	3305      	adds	r3, #5
 8010aea:	461a      	mov	r2, r3
 8010aec:	f7ff ff42 	bl	8010974 <GATT_Notification_CB>
        }
        break;
 8010af0:	e057      	b.n	8010ba2 <user_notify+0x1fa>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8010af2:	4b31      	ldr	r3, [pc, #196]	; (8010bb8 <user_notify+0x210>)
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d150      	bne.n	8010b9c <user_notify+0x1f4>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afc:	3302      	adds	r3, #2
 8010afe:	61fb      	str	r3, [r7, #28]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8010b00:	4b2e      	ldr	r3, [pc, #184]	; (8010bbc <user_notify+0x214>)
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d011      	beq.n	8010b2e <user_notify+0x186>
 8010b0a:	4b2d      	ldr	r3, [pc, #180]	; (8010bc0 <user_notify+0x218>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	b2db      	uxtb	r3, r3
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d10c      	bne.n	8010b2e <user_notify+0x186>
          {
            tx_handle = resp->attr_handle;
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	4b29      	ldr	r3, [pc, #164]	; (8010bc4 <user_notify+0x21c>)
 8010b1e:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8010b20:	4b28      	ldr	r3, [pc, #160]	; (8010bc4 <user_notify+0x21c>)
 8010b22:	881b      	ldrh	r3, [r3, #0]
 8010b24:	4619      	mov	r1, r3
 8010b26:	4828      	ldr	r0, [pc, #160]	; (8010bc8 <user_notify+0x220>)
 8010b28:	f006 fce0 	bl	80174ec <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8010b2c:	e036      	b.n	8010b9c <user_notify+0x1f4>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8010b2e:	4b27      	ldr	r3, [pc, #156]	; (8010bcc <user_notify+0x224>)
 8010b30:	781b      	ldrb	r3, [r3, #0]
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d031      	beq.n	8010b9c <user_notify+0x1f4>
 8010b38:	4b25      	ldr	r3, [pc, #148]	; (8010bd0 <user_notify+0x228>)
 8010b3a:	781b      	ldrb	r3, [r3, #0]
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d12c      	bne.n	8010b9c <user_notify+0x1f4>
            rx_handle = resp->attr_handle;
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	4b22      	ldr	r3, [pc, #136]	; (8010bd4 <user_notify+0x22c>)
 8010b4c:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8010b4e:	4b21      	ldr	r3, [pc, #132]	; (8010bd4 <user_notify+0x22c>)
 8010b50:	881b      	ldrh	r3, [r3, #0]
 8010b52:	4619      	mov	r1, r3
 8010b54:	4820      	ldr	r0, [pc, #128]	; (8010bd8 <user_notify+0x230>)
 8010b56:	f006 fcc9 	bl	80174ec <iprintf>
        break;
 8010b5a:	e01f      	b.n	8010b9c <user_notify+0x1f4>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8010b5c:	4b16      	ldr	r3, [pc, #88]	; (8010bb8 <user_notify+0x210>)
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d11d      	bne.n	8010ba0 <user_notify+0x1f8>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8010b64:	4b15      	ldr	r3, [pc, #84]	; (8010bbc <user_notify+0x214>)
 8010b66:	781b      	ldrb	r3, [r3, #0]
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d008      	beq.n	8010b80 <user_notify+0x1d8>
 8010b6e:	4b14      	ldr	r3, [pc, #80]	; (8010bc0 <user_notify+0x218>)
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d103      	bne.n	8010b80 <user_notify+0x1d8>
          {
            end_read_tx_char_handle = TRUE;
 8010b78:	4b11      	ldr	r3, [pc, #68]	; (8010bc0 <user_notify+0x218>)
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8010b7e:	e00f      	b.n	8010ba0 <user_notify+0x1f8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8010b80:	4b12      	ldr	r3, [pc, #72]	; (8010bcc <user_notify+0x224>)
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00a      	beq.n	8010ba0 <user_notify+0x1f8>
 8010b8a:	4b11      	ldr	r3, [pc, #68]	; (8010bd0 <user_notify+0x228>)
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	b2db      	uxtb	r3, r3
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d105      	bne.n	8010ba0 <user_notify+0x1f8>
            end_read_rx_char_handle = TRUE;
 8010b94:	4b0e      	ldr	r3, [pc, #56]	; (8010bd0 <user_notify+0x228>)
 8010b96:	2201      	movs	r2, #1
 8010b98:	701a      	strb	r2, [r3, #0]
        break;
 8010b9a:	e001      	b.n	8010ba0 <user_notify+0x1f8>
        break;
 8010b9c:	bf00      	nop
 8010b9e:	e005      	b.n	8010bac <user_notify+0x204>
        break;
 8010ba0:	bf00      	nop
      }
    }
    break;
 8010ba2:	e003      	b.n	8010bac <user_notify+0x204>
    return;
 8010ba4:	bf00      	nop
 8010ba6:	e002      	b.n	8010bae <user_notify+0x206>
    break;
 8010ba8:	bf00      	nop
 8010baa:	e000      	b.n	8010bae <user_notify+0x206>
    break;
 8010bac:	bf00      	nop
  }
}
 8010bae:	3730      	adds	r7, #48	; 0x30
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	20000000 	.word	0x20000000
 8010bb8:	20000001 	.word	0x20000001
 8010bbc:	200000a7 	.word	0x200000a7
 8010bc0:	200000a9 	.word	0x200000a9
 8010bc4:	200004a8 	.word	0x200004a8
 8010bc8:	080181a4 	.word	0x080181a4
 8010bcc:	200000a8 	.word	0x200000a8
 8010bd0:	200000aa 	.word	0x200000aa
 8010bd4:	200004aa 	.word	0x200004aa
 8010bd8:	080181bc 	.word	0x080181bc

08010bdc <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b088      	sub	sp, #32
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010be4:	4b1e      	ldr	r3, [pc, #120]	; (8010c60 <HCI_TL_SPI_Init+0x84>)
 8010be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010be8:	4a1d      	ldr	r2, [pc, #116]	; (8010c60 <HCI_TL_SPI_Init+0x84>)
 8010bea:	f043 0301 	orr.w	r3, r3, #1
 8010bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010bf0:	4b1b      	ldr	r3, [pc, #108]	; (8010c60 <HCI_TL_SPI_Init+0x84>)
 8010bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bf4:	f003 0301 	and.w	r3, r3, #1
 8010bf8:	60bb      	str	r3, [r7, #8]
 8010bfa:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8010bfc:	2340      	movs	r3, #64	; 0x40
 8010bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010c00:	4b18      	ldr	r3, [pc, #96]	; (8010c64 <HCI_TL_SPI_Init+0x88>)
 8010c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c04:	2300      	movs	r3, #0
 8010c06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8010c08:	f107 030c 	add.w	r3, r7, #12
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	4816      	ldr	r0, [pc, #88]	; (8010c68 <HCI_TL_SPI_Init+0x8c>)
 8010c10:	f002 f9fa 	bl	8013008 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8010c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c22:	2300      	movs	r3, #0
 8010c24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8010c26:	f107 030c 	add.w	r3, r7, #12
 8010c2a:	4619      	mov	r1, r3
 8010c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c30:	f002 f9ea 	bl	8013008 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8010c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c42:	2300      	movs	r3, #0
 8010c44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8010c46:	f107 030c 	add.w	r3, r7, #12
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	4807      	ldr	r0, [pc, #28]	; (8010c6c <HCI_TL_SPI_Init+0x90>)
 8010c4e:	f002 f9db 	bl	8013008 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8010c52:	f000 feef 	bl	8011a34 <BSP_SPI3_Init>
 8010c56:	4603      	mov	r3, r0
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3720      	adds	r7, #32
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}
 8010c60:	40021000 	.word	0x40021000
 8010c64:	10110000 	.word	0x10110000
 8010c68:	48001000 	.word	0x48001000
 8010c6c:	48000c00 	.word	0x48000c00

08010c70 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8010c74:	2140      	movs	r1, #64	; 0x40
 8010c76:	4808      	ldr	r0, [pc, #32]	; (8010c98 <HCI_TL_SPI_DeInit+0x28>)
 8010c78:	f002 fb70 	bl	801335c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8010c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010c80:	4806      	ldr	r0, [pc, #24]	; (8010c9c <HCI_TL_SPI_DeInit+0x2c>)
 8010c82:	f002 fb6b 	bl	801335c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8010c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010c8e:	f002 fb65 	bl	801335c <HAL_GPIO_DeInit>
  return 0;
 8010c92:	2300      	movs	r3, #0
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	48001000 	.word	0x48001000
 8010c9c:	48000c00 	.word	0x48000c00

08010ca0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010caa:	480d      	ldr	r0, [pc, #52]	; (8010ce0 <HCI_TL_SPI_Reset+0x40>)
 8010cac:	f002 fc62 	bl	8013574 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010cba:	f002 fc5b 	bl	8013574 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8010cbe:	2005      	movs	r0, #5
 8010cc0:	f001 f826 	bl	8011d10 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010cce:	f002 fc51 	bl	8013574 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8010cd2:	2005      	movs	r0, #5
 8010cd4:	f001 f81c 	bl	8011d10 <HAL_Delay>
  return 0;
 8010cd8:	2300      	movs	r3, #0
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	48000c00 	.word	0x48000c00

08010ce4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b088      	sub	sp, #32
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	460b      	mov	r3, r1
 8010cee:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8010cf4:	23ff      	movs	r3, #255	; 0xff
 8010cf6:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8010cf8:	4a26      	ldr	r2, [pc, #152]	; (8010d94 <HCI_TL_SPI_Receive+0xb0>)
 8010cfa:	f107 0314 	add.w	r3, r7, #20
 8010cfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d02:	6018      	str	r0, [r3, #0]
 8010d04:	3304      	adds	r3, #4
 8010d06:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010d0e:	4822      	ldr	r0, [pc, #136]	; (8010d98 <HCI_TL_SPI_Receive+0xb4>)
 8010d10:	f002 fc30 	bl	8013574 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8010d14:	f107 010c 	add.w	r1, r7, #12
 8010d18:	f107 0314 	add.w	r3, r7, #20
 8010d1c:	2205      	movs	r2, #5
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f000 feb8 	bl	8011a94 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8010d24:	7b3b      	ldrb	r3, [r7, #12]
 8010d26:	2b02      	cmp	r3, #2
 8010d28:	d129      	bne.n	8010d7e <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8010d2a:	7c3b      	ldrb	r3, [r7, #16]
 8010d2c:	021b      	lsls	r3, r3, #8
 8010d2e:	b21a      	sxth	r2, r3
 8010d30:	7bfb      	ldrb	r3, [r7, #15]
 8010d32:	b21b      	sxth	r3, r3
 8010d34:	4313      	orrs	r3, r2
 8010d36:	b21b      	sxth	r3, r3
 8010d38:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8010d3a:	8bfb      	ldrh	r3, [r7, #30]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d01e      	beq.n	8010d7e <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8010d40:	8bfa      	ldrh	r2, [r7, #30]
 8010d42:	887b      	ldrh	r3, [r7, #2]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d901      	bls.n	8010d4c <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8010d48:	887b      	ldrh	r3, [r7, #2]
 8010d4a:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	777b      	strb	r3, [r7, #29]
 8010d50:	e010      	b.n	8010d74 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8010d52:	f107 011b 	add.w	r1, r7, #27
 8010d56:	f107 031c 	add.w	r3, r7, #28
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f000 fe99 	bl	8011a94 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8010d62:	7f7b      	ldrb	r3, [r7, #29]
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	4413      	add	r3, r2
 8010d68:	7efa      	ldrb	r2, [r7, #27]
 8010d6a:	b2d2      	uxtb	r2, r2
 8010d6c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8010d6e:	7f7b      	ldrb	r3, [r7, #29]
 8010d70:	3301      	adds	r3, #1
 8010d72:	777b      	strb	r3, [r7, #29]
 8010d74:	7f7b      	ldrb	r3, [r7, #29]
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	8bfa      	ldrh	r2, [r7, #30]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d8e9      	bhi.n	8010d52 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8010d7e:	2201      	movs	r2, #1
 8010d80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010d84:	4804      	ldr	r0, [pc, #16]	; (8010d98 <HCI_TL_SPI_Receive+0xb4>)
 8010d86:	f002 fbf5 	bl	8013574 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8010d8a:	7f7b      	ldrb	r3, [r7, #29]
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3720      	adds	r7, #32
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	080181d4 	.word	0x080181d4
 8010d98:	48000c00 	.word	0x48000c00

08010d9c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b088      	sub	sp, #32
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	460b      	mov	r3, r1
 8010da6:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8010da8:	4a24      	ldr	r2, [pc, #144]	; (8010e3c <HCI_TL_SPI_Send+0xa0>)
 8010daa:	f107 0310 	add.w	r3, r7, #16
 8010dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010db2:	6018      	str	r0, [r3, #0]
 8010db4:	3304      	adds	r3, #4
 8010db6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8010db8:	f000 ff9e 	bl	8011cf8 <HAL_GetTick>
 8010dbc:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010dc8:	481d      	ldr	r0, [pc, #116]	; (8010e40 <HCI_TL_SPI_Send+0xa4>)
 8010dca:	f002 fbd3 	bl	8013574 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8010dce:	f107 0108 	add.w	r1, r7, #8
 8010dd2:	f107 0310 	add.w	r3, r7, #16
 8010dd6:	2205      	movs	r2, #5
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f000 fe5b 	bl	8011a94 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8010dde:	7a3b      	ldrb	r3, [r7, #8]
 8010de0:	2b02      	cmp	r3, #2
 8010de2:	d10f      	bne.n	8010e04 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8010de4:	7a7b      	ldrb	r3, [r7, #9]
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	887a      	ldrh	r2, [r7, #2]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d806      	bhi.n	8010dfc <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8010dee:	887b      	ldrh	r3, [r7, #2]
 8010df0:	461a      	mov	r2, r3
 8010df2:	4914      	ldr	r1, [pc, #80]	; (8010e44 <HCI_TL_SPI_Send+0xa8>)
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f000 fe4d 	bl	8011a94 <BSP_SPI3_SendRecv>
 8010dfa:	e006      	b.n	8010e0a <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8010dfc:	f06f 0301 	mvn.w	r3, #1
 8010e00:	61fb      	str	r3, [r7, #28]
 8010e02:	e002      	b.n	8010e0a <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8010e04:	f04f 33ff 	mov.w	r3, #4294967295
 8010e08:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010e10:	480b      	ldr	r0, [pc, #44]	; (8010e40 <HCI_TL_SPI_Send+0xa4>)
 8010e12:	f002 fbaf 	bl	8013574 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8010e16:	f000 ff6f 	bl	8011cf8 <HAL_GetTick>
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	69bb      	ldr	r3, [r7, #24]
 8010e1e:	1ad3      	subs	r3, r2, r3
 8010e20:	2b0f      	cmp	r3, #15
 8010e22:	d903      	bls.n	8010e2c <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8010e24:	f06f 0302 	mvn.w	r3, #2
 8010e28:	61fb      	str	r3, [r7, #28]
      break;
 8010e2a:	e002      	b.n	8010e32 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	dbc5      	blt.n	8010dbe <HCI_TL_SPI_Send+0x22>

  return result;
 8010e32:	69fb      	ldr	r3, [r7, #28]
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3720      	adds	r7, #32
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	080181dc 	.word	0x080181dc
 8010e40:	48000c00 	.word	0x48000c00
 8010e44:	200000ac 	.word	0x200000ac

08010e48 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8010e4c:	2140      	movs	r1, #64	; 0x40
 8010e4e:	4805      	ldr	r0, [pc, #20]	; (8010e64 <IsDataAvailable+0x1c>)
 8010e50:	f002 fb78 	bl	8013544 <HAL_GPIO_ReadPin>
 8010e54:	4603      	mov	r3, r0
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	bf0c      	ite	eq
 8010e5a:	2301      	moveq	r3, #1
 8010e5c:	2300      	movne	r3, #0
 8010e5e:	b2db      	uxtb	r3, r3
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	48001000 	.word	0x48001000

08010e68 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b088      	sub	sp, #32
 8010e6c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8010e6e:	4b12      	ldr	r3, [pc, #72]	; (8010eb8 <hci_tl_lowlevel_init+0x50>)
 8010e70:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8010e72:	4b12      	ldr	r3, [pc, #72]	; (8010ebc <hci_tl_lowlevel_init+0x54>)
 8010e74:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8010e76:	4b12      	ldr	r3, [pc, #72]	; (8010ec0 <hci_tl_lowlevel_init+0x58>)
 8010e78:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8010e7a:	4b12      	ldr	r3, [pc, #72]	; (8010ec4 <hci_tl_lowlevel_init+0x5c>)
 8010e7c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8010e7e:	4b12      	ldr	r3, [pc, #72]	; (8010ec8 <hci_tl_lowlevel_init+0x60>)
 8010e80:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8010e82:	4b12      	ldr	r3, [pc, #72]	; (8010ecc <hci_tl_lowlevel_init+0x64>)
 8010e84:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8010e86:	1d3b      	adds	r3, r7, #4
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f005 fdad 	bl	80169e8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8010e8e:	4910      	ldr	r1, [pc, #64]	; (8010ed0 <hci_tl_lowlevel_init+0x68>)
 8010e90:	4810      	ldr	r0, [pc, #64]	; (8010ed4 <hci_tl_lowlevel_init+0x6c>)
 8010e92:	f002 f875 	bl	8012f80 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8010e96:	4a10      	ldr	r2, [pc, #64]	; (8010ed8 <hci_tl_lowlevel_init+0x70>)
 8010e98:	2100      	movs	r1, #0
 8010e9a:	480e      	ldr	r0, [pc, #56]	; (8010ed4 <hci_tl_lowlevel_init+0x6c>)
 8010e9c:	f002 f856 	bl	8012f4c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	2100      	movs	r1, #0
 8010ea4:	2017      	movs	r0, #23
 8010ea6:	f001 ffda 	bl	8012e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8010eaa:	2017      	movs	r0, #23
 8010eac:	f001 fff3 	bl	8012e96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8010eb0:	bf00      	nop
 8010eb2:	3720      	adds	r7, #32
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	08010bdd 	.word	0x08010bdd
 8010ebc:	08010c71 	.word	0x08010c71
 8010ec0:	08010d9d 	.word	0x08010d9d
 8010ec4:	08010ce5 	.word	0x08010ce5
 8010ec8:	08010ca1 	.word	0x08010ca1
 8010ecc:	08011ad5 	.word	0x08011ad5
 8010ed0:	16000006 	.word	0x16000006
 8010ed4:	200004b4 	.word	0x200004b4
 8010ed8:	08010edd 	.word	0x08010edd

08010edc <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	af00      	add	r7, sp, #0
	extern volatile uint8_t SPIwasLocked;
	if (hspi3.Lock == HAL_LOCKED){
 8010ee0:	4b0b      	ldr	r3, [pc, #44]	; (8010f10 <hci_tl_lowlevel_isr+0x34>)
 8010ee2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d109      	bne.n	8010efe <hci_tl_lowlevel_isr+0x22>
	             SPIwasLocked = 1;
 8010eea:	4b0a      	ldr	r3, [pc, #40]	; (8010f14 <hci_tl_lowlevel_isr+0x38>)
 8010eec:	2201      	movs	r2, #1
 8010eee:	701a      	strb	r2, [r3, #0]
	             return;
 8010ef0:	e00c      	b.n	8010f0c <hci_tl_lowlevel_isr+0x30>
	      }
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
  {
    if (hci_notify_asynch_evt(NULL))
 8010ef2:	2000      	movs	r0, #0
 8010ef4:	f005 fede 	bl	8016cb4 <hci_notify_asynch_evt>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d105      	bne.n	8010f0a <hci_tl_lowlevel_isr+0x2e>
  while(IsDataAvailable())
 8010efe:	f7ff ffa3 	bl	8010e48 <IsDataAvailable>
 8010f02:	4603      	mov	r3, r0
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1f4      	bne.n	8010ef2 <hci_tl_lowlevel_isr+0x16>
 8010f08:	e000      	b.n	8010f0c <hci_tl_lowlevel_isr+0x30>
    {
      return;
 8010f0a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	200005a4 	.word	0x200005a4
 8010f14:	2000009c 	.word	0x2000009c

08010f18 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _write(int file, char *ptr, int len)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b084      	sub	sp, #16
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	60b9      	str	r1, [r7, #8]
 8010f22:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 500);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	b29a      	uxth	r2, r3
 8010f28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010f2c:	68b9      	ldr	r1, [r7, #8]
 8010f2e:	4803      	ldr	r0, [pc, #12]	; (8010f3c <_write+0x24>)
 8010f30:	f004 fc1e 	bl	8015770 <HAL_UART_Transmit>
}
 8010f34:	bf00      	nop
 8010f36:	3710      	adds	r7, #16
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	20000520 	.word	0x20000520

08010f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010f44:	f000 fe70 	bl	8011c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010f48:	f000 f810 	bl	8010f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010f4c:	f000 f906 	bl	801115c <MX_GPIO_Init>
  MX_ADC1_Init();
 8010f50:	f000 f85e 	bl	8011010 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8010f54:	f000 f8d2 	bl	80110fc <MX_USART1_UART_Init>
  MX_BlueNRG_MS_Init();
 8010f58:	f7ff fb0e 	bl	8010578 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  printf("while start\n");
 8010f5c:	4802      	ldr	r0, [pc, #8]	; (8010f68 <main+0x28>)
 8010f5e:	f006 fb61 	bl	8017624 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8010f62:	f7ff fc19 	bl	8010798 <MX_BlueNRG_MS_Process>
 8010f66:	e7fc      	b.n	8010f62 <main+0x22>
 8010f68:	080181e4 	.word	0x080181e4

08010f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b096      	sub	sp, #88	; 0x58
 8010f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010f72:	f107 0314 	add.w	r3, r7, #20
 8010f76:	2244      	movs	r2, #68	; 0x44
 8010f78:	2100      	movs	r1, #0
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f006 fa03 	bl	8017386 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010f80:	463b      	mov	r3, r7
 8010f82:	2200      	movs	r2, #0
 8010f84:	601a      	str	r2, [r3, #0]
 8010f86:	605a      	str	r2, [r3, #4]
 8010f88:	609a      	str	r2, [r3, #8]
 8010f8a:	60da      	str	r2, [r3, #12]
 8010f8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8010f8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010f92:	f002 fb53 	bl	801363c <HAL_PWREx_ControlVoltageScaling>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d001      	beq.n	8010fa0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8010f9c:	f000 fac0 	bl	8011520 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8010fa0:	2310      	movs	r3, #16
 8010fa2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8010fac:	2360      	movs	r3, #96	; 0x60
 8010fae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010fb0:	2302      	movs	r3, #2
 8010fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8010fbc:	2328      	movs	r3, #40	; 0x28
 8010fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8010fc0:	2307      	movs	r3, #7
 8010fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8010fc4:	2302      	movs	r3, #2
 8010fc6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8010fc8:	2302      	movs	r3, #2
 8010fca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010fcc:	f107 0314 	add.w	r3, r7, #20
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f002 fb89 	bl	80136e8 <HAL_RCC_OscConfig>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d001      	beq.n	8010fe0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8010fdc:	f000 faa0 	bl	8011520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010fe0:	230f      	movs	r3, #15
 8010fe2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010fec:	2300      	movs	r3, #0
 8010fee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8010ff4:	463b      	mov	r3, r7
 8010ff6:	2104      	movs	r1, #4
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f002 ff5b 	bl	8013eb4 <HAL_RCC_ClockConfig>
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d001      	beq.n	8011008 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8011004:	f000 fa8c 	bl	8011520 <Error_Handler>
  }
}
 8011008:	bf00      	nop
 801100a:	3758      	adds	r7, #88	; 0x58
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b08a      	sub	sp, #40	; 0x28
 8011014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8011016:	f107 031c 	add.w	r3, r7, #28
 801101a:	2200      	movs	r2, #0
 801101c:	601a      	str	r2, [r3, #0]
 801101e:	605a      	str	r2, [r3, #4]
 8011020:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8011022:	1d3b      	adds	r3, r7, #4
 8011024:	2200      	movs	r2, #0
 8011026:	601a      	str	r2, [r3, #0]
 8011028:	605a      	str	r2, [r3, #4]
 801102a:	609a      	str	r2, [r3, #8]
 801102c:	60da      	str	r2, [r3, #12]
 801102e:	611a      	str	r2, [r3, #16]
 8011030:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8011032:	4b2f      	ldr	r3, [pc, #188]	; (80110f0 <MX_ADC1_Init+0xe0>)
 8011034:	4a2f      	ldr	r2, [pc, #188]	; (80110f4 <MX_ADC1_Init+0xe4>)
 8011036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8011038:	4b2d      	ldr	r3, [pc, #180]	; (80110f0 <MX_ADC1_Init+0xe0>)
 801103a:	2200      	movs	r2, #0
 801103c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801103e:	4b2c      	ldr	r3, [pc, #176]	; (80110f0 <MX_ADC1_Init+0xe0>)
 8011040:	2200      	movs	r2, #0
 8011042:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8011044:	4b2a      	ldr	r3, [pc, #168]	; (80110f0 <MX_ADC1_Init+0xe0>)
 8011046:	2200      	movs	r2, #0
 8011048:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801104a:	4b29      	ldr	r3, [pc, #164]	; (80110f0 <MX_ADC1_Init+0xe0>)
 801104c:	2200      	movs	r2, #0
 801104e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8011050:	4b27      	ldr	r3, [pc, #156]	; (80110f0 <MX_ADC1_Init+0xe0>)
 8011052:	2204      	movs	r2, #4
 8011054:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8011056:	4b26      	ldr	r3, [pc, #152]	; (80110f0 <MX_ADC1_Init+0xe0>)
 8011058:	2200      	movs	r2, #0
 801105a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 801105c:	4b24      	ldr	r3, [pc, #144]	; (80110f0 <MX_ADC1_Init+0xe0>)
 801105e:	2200      	movs	r2, #0
 8011060:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8011062:	4b23      	ldr	r3, [pc, #140]	; (80110f0 <MX_ADC1_Init+0xe0>)
 8011064:	2201      	movs	r2, #1
 8011066:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8011068:	4b21      	ldr	r3, [pc, #132]	; (80110f0 <MX_ADC1_Init+0xe0>)
 801106a:	2200      	movs	r2, #0
 801106c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011070:	4b1f      	ldr	r3, [pc, #124]	; (80110f0 <MX_ADC1_Init+0xe0>)
 8011072:	2200      	movs	r2, #0
 8011074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011076:	4b1e      	ldr	r3, [pc, #120]	; (80110f0 <MX_ADC1_Init+0xe0>)
 8011078:	2200      	movs	r2, #0
 801107a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801107c:	4b1c      	ldr	r3, [pc, #112]	; (80110f0 <MX_ADC1_Init+0xe0>)
 801107e:	2200      	movs	r2, #0
 8011080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8011084:	4b1a      	ldr	r3, [pc, #104]	; (80110f0 <MX_ADC1_Init+0xe0>)
 8011086:	2200      	movs	r2, #0
 8011088:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 801108a:	4b19      	ldr	r3, [pc, #100]	; (80110f0 <MX_ADC1_Init+0xe0>)
 801108c:	2200      	movs	r2, #0
 801108e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011092:	4817      	ldr	r0, [pc, #92]	; (80110f0 <MX_ADC1_Init+0xe0>)
 8011094:	f000 ffec 	bl	8012070 <HAL_ADC_Init>
 8011098:	4603      	mov	r3, r0
 801109a:	2b00      	cmp	r3, #0
 801109c:	d001      	beq.n	80110a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 801109e:	f000 fa3f 	bl	8011520 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80110a2:	2300      	movs	r3, #0
 80110a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80110a6:	f107 031c 	add.w	r3, r7, #28
 80110aa:	4619      	mov	r1, r3
 80110ac:	4810      	ldr	r0, [pc, #64]	; (80110f0 <MX_ADC1_Init+0xe0>)
 80110ae:	f001 fd4b 	bl	8012b48 <HAL_ADCEx_MultiModeConfigChannel>
 80110b2:	4603      	mov	r3, r0
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d001      	beq.n	80110bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80110b8:	f000 fa32 	bl	8011520 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80110bc:	4b0e      	ldr	r3, [pc, #56]	; (80110f8 <MX_ADC1_Init+0xe8>)
 80110be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80110c0:	2306      	movs	r3, #6
 80110c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80110c4:	2300      	movs	r3, #0
 80110c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80110c8:	237f      	movs	r3, #127	; 0x7f
 80110ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80110cc:	2304      	movs	r3, #4
 80110ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80110d0:	2300      	movs	r3, #0
 80110d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80110d4:	1d3b      	adds	r3, r7, #4
 80110d6:	4619      	mov	r1, r3
 80110d8:	4805      	ldr	r0, [pc, #20]	; (80110f0 <MX_ADC1_Init+0xe0>)
 80110da:	f001 f91f 	bl	801231c <HAL_ADC_ConfigChannel>
 80110de:	4603      	mov	r3, r0
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d001      	beq.n	80110e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80110e4:	f000 fa1c 	bl	8011520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80110e8:	bf00      	nop
 80110ea:	3728      	adds	r7, #40	; 0x28
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	200004bc 	.word	0x200004bc
 80110f4:	50040000 	.word	0x50040000
 80110f8:	04300002 	.word	0x04300002

080110fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8011100:	4b14      	ldr	r3, [pc, #80]	; (8011154 <MX_USART1_UART_Init+0x58>)
 8011102:	4a15      	ldr	r2, [pc, #84]	; (8011158 <MX_USART1_UART_Init+0x5c>)
 8011104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011106:	4b13      	ldr	r3, [pc, #76]	; (8011154 <MX_USART1_UART_Init+0x58>)
 8011108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801110c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801110e:	4b11      	ldr	r3, [pc, #68]	; (8011154 <MX_USART1_UART_Init+0x58>)
 8011110:	2200      	movs	r2, #0
 8011112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011114:	4b0f      	ldr	r3, [pc, #60]	; (8011154 <MX_USART1_UART_Init+0x58>)
 8011116:	2200      	movs	r2, #0
 8011118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801111a:	4b0e      	ldr	r3, [pc, #56]	; (8011154 <MX_USART1_UART_Init+0x58>)
 801111c:	2200      	movs	r2, #0
 801111e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011120:	4b0c      	ldr	r3, [pc, #48]	; (8011154 <MX_USART1_UART_Init+0x58>)
 8011122:	220c      	movs	r2, #12
 8011124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011126:	4b0b      	ldr	r3, [pc, #44]	; (8011154 <MX_USART1_UART_Init+0x58>)
 8011128:	2200      	movs	r2, #0
 801112a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801112c:	4b09      	ldr	r3, [pc, #36]	; (8011154 <MX_USART1_UART_Init+0x58>)
 801112e:	2200      	movs	r2, #0
 8011130:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011132:	4b08      	ldr	r3, [pc, #32]	; (8011154 <MX_USART1_UART_Init+0x58>)
 8011134:	2200      	movs	r2, #0
 8011136:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011138:	4b06      	ldr	r3, [pc, #24]	; (8011154 <MX_USART1_UART_Init+0x58>)
 801113a:	2200      	movs	r2, #0
 801113c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801113e:	4805      	ldr	r0, [pc, #20]	; (8011154 <MX_USART1_UART_Init+0x58>)
 8011140:	f004 fac8 	bl	80156d4 <HAL_UART_Init>
 8011144:	4603      	mov	r3, r0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d001      	beq.n	801114e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801114a:	f000 f9e9 	bl	8011520 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801114e:	bf00      	nop
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	20000520 	.word	0x20000520
 8011158:	40013800 	.word	0x40013800

0801115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b08a      	sub	sp, #40	; 0x28
 8011160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011162:	f107 0314 	add.w	r3, r7, #20
 8011166:	2200      	movs	r2, #0
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	605a      	str	r2, [r3, #4]
 801116c:	609a      	str	r2, [r3, #8]
 801116e:	60da      	str	r2, [r3, #12]
 8011170:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8011172:	4bba      	ldr	r3, [pc, #744]	; (801145c <MX_GPIO_Init+0x300>)
 8011174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011176:	4ab9      	ldr	r2, [pc, #740]	; (801145c <MX_GPIO_Init+0x300>)
 8011178:	f043 0310 	orr.w	r3, r3, #16
 801117c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801117e:	4bb7      	ldr	r3, [pc, #732]	; (801145c <MX_GPIO_Init+0x300>)
 8011180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011182:	f003 0310 	and.w	r3, r3, #16
 8011186:	613b      	str	r3, [r7, #16]
 8011188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801118a:	4bb4      	ldr	r3, [pc, #720]	; (801145c <MX_GPIO_Init+0x300>)
 801118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801118e:	4ab3      	ldr	r2, [pc, #716]	; (801145c <MX_GPIO_Init+0x300>)
 8011190:	f043 0304 	orr.w	r3, r3, #4
 8011194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011196:	4bb1      	ldr	r3, [pc, #708]	; (801145c <MX_GPIO_Init+0x300>)
 8011198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801119a:	f003 0304 	and.w	r3, r3, #4
 801119e:	60fb      	str	r3, [r7, #12]
 80111a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80111a2:	4bae      	ldr	r3, [pc, #696]	; (801145c <MX_GPIO_Init+0x300>)
 80111a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111a6:	4aad      	ldr	r2, [pc, #692]	; (801145c <MX_GPIO_Init+0x300>)
 80111a8:	f043 0301 	orr.w	r3, r3, #1
 80111ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80111ae:	4bab      	ldr	r3, [pc, #684]	; (801145c <MX_GPIO_Init+0x300>)
 80111b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111b2:	f003 0301 	and.w	r3, r3, #1
 80111b6:	60bb      	str	r3, [r7, #8]
 80111b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80111ba:	4ba8      	ldr	r3, [pc, #672]	; (801145c <MX_GPIO_Init+0x300>)
 80111bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111be:	4aa7      	ldr	r2, [pc, #668]	; (801145c <MX_GPIO_Init+0x300>)
 80111c0:	f043 0302 	orr.w	r3, r3, #2
 80111c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80111c6:	4ba5      	ldr	r3, [pc, #660]	; (801145c <MX_GPIO_Init+0x300>)
 80111c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111ca:	f003 0302 	and.w	r3, r3, #2
 80111ce:	607b      	str	r3, [r7, #4]
 80111d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80111d2:	4ba2      	ldr	r3, [pc, #648]	; (801145c <MX_GPIO_Init+0x300>)
 80111d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111d6:	4aa1      	ldr	r2, [pc, #644]	; (801145c <MX_GPIO_Init+0x300>)
 80111d8:	f043 0308 	orr.w	r3, r3, #8
 80111dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80111de:	4b9f      	ldr	r3, [pc, #636]	; (801145c <MX_GPIO_Init+0x300>)
 80111e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111e2:	f003 0308 	and.w	r3, r3, #8
 80111e6:	603b      	str	r3, [r7, #0]
 80111e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80111ea:	2200      	movs	r2, #0
 80111ec:	f44f 718a 	mov.w	r1, #276	; 0x114
 80111f0:	489b      	ldr	r0, [pc, #620]	; (8011460 <MX_GPIO_Init+0x304>)
 80111f2:	f002 f9bf 	bl	8013574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80111f6:	2200      	movs	r2, #0
 80111f8:	f248 1104 	movw	r1, #33028	; 0x8104
 80111fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011200:	f002 f9b8 	bl	8013574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8011204:	2200      	movs	r2, #0
 8011206:	f24b 0114 	movw	r1, #45076	; 0xb014
 801120a:	4896      	ldr	r0, [pc, #600]	; (8011464 <MX_GPIO_Init+0x308>)
 801120c:	f002 f9b2 	bl	8013574 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8011210:	2200      	movs	r2, #0
 8011212:	f241 0181 	movw	r1, #4225	; 0x1081
 8011216:	4894      	ldr	r0, [pc, #592]	; (8011468 <MX_GPIO_Init+0x30c>)
 8011218:	f002 f9ac 	bl	8013574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 801121c:	2201      	movs	r2, #1
 801121e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011222:	4891      	ldr	r0, [pc, #580]	; (8011468 <MX_GPIO_Init+0x30c>)
 8011224:	f002 f9a6 	bl	8013574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8011228:	2200      	movs	r2, #0
 801122a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801122e:	488f      	ldr	r0, [pc, #572]	; (801146c <MX_GPIO_Init+0x310>)
 8011230:	f002 f9a0 	bl	8013574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8011234:	2201      	movs	r2, #1
 8011236:	2120      	movs	r1, #32
 8011238:	488a      	ldr	r0, [pc, #552]	; (8011464 <MX_GPIO_Init+0x308>)
 801123a:	f002 f99b 	bl	8013574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 801123e:	2201      	movs	r2, #1
 8011240:	2101      	movs	r1, #1
 8011242:	4887      	ldr	r0, [pc, #540]	; (8011460 <MX_GPIO_Init+0x304>)
 8011244:	f002 f996 	bl	8013574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8011248:	f240 1315 	movw	r3, #277	; 0x115
 801124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801124e:	2301      	movs	r3, #1
 8011250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011252:	2300      	movs	r3, #0
 8011254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011256:	2300      	movs	r3, #0
 8011258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801125a:	f107 0314 	add.w	r3, r7, #20
 801125e:	4619      	mov	r1, r3
 8011260:	487f      	ldr	r0, [pc, #508]	; (8011460 <MX_GPIO_Init+0x304>)
 8011262:	f001 fed1 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8011266:	236a      	movs	r3, #106	; 0x6a
 8011268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801126a:	4b81      	ldr	r3, [pc, #516]	; (8011470 <MX_GPIO_Init+0x314>)
 801126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801126e:	2300      	movs	r3, #0
 8011270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011272:	f107 0314 	add.w	r3, r7, #20
 8011276:	4619      	mov	r1, r3
 8011278:	4879      	ldr	r0, [pc, #484]	; (8011460 <MX_GPIO_Init+0x304>)
 801127a:	f001 fec5 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 801127e:	2303      	movs	r3, #3
 8011280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011282:	2302      	movs	r3, #2
 8011284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011286:	2300      	movs	r3, #0
 8011288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801128a:	2303      	movs	r3, #3
 801128c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 801128e:	2308      	movs	r3, #8
 8011290:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011292:	f107 0314 	add.w	r3, r7, #20
 8011296:	4619      	mov	r1, r3
 8011298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801129c:	f001 feb4 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80112a0:	f248 1304 	movw	r3, #33028	; 0x8104
 80112a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80112a6:	2301      	movs	r3, #1
 80112a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112aa:	2300      	movs	r3, #0
 80112ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112ae:	2300      	movs	r3, #0
 80112b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80112b2:	f107 0314 	add.w	r3, r7, #20
 80112b6:	4619      	mov	r1, r3
 80112b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80112bc:	f001 fea4 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80112c0:	2308      	movs	r3, #8
 80112c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112c4:	2302      	movs	r3, #2
 80112c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112c8:	2300      	movs	r3, #0
 80112ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112cc:	2300      	movs	r3, #0
 80112ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80112d0:	2301      	movs	r3, #1
 80112d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80112d4:	f107 0314 	add.w	r3, r7, #20
 80112d8:	4619      	mov	r1, r3
 80112da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80112de:	f001 fe93 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80112e2:	23e0      	movs	r3, #224	; 0xe0
 80112e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112e6:	2302      	movs	r3, #2
 80112e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112ea:	2300      	movs	r3, #0
 80112ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80112ee:	2303      	movs	r3, #3
 80112f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80112f2:	2305      	movs	r3, #5
 80112f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80112f6:	f107 0314 	add.w	r3, r7, #20
 80112fa:	4619      	mov	r1, r3
 80112fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011300:	f001 fe82 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8011304:	2301      	movs	r3, #1
 8011306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011308:	4b59      	ldr	r3, [pc, #356]	; (8011470 <MX_GPIO_Init+0x314>)
 801130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801130c:	2300      	movs	r3, #0
 801130e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8011310:	f107 0314 	add.w	r3, r7, #20
 8011314:	4619      	mov	r1, r3
 8011316:	4853      	ldr	r0, [pc, #332]	; (8011464 <MX_GPIO_Init+0x308>)
 8011318:	f001 fe76 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 801131c:	f24b 0334 	movw	r3, #45108	; 0xb034
 8011320:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011322:	2301      	movs	r3, #1
 8011324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011326:	2300      	movs	r3, #0
 8011328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801132a:	2300      	movs	r3, #0
 801132c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801132e:	f107 0314 	add.w	r3, r7, #20
 8011332:	4619      	mov	r1, r3
 8011334:	484b      	ldr	r0, [pc, #300]	; (8011464 <MX_GPIO_Init+0x308>)
 8011336:	f001 fe67 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 801133a:	f44f 7320 	mov.w	r3, #640	; 0x280
 801133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011340:	2302      	movs	r3, #2
 8011342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011344:	2300      	movs	r3, #0
 8011346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011348:	2300      	movs	r3, #0
 801134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 801134c:	2306      	movs	r3, #6
 801134e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011350:	f107 0314 	add.w	r3, r7, #20
 8011354:	4619      	mov	r1, r3
 8011356:	4842      	ldr	r0, [pc, #264]	; (8011460 <MX_GPIO_Init+0x304>)
 8011358:	f001 fe56 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 801135c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8011360:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011362:	2302      	movs	r3, #2
 8011364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011366:	2300      	movs	r3, #0
 8011368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801136a:	2303      	movs	r3, #3
 801136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 801136e:	230a      	movs	r3, #10
 8011370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011372:	f107 0314 	add.w	r3, r7, #20
 8011376:	4619      	mov	r1, r3
 8011378:	4839      	ldr	r0, [pc, #228]	; (8011460 <MX_GPIO_Init+0x304>)
 801137a:	f001 fe45 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 801137e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8011382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011384:	2312      	movs	r3, #18
 8011386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011388:	2300      	movs	r3, #0
 801138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801138c:	2303      	movs	r3, #3
 801138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8011390:	2304      	movs	r3, #4
 8011392:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011394:	f107 0314 	add.w	r3, r7, #20
 8011398:	4619      	mov	r1, r3
 801139a:	4832      	ldr	r0, [pc, #200]	; (8011464 <MX_GPIO_Init+0x308>)
 801139c:	f001 fe34 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80113a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80113a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113a6:	2302      	movs	r3, #2
 80113a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113aa:	2300      	movs	r3, #0
 80113ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113ae:	2303      	movs	r3, #3
 80113b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80113b2:	2307      	movs	r3, #7
 80113b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80113b6:	f107 0314 	add.w	r3, r7, #20
 80113ba:	4619      	mov	r1, r3
 80113bc:	482a      	ldr	r0, [pc, #168]	; (8011468 <MX_GPIO_Init+0x30c>)
 80113be:	f001 fe23 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80113c2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80113c6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80113c8:	4b29      	ldr	r3, [pc, #164]	; (8011470 <MX_GPIO_Init+0x314>)
 80113ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113cc:	2300      	movs	r3, #0
 80113ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80113d0:	f107 0314 	add.w	r3, r7, #20
 80113d4:	4619      	mov	r1, r3
 80113d6:	4824      	ldr	r0, [pc, #144]	; (8011468 <MX_GPIO_Init+0x30c>)
 80113d8:	f001 fe16 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80113dc:	f243 0381 	movw	r3, #12417	; 0x3081
 80113e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80113e2:	2301      	movs	r3, #1
 80113e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113e6:	2300      	movs	r3, #0
 80113e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80113ea:	2300      	movs	r3, #0
 80113ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80113ee:	f107 0314 	add.w	r3, r7, #20
 80113f2:	4619      	mov	r1, r3
 80113f4:	481c      	ldr	r0, [pc, #112]	; (8011468 <MX_GPIO_Init+0x30c>)
 80113f6:	f001 fe07 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80113fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80113fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011400:	2301      	movs	r3, #1
 8011402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011404:	2300      	movs	r3, #0
 8011406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011408:	2300      	movs	r3, #0
 801140a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801140c:	f107 0314 	add.w	r3, r7, #20
 8011410:	4619      	mov	r1, r3
 8011412:	4816      	ldr	r0, [pc, #88]	; (801146c <MX_GPIO_Init+0x310>)
 8011414:	f001 fdf8 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8011418:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801141e:	4b14      	ldr	r3, [pc, #80]	; (8011470 <MX_GPIO_Init+0x314>)
 8011420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011422:	2300      	movs	r3, #0
 8011424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011426:	f107 0314 	add.w	r3, r7, #20
 801142a:	4619      	mov	r1, r3
 801142c:	480f      	ldr	r0, [pc, #60]	; (801146c <MX_GPIO_Init+0x310>)
 801142e:	f001 fdeb 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8011432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011438:	2300      	movs	r3, #0
 801143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801143c:	2300      	movs	r3, #0
 801143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011440:	f107 0314 	add.w	r3, r7, #20
 8011444:	4619      	mov	r1, r3
 8011446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801144a:	f001 fddd 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 801144e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011454:	2302      	movs	r3, #2
 8011456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011458:	2300      	movs	r3, #0
 801145a:	e00b      	b.n	8011474 <MX_GPIO_Init+0x318>
 801145c:	40021000 	.word	0x40021000
 8011460:	48001000 	.word	0x48001000
 8011464:	48000400 	.word	0x48000400
 8011468:	48000c00 	.word	0x48000c00
 801146c:	48000800 	.word	0x48000800
 8011470:	10110000 	.word	0x10110000
 8011474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011476:	2303      	movs	r3, #3
 8011478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801147a:	230a      	movs	r3, #10
 801147c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801147e:	f107 0314 	add.w	r3, r7, #20
 8011482:	4619      	mov	r1, r3
 8011484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011488:	f001 fdbe 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 801148c:	2302      	movs	r3, #2
 801148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011490:	2302      	movs	r3, #2
 8011492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011494:	2300      	movs	r3, #0
 8011496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011498:	2303      	movs	r3, #3
 801149a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801149c:	2305      	movs	r3, #5
 801149e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80114a0:	f107 0314 	add.w	r3, r7, #20
 80114a4:	4619      	mov	r1, r3
 80114a6:	481c      	ldr	r0, [pc, #112]	; (8011518 <MX_GPIO_Init+0x3bc>)
 80114a8:	f001 fdae 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80114ac:	2378      	movs	r3, #120	; 0x78
 80114ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114b0:	2302      	movs	r3, #2
 80114b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114b4:	2300      	movs	r3, #0
 80114b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80114b8:	2303      	movs	r3, #3
 80114ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80114bc:	2307      	movs	r3, #7
 80114be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80114c0:	f107 0314 	add.w	r3, r7, #20
 80114c4:	4619      	mov	r1, r3
 80114c6:	4814      	ldr	r0, [pc, #80]	; (8011518 <MX_GPIO_Init+0x3bc>)
 80114c8:	f001 fd9e 	bl	8013008 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80114cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80114d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80114d2:	2312      	movs	r3, #18
 80114d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114d6:	2300      	movs	r3, #0
 80114d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80114da:	2303      	movs	r3, #3
 80114dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80114de:	2304      	movs	r3, #4
 80114e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80114e2:	f107 0314 	add.w	r3, r7, #20
 80114e6:	4619      	mov	r1, r3
 80114e8:	480c      	ldr	r0, [pc, #48]	; (801151c <MX_GPIO_Init+0x3c0>)
 80114ea:	f001 fd8d 	bl	8013008 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80114ee:	2200      	movs	r2, #0
 80114f0:	2100      	movs	r1, #0
 80114f2:	2017      	movs	r0, #23
 80114f4:	f001 fcb3 	bl	8012e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80114f8:	2017      	movs	r0, #23
 80114fa:	f001 fccc 	bl	8012e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80114fe:	2200      	movs	r2, #0
 8011500:	2100      	movs	r1, #0
 8011502:	2028      	movs	r0, #40	; 0x28
 8011504:	f001 fcab 	bl	8012e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8011508:	2028      	movs	r0, #40	; 0x28
 801150a:	f001 fcc4 	bl	8012e96 <HAL_NVIC_EnableIRQ>

}
 801150e:	bf00      	nop
 8011510:	3728      	adds	r7, #40	; 0x28
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	48000c00 	.word	0x48000c00
 801151c:	48000400 	.word	0x48000400

08011520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011520:	b480      	push	{r7}
 8011522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011524:	b672      	cpsid	i
}
 8011526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011528:	e7fe      	b.n	8011528 <Error_Handler+0x8>
	...

0801152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801152c:	b480      	push	{r7}
 801152e:	b083      	sub	sp, #12
 8011530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011532:	4b0f      	ldr	r3, [pc, #60]	; (8011570 <HAL_MspInit+0x44>)
 8011534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011536:	4a0e      	ldr	r2, [pc, #56]	; (8011570 <HAL_MspInit+0x44>)
 8011538:	f043 0301 	orr.w	r3, r3, #1
 801153c:	6613      	str	r3, [r2, #96]	; 0x60
 801153e:	4b0c      	ldr	r3, [pc, #48]	; (8011570 <HAL_MspInit+0x44>)
 8011540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011542:	f003 0301 	and.w	r3, r3, #1
 8011546:	607b      	str	r3, [r7, #4]
 8011548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801154a:	4b09      	ldr	r3, [pc, #36]	; (8011570 <HAL_MspInit+0x44>)
 801154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801154e:	4a08      	ldr	r2, [pc, #32]	; (8011570 <HAL_MspInit+0x44>)
 8011550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011554:	6593      	str	r3, [r2, #88]	; 0x58
 8011556:	4b06      	ldr	r3, [pc, #24]	; (8011570 <HAL_MspInit+0x44>)
 8011558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801155e:	603b      	str	r3, [r7, #0]
 8011560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011562:	bf00      	nop
 8011564:	370c      	adds	r7, #12
 8011566:	46bd      	mov	sp, r7
 8011568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156c:	4770      	bx	lr
 801156e:	bf00      	nop
 8011570:	40021000 	.word	0x40021000

08011574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b0ae      	sub	sp, #184	; 0xb8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801157c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011580:	2200      	movs	r2, #0
 8011582:	601a      	str	r2, [r3, #0]
 8011584:	605a      	str	r2, [r3, #4]
 8011586:	609a      	str	r2, [r3, #8]
 8011588:	60da      	str	r2, [r3, #12]
 801158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801158c:	f107 031c 	add.w	r3, r7, #28
 8011590:	2288      	movs	r2, #136	; 0x88
 8011592:	2100      	movs	r1, #0
 8011594:	4618      	mov	r0, r3
 8011596:	f005 fef6 	bl	8017386 <memset>
  if(hadc->Instance==ADC1)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	4a42      	ldr	r2, [pc, #264]	; (80116a8 <HAL_ADC_MspInit+0x134>)
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d17d      	bne.n	80116a0 <HAL_ADC_MspInit+0x12c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80115a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80115a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80115aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80115ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80115b2:	2301      	movs	r3, #1
 80115b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80115b6:	2301      	movs	r3, #1
 80115b8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80115ba:	2318      	movs	r3, #24
 80115bc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80115be:	2307      	movs	r3, #7
 80115c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80115c2:	2302      	movs	r3, #2
 80115c4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80115c6:	2302      	movs	r3, #2
 80115c8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80115ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80115ce:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80115d0:	f107 031c 	add.w	r3, r7, #28
 80115d4:	4618      	mov	r0, r3
 80115d6:	f002 fe73 	bl	80142c0 <HAL_RCCEx_PeriphCLKConfig>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d001      	beq.n	80115e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80115e0:	f7ff ff9e 	bl	8011520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80115e4:	4b31      	ldr	r3, [pc, #196]	; (80116ac <HAL_ADC_MspInit+0x138>)
 80115e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115e8:	4a30      	ldr	r2, [pc, #192]	; (80116ac <HAL_ADC_MspInit+0x138>)
 80115ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80115ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80115f0:	4b2e      	ldr	r3, [pc, #184]	; (80116ac <HAL_ADC_MspInit+0x138>)
 80115f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80115f8:	61bb      	str	r3, [r7, #24]
 80115fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80115fc:	4b2b      	ldr	r3, [pc, #172]	; (80116ac <HAL_ADC_MspInit+0x138>)
 80115fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011600:	4a2a      	ldr	r2, [pc, #168]	; (80116ac <HAL_ADC_MspInit+0x138>)
 8011602:	f043 0304 	orr.w	r3, r3, #4
 8011606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011608:	4b28      	ldr	r3, [pc, #160]	; (80116ac <HAL_ADC_MspInit+0x138>)
 801160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801160c:	f003 0304 	and.w	r3, r3, #4
 8011610:	617b      	str	r3, [r7, #20]
 8011612:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011614:	4b25      	ldr	r3, [pc, #148]	; (80116ac <HAL_ADC_MspInit+0x138>)
 8011616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011618:	4a24      	ldr	r2, [pc, #144]	; (80116ac <HAL_ADC_MspInit+0x138>)
 801161a:	f043 0301 	orr.w	r3, r3, #1
 801161e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011620:	4b22      	ldr	r3, [pc, #136]	; (80116ac <HAL_ADC_MspInit+0x138>)
 8011622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011624:	f003 0301 	and.w	r3, r3, #1
 8011628:	613b      	str	r3, [r7, #16]
 801162a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801162c:	4b1f      	ldr	r3, [pc, #124]	; (80116ac <HAL_ADC_MspInit+0x138>)
 801162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011630:	4a1e      	ldr	r2, [pc, #120]	; (80116ac <HAL_ADC_MspInit+0x138>)
 8011632:	f043 0302 	orr.w	r3, r3, #2
 8011636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011638:	4b1c      	ldr	r3, [pc, #112]	; (80116ac <HAL_ADC_MspInit+0x138>)
 801163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801163c:	f003 0302 	and.w	r3, r3, #2
 8011640:	60fb      	str	r3, [r7, #12]
 8011642:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8011644:	233f      	movs	r3, #63	; 0x3f
 8011646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 801164a:	230b      	movs	r3, #11
 801164c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011650:	2300      	movs	r3, #0
 8011652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011656:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801165a:	4619      	mov	r1, r3
 801165c:	4814      	ldr	r0, [pc, #80]	; (80116b0 <HAL_ADC_MspInit+0x13c>)
 801165e:	f001 fcd3 	bl	8013008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8011662:	2310      	movs	r3, #16
 8011664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8011668:	230b      	movs	r3, #11
 801166a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801166e:	2300      	movs	r3, #0
 8011670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8011674:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011678:	4619      	mov	r1, r3
 801167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801167e:	f001 fcc3 	bl	8013008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8011682:	2302      	movs	r3, #2
 8011684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8011688:	230b      	movs	r3, #11
 801168a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801168e:	2300      	movs	r3, #0
 8011690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8011694:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011698:	4619      	mov	r1, r3
 801169a:	4806      	ldr	r0, [pc, #24]	; (80116b4 <HAL_ADC_MspInit+0x140>)
 801169c:	f001 fcb4 	bl	8013008 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80116a0:	bf00      	nop
 80116a2:	37b8      	adds	r7, #184	; 0xb8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	50040000 	.word	0x50040000
 80116ac:	40021000 	.word	0x40021000
 80116b0:	48000800 	.word	0x48000800
 80116b4:	48000400 	.word	0x48000400

080116b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b0ac      	sub	sp, #176	; 0xb0
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80116c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80116c4:	2200      	movs	r2, #0
 80116c6:	601a      	str	r2, [r3, #0]
 80116c8:	605a      	str	r2, [r3, #4]
 80116ca:	609a      	str	r2, [r3, #8]
 80116cc:	60da      	str	r2, [r3, #12]
 80116ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80116d0:	f107 0314 	add.w	r3, r7, #20
 80116d4:	2288      	movs	r2, #136	; 0x88
 80116d6:	2100      	movs	r1, #0
 80116d8:	4618      	mov	r0, r3
 80116da:	f005 fe54 	bl	8017386 <memset>
  if(huart->Instance==USART1)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	4a21      	ldr	r2, [pc, #132]	; (8011768 <HAL_UART_MspInit+0xb0>)
 80116e4:	4293      	cmp	r3, r2
 80116e6:	d13a      	bne.n	801175e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80116e8:	2301      	movs	r3, #1
 80116ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80116ec:	2300      	movs	r3, #0
 80116ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80116f0:	f107 0314 	add.w	r3, r7, #20
 80116f4:	4618      	mov	r0, r3
 80116f6:	f002 fde3 	bl	80142c0 <HAL_RCCEx_PeriphCLKConfig>
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d001      	beq.n	8011704 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8011700:	f7ff ff0e 	bl	8011520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8011704:	4b19      	ldr	r3, [pc, #100]	; (801176c <HAL_UART_MspInit+0xb4>)
 8011706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011708:	4a18      	ldr	r2, [pc, #96]	; (801176c <HAL_UART_MspInit+0xb4>)
 801170a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801170e:	6613      	str	r3, [r2, #96]	; 0x60
 8011710:	4b16      	ldr	r3, [pc, #88]	; (801176c <HAL_UART_MspInit+0xb4>)
 8011712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011718:	613b      	str	r3, [r7, #16]
 801171a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801171c:	4b13      	ldr	r3, [pc, #76]	; (801176c <HAL_UART_MspInit+0xb4>)
 801171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011720:	4a12      	ldr	r2, [pc, #72]	; (801176c <HAL_UART_MspInit+0xb4>)
 8011722:	f043 0302 	orr.w	r3, r3, #2
 8011726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011728:	4b10      	ldr	r3, [pc, #64]	; (801176c <HAL_UART_MspInit+0xb4>)
 801172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801172c:	f003 0302 	and.w	r3, r3, #2
 8011730:	60fb      	str	r3, [r7, #12]
 8011732:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8011734:	23c0      	movs	r3, #192	; 0xc0
 8011736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801173a:	2302      	movs	r3, #2
 801173c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011740:	2300      	movs	r3, #0
 8011742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011746:	2303      	movs	r3, #3
 8011748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801174c:	2307      	movs	r3, #7
 801174e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011752:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011756:	4619      	mov	r1, r3
 8011758:	4805      	ldr	r0, [pc, #20]	; (8011770 <HAL_UART_MspInit+0xb8>)
 801175a:	f001 fc55 	bl	8013008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 801175e:	bf00      	nop
 8011760:	37b0      	adds	r7, #176	; 0xb0
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	40013800 	.word	0x40013800
 801176c:	40021000 	.word	0x40021000
 8011770:	48000400 	.word	0x48000400

08011774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011774:	b480      	push	{r7}
 8011776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8011778:	e7fe      	b.n	8011778 <NMI_Handler+0x4>

0801177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801177a:	b480      	push	{r7}
 801177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801177e:	e7fe      	b.n	801177e <HardFault_Handler+0x4>

08011780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011780:	b480      	push	{r7}
 8011782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011784:	e7fe      	b.n	8011784 <MemManage_Handler+0x4>

08011786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011786:	b480      	push	{r7}
 8011788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801178a:	e7fe      	b.n	801178a <BusFault_Handler+0x4>

0801178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801178c:	b480      	push	{r7}
 801178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011790:	e7fe      	b.n	8011790 <UsageFault_Handler+0x4>

08011792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011792:	b480      	push	{r7}
 8011794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011796:	bf00      	nop
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr

080117a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80117a0:	b480      	push	{r7}
 80117a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80117a4:	bf00      	nop
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr

080117ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80117ae:	b480      	push	{r7}
 80117b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80117b2:	bf00      	nop
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr

080117bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80117c0:	f000 fa86 	bl	8011cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80117c4:	bf00      	nop
 80117c6:	bd80      	pop	{r7, pc}

080117c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80117cc:	2020      	movs	r0, #32
 80117ce:	f001 ff03 	bl	80135d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80117d2:	4806      	ldr	r0, [pc, #24]	; (80117ec <EXTI9_5_IRQHandler+0x24>)
 80117d4:	f001 fbe8 	bl	8012fa8 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80117d8:	2080      	movs	r0, #128	; 0x80
 80117da:	f001 fefd 	bl	80135d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80117de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80117e2:	f001 fef9 	bl	80135d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80117e6:	bf00      	nop
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	200004b4 	.word	0x200004b4

080117f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80117f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80117f8:	f001 feee 	bl	80135d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80117fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011800:	f001 feea 	bl	80135d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8011804:	4806      	ldr	r0, [pc, #24]	; (8011820 <EXTI15_10_IRQHandler+0x30>)
 8011806:	f001 fbcf 	bl	8012fa8 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 801180a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801180e:	f001 fee3 	bl	80135d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8011812:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011816:	f001 fedf 	bl	80135d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801181a:	bf00      	nop
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	2000000c 	.word	0x2000000c

08011824 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8011828:	4802      	ldr	r0, [pc, #8]	; (8011834 <SPI3_IRQHandler+0x10>)
 801182a:	f003 fcc5 	bl	80151b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 801182e:	bf00      	nop
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	200005a4 	.word	0x200005a4

08011838 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b086      	sub	sp, #24
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011844:	2300      	movs	r3, #0
 8011846:	617b      	str	r3, [r7, #20]
 8011848:	e00a      	b.n	8011860 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801184a:	f3af 8000 	nop.w
 801184e:	4601      	mov	r1, r0
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	1c5a      	adds	r2, r3, #1
 8011854:	60ba      	str	r2, [r7, #8]
 8011856:	b2ca      	uxtb	r2, r1
 8011858:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	3301      	adds	r3, #1
 801185e:	617b      	str	r3, [r7, #20]
 8011860:	697a      	ldr	r2, [r7, #20]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	429a      	cmp	r2, r3
 8011866:	dbf0      	blt.n	801184a <_read+0x12>
	}

return len;
 8011868:	687b      	ldr	r3, [r7, #4]
}
 801186a:	4618      	mov	r0, r3
 801186c:	3718      	adds	r7, #24
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}

08011872 <_close>:
	}
	return len;
}

int _close(int file)
{
 8011872:	b480      	push	{r7}
 8011874:	b083      	sub	sp, #12
 8011876:	af00      	add	r7, sp, #0
 8011878:	6078      	str	r0, [r7, #4]
	return -1;
 801187a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801187e:	4618      	mov	r0, r3
 8011880:	370c      	adds	r7, #12
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr

0801188a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801188a:	b480      	push	{r7}
 801188c:	b083      	sub	sp, #12
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
 8011892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801189a:	605a      	str	r2, [r3, #4]
	return 0;
 801189c:	2300      	movs	r3, #0
}
 801189e:	4618      	mov	r0, r3
 80118a0:	370c      	adds	r7, #12
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr

080118aa <_isatty>:

int _isatty(int file)
{
 80118aa:	b480      	push	{r7}
 80118ac:	b083      	sub	sp, #12
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	6078      	str	r0, [r7, #4]
	return 1;
 80118b2:	2301      	movs	r3, #1
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	370c      	adds	r7, #12
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr

080118c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80118c0:	b480      	push	{r7}
 80118c2:	b085      	sub	sp, #20
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	60f8      	str	r0, [r7, #12]
 80118c8:	60b9      	str	r1, [r7, #8]
 80118ca:	607a      	str	r2, [r7, #4]
	return 0;
 80118cc:	2300      	movs	r3, #0
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3714      	adds	r7, #20
 80118d2:	46bd      	mov	sp, r7
 80118d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d8:	4770      	bx	lr
	...

080118dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b086      	sub	sp, #24
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80118e4:	4a14      	ldr	r2, [pc, #80]	; (8011938 <_sbrk+0x5c>)
 80118e6:	4b15      	ldr	r3, [pc, #84]	; (801193c <_sbrk+0x60>)
 80118e8:	1ad3      	subs	r3, r2, r3
 80118ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80118f0:	4b13      	ldr	r3, [pc, #76]	; (8011940 <_sbrk+0x64>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d102      	bne.n	80118fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80118f8:	4b11      	ldr	r3, [pc, #68]	; (8011940 <_sbrk+0x64>)
 80118fa:	4a12      	ldr	r2, [pc, #72]	; (8011944 <_sbrk+0x68>)
 80118fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80118fe:	4b10      	ldr	r3, [pc, #64]	; (8011940 <_sbrk+0x64>)
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	4413      	add	r3, r2
 8011906:	693a      	ldr	r2, [r7, #16]
 8011908:	429a      	cmp	r2, r3
 801190a:	d207      	bcs.n	801191c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801190c:	f005 fb36 	bl	8016f7c <__errno>
 8011910:	4603      	mov	r3, r0
 8011912:	220c      	movs	r2, #12
 8011914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8011916:	f04f 33ff 	mov.w	r3, #4294967295
 801191a:	e009      	b.n	8011930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801191c:	4b08      	ldr	r3, [pc, #32]	; (8011940 <_sbrk+0x64>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8011922:	4b07      	ldr	r3, [pc, #28]	; (8011940 <_sbrk+0x64>)
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	4413      	add	r3, r2
 801192a:	4a05      	ldr	r2, [pc, #20]	; (8011940 <_sbrk+0x64>)
 801192c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801192e:	68fb      	ldr	r3, [r7, #12]
}
 8011930:	4618      	mov	r0, r3
 8011932:	3718      	adds	r7, #24
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	20018000 	.word	0x20018000
 801193c:	00000400 	.word	0x00000400
 8011940:	200001ac 	.word	0x200001ac
 8011944:	20000630 	.word	0x20000630

08011948 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8011948:	b480      	push	{r7}
 801194a:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 801194c:	4b16      	ldr	r3, [pc, #88]	; (80119a8 <SystemInit+0x60>)
 801194e:	4a17      	ldr	r2, [pc, #92]	; (80119ac <SystemInit+0x64>)
 8011950:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8011952:	4b15      	ldr	r3, [pc, #84]	; (80119a8 <SystemInit+0x60>)
 8011954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011958:	4a13      	ldr	r2, [pc, #76]	; (80119a8 <SystemInit+0x60>)
 801195a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801195e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8011962:	4b13      	ldr	r3, [pc, #76]	; (80119b0 <SystemInit+0x68>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	4a12      	ldr	r2, [pc, #72]	; (80119b0 <SystemInit+0x68>)
 8011968:	f043 0301 	orr.w	r3, r3, #1
 801196c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801196e:	4b10      	ldr	r3, [pc, #64]	; (80119b0 <SystemInit+0x68>)
 8011970:	2200      	movs	r2, #0
 8011972:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8011974:	4b0e      	ldr	r3, [pc, #56]	; (80119b0 <SystemInit+0x68>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	4a0d      	ldr	r2, [pc, #52]	; (80119b0 <SystemInit+0x68>)
 801197a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 801197e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8011982:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8011984:	4b0a      	ldr	r3, [pc, #40]	; (80119b0 <SystemInit+0x68>)
 8011986:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801198a:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801198c:	4b08      	ldr	r3, [pc, #32]	; (80119b0 <SystemInit+0x68>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	4a07      	ldr	r2, [pc, #28]	; (80119b0 <SystemInit+0x68>)
 8011992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011996:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8011998:	4b05      	ldr	r3, [pc, #20]	; (80119b0 <SystemInit+0x68>)
 801199a:	2200      	movs	r2, #0
 801199c:	619a      	str	r2, [r3, #24]
}
 801199e:	bf00      	nop
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr
 80119a8:	e000ed00 	.word	0xe000ed00
 80119ac:	08010000 	.word	0x08010000
 80119b0:	40021000 	.word	0x40021000

080119b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80119b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80119ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80119b8:	f7ff ffc6 	bl	8011948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80119bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80119be:	e003      	b.n	80119c8 <LoopCopyDataInit>

080119c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80119c0:	4b0b      	ldr	r3, [pc, #44]	; (80119f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80119c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80119c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80119c6:	3104      	adds	r1, #4

080119c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80119c8:	480a      	ldr	r0, [pc, #40]	; (80119f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80119ca:	4b0b      	ldr	r3, [pc, #44]	; (80119f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80119cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80119ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80119d0:	d3f6      	bcc.n	80119c0 <CopyDataInit>
	ldr	r2, =_sbss
 80119d2:	4a0a      	ldr	r2, [pc, #40]	; (80119fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80119d4:	e002      	b.n	80119dc <LoopFillZerobss>

080119d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80119d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80119d8:	f842 3b04 	str.w	r3, [r2], #4

080119dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80119dc:	4b08      	ldr	r3, [pc, #32]	; (8011a00 <LoopForever+0x16>)
	cmp	r2, r3
 80119de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80119e0:	d3f9      	bcc.n	80119d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80119e2:	f005 fc9b 	bl	801731c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80119e6:	f7ff faab 	bl	8010f40 <main>

080119ea <LoopForever>:

LoopForever:
    b LoopForever
 80119ea:	e7fe      	b.n	80119ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80119ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80119f0:	080182e8 	.word	0x080182e8
	ldr	r0, =_sdata
 80119f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80119f8:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80119fc:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8011a00:	2000062c 	.word	0x2000062c

08011a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8011a04:	e7fe      	b.n	8011a04 <ADC1_2_IRQHandler>
	...

08011a08 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	4603      	mov	r3, r0
 8011a10:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8011a12:	79fb      	ldrb	r3, [r7, #7]
 8011a14:	4a06      	ldr	r2, [pc, #24]	; (8011a30 <BSP_LED_Toggle+0x28>)
 8011a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011a1e:	4611      	mov	r1, r2
 8011a20:	4618      	mov	r0, r3
 8011a22:	f001 fdbf 	bl	80135a4 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8011a26:	2300      	movs	r3, #0
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}
 8011a30:	20000008 	.word	0x20000008

08011a34 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8011a3e:	4b12      	ldr	r3, [pc, #72]	; (8011a88 <BSP_SPI3_Init+0x54>)
 8011a40:	4a12      	ldr	r2, [pc, #72]	; (8011a8c <BSP_SPI3_Init+0x58>)
 8011a42:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8011a44:	4b12      	ldr	r3, [pc, #72]	; (8011a90 <BSP_SPI3_Init+0x5c>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	1c5a      	adds	r2, r3, #1
 8011a4a:	4911      	ldr	r1, [pc, #68]	; (8011a90 <BSP_SPI3_Init+0x5c>)
 8011a4c:	600a      	str	r2, [r1, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d114      	bne.n	8011a7c <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8011a52:	480d      	ldr	r0, [pc, #52]	; (8011a88 <BSP_SPI3_Init+0x54>)
 8011a54:	f003 fcba 	bl	80153cc <HAL_SPI_GetState>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d10e      	bne.n	8011a7c <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8011a5e:	480a      	ldr	r0, [pc, #40]	; (8011a88 <BSP_SPI3_Init+0x54>)
 8011a60:	f000 f882 	bl	8011b68 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d108      	bne.n	8011a7c <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8011a6a:	4807      	ldr	r0, [pc, #28]	; (8011a88 <BSP_SPI3_Init+0x54>)
 8011a6c:	f000 f83a 	bl	8011ae4 <MX_SPI3_Init>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d002      	beq.n	8011a7c <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8011a76:	f06f 0307 	mvn.w	r3, #7
 8011a7a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8011a7c:	687b      	ldr	r3, [r7, #4]
}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3708      	adds	r7, #8
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	200005a4 	.word	0x200005a4
 8011a8c:	40003c00 	.word	0x40003c00
 8011a90:	200001b0 	.word	0x200001b0

08011a94 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b088      	sub	sp, #32
 8011a98:	af02      	add	r7, sp, #8
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8011aa6:	88fb      	ldrh	r3, [r7, #6]
 8011aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011aac:	9200      	str	r2, [sp, #0]
 8011aae:	68ba      	ldr	r2, [r7, #8]
 8011ab0:	68f9      	ldr	r1, [r7, #12]
 8011ab2:	4807      	ldr	r0, [pc, #28]	; (8011ad0 <BSP_SPI3_SendRecv+0x3c>)
 8011ab4:	f003 f96d 	bl	8014d92 <HAL_SPI_TransmitReceive>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d002      	beq.n	8011ac4 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8011abe:	f06f 0305 	mvn.w	r3, #5
 8011ac2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8011ac4:	697b      	ldr	r3, [r7, #20]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3718      	adds	r7, #24
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	200005a4 	.word	0x200005a4

08011ad4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011ad8:	f000 f90e 	bl	8011cf8 <HAL_GetTick>
 8011adc:	4603      	mov	r3, r0
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	bd80      	pop	{r7, pc}
	...

08011ae4 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011aec:	2300      	movs	r3, #0
 8011aee:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	4a1c      	ldr	r2, [pc, #112]	; (8011b64 <MX_SPI3_Init+0x80>)
 8011af4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011afc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2200      	movs	r2, #0
 8011b02:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8011b0a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b1e:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2238      	movs	r2, #56	; 0x38
 8011b24:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2200      	movs	r2, #0
 8011b2a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2200      	movs	r2, #0
 8011b36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2207      	movs	r2, #7
 8011b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2200      	movs	r2, #0
 8011b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2208      	movs	r2, #8
 8011b48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f003 f874 	bl	8014c38 <HAL_SPI_Init>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d001      	beq.n	8011b5a <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8011b56:	2301      	movs	r3, #1
 8011b58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3710      	adds	r7, #16
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	40003c00 	.word	0x40003c00

08011b68 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b08a      	sub	sp, #40	; 0x28
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8011b70:	4b2b      	ldr	r3, [pc, #172]	; (8011c20 <SPI3_MspInit+0xb8>)
 8011b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b74:	4a2a      	ldr	r2, [pc, #168]	; (8011c20 <SPI3_MspInit+0xb8>)
 8011b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8011b7c:	4b28      	ldr	r3, [pc, #160]	; (8011c20 <SPI3_MspInit+0xb8>)
 8011b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b84:	613b      	str	r3, [r7, #16]
 8011b86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011b88:	4b25      	ldr	r3, [pc, #148]	; (8011c20 <SPI3_MspInit+0xb8>)
 8011b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b8c:	4a24      	ldr	r2, [pc, #144]	; (8011c20 <SPI3_MspInit+0xb8>)
 8011b8e:	f043 0304 	orr.w	r3, r3, #4
 8011b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b94:	4b22      	ldr	r3, [pc, #136]	; (8011c20 <SPI3_MspInit+0xb8>)
 8011b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b98:	f003 0304 	and.w	r3, r3, #4
 8011b9c:	60fb      	str	r3, [r7, #12]
 8011b9e:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8011ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ba6:	2302      	movs	r3, #2
 8011ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011baa:	2300      	movs	r3, #0
 8011bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bae:	2303      	movs	r3, #3
 8011bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8011bb2:	2306      	movs	r3, #6
 8011bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8011bb6:	f107 0314 	add.w	r3, r7, #20
 8011bba:	4619      	mov	r1, r3
 8011bbc:	4819      	ldr	r0, [pc, #100]	; (8011c24 <SPI3_MspInit+0xbc>)
 8011bbe:	f001 fa23 	bl	8013008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8011bc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bc8:	2302      	movs	r3, #2
 8011bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bd0:	2303      	movs	r3, #3
 8011bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8011bd4:	2306      	movs	r3, #6
 8011bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8011bd8:	f107 0314 	add.w	r3, r7, #20
 8011bdc:	4619      	mov	r1, r3
 8011bde:	4811      	ldr	r0, [pc, #68]	; (8011c24 <SPI3_MspInit+0xbc>)
 8011be0:	f001 fa12 	bl	8013008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8011be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bea:	2302      	movs	r3, #2
 8011bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bf2:	2303      	movs	r3, #3
 8011bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8011bf6:	2306      	movs	r3, #6
 8011bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8011bfa:	f107 0314 	add.w	r3, r7, #20
 8011bfe:	4619      	mov	r1, r3
 8011c00:	4808      	ldr	r0, [pc, #32]	; (8011c24 <SPI3_MspInit+0xbc>)
 8011c02:	f001 fa01 	bl	8013008 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8011c06:	2200      	movs	r2, #0
 8011c08:	2100      	movs	r1, #0
 8011c0a:	2033      	movs	r0, #51	; 0x33
 8011c0c:	f001 f927 	bl	8012e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8011c10:	2033      	movs	r0, #51	; 0x33
 8011c12:	f001 f940 	bl	8012e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8011c16:	bf00      	nop
 8011c18:	3728      	adds	r7, #40	; 0x28
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	40021000 	.word	0x40021000
 8011c24:	48000800 	.word	0x48000800

08011c28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011c32:	2003      	movs	r0, #3
 8011c34:	f001 f908 	bl	8012e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011c38:	2000      	movs	r0, #0
 8011c3a:	f000 f80d 	bl	8011c58 <HAL_InitTick>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d002      	beq.n	8011c4a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8011c44:	2301      	movs	r3, #1
 8011c46:	71fb      	strb	r3, [r7, #7]
 8011c48:	e001      	b.n	8011c4e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011c4a:	f7ff fc6f 	bl	801152c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8011c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3708      	adds	r7, #8
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8011c60:	2300      	movs	r3, #0
 8011c62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8011c64:	4b17      	ldr	r3, [pc, #92]	; (8011cc4 <HAL_InitTick+0x6c>)
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d023      	beq.n	8011cb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8011c6c:	4b16      	ldr	r3, [pc, #88]	; (8011cc8 <HAL_InitTick+0x70>)
 8011c6e:	681a      	ldr	r2, [r3, #0]
 8011c70:	4b14      	ldr	r3, [pc, #80]	; (8011cc4 <HAL_InitTick+0x6c>)
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	4619      	mov	r1, r3
 8011c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c82:	4618      	mov	r0, r3
 8011c84:	f001 f915 	bl	8012eb2 <HAL_SYSTICK_Config>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10f      	bne.n	8011cae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2b0f      	cmp	r3, #15
 8011c92:	d809      	bhi.n	8011ca8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011c94:	2200      	movs	r2, #0
 8011c96:	6879      	ldr	r1, [r7, #4]
 8011c98:	f04f 30ff 	mov.w	r0, #4294967295
 8011c9c:	f001 f8df 	bl	8012e5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011ca0:	4a0a      	ldr	r2, [pc, #40]	; (8011ccc <HAL_InitTick+0x74>)
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6013      	str	r3, [r2, #0]
 8011ca6:	e007      	b.n	8011cb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	73fb      	strb	r3, [r7, #15]
 8011cac:	e004      	b.n	8011cb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8011cae:	2301      	movs	r3, #1
 8011cb0:	73fb      	strb	r3, [r7, #15]
 8011cb2:	e001      	b.n	8011cb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8011cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3710      	adds	r7, #16
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	20000018 	.word	0x20000018
 8011cc8:	20000004 	.word	0x20000004
 8011ccc:	20000014 	.word	0x20000014

08011cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8011cd4:	4b06      	ldr	r3, [pc, #24]	; (8011cf0 <HAL_IncTick+0x20>)
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	461a      	mov	r2, r3
 8011cda:	4b06      	ldr	r3, [pc, #24]	; (8011cf4 <HAL_IncTick+0x24>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	4413      	add	r3, r2
 8011ce0:	4a04      	ldr	r2, [pc, #16]	; (8011cf4 <HAL_IncTick+0x24>)
 8011ce2:	6013      	str	r3, [r2, #0]
}
 8011ce4:	bf00      	nop
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr
 8011cee:	bf00      	nop
 8011cf0:	20000018 	.word	0x20000018
 8011cf4:	20000608 	.word	0x20000608

08011cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8011cfc:	4b03      	ldr	r3, [pc, #12]	; (8011d0c <HAL_GetTick+0x14>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	46bd      	mov	sp, r7
 8011d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d08:	4770      	bx	lr
 8011d0a:	bf00      	nop
 8011d0c:	20000608 	.word	0x20000608

08011d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011d18:	f7ff ffee 	bl	8011cf8 <HAL_GetTick>
 8011d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d28:	d005      	beq.n	8011d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8011d2a:	4b0a      	ldr	r3, [pc, #40]	; (8011d54 <HAL_Delay+0x44>)
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	461a      	mov	r2, r3
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	4413      	add	r3, r2
 8011d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011d36:	bf00      	nop
 8011d38:	f7ff ffde 	bl	8011cf8 <HAL_GetTick>
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	1ad3      	subs	r3, r2, r3
 8011d42:	68fa      	ldr	r2, [r7, #12]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d8f7      	bhi.n	8011d38 <HAL_Delay+0x28>
  {
  }
}
 8011d48:	bf00      	nop
 8011d4a:	bf00      	nop
 8011d4c:	3710      	adds	r7, #16
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	20000018 	.word	0x20000018

08011d58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b083      	sub	sp, #12
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	689b      	ldr	r3, [r3, #8]
 8011d66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	431a      	orrs	r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	609a      	str	r2, [r3, #8]
}
 8011d72:	bf00      	nop
 8011d74:	370c      	adds	r7, #12
 8011d76:	46bd      	mov	sp, r7
 8011d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7c:	4770      	bx	lr

08011d7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8011d7e:	b480      	push	{r7}
 8011d80:	b083      	sub	sp, #12
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
 8011d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	689b      	ldr	r3, [r3, #8]
 8011d8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	431a      	orrs	r2, r3
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	609a      	str	r2, [r3, #8]
}
 8011d98:	bf00      	nop
 8011d9a:	370c      	adds	r7, #12
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr

08011da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	689b      	ldr	r3, [r3, #8]
 8011db0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	370c      	adds	r7, #12
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr

08011dc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b087      	sub	sp, #28
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	607a      	str	r2, [r7, #4]
 8011dcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	3360      	adds	r3, #96	; 0x60
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	009b      	lsls	r3, r3, #2
 8011dd8:	4413      	add	r3, r2
 8011dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	4b08      	ldr	r3, [pc, #32]	; (8011e04 <LL_ADC_SetOffset+0x44>)
 8011de2:	4013      	ands	r3, r2
 8011de4:	687a      	ldr	r2, [r7, #4]
 8011de6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8011dea:	683a      	ldr	r2, [r7, #0]
 8011dec:	430a      	orrs	r2, r1
 8011dee:	4313      	orrs	r3, r2
 8011df0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8011df8:	bf00      	nop
 8011dfa:	371c      	adds	r7, #28
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr
 8011e04:	03fff000 	.word	0x03fff000

08011e08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b085      	sub	sp, #20
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	3360      	adds	r3, #96	; 0x60
 8011e16:	461a      	mov	r2, r3
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	4413      	add	r3, r2
 8011e1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3714      	adds	r7, #20
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr

08011e34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b087      	sub	sp, #28
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	3360      	adds	r3, #96	; 0x60
 8011e44:	461a      	mov	r2, r3
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	009b      	lsls	r3, r3, #2
 8011e4a:	4413      	add	r3, r2
 8011e4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	431a      	orrs	r2, r3
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8011e5e:	bf00      	nop
 8011e60:	371c      	adds	r7, #28
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr

08011e6a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8011e6a:	b480      	push	{r7}
 8011e6c:	b087      	sub	sp, #28
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	60f8      	str	r0, [r7, #12]
 8011e72:	60b9      	str	r1, [r7, #8]
 8011e74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	3330      	adds	r3, #48	; 0x30
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	0a1b      	lsrs	r3, r3, #8
 8011e80:	009b      	lsls	r3, r3, #2
 8011e82:	f003 030c 	and.w	r3, r3, #12
 8011e86:	4413      	add	r3, r2
 8011e88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	681a      	ldr	r2, [r3, #0]
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	f003 031f 	and.w	r3, r3, #31
 8011e94:	211f      	movs	r1, #31
 8011e96:	fa01 f303 	lsl.w	r3, r1, r3
 8011e9a:	43db      	mvns	r3, r3
 8011e9c:	401a      	ands	r2, r3
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	0e9b      	lsrs	r3, r3, #26
 8011ea2:	f003 011f 	and.w	r1, r3, #31
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	f003 031f 	and.w	r3, r3, #31
 8011eac:	fa01 f303 	lsl.w	r3, r1, r3
 8011eb0:	431a      	orrs	r2, r3
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8011eb6:	bf00      	nop
 8011eb8:	371c      	adds	r7, #28
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec0:	4770      	bx	lr

08011ec2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8011ec2:	b480      	push	{r7}
 8011ec4:	b087      	sub	sp, #28
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	60f8      	str	r0, [r7, #12]
 8011eca:	60b9      	str	r1, [r7, #8]
 8011ecc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	3314      	adds	r3, #20
 8011ed2:	461a      	mov	r2, r3
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	0e5b      	lsrs	r3, r3, #25
 8011ed8:	009b      	lsls	r3, r3, #2
 8011eda:	f003 0304 	and.w	r3, r3, #4
 8011ede:	4413      	add	r3, r2
 8011ee0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	0d1b      	lsrs	r3, r3, #20
 8011eea:	f003 031f 	and.w	r3, r3, #31
 8011eee:	2107      	movs	r1, #7
 8011ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8011ef4:	43db      	mvns	r3, r3
 8011ef6:	401a      	ands	r2, r3
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	0d1b      	lsrs	r3, r3, #20
 8011efc:	f003 031f 	and.w	r3, r3, #31
 8011f00:	6879      	ldr	r1, [r7, #4]
 8011f02:	fa01 f303 	lsl.w	r3, r1, r3
 8011f06:	431a      	orrs	r2, r3
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8011f0c:	bf00      	nop
 8011f0e:	371c      	adds	r7, #28
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b085      	sub	sp, #20
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f30:	43db      	mvns	r3, r3
 8011f32:	401a      	ands	r2, r3
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f003 0318 	and.w	r3, r3, #24
 8011f3a:	4908      	ldr	r1, [pc, #32]	; (8011f5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8011f3c:	40d9      	lsrs	r1, r3
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	400b      	ands	r3, r1
 8011f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f46:	431a      	orrs	r2, r3
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8011f4e:	bf00      	nop
 8011f50:	3714      	adds	r7, #20
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr
 8011f5a:	bf00      	nop
 8011f5c:	0007ffff 	.word	0x0007ffff

08011f60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8011f60:	b480      	push	{r7}
 8011f62:	b083      	sub	sp, #12
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8011f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	6093      	str	r3, [r2, #8]
}
 8011f78:	bf00      	nop
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr

08011f84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8011f84:	b480      	push	{r7}
 8011f86:	b083      	sub	sp, #12
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	689b      	ldr	r3, [r3, #8]
 8011f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f98:	d101      	bne.n	8011f9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	e000      	b.n	8011fa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8011f9e:	2300      	movs	r3, #0
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	370c      	adds	r7, #12
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011faa:	4770      	bx	lr

08011fac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8011fac:	b480      	push	{r7}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	689b      	ldr	r3, [r3, #8]
 8011fb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8011fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011fc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8011fc8:	bf00      	nop
 8011fca:	370c      	adds	r7, #12
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr

08011fd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	b083      	sub	sp, #12
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	689b      	ldr	r3, [r3, #8]
 8011fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011fe8:	d101      	bne.n	8011fee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8011fea:	2301      	movs	r3, #1
 8011fec:	e000      	b.n	8011ff0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8011fee:	2300      	movs	r3, #0
}
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	370c      	adds	r7, #12
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffa:	4770      	bx	lr

08011ffc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	689b      	ldr	r3, [r3, #8]
 8012008:	f003 0301 	and.w	r3, r3, #1
 801200c:	2b01      	cmp	r3, #1
 801200e:	d101      	bne.n	8012014 <LL_ADC_IsEnabled+0x18>
 8012010:	2301      	movs	r3, #1
 8012012:	e000      	b.n	8012016 <LL_ADC_IsEnabled+0x1a>
 8012014:	2300      	movs	r3, #0
}
 8012016:	4618      	mov	r0, r3
 8012018:	370c      	adds	r7, #12
 801201a:	46bd      	mov	sp, r7
 801201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012020:	4770      	bx	lr

08012022 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8012022:	b480      	push	{r7}
 8012024:	b083      	sub	sp, #12
 8012026:	af00      	add	r7, sp, #0
 8012028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	689b      	ldr	r3, [r3, #8]
 801202e:	f003 0304 	and.w	r3, r3, #4
 8012032:	2b04      	cmp	r3, #4
 8012034:	d101      	bne.n	801203a <LL_ADC_REG_IsConversionOngoing+0x18>
 8012036:	2301      	movs	r3, #1
 8012038:	e000      	b.n	801203c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801203a:	2300      	movs	r3, #0
}
 801203c:	4618      	mov	r0, r3
 801203e:	370c      	adds	r7, #12
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr

08012048 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	689b      	ldr	r3, [r3, #8]
 8012054:	f003 0308 	and.w	r3, r3, #8
 8012058:	2b08      	cmp	r3, #8
 801205a:	d101      	bne.n	8012060 <LL_ADC_INJ_IsConversionOngoing+0x18>
 801205c:	2301      	movs	r3, #1
 801205e:	e000      	b.n	8012062 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8012060:	2300      	movs	r3, #0
}
 8012062:	4618      	mov	r0, r3
 8012064:	370c      	adds	r7, #12
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr
	...

08012070 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8012070:	b590      	push	{r4, r7, lr}
 8012072:	b089      	sub	sp, #36	; 0x24
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012078:	2300      	movs	r3, #0
 801207a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 801207c:	2300      	movs	r3, #0
 801207e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d101      	bne.n	801208a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8012086:	2301      	movs	r3, #1
 8012088:	e136      	b.n	80122f8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	691b      	ldr	r3, [r3, #16]
 801208e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012094:	2b00      	cmp	r3, #0
 8012096:	d109      	bne.n	80120ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f7ff fa6b 	bl	8011574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2200      	movs	r2, #0
 80120a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2200      	movs	r2, #0
 80120a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	4618      	mov	r0, r3
 80120b2:	f7ff ff67 	bl	8011f84 <LL_ADC_IsDeepPowerDownEnabled>
 80120b6:	4603      	mov	r3, r0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d004      	beq.n	80120c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7ff ff4d 	bl	8011f60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7ff ff82 	bl	8011fd4 <LL_ADC_IsInternalRegulatorEnabled>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d115      	bne.n	8012102 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	4618      	mov	r0, r3
 80120dc:	f7ff ff66 	bl	8011fac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80120e0:	4b87      	ldr	r3, [pc, #540]	; (8012300 <HAL_ADC_Init+0x290>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	099b      	lsrs	r3, r3, #6
 80120e6:	4a87      	ldr	r2, [pc, #540]	; (8012304 <HAL_ADC_Init+0x294>)
 80120e8:	fba2 2303 	umull	r2, r3, r2, r3
 80120ec:	099b      	lsrs	r3, r3, #6
 80120ee:	3301      	adds	r3, #1
 80120f0:	005b      	lsls	r3, r3, #1
 80120f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80120f4:	e002      	b.n	80120fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	3b01      	subs	r3, #1
 80120fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d1f9      	bne.n	80120f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4618      	mov	r0, r3
 8012108:	f7ff ff64 	bl	8011fd4 <LL_ADC_IsInternalRegulatorEnabled>
 801210c:	4603      	mov	r3, r0
 801210e:	2b00      	cmp	r3, #0
 8012110:	d10d      	bne.n	801212e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012116:	f043 0210 	orr.w	r2, r3, #16
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012122:	f043 0201 	orr.w	r2, r3, #1
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 801212a:	2301      	movs	r3, #1
 801212c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	4618      	mov	r0, r3
 8012134:	f7ff ff75 	bl	8012022 <LL_ADC_REG_IsConversionOngoing>
 8012138:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801213e:	f003 0310 	and.w	r3, r3, #16
 8012142:	2b00      	cmp	r3, #0
 8012144:	f040 80cf 	bne.w	80122e6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	2b00      	cmp	r3, #0
 801214c:	f040 80cb 	bne.w	80122e6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012154:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8012158:	f043 0202 	orr.w	r2, r3, #2
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	4618      	mov	r0, r3
 8012166:	f7ff ff49 	bl	8011ffc <LL_ADC_IsEnabled>
 801216a:	4603      	mov	r3, r0
 801216c:	2b00      	cmp	r3, #0
 801216e:	d115      	bne.n	801219c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012170:	4865      	ldr	r0, [pc, #404]	; (8012308 <HAL_ADC_Init+0x298>)
 8012172:	f7ff ff43 	bl	8011ffc <LL_ADC_IsEnabled>
 8012176:	4604      	mov	r4, r0
 8012178:	4864      	ldr	r0, [pc, #400]	; (801230c <HAL_ADC_Init+0x29c>)
 801217a:	f7ff ff3f 	bl	8011ffc <LL_ADC_IsEnabled>
 801217e:	4603      	mov	r3, r0
 8012180:	431c      	orrs	r4, r3
 8012182:	4863      	ldr	r0, [pc, #396]	; (8012310 <HAL_ADC_Init+0x2a0>)
 8012184:	f7ff ff3a 	bl	8011ffc <LL_ADC_IsEnabled>
 8012188:	4603      	mov	r3, r0
 801218a:	4323      	orrs	r3, r4
 801218c:	2b00      	cmp	r3, #0
 801218e:	d105      	bne.n	801219c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	4619      	mov	r1, r3
 8012196:	485f      	ldr	r0, [pc, #380]	; (8012314 <HAL_ADC_Init+0x2a4>)
 8012198:	f7ff fdde 	bl	8011d58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	7e5b      	ldrb	r3, [r3, #25]
 80121a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80121a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80121ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80121b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80121ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80121bc:	4313      	orrs	r3, r2
 80121be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d106      	bne.n	80121d8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ce:	3b01      	subs	r3, #1
 80121d0:	045b      	lsls	r3, r3, #17
 80121d2:	69ba      	ldr	r2, [r7, #24]
 80121d4:	4313      	orrs	r3, r2
 80121d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d009      	beq.n	80121f4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80121ee:	69ba      	ldr	r2, [r7, #24]
 80121f0:	4313      	orrs	r3, r2
 80121f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	68da      	ldr	r2, [r3, #12]
 80121fa:	4b47      	ldr	r3, [pc, #284]	; (8012318 <HAL_ADC_Init+0x2a8>)
 80121fc:	4013      	ands	r3, r2
 80121fe:	687a      	ldr	r2, [r7, #4]
 8012200:	6812      	ldr	r2, [r2, #0]
 8012202:	69b9      	ldr	r1, [r7, #24]
 8012204:	430b      	orrs	r3, r1
 8012206:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4618      	mov	r0, r3
 801220e:	f7ff ff08 	bl	8012022 <LL_ADC_REG_IsConversionOngoing>
 8012212:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	4618      	mov	r0, r3
 801221a:	f7ff ff15 	bl	8012048 <LL_ADC_INJ_IsConversionOngoing>
 801221e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d13d      	bne.n	80122a2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d13a      	bne.n	80122a2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8012230:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012238:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 801223a:	4313      	orrs	r3, r2
 801223c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	68db      	ldr	r3, [r3, #12]
 8012244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012248:	f023 0302 	bic.w	r3, r3, #2
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	6812      	ldr	r2, [r2, #0]
 8012250:	69b9      	ldr	r1, [r7, #24]
 8012252:	430b      	orrs	r3, r1
 8012254:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801225c:	2b01      	cmp	r3, #1
 801225e:	d118      	bne.n	8012292 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	691b      	ldr	r3, [r3, #16]
 8012266:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801226a:	f023 0304 	bic.w	r3, r3, #4
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8012272:	687a      	ldr	r2, [r7, #4]
 8012274:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012276:	4311      	orrs	r1, r2
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801227c:	4311      	orrs	r1, r2
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8012282:	430a      	orrs	r2, r1
 8012284:	431a      	orrs	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f042 0201 	orr.w	r2, r2, #1
 801228e:	611a      	str	r2, [r3, #16]
 8012290:	e007      	b.n	80122a2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	691a      	ldr	r2, [r3, #16]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f022 0201 	bic.w	r2, r2, #1
 80122a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	691b      	ldr	r3, [r3, #16]
 80122a6:	2b01      	cmp	r3, #1
 80122a8:	d10c      	bne.n	80122c4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122b0:	f023 010f 	bic.w	r1, r3, #15
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	69db      	ldr	r3, [r3, #28]
 80122b8:	1e5a      	subs	r2, r3, #1
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	430a      	orrs	r2, r1
 80122c0:	631a      	str	r2, [r3, #48]	; 0x30
 80122c2:	e007      	b.n	80122d4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	f022 020f 	bic.w	r2, r2, #15
 80122d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122d8:	f023 0303 	bic.w	r3, r3, #3
 80122dc:	f043 0201 	orr.w	r2, r3, #1
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	655a      	str	r2, [r3, #84]	; 0x54
 80122e4:	e007      	b.n	80122f6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122ea:	f043 0210 	orr.w	r2, r3, #16
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80122f2:	2301      	movs	r3, #1
 80122f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80122f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3724      	adds	r7, #36	; 0x24
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd90      	pop	{r4, r7, pc}
 8012300:	20000004 	.word	0x20000004
 8012304:	053e2d63 	.word	0x053e2d63
 8012308:	50040000 	.word	0x50040000
 801230c:	50040100 	.word	0x50040100
 8012310:	50040200 	.word	0x50040200
 8012314:	50040300 	.word	0x50040300
 8012318:	fff0c007 	.word	0xfff0c007

0801231c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b0b6      	sub	sp, #216	; 0xd8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012326:	2300      	movs	r3, #0
 8012328:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801232c:	2300      	movs	r3, #0
 801232e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012336:	2b01      	cmp	r3, #1
 8012338:	d101      	bne.n	801233e <HAL_ADC_ConfigChannel+0x22>
 801233a:	2302      	movs	r3, #2
 801233c:	e3c7      	b.n	8012ace <HAL_ADC_ConfigChannel+0x7b2>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2201      	movs	r2, #1
 8012342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	4618      	mov	r0, r3
 801234c:	f7ff fe69 	bl	8012022 <LL_ADC_REG_IsConversionOngoing>
 8012350:	4603      	mov	r3, r0
 8012352:	2b00      	cmp	r3, #0
 8012354:	f040 83a8 	bne.w	8012aa8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	2b05      	cmp	r3, #5
 801235e:	d824      	bhi.n	80123aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	3b02      	subs	r3, #2
 8012366:	2b03      	cmp	r3, #3
 8012368:	d81b      	bhi.n	80123a2 <HAL_ADC_ConfigChannel+0x86>
 801236a:	a201      	add	r2, pc, #4	; (adr r2, 8012370 <HAL_ADC_ConfigChannel+0x54>)
 801236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012370:	08012381 	.word	0x08012381
 8012374:	08012389 	.word	0x08012389
 8012378:	08012391 	.word	0x08012391
 801237c:	08012399 	.word	0x08012399
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	220c      	movs	r2, #12
 8012384:	605a      	str	r2, [r3, #4]
          break;
 8012386:	e011      	b.n	80123ac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	2212      	movs	r2, #18
 801238c:	605a      	str	r2, [r3, #4]
          break;
 801238e:	e00d      	b.n	80123ac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	2218      	movs	r2, #24
 8012394:	605a      	str	r2, [r3, #4]
          break;
 8012396:	e009      	b.n	80123ac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801239e:	605a      	str	r2, [r3, #4]
          break;
 80123a0:	e004      	b.n	80123ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	2206      	movs	r2, #6
 80123a6:	605a      	str	r2, [r3, #4]
          break;
 80123a8:	e000      	b.n	80123ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80123aa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	6818      	ldr	r0, [r3, #0]
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	6859      	ldr	r1, [r3, #4]
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	461a      	mov	r2, r3
 80123ba:	f7ff fd56 	bl	8011e6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7ff fe2d 	bl	8012022 <LL_ADC_REG_IsConversionOngoing>
 80123c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7ff fe39 	bl	8012048 <LL_ADC_INJ_IsConversionOngoing>
 80123d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80123da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f040 81a6 	bne.w	8012730 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80123e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	f040 81a1 	bne.w	8012730 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6818      	ldr	r0, [r3, #0]
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	6819      	ldr	r1, [r3, #0]
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	689b      	ldr	r3, [r3, #8]
 80123fa:	461a      	mov	r2, r3
 80123fc:	f7ff fd61 	bl	8011ec2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	695a      	ldr	r2, [r3, #20]
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	68db      	ldr	r3, [r3, #12]
 801240a:	08db      	lsrs	r3, r3, #3
 801240c:	f003 0303 	and.w	r3, r3, #3
 8012410:	005b      	lsls	r3, r3, #1
 8012412:	fa02 f303 	lsl.w	r3, r2, r3
 8012416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	691b      	ldr	r3, [r3, #16]
 801241e:	2b04      	cmp	r3, #4
 8012420:	d00a      	beq.n	8012438 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6818      	ldr	r0, [r3, #0]
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	6919      	ldr	r1, [r3, #16]
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	681a      	ldr	r2, [r3, #0]
 801242e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012432:	f7ff fcc5 	bl	8011dc0 <LL_ADC_SetOffset>
 8012436:	e17b      	b.n	8012730 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	2100      	movs	r1, #0
 801243e:	4618      	mov	r0, r3
 8012440:	f7ff fce2 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 8012444:	4603      	mov	r3, r0
 8012446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801244a:	2b00      	cmp	r3, #0
 801244c:	d10a      	bne.n	8012464 <HAL_ADC_ConfigChannel+0x148>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	2100      	movs	r1, #0
 8012454:	4618      	mov	r0, r3
 8012456:	f7ff fcd7 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 801245a:	4603      	mov	r3, r0
 801245c:	0e9b      	lsrs	r3, r3, #26
 801245e:	f003 021f 	and.w	r2, r3, #31
 8012462:	e01e      	b.n	80124a2 <HAL_ADC_ConfigChannel+0x186>
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	2100      	movs	r1, #0
 801246a:	4618      	mov	r0, r3
 801246c:	f7ff fccc 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 8012470:	4603      	mov	r3, r0
 8012472:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012476:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801247a:	fa93 f3a3 	rbit	r3, r3
 801247e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8012482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012486:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801248a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d101      	bne.n	8012496 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8012492:	2320      	movs	r3, #32
 8012494:	e004      	b.n	80124a0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8012496:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801249a:	fab3 f383 	clz	r3, r3
 801249e:	b2db      	uxtb	r3, r3
 80124a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d105      	bne.n	80124ba <HAL_ADC_ConfigChannel+0x19e>
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	0e9b      	lsrs	r3, r3, #26
 80124b4:	f003 031f 	and.w	r3, r3, #31
 80124b8:	e018      	b.n	80124ec <HAL_ADC_ConfigChannel+0x1d0>
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80124c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80124c6:	fa93 f3a3 	rbit	r3, r3
 80124ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80124ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80124d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d101      	bne.n	80124e2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80124de:	2320      	movs	r3, #32
 80124e0:	e004      	b.n	80124ec <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80124e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80124e6:	fab3 f383 	clz	r3, r3
 80124ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80124ec:	429a      	cmp	r2, r3
 80124ee:	d106      	bne.n	80124fe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2200      	movs	r2, #0
 80124f6:	2100      	movs	r1, #0
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7ff fc9b 	bl	8011e34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	2101      	movs	r1, #1
 8012504:	4618      	mov	r0, r3
 8012506:	f7ff fc7f 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 801250a:	4603      	mov	r3, r0
 801250c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012510:	2b00      	cmp	r3, #0
 8012512:	d10a      	bne.n	801252a <HAL_ADC_ConfigChannel+0x20e>
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	2101      	movs	r1, #1
 801251a:	4618      	mov	r0, r3
 801251c:	f7ff fc74 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 8012520:	4603      	mov	r3, r0
 8012522:	0e9b      	lsrs	r3, r3, #26
 8012524:	f003 021f 	and.w	r2, r3, #31
 8012528:	e01e      	b.n	8012568 <HAL_ADC_ConfigChannel+0x24c>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2101      	movs	r1, #1
 8012530:	4618      	mov	r0, r3
 8012532:	f7ff fc69 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 8012536:	4603      	mov	r3, r0
 8012538:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801253c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012540:	fa93 f3a3 	rbit	r3, r3
 8012544:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8012548:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801254c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8012550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012554:	2b00      	cmp	r3, #0
 8012556:	d101      	bne.n	801255c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8012558:	2320      	movs	r3, #32
 801255a:	e004      	b.n	8012566 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 801255c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012560:	fab3 f383 	clz	r3, r3
 8012564:	b2db      	uxtb	r3, r3
 8012566:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012570:	2b00      	cmp	r3, #0
 8012572:	d105      	bne.n	8012580 <HAL_ADC_ConfigChannel+0x264>
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	0e9b      	lsrs	r3, r3, #26
 801257a:	f003 031f 	and.w	r3, r3, #31
 801257e:	e018      	b.n	80125b2 <HAL_ADC_ConfigChannel+0x296>
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801258c:	fa93 f3a3 	rbit	r3, r3
 8012590:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8012594:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801259c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d101      	bne.n	80125a8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80125a4:	2320      	movs	r3, #32
 80125a6:	e004      	b.n	80125b2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80125a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80125ac:	fab3 f383 	clz	r3, r3
 80125b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d106      	bne.n	80125c4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	2200      	movs	r2, #0
 80125bc:	2101      	movs	r1, #1
 80125be:	4618      	mov	r0, r3
 80125c0:	f7ff fc38 	bl	8011e34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	2102      	movs	r1, #2
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7ff fc1c 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 80125d0:	4603      	mov	r3, r0
 80125d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10a      	bne.n	80125f0 <HAL_ADC_ConfigChannel+0x2d4>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	2102      	movs	r1, #2
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7ff fc11 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 80125e6:	4603      	mov	r3, r0
 80125e8:	0e9b      	lsrs	r3, r3, #26
 80125ea:	f003 021f 	and.w	r2, r3, #31
 80125ee:	e01e      	b.n	801262e <HAL_ADC_ConfigChannel+0x312>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	2102      	movs	r1, #2
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7ff fc06 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 80125fc:	4603      	mov	r3, r0
 80125fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012606:	fa93 f3a3 	rbit	r3, r3
 801260a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801260e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8012616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801261a:	2b00      	cmp	r3, #0
 801261c:	d101      	bne.n	8012622 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 801261e:	2320      	movs	r3, #32
 8012620:	e004      	b.n	801262c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8012622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012626:	fab3 f383 	clz	r3, r3
 801262a:	b2db      	uxtb	r3, r3
 801262c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012636:	2b00      	cmp	r3, #0
 8012638:	d105      	bne.n	8012646 <HAL_ADC_ConfigChannel+0x32a>
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	0e9b      	lsrs	r3, r3, #26
 8012640:	f003 031f 	and.w	r3, r3, #31
 8012644:	e016      	b.n	8012674 <HAL_ADC_ConfigChannel+0x358>
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801264e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012652:	fa93 f3a3 	rbit	r3, r3
 8012656:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8012658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801265a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801265e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012662:	2b00      	cmp	r3, #0
 8012664:	d101      	bne.n	801266a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8012666:	2320      	movs	r3, #32
 8012668:	e004      	b.n	8012674 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 801266a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801266e:	fab3 f383 	clz	r3, r3
 8012672:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8012674:	429a      	cmp	r2, r3
 8012676:	d106      	bne.n	8012686 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	2200      	movs	r2, #0
 801267e:	2102      	movs	r1, #2
 8012680:	4618      	mov	r0, r3
 8012682:	f7ff fbd7 	bl	8011e34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	2103      	movs	r1, #3
 801268c:	4618      	mov	r0, r3
 801268e:	f7ff fbbb 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 8012692:	4603      	mov	r3, r0
 8012694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012698:	2b00      	cmp	r3, #0
 801269a:	d10a      	bne.n	80126b2 <HAL_ADC_ConfigChannel+0x396>
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2103      	movs	r1, #3
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7ff fbb0 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 80126a8:	4603      	mov	r3, r0
 80126aa:	0e9b      	lsrs	r3, r3, #26
 80126ac:	f003 021f 	and.w	r2, r3, #31
 80126b0:	e017      	b.n	80126e2 <HAL_ADC_ConfigChannel+0x3c6>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	2103      	movs	r1, #3
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7ff fba5 	bl	8011e08 <LL_ADC_GetOffsetChannel>
 80126be:	4603      	mov	r3, r0
 80126c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80126c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126c4:	fa93 f3a3 	rbit	r3, r3
 80126c8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80126ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80126ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d101      	bne.n	80126d8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80126d4:	2320      	movs	r3, #32
 80126d6:	e003      	b.n	80126e0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80126d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80126da:	fab3 f383 	clz	r3, r3
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d105      	bne.n	80126fa <HAL_ADC_ConfigChannel+0x3de>
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	0e9b      	lsrs	r3, r3, #26
 80126f4:	f003 031f 	and.w	r3, r3, #31
 80126f8:	e011      	b.n	801271e <HAL_ADC_ConfigChannel+0x402>
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012702:	fa93 f3a3 	rbit	r3, r3
 8012706:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8012708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801270a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801270c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801270e:	2b00      	cmp	r3, #0
 8012710:	d101      	bne.n	8012716 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8012712:	2320      	movs	r3, #32
 8012714:	e003      	b.n	801271e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8012716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012718:	fab3 f383 	clz	r3, r3
 801271c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801271e:	429a      	cmp	r2, r3
 8012720:	d106      	bne.n	8012730 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	2200      	movs	r2, #0
 8012728:	2103      	movs	r1, #3
 801272a:	4618      	mov	r0, r3
 801272c:	f7ff fb82 	bl	8011e34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	4618      	mov	r0, r3
 8012736:	f7ff fc61 	bl	8011ffc <LL_ADC_IsEnabled>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	f040 813f 	bne.w	80129c0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6818      	ldr	r0, [r3, #0]
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	6819      	ldr	r1, [r3, #0]
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	68db      	ldr	r3, [r3, #12]
 801274e:	461a      	mov	r2, r3
 8012750:	f7ff fbe2 	bl	8011f18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	4a8e      	ldr	r2, [pc, #568]	; (8012994 <HAL_ADC_ConfigChannel+0x678>)
 801275a:	4293      	cmp	r3, r2
 801275c:	f040 8130 	bne.w	80129c0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801276c:	2b00      	cmp	r3, #0
 801276e:	d10b      	bne.n	8012788 <HAL_ADC_ConfigChannel+0x46c>
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	0e9b      	lsrs	r3, r3, #26
 8012776:	3301      	adds	r3, #1
 8012778:	f003 031f 	and.w	r3, r3, #31
 801277c:	2b09      	cmp	r3, #9
 801277e:	bf94      	ite	ls
 8012780:	2301      	movls	r3, #1
 8012782:	2300      	movhi	r3, #0
 8012784:	b2db      	uxtb	r3, r3
 8012786:	e019      	b.n	80127bc <HAL_ADC_ConfigChannel+0x4a0>
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801278e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012790:	fa93 f3a3 	rbit	r3, r3
 8012794:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8012796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012798:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801279a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801279c:	2b00      	cmp	r3, #0
 801279e:	d101      	bne.n	80127a4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80127a0:	2320      	movs	r3, #32
 80127a2:	e003      	b.n	80127ac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80127a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127a6:	fab3 f383 	clz	r3, r3
 80127aa:	b2db      	uxtb	r3, r3
 80127ac:	3301      	adds	r3, #1
 80127ae:	f003 031f 	and.w	r3, r3, #31
 80127b2:	2b09      	cmp	r3, #9
 80127b4:	bf94      	ite	ls
 80127b6:	2301      	movls	r3, #1
 80127b8:	2300      	movhi	r3, #0
 80127ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d079      	beq.n	80128b4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d107      	bne.n	80127dc <HAL_ADC_ConfigChannel+0x4c0>
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	0e9b      	lsrs	r3, r3, #26
 80127d2:	3301      	adds	r3, #1
 80127d4:	069b      	lsls	r3, r3, #26
 80127d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80127da:	e015      	b.n	8012808 <HAL_ADC_ConfigChannel+0x4ec>
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80127e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e4:	fa93 f3a3 	rbit	r3, r3
 80127e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80127ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80127ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d101      	bne.n	80127f8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80127f4:	2320      	movs	r3, #32
 80127f6:	e003      	b.n	8012800 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80127f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127fa:	fab3 f383 	clz	r3, r3
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	3301      	adds	r3, #1
 8012802:	069b      	lsls	r3, r3, #26
 8012804:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012810:	2b00      	cmp	r3, #0
 8012812:	d109      	bne.n	8012828 <HAL_ADC_ConfigChannel+0x50c>
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	0e9b      	lsrs	r3, r3, #26
 801281a:	3301      	adds	r3, #1
 801281c:	f003 031f 	and.w	r3, r3, #31
 8012820:	2101      	movs	r1, #1
 8012822:	fa01 f303 	lsl.w	r3, r1, r3
 8012826:	e017      	b.n	8012858 <HAL_ADC_ConfigChannel+0x53c>
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801282e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012830:	fa93 f3a3 	rbit	r3, r3
 8012834:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8012836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012838:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801283c:	2b00      	cmp	r3, #0
 801283e:	d101      	bne.n	8012844 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8012840:	2320      	movs	r3, #32
 8012842:	e003      	b.n	801284c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8012844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012846:	fab3 f383 	clz	r3, r3
 801284a:	b2db      	uxtb	r3, r3
 801284c:	3301      	adds	r3, #1
 801284e:	f003 031f 	and.w	r3, r3, #31
 8012852:	2101      	movs	r1, #1
 8012854:	fa01 f303 	lsl.w	r3, r1, r3
 8012858:	ea42 0103 	orr.w	r1, r2, r3
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012864:	2b00      	cmp	r3, #0
 8012866:	d10a      	bne.n	801287e <HAL_ADC_ConfigChannel+0x562>
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	0e9b      	lsrs	r3, r3, #26
 801286e:	3301      	adds	r3, #1
 8012870:	f003 021f 	and.w	r2, r3, #31
 8012874:	4613      	mov	r3, r2
 8012876:	005b      	lsls	r3, r3, #1
 8012878:	4413      	add	r3, r2
 801287a:	051b      	lsls	r3, r3, #20
 801287c:	e018      	b.n	80128b0 <HAL_ADC_ConfigChannel+0x594>
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012886:	fa93 f3a3 	rbit	r3, r3
 801288a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801288e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8012890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012892:	2b00      	cmp	r3, #0
 8012894:	d101      	bne.n	801289a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8012896:	2320      	movs	r3, #32
 8012898:	e003      	b.n	80128a2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 801289a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801289c:	fab3 f383 	clz	r3, r3
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	3301      	adds	r3, #1
 80128a4:	f003 021f 	and.w	r2, r3, #31
 80128a8:	4613      	mov	r3, r2
 80128aa:	005b      	lsls	r3, r3, #1
 80128ac:	4413      	add	r3, r2
 80128ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80128b0:	430b      	orrs	r3, r1
 80128b2:	e080      	b.n	80129b6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d107      	bne.n	80128d0 <HAL_ADC_ConfigChannel+0x5b4>
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	0e9b      	lsrs	r3, r3, #26
 80128c6:	3301      	adds	r3, #1
 80128c8:	069b      	lsls	r3, r3, #26
 80128ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80128ce:	e015      	b.n	80128fc <HAL_ADC_ConfigChannel+0x5e0>
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80128d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d8:	fa93 f3a3 	rbit	r3, r3
 80128dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80128de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80128e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d101      	bne.n	80128ec <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80128e8:	2320      	movs	r3, #32
 80128ea:	e003      	b.n	80128f4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80128ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ee:	fab3 f383 	clz	r3, r3
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	3301      	adds	r3, #1
 80128f6:	069b      	lsls	r3, r3, #26
 80128f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012904:	2b00      	cmp	r3, #0
 8012906:	d109      	bne.n	801291c <HAL_ADC_ConfigChannel+0x600>
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	0e9b      	lsrs	r3, r3, #26
 801290e:	3301      	adds	r3, #1
 8012910:	f003 031f 	and.w	r3, r3, #31
 8012914:	2101      	movs	r1, #1
 8012916:	fa01 f303 	lsl.w	r3, r1, r3
 801291a:	e017      	b.n	801294c <HAL_ADC_ConfigChannel+0x630>
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012922:	6a3b      	ldr	r3, [r7, #32]
 8012924:	fa93 f3a3 	rbit	r3, r3
 8012928:	61fb      	str	r3, [r7, #28]
  return result;
 801292a:	69fb      	ldr	r3, [r7, #28]
 801292c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012930:	2b00      	cmp	r3, #0
 8012932:	d101      	bne.n	8012938 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8012934:	2320      	movs	r3, #32
 8012936:	e003      	b.n	8012940 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8012938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293a:	fab3 f383 	clz	r3, r3
 801293e:	b2db      	uxtb	r3, r3
 8012940:	3301      	adds	r3, #1
 8012942:	f003 031f 	and.w	r3, r3, #31
 8012946:	2101      	movs	r1, #1
 8012948:	fa01 f303 	lsl.w	r3, r1, r3
 801294c:	ea42 0103 	orr.w	r1, r2, r3
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012958:	2b00      	cmp	r3, #0
 801295a:	d10d      	bne.n	8012978 <HAL_ADC_ConfigChannel+0x65c>
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	0e9b      	lsrs	r3, r3, #26
 8012962:	3301      	adds	r3, #1
 8012964:	f003 021f 	and.w	r2, r3, #31
 8012968:	4613      	mov	r3, r2
 801296a:	005b      	lsls	r3, r3, #1
 801296c:	4413      	add	r3, r2
 801296e:	3b1e      	subs	r3, #30
 8012970:	051b      	lsls	r3, r3, #20
 8012972:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012976:	e01d      	b.n	80129b4 <HAL_ADC_ConfigChannel+0x698>
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	fa93 f3a3 	rbit	r3, r3
 8012984:	613b      	str	r3, [r7, #16]
  return result;
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801298a:	69bb      	ldr	r3, [r7, #24]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d103      	bne.n	8012998 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8012990:	2320      	movs	r3, #32
 8012992:	e005      	b.n	80129a0 <HAL_ADC_ConfigChannel+0x684>
 8012994:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	fab3 f383 	clz	r3, r3
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	3301      	adds	r3, #1
 80129a2:	f003 021f 	and.w	r2, r3, #31
 80129a6:	4613      	mov	r3, r2
 80129a8:	005b      	lsls	r3, r3, #1
 80129aa:	4413      	add	r3, r2
 80129ac:	3b1e      	subs	r3, #30
 80129ae:	051b      	lsls	r3, r3, #20
 80129b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80129b4:	430b      	orrs	r3, r1
 80129b6:	683a      	ldr	r2, [r7, #0]
 80129b8:	6892      	ldr	r2, [r2, #8]
 80129ba:	4619      	mov	r1, r3
 80129bc:	f7ff fa81 	bl	8011ec2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	4b44      	ldr	r3, [pc, #272]	; (8012ad8 <HAL_ADC_ConfigChannel+0x7bc>)
 80129c6:	4013      	ands	r3, r2
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d07a      	beq.n	8012ac2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80129cc:	4843      	ldr	r0, [pc, #268]	; (8012adc <HAL_ADC_ConfigChannel+0x7c0>)
 80129ce:	f7ff f9e9 	bl	8011da4 <LL_ADC_GetCommonPathInternalCh>
 80129d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	4a41      	ldr	r2, [pc, #260]	; (8012ae0 <HAL_ADC_ConfigChannel+0x7c4>)
 80129dc:	4293      	cmp	r3, r2
 80129de:	d12c      	bne.n	8012a3a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80129e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80129e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d126      	bne.n	8012a3a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	4a3c      	ldr	r2, [pc, #240]	; (8012ae4 <HAL_ADC_ConfigChannel+0x7c8>)
 80129f2:	4293      	cmp	r3, r2
 80129f4:	d004      	beq.n	8012a00 <HAL_ADC_ConfigChannel+0x6e4>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	4a3b      	ldr	r2, [pc, #236]	; (8012ae8 <HAL_ADC_ConfigChannel+0x7cc>)
 80129fc:	4293      	cmp	r3, r2
 80129fe:	d15d      	bne.n	8012abc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012a08:	4619      	mov	r1, r3
 8012a0a:	4834      	ldr	r0, [pc, #208]	; (8012adc <HAL_ADC_ConfigChannel+0x7c0>)
 8012a0c:	f7ff f9b7 	bl	8011d7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012a10:	4b36      	ldr	r3, [pc, #216]	; (8012aec <HAL_ADC_ConfigChannel+0x7d0>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	099b      	lsrs	r3, r3, #6
 8012a16:	4a36      	ldr	r2, [pc, #216]	; (8012af0 <HAL_ADC_ConfigChannel+0x7d4>)
 8012a18:	fba2 2303 	umull	r2, r3, r2, r3
 8012a1c:	099b      	lsrs	r3, r3, #6
 8012a1e:	1c5a      	adds	r2, r3, #1
 8012a20:	4613      	mov	r3, r2
 8012a22:	005b      	lsls	r3, r3, #1
 8012a24:	4413      	add	r3, r2
 8012a26:	009b      	lsls	r3, r3, #2
 8012a28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8012a2a:	e002      	b.n	8012a32 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d1f9      	bne.n	8012a2c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8012a38:	e040      	b.n	8012abc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	4a2d      	ldr	r2, [pc, #180]	; (8012af4 <HAL_ADC_ConfigChannel+0x7d8>)
 8012a40:	4293      	cmp	r3, r2
 8012a42:	d118      	bne.n	8012a76 <HAL_ADC_ConfigChannel+0x75a>
 8012a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d112      	bne.n	8012a76 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	4a23      	ldr	r2, [pc, #140]	; (8012ae4 <HAL_ADC_ConfigChannel+0x7c8>)
 8012a56:	4293      	cmp	r3, r2
 8012a58:	d004      	beq.n	8012a64 <HAL_ADC_ConfigChannel+0x748>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	4a22      	ldr	r2, [pc, #136]	; (8012ae8 <HAL_ADC_ConfigChannel+0x7cc>)
 8012a60:	4293      	cmp	r3, r2
 8012a62:	d12d      	bne.n	8012ac0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	481b      	ldr	r0, [pc, #108]	; (8012adc <HAL_ADC_ConfigChannel+0x7c0>)
 8012a70:	f7ff f985 	bl	8011d7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8012a74:	e024      	b.n	8012ac0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	4a1f      	ldr	r2, [pc, #124]	; (8012af8 <HAL_ADC_ConfigChannel+0x7dc>)
 8012a7c:	4293      	cmp	r3, r2
 8012a7e:	d120      	bne.n	8012ac2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8012a80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d11a      	bne.n	8012ac2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	4a14      	ldr	r2, [pc, #80]	; (8012ae4 <HAL_ADC_ConfigChannel+0x7c8>)
 8012a92:	4293      	cmp	r3, r2
 8012a94:	d115      	bne.n	8012ac2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012a9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	480e      	ldr	r0, [pc, #56]	; (8012adc <HAL_ADC_ConfigChannel+0x7c0>)
 8012aa2:	f7ff f96c 	bl	8011d7e <LL_ADC_SetCommonPathInternalCh>
 8012aa6:	e00c      	b.n	8012ac2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012aac:	f043 0220 	orr.w	r2, r3, #32
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8012aba:	e002      	b.n	8012ac2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8012abc:	bf00      	nop
 8012abe:	e000      	b.n	8012ac2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8012ac0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8012aca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	37d8      	adds	r7, #216	; 0xd8
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}
 8012ad6:	bf00      	nop
 8012ad8:	80080000 	.word	0x80080000
 8012adc:	50040300 	.word	0x50040300
 8012ae0:	c7520000 	.word	0xc7520000
 8012ae4:	50040000 	.word	0x50040000
 8012ae8:	50040200 	.word	0x50040200
 8012aec:	20000004 	.word	0x20000004
 8012af0:	053e2d63 	.word	0x053e2d63
 8012af4:	cb840000 	.word	0xcb840000
 8012af8:	80000001 	.word	0x80000001

08012afc <LL_ADC_IsEnabled>:
{
 8012afc:	b480      	push	{r7}
 8012afe:	b083      	sub	sp, #12
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	689b      	ldr	r3, [r3, #8]
 8012b08:	f003 0301 	and.w	r3, r3, #1
 8012b0c:	2b01      	cmp	r3, #1
 8012b0e:	d101      	bne.n	8012b14 <LL_ADC_IsEnabled+0x18>
 8012b10:	2301      	movs	r3, #1
 8012b12:	e000      	b.n	8012b16 <LL_ADC_IsEnabled+0x1a>
 8012b14:	2300      	movs	r3, #0
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	370c      	adds	r7, #12
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr

08012b22 <LL_ADC_REG_IsConversionOngoing>:
{
 8012b22:	b480      	push	{r7}
 8012b24:	b083      	sub	sp, #12
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	689b      	ldr	r3, [r3, #8]
 8012b2e:	f003 0304 	and.w	r3, r3, #4
 8012b32:	2b04      	cmp	r3, #4
 8012b34:	d101      	bne.n	8012b3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8012b36:	2301      	movs	r3, #1
 8012b38:	e000      	b.n	8012b3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8012b3a:	2300      	movs	r3, #0
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	370c      	adds	r7, #12
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr

08012b48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8012b48:	b590      	push	{r4, r7, lr}
 8012b4a:	b09f      	sub	sp, #124	; 0x7c
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012b52:	2300      	movs	r3, #0
 8012b54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012b5e:	2b01      	cmp	r3, #1
 8012b60:	d101      	bne.n	8012b66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8012b62:	2302      	movs	r3, #2
 8012b64:	e093      	b.n	8012c8e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2201      	movs	r2, #1
 8012b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8012b6e:	2300      	movs	r3, #0
 8012b70:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8012b72:	2300      	movs	r3, #0
 8012b74:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	4a47      	ldr	r2, [pc, #284]	; (8012c98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	d102      	bne.n	8012b86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8012b80:	4b46      	ldr	r3, [pc, #280]	; (8012c9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8012b82:	60bb      	str	r3, [r7, #8]
 8012b84:	e001      	b.n	8012b8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8012b86:	2300      	movs	r3, #0
 8012b88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d10b      	bne.n	8012ba8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b94:	f043 0220 	orr.w	r2, r3, #32
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	e072      	b.n	8012c8e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7ff ffb9 	bl	8012b22 <LL_ADC_REG_IsConversionOngoing>
 8012bb0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7ff ffb3 	bl	8012b22 <LL_ADC_REG_IsConversionOngoing>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d154      	bne.n	8012c6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8012bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d151      	bne.n	8012c6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8012bc8:	4b35      	ldr	r3, [pc, #212]	; (8012ca0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8012bca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d02c      	beq.n	8012c2e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8012bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bd6:	689b      	ldr	r3, [r3, #8]
 8012bd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	6859      	ldr	r1, [r3, #4]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012be6:	035b      	lsls	r3, r3, #13
 8012be8:	430b      	orrs	r3, r1
 8012bea:	431a      	orrs	r2, r3
 8012bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012bf0:	4829      	ldr	r0, [pc, #164]	; (8012c98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8012bf2:	f7ff ff83 	bl	8012afc <LL_ADC_IsEnabled>
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	4828      	ldr	r0, [pc, #160]	; (8012c9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8012bfa:	f7ff ff7f 	bl	8012afc <LL_ADC_IsEnabled>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	431c      	orrs	r4, r3
 8012c02:	4828      	ldr	r0, [pc, #160]	; (8012ca4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8012c04:	f7ff ff7a 	bl	8012afc <LL_ADC_IsEnabled>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	4323      	orrs	r3, r4
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d137      	bne.n	8012c80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8012c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c12:	689b      	ldr	r3, [r3, #8]
 8012c14:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8012c18:	f023 030f 	bic.w	r3, r3, #15
 8012c1c:	683a      	ldr	r2, [r7, #0]
 8012c1e:	6811      	ldr	r1, [r2, #0]
 8012c20:	683a      	ldr	r2, [r7, #0]
 8012c22:	6892      	ldr	r2, [r2, #8]
 8012c24:	430a      	orrs	r2, r1
 8012c26:	431a      	orrs	r2, r3
 8012c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c2a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012c2c:	e028      	b.n	8012c80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8012c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c30:	689b      	ldr	r3, [r3, #8]
 8012c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c38:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012c3a:	4817      	ldr	r0, [pc, #92]	; (8012c98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8012c3c:	f7ff ff5e 	bl	8012afc <LL_ADC_IsEnabled>
 8012c40:	4604      	mov	r4, r0
 8012c42:	4816      	ldr	r0, [pc, #88]	; (8012c9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8012c44:	f7ff ff5a 	bl	8012afc <LL_ADC_IsEnabled>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	431c      	orrs	r4, r3
 8012c4c:	4815      	ldr	r0, [pc, #84]	; (8012ca4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8012c4e:	f7ff ff55 	bl	8012afc <LL_ADC_IsEnabled>
 8012c52:	4603      	mov	r3, r0
 8012c54:	4323      	orrs	r3, r4
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d112      	bne.n	8012c80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8012c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c5c:	689b      	ldr	r3, [r3, #8]
 8012c5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8012c62:	f023 030f 	bic.w	r3, r3, #15
 8012c66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012c68:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012c6a:	e009      	b.n	8012c80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c70:	f043 0220 	orr.w	r2, r3, #32
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8012c78:	2301      	movs	r3, #1
 8012c7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012c7e:	e000      	b.n	8012c82 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8012c80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2200      	movs	r2, #0
 8012c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8012c8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	377c      	adds	r7, #124	; 0x7c
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd90      	pop	{r4, r7, pc}
 8012c96:	bf00      	nop
 8012c98:	50040000 	.word	0x50040000
 8012c9c:	50040100 	.word	0x50040100
 8012ca0:	50040300 	.word	0x50040300
 8012ca4:	50040200 	.word	0x50040200

08012ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b085      	sub	sp, #20
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f003 0307 	and.w	r3, r3, #7
 8012cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012cb8:	4b0c      	ldr	r3, [pc, #48]	; (8012cec <__NVIC_SetPriorityGrouping+0x44>)
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012cbe:	68ba      	ldr	r2, [r7, #8]
 8012cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012cc4:	4013      	ands	r3, r2
 8012cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012cda:	4a04      	ldr	r2, [pc, #16]	; (8012cec <__NVIC_SetPriorityGrouping+0x44>)
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	60d3      	str	r3, [r2, #12]
}
 8012ce0:	bf00      	nop
 8012ce2:	3714      	adds	r7, #20
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr
 8012cec:	e000ed00 	.word	0xe000ed00

08012cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012cf0:	b480      	push	{r7}
 8012cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012cf4:	4b04      	ldr	r3, [pc, #16]	; (8012d08 <__NVIC_GetPriorityGrouping+0x18>)
 8012cf6:	68db      	ldr	r3, [r3, #12]
 8012cf8:	0a1b      	lsrs	r3, r3, #8
 8012cfa:	f003 0307 	and.w	r3, r3, #7
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr
 8012d08:	e000ed00 	.word	0xe000ed00

08012d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	4603      	mov	r3, r0
 8012d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	db0b      	blt.n	8012d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012d1e:	79fb      	ldrb	r3, [r7, #7]
 8012d20:	f003 021f 	and.w	r2, r3, #31
 8012d24:	4907      	ldr	r1, [pc, #28]	; (8012d44 <__NVIC_EnableIRQ+0x38>)
 8012d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d2a:	095b      	lsrs	r3, r3, #5
 8012d2c:	2001      	movs	r0, #1
 8012d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8012d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8012d36:	bf00      	nop
 8012d38:	370c      	adds	r7, #12
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d40:	4770      	bx	lr
 8012d42:	bf00      	nop
 8012d44:	e000e100 	.word	0xe000e100

08012d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	4603      	mov	r3, r0
 8012d50:	6039      	str	r1, [r7, #0]
 8012d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	db0a      	blt.n	8012d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	b2da      	uxtb	r2, r3
 8012d60:	490c      	ldr	r1, [pc, #48]	; (8012d94 <__NVIC_SetPriority+0x4c>)
 8012d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d66:	0112      	lsls	r2, r2, #4
 8012d68:	b2d2      	uxtb	r2, r2
 8012d6a:	440b      	add	r3, r1
 8012d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012d70:	e00a      	b.n	8012d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	b2da      	uxtb	r2, r3
 8012d76:	4908      	ldr	r1, [pc, #32]	; (8012d98 <__NVIC_SetPriority+0x50>)
 8012d78:	79fb      	ldrb	r3, [r7, #7]
 8012d7a:	f003 030f 	and.w	r3, r3, #15
 8012d7e:	3b04      	subs	r3, #4
 8012d80:	0112      	lsls	r2, r2, #4
 8012d82:	b2d2      	uxtb	r2, r2
 8012d84:	440b      	add	r3, r1
 8012d86:	761a      	strb	r2, [r3, #24]
}
 8012d88:	bf00      	nop
 8012d8a:	370c      	adds	r7, #12
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	4770      	bx	lr
 8012d94:	e000e100 	.word	0xe000e100
 8012d98:	e000ed00 	.word	0xe000ed00

08012d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b089      	sub	sp, #36	; 0x24
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	60f8      	str	r0, [r7, #12]
 8012da4:	60b9      	str	r1, [r7, #8]
 8012da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f003 0307 	and.w	r3, r3, #7
 8012dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	f1c3 0307 	rsb	r3, r3, #7
 8012db6:	2b04      	cmp	r3, #4
 8012db8:	bf28      	it	cs
 8012dba:	2304      	movcs	r3, #4
 8012dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012dbe:	69fb      	ldr	r3, [r7, #28]
 8012dc0:	3304      	adds	r3, #4
 8012dc2:	2b06      	cmp	r3, #6
 8012dc4:	d902      	bls.n	8012dcc <NVIC_EncodePriority+0x30>
 8012dc6:	69fb      	ldr	r3, [r7, #28]
 8012dc8:	3b03      	subs	r3, #3
 8012dca:	e000      	b.n	8012dce <NVIC_EncodePriority+0x32>
 8012dcc:	2300      	movs	r3, #0
 8012dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8012dda:	43da      	mvns	r2, r3
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	401a      	ands	r2, r3
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012de4:	f04f 31ff 	mov.w	r1, #4294967295
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	fa01 f303 	lsl.w	r3, r1, r3
 8012dee:	43d9      	mvns	r1, r3
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012df4:	4313      	orrs	r3, r2
         );
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3724      	adds	r7, #36	; 0x24
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e00:	4770      	bx	lr
	...

08012e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	3b01      	subs	r3, #1
 8012e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012e14:	d301      	bcc.n	8012e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012e16:	2301      	movs	r3, #1
 8012e18:	e00f      	b.n	8012e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012e1a:	4a0a      	ldr	r2, [pc, #40]	; (8012e44 <SysTick_Config+0x40>)
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	3b01      	subs	r3, #1
 8012e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012e22:	210f      	movs	r1, #15
 8012e24:	f04f 30ff 	mov.w	r0, #4294967295
 8012e28:	f7ff ff8e 	bl	8012d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012e2c:	4b05      	ldr	r3, [pc, #20]	; (8012e44 <SysTick_Config+0x40>)
 8012e2e:	2200      	movs	r2, #0
 8012e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012e32:	4b04      	ldr	r3, [pc, #16]	; (8012e44 <SysTick_Config+0x40>)
 8012e34:	2207      	movs	r2, #7
 8012e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012e38:	2300      	movs	r3, #0
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3708      	adds	r7, #8
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	e000e010 	.word	0xe000e010

08012e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f7ff ff29 	bl	8012ca8 <__NVIC_SetPriorityGrouping>
}
 8012e56:	bf00      	nop
 8012e58:	3708      	adds	r7, #8
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}

08012e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012e5e:	b580      	push	{r7, lr}
 8012e60:	b086      	sub	sp, #24
 8012e62:	af00      	add	r7, sp, #0
 8012e64:	4603      	mov	r3, r0
 8012e66:	60b9      	str	r1, [r7, #8]
 8012e68:	607a      	str	r2, [r7, #4]
 8012e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012e70:	f7ff ff3e 	bl	8012cf0 <__NVIC_GetPriorityGrouping>
 8012e74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	68b9      	ldr	r1, [r7, #8]
 8012e7a:	6978      	ldr	r0, [r7, #20]
 8012e7c:	f7ff ff8e 	bl	8012d9c <NVIC_EncodePriority>
 8012e80:	4602      	mov	r2, r0
 8012e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e86:	4611      	mov	r1, r2
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7ff ff5d 	bl	8012d48 <__NVIC_SetPriority>
}
 8012e8e:	bf00      	nop
 8012e90:	3718      	adds	r7, #24
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b082      	sub	sp, #8
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7ff ff31 	bl	8012d0c <__NVIC_EnableIRQ>
}
 8012eaa:	bf00      	nop
 8012eac:	3708      	adds	r7, #8
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}

08012eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012eb2:	b580      	push	{r7, lr}
 8012eb4:	b082      	sub	sp, #8
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f7ff ffa2 	bl	8012e04 <SysTick_Config>
 8012ec0:	4603      	mov	r3, r0
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3708      	adds	r7, #8
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}

08012eca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012eca:	b580      	push	{r7, lr}
 8012ecc:	b084      	sub	sp, #16
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8012edc:	b2db      	uxtb	r3, r3
 8012ede:	2b02      	cmp	r3, #2
 8012ee0:	d005      	beq.n	8012eee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2204      	movs	r2, #4
 8012ee6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8012ee8:	2301      	movs	r3, #1
 8012eea:	73fb      	strb	r3, [r7, #15]
 8012eec:	e029      	b.n	8012f42 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	f022 020e 	bic.w	r2, r2, #14
 8012efc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	f022 0201 	bic.w	r2, r2, #1
 8012f0c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f12:	f003 021c 	and.w	r2, r3, #28
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f1a:	2101      	movs	r1, #1
 8012f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8012f20:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2201      	movs	r2, #1
 8012f26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d003      	beq.n	8012f42 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	4798      	blx	r3
    }
  }
  return status;
 8012f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	3710      	adds	r7, #16
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}

08012f4c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b087      	sub	sp, #28
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	460b      	mov	r3, r1
 8012f56:	607a      	str	r2, [r7, #4]
 8012f58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8012f5e:	7afb      	ldrb	r3, [r7, #11]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d103      	bne.n	8012f6c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	605a      	str	r2, [r3, #4]
      break;
 8012f6a:	e002      	b.n	8012f72 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8012f70:	bf00      	nop
  }

  return status;
 8012f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	371c      	adds	r7, #28
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr

08012f80 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8012f80:	b480      	push	{r7}
 8012f82:	b083      	sub	sp, #12
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
 8012f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d101      	bne.n	8012f94 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8012f90:	2301      	movs	r3, #1
 8012f92:	e003      	b.n	8012f9c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	683a      	ldr	r2, [r7, #0]
 8012f98:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8012f9a:	2300      	movs	r3, #0
  }
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	370c      	adds	r7, #12
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa6:	4770      	bx	lr

08012fa8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b086      	sub	sp, #24
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	0c1b      	lsrs	r3, r3, #16
 8012fb6:	f003 0301 	and.w	r3, r3, #1
 8012fba:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	f003 031f 	and.w	r3, r3, #31
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8012fca:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	015a      	lsls	r2, r3, #5
 8012fd0:	4b0c      	ldr	r3, [pc, #48]	; (8013004 <HAL_EXTI_IRQHandler+0x5c>)
 8012fd2:	4413      	add	r3, r2
 8012fd4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	693a      	ldr	r2, [r7, #16]
 8012fdc:	4013      	ands	r3, r2
 8012fde:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d009      	beq.n	8012ffa <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	693a      	ldr	r2, [r7, #16]
 8012fea:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	685b      	ldr	r3, [r3, #4]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d002      	beq.n	8012ffa <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	4798      	blx	r3
    }
  }
}
 8012ffa:	bf00      	nop
 8012ffc:	3718      	adds	r7, #24
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	40010414 	.word	0x40010414

08013008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013008:	b480      	push	{r7}
 801300a:	b087      	sub	sp, #28
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8013012:	2300      	movs	r3, #0
 8013014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013016:	e17f      	b.n	8013318 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	681a      	ldr	r2, [r3, #0]
 801301c:	2101      	movs	r1, #1
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	fa01 f303 	lsl.w	r3, r1, r3
 8013024:	4013      	ands	r3, r2
 8013026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	2b00      	cmp	r3, #0
 801302c:	f000 8171 	beq.w	8013312 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	2b01      	cmp	r3, #1
 8013036:	d00b      	beq.n	8013050 <HAL_GPIO_Init+0x48>
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	2b02      	cmp	r3, #2
 801303e:	d007      	beq.n	8013050 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013044:	2b11      	cmp	r3, #17
 8013046:	d003      	beq.n	8013050 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	685b      	ldr	r3, [r3, #4]
 801304c:	2b12      	cmp	r3, #18
 801304e:	d130      	bne.n	80130b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	689b      	ldr	r3, [r3, #8]
 8013054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	005b      	lsls	r3, r3, #1
 801305a:	2203      	movs	r2, #3
 801305c:	fa02 f303 	lsl.w	r3, r2, r3
 8013060:	43db      	mvns	r3, r3
 8013062:	693a      	ldr	r2, [r7, #16]
 8013064:	4013      	ands	r3, r2
 8013066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	68da      	ldr	r2, [r3, #12]
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	005b      	lsls	r3, r3, #1
 8013070:	fa02 f303 	lsl.w	r3, r2, r3
 8013074:	693a      	ldr	r2, [r7, #16]
 8013076:	4313      	orrs	r3, r2
 8013078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	693a      	ldr	r2, [r7, #16]
 801307e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8013086:	2201      	movs	r2, #1
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	fa02 f303 	lsl.w	r3, r2, r3
 801308e:	43db      	mvns	r3, r3
 8013090:	693a      	ldr	r2, [r7, #16]
 8013092:	4013      	ands	r3, r2
 8013094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	091b      	lsrs	r3, r3, #4
 801309c:	f003 0201 	and.w	r2, r3, #1
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	fa02 f303 	lsl.w	r3, r2, r3
 80130a6:	693a      	ldr	r2, [r7, #16]
 80130a8:	4313      	orrs	r3, r2
 80130aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	693a      	ldr	r2, [r7, #16]
 80130b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	f003 0303 	and.w	r3, r3, #3
 80130ba:	2b03      	cmp	r3, #3
 80130bc:	d118      	bne.n	80130f0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80130c4:	2201      	movs	r2, #1
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	fa02 f303 	lsl.w	r3, r2, r3
 80130cc:	43db      	mvns	r3, r3
 80130ce:	693a      	ldr	r2, [r7, #16]
 80130d0:	4013      	ands	r3, r2
 80130d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	685b      	ldr	r3, [r3, #4]
 80130d8:	08db      	lsrs	r3, r3, #3
 80130da:	f003 0201 	and.w	r2, r3, #1
 80130de:	697b      	ldr	r3, [r7, #20]
 80130e0:	fa02 f303 	lsl.w	r3, r2, r3
 80130e4:	693a      	ldr	r2, [r7, #16]
 80130e6:	4313      	orrs	r3, r2
 80130e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	693a      	ldr	r2, [r7, #16]
 80130ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	005b      	lsls	r3, r3, #1
 80130fa:	2203      	movs	r2, #3
 80130fc:	fa02 f303 	lsl.w	r3, r2, r3
 8013100:	43db      	mvns	r3, r3
 8013102:	693a      	ldr	r2, [r7, #16]
 8013104:	4013      	ands	r3, r2
 8013106:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	689a      	ldr	r2, [r3, #8]
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	005b      	lsls	r3, r3, #1
 8013110:	fa02 f303 	lsl.w	r3, r2, r3
 8013114:	693a      	ldr	r2, [r7, #16]
 8013116:	4313      	orrs	r3, r2
 8013118:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	693a      	ldr	r2, [r7, #16]
 801311e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	2b02      	cmp	r3, #2
 8013126:	d003      	beq.n	8013130 <HAL_GPIO_Init+0x128>
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	2b12      	cmp	r3, #18
 801312e:	d123      	bne.n	8013178 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	08da      	lsrs	r2, r3, #3
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	3208      	adds	r2, #8
 8013138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801313c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	f003 0307 	and.w	r3, r3, #7
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	220f      	movs	r2, #15
 8013148:	fa02 f303 	lsl.w	r3, r2, r3
 801314c:	43db      	mvns	r3, r3
 801314e:	693a      	ldr	r2, [r7, #16]
 8013150:	4013      	ands	r3, r2
 8013152:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	691a      	ldr	r2, [r3, #16]
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	f003 0307 	and.w	r3, r3, #7
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	fa02 f303 	lsl.w	r3, r2, r3
 8013164:	693a      	ldr	r2, [r7, #16]
 8013166:	4313      	orrs	r3, r2
 8013168:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801316a:	697b      	ldr	r3, [r7, #20]
 801316c:	08da      	lsrs	r2, r3, #3
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	3208      	adds	r2, #8
 8013172:	6939      	ldr	r1, [r7, #16]
 8013174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	005b      	lsls	r3, r3, #1
 8013182:	2203      	movs	r2, #3
 8013184:	fa02 f303 	lsl.w	r3, r2, r3
 8013188:	43db      	mvns	r3, r3
 801318a:	693a      	ldr	r2, [r7, #16]
 801318c:	4013      	ands	r3, r2
 801318e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	f003 0203 	and.w	r2, r3, #3
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	005b      	lsls	r3, r3, #1
 801319c:	fa02 f303 	lsl.w	r3, r2, r3
 80131a0:	693a      	ldr	r2, [r7, #16]
 80131a2:	4313      	orrs	r3, r2
 80131a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	693a      	ldr	r2, [r7, #16]
 80131aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	f000 80ac 	beq.w	8013312 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80131ba:	4b5f      	ldr	r3, [pc, #380]	; (8013338 <HAL_GPIO_Init+0x330>)
 80131bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131be:	4a5e      	ldr	r2, [pc, #376]	; (8013338 <HAL_GPIO_Init+0x330>)
 80131c0:	f043 0301 	orr.w	r3, r3, #1
 80131c4:	6613      	str	r3, [r2, #96]	; 0x60
 80131c6:	4b5c      	ldr	r3, [pc, #368]	; (8013338 <HAL_GPIO_Init+0x330>)
 80131c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131ca:	f003 0301 	and.w	r3, r3, #1
 80131ce:	60bb      	str	r3, [r7, #8]
 80131d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80131d2:	4a5a      	ldr	r2, [pc, #360]	; (801333c <HAL_GPIO_Init+0x334>)
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	089b      	lsrs	r3, r3, #2
 80131d8:	3302      	adds	r3, #2
 80131da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	f003 0303 	and.w	r3, r3, #3
 80131e6:	009b      	lsls	r3, r3, #2
 80131e8:	220f      	movs	r2, #15
 80131ea:	fa02 f303 	lsl.w	r3, r2, r3
 80131ee:	43db      	mvns	r3, r3
 80131f0:	693a      	ldr	r2, [r7, #16]
 80131f2:	4013      	ands	r3, r2
 80131f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80131fc:	d025      	beq.n	801324a <HAL_GPIO_Init+0x242>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	4a4f      	ldr	r2, [pc, #316]	; (8013340 <HAL_GPIO_Init+0x338>)
 8013202:	4293      	cmp	r3, r2
 8013204:	d01f      	beq.n	8013246 <HAL_GPIO_Init+0x23e>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	4a4e      	ldr	r2, [pc, #312]	; (8013344 <HAL_GPIO_Init+0x33c>)
 801320a:	4293      	cmp	r3, r2
 801320c:	d019      	beq.n	8013242 <HAL_GPIO_Init+0x23a>
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	4a4d      	ldr	r2, [pc, #308]	; (8013348 <HAL_GPIO_Init+0x340>)
 8013212:	4293      	cmp	r3, r2
 8013214:	d013      	beq.n	801323e <HAL_GPIO_Init+0x236>
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	4a4c      	ldr	r2, [pc, #304]	; (801334c <HAL_GPIO_Init+0x344>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d00d      	beq.n	801323a <HAL_GPIO_Init+0x232>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	4a4b      	ldr	r2, [pc, #300]	; (8013350 <HAL_GPIO_Init+0x348>)
 8013222:	4293      	cmp	r3, r2
 8013224:	d007      	beq.n	8013236 <HAL_GPIO_Init+0x22e>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	4a4a      	ldr	r2, [pc, #296]	; (8013354 <HAL_GPIO_Init+0x34c>)
 801322a:	4293      	cmp	r3, r2
 801322c:	d101      	bne.n	8013232 <HAL_GPIO_Init+0x22a>
 801322e:	2306      	movs	r3, #6
 8013230:	e00c      	b.n	801324c <HAL_GPIO_Init+0x244>
 8013232:	2307      	movs	r3, #7
 8013234:	e00a      	b.n	801324c <HAL_GPIO_Init+0x244>
 8013236:	2305      	movs	r3, #5
 8013238:	e008      	b.n	801324c <HAL_GPIO_Init+0x244>
 801323a:	2304      	movs	r3, #4
 801323c:	e006      	b.n	801324c <HAL_GPIO_Init+0x244>
 801323e:	2303      	movs	r3, #3
 8013240:	e004      	b.n	801324c <HAL_GPIO_Init+0x244>
 8013242:	2302      	movs	r3, #2
 8013244:	e002      	b.n	801324c <HAL_GPIO_Init+0x244>
 8013246:	2301      	movs	r3, #1
 8013248:	e000      	b.n	801324c <HAL_GPIO_Init+0x244>
 801324a:	2300      	movs	r3, #0
 801324c:	697a      	ldr	r2, [r7, #20]
 801324e:	f002 0203 	and.w	r2, r2, #3
 8013252:	0092      	lsls	r2, r2, #2
 8013254:	4093      	lsls	r3, r2
 8013256:	693a      	ldr	r2, [r7, #16]
 8013258:	4313      	orrs	r3, r2
 801325a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801325c:	4937      	ldr	r1, [pc, #220]	; (801333c <HAL_GPIO_Init+0x334>)
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	089b      	lsrs	r3, r3, #2
 8013262:	3302      	adds	r3, #2
 8013264:	693a      	ldr	r2, [r7, #16]
 8013266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801326a:	4b3b      	ldr	r3, [pc, #236]	; (8013358 <HAL_GPIO_Init+0x350>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	43db      	mvns	r3, r3
 8013274:	693a      	ldr	r2, [r7, #16]
 8013276:	4013      	ands	r3, r2
 8013278:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013282:	2b00      	cmp	r3, #0
 8013284:	d003      	beq.n	801328e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8013286:	693a      	ldr	r2, [r7, #16]
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	4313      	orrs	r3, r2
 801328c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801328e:	4a32      	ldr	r2, [pc, #200]	; (8013358 <HAL_GPIO_Init+0x350>)
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8013294:	4b30      	ldr	r3, [pc, #192]	; (8013358 <HAL_GPIO_Init+0x350>)
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	43db      	mvns	r3, r3
 801329e:	693a      	ldr	r2, [r7, #16]
 80132a0:	4013      	ands	r3, r2
 80132a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d003      	beq.n	80132b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80132b0:	693a      	ldr	r2, [r7, #16]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	4313      	orrs	r3, r2
 80132b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80132b8:	4a27      	ldr	r2, [pc, #156]	; (8013358 <HAL_GPIO_Init+0x350>)
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80132be:	4b26      	ldr	r3, [pc, #152]	; (8013358 <HAL_GPIO_Init+0x350>)
 80132c0:	689b      	ldr	r3, [r3, #8]
 80132c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	43db      	mvns	r3, r3
 80132c8:	693a      	ldr	r2, [r7, #16]
 80132ca:	4013      	ands	r3, r2
 80132cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d003      	beq.n	80132e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80132da:	693a      	ldr	r2, [r7, #16]
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	4313      	orrs	r3, r2
 80132e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80132e2:	4a1d      	ldr	r2, [pc, #116]	; (8013358 <HAL_GPIO_Init+0x350>)
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80132e8:	4b1b      	ldr	r3, [pc, #108]	; (8013358 <HAL_GPIO_Init+0x350>)
 80132ea:	68db      	ldr	r3, [r3, #12]
 80132ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	43db      	mvns	r3, r3
 80132f2:	693a      	ldr	r2, [r7, #16]
 80132f4:	4013      	ands	r3, r2
 80132f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013300:	2b00      	cmp	r3, #0
 8013302:	d003      	beq.n	801330c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8013304:	693a      	ldr	r2, [r7, #16]
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	4313      	orrs	r3, r2
 801330a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801330c:	4a12      	ldr	r2, [pc, #72]	; (8013358 <HAL_GPIO_Init+0x350>)
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	3301      	adds	r3, #1
 8013316:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	681a      	ldr	r2, [r3, #0]
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	fa22 f303 	lsr.w	r3, r2, r3
 8013322:	2b00      	cmp	r3, #0
 8013324:	f47f ae78 	bne.w	8013018 <HAL_GPIO_Init+0x10>
  }
}
 8013328:	bf00      	nop
 801332a:	bf00      	nop
 801332c:	371c      	adds	r7, #28
 801332e:	46bd      	mov	sp, r7
 8013330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013334:	4770      	bx	lr
 8013336:	bf00      	nop
 8013338:	40021000 	.word	0x40021000
 801333c:	40010000 	.word	0x40010000
 8013340:	48000400 	.word	0x48000400
 8013344:	48000800 	.word	0x48000800
 8013348:	48000c00 	.word	0x48000c00
 801334c:	48001000 	.word	0x48001000
 8013350:	48001400 	.word	0x48001400
 8013354:	48001800 	.word	0x48001800
 8013358:	40010400 	.word	0x40010400

0801335c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801335c:	b480      	push	{r7}
 801335e:	b087      	sub	sp, #28
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
 8013364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8013366:	2300      	movs	r3, #0
 8013368:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801336a:	e0cd      	b.n	8013508 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 801336c:	2201      	movs	r2, #1
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	fa02 f303 	lsl.w	r3, r2, r3
 8013374:	683a      	ldr	r2, [r7, #0]
 8013376:	4013      	ands	r3, r2
 8013378:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 801337a:	693b      	ldr	r3, [r7, #16]
 801337c:	2b00      	cmp	r3, #0
 801337e:	f000 80c0 	beq.w	8013502 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8013382:	4a68      	ldr	r2, [pc, #416]	; (8013524 <HAL_GPIO_DeInit+0x1c8>)
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	089b      	lsrs	r3, r3, #2
 8013388:	3302      	adds	r3, #2
 801338a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801338e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	f003 0303 	and.w	r3, r3, #3
 8013396:	009b      	lsls	r3, r3, #2
 8013398:	220f      	movs	r2, #15
 801339a:	fa02 f303 	lsl.w	r3, r2, r3
 801339e:	68fa      	ldr	r2, [r7, #12]
 80133a0:	4013      	ands	r3, r2
 80133a2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80133aa:	d025      	beq.n	80133f8 <HAL_GPIO_DeInit+0x9c>
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	4a5e      	ldr	r2, [pc, #376]	; (8013528 <HAL_GPIO_DeInit+0x1cc>)
 80133b0:	4293      	cmp	r3, r2
 80133b2:	d01f      	beq.n	80133f4 <HAL_GPIO_DeInit+0x98>
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	4a5d      	ldr	r2, [pc, #372]	; (801352c <HAL_GPIO_DeInit+0x1d0>)
 80133b8:	4293      	cmp	r3, r2
 80133ba:	d019      	beq.n	80133f0 <HAL_GPIO_DeInit+0x94>
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	4a5c      	ldr	r2, [pc, #368]	; (8013530 <HAL_GPIO_DeInit+0x1d4>)
 80133c0:	4293      	cmp	r3, r2
 80133c2:	d013      	beq.n	80133ec <HAL_GPIO_DeInit+0x90>
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	4a5b      	ldr	r2, [pc, #364]	; (8013534 <HAL_GPIO_DeInit+0x1d8>)
 80133c8:	4293      	cmp	r3, r2
 80133ca:	d00d      	beq.n	80133e8 <HAL_GPIO_DeInit+0x8c>
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	4a5a      	ldr	r2, [pc, #360]	; (8013538 <HAL_GPIO_DeInit+0x1dc>)
 80133d0:	4293      	cmp	r3, r2
 80133d2:	d007      	beq.n	80133e4 <HAL_GPIO_DeInit+0x88>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	4a59      	ldr	r2, [pc, #356]	; (801353c <HAL_GPIO_DeInit+0x1e0>)
 80133d8:	4293      	cmp	r3, r2
 80133da:	d101      	bne.n	80133e0 <HAL_GPIO_DeInit+0x84>
 80133dc:	2306      	movs	r3, #6
 80133de:	e00c      	b.n	80133fa <HAL_GPIO_DeInit+0x9e>
 80133e0:	2307      	movs	r3, #7
 80133e2:	e00a      	b.n	80133fa <HAL_GPIO_DeInit+0x9e>
 80133e4:	2305      	movs	r3, #5
 80133e6:	e008      	b.n	80133fa <HAL_GPIO_DeInit+0x9e>
 80133e8:	2304      	movs	r3, #4
 80133ea:	e006      	b.n	80133fa <HAL_GPIO_DeInit+0x9e>
 80133ec:	2303      	movs	r3, #3
 80133ee:	e004      	b.n	80133fa <HAL_GPIO_DeInit+0x9e>
 80133f0:	2302      	movs	r3, #2
 80133f2:	e002      	b.n	80133fa <HAL_GPIO_DeInit+0x9e>
 80133f4:	2301      	movs	r3, #1
 80133f6:	e000      	b.n	80133fa <HAL_GPIO_DeInit+0x9e>
 80133f8:	2300      	movs	r3, #0
 80133fa:	697a      	ldr	r2, [r7, #20]
 80133fc:	f002 0203 	and.w	r2, r2, #3
 8013400:	0092      	lsls	r2, r2, #2
 8013402:	4093      	lsls	r3, r2
 8013404:	68fa      	ldr	r2, [r7, #12]
 8013406:	429a      	cmp	r2, r3
 8013408:	d132      	bne.n	8013470 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801340a:	4b4d      	ldr	r3, [pc, #308]	; (8013540 <HAL_GPIO_DeInit+0x1e4>)
 801340c:	681a      	ldr	r2, [r3, #0]
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	43db      	mvns	r3, r3
 8013412:	494b      	ldr	r1, [pc, #300]	; (8013540 <HAL_GPIO_DeInit+0x1e4>)
 8013414:	4013      	ands	r3, r2
 8013416:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8013418:	4b49      	ldr	r3, [pc, #292]	; (8013540 <HAL_GPIO_DeInit+0x1e4>)
 801341a:	685a      	ldr	r2, [r3, #4]
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	43db      	mvns	r3, r3
 8013420:	4947      	ldr	r1, [pc, #284]	; (8013540 <HAL_GPIO_DeInit+0x1e4>)
 8013422:	4013      	ands	r3, r2
 8013424:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8013426:	4b46      	ldr	r3, [pc, #280]	; (8013540 <HAL_GPIO_DeInit+0x1e4>)
 8013428:	689a      	ldr	r2, [r3, #8]
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	43db      	mvns	r3, r3
 801342e:	4944      	ldr	r1, [pc, #272]	; (8013540 <HAL_GPIO_DeInit+0x1e4>)
 8013430:	4013      	ands	r3, r2
 8013432:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8013434:	4b42      	ldr	r3, [pc, #264]	; (8013540 <HAL_GPIO_DeInit+0x1e4>)
 8013436:	68da      	ldr	r2, [r3, #12]
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	43db      	mvns	r3, r3
 801343c:	4940      	ldr	r1, [pc, #256]	; (8013540 <HAL_GPIO_DeInit+0x1e4>)
 801343e:	4013      	ands	r3, r2
 8013440:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	f003 0303 	and.w	r3, r3, #3
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	220f      	movs	r2, #15
 801344c:	fa02 f303 	lsl.w	r3, r2, r3
 8013450:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8013452:	4a34      	ldr	r2, [pc, #208]	; (8013524 <HAL_GPIO_DeInit+0x1c8>)
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	089b      	lsrs	r3, r3, #2
 8013458:	3302      	adds	r3, #2
 801345a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	43da      	mvns	r2, r3
 8013462:	4830      	ldr	r0, [pc, #192]	; (8013524 <HAL_GPIO_DeInit+0x1c8>)
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	089b      	lsrs	r3, r3, #2
 8013468:	400a      	ands	r2, r1
 801346a:	3302      	adds	r3, #2
 801346c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681a      	ldr	r2, [r3, #0]
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	005b      	lsls	r3, r3, #1
 8013478:	2103      	movs	r1, #3
 801347a:	fa01 f303 	lsl.w	r3, r1, r3
 801347e:	431a      	orrs	r2, r3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	08da      	lsrs	r2, r3, #3
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	3208      	adds	r2, #8
 801348c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	f003 0307 	and.w	r3, r3, #7
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	220f      	movs	r2, #15
 801349a:	fa02 f303 	lsl.w	r3, r2, r3
 801349e:	43db      	mvns	r3, r3
 80134a0:	697a      	ldr	r2, [r7, #20]
 80134a2:	08d2      	lsrs	r2, r2, #3
 80134a4:	4019      	ands	r1, r3
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	3208      	adds	r2, #8
 80134aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	689a      	ldr	r2, [r3, #8]
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	005b      	lsls	r3, r3, #1
 80134b6:	2103      	movs	r1, #3
 80134b8:	fa01 f303 	lsl.w	r3, r1, r3
 80134bc:	43db      	mvns	r3, r3
 80134be:	401a      	ands	r2, r3
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	685a      	ldr	r2, [r3, #4]
 80134c8:	2101      	movs	r1, #1
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	fa01 f303 	lsl.w	r3, r1, r3
 80134d0:	43db      	mvns	r3, r3
 80134d2:	401a      	ands	r2, r3
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	68da      	ldr	r2, [r3, #12]
 80134dc:	697b      	ldr	r3, [r7, #20]
 80134de:	005b      	lsls	r3, r3, #1
 80134e0:	2103      	movs	r1, #3
 80134e2:	fa01 f303 	lsl.w	r3, r1, r3
 80134e6:	43db      	mvns	r3, r3
 80134e8:	401a      	ands	r2, r3
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f2:	2101      	movs	r1, #1
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	fa01 f303 	lsl.w	r3, r1, r3
 80134fa:	43db      	mvns	r3, r3
 80134fc:	401a      	ands	r2, r3
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	3301      	adds	r3, #1
 8013506:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8013508:	683a      	ldr	r2, [r7, #0]
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	fa22 f303 	lsr.w	r3, r2, r3
 8013510:	2b00      	cmp	r3, #0
 8013512:	f47f af2b 	bne.w	801336c <HAL_GPIO_DeInit+0x10>
  }
}
 8013516:	bf00      	nop
 8013518:	bf00      	nop
 801351a:	371c      	adds	r7, #28
 801351c:	46bd      	mov	sp, r7
 801351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013522:	4770      	bx	lr
 8013524:	40010000 	.word	0x40010000
 8013528:	48000400 	.word	0x48000400
 801352c:	48000800 	.word	0x48000800
 8013530:	48000c00 	.word	0x48000c00
 8013534:	48001000 	.word	0x48001000
 8013538:	48001400 	.word	0x48001400
 801353c:	48001800 	.word	0x48001800
 8013540:	40010400 	.word	0x40010400

08013544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8013544:	b480      	push	{r7}
 8013546:	b085      	sub	sp, #20
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	460b      	mov	r3, r1
 801354e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	691a      	ldr	r2, [r3, #16]
 8013554:	887b      	ldrh	r3, [r7, #2]
 8013556:	4013      	ands	r3, r2
 8013558:	2b00      	cmp	r3, #0
 801355a:	d002      	beq.n	8013562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801355c:	2301      	movs	r3, #1
 801355e:	73fb      	strb	r3, [r7, #15]
 8013560:	e001      	b.n	8013566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013562:	2300      	movs	r3, #0
 8013564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013566:	7bfb      	ldrb	r3, [r7, #15]
}
 8013568:	4618      	mov	r0, r3
 801356a:	3714      	adds	r7, #20
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013574:	b480      	push	{r7}
 8013576:	b083      	sub	sp, #12
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	460b      	mov	r3, r1
 801357e:	807b      	strh	r3, [r7, #2]
 8013580:	4613      	mov	r3, r2
 8013582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013584:	787b      	ldrb	r3, [r7, #1]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d003      	beq.n	8013592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801358a:	887a      	ldrh	r2, [r7, #2]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8013590:	e002      	b.n	8013598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8013592:	887a      	ldrh	r2, [r7, #2]
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013598:	bf00      	nop
 801359a:	370c      	adds	r7, #12
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr

080135a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80135a4:	b480      	push	{r7}
 80135a6:	b085      	sub	sp, #20
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	460b      	mov	r3, r1
 80135ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	695b      	ldr	r3, [r3, #20]
 80135b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80135b6:	887a      	ldrh	r2, [r7, #2]
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	4013      	ands	r3, r2
 80135bc:	041a      	lsls	r2, r3, #16
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	43d9      	mvns	r1, r3
 80135c2:	887b      	ldrh	r3, [r7, #2]
 80135c4:	400b      	ands	r3, r1
 80135c6:	431a      	orrs	r2, r3
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	619a      	str	r2, [r3, #24]
}
 80135cc:	bf00      	nop
 80135ce:	3714      	adds	r7, #20
 80135d0:	46bd      	mov	sp, r7
 80135d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d6:	4770      	bx	lr

080135d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b082      	sub	sp, #8
 80135dc:	af00      	add	r7, sp, #0
 80135de:	4603      	mov	r3, r0
 80135e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80135e2:	4b08      	ldr	r3, [pc, #32]	; (8013604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80135e4:	695a      	ldr	r2, [r3, #20]
 80135e6:	88fb      	ldrh	r3, [r7, #6]
 80135e8:	4013      	ands	r3, r2
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d006      	beq.n	80135fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80135ee:	4a05      	ldr	r2, [pc, #20]	; (8013604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80135f0:	88fb      	ldrh	r3, [r7, #6]
 80135f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80135f4:	88fb      	ldrh	r3, [r7, #6]
 80135f6:	4618      	mov	r0, r3
 80135f8:	f000 f806 	bl	8013608 <HAL_GPIO_EXTI_Callback>
  }
}
 80135fc:	bf00      	nop
 80135fe:	3708      	adds	r7, #8
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}
 8013604:	40010400 	.word	0x40010400

08013608 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	4603      	mov	r3, r0
 8013610:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8013612:	bf00      	nop
 8013614:	370c      	adds	r7, #12
 8013616:	46bd      	mov	sp, r7
 8013618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361c:	4770      	bx	lr
	...

08013620 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8013620:	b480      	push	{r7}
 8013622:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8013624:	4b04      	ldr	r3, [pc, #16]	; (8013638 <HAL_PWREx_GetVoltageRange+0x18>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 801362c:	4618      	mov	r0, r3
 801362e:	46bd      	mov	sp, r7
 8013630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013634:	4770      	bx	lr
 8013636:	bf00      	nop
 8013638:	40007000 	.word	0x40007000

0801363c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801363c:	b480      	push	{r7}
 801363e:	b085      	sub	sp, #20
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801364a:	d130      	bne.n	80136ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801364c:	4b23      	ldr	r3, [pc, #140]	; (80136dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013658:	d038      	beq.n	80136cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801365a:	4b20      	ldr	r3, [pc, #128]	; (80136dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8013662:	4a1e      	ldr	r2, [pc, #120]	; (80136dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8013664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013668:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801366a:	4b1d      	ldr	r3, [pc, #116]	; (80136e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	2232      	movs	r2, #50	; 0x32
 8013670:	fb02 f303 	mul.w	r3, r2, r3
 8013674:	4a1b      	ldr	r2, [pc, #108]	; (80136e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8013676:	fba2 2303 	umull	r2, r3, r2, r3
 801367a:	0c9b      	lsrs	r3, r3, #18
 801367c:	3301      	adds	r3, #1
 801367e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013680:	e002      	b.n	8013688 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	3b01      	subs	r3, #1
 8013686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013688:	4b14      	ldr	r3, [pc, #80]	; (80136dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801368a:	695b      	ldr	r3, [r3, #20]
 801368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013694:	d102      	bne.n	801369c <HAL_PWREx_ControlVoltageScaling+0x60>
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d1f2      	bne.n	8013682 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801369c:	4b0f      	ldr	r3, [pc, #60]	; (80136dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801369e:	695b      	ldr	r3, [r3, #20]
 80136a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80136a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80136a8:	d110      	bne.n	80136cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80136aa:	2303      	movs	r3, #3
 80136ac:	e00f      	b.n	80136ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80136ae:	4b0b      	ldr	r3, [pc, #44]	; (80136dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80136b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80136ba:	d007      	beq.n	80136cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80136bc:	4b07      	ldr	r3, [pc, #28]	; (80136dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80136c4:	4a05      	ldr	r2, [pc, #20]	; (80136dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80136c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80136ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80136cc:	2300      	movs	r3, #0
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3714      	adds	r7, #20
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr
 80136da:	bf00      	nop
 80136dc:	40007000 	.word	0x40007000
 80136e0:	20000004 	.word	0x20000004
 80136e4:	431bde83 	.word	0x431bde83

080136e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b088      	sub	sp, #32
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d101      	bne.n	80136fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80136f6:	2301      	movs	r3, #1
 80136f8:	e3d4      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80136fa:	4ba1      	ldr	r3, [pc, #644]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80136fc:	689b      	ldr	r3, [r3, #8]
 80136fe:	f003 030c 	and.w	r3, r3, #12
 8013702:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013704:	4b9e      	ldr	r3, [pc, #632]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013706:	68db      	ldr	r3, [r3, #12]
 8013708:	f003 0303 	and.w	r3, r3, #3
 801370c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	f003 0310 	and.w	r3, r3, #16
 8013716:	2b00      	cmp	r3, #0
 8013718:	f000 80e4 	beq.w	80138e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801371c:	69bb      	ldr	r3, [r7, #24]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d007      	beq.n	8013732 <HAL_RCC_OscConfig+0x4a>
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	2b0c      	cmp	r3, #12
 8013726:	f040 808b 	bne.w	8013840 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	2b01      	cmp	r3, #1
 801372e:	f040 8087 	bne.w	8013840 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8013732:	4b93      	ldr	r3, [pc, #588]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f003 0302 	and.w	r3, r3, #2
 801373a:	2b00      	cmp	r3, #0
 801373c:	d005      	beq.n	801374a <HAL_RCC_OscConfig+0x62>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	699b      	ldr	r3, [r3, #24]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d101      	bne.n	801374a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8013746:	2301      	movs	r3, #1
 8013748:	e3ac      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6a1a      	ldr	r2, [r3, #32]
 801374e:	4b8c      	ldr	r3, [pc, #560]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	f003 0308 	and.w	r3, r3, #8
 8013756:	2b00      	cmp	r3, #0
 8013758:	d004      	beq.n	8013764 <HAL_RCC_OscConfig+0x7c>
 801375a:	4b89      	ldr	r3, [pc, #548]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013762:	e005      	b.n	8013770 <HAL_RCC_OscConfig+0x88>
 8013764:	4b86      	ldr	r3, [pc, #536]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801376a:	091b      	lsrs	r3, r3, #4
 801376c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013770:	4293      	cmp	r3, r2
 8013772:	d223      	bcs.n	80137bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6a1b      	ldr	r3, [r3, #32]
 8013778:	4618      	mov	r0, r3
 801377a:	f000 fd41 	bl	8014200 <RCC_SetFlashLatencyFromMSIRange>
 801377e:	4603      	mov	r3, r0
 8013780:	2b00      	cmp	r3, #0
 8013782:	d001      	beq.n	8013788 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8013784:	2301      	movs	r3, #1
 8013786:	e38d      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013788:	4b7d      	ldr	r3, [pc, #500]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	4a7c      	ldr	r2, [pc, #496]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801378e:	f043 0308 	orr.w	r3, r3, #8
 8013792:	6013      	str	r3, [r2, #0]
 8013794:	4b7a      	ldr	r3, [pc, #488]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6a1b      	ldr	r3, [r3, #32]
 80137a0:	4977      	ldr	r1, [pc, #476]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80137a2:	4313      	orrs	r3, r2
 80137a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80137a6:	4b76      	ldr	r3, [pc, #472]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	69db      	ldr	r3, [r3, #28]
 80137b2:	021b      	lsls	r3, r3, #8
 80137b4:	4972      	ldr	r1, [pc, #456]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80137b6:	4313      	orrs	r3, r2
 80137b8:	604b      	str	r3, [r1, #4]
 80137ba:	e025      	b.n	8013808 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80137bc:	4b70      	ldr	r3, [pc, #448]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4a6f      	ldr	r2, [pc, #444]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80137c2:	f043 0308 	orr.w	r3, r3, #8
 80137c6:	6013      	str	r3, [r2, #0]
 80137c8:	4b6d      	ldr	r3, [pc, #436]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6a1b      	ldr	r3, [r3, #32]
 80137d4:	496a      	ldr	r1, [pc, #424]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80137d6:	4313      	orrs	r3, r2
 80137d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80137da:	4b69      	ldr	r3, [pc, #420]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	69db      	ldr	r3, [r3, #28]
 80137e6:	021b      	lsls	r3, r3, #8
 80137e8:	4965      	ldr	r1, [pc, #404]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80137ea:	4313      	orrs	r3, r2
 80137ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d109      	bne.n	8013808 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6a1b      	ldr	r3, [r3, #32]
 80137f8:	4618      	mov	r0, r3
 80137fa:	f000 fd01 	bl	8014200 <RCC_SetFlashLatencyFromMSIRange>
 80137fe:	4603      	mov	r3, r0
 8013800:	2b00      	cmp	r3, #0
 8013802:	d001      	beq.n	8013808 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8013804:	2301      	movs	r3, #1
 8013806:	e34d      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013808:	f000 fc36 	bl	8014078 <HAL_RCC_GetSysClockFreq>
 801380c:	4602      	mov	r2, r0
 801380e:	4b5c      	ldr	r3, [pc, #368]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013810:	689b      	ldr	r3, [r3, #8]
 8013812:	091b      	lsrs	r3, r3, #4
 8013814:	f003 030f 	and.w	r3, r3, #15
 8013818:	495a      	ldr	r1, [pc, #360]	; (8013984 <HAL_RCC_OscConfig+0x29c>)
 801381a:	5ccb      	ldrb	r3, [r1, r3]
 801381c:	f003 031f 	and.w	r3, r3, #31
 8013820:	fa22 f303 	lsr.w	r3, r2, r3
 8013824:	4a58      	ldr	r2, [pc, #352]	; (8013988 <HAL_RCC_OscConfig+0x2a0>)
 8013826:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8013828:	4b58      	ldr	r3, [pc, #352]	; (801398c <HAL_RCC_OscConfig+0x2a4>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	4618      	mov	r0, r3
 801382e:	f7fe fa13 	bl	8011c58 <HAL_InitTick>
 8013832:	4603      	mov	r3, r0
 8013834:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8013836:	7bfb      	ldrb	r3, [r7, #15]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d052      	beq.n	80138e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 801383c:	7bfb      	ldrb	r3, [r7, #15]
 801383e:	e331      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	699b      	ldr	r3, [r3, #24]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d032      	beq.n	80138ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8013848:	4b4d      	ldr	r3, [pc, #308]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	4a4c      	ldr	r2, [pc, #304]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801384e:	f043 0301 	orr.w	r3, r3, #1
 8013852:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013854:	f7fe fa50 	bl	8011cf8 <HAL_GetTick>
 8013858:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801385a:	e008      	b.n	801386e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801385c:	f7fe fa4c 	bl	8011cf8 <HAL_GetTick>
 8013860:	4602      	mov	r2, r0
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	1ad3      	subs	r3, r2, r3
 8013866:	2b02      	cmp	r3, #2
 8013868:	d901      	bls.n	801386e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 801386a:	2303      	movs	r3, #3
 801386c:	e31a      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801386e:	4b44      	ldr	r3, [pc, #272]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f003 0302 	and.w	r3, r3, #2
 8013876:	2b00      	cmp	r3, #0
 8013878:	d0f0      	beq.n	801385c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801387a:	4b41      	ldr	r3, [pc, #260]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	4a40      	ldr	r2, [pc, #256]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013880:	f043 0308 	orr.w	r3, r3, #8
 8013884:	6013      	str	r3, [r2, #0]
 8013886:	4b3e      	ldr	r3, [pc, #248]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6a1b      	ldr	r3, [r3, #32]
 8013892:	493b      	ldr	r1, [pc, #236]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013894:	4313      	orrs	r3, r2
 8013896:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013898:	4b39      	ldr	r3, [pc, #228]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	69db      	ldr	r3, [r3, #28]
 80138a4:	021b      	lsls	r3, r3, #8
 80138a6:	4936      	ldr	r1, [pc, #216]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80138a8:	4313      	orrs	r3, r2
 80138aa:	604b      	str	r3, [r1, #4]
 80138ac:	e01a      	b.n	80138e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80138ae:	4b34      	ldr	r3, [pc, #208]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	4a33      	ldr	r2, [pc, #204]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80138b4:	f023 0301 	bic.w	r3, r3, #1
 80138b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80138ba:	f7fe fa1d 	bl	8011cf8 <HAL_GetTick>
 80138be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80138c0:	e008      	b.n	80138d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80138c2:	f7fe fa19 	bl	8011cf8 <HAL_GetTick>
 80138c6:	4602      	mov	r2, r0
 80138c8:	693b      	ldr	r3, [r7, #16]
 80138ca:	1ad3      	subs	r3, r2, r3
 80138cc:	2b02      	cmp	r3, #2
 80138ce:	d901      	bls.n	80138d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80138d0:	2303      	movs	r3, #3
 80138d2:	e2e7      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80138d4:	4b2a      	ldr	r3, [pc, #168]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	f003 0302 	and.w	r3, r3, #2
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d1f0      	bne.n	80138c2 <HAL_RCC_OscConfig+0x1da>
 80138e0:	e000      	b.n	80138e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80138e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	f003 0301 	and.w	r3, r3, #1
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d074      	beq.n	80139da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80138f0:	69bb      	ldr	r3, [r7, #24]
 80138f2:	2b08      	cmp	r3, #8
 80138f4:	d005      	beq.n	8013902 <HAL_RCC_OscConfig+0x21a>
 80138f6:	69bb      	ldr	r3, [r7, #24]
 80138f8:	2b0c      	cmp	r3, #12
 80138fa:	d10e      	bne.n	801391a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	2b03      	cmp	r3, #3
 8013900:	d10b      	bne.n	801391a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013902:	4b1f      	ldr	r3, [pc, #124]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801390a:	2b00      	cmp	r3, #0
 801390c:	d064      	beq.n	80139d8 <HAL_RCC_OscConfig+0x2f0>
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	685b      	ldr	r3, [r3, #4]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d160      	bne.n	80139d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8013916:	2301      	movs	r3, #1
 8013918:	e2c4      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	685b      	ldr	r3, [r3, #4]
 801391e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013922:	d106      	bne.n	8013932 <HAL_RCC_OscConfig+0x24a>
 8013924:	4b16      	ldr	r3, [pc, #88]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	4a15      	ldr	r2, [pc, #84]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801392e:	6013      	str	r3, [r2, #0]
 8013930:	e01d      	b.n	801396e <HAL_RCC_OscConfig+0x286>
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801393a:	d10c      	bne.n	8013956 <HAL_RCC_OscConfig+0x26e>
 801393c:	4b10      	ldr	r3, [pc, #64]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	4a0f      	ldr	r2, [pc, #60]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013946:	6013      	str	r3, [r2, #0]
 8013948:	4b0d      	ldr	r3, [pc, #52]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	4a0c      	ldr	r2, [pc, #48]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801394e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013952:	6013      	str	r3, [r2, #0]
 8013954:	e00b      	b.n	801396e <HAL_RCC_OscConfig+0x286>
 8013956:	4b0a      	ldr	r3, [pc, #40]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	4a09      	ldr	r2, [pc, #36]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 801395c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013960:	6013      	str	r3, [r2, #0]
 8013962:	4b07      	ldr	r3, [pc, #28]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	4a06      	ldr	r2, [pc, #24]	; (8013980 <HAL_RCC_OscConfig+0x298>)
 8013968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801396c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d01c      	beq.n	80139b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013976:	f7fe f9bf 	bl	8011cf8 <HAL_GetTick>
 801397a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801397c:	e011      	b.n	80139a2 <HAL_RCC_OscConfig+0x2ba>
 801397e:	bf00      	nop
 8013980:	40021000 	.word	0x40021000
 8013984:	080181f8 	.word	0x080181f8
 8013988:	20000004 	.word	0x20000004
 801398c:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013990:	f7fe f9b2 	bl	8011cf8 <HAL_GetTick>
 8013994:	4602      	mov	r2, r0
 8013996:	693b      	ldr	r3, [r7, #16]
 8013998:	1ad3      	subs	r3, r2, r3
 801399a:	2b64      	cmp	r3, #100	; 0x64
 801399c:	d901      	bls.n	80139a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 801399e:	2303      	movs	r3, #3
 80139a0:	e280      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80139a2:	4baf      	ldr	r3, [pc, #700]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d0f0      	beq.n	8013990 <HAL_RCC_OscConfig+0x2a8>
 80139ae:	e014      	b.n	80139da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80139b0:	f7fe f9a2 	bl	8011cf8 <HAL_GetTick>
 80139b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80139b6:	e008      	b.n	80139ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80139b8:	f7fe f99e 	bl	8011cf8 <HAL_GetTick>
 80139bc:	4602      	mov	r2, r0
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	1ad3      	subs	r3, r2, r3
 80139c2:	2b64      	cmp	r3, #100	; 0x64
 80139c4:	d901      	bls.n	80139ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80139c6:	2303      	movs	r3, #3
 80139c8:	e26c      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80139ca:	4ba5      	ldr	r3, [pc, #660]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d1f0      	bne.n	80139b8 <HAL_RCC_OscConfig+0x2d0>
 80139d6:	e000      	b.n	80139da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80139d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	f003 0302 	and.w	r3, r3, #2
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d060      	beq.n	8013aa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80139e6:	69bb      	ldr	r3, [r7, #24]
 80139e8:	2b04      	cmp	r3, #4
 80139ea:	d005      	beq.n	80139f8 <HAL_RCC_OscConfig+0x310>
 80139ec:	69bb      	ldr	r3, [r7, #24]
 80139ee:	2b0c      	cmp	r3, #12
 80139f0:	d119      	bne.n	8013a26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	2b02      	cmp	r3, #2
 80139f6:	d116      	bne.n	8013a26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80139f8:	4b99      	ldr	r3, [pc, #612]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d005      	beq.n	8013a10 <HAL_RCC_OscConfig+0x328>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	68db      	ldr	r3, [r3, #12]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d101      	bne.n	8013a10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	e249      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013a10:	4b93      	ldr	r3, [pc, #588]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	691b      	ldr	r3, [r3, #16]
 8013a1c:	061b      	lsls	r3, r3, #24
 8013a1e:	4990      	ldr	r1, [pc, #576]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013a20:	4313      	orrs	r3, r2
 8013a22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013a24:	e040      	b.n	8013aa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	68db      	ldr	r3, [r3, #12]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d023      	beq.n	8013a76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013a2e:	4b8c      	ldr	r3, [pc, #560]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	4a8b      	ldr	r2, [pc, #556]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a3a:	f7fe f95d 	bl	8011cf8 <HAL_GetTick>
 8013a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013a40:	e008      	b.n	8013a54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013a42:	f7fe f959 	bl	8011cf8 <HAL_GetTick>
 8013a46:	4602      	mov	r2, r0
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	1ad3      	subs	r3, r2, r3
 8013a4c:	2b02      	cmp	r3, #2
 8013a4e:	d901      	bls.n	8013a54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8013a50:	2303      	movs	r3, #3
 8013a52:	e227      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013a54:	4b82      	ldr	r3, [pc, #520]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d0f0      	beq.n	8013a42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013a60:	4b7f      	ldr	r3, [pc, #508]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	691b      	ldr	r3, [r3, #16]
 8013a6c:	061b      	lsls	r3, r3, #24
 8013a6e:	497c      	ldr	r1, [pc, #496]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013a70:	4313      	orrs	r3, r2
 8013a72:	604b      	str	r3, [r1, #4]
 8013a74:	e018      	b.n	8013aa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013a76:	4b7a      	ldr	r3, [pc, #488]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	4a79      	ldr	r2, [pc, #484]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a82:	f7fe f939 	bl	8011cf8 <HAL_GetTick>
 8013a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013a88:	e008      	b.n	8013a9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013a8a:	f7fe f935 	bl	8011cf8 <HAL_GetTick>
 8013a8e:	4602      	mov	r2, r0
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	1ad3      	subs	r3, r2, r3
 8013a94:	2b02      	cmp	r3, #2
 8013a96:	d901      	bls.n	8013a9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8013a98:	2303      	movs	r3, #3
 8013a9a:	e203      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013a9c:	4b70      	ldr	r3, [pc, #448]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d1f0      	bne.n	8013a8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	f003 0308 	and.w	r3, r3, #8
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d03c      	beq.n	8013b2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	695b      	ldr	r3, [r3, #20]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d01c      	beq.n	8013af6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013abc:	4b68      	ldr	r3, [pc, #416]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013ac2:	4a67      	ldr	r2, [pc, #412]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013ac4:	f043 0301 	orr.w	r3, r3, #1
 8013ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013acc:	f7fe f914 	bl	8011cf8 <HAL_GetTick>
 8013ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013ad2:	e008      	b.n	8013ae6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013ad4:	f7fe f910 	bl	8011cf8 <HAL_GetTick>
 8013ad8:	4602      	mov	r2, r0
 8013ada:	693b      	ldr	r3, [r7, #16]
 8013adc:	1ad3      	subs	r3, r2, r3
 8013ade:	2b02      	cmp	r3, #2
 8013ae0:	d901      	bls.n	8013ae6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8013ae2:	2303      	movs	r3, #3
 8013ae4:	e1de      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013ae6:	4b5e      	ldr	r3, [pc, #376]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013aec:	f003 0302 	and.w	r3, r3, #2
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d0ef      	beq.n	8013ad4 <HAL_RCC_OscConfig+0x3ec>
 8013af4:	e01b      	b.n	8013b2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013af6:	4b5a      	ldr	r3, [pc, #360]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013afc:	4a58      	ldr	r2, [pc, #352]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013afe:	f023 0301 	bic.w	r3, r3, #1
 8013b02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013b06:	f7fe f8f7 	bl	8011cf8 <HAL_GetTick>
 8013b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013b0c:	e008      	b.n	8013b20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013b0e:	f7fe f8f3 	bl	8011cf8 <HAL_GetTick>
 8013b12:	4602      	mov	r2, r0
 8013b14:	693b      	ldr	r3, [r7, #16]
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	2b02      	cmp	r3, #2
 8013b1a:	d901      	bls.n	8013b20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8013b1c:	2303      	movs	r3, #3
 8013b1e:	e1c1      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8013b20:	4b4f      	ldr	r3, [pc, #316]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013b26:	f003 0302 	and.w	r3, r3, #2
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d1ef      	bne.n	8013b0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	f003 0304 	and.w	r3, r3, #4
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	f000 80a6 	beq.w	8013c88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8013b40:	4b47      	ldr	r3, [pc, #284]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10d      	bne.n	8013b68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013b4c:	4b44      	ldr	r3, [pc, #272]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b50:	4a43      	ldr	r2, [pc, #268]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b56:	6593      	str	r3, [r2, #88]	; 0x58
 8013b58:	4b41      	ldr	r3, [pc, #260]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b60:	60bb      	str	r3, [r7, #8]
 8013b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013b64:	2301      	movs	r3, #1
 8013b66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013b68:	4b3e      	ldr	r3, [pc, #248]	; (8013c64 <HAL_RCC_OscConfig+0x57c>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d118      	bne.n	8013ba6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013b74:	4b3b      	ldr	r3, [pc, #236]	; (8013c64 <HAL_RCC_OscConfig+0x57c>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	4a3a      	ldr	r2, [pc, #232]	; (8013c64 <HAL_RCC_OscConfig+0x57c>)
 8013b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013b7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013b80:	f7fe f8ba 	bl	8011cf8 <HAL_GetTick>
 8013b84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013b86:	e008      	b.n	8013b9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013b88:	f7fe f8b6 	bl	8011cf8 <HAL_GetTick>
 8013b8c:	4602      	mov	r2, r0
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	1ad3      	subs	r3, r2, r3
 8013b92:	2b02      	cmp	r3, #2
 8013b94:	d901      	bls.n	8013b9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8013b96:	2303      	movs	r3, #3
 8013b98:	e184      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013b9a:	4b32      	ldr	r3, [pc, #200]	; (8013c64 <HAL_RCC_OscConfig+0x57c>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d0f0      	beq.n	8013b88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	689b      	ldr	r3, [r3, #8]
 8013baa:	2b01      	cmp	r3, #1
 8013bac:	d108      	bne.n	8013bc0 <HAL_RCC_OscConfig+0x4d8>
 8013bae:	4b2c      	ldr	r3, [pc, #176]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bb4:	4a2a      	ldr	r2, [pc, #168]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013bb6:	f043 0301 	orr.w	r3, r3, #1
 8013bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013bbe:	e024      	b.n	8013c0a <HAL_RCC_OscConfig+0x522>
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	689b      	ldr	r3, [r3, #8]
 8013bc4:	2b05      	cmp	r3, #5
 8013bc6:	d110      	bne.n	8013bea <HAL_RCC_OscConfig+0x502>
 8013bc8:	4b25      	ldr	r3, [pc, #148]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bce:	4a24      	ldr	r2, [pc, #144]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013bd0:	f043 0304 	orr.w	r3, r3, #4
 8013bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013bd8:	4b21      	ldr	r3, [pc, #132]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bde:	4a20      	ldr	r2, [pc, #128]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013be0:	f043 0301 	orr.w	r3, r3, #1
 8013be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013be8:	e00f      	b.n	8013c0a <HAL_RCC_OscConfig+0x522>
 8013bea:	4b1d      	ldr	r3, [pc, #116]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bf0:	4a1b      	ldr	r2, [pc, #108]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013bf2:	f023 0301 	bic.w	r3, r3, #1
 8013bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013bfa:	4b19      	ldr	r3, [pc, #100]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c00:	4a17      	ldr	r2, [pc, #92]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013c02:	f023 0304 	bic.w	r3, r3, #4
 8013c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	689b      	ldr	r3, [r3, #8]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d016      	beq.n	8013c40 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013c12:	f7fe f871 	bl	8011cf8 <HAL_GetTick>
 8013c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013c18:	e00a      	b.n	8013c30 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013c1a:	f7fe f86d 	bl	8011cf8 <HAL_GetTick>
 8013c1e:	4602      	mov	r2, r0
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	1ad3      	subs	r3, r2, r3
 8013c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c28:	4293      	cmp	r3, r2
 8013c2a:	d901      	bls.n	8013c30 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8013c2c:	2303      	movs	r3, #3
 8013c2e:	e139      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013c30:	4b0b      	ldr	r3, [pc, #44]	; (8013c60 <HAL_RCC_OscConfig+0x578>)
 8013c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c36:	f003 0302 	and.w	r3, r3, #2
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d0ed      	beq.n	8013c1a <HAL_RCC_OscConfig+0x532>
 8013c3e:	e01a      	b.n	8013c76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013c40:	f7fe f85a 	bl	8011cf8 <HAL_GetTick>
 8013c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013c46:	e00f      	b.n	8013c68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013c48:	f7fe f856 	bl	8011cf8 <HAL_GetTick>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	1ad3      	subs	r3, r2, r3
 8013c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c56:	4293      	cmp	r3, r2
 8013c58:	d906      	bls.n	8013c68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8013c5a:	2303      	movs	r3, #3
 8013c5c:	e122      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
 8013c5e:	bf00      	nop
 8013c60:	40021000 	.word	0x40021000
 8013c64:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013c68:	4b90      	ldr	r3, [pc, #576]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c6e:	f003 0302 	and.w	r3, r3, #2
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d1e8      	bne.n	8013c48 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013c76:	7ffb      	ldrb	r3, [r7, #31]
 8013c78:	2b01      	cmp	r3, #1
 8013c7a:	d105      	bne.n	8013c88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013c7c:	4b8b      	ldr	r3, [pc, #556]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c80:	4a8a      	ldr	r2, [pc, #552]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013c86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	f000 8108 	beq.w	8013ea2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c96:	2b02      	cmp	r3, #2
 8013c98:	f040 80d0 	bne.w	8013e3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8013c9c:	4b83      	ldr	r3, [pc, #524]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013c9e:	68db      	ldr	r3, [r3, #12]
 8013ca0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	f003 0203 	and.w	r2, r3, #3
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d130      	bne.n	8013d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cba:	3b01      	subs	r3, #1
 8013cbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d127      	bne.n	8013d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ccc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d11f      	bne.n	8013d12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013cdc:	2a07      	cmp	r2, #7
 8013cde:	bf14      	ite	ne
 8013ce0:	2201      	movne	r2, #1
 8013ce2:	2200      	moveq	r2, #0
 8013ce4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013ce6:	4293      	cmp	r3, r2
 8013ce8:	d113      	bne.n	8013d12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cf4:	085b      	lsrs	r3, r3, #1
 8013cf6:	3b01      	subs	r3, #1
 8013cf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d109      	bne.n	8013d12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d08:	085b      	lsrs	r3, r3, #1
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d06e      	beq.n	8013df0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013d12:	69bb      	ldr	r3, [r7, #24]
 8013d14:	2b0c      	cmp	r3, #12
 8013d16:	d069      	beq.n	8013dec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8013d18:	4b64      	ldr	r3, [pc, #400]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d105      	bne.n	8013d30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8013d24:	4b61      	ldr	r3, [pc, #388]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d001      	beq.n	8013d34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8013d30:	2301      	movs	r3, #1
 8013d32:	e0b7      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8013d34:	4b5d      	ldr	r3, [pc, #372]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	4a5c      	ldr	r2, [pc, #368]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013d3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8013d40:	f7fd ffda 	bl	8011cf8 <HAL_GetTick>
 8013d44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013d46:	e008      	b.n	8013d5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013d48:	f7fd ffd6 	bl	8011cf8 <HAL_GetTick>
 8013d4c:	4602      	mov	r2, r0
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	1ad3      	subs	r3, r2, r3
 8013d52:	2b02      	cmp	r3, #2
 8013d54:	d901      	bls.n	8013d5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8013d56:	2303      	movs	r3, #3
 8013d58:	e0a4      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013d5a:	4b54      	ldr	r3, [pc, #336]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d1f0      	bne.n	8013d48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013d66:	4b51      	ldr	r3, [pc, #324]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013d68:	68da      	ldr	r2, [r3, #12]
 8013d6a:	4b51      	ldr	r3, [pc, #324]	; (8013eb0 <HAL_RCC_OscConfig+0x7c8>)
 8013d6c:	4013      	ands	r3, r2
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8013d76:	3a01      	subs	r2, #1
 8013d78:	0112      	lsls	r2, r2, #4
 8013d7a:	4311      	orrs	r1, r2
 8013d7c:	687a      	ldr	r2, [r7, #4]
 8013d7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013d80:	0212      	lsls	r2, r2, #8
 8013d82:	4311      	orrs	r1, r2
 8013d84:	687a      	ldr	r2, [r7, #4]
 8013d86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8013d88:	0852      	lsrs	r2, r2, #1
 8013d8a:	3a01      	subs	r2, #1
 8013d8c:	0552      	lsls	r2, r2, #21
 8013d8e:	4311      	orrs	r1, r2
 8013d90:	687a      	ldr	r2, [r7, #4]
 8013d92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013d94:	0852      	lsrs	r2, r2, #1
 8013d96:	3a01      	subs	r2, #1
 8013d98:	0652      	lsls	r2, r2, #25
 8013d9a:	4311      	orrs	r1, r2
 8013d9c:	687a      	ldr	r2, [r7, #4]
 8013d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013da0:	0912      	lsrs	r2, r2, #4
 8013da2:	0452      	lsls	r2, r2, #17
 8013da4:	430a      	orrs	r2, r1
 8013da6:	4941      	ldr	r1, [pc, #260]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013da8:	4313      	orrs	r3, r2
 8013daa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8013dac:	4b3f      	ldr	r3, [pc, #252]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	4a3e      	ldr	r2, [pc, #248]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013db6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013db8:	4b3c      	ldr	r3, [pc, #240]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	4a3b      	ldr	r2, [pc, #236]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013dc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8013dc4:	f7fd ff98 	bl	8011cf8 <HAL_GetTick>
 8013dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013dca:	e008      	b.n	8013dde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013dcc:	f7fd ff94 	bl	8011cf8 <HAL_GetTick>
 8013dd0:	4602      	mov	r2, r0
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	1ad3      	subs	r3, r2, r3
 8013dd6:	2b02      	cmp	r3, #2
 8013dd8:	d901      	bls.n	8013dde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8013dda:	2303      	movs	r3, #3
 8013ddc:	e062      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013dde:	4b33      	ldr	r3, [pc, #204]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d0f0      	beq.n	8013dcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013dea:	e05a      	b.n	8013ea2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8013dec:	2301      	movs	r3, #1
 8013dee:	e059      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013df0:	4b2e      	ldr	r3, [pc, #184]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d152      	bne.n	8013ea2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8013dfc:	4b2b      	ldr	r3, [pc, #172]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	4a2a      	ldr	r2, [pc, #168]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013e08:	4b28      	ldr	r3, [pc, #160]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e0a:	68db      	ldr	r3, [r3, #12]
 8013e0c:	4a27      	ldr	r2, [pc, #156]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8013e14:	f7fd ff70 	bl	8011cf8 <HAL_GetTick>
 8013e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013e1a:	e008      	b.n	8013e2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013e1c:	f7fd ff6c 	bl	8011cf8 <HAL_GetTick>
 8013e20:	4602      	mov	r2, r0
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	1ad3      	subs	r3, r2, r3
 8013e26:	2b02      	cmp	r3, #2
 8013e28:	d901      	bls.n	8013e2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8013e2a:	2303      	movs	r3, #3
 8013e2c:	e03a      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013e2e:	4b1f      	ldr	r3, [pc, #124]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d0f0      	beq.n	8013e1c <HAL_RCC_OscConfig+0x734>
 8013e3a:	e032      	b.n	8013ea2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013e3c:	69bb      	ldr	r3, [r7, #24]
 8013e3e:	2b0c      	cmp	r3, #12
 8013e40:	d02d      	beq.n	8013e9e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013e42:	4b1a      	ldr	r3, [pc, #104]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	4a19      	ldr	r2, [pc, #100]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013e4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8013e4e:	4b17      	ldr	r3, [pc, #92]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d105      	bne.n	8013e66 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8013e5a:	4b14      	ldr	r3, [pc, #80]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e5c:	68db      	ldr	r3, [r3, #12]
 8013e5e:	4a13      	ldr	r2, [pc, #76]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e60:	f023 0303 	bic.w	r3, r3, #3
 8013e64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8013e66:	4b11      	ldr	r3, [pc, #68]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e68:	68db      	ldr	r3, [r3, #12]
 8013e6a:	4a10      	ldr	r2, [pc, #64]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8013e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013e74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e76:	f7fd ff3f 	bl	8011cf8 <HAL_GetTick>
 8013e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013e7c:	e008      	b.n	8013e90 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013e7e:	f7fd ff3b 	bl	8011cf8 <HAL_GetTick>
 8013e82:	4602      	mov	r2, r0
 8013e84:	693b      	ldr	r3, [r7, #16]
 8013e86:	1ad3      	subs	r3, r2, r3
 8013e88:	2b02      	cmp	r3, #2
 8013e8a:	d901      	bls.n	8013e90 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8013e8c:	2303      	movs	r3, #3
 8013e8e:	e009      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013e90:	4b06      	ldr	r3, [pc, #24]	; (8013eac <HAL_RCC_OscConfig+0x7c4>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d1f0      	bne.n	8013e7e <HAL_RCC_OscConfig+0x796>
 8013e9c:	e001      	b.n	8013ea2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	e000      	b.n	8013ea4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8013ea2:	2300      	movs	r3, #0
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3720      	adds	r7, #32
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	40021000 	.word	0x40021000
 8013eb0:	f99d808c 	.word	0xf99d808c

08013eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d101      	bne.n	8013ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	e0c8      	b.n	801405a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013ec8:	4b66      	ldr	r3, [pc, #408]	; (8014064 <HAL_RCC_ClockConfig+0x1b0>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	f003 0307 	and.w	r3, r3, #7
 8013ed0:	683a      	ldr	r2, [r7, #0]
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d910      	bls.n	8013ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013ed6:	4b63      	ldr	r3, [pc, #396]	; (8014064 <HAL_RCC_ClockConfig+0x1b0>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	f023 0207 	bic.w	r2, r3, #7
 8013ede:	4961      	ldr	r1, [pc, #388]	; (8014064 <HAL_RCC_ClockConfig+0x1b0>)
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	4313      	orrs	r3, r2
 8013ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013ee6:	4b5f      	ldr	r3, [pc, #380]	; (8014064 <HAL_RCC_ClockConfig+0x1b0>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f003 0307 	and.w	r3, r3, #7
 8013eee:	683a      	ldr	r2, [r7, #0]
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d001      	beq.n	8013ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	e0b0      	b.n	801405a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	f003 0301 	and.w	r3, r3, #1
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d04c      	beq.n	8013f9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	685b      	ldr	r3, [r3, #4]
 8013f08:	2b03      	cmp	r3, #3
 8013f0a:	d107      	bne.n	8013f1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013f0c:	4b56      	ldr	r3, [pc, #344]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d121      	bne.n	8013f5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8013f18:	2301      	movs	r3, #1
 8013f1a:	e09e      	b.n	801405a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	685b      	ldr	r3, [r3, #4]
 8013f20:	2b02      	cmp	r3, #2
 8013f22:	d107      	bne.n	8013f34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013f24:	4b50      	ldr	r3, [pc, #320]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d115      	bne.n	8013f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8013f30:	2301      	movs	r3, #1
 8013f32:	e092      	b.n	801405a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	685b      	ldr	r3, [r3, #4]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d107      	bne.n	8013f4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013f3c:	4b4a      	ldr	r3, [pc, #296]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	f003 0302 	and.w	r3, r3, #2
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d109      	bne.n	8013f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8013f48:	2301      	movs	r3, #1
 8013f4a:	e086      	b.n	801405a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013f4c:	4b46      	ldr	r3, [pc, #280]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d101      	bne.n	8013f5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8013f58:	2301      	movs	r3, #1
 8013f5a:	e07e      	b.n	801405a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013f5c:	4b42      	ldr	r3, [pc, #264]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	f023 0203 	bic.w	r2, r3, #3
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	493f      	ldr	r1, [pc, #252]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8013f6a:	4313      	orrs	r3, r2
 8013f6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013f6e:	f7fd fec3 	bl	8011cf8 <HAL_GetTick>
 8013f72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013f74:	e00a      	b.n	8013f8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013f76:	f7fd febf 	bl	8011cf8 <HAL_GetTick>
 8013f7a:	4602      	mov	r2, r0
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	1ad3      	subs	r3, r2, r3
 8013f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f84:	4293      	cmp	r3, r2
 8013f86:	d901      	bls.n	8013f8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8013f88:	2303      	movs	r3, #3
 8013f8a:	e066      	b.n	801405a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013f8c:	4b36      	ldr	r3, [pc, #216]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8013f8e:	689b      	ldr	r3, [r3, #8]
 8013f90:	f003 020c 	and.w	r2, r3, #12
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	685b      	ldr	r3, [r3, #4]
 8013f98:	009b      	lsls	r3, r3, #2
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d1eb      	bne.n	8013f76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	f003 0302 	and.w	r3, r3, #2
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d008      	beq.n	8013fbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013faa:	4b2f      	ldr	r3, [pc, #188]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8013fac:	689b      	ldr	r3, [r3, #8]
 8013fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	689b      	ldr	r3, [r3, #8]
 8013fb6:	492c      	ldr	r1, [pc, #176]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8013fb8:	4313      	orrs	r3, r2
 8013fba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013fbc:	4b29      	ldr	r3, [pc, #164]	; (8014064 <HAL_RCC_ClockConfig+0x1b0>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	f003 0307 	and.w	r3, r3, #7
 8013fc4:	683a      	ldr	r2, [r7, #0]
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d210      	bcs.n	8013fec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013fca:	4b26      	ldr	r3, [pc, #152]	; (8014064 <HAL_RCC_ClockConfig+0x1b0>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	f023 0207 	bic.w	r2, r3, #7
 8013fd2:	4924      	ldr	r1, [pc, #144]	; (8014064 <HAL_RCC_ClockConfig+0x1b0>)
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	4313      	orrs	r3, r2
 8013fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013fda:	4b22      	ldr	r3, [pc, #136]	; (8014064 <HAL_RCC_ClockConfig+0x1b0>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	f003 0307 	and.w	r3, r3, #7
 8013fe2:	683a      	ldr	r2, [r7, #0]
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d001      	beq.n	8013fec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8013fe8:	2301      	movs	r3, #1
 8013fea:	e036      	b.n	801405a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	f003 0304 	and.w	r3, r3, #4
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d008      	beq.n	801400a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013ff8:	4b1b      	ldr	r3, [pc, #108]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8013ffa:	689b      	ldr	r3, [r3, #8]
 8013ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	68db      	ldr	r3, [r3, #12]
 8014004:	4918      	ldr	r1, [pc, #96]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8014006:	4313      	orrs	r3, r2
 8014008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	f003 0308 	and.w	r3, r3, #8
 8014012:	2b00      	cmp	r3, #0
 8014014:	d009      	beq.n	801402a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014016:	4b14      	ldr	r3, [pc, #80]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8014018:	689b      	ldr	r3, [r3, #8]
 801401a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	691b      	ldr	r3, [r3, #16]
 8014022:	00db      	lsls	r3, r3, #3
 8014024:	4910      	ldr	r1, [pc, #64]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8014026:	4313      	orrs	r3, r2
 8014028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801402a:	f000 f825 	bl	8014078 <HAL_RCC_GetSysClockFreq>
 801402e:	4602      	mov	r2, r0
 8014030:	4b0d      	ldr	r3, [pc, #52]	; (8014068 <HAL_RCC_ClockConfig+0x1b4>)
 8014032:	689b      	ldr	r3, [r3, #8]
 8014034:	091b      	lsrs	r3, r3, #4
 8014036:	f003 030f 	and.w	r3, r3, #15
 801403a:	490c      	ldr	r1, [pc, #48]	; (801406c <HAL_RCC_ClockConfig+0x1b8>)
 801403c:	5ccb      	ldrb	r3, [r1, r3]
 801403e:	f003 031f 	and.w	r3, r3, #31
 8014042:	fa22 f303 	lsr.w	r3, r2, r3
 8014046:	4a0a      	ldr	r2, [pc, #40]	; (8014070 <HAL_RCC_ClockConfig+0x1bc>)
 8014048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801404a:	4b0a      	ldr	r3, [pc, #40]	; (8014074 <HAL_RCC_ClockConfig+0x1c0>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	4618      	mov	r0, r3
 8014050:	f7fd fe02 	bl	8011c58 <HAL_InitTick>
 8014054:	4603      	mov	r3, r0
 8014056:	72fb      	strb	r3, [r7, #11]

  return status;
 8014058:	7afb      	ldrb	r3, [r7, #11]
}
 801405a:	4618      	mov	r0, r3
 801405c:	3710      	adds	r7, #16
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	40022000 	.word	0x40022000
 8014068:	40021000 	.word	0x40021000
 801406c:	080181f8 	.word	0x080181f8
 8014070:	20000004 	.word	0x20000004
 8014074:	20000014 	.word	0x20000014

08014078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014078:	b480      	push	{r7}
 801407a:	b089      	sub	sp, #36	; 0x24
 801407c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801407e:	2300      	movs	r3, #0
 8014080:	61fb      	str	r3, [r7, #28]
 8014082:	2300      	movs	r3, #0
 8014084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014086:	4b3e      	ldr	r3, [pc, #248]	; (8014180 <HAL_RCC_GetSysClockFreq+0x108>)
 8014088:	689b      	ldr	r3, [r3, #8]
 801408a:	f003 030c 	and.w	r3, r3, #12
 801408e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014090:	4b3b      	ldr	r3, [pc, #236]	; (8014180 <HAL_RCC_GetSysClockFreq+0x108>)
 8014092:	68db      	ldr	r3, [r3, #12]
 8014094:	f003 0303 	and.w	r3, r3, #3
 8014098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d005      	beq.n	80140ac <HAL_RCC_GetSysClockFreq+0x34>
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	2b0c      	cmp	r3, #12
 80140a4:	d121      	bne.n	80140ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d11e      	bne.n	80140ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80140ac:	4b34      	ldr	r3, [pc, #208]	; (8014180 <HAL_RCC_GetSysClockFreq+0x108>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f003 0308 	and.w	r3, r3, #8
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d107      	bne.n	80140c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80140b8:	4b31      	ldr	r3, [pc, #196]	; (8014180 <HAL_RCC_GetSysClockFreq+0x108>)
 80140ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80140be:	0a1b      	lsrs	r3, r3, #8
 80140c0:	f003 030f 	and.w	r3, r3, #15
 80140c4:	61fb      	str	r3, [r7, #28]
 80140c6:	e005      	b.n	80140d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80140c8:	4b2d      	ldr	r3, [pc, #180]	; (8014180 <HAL_RCC_GetSysClockFreq+0x108>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	091b      	lsrs	r3, r3, #4
 80140ce:	f003 030f 	and.w	r3, r3, #15
 80140d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80140d4:	4a2b      	ldr	r2, [pc, #172]	; (8014184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80140d6:	69fb      	ldr	r3, [r7, #28]
 80140d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80140dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d10d      	bne.n	8014100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80140e4:	69fb      	ldr	r3, [r7, #28]
 80140e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80140e8:	e00a      	b.n	8014100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	2b04      	cmp	r3, #4
 80140ee:	d102      	bne.n	80140f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80140f0:	4b25      	ldr	r3, [pc, #148]	; (8014188 <HAL_RCC_GetSysClockFreq+0x110>)
 80140f2:	61bb      	str	r3, [r7, #24]
 80140f4:	e004      	b.n	8014100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80140f6:	693b      	ldr	r3, [r7, #16]
 80140f8:	2b08      	cmp	r3, #8
 80140fa:	d101      	bne.n	8014100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80140fc:	4b23      	ldr	r3, [pc, #140]	; (801418c <HAL_RCC_GetSysClockFreq+0x114>)
 80140fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	2b0c      	cmp	r3, #12
 8014104:	d134      	bne.n	8014170 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8014106:	4b1e      	ldr	r3, [pc, #120]	; (8014180 <HAL_RCC_GetSysClockFreq+0x108>)
 8014108:	68db      	ldr	r3, [r3, #12]
 801410a:	f003 0303 	and.w	r3, r3, #3
 801410e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	2b02      	cmp	r3, #2
 8014114:	d003      	beq.n	801411e <HAL_RCC_GetSysClockFreq+0xa6>
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	2b03      	cmp	r3, #3
 801411a:	d003      	beq.n	8014124 <HAL_RCC_GetSysClockFreq+0xac>
 801411c:	e005      	b.n	801412a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801411e:	4b1a      	ldr	r3, [pc, #104]	; (8014188 <HAL_RCC_GetSysClockFreq+0x110>)
 8014120:	617b      	str	r3, [r7, #20]
      break;
 8014122:	e005      	b.n	8014130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8014124:	4b19      	ldr	r3, [pc, #100]	; (801418c <HAL_RCC_GetSysClockFreq+0x114>)
 8014126:	617b      	str	r3, [r7, #20]
      break;
 8014128:	e002      	b.n	8014130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	617b      	str	r3, [r7, #20]
      break;
 801412e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8014130:	4b13      	ldr	r3, [pc, #76]	; (8014180 <HAL_RCC_GetSysClockFreq+0x108>)
 8014132:	68db      	ldr	r3, [r3, #12]
 8014134:	091b      	lsrs	r3, r3, #4
 8014136:	f003 0307 	and.w	r3, r3, #7
 801413a:	3301      	adds	r3, #1
 801413c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801413e:	4b10      	ldr	r3, [pc, #64]	; (8014180 <HAL_RCC_GetSysClockFreq+0x108>)
 8014140:	68db      	ldr	r3, [r3, #12]
 8014142:	0a1b      	lsrs	r3, r3, #8
 8014144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014148:	697a      	ldr	r2, [r7, #20]
 801414a:	fb02 f203 	mul.w	r2, r2, r3
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	fbb2 f3f3 	udiv	r3, r2, r3
 8014154:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8014156:	4b0a      	ldr	r3, [pc, #40]	; (8014180 <HAL_RCC_GetSysClockFreq+0x108>)
 8014158:	68db      	ldr	r3, [r3, #12]
 801415a:	0e5b      	lsrs	r3, r3, #25
 801415c:	f003 0303 	and.w	r3, r3, #3
 8014160:	3301      	adds	r3, #1
 8014162:	005b      	lsls	r3, r3, #1
 8014164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8014166:	697a      	ldr	r2, [r7, #20]
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	fbb2 f3f3 	udiv	r3, r2, r3
 801416e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8014170:	69bb      	ldr	r3, [r7, #24]
}
 8014172:	4618      	mov	r0, r3
 8014174:	3724      	adds	r7, #36	; 0x24
 8014176:	46bd      	mov	sp, r7
 8014178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417c:	4770      	bx	lr
 801417e:	bf00      	nop
 8014180:	40021000 	.word	0x40021000
 8014184:	08018210 	.word	0x08018210
 8014188:	00f42400 	.word	0x00f42400
 801418c:	007a1200 	.word	0x007a1200

08014190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014190:	b480      	push	{r7}
 8014192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014194:	4b03      	ldr	r3, [pc, #12]	; (80141a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8014196:	681b      	ldr	r3, [r3, #0]
}
 8014198:	4618      	mov	r0, r3
 801419a:	46bd      	mov	sp, r7
 801419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a0:	4770      	bx	lr
 80141a2:	bf00      	nop
 80141a4:	20000004 	.word	0x20000004

080141a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80141ac:	f7ff fff0 	bl	8014190 <HAL_RCC_GetHCLKFreq>
 80141b0:	4602      	mov	r2, r0
 80141b2:	4b06      	ldr	r3, [pc, #24]	; (80141cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80141b4:	689b      	ldr	r3, [r3, #8]
 80141b6:	0a1b      	lsrs	r3, r3, #8
 80141b8:	f003 0307 	and.w	r3, r3, #7
 80141bc:	4904      	ldr	r1, [pc, #16]	; (80141d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80141be:	5ccb      	ldrb	r3, [r1, r3]
 80141c0:	f003 031f 	and.w	r3, r3, #31
 80141c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	bd80      	pop	{r7, pc}
 80141cc:	40021000 	.word	0x40021000
 80141d0:	08018208 	.word	0x08018208

080141d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80141d8:	f7ff ffda 	bl	8014190 <HAL_RCC_GetHCLKFreq>
 80141dc:	4602      	mov	r2, r0
 80141de:	4b06      	ldr	r3, [pc, #24]	; (80141f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80141e0:	689b      	ldr	r3, [r3, #8]
 80141e2:	0adb      	lsrs	r3, r3, #11
 80141e4:	f003 0307 	and.w	r3, r3, #7
 80141e8:	4904      	ldr	r1, [pc, #16]	; (80141fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80141ea:	5ccb      	ldrb	r3, [r1, r3]
 80141ec:	f003 031f 	and.w	r3, r3, #31
 80141f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	40021000 	.word	0x40021000
 80141fc:	08018208 	.word	0x08018208

08014200 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b086      	sub	sp, #24
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8014208:	2300      	movs	r3, #0
 801420a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801420c:	4b2a      	ldr	r3, [pc, #168]	; (80142b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014214:	2b00      	cmp	r3, #0
 8014216:	d003      	beq.n	8014220 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8014218:	f7ff fa02 	bl	8013620 <HAL_PWREx_GetVoltageRange>
 801421c:	6178      	str	r0, [r7, #20]
 801421e:	e014      	b.n	801424a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8014220:	4b25      	ldr	r3, [pc, #148]	; (80142b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8014222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014224:	4a24      	ldr	r2, [pc, #144]	; (80142b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8014226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801422a:	6593      	str	r3, [r2, #88]	; 0x58
 801422c:	4b22      	ldr	r3, [pc, #136]	; (80142b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014234:	60fb      	str	r3, [r7, #12]
 8014236:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8014238:	f7ff f9f2 	bl	8013620 <HAL_PWREx_GetVoltageRange>
 801423c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801423e:	4b1e      	ldr	r3, [pc, #120]	; (80142b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8014240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014242:	4a1d      	ldr	r2, [pc, #116]	; (80142b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8014244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014248:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801424a:	697b      	ldr	r3, [r7, #20]
 801424c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014250:	d10b      	bne.n	801426a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2b80      	cmp	r3, #128	; 0x80
 8014256:	d919      	bls.n	801428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2ba0      	cmp	r3, #160	; 0xa0
 801425c:	d902      	bls.n	8014264 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801425e:	2302      	movs	r3, #2
 8014260:	613b      	str	r3, [r7, #16]
 8014262:	e013      	b.n	801428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8014264:	2301      	movs	r3, #1
 8014266:	613b      	str	r3, [r7, #16]
 8014268:	e010      	b.n	801428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2b80      	cmp	r3, #128	; 0x80
 801426e:	d902      	bls.n	8014276 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8014270:	2303      	movs	r3, #3
 8014272:	613b      	str	r3, [r7, #16]
 8014274:	e00a      	b.n	801428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2b80      	cmp	r3, #128	; 0x80
 801427a:	d102      	bne.n	8014282 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801427c:	2302      	movs	r3, #2
 801427e:	613b      	str	r3, [r7, #16]
 8014280:	e004      	b.n	801428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2b70      	cmp	r3, #112	; 0x70
 8014286:	d101      	bne.n	801428c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8014288:	2301      	movs	r3, #1
 801428a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801428c:	4b0b      	ldr	r3, [pc, #44]	; (80142bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	f023 0207 	bic.w	r2, r3, #7
 8014294:	4909      	ldr	r1, [pc, #36]	; (80142bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	4313      	orrs	r3, r2
 801429a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801429c:	4b07      	ldr	r3, [pc, #28]	; (80142bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	f003 0307 	and.w	r3, r3, #7
 80142a4:	693a      	ldr	r2, [r7, #16]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d001      	beq.n	80142ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80142aa:	2301      	movs	r3, #1
 80142ac:	e000      	b.n	80142b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80142ae:	2300      	movs	r3, #0
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3718      	adds	r7, #24
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	40021000 	.word	0x40021000
 80142bc:	40022000 	.word	0x40022000

080142c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b086      	sub	sp, #24
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80142c8:	2300      	movs	r3, #0
 80142ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80142cc:	2300      	movs	r3, #0
 80142ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d041      	beq.n	8014360 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80142e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80142e4:	d02a      	beq.n	801433c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80142e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80142ea:	d824      	bhi.n	8014336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80142ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80142f0:	d008      	beq.n	8014304 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80142f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80142f6:	d81e      	bhi.n	8014336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d00a      	beq.n	8014312 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80142fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014300:	d010      	beq.n	8014324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8014302:	e018      	b.n	8014336 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8014304:	4b86      	ldr	r3, [pc, #536]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014306:	68db      	ldr	r3, [r3, #12]
 8014308:	4a85      	ldr	r2, [pc, #532]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801430e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8014310:	e015      	b.n	801433e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	3304      	adds	r3, #4
 8014316:	2100      	movs	r1, #0
 8014318:	4618      	mov	r0, r3
 801431a:	f000 fabb 	bl	8014894 <RCCEx_PLLSAI1_Config>
 801431e:	4603      	mov	r3, r0
 8014320:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8014322:	e00c      	b.n	801433e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	3320      	adds	r3, #32
 8014328:	2100      	movs	r1, #0
 801432a:	4618      	mov	r0, r3
 801432c:	f000 fba6 	bl	8014a7c <RCCEx_PLLSAI2_Config>
 8014330:	4603      	mov	r3, r0
 8014332:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8014334:	e003      	b.n	801433e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8014336:	2301      	movs	r3, #1
 8014338:	74fb      	strb	r3, [r7, #19]
      break;
 801433a:	e000      	b.n	801433e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 801433c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801433e:	7cfb      	ldrb	r3, [r7, #19]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d10b      	bne.n	801435c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8014344:	4b76      	ldr	r3, [pc, #472]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801434a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014352:	4973      	ldr	r1, [pc, #460]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014354:	4313      	orrs	r3, r2
 8014356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801435a:	e001      	b.n	8014360 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801435c:	7cfb      	ldrb	r3, [r7, #19]
 801435e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014368:	2b00      	cmp	r3, #0
 801436a:	d041      	beq.n	80143f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014370:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8014374:	d02a      	beq.n	80143cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8014376:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801437a:	d824      	bhi.n	80143c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 801437c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014380:	d008      	beq.n	8014394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8014382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014386:	d81e      	bhi.n	80143c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8014388:	2b00      	cmp	r3, #0
 801438a:	d00a      	beq.n	80143a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 801438c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014390:	d010      	beq.n	80143b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8014392:	e018      	b.n	80143c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8014394:	4b62      	ldr	r3, [pc, #392]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	4a61      	ldr	r2, [pc, #388]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801439a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801439e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80143a0:	e015      	b.n	80143ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	3304      	adds	r3, #4
 80143a6:	2100      	movs	r1, #0
 80143a8:	4618      	mov	r0, r3
 80143aa:	f000 fa73 	bl	8014894 <RCCEx_PLLSAI1_Config>
 80143ae:	4603      	mov	r3, r0
 80143b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80143b2:	e00c      	b.n	80143ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	3320      	adds	r3, #32
 80143b8:	2100      	movs	r1, #0
 80143ba:	4618      	mov	r0, r3
 80143bc:	f000 fb5e 	bl	8014a7c <RCCEx_PLLSAI2_Config>
 80143c0:	4603      	mov	r3, r0
 80143c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80143c4:	e003      	b.n	80143ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80143c6:	2301      	movs	r3, #1
 80143c8:	74fb      	strb	r3, [r7, #19]
      break;
 80143ca:	e000      	b.n	80143ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80143cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80143ce:	7cfb      	ldrb	r3, [r7, #19]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d10b      	bne.n	80143ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80143d4:	4b52      	ldr	r3, [pc, #328]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80143d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80143e2:	494f      	ldr	r1, [pc, #316]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80143e4:	4313      	orrs	r3, r2
 80143e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80143ea:	e001      	b.n	80143f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80143ec:	7cfb      	ldrb	r3, [r7, #19]
 80143ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	f000 80a0 	beq.w	801453e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80143fe:	2300      	movs	r3, #0
 8014400:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8014402:	4b47      	ldr	r3, [pc, #284]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801440a:	2b00      	cmp	r3, #0
 801440c:	d101      	bne.n	8014412 <HAL_RCCEx_PeriphCLKConfig+0x152>
 801440e:	2301      	movs	r3, #1
 8014410:	e000      	b.n	8014414 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8014412:	2300      	movs	r3, #0
 8014414:	2b00      	cmp	r3, #0
 8014416:	d00d      	beq.n	8014434 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014418:	4b41      	ldr	r3, [pc, #260]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801441c:	4a40      	ldr	r2, [pc, #256]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801441e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014422:	6593      	str	r3, [r2, #88]	; 0x58
 8014424:	4b3e      	ldr	r3, [pc, #248]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801442c:	60bb      	str	r3, [r7, #8]
 801442e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014430:	2301      	movs	r3, #1
 8014432:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014434:	4b3b      	ldr	r3, [pc, #236]	; (8014524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	4a3a      	ldr	r2, [pc, #232]	; (8014524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801443a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801443e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014440:	f7fd fc5a 	bl	8011cf8 <HAL_GetTick>
 8014444:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8014446:	e009      	b.n	801445c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014448:	f7fd fc56 	bl	8011cf8 <HAL_GetTick>
 801444c:	4602      	mov	r2, r0
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	1ad3      	subs	r3, r2, r3
 8014452:	2b02      	cmp	r3, #2
 8014454:	d902      	bls.n	801445c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8014456:	2303      	movs	r3, #3
 8014458:	74fb      	strb	r3, [r7, #19]
        break;
 801445a:	e005      	b.n	8014468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801445c:	4b31      	ldr	r3, [pc, #196]	; (8014524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014464:	2b00      	cmp	r3, #0
 8014466:	d0ef      	beq.n	8014448 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8014468:	7cfb      	ldrb	r3, [r7, #19]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d15c      	bne.n	8014528 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801446e:	4b2c      	ldr	r3, [pc, #176]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014478:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d01f      	beq.n	80144c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014486:	697a      	ldr	r2, [r7, #20]
 8014488:	429a      	cmp	r2, r3
 801448a:	d019      	beq.n	80144c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801448c:	4b24      	ldr	r3, [pc, #144]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014496:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8014498:	4b21      	ldr	r3, [pc, #132]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801449e:	4a20      	ldr	r2, [pc, #128]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80144a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80144a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80144a8:	4b1d      	ldr	r3, [pc, #116]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80144aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144ae:	4a1c      	ldr	r2, [pc, #112]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80144b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80144b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80144b8:	4a19      	ldr	r2, [pc, #100]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	f003 0301 	and.w	r3, r3, #1
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d016      	beq.n	80144f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80144ca:	f7fd fc15 	bl	8011cf8 <HAL_GetTick>
 80144ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80144d0:	e00b      	b.n	80144ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80144d2:	f7fd fc11 	bl	8011cf8 <HAL_GetTick>
 80144d6:	4602      	mov	r2, r0
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	1ad3      	subs	r3, r2, r3
 80144dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80144e0:	4293      	cmp	r3, r2
 80144e2:	d902      	bls.n	80144ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80144e4:	2303      	movs	r3, #3
 80144e6:	74fb      	strb	r3, [r7, #19]
            break;
 80144e8:	e006      	b.n	80144f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80144ea:	4b0d      	ldr	r3, [pc, #52]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80144ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144f0:	f003 0302 	and.w	r3, r3, #2
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d0ec      	beq.n	80144d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80144f8:	7cfb      	ldrb	r3, [r7, #19]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d10c      	bne.n	8014518 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80144fe:	4b08      	ldr	r3, [pc, #32]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801450e:	4904      	ldr	r1, [pc, #16]	; (8014520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8014510:	4313      	orrs	r3, r2
 8014512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8014516:	e009      	b.n	801452c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8014518:	7cfb      	ldrb	r3, [r7, #19]
 801451a:	74bb      	strb	r3, [r7, #18]
 801451c:	e006      	b.n	801452c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 801451e:	bf00      	nop
 8014520:	40021000 	.word	0x40021000
 8014524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014528:	7cfb      	ldrb	r3, [r7, #19]
 801452a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801452c:	7c7b      	ldrb	r3, [r7, #17]
 801452e:	2b01      	cmp	r3, #1
 8014530:	d105      	bne.n	801453e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014532:	4b9e      	ldr	r3, [pc, #632]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014536:	4a9d      	ldr	r2, [pc, #628]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801453c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	f003 0301 	and.w	r3, r3, #1
 8014546:	2b00      	cmp	r3, #0
 8014548:	d00a      	beq.n	8014560 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801454a:	4b98      	ldr	r3, [pc, #608]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014550:	f023 0203 	bic.w	r2, r3, #3
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014558:	4994      	ldr	r1, [pc, #592]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801455a:	4313      	orrs	r3, r2
 801455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	f003 0302 	and.w	r3, r3, #2
 8014568:	2b00      	cmp	r3, #0
 801456a:	d00a      	beq.n	8014582 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801456c:	4b8f      	ldr	r3, [pc, #572]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014572:	f023 020c 	bic.w	r2, r3, #12
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801457a:	498c      	ldr	r1, [pc, #560]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801457c:	4313      	orrs	r3, r2
 801457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f003 0304 	and.w	r3, r3, #4
 801458a:	2b00      	cmp	r3, #0
 801458c:	d00a      	beq.n	80145a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801458e:	4b87      	ldr	r3, [pc, #540]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014594:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801459c:	4983      	ldr	r1, [pc, #524]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801459e:	4313      	orrs	r3, r2
 80145a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	f003 0308 	and.w	r3, r3, #8
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d00a      	beq.n	80145c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80145b0:	4b7e      	ldr	r3, [pc, #504]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80145b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145be:	497b      	ldr	r1, [pc, #492]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80145c0:	4313      	orrs	r3, r2
 80145c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	f003 0310 	and.w	r3, r3, #16
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d00a      	beq.n	80145e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80145d2:	4b76      	ldr	r3, [pc, #472]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80145d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145e0:	4972      	ldr	r1, [pc, #456]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80145e2:	4313      	orrs	r3, r2
 80145e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	f003 0320 	and.w	r3, r3, #32
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d00a      	beq.n	801460a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80145f4:	4b6d      	ldr	r3, [pc, #436]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80145f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014602:	496a      	ldr	r1, [pc, #424]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014604:	4313      	orrs	r3, r2
 8014606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014612:	2b00      	cmp	r3, #0
 8014614:	d00a      	beq.n	801462c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8014616:	4b65      	ldr	r3, [pc, #404]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801461c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014624:	4961      	ldr	r1, [pc, #388]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014626:	4313      	orrs	r3, r2
 8014628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014634:	2b00      	cmp	r3, #0
 8014636:	d00a      	beq.n	801464e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8014638:	4b5c      	ldr	r3, [pc, #368]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801463e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014646:	4959      	ldr	r1, [pc, #356]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014648:	4313      	orrs	r3, r2
 801464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00a      	beq.n	8014670 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801465a:	4b54      	ldr	r3, [pc, #336]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014660:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014668:	4950      	ldr	r1, [pc, #320]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801466a:	4313      	orrs	r3, r2
 801466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014678:	2b00      	cmp	r3, #0
 801467a:	d00a      	beq.n	8014692 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801467c:	4b4b      	ldr	r3, [pc, #300]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014682:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801468a:	4948      	ldr	r1, [pc, #288]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801468c:	4313      	orrs	r3, r2
 801468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801469a:	2b00      	cmp	r3, #0
 801469c:	d00a      	beq.n	80146b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801469e:	4b43      	ldr	r3, [pc, #268]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80146a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146ac:	493f      	ldr	r1, [pc, #252]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80146ae:	4313      	orrs	r3, r2
 80146b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d028      	beq.n	8014712 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80146c0:	4b3a      	ldr	r3, [pc, #232]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80146c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146ce:	4937      	ldr	r1, [pc, #220]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80146d0:	4313      	orrs	r3, r2
 80146d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80146de:	d106      	bne.n	80146ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80146e0:	4b32      	ldr	r3, [pc, #200]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	4a31      	ldr	r2, [pc, #196]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80146e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80146ea:	60d3      	str	r3, [r2, #12]
 80146ec:	e011      	b.n	8014712 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80146f6:	d10c      	bne.n	8014712 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	3304      	adds	r3, #4
 80146fc:	2101      	movs	r1, #1
 80146fe:	4618      	mov	r0, r3
 8014700:	f000 f8c8 	bl	8014894 <RCCEx_PLLSAI1_Config>
 8014704:	4603      	mov	r3, r0
 8014706:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8014708:	7cfb      	ldrb	r3, [r7, #19]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d001      	beq.n	8014712 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 801470e:	7cfb      	ldrb	r3, [r7, #19]
 8014710:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801471a:	2b00      	cmp	r3, #0
 801471c:	d028      	beq.n	8014770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801471e:	4b23      	ldr	r3, [pc, #140]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014724:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801472c:	491f      	ldr	r1, [pc, #124]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801472e:	4313      	orrs	r3, r2
 8014730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801473c:	d106      	bne.n	801474c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801473e:	4b1b      	ldr	r3, [pc, #108]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014740:	68db      	ldr	r3, [r3, #12]
 8014742:	4a1a      	ldr	r2, [pc, #104]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8014744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014748:	60d3      	str	r3, [r2, #12]
 801474a:	e011      	b.n	8014770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014754:	d10c      	bne.n	8014770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	3304      	adds	r3, #4
 801475a:	2101      	movs	r1, #1
 801475c:	4618      	mov	r0, r3
 801475e:	f000 f899 	bl	8014894 <RCCEx_PLLSAI1_Config>
 8014762:	4603      	mov	r3, r0
 8014764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014766:	7cfb      	ldrb	r3, [r7, #19]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d001      	beq.n	8014770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 801476c:	7cfb      	ldrb	r3, [r7, #19]
 801476e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014778:	2b00      	cmp	r3, #0
 801477a:	d02b      	beq.n	80147d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801477c:	4b0b      	ldr	r3, [pc, #44]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801478a:	4908      	ldr	r1, [pc, #32]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801478c:	4313      	orrs	r3, r2
 801478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801479a:	d109      	bne.n	80147b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801479c:	4b03      	ldr	r3, [pc, #12]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801479e:	68db      	ldr	r3, [r3, #12]
 80147a0:	4a02      	ldr	r2, [pc, #8]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80147a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80147a6:	60d3      	str	r3, [r2, #12]
 80147a8:	e014      	b.n	80147d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80147aa:	bf00      	nop
 80147ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80147b8:	d10c      	bne.n	80147d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	3304      	adds	r3, #4
 80147be:	2101      	movs	r1, #1
 80147c0:	4618      	mov	r0, r3
 80147c2:	f000 f867 	bl	8014894 <RCCEx_PLLSAI1_Config>
 80147c6:	4603      	mov	r3, r0
 80147c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80147ca:	7cfb      	ldrb	r3, [r7, #19]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d001      	beq.n	80147d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80147d0:	7cfb      	ldrb	r3, [r7, #19]
 80147d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d02f      	beq.n	8014840 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80147e0:	4b2b      	ldr	r3, [pc, #172]	; (8014890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80147e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80147e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147ee:	4928      	ldr	r1, [pc, #160]	; (8014890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80147f0:	4313      	orrs	r3, r2
 80147f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80147fe:	d10d      	bne.n	801481c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	3304      	adds	r3, #4
 8014804:	2102      	movs	r1, #2
 8014806:	4618      	mov	r0, r3
 8014808:	f000 f844 	bl	8014894 <RCCEx_PLLSAI1_Config>
 801480c:	4603      	mov	r3, r0
 801480e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014810:	7cfb      	ldrb	r3, [r7, #19]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d014      	beq.n	8014840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8014816:	7cfb      	ldrb	r3, [r7, #19]
 8014818:	74bb      	strb	r3, [r7, #18]
 801481a:	e011      	b.n	8014840 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014824:	d10c      	bne.n	8014840 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	3320      	adds	r3, #32
 801482a:	2102      	movs	r1, #2
 801482c:	4618      	mov	r0, r3
 801482e:	f000 f925 	bl	8014a7c <RCCEx_PLLSAI2_Config>
 8014832:	4603      	mov	r3, r0
 8014834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8014836:	7cfb      	ldrb	r3, [r7, #19]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d001      	beq.n	8014840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 801483c:	7cfb      	ldrb	r3, [r7, #19]
 801483e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014848:	2b00      	cmp	r3, #0
 801484a:	d00a      	beq.n	8014862 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801484c:	4b10      	ldr	r3, [pc, #64]	; (8014890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014852:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801485a:	490d      	ldr	r1, [pc, #52]	; (8014890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801485c:	4313      	orrs	r3, r2
 801485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801486a:	2b00      	cmp	r3, #0
 801486c:	d00b      	beq.n	8014886 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801486e:	4b08      	ldr	r3, [pc, #32]	; (8014890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801487e:	4904      	ldr	r1, [pc, #16]	; (8014890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8014880:	4313      	orrs	r3, r2
 8014882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8014886:	7cbb      	ldrb	r3, [r7, #18]
}
 8014888:	4618      	mov	r0, r3
 801488a:	3718      	adds	r7, #24
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}
 8014890:	40021000 	.word	0x40021000

08014894 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801489e:	2300      	movs	r3, #0
 80148a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80148a2:	4b75      	ldr	r3, [pc, #468]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80148a4:	68db      	ldr	r3, [r3, #12]
 80148a6:	f003 0303 	and.w	r3, r3, #3
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d018      	beq.n	80148e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80148ae:	4b72      	ldr	r3, [pc, #456]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80148b0:	68db      	ldr	r3, [r3, #12]
 80148b2:	f003 0203 	and.w	r2, r3, #3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	429a      	cmp	r2, r3
 80148bc:	d10d      	bne.n	80148da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
       ||
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d009      	beq.n	80148da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80148c6:	4b6c      	ldr	r3, [pc, #432]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80148c8:	68db      	ldr	r3, [r3, #12]
 80148ca:	091b      	lsrs	r3, r3, #4
 80148cc:	f003 0307 	and.w	r3, r3, #7
 80148d0:	1c5a      	adds	r2, r3, #1
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	685b      	ldr	r3, [r3, #4]
       ||
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d047      	beq.n	801496a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80148da:	2301      	movs	r3, #1
 80148dc:	73fb      	strb	r3, [r7, #15]
 80148de:	e044      	b.n	801496a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2b03      	cmp	r3, #3
 80148e6:	d018      	beq.n	801491a <RCCEx_PLLSAI1_Config+0x86>
 80148e8:	2b03      	cmp	r3, #3
 80148ea:	d825      	bhi.n	8014938 <RCCEx_PLLSAI1_Config+0xa4>
 80148ec:	2b01      	cmp	r3, #1
 80148ee:	d002      	beq.n	80148f6 <RCCEx_PLLSAI1_Config+0x62>
 80148f0:	2b02      	cmp	r3, #2
 80148f2:	d009      	beq.n	8014908 <RCCEx_PLLSAI1_Config+0x74>
 80148f4:	e020      	b.n	8014938 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80148f6:	4b60      	ldr	r3, [pc, #384]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	f003 0302 	and.w	r3, r3, #2
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d11d      	bne.n	801493e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8014902:	2301      	movs	r3, #1
 8014904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014906:	e01a      	b.n	801493e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8014908:	4b5b      	ldr	r3, [pc, #364]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014910:	2b00      	cmp	r3, #0
 8014912:	d116      	bne.n	8014942 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8014914:	2301      	movs	r3, #1
 8014916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014918:	e013      	b.n	8014942 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801491a:	4b57      	ldr	r3, [pc, #348]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014922:	2b00      	cmp	r3, #0
 8014924:	d10f      	bne.n	8014946 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8014926:	4b54      	ldr	r3, [pc, #336]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801492e:	2b00      	cmp	r3, #0
 8014930:	d109      	bne.n	8014946 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8014932:	2301      	movs	r3, #1
 8014934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014936:	e006      	b.n	8014946 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8014938:	2301      	movs	r3, #1
 801493a:	73fb      	strb	r3, [r7, #15]
      break;
 801493c:	e004      	b.n	8014948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801493e:	bf00      	nop
 8014940:	e002      	b.n	8014948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8014942:	bf00      	nop
 8014944:	e000      	b.n	8014948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8014946:	bf00      	nop
    }

    if(status == HAL_OK)
 8014948:	7bfb      	ldrb	r3, [r7, #15]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d10d      	bne.n	801496a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801494e:	4b4a      	ldr	r3, [pc, #296]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6819      	ldr	r1, [r3, #0]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	3b01      	subs	r3, #1
 8014960:	011b      	lsls	r3, r3, #4
 8014962:	430b      	orrs	r3, r1
 8014964:	4944      	ldr	r1, [pc, #272]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014966:	4313      	orrs	r3, r2
 8014968:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801496a:	7bfb      	ldrb	r3, [r7, #15]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d17d      	bne.n	8014a6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8014970:	4b41      	ldr	r3, [pc, #260]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	4a40      	ldr	r2, [pc, #256]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014976:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801497a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801497c:	f7fd f9bc 	bl	8011cf8 <HAL_GetTick>
 8014980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8014982:	e009      	b.n	8014998 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014984:	f7fd f9b8 	bl	8011cf8 <HAL_GetTick>
 8014988:	4602      	mov	r2, r0
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	1ad3      	subs	r3, r2, r3
 801498e:	2b02      	cmp	r3, #2
 8014990:	d902      	bls.n	8014998 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8014992:	2303      	movs	r3, #3
 8014994:	73fb      	strb	r3, [r7, #15]
        break;
 8014996:	e005      	b.n	80149a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8014998:	4b37      	ldr	r3, [pc, #220]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d1ef      	bne.n	8014984 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80149a4:	7bfb      	ldrb	r3, [r7, #15]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d160      	bne.n	8014a6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d111      	bne.n	80149d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80149b0:	4b31      	ldr	r3, [pc, #196]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80149b2:	691b      	ldr	r3, [r3, #16]
 80149b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80149b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80149bc:	687a      	ldr	r2, [r7, #4]
 80149be:	6892      	ldr	r2, [r2, #8]
 80149c0:	0211      	lsls	r1, r2, #8
 80149c2:	687a      	ldr	r2, [r7, #4]
 80149c4:	68d2      	ldr	r2, [r2, #12]
 80149c6:	0912      	lsrs	r2, r2, #4
 80149c8:	0452      	lsls	r2, r2, #17
 80149ca:	430a      	orrs	r2, r1
 80149cc:	492a      	ldr	r1, [pc, #168]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80149ce:	4313      	orrs	r3, r2
 80149d0:	610b      	str	r3, [r1, #16]
 80149d2:	e027      	b.n	8014a24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	2b01      	cmp	r3, #1
 80149d8:	d112      	bne.n	8014a00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80149da:	4b27      	ldr	r3, [pc, #156]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80149dc:	691b      	ldr	r3, [r3, #16]
 80149de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80149e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80149e6:	687a      	ldr	r2, [r7, #4]
 80149e8:	6892      	ldr	r2, [r2, #8]
 80149ea:	0211      	lsls	r1, r2, #8
 80149ec:	687a      	ldr	r2, [r7, #4]
 80149ee:	6912      	ldr	r2, [r2, #16]
 80149f0:	0852      	lsrs	r2, r2, #1
 80149f2:	3a01      	subs	r2, #1
 80149f4:	0552      	lsls	r2, r2, #21
 80149f6:	430a      	orrs	r2, r1
 80149f8:	491f      	ldr	r1, [pc, #124]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80149fa:	4313      	orrs	r3, r2
 80149fc:	610b      	str	r3, [r1, #16]
 80149fe:	e011      	b.n	8014a24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8014a00:	4b1d      	ldr	r3, [pc, #116]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014a02:	691b      	ldr	r3, [r3, #16]
 8014a04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8014a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8014a0c:	687a      	ldr	r2, [r7, #4]
 8014a0e:	6892      	ldr	r2, [r2, #8]
 8014a10:	0211      	lsls	r1, r2, #8
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	6952      	ldr	r2, [r2, #20]
 8014a16:	0852      	lsrs	r2, r2, #1
 8014a18:	3a01      	subs	r2, #1
 8014a1a:	0652      	lsls	r2, r2, #25
 8014a1c:	430a      	orrs	r2, r1
 8014a1e:	4916      	ldr	r1, [pc, #88]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014a20:	4313      	orrs	r3, r2
 8014a22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8014a24:	4b14      	ldr	r3, [pc, #80]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	4a13      	ldr	r2, [pc, #76]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014a30:	f7fd f962 	bl	8011cf8 <HAL_GetTick>
 8014a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8014a36:	e009      	b.n	8014a4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014a38:	f7fd f95e 	bl	8011cf8 <HAL_GetTick>
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	1ad3      	subs	r3, r2, r3
 8014a42:	2b02      	cmp	r3, #2
 8014a44:	d902      	bls.n	8014a4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8014a46:	2303      	movs	r3, #3
 8014a48:	73fb      	strb	r3, [r7, #15]
          break;
 8014a4a:	e005      	b.n	8014a58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8014a4c:	4b0a      	ldr	r3, [pc, #40]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d0ef      	beq.n	8014a38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8014a58:	7bfb      	ldrb	r3, [r7, #15]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d106      	bne.n	8014a6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8014a5e:	4b06      	ldr	r3, [pc, #24]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014a60:	691a      	ldr	r2, [r3, #16]
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	699b      	ldr	r3, [r3, #24]
 8014a66:	4904      	ldr	r1, [pc, #16]	; (8014a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8014a68:	4313      	orrs	r3, r2
 8014a6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8014a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3710      	adds	r7, #16
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	bf00      	nop
 8014a78:	40021000 	.word	0x40021000

08014a7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014a86:	2300      	movs	r3, #0
 8014a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8014a8a:	4b6a      	ldr	r3, [pc, #424]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014a8c:	68db      	ldr	r3, [r3, #12]
 8014a8e:	f003 0303 	and.w	r3, r3, #3
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d018      	beq.n	8014ac8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8014a96:	4b67      	ldr	r3, [pc, #412]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014a98:	68db      	ldr	r3, [r3, #12]
 8014a9a:	f003 0203 	and.w	r2, r3, #3
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d10d      	bne.n	8014ac2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d009      	beq.n	8014ac2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8014aae:	4b61      	ldr	r3, [pc, #388]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	091b      	lsrs	r3, r3, #4
 8014ab4:	f003 0307 	and.w	r3, r3, #7
 8014ab8:	1c5a      	adds	r2, r3, #1
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	685b      	ldr	r3, [r3, #4]
       ||
 8014abe:	429a      	cmp	r2, r3
 8014ac0:	d047      	beq.n	8014b52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	73fb      	strb	r3, [r7, #15]
 8014ac6:	e044      	b.n	8014b52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2b03      	cmp	r3, #3
 8014ace:	d018      	beq.n	8014b02 <RCCEx_PLLSAI2_Config+0x86>
 8014ad0:	2b03      	cmp	r3, #3
 8014ad2:	d825      	bhi.n	8014b20 <RCCEx_PLLSAI2_Config+0xa4>
 8014ad4:	2b01      	cmp	r3, #1
 8014ad6:	d002      	beq.n	8014ade <RCCEx_PLLSAI2_Config+0x62>
 8014ad8:	2b02      	cmp	r3, #2
 8014ada:	d009      	beq.n	8014af0 <RCCEx_PLLSAI2_Config+0x74>
 8014adc:	e020      	b.n	8014b20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8014ade:	4b55      	ldr	r3, [pc, #340]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	f003 0302 	and.w	r3, r3, #2
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d11d      	bne.n	8014b26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8014aea:	2301      	movs	r3, #1
 8014aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014aee:	e01a      	b.n	8014b26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8014af0:	4b50      	ldr	r3, [pc, #320]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d116      	bne.n	8014b2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8014afc:	2301      	movs	r3, #1
 8014afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014b00:	e013      	b.n	8014b2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8014b02:	4b4c      	ldr	r3, [pc, #304]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d10f      	bne.n	8014b2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8014b0e:	4b49      	ldr	r3, [pc, #292]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d109      	bne.n	8014b2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8014b1a:	2301      	movs	r3, #1
 8014b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014b1e:	e006      	b.n	8014b2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8014b20:	2301      	movs	r3, #1
 8014b22:	73fb      	strb	r3, [r7, #15]
      break;
 8014b24:	e004      	b.n	8014b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8014b26:	bf00      	nop
 8014b28:	e002      	b.n	8014b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8014b2a:	bf00      	nop
 8014b2c:	e000      	b.n	8014b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8014b2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8014b30:	7bfb      	ldrb	r3, [r7, #15]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d10d      	bne.n	8014b52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8014b36:	4b3f      	ldr	r3, [pc, #252]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b38:	68db      	ldr	r3, [r3, #12]
 8014b3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	6819      	ldr	r1, [r3, #0]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	685b      	ldr	r3, [r3, #4]
 8014b46:	3b01      	subs	r3, #1
 8014b48:	011b      	lsls	r3, r3, #4
 8014b4a:	430b      	orrs	r3, r1
 8014b4c:	4939      	ldr	r1, [pc, #228]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b4e:	4313      	orrs	r3, r2
 8014b50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8014b52:	7bfb      	ldrb	r3, [r7, #15]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d167      	bne.n	8014c28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8014b58:	4b36      	ldr	r3, [pc, #216]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	4a35      	ldr	r2, [pc, #212]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014b64:	f7fd f8c8 	bl	8011cf8 <HAL_GetTick>
 8014b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8014b6a:	e009      	b.n	8014b80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8014b6c:	f7fd f8c4 	bl	8011cf8 <HAL_GetTick>
 8014b70:	4602      	mov	r2, r0
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	1ad3      	subs	r3, r2, r3
 8014b76:	2b02      	cmp	r3, #2
 8014b78:	d902      	bls.n	8014b80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8014b7a:	2303      	movs	r3, #3
 8014b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8014b7e:	e005      	b.n	8014b8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8014b80:	4b2c      	ldr	r3, [pc, #176]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d1ef      	bne.n	8014b6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8014b8c:	7bfb      	ldrb	r3, [r7, #15]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d14a      	bne.n	8014c28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d111      	bne.n	8014bbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8014b98:	4b26      	ldr	r3, [pc, #152]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014b9a:	695b      	ldr	r3, [r3, #20]
 8014b9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8014ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014ba4:	687a      	ldr	r2, [r7, #4]
 8014ba6:	6892      	ldr	r2, [r2, #8]
 8014ba8:	0211      	lsls	r1, r2, #8
 8014baa:	687a      	ldr	r2, [r7, #4]
 8014bac:	68d2      	ldr	r2, [r2, #12]
 8014bae:	0912      	lsrs	r2, r2, #4
 8014bb0:	0452      	lsls	r2, r2, #17
 8014bb2:	430a      	orrs	r2, r1
 8014bb4:	491f      	ldr	r1, [pc, #124]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014bb6:	4313      	orrs	r3, r2
 8014bb8:	614b      	str	r3, [r1, #20]
 8014bba:	e011      	b.n	8014be0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8014bbc:	4b1d      	ldr	r3, [pc, #116]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014bbe:	695b      	ldr	r3, [r3, #20]
 8014bc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8014bc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8014bc8:	687a      	ldr	r2, [r7, #4]
 8014bca:	6892      	ldr	r2, [r2, #8]
 8014bcc:	0211      	lsls	r1, r2, #8
 8014bce:	687a      	ldr	r2, [r7, #4]
 8014bd0:	6912      	ldr	r2, [r2, #16]
 8014bd2:	0852      	lsrs	r2, r2, #1
 8014bd4:	3a01      	subs	r2, #1
 8014bd6:	0652      	lsls	r2, r2, #25
 8014bd8:	430a      	orrs	r2, r1
 8014bda:	4916      	ldr	r1, [pc, #88]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014bdc:	4313      	orrs	r3, r2
 8014bde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8014be0:	4b14      	ldr	r3, [pc, #80]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4a13      	ldr	r2, [pc, #76]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014bea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014bec:	f7fd f884 	bl	8011cf8 <HAL_GetTick>
 8014bf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8014bf2:	e009      	b.n	8014c08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8014bf4:	f7fd f880 	bl	8011cf8 <HAL_GetTick>
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	1ad3      	subs	r3, r2, r3
 8014bfe:	2b02      	cmp	r3, #2
 8014c00:	d902      	bls.n	8014c08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8014c02:	2303      	movs	r3, #3
 8014c04:	73fb      	strb	r3, [r7, #15]
          break;
 8014c06:	e005      	b.n	8014c14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8014c08:	4b0a      	ldr	r3, [pc, #40]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d0ef      	beq.n	8014bf4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8014c14:	7bfb      	ldrb	r3, [r7, #15]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d106      	bne.n	8014c28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8014c1a:	4b06      	ldr	r3, [pc, #24]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014c1c:	695a      	ldr	r2, [r3, #20]
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	695b      	ldr	r3, [r3, #20]
 8014c22:	4904      	ldr	r1, [pc, #16]	; (8014c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8014c24:	4313      	orrs	r3, r2
 8014c26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8014c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3710      	adds	r7, #16
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}
 8014c32:	bf00      	nop
 8014c34:	40021000 	.word	0x40021000

08014c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d101      	bne.n	8014c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014c46:	2301      	movs	r3, #1
 8014c48:	e095      	b.n	8014d76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d108      	bne.n	8014c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014c5a:	d009      	beq.n	8014c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	61da      	str	r2, [r3, #28]
 8014c62:	e005      	b.n	8014c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	2200      	movs	r2, #0
 8014c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2200      	movs	r2, #0
 8014c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014c7c:	b2db      	uxtb	r3, r3
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d106      	bne.n	8014c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2200      	movs	r2, #0
 8014c86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f000 f877 	bl	8014d7e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	2202      	movs	r2, #2
 8014c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	681a      	ldr	r2, [r3, #0]
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ca6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	68db      	ldr	r3, [r3, #12]
 8014cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014cb0:	d902      	bls.n	8014cb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	60fb      	str	r3, [r7, #12]
 8014cb6:	e002      	b.n	8014cbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8014cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014cbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	68db      	ldr	r3, [r3, #12]
 8014cc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8014cc6:	d007      	beq.n	8014cd8 <HAL_SPI_Init+0xa0>
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	68db      	ldr	r3, [r3, #12]
 8014ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014cd0:	d002      	beq.n	8014cd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	685b      	ldr	r3, [r3, #4]
 8014cdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	689b      	ldr	r3, [r3, #8]
 8014ce4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8014ce8:	431a      	orrs	r2, r3
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	691b      	ldr	r3, [r3, #16]
 8014cee:	f003 0302 	and.w	r3, r3, #2
 8014cf2:	431a      	orrs	r2, r3
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	695b      	ldr	r3, [r3, #20]
 8014cf8:	f003 0301 	and.w	r3, r3, #1
 8014cfc:	431a      	orrs	r2, r3
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	699b      	ldr	r3, [r3, #24]
 8014d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014d06:	431a      	orrs	r2, r3
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	69db      	ldr	r3, [r3, #28]
 8014d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014d10:	431a      	orrs	r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6a1b      	ldr	r3, [r3, #32]
 8014d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014d1a:	ea42 0103 	orr.w	r1, r2, r3
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	430a      	orrs	r2, r1
 8014d2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	699b      	ldr	r3, [r3, #24]
 8014d32:	0c1b      	lsrs	r3, r3, #16
 8014d34:	f003 0204 	and.w	r2, r3, #4
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d3c:	f003 0310 	and.w	r3, r3, #16
 8014d40:	431a      	orrs	r2, r3
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d46:	f003 0308 	and.w	r3, r3, #8
 8014d4a:	431a      	orrs	r2, r3
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	68db      	ldr	r3, [r3, #12]
 8014d50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8014d54:	ea42 0103 	orr.w	r1, r2, r3
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	430a      	orrs	r2, r1
 8014d64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2201      	movs	r2, #1
 8014d70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8014d74:	2300      	movs	r3, #0
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	3710      	adds	r7, #16
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}

08014d7e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8014d7e:	b480      	push	{r7}
 8014d80:	b083      	sub	sp, #12
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8014d86:	bf00      	nop
 8014d88:	370c      	adds	r7, #12
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr

08014d92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b08a      	sub	sp, #40	; 0x28
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	60f8      	str	r0, [r7, #12]
 8014d9a:	60b9      	str	r1, [r7, #8]
 8014d9c:	607a      	str	r2, [r7, #4]
 8014d9e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014da0:	2301      	movs	r3, #1
 8014da2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8014da4:	2300      	movs	r3, #0
 8014da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014db0:	2b01      	cmp	r3, #1
 8014db2:	d101      	bne.n	8014db8 <HAL_SPI_TransmitReceive+0x26>
 8014db4:	2302      	movs	r3, #2
 8014db6:	e1fb      	b.n	80151b0 <HAL_SPI_TransmitReceive+0x41e>
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	2201      	movs	r2, #1
 8014dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014dc0:	f7fc ff9a 	bl	8011cf8 <HAL_GetTick>
 8014dc4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014dcc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8014dd4:	887b      	ldrh	r3, [r7, #2]
 8014dd6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8014dd8:	887b      	ldrh	r3, [r7, #2]
 8014dda:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014ddc:	7efb      	ldrb	r3, [r7, #27]
 8014dde:	2b01      	cmp	r3, #1
 8014de0:	d00e      	beq.n	8014e00 <HAL_SPI_TransmitReceive+0x6e>
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014de8:	d106      	bne.n	8014df8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	689b      	ldr	r3, [r3, #8]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d102      	bne.n	8014df8 <HAL_SPI_TransmitReceive+0x66>
 8014df2:	7efb      	ldrb	r3, [r7, #27]
 8014df4:	2b04      	cmp	r3, #4
 8014df6:	d003      	beq.n	8014e00 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8014df8:	2302      	movs	r3, #2
 8014dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014dfe:	e1cd      	b.n	801519c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d005      	beq.n	8014e12 <HAL_SPI_TransmitReceive+0x80>
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d002      	beq.n	8014e12 <HAL_SPI_TransmitReceive+0x80>
 8014e0c:	887b      	ldrh	r3, [r7, #2]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d103      	bne.n	8014e1a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8014e12:	2301      	movs	r3, #1
 8014e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8014e18:	e1c0      	b.n	801519c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014e20:	b2db      	uxtb	r3, r3
 8014e22:	2b04      	cmp	r3, #4
 8014e24:	d003      	beq.n	8014e2e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	2205      	movs	r2, #5
 8014e2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	2200      	movs	r2, #0
 8014e32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	687a      	ldr	r2, [r7, #4]
 8014e38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	887a      	ldrh	r2, [r7, #2]
 8014e3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	887a      	ldrh	r2, [r7, #2]
 8014e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	68ba      	ldr	r2, [r7, #8]
 8014e4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	887a      	ldrh	r2, [r7, #2]
 8014e54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	887a      	ldrh	r2, [r7, #2]
 8014e5a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	2200      	movs	r2, #0
 8014e66:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	68db      	ldr	r3, [r3, #12]
 8014e6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014e70:	d802      	bhi.n	8014e78 <HAL_SPI_TransmitReceive+0xe6>
 8014e72:	8a3b      	ldrh	r3, [r7, #16]
 8014e74:	2b01      	cmp	r3, #1
 8014e76:	d908      	bls.n	8014e8a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	685a      	ldr	r2, [r3, #4]
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014e86:	605a      	str	r2, [r3, #4]
 8014e88:	e007      	b.n	8014e9a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	685a      	ldr	r2, [r3, #4]
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014e98:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ea4:	2b40      	cmp	r3, #64	; 0x40
 8014ea6:	d007      	beq.n	8014eb8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014eb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014ec0:	d97c      	bls.n	8014fbc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d002      	beq.n	8014ed0 <HAL_SPI_TransmitReceive+0x13e>
 8014eca:	8a7b      	ldrh	r3, [r7, #18]
 8014ecc:	2b01      	cmp	r3, #1
 8014ece:	d169      	bne.n	8014fa4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ed4:	881a      	ldrh	r2, [r3, #0]
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ee0:	1c9a      	adds	r2, r3, #2
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014eea:	b29b      	uxth	r3, r3
 8014eec:	3b01      	subs	r3, #1
 8014eee:	b29a      	uxth	r2, r3
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014ef4:	e056      	b.n	8014fa4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	689b      	ldr	r3, [r3, #8]
 8014efc:	f003 0302 	and.w	r3, r3, #2
 8014f00:	2b02      	cmp	r3, #2
 8014f02:	d11b      	bne.n	8014f3c <HAL_SPI_TransmitReceive+0x1aa>
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014f08:	b29b      	uxth	r3, r3
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d016      	beq.n	8014f3c <HAL_SPI_TransmitReceive+0x1aa>
 8014f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f10:	2b01      	cmp	r3, #1
 8014f12:	d113      	bne.n	8014f3c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f18:	881a      	ldrh	r2, [r3, #0]
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f24:	1c9a      	adds	r2, r3, #2
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014f2e:	b29b      	uxth	r3, r3
 8014f30:	3b01      	subs	r3, #1
 8014f32:	b29a      	uxth	r2, r3
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	689b      	ldr	r3, [r3, #8]
 8014f42:	f003 0301 	and.w	r3, r3, #1
 8014f46:	2b01      	cmp	r3, #1
 8014f48:	d11c      	bne.n	8014f84 <HAL_SPI_TransmitReceive+0x1f2>
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d016      	beq.n	8014f84 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	68da      	ldr	r2, [r3, #12]
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f60:	b292      	uxth	r2, r2
 8014f62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f68:	1c9a      	adds	r2, r3, #2
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014f74:	b29b      	uxth	r3, r3
 8014f76:	3b01      	subs	r3, #1
 8014f78:	b29a      	uxth	r2, r3
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014f80:	2301      	movs	r3, #1
 8014f82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8014f84:	f7fc feb8 	bl	8011cf8 <HAL_GetTick>
 8014f88:	4602      	mov	r2, r0
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	1ad3      	subs	r3, r2, r3
 8014f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d807      	bhi.n	8014fa4 <HAL_SPI_TransmitReceive+0x212>
 8014f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f9a:	d003      	beq.n	8014fa4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8014f9c:	2303      	movs	r3, #3
 8014f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014fa2:	e0fb      	b.n	801519c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014fa8:	b29b      	uxth	r3, r3
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d1a3      	bne.n	8014ef6 <HAL_SPI_TransmitReceive+0x164>
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014fb4:	b29b      	uxth	r3, r3
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d19d      	bne.n	8014ef6 <HAL_SPI_TransmitReceive+0x164>
 8014fba:	e0df      	b.n	801517c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	685b      	ldr	r3, [r3, #4]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d003      	beq.n	8014fcc <HAL_SPI_TransmitReceive+0x23a>
 8014fc4:	8a7b      	ldrh	r3, [r7, #18]
 8014fc6:	2b01      	cmp	r3, #1
 8014fc8:	f040 80cb 	bne.w	8015162 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014fd0:	b29b      	uxth	r3, r3
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d912      	bls.n	8014ffc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fda:	881a      	ldrh	r2, [r3, #0]
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fe6:	1c9a      	adds	r2, r3, #2
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ff0:	b29b      	uxth	r3, r3
 8014ff2:	3b02      	subs	r3, #2
 8014ff4:	b29a      	uxth	r2, r3
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014ffa:	e0b2      	b.n	8015162 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	330c      	adds	r3, #12
 8015006:	7812      	ldrb	r2, [r2, #0]
 8015008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801500e:	1c5a      	adds	r2, r3, #1
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015018:	b29b      	uxth	r3, r3
 801501a:	3b01      	subs	r3, #1
 801501c:	b29a      	uxth	r2, r3
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015022:	e09e      	b.n	8015162 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	689b      	ldr	r3, [r3, #8]
 801502a:	f003 0302 	and.w	r3, r3, #2
 801502e:	2b02      	cmp	r3, #2
 8015030:	d134      	bne.n	801509c <HAL_SPI_TransmitReceive+0x30a>
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015036:	b29b      	uxth	r3, r3
 8015038:	2b00      	cmp	r3, #0
 801503a:	d02f      	beq.n	801509c <HAL_SPI_TransmitReceive+0x30a>
 801503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503e:	2b01      	cmp	r3, #1
 8015040:	d12c      	bne.n	801509c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015046:	b29b      	uxth	r3, r3
 8015048:	2b01      	cmp	r3, #1
 801504a:	d912      	bls.n	8015072 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015050:	881a      	ldrh	r2, [r3, #0]
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801505c:	1c9a      	adds	r2, r3, #2
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015066:	b29b      	uxth	r3, r3
 8015068:	3b02      	subs	r3, #2
 801506a:	b29a      	uxth	r2, r3
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8015070:	e012      	b.n	8015098 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	330c      	adds	r3, #12
 801507c:	7812      	ldrb	r2, [r2, #0]
 801507e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015084:	1c5a      	adds	r2, r3, #1
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801508e:	b29b      	uxth	r3, r3
 8015090:	3b01      	subs	r3, #1
 8015092:	b29a      	uxth	r2, r3
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8015098:	2300      	movs	r3, #0
 801509a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	689b      	ldr	r3, [r3, #8]
 80150a2:	f003 0301 	and.w	r3, r3, #1
 80150a6:	2b01      	cmp	r3, #1
 80150a8:	d148      	bne.n	801513c <HAL_SPI_TransmitReceive+0x3aa>
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d042      	beq.n	801513c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80150bc:	b29b      	uxth	r3, r3
 80150be:	2b01      	cmp	r3, #1
 80150c0:	d923      	bls.n	801510a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	68da      	ldr	r2, [r3, #12]
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150cc:	b292      	uxth	r2, r2
 80150ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150d4:	1c9a      	adds	r2, r3, #2
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80150e0:	b29b      	uxth	r3, r3
 80150e2:	3b02      	subs	r3, #2
 80150e4:	b29a      	uxth	r2, r3
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	2b01      	cmp	r3, #1
 80150f6:	d81f      	bhi.n	8015138 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	685a      	ldr	r2, [r3, #4]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8015106:	605a      	str	r2, [r3, #4]
 8015108:	e016      	b.n	8015138 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	f103 020c 	add.w	r2, r3, #12
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015116:	7812      	ldrb	r2, [r2, #0]
 8015118:	b2d2      	uxtb	r2, r2
 801511a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015120:	1c5a      	adds	r2, r3, #1
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801512c:	b29b      	uxth	r3, r3
 801512e:	3b01      	subs	r3, #1
 8015130:	b29a      	uxth	r2, r3
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8015138:	2301      	movs	r3, #1
 801513a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801513c:	f7fc fddc 	bl	8011cf8 <HAL_GetTick>
 8015140:	4602      	mov	r2, r0
 8015142:	69fb      	ldr	r3, [r7, #28]
 8015144:	1ad3      	subs	r3, r2, r3
 8015146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015148:	429a      	cmp	r2, r3
 801514a:	d803      	bhi.n	8015154 <HAL_SPI_TransmitReceive+0x3c2>
 801514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801514e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015152:	d102      	bne.n	801515a <HAL_SPI_TransmitReceive+0x3c8>
 8015154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015156:	2b00      	cmp	r3, #0
 8015158:	d103      	bne.n	8015162 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801515a:	2303      	movs	r3, #3
 801515c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8015160:	e01c      	b.n	801519c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015166:	b29b      	uxth	r3, r3
 8015168:	2b00      	cmp	r3, #0
 801516a:	f47f af5b 	bne.w	8015024 <HAL_SPI_TransmitReceive+0x292>
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015174:	b29b      	uxth	r3, r3
 8015176:	2b00      	cmp	r3, #0
 8015178:	f47f af54 	bne.w	8015024 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801517c:	69fa      	ldr	r2, [r7, #28]
 801517e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015180:	68f8      	ldr	r0, [r7, #12]
 8015182:	f000 fa61 	bl	8015648 <SPI_EndRxTxTransaction>
 8015186:	4603      	mov	r3, r0
 8015188:	2b00      	cmp	r3, #0
 801518a:	d006      	beq.n	801519a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801518c:	2301      	movs	r3, #1
 801518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	2220      	movs	r2, #32
 8015196:	661a      	str	r2, [r3, #96]	; 0x60
 8015198:	e000      	b.n	801519c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801519a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2201      	movs	r2, #1
 80151a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	2200      	movs	r2, #0
 80151a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80151ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80151b0:	4618      	mov	r0, r3
 80151b2:	3728      	adds	r7, #40	; 0x28
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}

080151b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b088      	sub	sp, #32
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	689b      	ldr	r3, [r3, #8]
 80151ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80151d0:	69bb      	ldr	r3, [r7, #24]
 80151d2:	099b      	lsrs	r3, r3, #6
 80151d4:	f003 0301 	and.w	r3, r3, #1
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d10f      	bne.n	80151fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80151dc:	69bb      	ldr	r3, [r7, #24]
 80151de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d00a      	beq.n	80151fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	099b      	lsrs	r3, r3, #6
 80151ea:	f003 0301 	and.w	r3, r3, #1
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d004      	beq.n	80151fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80151f6:	6878      	ldr	r0, [r7, #4]
 80151f8:	4798      	blx	r3
    return;
 80151fa:	e0d7      	b.n	80153ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80151fc:	69bb      	ldr	r3, [r7, #24]
 80151fe:	085b      	lsrs	r3, r3, #1
 8015200:	f003 0301 	and.w	r3, r3, #1
 8015204:	2b00      	cmp	r3, #0
 8015206:	d00a      	beq.n	801521e <HAL_SPI_IRQHandler+0x66>
 8015208:	69fb      	ldr	r3, [r7, #28]
 801520a:	09db      	lsrs	r3, r3, #7
 801520c:	f003 0301 	and.w	r3, r3, #1
 8015210:	2b00      	cmp	r3, #0
 8015212:	d004      	beq.n	801521e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	4798      	blx	r3
    return;
 801521c:	e0c6      	b.n	80153ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801521e:	69bb      	ldr	r3, [r7, #24]
 8015220:	095b      	lsrs	r3, r3, #5
 8015222:	f003 0301 	and.w	r3, r3, #1
 8015226:	2b00      	cmp	r3, #0
 8015228:	d10c      	bne.n	8015244 <HAL_SPI_IRQHandler+0x8c>
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	099b      	lsrs	r3, r3, #6
 801522e:	f003 0301 	and.w	r3, r3, #1
 8015232:	2b00      	cmp	r3, #0
 8015234:	d106      	bne.n	8015244 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8015236:	69bb      	ldr	r3, [r7, #24]
 8015238:	0a1b      	lsrs	r3, r3, #8
 801523a:	f003 0301 	and.w	r3, r3, #1
 801523e:	2b00      	cmp	r3, #0
 8015240:	f000 80b4 	beq.w	80153ac <HAL_SPI_IRQHandler+0x1f4>
 8015244:	69fb      	ldr	r3, [r7, #28]
 8015246:	095b      	lsrs	r3, r3, #5
 8015248:	f003 0301 	and.w	r3, r3, #1
 801524c:	2b00      	cmp	r3, #0
 801524e:	f000 80ad 	beq.w	80153ac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8015252:	69bb      	ldr	r3, [r7, #24]
 8015254:	099b      	lsrs	r3, r3, #6
 8015256:	f003 0301 	and.w	r3, r3, #1
 801525a:	2b00      	cmp	r3, #0
 801525c:	d023      	beq.n	80152a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015264:	b2db      	uxtb	r3, r3
 8015266:	2b03      	cmp	r3, #3
 8015268:	d011      	beq.n	801528e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801526e:	f043 0204 	orr.w	r2, r3, #4
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015276:	2300      	movs	r3, #0
 8015278:	617b      	str	r3, [r7, #20]
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	68db      	ldr	r3, [r3, #12]
 8015280:	617b      	str	r3, [r7, #20]
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	689b      	ldr	r3, [r3, #8]
 8015288:	617b      	str	r3, [r7, #20]
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	e00b      	b.n	80152a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801528e:	2300      	movs	r3, #0
 8015290:	613b      	str	r3, [r7, #16]
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	68db      	ldr	r3, [r3, #12]
 8015298:	613b      	str	r3, [r7, #16]
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	689b      	ldr	r3, [r3, #8]
 80152a0:	613b      	str	r3, [r7, #16]
 80152a2:	693b      	ldr	r3, [r7, #16]
        return;
 80152a4:	e082      	b.n	80153ac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80152a6:	69bb      	ldr	r3, [r7, #24]
 80152a8:	095b      	lsrs	r3, r3, #5
 80152aa:	f003 0301 	and.w	r3, r3, #1
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d014      	beq.n	80152dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80152b6:	f043 0201 	orr.w	r2, r3, #1
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80152be:	2300      	movs	r3, #0
 80152c0:	60fb      	str	r3, [r7, #12]
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	689b      	ldr	r3, [r3, #8]
 80152c8:	60fb      	str	r3, [r7, #12]
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	681a      	ldr	r2, [r3, #0]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80152d8:	601a      	str	r2, [r3, #0]
 80152da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80152dc:	69bb      	ldr	r3, [r7, #24]
 80152de:	0a1b      	lsrs	r3, r3, #8
 80152e0:	f003 0301 	and.w	r3, r3, #1
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d00c      	beq.n	8015302 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80152ec:	f043 0208 	orr.w	r2, r3, #8
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80152f4:	2300      	movs	r3, #0
 80152f6:	60bb      	str	r3, [r7, #8]
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	689b      	ldr	r3, [r3, #8]
 80152fe:	60bb      	str	r3, [r7, #8]
 8015300:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015306:	2b00      	cmp	r3, #0
 8015308:	d04f      	beq.n	80153aa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	685a      	ldr	r2, [r3, #4]
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8015318:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	2201      	movs	r2, #1
 801531e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	f003 0302 	and.w	r3, r3, #2
 8015328:	2b00      	cmp	r3, #0
 801532a:	d104      	bne.n	8015336 <HAL_SPI_IRQHandler+0x17e>
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	f003 0301 	and.w	r3, r3, #1
 8015332:	2b00      	cmp	r3, #0
 8015334:	d034      	beq.n	80153a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	685a      	ldr	r2, [r3, #4]
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	f022 0203 	bic.w	r2, r2, #3
 8015344:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801534a:	2b00      	cmp	r3, #0
 801534c:	d011      	beq.n	8015372 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015352:	4a18      	ldr	r2, [pc, #96]	; (80153b4 <HAL_SPI_IRQHandler+0x1fc>)
 8015354:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801535a:	4618      	mov	r0, r3
 801535c:	f7fd fdb5 	bl	8012eca <HAL_DMA_Abort_IT>
 8015360:	4603      	mov	r3, r0
 8015362:	2b00      	cmp	r3, #0
 8015364:	d005      	beq.n	8015372 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801536a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015376:	2b00      	cmp	r3, #0
 8015378:	d016      	beq.n	80153a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801537e:	4a0d      	ldr	r2, [pc, #52]	; (80153b4 <HAL_SPI_IRQHandler+0x1fc>)
 8015380:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015386:	4618      	mov	r0, r3
 8015388:	f7fd fd9f 	bl	8012eca <HAL_DMA_Abort_IT>
 801538c:	4603      	mov	r3, r0
 801538e:	2b00      	cmp	r3, #0
 8015390:	d00a      	beq.n	80153a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015396:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 801539e:	e003      	b.n	80153a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f000 f809 	bl	80153b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80153a6:	e000      	b.n	80153aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80153a8:	bf00      	nop
    return;
 80153aa:	bf00      	nop
  }
}
 80153ac:	3720      	adds	r7, #32
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	080153e9 	.word	0x080153e9

080153b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80153b8:	b480      	push	{r7}
 80153ba:	b083      	sub	sp, #12
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80153c0:	bf00      	nop
 80153c2:	370c      	adds	r7, #12
 80153c4:	46bd      	mov	sp, r7
 80153c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ca:	4770      	bx	lr

080153cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80153cc:	b480      	push	{r7}
 80153ce:	b083      	sub	sp, #12
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80153da:	b2db      	uxtb	r3, r3
}
 80153dc:	4618      	mov	r0, r3
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr

080153e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b084      	sub	sp, #16
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	2200      	movs	r2, #0
 80153fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	2200      	movs	r2, #0
 8015402:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8015404:	68f8      	ldr	r0, [r7, #12]
 8015406:	f7ff ffd7 	bl	80153b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801540a:	bf00      	nop
 801540c:	3710      	adds	r7, #16
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
	...

08015414 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b088      	sub	sp, #32
 8015418:	af00      	add	r7, sp, #0
 801541a:	60f8      	str	r0, [r7, #12]
 801541c:	60b9      	str	r1, [r7, #8]
 801541e:	603b      	str	r3, [r7, #0]
 8015420:	4613      	mov	r3, r2
 8015422:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8015424:	f7fc fc68 	bl	8011cf8 <HAL_GetTick>
 8015428:	4602      	mov	r2, r0
 801542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801542c:	1a9b      	subs	r3, r3, r2
 801542e:	683a      	ldr	r2, [r7, #0]
 8015430:	4413      	add	r3, r2
 8015432:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8015434:	f7fc fc60 	bl	8011cf8 <HAL_GetTick>
 8015438:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801543a:	4b39      	ldr	r3, [pc, #228]	; (8015520 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	015b      	lsls	r3, r3, #5
 8015440:	0d1b      	lsrs	r3, r3, #20
 8015442:	69fa      	ldr	r2, [r7, #28]
 8015444:	fb02 f303 	mul.w	r3, r2, r3
 8015448:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801544a:	e054      	b.n	80154f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015452:	d050      	beq.n	80154f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015454:	f7fc fc50 	bl	8011cf8 <HAL_GetTick>
 8015458:	4602      	mov	r2, r0
 801545a:	69bb      	ldr	r3, [r7, #24]
 801545c:	1ad3      	subs	r3, r2, r3
 801545e:	69fa      	ldr	r2, [r7, #28]
 8015460:	429a      	cmp	r2, r3
 8015462:	d902      	bls.n	801546a <SPI_WaitFlagStateUntilTimeout+0x56>
 8015464:	69fb      	ldr	r3, [r7, #28]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d13d      	bne.n	80154e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	685a      	ldr	r2, [r3, #4]
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8015478:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015482:	d111      	bne.n	80154a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	689b      	ldr	r3, [r3, #8]
 8015488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801548c:	d004      	beq.n	8015498 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	689b      	ldr	r3, [r3, #8]
 8015492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015496:	d107      	bne.n	80154a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	681a      	ldr	r2, [r3, #0]
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80154a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80154b0:	d10f      	bne.n	80154d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	681a      	ldr	r2, [r3, #0]
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80154c0:	601a      	str	r2, [r3, #0]
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	681a      	ldr	r2, [r3, #0]
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80154d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	2201      	movs	r2, #1
 80154d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2200      	movs	r2, #0
 80154de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80154e2:	2303      	movs	r3, #3
 80154e4:	e017      	b.n	8015516 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d101      	bne.n	80154f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80154ec:	2300      	movs	r3, #0
 80154ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	3b01      	subs	r3, #1
 80154f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	689a      	ldr	r2, [r3, #8]
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	4013      	ands	r3, r2
 8015500:	68ba      	ldr	r2, [r7, #8]
 8015502:	429a      	cmp	r2, r3
 8015504:	bf0c      	ite	eq
 8015506:	2301      	moveq	r3, #1
 8015508:	2300      	movne	r3, #0
 801550a:	b2db      	uxtb	r3, r3
 801550c:	461a      	mov	r2, r3
 801550e:	79fb      	ldrb	r3, [r7, #7]
 8015510:	429a      	cmp	r2, r3
 8015512:	d19b      	bne.n	801544c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8015514:	2300      	movs	r3, #0
}
 8015516:	4618      	mov	r0, r3
 8015518:	3720      	adds	r7, #32
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}
 801551e:	bf00      	nop
 8015520:	20000004 	.word	0x20000004

08015524 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b088      	sub	sp, #32
 8015528:	af00      	add	r7, sp, #0
 801552a:	60f8      	str	r0, [r7, #12]
 801552c:	60b9      	str	r1, [r7, #8]
 801552e:	607a      	str	r2, [r7, #4]
 8015530:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8015532:	f7fc fbe1 	bl	8011cf8 <HAL_GetTick>
 8015536:	4602      	mov	r2, r0
 8015538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801553a:	1a9b      	subs	r3, r3, r2
 801553c:	683a      	ldr	r2, [r7, #0]
 801553e:	4413      	add	r3, r2
 8015540:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8015542:	f7fc fbd9 	bl	8011cf8 <HAL_GetTick>
 8015546:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8015548:	4b3e      	ldr	r3, [pc, #248]	; (8015644 <SPI_WaitFifoStateUntilTimeout+0x120>)
 801554a:	681a      	ldr	r2, [r3, #0]
 801554c:	4613      	mov	r3, r2
 801554e:	009b      	lsls	r3, r3, #2
 8015550:	4413      	add	r3, r2
 8015552:	00da      	lsls	r2, r3, #3
 8015554:	1ad3      	subs	r3, r2, r3
 8015556:	0d1b      	lsrs	r3, r3, #20
 8015558:	69fa      	ldr	r2, [r7, #28]
 801555a:	fb02 f303 	mul.w	r3, r2, r3
 801555e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8015560:	e062      	b.n	8015628 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8015568:	d109      	bne.n	801557e <SPI_WaitFifoStateUntilTimeout+0x5a>
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d106      	bne.n	801557e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	330c      	adds	r3, #12
 8015576:	781b      	ldrb	r3, [r3, #0]
 8015578:	b2db      	uxtb	r3, r3
 801557a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 801557c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015584:	d050      	beq.n	8015628 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015586:	f7fc fbb7 	bl	8011cf8 <HAL_GetTick>
 801558a:	4602      	mov	r2, r0
 801558c:	69bb      	ldr	r3, [r7, #24]
 801558e:	1ad3      	subs	r3, r2, r3
 8015590:	69fa      	ldr	r2, [r7, #28]
 8015592:	429a      	cmp	r2, r3
 8015594:	d902      	bls.n	801559c <SPI_WaitFifoStateUntilTimeout+0x78>
 8015596:	69fb      	ldr	r3, [r7, #28]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d13d      	bne.n	8015618 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	685a      	ldr	r2, [r3, #4]
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80155aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	685b      	ldr	r3, [r3, #4]
 80155b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80155b4:	d111      	bne.n	80155da <SPI_WaitFifoStateUntilTimeout+0xb6>
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	689b      	ldr	r3, [r3, #8]
 80155ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80155be:	d004      	beq.n	80155ca <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	689b      	ldr	r3, [r3, #8]
 80155c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80155c8:	d107      	bne.n	80155da <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	681a      	ldr	r2, [r3, #0]
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80155d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80155e2:	d10f      	bne.n	8015604 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	681a      	ldr	r2, [r3, #0]
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80155f2:	601a      	str	r2, [r3, #0]
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	681a      	ldr	r2, [r3, #0]
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015602:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	2201      	movs	r2, #1
 8015608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	2200      	movs	r2, #0
 8015610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8015614:	2303      	movs	r3, #3
 8015616:	e010      	b.n	801563a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8015618:	693b      	ldr	r3, [r7, #16]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d101      	bne.n	8015622 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 801561e:	2300      	movs	r3, #0
 8015620:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8015622:	693b      	ldr	r3, [r7, #16]
 8015624:	3b01      	subs	r3, #1
 8015626:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	689a      	ldr	r2, [r3, #8]
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	4013      	ands	r3, r2
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	429a      	cmp	r2, r3
 8015636:	d194      	bne.n	8015562 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8015638:	2300      	movs	r3, #0
}
 801563a:	4618      	mov	r0, r3
 801563c:	3720      	adds	r7, #32
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
 8015642:	bf00      	nop
 8015644:	20000004 	.word	0x20000004

08015648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b086      	sub	sp, #24
 801564c:	af02      	add	r7, sp, #8
 801564e:	60f8      	str	r0, [r7, #12]
 8015650:	60b9      	str	r1, [r7, #8]
 8015652:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	9300      	str	r3, [sp, #0]
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	2200      	movs	r2, #0
 801565c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	f7ff ff5f 	bl	8015524 <SPI_WaitFifoStateUntilTimeout>
 8015666:	4603      	mov	r3, r0
 8015668:	2b00      	cmp	r3, #0
 801566a:	d007      	beq.n	801567c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015670:	f043 0220 	orr.w	r2, r3, #32
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8015678:	2303      	movs	r3, #3
 801567a:	e027      	b.n	80156cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	9300      	str	r3, [sp, #0]
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	2200      	movs	r2, #0
 8015684:	2180      	movs	r1, #128	; 0x80
 8015686:	68f8      	ldr	r0, [r7, #12]
 8015688:	f7ff fec4 	bl	8015414 <SPI_WaitFlagStateUntilTimeout>
 801568c:	4603      	mov	r3, r0
 801568e:	2b00      	cmp	r3, #0
 8015690:	d007      	beq.n	80156a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015696:	f043 0220 	orr.w	r2, r3, #32
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801569e:	2303      	movs	r3, #3
 80156a0:	e014      	b.n	80156cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	9300      	str	r3, [sp, #0]
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	2200      	movs	r2, #0
 80156aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80156ae:	68f8      	ldr	r0, [r7, #12]
 80156b0:	f7ff ff38 	bl	8015524 <SPI_WaitFifoStateUntilTimeout>
 80156b4:	4603      	mov	r3, r0
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d007      	beq.n	80156ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80156be:	f043 0220 	orr.w	r2, r3, #32
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80156c6:	2303      	movs	r3, #3
 80156c8:	e000      	b.n	80156cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80156ca:	2300      	movs	r3, #0
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3710      	adds	r7, #16
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b082      	sub	sp, #8
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d101      	bne.n	80156e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80156e2:	2301      	movs	r3, #1
 80156e4:	e040      	b.n	8015768 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d106      	bne.n	80156fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2200      	movs	r2, #0
 80156f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	f7fb ffde 	bl	80116b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2224      	movs	r2, #36	; 0x24
 8015700:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	681a      	ldr	r2, [r3, #0]
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f022 0201 	bic.w	r2, r2, #1
 8015710:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015712:	6878      	ldr	r0, [r7, #4]
 8015714:	f000 f8c0 	bl	8015898 <UART_SetConfig>
 8015718:	4603      	mov	r3, r0
 801571a:	2b01      	cmp	r3, #1
 801571c:	d101      	bne.n	8015722 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801571e:	2301      	movs	r3, #1
 8015720:	e022      	b.n	8015768 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015726:	2b00      	cmp	r3, #0
 8015728:	d002      	beq.n	8015730 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f000 fb3e 	bl	8015dac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	685a      	ldr	r2, [r3, #4]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801573e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	689a      	ldr	r2, [r3, #8]
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801574e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	681a      	ldr	r2, [r3, #0]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	f042 0201 	orr.w	r2, r2, #1
 801575e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	f000 fbc5 	bl	8015ef0 <UART_CheckIdleState>
 8015766:	4603      	mov	r3, r0
}
 8015768:	4618      	mov	r0, r3
 801576a:	3708      	adds	r7, #8
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}

08015770 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b08a      	sub	sp, #40	; 0x28
 8015774:	af02      	add	r7, sp, #8
 8015776:	60f8      	str	r0, [r7, #12]
 8015778:	60b9      	str	r1, [r7, #8]
 801577a:	603b      	str	r3, [r7, #0]
 801577c:	4613      	mov	r3, r2
 801577e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015784:	2b20      	cmp	r3, #32
 8015786:	f040 8082 	bne.w	801588e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d002      	beq.n	8015796 <HAL_UART_Transmit+0x26>
 8015790:	88fb      	ldrh	r3, [r7, #6]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d101      	bne.n	801579a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8015796:	2301      	movs	r3, #1
 8015798:	e07a      	b.n	8015890 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d101      	bne.n	80157a8 <HAL_UART_Transmit+0x38>
 80157a4:	2302      	movs	r3, #2
 80157a6:	e073      	b.n	8015890 <HAL_UART_Transmit+0x120>
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	2201      	movs	r2, #1
 80157ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	2200      	movs	r2, #0
 80157b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2221      	movs	r2, #33	; 0x21
 80157bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80157be:	f7fc fa9b 	bl	8011cf8 <HAL_GetTick>
 80157c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	88fa      	ldrh	r2, [r7, #6]
 80157c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	88fa      	ldrh	r2, [r7, #6]
 80157d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	689b      	ldr	r3, [r3, #8]
 80157d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80157dc:	d108      	bne.n	80157f0 <HAL_UART_Transmit+0x80>
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	691b      	ldr	r3, [r3, #16]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d104      	bne.n	80157f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80157e6:	2300      	movs	r3, #0
 80157e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	61bb      	str	r3, [r7, #24]
 80157ee:	e003      	b.n	80157f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80157f4:	2300      	movs	r3, #0
 80157f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	2200      	movs	r2, #0
 80157fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8015800:	e02d      	b.n	801585e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	9300      	str	r3, [sp, #0]
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	2200      	movs	r2, #0
 801580a:	2180      	movs	r1, #128	; 0x80
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	f000 fbb8 	bl	8015f82 <UART_WaitOnFlagUntilTimeout>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d001      	beq.n	801581c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8015818:	2303      	movs	r3, #3
 801581a:	e039      	b.n	8015890 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 801581c:	69fb      	ldr	r3, [r7, #28]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d10b      	bne.n	801583a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015822:	69bb      	ldr	r3, [r7, #24]
 8015824:	881a      	ldrh	r2, [r3, #0]
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801582e:	b292      	uxth	r2, r2
 8015830:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8015832:	69bb      	ldr	r3, [r7, #24]
 8015834:	3302      	adds	r3, #2
 8015836:	61bb      	str	r3, [r7, #24]
 8015838:	e008      	b.n	801584c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801583a:	69fb      	ldr	r3, [r7, #28]
 801583c:	781a      	ldrb	r2, [r3, #0]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	b292      	uxth	r2, r2
 8015844:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8015846:	69fb      	ldr	r3, [r7, #28]
 8015848:	3301      	adds	r3, #1
 801584a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8015852:	b29b      	uxth	r3, r3
 8015854:	3b01      	subs	r3, #1
 8015856:	b29a      	uxth	r2, r3
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8015864:	b29b      	uxth	r3, r3
 8015866:	2b00      	cmp	r3, #0
 8015868:	d1cb      	bne.n	8015802 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	9300      	str	r3, [sp, #0]
 801586e:	697b      	ldr	r3, [r7, #20]
 8015870:	2200      	movs	r2, #0
 8015872:	2140      	movs	r1, #64	; 0x40
 8015874:	68f8      	ldr	r0, [r7, #12]
 8015876:	f000 fb84 	bl	8015f82 <UART_WaitOnFlagUntilTimeout>
 801587a:	4603      	mov	r3, r0
 801587c:	2b00      	cmp	r3, #0
 801587e:	d001      	beq.n	8015884 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8015880:	2303      	movs	r3, #3
 8015882:	e005      	b.n	8015890 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	2220      	movs	r2, #32
 8015888:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801588a:	2300      	movs	r3, #0
 801588c:	e000      	b.n	8015890 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 801588e:	2302      	movs	r3, #2
  }
}
 8015890:	4618      	mov	r0, r3
 8015892:	3720      	adds	r7, #32
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}

08015898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015898:	b5b0      	push	{r4, r5, r7, lr}
 801589a:	b088      	sub	sp, #32
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80158a0:	2300      	movs	r3, #0
 80158a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	689a      	ldr	r2, [r3, #8]
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	691b      	ldr	r3, [r3, #16]
 80158ac:	431a      	orrs	r2, r3
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	695b      	ldr	r3, [r3, #20]
 80158b2:	431a      	orrs	r2, r3
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	69db      	ldr	r3, [r3, #28]
 80158b8:	4313      	orrs	r3, r2
 80158ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	681a      	ldr	r2, [r3, #0]
 80158c2:	4bad      	ldr	r3, [pc, #692]	; (8015b78 <UART_SetConfig+0x2e0>)
 80158c4:	4013      	ands	r3, r2
 80158c6:	687a      	ldr	r2, [r7, #4]
 80158c8:	6812      	ldr	r2, [r2, #0]
 80158ca:	69f9      	ldr	r1, [r7, #28]
 80158cc:	430b      	orrs	r3, r1
 80158ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	68da      	ldr	r2, [r3, #12]
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	430a      	orrs	r2, r1
 80158e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	699b      	ldr	r3, [r3, #24]
 80158ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	4aa2      	ldr	r2, [pc, #648]	; (8015b7c <UART_SetConfig+0x2e4>)
 80158f2:	4293      	cmp	r3, r2
 80158f4:	d004      	beq.n	8015900 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	6a1b      	ldr	r3, [r3, #32]
 80158fa:	69fa      	ldr	r2, [r7, #28]
 80158fc:	4313      	orrs	r3, r2
 80158fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	689b      	ldr	r3, [r3, #8]
 8015906:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	69fa      	ldr	r2, [r7, #28]
 8015910:	430a      	orrs	r2, r1
 8015912:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	4a99      	ldr	r2, [pc, #612]	; (8015b80 <UART_SetConfig+0x2e8>)
 801591a:	4293      	cmp	r3, r2
 801591c:	d121      	bne.n	8015962 <UART_SetConfig+0xca>
 801591e:	4b99      	ldr	r3, [pc, #612]	; (8015b84 <UART_SetConfig+0x2ec>)
 8015920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015924:	f003 0303 	and.w	r3, r3, #3
 8015928:	2b03      	cmp	r3, #3
 801592a:	d817      	bhi.n	801595c <UART_SetConfig+0xc4>
 801592c:	a201      	add	r2, pc, #4	; (adr r2, 8015934 <UART_SetConfig+0x9c>)
 801592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015932:	bf00      	nop
 8015934:	08015945 	.word	0x08015945
 8015938:	08015951 	.word	0x08015951
 801593c:	0801594b 	.word	0x0801594b
 8015940:	08015957 	.word	0x08015957
 8015944:	2301      	movs	r3, #1
 8015946:	76fb      	strb	r3, [r7, #27]
 8015948:	e0e7      	b.n	8015b1a <UART_SetConfig+0x282>
 801594a:	2302      	movs	r3, #2
 801594c:	76fb      	strb	r3, [r7, #27]
 801594e:	e0e4      	b.n	8015b1a <UART_SetConfig+0x282>
 8015950:	2304      	movs	r3, #4
 8015952:	76fb      	strb	r3, [r7, #27]
 8015954:	e0e1      	b.n	8015b1a <UART_SetConfig+0x282>
 8015956:	2308      	movs	r3, #8
 8015958:	76fb      	strb	r3, [r7, #27]
 801595a:	e0de      	b.n	8015b1a <UART_SetConfig+0x282>
 801595c:	2310      	movs	r3, #16
 801595e:	76fb      	strb	r3, [r7, #27]
 8015960:	e0db      	b.n	8015b1a <UART_SetConfig+0x282>
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	4a88      	ldr	r2, [pc, #544]	; (8015b88 <UART_SetConfig+0x2f0>)
 8015968:	4293      	cmp	r3, r2
 801596a:	d132      	bne.n	80159d2 <UART_SetConfig+0x13a>
 801596c:	4b85      	ldr	r3, [pc, #532]	; (8015b84 <UART_SetConfig+0x2ec>)
 801596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015972:	f003 030c 	and.w	r3, r3, #12
 8015976:	2b0c      	cmp	r3, #12
 8015978:	d828      	bhi.n	80159cc <UART_SetConfig+0x134>
 801597a:	a201      	add	r2, pc, #4	; (adr r2, 8015980 <UART_SetConfig+0xe8>)
 801597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015980:	080159b5 	.word	0x080159b5
 8015984:	080159cd 	.word	0x080159cd
 8015988:	080159cd 	.word	0x080159cd
 801598c:	080159cd 	.word	0x080159cd
 8015990:	080159c1 	.word	0x080159c1
 8015994:	080159cd 	.word	0x080159cd
 8015998:	080159cd 	.word	0x080159cd
 801599c:	080159cd 	.word	0x080159cd
 80159a0:	080159bb 	.word	0x080159bb
 80159a4:	080159cd 	.word	0x080159cd
 80159a8:	080159cd 	.word	0x080159cd
 80159ac:	080159cd 	.word	0x080159cd
 80159b0:	080159c7 	.word	0x080159c7
 80159b4:	2300      	movs	r3, #0
 80159b6:	76fb      	strb	r3, [r7, #27]
 80159b8:	e0af      	b.n	8015b1a <UART_SetConfig+0x282>
 80159ba:	2302      	movs	r3, #2
 80159bc:	76fb      	strb	r3, [r7, #27]
 80159be:	e0ac      	b.n	8015b1a <UART_SetConfig+0x282>
 80159c0:	2304      	movs	r3, #4
 80159c2:	76fb      	strb	r3, [r7, #27]
 80159c4:	e0a9      	b.n	8015b1a <UART_SetConfig+0x282>
 80159c6:	2308      	movs	r3, #8
 80159c8:	76fb      	strb	r3, [r7, #27]
 80159ca:	e0a6      	b.n	8015b1a <UART_SetConfig+0x282>
 80159cc:	2310      	movs	r3, #16
 80159ce:	76fb      	strb	r3, [r7, #27]
 80159d0:	e0a3      	b.n	8015b1a <UART_SetConfig+0x282>
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	4a6d      	ldr	r2, [pc, #436]	; (8015b8c <UART_SetConfig+0x2f4>)
 80159d8:	4293      	cmp	r3, r2
 80159da:	d120      	bne.n	8015a1e <UART_SetConfig+0x186>
 80159dc:	4b69      	ldr	r3, [pc, #420]	; (8015b84 <UART_SetConfig+0x2ec>)
 80159de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80159e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80159e6:	2b30      	cmp	r3, #48	; 0x30
 80159e8:	d013      	beq.n	8015a12 <UART_SetConfig+0x17a>
 80159ea:	2b30      	cmp	r3, #48	; 0x30
 80159ec:	d814      	bhi.n	8015a18 <UART_SetConfig+0x180>
 80159ee:	2b20      	cmp	r3, #32
 80159f0:	d009      	beq.n	8015a06 <UART_SetConfig+0x16e>
 80159f2:	2b20      	cmp	r3, #32
 80159f4:	d810      	bhi.n	8015a18 <UART_SetConfig+0x180>
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d002      	beq.n	8015a00 <UART_SetConfig+0x168>
 80159fa:	2b10      	cmp	r3, #16
 80159fc:	d006      	beq.n	8015a0c <UART_SetConfig+0x174>
 80159fe:	e00b      	b.n	8015a18 <UART_SetConfig+0x180>
 8015a00:	2300      	movs	r3, #0
 8015a02:	76fb      	strb	r3, [r7, #27]
 8015a04:	e089      	b.n	8015b1a <UART_SetConfig+0x282>
 8015a06:	2302      	movs	r3, #2
 8015a08:	76fb      	strb	r3, [r7, #27]
 8015a0a:	e086      	b.n	8015b1a <UART_SetConfig+0x282>
 8015a0c:	2304      	movs	r3, #4
 8015a0e:	76fb      	strb	r3, [r7, #27]
 8015a10:	e083      	b.n	8015b1a <UART_SetConfig+0x282>
 8015a12:	2308      	movs	r3, #8
 8015a14:	76fb      	strb	r3, [r7, #27]
 8015a16:	e080      	b.n	8015b1a <UART_SetConfig+0x282>
 8015a18:	2310      	movs	r3, #16
 8015a1a:	76fb      	strb	r3, [r7, #27]
 8015a1c:	e07d      	b.n	8015b1a <UART_SetConfig+0x282>
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	4a5b      	ldr	r2, [pc, #364]	; (8015b90 <UART_SetConfig+0x2f8>)
 8015a24:	4293      	cmp	r3, r2
 8015a26:	d120      	bne.n	8015a6a <UART_SetConfig+0x1d2>
 8015a28:	4b56      	ldr	r3, [pc, #344]	; (8015b84 <UART_SetConfig+0x2ec>)
 8015a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015a32:	2bc0      	cmp	r3, #192	; 0xc0
 8015a34:	d013      	beq.n	8015a5e <UART_SetConfig+0x1c6>
 8015a36:	2bc0      	cmp	r3, #192	; 0xc0
 8015a38:	d814      	bhi.n	8015a64 <UART_SetConfig+0x1cc>
 8015a3a:	2b80      	cmp	r3, #128	; 0x80
 8015a3c:	d009      	beq.n	8015a52 <UART_SetConfig+0x1ba>
 8015a3e:	2b80      	cmp	r3, #128	; 0x80
 8015a40:	d810      	bhi.n	8015a64 <UART_SetConfig+0x1cc>
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d002      	beq.n	8015a4c <UART_SetConfig+0x1b4>
 8015a46:	2b40      	cmp	r3, #64	; 0x40
 8015a48:	d006      	beq.n	8015a58 <UART_SetConfig+0x1c0>
 8015a4a:	e00b      	b.n	8015a64 <UART_SetConfig+0x1cc>
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	76fb      	strb	r3, [r7, #27]
 8015a50:	e063      	b.n	8015b1a <UART_SetConfig+0x282>
 8015a52:	2302      	movs	r3, #2
 8015a54:	76fb      	strb	r3, [r7, #27]
 8015a56:	e060      	b.n	8015b1a <UART_SetConfig+0x282>
 8015a58:	2304      	movs	r3, #4
 8015a5a:	76fb      	strb	r3, [r7, #27]
 8015a5c:	e05d      	b.n	8015b1a <UART_SetConfig+0x282>
 8015a5e:	2308      	movs	r3, #8
 8015a60:	76fb      	strb	r3, [r7, #27]
 8015a62:	e05a      	b.n	8015b1a <UART_SetConfig+0x282>
 8015a64:	2310      	movs	r3, #16
 8015a66:	76fb      	strb	r3, [r7, #27]
 8015a68:	e057      	b.n	8015b1a <UART_SetConfig+0x282>
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	4a49      	ldr	r2, [pc, #292]	; (8015b94 <UART_SetConfig+0x2fc>)
 8015a70:	4293      	cmp	r3, r2
 8015a72:	d125      	bne.n	8015ac0 <UART_SetConfig+0x228>
 8015a74:	4b43      	ldr	r3, [pc, #268]	; (8015b84 <UART_SetConfig+0x2ec>)
 8015a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015a82:	d017      	beq.n	8015ab4 <UART_SetConfig+0x21c>
 8015a84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015a88:	d817      	bhi.n	8015aba <UART_SetConfig+0x222>
 8015a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a8e:	d00b      	beq.n	8015aa8 <UART_SetConfig+0x210>
 8015a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a94:	d811      	bhi.n	8015aba <UART_SetConfig+0x222>
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d003      	beq.n	8015aa2 <UART_SetConfig+0x20a>
 8015a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a9e:	d006      	beq.n	8015aae <UART_SetConfig+0x216>
 8015aa0:	e00b      	b.n	8015aba <UART_SetConfig+0x222>
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	76fb      	strb	r3, [r7, #27]
 8015aa6:	e038      	b.n	8015b1a <UART_SetConfig+0x282>
 8015aa8:	2302      	movs	r3, #2
 8015aaa:	76fb      	strb	r3, [r7, #27]
 8015aac:	e035      	b.n	8015b1a <UART_SetConfig+0x282>
 8015aae:	2304      	movs	r3, #4
 8015ab0:	76fb      	strb	r3, [r7, #27]
 8015ab2:	e032      	b.n	8015b1a <UART_SetConfig+0x282>
 8015ab4:	2308      	movs	r3, #8
 8015ab6:	76fb      	strb	r3, [r7, #27]
 8015ab8:	e02f      	b.n	8015b1a <UART_SetConfig+0x282>
 8015aba:	2310      	movs	r3, #16
 8015abc:	76fb      	strb	r3, [r7, #27]
 8015abe:	e02c      	b.n	8015b1a <UART_SetConfig+0x282>
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	4a2d      	ldr	r2, [pc, #180]	; (8015b7c <UART_SetConfig+0x2e4>)
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	d125      	bne.n	8015b16 <UART_SetConfig+0x27e>
 8015aca:	4b2e      	ldr	r3, [pc, #184]	; (8015b84 <UART_SetConfig+0x2ec>)
 8015acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015ad0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8015ad4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015ad8:	d017      	beq.n	8015b0a <UART_SetConfig+0x272>
 8015ada:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015ade:	d817      	bhi.n	8015b10 <UART_SetConfig+0x278>
 8015ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015ae4:	d00b      	beq.n	8015afe <UART_SetConfig+0x266>
 8015ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015aea:	d811      	bhi.n	8015b10 <UART_SetConfig+0x278>
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d003      	beq.n	8015af8 <UART_SetConfig+0x260>
 8015af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015af4:	d006      	beq.n	8015b04 <UART_SetConfig+0x26c>
 8015af6:	e00b      	b.n	8015b10 <UART_SetConfig+0x278>
 8015af8:	2300      	movs	r3, #0
 8015afa:	76fb      	strb	r3, [r7, #27]
 8015afc:	e00d      	b.n	8015b1a <UART_SetConfig+0x282>
 8015afe:	2302      	movs	r3, #2
 8015b00:	76fb      	strb	r3, [r7, #27]
 8015b02:	e00a      	b.n	8015b1a <UART_SetConfig+0x282>
 8015b04:	2304      	movs	r3, #4
 8015b06:	76fb      	strb	r3, [r7, #27]
 8015b08:	e007      	b.n	8015b1a <UART_SetConfig+0x282>
 8015b0a:	2308      	movs	r3, #8
 8015b0c:	76fb      	strb	r3, [r7, #27]
 8015b0e:	e004      	b.n	8015b1a <UART_SetConfig+0x282>
 8015b10:	2310      	movs	r3, #16
 8015b12:	76fb      	strb	r3, [r7, #27]
 8015b14:	e001      	b.n	8015b1a <UART_SetConfig+0x282>
 8015b16:	2310      	movs	r3, #16
 8015b18:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	4a17      	ldr	r2, [pc, #92]	; (8015b7c <UART_SetConfig+0x2e4>)
 8015b20:	4293      	cmp	r3, r2
 8015b22:	f040 8087 	bne.w	8015c34 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015b26:	7efb      	ldrb	r3, [r7, #27]
 8015b28:	2b08      	cmp	r3, #8
 8015b2a:	d837      	bhi.n	8015b9c <UART_SetConfig+0x304>
 8015b2c:	a201      	add	r2, pc, #4	; (adr r2, 8015b34 <UART_SetConfig+0x29c>)
 8015b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b32:	bf00      	nop
 8015b34:	08015b59 	.word	0x08015b59
 8015b38:	08015b9d 	.word	0x08015b9d
 8015b3c:	08015b61 	.word	0x08015b61
 8015b40:	08015b9d 	.word	0x08015b9d
 8015b44:	08015b67 	.word	0x08015b67
 8015b48:	08015b9d 	.word	0x08015b9d
 8015b4c:	08015b9d 	.word	0x08015b9d
 8015b50:	08015b9d 	.word	0x08015b9d
 8015b54:	08015b6f 	.word	0x08015b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015b58:	f7fe fb26 	bl	80141a8 <HAL_RCC_GetPCLK1Freq>
 8015b5c:	6178      	str	r0, [r7, #20]
        break;
 8015b5e:	e022      	b.n	8015ba6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015b60:	4b0d      	ldr	r3, [pc, #52]	; (8015b98 <UART_SetConfig+0x300>)
 8015b62:	617b      	str	r3, [r7, #20]
        break;
 8015b64:	e01f      	b.n	8015ba6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015b66:	f7fe fa87 	bl	8014078 <HAL_RCC_GetSysClockFreq>
 8015b6a:	6178      	str	r0, [r7, #20]
        break;
 8015b6c:	e01b      	b.n	8015ba6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b72:	617b      	str	r3, [r7, #20]
        break;
 8015b74:	e017      	b.n	8015ba6 <UART_SetConfig+0x30e>
 8015b76:	bf00      	nop
 8015b78:	efff69f3 	.word	0xefff69f3
 8015b7c:	40008000 	.word	0x40008000
 8015b80:	40013800 	.word	0x40013800
 8015b84:	40021000 	.word	0x40021000
 8015b88:	40004400 	.word	0x40004400
 8015b8c:	40004800 	.word	0x40004800
 8015b90:	40004c00 	.word	0x40004c00
 8015b94:	40005000 	.word	0x40005000
 8015b98:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	76bb      	strb	r3, [r7, #26]
        break;
 8015ba4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015ba6:	697b      	ldr	r3, [r7, #20]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	f000 80f1 	beq.w	8015d90 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	685a      	ldr	r2, [r3, #4]
 8015bb2:	4613      	mov	r3, r2
 8015bb4:	005b      	lsls	r3, r3, #1
 8015bb6:	4413      	add	r3, r2
 8015bb8:	697a      	ldr	r2, [r7, #20]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d305      	bcc.n	8015bca <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015bc4:	697a      	ldr	r2, [r7, #20]
 8015bc6:	429a      	cmp	r2, r3
 8015bc8:	d902      	bls.n	8015bd0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8015bca:	2301      	movs	r3, #1
 8015bcc:	76bb      	strb	r3, [r7, #26]
 8015bce:	e0df      	b.n	8015d90 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f04f 0100 	mov.w	r1, #0
 8015bd8:	f04f 0200 	mov.w	r2, #0
 8015bdc:	f04f 0300 	mov.w	r3, #0
 8015be0:	020b      	lsls	r3, r1, #8
 8015be2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015be6:	0202      	lsls	r2, r0, #8
 8015be8:	6879      	ldr	r1, [r7, #4]
 8015bea:	6849      	ldr	r1, [r1, #4]
 8015bec:	0849      	lsrs	r1, r1, #1
 8015bee:	4608      	mov	r0, r1
 8015bf0:	f04f 0100 	mov.w	r1, #0
 8015bf4:	1814      	adds	r4, r2, r0
 8015bf6:	eb43 0501 	adc.w	r5, r3, r1
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	685b      	ldr	r3, [r3, #4]
 8015bfe:	461a      	mov	r2, r3
 8015c00:	f04f 0300 	mov.w	r3, #0
 8015c04:	4620      	mov	r0, r4
 8015c06:	4629      	mov	r1, r5
 8015c08:	f7fa fb3a 	bl	8010280 <__aeabi_uldivmod>
 8015c0c:	4602      	mov	r2, r0
 8015c0e:	460b      	mov	r3, r1
 8015c10:	4613      	mov	r3, r2
 8015c12:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015c14:	693b      	ldr	r3, [r7, #16]
 8015c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015c1a:	d308      	bcc.n	8015c2e <UART_SetConfig+0x396>
 8015c1c:	693b      	ldr	r3, [r7, #16]
 8015c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015c22:	d204      	bcs.n	8015c2e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	693a      	ldr	r2, [r7, #16]
 8015c2a:	60da      	str	r2, [r3, #12]
 8015c2c:	e0b0      	b.n	8015d90 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8015c2e:	2301      	movs	r3, #1
 8015c30:	76bb      	strb	r3, [r7, #26]
 8015c32:	e0ad      	b.n	8015d90 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	69db      	ldr	r3, [r3, #28]
 8015c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015c3c:	d15c      	bne.n	8015cf8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8015c3e:	7efb      	ldrb	r3, [r7, #27]
 8015c40:	2b08      	cmp	r3, #8
 8015c42:	d828      	bhi.n	8015c96 <UART_SetConfig+0x3fe>
 8015c44:	a201      	add	r2, pc, #4	; (adr r2, 8015c4c <UART_SetConfig+0x3b4>)
 8015c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c4a:	bf00      	nop
 8015c4c:	08015c71 	.word	0x08015c71
 8015c50:	08015c79 	.word	0x08015c79
 8015c54:	08015c81 	.word	0x08015c81
 8015c58:	08015c97 	.word	0x08015c97
 8015c5c:	08015c87 	.word	0x08015c87
 8015c60:	08015c97 	.word	0x08015c97
 8015c64:	08015c97 	.word	0x08015c97
 8015c68:	08015c97 	.word	0x08015c97
 8015c6c:	08015c8f 	.word	0x08015c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015c70:	f7fe fa9a 	bl	80141a8 <HAL_RCC_GetPCLK1Freq>
 8015c74:	6178      	str	r0, [r7, #20]
        break;
 8015c76:	e013      	b.n	8015ca0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015c78:	f7fe faac 	bl	80141d4 <HAL_RCC_GetPCLK2Freq>
 8015c7c:	6178      	str	r0, [r7, #20]
        break;
 8015c7e:	e00f      	b.n	8015ca0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015c80:	4b49      	ldr	r3, [pc, #292]	; (8015da8 <UART_SetConfig+0x510>)
 8015c82:	617b      	str	r3, [r7, #20]
        break;
 8015c84:	e00c      	b.n	8015ca0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015c86:	f7fe f9f7 	bl	8014078 <HAL_RCC_GetSysClockFreq>
 8015c8a:	6178      	str	r0, [r7, #20]
        break;
 8015c8c:	e008      	b.n	8015ca0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015c92:	617b      	str	r3, [r7, #20]
        break;
 8015c94:	e004      	b.n	8015ca0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8015c96:	2300      	movs	r3, #0
 8015c98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8015c9a:	2301      	movs	r3, #1
 8015c9c:	76bb      	strb	r3, [r7, #26]
        break;
 8015c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d074      	beq.n	8015d90 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	005a      	lsls	r2, r3, #1
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	685b      	ldr	r3, [r3, #4]
 8015cae:	085b      	lsrs	r3, r3, #1
 8015cb0:	441a      	add	r2, r3
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8015cba:	b29b      	uxth	r3, r3
 8015cbc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	2b0f      	cmp	r3, #15
 8015cc2:	d916      	bls.n	8015cf2 <UART_SetConfig+0x45a>
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015cca:	d212      	bcs.n	8015cf2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	b29b      	uxth	r3, r3
 8015cd0:	f023 030f 	bic.w	r3, r3, #15
 8015cd4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	085b      	lsrs	r3, r3, #1
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	f003 0307 	and.w	r3, r3, #7
 8015ce0:	b29a      	uxth	r2, r3
 8015ce2:	89fb      	ldrh	r3, [r7, #14]
 8015ce4:	4313      	orrs	r3, r2
 8015ce6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	89fa      	ldrh	r2, [r7, #14]
 8015cee:	60da      	str	r2, [r3, #12]
 8015cf0:	e04e      	b.n	8015d90 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	76bb      	strb	r3, [r7, #26]
 8015cf6:	e04b      	b.n	8015d90 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015cf8:	7efb      	ldrb	r3, [r7, #27]
 8015cfa:	2b08      	cmp	r3, #8
 8015cfc:	d827      	bhi.n	8015d4e <UART_SetConfig+0x4b6>
 8015cfe:	a201      	add	r2, pc, #4	; (adr r2, 8015d04 <UART_SetConfig+0x46c>)
 8015d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d04:	08015d29 	.word	0x08015d29
 8015d08:	08015d31 	.word	0x08015d31
 8015d0c:	08015d39 	.word	0x08015d39
 8015d10:	08015d4f 	.word	0x08015d4f
 8015d14:	08015d3f 	.word	0x08015d3f
 8015d18:	08015d4f 	.word	0x08015d4f
 8015d1c:	08015d4f 	.word	0x08015d4f
 8015d20:	08015d4f 	.word	0x08015d4f
 8015d24:	08015d47 	.word	0x08015d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015d28:	f7fe fa3e 	bl	80141a8 <HAL_RCC_GetPCLK1Freq>
 8015d2c:	6178      	str	r0, [r7, #20]
        break;
 8015d2e:	e013      	b.n	8015d58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015d30:	f7fe fa50 	bl	80141d4 <HAL_RCC_GetPCLK2Freq>
 8015d34:	6178      	str	r0, [r7, #20]
        break;
 8015d36:	e00f      	b.n	8015d58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015d38:	4b1b      	ldr	r3, [pc, #108]	; (8015da8 <UART_SetConfig+0x510>)
 8015d3a:	617b      	str	r3, [r7, #20]
        break;
 8015d3c:	e00c      	b.n	8015d58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015d3e:	f7fe f99b 	bl	8014078 <HAL_RCC_GetSysClockFreq>
 8015d42:	6178      	str	r0, [r7, #20]
        break;
 8015d44:	e008      	b.n	8015d58 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015d4a:	617b      	str	r3, [r7, #20]
        break;
 8015d4c:	e004      	b.n	8015d58 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8015d52:	2301      	movs	r3, #1
 8015d54:	76bb      	strb	r3, [r7, #26]
        break;
 8015d56:	bf00      	nop
    }

    if (pclk != 0U)
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d018      	beq.n	8015d90 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	685b      	ldr	r3, [r3, #4]
 8015d62:	085a      	lsrs	r2, r3, #1
 8015d64:	697b      	ldr	r3, [r7, #20]
 8015d66:	441a      	add	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	685b      	ldr	r3, [r3, #4]
 8015d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	2b0f      	cmp	r3, #15
 8015d78:	d908      	bls.n	8015d8c <UART_SetConfig+0x4f4>
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d80:	d204      	bcs.n	8015d8c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	693a      	ldr	r2, [r7, #16]
 8015d88:	60da      	str	r2, [r3, #12]
 8015d8a:	e001      	b.n	8015d90 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2200      	movs	r2, #0
 8015d94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	2200      	movs	r2, #0
 8015d9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8015d9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3720      	adds	r7, #32
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bdb0      	pop	{r4, r5, r7, pc}
 8015da6:	bf00      	nop
 8015da8:	00f42400 	.word	0x00f42400

08015dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015dac:	b480      	push	{r7}
 8015dae:	b083      	sub	sp, #12
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015db8:	f003 0301 	and.w	r3, r3, #1
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d00a      	beq.n	8015dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	685b      	ldr	r3, [r3, #4]
 8015dc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	430a      	orrs	r2, r1
 8015dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dda:	f003 0302 	and.w	r3, r3, #2
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d00a      	beq.n	8015df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	685b      	ldr	r3, [r3, #4]
 8015de8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	430a      	orrs	r2, r1
 8015df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dfc:	f003 0304 	and.w	r3, r3, #4
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d00a      	beq.n	8015e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	685b      	ldr	r3, [r3, #4]
 8015e0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	430a      	orrs	r2, r1
 8015e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e1e:	f003 0308 	and.w	r3, r3, #8
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d00a      	beq.n	8015e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	430a      	orrs	r2, r1
 8015e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e40:	f003 0310 	and.w	r3, r3, #16
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d00a      	beq.n	8015e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	689b      	ldr	r3, [r3, #8]
 8015e4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	430a      	orrs	r2, r1
 8015e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e62:	f003 0320 	and.w	r3, r3, #32
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d00a      	beq.n	8015e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	689b      	ldr	r3, [r3, #8]
 8015e70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	430a      	orrs	r2, r1
 8015e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d01a      	beq.n	8015ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	685b      	ldr	r3, [r3, #4]
 8015e92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	430a      	orrs	r2, r1
 8015ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015eaa:	d10a      	bne.n	8015ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	430a      	orrs	r2, r1
 8015ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d00a      	beq.n	8015ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	685b      	ldr	r3, [r3, #4]
 8015ed4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	430a      	orrs	r2, r1
 8015ee2:	605a      	str	r2, [r3, #4]
  }
}
 8015ee4:	bf00      	nop
 8015ee6:	370c      	adds	r7, #12
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eee:	4770      	bx	lr

08015ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b086      	sub	sp, #24
 8015ef4:	af02      	add	r7, sp, #8
 8015ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2200      	movs	r2, #0
 8015efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015f00:	f7fb fefa 	bl	8011cf8 <HAL_GetTick>
 8015f04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	f003 0308 	and.w	r3, r3, #8
 8015f10:	2b08      	cmp	r3, #8
 8015f12:	d10e      	bne.n	8015f32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015f18:	9300      	str	r3, [sp, #0]
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	f000 f82d 	bl	8015f82 <UART_WaitOnFlagUntilTimeout>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d001      	beq.n	8015f32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015f2e:	2303      	movs	r3, #3
 8015f30:	e023      	b.n	8015f7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f003 0304 	and.w	r3, r3, #4
 8015f3c:	2b04      	cmp	r3, #4
 8015f3e:	d10e      	bne.n	8015f5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015f44:	9300      	str	r3, [sp, #0]
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2200      	movs	r2, #0
 8015f4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f000 f817 	bl	8015f82 <UART_WaitOnFlagUntilTimeout>
 8015f54:	4603      	mov	r3, r0
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d001      	beq.n	8015f5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015f5a:	2303      	movs	r3, #3
 8015f5c:	e00d      	b.n	8015f7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2220      	movs	r2, #32
 8015f62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2220      	movs	r2, #32
 8015f68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2200      	movs	r2, #0
 8015f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8015f78:	2300      	movs	r3, #0
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3710      	adds	r7, #16
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}

08015f82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015f82:	b580      	push	{r7, lr}
 8015f84:	b084      	sub	sp, #16
 8015f86:	af00      	add	r7, sp, #0
 8015f88:	60f8      	str	r0, [r7, #12]
 8015f8a:	60b9      	str	r1, [r7, #8]
 8015f8c:	603b      	str	r3, [r7, #0]
 8015f8e:	4613      	mov	r3, r2
 8015f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015f92:	e05e      	b.n	8016052 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015f94:	69bb      	ldr	r3, [r7, #24]
 8015f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f9a:	d05a      	beq.n	8016052 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015f9c:	f7fb feac 	bl	8011cf8 <HAL_GetTick>
 8015fa0:	4602      	mov	r2, r0
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	1ad3      	subs	r3, r2, r3
 8015fa6:	69ba      	ldr	r2, [r7, #24]
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d302      	bcc.n	8015fb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8015fac:	69bb      	ldr	r3, [r7, #24]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d11b      	bne.n	8015fea <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	681a      	ldr	r2, [r3, #0]
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8015fc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	689a      	ldr	r2, [r3, #8]
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	f022 0201 	bic.w	r2, r2, #1
 8015fd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	2220      	movs	r2, #32
 8015fd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	2220      	movs	r2, #32
 8015fdc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8015fe6:	2303      	movs	r3, #3
 8015fe8:	e043      	b.n	8016072 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	f003 0304 	and.w	r3, r3, #4
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d02c      	beq.n	8016052 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	69db      	ldr	r3, [r3, #28]
 8015ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016006:	d124      	bne.n	8016052 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016010:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	681a      	ldr	r2, [r3, #0]
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8016020:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	689a      	ldr	r2, [r3, #8]
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	f022 0201 	bic.w	r2, r2, #1
 8016030:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	2220      	movs	r2, #32
 8016036:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	2220      	movs	r2, #32
 801603c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	2220      	movs	r2, #32
 8016042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2200      	movs	r2, #0
 801604a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801604e:	2303      	movs	r3, #3
 8016050:	e00f      	b.n	8016072 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	69da      	ldr	r2, [r3, #28]
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	4013      	ands	r3, r2
 801605c:	68ba      	ldr	r2, [r7, #8]
 801605e:	429a      	cmp	r2, r3
 8016060:	bf0c      	ite	eq
 8016062:	2301      	moveq	r3, #1
 8016064:	2300      	movne	r3, #0
 8016066:	b2db      	uxtb	r3, r3
 8016068:	461a      	mov	r2, r3
 801606a:	79fb      	ldrb	r3, [r7, #7]
 801606c:	429a      	cmp	r2, r3
 801606e:	d091      	beq.n	8015f94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016070:	2300      	movs	r3, #0
}
 8016072:	4618      	mov	r0, r3
 8016074:	3710      	adds	r7, #16
 8016076:	46bd      	mov	sp, r7
 8016078:	bd80      	pop	{r7, pc}

0801607a <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 801607a:	b580      	push	{r7, lr}
 801607c:	b08c      	sub	sp, #48	; 0x30
 801607e:	af00      	add	r7, sp, #0
 8016080:	603b      	str	r3, [r7, #0]
 8016082:	4603      	mov	r3, r0
 8016084:	71fb      	strb	r3, [r7, #7]
 8016086:	460b      	mov	r3, r1
 8016088:	71bb      	strb	r3, [r7, #6]
 801608a:	4613      	mov	r3, r2
 801608c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 801608e:	79fb      	ldrb	r3, [r7, #7]
 8016090:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8016092:	79bb      	ldrb	r3, [r7, #6]
 8016094:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8016096:	797b      	ldrb	r3, [r7, #5]
 8016098:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 801609a:	f107 030c 	add.w	r3, r7, #12
 801609e:	2207      	movs	r2, #7
 80160a0:	2100      	movs	r1, #0
 80160a2:	4618      	mov	r0, r3
 80160a4:	f001 f96f 	bl	8017386 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80160a8:	f107 0318 	add.w	r3, r7, #24
 80160ac:	2218      	movs	r2, #24
 80160ae:	2100      	movs	r1, #0
 80160b0:	4618      	mov	r0, r3
 80160b2:	f001 f968 	bl	8017386 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80160b6:	233f      	movs	r3, #63	; 0x3f
 80160b8:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80160ba:	238a      	movs	r3, #138	; 0x8a
 80160bc:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80160be:	f107 0314 	add.w	r3, r7, #20
 80160c2:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80160c4:	2303      	movs	r3, #3
 80160c6:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 80160c8:	f107 030c 	add.w	r3, r7, #12
 80160cc:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80160ce:	2307      	movs	r3, #7
 80160d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80160d2:	f107 0318 	add.w	r3, r7, #24
 80160d6:	2100      	movs	r1, #0
 80160d8:	4618      	mov	r0, r3
 80160da:	f000 fca5 	bl	8016a28 <hci_send_req>
 80160de:	4603      	mov	r3, r0
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	da01      	bge.n	80160e8 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 80160e4:	23ff      	movs	r3, #255	; 0xff
 80160e6:	e014      	b.n	8016112 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 80160e8:	7b3b      	ldrb	r3, [r7, #12]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d001      	beq.n	80160f2 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 80160ee:	7b3b      	ldrb	r3, [r7, #12]
 80160f0:	e00f      	b.n	8016112 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80160f2:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80160f6:	b29a      	uxth	r2, r3
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80160fc:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8016100:	b29a      	uxth	r2, r3
 8016102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016104:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8016106:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 801610a:	b29a      	uxth	r2, r3
 801610c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801610e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8016110:	2300      	movs	r3, #0
}
 8016112:	4618      	mov	r0, r3
 8016114:	3730      	adds	r7, #48	; 0x30
 8016116:	46bd      	mov	sp, r7
 8016118:	bd80      	pop	{r7, pc}

0801611a <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 801611a:	b590      	push	{r4, r7, lr}
 801611c:	b095      	sub	sp, #84	; 0x54
 801611e:	af00      	add	r7, sp, #0
 8016120:	4604      	mov	r4, r0
 8016122:	4608      	mov	r0, r1
 8016124:	4611      	mov	r1, r2
 8016126:	461a      	mov	r2, r3
 8016128:	4623      	mov	r3, r4
 801612a:	71fb      	strb	r3, [r7, #7]
 801612c:	4603      	mov	r3, r0
 801612e:	80bb      	strh	r3, [r7, #4]
 8016130:	460b      	mov	r3, r1
 8016132:	807b      	strh	r3, [r7, #2]
 8016134:	4613      	mov	r3, r2
 8016136:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8016138:	2300      	movs	r3, #0
 801613a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 801613e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8016142:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016146:	4413      	add	r3, r2
 8016148:	330e      	adds	r3, #14
 801614a:	2b28      	cmp	r3, #40	; 0x28
 801614c:	d901      	bls.n	8016152 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 801614e:	2342      	movs	r3, #66	; 0x42
 8016150:	e0ce      	b.n	80162f0 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8016152:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016156:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801615a:	4413      	add	r3, r2
 801615c:	79fa      	ldrb	r2, [r7, #7]
 801615e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8016162:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016166:	3301      	adds	r3, #1
 8016168:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 801616c:	88bb      	ldrh	r3, [r7, #4]
 801616e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8016170:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016174:	f107 0208 	add.w	r2, r7, #8
 8016178:	4413      	add	r3, r2
 801617a:	88ba      	ldrh	r2, [r7, #4]
 801617c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 801617e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016182:	3302      	adds	r3, #2
 8016184:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8016188:	887b      	ldrh	r3, [r7, #2]
 801618a:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 801618c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016190:	f107 0208 	add.w	r2, r7, #8
 8016194:	4413      	add	r3, r2
 8016196:	887a      	ldrh	r2, [r7, #2]
 8016198:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 801619a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801619e:	3302      	adds	r3, #2
 80161a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 80161a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80161ac:	4413      	add	r3, r2
 80161ae:	79ba      	ldrb	r2, [r7, #6]
 80161b0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80161b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161b8:	3301      	adds	r3, #1
 80161ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80161be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80161c6:	4413      	add	r3, r2
 80161c8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80161cc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80161d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161d4:	3301      	adds	r3, #1
 80161d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 80161da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80161e2:	4413      	add	r3, r2
 80161e4:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80161e8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80161ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161f0:	3301      	adds	r3, #1
 80161f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80161f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80161fa:	f107 0208 	add.w	r2, r7, #8
 80161fe:	4413      	add	r3, r2
 8016200:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8016204:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016206:	4618      	mov	r0, r3
 8016208:	f001 f8af 	bl	801736a <memcpy>
  indx +=  LocalNameLen;
 801620c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8016210:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8016214:	4413      	add	r3, r2
 8016216:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 801621a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801621e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8016222:	4413      	add	r3, r2
 8016224:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8016228:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 801622c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016230:	3301      	adds	r3, #1
 8016232:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8016236:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801623a:	f107 0208 	add.w	r2, r7, #8
 801623e:	4413      	add	r3, r2
 8016240:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8016244:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016246:	4618      	mov	r0, r3
 8016248:	f001 f88f 	bl	801736a <memcpy>
  indx +=  ServiceUUIDLen;  
 801624c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8016250:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8016254:	4413      	add	r3, r2
 8016256:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 801625a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801625e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8016262:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016266:	f107 0208 	add.w	r2, r7, #8
 801626a:	4413      	add	r3, r2
 801626c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8016270:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8016272:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016276:	3302      	adds	r3, #2
 8016278:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 801627c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016280:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8016284:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016288:	f107 0208 	add.w	r2, r7, #8
 801628c:	4413      	add	r3, r2
 801628e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8016292:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8016294:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016298:	3302      	adds	r3, #2
 801629a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 801629e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80162a2:	2218      	movs	r2, #24
 80162a4:	2100      	movs	r1, #0
 80162a6:	4618      	mov	r0, r3
 80162a8:	f001 f86d 	bl	8017386 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80162ac:	233f      	movs	r3, #63	; 0x3f
 80162ae:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80162b0:	2383      	movs	r3, #131	; 0x83
 80162b2:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 80162b4:	f107 0308 	add.w	r3, r7, #8
 80162b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 80162ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80162be:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 80162c0:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80162c4:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 80162c6:	2301      	movs	r3, #1
 80162c8:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80162ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80162ce:	2100      	movs	r1, #0
 80162d0:	4618      	mov	r0, r3
 80162d2:	f000 fba9 	bl	8016a28 <hci_send_req>
 80162d6:	4603      	mov	r3, r0
 80162d8:	2b00      	cmp	r3, #0
 80162da:	da01      	bge.n	80162e0 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 80162dc:	23ff      	movs	r3, #255	; 0xff
 80162de:	e007      	b.n	80162f0 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 80162e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d002      	beq.n	80162ee <aci_gap_set_discoverable+0x1d4>
    return status;
 80162e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80162ec:	e000      	b.n	80162f0 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 80162ee:	2300      	movs	r3, #0
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3754      	adds	r7, #84	; 0x54
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd90      	pop	{r4, r7, pc}

080162f8 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b088      	sub	sp, #32
 80162fc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80162fe:	f107 0308 	add.w	r3, r7, #8
 8016302:	2218      	movs	r2, #24
 8016304:	2100      	movs	r1, #0
 8016306:	4618      	mov	r0, r3
 8016308:	f001 f83d 	bl	8017386 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 801630c:	233f      	movs	r3, #63	; 0x3f
 801630e:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8016310:	f240 1301 	movw	r3, #257	; 0x101
 8016314:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8016316:	1dfb      	adds	r3, r7, #7
 8016318:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801631a:	2301      	movs	r3, #1
 801631c:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 801631e:	f107 0308 	add.w	r3, r7, #8
 8016322:	2100      	movs	r1, #0
 8016324:	4618      	mov	r0, r3
 8016326:	f000 fb7f 	bl	8016a28 <hci_send_req>
 801632a:	4603      	mov	r3, r0
 801632c:	2b00      	cmp	r3, #0
 801632e:	da01      	bge.n	8016334 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8016330:	23ff      	movs	r3, #255	; 0xff
 8016332:	e000      	b.n	8016336 <aci_gatt_init+0x3e>

  return status;
 8016334:	79fb      	ldrb	r3, [r7, #7]
}
 8016336:	4618      	mov	r0, r3
 8016338:	3720      	adds	r7, #32
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}

0801633e <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 801633e:	b580      	push	{r7, lr}
 8016340:	b090      	sub	sp, #64	; 0x40
 8016342:	af00      	add	r7, sp, #0
 8016344:	6039      	str	r1, [r7, #0]
 8016346:	4611      	mov	r1, r2
 8016348:	461a      	mov	r2, r3
 801634a:	4603      	mov	r3, r0
 801634c:	71fb      	strb	r3, [r7, #7]
 801634e:	460b      	mov	r3, r1
 8016350:	71bb      	strb	r3, [r7, #6]
 8016352:	4613      	mov	r3, r2
 8016354:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8016356:	2300      	movs	r3, #0
 8016358:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 801635c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016360:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016364:	4413      	add	r3, r2
 8016366:	79fa      	ldrb	r2, [r7, #7]
 8016368:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 801636c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016370:	3301      	adds	r3, #1
 8016372:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8016376:	79fb      	ldrb	r3, [r7, #7]
 8016378:	2b01      	cmp	r3, #1
 801637a:	d103      	bne.n	8016384 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 801637c:	2302      	movs	r3, #2
 801637e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016382:	e002      	b.n	801638a <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8016384:	2310      	movs	r3, #16
 8016386:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 801638a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801638e:	f107 020c 	add.w	r2, r7, #12
 8016392:	4413      	add	r3, r2
 8016394:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8016398:	6839      	ldr	r1, [r7, #0]
 801639a:	4618      	mov	r0, r3
 801639c:	f000 ffe5 	bl	801736a <memcpy>
  indx +=  uuid_len;
 80163a0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80163a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80163a8:	4413      	add	r3, r2
 80163aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 80163ae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80163b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80163b6:	4413      	add	r3, r2
 80163b8:	79ba      	ldrb	r2, [r7, #6]
 80163ba:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80163be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80163c2:	3301      	adds	r3, #1
 80163c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 80163c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80163cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80163d0:	4413      	add	r3, r2
 80163d2:	797a      	ldrb	r2, [r7, #5]
 80163d4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80163d8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80163dc:	3301      	adds	r3, #1
 80163de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80163e2:	f107 0320 	add.w	r3, r7, #32
 80163e6:	2203      	movs	r2, #3
 80163e8:	2100      	movs	r1, #0
 80163ea:	4618      	mov	r0, r3
 80163ec:	f000 ffcb 	bl	8017386 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80163f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163f4:	2218      	movs	r2, #24
 80163f6:	2100      	movs	r1, #0
 80163f8:	4618      	mov	r0, r3
 80163fa:	f000 ffc4 	bl	8017386 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80163fe:	233f      	movs	r3, #63	; 0x3f
 8016400:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8016402:	f44f 7381 	mov.w	r3, #258	; 0x102
 8016406:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8016408:	f107 030c 	add.w	r3, r7, #12
 801640c:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 801640e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016412:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8016414:	f107 0320 	add.w	r3, r7, #32
 8016418:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 801641a:	2303      	movs	r3, #3
 801641c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 801641e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016422:	2100      	movs	r1, #0
 8016424:	4618      	mov	r0, r3
 8016426:	f000 faff 	bl	8016a28 <hci_send_req>
 801642a:	4603      	mov	r3, r0
 801642c:	2b00      	cmp	r3, #0
 801642e:	da01      	bge.n	8016434 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 8016430:	23ff      	movs	r3, #255	; 0xff
 8016432:	e00c      	b.n	801644e <aci_gatt_add_serv+0x110>

  if (resp.status) {
 8016434:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d002      	beq.n	8016442 <aci_gatt_add_serv+0x104>
    return resp.status;
 801643c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016440:	e005      	b.n	801644e <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 8016442:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8016446:	b29a      	uxth	r2, r3
 8016448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801644a:	801a      	strh	r2, [r3, #0]

  return 0;
 801644c:	2300      	movs	r3, #0
}
 801644e:	4618      	mov	r0, r3
 8016450:	3740      	adds	r7, #64	; 0x40
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}

08016456 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8016456:	b580      	push	{r7, lr}
 8016458:	b092      	sub	sp, #72	; 0x48
 801645a:	af00      	add	r7, sp, #0
 801645c:	603a      	str	r2, [r7, #0]
 801645e:	461a      	mov	r2, r3
 8016460:	4603      	mov	r3, r0
 8016462:	80fb      	strh	r3, [r7, #6]
 8016464:	460b      	mov	r3, r1
 8016466:	717b      	strb	r3, [r7, #5]
 8016468:	4613      	mov	r3, r2
 801646a:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 801646c:	2300      	movs	r3, #0
 801646e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8016472:	88fb      	ldrh	r3, [r7, #6]
 8016474:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8016476:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801647a:	f107 020c 	add.w	r2, r7, #12
 801647e:	4413      	add	r3, r2
 8016480:	88fa      	ldrh	r2, [r7, #6]
 8016482:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8016484:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016488:	3302      	adds	r3, #2
 801648a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 801648e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016492:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016496:	4413      	add	r3, r2
 8016498:	797a      	ldrb	r2, [r7, #5]
 801649a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 801649e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164a2:	3301      	adds	r3, #1
 80164a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 80164a8:	797b      	ldrb	r3, [r7, #5]
 80164aa:	2b01      	cmp	r3, #1
 80164ac:	d103      	bne.n	80164b6 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 80164ae:	2302      	movs	r3, #2
 80164b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80164b4:	e002      	b.n	80164bc <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 80164b6:	2310      	movs	r3, #16
 80164b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80164bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164c0:	f107 020c 	add.w	r2, r7, #12
 80164c4:	4413      	add	r3, r2
 80164c6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80164ca:	6839      	ldr	r1, [r7, #0]
 80164cc:	4618      	mov	r0, r3
 80164ce:	f000 ff4c 	bl	801736a <memcpy>
  indx +=  uuid_len;
 80164d2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80164d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80164da:	4413      	add	r3, r2
 80164dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 80164e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80164e8:	4413      	add	r3, r2
 80164ea:	793a      	ldrb	r2, [r7, #4]
 80164ec:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80164f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164f4:	3301      	adds	r3, #1
 80164f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 80164fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80164fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016502:	4413      	add	r3, r2
 8016504:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016508:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 801650c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016510:	3301      	adds	r3, #1
 8016512:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8016516:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801651a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801651e:	4413      	add	r3, r2
 8016520:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8016524:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8016528:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801652c:	3301      	adds	r3, #1
 801652e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8016532:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016536:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801653a:	4413      	add	r3, r2
 801653c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8016540:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8016544:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016548:	3301      	adds	r3, #1
 801654a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 801654e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016552:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016556:	4413      	add	r3, r2
 8016558:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801655c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8016560:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016564:	3301      	adds	r3, #1
 8016566:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 801656a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801656e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016572:	4413      	add	r3, r2
 8016574:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8016578:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 801657c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016580:	3301      	adds	r3, #1
 8016582:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8016586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801658a:	2203      	movs	r2, #3
 801658c:	2100      	movs	r1, #0
 801658e:	4618      	mov	r0, r3
 8016590:	f000 fef9 	bl	8017386 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8016594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016598:	2218      	movs	r2, #24
 801659a:	2100      	movs	r1, #0
 801659c:	4618      	mov	r0, r3
 801659e:	f000 fef2 	bl	8017386 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80165a2:	233f      	movs	r3, #63	; 0x3f
 80165a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80165a6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80165aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 80165ac:	f107 030c 	add.w	r3, r7, #12
 80165b0:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 80165b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80165b6:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 80165b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80165bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80165be:	2303      	movs	r3, #3
 80165c0:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 80165c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80165c6:	2100      	movs	r1, #0
 80165c8:	4618      	mov	r0, r3
 80165ca:	f000 fa2d 	bl	8016a28 <hci_send_req>
 80165ce:	4603      	mov	r3, r0
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	da01      	bge.n	80165d8 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 80165d4:	23ff      	movs	r3, #255	; 0xff
 80165d6:	e00c      	b.n	80165f2 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 80165d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d002      	beq.n	80165e6 <aci_gatt_add_char+0x190>
    return resp.status;
 80165e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80165e4:	e005      	b.n	80165f2 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 80165e6:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 80165ea:	b29a      	uxth	r2, r3
 80165ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80165ee:	801a      	strh	r2, [r3, #0]

  return 0;
 80165f0:	2300      	movs	r3, #0
}
 80165f2:	4618      	mov	r0, r3
 80165f4:	3748      	adds	r7, #72	; 0x48
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd80      	pop	{r7, pc}

080165fa <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80165fa:	b590      	push	{r4, r7, lr}
 80165fc:	b0ab      	sub	sp, #172	; 0xac
 80165fe:	af00      	add	r7, sp, #0
 8016600:	4604      	mov	r4, r0
 8016602:	4608      	mov	r0, r1
 8016604:	4611      	mov	r1, r2
 8016606:	461a      	mov	r2, r3
 8016608:	4623      	mov	r3, r4
 801660a:	80fb      	strh	r3, [r7, #6]
 801660c:	4603      	mov	r3, r0
 801660e:	80bb      	strh	r3, [r7, #4]
 8016610:	460b      	mov	r3, r1
 8016612:	70fb      	strb	r3, [r7, #3]
 8016614:	4613      	mov	r3, r2
 8016616:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8016618:	2300      	movs	r3, #0
 801661a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 801661e:	78bb      	ldrb	r3, [r7, #2]
 8016620:	2b7a      	cmp	r3, #122	; 0x7a
 8016622:	d901      	bls.n	8016628 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8016624:	2342      	movs	r3, #66	; 0x42
 8016626:	e076      	b.n	8016716 <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 8016628:	88fb      	ldrh	r3, [r7, #6]
 801662a:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 801662c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016630:	f107 0208 	add.w	r2, r7, #8
 8016634:	4413      	add	r3, r2
 8016636:	88fa      	ldrh	r2, [r7, #6]
 8016638:	801a      	strh	r2, [r3, #0]
  indx += 2;
 801663a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801663e:	3302      	adds	r3, #2
 8016640:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8016644:	88bb      	ldrh	r3, [r7, #4]
 8016646:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8016648:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801664c:	f107 0208 	add.w	r2, r7, #8
 8016650:	4413      	add	r3, r2
 8016652:	88ba      	ldrh	r2, [r7, #4]
 8016654:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8016656:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801665a:	3302      	adds	r3, #2
 801665c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8016660:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016664:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8016668:	4413      	add	r3, r2
 801666a:	78fa      	ldrb	r2, [r7, #3]
 801666c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8016670:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016674:	3301      	adds	r3, #1
 8016676:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 801667a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801667e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8016682:	4413      	add	r3, r2
 8016684:	78ba      	ldrb	r2, [r7, #2]
 8016686:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 801668a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801668e:	3301      	adds	r3, #1
 8016690:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8016694:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016698:	f107 0208 	add.w	r2, r7, #8
 801669c:	4413      	add	r3, r2
 801669e:	78ba      	ldrb	r2, [r7, #2]
 80166a0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80166a4:	4618      	mov	r0, r3
 80166a6:	f000 fe60 	bl	801736a <memcpy>
  indx +=  charValueLen;
 80166aa:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80166ae:	78bb      	ldrb	r3, [r7, #2]
 80166b0:	4413      	add	r3, r2
 80166b2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80166b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80166ba:	2218      	movs	r2, #24
 80166bc:	2100      	movs	r1, #0
 80166be:	4618      	mov	r0, r3
 80166c0:	f000 fe61 	bl	8017386 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80166c4:	233f      	movs	r3, #63	; 0x3f
 80166c6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80166ca:	f44f 7383 	mov.w	r3, #262	; 0x106
 80166ce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80166d2:	f107 0308 	add.w	r3, r7, #8
 80166d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 80166da:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80166de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 80166e2:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80166e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 80166ea:	2301      	movs	r3, #1
 80166ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80166f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80166f4:	2100      	movs	r1, #0
 80166f6:	4618      	mov	r0, r3
 80166f8:	f000 f996 	bl	8016a28 <hci_send_req>
 80166fc:	4603      	mov	r3, r0
 80166fe:	2b00      	cmp	r3, #0
 8016700:	da01      	bge.n	8016706 <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 8016702:	23ff      	movs	r3, #255	; 0xff
 8016704:	e007      	b.n	8016716 <aci_gatt_update_char_value+0x11c>

  if (status) {
 8016706:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801670a:	2b00      	cmp	r3, #0
 801670c:	d002      	beq.n	8016714 <aci_gatt_update_char_value+0x11a>
    return status;
 801670e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8016712:	e000      	b.n	8016716 <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 8016714:	2300      	movs	r3, #0
}
 8016716:	4618      	mov	r0, r3
 8016718:	37ac      	adds	r7, #172	; 0xac
 801671a:	46bd      	mov	sp, r7
 801671c:	bd90      	pop	{r4, r7, pc}

0801671e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 801671e:	b580      	push	{r7, lr}
 8016720:	b0aa      	sub	sp, #168	; 0xa8
 8016722:	af00      	add	r7, sp, #0
 8016724:	4603      	mov	r3, r0
 8016726:	603a      	str	r2, [r7, #0]
 8016728:	71fb      	strb	r3, [r7, #7]
 801672a:	460b      	mov	r3, r1
 801672c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 801672e:	2300      	movs	r3, #0
 8016730:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8016734:	79bb      	ldrb	r3, [r7, #6]
 8016736:	2b7e      	cmp	r3, #126	; 0x7e
 8016738:	d901      	bls.n	801673e <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 801673a:	2342      	movs	r3, #66	; 0x42
 801673c:	e052      	b.n	80167e4 <aci_hal_write_config_data+0xc6>

  buffer[indx] = offset;
 801673e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016742:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8016746:	4413      	add	r3, r2
 8016748:	79fa      	ldrb	r2, [r7, #7]
 801674a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 801674e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016752:	3301      	adds	r3, #1
 8016754:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8016758:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801675c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8016760:	4413      	add	r3, r2
 8016762:	79ba      	ldrb	r2, [r7, #6]
 8016764:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8016768:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801676c:	3301      	adds	r3, #1
 801676e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8016772:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8016776:	f107 0208 	add.w	r2, r7, #8
 801677a:	4413      	add	r3, r2
 801677c:	79ba      	ldrb	r2, [r7, #6]
 801677e:	6839      	ldr	r1, [r7, #0]
 8016780:	4618      	mov	r0, r3
 8016782:	f000 fdf2 	bl	801736a <memcpy>
  indx +=  len;
 8016786:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 801678a:	79bb      	ldrb	r3, [r7, #6]
 801678c:	4413      	add	r3, r2
 801678e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8016792:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016796:	2218      	movs	r2, #24
 8016798:	2100      	movs	r1, #0
 801679a:	4618      	mov	r0, r3
 801679c:	f000 fdf3 	bl	8017386 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80167a0:	233f      	movs	r3, #63	; 0x3f
 80167a2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80167a6:	230c      	movs	r3, #12
 80167a8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80167ac:	f107 0308 	add.w	r3, r7, #8
 80167b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 80167b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80167b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 80167bc:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80167c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 80167c4:	2301      	movs	r3, #1
 80167c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80167ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80167ce:	2100      	movs	r1, #0
 80167d0:	4618      	mov	r0, r3
 80167d2:	f000 f929 	bl	8016a28 <hci_send_req>
 80167d6:	4603      	mov	r3, r0
 80167d8:	2b00      	cmp	r3, #0
 80167da:	da01      	bge.n	80167e0 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80167dc:	23ff      	movs	r3, #255	; 0xff
 80167de:	e001      	b.n	80167e4 <aci_hal_write_config_data+0xc6>

  return status;
 80167e0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 80167e4:	4618      	mov	r0, r3
 80167e6:	37a8      	adds	r7, #168	; 0xa8
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}

080167ec <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b088      	sub	sp, #32
 80167f0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80167f2:	f107 0308 	add.w	r3, r7, #8
 80167f6:	2218      	movs	r2, #24
 80167f8:	2100      	movs	r1, #0
 80167fa:	4618      	mov	r0, r3
 80167fc:	f000 fdc3 	bl	8017386 <memset>
  rq.ogf = OGF_HOST_CTL;
 8016800:	2303      	movs	r3, #3
 8016802:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8016804:	2303      	movs	r3, #3
 8016806:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8016808:	1dfb      	adds	r3, r7, #7
 801680a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801680c:	2301      	movs	r3, #1
 801680e:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8016810:	f107 0308 	add.w	r3, r7, #8
 8016814:	2100      	movs	r1, #0
 8016816:	4618      	mov	r0, r3
 8016818:	f000 f906 	bl	8016a28 <hci_send_req>
 801681c:	4603      	mov	r3, r0
 801681e:	2b00      	cmp	r3, #0
 8016820:	da01      	bge.n	8016826 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8016822:	23ff      	movs	r3, #255	; 0xff
 8016824:	e000      	b.n	8016828 <hci_reset+0x3c>
  
  return status;  
 8016826:	79fb      	ldrb	r3, [r7, #7]
}
 8016828:	4618      	mov	r0, r3
 801682a:	3720      	adds	r7, #32
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}

08016830 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8016830:	b480      	push	{r7}
 8016832:	b085      	sub	sp, #20
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	3308      	adds	r3, #8
 801683c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	781b      	ldrb	r3, [r3, #0]
 8016842:	2b04      	cmp	r3, #4
 8016844:	d001      	beq.n	801684a <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8016846:	2301      	movs	r3, #1
 8016848:	e00c      	b.n	8016864 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	3302      	adds	r3, #2
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	461a      	mov	r2, r3
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8016858:	3b03      	subs	r3, #3
 801685a:	429a      	cmp	r2, r3
 801685c:	d001      	beq.n	8016862 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 801685e:	2302      	movs	r3, #2
 8016860:	e000      	b.n	8016864 <verify_packet+0x34>
  
  return 0;      
 8016862:	2300      	movs	r3, #0
}
 8016864:	4618      	mov	r0, r3
 8016866:	3714      	adds	r7, #20
 8016868:	46bd      	mov	sp, r7
 801686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686e:	4770      	bx	lr

08016870 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b0a6      	sub	sp, #152	; 0x98
 8016874:	af00      	add	r7, sp, #0
 8016876:	607b      	str	r3, [r7, #4]
 8016878:	4603      	mov	r3, r0
 801687a:	81fb      	strh	r3, [r7, #14]
 801687c:	460b      	mov	r3, r1
 801687e:	81bb      	strh	r3, [r7, #12]
 8016880:	4613      	mov	r3, r2
 8016882:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8016884:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801688c:	b21a      	sxth	r2, r3
 801688e:	89fb      	ldrh	r3, [r7, #14]
 8016890:	029b      	lsls	r3, r3, #10
 8016892:	b21b      	sxth	r3, r3
 8016894:	4313      	orrs	r3, r2
 8016896:	b21b      	sxth	r3, r3
 8016898:	b29b      	uxth	r3, r3
 801689a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 801689c:	7afb      	ldrb	r3, [r7, #11]
 801689e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80168a0:	2301      	movs	r3, #1
 80168a2:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80168a4:	f107 0318 	add.w	r3, r7, #24
 80168a8:	3301      	adds	r3, #1
 80168aa:	461a      	mov	r2, r3
 80168ac:	f107 0314 	add.w	r3, r7, #20
 80168b0:	8819      	ldrh	r1, [r3, #0]
 80168b2:	789b      	ldrb	r3, [r3, #2]
 80168b4:	8011      	strh	r1, [r2, #0]
 80168b6:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80168b8:	f107 0318 	add.w	r3, r7, #24
 80168bc:	3304      	adds	r3, #4
 80168be:	7afa      	ldrb	r2, [r7, #11]
 80168c0:	6879      	ldr	r1, [r7, #4]
 80168c2:	4618      	mov	r0, r3
 80168c4:	f000 fd51 	bl	801736a <memcpy>
  
  if (hciContext.io.Send)
 80168c8:	4b08      	ldr	r3, [pc, #32]	; (80168ec <send_cmd+0x7c>)
 80168ca:	691b      	ldr	r3, [r3, #16]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d009      	beq.n	80168e4 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80168d0:	4b06      	ldr	r3, [pc, #24]	; (80168ec <send_cmd+0x7c>)
 80168d2:	691b      	ldr	r3, [r3, #16]
 80168d4:	7afa      	ldrb	r2, [r7, #11]
 80168d6:	b292      	uxth	r2, r2
 80168d8:	3204      	adds	r2, #4
 80168da:	b291      	uxth	r1, r2
 80168dc:	f107 0218 	add.w	r2, r7, #24
 80168e0:	4610      	mov	r0, r2
 80168e2:	4798      	blx	r3
  }
}
 80168e4:	bf00      	nop
 80168e6:	3798      	adds	r7, #152	; 0x98
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}
 80168ec:	20000470 	.word	0x20000470

080168f0 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b084      	sub	sp, #16
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
 80168f8:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80168fa:	e00a      	b.n	8016912 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80168fc:	f107 030c 	add.w	r3, r7, #12
 8016900:	4619      	mov	r1, r3
 8016902:	6838      	ldr	r0, [r7, #0]
 8016904:	f000 faea 	bl	8016edc <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	4619      	mov	r1, r3
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f000 fa51 	bl	8016db4 <list_insert_head>
  while (!list_is_empty(src_list))
 8016912:	6838      	ldr	r0, [r7, #0]
 8016914:	f000 fa2c 	bl	8016d70 <list_is_empty>
 8016918:	4603      	mov	r3, r0
 801691a:	2b00      	cmp	r3, #0
 801691c:	d0ee      	beq.n	80168fc <move_list+0xc>
  }
}
 801691e:	bf00      	nop
 8016920:	bf00      	nop
 8016922:	3710      	adds	r7, #16
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}

08016928 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b082      	sub	sp, #8
 801692c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 801692e:	e009      	b.n	8016944 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8016930:	1d3b      	adds	r3, r7, #4
 8016932:	4619      	mov	r1, r3
 8016934:	4809      	ldr	r0, [pc, #36]	; (801695c <free_event_list+0x34>)
 8016936:	f000 faaa 	bl	8016e8e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	4619      	mov	r1, r3
 801693e:	4808      	ldr	r0, [pc, #32]	; (8016960 <free_event_list+0x38>)
 8016940:	f000 fa5e 	bl	8016e00 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8016944:	4806      	ldr	r0, [pc, #24]	; (8016960 <free_event_list+0x38>)
 8016946:	f000 faf0 	bl	8016f2a <list_get_size>
 801694a:	4603      	mov	r3, r0
 801694c:	2b01      	cmp	r3, #1
 801694e:	ddef      	ble.n	8016930 <free_event_list+0x8>
  }
}
 8016950:	bf00      	nop
 8016952:	bf00      	nop
 8016954:	3708      	adds	r7, #8
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}
 801695a:	bf00      	nop
 801695c:	20000614 	.word	0x20000614
 8016960:	2000060c 	.word	0x2000060c

08016964 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b084      	sub	sp, #16
 8016968:	af00      	add	r7, sp, #0
 801696a:	6078      	str	r0, [r7, #4]
 801696c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d002      	beq.n	801697a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8016974:	4a18      	ldr	r2, [pc, #96]	; (80169d8 <hci_init+0x74>)
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 801697a:	4818      	ldr	r0, [pc, #96]	; (80169dc <hci_init+0x78>)
 801697c:	f000 f9e8 	bl	8016d50 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8016980:	4817      	ldr	r0, [pc, #92]	; (80169e0 <hci_init+0x7c>)
 8016982:	f000 f9e5 	bl	8016d50 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8016986:	f7fa fa6f 	bl	8010e68 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 801698a:	2300      	movs	r3, #0
 801698c:	73fb      	strb	r3, [r7, #15]
 801698e:	e00c      	b.n	80169aa <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8016990:	7bfb      	ldrb	r3, [r7, #15]
 8016992:	228c      	movs	r2, #140	; 0x8c
 8016994:	fb02 f303 	mul.w	r3, r2, r3
 8016998:	4a12      	ldr	r2, [pc, #72]	; (80169e4 <hci_init+0x80>)
 801699a:	4413      	add	r3, r2
 801699c:	4619      	mov	r1, r3
 801699e:	480f      	ldr	r0, [pc, #60]	; (80169dc <hci_init+0x78>)
 80169a0:	f000 fa2e 	bl	8016e00 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80169a4:	7bfb      	ldrb	r3, [r7, #15]
 80169a6:	3301      	adds	r3, #1
 80169a8:	73fb      	strb	r3, [r7, #15]
 80169aa:	7bfb      	ldrb	r3, [r7, #15]
 80169ac:	2b04      	cmp	r3, #4
 80169ae:	d9ef      	bls.n	8016990 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80169b0:	4b09      	ldr	r3, [pc, #36]	; (80169d8 <hci_init+0x74>)
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d003      	beq.n	80169c0 <hci_init+0x5c>
 80169b8:	4b07      	ldr	r3, [pc, #28]	; (80169d8 <hci_init+0x74>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	2000      	movs	r0, #0
 80169be:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80169c0:	4b05      	ldr	r3, [pc, #20]	; (80169d8 <hci_init+0x74>)
 80169c2:	689b      	ldr	r3, [r3, #8]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d002      	beq.n	80169ce <hci_init+0x6a>
 80169c8:	4b03      	ldr	r3, [pc, #12]	; (80169d8 <hci_init+0x74>)
 80169ca:	689b      	ldr	r3, [r3, #8]
 80169cc:	4798      	blx	r3
}
 80169ce:	bf00      	nop
 80169d0:	3710      	adds	r7, #16
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	bf00      	nop
 80169d8:	20000470 	.word	0x20000470
 80169dc:	2000060c 	.word	0x2000060c
 80169e0:	20000614 	.word	0x20000614
 80169e4:	200001b4 	.word	0x200001b4

080169e8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80169e8:	b480      	push	{r7}
 80169ea:	b083      	sub	sp, #12
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	4a0b      	ldr	r2, [pc, #44]	; (8016a24 <hci_register_io_bus+0x3c>)
 80169f6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	68db      	ldr	r3, [r3, #12]
 80169fc:	4a09      	ldr	r2, [pc, #36]	; (8016a24 <hci_register_io_bus+0x3c>)
 80169fe:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	691b      	ldr	r3, [r3, #16]
 8016a04:	4a07      	ldr	r2, [pc, #28]	; (8016a24 <hci_register_io_bus+0x3c>)
 8016a06:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	699b      	ldr	r3, [r3, #24]
 8016a0c:	4a05      	ldr	r2, [pc, #20]	; (8016a24 <hci_register_io_bus+0x3c>)
 8016a0e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	689b      	ldr	r3, [r3, #8]
 8016a14:	4a03      	ldr	r2, [pc, #12]	; (8016a24 <hci_register_io_bus+0x3c>)
 8016a16:	6093      	str	r3, [r2, #8]
}
 8016a18:	bf00      	nop
 8016a1a:	370c      	adds	r7, #12
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a22:	4770      	bx	lr
 8016a24:	20000470 	.word	0x20000470

08016a28 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b08e      	sub	sp, #56	; 0x38
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
 8016a30:	460b      	mov	r3, r1
 8016a32:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	885b      	ldrh	r3, [r3, #2]
 8016a38:	b21b      	sxth	r3, r3
 8016a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016a3e:	b21a      	sxth	r2, r3
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	881b      	ldrh	r3, [r3, #0]
 8016a44:	029b      	lsls	r3, r3, #10
 8016a46:	b21b      	sxth	r3, r3
 8016a48:	4313      	orrs	r3, r2
 8016a4a:	b21b      	sxth	r3, r3
 8016a4c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8016a52:	f107 0308 	add.w	r3, r7, #8
 8016a56:	4618      	mov	r0, r3
 8016a58:	f000 f97a 	bl	8016d50 <list_init_head>

  free_event_list();
 8016a5c:	f7ff ff64 	bl	8016928 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	8818      	ldrh	r0, [r3, #0]
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	8859      	ldrh	r1, [r3, #2]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	68db      	ldr	r3, [r3, #12]
 8016a6c:	b2da      	uxtb	r2, r3
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	689b      	ldr	r3, [r3, #8]
 8016a72:	f7ff fefd 	bl	8016870 <send_cmd>
  
  if (async)
 8016a76:	78fb      	ldrb	r3, [r7, #3]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d001      	beq.n	8016a80 <hci_send_req+0x58>
  {
    return 0;
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	e0e5      	b.n	8016c4c <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8016a80:	f7fb f93a 	bl	8011cf8 <HAL_GetTick>
 8016a84:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8016a86:	f7fb f937 	bl	8011cf8 <HAL_GetTick>
 8016a8a:	4602      	mov	r2, r0
 8016a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a8e:	1ad3      	subs	r3, r2, r3
 8016a90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016a94:	f200 80b6 	bhi.w	8016c04 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8016a98:	486e      	ldr	r0, [pc, #440]	; (8016c54 <hci_send_req+0x22c>)
 8016a9a:	f000 f969 	bl	8016d70 <list_is_empty>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d000      	beq.n	8016aa6 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8016aa4:	e7ef      	b.n	8016a86 <hci_send_req+0x5e>
      {
        break;
 8016aa6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8016aa8:	f107 0310 	add.w	r3, r7, #16
 8016aac:	4619      	mov	r1, r3
 8016aae:	4869      	ldr	r0, [pc, #420]	; (8016c54 <hci_send_req+0x22c>)
 8016ab0:	f000 f9ed 	bl	8016e8e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	3308      	adds	r3, #8
 8016ab8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8016aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	2b04      	cmp	r3, #4
 8016ac0:	d17b      	bne.n	8016bba <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8016ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac4:	3301      	adds	r3, #1
 8016ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8016ac8:	693b      	ldr	r3, [r7, #16]
 8016aca:	3308      	adds	r3, #8
 8016acc:	3303      	adds	r3, #3
 8016ace:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8016ad0:	693b      	ldr	r3, [r7, #16]
 8016ad2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8016ad6:	3b03      	subs	r3, #3
 8016ad8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8016ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016adc:	781b      	ldrb	r3, [r3, #0]
 8016ade:	2b3e      	cmp	r3, #62	; 0x3e
 8016ae0:	d04d      	beq.n	8016b7e <hci_send_req+0x156>
 8016ae2:	2b3e      	cmp	r3, #62	; 0x3e
 8016ae4:	dc6b      	bgt.n	8016bbe <hci_send_req+0x196>
 8016ae6:	2b10      	cmp	r3, #16
 8016ae8:	f000 808e 	beq.w	8016c08 <hci_send_req+0x1e0>
 8016aec:	2b10      	cmp	r3, #16
 8016aee:	dc66      	bgt.n	8016bbe <hci_send_req+0x196>
 8016af0:	2b0e      	cmp	r3, #14
 8016af2:	d024      	beq.n	8016b3e <hci_send_req+0x116>
 8016af4:	2b0f      	cmp	r3, #15
 8016af6:	d162      	bne.n	8016bbe <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8016af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016afa:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8016afc:	69bb      	ldr	r3, [r7, #24]
 8016afe:	885b      	ldrh	r3, [r3, #2]
 8016b00:	b29b      	uxth	r3, r3
 8016b02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016b04:	429a      	cmp	r2, r3
 8016b06:	f040 8081 	bne.w	8016c0c <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	2b0f      	cmp	r3, #15
 8016b10:	d004      	beq.n	8016b1c <hci_send_req+0xf4>
          if (cs->status) {
 8016b12:	69bb      	ldr	r3, [r7, #24]
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d053      	beq.n	8016bc2 <hci_send_req+0x19a>
            goto failed;
 8016b1a:	e07a      	b.n	8016c12 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	695a      	ldr	r2, [r3, #20]
 8016b20:	6a3b      	ldr	r3, [r7, #32]
 8016b22:	429a      	cmp	r2, r3
 8016b24:	bf28      	it	cs
 8016b26:	461a      	movcs	r2, r3
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	6918      	ldr	r0, [r3, #16]
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	695b      	ldr	r3, [r3, #20]
 8016b34:	461a      	mov	r2, r3
 8016b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b38:	f000 fc17 	bl	801736a <memcpy>
        goto done;
 8016b3c:	e07a      	b.n	8016c34 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8016b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b40:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8016b42:	697b      	ldr	r3, [r7, #20]
 8016b44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8016b48:	b29b      	uxth	r3, r3
 8016b4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016b4c:	429a      	cmp	r2, r3
 8016b4e:	d15f      	bne.n	8016c10 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8016b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b52:	3303      	adds	r3, #3
 8016b54:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8016b56:	6a3b      	ldr	r3, [r7, #32]
 8016b58:	3b03      	subs	r3, #3
 8016b5a:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	695a      	ldr	r2, [r3, #20]
 8016b60:	6a3b      	ldr	r3, [r7, #32]
 8016b62:	429a      	cmp	r2, r3
 8016b64:	bf28      	it	cs
 8016b66:	461a      	movcs	r2, r3
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	6918      	ldr	r0, [r3, #16]
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	695b      	ldr	r3, [r3, #20]
 8016b74:	461a      	mov	r2, r3
 8016b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b78:	f000 fbf7 	bl	801736a <memcpy>
        goto done;
 8016b7c:	e05a      	b.n	8016c34 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8016b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b80:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8016b82:	69fb      	ldr	r3, [r7, #28]
 8016b84:	781b      	ldrb	r3, [r3, #0]
 8016b86:	461a      	mov	r2, r3
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	d11a      	bne.n	8016bc6 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8016b90:	6a3b      	ldr	r3, [r7, #32]
 8016b92:	3b01      	subs	r3, #1
 8016b94:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	695a      	ldr	r2, [r3, #20]
 8016b9a:	6a3b      	ldr	r3, [r7, #32]
 8016b9c:	429a      	cmp	r2, r3
 8016b9e:	bf28      	it	cs
 8016ba0:	461a      	movcs	r2, r3
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	6918      	ldr	r0, [r3, #16]
 8016baa:	69fb      	ldr	r3, [r7, #28]
 8016bac:	1c59      	adds	r1, r3, #1
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	695b      	ldr	r3, [r3, #20]
 8016bb2:	461a      	mov	r2, r3
 8016bb4:	f000 fbd9 	bl	801736a <memcpy>
        goto done;
 8016bb8:	e03c      	b.n	8016c34 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8016bba:	bf00      	nop
 8016bbc:	e004      	b.n	8016bc8 <hci_send_req+0x1a0>
        break;
 8016bbe:	bf00      	nop
 8016bc0:	e002      	b.n	8016bc8 <hci_send_req+0x1a0>
          break;
 8016bc2:	bf00      	nop
 8016bc4:	e000      	b.n	8016bc8 <hci_send_req+0x1a0>
          break;
 8016bc6:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8016bc8:	4823      	ldr	r0, [pc, #140]	; (8016c58 <hci_send_req+0x230>)
 8016bca:	f000 f8d1 	bl	8016d70 <list_is_empty>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d00d      	beq.n	8016bf0 <hci_send_req+0x1c8>
 8016bd4:	481f      	ldr	r0, [pc, #124]	; (8016c54 <hci_send_req+0x22c>)
 8016bd6:	f000 f8cb 	bl	8016d70 <list_is_empty>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d007      	beq.n	8016bf0 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8016be0:	693b      	ldr	r3, [r7, #16]
 8016be2:	4619      	mov	r1, r3
 8016be4:	481c      	ldr	r0, [pc, #112]	; (8016c58 <hci_send_req+0x230>)
 8016be6:	f000 f90b 	bl	8016e00 <list_insert_tail>
      hciReadPacket=NULL;
 8016bea:	2300      	movs	r3, #0
 8016bec:	613b      	str	r3, [r7, #16]
 8016bee:	e008      	b.n	8016c02 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8016bf0:	693a      	ldr	r2, [r7, #16]
 8016bf2:	f107 0308 	add.w	r3, r7, #8
 8016bf6:	4611      	mov	r1, r2
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f000 f901 	bl	8016e00 <list_insert_tail>
      hciReadPacket=NULL;
 8016bfe:	2300      	movs	r3, #0
 8016c00:	613b      	str	r3, [r7, #16]
  {
 8016c02:	e73d      	b.n	8016a80 <hci_send_req+0x58>
        goto failed;
 8016c04:	bf00      	nop
 8016c06:	e004      	b.n	8016c12 <hci_send_req+0x1ea>
        goto failed;
 8016c08:	bf00      	nop
 8016c0a:	e002      	b.n	8016c12 <hci_send_req+0x1ea>
          goto failed;
 8016c0c:	bf00      	nop
 8016c0e:	e000      	b.n	8016c12 <hci_send_req+0x1ea>
          goto failed;
 8016c10:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8016c12:	693b      	ldr	r3, [r7, #16]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d004      	beq.n	8016c22 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8016c18:	693b      	ldr	r3, [r7, #16]
 8016c1a:	4619      	mov	r1, r3
 8016c1c:	480e      	ldr	r0, [pc, #56]	; (8016c58 <hci_send_req+0x230>)
 8016c1e:	f000 f8c9 	bl	8016db4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8016c22:	f107 0308 	add.w	r3, r7, #8
 8016c26:	4619      	mov	r1, r3
 8016c28:	480a      	ldr	r0, [pc, #40]	; (8016c54 <hci_send_req+0x22c>)
 8016c2a:	f7ff fe61 	bl	80168f0 <move_list>

  return -1;
 8016c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c32:	e00b      	b.n	8016c4c <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8016c34:	693b      	ldr	r3, [r7, #16]
 8016c36:	4619      	mov	r1, r3
 8016c38:	4807      	ldr	r0, [pc, #28]	; (8016c58 <hci_send_req+0x230>)
 8016c3a:	f000 f8bb 	bl	8016db4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8016c3e:	f107 0308 	add.w	r3, r7, #8
 8016c42:	4619      	mov	r1, r3
 8016c44:	4803      	ldr	r0, [pc, #12]	; (8016c54 <hci_send_req+0x22c>)
 8016c46:	f7ff fe53 	bl	80168f0 <move_list>

  return 0;
 8016c4a:	2300      	movs	r3, #0
}
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	3738      	adds	r7, #56	; 0x38
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}
 8016c54:	20000614 	.word	0x20000614
 8016c58:	2000060c 	.word	0x2000060c

08016c5c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b082      	sub	sp, #8
 8016c60:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8016c62:	2300      	movs	r3, #0
 8016c64:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8016c66:	e013      	b.n	8016c90 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8016c68:	1d3b      	adds	r3, r7, #4
 8016c6a:	4619      	mov	r1, r3
 8016c6c:	480e      	ldr	r0, [pc, #56]	; (8016ca8 <hci_user_evt_proc+0x4c>)
 8016c6e:	f000 f90e 	bl	8016e8e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8016c72:	4b0e      	ldr	r3, [pc, #56]	; (8016cac <hci_user_evt_proc+0x50>)
 8016c74:	69db      	ldr	r3, [r3, #28]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d005      	beq.n	8016c86 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8016c7a:	4b0c      	ldr	r3, [pc, #48]	; (8016cac <hci_user_evt_proc+0x50>)
 8016c7c:	69db      	ldr	r3, [r3, #28]
 8016c7e:	687a      	ldr	r2, [r7, #4]
 8016c80:	3208      	adds	r2, #8
 8016c82:	4610      	mov	r0, r2
 8016c84:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	4619      	mov	r1, r3
 8016c8a:	4809      	ldr	r0, [pc, #36]	; (8016cb0 <hci_user_evt_proc+0x54>)
 8016c8c:	f000 f8b8 	bl	8016e00 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8016c90:	4805      	ldr	r0, [pc, #20]	; (8016ca8 <hci_user_evt_proc+0x4c>)
 8016c92:	f000 f86d 	bl	8016d70 <list_is_empty>
 8016c96:	4603      	mov	r3, r0
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d0e5      	beq.n	8016c68 <hci_user_evt_proc+0xc>
  }
}
 8016c9c:	bf00      	nop
 8016c9e:	bf00      	nop
 8016ca0:	3708      	adds	r7, #8
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}
 8016ca6:	bf00      	nop
 8016ca8:	20000614 	.word	0x20000614
 8016cac:	20000470 	.word	0x20000470
 8016cb0:	2000060c 	.word	0x2000060c

08016cb4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b086      	sub	sp, #24
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]

  tHciDataPacket * hciReadPacket = NULL;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8016cc4:	481f      	ldr	r0, [pc, #124]	; (8016d44 <hci_notify_asynch_evt+0x90>)
 8016cc6:	f000 f853 	bl	8016d70 <list_is_empty>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d132      	bne.n	8016d36 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8016cd0:	f107 030c 	add.w	r3, r7, #12
 8016cd4:	4619      	mov	r1, r3
 8016cd6:	481b      	ldr	r0, [pc, #108]	; (8016d44 <hci_notify_asynch_evt+0x90>)
 8016cd8:	f000 f8d9 	bl	8016e8e <list_remove_head>
    
    if (hciContext.io.Receive)
 8016cdc:	4b1a      	ldr	r3, [pc, #104]	; (8016d48 <hci_notify_asynch_evt+0x94>)
 8016cde:	68db      	ldr	r3, [r3, #12]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d02a      	beq.n	8016d3a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8016ce4:	4b18      	ldr	r3, [pc, #96]	; (8016d48 <hci_notify_asynch_evt+0x94>)
 8016ce6:	68db      	ldr	r3, [r3, #12]
 8016ce8:	68fa      	ldr	r2, [r7, #12]
 8016cea:	3208      	adds	r2, #8
 8016cec:	2180      	movs	r1, #128	; 0x80
 8016cee:	4610      	mov	r0, r2
 8016cf0:	4798      	blx	r3
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8016cf6:	7cfb      	ldrb	r3, [r7, #19]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d016      	beq.n	8016d2a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	7cfa      	ldrb	r2, [r7, #19]
 8016d00:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	4618      	mov	r0, r3
 8016d08:	f7ff fd92 	bl	8016830 <verify_packet>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d105      	bne.n	8016d1e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	4619      	mov	r1, r3
 8016d16:	480d      	ldr	r0, [pc, #52]	; (8016d4c <hci_notify_asynch_evt+0x98>)
 8016d18:	f000 f872 	bl	8016e00 <list_insert_tail>
 8016d1c:	e00d      	b.n	8016d3a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	4619      	mov	r1, r3
 8016d22:	4808      	ldr	r0, [pc, #32]	; (8016d44 <hci_notify_asynch_evt+0x90>)
 8016d24:	f000 f846 	bl	8016db4 <list_insert_head>
 8016d28:	e007      	b.n	8016d3a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	4619      	mov	r1, r3
 8016d2e:	4805      	ldr	r0, [pc, #20]	; (8016d44 <hci_notify_asynch_evt+0x90>)
 8016d30:	f000 f840 	bl	8016db4 <list_insert_head>
 8016d34:	e001      	b.n	8016d3a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8016d36:	2301      	movs	r3, #1
 8016d38:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8016d3a:	697b      	ldr	r3, [r7, #20]

}
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	3718      	adds	r7, #24
 8016d40:	46bd      	mov	sp, r7
 8016d42:	bd80      	pop	{r7, pc}
 8016d44:	2000060c 	.word	0x2000060c
 8016d48:	20000470 	.word	0x20000470
 8016d4c:	20000614 	.word	0x20000614

08016d50 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8016d50:	b480      	push	{r7}
 8016d52:	b083      	sub	sp, #12
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	687a      	ldr	r2, [r7, #4]
 8016d5c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	687a      	ldr	r2, [r7, #4]
 8016d62:	605a      	str	r2, [r3, #4]
}
 8016d64:	bf00      	nop
 8016d66:	370c      	adds	r7, #12
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6e:	4770      	bx	lr

08016d70 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8016d70:	b480      	push	{r7}
 8016d72:	b087      	sub	sp, #28
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d78:	f3ef 8310 	mrs	r3, PRIMASK
 8016d7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8016d7e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016d80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016d82:	b672      	cpsid	i
}
 8016d84:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	687a      	ldr	r2, [r7, #4]
 8016d8c:	429a      	cmp	r2, r3
 8016d8e:	d102      	bne.n	8016d96 <list_is_empty+0x26>
  {
    return_value = 1;
 8016d90:	2301      	movs	r3, #1
 8016d92:	75fb      	strb	r3, [r7, #23]
 8016d94:	e001      	b.n	8016d9a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8016d96:	2300      	movs	r3, #0
 8016d98:	75fb      	strb	r3, [r7, #23]
 8016d9a:	693b      	ldr	r3, [r7, #16]
 8016d9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d9e:	68bb      	ldr	r3, [r7, #8]
 8016da0:	f383 8810 	msr	PRIMASK, r3
}
 8016da4:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8016da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016da8:	4618      	mov	r0, r3
 8016daa:	371c      	adds	r7, #28
 8016dac:	46bd      	mov	sp, r7
 8016dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db2:	4770      	bx	lr

08016db4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8016db4:	b480      	push	{r7}
 8016db6:	b087      	sub	sp, #28
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
 8016dbc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8016dc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8016dc4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016dc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016dc8:	b672      	cpsid	i
}
 8016dca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	681a      	ldr	r2, [r3, #0]
 8016dd0:	683b      	ldr	r3, [r7, #0]
 8016dd2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	687a      	ldr	r2, [r7, #4]
 8016dd8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	683a      	ldr	r2, [r7, #0]
 8016dde:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	683a      	ldr	r2, [r7, #0]
 8016de6:	605a      	str	r2, [r3, #4]
 8016de8:	697b      	ldr	r3, [r7, #20]
 8016dea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016dec:	693b      	ldr	r3, [r7, #16]
 8016dee:	f383 8810 	msr	PRIMASK, r3
}
 8016df2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016df4:	bf00      	nop
 8016df6:	371c      	adds	r7, #28
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfe:	4770      	bx	lr

08016e00 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8016e00:	b480      	push	{r7}
 8016e02:	b087      	sub	sp, #28
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
 8016e08:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8016e0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e10:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016e12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016e14:	b672      	cpsid	i
}
 8016e16:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	687a      	ldr	r2, [r7, #4]
 8016e1c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	685a      	ldr	r2, [r3, #4]
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	683a      	ldr	r2, [r7, #0]
 8016e2a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016e2c:	683b      	ldr	r3, [r7, #0]
 8016e2e:	685b      	ldr	r3, [r3, #4]
 8016e30:	683a      	ldr	r2, [r7, #0]
 8016e32:	601a      	str	r2, [r3, #0]
 8016e34:	697b      	ldr	r3, [r7, #20]
 8016e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e38:	693b      	ldr	r3, [r7, #16]
 8016e3a:	f383 8810 	msr	PRIMASK, r3
}
 8016e3e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016e40:	bf00      	nop
 8016e42:	371c      	adds	r7, #28
 8016e44:	46bd      	mov	sp, r7
 8016e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4a:	4770      	bx	lr

08016e4c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8016e4c:	b480      	push	{r7}
 8016e4e:	b087      	sub	sp, #28
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e54:	f3ef 8310 	mrs	r3, PRIMASK
 8016e58:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016e5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016e5e:	b672      	cpsid	i
}
 8016e60:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	687a      	ldr	r2, [r7, #4]
 8016e68:	6812      	ldr	r2, [r2, #0]
 8016e6a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	687a      	ldr	r2, [r7, #4]
 8016e72:	6852      	ldr	r2, [r2, #4]
 8016e74:	605a      	str	r2, [r3, #4]
 8016e76:	697b      	ldr	r3, [r7, #20]
 8016e78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e7a:	693b      	ldr	r3, [r7, #16]
 8016e7c:	f383 8810 	msr	PRIMASK, r3
}
 8016e80:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016e82:	bf00      	nop
 8016e84:	371c      	adds	r7, #28
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr

08016e8e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8016e8e:	b580      	push	{r7, lr}
 8016e90:	b086      	sub	sp, #24
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
 8016e96:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e98:	f3ef 8310 	mrs	r3, PRIMASK
 8016e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e9e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ea2:	b672      	cpsid	i
}
 8016ea4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	681a      	ldr	r2, [r3, #0]
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7ff ffca 	bl	8016e4c <list_remove_node>
  (*node)->next = NULL;
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	605a      	str	r2, [r3, #4]
 8016ec8:	697b      	ldr	r3, [r7, #20]
 8016eca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ecc:	693b      	ldr	r3, [r7, #16]
 8016ece:	f383 8810 	msr	PRIMASK, r3
}
 8016ed2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016ed4:	bf00      	nop
 8016ed6:	3718      	adds	r7, #24
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}

08016edc <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b086      	sub	sp, #24
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
 8016ee4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8016eea:	60fb      	str	r3, [r7, #12]
  return(result);
 8016eec:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016eee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ef0:	b672      	cpsid	i
}
 8016ef2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	685a      	ldr	r2, [r3, #4]
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	685b      	ldr	r3, [r3, #4]
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7ff ffa3 	bl	8016e4c <list_remove_node>
  (*node)->next = NULL;
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	2200      	movs	r2, #0
 8016f14:	605a      	str	r2, [r3, #4]
 8016f16:	697b      	ldr	r3, [r7, #20]
 8016f18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f1a:	693b      	ldr	r3, [r7, #16]
 8016f1c:	f383 8810 	msr	PRIMASK, r3
}
 8016f20:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8016f22:	bf00      	nop
 8016f24:	3718      	adds	r7, #24
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd80      	pop	{r7, pc}

08016f2a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8016f2a:	b480      	push	{r7}
 8016f2c:	b089      	sub	sp, #36	; 0x24
 8016f2e:	af00      	add	r7, sp, #0
 8016f30:	6078      	str	r0, [r7, #4]
  int size = 0;
 8016f32:	2300      	movs	r3, #0
 8016f34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f36:	f3ef 8310 	mrs	r3, PRIMASK
 8016f3a:	613b      	str	r3, [r7, #16]
  return(result);
 8016f3c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f40:	b672      	cpsid	i
}
 8016f42:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8016f4a:	e005      	b.n	8016f58 <list_get_size+0x2e>
  {
    size++;
 8016f4c:	69fb      	ldr	r3, [r7, #28]
 8016f4e:	3301      	adds	r3, #1
 8016f50:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8016f52:	69bb      	ldr	r3, [r7, #24]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8016f58:	69ba      	ldr	r2, [r7, #24]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	d1f5      	bne.n	8016f4c <list_get_size+0x22>
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	f383 8810 	msr	PRIMASK, r3
}
 8016f6a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8016f6c:	69fb      	ldr	r3, [r7, #28]
}
 8016f6e:	4618      	mov	r0, r3
 8016f70:	3724      	adds	r7, #36	; 0x24
 8016f72:	46bd      	mov	sp, r7
 8016f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f78:	4770      	bx	lr
	...

08016f7c <__errno>:
 8016f7c:	4b01      	ldr	r3, [pc, #4]	; (8016f84 <__errno+0x8>)
 8016f7e:	6818      	ldr	r0, [r3, #0]
 8016f80:	4770      	bx	lr
 8016f82:	bf00      	nop
 8016f84:	2000001c 	.word	0x2000001c

08016f88 <__sflush_r>:
 8016f88:	898a      	ldrh	r2, [r1, #12]
 8016f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f8e:	4605      	mov	r5, r0
 8016f90:	0710      	lsls	r0, r2, #28
 8016f92:	460c      	mov	r4, r1
 8016f94:	d458      	bmi.n	8017048 <__sflush_r+0xc0>
 8016f96:	684b      	ldr	r3, [r1, #4]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	dc05      	bgt.n	8016fa8 <__sflush_r+0x20>
 8016f9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	dc02      	bgt.n	8016fa8 <__sflush_r+0x20>
 8016fa2:	2000      	movs	r0, #0
 8016fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016faa:	2e00      	cmp	r6, #0
 8016fac:	d0f9      	beq.n	8016fa2 <__sflush_r+0x1a>
 8016fae:	2300      	movs	r3, #0
 8016fb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016fb4:	682f      	ldr	r7, [r5, #0]
 8016fb6:	602b      	str	r3, [r5, #0]
 8016fb8:	d032      	beq.n	8017020 <__sflush_r+0x98>
 8016fba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016fbc:	89a3      	ldrh	r3, [r4, #12]
 8016fbe:	075a      	lsls	r2, r3, #29
 8016fc0:	d505      	bpl.n	8016fce <__sflush_r+0x46>
 8016fc2:	6863      	ldr	r3, [r4, #4]
 8016fc4:	1ac0      	subs	r0, r0, r3
 8016fc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016fc8:	b10b      	cbz	r3, 8016fce <__sflush_r+0x46>
 8016fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016fcc:	1ac0      	subs	r0, r0, r3
 8016fce:	2300      	movs	r3, #0
 8016fd0:	4602      	mov	r2, r0
 8016fd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016fd4:	6a21      	ldr	r1, [r4, #32]
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	47b0      	blx	r6
 8016fda:	1c43      	adds	r3, r0, #1
 8016fdc:	89a3      	ldrh	r3, [r4, #12]
 8016fde:	d106      	bne.n	8016fee <__sflush_r+0x66>
 8016fe0:	6829      	ldr	r1, [r5, #0]
 8016fe2:	291d      	cmp	r1, #29
 8016fe4:	d82c      	bhi.n	8017040 <__sflush_r+0xb8>
 8016fe6:	4a2a      	ldr	r2, [pc, #168]	; (8017090 <__sflush_r+0x108>)
 8016fe8:	40ca      	lsrs	r2, r1
 8016fea:	07d6      	lsls	r6, r2, #31
 8016fec:	d528      	bpl.n	8017040 <__sflush_r+0xb8>
 8016fee:	2200      	movs	r2, #0
 8016ff0:	6062      	str	r2, [r4, #4]
 8016ff2:	04d9      	lsls	r1, r3, #19
 8016ff4:	6922      	ldr	r2, [r4, #16]
 8016ff6:	6022      	str	r2, [r4, #0]
 8016ff8:	d504      	bpl.n	8017004 <__sflush_r+0x7c>
 8016ffa:	1c42      	adds	r2, r0, #1
 8016ffc:	d101      	bne.n	8017002 <__sflush_r+0x7a>
 8016ffe:	682b      	ldr	r3, [r5, #0]
 8017000:	b903      	cbnz	r3, 8017004 <__sflush_r+0x7c>
 8017002:	6560      	str	r0, [r4, #84]	; 0x54
 8017004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017006:	602f      	str	r7, [r5, #0]
 8017008:	2900      	cmp	r1, #0
 801700a:	d0ca      	beq.n	8016fa2 <__sflush_r+0x1a>
 801700c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017010:	4299      	cmp	r1, r3
 8017012:	d002      	beq.n	801701a <__sflush_r+0x92>
 8017014:	4628      	mov	r0, r5
 8017016:	f000 f9bf 	bl	8017398 <_free_r>
 801701a:	2000      	movs	r0, #0
 801701c:	6360      	str	r0, [r4, #52]	; 0x34
 801701e:	e7c1      	b.n	8016fa4 <__sflush_r+0x1c>
 8017020:	6a21      	ldr	r1, [r4, #32]
 8017022:	2301      	movs	r3, #1
 8017024:	4628      	mov	r0, r5
 8017026:	47b0      	blx	r6
 8017028:	1c41      	adds	r1, r0, #1
 801702a:	d1c7      	bne.n	8016fbc <__sflush_r+0x34>
 801702c:	682b      	ldr	r3, [r5, #0]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d0c4      	beq.n	8016fbc <__sflush_r+0x34>
 8017032:	2b1d      	cmp	r3, #29
 8017034:	d001      	beq.n	801703a <__sflush_r+0xb2>
 8017036:	2b16      	cmp	r3, #22
 8017038:	d101      	bne.n	801703e <__sflush_r+0xb6>
 801703a:	602f      	str	r7, [r5, #0]
 801703c:	e7b1      	b.n	8016fa2 <__sflush_r+0x1a>
 801703e:	89a3      	ldrh	r3, [r4, #12]
 8017040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017044:	81a3      	strh	r3, [r4, #12]
 8017046:	e7ad      	b.n	8016fa4 <__sflush_r+0x1c>
 8017048:	690f      	ldr	r7, [r1, #16]
 801704a:	2f00      	cmp	r7, #0
 801704c:	d0a9      	beq.n	8016fa2 <__sflush_r+0x1a>
 801704e:	0793      	lsls	r3, r2, #30
 8017050:	680e      	ldr	r6, [r1, #0]
 8017052:	bf08      	it	eq
 8017054:	694b      	ldreq	r3, [r1, #20]
 8017056:	600f      	str	r7, [r1, #0]
 8017058:	bf18      	it	ne
 801705a:	2300      	movne	r3, #0
 801705c:	eba6 0807 	sub.w	r8, r6, r7
 8017060:	608b      	str	r3, [r1, #8]
 8017062:	f1b8 0f00 	cmp.w	r8, #0
 8017066:	dd9c      	ble.n	8016fa2 <__sflush_r+0x1a>
 8017068:	6a21      	ldr	r1, [r4, #32]
 801706a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801706c:	4643      	mov	r3, r8
 801706e:	463a      	mov	r2, r7
 8017070:	4628      	mov	r0, r5
 8017072:	47b0      	blx	r6
 8017074:	2800      	cmp	r0, #0
 8017076:	dc06      	bgt.n	8017086 <__sflush_r+0xfe>
 8017078:	89a3      	ldrh	r3, [r4, #12]
 801707a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801707e:	81a3      	strh	r3, [r4, #12]
 8017080:	f04f 30ff 	mov.w	r0, #4294967295
 8017084:	e78e      	b.n	8016fa4 <__sflush_r+0x1c>
 8017086:	4407      	add	r7, r0
 8017088:	eba8 0800 	sub.w	r8, r8, r0
 801708c:	e7e9      	b.n	8017062 <__sflush_r+0xda>
 801708e:	bf00      	nop
 8017090:	20400001 	.word	0x20400001

08017094 <_fflush_r>:
 8017094:	b538      	push	{r3, r4, r5, lr}
 8017096:	690b      	ldr	r3, [r1, #16]
 8017098:	4605      	mov	r5, r0
 801709a:	460c      	mov	r4, r1
 801709c:	b913      	cbnz	r3, 80170a4 <_fflush_r+0x10>
 801709e:	2500      	movs	r5, #0
 80170a0:	4628      	mov	r0, r5
 80170a2:	bd38      	pop	{r3, r4, r5, pc}
 80170a4:	b118      	cbz	r0, 80170ae <_fflush_r+0x1a>
 80170a6:	6983      	ldr	r3, [r0, #24]
 80170a8:	b90b      	cbnz	r3, 80170ae <_fflush_r+0x1a>
 80170aa:	f000 f899 	bl	80171e0 <__sinit>
 80170ae:	4b14      	ldr	r3, [pc, #80]	; (8017100 <_fflush_r+0x6c>)
 80170b0:	429c      	cmp	r4, r3
 80170b2:	d11b      	bne.n	80170ec <_fflush_r+0x58>
 80170b4:	686c      	ldr	r4, [r5, #4]
 80170b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d0ef      	beq.n	801709e <_fflush_r+0xa>
 80170be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80170c0:	07d0      	lsls	r0, r2, #31
 80170c2:	d404      	bmi.n	80170ce <_fflush_r+0x3a>
 80170c4:	0599      	lsls	r1, r3, #22
 80170c6:	d402      	bmi.n	80170ce <_fflush_r+0x3a>
 80170c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170ca:	f000 f94c 	bl	8017366 <__retarget_lock_acquire_recursive>
 80170ce:	4628      	mov	r0, r5
 80170d0:	4621      	mov	r1, r4
 80170d2:	f7ff ff59 	bl	8016f88 <__sflush_r>
 80170d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80170d8:	07da      	lsls	r2, r3, #31
 80170da:	4605      	mov	r5, r0
 80170dc:	d4e0      	bmi.n	80170a0 <_fflush_r+0xc>
 80170de:	89a3      	ldrh	r3, [r4, #12]
 80170e0:	059b      	lsls	r3, r3, #22
 80170e2:	d4dd      	bmi.n	80170a0 <_fflush_r+0xc>
 80170e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170e6:	f000 f93f 	bl	8017368 <__retarget_lock_release_recursive>
 80170ea:	e7d9      	b.n	80170a0 <_fflush_r+0xc>
 80170ec:	4b05      	ldr	r3, [pc, #20]	; (8017104 <_fflush_r+0x70>)
 80170ee:	429c      	cmp	r4, r3
 80170f0:	d101      	bne.n	80170f6 <_fflush_r+0x62>
 80170f2:	68ac      	ldr	r4, [r5, #8]
 80170f4:	e7df      	b.n	80170b6 <_fflush_r+0x22>
 80170f6:	4b04      	ldr	r3, [pc, #16]	; (8017108 <_fflush_r+0x74>)
 80170f8:	429c      	cmp	r4, r3
 80170fa:	bf08      	it	eq
 80170fc:	68ec      	ldreq	r4, [r5, #12]
 80170fe:	e7da      	b.n	80170b6 <_fflush_r+0x22>
 8017100:	08018260 	.word	0x08018260
 8017104:	08018280 	.word	0x08018280
 8017108:	08018240 	.word	0x08018240

0801710c <fflush>:
 801710c:	4601      	mov	r1, r0
 801710e:	b920      	cbnz	r0, 801711a <fflush+0xe>
 8017110:	4b04      	ldr	r3, [pc, #16]	; (8017124 <fflush+0x18>)
 8017112:	4905      	ldr	r1, [pc, #20]	; (8017128 <fflush+0x1c>)
 8017114:	6818      	ldr	r0, [r3, #0]
 8017116:	f000 b8e1 	b.w	80172dc <_fwalk_reent>
 801711a:	4b04      	ldr	r3, [pc, #16]	; (801712c <fflush+0x20>)
 801711c:	6818      	ldr	r0, [r3, #0]
 801711e:	f7ff bfb9 	b.w	8017094 <_fflush_r>
 8017122:	bf00      	nop
 8017124:	080182a0 	.word	0x080182a0
 8017128:	08017095 	.word	0x08017095
 801712c:	2000001c 	.word	0x2000001c

08017130 <std>:
 8017130:	2300      	movs	r3, #0
 8017132:	b510      	push	{r4, lr}
 8017134:	4604      	mov	r4, r0
 8017136:	e9c0 3300 	strd	r3, r3, [r0]
 801713a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801713e:	6083      	str	r3, [r0, #8]
 8017140:	8181      	strh	r1, [r0, #12]
 8017142:	6643      	str	r3, [r0, #100]	; 0x64
 8017144:	81c2      	strh	r2, [r0, #14]
 8017146:	6183      	str	r3, [r0, #24]
 8017148:	4619      	mov	r1, r3
 801714a:	2208      	movs	r2, #8
 801714c:	305c      	adds	r0, #92	; 0x5c
 801714e:	f000 f91a 	bl	8017386 <memset>
 8017152:	4b05      	ldr	r3, [pc, #20]	; (8017168 <std+0x38>)
 8017154:	6263      	str	r3, [r4, #36]	; 0x24
 8017156:	4b05      	ldr	r3, [pc, #20]	; (801716c <std+0x3c>)
 8017158:	62a3      	str	r3, [r4, #40]	; 0x28
 801715a:	4b05      	ldr	r3, [pc, #20]	; (8017170 <std+0x40>)
 801715c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801715e:	4b05      	ldr	r3, [pc, #20]	; (8017174 <std+0x44>)
 8017160:	6224      	str	r4, [r4, #32]
 8017162:	6323      	str	r3, [r4, #48]	; 0x30
 8017164:	bd10      	pop	{r4, pc}
 8017166:	bf00      	nop
 8017168:	08017655 	.word	0x08017655
 801716c:	08017677 	.word	0x08017677
 8017170:	080176af 	.word	0x080176af
 8017174:	080176d3 	.word	0x080176d3

08017178 <_cleanup_r>:
 8017178:	4901      	ldr	r1, [pc, #4]	; (8017180 <_cleanup_r+0x8>)
 801717a:	f000 b8af 	b.w	80172dc <_fwalk_reent>
 801717e:	bf00      	nop
 8017180:	08017095 	.word	0x08017095

08017184 <__sfmoreglue>:
 8017184:	b570      	push	{r4, r5, r6, lr}
 8017186:	1e4a      	subs	r2, r1, #1
 8017188:	2568      	movs	r5, #104	; 0x68
 801718a:	4355      	muls	r5, r2
 801718c:	460e      	mov	r6, r1
 801718e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017192:	f000 f951 	bl	8017438 <_malloc_r>
 8017196:	4604      	mov	r4, r0
 8017198:	b140      	cbz	r0, 80171ac <__sfmoreglue+0x28>
 801719a:	2100      	movs	r1, #0
 801719c:	e9c0 1600 	strd	r1, r6, [r0]
 80171a0:	300c      	adds	r0, #12
 80171a2:	60a0      	str	r0, [r4, #8]
 80171a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80171a8:	f000 f8ed 	bl	8017386 <memset>
 80171ac:	4620      	mov	r0, r4
 80171ae:	bd70      	pop	{r4, r5, r6, pc}

080171b0 <__sfp_lock_acquire>:
 80171b0:	4801      	ldr	r0, [pc, #4]	; (80171b8 <__sfp_lock_acquire+0x8>)
 80171b2:	f000 b8d8 	b.w	8017366 <__retarget_lock_acquire_recursive>
 80171b6:	bf00      	nop
 80171b8:	20000624 	.word	0x20000624

080171bc <__sfp_lock_release>:
 80171bc:	4801      	ldr	r0, [pc, #4]	; (80171c4 <__sfp_lock_release+0x8>)
 80171be:	f000 b8d3 	b.w	8017368 <__retarget_lock_release_recursive>
 80171c2:	bf00      	nop
 80171c4:	20000624 	.word	0x20000624

080171c8 <__sinit_lock_acquire>:
 80171c8:	4801      	ldr	r0, [pc, #4]	; (80171d0 <__sinit_lock_acquire+0x8>)
 80171ca:	f000 b8cc 	b.w	8017366 <__retarget_lock_acquire_recursive>
 80171ce:	bf00      	nop
 80171d0:	2000061f 	.word	0x2000061f

080171d4 <__sinit_lock_release>:
 80171d4:	4801      	ldr	r0, [pc, #4]	; (80171dc <__sinit_lock_release+0x8>)
 80171d6:	f000 b8c7 	b.w	8017368 <__retarget_lock_release_recursive>
 80171da:	bf00      	nop
 80171dc:	2000061f 	.word	0x2000061f

080171e0 <__sinit>:
 80171e0:	b510      	push	{r4, lr}
 80171e2:	4604      	mov	r4, r0
 80171e4:	f7ff fff0 	bl	80171c8 <__sinit_lock_acquire>
 80171e8:	69a3      	ldr	r3, [r4, #24]
 80171ea:	b11b      	cbz	r3, 80171f4 <__sinit+0x14>
 80171ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171f0:	f7ff bff0 	b.w	80171d4 <__sinit_lock_release>
 80171f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80171f8:	6523      	str	r3, [r4, #80]	; 0x50
 80171fa:	4b13      	ldr	r3, [pc, #76]	; (8017248 <__sinit+0x68>)
 80171fc:	4a13      	ldr	r2, [pc, #76]	; (801724c <__sinit+0x6c>)
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	62a2      	str	r2, [r4, #40]	; 0x28
 8017202:	42a3      	cmp	r3, r4
 8017204:	bf04      	itt	eq
 8017206:	2301      	moveq	r3, #1
 8017208:	61a3      	streq	r3, [r4, #24]
 801720a:	4620      	mov	r0, r4
 801720c:	f000 f820 	bl	8017250 <__sfp>
 8017210:	6060      	str	r0, [r4, #4]
 8017212:	4620      	mov	r0, r4
 8017214:	f000 f81c 	bl	8017250 <__sfp>
 8017218:	60a0      	str	r0, [r4, #8]
 801721a:	4620      	mov	r0, r4
 801721c:	f000 f818 	bl	8017250 <__sfp>
 8017220:	2200      	movs	r2, #0
 8017222:	60e0      	str	r0, [r4, #12]
 8017224:	2104      	movs	r1, #4
 8017226:	6860      	ldr	r0, [r4, #4]
 8017228:	f7ff ff82 	bl	8017130 <std>
 801722c:	68a0      	ldr	r0, [r4, #8]
 801722e:	2201      	movs	r2, #1
 8017230:	2109      	movs	r1, #9
 8017232:	f7ff ff7d 	bl	8017130 <std>
 8017236:	68e0      	ldr	r0, [r4, #12]
 8017238:	2202      	movs	r2, #2
 801723a:	2112      	movs	r1, #18
 801723c:	f7ff ff78 	bl	8017130 <std>
 8017240:	2301      	movs	r3, #1
 8017242:	61a3      	str	r3, [r4, #24]
 8017244:	e7d2      	b.n	80171ec <__sinit+0xc>
 8017246:	bf00      	nop
 8017248:	080182a0 	.word	0x080182a0
 801724c:	08017179 	.word	0x08017179

08017250 <__sfp>:
 8017250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017252:	4607      	mov	r7, r0
 8017254:	f7ff ffac 	bl	80171b0 <__sfp_lock_acquire>
 8017258:	4b1e      	ldr	r3, [pc, #120]	; (80172d4 <__sfp+0x84>)
 801725a:	681e      	ldr	r6, [r3, #0]
 801725c:	69b3      	ldr	r3, [r6, #24]
 801725e:	b913      	cbnz	r3, 8017266 <__sfp+0x16>
 8017260:	4630      	mov	r0, r6
 8017262:	f7ff ffbd 	bl	80171e0 <__sinit>
 8017266:	3648      	adds	r6, #72	; 0x48
 8017268:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801726c:	3b01      	subs	r3, #1
 801726e:	d503      	bpl.n	8017278 <__sfp+0x28>
 8017270:	6833      	ldr	r3, [r6, #0]
 8017272:	b30b      	cbz	r3, 80172b8 <__sfp+0x68>
 8017274:	6836      	ldr	r6, [r6, #0]
 8017276:	e7f7      	b.n	8017268 <__sfp+0x18>
 8017278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801727c:	b9d5      	cbnz	r5, 80172b4 <__sfp+0x64>
 801727e:	4b16      	ldr	r3, [pc, #88]	; (80172d8 <__sfp+0x88>)
 8017280:	60e3      	str	r3, [r4, #12]
 8017282:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017286:	6665      	str	r5, [r4, #100]	; 0x64
 8017288:	f000 f86c 	bl	8017364 <__retarget_lock_init_recursive>
 801728c:	f7ff ff96 	bl	80171bc <__sfp_lock_release>
 8017290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017294:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017298:	6025      	str	r5, [r4, #0]
 801729a:	61a5      	str	r5, [r4, #24]
 801729c:	2208      	movs	r2, #8
 801729e:	4629      	mov	r1, r5
 80172a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80172a4:	f000 f86f 	bl	8017386 <memset>
 80172a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80172ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80172b0:	4620      	mov	r0, r4
 80172b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172b4:	3468      	adds	r4, #104	; 0x68
 80172b6:	e7d9      	b.n	801726c <__sfp+0x1c>
 80172b8:	2104      	movs	r1, #4
 80172ba:	4638      	mov	r0, r7
 80172bc:	f7ff ff62 	bl	8017184 <__sfmoreglue>
 80172c0:	4604      	mov	r4, r0
 80172c2:	6030      	str	r0, [r6, #0]
 80172c4:	2800      	cmp	r0, #0
 80172c6:	d1d5      	bne.n	8017274 <__sfp+0x24>
 80172c8:	f7ff ff78 	bl	80171bc <__sfp_lock_release>
 80172cc:	230c      	movs	r3, #12
 80172ce:	603b      	str	r3, [r7, #0]
 80172d0:	e7ee      	b.n	80172b0 <__sfp+0x60>
 80172d2:	bf00      	nop
 80172d4:	080182a0 	.word	0x080182a0
 80172d8:	ffff0001 	.word	0xffff0001

080172dc <_fwalk_reent>:
 80172dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172e0:	4606      	mov	r6, r0
 80172e2:	4688      	mov	r8, r1
 80172e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80172e8:	2700      	movs	r7, #0
 80172ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80172ee:	f1b9 0901 	subs.w	r9, r9, #1
 80172f2:	d505      	bpl.n	8017300 <_fwalk_reent+0x24>
 80172f4:	6824      	ldr	r4, [r4, #0]
 80172f6:	2c00      	cmp	r4, #0
 80172f8:	d1f7      	bne.n	80172ea <_fwalk_reent+0xe>
 80172fa:	4638      	mov	r0, r7
 80172fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017300:	89ab      	ldrh	r3, [r5, #12]
 8017302:	2b01      	cmp	r3, #1
 8017304:	d907      	bls.n	8017316 <_fwalk_reent+0x3a>
 8017306:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801730a:	3301      	adds	r3, #1
 801730c:	d003      	beq.n	8017316 <_fwalk_reent+0x3a>
 801730e:	4629      	mov	r1, r5
 8017310:	4630      	mov	r0, r6
 8017312:	47c0      	blx	r8
 8017314:	4307      	orrs	r7, r0
 8017316:	3568      	adds	r5, #104	; 0x68
 8017318:	e7e9      	b.n	80172ee <_fwalk_reent+0x12>
	...

0801731c <__libc_init_array>:
 801731c:	b570      	push	{r4, r5, r6, lr}
 801731e:	4d0d      	ldr	r5, [pc, #52]	; (8017354 <__libc_init_array+0x38>)
 8017320:	4c0d      	ldr	r4, [pc, #52]	; (8017358 <__libc_init_array+0x3c>)
 8017322:	1b64      	subs	r4, r4, r5
 8017324:	10a4      	asrs	r4, r4, #2
 8017326:	2600      	movs	r6, #0
 8017328:	42a6      	cmp	r6, r4
 801732a:	d109      	bne.n	8017340 <__libc_init_array+0x24>
 801732c:	4d0b      	ldr	r5, [pc, #44]	; (801735c <__libc_init_array+0x40>)
 801732e:	4c0c      	ldr	r4, [pc, #48]	; (8017360 <__libc_init_array+0x44>)
 8017330:	f000 fea2 	bl	8018078 <_init>
 8017334:	1b64      	subs	r4, r4, r5
 8017336:	10a4      	asrs	r4, r4, #2
 8017338:	2600      	movs	r6, #0
 801733a:	42a6      	cmp	r6, r4
 801733c:	d105      	bne.n	801734a <__libc_init_array+0x2e>
 801733e:	bd70      	pop	{r4, r5, r6, pc}
 8017340:	f855 3b04 	ldr.w	r3, [r5], #4
 8017344:	4798      	blx	r3
 8017346:	3601      	adds	r6, #1
 8017348:	e7ee      	b.n	8017328 <__libc_init_array+0xc>
 801734a:	f855 3b04 	ldr.w	r3, [r5], #4
 801734e:	4798      	blx	r3
 8017350:	3601      	adds	r6, #1
 8017352:	e7f2      	b.n	801733a <__libc_init_array+0x1e>
 8017354:	080182e0 	.word	0x080182e0
 8017358:	080182e0 	.word	0x080182e0
 801735c:	080182e0 	.word	0x080182e0
 8017360:	080182e4 	.word	0x080182e4

08017364 <__retarget_lock_init_recursive>:
 8017364:	4770      	bx	lr

08017366 <__retarget_lock_acquire_recursive>:
 8017366:	4770      	bx	lr

08017368 <__retarget_lock_release_recursive>:
 8017368:	4770      	bx	lr

0801736a <memcpy>:
 801736a:	440a      	add	r2, r1
 801736c:	4291      	cmp	r1, r2
 801736e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017372:	d100      	bne.n	8017376 <memcpy+0xc>
 8017374:	4770      	bx	lr
 8017376:	b510      	push	{r4, lr}
 8017378:	f811 4b01 	ldrb.w	r4, [r1], #1
 801737c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017380:	4291      	cmp	r1, r2
 8017382:	d1f9      	bne.n	8017378 <memcpy+0xe>
 8017384:	bd10      	pop	{r4, pc}

08017386 <memset>:
 8017386:	4402      	add	r2, r0
 8017388:	4603      	mov	r3, r0
 801738a:	4293      	cmp	r3, r2
 801738c:	d100      	bne.n	8017390 <memset+0xa>
 801738e:	4770      	bx	lr
 8017390:	f803 1b01 	strb.w	r1, [r3], #1
 8017394:	e7f9      	b.n	801738a <memset+0x4>
	...

08017398 <_free_r>:
 8017398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801739a:	2900      	cmp	r1, #0
 801739c:	d048      	beq.n	8017430 <_free_r+0x98>
 801739e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80173a2:	9001      	str	r0, [sp, #4]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	f1a1 0404 	sub.w	r4, r1, #4
 80173aa:	bfb8      	it	lt
 80173ac:	18e4      	addlt	r4, r4, r3
 80173ae:	f000 faed 	bl	801798c <__malloc_lock>
 80173b2:	4a20      	ldr	r2, [pc, #128]	; (8017434 <_free_r+0x9c>)
 80173b4:	9801      	ldr	r0, [sp, #4]
 80173b6:	6813      	ldr	r3, [r2, #0]
 80173b8:	4615      	mov	r5, r2
 80173ba:	b933      	cbnz	r3, 80173ca <_free_r+0x32>
 80173bc:	6063      	str	r3, [r4, #4]
 80173be:	6014      	str	r4, [r2, #0]
 80173c0:	b003      	add	sp, #12
 80173c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173c6:	f000 bae7 	b.w	8017998 <__malloc_unlock>
 80173ca:	42a3      	cmp	r3, r4
 80173cc:	d90b      	bls.n	80173e6 <_free_r+0x4e>
 80173ce:	6821      	ldr	r1, [r4, #0]
 80173d0:	1862      	adds	r2, r4, r1
 80173d2:	4293      	cmp	r3, r2
 80173d4:	bf04      	itt	eq
 80173d6:	681a      	ldreq	r2, [r3, #0]
 80173d8:	685b      	ldreq	r3, [r3, #4]
 80173da:	6063      	str	r3, [r4, #4]
 80173dc:	bf04      	itt	eq
 80173de:	1852      	addeq	r2, r2, r1
 80173e0:	6022      	streq	r2, [r4, #0]
 80173e2:	602c      	str	r4, [r5, #0]
 80173e4:	e7ec      	b.n	80173c0 <_free_r+0x28>
 80173e6:	461a      	mov	r2, r3
 80173e8:	685b      	ldr	r3, [r3, #4]
 80173ea:	b10b      	cbz	r3, 80173f0 <_free_r+0x58>
 80173ec:	42a3      	cmp	r3, r4
 80173ee:	d9fa      	bls.n	80173e6 <_free_r+0x4e>
 80173f0:	6811      	ldr	r1, [r2, #0]
 80173f2:	1855      	adds	r5, r2, r1
 80173f4:	42a5      	cmp	r5, r4
 80173f6:	d10b      	bne.n	8017410 <_free_r+0x78>
 80173f8:	6824      	ldr	r4, [r4, #0]
 80173fa:	4421      	add	r1, r4
 80173fc:	1854      	adds	r4, r2, r1
 80173fe:	42a3      	cmp	r3, r4
 8017400:	6011      	str	r1, [r2, #0]
 8017402:	d1dd      	bne.n	80173c0 <_free_r+0x28>
 8017404:	681c      	ldr	r4, [r3, #0]
 8017406:	685b      	ldr	r3, [r3, #4]
 8017408:	6053      	str	r3, [r2, #4]
 801740a:	4421      	add	r1, r4
 801740c:	6011      	str	r1, [r2, #0]
 801740e:	e7d7      	b.n	80173c0 <_free_r+0x28>
 8017410:	d902      	bls.n	8017418 <_free_r+0x80>
 8017412:	230c      	movs	r3, #12
 8017414:	6003      	str	r3, [r0, #0]
 8017416:	e7d3      	b.n	80173c0 <_free_r+0x28>
 8017418:	6825      	ldr	r5, [r4, #0]
 801741a:	1961      	adds	r1, r4, r5
 801741c:	428b      	cmp	r3, r1
 801741e:	bf04      	itt	eq
 8017420:	6819      	ldreq	r1, [r3, #0]
 8017422:	685b      	ldreq	r3, [r3, #4]
 8017424:	6063      	str	r3, [r4, #4]
 8017426:	bf04      	itt	eq
 8017428:	1949      	addeq	r1, r1, r5
 801742a:	6021      	streq	r1, [r4, #0]
 801742c:	6054      	str	r4, [r2, #4]
 801742e:	e7c7      	b.n	80173c0 <_free_r+0x28>
 8017430:	b003      	add	sp, #12
 8017432:	bd30      	pop	{r4, r5, pc}
 8017434:	20000490 	.word	0x20000490

08017438 <_malloc_r>:
 8017438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801743a:	1ccd      	adds	r5, r1, #3
 801743c:	f025 0503 	bic.w	r5, r5, #3
 8017440:	3508      	adds	r5, #8
 8017442:	2d0c      	cmp	r5, #12
 8017444:	bf38      	it	cc
 8017446:	250c      	movcc	r5, #12
 8017448:	2d00      	cmp	r5, #0
 801744a:	4606      	mov	r6, r0
 801744c:	db01      	blt.n	8017452 <_malloc_r+0x1a>
 801744e:	42a9      	cmp	r1, r5
 8017450:	d903      	bls.n	801745a <_malloc_r+0x22>
 8017452:	230c      	movs	r3, #12
 8017454:	6033      	str	r3, [r6, #0]
 8017456:	2000      	movs	r0, #0
 8017458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801745a:	f000 fa97 	bl	801798c <__malloc_lock>
 801745e:	4921      	ldr	r1, [pc, #132]	; (80174e4 <_malloc_r+0xac>)
 8017460:	680a      	ldr	r2, [r1, #0]
 8017462:	4614      	mov	r4, r2
 8017464:	b99c      	cbnz	r4, 801748e <_malloc_r+0x56>
 8017466:	4f20      	ldr	r7, [pc, #128]	; (80174e8 <_malloc_r+0xb0>)
 8017468:	683b      	ldr	r3, [r7, #0]
 801746a:	b923      	cbnz	r3, 8017476 <_malloc_r+0x3e>
 801746c:	4621      	mov	r1, r4
 801746e:	4630      	mov	r0, r6
 8017470:	f000 f8e0 	bl	8017634 <_sbrk_r>
 8017474:	6038      	str	r0, [r7, #0]
 8017476:	4629      	mov	r1, r5
 8017478:	4630      	mov	r0, r6
 801747a:	f000 f8db 	bl	8017634 <_sbrk_r>
 801747e:	1c43      	adds	r3, r0, #1
 8017480:	d123      	bne.n	80174ca <_malloc_r+0x92>
 8017482:	230c      	movs	r3, #12
 8017484:	6033      	str	r3, [r6, #0]
 8017486:	4630      	mov	r0, r6
 8017488:	f000 fa86 	bl	8017998 <__malloc_unlock>
 801748c:	e7e3      	b.n	8017456 <_malloc_r+0x1e>
 801748e:	6823      	ldr	r3, [r4, #0]
 8017490:	1b5b      	subs	r3, r3, r5
 8017492:	d417      	bmi.n	80174c4 <_malloc_r+0x8c>
 8017494:	2b0b      	cmp	r3, #11
 8017496:	d903      	bls.n	80174a0 <_malloc_r+0x68>
 8017498:	6023      	str	r3, [r4, #0]
 801749a:	441c      	add	r4, r3
 801749c:	6025      	str	r5, [r4, #0]
 801749e:	e004      	b.n	80174aa <_malloc_r+0x72>
 80174a0:	6863      	ldr	r3, [r4, #4]
 80174a2:	42a2      	cmp	r2, r4
 80174a4:	bf0c      	ite	eq
 80174a6:	600b      	streq	r3, [r1, #0]
 80174a8:	6053      	strne	r3, [r2, #4]
 80174aa:	4630      	mov	r0, r6
 80174ac:	f000 fa74 	bl	8017998 <__malloc_unlock>
 80174b0:	f104 000b 	add.w	r0, r4, #11
 80174b4:	1d23      	adds	r3, r4, #4
 80174b6:	f020 0007 	bic.w	r0, r0, #7
 80174ba:	1ac2      	subs	r2, r0, r3
 80174bc:	d0cc      	beq.n	8017458 <_malloc_r+0x20>
 80174be:	1a1b      	subs	r3, r3, r0
 80174c0:	50a3      	str	r3, [r4, r2]
 80174c2:	e7c9      	b.n	8017458 <_malloc_r+0x20>
 80174c4:	4622      	mov	r2, r4
 80174c6:	6864      	ldr	r4, [r4, #4]
 80174c8:	e7cc      	b.n	8017464 <_malloc_r+0x2c>
 80174ca:	1cc4      	adds	r4, r0, #3
 80174cc:	f024 0403 	bic.w	r4, r4, #3
 80174d0:	42a0      	cmp	r0, r4
 80174d2:	d0e3      	beq.n	801749c <_malloc_r+0x64>
 80174d4:	1a21      	subs	r1, r4, r0
 80174d6:	4630      	mov	r0, r6
 80174d8:	f000 f8ac 	bl	8017634 <_sbrk_r>
 80174dc:	3001      	adds	r0, #1
 80174de:	d1dd      	bne.n	801749c <_malloc_r+0x64>
 80174e0:	e7cf      	b.n	8017482 <_malloc_r+0x4a>
 80174e2:	bf00      	nop
 80174e4:	20000490 	.word	0x20000490
 80174e8:	20000494 	.word	0x20000494

080174ec <iprintf>:
 80174ec:	b40f      	push	{r0, r1, r2, r3}
 80174ee:	4b0a      	ldr	r3, [pc, #40]	; (8017518 <iprintf+0x2c>)
 80174f0:	b513      	push	{r0, r1, r4, lr}
 80174f2:	681c      	ldr	r4, [r3, #0]
 80174f4:	b124      	cbz	r4, 8017500 <iprintf+0x14>
 80174f6:	69a3      	ldr	r3, [r4, #24]
 80174f8:	b913      	cbnz	r3, 8017500 <iprintf+0x14>
 80174fa:	4620      	mov	r0, r4
 80174fc:	f7ff fe70 	bl	80171e0 <__sinit>
 8017500:	ab05      	add	r3, sp, #20
 8017502:	9a04      	ldr	r2, [sp, #16]
 8017504:	68a1      	ldr	r1, [r4, #8]
 8017506:	9301      	str	r3, [sp, #4]
 8017508:	4620      	mov	r0, r4
 801750a:	f000 fa75 	bl	80179f8 <_vfiprintf_r>
 801750e:	b002      	add	sp, #8
 8017510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017514:	b004      	add	sp, #16
 8017516:	4770      	bx	lr
 8017518:	2000001c 	.word	0x2000001c

0801751c <putchar>:
 801751c:	4b09      	ldr	r3, [pc, #36]	; (8017544 <putchar+0x28>)
 801751e:	b513      	push	{r0, r1, r4, lr}
 8017520:	681c      	ldr	r4, [r3, #0]
 8017522:	4601      	mov	r1, r0
 8017524:	b134      	cbz	r4, 8017534 <putchar+0x18>
 8017526:	69a3      	ldr	r3, [r4, #24]
 8017528:	b923      	cbnz	r3, 8017534 <putchar+0x18>
 801752a:	9001      	str	r0, [sp, #4]
 801752c:	4620      	mov	r0, r4
 801752e:	f7ff fe57 	bl	80171e0 <__sinit>
 8017532:	9901      	ldr	r1, [sp, #4]
 8017534:	68a2      	ldr	r2, [r4, #8]
 8017536:	4620      	mov	r0, r4
 8017538:	b002      	add	sp, #8
 801753a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801753e:	f000 bd1f 	b.w	8017f80 <_putc_r>
 8017542:	bf00      	nop
 8017544:	2000001c 	.word	0x2000001c

08017548 <_puts_r>:
 8017548:	b570      	push	{r4, r5, r6, lr}
 801754a:	460e      	mov	r6, r1
 801754c:	4605      	mov	r5, r0
 801754e:	b118      	cbz	r0, 8017558 <_puts_r+0x10>
 8017550:	6983      	ldr	r3, [r0, #24]
 8017552:	b90b      	cbnz	r3, 8017558 <_puts_r+0x10>
 8017554:	f7ff fe44 	bl	80171e0 <__sinit>
 8017558:	69ab      	ldr	r3, [r5, #24]
 801755a:	68ac      	ldr	r4, [r5, #8]
 801755c:	b913      	cbnz	r3, 8017564 <_puts_r+0x1c>
 801755e:	4628      	mov	r0, r5
 8017560:	f7ff fe3e 	bl	80171e0 <__sinit>
 8017564:	4b2c      	ldr	r3, [pc, #176]	; (8017618 <_puts_r+0xd0>)
 8017566:	429c      	cmp	r4, r3
 8017568:	d120      	bne.n	80175ac <_puts_r+0x64>
 801756a:	686c      	ldr	r4, [r5, #4]
 801756c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801756e:	07db      	lsls	r3, r3, #31
 8017570:	d405      	bmi.n	801757e <_puts_r+0x36>
 8017572:	89a3      	ldrh	r3, [r4, #12]
 8017574:	0598      	lsls	r0, r3, #22
 8017576:	d402      	bmi.n	801757e <_puts_r+0x36>
 8017578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801757a:	f7ff fef4 	bl	8017366 <__retarget_lock_acquire_recursive>
 801757e:	89a3      	ldrh	r3, [r4, #12]
 8017580:	0719      	lsls	r1, r3, #28
 8017582:	d51d      	bpl.n	80175c0 <_puts_r+0x78>
 8017584:	6923      	ldr	r3, [r4, #16]
 8017586:	b1db      	cbz	r3, 80175c0 <_puts_r+0x78>
 8017588:	3e01      	subs	r6, #1
 801758a:	68a3      	ldr	r3, [r4, #8]
 801758c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017590:	3b01      	subs	r3, #1
 8017592:	60a3      	str	r3, [r4, #8]
 8017594:	bb39      	cbnz	r1, 80175e6 <_puts_r+0x9e>
 8017596:	2b00      	cmp	r3, #0
 8017598:	da38      	bge.n	801760c <_puts_r+0xc4>
 801759a:	4622      	mov	r2, r4
 801759c:	210a      	movs	r1, #10
 801759e:	4628      	mov	r0, r5
 80175a0:	f000 f89c 	bl	80176dc <__swbuf_r>
 80175a4:	3001      	adds	r0, #1
 80175a6:	d011      	beq.n	80175cc <_puts_r+0x84>
 80175a8:	250a      	movs	r5, #10
 80175aa:	e011      	b.n	80175d0 <_puts_r+0x88>
 80175ac:	4b1b      	ldr	r3, [pc, #108]	; (801761c <_puts_r+0xd4>)
 80175ae:	429c      	cmp	r4, r3
 80175b0:	d101      	bne.n	80175b6 <_puts_r+0x6e>
 80175b2:	68ac      	ldr	r4, [r5, #8]
 80175b4:	e7da      	b.n	801756c <_puts_r+0x24>
 80175b6:	4b1a      	ldr	r3, [pc, #104]	; (8017620 <_puts_r+0xd8>)
 80175b8:	429c      	cmp	r4, r3
 80175ba:	bf08      	it	eq
 80175bc:	68ec      	ldreq	r4, [r5, #12]
 80175be:	e7d5      	b.n	801756c <_puts_r+0x24>
 80175c0:	4621      	mov	r1, r4
 80175c2:	4628      	mov	r0, r5
 80175c4:	f000 f8ee 	bl	80177a4 <__swsetup_r>
 80175c8:	2800      	cmp	r0, #0
 80175ca:	d0dd      	beq.n	8017588 <_puts_r+0x40>
 80175cc:	f04f 35ff 	mov.w	r5, #4294967295
 80175d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80175d2:	07da      	lsls	r2, r3, #31
 80175d4:	d405      	bmi.n	80175e2 <_puts_r+0x9a>
 80175d6:	89a3      	ldrh	r3, [r4, #12]
 80175d8:	059b      	lsls	r3, r3, #22
 80175da:	d402      	bmi.n	80175e2 <_puts_r+0x9a>
 80175dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175de:	f7ff fec3 	bl	8017368 <__retarget_lock_release_recursive>
 80175e2:	4628      	mov	r0, r5
 80175e4:	bd70      	pop	{r4, r5, r6, pc}
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	da04      	bge.n	80175f4 <_puts_r+0xac>
 80175ea:	69a2      	ldr	r2, [r4, #24]
 80175ec:	429a      	cmp	r2, r3
 80175ee:	dc06      	bgt.n	80175fe <_puts_r+0xb6>
 80175f0:	290a      	cmp	r1, #10
 80175f2:	d004      	beq.n	80175fe <_puts_r+0xb6>
 80175f4:	6823      	ldr	r3, [r4, #0]
 80175f6:	1c5a      	adds	r2, r3, #1
 80175f8:	6022      	str	r2, [r4, #0]
 80175fa:	7019      	strb	r1, [r3, #0]
 80175fc:	e7c5      	b.n	801758a <_puts_r+0x42>
 80175fe:	4622      	mov	r2, r4
 8017600:	4628      	mov	r0, r5
 8017602:	f000 f86b 	bl	80176dc <__swbuf_r>
 8017606:	3001      	adds	r0, #1
 8017608:	d1bf      	bne.n	801758a <_puts_r+0x42>
 801760a:	e7df      	b.n	80175cc <_puts_r+0x84>
 801760c:	6823      	ldr	r3, [r4, #0]
 801760e:	250a      	movs	r5, #10
 8017610:	1c5a      	adds	r2, r3, #1
 8017612:	6022      	str	r2, [r4, #0]
 8017614:	701d      	strb	r5, [r3, #0]
 8017616:	e7db      	b.n	80175d0 <_puts_r+0x88>
 8017618:	08018260 	.word	0x08018260
 801761c:	08018280 	.word	0x08018280
 8017620:	08018240 	.word	0x08018240

08017624 <puts>:
 8017624:	4b02      	ldr	r3, [pc, #8]	; (8017630 <puts+0xc>)
 8017626:	4601      	mov	r1, r0
 8017628:	6818      	ldr	r0, [r3, #0]
 801762a:	f7ff bf8d 	b.w	8017548 <_puts_r>
 801762e:	bf00      	nop
 8017630:	2000001c 	.word	0x2000001c

08017634 <_sbrk_r>:
 8017634:	b538      	push	{r3, r4, r5, lr}
 8017636:	4d06      	ldr	r5, [pc, #24]	; (8017650 <_sbrk_r+0x1c>)
 8017638:	2300      	movs	r3, #0
 801763a:	4604      	mov	r4, r0
 801763c:	4608      	mov	r0, r1
 801763e:	602b      	str	r3, [r5, #0]
 8017640:	f7fa f94c 	bl	80118dc <_sbrk>
 8017644:	1c43      	adds	r3, r0, #1
 8017646:	d102      	bne.n	801764e <_sbrk_r+0x1a>
 8017648:	682b      	ldr	r3, [r5, #0]
 801764a:	b103      	cbz	r3, 801764e <_sbrk_r+0x1a>
 801764c:	6023      	str	r3, [r4, #0]
 801764e:	bd38      	pop	{r3, r4, r5, pc}
 8017650:	20000628 	.word	0x20000628

08017654 <__sread>:
 8017654:	b510      	push	{r4, lr}
 8017656:	460c      	mov	r4, r1
 8017658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801765c:	f000 fcd8 	bl	8018010 <_read_r>
 8017660:	2800      	cmp	r0, #0
 8017662:	bfab      	itete	ge
 8017664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017666:	89a3      	ldrhlt	r3, [r4, #12]
 8017668:	181b      	addge	r3, r3, r0
 801766a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801766e:	bfac      	ite	ge
 8017670:	6563      	strge	r3, [r4, #84]	; 0x54
 8017672:	81a3      	strhlt	r3, [r4, #12]
 8017674:	bd10      	pop	{r4, pc}

08017676 <__swrite>:
 8017676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801767a:	461f      	mov	r7, r3
 801767c:	898b      	ldrh	r3, [r1, #12]
 801767e:	05db      	lsls	r3, r3, #23
 8017680:	4605      	mov	r5, r0
 8017682:	460c      	mov	r4, r1
 8017684:	4616      	mov	r6, r2
 8017686:	d505      	bpl.n	8017694 <__swrite+0x1e>
 8017688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801768c:	2302      	movs	r3, #2
 801768e:	2200      	movs	r2, #0
 8017690:	f000 f906 	bl	80178a0 <_lseek_r>
 8017694:	89a3      	ldrh	r3, [r4, #12]
 8017696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801769a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801769e:	81a3      	strh	r3, [r4, #12]
 80176a0:	4632      	mov	r2, r6
 80176a2:	463b      	mov	r3, r7
 80176a4:	4628      	mov	r0, r5
 80176a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176aa:	f000 b869 	b.w	8017780 <_write_r>

080176ae <__sseek>:
 80176ae:	b510      	push	{r4, lr}
 80176b0:	460c      	mov	r4, r1
 80176b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176b6:	f000 f8f3 	bl	80178a0 <_lseek_r>
 80176ba:	1c43      	adds	r3, r0, #1
 80176bc:	89a3      	ldrh	r3, [r4, #12]
 80176be:	bf15      	itete	ne
 80176c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80176c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80176c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80176ca:	81a3      	strheq	r3, [r4, #12]
 80176cc:	bf18      	it	ne
 80176ce:	81a3      	strhne	r3, [r4, #12]
 80176d0:	bd10      	pop	{r4, pc}

080176d2 <__sclose>:
 80176d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176d6:	f000 b8d3 	b.w	8017880 <_close_r>
	...

080176dc <__swbuf_r>:
 80176dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176de:	460e      	mov	r6, r1
 80176e0:	4614      	mov	r4, r2
 80176e2:	4605      	mov	r5, r0
 80176e4:	b118      	cbz	r0, 80176ee <__swbuf_r+0x12>
 80176e6:	6983      	ldr	r3, [r0, #24]
 80176e8:	b90b      	cbnz	r3, 80176ee <__swbuf_r+0x12>
 80176ea:	f7ff fd79 	bl	80171e0 <__sinit>
 80176ee:	4b21      	ldr	r3, [pc, #132]	; (8017774 <__swbuf_r+0x98>)
 80176f0:	429c      	cmp	r4, r3
 80176f2:	d12b      	bne.n	801774c <__swbuf_r+0x70>
 80176f4:	686c      	ldr	r4, [r5, #4]
 80176f6:	69a3      	ldr	r3, [r4, #24]
 80176f8:	60a3      	str	r3, [r4, #8]
 80176fa:	89a3      	ldrh	r3, [r4, #12]
 80176fc:	071a      	lsls	r2, r3, #28
 80176fe:	d52f      	bpl.n	8017760 <__swbuf_r+0x84>
 8017700:	6923      	ldr	r3, [r4, #16]
 8017702:	b36b      	cbz	r3, 8017760 <__swbuf_r+0x84>
 8017704:	6923      	ldr	r3, [r4, #16]
 8017706:	6820      	ldr	r0, [r4, #0]
 8017708:	1ac0      	subs	r0, r0, r3
 801770a:	6963      	ldr	r3, [r4, #20]
 801770c:	b2f6      	uxtb	r6, r6
 801770e:	4283      	cmp	r3, r0
 8017710:	4637      	mov	r7, r6
 8017712:	dc04      	bgt.n	801771e <__swbuf_r+0x42>
 8017714:	4621      	mov	r1, r4
 8017716:	4628      	mov	r0, r5
 8017718:	f7ff fcbc 	bl	8017094 <_fflush_r>
 801771c:	bb30      	cbnz	r0, 801776c <__swbuf_r+0x90>
 801771e:	68a3      	ldr	r3, [r4, #8]
 8017720:	3b01      	subs	r3, #1
 8017722:	60a3      	str	r3, [r4, #8]
 8017724:	6823      	ldr	r3, [r4, #0]
 8017726:	1c5a      	adds	r2, r3, #1
 8017728:	6022      	str	r2, [r4, #0]
 801772a:	701e      	strb	r6, [r3, #0]
 801772c:	6963      	ldr	r3, [r4, #20]
 801772e:	3001      	adds	r0, #1
 8017730:	4283      	cmp	r3, r0
 8017732:	d004      	beq.n	801773e <__swbuf_r+0x62>
 8017734:	89a3      	ldrh	r3, [r4, #12]
 8017736:	07db      	lsls	r3, r3, #31
 8017738:	d506      	bpl.n	8017748 <__swbuf_r+0x6c>
 801773a:	2e0a      	cmp	r6, #10
 801773c:	d104      	bne.n	8017748 <__swbuf_r+0x6c>
 801773e:	4621      	mov	r1, r4
 8017740:	4628      	mov	r0, r5
 8017742:	f7ff fca7 	bl	8017094 <_fflush_r>
 8017746:	b988      	cbnz	r0, 801776c <__swbuf_r+0x90>
 8017748:	4638      	mov	r0, r7
 801774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801774c:	4b0a      	ldr	r3, [pc, #40]	; (8017778 <__swbuf_r+0x9c>)
 801774e:	429c      	cmp	r4, r3
 8017750:	d101      	bne.n	8017756 <__swbuf_r+0x7a>
 8017752:	68ac      	ldr	r4, [r5, #8]
 8017754:	e7cf      	b.n	80176f6 <__swbuf_r+0x1a>
 8017756:	4b09      	ldr	r3, [pc, #36]	; (801777c <__swbuf_r+0xa0>)
 8017758:	429c      	cmp	r4, r3
 801775a:	bf08      	it	eq
 801775c:	68ec      	ldreq	r4, [r5, #12]
 801775e:	e7ca      	b.n	80176f6 <__swbuf_r+0x1a>
 8017760:	4621      	mov	r1, r4
 8017762:	4628      	mov	r0, r5
 8017764:	f000 f81e 	bl	80177a4 <__swsetup_r>
 8017768:	2800      	cmp	r0, #0
 801776a:	d0cb      	beq.n	8017704 <__swbuf_r+0x28>
 801776c:	f04f 37ff 	mov.w	r7, #4294967295
 8017770:	e7ea      	b.n	8017748 <__swbuf_r+0x6c>
 8017772:	bf00      	nop
 8017774:	08018260 	.word	0x08018260
 8017778:	08018280 	.word	0x08018280
 801777c:	08018240 	.word	0x08018240

08017780 <_write_r>:
 8017780:	b538      	push	{r3, r4, r5, lr}
 8017782:	4d07      	ldr	r5, [pc, #28]	; (80177a0 <_write_r+0x20>)
 8017784:	4604      	mov	r4, r0
 8017786:	4608      	mov	r0, r1
 8017788:	4611      	mov	r1, r2
 801778a:	2200      	movs	r2, #0
 801778c:	602a      	str	r2, [r5, #0]
 801778e:	461a      	mov	r2, r3
 8017790:	f7f9 fbc2 	bl	8010f18 <_write>
 8017794:	1c43      	adds	r3, r0, #1
 8017796:	d102      	bne.n	801779e <_write_r+0x1e>
 8017798:	682b      	ldr	r3, [r5, #0]
 801779a:	b103      	cbz	r3, 801779e <_write_r+0x1e>
 801779c:	6023      	str	r3, [r4, #0]
 801779e:	bd38      	pop	{r3, r4, r5, pc}
 80177a0:	20000628 	.word	0x20000628

080177a4 <__swsetup_r>:
 80177a4:	4b32      	ldr	r3, [pc, #200]	; (8017870 <__swsetup_r+0xcc>)
 80177a6:	b570      	push	{r4, r5, r6, lr}
 80177a8:	681d      	ldr	r5, [r3, #0]
 80177aa:	4606      	mov	r6, r0
 80177ac:	460c      	mov	r4, r1
 80177ae:	b125      	cbz	r5, 80177ba <__swsetup_r+0x16>
 80177b0:	69ab      	ldr	r3, [r5, #24]
 80177b2:	b913      	cbnz	r3, 80177ba <__swsetup_r+0x16>
 80177b4:	4628      	mov	r0, r5
 80177b6:	f7ff fd13 	bl	80171e0 <__sinit>
 80177ba:	4b2e      	ldr	r3, [pc, #184]	; (8017874 <__swsetup_r+0xd0>)
 80177bc:	429c      	cmp	r4, r3
 80177be:	d10f      	bne.n	80177e0 <__swsetup_r+0x3c>
 80177c0:	686c      	ldr	r4, [r5, #4]
 80177c2:	89a3      	ldrh	r3, [r4, #12]
 80177c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80177c8:	0719      	lsls	r1, r3, #28
 80177ca:	d42c      	bmi.n	8017826 <__swsetup_r+0x82>
 80177cc:	06dd      	lsls	r5, r3, #27
 80177ce:	d411      	bmi.n	80177f4 <__swsetup_r+0x50>
 80177d0:	2309      	movs	r3, #9
 80177d2:	6033      	str	r3, [r6, #0]
 80177d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80177d8:	81a3      	strh	r3, [r4, #12]
 80177da:	f04f 30ff 	mov.w	r0, #4294967295
 80177de:	e03e      	b.n	801785e <__swsetup_r+0xba>
 80177e0:	4b25      	ldr	r3, [pc, #148]	; (8017878 <__swsetup_r+0xd4>)
 80177e2:	429c      	cmp	r4, r3
 80177e4:	d101      	bne.n	80177ea <__swsetup_r+0x46>
 80177e6:	68ac      	ldr	r4, [r5, #8]
 80177e8:	e7eb      	b.n	80177c2 <__swsetup_r+0x1e>
 80177ea:	4b24      	ldr	r3, [pc, #144]	; (801787c <__swsetup_r+0xd8>)
 80177ec:	429c      	cmp	r4, r3
 80177ee:	bf08      	it	eq
 80177f0:	68ec      	ldreq	r4, [r5, #12]
 80177f2:	e7e6      	b.n	80177c2 <__swsetup_r+0x1e>
 80177f4:	0758      	lsls	r0, r3, #29
 80177f6:	d512      	bpl.n	801781e <__swsetup_r+0x7a>
 80177f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80177fa:	b141      	cbz	r1, 801780e <__swsetup_r+0x6a>
 80177fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017800:	4299      	cmp	r1, r3
 8017802:	d002      	beq.n	801780a <__swsetup_r+0x66>
 8017804:	4630      	mov	r0, r6
 8017806:	f7ff fdc7 	bl	8017398 <_free_r>
 801780a:	2300      	movs	r3, #0
 801780c:	6363      	str	r3, [r4, #52]	; 0x34
 801780e:	89a3      	ldrh	r3, [r4, #12]
 8017810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017814:	81a3      	strh	r3, [r4, #12]
 8017816:	2300      	movs	r3, #0
 8017818:	6063      	str	r3, [r4, #4]
 801781a:	6923      	ldr	r3, [r4, #16]
 801781c:	6023      	str	r3, [r4, #0]
 801781e:	89a3      	ldrh	r3, [r4, #12]
 8017820:	f043 0308 	orr.w	r3, r3, #8
 8017824:	81a3      	strh	r3, [r4, #12]
 8017826:	6923      	ldr	r3, [r4, #16]
 8017828:	b94b      	cbnz	r3, 801783e <__swsetup_r+0x9a>
 801782a:	89a3      	ldrh	r3, [r4, #12]
 801782c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017834:	d003      	beq.n	801783e <__swsetup_r+0x9a>
 8017836:	4621      	mov	r1, r4
 8017838:	4630      	mov	r0, r6
 801783a:	f000 f867 	bl	801790c <__smakebuf_r>
 801783e:	89a0      	ldrh	r0, [r4, #12]
 8017840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017844:	f010 0301 	ands.w	r3, r0, #1
 8017848:	d00a      	beq.n	8017860 <__swsetup_r+0xbc>
 801784a:	2300      	movs	r3, #0
 801784c:	60a3      	str	r3, [r4, #8]
 801784e:	6963      	ldr	r3, [r4, #20]
 8017850:	425b      	negs	r3, r3
 8017852:	61a3      	str	r3, [r4, #24]
 8017854:	6923      	ldr	r3, [r4, #16]
 8017856:	b943      	cbnz	r3, 801786a <__swsetup_r+0xc6>
 8017858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801785c:	d1ba      	bne.n	80177d4 <__swsetup_r+0x30>
 801785e:	bd70      	pop	{r4, r5, r6, pc}
 8017860:	0781      	lsls	r1, r0, #30
 8017862:	bf58      	it	pl
 8017864:	6963      	ldrpl	r3, [r4, #20]
 8017866:	60a3      	str	r3, [r4, #8]
 8017868:	e7f4      	b.n	8017854 <__swsetup_r+0xb0>
 801786a:	2000      	movs	r0, #0
 801786c:	e7f7      	b.n	801785e <__swsetup_r+0xba>
 801786e:	bf00      	nop
 8017870:	2000001c 	.word	0x2000001c
 8017874:	08018260 	.word	0x08018260
 8017878:	08018280 	.word	0x08018280
 801787c:	08018240 	.word	0x08018240

08017880 <_close_r>:
 8017880:	b538      	push	{r3, r4, r5, lr}
 8017882:	4d06      	ldr	r5, [pc, #24]	; (801789c <_close_r+0x1c>)
 8017884:	2300      	movs	r3, #0
 8017886:	4604      	mov	r4, r0
 8017888:	4608      	mov	r0, r1
 801788a:	602b      	str	r3, [r5, #0]
 801788c:	f7f9 fff1 	bl	8011872 <_close>
 8017890:	1c43      	adds	r3, r0, #1
 8017892:	d102      	bne.n	801789a <_close_r+0x1a>
 8017894:	682b      	ldr	r3, [r5, #0]
 8017896:	b103      	cbz	r3, 801789a <_close_r+0x1a>
 8017898:	6023      	str	r3, [r4, #0]
 801789a:	bd38      	pop	{r3, r4, r5, pc}
 801789c:	20000628 	.word	0x20000628

080178a0 <_lseek_r>:
 80178a0:	b538      	push	{r3, r4, r5, lr}
 80178a2:	4d07      	ldr	r5, [pc, #28]	; (80178c0 <_lseek_r+0x20>)
 80178a4:	4604      	mov	r4, r0
 80178a6:	4608      	mov	r0, r1
 80178a8:	4611      	mov	r1, r2
 80178aa:	2200      	movs	r2, #0
 80178ac:	602a      	str	r2, [r5, #0]
 80178ae:	461a      	mov	r2, r3
 80178b0:	f7fa f806 	bl	80118c0 <_lseek>
 80178b4:	1c43      	adds	r3, r0, #1
 80178b6:	d102      	bne.n	80178be <_lseek_r+0x1e>
 80178b8:	682b      	ldr	r3, [r5, #0]
 80178ba:	b103      	cbz	r3, 80178be <_lseek_r+0x1e>
 80178bc:	6023      	str	r3, [r4, #0]
 80178be:	bd38      	pop	{r3, r4, r5, pc}
 80178c0:	20000628 	.word	0x20000628

080178c4 <__swhatbuf_r>:
 80178c4:	b570      	push	{r4, r5, r6, lr}
 80178c6:	460e      	mov	r6, r1
 80178c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178cc:	2900      	cmp	r1, #0
 80178ce:	b096      	sub	sp, #88	; 0x58
 80178d0:	4614      	mov	r4, r2
 80178d2:	461d      	mov	r5, r3
 80178d4:	da07      	bge.n	80178e6 <__swhatbuf_r+0x22>
 80178d6:	2300      	movs	r3, #0
 80178d8:	602b      	str	r3, [r5, #0]
 80178da:	89b3      	ldrh	r3, [r6, #12]
 80178dc:	061a      	lsls	r2, r3, #24
 80178de:	d410      	bmi.n	8017902 <__swhatbuf_r+0x3e>
 80178e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80178e4:	e00e      	b.n	8017904 <__swhatbuf_r+0x40>
 80178e6:	466a      	mov	r2, sp
 80178e8:	f000 fba4 	bl	8018034 <_fstat_r>
 80178ec:	2800      	cmp	r0, #0
 80178ee:	dbf2      	blt.n	80178d6 <__swhatbuf_r+0x12>
 80178f0:	9a01      	ldr	r2, [sp, #4]
 80178f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80178f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80178fa:	425a      	negs	r2, r3
 80178fc:	415a      	adcs	r2, r3
 80178fe:	602a      	str	r2, [r5, #0]
 8017900:	e7ee      	b.n	80178e0 <__swhatbuf_r+0x1c>
 8017902:	2340      	movs	r3, #64	; 0x40
 8017904:	2000      	movs	r0, #0
 8017906:	6023      	str	r3, [r4, #0]
 8017908:	b016      	add	sp, #88	; 0x58
 801790a:	bd70      	pop	{r4, r5, r6, pc}

0801790c <__smakebuf_r>:
 801790c:	898b      	ldrh	r3, [r1, #12]
 801790e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017910:	079d      	lsls	r5, r3, #30
 8017912:	4606      	mov	r6, r0
 8017914:	460c      	mov	r4, r1
 8017916:	d507      	bpl.n	8017928 <__smakebuf_r+0x1c>
 8017918:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801791c:	6023      	str	r3, [r4, #0]
 801791e:	6123      	str	r3, [r4, #16]
 8017920:	2301      	movs	r3, #1
 8017922:	6163      	str	r3, [r4, #20]
 8017924:	b002      	add	sp, #8
 8017926:	bd70      	pop	{r4, r5, r6, pc}
 8017928:	ab01      	add	r3, sp, #4
 801792a:	466a      	mov	r2, sp
 801792c:	f7ff ffca 	bl	80178c4 <__swhatbuf_r>
 8017930:	9900      	ldr	r1, [sp, #0]
 8017932:	4605      	mov	r5, r0
 8017934:	4630      	mov	r0, r6
 8017936:	f7ff fd7f 	bl	8017438 <_malloc_r>
 801793a:	b948      	cbnz	r0, 8017950 <__smakebuf_r+0x44>
 801793c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017940:	059a      	lsls	r2, r3, #22
 8017942:	d4ef      	bmi.n	8017924 <__smakebuf_r+0x18>
 8017944:	f023 0303 	bic.w	r3, r3, #3
 8017948:	f043 0302 	orr.w	r3, r3, #2
 801794c:	81a3      	strh	r3, [r4, #12]
 801794e:	e7e3      	b.n	8017918 <__smakebuf_r+0xc>
 8017950:	4b0d      	ldr	r3, [pc, #52]	; (8017988 <__smakebuf_r+0x7c>)
 8017952:	62b3      	str	r3, [r6, #40]	; 0x28
 8017954:	89a3      	ldrh	r3, [r4, #12]
 8017956:	6020      	str	r0, [r4, #0]
 8017958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801795c:	81a3      	strh	r3, [r4, #12]
 801795e:	9b00      	ldr	r3, [sp, #0]
 8017960:	6163      	str	r3, [r4, #20]
 8017962:	9b01      	ldr	r3, [sp, #4]
 8017964:	6120      	str	r0, [r4, #16]
 8017966:	b15b      	cbz	r3, 8017980 <__smakebuf_r+0x74>
 8017968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801796c:	4630      	mov	r0, r6
 801796e:	f000 fb73 	bl	8018058 <_isatty_r>
 8017972:	b128      	cbz	r0, 8017980 <__smakebuf_r+0x74>
 8017974:	89a3      	ldrh	r3, [r4, #12]
 8017976:	f023 0303 	bic.w	r3, r3, #3
 801797a:	f043 0301 	orr.w	r3, r3, #1
 801797e:	81a3      	strh	r3, [r4, #12]
 8017980:	89a0      	ldrh	r0, [r4, #12]
 8017982:	4305      	orrs	r5, r0
 8017984:	81a5      	strh	r5, [r4, #12]
 8017986:	e7cd      	b.n	8017924 <__smakebuf_r+0x18>
 8017988:	08017179 	.word	0x08017179

0801798c <__malloc_lock>:
 801798c:	4801      	ldr	r0, [pc, #4]	; (8017994 <__malloc_lock+0x8>)
 801798e:	f7ff bcea 	b.w	8017366 <__retarget_lock_acquire_recursive>
 8017992:	bf00      	nop
 8017994:	20000620 	.word	0x20000620

08017998 <__malloc_unlock>:
 8017998:	4801      	ldr	r0, [pc, #4]	; (80179a0 <__malloc_unlock+0x8>)
 801799a:	f7ff bce5 	b.w	8017368 <__retarget_lock_release_recursive>
 801799e:	bf00      	nop
 80179a0:	20000620 	.word	0x20000620

080179a4 <__sfputc_r>:
 80179a4:	6893      	ldr	r3, [r2, #8]
 80179a6:	3b01      	subs	r3, #1
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	b410      	push	{r4}
 80179ac:	6093      	str	r3, [r2, #8]
 80179ae:	da08      	bge.n	80179c2 <__sfputc_r+0x1e>
 80179b0:	6994      	ldr	r4, [r2, #24]
 80179b2:	42a3      	cmp	r3, r4
 80179b4:	db01      	blt.n	80179ba <__sfputc_r+0x16>
 80179b6:	290a      	cmp	r1, #10
 80179b8:	d103      	bne.n	80179c2 <__sfputc_r+0x1e>
 80179ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179be:	f7ff be8d 	b.w	80176dc <__swbuf_r>
 80179c2:	6813      	ldr	r3, [r2, #0]
 80179c4:	1c58      	adds	r0, r3, #1
 80179c6:	6010      	str	r0, [r2, #0]
 80179c8:	7019      	strb	r1, [r3, #0]
 80179ca:	4608      	mov	r0, r1
 80179cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179d0:	4770      	bx	lr

080179d2 <__sfputs_r>:
 80179d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179d4:	4606      	mov	r6, r0
 80179d6:	460f      	mov	r7, r1
 80179d8:	4614      	mov	r4, r2
 80179da:	18d5      	adds	r5, r2, r3
 80179dc:	42ac      	cmp	r4, r5
 80179de:	d101      	bne.n	80179e4 <__sfputs_r+0x12>
 80179e0:	2000      	movs	r0, #0
 80179e2:	e007      	b.n	80179f4 <__sfputs_r+0x22>
 80179e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179e8:	463a      	mov	r2, r7
 80179ea:	4630      	mov	r0, r6
 80179ec:	f7ff ffda 	bl	80179a4 <__sfputc_r>
 80179f0:	1c43      	adds	r3, r0, #1
 80179f2:	d1f3      	bne.n	80179dc <__sfputs_r+0xa>
 80179f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080179f8 <_vfiprintf_r>:
 80179f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179fc:	460d      	mov	r5, r1
 80179fe:	b09d      	sub	sp, #116	; 0x74
 8017a00:	4614      	mov	r4, r2
 8017a02:	4698      	mov	r8, r3
 8017a04:	4606      	mov	r6, r0
 8017a06:	b118      	cbz	r0, 8017a10 <_vfiprintf_r+0x18>
 8017a08:	6983      	ldr	r3, [r0, #24]
 8017a0a:	b90b      	cbnz	r3, 8017a10 <_vfiprintf_r+0x18>
 8017a0c:	f7ff fbe8 	bl	80171e0 <__sinit>
 8017a10:	4b89      	ldr	r3, [pc, #548]	; (8017c38 <_vfiprintf_r+0x240>)
 8017a12:	429d      	cmp	r5, r3
 8017a14:	d11b      	bne.n	8017a4e <_vfiprintf_r+0x56>
 8017a16:	6875      	ldr	r5, [r6, #4]
 8017a18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a1a:	07d9      	lsls	r1, r3, #31
 8017a1c:	d405      	bmi.n	8017a2a <_vfiprintf_r+0x32>
 8017a1e:	89ab      	ldrh	r3, [r5, #12]
 8017a20:	059a      	lsls	r2, r3, #22
 8017a22:	d402      	bmi.n	8017a2a <_vfiprintf_r+0x32>
 8017a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a26:	f7ff fc9e 	bl	8017366 <__retarget_lock_acquire_recursive>
 8017a2a:	89ab      	ldrh	r3, [r5, #12]
 8017a2c:	071b      	lsls	r3, r3, #28
 8017a2e:	d501      	bpl.n	8017a34 <_vfiprintf_r+0x3c>
 8017a30:	692b      	ldr	r3, [r5, #16]
 8017a32:	b9eb      	cbnz	r3, 8017a70 <_vfiprintf_r+0x78>
 8017a34:	4629      	mov	r1, r5
 8017a36:	4630      	mov	r0, r6
 8017a38:	f7ff feb4 	bl	80177a4 <__swsetup_r>
 8017a3c:	b1c0      	cbz	r0, 8017a70 <_vfiprintf_r+0x78>
 8017a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a40:	07dc      	lsls	r4, r3, #31
 8017a42:	d50e      	bpl.n	8017a62 <_vfiprintf_r+0x6a>
 8017a44:	f04f 30ff 	mov.w	r0, #4294967295
 8017a48:	b01d      	add	sp, #116	; 0x74
 8017a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a4e:	4b7b      	ldr	r3, [pc, #492]	; (8017c3c <_vfiprintf_r+0x244>)
 8017a50:	429d      	cmp	r5, r3
 8017a52:	d101      	bne.n	8017a58 <_vfiprintf_r+0x60>
 8017a54:	68b5      	ldr	r5, [r6, #8]
 8017a56:	e7df      	b.n	8017a18 <_vfiprintf_r+0x20>
 8017a58:	4b79      	ldr	r3, [pc, #484]	; (8017c40 <_vfiprintf_r+0x248>)
 8017a5a:	429d      	cmp	r5, r3
 8017a5c:	bf08      	it	eq
 8017a5e:	68f5      	ldreq	r5, [r6, #12]
 8017a60:	e7da      	b.n	8017a18 <_vfiprintf_r+0x20>
 8017a62:	89ab      	ldrh	r3, [r5, #12]
 8017a64:	0598      	lsls	r0, r3, #22
 8017a66:	d4ed      	bmi.n	8017a44 <_vfiprintf_r+0x4c>
 8017a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a6a:	f7ff fc7d 	bl	8017368 <__retarget_lock_release_recursive>
 8017a6e:	e7e9      	b.n	8017a44 <_vfiprintf_r+0x4c>
 8017a70:	2300      	movs	r3, #0
 8017a72:	9309      	str	r3, [sp, #36]	; 0x24
 8017a74:	2320      	movs	r3, #32
 8017a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a7e:	2330      	movs	r3, #48	; 0x30
 8017a80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017c44 <_vfiprintf_r+0x24c>
 8017a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a88:	f04f 0901 	mov.w	r9, #1
 8017a8c:	4623      	mov	r3, r4
 8017a8e:	469a      	mov	sl, r3
 8017a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a94:	b10a      	cbz	r2, 8017a9a <_vfiprintf_r+0xa2>
 8017a96:	2a25      	cmp	r2, #37	; 0x25
 8017a98:	d1f9      	bne.n	8017a8e <_vfiprintf_r+0x96>
 8017a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8017a9e:	d00b      	beq.n	8017ab8 <_vfiprintf_r+0xc0>
 8017aa0:	465b      	mov	r3, fp
 8017aa2:	4622      	mov	r2, r4
 8017aa4:	4629      	mov	r1, r5
 8017aa6:	4630      	mov	r0, r6
 8017aa8:	f7ff ff93 	bl	80179d2 <__sfputs_r>
 8017aac:	3001      	adds	r0, #1
 8017aae:	f000 80aa 	beq.w	8017c06 <_vfiprintf_r+0x20e>
 8017ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ab4:	445a      	add	r2, fp
 8017ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8017ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	f000 80a2 	beq.w	8017c06 <_vfiprintf_r+0x20e>
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8017ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017acc:	f10a 0a01 	add.w	sl, sl, #1
 8017ad0:	9304      	str	r3, [sp, #16]
 8017ad2:	9307      	str	r3, [sp, #28]
 8017ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8017ada:	4654      	mov	r4, sl
 8017adc:	2205      	movs	r2, #5
 8017ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ae2:	4858      	ldr	r0, [pc, #352]	; (8017c44 <_vfiprintf_r+0x24c>)
 8017ae4:	f7f8 fb7c 	bl	80101e0 <memchr>
 8017ae8:	9a04      	ldr	r2, [sp, #16]
 8017aea:	b9d8      	cbnz	r0, 8017b24 <_vfiprintf_r+0x12c>
 8017aec:	06d1      	lsls	r1, r2, #27
 8017aee:	bf44      	itt	mi
 8017af0:	2320      	movmi	r3, #32
 8017af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017af6:	0713      	lsls	r3, r2, #28
 8017af8:	bf44      	itt	mi
 8017afa:	232b      	movmi	r3, #43	; 0x2b
 8017afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b00:	f89a 3000 	ldrb.w	r3, [sl]
 8017b04:	2b2a      	cmp	r3, #42	; 0x2a
 8017b06:	d015      	beq.n	8017b34 <_vfiprintf_r+0x13c>
 8017b08:	9a07      	ldr	r2, [sp, #28]
 8017b0a:	4654      	mov	r4, sl
 8017b0c:	2000      	movs	r0, #0
 8017b0e:	f04f 0c0a 	mov.w	ip, #10
 8017b12:	4621      	mov	r1, r4
 8017b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b18:	3b30      	subs	r3, #48	; 0x30
 8017b1a:	2b09      	cmp	r3, #9
 8017b1c:	d94e      	bls.n	8017bbc <_vfiprintf_r+0x1c4>
 8017b1e:	b1b0      	cbz	r0, 8017b4e <_vfiprintf_r+0x156>
 8017b20:	9207      	str	r2, [sp, #28]
 8017b22:	e014      	b.n	8017b4e <_vfiprintf_r+0x156>
 8017b24:	eba0 0308 	sub.w	r3, r0, r8
 8017b28:	fa09 f303 	lsl.w	r3, r9, r3
 8017b2c:	4313      	orrs	r3, r2
 8017b2e:	9304      	str	r3, [sp, #16]
 8017b30:	46a2      	mov	sl, r4
 8017b32:	e7d2      	b.n	8017ada <_vfiprintf_r+0xe2>
 8017b34:	9b03      	ldr	r3, [sp, #12]
 8017b36:	1d19      	adds	r1, r3, #4
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	9103      	str	r1, [sp, #12]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	bfbb      	ittet	lt
 8017b40:	425b      	neglt	r3, r3
 8017b42:	f042 0202 	orrlt.w	r2, r2, #2
 8017b46:	9307      	strge	r3, [sp, #28]
 8017b48:	9307      	strlt	r3, [sp, #28]
 8017b4a:	bfb8      	it	lt
 8017b4c:	9204      	strlt	r2, [sp, #16]
 8017b4e:	7823      	ldrb	r3, [r4, #0]
 8017b50:	2b2e      	cmp	r3, #46	; 0x2e
 8017b52:	d10c      	bne.n	8017b6e <_vfiprintf_r+0x176>
 8017b54:	7863      	ldrb	r3, [r4, #1]
 8017b56:	2b2a      	cmp	r3, #42	; 0x2a
 8017b58:	d135      	bne.n	8017bc6 <_vfiprintf_r+0x1ce>
 8017b5a:	9b03      	ldr	r3, [sp, #12]
 8017b5c:	1d1a      	adds	r2, r3, #4
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	9203      	str	r2, [sp, #12]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	bfb8      	it	lt
 8017b66:	f04f 33ff 	movlt.w	r3, #4294967295
 8017b6a:	3402      	adds	r4, #2
 8017b6c:	9305      	str	r3, [sp, #20]
 8017b6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017c54 <_vfiprintf_r+0x25c>
 8017b72:	7821      	ldrb	r1, [r4, #0]
 8017b74:	2203      	movs	r2, #3
 8017b76:	4650      	mov	r0, sl
 8017b78:	f7f8 fb32 	bl	80101e0 <memchr>
 8017b7c:	b140      	cbz	r0, 8017b90 <_vfiprintf_r+0x198>
 8017b7e:	2340      	movs	r3, #64	; 0x40
 8017b80:	eba0 000a 	sub.w	r0, r0, sl
 8017b84:	fa03 f000 	lsl.w	r0, r3, r0
 8017b88:	9b04      	ldr	r3, [sp, #16]
 8017b8a:	4303      	orrs	r3, r0
 8017b8c:	3401      	adds	r4, #1
 8017b8e:	9304      	str	r3, [sp, #16]
 8017b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b94:	482c      	ldr	r0, [pc, #176]	; (8017c48 <_vfiprintf_r+0x250>)
 8017b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b9a:	2206      	movs	r2, #6
 8017b9c:	f7f8 fb20 	bl	80101e0 <memchr>
 8017ba0:	2800      	cmp	r0, #0
 8017ba2:	d03f      	beq.n	8017c24 <_vfiprintf_r+0x22c>
 8017ba4:	4b29      	ldr	r3, [pc, #164]	; (8017c4c <_vfiprintf_r+0x254>)
 8017ba6:	bb1b      	cbnz	r3, 8017bf0 <_vfiprintf_r+0x1f8>
 8017ba8:	9b03      	ldr	r3, [sp, #12]
 8017baa:	3307      	adds	r3, #7
 8017bac:	f023 0307 	bic.w	r3, r3, #7
 8017bb0:	3308      	adds	r3, #8
 8017bb2:	9303      	str	r3, [sp, #12]
 8017bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bb6:	443b      	add	r3, r7
 8017bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8017bba:	e767      	b.n	8017a8c <_vfiprintf_r+0x94>
 8017bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bc0:	460c      	mov	r4, r1
 8017bc2:	2001      	movs	r0, #1
 8017bc4:	e7a5      	b.n	8017b12 <_vfiprintf_r+0x11a>
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	3401      	adds	r4, #1
 8017bca:	9305      	str	r3, [sp, #20]
 8017bcc:	4619      	mov	r1, r3
 8017bce:	f04f 0c0a 	mov.w	ip, #10
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bd8:	3a30      	subs	r2, #48	; 0x30
 8017bda:	2a09      	cmp	r2, #9
 8017bdc:	d903      	bls.n	8017be6 <_vfiprintf_r+0x1ee>
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d0c5      	beq.n	8017b6e <_vfiprintf_r+0x176>
 8017be2:	9105      	str	r1, [sp, #20]
 8017be4:	e7c3      	b.n	8017b6e <_vfiprintf_r+0x176>
 8017be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8017bea:	4604      	mov	r4, r0
 8017bec:	2301      	movs	r3, #1
 8017bee:	e7f0      	b.n	8017bd2 <_vfiprintf_r+0x1da>
 8017bf0:	ab03      	add	r3, sp, #12
 8017bf2:	9300      	str	r3, [sp, #0]
 8017bf4:	462a      	mov	r2, r5
 8017bf6:	4b16      	ldr	r3, [pc, #88]	; (8017c50 <_vfiprintf_r+0x258>)
 8017bf8:	a904      	add	r1, sp, #16
 8017bfa:	4630      	mov	r0, r6
 8017bfc:	f3af 8000 	nop.w
 8017c00:	4607      	mov	r7, r0
 8017c02:	1c78      	adds	r0, r7, #1
 8017c04:	d1d6      	bne.n	8017bb4 <_vfiprintf_r+0x1bc>
 8017c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c08:	07d9      	lsls	r1, r3, #31
 8017c0a:	d405      	bmi.n	8017c18 <_vfiprintf_r+0x220>
 8017c0c:	89ab      	ldrh	r3, [r5, #12]
 8017c0e:	059a      	lsls	r2, r3, #22
 8017c10:	d402      	bmi.n	8017c18 <_vfiprintf_r+0x220>
 8017c12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c14:	f7ff fba8 	bl	8017368 <__retarget_lock_release_recursive>
 8017c18:	89ab      	ldrh	r3, [r5, #12]
 8017c1a:	065b      	lsls	r3, r3, #25
 8017c1c:	f53f af12 	bmi.w	8017a44 <_vfiprintf_r+0x4c>
 8017c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c22:	e711      	b.n	8017a48 <_vfiprintf_r+0x50>
 8017c24:	ab03      	add	r3, sp, #12
 8017c26:	9300      	str	r3, [sp, #0]
 8017c28:	462a      	mov	r2, r5
 8017c2a:	4b09      	ldr	r3, [pc, #36]	; (8017c50 <_vfiprintf_r+0x258>)
 8017c2c:	a904      	add	r1, sp, #16
 8017c2e:	4630      	mov	r0, r6
 8017c30:	f000 f880 	bl	8017d34 <_printf_i>
 8017c34:	e7e4      	b.n	8017c00 <_vfiprintf_r+0x208>
 8017c36:	bf00      	nop
 8017c38:	08018260 	.word	0x08018260
 8017c3c:	08018280 	.word	0x08018280
 8017c40:	08018240 	.word	0x08018240
 8017c44:	080182a4 	.word	0x080182a4
 8017c48:	080182ae 	.word	0x080182ae
 8017c4c:	00000000 	.word	0x00000000
 8017c50:	080179d3 	.word	0x080179d3
 8017c54:	080182aa 	.word	0x080182aa

08017c58 <_printf_common>:
 8017c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c5c:	4616      	mov	r6, r2
 8017c5e:	4699      	mov	r9, r3
 8017c60:	688a      	ldr	r2, [r1, #8]
 8017c62:	690b      	ldr	r3, [r1, #16]
 8017c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017c68:	4293      	cmp	r3, r2
 8017c6a:	bfb8      	it	lt
 8017c6c:	4613      	movlt	r3, r2
 8017c6e:	6033      	str	r3, [r6, #0]
 8017c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017c74:	4607      	mov	r7, r0
 8017c76:	460c      	mov	r4, r1
 8017c78:	b10a      	cbz	r2, 8017c7e <_printf_common+0x26>
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	6033      	str	r3, [r6, #0]
 8017c7e:	6823      	ldr	r3, [r4, #0]
 8017c80:	0699      	lsls	r1, r3, #26
 8017c82:	bf42      	ittt	mi
 8017c84:	6833      	ldrmi	r3, [r6, #0]
 8017c86:	3302      	addmi	r3, #2
 8017c88:	6033      	strmi	r3, [r6, #0]
 8017c8a:	6825      	ldr	r5, [r4, #0]
 8017c8c:	f015 0506 	ands.w	r5, r5, #6
 8017c90:	d106      	bne.n	8017ca0 <_printf_common+0x48>
 8017c92:	f104 0a19 	add.w	sl, r4, #25
 8017c96:	68e3      	ldr	r3, [r4, #12]
 8017c98:	6832      	ldr	r2, [r6, #0]
 8017c9a:	1a9b      	subs	r3, r3, r2
 8017c9c:	42ab      	cmp	r3, r5
 8017c9e:	dc26      	bgt.n	8017cee <_printf_common+0x96>
 8017ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ca4:	1e13      	subs	r3, r2, #0
 8017ca6:	6822      	ldr	r2, [r4, #0]
 8017ca8:	bf18      	it	ne
 8017caa:	2301      	movne	r3, #1
 8017cac:	0692      	lsls	r2, r2, #26
 8017cae:	d42b      	bmi.n	8017d08 <_printf_common+0xb0>
 8017cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017cb4:	4649      	mov	r1, r9
 8017cb6:	4638      	mov	r0, r7
 8017cb8:	47c0      	blx	r8
 8017cba:	3001      	adds	r0, #1
 8017cbc:	d01e      	beq.n	8017cfc <_printf_common+0xa4>
 8017cbe:	6823      	ldr	r3, [r4, #0]
 8017cc0:	68e5      	ldr	r5, [r4, #12]
 8017cc2:	6832      	ldr	r2, [r6, #0]
 8017cc4:	f003 0306 	and.w	r3, r3, #6
 8017cc8:	2b04      	cmp	r3, #4
 8017cca:	bf08      	it	eq
 8017ccc:	1aad      	subeq	r5, r5, r2
 8017cce:	68a3      	ldr	r3, [r4, #8]
 8017cd0:	6922      	ldr	r2, [r4, #16]
 8017cd2:	bf0c      	ite	eq
 8017cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017cd8:	2500      	movne	r5, #0
 8017cda:	4293      	cmp	r3, r2
 8017cdc:	bfc4      	itt	gt
 8017cde:	1a9b      	subgt	r3, r3, r2
 8017ce0:	18ed      	addgt	r5, r5, r3
 8017ce2:	2600      	movs	r6, #0
 8017ce4:	341a      	adds	r4, #26
 8017ce6:	42b5      	cmp	r5, r6
 8017ce8:	d11a      	bne.n	8017d20 <_printf_common+0xc8>
 8017cea:	2000      	movs	r0, #0
 8017cec:	e008      	b.n	8017d00 <_printf_common+0xa8>
 8017cee:	2301      	movs	r3, #1
 8017cf0:	4652      	mov	r2, sl
 8017cf2:	4649      	mov	r1, r9
 8017cf4:	4638      	mov	r0, r7
 8017cf6:	47c0      	blx	r8
 8017cf8:	3001      	adds	r0, #1
 8017cfa:	d103      	bne.n	8017d04 <_printf_common+0xac>
 8017cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8017d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d04:	3501      	adds	r5, #1
 8017d06:	e7c6      	b.n	8017c96 <_printf_common+0x3e>
 8017d08:	18e1      	adds	r1, r4, r3
 8017d0a:	1c5a      	adds	r2, r3, #1
 8017d0c:	2030      	movs	r0, #48	; 0x30
 8017d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017d12:	4422      	add	r2, r4
 8017d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017d1c:	3302      	adds	r3, #2
 8017d1e:	e7c7      	b.n	8017cb0 <_printf_common+0x58>
 8017d20:	2301      	movs	r3, #1
 8017d22:	4622      	mov	r2, r4
 8017d24:	4649      	mov	r1, r9
 8017d26:	4638      	mov	r0, r7
 8017d28:	47c0      	blx	r8
 8017d2a:	3001      	adds	r0, #1
 8017d2c:	d0e6      	beq.n	8017cfc <_printf_common+0xa4>
 8017d2e:	3601      	adds	r6, #1
 8017d30:	e7d9      	b.n	8017ce6 <_printf_common+0x8e>
	...

08017d34 <_printf_i>:
 8017d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017d38:	460c      	mov	r4, r1
 8017d3a:	4691      	mov	r9, r2
 8017d3c:	7e27      	ldrb	r7, [r4, #24]
 8017d3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017d40:	2f78      	cmp	r7, #120	; 0x78
 8017d42:	4680      	mov	r8, r0
 8017d44:	469a      	mov	sl, r3
 8017d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017d4a:	d807      	bhi.n	8017d5c <_printf_i+0x28>
 8017d4c:	2f62      	cmp	r7, #98	; 0x62
 8017d4e:	d80a      	bhi.n	8017d66 <_printf_i+0x32>
 8017d50:	2f00      	cmp	r7, #0
 8017d52:	f000 80d8 	beq.w	8017f06 <_printf_i+0x1d2>
 8017d56:	2f58      	cmp	r7, #88	; 0x58
 8017d58:	f000 80a3 	beq.w	8017ea2 <_printf_i+0x16e>
 8017d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017d64:	e03a      	b.n	8017ddc <_printf_i+0xa8>
 8017d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017d6a:	2b15      	cmp	r3, #21
 8017d6c:	d8f6      	bhi.n	8017d5c <_printf_i+0x28>
 8017d6e:	a001      	add	r0, pc, #4	; (adr r0, 8017d74 <_printf_i+0x40>)
 8017d70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017d74:	08017dcd 	.word	0x08017dcd
 8017d78:	08017de1 	.word	0x08017de1
 8017d7c:	08017d5d 	.word	0x08017d5d
 8017d80:	08017d5d 	.word	0x08017d5d
 8017d84:	08017d5d 	.word	0x08017d5d
 8017d88:	08017d5d 	.word	0x08017d5d
 8017d8c:	08017de1 	.word	0x08017de1
 8017d90:	08017d5d 	.word	0x08017d5d
 8017d94:	08017d5d 	.word	0x08017d5d
 8017d98:	08017d5d 	.word	0x08017d5d
 8017d9c:	08017d5d 	.word	0x08017d5d
 8017da0:	08017eed 	.word	0x08017eed
 8017da4:	08017e11 	.word	0x08017e11
 8017da8:	08017ecf 	.word	0x08017ecf
 8017dac:	08017d5d 	.word	0x08017d5d
 8017db0:	08017d5d 	.word	0x08017d5d
 8017db4:	08017f0f 	.word	0x08017f0f
 8017db8:	08017d5d 	.word	0x08017d5d
 8017dbc:	08017e11 	.word	0x08017e11
 8017dc0:	08017d5d 	.word	0x08017d5d
 8017dc4:	08017d5d 	.word	0x08017d5d
 8017dc8:	08017ed7 	.word	0x08017ed7
 8017dcc:	680b      	ldr	r3, [r1, #0]
 8017dce:	1d1a      	adds	r2, r3, #4
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	600a      	str	r2, [r1, #0]
 8017dd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ddc:	2301      	movs	r3, #1
 8017dde:	e0a3      	b.n	8017f28 <_printf_i+0x1f4>
 8017de0:	6825      	ldr	r5, [r4, #0]
 8017de2:	6808      	ldr	r0, [r1, #0]
 8017de4:	062e      	lsls	r6, r5, #24
 8017de6:	f100 0304 	add.w	r3, r0, #4
 8017dea:	d50a      	bpl.n	8017e02 <_printf_i+0xce>
 8017dec:	6805      	ldr	r5, [r0, #0]
 8017dee:	600b      	str	r3, [r1, #0]
 8017df0:	2d00      	cmp	r5, #0
 8017df2:	da03      	bge.n	8017dfc <_printf_i+0xc8>
 8017df4:	232d      	movs	r3, #45	; 0x2d
 8017df6:	426d      	negs	r5, r5
 8017df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017dfc:	485e      	ldr	r0, [pc, #376]	; (8017f78 <_printf_i+0x244>)
 8017dfe:	230a      	movs	r3, #10
 8017e00:	e019      	b.n	8017e36 <_printf_i+0x102>
 8017e02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017e06:	6805      	ldr	r5, [r0, #0]
 8017e08:	600b      	str	r3, [r1, #0]
 8017e0a:	bf18      	it	ne
 8017e0c:	b22d      	sxthne	r5, r5
 8017e0e:	e7ef      	b.n	8017df0 <_printf_i+0xbc>
 8017e10:	680b      	ldr	r3, [r1, #0]
 8017e12:	6825      	ldr	r5, [r4, #0]
 8017e14:	1d18      	adds	r0, r3, #4
 8017e16:	6008      	str	r0, [r1, #0]
 8017e18:	0628      	lsls	r0, r5, #24
 8017e1a:	d501      	bpl.n	8017e20 <_printf_i+0xec>
 8017e1c:	681d      	ldr	r5, [r3, #0]
 8017e1e:	e002      	b.n	8017e26 <_printf_i+0xf2>
 8017e20:	0669      	lsls	r1, r5, #25
 8017e22:	d5fb      	bpl.n	8017e1c <_printf_i+0xe8>
 8017e24:	881d      	ldrh	r5, [r3, #0]
 8017e26:	4854      	ldr	r0, [pc, #336]	; (8017f78 <_printf_i+0x244>)
 8017e28:	2f6f      	cmp	r7, #111	; 0x6f
 8017e2a:	bf0c      	ite	eq
 8017e2c:	2308      	moveq	r3, #8
 8017e2e:	230a      	movne	r3, #10
 8017e30:	2100      	movs	r1, #0
 8017e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017e36:	6866      	ldr	r6, [r4, #4]
 8017e38:	60a6      	str	r6, [r4, #8]
 8017e3a:	2e00      	cmp	r6, #0
 8017e3c:	bfa2      	ittt	ge
 8017e3e:	6821      	ldrge	r1, [r4, #0]
 8017e40:	f021 0104 	bicge.w	r1, r1, #4
 8017e44:	6021      	strge	r1, [r4, #0]
 8017e46:	b90d      	cbnz	r5, 8017e4c <_printf_i+0x118>
 8017e48:	2e00      	cmp	r6, #0
 8017e4a:	d04d      	beq.n	8017ee8 <_printf_i+0x1b4>
 8017e4c:	4616      	mov	r6, r2
 8017e4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017e52:	fb03 5711 	mls	r7, r3, r1, r5
 8017e56:	5dc7      	ldrb	r7, [r0, r7]
 8017e58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017e5c:	462f      	mov	r7, r5
 8017e5e:	42bb      	cmp	r3, r7
 8017e60:	460d      	mov	r5, r1
 8017e62:	d9f4      	bls.n	8017e4e <_printf_i+0x11a>
 8017e64:	2b08      	cmp	r3, #8
 8017e66:	d10b      	bne.n	8017e80 <_printf_i+0x14c>
 8017e68:	6823      	ldr	r3, [r4, #0]
 8017e6a:	07df      	lsls	r7, r3, #31
 8017e6c:	d508      	bpl.n	8017e80 <_printf_i+0x14c>
 8017e6e:	6923      	ldr	r3, [r4, #16]
 8017e70:	6861      	ldr	r1, [r4, #4]
 8017e72:	4299      	cmp	r1, r3
 8017e74:	bfde      	ittt	le
 8017e76:	2330      	movle	r3, #48	; 0x30
 8017e78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017e7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017e80:	1b92      	subs	r2, r2, r6
 8017e82:	6122      	str	r2, [r4, #16]
 8017e84:	f8cd a000 	str.w	sl, [sp]
 8017e88:	464b      	mov	r3, r9
 8017e8a:	aa03      	add	r2, sp, #12
 8017e8c:	4621      	mov	r1, r4
 8017e8e:	4640      	mov	r0, r8
 8017e90:	f7ff fee2 	bl	8017c58 <_printf_common>
 8017e94:	3001      	adds	r0, #1
 8017e96:	d14c      	bne.n	8017f32 <_printf_i+0x1fe>
 8017e98:	f04f 30ff 	mov.w	r0, #4294967295
 8017e9c:	b004      	add	sp, #16
 8017e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ea2:	4835      	ldr	r0, [pc, #212]	; (8017f78 <_printf_i+0x244>)
 8017ea4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017ea8:	6823      	ldr	r3, [r4, #0]
 8017eaa:	680e      	ldr	r6, [r1, #0]
 8017eac:	061f      	lsls	r7, r3, #24
 8017eae:	f856 5b04 	ldr.w	r5, [r6], #4
 8017eb2:	600e      	str	r6, [r1, #0]
 8017eb4:	d514      	bpl.n	8017ee0 <_printf_i+0x1ac>
 8017eb6:	07d9      	lsls	r1, r3, #31
 8017eb8:	bf44      	itt	mi
 8017eba:	f043 0320 	orrmi.w	r3, r3, #32
 8017ebe:	6023      	strmi	r3, [r4, #0]
 8017ec0:	b91d      	cbnz	r5, 8017eca <_printf_i+0x196>
 8017ec2:	6823      	ldr	r3, [r4, #0]
 8017ec4:	f023 0320 	bic.w	r3, r3, #32
 8017ec8:	6023      	str	r3, [r4, #0]
 8017eca:	2310      	movs	r3, #16
 8017ecc:	e7b0      	b.n	8017e30 <_printf_i+0xfc>
 8017ece:	6823      	ldr	r3, [r4, #0]
 8017ed0:	f043 0320 	orr.w	r3, r3, #32
 8017ed4:	6023      	str	r3, [r4, #0]
 8017ed6:	2378      	movs	r3, #120	; 0x78
 8017ed8:	4828      	ldr	r0, [pc, #160]	; (8017f7c <_printf_i+0x248>)
 8017eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017ede:	e7e3      	b.n	8017ea8 <_printf_i+0x174>
 8017ee0:	065e      	lsls	r6, r3, #25
 8017ee2:	bf48      	it	mi
 8017ee4:	b2ad      	uxthmi	r5, r5
 8017ee6:	e7e6      	b.n	8017eb6 <_printf_i+0x182>
 8017ee8:	4616      	mov	r6, r2
 8017eea:	e7bb      	b.n	8017e64 <_printf_i+0x130>
 8017eec:	680b      	ldr	r3, [r1, #0]
 8017eee:	6826      	ldr	r6, [r4, #0]
 8017ef0:	6960      	ldr	r0, [r4, #20]
 8017ef2:	1d1d      	adds	r5, r3, #4
 8017ef4:	600d      	str	r5, [r1, #0]
 8017ef6:	0635      	lsls	r5, r6, #24
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	d501      	bpl.n	8017f00 <_printf_i+0x1cc>
 8017efc:	6018      	str	r0, [r3, #0]
 8017efe:	e002      	b.n	8017f06 <_printf_i+0x1d2>
 8017f00:	0671      	lsls	r1, r6, #25
 8017f02:	d5fb      	bpl.n	8017efc <_printf_i+0x1c8>
 8017f04:	8018      	strh	r0, [r3, #0]
 8017f06:	2300      	movs	r3, #0
 8017f08:	6123      	str	r3, [r4, #16]
 8017f0a:	4616      	mov	r6, r2
 8017f0c:	e7ba      	b.n	8017e84 <_printf_i+0x150>
 8017f0e:	680b      	ldr	r3, [r1, #0]
 8017f10:	1d1a      	adds	r2, r3, #4
 8017f12:	600a      	str	r2, [r1, #0]
 8017f14:	681e      	ldr	r6, [r3, #0]
 8017f16:	6862      	ldr	r2, [r4, #4]
 8017f18:	2100      	movs	r1, #0
 8017f1a:	4630      	mov	r0, r6
 8017f1c:	f7f8 f960 	bl	80101e0 <memchr>
 8017f20:	b108      	cbz	r0, 8017f26 <_printf_i+0x1f2>
 8017f22:	1b80      	subs	r0, r0, r6
 8017f24:	6060      	str	r0, [r4, #4]
 8017f26:	6863      	ldr	r3, [r4, #4]
 8017f28:	6123      	str	r3, [r4, #16]
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f30:	e7a8      	b.n	8017e84 <_printf_i+0x150>
 8017f32:	6923      	ldr	r3, [r4, #16]
 8017f34:	4632      	mov	r2, r6
 8017f36:	4649      	mov	r1, r9
 8017f38:	4640      	mov	r0, r8
 8017f3a:	47d0      	blx	sl
 8017f3c:	3001      	adds	r0, #1
 8017f3e:	d0ab      	beq.n	8017e98 <_printf_i+0x164>
 8017f40:	6823      	ldr	r3, [r4, #0]
 8017f42:	079b      	lsls	r3, r3, #30
 8017f44:	d413      	bmi.n	8017f6e <_printf_i+0x23a>
 8017f46:	68e0      	ldr	r0, [r4, #12]
 8017f48:	9b03      	ldr	r3, [sp, #12]
 8017f4a:	4298      	cmp	r0, r3
 8017f4c:	bfb8      	it	lt
 8017f4e:	4618      	movlt	r0, r3
 8017f50:	e7a4      	b.n	8017e9c <_printf_i+0x168>
 8017f52:	2301      	movs	r3, #1
 8017f54:	4632      	mov	r2, r6
 8017f56:	4649      	mov	r1, r9
 8017f58:	4640      	mov	r0, r8
 8017f5a:	47d0      	blx	sl
 8017f5c:	3001      	adds	r0, #1
 8017f5e:	d09b      	beq.n	8017e98 <_printf_i+0x164>
 8017f60:	3501      	adds	r5, #1
 8017f62:	68e3      	ldr	r3, [r4, #12]
 8017f64:	9903      	ldr	r1, [sp, #12]
 8017f66:	1a5b      	subs	r3, r3, r1
 8017f68:	42ab      	cmp	r3, r5
 8017f6a:	dcf2      	bgt.n	8017f52 <_printf_i+0x21e>
 8017f6c:	e7eb      	b.n	8017f46 <_printf_i+0x212>
 8017f6e:	2500      	movs	r5, #0
 8017f70:	f104 0619 	add.w	r6, r4, #25
 8017f74:	e7f5      	b.n	8017f62 <_printf_i+0x22e>
 8017f76:	bf00      	nop
 8017f78:	080182b5 	.word	0x080182b5
 8017f7c:	080182c6 	.word	0x080182c6

08017f80 <_putc_r>:
 8017f80:	b570      	push	{r4, r5, r6, lr}
 8017f82:	460d      	mov	r5, r1
 8017f84:	4614      	mov	r4, r2
 8017f86:	4606      	mov	r6, r0
 8017f88:	b118      	cbz	r0, 8017f92 <_putc_r+0x12>
 8017f8a:	6983      	ldr	r3, [r0, #24]
 8017f8c:	b90b      	cbnz	r3, 8017f92 <_putc_r+0x12>
 8017f8e:	f7ff f927 	bl	80171e0 <__sinit>
 8017f92:	4b1c      	ldr	r3, [pc, #112]	; (8018004 <_putc_r+0x84>)
 8017f94:	429c      	cmp	r4, r3
 8017f96:	d124      	bne.n	8017fe2 <_putc_r+0x62>
 8017f98:	6874      	ldr	r4, [r6, #4]
 8017f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f9c:	07d8      	lsls	r0, r3, #31
 8017f9e:	d405      	bmi.n	8017fac <_putc_r+0x2c>
 8017fa0:	89a3      	ldrh	r3, [r4, #12]
 8017fa2:	0599      	lsls	r1, r3, #22
 8017fa4:	d402      	bmi.n	8017fac <_putc_r+0x2c>
 8017fa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017fa8:	f7ff f9dd 	bl	8017366 <__retarget_lock_acquire_recursive>
 8017fac:	68a3      	ldr	r3, [r4, #8]
 8017fae:	3b01      	subs	r3, #1
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	60a3      	str	r3, [r4, #8]
 8017fb4:	da05      	bge.n	8017fc2 <_putc_r+0x42>
 8017fb6:	69a2      	ldr	r2, [r4, #24]
 8017fb8:	4293      	cmp	r3, r2
 8017fba:	db1c      	blt.n	8017ff6 <_putc_r+0x76>
 8017fbc:	b2eb      	uxtb	r3, r5
 8017fbe:	2b0a      	cmp	r3, #10
 8017fc0:	d019      	beq.n	8017ff6 <_putc_r+0x76>
 8017fc2:	6823      	ldr	r3, [r4, #0]
 8017fc4:	1c5a      	adds	r2, r3, #1
 8017fc6:	6022      	str	r2, [r4, #0]
 8017fc8:	701d      	strb	r5, [r3, #0]
 8017fca:	b2ed      	uxtb	r5, r5
 8017fcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017fce:	07da      	lsls	r2, r3, #31
 8017fd0:	d405      	bmi.n	8017fde <_putc_r+0x5e>
 8017fd2:	89a3      	ldrh	r3, [r4, #12]
 8017fd4:	059b      	lsls	r3, r3, #22
 8017fd6:	d402      	bmi.n	8017fde <_putc_r+0x5e>
 8017fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017fda:	f7ff f9c5 	bl	8017368 <__retarget_lock_release_recursive>
 8017fde:	4628      	mov	r0, r5
 8017fe0:	bd70      	pop	{r4, r5, r6, pc}
 8017fe2:	4b09      	ldr	r3, [pc, #36]	; (8018008 <_putc_r+0x88>)
 8017fe4:	429c      	cmp	r4, r3
 8017fe6:	d101      	bne.n	8017fec <_putc_r+0x6c>
 8017fe8:	68b4      	ldr	r4, [r6, #8]
 8017fea:	e7d6      	b.n	8017f9a <_putc_r+0x1a>
 8017fec:	4b07      	ldr	r3, [pc, #28]	; (801800c <_putc_r+0x8c>)
 8017fee:	429c      	cmp	r4, r3
 8017ff0:	bf08      	it	eq
 8017ff2:	68f4      	ldreq	r4, [r6, #12]
 8017ff4:	e7d1      	b.n	8017f9a <_putc_r+0x1a>
 8017ff6:	4629      	mov	r1, r5
 8017ff8:	4622      	mov	r2, r4
 8017ffa:	4630      	mov	r0, r6
 8017ffc:	f7ff fb6e 	bl	80176dc <__swbuf_r>
 8018000:	4605      	mov	r5, r0
 8018002:	e7e3      	b.n	8017fcc <_putc_r+0x4c>
 8018004:	08018260 	.word	0x08018260
 8018008:	08018280 	.word	0x08018280
 801800c:	08018240 	.word	0x08018240

08018010 <_read_r>:
 8018010:	b538      	push	{r3, r4, r5, lr}
 8018012:	4d07      	ldr	r5, [pc, #28]	; (8018030 <_read_r+0x20>)
 8018014:	4604      	mov	r4, r0
 8018016:	4608      	mov	r0, r1
 8018018:	4611      	mov	r1, r2
 801801a:	2200      	movs	r2, #0
 801801c:	602a      	str	r2, [r5, #0]
 801801e:	461a      	mov	r2, r3
 8018020:	f7f9 fc0a 	bl	8011838 <_read>
 8018024:	1c43      	adds	r3, r0, #1
 8018026:	d102      	bne.n	801802e <_read_r+0x1e>
 8018028:	682b      	ldr	r3, [r5, #0]
 801802a:	b103      	cbz	r3, 801802e <_read_r+0x1e>
 801802c:	6023      	str	r3, [r4, #0]
 801802e:	bd38      	pop	{r3, r4, r5, pc}
 8018030:	20000628 	.word	0x20000628

08018034 <_fstat_r>:
 8018034:	b538      	push	{r3, r4, r5, lr}
 8018036:	4d07      	ldr	r5, [pc, #28]	; (8018054 <_fstat_r+0x20>)
 8018038:	2300      	movs	r3, #0
 801803a:	4604      	mov	r4, r0
 801803c:	4608      	mov	r0, r1
 801803e:	4611      	mov	r1, r2
 8018040:	602b      	str	r3, [r5, #0]
 8018042:	f7f9 fc22 	bl	801188a <_fstat>
 8018046:	1c43      	adds	r3, r0, #1
 8018048:	d102      	bne.n	8018050 <_fstat_r+0x1c>
 801804a:	682b      	ldr	r3, [r5, #0]
 801804c:	b103      	cbz	r3, 8018050 <_fstat_r+0x1c>
 801804e:	6023      	str	r3, [r4, #0]
 8018050:	bd38      	pop	{r3, r4, r5, pc}
 8018052:	bf00      	nop
 8018054:	20000628 	.word	0x20000628

08018058 <_isatty_r>:
 8018058:	b538      	push	{r3, r4, r5, lr}
 801805a:	4d06      	ldr	r5, [pc, #24]	; (8018074 <_isatty_r+0x1c>)
 801805c:	2300      	movs	r3, #0
 801805e:	4604      	mov	r4, r0
 8018060:	4608      	mov	r0, r1
 8018062:	602b      	str	r3, [r5, #0]
 8018064:	f7f9 fc21 	bl	80118aa <_isatty>
 8018068:	1c43      	adds	r3, r0, #1
 801806a:	d102      	bne.n	8018072 <_isatty_r+0x1a>
 801806c:	682b      	ldr	r3, [r5, #0]
 801806e:	b103      	cbz	r3, 8018072 <_isatty_r+0x1a>
 8018070:	6023      	str	r3, [r4, #0]
 8018072:	bd38      	pop	{r3, r4, r5, pc}
 8018074:	20000628 	.word	0x20000628

08018078 <_init>:
 8018078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801807a:	bf00      	nop
 801807c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801807e:	bc08      	pop	{r3}
 8018080:	469e      	mov	lr, r3
 8018082:	4770      	bx	lr

08018084 <_fini>:
 8018084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018086:	bf00      	nop
 8018088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801808a:	bc08      	pop	{r3}
 801808c:	469e      	mov	lr, r3
 801808e:	4770      	bx	lr
