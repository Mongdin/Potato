
normalmode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  08020188  08020188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08023458  08023458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080234b4  080234b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080234b4  080234b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080234bc  080234bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080234bc  080234bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080234c0  080234c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080234c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080234d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080234d0  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000971d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001698  00000000  00000000  00029759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002b688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f33  00000000  00000000  0002be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000904b  00000000  00000000  00050dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5034  00000000  00000000  00059e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ee42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002204  00000000  00000000  0013ee98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020188 <__do_global_dtors_aux>:
 8020188:	b510      	push	{r4, lr}
 802018a:	4c05      	ldr	r4, [pc, #20]	; (80201a0 <__do_global_dtors_aux+0x18>)
 802018c:	7823      	ldrb	r3, [r4, #0]
 802018e:	b933      	cbnz	r3, 802019e <__do_global_dtors_aux+0x16>
 8020190:	4b04      	ldr	r3, [pc, #16]	; (80201a4 <__do_global_dtors_aux+0x1c>)
 8020192:	b113      	cbz	r3, 802019a <__do_global_dtors_aux+0x12>
 8020194:	4804      	ldr	r0, [pc, #16]	; (80201a8 <__do_global_dtors_aux+0x20>)
 8020196:	f3af 8000 	nop.w
 802019a:	2301      	movs	r3, #1
 802019c:	7023      	strb	r3, [r4, #0]
 802019e:	bd10      	pop	{r4, pc}
 80201a0:	2000000c 	.word	0x2000000c
 80201a4:	00000000 	.word	0x00000000
 80201a8:	08023440 	.word	0x08023440

080201ac <frame_dummy>:
 80201ac:	b508      	push	{r3, lr}
 80201ae:	4b03      	ldr	r3, [pc, #12]	; (80201bc <frame_dummy+0x10>)
 80201b0:	b11b      	cbz	r3, 80201ba <frame_dummy+0xe>
 80201b2:	4903      	ldr	r1, [pc, #12]	; (80201c0 <frame_dummy+0x14>)
 80201b4:	4803      	ldr	r0, [pc, #12]	; (80201c4 <frame_dummy+0x18>)
 80201b6:	f3af 8000 	nop.w
 80201ba:	bd08      	pop	{r3, pc}
 80201bc:	00000000 	.word	0x00000000
 80201c0:	20000010 	.word	0x20000010
 80201c4:	08023440 	.word	0x08023440

080201c8 <__aeabi_uldivmod>:
 80201c8:	b953      	cbnz	r3, 80201e0 <__aeabi_uldivmod+0x18>
 80201ca:	b94a      	cbnz	r2, 80201e0 <__aeabi_uldivmod+0x18>
 80201cc:	2900      	cmp	r1, #0
 80201ce:	bf08      	it	eq
 80201d0:	2800      	cmpeq	r0, #0
 80201d2:	bf1c      	itt	ne
 80201d4:	f04f 31ff 	movne.w	r1, #4294967295
 80201d8:	f04f 30ff 	movne.w	r0, #4294967295
 80201dc:	f000 b96e 	b.w	80204bc <__aeabi_idiv0>
 80201e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80201e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80201e8:	f000 f806 	bl	80201f8 <__udivmoddi4>
 80201ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80201f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80201f4:	b004      	add	sp, #16
 80201f6:	4770      	bx	lr

080201f8 <__udivmoddi4>:
 80201f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80201fc:	9d08      	ldr	r5, [sp, #32]
 80201fe:	4604      	mov	r4, r0
 8020200:	468c      	mov	ip, r1
 8020202:	2b00      	cmp	r3, #0
 8020204:	f040 8083 	bne.w	802030e <__udivmoddi4+0x116>
 8020208:	428a      	cmp	r2, r1
 802020a:	4617      	mov	r7, r2
 802020c:	d947      	bls.n	802029e <__udivmoddi4+0xa6>
 802020e:	fab2 f282 	clz	r2, r2
 8020212:	b142      	cbz	r2, 8020226 <__udivmoddi4+0x2e>
 8020214:	f1c2 0020 	rsb	r0, r2, #32
 8020218:	fa24 f000 	lsr.w	r0, r4, r0
 802021c:	4091      	lsls	r1, r2
 802021e:	4097      	lsls	r7, r2
 8020220:	ea40 0c01 	orr.w	ip, r0, r1
 8020224:	4094      	lsls	r4, r2
 8020226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 802022a:	0c23      	lsrs	r3, r4, #16
 802022c:	fbbc f6f8 	udiv	r6, ip, r8
 8020230:	fa1f fe87 	uxth.w	lr, r7
 8020234:	fb08 c116 	mls	r1, r8, r6, ip
 8020238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802023c:	fb06 f10e 	mul.w	r1, r6, lr
 8020240:	4299      	cmp	r1, r3
 8020242:	d909      	bls.n	8020258 <__udivmoddi4+0x60>
 8020244:	18fb      	adds	r3, r7, r3
 8020246:	f106 30ff 	add.w	r0, r6, #4294967295
 802024a:	f080 8119 	bcs.w	8020480 <__udivmoddi4+0x288>
 802024e:	4299      	cmp	r1, r3
 8020250:	f240 8116 	bls.w	8020480 <__udivmoddi4+0x288>
 8020254:	3e02      	subs	r6, #2
 8020256:	443b      	add	r3, r7
 8020258:	1a5b      	subs	r3, r3, r1
 802025a:	b2a4      	uxth	r4, r4
 802025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8020260:	fb08 3310 	mls	r3, r8, r0, r3
 8020264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020268:	fb00 fe0e 	mul.w	lr, r0, lr
 802026c:	45a6      	cmp	lr, r4
 802026e:	d909      	bls.n	8020284 <__udivmoddi4+0x8c>
 8020270:	193c      	adds	r4, r7, r4
 8020272:	f100 33ff 	add.w	r3, r0, #4294967295
 8020276:	f080 8105 	bcs.w	8020484 <__udivmoddi4+0x28c>
 802027a:	45a6      	cmp	lr, r4
 802027c:	f240 8102 	bls.w	8020484 <__udivmoddi4+0x28c>
 8020280:	3802      	subs	r0, #2
 8020282:	443c      	add	r4, r7
 8020284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020288:	eba4 040e 	sub.w	r4, r4, lr
 802028c:	2600      	movs	r6, #0
 802028e:	b11d      	cbz	r5, 8020298 <__udivmoddi4+0xa0>
 8020290:	40d4      	lsrs	r4, r2
 8020292:	2300      	movs	r3, #0
 8020294:	e9c5 4300 	strd	r4, r3, [r5]
 8020298:	4631      	mov	r1, r6
 802029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802029e:	b902      	cbnz	r2, 80202a2 <__udivmoddi4+0xaa>
 80202a0:	deff      	udf	#255	; 0xff
 80202a2:	fab2 f282 	clz	r2, r2
 80202a6:	2a00      	cmp	r2, #0
 80202a8:	d150      	bne.n	802034c <__udivmoddi4+0x154>
 80202aa:	1bcb      	subs	r3, r1, r7
 80202ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80202b0:	fa1f f887 	uxth.w	r8, r7
 80202b4:	2601      	movs	r6, #1
 80202b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80202ba:	0c21      	lsrs	r1, r4, #16
 80202bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80202c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80202c4:	fb08 f30c 	mul.w	r3, r8, ip
 80202c8:	428b      	cmp	r3, r1
 80202ca:	d907      	bls.n	80202dc <__udivmoddi4+0xe4>
 80202cc:	1879      	adds	r1, r7, r1
 80202ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80202d2:	d202      	bcs.n	80202da <__udivmoddi4+0xe2>
 80202d4:	428b      	cmp	r3, r1
 80202d6:	f200 80e9 	bhi.w	80204ac <__udivmoddi4+0x2b4>
 80202da:	4684      	mov	ip, r0
 80202dc:	1ac9      	subs	r1, r1, r3
 80202de:	b2a3      	uxth	r3, r4
 80202e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80202e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80202e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80202ec:	fb08 f800 	mul.w	r8, r8, r0
 80202f0:	45a0      	cmp	r8, r4
 80202f2:	d907      	bls.n	8020304 <__udivmoddi4+0x10c>
 80202f4:	193c      	adds	r4, r7, r4
 80202f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80202fa:	d202      	bcs.n	8020302 <__udivmoddi4+0x10a>
 80202fc:	45a0      	cmp	r8, r4
 80202fe:	f200 80d9 	bhi.w	80204b4 <__udivmoddi4+0x2bc>
 8020302:	4618      	mov	r0, r3
 8020304:	eba4 0408 	sub.w	r4, r4, r8
 8020308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 802030c:	e7bf      	b.n	802028e <__udivmoddi4+0x96>
 802030e:	428b      	cmp	r3, r1
 8020310:	d909      	bls.n	8020326 <__udivmoddi4+0x12e>
 8020312:	2d00      	cmp	r5, #0
 8020314:	f000 80b1 	beq.w	802047a <__udivmoddi4+0x282>
 8020318:	2600      	movs	r6, #0
 802031a:	e9c5 0100 	strd	r0, r1, [r5]
 802031e:	4630      	mov	r0, r6
 8020320:	4631      	mov	r1, r6
 8020322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020326:	fab3 f683 	clz	r6, r3
 802032a:	2e00      	cmp	r6, #0
 802032c:	d14a      	bne.n	80203c4 <__udivmoddi4+0x1cc>
 802032e:	428b      	cmp	r3, r1
 8020330:	d302      	bcc.n	8020338 <__udivmoddi4+0x140>
 8020332:	4282      	cmp	r2, r0
 8020334:	f200 80b8 	bhi.w	80204a8 <__udivmoddi4+0x2b0>
 8020338:	1a84      	subs	r4, r0, r2
 802033a:	eb61 0103 	sbc.w	r1, r1, r3
 802033e:	2001      	movs	r0, #1
 8020340:	468c      	mov	ip, r1
 8020342:	2d00      	cmp	r5, #0
 8020344:	d0a8      	beq.n	8020298 <__udivmoddi4+0xa0>
 8020346:	e9c5 4c00 	strd	r4, ip, [r5]
 802034a:	e7a5      	b.n	8020298 <__udivmoddi4+0xa0>
 802034c:	f1c2 0320 	rsb	r3, r2, #32
 8020350:	fa20 f603 	lsr.w	r6, r0, r3
 8020354:	4097      	lsls	r7, r2
 8020356:	fa01 f002 	lsl.w	r0, r1, r2
 802035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 802035e:	40d9      	lsrs	r1, r3
 8020360:	4330      	orrs	r0, r6
 8020362:	0c03      	lsrs	r3, r0, #16
 8020364:	fbb1 f6fe 	udiv	r6, r1, lr
 8020368:	fa1f f887 	uxth.w	r8, r7
 802036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8020370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020374:	fb06 f108 	mul.w	r1, r6, r8
 8020378:	4299      	cmp	r1, r3
 802037a:	fa04 f402 	lsl.w	r4, r4, r2
 802037e:	d909      	bls.n	8020394 <__udivmoddi4+0x19c>
 8020380:	18fb      	adds	r3, r7, r3
 8020382:	f106 3cff 	add.w	ip, r6, #4294967295
 8020386:	f080 808d 	bcs.w	80204a4 <__udivmoddi4+0x2ac>
 802038a:	4299      	cmp	r1, r3
 802038c:	f240 808a 	bls.w	80204a4 <__udivmoddi4+0x2ac>
 8020390:	3e02      	subs	r6, #2
 8020392:	443b      	add	r3, r7
 8020394:	1a5b      	subs	r3, r3, r1
 8020396:	b281      	uxth	r1, r0
 8020398:	fbb3 f0fe 	udiv	r0, r3, lr
 802039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80203a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80203a4:	fb00 f308 	mul.w	r3, r0, r8
 80203a8:	428b      	cmp	r3, r1
 80203aa:	d907      	bls.n	80203bc <__udivmoddi4+0x1c4>
 80203ac:	1879      	adds	r1, r7, r1
 80203ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80203b2:	d273      	bcs.n	802049c <__udivmoddi4+0x2a4>
 80203b4:	428b      	cmp	r3, r1
 80203b6:	d971      	bls.n	802049c <__udivmoddi4+0x2a4>
 80203b8:	3802      	subs	r0, #2
 80203ba:	4439      	add	r1, r7
 80203bc:	1acb      	subs	r3, r1, r3
 80203be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80203c2:	e778      	b.n	80202b6 <__udivmoddi4+0xbe>
 80203c4:	f1c6 0c20 	rsb	ip, r6, #32
 80203c8:	fa03 f406 	lsl.w	r4, r3, r6
 80203cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80203d0:	431c      	orrs	r4, r3
 80203d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80203d6:	fa01 f306 	lsl.w	r3, r1, r6
 80203da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80203de:	fa21 f10c 	lsr.w	r1, r1, ip
 80203e2:	431f      	orrs	r7, r3
 80203e4:	0c3b      	lsrs	r3, r7, #16
 80203e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80203ea:	fa1f f884 	uxth.w	r8, r4
 80203ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80203f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80203f6:	fb09 fa08 	mul.w	sl, r9, r8
 80203fa:	458a      	cmp	sl, r1
 80203fc:	fa02 f206 	lsl.w	r2, r2, r6
 8020400:	fa00 f306 	lsl.w	r3, r0, r6
 8020404:	d908      	bls.n	8020418 <__udivmoddi4+0x220>
 8020406:	1861      	adds	r1, r4, r1
 8020408:	f109 30ff 	add.w	r0, r9, #4294967295
 802040c:	d248      	bcs.n	80204a0 <__udivmoddi4+0x2a8>
 802040e:	458a      	cmp	sl, r1
 8020410:	d946      	bls.n	80204a0 <__udivmoddi4+0x2a8>
 8020412:	f1a9 0902 	sub.w	r9, r9, #2
 8020416:	4421      	add	r1, r4
 8020418:	eba1 010a 	sub.w	r1, r1, sl
 802041c:	b2bf      	uxth	r7, r7
 802041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8020422:	fb0e 1110 	mls	r1, lr, r0, r1
 8020426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 802042a:	fb00 f808 	mul.w	r8, r0, r8
 802042e:	45b8      	cmp	r8, r7
 8020430:	d907      	bls.n	8020442 <__udivmoddi4+0x24a>
 8020432:	19e7      	adds	r7, r4, r7
 8020434:	f100 31ff 	add.w	r1, r0, #4294967295
 8020438:	d22e      	bcs.n	8020498 <__udivmoddi4+0x2a0>
 802043a:	45b8      	cmp	r8, r7
 802043c:	d92c      	bls.n	8020498 <__udivmoddi4+0x2a0>
 802043e:	3802      	subs	r0, #2
 8020440:	4427      	add	r7, r4
 8020442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020446:	eba7 0708 	sub.w	r7, r7, r8
 802044a:	fba0 8902 	umull	r8, r9, r0, r2
 802044e:	454f      	cmp	r7, r9
 8020450:	46c6      	mov	lr, r8
 8020452:	4649      	mov	r1, r9
 8020454:	d31a      	bcc.n	802048c <__udivmoddi4+0x294>
 8020456:	d017      	beq.n	8020488 <__udivmoddi4+0x290>
 8020458:	b15d      	cbz	r5, 8020472 <__udivmoddi4+0x27a>
 802045a:	ebb3 020e 	subs.w	r2, r3, lr
 802045e:	eb67 0701 	sbc.w	r7, r7, r1
 8020462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8020466:	40f2      	lsrs	r2, r6
 8020468:	ea4c 0202 	orr.w	r2, ip, r2
 802046c:	40f7      	lsrs	r7, r6
 802046e:	e9c5 2700 	strd	r2, r7, [r5]
 8020472:	2600      	movs	r6, #0
 8020474:	4631      	mov	r1, r6
 8020476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802047a:	462e      	mov	r6, r5
 802047c:	4628      	mov	r0, r5
 802047e:	e70b      	b.n	8020298 <__udivmoddi4+0xa0>
 8020480:	4606      	mov	r6, r0
 8020482:	e6e9      	b.n	8020258 <__udivmoddi4+0x60>
 8020484:	4618      	mov	r0, r3
 8020486:	e6fd      	b.n	8020284 <__udivmoddi4+0x8c>
 8020488:	4543      	cmp	r3, r8
 802048a:	d2e5      	bcs.n	8020458 <__udivmoddi4+0x260>
 802048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8020490:	eb69 0104 	sbc.w	r1, r9, r4
 8020494:	3801      	subs	r0, #1
 8020496:	e7df      	b.n	8020458 <__udivmoddi4+0x260>
 8020498:	4608      	mov	r0, r1
 802049a:	e7d2      	b.n	8020442 <__udivmoddi4+0x24a>
 802049c:	4660      	mov	r0, ip
 802049e:	e78d      	b.n	80203bc <__udivmoddi4+0x1c4>
 80204a0:	4681      	mov	r9, r0
 80204a2:	e7b9      	b.n	8020418 <__udivmoddi4+0x220>
 80204a4:	4666      	mov	r6, ip
 80204a6:	e775      	b.n	8020394 <__udivmoddi4+0x19c>
 80204a8:	4630      	mov	r0, r6
 80204aa:	e74a      	b.n	8020342 <__udivmoddi4+0x14a>
 80204ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80204b0:	4439      	add	r1, r7
 80204b2:	e713      	b.n	80202dc <__udivmoddi4+0xe4>
 80204b4:	3802      	subs	r0, #2
 80204b6:	443c      	add	r4, r7
 80204b8:	e724      	b.n	8020304 <__udivmoddi4+0x10c>
 80204ba:	bf00      	nop

080204bc <__aeabi_idiv0>:
 80204bc:	4770      	bx	lr
 80204be:	bf00      	nop

080204c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80204c0:	b580      	push	{r7, lr}
 80204c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80204c4:	f000 fc05 	bl	8020cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80204c8:	f000 f81a 	bl	8020500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80204cc:	f000 f89a 	bl	8020604 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80204d0:	f000 f868 	bl	80205a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart1, "normalmode boot\n", 16, 10);
 80204d4:	230a      	movs	r3, #10
 80204d6:	2210      	movs	r2, #16
 80204d8:	4906      	ldr	r1, [pc, #24]	; (80204f4 <main+0x34>)
 80204da:	4807      	ldr	r0, [pc, #28]	; (80204f8 <main+0x38>)
 80204dc:	f002 fafe 	bl	8022adc <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80204e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80204e4:	4805      	ldr	r0, [pc, #20]	; (80204fc <main+0x3c>)
 80204e6:	f000 ff61 	bl	80213ac <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80204ea:	20c8      	movs	r0, #200	; 0xc8
 80204ec:	f000 fc66 	bl	8020dbc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80204f0:	e7f6      	b.n	80204e0 <main+0x20>
 80204f2:	bf00      	nop
 80204f4:	08023458 	.word	0x08023458
 80204f8:	20000028 	.word	0x20000028
 80204fc:	48000400 	.word	0x48000400

08020500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020500:	b580      	push	{r7, lr}
 8020502:	b096      	sub	sp, #88	; 0x58
 8020504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020506:	f107 0314 	add.w	r3, r7, #20
 802050a:	2244      	movs	r2, #68	; 0x44
 802050c:	2100      	movs	r1, #0
 802050e:	4618      	mov	r0, r3
 8020510:	f002 ff8e 	bl	8023430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020514:	463b      	mov	r3, r7
 8020516:	2200      	movs	r2, #0
 8020518:	601a      	str	r2, [r3, #0]
 802051a:	605a      	str	r2, [r3, #4]
 802051c:	609a      	str	r2, [r3, #8]
 802051e:	60da      	str	r2, [r3, #12]
 8020520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8020522:	f44f 7000 	mov.w	r0, #512	; 0x200
 8020526:	f000 ff8d 	bl	8021444 <HAL_PWREx_ControlVoltageScaling>
 802052a:	4603      	mov	r3, r0
 802052c:	2b00      	cmp	r3, #0
 802052e:	d001      	beq.n	8020534 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8020530:	f000 fa94 	bl	8020a5c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8020534:	2310      	movs	r3, #16
 8020536:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8020538:	2301      	movs	r3, #1
 802053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 802053c:	2300      	movs	r3, #0
 802053e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8020540:	2360      	movs	r3, #96	; 0x60
 8020542:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020544:	2302      	movs	r3, #2
 8020546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8020548:	2301      	movs	r3, #1
 802054a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 802054c:	2301      	movs	r3, #1
 802054e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8020550:	2328      	movs	r3, #40	; 0x28
 8020552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8020554:	2307      	movs	r3, #7
 8020556:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8020558:	2302      	movs	r3, #2
 802055a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 802055c:	2302      	movs	r3, #2
 802055e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020560:	f107 0314 	add.w	r3, r7, #20
 8020564:	4618      	mov	r0, r3
 8020566:	f000 ffc3 	bl	80214f0 <HAL_RCC_OscConfig>
 802056a:	4603      	mov	r3, r0
 802056c:	2b00      	cmp	r3, #0
 802056e:	d001      	beq.n	8020574 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8020570:	f000 fa74 	bl	8020a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020574:	230f      	movs	r3, #15
 8020576:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020578:	2303      	movs	r3, #3
 802057a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802057c:	2300      	movs	r3, #0
 802057e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8020580:	2300      	movs	r3, #0
 8020582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020584:	2300      	movs	r3, #0
 8020586:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8020588:	463b      	mov	r3, r7
 802058a:	2104      	movs	r1, #4
 802058c:	4618      	mov	r0, r3
 802058e:	f001 fb95 	bl	8021cbc <HAL_RCC_ClockConfig>
 8020592:	4603      	mov	r3, r0
 8020594:	2b00      	cmp	r3, #0
 8020596:	d001      	beq.n	802059c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8020598:	f000 fa60 	bl	8020a5c <Error_Handler>
  }
}
 802059c:	bf00      	nop
 802059e:	3758      	adds	r7, #88	; 0x58
 80205a0:	46bd      	mov	sp, r7
 80205a2:	bd80      	pop	{r7, pc}

080205a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80205a4:	b580      	push	{r7, lr}
 80205a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80205a8:	4b14      	ldr	r3, [pc, #80]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205aa:	4a15      	ldr	r2, [pc, #84]	; (8020600 <MX_USART1_UART_Init+0x5c>)
 80205ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80205ae:	4b13      	ldr	r3, [pc, #76]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80205b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80205b6:	4b11      	ldr	r3, [pc, #68]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205b8:	2200      	movs	r2, #0
 80205ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80205bc:	4b0f      	ldr	r3, [pc, #60]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205be:	2200      	movs	r2, #0
 80205c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80205c2:	4b0e      	ldr	r3, [pc, #56]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205c4:	2200      	movs	r2, #0
 80205c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80205c8:	4b0c      	ldr	r3, [pc, #48]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205ca:	220c      	movs	r2, #12
 80205cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80205ce:	4b0b      	ldr	r3, [pc, #44]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205d0:	2200      	movs	r2, #0
 80205d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80205d4:	4b09      	ldr	r3, [pc, #36]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205d6:	2200      	movs	r2, #0
 80205d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80205da:	4b08      	ldr	r3, [pc, #32]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205dc:	2200      	movs	r2, #0
 80205de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80205e0:	4b06      	ldr	r3, [pc, #24]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205e2:	2200      	movs	r2, #0
 80205e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80205e6:	4805      	ldr	r0, [pc, #20]	; (80205fc <MX_USART1_UART_Init+0x58>)
 80205e8:	f002 fa2a 	bl	8022a40 <HAL_UART_Init>
 80205ec:	4603      	mov	r3, r0
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d001      	beq.n	80205f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80205f2:	f000 fa33 	bl	8020a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80205f6:	bf00      	nop
 80205f8:	bd80      	pop	{r7, pc}
 80205fa:	bf00      	nop
 80205fc:	20000028 	.word	0x20000028
 8020600:	40013800 	.word	0x40013800

08020604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020604:	b580      	push	{r7, lr}
 8020606:	b08a      	sub	sp, #40	; 0x28
 8020608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802060a:	f107 0314 	add.w	r3, r7, #20
 802060e:	2200      	movs	r2, #0
 8020610:	601a      	str	r2, [r3, #0]
 8020612:	605a      	str	r2, [r3, #4]
 8020614:	609a      	str	r2, [r3, #8]
 8020616:	60da      	str	r2, [r3, #12]
 8020618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802061a:	4bba      	ldr	r3, [pc, #744]	; (8020904 <MX_GPIO_Init+0x300>)
 802061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802061e:	4ab9      	ldr	r2, [pc, #740]	; (8020904 <MX_GPIO_Init+0x300>)
 8020620:	f043 0310 	orr.w	r3, r3, #16
 8020624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8020626:	4bb7      	ldr	r3, [pc, #732]	; (8020904 <MX_GPIO_Init+0x300>)
 8020628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802062a:	f003 0310 	and.w	r3, r3, #16
 802062e:	613b      	str	r3, [r7, #16]
 8020630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020632:	4bb4      	ldr	r3, [pc, #720]	; (8020904 <MX_GPIO_Init+0x300>)
 8020634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020636:	4ab3      	ldr	r2, [pc, #716]	; (8020904 <MX_GPIO_Init+0x300>)
 8020638:	f043 0304 	orr.w	r3, r3, #4
 802063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 802063e:	4bb1      	ldr	r3, [pc, #708]	; (8020904 <MX_GPIO_Init+0x300>)
 8020640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020642:	f003 0304 	and.w	r3, r3, #4
 8020646:	60fb      	str	r3, [r7, #12]
 8020648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802064a:	4bae      	ldr	r3, [pc, #696]	; (8020904 <MX_GPIO_Init+0x300>)
 802064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802064e:	4aad      	ldr	r2, [pc, #692]	; (8020904 <MX_GPIO_Init+0x300>)
 8020650:	f043 0301 	orr.w	r3, r3, #1
 8020654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8020656:	4bab      	ldr	r3, [pc, #684]	; (8020904 <MX_GPIO_Init+0x300>)
 8020658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802065a:	f003 0301 	and.w	r3, r3, #1
 802065e:	60bb      	str	r3, [r7, #8]
 8020660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020662:	4ba8      	ldr	r3, [pc, #672]	; (8020904 <MX_GPIO_Init+0x300>)
 8020664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020666:	4aa7      	ldr	r2, [pc, #668]	; (8020904 <MX_GPIO_Init+0x300>)
 8020668:	f043 0302 	orr.w	r3, r3, #2
 802066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 802066e:	4ba5      	ldr	r3, [pc, #660]	; (8020904 <MX_GPIO_Init+0x300>)
 8020670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020672:	f003 0302 	and.w	r3, r3, #2
 8020676:	607b      	str	r3, [r7, #4]
 8020678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802067a:	4ba2      	ldr	r3, [pc, #648]	; (8020904 <MX_GPIO_Init+0x300>)
 802067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802067e:	4aa1      	ldr	r2, [pc, #644]	; (8020904 <MX_GPIO_Init+0x300>)
 8020680:	f043 0308 	orr.w	r3, r3, #8
 8020684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8020686:	4b9f      	ldr	r3, [pc, #636]	; (8020904 <MX_GPIO_Init+0x300>)
 8020688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802068a:	f003 0308 	and.w	r3, r3, #8
 802068e:	603b      	str	r3, [r7, #0]
 8020690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8020692:	2200      	movs	r2, #0
 8020694:	f44f 718a 	mov.w	r1, #276	; 0x114
 8020698:	489b      	ldr	r0, [pc, #620]	; (8020908 <MX_GPIO_Init+0x304>)
 802069a:	f000 fe6f 	bl	802137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 802069e:	2200      	movs	r2, #0
 80206a0:	f248 1104 	movw	r1, #33028	; 0x8104
 80206a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80206a8:	f000 fe68 	bl	802137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80206ac:	2200      	movs	r2, #0
 80206ae:	f24f 0114 	movw	r1, #61460	; 0xf014
 80206b2:	4896      	ldr	r0, [pc, #600]	; (802090c <MX_GPIO_Init+0x308>)
 80206b4:	f000 fe62 	bl	802137c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80206b8:	2200      	movs	r2, #0
 80206ba:	f241 0181 	movw	r1, #4225	; 0x1081
 80206be:	4894      	ldr	r0, [pc, #592]	; (8020910 <MX_GPIO_Init+0x30c>)
 80206c0:	f000 fe5c 	bl	802137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80206c4:	2201      	movs	r2, #1
 80206c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80206ca:	4891      	ldr	r0, [pc, #580]	; (8020910 <MX_GPIO_Init+0x30c>)
 80206cc:	f000 fe56 	bl	802137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80206d0:	2200      	movs	r2, #0
 80206d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80206d6:	488f      	ldr	r0, [pc, #572]	; (8020914 <MX_GPIO_Init+0x310>)
 80206d8:	f000 fe50 	bl	802137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80206dc:	2201      	movs	r2, #1
 80206de:	2120      	movs	r1, #32
 80206e0:	488a      	ldr	r0, [pc, #552]	; (802090c <MX_GPIO_Init+0x308>)
 80206e2:	f000 fe4b 	bl	802137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80206e6:	2201      	movs	r2, #1
 80206e8:	2101      	movs	r1, #1
 80206ea:	4887      	ldr	r0, [pc, #540]	; (8020908 <MX_GPIO_Init+0x304>)
 80206ec:	f000 fe46 	bl	802137c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80206f0:	f240 1315 	movw	r3, #277	; 0x115
 80206f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80206f6:	2301      	movs	r3, #1
 80206f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80206fa:	2300      	movs	r3, #0
 80206fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80206fe:	2300      	movs	r3, #0
 8020700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8020702:	f107 0314 	add.w	r3, r7, #20
 8020706:	4619      	mov	r1, r3
 8020708:	487f      	ldr	r0, [pc, #508]	; (8020908 <MX_GPIO_Init+0x304>)
 802070a:	f000 fc8d 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 802070e:	236a      	movs	r3, #106	; 0x6a
 8020710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8020712:	4b81      	ldr	r3, [pc, #516]	; (8020918 <MX_GPIO_Init+0x314>)
 8020714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020716:	2300      	movs	r3, #0
 8020718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802071a:	f107 0314 	add.w	r3, r7, #20
 802071e:	4619      	mov	r1, r3
 8020720:	4879      	ldr	r0, [pc, #484]	; (8020908 <MX_GPIO_Init+0x304>)
 8020722:	f000 fc81 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8020726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 802072c:	4b7b      	ldr	r3, [pc, #492]	; (802091c <MX_GPIO_Init+0x318>)
 802072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020730:	2300      	movs	r3, #0
 8020732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8020734:	f107 0314 	add.w	r3, r7, #20
 8020738:	4619      	mov	r1, r3
 802073a:	4876      	ldr	r0, [pc, #472]	; (8020914 <MX_GPIO_Init+0x310>)
 802073c:	f000 fc74 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8020740:	233f      	movs	r3, #63	; 0x3f
 8020742:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8020744:	230b      	movs	r3, #11
 8020746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020748:	2300      	movs	r3, #0
 802074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802074c:	f107 0314 	add.w	r3, r7, #20
 8020750:	4619      	mov	r1, r3
 8020752:	4870      	ldr	r0, [pc, #448]	; (8020914 <MX_GPIO_Init+0x310>)
 8020754:	f000 fc68 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8020758:	2303      	movs	r3, #3
 802075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802075c:	2302      	movs	r3, #2
 802075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020760:	2300      	movs	r3, #0
 8020762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020764:	2303      	movs	r3, #3
 8020766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8020768:	2308      	movs	r3, #8
 802076a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802076c:	f107 0314 	add.w	r3, r7, #20
 8020770:	4619      	mov	r1, r3
 8020772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8020776:	f000 fc57 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 802077a:	f248 1304 	movw	r3, #33028	; 0x8104
 802077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020780:	2301      	movs	r3, #1
 8020782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020784:	2300      	movs	r3, #0
 8020786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020788:	2300      	movs	r3, #0
 802078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802078c:	f107 0314 	add.w	r3, r7, #20
 8020790:	4619      	mov	r1, r3
 8020792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8020796:	f000 fc47 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 802079a:	2308      	movs	r3, #8
 802079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802079e:	2302      	movs	r3, #2
 80207a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80207a2:	2300      	movs	r3, #0
 80207a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80207a6:	2300      	movs	r3, #0
 80207a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80207aa:	2301      	movs	r3, #1
 80207ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80207ae:	f107 0314 	add.w	r3, r7, #20
 80207b2:	4619      	mov	r1, r3
 80207b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80207b8:	f000 fc36 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80207bc:	2310      	movs	r3, #16
 80207be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80207c0:	230b      	movs	r3, #11
 80207c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80207c4:	2300      	movs	r3, #0
 80207c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80207c8:	f107 0314 	add.w	r3, r7, #20
 80207cc:	4619      	mov	r1, r3
 80207ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80207d2:	f000 fc29 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80207d6:	23e0      	movs	r3, #224	; 0xe0
 80207d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80207da:	2302      	movs	r3, #2
 80207dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80207de:	2300      	movs	r3, #0
 80207e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80207e2:	2303      	movs	r3, #3
 80207e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80207e6:	2305      	movs	r3, #5
 80207e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80207ea:	f107 0314 	add.w	r3, r7, #20
 80207ee:	4619      	mov	r1, r3
 80207f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80207f4:	f000 fc18 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80207f8:	2301      	movs	r3, #1
 80207fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80207fc:	4b46      	ldr	r3, [pc, #280]	; (8020918 <MX_GPIO_Init+0x314>)
 80207fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020800:	2300      	movs	r3, #0
 8020802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8020804:	f107 0314 	add.w	r3, r7, #20
 8020808:	4619      	mov	r1, r3
 802080a:	4840      	ldr	r0, [pc, #256]	; (802090c <MX_GPIO_Init+0x308>)
 802080c:	f000 fc0c 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8020810:	2302      	movs	r3, #2
 8020812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8020814:	230b      	movs	r3, #11
 8020816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020818:	2300      	movs	r3, #0
 802081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 802081c:	f107 0314 	add.w	r3, r7, #20
 8020820:	4619      	mov	r1, r3
 8020822:	483a      	ldr	r0, [pc, #232]	; (802090c <MX_GPIO_Init+0x308>)
 8020824:	f000 fc00 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8020828:	f24f 0334 	movw	r3, #61492	; 0xf034
 802082c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802082e:	2301      	movs	r3, #1
 8020830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020832:	2300      	movs	r3, #0
 8020834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020836:	2300      	movs	r3, #0
 8020838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802083a:	f107 0314 	add.w	r3, r7, #20
 802083e:	4619      	mov	r1, r3
 8020840:	4832      	ldr	r0, [pc, #200]	; (802090c <MX_GPIO_Init+0x308>)
 8020842:	f000 fbf1 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8020846:	f44f 7320 	mov.w	r3, #640	; 0x280
 802084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802084c:	2302      	movs	r3, #2
 802084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020850:	2300      	movs	r3, #0
 8020852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020854:	2300      	movs	r3, #0
 8020856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8020858:	2306      	movs	r3, #6
 802085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802085c:	f107 0314 	add.w	r3, r7, #20
 8020860:	4619      	mov	r1, r3
 8020862:	4829      	ldr	r0, [pc, #164]	; (8020908 <MX_GPIO_Init+0x304>)
 8020864:	f000 fbe0 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8020868:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 802086c:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802086e:	2302      	movs	r3, #2
 8020870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020872:	2300      	movs	r3, #0
 8020874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020876:	2303      	movs	r3, #3
 8020878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 802087a:	230a      	movs	r3, #10
 802087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802087e:	f107 0314 	add.w	r3, r7, #20
 8020882:	4619      	mov	r1, r3
 8020884:	4820      	ldr	r0, [pc, #128]	; (8020908 <MX_GPIO_Init+0x304>)
 8020886:	f000 fbcf 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 802088a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020890:	2312      	movs	r3, #18
 8020892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020894:	2300      	movs	r3, #0
 8020896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020898:	2303      	movs	r3, #3
 802089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802089c:	2304      	movs	r3, #4
 802089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80208a0:	f107 0314 	add.w	r3, r7, #20
 80208a4:	4619      	mov	r1, r3
 80208a6:	4819      	ldr	r0, [pc, #100]	; (802090c <MX_GPIO_Init+0x308>)
 80208a8:	f000 fbbe 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80208ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80208b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80208b2:	2302      	movs	r3, #2
 80208b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208b6:	2300      	movs	r3, #0
 80208b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80208ba:	2303      	movs	r3, #3
 80208bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80208be:	2307      	movs	r3, #7
 80208c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80208c2:	f107 0314 	add.w	r3, r7, #20
 80208c6:	4619      	mov	r1, r3
 80208c8:	4811      	ldr	r0, [pc, #68]	; (8020910 <MX_GPIO_Init+0x30c>)
 80208ca:	f000 fbad 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80208ce:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80208d2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80208d4:	4b10      	ldr	r3, [pc, #64]	; (8020918 <MX_GPIO_Init+0x314>)
 80208d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208d8:	2300      	movs	r3, #0
 80208da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80208dc:	f107 0314 	add.w	r3, r7, #20
 80208e0:	4619      	mov	r1, r3
 80208e2:	480b      	ldr	r0, [pc, #44]	; (8020910 <MX_GPIO_Init+0x30c>)
 80208e4:	f000 fba0 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80208e8:	f243 0381 	movw	r3, #12417	; 0x3081
 80208ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80208ee:	2301      	movs	r3, #1
 80208f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208f2:	2300      	movs	r3, #0
 80208f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80208f6:	2300      	movs	r3, #0
 80208f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80208fa:	f107 0314 	add.w	r3, r7, #20
 80208fe:	4619      	mov	r1, r3
 8020900:	e00e      	b.n	8020920 <MX_GPIO_Init+0x31c>
 8020902:	bf00      	nop
 8020904:	40021000 	.word	0x40021000
 8020908:	48001000 	.word	0x48001000
 802090c:	48000400 	.word	0x48000400
 8020910:	48000c00 	.word	0x48000c00
 8020914:	48000800 	.word	0x48000800
 8020918:	10110000 	.word	0x10110000
 802091c:	10210000 	.word	0x10210000
 8020920:	484a      	ldr	r0, [pc, #296]	; (8020a4c <MX_GPIO_Init+0x448>)
 8020922:	f000 fb81 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8020926:	f44f 7310 	mov.w	r3, #576	; 0x240
 802092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802092c:	2301      	movs	r3, #1
 802092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020930:	2300      	movs	r3, #0
 8020932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020934:	2300      	movs	r3, #0
 8020936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020938:	f107 0314 	add.w	r3, r7, #20
 802093c:	4619      	mov	r1, r3
 802093e:	4844      	ldr	r0, [pc, #272]	; (8020a50 <MX_GPIO_Init+0x44c>)
 8020940:	f000 fb72 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8020944:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8020948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 802094a:	4b42      	ldr	r3, [pc, #264]	; (8020a54 <MX_GPIO_Init+0x450>)
 802094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802094e:	2300      	movs	r3, #0
 8020950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020952:	f107 0314 	add.w	r3, r7, #20
 8020956:	4619      	mov	r1, r3
 8020958:	483d      	ldr	r0, [pc, #244]	; (8020a50 <MX_GPIO_Init+0x44c>)
 802095a:	f000 fb65 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 802095e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020964:	2300      	movs	r3, #0
 8020966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020968:	2300      	movs	r3, #0
 802096a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 802096c:	f107 0314 	add.w	r3, r7, #20
 8020970:	4619      	mov	r1, r3
 8020972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8020976:	f000 fb57 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 802097a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 802097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020980:	2302      	movs	r3, #2
 8020982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020984:	2300      	movs	r3, #0
 8020986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020988:	2303      	movs	r3, #3
 802098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802098c:	230a      	movs	r3, #10
 802098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020990:	f107 0314 	add.w	r3, r7, #20
 8020994:	4619      	mov	r1, r3
 8020996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 802099a:	f000 fb45 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 802099e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80209a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80209a4:	2302      	movs	r3, #2
 80209a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80209a8:	2300      	movs	r3, #0
 80209aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80209ac:	2303      	movs	r3, #3
 80209ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80209b0:	2306      	movs	r3, #6
 80209b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80209b4:	f107 0314 	add.w	r3, r7, #20
 80209b8:	4619      	mov	r1, r3
 80209ba:	4825      	ldr	r0, [pc, #148]	; (8020a50 <MX_GPIO_Init+0x44c>)
 80209bc:	f000 fb34 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80209c0:	2302      	movs	r3, #2
 80209c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80209c4:	2302      	movs	r3, #2
 80209c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80209c8:	2300      	movs	r3, #0
 80209ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80209cc:	2303      	movs	r3, #3
 80209ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80209d0:	2305      	movs	r3, #5
 80209d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80209d4:	f107 0314 	add.w	r3, r7, #20
 80209d8:	4619      	mov	r1, r3
 80209da:	481c      	ldr	r0, [pc, #112]	; (8020a4c <MX_GPIO_Init+0x448>)
 80209dc:	f000 fb24 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80209e0:	2378      	movs	r3, #120	; 0x78
 80209e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80209e4:	2302      	movs	r3, #2
 80209e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80209e8:	2300      	movs	r3, #0
 80209ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80209ec:	2303      	movs	r3, #3
 80209ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80209f0:	2307      	movs	r3, #7
 80209f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80209f4:	f107 0314 	add.w	r3, r7, #20
 80209f8:	4619      	mov	r1, r3
 80209fa:	4814      	ldr	r0, [pc, #80]	; (8020a4c <MX_GPIO_Init+0x448>)
 80209fc:	f000 fb14 	bl	8021028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8020a00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8020a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020a06:	2312      	movs	r3, #18
 8020a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a0a:	2300      	movs	r3, #0
 8020a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a0e:	2303      	movs	r3, #3
 8020a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8020a12:	2304      	movs	r3, #4
 8020a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020a16:	f107 0314 	add.w	r3, r7, #20
 8020a1a:	4619      	mov	r1, r3
 8020a1c:	480e      	ldr	r0, [pc, #56]	; (8020a58 <MX_GPIO_Init+0x454>)
 8020a1e:	f000 fb03 	bl	8021028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8020a22:	2200      	movs	r2, #0
 8020a24:	2100      	movs	r1, #0
 8020a26:	2017      	movs	r0, #23
 8020a28:	f000 fac7 	bl	8020fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8020a2c:	2017      	movs	r0, #23
 8020a2e:	f000 fae0 	bl	8020ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8020a32:	2200      	movs	r2, #0
 8020a34:	2100      	movs	r1, #0
 8020a36:	2028      	movs	r0, #40	; 0x28
 8020a38:	f000 fabf 	bl	8020fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8020a3c:	2028      	movs	r0, #40	; 0x28
 8020a3e:	f000 fad8 	bl	8020ff2 <HAL_NVIC_EnableIRQ>

}
 8020a42:	bf00      	nop
 8020a44:	3728      	adds	r7, #40	; 0x28
 8020a46:	46bd      	mov	sp, r7
 8020a48:	bd80      	pop	{r7, pc}
 8020a4a:	bf00      	nop
 8020a4c:	48000c00 	.word	0x48000c00
 8020a50:	48000800 	.word	0x48000800
 8020a54:	10110000 	.word	0x10110000
 8020a58:	48000400 	.word	0x48000400

08020a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020a5c:	b480      	push	{r7}
 8020a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020a60:	b672      	cpsid	i
}
 8020a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020a64:	e7fe      	b.n	8020a64 <Error_Handler+0x8>
	...

08020a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020a68:	b480      	push	{r7}
 8020a6a:	b083      	sub	sp, #12
 8020a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020a6e:	4b0f      	ldr	r3, [pc, #60]	; (8020aac <HAL_MspInit+0x44>)
 8020a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020a72:	4a0e      	ldr	r2, [pc, #56]	; (8020aac <HAL_MspInit+0x44>)
 8020a74:	f043 0301 	orr.w	r3, r3, #1
 8020a78:	6613      	str	r3, [r2, #96]	; 0x60
 8020a7a:	4b0c      	ldr	r3, [pc, #48]	; (8020aac <HAL_MspInit+0x44>)
 8020a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020a7e:	f003 0301 	and.w	r3, r3, #1
 8020a82:	607b      	str	r3, [r7, #4]
 8020a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020a86:	4b09      	ldr	r3, [pc, #36]	; (8020aac <HAL_MspInit+0x44>)
 8020a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020a8a:	4a08      	ldr	r2, [pc, #32]	; (8020aac <HAL_MspInit+0x44>)
 8020a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020a90:	6593      	str	r3, [r2, #88]	; 0x58
 8020a92:	4b06      	ldr	r3, [pc, #24]	; (8020aac <HAL_MspInit+0x44>)
 8020a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020a9a:	603b      	str	r3, [r7, #0]
 8020a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020a9e:	bf00      	nop
 8020aa0:	370c      	adds	r7, #12
 8020aa2:	46bd      	mov	sp, r7
 8020aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aa8:	4770      	bx	lr
 8020aaa:	bf00      	nop
 8020aac:	40021000 	.word	0x40021000

08020ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8020ab0:	b580      	push	{r7, lr}
 8020ab2:	b0ac      	sub	sp, #176	; 0xb0
 8020ab4:	af00      	add	r7, sp, #0
 8020ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020ab8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8020abc:	2200      	movs	r2, #0
 8020abe:	601a      	str	r2, [r3, #0]
 8020ac0:	605a      	str	r2, [r3, #4]
 8020ac2:	609a      	str	r2, [r3, #8]
 8020ac4:	60da      	str	r2, [r3, #12]
 8020ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8020ac8:	f107 0314 	add.w	r3, r7, #20
 8020acc:	2288      	movs	r2, #136	; 0x88
 8020ace:	2100      	movs	r1, #0
 8020ad0:	4618      	mov	r0, r3
 8020ad2:	f002 fcad 	bl	8023430 <memset>
  if(huart->Instance==USART1)
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	681b      	ldr	r3, [r3, #0]
 8020ada:	4a21      	ldr	r2, [pc, #132]	; (8020b60 <HAL_UART_MspInit+0xb0>)
 8020adc:	4293      	cmp	r3, r2
 8020ade:	d13a      	bne.n	8020b56 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8020ae0:	2301      	movs	r3, #1
 8020ae2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8020ae8:	f107 0314 	add.w	r3, r7, #20
 8020aec:	4618      	mov	r0, r3
 8020aee:	f001 faeb 	bl	80220c8 <HAL_RCCEx_PeriphCLKConfig>
 8020af2:	4603      	mov	r3, r0
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	d001      	beq.n	8020afc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8020af8:	f7ff ffb0 	bl	8020a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8020afc:	4b19      	ldr	r3, [pc, #100]	; (8020b64 <HAL_UART_MspInit+0xb4>)
 8020afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020b00:	4a18      	ldr	r2, [pc, #96]	; (8020b64 <HAL_UART_MspInit+0xb4>)
 8020b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020b06:	6613      	str	r3, [r2, #96]	; 0x60
 8020b08:	4b16      	ldr	r3, [pc, #88]	; (8020b64 <HAL_UART_MspInit+0xb4>)
 8020b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020b10:	613b      	str	r3, [r7, #16]
 8020b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020b14:	4b13      	ldr	r3, [pc, #76]	; (8020b64 <HAL_UART_MspInit+0xb4>)
 8020b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020b18:	4a12      	ldr	r2, [pc, #72]	; (8020b64 <HAL_UART_MspInit+0xb4>)
 8020b1a:	f043 0302 	orr.w	r3, r3, #2
 8020b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8020b20:	4b10      	ldr	r3, [pc, #64]	; (8020b64 <HAL_UART_MspInit+0xb4>)
 8020b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020b24:	f003 0302 	and.w	r3, r3, #2
 8020b28:	60fb      	str	r3, [r7, #12]
 8020b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8020b2c:	23c0      	movs	r3, #192	; 0xc0
 8020b2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020b32:	2302      	movs	r3, #2
 8020b34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020b38:	2300      	movs	r3, #0
 8020b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020b3e:	2303      	movs	r3, #3
 8020b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8020b44:	2307      	movs	r3, #7
 8020b46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020b4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8020b4e:	4619      	mov	r1, r3
 8020b50:	4805      	ldr	r0, [pc, #20]	; (8020b68 <HAL_UART_MspInit+0xb8>)
 8020b52:	f000 fa69 	bl	8021028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8020b56:	bf00      	nop
 8020b58:	37b0      	adds	r7, #176	; 0xb0
 8020b5a:	46bd      	mov	sp, r7
 8020b5c:	bd80      	pop	{r7, pc}
 8020b5e:	bf00      	nop
 8020b60:	40013800 	.word	0x40013800
 8020b64:	40021000 	.word	0x40021000
 8020b68:	48000400 	.word	0x48000400

08020b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020b6c:	b480      	push	{r7}
 8020b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020b70:	e7fe      	b.n	8020b70 <NMI_Handler+0x4>

08020b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020b72:	b480      	push	{r7}
 8020b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020b76:	e7fe      	b.n	8020b76 <HardFault_Handler+0x4>

08020b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020b78:	b480      	push	{r7}
 8020b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020b7c:	e7fe      	b.n	8020b7c <MemManage_Handler+0x4>

08020b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020b7e:	b480      	push	{r7}
 8020b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020b82:	e7fe      	b.n	8020b82 <BusFault_Handler+0x4>

08020b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020b84:	b480      	push	{r7}
 8020b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020b88:	e7fe      	b.n	8020b88 <UsageFault_Handler+0x4>

08020b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020b8a:	b480      	push	{r7}
 8020b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020b8e:	bf00      	nop
 8020b90:	46bd      	mov	sp, r7
 8020b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b96:	4770      	bx	lr

08020b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020b98:	b480      	push	{r7}
 8020b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020b9c:	bf00      	nop
 8020b9e:	46bd      	mov	sp, r7
 8020ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ba4:	4770      	bx	lr

08020ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020ba6:	b480      	push	{r7}
 8020ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020baa:	bf00      	nop
 8020bac:	46bd      	mov	sp, r7
 8020bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bb2:	4770      	bx	lr

08020bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020bb4:	b580      	push	{r7, lr}
 8020bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020bb8:	f000 f8e0 	bl	8020d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020bbc:	bf00      	nop
 8020bbe:	bd80      	pop	{r7, pc}

08020bc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8020bc0:	b580      	push	{r7, lr}
 8020bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8020bc4:	2020      	movs	r0, #32
 8020bc6:	f000 fc0b 	bl	80213e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8020bca:	2040      	movs	r0, #64	; 0x40
 8020bcc:	f000 fc08 	bl	80213e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8020bd0:	2080      	movs	r0, #128	; 0x80
 8020bd2:	f000 fc05 	bl	80213e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8020bd6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8020bda:	f000 fc01 	bl	80213e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8020bde:	bf00      	nop
 8020be0:	bd80      	pop	{r7, pc}

08020be2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8020be2:	b580      	push	{r7, lr}
 8020be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8020be6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8020bea:	f000 fbf9 	bl	80213e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8020bee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8020bf2:	f000 fbf5 	bl	80213e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8020bf6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8020bfa:	f000 fbf1 	bl	80213e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8020bfe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8020c02:	f000 fbed 	bl	80213e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8020c06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8020c0a:	f000 fbe9 	bl	80213e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8020c0e:	bf00      	nop
 8020c10:	bd80      	pop	{r7, pc}
	...

08020c14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8020c14:	b480      	push	{r7}
 8020c16:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8020c18:	4b16      	ldr	r3, [pc, #88]	; (8020c74 <SystemInit+0x60>)
 8020c1a:	4a17      	ldr	r2, [pc, #92]	; (8020c78 <SystemInit+0x64>)
 8020c1c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8020c1e:	4b15      	ldr	r3, [pc, #84]	; (8020c74 <SystemInit+0x60>)
 8020c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020c24:	4a13      	ldr	r2, [pc, #76]	; (8020c74 <SystemInit+0x60>)
 8020c26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020c2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8020c2e:	4b13      	ldr	r3, [pc, #76]	; (8020c7c <SystemInit+0x68>)
 8020c30:	681b      	ldr	r3, [r3, #0]
 8020c32:	4a12      	ldr	r2, [pc, #72]	; (8020c7c <SystemInit+0x68>)
 8020c34:	f043 0301 	orr.w	r3, r3, #1
 8020c38:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8020c3a:	4b10      	ldr	r3, [pc, #64]	; (8020c7c <SystemInit+0x68>)
 8020c3c:	2200      	movs	r2, #0
 8020c3e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8020c40:	4b0e      	ldr	r3, [pc, #56]	; (8020c7c <SystemInit+0x68>)
 8020c42:	681b      	ldr	r3, [r3, #0]
 8020c44:	4a0d      	ldr	r2, [pc, #52]	; (8020c7c <SystemInit+0x68>)
 8020c46:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8020c4a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8020c4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8020c50:	4b0a      	ldr	r3, [pc, #40]	; (8020c7c <SystemInit+0x68>)
 8020c52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020c56:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8020c58:	4b08      	ldr	r3, [pc, #32]	; (8020c7c <SystemInit+0x68>)
 8020c5a:	681b      	ldr	r3, [r3, #0]
 8020c5c:	4a07      	ldr	r2, [pc, #28]	; (8020c7c <SystemInit+0x68>)
 8020c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8020c62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8020c64:	4b05      	ldr	r3, [pc, #20]	; (8020c7c <SystemInit+0x68>)
 8020c66:	2200      	movs	r2, #0
 8020c68:	619a      	str	r2, [r3, #24]
}
 8020c6a:	bf00      	nop
 8020c6c:	46bd      	mov	sp, r7
 8020c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c72:	4770      	bx	lr
 8020c74:	e000ed00 	.word	0xe000ed00
 8020c78:	08020000 	.word	0x08020000
 8020c7c:	40021000 	.word	0x40021000

08020c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8020c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020cb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8020c84:	f7ff ffc6 	bl	8020c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8020c88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8020c8a:	e003      	b.n	8020c94 <LoopCopyDataInit>

08020c8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8020c8c:	4b0b      	ldr	r3, [pc, #44]	; (8020cbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8020c8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8020c90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8020c92:	3104      	adds	r1, #4

08020c94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8020c94:	480a      	ldr	r0, [pc, #40]	; (8020cc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8020c96:	4b0b      	ldr	r3, [pc, #44]	; (8020cc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8020c98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8020c9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8020c9c:	d3f6      	bcc.n	8020c8c <CopyDataInit>
	ldr	r2, =_sbss
 8020c9e:	4a0a      	ldr	r2, [pc, #40]	; (8020cc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8020ca0:	e002      	b.n	8020ca8 <LoopFillZerobss>

08020ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8020ca2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8020ca4:	f842 3b04 	str.w	r3, [r2], #4

08020ca8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8020ca8:	4b08      	ldr	r3, [pc, #32]	; (8020ccc <LoopForever+0x16>)
	cmp	r2, r3
 8020caa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8020cac:	d3f9      	bcc.n	8020ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8020cae:	f002 fb9b 	bl	80233e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8020cb2:	f7ff fc05 	bl	80204c0 <main>

08020cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8020cb6:	e7fe      	b.n	8020cb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8020cb8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8020cbc:	080234c4 	.word	0x080234c4
	ldr	r0, =_sdata
 8020cc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8020cc4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8020cc8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8020ccc:	200000b0 	.word	0x200000b0

08020cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8020cd0:	e7fe      	b.n	8020cd0 <ADC1_2_IRQHandler>

08020cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020cd2:	b580      	push	{r7, lr}
 8020cd4:	b082      	sub	sp, #8
 8020cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8020cd8:	2300      	movs	r3, #0
 8020cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020cdc:	2003      	movs	r0, #3
 8020cde:	f000 f961 	bl	8020fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8020ce2:	2000      	movs	r0, #0
 8020ce4:	f000 f80e 	bl	8020d04 <HAL_InitTick>
 8020ce8:	4603      	mov	r3, r0
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	d002      	beq.n	8020cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8020cee:	2301      	movs	r3, #1
 8020cf0:	71fb      	strb	r3, [r7, #7]
 8020cf2:	e001      	b.n	8020cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8020cf4:	f7ff feb8 	bl	8020a68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020cf8:	79fb      	ldrb	r3, [r7, #7]
}
 8020cfa:	4618      	mov	r0, r3
 8020cfc:	3708      	adds	r7, #8
 8020cfe:	46bd      	mov	sp, r7
 8020d00:	bd80      	pop	{r7, pc}
	...

08020d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020d04:	b580      	push	{r7, lr}
 8020d06:	b084      	sub	sp, #16
 8020d08:	af00      	add	r7, sp, #0
 8020d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8020d10:	4b17      	ldr	r3, [pc, #92]	; (8020d70 <HAL_InitTick+0x6c>)
 8020d12:	781b      	ldrb	r3, [r3, #0]
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	d023      	beq.n	8020d60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8020d18:	4b16      	ldr	r3, [pc, #88]	; (8020d74 <HAL_InitTick+0x70>)
 8020d1a:	681a      	ldr	r2, [r3, #0]
 8020d1c:	4b14      	ldr	r3, [pc, #80]	; (8020d70 <HAL_InitTick+0x6c>)
 8020d1e:	781b      	ldrb	r3, [r3, #0]
 8020d20:	4619      	mov	r1, r3
 8020d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8020d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8020d2e:	4618      	mov	r0, r3
 8020d30:	f000 f96d 	bl	802100e <HAL_SYSTICK_Config>
 8020d34:	4603      	mov	r3, r0
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d10f      	bne.n	8020d5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	2b0f      	cmp	r3, #15
 8020d3e:	d809      	bhi.n	8020d54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020d40:	2200      	movs	r2, #0
 8020d42:	6879      	ldr	r1, [r7, #4]
 8020d44:	f04f 30ff 	mov.w	r0, #4294967295
 8020d48:	f000 f937 	bl	8020fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020d4c:	4a0a      	ldr	r2, [pc, #40]	; (8020d78 <HAL_InitTick+0x74>)
 8020d4e:	687b      	ldr	r3, [r7, #4]
 8020d50:	6013      	str	r3, [r2, #0]
 8020d52:	e007      	b.n	8020d64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8020d54:	2301      	movs	r3, #1
 8020d56:	73fb      	strb	r3, [r7, #15]
 8020d58:	e004      	b.n	8020d64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8020d5a:	2301      	movs	r3, #1
 8020d5c:	73fb      	strb	r3, [r7, #15]
 8020d5e:	e001      	b.n	8020d64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8020d60:	2301      	movs	r3, #1
 8020d62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8020d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8020d66:	4618      	mov	r0, r3
 8020d68:	3710      	adds	r7, #16
 8020d6a:	46bd      	mov	sp, r7
 8020d6c:	bd80      	pop	{r7, pc}
 8020d6e:	bf00      	nop
 8020d70:	20000008 	.word	0x20000008
 8020d74:	20000000 	.word	0x20000000
 8020d78:	20000004 	.word	0x20000004

08020d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020d7c:	b480      	push	{r7}
 8020d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8020d80:	4b06      	ldr	r3, [pc, #24]	; (8020d9c <HAL_IncTick+0x20>)
 8020d82:	781b      	ldrb	r3, [r3, #0]
 8020d84:	461a      	mov	r2, r3
 8020d86:	4b06      	ldr	r3, [pc, #24]	; (8020da0 <HAL_IncTick+0x24>)
 8020d88:	681b      	ldr	r3, [r3, #0]
 8020d8a:	4413      	add	r3, r2
 8020d8c:	4a04      	ldr	r2, [pc, #16]	; (8020da0 <HAL_IncTick+0x24>)
 8020d8e:	6013      	str	r3, [r2, #0]
}
 8020d90:	bf00      	nop
 8020d92:	46bd      	mov	sp, r7
 8020d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d98:	4770      	bx	lr
 8020d9a:	bf00      	nop
 8020d9c:	20000008 	.word	0x20000008
 8020da0:	200000ac 	.word	0x200000ac

08020da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020da4:	b480      	push	{r7}
 8020da6:	af00      	add	r7, sp, #0
  return uwTick;
 8020da8:	4b03      	ldr	r3, [pc, #12]	; (8020db8 <HAL_GetTick+0x14>)
 8020daa:	681b      	ldr	r3, [r3, #0]
}
 8020dac:	4618      	mov	r0, r3
 8020dae:	46bd      	mov	sp, r7
 8020db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020db4:	4770      	bx	lr
 8020db6:	bf00      	nop
 8020db8:	200000ac 	.word	0x200000ac

08020dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020dbc:	b580      	push	{r7, lr}
 8020dbe:	b084      	sub	sp, #16
 8020dc0:	af00      	add	r7, sp, #0
 8020dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020dc4:	f7ff ffee 	bl	8020da4 <HAL_GetTick>
 8020dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020dce:	68fb      	ldr	r3, [r7, #12]
 8020dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020dd4:	d005      	beq.n	8020de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8020dd6:	4b0a      	ldr	r3, [pc, #40]	; (8020e00 <HAL_Delay+0x44>)
 8020dd8:	781b      	ldrb	r3, [r3, #0]
 8020dda:	461a      	mov	r2, r3
 8020ddc:	68fb      	ldr	r3, [r7, #12]
 8020dde:	4413      	add	r3, r2
 8020de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8020de2:	bf00      	nop
 8020de4:	f7ff ffde 	bl	8020da4 <HAL_GetTick>
 8020de8:	4602      	mov	r2, r0
 8020dea:	68bb      	ldr	r3, [r7, #8]
 8020dec:	1ad3      	subs	r3, r2, r3
 8020dee:	68fa      	ldr	r2, [r7, #12]
 8020df0:	429a      	cmp	r2, r3
 8020df2:	d8f7      	bhi.n	8020de4 <HAL_Delay+0x28>
  {
  }
}
 8020df4:	bf00      	nop
 8020df6:	bf00      	nop
 8020df8:	3710      	adds	r7, #16
 8020dfa:	46bd      	mov	sp, r7
 8020dfc:	bd80      	pop	{r7, pc}
 8020dfe:	bf00      	nop
 8020e00:	20000008 	.word	0x20000008

08020e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020e04:	b480      	push	{r7}
 8020e06:	b085      	sub	sp, #20
 8020e08:	af00      	add	r7, sp, #0
 8020e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020e0c:	687b      	ldr	r3, [r7, #4]
 8020e0e:	f003 0307 	and.w	r3, r3, #7
 8020e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020e14:	4b0c      	ldr	r3, [pc, #48]	; (8020e48 <__NVIC_SetPriorityGrouping+0x44>)
 8020e16:	68db      	ldr	r3, [r3, #12]
 8020e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020e1a:	68ba      	ldr	r2, [r7, #8]
 8020e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020e20:	4013      	ands	r3, r2
 8020e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020e24:	68fb      	ldr	r3, [r7, #12]
 8020e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020e28:	68bb      	ldr	r3, [r7, #8]
 8020e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020e36:	4a04      	ldr	r2, [pc, #16]	; (8020e48 <__NVIC_SetPriorityGrouping+0x44>)
 8020e38:	68bb      	ldr	r3, [r7, #8]
 8020e3a:	60d3      	str	r3, [r2, #12]
}
 8020e3c:	bf00      	nop
 8020e3e:	3714      	adds	r7, #20
 8020e40:	46bd      	mov	sp, r7
 8020e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e46:	4770      	bx	lr
 8020e48:	e000ed00 	.word	0xe000ed00

08020e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020e4c:	b480      	push	{r7}
 8020e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020e50:	4b04      	ldr	r3, [pc, #16]	; (8020e64 <__NVIC_GetPriorityGrouping+0x18>)
 8020e52:	68db      	ldr	r3, [r3, #12]
 8020e54:	0a1b      	lsrs	r3, r3, #8
 8020e56:	f003 0307 	and.w	r3, r3, #7
}
 8020e5a:	4618      	mov	r0, r3
 8020e5c:	46bd      	mov	sp, r7
 8020e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e62:	4770      	bx	lr
 8020e64:	e000ed00 	.word	0xe000ed00

08020e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020e68:	b480      	push	{r7}
 8020e6a:	b083      	sub	sp, #12
 8020e6c:	af00      	add	r7, sp, #0
 8020e6e:	4603      	mov	r3, r0
 8020e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	db0b      	blt.n	8020e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8020e7a:	79fb      	ldrb	r3, [r7, #7]
 8020e7c:	f003 021f 	and.w	r2, r3, #31
 8020e80:	4907      	ldr	r1, [pc, #28]	; (8020ea0 <__NVIC_EnableIRQ+0x38>)
 8020e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020e86:	095b      	lsrs	r3, r3, #5
 8020e88:	2001      	movs	r0, #1
 8020e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8020e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8020e92:	bf00      	nop
 8020e94:	370c      	adds	r7, #12
 8020e96:	46bd      	mov	sp, r7
 8020e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e9c:	4770      	bx	lr
 8020e9e:	bf00      	nop
 8020ea0:	e000e100 	.word	0xe000e100

08020ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020ea4:	b480      	push	{r7}
 8020ea6:	b083      	sub	sp, #12
 8020ea8:	af00      	add	r7, sp, #0
 8020eaa:	4603      	mov	r3, r0
 8020eac:	6039      	str	r1, [r7, #0]
 8020eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	db0a      	blt.n	8020ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020eb8:	683b      	ldr	r3, [r7, #0]
 8020eba:	b2da      	uxtb	r2, r3
 8020ebc:	490c      	ldr	r1, [pc, #48]	; (8020ef0 <__NVIC_SetPriority+0x4c>)
 8020ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020ec2:	0112      	lsls	r2, r2, #4
 8020ec4:	b2d2      	uxtb	r2, r2
 8020ec6:	440b      	add	r3, r1
 8020ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020ecc:	e00a      	b.n	8020ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020ece:	683b      	ldr	r3, [r7, #0]
 8020ed0:	b2da      	uxtb	r2, r3
 8020ed2:	4908      	ldr	r1, [pc, #32]	; (8020ef4 <__NVIC_SetPriority+0x50>)
 8020ed4:	79fb      	ldrb	r3, [r7, #7]
 8020ed6:	f003 030f 	and.w	r3, r3, #15
 8020eda:	3b04      	subs	r3, #4
 8020edc:	0112      	lsls	r2, r2, #4
 8020ede:	b2d2      	uxtb	r2, r2
 8020ee0:	440b      	add	r3, r1
 8020ee2:	761a      	strb	r2, [r3, #24]
}
 8020ee4:	bf00      	nop
 8020ee6:	370c      	adds	r7, #12
 8020ee8:	46bd      	mov	sp, r7
 8020eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eee:	4770      	bx	lr
 8020ef0:	e000e100 	.word	0xe000e100
 8020ef4:	e000ed00 	.word	0xe000ed00

08020ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020ef8:	b480      	push	{r7}
 8020efa:	b089      	sub	sp, #36	; 0x24
 8020efc:	af00      	add	r7, sp, #0
 8020efe:	60f8      	str	r0, [r7, #12]
 8020f00:	60b9      	str	r1, [r7, #8]
 8020f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020f04:	68fb      	ldr	r3, [r7, #12]
 8020f06:	f003 0307 	and.w	r3, r3, #7
 8020f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020f0c:	69fb      	ldr	r3, [r7, #28]
 8020f0e:	f1c3 0307 	rsb	r3, r3, #7
 8020f12:	2b04      	cmp	r3, #4
 8020f14:	bf28      	it	cs
 8020f16:	2304      	movcs	r3, #4
 8020f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020f1a:	69fb      	ldr	r3, [r7, #28]
 8020f1c:	3304      	adds	r3, #4
 8020f1e:	2b06      	cmp	r3, #6
 8020f20:	d902      	bls.n	8020f28 <NVIC_EncodePriority+0x30>
 8020f22:	69fb      	ldr	r3, [r7, #28]
 8020f24:	3b03      	subs	r3, #3
 8020f26:	e000      	b.n	8020f2a <NVIC_EncodePriority+0x32>
 8020f28:	2300      	movs	r3, #0
 8020f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8020f30:	69bb      	ldr	r3, [r7, #24]
 8020f32:	fa02 f303 	lsl.w	r3, r2, r3
 8020f36:	43da      	mvns	r2, r3
 8020f38:	68bb      	ldr	r3, [r7, #8]
 8020f3a:	401a      	ands	r2, r3
 8020f3c:	697b      	ldr	r3, [r7, #20]
 8020f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020f40:	f04f 31ff 	mov.w	r1, #4294967295
 8020f44:	697b      	ldr	r3, [r7, #20]
 8020f46:	fa01 f303 	lsl.w	r3, r1, r3
 8020f4a:	43d9      	mvns	r1, r3
 8020f4c:	687b      	ldr	r3, [r7, #4]
 8020f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020f50:	4313      	orrs	r3, r2
         );
}
 8020f52:	4618      	mov	r0, r3
 8020f54:	3724      	adds	r7, #36	; 0x24
 8020f56:	46bd      	mov	sp, r7
 8020f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f5c:	4770      	bx	lr
	...

08020f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020f60:	b580      	push	{r7, lr}
 8020f62:	b082      	sub	sp, #8
 8020f64:	af00      	add	r7, sp, #0
 8020f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	3b01      	subs	r3, #1
 8020f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020f70:	d301      	bcc.n	8020f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020f72:	2301      	movs	r3, #1
 8020f74:	e00f      	b.n	8020f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020f76:	4a0a      	ldr	r2, [pc, #40]	; (8020fa0 <SysTick_Config+0x40>)
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	3b01      	subs	r3, #1
 8020f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020f7e:	210f      	movs	r1, #15
 8020f80:	f04f 30ff 	mov.w	r0, #4294967295
 8020f84:	f7ff ff8e 	bl	8020ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020f88:	4b05      	ldr	r3, [pc, #20]	; (8020fa0 <SysTick_Config+0x40>)
 8020f8a:	2200      	movs	r2, #0
 8020f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020f8e:	4b04      	ldr	r3, [pc, #16]	; (8020fa0 <SysTick_Config+0x40>)
 8020f90:	2207      	movs	r2, #7
 8020f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020f94:	2300      	movs	r3, #0
}
 8020f96:	4618      	mov	r0, r3
 8020f98:	3708      	adds	r7, #8
 8020f9a:	46bd      	mov	sp, r7
 8020f9c:	bd80      	pop	{r7, pc}
 8020f9e:	bf00      	nop
 8020fa0:	e000e010 	.word	0xe000e010

08020fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020fa4:	b580      	push	{r7, lr}
 8020fa6:	b082      	sub	sp, #8
 8020fa8:	af00      	add	r7, sp, #0
 8020faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020fac:	6878      	ldr	r0, [r7, #4]
 8020fae:	f7ff ff29 	bl	8020e04 <__NVIC_SetPriorityGrouping>
}
 8020fb2:	bf00      	nop
 8020fb4:	3708      	adds	r7, #8
 8020fb6:	46bd      	mov	sp, r7
 8020fb8:	bd80      	pop	{r7, pc}

08020fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020fba:	b580      	push	{r7, lr}
 8020fbc:	b086      	sub	sp, #24
 8020fbe:	af00      	add	r7, sp, #0
 8020fc0:	4603      	mov	r3, r0
 8020fc2:	60b9      	str	r1, [r7, #8]
 8020fc4:	607a      	str	r2, [r7, #4]
 8020fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8020fc8:	2300      	movs	r3, #0
 8020fca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8020fcc:	f7ff ff3e 	bl	8020e4c <__NVIC_GetPriorityGrouping>
 8020fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020fd2:	687a      	ldr	r2, [r7, #4]
 8020fd4:	68b9      	ldr	r1, [r7, #8]
 8020fd6:	6978      	ldr	r0, [r7, #20]
 8020fd8:	f7ff ff8e 	bl	8020ef8 <NVIC_EncodePriority>
 8020fdc:	4602      	mov	r2, r0
 8020fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020fe2:	4611      	mov	r1, r2
 8020fe4:	4618      	mov	r0, r3
 8020fe6:	f7ff ff5d 	bl	8020ea4 <__NVIC_SetPriority>
}
 8020fea:	bf00      	nop
 8020fec:	3718      	adds	r7, #24
 8020fee:	46bd      	mov	sp, r7
 8020ff0:	bd80      	pop	{r7, pc}

08020ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020ff2:	b580      	push	{r7, lr}
 8020ff4:	b082      	sub	sp, #8
 8020ff6:	af00      	add	r7, sp, #0
 8020ff8:	4603      	mov	r3, r0
 8020ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8020ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021000:	4618      	mov	r0, r3
 8021002:	f7ff ff31 	bl	8020e68 <__NVIC_EnableIRQ>
}
 8021006:	bf00      	nop
 8021008:	3708      	adds	r7, #8
 802100a:	46bd      	mov	sp, r7
 802100c:	bd80      	pop	{r7, pc}

0802100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802100e:	b580      	push	{r7, lr}
 8021010:	b082      	sub	sp, #8
 8021012:	af00      	add	r7, sp, #0
 8021014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8021016:	6878      	ldr	r0, [r7, #4]
 8021018:	f7ff ffa2 	bl	8020f60 <SysTick_Config>
 802101c:	4603      	mov	r3, r0
}
 802101e:	4618      	mov	r0, r3
 8021020:	3708      	adds	r7, #8
 8021022:	46bd      	mov	sp, r7
 8021024:	bd80      	pop	{r7, pc}
	...

08021028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8021028:	b480      	push	{r7}
 802102a:	b087      	sub	sp, #28
 802102c:	af00      	add	r7, sp, #0
 802102e:	6078      	str	r0, [r7, #4]
 8021030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8021032:	2300      	movs	r3, #0
 8021034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8021036:	e17f      	b.n	8021338 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8021038:	683b      	ldr	r3, [r7, #0]
 802103a:	681a      	ldr	r2, [r3, #0]
 802103c:	2101      	movs	r1, #1
 802103e:	697b      	ldr	r3, [r7, #20]
 8021040:	fa01 f303 	lsl.w	r3, r1, r3
 8021044:	4013      	ands	r3, r2
 8021046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8021048:	68fb      	ldr	r3, [r7, #12]
 802104a:	2b00      	cmp	r3, #0
 802104c:	f000 8171 	beq.w	8021332 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021050:	683b      	ldr	r3, [r7, #0]
 8021052:	685b      	ldr	r3, [r3, #4]
 8021054:	2b01      	cmp	r3, #1
 8021056:	d00b      	beq.n	8021070 <HAL_GPIO_Init+0x48>
 8021058:	683b      	ldr	r3, [r7, #0]
 802105a:	685b      	ldr	r3, [r3, #4]
 802105c:	2b02      	cmp	r3, #2
 802105e:	d007      	beq.n	8021070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021060:	683b      	ldr	r3, [r7, #0]
 8021062:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021064:	2b11      	cmp	r3, #17
 8021066:	d003      	beq.n	8021070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021068:	683b      	ldr	r3, [r7, #0]
 802106a:	685b      	ldr	r3, [r3, #4]
 802106c:	2b12      	cmp	r3, #18
 802106e:	d130      	bne.n	80210d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	689b      	ldr	r3, [r3, #8]
 8021074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8021076:	697b      	ldr	r3, [r7, #20]
 8021078:	005b      	lsls	r3, r3, #1
 802107a:	2203      	movs	r2, #3
 802107c:	fa02 f303 	lsl.w	r3, r2, r3
 8021080:	43db      	mvns	r3, r3
 8021082:	693a      	ldr	r2, [r7, #16]
 8021084:	4013      	ands	r3, r2
 8021086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8021088:	683b      	ldr	r3, [r7, #0]
 802108a:	68da      	ldr	r2, [r3, #12]
 802108c:	697b      	ldr	r3, [r7, #20]
 802108e:	005b      	lsls	r3, r3, #1
 8021090:	fa02 f303 	lsl.w	r3, r2, r3
 8021094:	693a      	ldr	r2, [r7, #16]
 8021096:	4313      	orrs	r3, r2
 8021098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 802109a:	687b      	ldr	r3, [r7, #4]
 802109c:	693a      	ldr	r2, [r7, #16]
 802109e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	685b      	ldr	r3, [r3, #4]
 80210a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80210a6:	2201      	movs	r2, #1
 80210a8:	697b      	ldr	r3, [r7, #20]
 80210aa:	fa02 f303 	lsl.w	r3, r2, r3
 80210ae:	43db      	mvns	r3, r3
 80210b0:	693a      	ldr	r2, [r7, #16]
 80210b2:	4013      	ands	r3, r2
 80210b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80210b6:	683b      	ldr	r3, [r7, #0]
 80210b8:	685b      	ldr	r3, [r3, #4]
 80210ba:	091b      	lsrs	r3, r3, #4
 80210bc:	f003 0201 	and.w	r2, r3, #1
 80210c0:	697b      	ldr	r3, [r7, #20]
 80210c2:	fa02 f303 	lsl.w	r3, r2, r3
 80210c6:	693a      	ldr	r2, [r7, #16]
 80210c8:	4313      	orrs	r3, r2
 80210ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80210cc:	687b      	ldr	r3, [r7, #4]
 80210ce:	693a      	ldr	r2, [r7, #16]
 80210d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80210d2:	683b      	ldr	r3, [r7, #0]
 80210d4:	685b      	ldr	r3, [r3, #4]
 80210d6:	f003 0303 	and.w	r3, r3, #3
 80210da:	2b03      	cmp	r3, #3
 80210dc:	d118      	bne.n	8021110 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80210e4:	2201      	movs	r2, #1
 80210e6:	697b      	ldr	r3, [r7, #20]
 80210e8:	fa02 f303 	lsl.w	r3, r2, r3
 80210ec:	43db      	mvns	r3, r3
 80210ee:	693a      	ldr	r2, [r7, #16]
 80210f0:	4013      	ands	r3, r2
 80210f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80210f4:	683b      	ldr	r3, [r7, #0]
 80210f6:	685b      	ldr	r3, [r3, #4]
 80210f8:	08db      	lsrs	r3, r3, #3
 80210fa:	f003 0201 	and.w	r2, r3, #1
 80210fe:	697b      	ldr	r3, [r7, #20]
 8021100:	fa02 f303 	lsl.w	r3, r2, r3
 8021104:	693a      	ldr	r2, [r7, #16]
 8021106:	4313      	orrs	r3, r2
 8021108:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	693a      	ldr	r2, [r7, #16]
 802110e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	68db      	ldr	r3, [r3, #12]
 8021114:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8021116:	697b      	ldr	r3, [r7, #20]
 8021118:	005b      	lsls	r3, r3, #1
 802111a:	2203      	movs	r2, #3
 802111c:	fa02 f303 	lsl.w	r3, r2, r3
 8021120:	43db      	mvns	r3, r3
 8021122:	693a      	ldr	r2, [r7, #16]
 8021124:	4013      	ands	r3, r2
 8021126:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8021128:	683b      	ldr	r3, [r7, #0]
 802112a:	689a      	ldr	r2, [r3, #8]
 802112c:	697b      	ldr	r3, [r7, #20]
 802112e:	005b      	lsls	r3, r3, #1
 8021130:	fa02 f303 	lsl.w	r3, r2, r3
 8021134:	693a      	ldr	r2, [r7, #16]
 8021136:	4313      	orrs	r3, r2
 8021138:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	693a      	ldr	r2, [r7, #16]
 802113e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021140:	683b      	ldr	r3, [r7, #0]
 8021142:	685b      	ldr	r3, [r3, #4]
 8021144:	2b02      	cmp	r3, #2
 8021146:	d003      	beq.n	8021150 <HAL_GPIO_Init+0x128>
 8021148:	683b      	ldr	r3, [r7, #0]
 802114a:	685b      	ldr	r3, [r3, #4]
 802114c:	2b12      	cmp	r3, #18
 802114e:	d123      	bne.n	8021198 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8021150:	697b      	ldr	r3, [r7, #20]
 8021152:	08da      	lsrs	r2, r3, #3
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	3208      	adds	r2, #8
 8021158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 802115e:	697b      	ldr	r3, [r7, #20]
 8021160:	f003 0307 	and.w	r3, r3, #7
 8021164:	009b      	lsls	r3, r3, #2
 8021166:	220f      	movs	r2, #15
 8021168:	fa02 f303 	lsl.w	r3, r2, r3
 802116c:	43db      	mvns	r3, r3
 802116e:	693a      	ldr	r2, [r7, #16]
 8021170:	4013      	ands	r3, r2
 8021172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8021174:	683b      	ldr	r3, [r7, #0]
 8021176:	691a      	ldr	r2, [r3, #16]
 8021178:	697b      	ldr	r3, [r7, #20]
 802117a:	f003 0307 	and.w	r3, r3, #7
 802117e:	009b      	lsls	r3, r3, #2
 8021180:	fa02 f303 	lsl.w	r3, r2, r3
 8021184:	693a      	ldr	r2, [r7, #16]
 8021186:	4313      	orrs	r3, r2
 8021188:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 802118a:	697b      	ldr	r3, [r7, #20]
 802118c:	08da      	lsrs	r2, r3, #3
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	3208      	adds	r2, #8
 8021192:	6939      	ldr	r1, [r7, #16]
 8021194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	681b      	ldr	r3, [r3, #0]
 802119c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 802119e:	697b      	ldr	r3, [r7, #20]
 80211a0:	005b      	lsls	r3, r3, #1
 80211a2:	2203      	movs	r2, #3
 80211a4:	fa02 f303 	lsl.w	r3, r2, r3
 80211a8:	43db      	mvns	r3, r3
 80211aa:	693a      	ldr	r2, [r7, #16]
 80211ac:	4013      	ands	r3, r2
 80211ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80211b0:	683b      	ldr	r3, [r7, #0]
 80211b2:	685b      	ldr	r3, [r3, #4]
 80211b4:	f003 0203 	and.w	r2, r3, #3
 80211b8:	697b      	ldr	r3, [r7, #20]
 80211ba:	005b      	lsls	r3, r3, #1
 80211bc:	fa02 f303 	lsl.w	r3, r2, r3
 80211c0:	693a      	ldr	r2, [r7, #16]
 80211c2:	4313      	orrs	r3, r2
 80211c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	693a      	ldr	r2, [r7, #16]
 80211ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80211cc:	683b      	ldr	r3, [r7, #0]
 80211ce:	685b      	ldr	r3, [r3, #4]
 80211d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	f000 80ac 	beq.w	8021332 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80211da:	4b5f      	ldr	r3, [pc, #380]	; (8021358 <HAL_GPIO_Init+0x330>)
 80211dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80211de:	4a5e      	ldr	r2, [pc, #376]	; (8021358 <HAL_GPIO_Init+0x330>)
 80211e0:	f043 0301 	orr.w	r3, r3, #1
 80211e4:	6613      	str	r3, [r2, #96]	; 0x60
 80211e6:	4b5c      	ldr	r3, [pc, #368]	; (8021358 <HAL_GPIO_Init+0x330>)
 80211e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80211ea:	f003 0301 	and.w	r3, r3, #1
 80211ee:	60bb      	str	r3, [r7, #8]
 80211f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80211f2:	4a5a      	ldr	r2, [pc, #360]	; (802135c <HAL_GPIO_Init+0x334>)
 80211f4:	697b      	ldr	r3, [r7, #20]
 80211f6:	089b      	lsrs	r3, r3, #2
 80211f8:	3302      	adds	r3, #2
 80211fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80211fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8021200:	697b      	ldr	r3, [r7, #20]
 8021202:	f003 0303 	and.w	r3, r3, #3
 8021206:	009b      	lsls	r3, r3, #2
 8021208:	220f      	movs	r2, #15
 802120a:	fa02 f303 	lsl.w	r3, r2, r3
 802120e:	43db      	mvns	r3, r3
 8021210:	693a      	ldr	r2, [r7, #16]
 8021212:	4013      	ands	r3, r2
 8021214:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8021216:	687b      	ldr	r3, [r7, #4]
 8021218:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 802121c:	d025      	beq.n	802126a <HAL_GPIO_Init+0x242>
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	4a4f      	ldr	r2, [pc, #316]	; (8021360 <HAL_GPIO_Init+0x338>)
 8021222:	4293      	cmp	r3, r2
 8021224:	d01f      	beq.n	8021266 <HAL_GPIO_Init+0x23e>
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	4a4e      	ldr	r2, [pc, #312]	; (8021364 <HAL_GPIO_Init+0x33c>)
 802122a:	4293      	cmp	r3, r2
 802122c:	d019      	beq.n	8021262 <HAL_GPIO_Init+0x23a>
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	4a4d      	ldr	r2, [pc, #308]	; (8021368 <HAL_GPIO_Init+0x340>)
 8021232:	4293      	cmp	r3, r2
 8021234:	d013      	beq.n	802125e <HAL_GPIO_Init+0x236>
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	4a4c      	ldr	r2, [pc, #304]	; (802136c <HAL_GPIO_Init+0x344>)
 802123a:	4293      	cmp	r3, r2
 802123c:	d00d      	beq.n	802125a <HAL_GPIO_Init+0x232>
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	4a4b      	ldr	r2, [pc, #300]	; (8021370 <HAL_GPIO_Init+0x348>)
 8021242:	4293      	cmp	r3, r2
 8021244:	d007      	beq.n	8021256 <HAL_GPIO_Init+0x22e>
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	4a4a      	ldr	r2, [pc, #296]	; (8021374 <HAL_GPIO_Init+0x34c>)
 802124a:	4293      	cmp	r3, r2
 802124c:	d101      	bne.n	8021252 <HAL_GPIO_Init+0x22a>
 802124e:	2306      	movs	r3, #6
 8021250:	e00c      	b.n	802126c <HAL_GPIO_Init+0x244>
 8021252:	2307      	movs	r3, #7
 8021254:	e00a      	b.n	802126c <HAL_GPIO_Init+0x244>
 8021256:	2305      	movs	r3, #5
 8021258:	e008      	b.n	802126c <HAL_GPIO_Init+0x244>
 802125a:	2304      	movs	r3, #4
 802125c:	e006      	b.n	802126c <HAL_GPIO_Init+0x244>
 802125e:	2303      	movs	r3, #3
 8021260:	e004      	b.n	802126c <HAL_GPIO_Init+0x244>
 8021262:	2302      	movs	r3, #2
 8021264:	e002      	b.n	802126c <HAL_GPIO_Init+0x244>
 8021266:	2301      	movs	r3, #1
 8021268:	e000      	b.n	802126c <HAL_GPIO_Init+0x244>
 802126a:	2300      	movs	r3, #0
 802126c:	697a      	ldr	r2, [r7, #20]
 802126e:	f002 0203 	and.w	r2, r2, #3
 8021272:	0092      	lsls	r2, r2, #2
 8021274:	4093      	lsls	r3, r2
 8021276:	693a      	ldr	r2, [r7, #16]
 8021278:	4313      	orrs	r3, r2
 802127a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 802127c:	4937      	ldr	r1, [pc, #220]	; (802135c <HAL_GPIO_Init+0x334>)
 802127e:	697b      	ldr	r3, [r7, #20]
 8021280:	089b      	lsrs	r3, r3, #2
 8021282:	3302      	adds	r3, #2
 8021284:	693a      	ldr	r2, [r7, #16]
 8021286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 802128a:	4b3b      	ldr	r3, [pc, #236]	; (8021378 <HAL_GPIO_Init+0x350>)
 802128c:	681b      	ldr	r3, [r3, #0]
 802128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8021290:	68fb      	ldr	r3, [r7, #12]
 8021292:	43db      	mvns	r3, r3
 8021294:	693a      	ldr	r2, [r7, #16]
 8021296:	4013      	ands	r3, r2
 8021298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802129a:	683b      	ldr	r3, [r7, #0]
 802129c:	685b      	ldr	r3, [r3, #4]
 802129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80212a2:	2b00      	cmp	r3, #0
 80212a4:	d003      	beq.n	80212ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80212a6:	693a      	ldr	r2, [r7, #16]
 80212a8:	68fb      	ldr	r3, [r7, #12]
 80212aa:	4313      	orrs	r3, r2
 80212ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80212ae:	4a32      	ldr	r2, [pc, #200]	; (8021378 <HAL_GPIO_Init+0x350>)
 80212b0:	693b      	ldr	r3, [r7, #16]
 80212b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80212b4:	4b30      	ldr	r3, [pc, #192]	; (8021378 <HAL_GPIO_Init+0x350>)
 80212b6:	685b      	ldr	r3, [r3, #4]
 80212b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80212ba:	68fb      	ldr	r3, [r7, #12]
 80212bc:	43db      	mvns	r3, r3
 80212be:	693a      	ldr	r2, [r7, #16]
 80212c0:	4013      	ands	r3, r2
 80212c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80212c4:	683b      	ldr	r3, [r7, #0]
 80212c6:	685b      	ldr	r3, [r3, #4]
 80212c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	d003      	beq.n	80212d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80212d0:	693a      	ldr	r2, [r7, #16]
 80212d2:	68fb      	ldr	r3, [r7, #12]
 80212d4:	4313      	orrs	r3, r2
 80212d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80212d8:	4a27      	ldr	r2, [pc, #156]	; (8021378 <HAL_GPIO_Init+0x350>)
 80212da:	693b      	ldr	r3, [r7, #16]
 80212dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80212de:	4b26      	ldr	r3, [pc, #152]	; (8021378 <HAL_GPIO_Init+0x350>)
 80212e0:	689b      	ldr	r3, [r3, #8]
 80212e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80212e4:	68fb      	ldr	r3, [r7, #12]
 80212e6:	43db      	mvns	r3, r3
 80212e8:	693a      	ldr	r2, [r7, #16]
 80212ea:	4013      	ands	r3, r2
 80212ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80212ee:	683b      	ldr	r3, [r7, #0]
 80212f0:	685b      	ldr	r3, [r3, #4]
 80212f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80212f6:	2b00      	cmp	r3, #0
 80212f8:	d003      	beq.n	8021302 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80212fa:	693a      	ldr	r2, [r7, #16]
 80212fc:	68fb      	ldr	r3, [r7, #12]
 80212fe:	4313      	orrs	r3, r2
 8021300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8021302:	4a1d      	ldr	r2, [pc, #116]	; (8021378 <HAL_GPIO_Init+0x350>)
 8021304:	693b      	ldr	r3, [r7, #16]
 8021306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8021308:	4b1b      	ldr	r3, [pc, #108]	; (8021378 <HAL_GPIO_Init+0x350>)
 802130a:	68db      	ldr	r3, [r3, #12]
 802130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 802130e:	68fb      	ldr	r3, [r7, #12]
 8021310:	43db      	mvns	r3, r3
 8021312:	693a      	ldr	r2, [r7, #16]
 8021314:	4013      	ands	r3, r2
 8021316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8021318:	683b      	ldr	r3, [r7, #0]
 802131a:	685b      	ldr	r3, [r3, #4]
 802131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8021320:	2b00      	cmp	r3, #0
 8021322:	d003      	beq.n	802132c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8021324:	693a      	ldr	r2, [r7, #16]
 8021326:	68fb      	ldr	r3, [r7, #12]
 8021328:	4313      	orrs	r3, r2
 802132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 802132c:	4a12      	ldr	r2, [pc, #72]	; (8021378 <HAL_GPIO_Init+0x350>)
 802132e:	693b      	ldr	r3, [r7, #16]
 8021330:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8021332:	697b      	ldr	r3, [r7, #20]
 8021334:	3301      	adds	r3, #1
 8021336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8021338:	683b      	ldr	r3, [r7, #0]
 802133a:	681a      	ldr	r2, [r3, #0]
 802133c:	697b      	ldr	r3, [r7, #20]
 802133e:	fa22 f303 	lsr.w	r3, r2, r3
 8021342:	2b00      	cmp	r3, #0
 8021344:	f47f ae78 	bne.w	8021038 <HAL_GPIO_Init+0x10>
  }
}
 8021348:	bf00      	nop
 802134a:	bf00      	nop
 802134c:	371c      	adds	r7, #28
 802134e:	46bd      	mov	sp, r7
 8021350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021354:	4770      	bx	lr
 8021356:	bf00      	nop
 8021358:	40021000 	.word	0x40021000
 802135c:	40010000 	.word	0x40010000
 8021360:	48000400 	.word	0x48000400
 8021364:	48000800 	.word	0x48000800
 8021368:	48000c00 	.word	0x48000c00
 802136c:	48001000 	.word	0x48001000
 8021370:	48001400 	.word	0x48001400
 8021374:	48001800 	.word	0x48001800
 8021378:	40010400 	.word	0x40010400

0802137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802137c:	b480      	push	{r7}
 802137e:	b083      	sub	sp, #12
 8021380:	af00      	add	r7, sp, #0
 8021382:	6078      	str	r0, [r7, #4]
 8021384:	460b      	mov	r3, r1
 8021386:	807b      	strh	r3, [r7, #2]
 8021388:	4613      	mov	r3, r2
 802138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802138c:	787b      	ldrb	r3, [r7, #1]
 802138e:	2b00      	cmp	r3, #0
 8021390:	d003      	beq.n	802139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8021392:	887a      	ldrh	r2, [r7, #2]
 8021394:	687b      	ldr	r3, [r7, #4]
 8021396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8021398:	e002      	b.n	80213a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 802139a:	887a      	ldrh	r2, [r7, #2]
 802139c:	687b      	ldr	r3, [r7, #4]
 802139e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80213a0:	bf00      	nop
 80213a2:	370c      	adds	r7, #12
 80213a4:	46bd      	mov	sp, r7
 80213a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213aa:	4770      	bx	lr

080213ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80213ac:	b480      	push	{r7}
 80213ae:	b085      	sub	sp, #20
 80213b0:	af00      	add	r7, sp, #0
 80213b2:	6078      	str	r0, [r7, #4]
 80213b4:	460b      	mov	r3, r1
 80213b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80213b8:	687b      	ldr	r3, [r7, #4]
 80213ba:	695b      	ldr	r3, [r3, #20]
 80213bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80213be:	887a      	ldrh	r2, [r7, #2]
 80213c0:	68fb      	ldr	r3, [r7, #12]
 80213c2:	4013      	ands	r3, r2
 80213c4:	041a      	lsls	r2, r3, #16
 80213c6:	68fb      	ldr	r3, [r7, #12]
 80213c8:	43d9      	mvns	r1, r3
 80213ca:	887b      	ldrh	r3, [r7, #2]
 80213cc:	400b      	ands	r3, r1
 80213ce:	431a      	orrs	r2, r3
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	619a      	str	r2, [r3, #24]
}
 80213d4:	bf00      	nop
 80213d6:	3714      	adds	r7, #20
 80213d8:	46bd      	mov	sp, r7
 80213da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213de:	4770      	bx	lr

080213e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80213e0:	b580      	push	{r7, lr}
 80213e2:	b082      	sub	sp, #8
 80213e4:	af00      	add	r7, sp, #0
 80213e6:	4603      	mov	r3, r0
 80213e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80213ea:	4b08      	ldr	r3, [pc, #32]	; (802140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80213ec:	695a      	ldr	r2, [r3, #20]
 80213ee:	88fb      	ldrh	r3, [r7, #6]
 80213f0:	4013      	ands	r3, r2
 80213f2:	2b00      	cmp	r3, #0
 80213f4:	d006      	beq.n	8021404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80213f6:	4a05      	ldr	r2, [pc, #20]	; (802140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80213f8:	88fb      	ldrh	r3, [r7, #6]
 80213fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80213fc:	88fb      	ldrh	r3, [r7, #6]
 80213fe:	4618      	mov	r0, r3
 8021400:	f000 f806 	bl	8021410 <HAL_GPIO_EXTI_Callback>
  }
}
 8021404:	bf00      	nop
 8021406:	3708      	adds	r7, #8
 8021408:	46bd      	mov	sp, r7
 802140a:	bd80      	pop	{r7, pc}
 802140c:	40010400 	.word	0x40010400

08021410 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8021410:	b480      	push	{r7}
 8021412:	b083      	sub	sp, #12
 8021414:	af00      	add	r7, sp, #0
 8021416:	4603      	mov	r3, r0
 8021418:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 802141a:	bf00      	nop
 802141c:	370c      	adds	r7, #12
 802141e:	46bd      	mov	sp, r7
 8021420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021424:	4770      	bx	lr
	...

08021428 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8021428:	b480      	push	{r7}
 802142a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 802142c:	4b04      	ldr	r3, [pc, #16]	; (8021440 <HAL_PWREx_GetVoltageRange+0x18>)
 802142e:	681b      	ldr	r3, [r3, #0]
 8021430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8021434:	4618      	mov	r0, r3
 8021436:	46bd      	mov	sp, r7
 8021438:	f85d 7b04 	ldr.w	r7, [sp], #4
 802143c:	4770      	bx	lr
 802143e:	bf00      	nop
 8021440:	40007000 	.word	0x40007000

08021444 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8021444:	b480      	push	{r7}
 8021446:	b085      	sub	sp, #20
 8021448:	af00      	add	r7, sp, #0
 802144a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021452:	d130      	bne.n	80214b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8021454:	4b23      	ldr	r3, [pc, #140]	; (80214e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802145c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021460:	d038      	beq.n	80214d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8021462:	4b20      	ldr	r3, [pc, #128]	; (80214e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8021464:	681b      	ldr	r3, [r3, #0]
 8021466:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 802146a:	4a1e      	ldr	r2, [pc, #120]	; (80214e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 802146c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021470:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8021472:	4b1d      	ldr	r3, [pc, #116]	; (80214e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	2232      	movs	r2, #50	; 0x32
 8021478:	fb02 f303 	mul.w	r3, r2, r3
 802147c:	4a1b      	ldr	r2, [pc, #108]	; (80214ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 802147e:	fba2 2303 	umull	r2, r3, r2, r3
 8021482:	0c9b      	lsrs	r3, r3, #18
 8021484:	3301      	adds	r3, #1
 8021486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021488:	e002      	b.n	8021490 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 802148a:	68fb      	ldr	r3, [r7, #12]
 802148c:	3b01      	subs	r3, #1
 802148e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021490:	4b14      	ldr	r3, [pc, #80]	; (80214e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8021492:	695b      	ldr	r3, [r3, #20]
 8021494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802149c:	d102      	bne.n	80214a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 802149e:	68fb      	ldr	r3, [r7, #12]
 80214a0:	2b00      	cmp	r3, #0
 80214a2:	d1f2      	bne.n	802148a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80214a4:	4b0f      	ldr	r3, [pc, #60]	; (80214e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80214a6:	695b      	ldr	r3, [r3, #20]
 80214a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80214ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80214b0:	d110      	bne.n	80214d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80214b2:	2303      	movs	r3, #3
 80214b4:	e00f      	b.n	80214d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80214b6:	4b0b      	ldr	r3, [pc, #44]	; (80214e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80214b8:	681b      	ldr	r3, [r3, #0]
 80214ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80214be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80214c2:	d007      	beq.n	80214d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80214c4:	4b07      	ldr	r3, [pc, #28]	; (80214e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80214c6:	681b      	ldr	r3, [r3, #0]
 80214c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80214cc:	4a05      	ldr	r2, [pc, #20]	; (80214e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80214ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80214d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80214d4:	2300      	movs	r3, #0
}
 80214d6:	4618      	mov	r0, r3
 80214d8:	3714      	adds	r7, #20
 80214da:	46bd      	mov	sp, r7
 80214dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214e0:	4770      	bx	lr
 80214e2:	bf00      	nop
 80214e4:	40007000 	.word	0x40007000
 80214e8:	20000000 	.word	0x20000000
 80214ec:	431bde83 	.word	0x431bde83

080214f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80214f0:	b580      	push	{r7, lr}
 80214f2:	b088      	sub	sp, #32
 80214f4:	af00      	add	r7, sp, #0
 80214f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	d101      	bne.n	8021502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80214fe:	2301      	movs	r3, #1
 8021500:	e3d4      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021502:	4ba1      	ldr	r3, [pc, #644]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021504:	689b      	ldr	r3, [r3, #8]
 8021506:	f003 030c 	and.w	r3, r3, #12
 802150a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 802150c:	4b9e      	ldr	r3, [pc, #632]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 802150e:	68db      	ldr	r3, [r3, #12]
 8021510:	f003 0303 	and.w	r3, r3, #3
 8021514:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021516:	687b      	ldr	r3, [r7, #4]
 8021518:	681b      	ldr	r3, [r3, #0]
 802151a:	f003 0310 	and.w	r3, r3, #16
 802151e:	2b00      	cmp	r3, #0
 8021520:	f000 80e4 	beq.w	80216ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021524:	69bb      	ldr	r3, [r7, #24]
 8021526:	2b00      	cmp	r3, #0
 8021528:	d007      	beq.n	802153a <HAL_RCC_OscConfig+0x4a>
 802152a:	69bb      	ldr	r3, [r7, #24]
 802152c:	2b0c      	cmp	r3, #12
 802152e:	f040 808b 	bne.w	8021648 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8021532:	697b      	ldr	r3, [r7, #20]
 8021534:	2b01      	cmp	r3, #1
 8021536:	f040 8087 	bne.w	8021648 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 802153a:	4b93      	ldr	r3, [pc, #588]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	f003 0302 	and.w	r3, r3, #2
 8021542:	2b00      	cmp	r3, #0
 8021544:	d005      	beq.n	8021552 <HAL_RCC_OscConfig+0x62>
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	699b      	ldr	r3, [r3, #24]
 802154a:	2b00      	cmp	r3, #0
 802154c:	d101      	bne.n	8021552 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 802154e:	2301      	movs	r3, #1
 8021550:	e3ac      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	6a1a      	ldr	r2, [r3, #32]
 8021556:	4b8c      	ldr	r3, [pc, #560]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021558:	681b      	ldr	r3, [r3, #0]
 802155a:	f003 0308 	and.w	r3, r3, #8
 802155e:	2b00      	cmp	r3, #0
 8021560:	d004      	beq.n	802156c <HAL_RCC_OscConfig+0x7c>
 8021562:	4b89      	ldr	r3, [pc, #548]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021564:	681b      	ldr	r3, [r3, #0]
 8021566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802156a:	e005      	b.n	8021578 <HAL_RCC_OscConfig+0x88>
 802156c:	4b86      	ldr	r3, [pc, #536]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 802156e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021572:	091b      	lsrs	r3, r3, #4
 8021574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021578:	4293      	cmp	r3, r2
 802157a:	d223      	bcs.n	80215c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	6a1b      	ldr	r3, [r3, #32]
 8021580:	4618      	mov	r0, r3
 8021582:	f000 fd41 	bl	8022008 <RCC_SetFlashLatencyFromMSIRange>
 8021586:	4603      	mov	r3, r0
 8021588:	2b00      	cmp	r3, #0
 802158a:	d001      	beq.n	8021590 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 802158c:	2301      	movs	r3, #1
 802158e:	e38d      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021590:	4b7d      	ldr	r3, [pc, #500]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021592:	681b      	ldr	r3, [r3, #0]
 8021594:	4a7c      	ldr	r2, [pc, #496]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021596:	f043 0308 	orr.w	r3, r3, #8
 802159a:	6013      	str	r3, [r2, #0]
 802159c:	4b7a      	ldr	r3, [pc, #488]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 802159e:	681b      	ldr	r3, [r3, #0]
 80215a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80215a4:	687b      	ldr	r3, [r7, #4]
 80215a6:	6a1b      	ldr	r3, [r3, #32]
 80215a8:	4977      	ldr	r1, [pc, #476]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80215aa:	4313      	orrs	r3, r2
 80215ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80215ae:	4b76      	ldr	r3, [pc, #472]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80215b0:	685b      	ldr	r3, [r3, #4]
 80215b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	69db      	ldr	r3, [r3, #28]
 80215ba:	021b      	lsls	r3, r3, #8
 80215bc:	4972      	ldr	r1, [pc, #456]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80215be:	4313      	orrs	r3, r2
 80215c0:	604b      	str	r3, [r1, #4]
 80215c2:	e025      	b.n	8021610 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80215c4:	4b70      	ldr	r3, [pc, #448]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80215c6:	681b      	ldr	r3, [r3, #0]
 80215c8:	4a6f      	ldr	r2, [pc, #444]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80215ca:	f043 0308 	orr.w	r3, r3, #8
 80215ce:	6013      	str	r3, [r2, #0]
 80215d0:	4b6d      	ldr	r3, [pc, #436]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80215d2:	681b      	ldr	r3, [r3, #0]
 80215d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80215d8:	687b      	ldr	r3, [r7, #4]
 80215da:	6a1b      	ldr	r3, [r3, #32]
 80215dc:	496a      	ldr	r1, [pc, #424]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80215de:	4313      	orrs	r3, r2
 80215e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80215e2:	4b69      	ldr	r3, [pc, #420]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80215e4:	685b      	ldr	r3, [r3, #4]
 80215e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80215ea:	687b      	ldr	r3, [r7, #4]
 80215ec:	69db      	ldr	r3, [r3, #28]
 80215ee:	021b      	lsls	r3, r3, #8
 80215f0:	4965      	ldr	r1, [pc, #404]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80215f2:	4313      	orrs	r3, r2
 80215f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80215f6:	69bb      	ldr	r3, [r7, #24]
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d109      	bne.n	8021610 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	6a1b      	ldr	r3, [r3, #32]
 8021600:	4618      	mov	r0, r3
 8021602:	f000 fd01 	bl	8022008 <RCC_SetFlashLatencyFromMSIRange>
 8021606:	4603      	mov	r3, r0
 8021608:	2b00      	cmp	r3, #0
 802160a:	d001      	beq.n	8021610 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 802160c:	2301      	movs	r3, #1
 802160e:	e34d      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021610:	f000 fc36 	bl	8021e80 <HAL_RCC_GetSysClockFreq>
 8021614:	4602      	mov	r2, r0
 8021616:	4b5c      	ldr	r3, [pc, #368]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021618:	689b      	ldr	r3, [r3, #8]
 802161a:	091b      	lsrs	r3, r3, #4
 802161c:	f003 030f 	and.w	r3, r3, #15
 8021620:	495a      	ldr	r1, [pc, #360]	; (802178c <HAL_RCC_OscConfig+0x29c>)
 8021622:	5ccb      	ldrb	r3, [r1, r3]
 8021624:	f003 031f 	and.w	r3, r3, #31
 8021628:	fa22 f303 	lsr.w	r3, r2, r3
 802162c:	4a58      	ldr	r2, [pc, #352]	; (8021790 <HAL_RCC_OscConfig+0x2a0>)
 802162e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8021630:	4b58      	ldr	r3, [pc, #352]	; (8021794 <HAL_RCC_OscConfig+0x2a4>)
 8021632:	681b      	ldr	r3, [r3, #0]
 8021634:	4618      	mov	r0, r3
 8021636:	f7ff fb65 	bl	8020d04 <HAL_InitTick>
 802163a:	4603      	mov	r3, r0
 802163c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 802163e:	7bfb      	ldrb	r3, [r7, #15]
 8021640:	2b00      	cmp	r3, #0
 8021642:	d052      	beq.n	80216ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8021644:	7bfb      	ldrb	r3, [r7, #15]
 8021646:	e331      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8021648:	687b      	ldr	r3, [r7, #4]
 802164a:	699b      	ldr	r3, [r3, #24]
 802164c:	2b00      	cmp	r3, #0
 802164e:	d032      	beq.n	80216b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8021650:	4b4d      	ldr	r3, [pc, #308]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	4a4c      	ldr	r2, [pc, #304]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021656:	f043 0301 	orr.w	r3, r3, #1
 802165a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 802165c:	f7ff fba2 	bl	8020da4 <HAL_GetTick>
 8021660:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021662:	e008      	b.n	8021676 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021664:	f7ff fb9e 	bl	8020da4 <HAL_GetTick>
 8021668:	4602      	mov	r2, r0
 802166a:	693b      	ldr	r3, [r7, #16]
 802166c:	1ad3      	subs	r3, r2, r3
 802166e:	2b02      	cmp	r3, #2
 8021670:	d901      	bls.n	8021676 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8021672:	2303      	movs	r3, #3
 8021674:	e31a      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021676:	4b44      	ldr	r3, [pc, #272]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021678:	681b      	ldr	r3, [r3, #0]
 802167a:	f003 0302 	and.w	r3, r3, #2
 802167e:	2b00      	cmp	r3, #0
 8021680:	d0f0      	beq.n	8021664 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021682:	4b41      	ldr	r3, [pc, #260]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021684:	681b      	ldr	r3, [r3, #0]
 8021686:	4a40      	ldr	r2, [pc, #256]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021688:	f043 0308 	orr.w	r3, r3, #8
 802168c:	6013      	str	r3, [r2, #0]
 802168e:	4b3e      	ldr	r3, [pc, #248]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021690:	681b      	ldr	r3, [r3, #0]
 8021692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	6a1b      	ldr	r3, [r3, #32]
 802169a:	493b      	ldr	r1, [pc, #236]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 802169c:	4313      	orrs	r3, r2
 802169e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80216a0:	4b39      	ldr	r3, [pc, #228]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80216a2:	685b      	ldr	r3, [r3, #4]
 80216a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80216a8:	687b      	ldr	r3, [r7, #4]
 80216aa:	69db      	ldr	r3, [r3, #28]
 80216ac:	021b      	lsls	r3, r3, #8
 80216ae:	4936      	ldr	r1, [pc, #216]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80216b0:	4313      	orrs	r3, r2
 80216b2:	604b      	str	r3, [r1, #4]
 80216b4:	e01a      	b.n	80216ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80216b6:	4b34      	ldr	r3, [pc, #208]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80216b8:	681b      	ldr	r3, [r3, #0]
 80216ba:	4a33      	ldr	r2, [pc, #204]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80216bc:	f023 0301 	bic.w	r3, r3, #1
 80216c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80216c2:	f7ff fb6f 	bl	8020da4 <HAL_GetTick>
 80216c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80216c8:	e008      	b.n	80216dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80216ca:	f7ff fb6b 	bl	8020da4 <HAL_GetTick>
 80216ce:	4602      	mov	r2, r0
 80216d0:	693b      	ldr	r3, [r7, #16]
 80216d2:	1ad3      	subs	r3, r2, r3
 80216d4:	2b02      	cmp	r3, #2
 80216d6:	d901      	bls.n	80216dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80216d8:	2303      	movs	r3, #3
 80216da:	e2e7      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80216dc:	4b2a      	ldr	r3, [pc, #168]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 80216de:	681b      	ldr	r3, [r3, #0]
 80216e0:	f003 0302 	and.w	r3, r3, #2
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d1f0      	bne.n	80216ca <HAL_RCC_OscConfig+0x1da>
 80216e8:	e000      	b.n	80216ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80216ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	681b      	ldr	r3, [r3, #0]
 80216f0:	f003 0301 	and.w	r3, r3, #1
 80216f4:	2b00      	cmp	r3, #0
 80216f6:	d074      	beq.n	80217e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80216f8:	69bb      	ldr	r3, [r7, #24]
 80216fa:	2b08      	cmp	r3, #8
 80216fc:	d005      	beq.n	802170a <HAL_RCC_OscConfig+0x21a>
 80216fe:	69bb      	ldr	r3, [r7, #24]
 8021700:	2b0c      	cmp	r3, #12
 8021702:	d10e      	bne.n	8021722 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8021704:	697b      	ldr	r3, [r7, #20]
 8021706:	2b03      	cmp	r3, #3
 8021708:	d10b      	bne.n	8021722 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802170a:	4b1f      	ldr	r3, [pc, #124]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 802170c:	681b      	ldr	r3, [r3, #0]
 802170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021712:	2b00      	cmp	r3, #0
 8021714:	d064      	beq.n	80217e0 <HAL_RCC_OscConfig+0x2f0>
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	685b      	ldr	r3, [r3, #4]
 802171a:	2b00      	cmp	r3, #0
 802171c:	d160      	bne.n	80217e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 802171e:	2301      	movs	r3, #1
 8021720:	e2c4      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021722:	687b      	ldr	r3, [r7, #4]
 8021724:	685b      	ldr	r3, [r3, #4]
 8021726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802172a:	d106      	bne.n	802173a <HAL_RCC_OscConfig+0x24a>
 802172c:	4b16      	ldr	r3, [pc, #88]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 802172e:	681b      	ldr	r3, [r3, #0]
 8021730:	4a15      	ldr	r2, [pc, #84]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021736:	6013      	str	r3, [r2, #0]
 8021738:	e01d      	b.n	8021776 <HAL_RCC_OscConfig+0x286>
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	685b      	ldr	r3, [r3, #4]
 802173e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021742:	d10c      	bne.n	802175e <HAL_RCC_OscConfig+0x26e>
 8021744:	4b10      	ldr	r3, [pc, #64]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021746:	681b      	ldr	r3, [r3, #0]
 8021748:	4a0f      	ldr	r2, [pc, #60]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 802174a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802174e:	6013      	str	r3, [r2, #0]
 8021750:	4b0d      	ldr	r3, [pc, #52]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021752:	681b      	ldr	r3, [r3, #0]
 8021754:	4a0c      	ldr	r2, [pc, #48]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802175a:	6013      	str	r3, [r2, #0]
 802175c:	e00b      	b.n	8021776 <HAL_RCC_OscConfig+0x286>
 802175e:	4b0a      	ldr	r3, [pc, #40]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021760:	681b      	ldr	r3, [r3, #0]
 8021762:	4a09      	ldr	r2, [pc, #36]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021768:	6013      	str	r3, [r2, #0]
 802176a:	4b07      	ldr	r3, [pc, #28]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	4a06      	ldr	r2, [pc, #24]	; (8021788 <HAL_RCC_OscConfig+0x298>)
 8021770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021774:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021776:	687b      	ldr	r3, [r7, #4]
 8021778:	685b      	ldr	r3, [r3, #4]
 802177a:	2b00      	cmp	r3, #0
 802177c:	d01c      	beq.n	80217b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802177e:	f7ff fb11 	bl	8020da4 <HAL_GetTick>
 8021782:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021784:	e011      	b.n	80217aa <HAL_RCC_OscConfig+0x2ba>
 8021786:	bf00      	nop
 8021788:	40021000 	.word	0x40021000
 802178c:	0802346c 	.word	0x0802346c
 8021790:	20000000 	.word	0x20000000
 8021794:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021798:	f7ff fb04 	bl	8020da4 <HAL_GetTick>
 802179c:	4602      	mov	r2, r0
 802179e:	693b      	ldr	r3, [r7, #16]
 80217a0:	1ad3      	subs	r3, r2, r3
 80217a2:	2b64      	cmp	r3, #100	; 0x64
 80217a4:	d901      	bls.n	80217aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80217a6:	2303      	movs	r3, #3
 80217a8:	e280      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80217aa:	4baf      	ldr	r3, [pc, #700]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80217ac:	681b      	ldr	r3, [r3, #0]
 80217ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	d0f0      	beq.n	8021798 <HAL_RCC_OscConfig+0x2a8>
 80217b6:	e014      	b.n	80217e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80217b8:	f7ff faf4 	bl	8020da4 <HAL_GetTick>
 80217bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80217be:	e008      	b.n	80217d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80217c0:	f7ff faf0 	bl	8020da4 <HAL_GetTick>
 80217c4:	4602      	mov	r2, r0
 80217c6:	693b      	ldr	r3, [r7, #16]
 80217c8:	1ad3      	subs	r3, r2, r3
 80217ca:	2b64      	cmp	r3, #100	; 0x64
 80217cc:	d901      	bls.n	80217d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80217ce:	2303      	movs	r3, #3
 80217d0:	e26c      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80217d2:	4ba5      	ldr	r3, [pc, #660]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80217d4:	681b      	ldr	r3, [r3, #0]
 80217d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80217da:	2b00      	cmp	r3, #0
 80217dc:	d1f0      	bne.n	80217c0 <HAL_RCC_OscConfig+0x2d0>
 80217de:	e000      	b.n	80217e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80217e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80217e2:	687b      	ldr	r3, [r7, #4]
 80217e4:	681b      	ldr	r3, [r3, #0]
 80217e6:	f003 0302 	and.w	r3, r3, #2
 80217ea:	2b00      	cmp	r3, #0
 80217ec:	d060      	beq.n	80218b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80217ee:	69bb      	ldr	r3, [r7, #24]
 80217f0:	2b04      	cmp	r3, #4
 80217f2:	d005      	beq.n	8021800 <HAL_RCC_OscConfig+0x310>
 80217f4:	69bb      	ldr	r3, [r7, #24]
 80217f6:	2b0c      	cmp	r3, #12
 80217f8:	d119      	bne.n	802182e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80217fa:	697b      	ldr	r3, [r7, #20]
 80217fc:	2b02      	cmp	r3, #2
 80217fe:	d116      	bne.n	802182e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021800:	4b99      	ldr	r3, [pc, #612]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021802:	681b      	ldr	r3, [r3, #0]
 8021804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021808:	2b00      	cmp	r3, #0
 802180a:	d005      	beq.n	8021818 <HAL_RCC_OscConfig+0x328>
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	68db      	ldr	r3, [r3, #12]
 8021810:	2b00      	cmp	r3, #0
 8021812:	d101      	bne.n	8021818 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8021814:	2301      	movs	r3, #1
 8021816:	e249      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021818:	4b93      	ldr	r3, [pc, #588]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 802181a:	685b      	ldr	r3, [r3, #4]
 802181c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8021820:	687b      	ldr	r3, [r7, #4]
 8021822:	691b      	ldr	r3, [r3, #16]
 8021824:	061b      	lsls	r3, r3, #24
 8021826:	4990      	ldr	r1, [pc, #576]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021828:	4313      	orrs	r3, r2
 802182a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802182c:	e040      	b.n	80218b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	68db      	ldr	r3, [r3, #12]
 8021832:	2b00      	cmp	r3, #0
 8021834:	d023      	beq.n	802187e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021836:	4b8c      	ldr	r3, [pc, #560]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021838:	681b      	ldr	r3, [r3, #0]
 802183a:	4a8b      	ldr	r2, [pc, #556]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 802183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021842:	f7ff faaf 	bl	8020da4 <HAL_GetTick>
 8021846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021848:	e008      	b.n	802185c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802184a:	f7ff faab 	bl	8020da4 <HAL_GetTick>
 802184e:	4602      	mov	r2, r0
 8021850:	693b      	ldr	r3, [r7, #16]
 8021852:	1ad3      	subs	r3, r2, r3
 8021854:	2b02      	cmp	r3, #2
 8021856:	d901      	bls.n	802185c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8021858:	2303      	movs	r3, #3
 802185a:	e227      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 802185c:	4b82      	ldr	r3, [pc, #520]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 802185e:	681b      	ldr	r3, [r3, #0]
 8021860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021864:	2b00      	cmp	r3, #0
 8021866:	d0f0      	beq.n	802184a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021868:	4b7f      	ldr	r3, [pc, #508]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 802186a:	685b      	ldr	r3, [r3, #4]
 802186c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	691b      	ldr	r3, [r3, #16]
 8021874:	061b      	lsls	r3, r3, #24
 8021876:	497c      	ldr	r1, [pc, #496]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021878:	4313      	orrs	r3, r2
 802187a:	604b      	str	r3, [r1, #4]
 802187c:	e018      	b.n	80218b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802187e:	4b7a      	ldr	r3, [pc, #488]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021880:	681b      	ldr	r3, [r3, #0]
 8021882:	4a79      	ldr	r2, [pc, #484]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802188a:	f7ff fa8b 	bl	8020da4 <HAL_GetTick>
 802188e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8021890:	e008      	b.n	80218a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021892:	f7ff fa87 	bl	8020da4 <HAL_GetTick>
 8021896:	4602      	mov	r2, r0
 8021898:	693b      	ldr	r3, [r7, #16]
 802189a:	1ad3      	subs	r3, r2, r3
 802189c:	2b02      	cmp	r3, #2
 802189e:	d901      	bls.n	80218a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80218a0:	2303      	movs	r3, #3
 80218a2:	e203      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80218a4:	4b70      	ldr	r3, [pc, #448]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80218a6:	681b      	ldr	r3, [r3, #0]
 80218a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d1f0      	bne.n	8021892 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	681b      	ldr	r3, [r3, #0]
 80218b4:	f003 0308 	and.w	r3, r3, #8
 80218b8:	2b00      	cmp	r3, #0
 80218ba:	d03c      	beq.n	8021936 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80218bc:	687b      	ldr	r3, [r7, #4]
 80218be:	695b      	ldr	r3, [r3, #20]
 80218c0:	2b00      	cmp	r3, #0
 80218c2:	d01c      	beq.n	80218fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80218c4:	4b68      	ldr	r3, [pc, #416]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80218c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80218ca:	4a67      	ldr	r2, [pc, #412]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80218cc:	f043 0301 	orr.w	r3, r3, #1
 80218d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80218d4:	f7ff fa66 	bl	8020da4 <HAL_GetTick>
 80218d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80218da:	e008      	b.n	80218ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80218dc:	f7ff fa62 	bl	8020da4 <HAL_GetTick>
 80218e0:	4602      	mov	r2, r0
 80218e2:	693b      	ldr	r3, [r7, #16]
 80218e4:	1ad3      	subs	r3, r2, r3
 80218e6:	2b02      	cmp	r3, #2
 80218e8:	d901      	bls.n	80218ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80218ea:	2303      	movs	r3, #3
 80218ec:	e1de      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80218ee:	4b5e      	ldr	r3, [pc, #376]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80218f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80218f4:	f003 0302 	and.w	r3, r3, #2
 80218f8:	2b00      	cmp	r3, #0
 80218fa:	d0ef      	beq.n	80218dc <HAL_RCC_OscConfig+0x3ec>
 80218fc:	e01b      	b.n	8021936 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80218fe:	4b5a      	ldr	r3, [pc, #360]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021904:	4a58      	ldr	r2, [pc, #352]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021906:	f023 0301 	bic.w	r3, r3, #1
 802190a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802190e:	f7ff fa49 	bl	8020da4 <HAL_GetTick>
 8021912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021914:	e008      	b.n	8021928 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021916:	f7ff fa45 	bl	8020da4 <HAL_GetTick>
 802191a:	4602      	mov	r2, r0
 802191c:	693b      	ldr	r3, [r7, #16]
 802191e:	1ad3      	subs	r3, r2, r3
 8021920:	2b02      	cmp	r3, #2
 8021922:	d901      	bls.n	8021928 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8021924:	2303      	movs	r3, #3
 8021926:	e1c1      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021928:	4b4f      	ldr	r3, [pc, #316]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 802192a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802192e:	f003 0302 	and.w	r3, r3, #2
 8021932:	2b00      	cmp	r3, #0
 8021934:	d1ef      	bne.n	8021916 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021936:	687b      	ldr	r3, [r7, #4]
 8021938:	681b      	ldr	r3, [r3, #0]
 802193a:	f003 0304 	and.w	r3, r3, #4
 802193e:	2b00      	cmp	r3, #0
 8021940:	f000 80a6 	beq.w	8021a90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021944:	2300      	movs	r3, #0
 8021946:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8021948:	4b47      	ldr	r3, [pc, #284]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 802194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021950:	2b00      	cmp	r3, #0
 8021952:	d10d      	bne.n	8021970 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021954:	4b44      	ldr	r3, [pc, #272]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021958:	4a43      	ldr	r2, [pc, #268]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 802195a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802195e:	6593      	str	r3, [r2, #88]	; 0x58
 8021960:	4b41      	ldr	r3, [pc, #260]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021968:	60bb      	str	r3, [r7, #8]
 802196a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802196c:	2301      	movs	r3, #1
 802196e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021970:	4b3e      	ldr	r3, [pc, #248]	; (8021a6c <HAL_RCC_OscConfig+0x57c>)
 8021972:	681b      	ldr	r3, [r3, #0]
 8021974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021978:	2b00      	cmp	r3, #0
 802197a:	d118      	bne.n	80219ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802197c:	4b3b      	ldr	r3, [pc, #236]	; (8021a6c <HAL_RCC_OscConfig+0x57c>)
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	4a3a      	ldr	r2, [pc, #232]	; (8021a6c <HAL_RCC_OscConfig+0x57c>)
 8021982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021988:	f7ff fa0c 	bl	8020da4 <HAL_GetTick>
 802198c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802198e:	e008      	b.n	80219a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021990:	f7ff fa08 	bl	8020da4 <HAL_GetTick>
 8021994:	4602      	mov	r2, r0
 8021996:	693b      	ldr	r3, [r7, #16]
 8021998:	1ad3      	subs	r3, r2, r3
 802199a:	2b02      	cmp	r3, #2
 802199c:	d901      	bls.n	80219a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 802199e:	2303      	movs	r3, #3
 80219a0:	e184      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80219a2:	4b32      	ldr	r3, [pc, #200]	; (8021a6c <HAL_RCC_OscConfig+0x57c>)
 80219a4:	681b      	ldr	r3, [r3, #0]
 80219a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80219aa:	2b00      	cmp	r3, #0
 80219ac:	d0f0      	beq.n	8021990 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80219ae:	687b      	ldr	r3, [r7, #4]
 80219b0:	689b      	ldr	r3, [r3, #8]
 80219b2:	2b01      	cmp	r3, #1
 80219b4:	d108      	bne.n	80219c8 <HAL_RCC_OscConfig+0x4d8>
 80219b6:	4b2c      	ldr	r3, [pc, #176]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80219b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80219bc:	4a2a      	ldr	r2, [pc, #168]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80219be:	f043 0301 	orr.w	r3, r3, #1
 80219c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80219c6:	e024      	b.n	8021a12 <HAL_RCC_OscConfig+0x522>
 80219c8:	687b      	ldr	r3, [r7, #4]
 80219ca:	689b      	ldr	r3, [r3, #8]
 80219cc:	2b05      	cmp	r3, #5
 80219ce:	d110      	bne.n	80219f2 <HAL_RCC_OscConfig+0x502>
 80219d0:	4b25      	ldr	r3, [pc, #148]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80219d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80219d6:	4a24      	ldr	r2, [pc, #144]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80219d8:	f043 0304 	orr.w	r3, r3, #4
 80219dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80219e0:	4b21      	ldr	r3, [pc, #132]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80219e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80219e6:	4a20      	ldr	r2, [pc, #128]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80219e8:	f043 0301 	orr.w	r3, r3, #1
 80219ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80219f0:	e00f      	b.n	8021a12 <HAL_RCC_OscConfig+0x522>
 80219f2:	4b1d      	ldr	r3, [pc, #116]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80219f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80219f8:	4a1b      	ldr	r2, [pc, #108]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 80219fa:	f023 0301 	bic.w	r3, r3, #1
 80219fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8021a02:	4b19      	ldr	r3, [pc, #100]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021a08:	4a17      	ldr	r2, [pc, #92]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021a0a:	f023 0304 	bic.w	r3, r3, #4
 8021a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	689b      	ldr	r3, [r3, #8]
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d016      	beq.n	8021a48 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021a1a:	f7ff f9c3 	bl	8020da4 <HAL_GetTick>
 8021a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8021a20:	e00a      	b.n	8021a38 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021a22:	f7ff f9bf 	bl	8020da4 <HAL_GetTick>
 8021a26:	4602      	mov	r2, r0
 8021a28:	693b      	ldr	r3, [r7, #16]
 8021a2a:	1ad3      	subs	r3, r2, r3
 8021a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8021a30:	4293      	cmp	r3, r2
 8021a32:	d901      	bls.n	8021a38 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8021a34:	2303      	movs	r3, #3
 8021a36:	e139      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8021a38:	4b0b      	ldr	r3, [pc, #44]	; (8021a68 <HAL_RCC_OscConfig+0x578>)
 8021a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021a3e:	f003 0302 	and.w	r3, r3, #2
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d0ed      	beq.n	8021a22 <HAL_RCC_OscConfig+0x532>
 8021a46:	e01a      	b.n	8021a7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021a48:	f7ff f9ac 	bl	8020da4 <HAL_GetTick>
 8021a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8021a4e:	e00f      	b.n	8021a70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021a50:	f7ff f9a8 	bl	8020da4 <HAL_GetTick>
 8021a54:	4602      	mov	r2, r0
 8021a56:	693b      	ldr	r3, [r7, #16]
 8021a58:	1ad3      	subs	r3, r2, r3
 8021a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8021a5e:	4293      	cmp	r3, r2
 8021a60:	d906      	bls.n	8021a70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8021a62:	2303      	movs	r3, #3
 8021a64:	e122      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
 8021a66:	bf00      	nop
 8021a68:	40021000 	.word	0x40021000
 8021a6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8021a70:	4b90      	ldr	r3, [pc, #576]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021a76:	f003 0302 	and.w	r3, r3, #2
 8021a7a:	2b00      	cmp	r3, #0
 8021a7c:	d1e8      	bne.n	8021a50 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8021a7e:	7ffb      	ldrb	r3, [r7, #31]
 8021a80:	2b01      	cmp	r3, #1
 8021a82:	d105      	bne.n	8021a90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021a84:	4b8b      	ldr	r3, [pc, #556]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021a88:	4a8a      	ldr	r2, [pc, #552]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021a8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8021a90:	687b      	ldr	r3, [r7, #4]
 8021a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a94:	2b00      	cmp	r3, #0
 8021a96:	f000 8108 	beq.w	8021caa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a9e:	2b02      	cmp	r3, #2
 8021aa0:	f040 80d0 	bne.w	8021c44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8021aa4:	4b83      	ldr	r3, [pc, #524]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021aa6:	68db      	ldr	r3, [r3, #12]
 8021aa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021aaa:	697b      	ldr	r3, [r7, #20]
 8021aac:	f003 0203 	and.w	r2, r3, #3
 8021ab0:	687b      	ldr	r3, [r7, #4]
 8021ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ab4:	429a      	cmp	r2, r3
 8021ab6:	d130      	bne.n	8021b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8021ab8:	697b      	ldr	r3, [r7, #20]
 8021aba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8021abe:	687b      	ldr	r3, [r7, #4]
 8021ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ac2:	3b01      	subs	r3, #1
 8021ac4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021ac6:	429a      	cmp	r2, r3
 8021ac8:	d127      	bne.n	8021b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021aca:	697b      	ldr	r3, [r7, #20]
 8021acc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021ad4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8021ad6:	429a      	cmp	r2, r3
 8021ad8:	d11f      	bne.n	8021b1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8021ada:	697b      	ldr	r3, [r7, #20]
 8021adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021ae0:	687a      	ldr	r2, [r7, #4]
 8021ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8021ae4:	2a07      	cmp	r2, #7
 8021ae6:	bf14      	ite	ne
 8021ae8:	2201      	movne	r2, #1
 8021aea:	2200      	moveq	r2, #0
 8021aec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021aee:	4293      	cmp	r3, r2
 8021af0:	d113      	bne.n	8021b1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021af2:	697b      	ldr	r3, [r7, #20]
 8021af4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8021af8:	687b      	ldr	r3, [r7, #4]
 8021afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021afc:	085b      	lsrs	r3, r3, #1
 8021afe:	3b01      	subs	r3, #1
 8021b00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8021b02:	429a      	cmp	r2, r3
 8021b04:	d109      	bne.n	8021b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8021b06:	697b      	ldr	r3, [r7, #20]
 8021b08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8021b0c:	687b      	ldr	r3, [r7, #4]
 8021b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b10:	085b      	lsrs	r3, r3, #1
 8021b12:	3b01      	subs	r3, #1
 8021b14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021b16:	429a      	cmp	r2, r3
 8021b18:	d06e      	beq.n	8021bf8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8021b1a:	69bb      	ldr	r3, [r7, #24]
 8021b1c:	2b0c      	cmp	r3, #12
 8021b1e:	d069      	beq.n	8021bf4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8021b20:	4b64      	ldr	r3, [pc, #400]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021b22:	681b      	ldr	r3, [r3, #0]
 8021b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	d105      	bne.n	8021b38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8021b2c:	4b61      	ldr	r3, [pc, #388]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	d001      	beq.n	8021b3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8021b38:	2301      	movs	r3, #1
 8021b3a:	e0b7      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8021b3c:	4b5d      	ldr	r3, [pc, #372]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021b3e:	681b      	ldr	r3, [r3, #0]
 8021b40:	4a5c      	ldr	r2, [pc, #368]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8021b46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8021b48:	f7ff f92c 	bl	8020da4 <HAL_GetTick>
 8021b4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021b4e:	e008      	b.n	8021b62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021b50:	f7ff f928 	bl	8020da4 <HAL_GetTick>
 8021b54:	4602      	mov	r2, r0
 8021b56:	693b      	ldr	r3, [r7, #16]
 8021b58:	1ad3      	subs	r3, r2, r3
 8021b5a:	2b02      	cmp	r3, #2
 8021b5c:	d901      	bls.n	8021b62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8021b5e:	2303      	movs	r3, #3
 8021b60:	e0a4      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021b62:	4b54      	ldr	r3, [pc, #336]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021b64:	681b      	ldr	r3, [r3, #0]
 8021b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	d1f0      	bne.n	8021b50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8021b6e:	4b51      	ldr	r3, [pc, #324]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021b70:	68da      	ldr	r2, [r3, #12]
 8021b72:	4b51      	ldr	r3, [pc, #324]	; (8021cb8 <HAL_RCC_OscConfig+0x7c8>)
 8021b74:	4013      	ands	r3, r2
 8021b76:	687a      	ldr	r2, [r7, #4]
 8021b78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8021b7a:	687a      	ldr	r2, [r7, #4]
 8021b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8021b7e:	3a01      	subs	r2, #1
 8021b80:	0112      	lsls	r2, r2, #4
 8021b82:	4311      	orrs	r1, r2
 8021b84:	687a      	ldr	r2, [r7, #4]
 8021b86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8021b88:	0212      	lsls	r2, r2, #8
 8021b8a:	4311      	orrs	r1, r2
 8021b8c:	687a      	ldr	r2, [r7, #4]
 8021b8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8021b90:	0852      	lsrs	r2, r2, #1
 8021b92:	3a01      	subs	r2, #1
 8021b94:	0552      	lsls	r2, r2, #21
 8021b96:	4311      	orrs	r1, r2
 8021b98:	687a      	ldr	r2, [r7, #4]
 8021b9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8021b9c:	0852      	lsrs	r2, r2, #1
 8021b9e:	3a01      	subs	r2, #1
 8021ba0:	0652      	lsls	r2, r2, #25
 8021ba2:	4311      	orrs	r1, r2
 8021ba4:	687a      	ldr	r2, [r7, #4]
 8021ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8021ba8:	0912      	lsrs	r2, r2, #4
 8021baa:	0452      	lsls	r2, r2, #17
 8021bac:	430a      	orrs	r2, r1
 8021bae:	4941      	ldr	r1, [pc, #260]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021bb0:	4313      	orrs	r3, r2
 8021bb2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8021bb4:	4b3f      	ldr	r3, [pc, #252]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	4a3e      	ldr	r2, [pc, #248]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021bbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8021bc0:	4b3c      	ldr	r3, [pc, #240]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021bc2:	68db      	ldr	r3, [r3, #12]
 8021bc4:	4a3b      	ldr	r2, [pc, #236]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021bca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8021bcc:	f7ff f8ea 	bl	8020da4 <HAL_GetTick>
 8021bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021bd2:	e008      	b.n	8021be6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021bd4:	f7ff f8e6 	bl	8020da4 <HAL_GetTick>
 8021bd8:	4602      	mov	r2, r0
 8021bda:	693b      	ldr	r3, [r7, #16]
 8021bdc:	1ad3      	subs	r3, r2, r3
 8021bde:	2b02      	cmp	r3, #2
 8021be0:	d901      	bls.n	8021be6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8021be2:	2303      	movs	r3, #3
 8021be4:	e062      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021be6:	4b33      	ldr	r3, [pc, #204]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021be8:	681b      	ldr	r3, [r3, #0]
 8021bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021bee:	2b00      	cmp	r3, #0
 8021bf0:	d0f0      	beq.n	8021bd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8021bf2:	e05a      	b.n	8021caa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8021bf4:	2301      	movs	r3, #1
 8021bf6:	e059      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021bf8:	4b2e      	ldr	r3, [pc, #184]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	d152      	bne.n	8021caa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8021c04:	4b2b      	ldr	r3, [pc, #172]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c06:	681b      	ldr	r3, [r3, #0]
 8021c08:	4a2a      	ldr	r2, [pc, #168]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021c0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8021c10:	4b28      	ldr	r3, [pc, #160]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c12:	68db      	ldr	r3, [r3, #12]
 8021c14:	4a27      	ldr	r2, [pc, #156]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021c1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8021c1c:	f7ff f8c2 	bl	8020da4 <HAL_GetTick>
 8021c20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021c22:	e008      	b.n	8021c36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021c24:	f7ff f8be 	bl	8020da4 <HAL_GetTick>
 8021c28:	4602      	mov	r2, r0
 8021c2a:	693b      	ldr	r3, [r7, #16]
 8021c2c:	1ad3      	subs	r3, r2, r3
 8021c2e:	2b02      	cmp	r3, #2
 8021c30:	d901      	bls.n	8021c36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8021c32:	2303      	movs	r3, #3
 8021c34:	e03a      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021c36:	4b1f      	ldr	r3, [pc, #124]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d0f0      	beq.n	8021c24 <HAL_RCC_OscConfig+0x734>
 8021c42:	e032      	b.n	8021caa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8021c44:	69bb      	ldr	r3, [r7, #24]
 8021c46:	2b0c      	cmp	r3, #12
 8021c48:	d02d      	beq.n	8021ca6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021c4a:	4b1a      	ldr	r3, [pc, #104]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c4c:	681b      	ldr	r3, [r3, #0]
 8021c4e:	4a19      	ldr	r2, [pc, #100]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8021c54:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8021c56:	4b17      	ldr	r3, [pc, #92]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c58:	681b      	ldr	r3, [r3, #0]
 8021c5a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	d105      	bne.n	8021c6e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8021c62:	4b14      	ldr	r3, [pc, #80]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c64:	68db      	ldr	r3, [r3, #12]
 8021c66:	4a13      	ldr	r2, [pc, #76]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c68:	f023 0303 	bic.w	r3, r3, #3
 8021c6c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8021c6e:	4b11      	ldr	r3, [pc, #68]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c70:	68db      	ldr	r3, [r3, #12]
 8021c72:	4a10      	ldr	r2, [pc, #64]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8021c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021c7c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021c7e:	f7ff f891 	bl	8020da4 <HAL_GetTick>
 8021c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021c84:	e008      	b.n	8021c98 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021c86:	f7ff f88d 	bl	8020da4 <HAL_GetTick>
 8021c8a:	4602      	mov	r2, r0
 8021c8c:	693b      	ldr	r3, [r7, #16]
 8021c8e:	1ad3      	subs	r3, r2, r3
 8021c90:	2b02      	cmp	r3, #2
 8021c92:	d901      	bls.n	8021c98 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8021c94:	2303      	movs	r3, #3
 8021c96:	e009      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021c98:	4b06      	ldr	r3, [pc, #24]	; (8021cb4 <HAL_RCC_OscConfig+0x7c4>)
 8021c9a:	681b      	ldr	r3, [r3, #0]
 8021c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	d1f0      	bne.n	8021c86 <HAL_RCC_OscConfig+0x796>
 8021ca4:	e001      	b.n	8021caa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8021ca6:	2301      	movs	r3, #1
 8021ca8:	e000      	b.n	8021cac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8021caa:	2300      	movs	r3, #0
}
 8021cac:	4618      	mov	r0, r3
 8021cae:	3720      	adds	r7, #32
 8021cb0:	46bd      	mov	sp, r7
 8021cb2:	bd80      	pop	{r7, pc}
 8021cb4:	40021000 	.word	0x40021000
 8021cb8:	f99d808c 	.word	0xf99d808c

08021cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8021cbc:	b580      	push	{r7, lr}
 8021cbe:	b084      	sub	sp, #16
 8021cc0:	af00      	add	r7, sp, #0
 8021cc2:	6078      	str	r0, [r7, #4]
 8021cc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8021cc6:	687b      	ldr	r3, [r7, #4]
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	d101      	bne.n	8021cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8021ccc:	2301      	movs	r3, #1
 8021cce:	e0c8      	b.n	8021e62 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8021cd0:	4b66      	ldr	r3, [pc, #408]	; (8021e6c <HAL_RCC_ClockConfig+0x1b0>)
 8021cd2:	681b      	ldr	r3, [r3, #0]
 8021cd4:	f003 0307 	and.w	r3, r3, #7
 8021cd8:	683a      	ldr	r2, [r7, #0]
 8021cda:	429a      	cmp	r2, r3
 8021cdc:	d910      	bls.n	8021d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021cde:	4b63      	ldr	r3, [pc, #396]	; (8021e6c <HAL_RCC_ClockConfig+0x1b0>)
 8021ce0:	681b      	ldr	r3, [r3, #0]
 8021ce2:	f023 0207 	bic.w	r2, r3, #7
 8021ce6:	4961      	ldr	r1, [pc, #388]	; (8021e6c <HAL_RCC_ClockConfig+0x1b0>)
 8021ce8:	683b      	ldr	r3, [r7, #0]
 8021cea:	4313      	orrs	r3, r2
 8021cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021cee:	4b5f      	ldr	r3, [pc, #380]	; (8021e6c <HAL_RCC_ClockConfig+0x1b0>)
 8021cf0:	681b      	ldr	r3, [r3, #0]
 8021cf2:	f003 0307 	and.w	r3, r3, #7
 8021cf6:	683a      	ldr	r2, [r7, #0]
 8021cf8:	429a      	cmp	r2, r3
 8021cfa:	d001      	beq.n	8021d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8021cfc:	2301      	movs	r3, #1
 8021cfe:	e0b0      	b.n	8021e62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	681b      	ldr	r3, [r3, #0]
 8021d04:	f003 0301 	and.w	r3, r3, #1
 8021d08:	2b00      	cmp	r3, #0
 8021d0a:	d04c      	beq.n	8021da6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8021d0c:	687b      	ldr	r3, [r7, #4]
 8021d0e:	685b      	ldr	r3, [r3, #4]
 8021d10:	2b03      	cmp	r3, #3
 8021d12:	d107      	bne.n	8021d24 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021d14:	4b56      	ldr	r3, [pc, #344]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021d16:	681b      	ldr	r3, [r3, #0]
 8021d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021d1c:	2b00      	cmp	r3, #0
 8021d1e:	d121      	bne.n	8021d64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8021d20:	2301      	movs	r3, #1
 8021d22:	e09e      	b.n	8021e62 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8021d24:	687b      	ldr	r3, [r7, #4]
 8021d26:	685b      	ldr	r3, [r3, #4]
 8021d28:	2b02      	cmp	r3, #2
 8021d2a:	d107      	bne.n	8021d3c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021d2c:	4b50      	ldr	r3, [pc, #320]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021d2e:	681b      	ldr	r3, [r3, #0]
 8021d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	d115      	bne.n	8021d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8021d38:	2301      	movs	r3, #1
 8021d3a:	e092      	b.n	8021e62 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	685b      	ldr	r3, [r3, #4]
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d107      	bne.n	8021d54 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021d44:	4b4a      	ldr	r3, [pc, #296]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021d46:	681b      	ldr	r3, [r3, #0]
 8021d48:	f003 0302 	and.w	r3, r3, #2
 8021d4c:	2b00      	cmp	r3, #0
 8021d4e:	d109      	bne.n	8021d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8021d50:	2301      	movs	r3, #1
 8021d52:	e086      	b.n	8021e62 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021d54:	4b46      	ldr	r3, [pc, #280]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021d56:	681b      	ldr	r3, [r3, #0]
 8021d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021d5c:	2b00      	cmp	r3, #0
 8021d5e:	d101      	bne.n	8021d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8021d60:	2301      	movs	r3, #1
 8021d62:	e07e      	b.n	8021e62 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8021d64:	4b42      	ldr	r3, [pc, #264]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021d66:	689b      	ldr	r3, [r3, #8]
 8021d68:	f023 0203 	bic.w	r2, r3, #3
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	685b      	ldr	r3, [r3, #4]
 8021d70:	493f      	ldr	r1, [pc, #252]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021d72:	4313      	orrs	r3, r2
 8021d74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021d76:	f7ff f815 	bl	8020da4 <HAL_GetTick>
 8021d7a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021d7c:	e00a      	b.n	8021d94 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021d7e:	f7ff f811 	bl	8020da4 <HAL_GetTick>
 8021d82:	4602      	mov	r2, r0
 8021d84:	68fb      	ldr	r3, [r7, #12]
 8021d86:	1ad3      	subs	r3, r2, r3
 8021d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8021d8c:	4293      	cmp	r3, r2
 8021d8e:	d901      	bls.n	8021d94 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8021d90:	2303      	movs	r3, #3
 8021d92:	e066      	b.n	8021e62 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021d94:	4b36      	ldr	r3, [pc, #216]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021d96:	689b      	ldr	r3, [r3, #8]
 8021d98:	f003 020c 	and.w	r2, r3, #12
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	685b      	ldr	r3, [r3, #4]
 8021da0:	009b      	lsls	r3, r3, #2
 8021da2:	429a      	cmp	r2, r3
 8021da4:	d1eb      	bne.n	8021d7e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	681b      	ldr	r3, [r3, #0]
 8021daa:	f003 0302 	and.w	r3, r3, #2
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	d008      	beq.n	8021dc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021db2:	4b2f      	ldr	r3, [pc, #188]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021db4:	689b      	ldr	r3, [r3, #8]
 8021db6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021dba:	687b      	ldr	r3, [r7, #4]
 8021dbc:	689b      	ldr	r3, [r3, #8]
 8021dbe:	492c      	ldr	r1, [pc, #176]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021dc0:	4313      	orrs	r3, r2
 8021dc2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021dc4:	4b29      	ldr	r3, [pc, #164]	; (8021e6c <HAL_RCC_ClockConfig+0x1b0>)
 8021dc6:	681b      	ldr	r3, [r3, #0]
 8021dc8:	f003 0307 	and.w	r3, r3, #7
 8021dcc:	683a      	ldr	r2, [r7, #0]
 8021dce:	429a      	cmp	r2, r3
 8021dd0:	d210      	bcs.n	8021df4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021dd2:	4b26      	ldr	r3, [pc, #152]	; (8021e6c <HAL_RCC_ClockConfig+0x1b0>)
 8021dd4:	681b      	ldr	r3, [r3, #0]
 8021dd6:	f023 0207 	bic.w	r2, r3, #7
 8021dda:	4924      	ldr	r1, [pc, #144]	; (8021e6c <HAL_RCC_ClockConfig+0x1b0>)
 8021ddc:	683b      	ldr	r3, [r7, #0]
 8021dde:	4313      	orrs	r3, r2
 8021de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021de2:	4b22      	ldr	r3, [pc, #136]	; (8021e6c <HAL_RCC_ClockConfig+0x1b0>)
 8021de4:	681b      	ldr	r3, [r3, #0]
 8021de6:	f003 0307 	and.w	r3, r3, #7
 8021dea:	683a      	ldr	r2, [r7, #0]
 8021dec:	429a      	cmp	r2, r3
 8021dee:	d001      	beq.n	8021df4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8021df0:	2301      	movs	r3, #1
 8021df2:	e036      	b.n	8021e62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021df4:	687b      	ldr	r3, [r7, #4]
 8021df6:	681b      	ldr	r3, [r3, #0]
 8021df8:	f003 0304 	and.w	r3, r3, #4
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	d008      	beq.n	8021e12 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021e00:	4b1b      	ldr	r3, [pc, #108]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021e02:	689b      	ldr	r3, [r3, #8]
 8021e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8021e08:	687b      	ldr	r3, [r7, #4]
 8021e0a:	68db      	ldr	r3, [r3, #12]
 8021e0c:	4918      	ldr	r1, [pc, #96]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021e0e:	4313      	orrs	r3, r2
 8021e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021e12:	687b      	ldr	r3, [r7, #4]
 8021e14:	681b      	ldr	r3, [r3, #0]
 8021e16:	f003 0308 	and.w	r3, r3, #8
 8021e1a:	2b00      	cmp	r3, #0
 8021e1c:	d009      	beq.n	8021e32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021e1e:	4b14      	ldr	r3, [pc, #80]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021e20:	689b      	ldr	r3, [r3, #8]
 8021e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8021e26:	687b      	ldr	r3, [r7, #4]
 8021e28:	691b      	ldr	r3, [r3, #16]
 8021e2a:	00db      	lsls	r3, r3, #3
 8021e2c:	4910      	ldr	r1, [pc, #64]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021e2e:	4313      	orrs	r3, r2
 8021e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021e32:	f000 f825 	bl	8021e80 <HAL_RCC_GetSysClockFreq>
 8021e36:	4602      	mov	r2, r0
 8021e38:	4b0d      	ldr	r3, [pc, #52]	; (8021e70 <HAL_RCC_ClockConfig+0x1b4>)
 8021e3a:	689b      	ldr	r3, [r3, #8]
 8021e3c:	091b      	lsrs	r3, r3, #4
 8021e3e:	f003 030f 	and.w	r3, r3, #15
 8021e42:	490c      	ldr	r1, [pc, #48]	; (8021e74 <HAL_RCC_ClockConfig+0x1b8>)
 8021e44:	5ccb      	ldrb	r3, [r1, r3]
 8021e46:	f003 031f 	and.w	r3, r3, #31
 8021e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8021e4e:	4a0a      	ldr	r2, [pc, #40]	; (8021e78 <HAL_RCC_ClockConfig+0x1bc>)
 8021e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8021e52:	4b0a      	ldr	r3, [pc, #40]	; (8021e7c <HAL_RCC_ClockConfig+0x1c0>)
 8021e54:	681b      	ldr	r3, [r3, #0]
 8021e56:	4618      	mov	r0, r3
 8021e58:	f7fe ff54 	bl	8020d04 <HAL_InitTick>
 8021e5c:	4603      	mov	r3, r0
 8021e5e:	72fb      	strb	r3, [r7, #11]

  return status;
 8021e60:	7afb      	ldrb	r3, [r7, #11]
}
 8021e62:	4618      	mov	r0, r3
 8021e64:	3710      	adds	r7, #16
 8021e66:	46bd      	mov	sp, r7
 8021e68:	bd80      	pop	{r7, pc}
 8021e6a:	bf00      	nop
 8021e6c:	40022000 	.word	0x40022000
 8021e70:	40021000 	.word	0x40021000
 8021e74:	0802346c 	.word	0x0802346c
 8021e78:	20000000 	.word	0x20000000
 8021e7c:	20000004 	.word	0x20000004

08021e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021e80:	b480      	push	{r7}
 8021e82:	b089      	sub	sp, #36	; 0x24
 8021e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8021e86:	2300      	movs	r3, #0
 8021e88:	61fb      	str	r3, [r7, #28]
 8021e8a:	2300      	movs	r3, #0
 8021e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021e8e:	4b3e      	ldr	r3, [pc, #248]	; (8021f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8021e90:	689b      	ldr	r3, [r3, #8]
 8021e92:	f003 030c 	and.w	r3, r3, #12
 8021e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021e98:	4b3b      	ldr	r3, [pc, #236]	; (8021f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8021e9a:	68db      	ldr	r3, [r3, #12]
 8021e9c:	f003 0303 	and.w	r3, r3, #3
 8021ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021ea2:	693b      	ldr	r3, [r7, #16]
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	d005      	beq.n	8021eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8021ea8:	693b      	ldr	r3, [r7, #16]
 8021eaa:	2b0c      	cmp	r3, #12
 8021eac:	d121      	bne.n	8021ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8021eae:	68fb      	ldr	r3, [r7, #12]
 8021eb0:	2b01      	cmp	r3, #1
 8021eb2:	d11e      	bne.n	8021ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021eb4:	4b34      	ldr	r3, [pc, #208]	; (8021f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8021eb6:	681b      	ldr	r3, [r3, #0]
 8021eb8:	f003 0308 	and.w	r3, r3, #8
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	d107      	bne.n	8021ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021ec0:	4b31      	ldr	r3, [pc, #196]	; (8021f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8021ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021ec6:	0a1b      	lsrs	r3, r3, #8
 8021ec8:	f003 030f 	and.w	r3, r3, #15
 8021ecc:	61fb      	str	r3, [r7, #28]
 8021ece:	e005      	b.n	8021edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021ed0:	4b2d      	ldr	r3, [pc, #180]	; (8021f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8021ed2:	681b      	ldr	r3, [r3, #0]
 8021ed4:	091b      	lsrs	r3, r3, #4
 8021ed6:	f003 030f 	and.w	r3, r3, #15
 8021eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8021edc:	4a2b      	ldr	r2, [pc, #172]	; (8021f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8021ede:	69fb      	ldr	r3, [r7, #28]
 8021ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021ee6:	693b      	ldr	r3, [r7, #16]
 8021ee8:	2b00      	cmp	r3, #0
 8021eea:	d10d      	bne.n	8021f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8021eec:	69fb      	ldr	r3, [r7, #28]
 8021eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021ef0:	e00a      	b.n	8021f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8021ef2:	693b      	ldr	r3, [r7, #16]
 8021ef4:	2b04      	cmp	r3, #4
 8021ef6:	d102      	bne.n	8021efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8021ef8:	4b25      	ldr	r3, [pc, #148]	; (8021f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8021efa:	61bb      	str	r3, [r7, #24]
 8021efc:	e004      	b.n	8021f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8021efe:	693b      	ldr	r3, [r7, #16]
 8021f00:	2b08      	cmp	r3, #8
 8021f02:	d101      	bne.n	8021f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8021f04:	4b23      	ldr	r3, [pc, #140]	; (8021f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8021f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8021f08:	693b      	ldr	r3, [r7, #16]
 8021f0a:	2b0c      	cmp	r3, #12
 8021f0c:	d134      	bne.n	8021f78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8021f0e:	4b1e      	ldr	r3, [pc, #120]	; (8021f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8021f10:	68db      	ldr	r3, [r3, #12]
 8021f12:	f003 0303 	and.w	r3, r3, #3
 8021f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8021f18:	68bb      	ldr	r3, [r7, #8]
 8021f1a:	2b02      	cmp	r3, #2
 8021f1c:	d003      	beq.n	8021f26 <HAL_RCC_GetSysClockFreq+0xa6>
 8021f1e:	68bb      	ldr	r3, [r7, #8]
 8021f20:	2b03      	cmp	r3, #3
 8021f22:	d003      	beq.n	8021f2c <HAL_RCC_GetSysClockFreq+0xac>
 8021f24:	e005      	b.n	8021f32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8021f26:	4b1a      	ldr	r3, [pc, #104]	; (8021f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8021f28:	617b      	str	r3, [r7, #20]
      break;
 8021f2a:	e005      	b.n	8021f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8021f2c:	4b19      	ldr	r3, [pc, #100]	; (8021f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8021f2e:	617b      	str	r3, [r7, #20]
      break;
 8021f30:	e002      	b.n	8021f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8021f32:	69fb      	ldr	r3, [r7, #28]
 8021f34:	617b      	str	r3, [r7, #20]
      break;
 8021f36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021f38:	4b13      	ldr	r3, [pc, #76]	; (8021f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8021f3a:	68db      	ldr	r3, [r3, #12]
 8021f3c:	091b      	lsrs	r3, r3, #4
 8021f3e:	f003 0307 	and.w	r3, r3, #7
 8021f42:	3301      	adds	r3, #1
 8021f44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021f46:	4b10      	ldr	r3, [pc, #64]	; (8021f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8021f48:	68db      	ldr	r3, [r3, #12]
 8021f4a:	0a1b      	lsrs	r3, r3, #8
 8021f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021f50:	697a      	ldr	r2, [r7, #20]
 8021f52:	fb02 f203 	mul.w	r2, r2, r3
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8021f5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021f5e:	4b0a      	ldr	r3, [pc, #40]	; (8021f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8021f60:	68db      	ldr	r3, [r3, #12]
 8021f62:	0e5b      	lsrs	r3, r3, #25
 8021f64:	f003 0303 	and.w	r3, r3, #3
 8021f68:	3301      	adds	r3, #1
 8021f6a:	005b      	lsls	r3, r3, #1
 8021f6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8021f6e:	697a      	ldr	r2, [r7, #20]
 8021f70:	683b      	ldr	r3, [r7, #0]
 8021f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8021f76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8021f78:	69bb      	ldr	r3, [r7, #24]
}
 8021f7a:	4618      	mov	r0, r3
 8021f7c:	3724      	adds	r7, #36	; 0x24
 8021f7e:	46bd      	mov	sp, r7
 8021f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f84:	4770      	bx	lr
 8021f86:	bf00      	nop
 8021f88:	40021000 	.word	0x40021000
 8021f8c:	08023484 	.word	0x08023484
 8021f90:	00f42400 	.word	0x00f42400
 8021f94:	007a1200 	.word	0x007a1200

08021f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8021f98:	b480      	push	{r7}
 8021f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8021f9c:	4b03      	ldr	r3, [pc, #12]	; (8021fac <HAL_RCC_GetHCLKFreq+0x14>)
 8021f9e:	681b      	ldr	r3, [r3, #0]
}
 8021fa0:	4618      	mov	r0, r3
 8021fa2:	46bd      	mov	sp, r7
 8021fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fa8:	4770      	bx	lr
 8021faa:	bf00      	nop
 8021fac:	20000000 	.word	0x20000000

08021fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8021fb0:	b580      	push	{r7, lr}
 8021fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8021fb4:	f7ff fff0 	bl	8021f98 <HAL_RCC_GetHCLKFreq>
 8021fb8:	4602      	mov	r2, r0
 8021fba:	4b06      	ldr	r3, [pc, #24]	; (8021fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8021fbc:	689b      	ldr	r3, [r3, #8]
 8021fbe:	0a1b      	lsrs	r3, r3, #8
 8021fc0:	f003 0307 	and.w	r3, r3, #7
 8021fc4:	4904      	ldr	r1, [pc, #16]	; (8021fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8021fc6:	5ccb      	ldrb	r3, [r1, r3]
 8021fc8:	f003 031f 	and.w	r3, r3, #31
 8021fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021fd0:	4618      	mov	r0, r3
 8021fd2:	bd80      	pop	{r7, pc}
 8021fd4:	40021000 	.word	0x40021000
 8021fd8:	0802347c 	.word	0x0802347c

08021fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8021fdc:	b580      	push	{r7, lr}
 8021fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8021fe0:	f7ff ffda 	bl	8021f98 <HAL_RCC_GetHCLKFreq>
 8021fe4:	4602      	mov	r2, r0
 8021fe6:	4b06      	ldr	r3, [pc, #24]	; (8022000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8021fe8:	689b      	ldr	r3, [r3, #8]
 8021fea:	0adb      	lsrs	r3, r3, #11
 8021fec:	f003 0307 	and.w	r3, r3, #7
 8021ff0:	4904      	ldr	r1, [pc, #16]	; (8022004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8021ff2:	5ccb      	ldrb	r3, [r1, r3]
 8021ff4:	f003 031f 	and.w	r3, r3, #31
 8021ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021ffc:	4618      	mov	r0, r3
 8021ffe:	bd80      	pop	{r7, pc}
 8022000:	40021000 	.word	0x40021000
 8022004:	0802347c 	.word	0x0802347c

08022008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8022008:	b580      	push	{r7, lr}
 802200a:	b086      	sub	sp, #24
 802200c:	af00      	add	r7, sp, #0
 802200e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8022010:	2300      	movs	r3, #0
 8022012:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8022014:	4b2a      	ldr	r3, [pc, #168]	; (80220c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8022016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802201c:	2b00      	cmp	r3, #0
 802201e:	d003      	beq.n	8022028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8022020:	f7ff fa02 	bl	8021428 <HAL_PWREx_GetVoltageRange>
 8022024:	6178      	str	r0, [r7, #20]
 8022026:	e014      	b.n	8022052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8022028:	4b25      	ldr	r3, [pc, #148]	; (80220c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 802202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802202c:	4a24      	ldr	r2, [pc, #144]	; (80220c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 802202e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022032:	6593      	str	r3, [r2, #88]	; 0x58
 8022034:	4b22      	ldr	r3, [pc, #136]	; (80220c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8022036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802203c:	60fb      	str	r3, [r7, #12]
 802203e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8022040:	f7ff f9f2 	bl	8021428 <HAL_PWREx_GetVoltageRange>
 8022044:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8022046:	4b1e      	ldr	r3, [pc, #120]	; (80220c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8022048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802204a:	4a1d      	ldr	r2, [pc, #116]	; (80220c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 802204c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022050:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8022052:	697b      	ldr	r3, [r7, #20]
 8022054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022058:	d10b      	bne.n	8022072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 802205a:	687b      	ldr	r3, [r7, #4]
 802205c:	2b80      	cmp	r3, #128	; 0x80
 802205e:	d919      	bls.n	8022094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8022060:	687b      	ldr	r3, [r7, #4]
 8022062:	2ba0      	cmp	r3, #160	; 0xa0
 8022064:	d902      	bls.n	802206c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8022066:	2302      	movs	r3, #2
 8022068:	613b      	str	r3, [r7, #16]
 802206a:	e013      	b.n	8022094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 802206c:	2301      	movs	r3, #1
 802206e:	613b      	str	r3, [r7, #16]
 8022070:	e010      	b.n	8022094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	2b80      	cmp	r3, #128	; 0x80
 8022076:	d902      	bls.n	802207e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8022078:	2303      	movs	r3, #3
 802207a:	613b      	str	r3, [r7, #16]
 802207c:	e00a      	b.n	8022094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	2b80      	cmp	r3, #128	; 0x80
 8022082:	d102      	bne.n	802208a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8022084:	2302      	movs	r3, #2
 8022086:	613b      	str	r3, [r7, #16]
 8022088:	e004      	b.n	8022094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	2b70      	cmp	r3, #112	; 0x70
 802208e:	d101      	bne.n	8022094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8022090:	2301      	movs	r3, #1
 8022092:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8022094:	4b0b      	ldr	r3, [pc, #44]	; (80220c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8022096:	681b      	ldr	r3, [r3, #0]
 8022098:	f023 0207 	bic.w	r2, r3, #7
 802209c:	4909      	ldr	r1, [pc, #36]	; (80220c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 802209e:	693b      	ldr	r3, [r7, #16]
 80220a0:	4313      	orrs	r3, r2
 80220a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80220a4:	4b07      	ldr	r3, [pc, #28]	; (80220c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80220a6:	681b      	ldr	r3, [r3, #0]
 80220a8:	f003 0307 	and.w	r3, r3, #7
 80220ac:	693a      	ldr	r2, [r7, #16]
 80220ae:	429a      	cmp	r2, r3
 80220b0:	d001      	beq.n	80220b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80220b2:	2301      	movs	r3, #1
 80220b4:	e000      	b.n	80220b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80220b6:	2300      	movs	r3, #0
}
 80220b8:	4618      	mov	r0, r3
 80220ba:	3718      	adds	r7, #24
 80220bc:	46bd      	mov	sp, r7
 80220be:	bd80      	pop	{r7, pc}
 80220c0:	40021000 	.word	0x40021000
 80220c4:	40022000 	.word	0x40022000

080220c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80220c8:	b580      	push	{r7, lr}
 80220ca:	b086      	sub	sp, #24
 80220cc:	af00      	add	r7, sp, #0
 80220ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80220d0:	2300      	movs	r3, #0
 80220d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80220d4:	2300      	movs	r3, #0
 80220d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	681b      	ldr	r3, [r3, #0]
 80220dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80220e0:	2b00      	cmp	r3, #0
 80220e2:	d041      	beq.n	8022168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80220e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80220ec:	d02a      	beq.n	8022144 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80220ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80220f2:	d824      	bhi.n	802213e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80220f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80220f8:	d008      	beq.n	802210c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80220fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80220fe:	d81e      	bhi.n	802213e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8022100:	2b00      	cmp	r3, #0
 8022102:	d00a      	beq.n	802211a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8022104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8022108:	d010      	beq.n	802212c <HAL_RCCEx_PeriphCLKConfig+0x64>
 802210a:	e018      	b.n	802213e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 802210c:	4b86      	ldr	r3, [pc, #536]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 802210e:	68db      	ldr	r3, [r3, #12]
 8022110:	4a85      	ldr	r2, [pc, #532]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8022112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022116:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8022118:	e015      	b.n	8022146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 802211a:	687b      	ldr	r3, [r7, #4]
 802211c:	3304      	adds	r3, #4
 802211e:	2100      	movs	r1, #0
 8022120:	4618      	mov	r0, r3
 8022122:	f000 fabb 	bl	802269c <RCCEx_PLLSAI1_Config>
 8022126:	4603      	mov	r3, r0
 8022128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 802212a:	e00c      	b.n	8022146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	3320      	adds	r3, #32
 8022130:	2100      	movs	r1, #0
 8022132:	4618      	mov	r0, r3
 8022134:	f000 fba6 	bl	8022884 <RCCEx_PLLSAI2_Config>
 8022138:	4603      	mov	r3, r0
 802213a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 802213c:	e003      	b.n	8022146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 802213e:	2301      	movs	r3, #1
 8022140:	74fb      	strb	r3, [r7, #19]
      break;
 8022142:	e000      	b.n	8022146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8022144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8022146:	7cfb      	ldrb	r3, [r7, #19]
 8022148:	2b00      	cmp	r3, #0
 802214a:	d10b      	bne.n	8022164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802214c:	4b76      	ldr	r3, [pc, #472]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 802214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022152:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8022156:	687b      	ldr	r3, [r7, #4]
 8022158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802215a:	4973      	ldr	r1, [pc, #460]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 802215c:	4313      	orrs	r3, r2
 802215e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8022162:	e001      	b.n	8022168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022164:	7cfb      	ldrb	r3, [r7, #19]
 8022166:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8022168:	687b      	ldr	r3, [r7, #4]
 802216a:	681b      	ldr	r3, [r3, #0]
 802216c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8022170:	2b00      	cmp	r3, #0
 8022172:	d041      	beq.n	80221f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8022174:	687b      	ldr	r3, [r7, #4]
 8022176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022178:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 802217c:	d02a      	beq.n	80221d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 802217e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8022182:	d824      	bhi.n	80221ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8022184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8022188:	d008      	beq.n	802219c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 802218a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802218e:	d81e      	bhi.n	80221ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8022190:	2b00      	cmp	r3, #0
 8022192:	d00a      	beq.n	80221aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8022194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8022198:	d010      	beq.n	80221bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 802219a:	e018      	b.n	80221ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 802219c:	4b62      	ldr	r3, [pc, #392]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 802219e:	68db      	ldr	r3, [r3, #12]
 80221a0:	4a61      	ldr	r2, [pc, #388]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80221a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80221a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80221a8:	e015      	b.n	80221d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	3304      	adds	r3, #4
 80221ae:	2100      	movs	r1, #0
 80221b0:	4618      	mov	r0, r3
 80221b2:	f000 fa73 	bl	802269c <RCCEx_PLLSAI1_Config>
 80221b6:	4603      	mov	r3, r0
 80221b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80221ba:	e00c      	b.n	80221d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	3320      	adds	r3, #32
 80221c0:	2100      	movs	r1, #0
 80221c2:	4618      	mov	r0, r3
 80221c4:	f000 fb5e 	bl	8022884 <RCCEx_PLLSAI2_Config>
 80221c8:	4603      	mov	r3, r0
 80221ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80221cc:	e003      	b.n	80221d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80221ce:	2301      	movs	r3, #1
 80221d0:	74fb      	strb	r3, [r7, #19]
      break;
 80221d2:	e000      	b.n	80221d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80221d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80221d6:	7cfb      	ldrb	r3, [r7, #19]
 80221d8:	2b00      	cmp	r3, #0
 80221da:	d10b      	bne.n	80221f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80221dc:	4b52      	ldr	r3, [pc, #328]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80221de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80221e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80221e6:	687b      	ldr	r3, [r7, #4]
 80221e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80221ea:	494f      	ldr	r1, [pc, #316]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80221ec:	4313      	orrs	r3, r2
 80221ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80221f2:	e001      	b.n	80221f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80221f4:	7cfb      	ldrb	r3, [r7, #19]
 80221f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80221f8:	687b      	ldr	r3, [r7, #4]
 80221fa:	681b      	ldr	r3, [r3, #0]
 80221fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022200:	2b00      	cmp	r3, #0
 8022202:	f000 80a0 	beq.w	8022346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8022206:	2300      	movs	r3, #0
 8022208:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 802220a:	4b47      	ldr	r3, [pc, #284]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 802220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022212:	2b00      	cmp	r3, #0
 8022214:	d101      	bne.n	802221a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8022216:	2301      	movs	r3, #1
 8022218:	e000      	b.n	802221c <HAL_RCCEx_PeriphCLKConfig+0x154>
 802221a:	2300      	movs	r3, #0
 802221c:	2b00      	cmp	r3, #0
 802221e:	d00d      	beq.n	802223c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8022220:	4b41      	ldr	r3, [pc, #260]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8022222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022224:	4a40      	ldr	r2, [pc, #256]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8022226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802222a:	6593      	str	r3, [r2, #88]	; 0x58
 802222c:	4b3e      	ldr	r3, [pc, #248]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 802222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022234:	60bb      	str	r3, [r7, #8]
 8022236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8022238:	2301      	movs	r3, #1
 802223a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802223c:	4b3b      	ldr	r3, [pc, #236]	; (802232c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 802223e:	681b      	ldr	r3, [r3, #0]
 8022240:	4a3a      	ldr	r2, [pc, #232]	; (802232c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8022242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8022248:	f7fe fdac 	bl	8020da4 <HAL_GetTick>
 802224c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 802224e:	e009      	b.n	8022264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8022250:	f7fe fda8 	bl	8020da4 <HAL_GetTick>
 8022254:	4602      	mov	r2, r0
 8022256:	68fb      	ldr	r3, [r7, #12]
 8022258:	1ad3      	subs	r3, r2, r3
 802225a:	2b02      	cmp	r3, #2
 802225c:	d902      	bls.n	8022264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 802225e:	2303      	movs	r3, #3
 8022260:	74fb      	strb	r3, [r7, #19]
        break;
 8022262:	e005      	b.n	8022270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8022264:	4b31      	ldr	r3, [pc, #196]	; (802232c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8022266:	681b      	ldr	r3, [r3, #0]
 8022268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802226c:	2b00      	cmp	r3, #0
 802226e:	d0ef      	beq.n	8022250 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8022270:	7cfb      	ldrb	r3, [r7, #19]
 8022272:	2b00      	cmp	r3, #0
 8022274:	d15c      	bne.n	8022330 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8022276:	4b2c      	ldr	r3, [pc, #176]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8022278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802227c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8022280:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8022282:	697b      	ldr	r3, [r7, #20]
 8022284:	2b00      	cmp	r3, #0
 8022286:	d01f      	beq.n	80222c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8022288:	687b      	ldr	r3, [r7, #4]
 802228a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802228e:	697a      	ldr	r2, [r7, #20]
 8022290:	429a      	cmp	r2, r3
 8022292:	d019      	beq.n	80222c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8022294:	4b24      	ldr	r3, [pc, #144]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8022296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802229a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802229e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80222a0:	4b21      	ldr	r3, [pc, #132]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80222a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80222a6:	4a20      	ldr	r2, [pc, #128]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80222a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80222ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80222b0:	4b1d      	ldr	r3, [pc, #116]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80222b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80222b6:	4a1c      	ldr	r2, [pc, #112]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80222b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80222bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80222c0:	4a19      	ldr	r2, [pc, #100]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80222c2:	697b      	ldr	r3, [r7, #20]
 80222c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80222c8:	697b      	ldr	r3, [r7, #20]
 80222ca:	f003 0301 	and.w	r3, r3, #1
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	d016      	beq.n	8022300 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80222d2:	f7fe fd67 	bl	8020da4 <HAL_GetTick>
 80222d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80222d8:	e00b      	b.n	80222f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80222da:	f7fe fd63 	bl	8020da4 <HAL_GetTick>
 80222de:	4602      	mov	r2, r0
 80222e0:	68fb      	ldr	r3, [r7, #12]
 80222e2:	1ad3      	subs	r3, r2, r3
 80222e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80222e8:	4293      	cmp	r3, r2
 80222ea:	d902      	bls.n	80222f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80222ec:	2303      	movs	r3, #3
 80222ee:	74fb      	strb	r3, [r7, #19]
            break;
 80222f0:	e006      	b.n	8022300 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80222f2:	4b0d      	ldr	r3, [pc, #52]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80222f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80222f8:	f003 0302 	and.w	r3, r3, #2
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d0ec      	beq.n	80222da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8022300:	7cfb      	ldrb	r3, [r7, #19]
 8022302:	2b00      	cmp	r3, #0
 8022304:	d10c      	bne.n	8022320 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8022306:	4b08      	ldr	r3, [pc, #32]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8022308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802230c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8022310:	687b      	ldr	r3, [r7, #4]
 8022312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022316:	4904      	ldr	r1, [pc, #16]	; (8022328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8022318:	4313      	orrs	r3, r2
 802231a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802231e:	e009      	b.n	8022334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8022320:	7cfb      	ldrb	r3, [r7, #19]
 8022322:	74bb      	strb	r3, [r7, #18]
 8022324:	e006      	b.n	8022334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8022326:	bf00      	nop
 8022328:	40021000 	.word	0x40021000
 802232c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022330:	7cfb      	ldrb	r3, [r7, #19]
 8022332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8022334:	7c7b      	ldrb	r3, [r7, #17]
 8022336:	2b01      	cmp	r3, #1
 8022338:	d105      	bne.n	8022346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802233a:	4b9e      	ldr	r3, [pc, #632]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 802233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802233e:	4a9d      	ldr	r2, [pc, #628]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	681b      	ldr	r3, [r3, #0]
 802234a:	f003 0301 	and.w	r3, r3, #1
 802234e:	2b00      	cmp	r3, #0
 8022350:	d00a      	beq.n	8022368 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8022352:	4b98      	ldr	r3, [pc, #608]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022358:	f023 0203 	bic.w	r2, r3, #3
 802235c:	687b      	ldr	r3, [r7, #4]
 802235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022360:	4994      	ldr	r1, [pc, #592]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022362:	4313      	orrs	r3, r2
 8022364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8022368:	687b      	ldr	r3, [r7, #4]
 802236a:	681b      	ldr	r3, [r3, #0]
 802236c:	f003 0302 	and.w	r3, r3, #2
 8022370:	2b00      	cmp	r3, #0
 8022372:	d00a      	beq.n	802238a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8022374:	4b8f      	ldr	r3, [pc, #572]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802237a:	f023 020c 	bic.w	r2, r3, #12
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022382:	498c      	ldr	r1, [pc, #560]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022384:	4313      	orrs	r3, r2
 8022386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	681b      	ldr	r3, [r3, #0]
 802238e:	f003 0304 	and.w	r3, r3, #4
 8022392:	2b00      	cmp	r3, #0
 8022394:	d00a      	beq.n	80223ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8022396:	4b87      	ldr	r3, [pc, #540]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802239c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223a4:	4983      	ldr	r1, [pc, #524]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80223a6:	4313      	orrs	r3, r2
 80223a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	681b      	ldr	r3, [r3, #0]
 80223b0:	f003 0308 	and.w	r3, r3, #8
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	d00a      	beq.n	80223ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80223b8:	4b7e      	ldr	r3, [pc, #504]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80223ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80223be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80223c2:	687b      	ldr	r3, [r7, #4]
 80223c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80223c6:	497b      	ldr	r1, [pc, #492]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80223c8:	4313      	orrs	r3, r2
 80223ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80223ce:	687b      	ldr	r3, [r7, #4]
 80223d0:	681b      	ldr	r3, [r3, #0]
 80223d2:	f003 0310 	and.w	r3, r3, #16
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	d00a      	beq.n	80223f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80223da:	4b76      	ldr	r3, [pc, #472]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80223dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80223e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80223e4:	687b      	ldr	r3, [r7, #4]
 80223e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80223e8:	4972      	ldr	r1, [pc, #456]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80223ea:	4313      	orrs	r3, r2
 80223ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80223f0:	687b      	ldr	r3, [r7, #4]
 80223f2:	681b      	ldr	r3, [r3, #0]
 80223f4:	f003 0320 	and.w	r3, r3, #32
 80223f8:	2b00      	cmp	r3, #0
 80223fa:	d00a      	beq.n	8022412 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80223fc:	4b6d      	ldr	r3, [pc, #436]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80223fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8022406:	687b      	ldr	r3, [r7, #4]
 8022408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802240a:	496a      	ldr	r1, [pc, #424]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 802240c:	4313      	orrs	r3, r2
 802240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8022412:	687b      	ldr	r3, [r7, #4]
 8022414:	681b      	ldr	r3, [r3, #0]
 8022416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802241a:	2b00      	cmp	r3, #0
 802241c:	d00a      	beq.n	8022434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802241e:	4b65      	ldr	r3, [pc, #404]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8022428:	687b      	ldr	r3, [r7, #4]
 802242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802242c:	4961      	ldr	r1, [pc, #388]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 802242e:	4313      	orrs	r3, r2
 8022430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	681b      	ldr	r3, [r3, #0]
 8022438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802243c:	2b00      	cmp	r3, #0
 802243e:	d00a      	beq.n	8022456 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8022440:	4b5c      	ldr	r3, [pc, #368]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802244e:	4959      	ldr	r1, [pc, #356]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022450:	4313      	orrs	r3, r2
 8022452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	681b      	ldr	r3, [r3, #0]
 802245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802245e:	2b00      	cmp	r3, #0
 8022460:	d00a      	beq.n	8022478 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8022462:	4b54      	ldr	r3, [pc, #336]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022468:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 802246c:	687b      	ldr	r3, [r7, #4]
 802246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022470:	4950      	ldr	r1, [pc, #320]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022472:	4313      	orrs	r3, r2
 8022474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	681b      	ldr	r3, [r3, #0]
 802247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022480:	2b00      	cmp	r3, #0
 8022482:	d00a      	beq.n	802249a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8022484:	4b4b      	ldr	r3, [pc, #300]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802248a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022492:	4948      	ldr	r1, [pc, #288]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022494:	4313      	orrs	r3, r2
 8022496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	681b      	ldr	r3, [r3, #0]
 802249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80224a2:	2b00      	cmp	r3, #0
 80224a4:	d00a      	beq.n	80224bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80224a6:	4b43      	ldr	r3, [pc, #268]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80224a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80224ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80224b4:	493f      	ldr	r1, [pc, #252]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80224b6:	4313      	orrs	r3, r2
 80224b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80224bc:	687b      	ldr	r3, [r7, #4]
 80224be:	681b      	ldr	r3, [r3, #0]
 80224c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	d028      	beq.n	802251a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80224c8:	4b3a      	ldr	r3, [pc, #232]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80224ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80224ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80224d2:	687b      	ldr	r3, [r7, #4]
 80224d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80224d6:	4937      	ldr	r1, [pc, #220]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80224d8:	4313      	orrs	r3, r2
 80224da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80224de:	687b      	ldr	r3, [r7, #4]
 80224e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80224e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80224e6:	d106      	bne.n	80224f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80224e8:	4b32      	ldr	r3, [pc, #200]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80224ea:	68db      	ldr	r3, [r3, #12]
 80224ec:	4a31      	ldr	r2, [pc, #196]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80224ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80224f2:	60d3      	str	r3, [r2, #12]
 80224f4:	e011      	b.n	802251a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80224f6:	687b      	ldr	r3, [r7, #4]
 80224f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80224fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80224fe:	d10c      	bne.n	802251a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8022500:	687b      	ldr	r3, [r7, #4]
 8022502:	3304      	adds	r3, #4
 8022504:	2101      	movs	r1, #1
 8022506:	4618      	mov	r0, r3
 8022508:	f000 f8c8 	bl	802269c <RCCEx_PLLSAI1_Config>
 802250c:	4603      	mov	r3, r0
 802250e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8022510:	7cfb      	ldrb	r3, [r7, #19]
 8022512:	2b00      	cmp	r3, #0
 8022514:	d001      	beq.n	802251a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8022516:	7cfb      	ldrb	r3, [r7, #19]
 8022518:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	681b      	ldr	r3, [r3, #0]
 802251e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8022522:	2b00      	cmp	r3, #0
 8022524:	d028      	beq.n	8022578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8022526:	4b23      	ldr	r3, [pc, #140]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802252c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022534:	491f      	ldr	r1, [pc, #124]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022536:	4313      	orrs	r3, r2
 8022538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 802253c:	687b      	ldr	r3, [r7, #4]
 802253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8022544:	d106      	bne.n	8022554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8022546:	4b1b      	ldr	r3, [pc, #108]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022548:	68db      	ldr	r3, [r3, #12]
 802254a:	4a1a      	ldr	r2, [pc, #104]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 802254c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022550:	60d3      	str	r3, [r2, #12]
 8022552:	e011      	b.n	8022578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802255c:	d10c      	bne.n	8022578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	3304      	adds	r3, #4
 8022562:	2101      	movs	r1, #1
 8022564:	4618      	mov	r0, r3
 8022566:	f000 f899 	bl	802269c <RCCEx_PLLSAI1_Config>
 802256a:	4603      	mov	r3, r0
 802256c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 802256e:	7cfb      	ldrb	r3, [r7, #19]
 8022570:	2b00      	cmp	r3, #0
 8022572:	d001      	beq.n	8022578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8022574:	7cfb      	ldrb	r3, [r7, #19]
 8022576:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	681b      	ldr	r3, [r3, #0]
 802257c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8022580:	2b00      	cmp	r3, #0
 8022582:	d02b      	beq.n	80225dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8022584:	4b0b      	ldr	r3, [pc, #44]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802258a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 802258e:	687b      	ldr	r3, [r7, #4]
 8022590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022592:	4908      	ldr	r1, [pc, #32]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8022594:	4313      	orrs	r3, r2
 8022596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802259e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80225a2:	d109      	bne.n	80225b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80225a4:	4b03      	ldr	r3, [pc, #12]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80225a6:	68db      	ldr	r3, [r3, #12]
 80225a8:	4a02      	ldr	r2, [pc, #8]	; (80225b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80225aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80225ae:	60d3      	str	r3, [r2, #12]
 80225b0:	e014      	b.n	80225dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80225b2:	bf00      	nop
 80225b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80225bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80225c0:	d10c      	bne.n	80225dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	3304      	adds	r3, #4
 80225c6:	2101      	movs	r1, #1
 80225c8:	4618      	mov	r0, r3
 80225ca:	f000 f867 	bl	802269c <RCCEx_PLLSAI1_Config>
 80225ce:	4603      	mov	r3, r0
 80225d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80225d2:	7cfb      	ldrb	r3, [r7, #19]
 80225d4:	2b00      	cmp	r3, #0
 80225d6:	d001      	beq.n	80225dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80225d8:	7cfb      	ldrb	r3, [r7, #19]
 80225da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80225e4:	2b00      	cmp	r3, #0
 80225e6:	d02f      	beq.n	8022648 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80225e8:	4b2b      	ldr	r3, [pc, #172]	; (8022698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80225ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80225ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80225f2:	687b      	ldr	r3, [r7, #4]
 80225f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80225f6:	4928      	ldr	r1, [pc, #160]	; (8022698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80225f8:	4313      	orrs	r3, r2
 80225fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80225fe:	687b      	ldr	r3, [r7, #4]
 8022600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8022606:	d10d      	bne.n	8022624 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8022608:	687b      	ldr	r3, [r7, #4]
 802260a:	3304      	adds	r3, #4
 802260c:	2102      	movs	r1, #2
 802260e:	4618      	mov	r0, r3
 8022610:	f000 f844 	bl	802269c <RCCEx_PLLSAI1_Config>
 8022614:	4603      	mov	r3, r0
 8022616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8022618:	7cfb      	ldrb	r3, [r7, #19]
 802261a:	2b00      	cmp	r3, #0
 802261c:	d014      	beq.n	8022648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 802261e:	7cfb      	ldrb	r3, [r7, #19]
 8022620:	74bb      	strb	r3, [r7, #18]
 8022622:	e011      	b.n	8022648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802262c:	d10c      	bne.n	8022648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	3320      	adds	r3, #32
 8022632:	2102      	movs	r1, #2
 8022634:	4618      	mov	r0, r3
 8022636:	f000 f925 	bl	8022884 <RCCEx_PLLSAI2_Config>
 802263a:	4603      	mov	r3, r0
 802263c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 802263e:	7cfb      	ldrb	r3, [r7, #19]
 8022640:	2b00      	cmp	r3, #0
 8022642:	d001      	beq.n	8022648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8022644:	7cfb      	ldrb	r3, [r7, #19]
 8022646:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	681b      	ldr	r3, [r3, #0]
 802264c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8022650:	2b00      	cmp	r3, #0
 8022652:	d00a      	beq.n	802266a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8022654:	4b10      	ldr	r3, [pc, #64]	; (8022698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8022656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802265a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 802265e:	687b      	ldr	r3, [r7, #4]
 8022660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8022662:	490d      	ldr	r1, [pc, #52]	; (8022698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8022664:	4313      	orrs	r3, r2
 8022666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	681b      	ldr	r3, [r3, #0]
 802266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022672:	2b00      	cmp	r3, #0
 8022674:	d00b      	beq.n	802268e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8022676:	4b08      	ldr	r3, [pc, #32]	; (8022698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8022678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802267c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8022680:	687b      	ldr	r3, [r7, #4]
 8022682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8022686:	4904      	ldr	r1, [pc, #16]	; (8022698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8022688:	4313      	orrs	r3, r2
 802268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 802268e:	7cbb      	ldrb	r3, [r7, #18]
}
 8022690:	4618      	mov	r0, r3
 8022692:	3718      	adds	r7, #24
 8022694:	46bd      	mov	sp, r7
 8022696:	bd80      	pop	{r7, pc}
 8022698:	40021000 	.word	0x40021000

0802269c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 802269c:	b580      	push	{r7, lr}
 802269e:	b084      	sub	sp, #16
 80226a0:	af00      	add	r7, sp, #0
 80226a2:	6078      	str	r0, [r7, #4]
 80226a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80226a6:	2300      	movs	r3, #0
 80226a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80226aa:	4b75      	ldr	r3, [pc, #468]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80226ac:	68db      	ldr	r3, [r3, #12]
 80226ae:	f003 0303 	and.w	r3, r3, #3
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	d018      	beq.n	80226e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80226b6:	4b72      	ldr	r3, [pc, #456]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80226b8:	68db      	ldr	r3, [r3, #12]
 80226ba:	f003 0203 	and.w	r2, r3, #3
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	681b      	ldr	r3, [r3, #0]
 80226c2:	429a      	cmp	r2, r3
 80226c4:	d10d      	bne.n	80226e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80226c6:	687b      	ldr	r3, [r7, #4]
 80226c8:	681b      	ldr	r3, [r3, #0]
       ||
 80226ca:	2b00      	cmp	r3, #0
 80226cc:	d009      	beq.n	80226e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80226ce:	4b6c      	ldr	r3, [pc, #432]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80226d0:	68db      	ldr	r3, [r3, #12]
 80226d2:	091b      	lsrs	r3, r3, #4
 80226d4:	f003 0307 	and.w	r3, r3, #7
 80226d8:	1c5a      	adds	r2, r3, #1
 80226da:	687b      	ldr	r3, [r7, #4]
 80226dc:	685b      	ldr	r3, [r3, #4]
       ||
 80226de:	429a      	cmp	r2, r3
 80226e0:	d047      	beq.n	8022772 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80226e2:	2301      	movs	r3, #1
 80226e4:	73fb      	strb	r3, [r7, #15]
 80226e6:	e044      	b.n	8022772 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80226e8:	687b      	ldr	r3, [r7, #4]
 80226ea:	681b      	ldr	r3, [r3, #0]
 80226ec:	2b03      	cmp	r3, #3
 80226ee:	d018      	beq.n	8022722 <RCCEx_PLLSAI1_Config+0x86>
 80226f0:	2b03      	cmp	r3, #3
 80226f2:	d825      	bhi.n	8022740 <RCCEx_PLLSAI1_Config+0xa4>
 80226f4:	2b01      	cmp	r3, #1
 80226f6:	d002      	beq.n	80226fe <RCCEx_PLLSAI1_Config+0x62>
 80226f8:	2b02      	cmp	r3, #2
 80226fa:	d009      	beq.n	8022710 <RCCEx_PLLSAI1_Config+0x74>
 80226fc:	e020      	b.n	8022740 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80226fe:	4b60      	ldr	r3, [pc, #384]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022700:	681b      	ldr	r3, [r3, #0]
 8022702:	f003 0302 	and.w	r3, r3, #2
 8022706:	2b00      	cmp	r3, #0
 8022708:	d11d      	bne.n	8022746 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 802270a:	2301      	movs	r3, #1
 802270c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802270e:	e01a      	b.n	8022746 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8022710:	4b5b      	ldr	r3, [pc, #364]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022712:	681b      	ldr	r3, [r3, #0]
 8022714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022718:	2b00      	cmp	r3, #0
 802271a:	d116      	bne.n	802274a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 802271c:	2301      	movs	r3, #1
 802271e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022720:	e013      	b.n	802274a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8022722:	4b57      	ldr	r3, [pc, #348]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022724:	681b      	ldr	r3, [r3, #0]
 8022726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802272a:	2b00      	cmp	r3, #0
 802272c:	d10f      	bne.n	802274e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 802272e:	4b54      	ldr	r3, [pc, #336]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022730:	681b      	ldr	r3, [r3, #0]
 8022732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8022736:	2b00      	cmp	r3, #0
 8022738:	d109      	bne.n	802274e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 802273a:	2301      	movs	r3, #1
 802273c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 802273e:	e006      	b.n	802274e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8022740:	2301      	movs	r3, #1
 8022742:	73fb      	strb	r3, [r7, #15]
      break;
 8022744:	e004      	b.n	8022750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8022746:	bf00      	nop
 8022748:	e002      	b.n	8022750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 802274a:	bf00      	nop
 802274c:	e000      	b.n	8022750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 802274e:	bf00      	nop
    }

    if(status == HAL_OK)
 8022750:	7bfb      	ldrb	r3, [r7, #15]
 8022752:	2b00      	cmp	r3, #0
 8022754:	d10d      	bne.n	8022772 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8022756:	4b4a      	ldr	r3, [pc, #296]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022758:	68db      	ldr	r3, [r3, #12]
 802275a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	6819      	ldr	r1, [r3, #0]
 8022762:	687b      	ldr	r3, [r7, #4]
 8022764:	685b      	ldr	r3, [r3, #4]
 8022766:	3b01      	subs	r3, #1
 8022768:	011b      	lsls	r3, r3, #4
 802276a:	430b      	orrs	r3, r1
 802276c:	4944      	ldr	r1, [pc, #272]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 802276e:	4313      	orrs	r3, r2
 8022770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8022772:	7bfb      	ldrb	r3, [r7, #15]
 8022774:	2b00      	cmp	r3, #0
 8022776:	d17d      	bne.n	8022874 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8022778:	4b41      	ldr	r3, [pc, #260]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 802277a:	681b      	ldr	r3, [r3, #0]
 802277c:	4a40      	ldr	r2, [pc, #256]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 802277e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8022782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022784:	f7fe fb0e 	bl	8020da4 <HAL_GetTick>
 8022788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 802278a:	e009      	b.n	80227a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 802278c:	f7fe fb0a 	bl	8020da4 <HAL_GetTick>
 8022790:	4602      	mov	r2, r0
 8022792:	68bb      	ldr	r3, [r7, #8]
 8022794:	1ad3      	subs	r3, r2, r3
 8022796:	2b02      	cmp	r3, #2
 8022798:	d902      	bls.n	80227a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 802279a:	2303      	movs	r3, #3
 802279c:	73fb      	strb	r3, [r7, #15]
        break;
 802279e:	e005      	b.n	80227ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80227a0:	4b37      	ldr	r3, [pc, #220]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80227a2:	681b      	ldr	r3, [r3, #0]
 80227a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80227a8:	2b00      	cmp	r3, #0
 80227aa:	d1ef      	bne.n	802278c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80227ac:	7bfb      	ldrb	r3, [r7, #15]
 80227ae:	2b00      	cmp	r3, #0
 80227b0:	d160      	bne.n	8022874 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80227b2:	683b      	ldr	r3, [r7, #0]
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	d111      	bne.n	80227dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80227b8:	4b31      	ldr	r3, [pc, #196]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80227ba:	691b      	ldr	r3, [r3, #16]
 80227bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80227c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80227c4:	687a      	ldr	r2, [r7, #4]
 80227c6:	6892      	ldr	r2, [r2, #8]
 80227c8:	0211      	lsls	r1, r2, #8
 80227ca:	687a      	ldr	r2, [r7, #4]
 80227cc:	68d2      	ldr	r2, [r2, #12]
 80227ce:	0912      	lsrs	r2, r2, #4
 80227d0:	0452      	lsls	r2, r2, #17
 80227d2:	430a      	orrs	r2, r1
 80227d4:	492a      	ldr	r1, [pc, #168]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80227d6:	4313      	orrs	r3, r2
 80227d8:	610b      	str	r3, [r1, #16]
 80227da:	e027      	b.n	802282c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80227dc:	683b      	ldr	r3, [r7, #0]
 80227de:	2b01      	cmp	r3, #1
 80227e0:	d112      	bne.n	8022808 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80227e2:	4b27      	ldr	r3, [pc, #156]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 80227e4:	691b      	ldr	r3, [r3, #16]
 80227e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80227ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80227ee:	687a      	ldr	r2, [r7, #4]
 80227f0:	6892      	ldr	r2, [r2, #8]
 80227f2:	0211      	lsls	r1, r2, #8
 80227f4:	687a      	ldr	r2, [r7, #4]
 80227f6:	6912      	ldr	r2, [r2, #16]
 80227f8:	0852      	lsrs	r2, r2, #1
 80227fa:	3a01      	subs	r2, #1
 80227fc:	0552      	lsls	r2, r2, #21
 80227fe:	430a      	orrs	r2, r1
 8022800:	491f      	ldr	r1, [pc, #124]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022802:	4313      	orrs	r3, r2
 8022804:	610b      	str	r3, [r1, #16]
 8022806:	e011      	b.n	802282c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8022808:	4b1d      	ldr	r3, [pc, #116]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 802280a:	691b      	ldr	r3, [r3, #16]
 802280c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8022810:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8022814:	687a      	ldr	r2, [r7, #4]
 8022816:	6892      	ldr	r2, [r2, #8]
 8022818:	0211      	lsls	r1, r2, #8
 802281a:	687a      	ldr	r2, [r7, #4]
 802281c:	6952      	ldr	r2, [r2, #20]
 802281e:	0852      	lsrs	r2, r2, #1
 8022820:	3a01      	subs	r2, #1
 8022822:	0652      	lsls	r2, r2, #25
 8022824:	430a      	orrs	r2, r1
 8022826:	4916      	ldr	r1, [pc, #88]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022828:	4313      	orrs	r3, r2
 802282a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 802282c:	4b14      	ldr	r3, [pc, #80]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 802282e:	681b      	ldr	r3, [r3, #0]
 8022830:	4a13      	ldr	r2, [pc, #76]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022838:	f7fe fab4 	bl	8020da4 <HAL_GetTick>
 802283c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 802283e:	e009      	b.n	8022854 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8022840:	f7fe fab0 	bl	8020da4 <HAL_GetTick>
 8022844:	4602      	mov	r2, r0
 8022846:	68bb      	ldr	r3, [r7, #8]
 8022848:	1ad3      	subs	r3, r2, r3
 802284a:	2b02      	cmp	r3, #2
 802284c:	d902      	bls.n	8022854 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 802284e:	2303      	movs	r3, #3
 8022850:	73fb      	strb	r3, [r7, #15]
          break;
 8022852:	e005      	b.n	8022860 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8022854:	4b0a      	ldr	r3, [pc, #40]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022856:	681b      	ldr	r3, [r3, #0]
 8022858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802285c:	2b00      	cmp	r3, #0
 802285e:	d0ef      	beq.n	8022840 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8022860:	7bfb      	ldrb	r3, [r7, #15]
 8022862:	2b00      	cmp	r3, #0
 8022864:	d106      	bne.n	8022874 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8022866:	4b06      	ldr	r3, [pc, #24]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022868:	691a      	ldr	r2, [r3, #16]
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	699b      	ldr	r3, [r3, #24]
 802286e:	4904      	ldr	r1, [pc, #16]	; (8022880 <RCCEx_PLLSAI1_Config+0x1e4>)
 8022870:	4313      	orrs	r3, r2
 8022872:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8022874:	7bfb      	ldrb	r3, [r7, #15]
}
 8022876:	4618      	mov	r0, r3
 8022878:	3710      	adds	r7, #16
 802287a:	46bd      	mov	sp, r7
 802287c:	bd80      	pop	{r7, pc}
 802287e:	bf00      	nop
 8022880:	40021000 	.word	0x40021000

08022884 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8022884:	b580      	push	{r7, lr}
 8022886:	b084      	sub	sp, #16
 8022888:	af00      	add	r7, sp, #0
 802288a:	6078      	str	r0, [r7, #4]
 802288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802288e:	2300      	movs	r3, #0
 8022890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8022892:	4b6a      	ldr	r3, [pc, #424]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8022894:	68db      	ldr	r3, [r3, #12]
 8022896:	f003 0303 	and.w	r3, r3, #3
 802289a:	2b00      	cmp	r3, #0
 802289c:	d018      	beq.n	80228d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 802289e:	4b67      	ldr	r3, [pc, #412]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80228a0:	68db      	ldr	r3, [r3, #12]
 80228a2:	f003 0203 	and.w	r2, r3, #3
 80228a6:	687b      	ldr	r3, [r7, #4]
 80228a8:	681b      	ldr	r3, [r3, #0]
 80228aa:	429a      	cmp	r2, r3
 80228ac:	d10d      	bne.n	80228ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	681b      	ldr	r3, [r3, #0]
       ||
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	d009      	beq.n	80228ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80228b6:	4b61      	ldr	r3, [pc, #388]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80228b8:	68db      	ldr	r3, [r3, #12]
 80228ba:	091b      	lsrs	r3, r3, #4
 80228bc:	f003 0307 	and.w	r3, r3, #7
 80228c0:	1c5a      	adds	r2, r3, #1
 80228c2:	687b      	ldr	r3, [r7, #4]
 80228c4:	685b      	ldr	r3, [r3, #4]
       ||
 80228c6:	429a      	cmp	r2, r3
 80228c8:	d047      	beq.n	802295a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80228ca:	2301      	movs	r3, #1
 80228cc:	73fb      	strb	r3, [r7, #15]
 80228ce:	e044      	b.n	802295a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80228d0:	687b      	ldr	r3, [r7, #4]
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	2b03      	cmp	r3, #3
 80228d6:	d018      	beq.n	802290a <RCCEx_PLLSAI2_Config+0x86>
 80228d8:	2b03      	cmp	r3, #3
 80228da:	d825      	bhi.n	8022928 <RCCEx_PLLSAI2_Config+0xa4>
 80228dc:	2b01      	cmp	r3, #1
 80228de:	d002      	beq.n	80228e6 <RCCEx_PLLSAI2_Config+0x62>
 80228e0:	2b02      	cmp	r3, #2
 80228e2:	d009      	beq.n	80228f8 <RCCEx_PLLSAI2_Config+0x74>
 80228e4:	e020      	b.n	8022928 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80228e6:	4b55      	ldr	r3, [pc, #340]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80228e8:	681b      	ldr	r3, [r3, #0]
 80228ea:	f003 0302 	and.w	r3, r3, #2
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	d11d      	bne.n	802292e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80228f2:	2301      	movs	r3, #1
 80228f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80228f6:	e01a      	b.n	802292e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80228f8:	4b50      	ldr	r3, [pc, #320]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80228fa:	681b      	ldr	r3, [r3, #0]
 80228fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022900:	2b00      	cmp	r3, #0
 8022902:	d116      	bne.n	8022932 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8022904:	2301      	movs	r3, #1
 8022906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022908:	e013      	b.n	8022932 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 802290a:	4b4c      	ldr	r3, [pc, #304]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 802290c:	681b      	ldr	r3, [r3, #0]
 802290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022912:	2b00      	cmp	r3, #0
 8022914:	d10f      	bne.n	8022936 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8022916:	4b49      	ldr	r3, [pc, #292]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8022918:	681b      	ldr	r3, [r3, #0]
 802291a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802291e:	2b00      	cmp	r3, #0
 8022920:	d109      	bne.n	8022936 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8022922:	2301      	movs	r3, #1
 8022924:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8022926:	e006      	b.n	8022936 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8022928:	2301      	movs	r3, #1
 802292a:	73fb      	strb	r3, [r7, #15]
      break;
 802292c:	e004      	b.n	8022938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 802292e:	bf00      	nop
 8022930:	e002      	b.n	8022938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8022932:	bf00      	nop
 8022934:	e000      	b.n	8022938 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8022936:	bf00      	nop
    }

    if(status == HAL_OK)
 8022938:	7bfb      	ldrb	r3, [r7, #15]
 802293a:	2b00      	cmp	r3, #0
 802293c:	d10d      	bne.n	802295a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 802293e:	4b3f      	ldr	r3, [pc, #252]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8022940:	68db      	ldr	r3, [r3, #12]
 8022942:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8022946:	687b      	ldr	r3, [r7, #4]
 8022948:	6819      	ldr	r1, [r3, #0]
 802294a:	687b      	ldr	r3, [r7, #4]
 802294c:	685b      	ldr	r3, [r3, #4]
 802294e:	3b01      	subs	r3, #1
 8022950:	011b      	lsls	r3, r3, #4
 8022952:	430b      	orrs	r3, r1
 8022954:	4939      	ldr	r1, [pc, #228]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8022956:	4313      	orrs	r3, r2
 8022958:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 802295a:	7bfb      	ldrb	r3, [r7, #15]
 802295c:	2b00      	cmp	r3, #0
 802295e:	d167      	bne.n	8022a30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8022960:	4b36      	ldr	r3, [pc, #216]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8022962:	681b      	ldr	r3, [r3, #0]
 8022964:	4a35      	ldr	r2, [pc, #212]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8022966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802296a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802296c:	f7fe fa1a 	bl	8020da4 <HAL_GetTick>
 8022970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8022972:	e009      	b.n	8022988 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8022974:	f7fe fa16 	bl	8020da4 <HAL_GetTick>
 8022978:	4602      	mov	r2, r0
 802297a:	68bb      	ldr	r3, [r7, #8]
 802297c:	1ad3      	subs	r3, r2, r3
 802297e:	2b02      	cmp	r3, #2
 8022980:	d902      	bls.n	8022988 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8022982:	2303      	movs	r3, #3
 8022984:	73fb      	strb	r3, [r7, #15]
        break;
 8022986:	e005      	b.n	8022994 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8022988:	4b2c      	ldr	r3, [pc, #176]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022990:	2b00      	cmp	r3, #0
 8022992:	d1ef      	bne.n	8022974 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8022994:	7bfb      	ldrb	r3, [r7, #15]
 8022996:	2b00      	cmp	r3, #0
 8022998:	d14a      	bne.n	8022a30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 802299a:	683b      	ldr	r3, [r7, #0]
 802299c:	2b00      	cmp	r3, #0
 802299e:	d111      	bne.n	80229c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80229a0:	4b26      	ldr	r3, [pc, #152]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80229a2:	695b      	ldr	r3, [r3, #20]
 80229a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80229a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80229ac:	687a      	ldr	r2, [r7, #4]
 80229ae:	6892      	ldr	r2, [r2, #8]
 80229b0:	0211      	lsls	r1, r2, #8
 80229b2:	687a      	ldr	r2, [r7, #4]
 80229b4:	68d2      	ldr	r2, [r2, #12]
 80229b6:	0912      	lsrs	r2, r2, #4
 80229b8:	0452      	lsls	r2, r2, #17
 80229ba:	430a      	orrs	r2, r1
 80229bc:	491f      	ldr	r1, [pc, #124]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80229be:	4313      	orrs	r3, r2
 80229c0:	614b      	str	r3, [r1, #20]
 80229c2:	e011      	b.n	80229e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80229c4:	4b1d      	ldr	r3, [pc, #116]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80229c6:	695b      	ldr	r3, [r3, #20]
 80229c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80229cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80229d0:	687a      	ldr	r2, [r7, #4]
 80229d2:	6892      	ldr	r2, [r2, #8]
 80229d4:	0211      	lsls	r1, r2, #8
 80229d6:	687a      	ldr	r2, [r7, #4]
 80229d8:	6912      	ldr	r2, [r2, #16]
 80229da:	0852      	lsrs	r2, r2, #1
 80229dc:	3a01      	subs	r2, #1
 80229de:	0652      	lsls	r2, r2, #25
 80229e0:	430a      	orrs	r2, r1
 80229e2:	4916      	ldr	r1, [pc, #88]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80229e4:	4313      	orrs	r3, r2
 80229e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80229e8:	4b14      	ldr	r3, [pc, #80]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	4a13      	ldr	r2, [pc, #76]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 80229ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80229f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80229f4:	f7fe f9d6 	bl	8020da4 <HAL_GetTick>
 80229f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80229fa:	e009      	b.n	8022a10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80229fc:	f7fe f9d2 	bl	8020da4 <HAL_GetTick>
 8022a00:	4602      	mov	r2, r0
 8022a02:	68bb      	ldr	r3, [r7, #8]
 8022a04:	1ad3      	subs	r3, r2, r3
 8022a06:	2b02      	cmp	r3, #2
 8022a08:	d902      	bls.n	8022a10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8022a0a:	2303      	movs	r3, #3
 8022a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8022a0e:	e005      	b.n	8022a1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8022a10:	4b0a      	ldr	r3, [pc, #40]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8022a12:	681b      	ldr	r3, [r3, #0]
 8022a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022a18:	2b00      	cmp	r3, #0
 8022a1a:	d0ef      	beq.n	80229fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8022a1c:	7bfb      	ldrb	r3, [r7, #15]
 8022a1e:	2b00      	cmp	r3, #0
 8022a20:	d106      	bne.n	8022a30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8022a22:	4b06      	ldr	r3, [pc, #24]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8022a24:	695a      	ldr	r2, [r3, #20]
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	695b      	ldr	r3, [r3, #20]
 8022a2a:	4904      	ldr	r1, [pc, #16]	; (8022a3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8022a2c:	4313      	orrs	r3, r2
 8022a2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8022a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8022a32:	4618      	mov	r0, r3
 8022a34:	3710      	adds	r7, #16
 8022a36:	46bd      	mov	sp, r7
 8022a38:	bd80      	pop	{r7, pc}
 8022a3a:	bf00      	nop
 8022a3c:	40021000 	.word	0x40021000

08022a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022a40:	b580      	push	{r7, lr}
 8022a42:	b082      	sub	sp, #8
 8022a44:	af00      	add	r7, sp, #0
 8022a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022a48:	687b      	ldr	r3, [r7, #4]
 8022a4a:	2b00      	cmp	r3, #0
 8022a4c:	d101      	bne.n	8022a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8022a4e:	2301      	movs	r3, #1
 8022a50:	e040      	b.n	8022ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022a56:	2b00      	cmp	r3, #0
 8022a58:	d106      	bne.n	8022a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	2200      	movs	r2, #0
 8022a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022a62:	6878      	ldr	r0, [r7, #4]
 8022a64:	f7fe f824 	bl	8020ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	2224      	movs	r2, #36	; 0x24
 8022a6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8022a6e:	687b      	ldr	r3, [r7, #4]
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	681a      	ldr	r2, [r3, #0]
 8022a74:	687b      	ldr	r3, [r7, #4]
 8022a76:	681b      	ldr	r3, [r3, #0]
 8022a78:	f022 0201 	bic.w	r2, r2, #1
 8022a7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8022a7e:	6878      	ldr	r0, [r7, #4]
 8022a80:	f000 f8c0 	bl	8022c04 <UART_SetConfig>
 8022a84:	4603      	mov	r3, r0
 8022a86:	2b01      	cmp	r3, #1
 8022a88:	d101      	bne.n	8022a8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8022a8a:	2301      	movs	r3, #1
 8022a8c:	e022      	b.n	8022ad4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8022a8e:	687b      	ldr	r3, [r7, #4]
 8022a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022a92:	2b00      	cmp	r3, #0
 8022a94:	d002      	beq.n	8022a9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8022a96:	6878      	ldr	r0, [r7, #4]
 8022a98:	f000 fb3e 	bl	8023118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022a9c:	687b      	ldr	r3, [r7, #4]
 8022a9e:	681b      	ldr	r3, [r3, #0]
 8022aa0:	685a      	ldr	r2, [r3, #4]
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	681b      	ldr	r3, [r3, #0]
 8022aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8022aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022aac:	687b      	ldr	r3, [r7, #4]
 8022aae:	681b      	ldr	r3, [r3, #0]
 8022ab0:	689a      	ldr	r2, [r3, #8]
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	681b      	ldr	r3, [r3, #0]
 8022ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8022aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	681b      	ldr	r3, [r3, #0]
 8022ac0:	681a      	ldr	r2, [r3, #0]
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	681b      	ldr	r3, [r3, #0]
 8022ac6:	f042 0201 	orr.w	r2, r2, #1
 8022aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8022acc:	6878      	ldr	r0, [r7, #4]
 8022ace:	f000 fbc5 	bl	802325c <UART_CheckIdleState>
 8022ad2:	4603      	mov	r3, r0
}
 8022ad4:	4618      	mov	r0, r3
 8022ad6:	3708      	adds	r7, #8
 8022ad8:	46bd      	mov	sp, r7
 8022ada:	bd80      	pop	{r7, pc}

08022adc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8022adc:	b580      	push	{r7, lr}
 8022ade:	b08a      	sub	sp, #40	; 0x28
 8022ae0:	af02      	add	r7, sp, #8
 8022ae2:	60f8      	str	r0, [r7, #12]
 8022ae4:	60b9      	str	r1, [r7, #8]
 8022ae6:	603b      	str	r3, [r7, #0]
 8022ae8:	4613      	mov	r3, r2
 8022aea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8022aec:	68fb      	ldr	r3, [r7, #12]
 8022aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022af0:	2b20      	cmp	r3, #32
 8022af2:	f040 8082 	bne.w	8022bfa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8022af6:	68bb      	ldr	r3, [r7, #8]
 8022af8:	2b00      	cmp	r3, #0
 8022afa:	d002      	beq.n	8022b02 <HAL_UART_Transmit+0x26>
 8022afc:	88fb      	ldrh	r3, [r7, #6]
 8022afe:	2b00      	cmp	r3, #0
 8022b00:	d101      	bne.n	8022b06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8022b02:	2301      	movs	r3, #1
 8022b04:	e07a      	b.n	8022bfc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8022b06:	68fb      	ldr	r3, [r7, #12]
 8022b08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8022b0c:	2b01      	cmp	r3, #1
 8022b0e:	d101      	bne.n	8022b14 <HAL_UART_Transmit+0x38>
 8022b10:	2302      	movs	r3, #2
 8022b12:	e073      	b.n	8022bfc <HAL_UART_Transmit+0x120>
 8022b14:	68fb      	ldr	r3, [r7, #12]
 8022b16:	2201      	movs	r2, #1
 8022b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022b1c:	68fb      	ldr	r3, [r7, #12]
 8022b1e:	2200      	movs	r2, #0
 8022b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022b24:	68fb      	ldr	r3, [r7, #12]
 8022b26:	2221      	movs	r2, #33	; 0x21
 8022b28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8022b2a:	f7fe f93b 	bl	8020da4 <HAL_GetTick>
 8022b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8022b30:	68fb      	ldr	r3, [r7, #12]
 8022b32:	88fa      	ldrh	r2, [r7, #6]
 8022b34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8022b38:	68fb      	ldr	r3, [r7, #12]
 8022b3a:	88fa      	ldrh	r2, [r7, #6]
 8022b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022b40:	68fb      	ldr	r3, [r7, #12]
 8022b42:	689b      	ldr	r3, [r3, #8]
 8022b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022b48:	d108      	bne.n	8022b5c <HAL_UART_Transmit+0x80>
 8022b4a:	68fb      	ldr	r3, [r7, #12]
 8022b4c:	691b      	ldr	r3, [r3, #16]
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	d104      	bne.n	8022b5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8022b52:	2300      	movs	r3, #0
 8022b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8022b56:	68bb      	ldr	r3, [r7, #8]
 8022b58:	61bb      	str	r3, [r7, #24]
 8022b5a:	e003      	b.n	8022b64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8022b5c:	68bb      	ldr	r3, [r7, #8]
 8022b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8022b60:	2300      	movs	r3, #0
 8022b62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8022b64:	68fb      	ldr	r3, [r7, #12]
 8022b66:	2200      	movs	r2, #0
 8022b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8022b6c:	e02d      	b.n	8022bca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8022b6e:	683b      	ldr	r3, [r7, #0]
 8022b70:	9300      	str	r3, [sp, #0]
 8022b72:	697b      	ldr	r3, [r7, #20]
 8022b74:	2200      	movs	r2, #0
 8022b76:	2180      	movs	r1, #128	; 0x80
 8022b78:	68f8      	ldr	r0, [r7, #12]
 8022b7a:	f000 fbb8 	bl	80232ee <UART_WaitOnFlagUntilTimeout>
 8022b7e:	4603      	mov	r3, r0
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	d001      	beq.n	8022b88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8022b84:	2303      	movs	r3, #3
 8022b86:	e039      	b.n	8022bfc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8022b88:	69fb      	ldr	r3, [r7, #28]
 8022b8a:	2b00      	cmp	r3, #0
 8022b8c:	d10b      	bne.n	8022ba6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8022b8e:	69bb      	ldr	r3, [r7, #24]
 8022b90:	881a      	ldrh	r2, [r3, #0]
 8022b92:	68fb      	ldr	r3, [r7, #12]
 8022b94:	681b      	ldr	r3, [r3, #0]
 8022b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022b9a:	b292      	uxth	r2, r2
 8022b9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8022b9e:	69bb      	ldr	r3, [r7, #24]
 8022ba0:	3302      	adds	r3, #2
 8022ba2:	61bb      	str	r3, [r7, #24]
 8022ba4:	e008      	b.n	8022bb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8022ba6:	69fb      	ldr	r3, [r7, #28]
 8022ba8:	781a      	ldrb	r2, [r3, #0]
 8022baa:	68fb      	ldr	r3, [r7, #12]
 8022bac:	681b      	ldr	r3, [r3, #0]
 8022bae:	b292      	uxth	r2, r2
 8022bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8022bb2:	69fb      	ldr	r3, [r7, #28]
 8022bb4:	3301      	adds	r3, #1
 8022bb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8022bb8:	68fb      	ldr	r3, [r7, #12]
 8022bba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8022bbe:	b29b      	uxth	r3, r3
 8022bc0:	3b01      	subs	r3, #1
 8022bc2:	b29a      	uxth	r2, r3
 8022bc4:	68fb      	ldr	r3, [r7, #12]
 8022bc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8022bca:	68fb      	ldr	r3, [r7, #12]
 8022bcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8022bd0:	b29b      	uxth	r3, r3
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	d1cb      	bne.n	8022b6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8022bd6:	683b      	ldr	r3, [r7, #0]
 8022bd8:	9300      	str	r3, [sp, #0]
 8022bda:	697b      	ldr	r3, [r7, #20]
 8022bdc:	2200      	movs	r2, #0
 8022bde:	2140      	movs	r1, #64	; 0x40
 8022be0:	68f8      	ldr	r0, [r7, #12]
 8022be2:	f000 fb84 	bl	80232ee <UART_WaitOnFlagUntilTimeout>
 8022be6:	4603      	mov	r3, r0
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	d001      	beq.n	8022bf0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8022bec:	2303      	movs	r3, #3
 8022bee:	e005      	b.n	8022bfc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8022bf0:	68fb      	ldr	r3, [r7, #12]
 8022bf2:	2220      	movs	r2, #32
 8022bf4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8022bf6:	2300      	movs	r3, #0
 8022bf8:	e000      	b.n	8022bfc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8022bfa:	2302      	movs	r3, #2
  }
}
 8022bfc:	4618      	mov	r0, r3
 8022bfe:	3720      	adds	r7, #32
 8022c00:	46bd      	mov	sp, r7
 8022c02:	bd80      	pop	{r7, pc}

08022c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022c04:	b5b0      	push	{r4, r5, r7, lr}
 8022c06:	b088      	sub	sp, #32
 8022c08:	af00      	add	r7, sp, #0
 8022c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8022c0c:	2300      	movs	r3, #0
 8022c0e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8022c10:	687b      	ldr	r3, [r7, #4]
 8022c12:	689a      	ldr	r2, [r3, #8]
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	691b      	ldr	r3, [r3, #16]
 8022c18:	431a      	orrs	r2, r3
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	695b      	ldr	r3, [r3, #20]
 8022c1e:	431a      	orrs	r2, r3
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	69db      	ldr	r3, [r3, #28]
 8022c24:	4313      	orrs	r3, r2
 8022c26:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	681a      	ldr	r2, [r3, #0]
 8022c2e:	4bad      	ldr	r3, [pc, #692]	; (8022ee4 <UART_SetConfig+0x2e0>)
 8022c30:	4013      	ands	r3, r2
 8022c32:	687a      	ldr	r2, [r7, #4]
 8022c34:	6812      	ldr	r2, [r2, #0]
 8022c36:	69f9      	ldr	r1, [r7, #28]
 8022c38:	430b      	orrs	r3, r1
 8022c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	681b      	ldr	r3, [r3, #0]
 8022c40:	685b      	ldr	r3, [r3, #4]
 8022c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	68da      	ldr	r2, [r3, #12]
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	681b      	ldr	r3, [r3, #0]
 8022c4e:	430a      	orrs	r2, r1
 8022c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8022c52:	687b      	ldr	r3, [r7, #4]
 8022c54:	699b      	ldr	r3, [r3, #24]
 8022c56:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8022c58:	687b      	ldr	r3, [r7, #4]
 8022c5a:	681b      	ldr	r3, [r3, #0]
 8022c5c:	4aa2      	ldr	r2, [pc, #648]	; (8022ee8 <UART_SetConfig+0x2e4>)
 8022c5e:	4293      	cmp	r3, r2
 8022c60:	d004      	beq.n	8022c6c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8022c62:	687b      	ldr	r3, [r7, #4]
 8022c64:	6a1b      	ldr	r3, [r3, #32]
 8022c66:	69fa      	ldr	r2, [r7, #28]
 8022c68:	4313      	orrs	r3, r2
 8022c6a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8022c6c:	687b      	ldr	r3, [r7, #4]
 8022c6e:	681b      	ldr	r3, [r3, #0]
 8022c70:	689b      	ldr	r3, [r3, #8]
 8022c72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8022c76:	687b      	ldr	r3, [r7, #4]
 8022c78:	681b      	ldr	r3, [r3, #0]
 8022c7a:	69fa      	ldr	r2, [r7, #28]
 8022c7c:	430a      	orrs	r2, r1
 8022c7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	681b      	ldr	r3, [r3, #0]
 8022c84:	4a99      	ldr	r2, [pc, #612]	; (8022eec <UART_SetConfig+0x2e8>)
 8022c86:	4293      	cmp	r3, r2
 8022c88:	d121      	bne.n	8022cce <UART_SetConfig+0xca>
 8022c8a:	4b99      	ldr	r3, [pc, #612]	; (8022ef0 <UART_SetConfig+0x2ec>)
 8022c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022c90:	f003 0303 	and.w	r3, r3, #3
 8022c94:	2b03      	cmp	r3, #3
 8022c96:	d817      	bhi.n	8022cc8 <UART_SetConfig+0xc4>
 8022c98:	a201      	add	r2, pc, #4	; (adr r2, 8022ca0 <UART_SetConfig+0x9c>)
 8022c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022c9e:	bf00      	nop
 8022ca0:	08022cb1 	.word	0x08022cb1
 8022ca4:	08022cbd 	.word	0x08022cbd
 8022ca8:	08022cb7 	.word	0x08022cb7
 8022cac:	08022cc3 	.word	0x08022cc3
 8022cb0:	2301      	movs	r3, #1
 8022cb2:	76fb      	strb	r3, [r7, #27]
 8022cb4:	e0e7      	b.n	8022e86 <UART_SetConfig+0x282>
 8022cb6:	2302      	movs	r3, #2
 8022cb8:	76fb      	strb	r3, [r7, #27]
 8022cba:	e0e4      	b.n	8022e86 <UART_SetConfig+0x282>
 8022cbc:	2304      	movs	r3, #4
 8022cbe:	76fb      	strb	r3, [r7, #27]
 8022cc0:	e0e1      	b.n	8022e86 <UART_SetConfig+0x282>
 8022cc2:	2308      	movs	r3, #8
 8022cc4:	76fb      	strb	r3, [r7, #27]
 8022cc6:	e0de      	b.n	8022e86 <UART_SetConfig+0x282>
 8022cc8:	2310      	movs	r3, #16
 8022cca:	76fb      	strb	r3, [r7, #27]
 8022ccc:	e0db      	b.n	8022e86 <UART_SetConfig+0x282>
 8022cce:	687b      	ldr	r3, [r7, #4]
 8022cd0:	681b      	ldr	r3, [r3, #0]
 8022cd2:	4a88      	ldr	r2, [pc, #544]	; (8022ef4 <UART_SetConfig+0x2f0>)
 8022cd4:	4293      	cmp	r3, r2
 8022cd6:	d132      	bne.n	8022d3e <UART_SetConfig+0x13a>
 8022cd8:	4b85      	ldr	r3, [pc, #532]	; (8022ef0 <UART_SetConfig+0x2ec>)
 8022cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022cde:	f003 030c 	and.w	r3, r3, #12
 8022ce2:	2b0c      	cmp	r3, #12
 8022ce4:	d828      	bhi.n	8022d38 <UART_SetConfig+0x134>
 8022ce6:	a201      	add	r2, pc, #4	; (adr r2, 8022cec <UART_SetConfig+0xe8>)
 8022ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022cec:	08022d21 	.word	0x08022d21
 8022cf0:	08022d39 	.word	0x08022d39
 8022cf4:	08022d39 	.word	0x08022d39
 8022cf8:	08022d39 	.word	0x08022d39
 8022cfc:	08022d2d 	.word	0x08022d2d
 8022d00:	08022d39 	.word	0x08022d39
 8022d04:	08022d39 	.word	0x08022d39
 8022d08:	08022d39 	.word	0x08022d39
 8022d0c:	08022d27 	.word	0x08022d27
 8022d10:	08022d39 	.word	0x08022d39
 8022d14:	08022d39 	.word	0x08022d39
 8022d18:	08022d39 	.word	0x08022d39
 8022d1c:	08022d33 	.word	0x08022d33
 8022d20:	2300      	movs	r3, #0
 8022d22:	76fb      	strb	r3, [r7, #27]
 8022d24:	e0af      	b.n	8022e86 <UART_SetConfig+0x282>
 8022d26:	2302      	movs	r3, #2
 8022d28:	76fb      	strb	r3, [r7, #27]
 8022d2a:	e0ac      	b.n	8022e86 <UART_SetConfig+0x282>
 8022d2c:	2304      	movs	r3, #4
 8022d2e:	76fb      	strb	r3, [r7, #27]
 8022d30:	e0a9      	b.n	8022e86 <UART_SetConfig+0x282>
 8022d32:	2308      	movs	r3, #8
 8022d34:	76fb      	strb	r3, [r7, #27]
 8022d36:	e0a6      	b.n	8022e86 <UART_SetConfig+0x282>
 8022d38:	2310      	movs	r3, #16
 8022d3a:	76fb      	strb	r3, [r7, #27]
 8022d3c:	e0a3      	b.n	8022e86 <UART_SetConfig+0x282>
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	681b      	ldr	r3, [r3, #0]
 8022d42:	4a6d      	ldr	r2, [pc, #436]	; (8022ef8 <UART_SetConfig+0x2f4>)
 8022d44:	4293      	cmp	r3, r2
 8022d46:	d120      	bne.n	8022d8a <UART_SetConfig+0x186>
 8022d48:	4b69      	ldr	r3, [pc, #420]	; (8022ef0 <UART_SetConfig+0x2ec>)
 8022d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022d4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8022d52:	2b30      	cmp	r3, #48	; 0x30
 8022d54:	d013      	beq.n	8022d7e <UART_SetConfig+0x17a>
 8022d56:	2b30      	cmp	r3, #48	; 0x30
 8022d58:	d814      	bhi.n	8022d84 <UART_SetConfig+0x180>
 8022d5a:	2b20      	cmp	r3, #32
 8022d5c:	d009      	beq.n	8022d72 <UART_SetConfig+0x16e>
 8022d5e:	2b20      	cmp	r3, #32
 8022d60:	d810      	bhi.n	8022d84 <UART_SetConfig+0x180>
 8022d62:	2b00      	cmp	r3, #0
 8022d64:	d002      	beq.n	8022d6c <UART_SetConfig+0x168>
 8022d66:	2b10      	cmp	r3, #16
 8022d68:	d006      	beq.n	8022d78 <UART_SetConfig+0x174>
 8022d6a:	e00b      	b.n	8022d84 <UART_SetConfig+0x180>
 8022d6c:	2300      	movs	r3, #0
 8022d6e:	76fb      	strb	r3, [r7, #27]
 8022d70:	e089      	b.n	8022e86 <UART_SetConfig+0x282>
 8022d72:	2302      	movs	r3, #2
 8022d74:	76fb      	strb	r3, [r7, #27]
 8022d76:	e086      	b.n	8022e86 <UART_SetConfig+0x282>
 8022d78:	2304      	movs	r3, #4
 8022d7a:	76fb      	strb	r3, [r7, #27]
 8022d7c:	e083      	b.n	8022e86 <UART_SetConfig+0x282>
 8022d7e:	2308      	movs	r3, #8
 8022d80:	76fb      	strb	r3, [r7, #27]
 8022d82:	e080      	b.n	8022e86 <UART_SetConfig+0x282>
 8022d84:	2310      	movs	r3, #16
 8022d86:	76fb      	strb	r3, [r7, #27]
 8022d88:	e07d      	b.n	8022e86 <UART_SetConfig+0x282>
 8022d8a:	687b      	ldr	r3, [r7, #4]
 8022d8c:	681b      	ldr	r3, [r3, #0]
 8022d8e:	4a5b      	ldr	r2, [pc, #364]	; (8022efc <UART_SetConfig+0x2f8>)
 8022d90:	4293      	cmp	r3, r2
 8022d92:	d120      	bne.n	8022dd6 <UART_SetConfig+0x1d2>
 8022d94:	4b56      	ldr	r3, [pc, #344]	; (8022ef0 <UART_SetConfig+0x2ec>)
 8022d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022d9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8022d9e:	2bc0      	cmp	r3, #192	; 0xc0
 8022da0:	d013      	beq.n	8022dca <UART_SetConfig+0x1c6>
 8022da2:	2bc0      	cmp	r3, #192	; 0xc0
 8022da4:	d814      	bhi.n	8022dd0 <UART_SetConfig+0x1cc>
 8022da6:	2b80      	cmp	r3, #128	; 0x80
 8022da8:	d009      	beq.n	8022dbe <UART_SetConfig+0x1ba>
 8022daa:	2b80      	cmp	r3, #128	; 0x80
 8022dac:	d810      	bhi.n	8022dd0 <UART_SetConfig+0x1cc>
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	d002      	beq.n	8022db8 <UART_SetConfig+0x1b4>
 8022db2:	2b40      	cmp	r3, #64	; 0x40
 8022db4:	d006      	beq.n	8022dc4 <UART_SetConfig+0x1c0>
 8022db6:	e00b      	b.n	8022dd0 <UART_SetConfig+0x1cc>
 8022db8:	2300      	movs	r3, #0
 8022dba:	76fb      	strb	r3, [r7, #27]
 8022dbc:	e063      	b.n	8022e86 <UART_SetConfig+0x282>
 8022dbe:	2302      	movs	r3, #2
 8022dc0:	76fb      	strb	r3, [r7, #27]
 8022dc2:	e060      	b.n	8022e86 <UART_SetConfig+0x282>
 8022dc4:	2304      	movs	r3, #4
 8022dc6:	76fb      	strb	r3, [r7, #27]
 8022dc8:	e05d      	b.n	8022e86 <UART_SetConfig+0x282>
 8022dca:	2308      	movs	r3, #8
 8022dcc:	76fb      	strb	r3, [r7, #27]
 8022dce:	e05a      	b.n	8022e86 <UART_SetConfig+0x282>
 8022dd0:	2310      	movs	r3, #16
 8022dd2:	76fb      	strb	r3, [r7, #27]
 8022dd4:	e057      	b.n	8022e86 <UART_SetConfig+0x282>
 8022dd6:	687b      	ldr	r3, [r7, #4]
 8022dd8:	681b      	ldr	r3, [r3, #0]
 8022dda:	4a49      	ldr	r2, [pc, #292]	; (8022f00 <UART_SetConfig+0x2fc>)
 8022ddc:	4293      	cmp	r3, r2
 8022dde:	d125      	bne.n	8022e2c <UART_SetConfig+0x228>
 8022de0:	4b43      	ldr	r3, [pc, #268]	; (8022ef0 <UART_SetConfig+0x2ec>)
 8022de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8022dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8022dee:	d017      	beq.n	8022e20 <UART_SetConfig+0x21c>
 8022df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8022df4:	d817      	bhi.n	8022e26 <UART_SetConfig+0x222>
 8022df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022dfa:	d00b      	beq.n	8022e14 <UART_SetConfig+0x210>
 8022dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022e00:	d811      	bhi.n	8022e26 <UART_SetConfig+0x222>
 8022e02:	2b00      	cmp	r3, #0
 8022e04:	d003      	beq.n	8022e0e <UART_SetConfig+0x20a>
 8022e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022e0a:	d006      	beq.n	8022e1a <UART_SetConfig+0x216>
 8022e0c:	e00b      	b.n	8022e26 <UART_SetConfig+0x222>
 8022e0e:	2300      	movs	r3, #0
 8022e10:	76fb      	strb	r3, [r7, #27]
 8022e12:	e038      	b.n	8022e86 <UART_SetConfig+0x282>
 8022e14:	2302      	movs	r3, #2
 8022e16:	76fb      	strb	r3, [r7, #27]
 8022e18:	e035      	b.n	8022e86 <UART_SetConfig+0x282>
 8022e1a:	2304      	movs	r3, #4
 8022e1c:	76fb      	strb	r3, [r7, #27]
 8022e1e:	e032      	b.n	8022e86 <UART_SetConfig+0x282>
 8022e20:	2308      	movs	r3, #8
 8022e22:	76fb      	strb	r3, [r7, #27]
 8022e24:	e02f      	b.n	8022e86 <UART_SetConfig+0x282>
 8022e26:	2310      	movs	r3, #16
 8022e28:	76fb      	strb	r3, [r7, #27]
 8022e2a:	e02c      	b.n	8022e86 <UART_SetConfig+0x282>
 8022e2c:	687b      	ldr	r3, [r7, #4]
 8022e2e:	681b      	ldr	r3, [r3, #0]
 8022e30:	4a2d      	ldr	r2, [pc, #180]	; (8022ee8 <UART_SetConfig+0x2e4>)
 8022e32:	4293      	cmp	r3, r2
 8022e34:	d125      	bne.n	8022e82 <UART_SetConfig+0x27e>
 8022e36:	4b2e      	ldr	r3, [pc, #184]	; (8022ef0 <UART_SetConfig+0x2ec>)
 8022e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022e3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8022e40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8022e44:	d017      	beq.n	8022e76 <UART_SetConfig+0x272>
 8022e46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8022e4a:	d817      	bhi.n	8022e7c <UART_SetConfig+0x278>
 8022e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8022e50:	d00b      	beq.n	8022e6a <UART_SetConfig+0x266>
 8022e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8022e56:	d811      	bhi.n	8022e7c <UART_SetConfig+0x278>
 8022e58:	2b00      	cmp	r3, #0
 8022e5a:	d003      	beq.n	8022e64 <UART_SetConfig+0x260>
 8022e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022e60:	d006      	beq.n	8022e70 <UART_SetConfig+0x26c>
 8022e62:	e00b      	b.n	8022e7c <UART_SetConfig+0x278>
 8022e64:	2300      	movs	r3, #0
 8022e66:	76fb      	strb	r3, [r7, #27]
 8022e68:	e00d      	b.n	8022e86 <UART_SetConfig+0x282>
 8022e6a:	2302      	movs	r3, #2
 8022e6c:	76fb      	strb	r3, [r7, #27]
 8022e6e:	e00a      	b.n	8022e86 <UART_SetConfig+0x282>
 8022e70:	2304      	movs	r3, #4
 8022e72:	76fb      	strb	r3, [r7, #27]
 8022e74:	e007      	b.n	8022e86 <UART_SetConfig+0x282>
 8022e76:	2308      	movs	r3, #8
 8022e78:	76fb      	strb	r3, [r7, #27]
 8022e7a:	e004      	b.n	8022e86 <UART_SetConfig+0x282>
 8022e7c:	2310      	movs	r3, #16
 8022e7e:	76fb      	strb	r3, [r7, #27]
 8022e80:	e001      	b.n	8022e86 <UART_SetConfig+0x282>
 8022e82:	2310      	movs	r3, #16
 8022e84:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8022e86:	687b      	ldr	r3, [r7, #4]
 8022e88:	681b      	ldr	r3, [r3, #0]
 8022e8a:	4a17      	ldr	r2, [pc, #92]	; (8022ee8 <UART_SetConfig+0x2e4>)
 8022e8c:	4293      	cmp	r3, r2
 8022e8e:	f040 8087 	bne.w	8022fa0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8022e92:	7efb      	ldrb	r3, [r7, #27]
 8022e94:	2b08      	cmp	r3, #8
 8022e96:	d837      	bhi.n	8022f08 <UART_SetConfig+0x304>
 8022e98:	a201      	add	r2, pc, #4	; (adr r2, 8022ea0 <UART_SetConfig+0x29c>)
 8022e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022e9e:	bf00      	nop
 8022ea0:	08022ec5 	.word	0x08022ec5
 8022ea4:	08022f09 	.word	0x08022f09
 8022ea8:	08022ecd 	.word	0x08022ecd
 8022eac:	08022f09 	.word	0x08022f09
 8022eb0:	08022ed3 	.word	0x08022ed3
 8022eb4:	08022f09 	.word	0x08022f09
 8022eb8:	08022f09 	.word	0x08022f09
 8022ebc:	08022f09 	.word	0x08022f09
 8022ec0:	08022edb 	.word	0x08022edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8022ec4:	f7ff f874 	bl	8021fb0 <HAL_RCC_GetPCLK1Freq>
 8022ec8:	6178      	str	r0, [r7, #20]
        break;
 8022eca:	e022      	b.n	8022f12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8022ecc:	4b0d      	ldr	r3, [pc, #52]	; (8022f04 <UART_SetConfig+0x300>)
 8022ece:	617b      	str	r3, [r7, #20]
        break;
 8022ed0:	e01f      	b.n	8022f12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8022ed2:	f7fe ffd5 	bl	8021e80 <HAL_RCC_GetSysClockFreq>
 8022ed6:	6178      	str	r0, [r7, #20]
        break;
 8022ed8:	e01b      	b.n	8022f12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8022eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8022ede:	617b      	str	r3, [r7, #20]
        break;
 8022ee0:	e017      	b.n	8022f12 <UART_SetConfig+0x30e>
 8022ee2:	bf00      	nop
 8022ee4:	efff69f3 	.word	0xefff69f3
 8022ee8:	40008000 	.word	0x40008000
 8022eec:	40013800 	.word	0x40013800
 8022ef0:	40021000 	.word	0x40021000
 8022ef4:	40004400 	.word	0x40004400
 8022ef8:	40004800 	.word	0x40004800
 8022efc:	40004c00 	.word	0x40004c00
 8022f00:	40005000 	.word	0x40005000
 8022f04:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8022f08:	2300      	movs	r3, #0
 8022f0a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8022f0c:	2301      	movs	r3, #1
 8022f0e:	76bb      	strb	r3, [r7, #26]
        break;
 8022f10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8022f12:	697b      	ldr	r3, [r7, #20]
 8022f14:	2b00      	cmp	r3, #0
 8022f16:	f000 80f1 	beq.w	80230fc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8022f1a:	687b      	ldr	r3, [r7, #4]
 8022f1c:	685a      	ldr	r2, [r3, #4]
 8022f1e:	4613      	mov	r3, r2
 8022f20:	005b      	lsls	r3, r3, #1
 8022f22:	4413      	add	r3, r2
 8022f24:	697a      	ldr	r2, [r7, #20]
 8022f26:	429a      	cmp	r2, r3
 8022f28:	d305      	bcc.n	8022f36 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8022f2a:	687b      	ldr	r3, [r7, #4]
 8022f2c:	685b      	ldr	r3, [r3, #4]
 8022f2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8022f30:	697a      	ldr	r2, [r7, #20]
 8022f32:	429a      	cmp	r2, r3
 8022f34:	d902      	bls.n	8022f3c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8022f36:	2301      	movs	r3, #1
 8022f38:	76bb      	strb	r3, [r7, #26]
 8022f3a:	e0df      	b.n	80230fc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8022f3c:	697b      	ldr	r3, [r7, #20]
 8022f3e:	4618      	mov	r0, r3
 8022f40:	f04f 0100 	mov.w	r1, #0
 8022f44:	f04f 0200 	mov.w	r2, #0
 8022f48:	f04f 0300 	mov.w	r3, #0
 8022f4c:	020b      	lsls	r3, r1, #8
 8022f4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8022f52:	0202      	lsls	r2, r0, #8
 8022f54:	6879      	ldr	r1, [r7, #4]
 8022f56:	6849      	ldr	r1, [r1, #4]
 8022f58:	0849      	lsrs	r1, r1, #1
 8022f5a:	4608      	mov	r0, r1
 8022f5c:	f04f 0100 	mov.w	r1, #0
 8022f60:	1814      	adds	r4, r2, r0
 8022f62:	eb43 0501 	adc.w	r5, r3, r1
 8022f66:	687b      	ldr	r3, [r7, #4]
 8022f68:	685b      	ldr	r3, [r3, #4]
 8022f6a:	461a      	mov	r2, r3
 8022f6c:	f04f 0300 	mov.w	r3, #0
 8022f70:	4620      	mov	r0, r4
 8022f72:	4629      	mov	r1, r5
 8022f74:	f7fd f928 	bl	80201c8 <__aeabi_uldivmod>
 8022f78:	4602      	mov	r2, r0
 8022f7a:	460b      	mov	r3, r1
 8022f7c:	4613      	mov	r3, r2
 8022f7e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8022f80:	693b      	ldr	r3, [r7, #16]
 8022f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8022f86:	d308      	bcc.n	8022f9a <UART_SetConfig+0x396>
 8022f88:	693b      	ldr	r3, [r7, #16]
 8022f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8022f8e:	d204      	bcs.n	8022f9a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8022f90:	687b      	ldr	r3, [r7, #4]
 8022f92:	681b      	ldr	r3, [r3, #0]
 8022f94:	693a      	ldr	r2, [r7, #16]
 8022f96:	60da      	str	r2, [r3, #12]
 8022f98:	e0b0      	b.n	80230fc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8022f9a:	2301      	movs	r3, #1
 8022f9c:	76bb      	strb	r3, [r7, #26]
 8022f9e:	e0ad      	b.n	80230fc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022fa0:	687b      	ldr	r3, [r7, #4]
 8022fa2:	69db      	ldr	r3, [r3, #28]
 8022fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022fa8:	d15c      	bne.n	8023064 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8022faa:	7efb      	ldrb	r3, [r7, #27]
 8022fac:	2b08      	cmp	r3, #8
 8022fae:	d828      	bhi.n	8023002 <UART_SetConfig+0x3fe>
 8022fb0:	a201      	add	r2, pc, #4	; (adr r2, 8022fb8 <UART_SetConfig+0x3b4>)
 8022fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022fb6:	bf00      	nop
 8022fb8:	08022fdd 	.word	0x08022fdd
 8022fbc:	08022fe5 	.word	0x08022fe5
 8022fc0:	08022fed 	.word	0x08022fed
 8022fc4:	08023003 	.word	0x08023003
 8022fc8:	08022ff3 	.word	0x08022ff3
 8022fcc:	08023003 	.word	0x08023003
 8022fd0:	08023003 	.word	0x08023003
 8022fd4:	08023003 	.word	0x08023003
 8022fd8:	08022ffb 	.word	0x08022ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8022fdc:	f7fe ffe8 	bl	8021fb0 <HAL_RCC_GetPCLK1Freq>
 8022fe0:	6178      	str	r0, [r7, #20]
        break;
 8022fe2:	e013      	b.n	802300c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8022fe4:	f7fe fffa 	bl	8021fdc <HAL_RCC_GetPCLK2Freq>
 8022fe8:	6178      	str	r0, [r7, #20]
        break;
 8022fea:	e00f      	b.n	802300c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8022fec:	4b49      	ldr	r3, [pc, #292]	; (8023114 <UART_SetConfig+0x510>)
 8022fee:	617b      	str	r3, [r7, #20]
        break;
 8022ff0:	e00c      	b.n	802300c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8022ff2:	f7fe ff45 	bl	8021e80 <HAL_RCC_GetSysClockFreq>
 8022ff6:	6178      	str	r0, [r7, #20]
        break;
 8022ff8:	e008      	b.n	802300c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8022ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8022ffe:	617b      	str	r3, [r7, #20]
        break;
 8023000:	e004      	b.n	802300c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8023002:	2300      	movs	r3, #0
 8023004:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8023006:	2301      	movs	r3, #1
 8023008:	76bb      	strb	r3, [r7, #26]
        break;
 802300a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 802300c:	697b      	ldr	r3, [r7, #20]
 802300e:	2b00      	cmp	r3, #0
 8023010:	d074      	beq.n	80230fc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8023012:	697b      	ldr	r3, [r7, #20]
 8023014:	005a      	lsls	r2, r3, #1
 8023016:	687b      	ldr	r3, [r7, #4]
 8023018:	685b      	ldr	r3, [r3, #4]
 802301a:	085b      	lsrs	r3, r3, #1
 802301c:	441a      	add	r2, r3
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	685b      	ldr	r3, [r3, #4]
 8023022:	fbb2 f3f3 	udiv	r3, r2, r3
 8023026:	b29b      	uxth	r3, r3
 8023028:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802302a:	693b      	ldr	r3, [r7, #16]
 802302c:	2b0f      	cmp	r3, #15
 802302e:	d916      	bls.n	802305e <UART_SetConfig+0x45a>
 8023030:	693b      	ldr	r3, [r7, #16]
 8023032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023036:	d212      	bcs.n	802305e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8023038:	693b      	ldr	r3, [r7, #16]
 802303a:	b29b      	uxth	r3, r3
 802303c:	f023 030f 	bic.w	r3, r3, #15
 8023040:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8023042:	693b      	ldr	r3, [r7, #16]
 8023044:	085b      	lsrs	r3, r3, #1
 8023046:	b29b      	uxth	r3, r3
 8023048:	f003 0307 	and.w	r3, r3, #7
 802304c:	b29a      	uxth	r2, r3
 802304e:	89fb      	ldrh	r3, [r7, #14]
 8023050:	4313      	orrs	r3, r2
 8023052:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8023054:	687b      	ldr	r3, [r7, #4]
 8023056:	681b      	ldr	r3, [r3, #0]
 8023058:	89fa      	ldrh	r2, [r7, #14]
 802305a:	60da      	str	r2, [r3, #12]
 802305c:	e04e      	b.n	80230fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 802305e:	2301      	movs	r3, #1
 8023060:	76bb      	strb	r3, [r7, #26]
 8023062:	e04b      	b.n	80230fc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8023064:	7efb      	ldrb	r3, [r7, #27]
 8023066:	2b08      	cmp	r3, #8
 8023068:	d827      	bhi.n	80230ba <UART_SetConfig+0x4b6>
 802306a:	a201      	add	r2, pc, #4	; (adr r2, 8023070 <UART_SetConfig+0x46c>)
 802306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023070:	08023095 	.word	0x08023095
 8023074:	0802309d 	.word	0x0802309d
 8023078:	080230a5 	.word	0x080230a5
 802307c:	080230bb 	.word	0x080230bb
 8023080:	080230ab 	.word	0x080230ab
 8023084:	080230bb 	.word	0x080230bb
 8023088:	080230bb 	.word	0x080230bb
 802308c:	080230bb 	.word	0x080230bb
 8023090:	080230b3 	.word	0x080230b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8023094:	f7fe ff8c 	bl	8021fb0 <HAL_RCC_GetPCLK1Freq>
 8023098:	6178      	str	r0, [r7, #20]
        break;
 802309a:	e013      	b.n	80230c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802309c:	f7fe ff9e 	bl	8021fdc <HAL_RCC_GetPCLK2Freq>
 80230a0:	6178      	str	r0, [r7, #20]
        break;
 80230a2:	e00f      	b.n	80230c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80230a4:	4b1b      	ldr	r3, [pc, #108]	; (8023114 <UART_SetConfig+0x510>)
 80230a6:	617b      	str	r3, [r7, #20]
        break;
 80230a8:	e00c      	b.n	80230c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80230aa:	f7fe fee9 	bl	8021e80 <HAL_RCC_GetSysClockFreq>
 80230ae:	6178      	str	r0, [r7, #20]
        break;
 80230b0:	e008      	b.n	80230c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80230b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80230b6:	617b      	str	r3, [r7, #20]
        break;
 80230b8:	e004      	b.n	80230c4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80230ba:	2300      	movs	r3, #0
 80230bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80230be:	2301      	movs	r3, #1
 80230c0:	76bb      	strb	r3, [r7, #26]
        break;
 80230c2:	bf00      	nop
    }

    if (pclk != 0U)
 80230c4:	697b      	ldr	r3, [r7, #20]
 80230c6:	2b00      	cmp	r3, #0
 80230c8:	d018      	beq.n	80230fc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80230ca:	687b      	ldr	r3, [r7, #4]
 80230cc:	685b      	ldr	r3, [r3, #4]
 80230ce:	085a      	lsrs	r2, r3, #1
 80230d0:	697b      	ldr	r3, [r7, #20]
 80230d2:	441a      	add	r2, r3
 80230d4:	687b      	ldr	r3, [r7, #4]
 80230d6:	685b      	ldr	r3, [r3, #4]
 80230d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80230dc:	b29b      	uxth	r3, r3
 80230de:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80230e0:	693b      	ldr	r3, [r7, #16]
 80230e2:	2b0f      	cmp	r3, #15
 80230e4:	d908      	bls.n	80230f8 <UART_SetConfig+0x4f4>
 80230e6:	693b      	ldr	r3, [r7, #16]
 80230e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80230ec:	d204      	bcs.n	80230f8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80230ee:	687b      	ldr	r3, [r7, #4]
 80230f0:	681b      	ldr	r3, [r3, #0]
 80230f2:	693a      	ldr	r2, [r7, #16]
 80230f4:	60da      	str	r2, [r3, #12]
 80230f6:	e001      	b.n	80230fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80230f8:	2301      	movs	r3, #1
 80230fa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80230fc:	687b      	ldr	r3, [r7, #4]
 80230fe:	2200      	movs	r2, #0
 8023100:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8023102:	687b      	ldr	r3, [r7, #4]
 8023104:	2200      	movs	r2, #0
 8023106:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8023108:	7ebb      	ldrb	r3, [r7, #26]
}
 802310a:	4618      	mov	r0, r3
 802310c:	3720      	adds	r7, #32
 802310e:	46bd      	mov	sp, r7
 8023110:	bdb0      	pop	{r4, r5, r7, pc}
 8023112:	bf00      	nop
 8023114:	00f42400 	.word	0x00f42400

08023118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8023118:	b480      	push	{r7}
 802311a:	b083      	sub	sp, #12
 802311c:	af00      	add	r7, sp, #0
 802311e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023124:	f003 0301 	and.w	r3, r3, #1
 8023128:	2b00      	cmp	r3, #0
 802312a:	d00a      	beq.n	8023142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802312c:	687b      	ldr	r3, [r7, #4]
 802312e:	681b      	ldr	r3, [r3, #0]
 8023130:	685b      	ldr	r3, [r3, #4]
 8023132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8023136:	687b      	ldr	r3, [r7, #4]
 8023138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802313a:	687b      	ldr	r3, [r7, #4]
 802313c:	681b      	ldr	r3, [r3, #0]
 802313e:	430a      	orrs	r2, r1
 8023140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8023142:	687b      	ldr	r3, [r7, #4]
 8023144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023146:	f003 0302 	and.w	r3, r3, #2
 802314a:	2b00      	cmp	r3, #0
 802314c:	d00a      	beq.n	8023164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 802314e:	687b      	ldr	r3, [r7, #4]
 8023150:	681b      	ldr	r3, [r3, #0]
 8023152:	685b      	ldr	r3, [r3, #4]
 8023154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8023158:	687b      	ldr	r3, [r7, #4]
 802315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802315c:	687b      	ldr	r3, [r7, #4]
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	430a      	orrs	r2, r1
 8023162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023168:	f003 0304 	and.w	r3, r3, #4
 802316c:	2b00      	cmp	r3, #0
 802316e:	d00a      	beq.n	8023186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	681b      	ldr	r3, [r3, #0]
 8023174:	685b      	ldr	r3, [r3, #4]
 8023176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 802317a:	687b      	ldr	r3, [r7, #4]
 802317c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802317e:	687b      	ldr	r3, [r7, #4]
 8023180:	681b      	ldr	r3, [r3, #0]
 8023182:	430a      	orrs	r2, r1
 8023184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8023186:	687b      	ldr	r3, [r7, #4]
 8023188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802318a:	f003 0308 	and.w	r3, r3, #8
 802318e:	2b00      	cmp	r3, #0
 8023190:	d00a      	beq.n	80231a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8023192:	687b      	ldr	r3, [r7, #4]
 8023194:	681b      	ldr	r3, [r3, #0]
 8023196:	685b      	ldr	r3, [r3, #4]
 8023198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 802319c:	687b      	ldr	r3, [r7, #4]
 802319e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	681b      	ldr	r3, [r3, #0]
 80231a4:	430a      	orrs	r2, r1
 80231a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80231a8:	687b      	ldr	r3, [r7, #4]
 80231aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80231ac:	f003 0310 	and.w	r3, r3, #16
 80231b0:	2b00      	cmp	r3, #0
 80231b2:	d00a      	beq.n	80231ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80231b4:	687b      	ldr	r3, [r7, #4]
 80231b6:	681b      	ldr	r3, [r3, #0]
 80231b8:	689b      	ldr	r3, [r3, #8]
 80231ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80231be:	687b      	ldr	r3, [r7, #4]
 80231c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	681b      	ldr	r3, [r3, #0]
 80231c6:	430a      	orrs	r2, r1
 80231c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80231ca:	687b      	ldr	r3, [r7, #4]
 80231cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80231ce:	f003 0320 	and.w	r3, r3, #32
 80231d2:	2b00      	cmp	r3, #0
 80231d4:	d00a      	beq.n	80231ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80231d6:	687b      	ldr	r3, [r7, #4]
 80231d8:	681b      	ldr	r3, [r3, #0]
 80231da:	689b      	ldr	r3, [r3, #8]
 80231dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80231e0:	687b      	ldr	r3, [r7, #4]
 80231e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80231e4:	687b      	ldr	r3, [r7, #4]
 80231e6:	681b      	ldr	r3, [r3, #0]
 80231e8:	430a      	orrs	r2, r1
 80231ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80231ec:	687b      	ldr	r3, [r7, #4]
 80231ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80231f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80231f4:	2b00      	cmp	r3, #0
 80231f6:	d01a      	beq.n	802322e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80231f8:	687b      	ldr	r3, [r7, #4]
 80231fa:	681b      	ldr	r3, [r3, #0]
 80231fc:	685b      	ldr	r3, [r3, #4]
 80231fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8023202:	687b      	ldr	r3, [r7, #4]
 8023204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8023206:	687b      	ldr	r3, [r7, #4]
 8023208:	681b      	ldr	r3, [r3, #0]
 802320a:	430a      	orrs	r2, r1
 802320c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802320e:	687b      	ldr	r3, [r7, #4]
 8023210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8023216:	d10a      	bne.n	802322e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8023218:	687b      	ldr	r3, [r7, #4]
 802321a:	681b      	ldr	r3, [r3, #0]
 802321c:	685b      	ldr	r3, [r3, #4]
 802321e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8023222:	687b      	ldr	r3, [r7, #4]
 8023224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8023226:	687b      	ldr	r3, [r7, #4]
 8023228:	681b      	ldr	r3, [r3, #0]
 802322a:	430a      	orrs	r2, r1
 802322c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802322e:	687b      	ldr	r3, [r7, #4]
 8023230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023236:	2b00      	cmp	r3, #0
 8023238:	d00a      	beq.n	8023250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802323a:	687b      	ldr	r3, [r7, #4]
 802323c:	681b      	ldr	r3, [r3, #0]
 802323e:	685b      	ldr	r3, [r3, #4]
 8023240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8023244:	687b      	ldr	r3, [r7, #4]
 8023246:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023248:	687b      	ldr	r3, [r7, #4]
 802324a:	681b      	ldr	r3, [r3, #0]
 802324c:	430a      	orrs	r2, r1
 802324e:	605a      	str	r2, [r3, #4]
  }
}
 8023250:	bf00      	nop
 8023252:	370c      	adds	r7, #12
 8023254:	46bd      	mov	sp, r7
 8023256:	f85d 7b04 	ldr.w	r7, [sp], #4
 802325a:	4770      	bx	lr

0802325c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802325c:	b580      	push	{r7, lr}
 802325e:	b086      	sub	sp, #24
 8023260:	af02      	add	r7, sp, #8
 8023262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023264:	687b      	ldr	r3, [r7, #4]
 8023266:	2200      	movs	r2, #0
 8023268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802326c:	f7fd fd9a 	bl	8020da4 <HAL_GetTick>
 8023270:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8023272:	687b      	ldr	r3, [r7, #4]
 8023274:	681b      	ldr	r3, [r3, #0]
 8023276:	681b      	ldr	r3, [r3, #0]
 8023278:	f003 0308 	and.w	r3, r3, #8
 802327c:	2b08      	cmp	r3, #8
 802327e:	d10e      	bne.n	802329e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8023284:	9300      	str	r3, [sp, #0]
 8023286:	68fb      	ldr	r3, [r7, #12]
 8023288:	2200      	movs	r2, #0
 802328a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802328e:	6878      	ldr	r0, [r7, #4]
 8023290:	f000 f82d 	bl	80232ee <UART_WaitOnFlagUntilTimeout>
 8023294:	4603      	mov	r3, r0
 8023296:	2b00      	cmp	r3, #0
 8023298:	d001      	beq.n	802329e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802329a:	2303      	movs	r3, #3
 802329c:	e023      	b.n	80232e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802329e:	687b      	ldr	r3, [r7, #4]
 80232a0:	681b      	ldr	r3, [r3, #0]
 80232a2:	681b      	ldr	r3, [r3, #0]
 80232a4:	f003 0304 	and.w	r3, r3, #4
 80232a8:	2b04      	cmp	r3, #4
 80232aa:	d10e      	bne.n	80232ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80232ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80232b0:	9300      	str	r3, [sp, #0]
 80232b2:	68fb      	ldr	r3, [r7, #12]
 80232b4:	2200      	movs	r2, #0
 80232b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80232ba:	6878      	ldr	r0, [r7, #4]
 80232bc:	f000 f817 	bl	80232ee <UART_WaitOnFlagUntilTimeout>
 80232c0:	4603      	mov	r3, r0
 80232c2:	2b00      	cmp	r3, #0
 80232c4:	d001      	beq.n	80232ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80232c6:	2303      	movs	r3, #3
 80232c8:	e00d      	b.n	80232e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80232ca:	687b      	ldr	r3, [r7, #4]
 80232cc:	2220      	movs	r2, #32
 80232ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	2220      	movs	r2, #32
 80232d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	2200      	movs	r2, #0
 80232da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80232dc:	687b      	ldr	r3, [r7, #4]
 80232de:	2200      	movs	r2, #0
 80232e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80232e4:	2300      	movs	r3, #0
}
 80232e6:	4618      	mov	r0, r3
 80232e8:	3710      	adds	r7, #16
 80232ea:	46bd      	mov	sp, r7
 80232ec:	bd80      	pop	{r7, pc}

080232ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80232ee:	b580      	push	{r7, lr}
 80232f0:	b084      	sub	sp, #16
 80232f2:	af00      	add	r7, sp, #0
 80232f4:	60f8      	str	r0, [r7, #12]
 80232f6:	60b9      	str	r1, [r7, #8]
 80232f8:	603b      	str	r3, [r7, #0]
 80232fa:	4613      	mov	r3, r2
 80232fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80232fe:	e05e      	b.n	80233be <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023300:	69bb      	ldr	r3, [r7, #24]
 8023302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023306:	d05a      	beq.n	80233be <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023308:	f7fd fd4c 	bl	8020da4 <HAL_GetTick>
 802330c:	4602      	mov	r2, r0
 802330e:	683b      	ldr	r3, [r7, #0]
 8023310:	1ad3      	subs	r3, r2, r3
 8023312:	69ba      	ldr	r2, [r7, #24]
 8023314:	429a      	cmp	r2, r3
 8023316:	d302      	bcc.n	802331e <UART_WaitOnFlagUntilTimeout+0x30>
 8023318:	69bb      	ldr	r3, [r7, #24]
 802331a:	2b00      	cmp	r3, #0
 802331c:	d11b      	bne.n	8023356 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802331e:	68fb      	ldr	r3, [r7, #12]
 8023320:	681b      	ldr	r3, [r3, #0]
 8023322:	681a      	ldr	r2, [r3, #0]
 8023324:	68fb      	ldr	r3, [r7, #12]
 8023326:	681b      	ldr	r3, [r3, #0]
 8023328:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 802332c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802332e:	68fb      	ldr	r3, [r7, #12]
 8023330:	681b      	ldr	r3, [r3, #0]
 8023332:	689a      	ldr	r2, [r3, #8]
 8023334:	68fb      	ldr	r3, [r7, #12]
 8023336:	681b      	ldr	r3, [r3, #0]
 8023338:	f022 0201 	bic.w	r2, r2, #1
 802333c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 802333e:	68fb      	ldr	r3, [r7, #12]
 8023340:	2220      	movs	r2, #32
 8023342:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8023344:	68fb      	ldr	r3, [r7, #12]
 8023346:	2220      	movs	r2, #32
 8023348:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 802334a:	68fb      	ldr	r3, [r7, #12]
 802334c:	2200      	movs	r2, #0
 802334e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8023352:	2303      	movs	r3, #3
 8023354:	e043      	b.n	80233de <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8023356:	68fb      	ldr	r3, [r7, #12]
 8023358:	681b      	ldr	r3, [r3, #0]
 802335a:	681b      	ldr	r3, [r3, #0]
 802335c:	f003 0304 	and.w	r3, r3, #4
 8023360:	2b00      	cmp	r3, #0
 8023362:	d02c      	beq.n	80233be <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8023364:	68fb      	ldr	r3, [r7, #12]
 8023366:	681b      	ldr	r3, [r3, #0]
 8023368:	69db      	ldr	r3, [r3, #28]
 802336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8023372:	d124      	bne.n	80233be <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8023374:	68fb      	ldr	r3, [r7, #12]
 8023376:	681b      	ldr	r3, [r3, #0]
 8023378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802337c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802337e:	68fb      	ldr	r3, [r7, #12]
 8023380:	681b      	ldr	r3, [r3, #0]
 8023382:	681a      	ldr	r2, [r3, #0]
 8023384:	68fb      	ldr	r3, [r7, #12]
 8023386:	681b      	ldr	r3, [r3, #0]
 8023388:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 802338c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802338e:	68fb      	ldr	r3, [r7, #12]
 8023390:	681b      	ldr	r3, [r3, #0]
 8023392:	689a      	ldr	r2, [r3, #8]
 8023394:	68fb      	ldr	r3, [r7, #12]
 8023396:	681b      	ldr	r3, [r3, #0]
 8023398:	f022 0201 	bic.w	r2, r2, #1
 802339c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 802339e:	68fb      	ldr	r3, [r7, #12]
 80233a0:	2220      	movs	r2, #32
 80233a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80233a4:	68fb      	ldr	r3, [r7, #12]
 80233a6:	2220      	movs	r2, #32
 80233a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80233aa:	68fb      	ldr	r3, [r7, #12]
 80233ac:	2220      	movs	r2, #32
 80233ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80233b2:	68fb      	ldr	r3, [r7, #12]
 80233b4:	2200      	movs	r2, #0
 80233b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80233ba:	2303      	movs	r3, #3
 80233bc:	e00f      	b.n	80233de <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80233be:	68fb      	ldr	r3, [r7, #12]
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	69da      	ldr	r2, [r3, #28]
 80233c4:	68bb      	ldr	r3, [r7, #8]
 80233c6:	4013      	ands	r3, r2
 80233c8:	68ba      	ldr	r2, [r7, #8]
 80233ca:	429a      	cmp	r2, r3
 80233cc:	bf0c      	ite	eq
 80233ce:	2301      	moveq	r3, #1
 80233d0:	2300      	movne	r3, #0
 80233d2:	b2db      	uxtb	r3, r3
 80233d4:	461a      	mov	r2, r3
 80233d6:	79fb      	ldrb	r3, [r7, #7]
 80233d8:	429a      	cmp	r2, r3
 80233da:	d091      	beq.n	8023300 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80233dc:	2300      	movs	r3, #0
}
 80233de:	4618      	mov	r0, r3
 80233e0:	3710      	adds	r7, #16
 80233e2:	46bd      	mov	sp, r7
 80233e4:	bd80      	pop	{r7, pc}
	...

080233e8 <__libc_init_array>:
 80233e8:	b570      	push	{r4, r5, r6, lr}
 80233ea:	4d0d      	ldr	r5, [pc, #52]	; (8023420 <__libc_init_array+0x38>)
 80233ec:	4c0d      	ldr	r4, [pc, #52]	; (8023424 <__libc_init_array+0x3c>)
 80233ee:	1b64      	subs	r4, r4, r5
 80233f0:	10a4      	asrs	r4, r4, #2
 80233f2:	2600      	movs	r6, #0
 80233f4:	42a6      	cmp	r6, r4
 80233f6:	d109      	bne.n	802340c <__libc_init_array+0x24>
 80233f8:	4d0b      	ldr	r5, [pc, #44]	; (8023428 <__libc_init_array+0x40>)
 80233fa:	4c0c      	ldr	r4, [pc, #48]	; (802342c <__libc_init_array+0x44>)
 80233fc:	f000 f820 	bl	8023440 <_init>
 8023400:	1b64      	subs	r4, r4, r5
 8023402:	10a4      	asrs	r4, r4, #2
 8023404:	2600      	movs	r6, #0
 8023406:	42a6      	cmp	r6, r4
 8023408:	d105      	bne.n	8023416 <__libc_init_array+0x2e>
 802340a:	bd70      	pop	{r4, r5, r6, pc}
 802340c:	f855 3b04 	ldr.w	r3, [r5], #4
 8023410:	4798      	blx	r3
 8023412:	3601      	adds	r6, #1
 8023414:	e7ee      	b.n	80233f4 <__libc_init_array+0xc>
 8023416:	f855 3b04 	ldr.w	r3, [r5], #4
 802341a:	4798      	blx	r3
 802341c:	3601      	adds	r6, #1
 802341e:	e7f2      	b.n	8023406 <__libc_init_array+0x1e>
 8023420:	080234bc 	.word	0x080234bc
 8023424:	080234bc 	.word	0x080234bc
 8023428:	080234bc 	.word	0x080234bc
 802342c:	080234c0 	.word	0x080234c0

08023430 <memset>:
 8023430:	4402      	add	r2, r0
 8023432:	4603      	mov	r3, r0
 8023434:	4293      	cmp	r3, r2
 8023436:	d100      	bne.n	802343a <memset+0xa>
 8023438:	4770      	bx	lr
 802343a:	f803 1b01 	strb.w	r1, [r3], #1
 802343e:	e7f9      	b.n	8023434 <memset+0x4>

08023440 <_init>:
 8023440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023442:	bf00      	nop
 8023444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023446:	bc08      	pop	{r3}
 8023448:	469e      	mov	lr, r3
 802344a:	4770      	bx	lr

0802344c <_fini>:
 802344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802344e:	bf00      	nop
 8023450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023452:	bc08      	pop	{r3}
 8023454:	469e      	mov	lr, r3
 8023456:	4770      	bx	lr
