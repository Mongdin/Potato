
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff8  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a8  08025188  08025188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025b30  08025b30  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08025b30  08025b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025b38  08025b38  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08025b38  08025b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08025b40  08025b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08025b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cec  20000088  08025bd0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00017004  20000d74  08025bd0  00020d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb6d  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000372f  00000000  00000000  0003bc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c05e  00000000  00000000  0003f354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0004b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001258  00000000  00000000  0004c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028029  00000000  00000000  0004d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014191  00000000  00000000  00075409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee11f  00000000  00000000  0008959a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001776b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003550  00000000  00000000  0017770c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000088 	.word	0x20000088
 80201ac:	00000000 	.word	0x00000000
 80201b0:	0802516c 	.word	0x0802516c

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	2000008c 	.word	0x2000008c
 80201cc:	0802516c 	.word	0x0802516c

080201d0 <strlen>:
 80201d0:	4603      	mov	r3, r0
 80201d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201d6:	2a00      	cmp	r2, #0
 80201d8:	d1fb      	bne.n	80201d2 <strlen+0x2>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	3801      	subs	r0, #1
 80201de:	4770      	bx	lr

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_uldivmod>:
 8020280:	b953      	cbnz	r3, 8020298 <__aeabi_uldivmod+0x18>
 8020282:	b94a      	cbnz	r2, 8020298 <__aeabi_uldivmod+0x18>
 8020284:	2900      	cmp	r1, #0
 8020286:	bf08      	it	eq
 8020288:	2800      	cmpeq	r0, #0
 802028a:	bf1c      	itt	ne
 802028c:	f04f 31ff 	movne.w	r1, #4294967295
 8020290:	f04f 30ff 	movne.w	r0, #4294967295
 8020294:	f000 b96e 	b.w	8020574 <__aeabi_idiv0>
 8020298:	f1ad 0c08 	sub.w	ip, sp, #8
 802029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202a0:	f000 f806 	bl	80202b0 <__udivmoddi4>
 80202a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202ac:	b004      	add	sp, #16
 80202ae:	4770      	bx	lr

080202b0 <__udivmoddi4>:
 80202b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202b4:	9d08      	ldr	r5, [sp, #32]
 80202b6:	4604      	mov	r4, r0
 80202b8:	468c      	mov	ip, r1
 80202ba:	2b00      	cmp	r3, #0
 80202bc:	f040 8083 	bne.w	80203c6 <__udivmoddi4+0x116>
 80202c0:	428a      	cmp	r2, r1
 80202c2:	4617      	mov	r7, r2
 80202c4:	d947      	bls.n	8020356 <__udivmoddi4+0xa6>
 80202c6:	fab2 f282 	clz	r2, r2
 80202ca:	b142      	cbz	r2, 80202de <__udivmoddi4+0x2e>
 80202cc:	f1c2 0020 	rsb	r0, r2, #32
 80202d0:	fa24 f000 	lsr.w	r0, r4, r0
 80202d4:	4091      	lsls	r1, r2
 80202d6:	4097      	lsls	r7, r2
 80202d8:	ea40 0c01 	orr.w	ip, r0, r1
 80202dc:	4094      	lsls	r4, r2
 80202de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80202e2:	0c23      	lsrs	r3, r4, #16
 80202e4:	fbbc f6f8 	udiv	r6, ip, r8
 80202e8:	fa1f fe87 	uxth.w	lr, r7
 80202ec:	fb08 c116 	mls	r1, r8, r6, ip
 80202f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80202f4:	fb06 f10e 	mul.w	r1, r6, lr
 80202f8:	4299      	cmp	r1, r3
 80202fa:	d909      	bls.n	8020310 <__udivmoddi4+0x60>
 80202fc:	18fb      	adds	r3, r7, r3
 80202fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8020302:	f080 8119 	bcs.w	8020538 <__udivmoddi4+0x288>
 8020306:	4299      	cmp	r1, r3
 8020308:	f240 8116 	bls.w	8020538 <__udivmoddi4+0x288>
 802030c:	3e02      	subs	r6, #2
 802030e:	443b      	add	r3, r7
 8020310:	1a5b      	subs	r3, r3, r1
 8020312:	b2a4      	uxth	r4, r4
 8020314:	fbb3 f0f8 	udiv	r0, r3, r8
 8020318:	fb08 3310 	mls	r3, r8, r0, r3
 802031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020320:	fb00 fe0e 	mul.w	lr, r0, lr
 8020324:	45a6      	cmp	lr, r4
 8020326:	d909      	bls.n	802033c <__udivmoddi4+0x8c>
 8020328:	193c      	adds	r4, r7, r4
 802032a:	f100 33ff 	add.w	r3, r0, #4294967295
 802032e:	f080 8105 	bcs.w	802053c <__udivmoddi4+0x28c>
 8020332:	45a6      	cmp	lr, r4
 8020334:	f240 8102 	bls.w	802053c <__udivmoddi4+0x28c>
 8020338:	3802      	subs	r0, #2
 802033a:	443c      	add	r4, r7
 802033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020340:	eba4 040e 	sub.w	r4, r4, lr
 8020344:	2600      	movs	r6, #0
 8020346:	b11d      	cbz	r5, 8020350 <__udivmoddi4+0xa0>
 8020348:	40d4      	lsrs	r4, r2
 802034a:	2300      	movs	r3, #0
 802034c:	e9c5 4300 	strd	r4, r3, [r5]
 8020350:	4631      	mov	r1, r6
 8020352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020356:	b902      	cbnz	r2, 802035a <__udivmoddi4+0xaa>
 8020358:	deff      	udf	#255	; 0xff
 802035a:	fab2 f282 	clz	r2, r2
 802035e:	2a00      	cmp	r2, #0
 8020360:	d150      	bne.n	8020404 <__udivmoddi4+0x154>
 8020362:	1bcb      	subs	r3, r1, r7
 8020364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020368:	fa1f f887 	uxth.w	r8, r7
 802036c:	2601      	movs	r6, #1
 802036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8020372:	0c21      	lsrs	r1, r4, #16
 8020374:	fb0e 331c 	mls	r3, lr, ip, r3
 8020378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 802037c:	fb08 f30c 	mul.w	r3, r8, ip
 8020380:	428b      	cmp	r3, r1
 8020382:	d907      	bls.n	8020394 <__udivmoddi4+0xe4>
 8020384:	1879      	adds	r1, r7, r1
 8020386:	f10c 30ff 	add.w	r0, ip, #4294967295
 802038a:	d202      	bcs.n	8020392 <__udivmoddi4+0xe2>
 802038c:	428b      	cmp	r3, r1
 802038e:	f200 80e9 	bhi.w	8020564 <__udivmoddi4+0x2b4>
 8020392:	4684      	mov	ip, r0
 8020394:	1ac9      	subs	r1, r1, r3
 8020396:	b2a3      	uxth	r3, r4
 8020398:	fbb1 f0fe 	udiv	r0, r1, lr
 802039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80203a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80203a4:	fb08 f800 	mul.w	r8, r8, r0
 80203a8:	45a0      	cmp	r8, r4
 80203aa:	d907      	bls.n	80203bc <__udivmoddi4+0x10c>
 80203ac:	193c      	adds	r4, r7, r4
 80203ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80203b2:	d202      	bcs.n	80203ba <__udivmoddi4+0x10a>
 80203b4:	45a0      	cmp	r8, r4
 80203b6:	f200 80d9 	bhi.w	802056c <__udivmoddi4+0x2bc>
 80203ba:	4618      	mov	r0, r3
 80203bc:	eba4 0408 	sub.w	r4, r4, r8
 80203c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80203c4:	e7bf      	b.n	8020346 <__udivmoddi4+0x96>
 80203c6:	428b      	cmp	r3, r1
 80203c8:	d909      	bls.n	80203de <__udivmoddi4+0x12e>
 80203ca:	2d00      	cmp	r5, #0
 80203cc:	f000 80b1 	beq.w	8020532 <__udivmoddi4+0x282>
 80203d0:	2600      	movs	r6, #0
 80203d2:	e9c5 0100 	strd	r0, r1, [r5]
 80203d6:	4630      	mov	r0, r6
 80203d8:	4631      	mov	r1, r6
 80203da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203de:	fab3 f683 	clz	r6, r3
 80203e2:	2e00      	cmp	r6, #0
 80203e4:	d14a      	bne.n	802047c <__udivmoddi4+0x1cc>
 80203e6:	428b      	cmp	r3, r1
 80203e8:	d302      	bcc.n	80203f0 <__udivmoddi4+0x140>
 80203ea:	4282      	cmp	r2, r0
 80203ec:	f200 80b8 	bhi.w	8020560 <__udivmoddi4+0x2b0>
 80203f0:	1a84      	subs	r4, r0, r2
 80203f2:	eb61 0103 	sbc.w	r1, r1, r3
 80203f6:	2001      	movs	r0, #1
 80203f8:	468c      	mov	ip, r1
 80203fa:	2d00      	cmp	r5, #0
 80203fc:	d0a8      	beq.n	8020350 <__udivmoddi4+0xa0>
 80203fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8020402:	e7a5      	b.n	8020350 <__udivmoddi4+0xa0>
 8020404:	f1c2 0320 	rsb	r3, r2, #32
 8020408:	fa20 f603 	lsr.w	r6, r0, r3
 802040c:	4097      	lsls	r7, r2
 802040e:	fa01 f002 	lsl.w	r0, r1, r2
 8020412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020416:	40d9      	lsrs	r1, r3
 8020418:	4330      	orrs	r0, r6
 802041a:	0c03      	lsrs	r3, r0, #16
 802041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8020420:	fa1f f887 	uxth.w	r8, r7
 8020424:	fb0e 1116 	mls	r1, lr, r6, r1
 8020428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802042c:	fb06 f108 	mul.w	r1, r6, r8
 8020430:	4299      	cmp	r1, r3
 8020432:	fa04 f402 	lsl.w	r4, r4, r2
 8020436:	d909      	bls.n	802044c <__udivmoddi4+0x19c>
 8020438:	18fb      	adds	r3, r7, r3
 802043a:	f106 3cff 	add.w	ip, r6, #4294967295
 802043e:	f080 808d 	bcs.w	802055c <__udivmoddi4+0x2ac>
 8020442:	4299      	cmp	r1, r3
 8020444:	f240 808a 	bls.w	802055c <__udivmoddi4+0x2ac>
 8020448:	3e02      	subs	r6, #2
 802044a:	443b      	add	r3, r7
 802044c:	1a5b      	subs	r3, r3, r1
 802044e:	b281      	uxth	r1, r0
 8020450:	fbb3 f0fe 	udiv	r0, r3, lr
 8020454:	fb0e 3310 	mls	r3, lr, r0, r3
 8020458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 802045c:	fb00 f308 	mul.w	r3, r0, r8
 8020460:	428b      	cmp	r3, r1
 8020462:	d907      	bls.n	8020474 <__udivmoddi4+0x1c4>
 8020464:	1879      	adds	r1, r7, r1
 8020466:	f100 3cff 	add.w	ip, r0, #4294967295
 802046a:	d273      	bcs.n	8020554 <__udivmoddi4+0x2a4>
 802046c:	428b      	cmp	r3, r1
 802046e:	d971      	bls.n	8020554 <__udivmoddi4+0x2a4>
 8020470:	3802      	subs	r0, #2
 8020472:	4439      	add	r1, r7
 8020474:	1acb      	subs	r3, r1, r3
 8020476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 802047a:	e778      	b.n	802036e <__udivmoddi4+0xbe>
 802047c:	f1c6 0c20 	rsb	ip, r6, #32
 8020480:	fa03 f406 	lsl.w	r4, r3, r6
 8020484:	fa22 f30c 	lsr.w	r3, r2, ip
 8020488:	431c      	orrs	r4, r3
 802048a:	fa20 f70c 	lsr.w	r7, r0, ip
 802048e:	fa01 f306 	lsl.w	r3, r1, r6
 8020492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8020496:	fa21 f10c 	lsr.w	r1, r1, ip
 802049a:	431f      	orrs	r7, r3
 802049c:	0c3b      	lsrs	r3, r7, #16
 802049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80204a2:	fa1f f884 	uxth.w	r8, r4
 80204a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80204aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80204ae:	fb09 fa08 	mul.w	sl, r9, r8
 80204b2:	458a      	cmp	sl, r1
 80204b4:	fa02 f206 	lsl.w	r2, r2, r6
 80204b8:	fa00 f306 	lsl.w	r3, r0, r6
 80204bc:	d908      	bls.n	80204d0 <__udivmoddi4+0x220>
 80204be:	1861      	adds	r1, r4, r1
 80204c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80204c4:	d248      	bcs.n	8020558 <__udivmoddi4+0x2a8>
 80204c6:	458a      	cmp	sl, r1
 80204c8:	d946      	bls.n	8020558 <__udivmoddi4+0x2a8>
 80204ca:	f1a9 0902 	sub.w	r9, r9, #2
 80204ce:	4421      	add	r1, r4
 80204d0:	eba1 010a 	sub.w	r1, r1, sl
 80204d4:	b2bf      	uxth	r7, r7
 80204d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80204da:	fb0e 1110 	mls	r1, lr, r0, r1
 80204de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80204e2:	fb00 f808 	mul.w	r8, r0, r8
 80204e6:	45b8      	cmp	r8, r7
 80204e8:	d907      	bls.n	80204fa <__udivmoddi4+0x24a>
 80204ea:	19e7      	adds	r7, r4, r7
 80204ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80204f0:	d22e      	bcs.n	8020550 <__udivmoddi4+0x2a0>
 80204f2:	45b8      	cmp	r8, r7
 80204f4:	d92c      	bls.n	8020550 <__udivmoddi4+0x2a0>
 80204f6:	3802      	subs	r0, #2
 80204f8:	4427      	add	r7, r4
 80204fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80204fe:	eba7 0708 	sub.w	r7, r7, r8
 8020502:	fba0 8902 	umull	r8, r9, r0, r2
 8020506:	454f      	cmp	r7, r9
 8020508:	46c6      	mov	lr, r8
 802050a:	4649      	mov	r1, r9
 802050c:	d31a      	bcc.n	8020544 <__udivmoddi4+0x294>
 802050e:	d017      	beq.n	8020540 <__udivmoddi4+0x290>
 8020510:	b15d      	cbz	r5, 802052a <__udivmoddi4+0x27a>
 8020512:	ebb3 020e 	subs.w	r2, r3, lr
 8020516:	eb67 0701 	sbc.w	r7, r7, r1
 802051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 802051e:	40f2      	lsrs	r2, r6
 8020520:	ea4c 0202 	orr.w	r2, ip, r2
 8020524:	40f7      	lsrs	r7, r6
 8020526:	e9c5 2700 	strd	r2, r7, [r5]
 802052a:	2600      	movs	r6, #0
 802052c:	4631      	mov	r1, r6
 802052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020532:	462e      	mov	r6, r5
 8020534:	4628      	mov	r0, r5
 8020536:	e70b      	b.n	8020350 <__udivmoddi4+0xa0>
 8020538:	4606      	mov	r6, r0
 802053a:	e6e9      	b.n	8020310 <__udivmoddi4+0x60>
 802053c:	4618      	mov	r0, r3
 802053e:	e6fd      	b.n	802033c <__udivmoddi4+0x8c>
 8020540:	4543      	cmp	r3, r8
 8020542:	d2e5      	bcs.n	8020510 <__udivmoddi4+0x260>
 8020544:	ebb8 0e02 	subs.w	lr, r8, r2
 8020548:	eb69 0104 	sbc.w	r1, r9, r4
 802054c:	3801      	subs	r0, #1
 802054e:	e7df      	b.n	8020510 <__udivmoddi4+0x260>
 8020550:	4608      	mov	r0, r1
 8020552:	e7d2      	b.n	80204fa <__udivmoddi4+0x24a>
 8020554:	4660      	mov	r0, ip
 8020556:	e78d      	b.n	8020474 <__udivmoddi4+0x1c4>
 8020558:	4681      	mov	r9, r0
 802055a:	e7b9      	b.n	80204d0 <__udivmoddi4+0x220>
 802055c:	4666      	mov	r6, ip
 802055e:	e775      	b.n	802044c <__udivmoddi4+0x19c>
 8020560:	4630      	mov	r0, r6
 8020562:	e74a      	b.n	80203fa <__udivmoddi4+0x14a>
 8020564:	f1ac 0c02 	sub.w	ip, ip, #2
 8020568:	4439      	add	r1, r7
 802056a:	e713      	b.n	8020394 <__udivmoddi4+0xe4>
 802056c:	3802      	subs	r0, #2
 802056e:	443c      	add	r4, r7
 8020570:	e724      	b.n	80203bc <__udivmoddi4+0x10c>
 8020572:	bf00      	nop

08020574 <__aeabi_idiv0>:
 8020574:	4770      	bx	lr
 8020576:	bf00      	nop

08020578 <crcSlow>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
 8020578:	b570      	push	{r4, r5, r6, lr}
 802057a:	4605      	mov	r5, r0


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 802057c:	2400      	movs	r4, #0
    crc            remainder = INITIAL_REMAINDER;
 802057e:	f64f 70ff 	movw	r0, #65535	; 0xffff
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8020582:	f241 0621 	movw	r6, #4129	; 0x1021
    for (byte = 0; byte < nBytes; ++byte)
 8020586:	428c      	cmp	r4, r1
 8020588:	db00      	blt.n	802058c <crcSlow+0x14>
    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);

}   /* crcSlow() */
 802058a:	bd70      	pop	{r4, r5, r6, pc}
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
 802058c:	5d2b      	ldrb	r3, [r5, r4]
 802058e:	2208      	movs	r2, #8
 8020590:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
            if (remainder & TOPBIT)
 8020594:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8020598:	ea4f 0340 	mov.w	r3, r0, lsl #1
                remainder = (remainder << 1) ^ POLYNOMIAL;
 802059c:	bf18      	it	ne
 802059e:	4073      	eorne	r3, r6
                remainder = (remainder << 1);
 80205a0:	b298      	uxth	r0, r3
        for (bit = 8; bit > 0; --bit)
 80205a2:	1e53      	subs	r3, r2, #1
 80205a4:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 80205a8:	d1f4      	bne.n	8020594 <crcSlow+0x1c>
    for (byte = 0; byte < nBytes; ++byte)
 80205aa:	3401      	adds	r4, #1
 80205ac:	e7eb      	b.n	8020586 <crcSlow+0xe>
	...

080205b0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80205b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SCB->VTOR = 0x08020000;
 80205b4:	4b8f      	ldr	r3, [pc, #572]	; (80207f4 <main+0x244>)
 80205b6:	4a90      	ldr	r2, [pc, #576]	; (80207f8 <main+0x248>)
 80205b8:	609a      	str	r2, [r3, #8]
{
 80205ba:	b0a1      	sub	sp, #132	; 0x84
  uint8_t  MAC_Addr[6];
  uint8_t  IP_Addr[4];
  uint8_t TxData[] = "STM32 : Hello!\n";
 80205bc:	4b8f      	ldr	r3, [pc, #572]	; (80207fc <main+0x24c>)
 80205be:	aa06      	add	r2, sp, #24
 80205c0:	f103 0510 	add.w	r5, r3, #16
 80205c4:	4616      	mov	r6, r2
 80205c6:	6818      	ldr	r0, [r3, #0]
 80205c8:	6859      	ldr	r1, [r3, #4]
 80205ca:	4614      	mov	r4, r2
 80205cc:	c403      	stmia	r4!, {r0, r1}
 80205ce:	3308      	adds	r3, #8
 80205d0:	42ab      	cmp	r3, r5
 80205d2:	4622      	mov	r2, r4
 80205d4:	d1f7      	bne.n	80205c6 <main+0x16>
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80205d6:	f001 f9a5 	bl	8021924 <HAL_Init>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80205da:	2460      	movs	r4, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80205dc:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80205de:	2200      	movs	r2, #0
 80205e0:	e9cd 2416 	strd	r2, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80205e4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80205e6:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80205e8:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80205ea:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80205ee:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80205f0:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80205f2:	2328      	movs	r3, #40	; 0x28
 80205f4:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80205f6:	2404      	movs	r4, #4
 80205f8:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80205fa:	a80f      	add	r0, sp, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80205fc:	e9cd 341d 	strd	r3, r4, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLR = 2;
 8020600:	921f      	str	r2, [sp, #124]	; 0x7c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020602:	f001 fbe1 	bl	8021dc8 <HAL_RCC_OscConfig>
 8020606:	b100      	cbz	r0, 802060a <main+0x5a>
  {
    /* Initialization Error */
    while(1);
 8020608:	e7fe      	b.n	8020608 <main+0x58>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802060a:	210f      	movs	r1, #15
 802060c:	2303      	movs	r3, #3
 802060e:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8020612:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020616:	900e      	str	r0, [sp, #56]	; 0x38
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8020618:	4621      	mov	r1, r4
 802061a:	a80a      	add	r0, sp, #40	; 0x28
 802061c:	f001 fe5a 	bl	80222d4 <HAL_RCC_ClockConfig>
 8020620:	4604      	mov	r4, r0
 8020622:	b100      	cbz	r0, 8020626 <main+0x76>
  {
    /* Initialization Error */
    while(1);
 8020624:	e7fe      	b.n	8020624 <main+0x74>
  BSP_LED_Init(LED2);
 8020626:	f001 f8c1 	bl	80217ac <BSP_LED_Init>
  hDiscoUart.Instance = DISCOVERY_COM1;
 802062a:	4975      	ldr	r1, [pc, #468]	; (8020800 <main+0x250>)
  hDiscoUart.Init.BaudRate = 115200;
 802062c:	4a75      	ldr	r2, [pc, #468]	; (8020804 <main+0x254>)
  Potato_Load(&POTATO);
 802062e:	4f76      	ldr	r7, [pc, #472]	; (8020808 <main+0x258>)
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8020630:	610c      	str	r4, [r1, #16]
  hDiscoUart.Init.BaudRate = 115200;
 8020632:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8020636:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 802063a:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 802063c:	230c      	movs	r3, #12
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802063e:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8020642:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020646:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802064a:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 802064c:	f001 f8da 	bl	8021804 <BSP_COM_Init>
  Potato_Load(&POTATO);
 8020650:	4638      	mov	r0, r7
	  RemoteIP[i] = POTATO.POTATO_IP[i];
 8020652:	4d6e      	ldr	r5, [pc, #440]	; (802080c <main+0x25c>)
  Potato_Load(&POTATO);
 8020654:	f000 f92a 	bl	80208ac <Potato_Load>
  TERMOUT("Load done\n");
 8020658:	486d      	ldr	r0, [pc, #436]	; (8020810 <main+0x260>)
 802065a:	f003 fb6b 	bl	8023d34 <puts>
	  RemoteIP[i] = POTATO.POTATO_IP[i];
 802065e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8020662:	702b      	strb	r3, [r5, #0]
 8020664:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8020668:	706b      	strb	r3, [r5, #1]
 802066a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802066e:	70ab      	strb	r3, [r5, #2]
  TERMOUT("****** WIFI Module in TCP Client mode demonstration123 ****** \n\n");
 8020670:	4868      	ldr	r0, [pc, #416]	; (8020814 <main+0x264>)
	  RemoteIP[i] = POTATO.POTATO_IP[i];
 8020672:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8020676:	70eb      	strb	r3, [r5, #3]
  TERMOUT("****** WIFI Module in TCP Client mode demonstration123 ****** \n\n");
 8020678:	f003 fb5c 	bl	8023d34 <puts>
  TERMOUT("TCP Client Instructions :\n");
 802067c:	4866      	ldr	r0, [pc, #408]	; (8020818 <main+0x268>)
 802067e:	f003 fb59 	bl	8023d34 <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8020682:	4866      	ldr	r0, [pc, #408]	; (802081c <main+0x26c>)
 8020684:	f003 fb56 	bl	8023d34 <puts>
  TERMOUT("   you configured using the Configuration Access Point.\n");
 8020688:	4865      	ldr	r0, [pc, #404]	; (8020820 <main+0x270>)
 802068a:	f003 fb53 	bl	8023d34 <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\n");
 802068e:	4865      	ldr	r0, [pc, #404]	; (8020824 <main+0x274>)
 8020690:	f003 fb50 	bl	8023d34 <puts>
  TERMOUT("   with port(8002).\n");
 8020694:	4864      	ldr	r0, [pc, #400]	; (8020828 <main+0x278>)
 8020696:	f003 fb4d 	bl	8023d34 <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 802069a:	4864      	ldr	r0, [pc, #400]	; (802082c <main+0x27c>)
 802069c:	f003 fb4a 	bl	8023d34 <puts>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80206a0:	f000 ffe4 	bl	802166c <WIFI_Init>
 80206a4:	4607      	mov	r7, r0
 80206a6:	2800      	cmp	r0, #0
 80206a8:	d179      	bne.n	802079e <main+0x1ee>
    TERMOUT("> WIFI Module Initialized.\n");
 80206aa:	4861      	ldr	r0, [pc, #388]	; (8020830 <main+0x280>)
 80206ac:	f003 fb42 	bl	8023d34 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80206b0:	a80f      	add	r0, sp, #60	; 0x3c
 80206b2:	f001 f813 	bl	80216dc <WIFI_GetMAC_Address>
 80206b6:	2800      	cmp	r0, #0
 80206b8:	d14b      	bne.n	8020752 <main+0x1a2>
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 80206ba:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80206be:	9302      	str	r3, [sp, #8]
 80206c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80206c4:	9301      	str	r3, [sp, #4]
 80206c6:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 80206ca:	9300      	str	r3, [sp, #0]
 80206cc:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 80206d0:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 80206d4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80206d8:	4856      	ldr	r0, [pc, #344]	; (8020834 <main+0x284>)
 80206da:	f003 faa5 	bl	8023c28 <iprintf>
    if( WIFI_Connect(&POTATO.POTATO_SSID, &POTATO.POTATO_PW, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80206de:	4956      	ldr	r1, [pc, #344]	; (8020838 <main+0x288>)
 80206e0:	2203      	movs	r2, #3
 80206e2:	f1a1 001f 	sub.w	r0, r1, #31
 80206e6:	f000 ffe5 	bl	80216b4 <WIFI_Connect>
 80206ea:	4604      	mov	r4, r0
 80206ec:	2800      	cmp	r0, #0
 80206ee:	d154      	bne.n	802079a <main+0x1ea>
      TERMOUT("> es-wifi module connected \n");
 80206f0:	4852      	ldr	r0, [pc, #328]	; (802083c <main+0x28c>)
 80206f2:	f003 fb1f 	bl	8023d34 <puts>
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80206f6:	a80a      	add	r0, sp, #40	; 0x28
 80206f8:	f000 fffc 	bl	80216f4 <WIFI_GetIP_Address>
 80206fc:	4607      	mov	r7, r0
 80206fe:	2800      	cmp	r0, #0
 8020700:	d146      	bne.n	8020790 <main+0x1e0>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8020702:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8020706:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 802070a:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 802070e:	9300      	str	r3, [sp, #0]
 8020710:	484b      	ldr	r0, [pc, #300]	; (8020840 <main+0x290>)
 8020712:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8020716:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 802080c <main+0x25c>
 802071a:	f8df 9150 	ldr.w	r9, [pc, #336]	; 802086c <main+0x2bc>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 802071e:	f003 fa83 	bl	8023c28 <iprintf>
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 8020722:	f641 7342 	movw	r3, #8002	; 0x1f42
 8020726:	9301      	str	r3, [sp, #4]
 8020728:	78eb      	ldrb	r3, [r5, #3]
 802072a:	9300      	str	r3, [sp, #0]
 802072c:	78ab      	ldrb	r3, [r5, #2]
 802072e:	786a      	ldrb	r2, [r5, #1]
 8020730:	7829      	ldrb	r1, [r5, #0]
 8020732:	4844      	ldr	r0, [pc, #272]	; (8020844 <main+0x294>)
 8020734:	f003 fa78 	bl	8023c28 <iprintf>
        while (Trials--)
 8020738:	250b      	movs	r5, #11
 802073a:	3d01      	subs	r5, #1
 802073c:	b2ad      	uxth	r5, r5
 802073e:	b97d      	cbnz	r5, 8020760 <main+0x1b0>
          TERMOUT("> ERROR : Cannot open Connection\n");
 8020740:	4841      	ldr	r0, [pc, #260]	; (8020848 <main+0x298>)
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8020742:	f003 faf7 	bl	8023d34 <puts>
      BSP_LED_On(LED2);
 8020746:	2000      	movs	r0, #0
    BSP_LED_On(LED2);
 8020748:	f001 f852 	bl	80217f0 <BSP_LED_On>
  int32_t Socket = -1;
 802074c:	f04f 34ff 	mov.w	r4, #4294967295
 8020750:	e016      	b.n	8020780 <main+0x1d0>
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 8020752:	483e      	ldr	r0, [pc, #248]	; (802084c <main+0x29c>)
 8020754:	f003 faee 	bl	8023d34 <puts>
      BSP_LED_On(LED2);
 8020758:	4638      	mov	r0, r7
 802075a:	f001 f849 	bl	80217f0 <BSP_LED_On>
 802075e:	e7be      	b.n	80206de <main+0x12e>
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8020760:	f641 7342 	movw	r3, #8002	; 0x1f42
 8020764:	2100      	movs	r1, #0
 8020766:	9300      	str	r3, [sp, #0]
 8020768:	9701      	str	r7, [sp, #4]
 802076a:	4643      	mov	r3, r8
 802076c:	464a      	mov	r2, r9
 802076e:	4608      	mov	r0, r1
 8020770:	f000 ffd0 	bl	8021714 <WIFI_OpenClientConnection>
 8020774:	4604      	mov	r4, r0
 8020776:	2800      	cmp	r0, #0
 8020778:	d1df      	bne.n	802073a <main+0x18a>
            TERMOUT("> TCP Connection opened successfully.\n");
 802077a:	4835      	ldr	r0, [pc, #212]	; (8020850 <main+0x2a0>)
 802077c:	f003 fada 	bl	8023d34 <puts>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8020780:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8020860 <main+0x2b0>
          TERMOUT("Received: %s\n",RxData);
 8020784:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8020870 <main+0x2c0>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8020788:	f242 7710 	movw	r7, #10000	; 0x2710
    if(Socket != -1)
 802078c:	b14c      	cbz	r4, 80207a2 <main+0x1f2>
 802078e:	e7fe      	b.n	802078e <main+0x1de>
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 8020790:	4830      	ldr	r0, [pc, #192]	; (8020854 <main+0x2a4>)
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8020792:	f003 facf 	bl	8023d34 <puts>
    BSP_LED_On(LED2);
 8020796:	4620      	mov	r0, r4
 8020798:	e7d6      	b.n	8020748 <main+0x198>
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 802079a:	482f      	ldr	r0, [pc, #188]	; (8020858 <main+0x2a8>)
 802079c:	e7d1      	b.n	8020742 <main+0x192>
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 802079e:	482f      	ldr	r0, [pc, #188]	; (802085c <main+0x2ac>)
 80207a0:	e7f7      	b.n	8020792 <main+0x1e2>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 80207a2:	492f      	ldr	r1, [pc, #188]	; (8020860 <main+0x2b0>)
 80207a4:	9700      	str	r7, [sp, #0]
 80207a6:	f10d 0316 	add.w	r3, sp, #22
 80207aa:	f240 12f3 	movw	r2, #499	; 0x1f3
 80207ae:	2000      	movs	r0, #0
 80207b0:	f000 ffea 	bl	8021788 <WIFI_ReceiveData>
      if(ret == WIFI_STATUS_OK)
 80207b4:	4605      	mov	r5, r0
 80207b6:	b9d0      	cbnz	r0, 80207ee <main+0x23e>
        if(Datalen > 0)
 80207b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d0e5      	beq.n	802078c <main+0x1dc>
          RxData[Datalen]=0;
 80207c0:	f808 0003 	strb.w	r0, [r8, r3]
          TERMOUT("Received: %s\n",RxData);
 80207c4:	4641      	mov	r1, r8
 80207c6:	4648      	mov	r0, r9
 80207c8:	f003 fa2e 	bl	8023c28 <iprintf>
          ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 80207cc:	9700      	str	r7, [sp, #0]
 80207ce:	f10d 0316 	add.w	r3, sp, #22
 80207d2:	2210      	movs	r2, #16
 80207d4:	4631      	mov	r1, r6
 80207d6:	4628      	mov	r0, r5
 80207d8:	f000 ffc4 	bl	8021764 <WIFI_SendData>
          if (ret != WIFI_STATUS_OK)
 80207dc:	2800      	cmp	r0, #0
 80207de:	d0d3      	beq.n	8020788 <main+0x1d8>
            TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 80207e0:	4820      	ldr	r0, [pc, #128]	; (8020864 <main+0x2b4>)
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 80207e2:	f003 faa7 	bl	8023d34 <puts>
}
 80207e6:	2000      	movs	r0, #0
 80207e8:	b021      	add	sp, #132	; 0x84
 80207ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 80207ee:	481e      	ldr	r0, [pc, #120]	; (8020868 <main+0x2b8>)
 80207f0:	e7f7      	b.n	80207e2 <main+0x232>
 80207f2:	bf00      	nop
 80207f4:	e000ed00 	.word	0xe000ed00
 80207f8:	08020000 	.word	0x08020000
 80207fc:	08025589 	.word	0x08025589
 8020800:	20000c90 	.word	0x20000c90
 8020804:	40013800 	.word	0x40013800
 8020808:	200002bc 	.word	0x200002bc
 802080c:	20000000 	.word	0x20000000
 8020810:	080251e0 	.word	0x080251e0
 8020814:	080251ea 	.word	0x080251ea
 8020818:	0802522a 	.word	0x0802522a
 802081c:	08025244 	.word	0x08025244
 8020820:	08025282 	.word	0x08025282
 8020824:	080252ba 	.word	0x080252ba
 8020828:	080252f9 	.word	0x080252f9
 802082c:	0802530d 	.word	0x0802530d
 8020830:	08025355 	.word	0x08025355
 8020834:	08025370 	.word	0x08025370
 8020838:	200002db 	.word	0x200002db
 802083c:	080253c3 	.word	0x080253c3
 8020840:	080253df 	.word	0x080253df
 8020844:	0802540e 	.word	0x0802540e
 8020848:	08025472 	.word	0x08025472
 802084c:	080253a2 	.word	0x080253a2
 8020850:	0802544c 	.word	0x0802544c
 8020854:	08025493 	.word	0x08025493
 8020858:	080254c2 	.word	0x080254c2
 802085c:	080254e9 	.word	0x080254e9
 8020860:	200000a4 	.word	0x200000a4
 8020864:	08025524 	.word	0x08025524
 8020868:	08025555 	.word	0x08025555
 802086c:	08025441 	.word	0x08025441
 8020870:	08025516 	.word	0x08025516

08020874 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8020874:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8020876:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 802087a:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 802087c:	2201      	movs	r2, #1
 802087e:	a901      	add	r1, sp, #4
 8020880:	4803      	ldr	r0, [pc, #12]	; (8020890 <__io_putchar+0x1c>)
 8020882:	f003 f861 	bl	8023948 <HAL_UART_Transmit>

  return ch;
}
 8020886:	9801      	ldr	r0, [sp, #4]
 8020888:	b003      	add	sp, #12
 802088a:	f85d fb04 	ldr.w	pc, [sp], #4
 802088e:	bf00      	nop
 8020890:	20000c90 	.word	0x20000c90

08020894 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8020894:	2802      	cmp	r0, #2
 8020896:	d101      	bne.n	802089c <HAL_GPIO_EXTI_Callback+0x8>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8020898:	f000 bede 	b.w	8021658 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 802089c:	4770      	bx	lr
	...

080208a0 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 80208a0:	4801      	ldr	r0, [pc, #4]	; (80208a8 <SPI3_IRQHandler+0x8>)
 80208a2:	f002 bddf 	b.w	8023464 <HAL_SPI_IRQHandler>
 80208a6:	bf00      	nop
 80208a8:	2000032c 	.word	0x2000032c

080208ac <Potato_Load>:

	return save_ok;

}

save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 80208ac:	b530      	push	{r4, r5, lr}
 80208ae:	b09b      	sub	sp, #108	; 0x6c

	save_ret_t ret = 0;
	uint16_t crcval = 0;
	uint8_t temp[102] = {0,};
 80208b0:	2100      	movs	r1, #0
 80208b2:	2262      	movs	r2, #98	; 0x62
save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 80208b4:	4605      	mov	r5, r0
	uint8_t temp[102] = {0,};
 80208b6:	a801      	add	r0, sp, #4
 80208b8:	9100      	str	r1, [sp, #0]
 80208ba:	f003 f9ad 	bl	8023c18 <memset>
	//uint16_t saved_crcval = 0;
	//uint8_t *normal_crc_address = Potato_Flash_CRC_Address;
	//uint8_t *backup_crc_address = Potato_Flash_Backup_CRC_Address;

	memcpy(temp, Potato_Flash_Address,Potato_Data_Length_Bytes);
 80208be:	2266      	movs	r2, #102	; 0x66
 80208c0:	4910      	ldr	r1, [pc, #64]	; (8020904 <Potato_Load+0x58>)
 80208c2:	4668      	mov	r0, sp
 80208c4:	f003 f99a 	bl	8023bfc <memcpy>


	//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
	crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 80208c8:	2166      	movs	r1, #102	; 0x66
 80208ca:	4668      	mov	r0, sp
 80208cc:	f7ff fe54 	bl	8020578 <crcSlow>
	if(crcval == 0){
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 80208d0:	2266      	movs	r2, #102	; 0x66
	if(crcval == 0){
 80208d2:	4604      	mov	r4, r0
 80208d4:	b930      	cbnz	r0, 80208e4 <Potato_Load+0x38>
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 80208d6:	490b      	ldr	r1, [pc, #44]	; (8020904 <Potato_Load+0x58>)

		//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);

		if(crcval == 0){
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 80208d8:	4628      	mov	r0, r5
 80208da:	f003 f98f 	bl	8023bfc <memcpy>
			ret = save_ok;
			return ret;
 80208de:	4620      	mov	r0, r4
			ret = crc_error;
			return ret;
		}
	}

}
 80208e0:	b01b      	add	sp, #108	; 0x6c
 80208e2:	bd30      	pop	{r4, r5, pc}
		memcpy(temp, Potato_Flash_Backup_Address, Potato_Data_Length_Bytes);
 80208e4:	4908      	ldr	r1, [pc, #32]	; (8020908 <Potato_Load+0x5c>)
 80208e6:	4668      	mov	r0, sp
 80208e8:	f003 f988 	bl	8023bfc <memcpy>
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 80208ec:	2166      	movs	r1, #102	; 0x66
 80208ee:	4668      	mov	r0, sp
 80208f0:	f7ff fe42 	bl	8020578 <crcSlow>
		if(crcval == 0){
 80208f4:	4604      	mov	r4, r0
 80208f6:	b910      	cbnz	r0, 80208fe <Potato_Load+0x52>
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 80208f8:	4903      	ldr	r1, [pc, #12]	; (8020908 <Potato_Load+0x5c>)
 80208fa:	2266      	movs	r2, #102	; 0x66
 80208fc:	e7ec      	b.n	80208d8 <Potato_Load+0x2c>
			return ret;
 80208fe:	2006      	movs	r0, #6
 8020900:	e7ee      	b.n	80208e0 <Potato_Load+0x34>
 8020902:	bf00      	nop
 8020904:	0807f000 	.word	0x0807f000
 8020908:	0807f800 	.word	0x0807f800

0802090c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 802090c:	4770      	bx	lr

0802090e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 802090e:	e7fe      	b.n	802090e <HardFault_Handler>

08020910 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8020910:	e7fe      	b.n	8020910 <MemManage_Handler>

08020912 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8020912:	e7fe      	b.n	8020912 <BusFault_Handler>

08020914 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8020914:	e7fe      	b.n	8020914 <UsageFault_Handler>

08020916 <SVC_Handler>:
 8020916:	4770      	bx	lr

08020918 <DebugMon_Handler>:
 8020918:	4770      	bx	lr

0802091a <PendSV_Handler>:
 802091a:	4770      	bx	lr

0802091c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 802091c:	f001 b812 	b.w	8021944 <HAL_IncTick>

08020920 <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8020920:	2002      	movs	r0, #2
 8020922:	f001 b9ad 	b.w	8021c80 <HAL_GPIO_EXTI_IRQHandler>

08020926 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8020926:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8020928:	7803      	ldrb	r3, [r0, #0]
 802092a:	2b2d      	cmp	r3, #45	; 0x2d
 802092c:	d115      	bne.n	802095a <ParseNumber+0x34>
        minus = 1;
        ptr++;
 802092e:	3001      	adds	r0, #1
        minus = 1;
 8020930:	2501      	movs	r5, #1
 8020932:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 8020934:	462a      	mov	r2, r5
 8020936:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8020938:	270a      	movs	r7, #10
 802093a:	e003      	b.n	8020944 <ParseNumber+0x1e>
        ptr++;
        i++;
 802093c:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 802093e:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8020942:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8020944:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8020948:	3c30      	subs	r4, #48	; 0x30
 802094a:	b2e6      	uxtb	r6, r4
 802094c:	2e09      	cmp	r6, #9
 802094e:	d9f5      	bls.n	802093c <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8020950:	b101      	cbz	r1, 8020954 <ParseNumber+0x2e>
        *cnt = i;
 8020952:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8020954:	b105      	cbz	r5, 8020958 <ParseNumber+0x32>
        return 0 - sum;
 8020956:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8020958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 802095a:	2500      	movs	r5, #0
 802095c:	e7e9      	b.n	8020932 <ParseNumber+0xc>

0802095e <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 802095e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8020960:	2600      	movs	r6, #0

  while(* ptr) {
 8020962:	7803      	ldrb	r3, [r0, #0]
 8020964:	b903      	cbnz	r3, 8020968 <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8020966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 8020968:	2b3a      	cmp	r3, #58	; 0x3a
 802096a:	d128      	bne.n	80209be <ParseMAC+0x60>
    hexcnt = 1;
 802096c:	f04f 0c01 	mov.w	ip, #1
    ptr = ptr + hexcnt;
 8020970:	4460      	add	r0, ip
 8020972:	e7f6      	b.n	8020962 <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8020974:	2a09      	cmp	r2, #9
        sum <<= 4;
 8020976:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 802097a:	d905      	bls.n	8020988 <ParseMAC+0x2a>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 802097c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8020980:	2a05      	cmp	r2, #5
 8020982:	d814      	bhi.n	80209ae <ParseMAC+0x50>
        return (a - 'a') + 10;
 8020984:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 8020986:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 8020988:	4414      	add	r4, r2
        i++;
 802098a:	3501      	adds	r5, #1
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 802098c:	5d43      	ldrb	r3, [r0, r5]
 802098e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8020992:	b2d2      	uxtb	r2, r2
 8020994:	2a09      	cmp	r2, #9
 8020996:	fa5f fc85 	uxtb.w	ip, r5
 802099a:	d9eb      	bls.n	8020974 <ParseMAC+0x16>
 802099c:	f023 0720 	bic.w	r7, r3, #32
 80209a0:	3f41      	subs	r7, #65	; 0x41
 80209a2:	2f05      	cmp	r7, #5
 80209a4:	d9e6      	bls.n	8020974 <ParseMAC+0x16>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80209a6:	1c73      	adds	r3, r6, #1
 80209a8:	558c      	strb	r4, [r1, r6]
 80209aa:	b2de      	uxtb	r6, r3
 80209ac:	e7e0      	b.n	8020970 <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80209ae:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80209b2:	2a05      	cmp	r2, #5
 80209b4:	d801      	bhi.n	80209ba <ParseMAC+0x5c>
        return (a - 'A') + 10;
 80209b6:	3b37      	subs	r3, #55	; 0x37
 80209b8:	e7e5      	b.n	8020986 <ParseMAC+0x28>
    return 0;
 80209ba:	2200      	movs	r2, #0
 80209bc:	e7e4      	b.n	8020988 <ParseMAC+0x2a>
 80209be:	2500      	movs	r5, #0
    uint32_t sum = 0;
 80209c0:	462c      	mov	r4, r5
 80209c2:	e7e3      	b.n	802098c <ParseMAC+0x2e>

080209c4 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80209c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80209c6:	4604      	mov	r4, r0
 80209c8:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 80209ca:	2500      	movs	r5, #0

  while(* ptr) {
    hexcnt = 1;
 80209cc:	2701      	movs	r7, #1
  while(* ptr) {
 80209ce:	7823      	ldrb	r3, [r4, #0]
 80209d0:	b90b      	cbnz	r3, 80209d6 <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 80209d2:	b003      	add	sp, #12
 80209d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 80209d6:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 80209d8:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 80209dc:	d007      	beq.n	80209ee <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 80209de:	f10d 0107 	add.w	r1, sp, #7
 80209e2:	4620      	mov	r0, r4
 80209e4:	f7ff ff9f 	bl	8020926 <ParseNumber>
 80209e8:	1c6b      	adds	r3, r5, #1
 80209ea:	5570      	strb	r0, [r6, r5]
 80209ec:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 80209ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80209f2:	441c      	add	r4, r3
 80209f4:	e7eb      	b.n	80209ce <ParseIP+0xa>
	...

080209f8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80209f8:	b570      	push	{r4, r5, r6, lr}
 80209fa:	4604      	mov	r4, r0
  int ret = 0;
  int16_t recv_len = 0;
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 80209fc:	4608      	mov	r0, r1
{
 80209fe:	460e      	mov	r6, r1
 8020a00:	4615      	mov	r5, r2
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8020a02:	f7ff fbe5 	bl	80201d0 <strlen>
 8020a06:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8020a0a:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8020a0e:	b281      	uxth	r1, r0
 8020a10:	4630      	mov	r0, r6
 8020a12:	4798      	blx	r3

  if( ret > 0)
 8020a14:	2800      	cmp	r0, #0
 8020a16:	dd24      	ble.n	8020a62 <AT_ExecuteCommand+0x6a>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8020a18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8020a1c:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8020a20:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8020a24:	4628      	mov	r0, r5
 8020a26:	4798      	blx	r3
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8020a28:	1e43      	subs	r3, r0, #1
 8020a2a:	b29b      	uxth	r3, r3
 8020a2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8020a30:	d211      	bcs.n	8020a56 <AT_ExecuteCommand+0x5e>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8020a32:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8020a36:	bf08      	it	eq
 8020a38:	b218      	sxtheq	r0, r3
      }
      *(pdata + recv_len) = 0;
 8020a3a:	2400      	movs	r4, #0
 8020a3c:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8020a3e:	490a      	ldr	r1, [pc, #40]	; (8020a68 <AT_ExecuteCommand+0x70>)
 8020a40:	4628      	mov	r0, r5
 8020a42:	f003 f9ba 	bl	8023dba <strstr>
 8020a46:	b950      	cbnz	r0, 8020a5e <AT_ExecuteCommand+0x66>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8020a48:	4908      	ldr	r1, [pc, #32]	; (8020a6c <AT_ExecuteCommand+0x74>)
 8020a4a:	4628      	mov	r0, r5
 8020a4c:	f003 f9b5 	bl	8023dba <strstr>
 8020a50:	b138      	cbz	r0, 8020a62 <AT_ExecuteCommand+0x6a>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8020a52:	2005      	movs	r0, #5
 8020a54:	e002      	b.n	8020a5c <AT_ExecuteCommand+0x64>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8020a56:	3004      	adds	r0, #4
 8020a58:	d103      	bne.n	8020a62 <AT_ExecuteCommand+0x6a>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8020a5a:	2006      	movs	r0, #6
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
}
 8020a5c:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 8020a5e:	4620      	mov	r0, r4
 8020a60:	e7fc      	b.n	8020a5c <AT_ExecuteCommand+0x64>
  return ES_WIFI_STATUS_IO_ERROR;
 8020a62:	2004      	movs	r0, #4
 8020a64:	e7fa      	b.n	8020a5c <AT_ExecuteCommand+0x64>
 8020a66:	bf00      	nop
 8020a68:	08025599 	.word	0x08025599
 8020a6c:	080255a2 	.word	0x080255a2

08020a70 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8020a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020a74:	4680      	mov	r8, r0
  int len;
  uint8_t *p=Obj->CmdData;

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8020a76:	4608      	mov	r0, r1
{
 8020a78:	4689      	mov	r9, r1
 8020a7a:	4615      	mov	r5, r2
 8020a7c:	461f      	mov	r7, r3
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8020a7e:	f7ff fba7 	bl	80201d0 <strlen>
 8020a82:	f8d8 3120 	ldr.w	r3, [r8, #288]	; 0x120
 8020a86:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
{
 8020a8a:	9e08      	ldr	r6, [sp, #32]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8020a8c:	b281      	uxth	r1, r0
 8020a8e:	4648      	mov	r0, r9
 8020a90:	4798      	blx	r3
 8020a92:	2800      	cmp	r0, #0
 8020a94:	dc02      	bgt.n	8020a9c <AT_RequestReceiveData+0x2c>
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8020a96:	2004      	movs	r0, #4
}
 8020a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8020a9c:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
 8020aa0:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
 8020aa4:	2100      	movs	r1, #0
 8020aa6:	f508 7094 	add.w	r0, r8, #296	; 0x128
 8020aaa:	4798      	blx	r3
    if ((p[0]!='\r') || (p[1]!='\n'))
 8020aac:	f898 3128 	ldrb.w	r3, [r8, #296]	; 0x128
 8020ab0:	2b0d      	cmp	r3, #13
 8020ab2:	d1f0      	bne.n	8020a96 <AT_RequestReceiveData+0x26>
 8020ab4:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 8020ab8:	2b0a      	cmp	r3, #10
 8020aba:	d1ec      	bne.n	8020a96 <AT_RequestReceiveData+0x26>
    len-=2;
 8020abc:	1e81      	subs	r1, r0, #2
    if (len >= AT_OK_STRING_LEN)
 8020abe:	2907      	cmp	r1, #7
 8020ac0:	d9e9      	bls.n	8020a96 <AT_RequestReceiveData+0x26>
    p+=2;
 8020ac2:	f508 7995 	add.w	r9, r8, #298	; 0x12a
     while(len && (p[len-1]==0x15)) len--;
 8020ac6:	f208 1829 	addw	r8, r8, #297	; 0x129
 8020aca:	b119      	cbz	r1, 8020ad4 <AT_RequestReceiveData+0x64>
 8020acc:	f818 3001 	ldrb.w	r3, [r8, r1]
 8020ad0:	2b15      	cmp	r3, #21
 8020ad2:	d017      	beq.n	8020b04 <AT_RequestReceiveData+0x94>
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8020ad4:	f1a1 0408 	sub.w	r4, r1, #8
     p[len] = '\0';
 8020ad8:	f04f 0800 	mov.w	r8, #0
 8020adc:	f809 8001 	strb.w	r8, [r9, r1]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8020ae0:	eb09 0004 	add.w	r0, r9, r4
 8020ae4:	490a      	ldr	r1, [pc, #40]	; (8020b10 <AT_RequestReceiveData+0xa0>)
 8020ae6:	f003 f968 	bl	8023dba <strstr>
 8020aea:	b168      	cbz	r0, 8020b08 <AT_RequestReceiveData+0x98>
	   if (*ReadData > Reqlen)
 8020aec:	b2a4      	uxth	r4, r4
 8020aee:	42bc      	cmp	r4, r7
 8020af0:	4622      	mov	r2, r4
 8020af2:	bf28      	it	cs
 8020af4:	463a      	movcs	r2, r7
 8020af6:	8032      	strh	r2, [r6, #0]
       memcpy(pdata, p, *ReadData);
 8020af8:	4649      	mov	r1, r9
 8020afa:	4628      	mov	r0, r5
 8020afc:	f003 f87e 	bl	8023bfc <memcpy>
       return ES_WIFI_STATUS_OK;
 8020b00:	4640      	mov	r0, r8
 8020b02:	e7c9      	b.n	8020a98 <AT_RequestReceiveData+0x28>
     while(len && (p[len-1]==0x15)) len--;
 8020b04:	3901      	subs	r1, #1
 8020b06:	e7e0      	b.n	8020aca <AT_RequestReceiveData+0x5a>
       *ReadData = 0;
 8020b08:	8030      	strh	r0, [r6, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8020b0a:	2005      	movs	r0, #5
 8020b0c:	e7c4      	b.n	8020a98 <AT_RequestReceiveData+0x28>
 8020b0e:	bf00      	nop
 8020b10:	08025599 	.word	0x08025599

08020b14 <AT_RequestSendData>:
{
 8020b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b18:	4605      	mov	r5, r0
  cmd_len = strlen((char*)cmd);
 8020b1a:	4608      	mov	r0, r1
{
 8020b1c:	4688      	mov	r8, r1
 8020b1e:	4691      	mov	r9, r2
 8020b20:	461f      	mov	r7, r3
  cmd_len = strlen((char*)cmd);
 8020b22:	f7ff fb55 	bl	80201d0 <strlen>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8020b26:	f010 0401 	ands.w	r4, r0, #1
{
 8020b2a:	9e08      	ldr	r6, [sp, #32]
  cmd_len = strlen((char*)cmd);
 8020b2c:	fa1f fa80 	uxth.w	sl, r0
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8020b30:	d126      	bne.n	8020b80 <AT_RequestSendData+0x6c>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8020b32:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8020b36:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8020b3a:	4651      	mov	r1, sl
 8020b3c:	4640      	mov	r0, r8
 8020b3e:	4798      	blx	r3
  if (n == cmd_len)
 8020b40:	b280      	uxth	r0, r0
 8020b42:	4582      	cmp	sl, r0
 8020b44:	d123      	bne.n	8020b8e <AT_RequestSendData+0x7a>
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8020b46:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8020b4a:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8020b4e:	4639      	mov	r1, r7
 8020b50:	4648      	mov	r0, r9
 8020b52:	4798      	blx	r3
    if (send_len == len)
 8020b54:	42b8      	cmp	r0, r7
 8020b56:	d113      	bne.n	8020b80 <AT_RequestSendData+0x6c>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8020b58:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8020b5c:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8020b60:	4621      	mov	r1, r4
 8020b62:	4630      	mov	r0, r6
 8020b64:	4798      	blx	r3
      if (recv_len > 0)
 8020b66:	2800      	cmp	r0, #0
 8020b68:	dd0d      	ble.n	8020b86 <AT_RequestSendData+0x72>
        *(pdata+recv_len) = 0;
 8020b6a:	5434      	strb	r4, [r6, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8020b6c:	490b      	ldr	r1, [pc, #44]	; (8020b9c <AT_RequestSendData+0x88>)
 8020b6e:	4630      	mov	r0, r6
 8020b70:	f003 f923 	bl	8023dba <strstr>
 8020b74:	b968      	cbnz	r0, 8020b92 <AT_RequestSendData+0x7e>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8020b76:	490a      	ldr	r1, [pc, #40]	; (8020ba0 <AT_RequestSendData+0x8c>)
 8020b78:	4630      	mov	r0, r6
 8020b7a:	f003 f91e 	bl	8023dba <strstr>
 8020b7e:	b950      	cbnz	r0, 8020b96 <AT_RequestSendData+0x82>
          return ES_WIFI_STATUS_ERROR;
 8020b80:	2002      	movs	r0, #2
}
 8020b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8020b86:	3004      	adds	r0, #4
 8020b88:	d1fa      	bne.n	8020b80 <AT_RequestSendData+0x6c>
        return ES_WIFI_STATUS_MODULE_CRASH;
 8020b8a:	2006      	movs	r0, #6
 8020b8c:	e7f9      	b.n	8020b82 <AT_RequestSendData+0x6e>
  return ES_WIFI_STATUS_IO_ERROR;
 8020b8e:	2004      	movs	r0, #4
 8020b90:	e7f7      	b.n	8020b82 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 8020b92:	4620      	mov	r0, r4
 8020b94:	e7f5      	b.n	8020b82 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8020b96:	2005      	movs	r0, #5
 8020b98:	e7f3      	b.n	8020b82 <AT_RequestSendData+0x6e>
 8020b9a:	bf00      	nop
 8020b9c:	08025599 	.word	0x08025599
 8020ba0:	080255a2 	.word	0x080255a2

08020ba4 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8020ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8020ba8:	f247 5330 	movw	r3, #30000	; 0x7530
 8020bac:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8
{
 8020bb0:	4604      	mov	r4, r0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8020bb2:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8020bb6:	2000      	movs	r0, #0
 8020bb8:	4798      	blx	r3
 8020bba:	2800      	cmp	r0, #0
 8020bbc:	d14b      	bne.n	8020c56 <ES_WIFI_Init+0xb2>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8020bbe:	4927      	ldr	r1, [pc, #156]	; (8020c5c <ES_WIFI_Init+0xb8>)
 8020bc0:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8020bc4:	4620      	mov	r0, r4
 8020bc6:	f7ff ff17 	bl	80209f8 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8020bca:	4605      	mov	r5, r0
 8020bcc:	b960      	cbnz	r0, 8020be8 <ES_WIFI_Init+0x44>
  ptr = strtok((char *)pdata + 2, ",");
 8020bce:	4924      	ldr	r1, [pc, #144]	; (8020c60 <ES_WIFI_Init+0xbc>)
      ptr = strtok(ptr, "\r");
 8020bd0:	4f24      	ldr	r7, [pc, #144]	; (8020c64 <ES_WIFI_Init+0xc0>)
    ptr = strtok(NULL, ",");
 8020bd2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020c60 <ES_WIFI_Init+0xbc>
  ptr = strtok((char *)pdata + 2, ",");
 8020bd6:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8020bda:	f003 f905 	bl	8023de8 <strtok>
  while (ptr != NULL){
 8020bde:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8020be0:	f104 0868 	add.w	r8, r4, #104	; 0x68
 8020be4:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8020be6:	b910      	cbnz	r0, 8020bee <ES_WIFI_Init+0x4a>
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8020be8:	4628      	mov	r0, r5
 8020bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8020bee:	2b06      	cmp	r3, #6
 8020bf0:	d824      	bhi.n	8020c3c <ES_WIFI_Init+0x98>
 8020bf2:	e8df f003 	tbb	[pc, r3]
 8020bf6:	0a04      	.short	0x0a04
 8020bf8:	1e19140f 	.word	0x1e19140f
 8020bfc:	29          	.byte	0x29
 8020bfd:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8020bfe:	4601      	mov	r1, r0
 8020c00:	2220      	movs	r2, #32
 8020c02:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8020c04:	f003 f8c6 	bl	8023d94 <strncpy>
      break;
 8020c08:	e018      	b.n	8020c3c <ES_WIFI_Init+0x98>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8020c0a:	4601      	mov	r1, r0
 8020c0c:	2218      	movs	r2, #24
 8020c0e:	f104 0020 	add.w	r0, r4, #32
 8020c12:	e7f7      	b.n	8020c04 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8020c14:	4601      	mov	r1, r0
 8020c16:	2210      	movs	r2, #16
 8020c18:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8020c1c:	e7f2      	b.n	8020c04 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8020c1e:	4601      	mov	r1, r0
 8020c20:	2210      	movs	r2, #16
 8020c22:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8020c26:	e7ed      	b.n	8020c04 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8020c28:	4601      	mov	r1, r0
 8020c2a:	2210      	movs	r2, #16
 8020c2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020c30:	e7e8      	b.n	8020c04 <ES_WIFI_Init+0x60>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8020c32:	2100      	movs	r1, #0
 8020c34:	f7ff fe77 	bl	8020926 <ParseNumber>
 8020c38:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ptr = strtok(NULL, ",");
 8020c3c:	4649      	mov	r1, r9
 8020c3e:	2000      	movs	r0, #0
 8020c40:	f003 f8d2 	bl	8023de8 <strtok>
 8020c44:	3601      	adds	r6, #1
 8020c46:	e7cd      	b.n	8020be4 <ES_WIFI_Init+0x40>
      ptr = strtok(ptr, "\r");
 8020c48:	4639      	mov	r1, r7
 8020c4a:	f003 f8cd 	bl	8023de8 <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8020c4e:	2220      	movs	r2, #32
      ptr = strtok(ptr, "\r");
 8020c50:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8020c52:	4640      	mov	r0, r8
 8020c54:	e7d6      	b.n	8020c04 <ES_WIFI_Init+0x60>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8020c56:	2502      	movs	r5, #2
 8020c58:	e7c6      	b.n	8020be8 <ES_WIFI_Init+0x44>
 8020c5a:	bf00      	nop
 8020c5c:	080255ca 	.word	0x080255ca
 8020c60:	080257ad 	.word	0x080257ad
 8020c64:	08025695 	.word	0x08025695

08020c68 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8020c68:	b530      	push	{r4, r5, lr}
 8020c6a:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8020c6e:	b158      	cbz	r0, 8020c88 <ES_WIFI_RegisterBusIO+0x20>
 8020c70:	b151      	cbz	r1, 8020c88 <ES_WIFI_RegisterBusIO+0x20>
 8020c72:	b14a      	cbz	r2, 8020c88 <ES_WIFI_RegisterBusIO+0x20>
 8020c74:	b145      	cbz	r5, 8020c88 <ES_WIFI_RegisterBusIO+0x20>
 8020c76:	b13c      	cbz	r4, 8020c88 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 8020c78:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 8020c7c:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8020c80:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8020c84:	2000      	movs	r0, #0
}
 8020c86:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8020c88:	2002      	movs	r0, #2
 8020c8a:	e7fc      	b.n	8020c86 <ES_WIFI_RegisterBusIO+0x1e>

08020c8c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8020c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8020c8e:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 8020c92:	4605      	mov	r5, r0
 8020c94:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8020c96:	4620      	mov	r0, r4
 8020c98:	460a      	mov	r2, r1
 8020c9a:	4918      	ldr	r1, [pc, #96]	; (8020cfc <ES_WIFI_Connect+0x70>)
{
 8020c9c:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8020c9e:	f003 f851 	bl	8023d44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020ca2:	4622      	mov	r2, r4
 8020ca4:	4621      	mov	r1, r4
 8020ca6:	4628      	mov	r0, r5
 8020ca8:	f7ff fea6 	bl	80209f8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8020cac:	bb20      	cbnz	r0, 8020cf8 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8020cae:	4914      	ldr	r1, [pc, #80]	; (8020d00 <ES_WIFI_Connect+0x74>)
 8020cb0:	463a      	mov	r2, r7
 8020cb2:	4620      	mov	r0, r4
 8020cb4:	f003 f846 	bl	8023d44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020cb8:	4622      	mov	r2, r4
 8020cba:	4621      	mov	r1, r4
 8020cbc:	4628      	mov	r0, r5
 8020cbe:	f7ff fe9b 	bl	80209f8 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8020cc2:	b9c8      	cbnz	r0, 8020cf8 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8020cc4:	490f      	ldr	r1, [pc, #60]	; (8020d04 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8020cc6:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8020cca:	4632      	mov	r2, r6
 8020ccc:	4620      	mov	r0, r4
 8020cce:	f003 f839 	bl	8023d44 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020cd2:	4622      	mov	r2, r4
 8020cd4:	4621      	mov	r1, r4
 8020cd6:	4628      	mov	r0, r5
 8020cd8:	f7ff fe8e 	bl	80209f8 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 8020cdc:	b960      	cbnz	r0, 8020cf8 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8020cde:	490a      	ldr	r1, [pc, #40]	; (8020d08 <ES_WIFI_Connect+0x7c>)
 8020ce0:	4620      	mov	r0, r4
 8020ce2:	f003 f84f 	bl	8023d84 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020ce6:	4622      	mov	r2, r4
 8020ce8:	4621      	mov	r1, r4
 8020cea:	4628      	mov	r0, r5
 8020cec:	f7ff fe84 	bl	80209f8 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8020cf0:	b910      	cbnz	r0, 8020cf8 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8020cf2:	2301      	movs	r3, #1
 8020cf4:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8020cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020cfa:	bf00      	nop
 8020cfc:	080255dd 	.word	0x080255dd
 8020d00:	080255e4 	.word	0x080255e4
 8020d04:	080255eb 	.word	0x080255eb
 8020d08:	080255f2 	.word	0x080255f2

08020d0c <ES_WIFI_IsConnected>:
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8020d0c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8020d10:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"CS\r");
 8020d12:	490b      	ldr	r1, [pc, #44]	; (8020d40 <ES_WIFI_IsConnected+0x34>)
{
 8020d14:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"CS\r");
 8020d16:	4610      	mov	r0, r2
 8020d18:	f003 f834 	bl	8023d84 <strcpy>
 8020d1c:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020d1e:	4601      	mov	r1, r0
 8020d20:	4620      	mov	r0, r4
 8020d22:	f7ff fe69 	bl	80209f8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8020d26:	b938      	cbnz	r0, 8020d38 <ES_WIFI_IsConnected+0x2c>
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8020d28:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8020d2c:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8020d30:	4253      	negs	r3, r2
 8020d32:	4153      	adcs	r3, r2
 8020d34:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8020d38:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8020d3c:	bd10      	pop	{r4, pc}
 8020d3e:	bf00      	nop
 8020d40:	080255f6 	.word	0x080255f6

08020d44 <ES_WIFI_GetNetworkSettings>:
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8020d44:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8020d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8020d4c:	4935      	ldr	r1, [pc, #212]	; (8020e24 <ES_WIFI_GetNetworkSettings+0xe0>)
{
 8020d4e:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8020d50:	4610      	mov	r0, r2
 8020d52:	f003 f817 	bl	8023d84 <strcpy>
 8020d56:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020d58:	4601      	mov	r1, r0
 8020d5a:	4620      	mov	r0, r4
 8020d5c:	f7ff fe4c 	bl	80209f8 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8020d60:	4606      	mov	r6, r0
 8020d62:	b960      	cbnz	r0, 8020d7e <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8020d64:	4930      	ldr	r1, [pc, #192]	; (8020e28 <ES_WIFI_GetNetworkSettings+0xe4>)
    ptr = strtok(NULL, ",");
 8020d66:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8020e28 <ES_WIFI_GetNetworkSettings+0xe4>
  ptr = strtok(pdata + 2, ",");
 8020d6a:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8020d6e:	f003 f83b 	bl	8023de8 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8020d72:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 8020d76:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2);
 8020d78:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 8020d7c:	b910      	cbnz	r0, 8020d84 <ES_WIFI_GetNetworkSettings+0x40>
  }

  UNLOCK_WIFI();
  return ret;
}
 8020d7e:	4630      	mov	r0, r6
 8020d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8020d84:	2d0b      	cmp	r5, #11
 8020d86:	d80c      	bhi.n	8020da2 <ES_WIFI_GetNetworkSettings+0x5e>
 8020d88:	e8df f005 	tbb	[pc, r5]
 8020d8c:	241e1906 	.word	0x241e1906
 8020d90:	3835302a 	.word	0x3835302a
 8020d94:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8020d98:	4601      	mov	r1, r0
 8020d9a:	2221      	movs	r2, #33	; 0x21
 8020d9c:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8020d9e:	f002 fff9 	bl	8023d94 <strncpy>
    ptr = strtok(NULL, ",");
 8020da2:	4649      	mov	r1, r9
 8020da4:	2000      	movs	r0, #0
 8020da6:	f003 f81f 	bl	8023de8 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8020daa:	2800      	cmp	r0, #0
 8020dac:	d0e7      	beq.n	8020d7e <ES_WIFI_GetNetworkSettings+0x3a>
 8020dae:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8020db2:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8020db4:	bf14      	ite	ne
 8020db6:	3501      	addne	r5, #1
      num++;
 8020db8:	3502      	addeq	r5, #2
 8020dba:	b2ed      	uxtb	r5, r5
 8020dbc:	e7de      	b.n	8020d7c <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8020dbe:	4601      	mov	r1, r0
 8020dc0:	2221      	movs	r2, #33	; 0x21
 8020dc2:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 8020dc6:	e7ea      	b.n	8020d9e <ES_WIFI_GetNetworkSettings+0x5a>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8020dc8:	2100      	movs	r1, #0
 8020dca:	f7ff fdac 	bl	8020926 <ParseNumber>
 8020dce:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 8020dd2:	e7e6      	b.n	8020da2 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8020dd4:	2100      	movs	r1, #0
 8020dd6:	f7ff fda6 	bl	8020926 <ParseNumber>
 8020dda:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 8020dde:	e7e0      	b.n	8020da2 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8020de0:	2100      	movs	r1, #0
 8020de2:	f7ff fda0 	bl	8020926 <ParseNumber>
 8020de6:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 8020dea:	e7da      	b.n	8020da2 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Addr);
 8020dec:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask);
 8020df0:	f7ff fde8 	bl	80209c4 <ParseIP>
      break;
 8020df4:	e7d5      	b.n	8020da2 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Mask);
 8020df6:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8020dfa:	e7f9      	b.n	8020df0 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8020dfc:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 8020e00:	e7f6      	b.n	8020df0 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS1);
 8020e02:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 8020e06:	e7f3      	b.n	8020df0 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS2);
 8020e08:	4641      	mov	r1, r8
 8020e0a:	e7f1      	b.n	8020df0 <ES_WIFI_GetNetworkSettings+0xac>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8020e0c:	2100      	movs	r1, #0
 8020e0e:	f7ff fd8a 	bl	8020926 <ParseNumber>
 8020e12:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 8020e16:	e7c4      	b.n	8020da2 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8020e18:	2100      	movs	r1, #0
 8020e1a:	f7ff fd84 	bl	8020926 <ParseNumber>
 8020e1e:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 8020e22:	e7be      	b.n	8020da2 <ES_WIFI_GetNetworkSettings+0x5e>
 8020e24:	080255fe 	.word	0x080255fe
 8020e28:	080257ad 	.word	0x080257ad

08020e2c <ES_WIFI_GetMACAddress>:
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8020e2c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8020e30:	b570      	push	{r4, r5, r6, lr}
 8020e32:	4604      	mov	r4, r0
 8020e34:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 8020e36:	4610      	mov	r0, r2
 8020e38:	4909      	ldr	r1, [pc, #36]	; (8020e60 <ES_WIFI_GetMACAddress+0x34>)
 8020e3a:	f002 ffa3 	bl	8023d84 <strcpy>
 8020e3e:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020e40:	4601      	mov	r1, r0
 8020e42:	4620      	mov	r0, r4
 8020e44:	f7ff fdd8 	bl	80209f8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8020e48:	4605      	mov	r5, r0
 8020e4a:	b938      	cbnz	r0, 8020e5c <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8020e4c:	4905      	ldr	r1, [pc, #20]	; (8020e64 <ES_WIFI_GetMACAddress+0x38>)
 8020e4e:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8020e52:	f002 ffc9 	bl	8023de8 <strtok>
    ParseMAC(ptr, mac) ;
 8020e56:	4631      	mov	r1, r6
 8020e58:	f7ff fd81 	bl	802095e <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
}
 8020e5c:	4628      	mov	r0, r5
 8020e5e:	bd70      	pop	{r4, r5, r6, pc}
 8020e60:	0802563f 	.word	0x0802563f
 8020e64:	0802586c 	.word	0x0802586c

08020e68 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8020e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8020e6a:	780b      	ldrb	r3, [r1, #0]
{
 8020e6c:	4605      	mov	r5, r0
 8020e6e:	460e      	mov	r6, r1
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8020e70:	b10b      	cbz	r3, 8020e76 <ES_WIFI_StartClientConnection+0xe>
 8020e72:	2b03      	cmp	r3, #3
 8020e74:	d102      	bne.n	8020e7c <ES_WIFI_StartClientConnection+0x14>
 8020e76:	8873      	ldrh	r3, [r6, #2]
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	d064      	beq.n	8020f46 <ES_WIFI_StartClientConnection+0xde>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8020e7c:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8020e80:	7872      	ldrb	r2, [r6, #1]
 8020e82:	4932      	ldr	r1, [pc, #200]	; (8020f4c <ES_WIFI_StartClientConnection+0xe4>)
 8020e84:	4620      	mov	r0, r4
 8020e86:	f002 ff5d 	bl	8023d44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020e8a:	4622      	mov	r2, r4
 8020e8c:	4621      	mov	r1, r4
 8020e8e:	4628      	mov	r0, r5
 8020e90:	f7ff fdb2 	bl	80209f8 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8020e94:	2800      	cmp	r0, #0
 8020e96:	d146      	bne.n	8020f26 <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8020e98:	7832      	ldrb	r2, [r6, #0]
 8020e9a:	492d      	ldr	r1, [pc, #180]	; (8020f50 <ES_WIFI_StartClientConnection+0xe8>)
 8020e9c:	4620      	mov	r0, r4
 8020e9e:	f002 ff51 	bl	8023d44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020ea2:	4622      	mov	r2, r4
 8020ea4:	4621      	mov	r1, r4
 8020ea6:	4628      	mov	r0, r5
 8020ea8:	f7ff fda6 	bl	80209f8 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8020eac:	2800      	cmp	r0, #0
 8020eae:	d13a      	bne.n	8020f26 <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8020eb0:	88b2      	ldrh	r2, [r6, #4]
 8020eb2:	4928      	ldr	r1, [pc, #160]	; (8020f54 <ES_WIFI_StartClientConnection+0xec>)
 8020eb4:	4620      	mov	r0, r4
 8020eb6:	f002 ff45 	bl	8023d44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020eba:	4622      	mov	r2, r4
 8020ebc:	4621      	mov	r1, r4
 8020ebe:	4628      	mov	r0, r5
 8020ec0:	f7ff fd9a 	bl	80209f8 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8020ec4:	bb78      	cbnz	r0, 8020f26 <ES_WIFI_StartClientConnection+0xbe>
 8020ec6:	7833      	ldrb	r3, [r6, #0]
 8020ec8:	b30b      	cbz	r3, 8020f0e <ES_WIFI_StartClientConnection+0xa6>
 8020eca:	2b03      	cmp	r3, #3
 8020ecc:	d01f      	beq.n	8020f0e <ES_WIFI_StartClientConnection+0xa6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8020ece:	7833      	ldrb	r3, [r6, #0]
 8020ed0:	bb5b      	cbnz	r3, 8020f2a <ES_WIFI_StartClientConnection+0xc2>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8020ed2:	7a73      	ldrb	r3, [r6, #9]
 8020ed4:	9301      	str	r3, [sp, #4]
 8020ed6:	7a33      	ldrb	r3, [r6, #8]
 8020ed8:	79b2      	ldrb	r2, [r6, #6]
 8020eda:	491f      	ldr	r1, [pc, #124]	; (8020f58 <ES_WIFI_StartClientConnection+0xf0>)
 8020edc:	9300      	str	r3, [sp, #0]
 8020ede:	4620      	mov	r0, r4
 8020ee0:	79f3      	ldrb	r3, [r6, #7]
 8020ee2:	f002 ff2f 	bl	8023d44 <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020ee6:	4622      	mov	r2, r4
 8020ee8:	4621      	mov	r1, r4
 8020eea:	4628      	mov	r0, r5
 8020eec:	f7ff fd84 	bl	80209f8 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8020ef0:	b9c8      	cbnz	r0, 8020f26 <ES_WIFI_StartClientConnection+0xbe>
 8020ef2:	7833      	ldrb	r3, [r6, #0]
 8020ef4:	2b03      	cmp	r3, #3
 8020ef6:	d11a      	bne.n	8020f2e <ES_WIFI_StartClientConnection+0xc6>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8020ef8:	4918      	ldr	r1, [pc, #96]	; (8020f5c <ES_WIFI_StartClientConnection+0xf4>)
 8020efa:	4620      	mov	r0, r4
 8020efc:	f002 ff42 	bl	8023d84 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020f00:	4622      	mov	r2, r4
 8020f02:	4621      	mov	r1, r4
 8020f04:	4628      	mov	r0, r5
 8020f06:	f7ff fd77 	bl	80209f8 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8020f0a:	b180      	cbz	r0, 8020f2e <ES_WIFI_StartClientConnection+0xc6>
 8020f0c:	e00b      	b.n	8020f26 <ES_WIFI_StartClientConnection+0xbe>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8020f0e:	8872      	ldrh	r2, [r6, #2]
 8020f10:	4913      	ldr	r1, [pc, #76]	; (8020f60 <ES_WIFI_StartClientConnection+0xf8>)
 8020f12:	4620      	mov	r0, r4
 8020f14:	f002 ff16 	bl	8023d44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020f18:	4622      	mov	r2, r4
 8020f1a:	4621      	mov	r1, r4
 8020f1c:	4628      	mov	r0, r5
 8020f1e:	f7ff fd6b 	bl	80209f8 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8020f22:	2800      	cmp	r0, #0
 8020f24:	d0d3      	beq.n	8020ece <ES_WIFI_StartClientConnection+0x66>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8020f26:	b002      	add	sp, #8
 8020f28:	bd70      	pop	{r4, r5, r6, pc}
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8020f2a:	2b03      	cmp	r3, #3
 8020f2c:	d0d1      	beq.n	8020ed2 <ES_WIFI_StartClientConnection+0x6a>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8020f2e:	490d      	ldr	r1, [pc, #52]	; (8020f64 <ES_WIFI_StartClientConnection+0xfc>)
 8020f30:	4620      	mov	r0, r4
 8020f32:	f002 ff27 	bl	8023d84 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020f36:	4622      	mov	r2, r4
 8020f38:	4621      	mov	r1, r4
 8020f3a:	4628      	mov	r0, r5
}
 8020f3c:	b002      	add	sp, #8
 8020f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020f42:	f7ff bd59 	b.w	80209f8 <AT_ExecuteCommand>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8020f46:	2002      	movs	r0, #2
 8020f48:	e7ed      	b.n	8020f26 <ES_WIFI_StartClientConnection+0xbe>
 8020f4a:	bf00      	nop
 8020f4c:	0802569e 	.word	0x0802569e
 8020f50:	080256a5 	.word	0x080256a5
 8020f54:	080256ac 	.word	0x080256ac
 8020f58:	080256c0 	.word	0x080256c0
 8020f5c:	080256d0 	.word	0x080256d0
 8020f60:	080256b3 	.word	0x080256b3
 8020f64:	080256ba 	.word	0x080256ba

08020f68 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8020f68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8020f6c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8020f70:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8020f74:	bf28      	it	cs
 8020f76:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8020f7a:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8020f7e:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 8020f80:	f8a8 3000 	strh.w	r3, [r8]
{
 8020f84:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8020f86:	4628      	mov	r0, r5
 8020f88:	460a      	mov	r2, r1
 8020f8a:	492e      	ldr	r1, [pc, #184]	; (8021044 <ES_WIFI_SendData+0xdc>)
 8020f8c:	461f      	mov	r7, r3
 8020f8e:	f002 fed9 	bl	8023d44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020f92:	462a      	mov	r2, r5
 8020f94:	4629      	mov	r1, r5
 8020f96:	4630      	mov	r0, r6
 8020f98:	f7ff fd2e 	bl	80209f8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8020f9c:	4604      	mov	r4, r0
 8020f9e:	2800      	cmp	r0, #0
 8020fa0:	d147      	bne.n	8021032 <ES_WIFI_SendData+0xca>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8020fa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020fa4:	4928      	ldr	r1, [pc, #160]	; (8021048 <ES_WIFI_SendData+0xe0>)
 8020fa6:	2a01      	cmp	r2, #1
 8020fa8:	bf38      	it	cc
 8020faa:	2201      	movcc	r2, #1
 8020fac:	4628      	mov	r0, r5
 8020fae:	f002 fec9 	bl	8023d44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8020fb2:	462a      	mov	r2, r5
 8020fb4:	4629      	mov	r1, r5
 8020fb6:	4630      	mov	r0, r6
 8020fb8:	f7ff fd1e 	bl	80209f8 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8020fbc:	4604      	mov	r4, r0
 8020fbe:	bb80      	cbnz	r0, 8021022 <ES_WIFI_SendData+0xba>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8020fc0:	4922      	ldr	r1, [pc, #136]	; (802104c <ES_WIFI_SendData+0xe4>)
 8020fc2:	463a      	mov	r2, r7
 8020fc4:	4628      	mov	r0, r5
 8020fc6:	f002 febd 	bl	8023d44 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8020fca:	9500      	str	r5, [sp, #0]
 8020fcc:	463b      	mov	r3, r7
 8020fce:	464a      	mov	r2, r9
 8020fd0:	4629      	mov	r1, r5
 8020fd2:	4630      	mov	r0, r6
 8020fd4:	f7ff fd9e 	bl	8020b14 <AT_RequestSendData>

      if(ret == ES_WIFI_STATUS_OK)
 8020fd8:	4604      	mov	r4, r0
 8020fda:	b998      	cbnz	r0, 8021004 <ES_WIFI_SendData+0x9c>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8020fdc:	491c      	ldr	r1, [pc, #112]	; (8021050 <ES_WIFI_SendData+0xe8>)
 8020fde:	4628      	mov	r0, r5
 8020fe0:	f002 feeb 	bl	8023dba <strstr>
 8020fe4:	b1c8      	cbz	r0, 802101a <ES_WIFI_SendData+0xb2>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8020fe6:	491b      	ldr	r1, [pc, #108]	; (8021054 <ES_WIFI_SendData+0xec>)
 8020fe8:	481b      	ldr	r0, [pc, #108]	; (8021058 <ES_WIFI_SendData+0xf0>)
 8020fea:	f640 0267 	movw	r2, #2151	; 0x867
 8020fee:	f002 fe1b 	bl	8023c28 <iprintf>
 8020ff2:	481a      	ldr	r0, [pc, #104]	; (802105c <ES_WIFI_SendData+0xf4>)
 8020ff4:	4629      	mov	r1, r5
 8020ff6:	f002 fe17 	bl	8023c28 <iprintf>
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 8020ffa:	2300      	movs	r3, #0
 8020ffc:	f8a8 3000 	strh.w	r3, [r8]
 8021000:	2402      	movs	r4, #2
 8021002:	e00a      	b.n	802101a <ES_WIFI_SendData+0xb2>
        DEBUG("Send Data command failed\n");
 8021004:	4913      	ldr	r1, [pc, #76]	; (8021054 <ES_WIFI_SendData+0xec>)
 8021006:	4814      	ldr	r0, [pc, #80]	; (8021058 <ES_WIFI_SendData+0xf0>)
 8021008:	f640 026d 	movw	r2, #2157	; 0x86d
 802100c:	f002 fe0c 	bl	8023c28 <iprintf>
 8021010:	4813      	ldr	r0, [pc, #76]	; (8021060 <ES_WIFI_SendData+0xf8>)
   DEBUG("P0 command failed\n");
 8021012:	f002 fe8f 	bl	8023d34 <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 8021016:	2c02      	cmp	r4, #2
 8021018:	d0ef      	beq.n	8020ffa <ES_WIFI_SendData+0x92>
  }
  UNLOCK_WIFI();
  return ret;
}
 802101a:	4620      	mov	r0, r4
 802101c:	b003      	add	sp, #12
 802101e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n");
 8021022:	490c      	ldr	r1, [pc, #48]	; (8021054 <ES_WIFI_SendData+0xec>)
 8021024:	480c      	ldr	r0, [pc, #48]	; (8021058 <ES_WIFI_SendData+0xf0>)
 8021026:	f640 0272 	movw	r2, #2162	; 0x872
 802102a:	f002 fdfd 	bl	8023c28 <iprintf>
 802102e:	480d      	ldr	r0, [pc, #52]	; (8021064 <ES_WIFI_SendData+0xfc>)
 8021030:	e7ef      	b.n	8021012 <ES_WIFI_SendData+0xaa>
   DEBUG("P0 command failed\n");
 8021032:	4908      	ldr	r1, [pc, #32]	; (8021054 <ES_WIFI_SendData+0xec>)
 8021034:	4808      	ldr	r0, [pc, #32]	; (8021058 <ES_WIFI_SendData+0xf0>)
 8021036:	f640 0277 	movw	r2, #2167	; 0x877
 802103a:	f002 fdf5 	bl	8023c28 <iprintf>
 802103e:	480a      	ldr	r0, [pc, #40]	; (8021068 <ES_WIFI_SendData+0x100>)
 8021040:	e7e7      	b.n	8021012 <ES_WIFI_SendData+0xaa>
 8021042:	bf00      	nop
 8021044:	0802569e 	.word	0x0802569e
 8021048:	08025859 	.word	0x08025859
 802104c:	08025861 	.word	0x08025861
 8021050:	0802586a 	.word	0x0802586a
 8021054:	08025712 	.word	0x08025712
 8021058:	0802576a 	.word	0x0802576a
 802105c:	0802586f 	.word	0x0802586f
 8021060:	0802588a 	.word	0x0802588a
 8021064:	080258a3 	.word	0x080258a3
 8021068:	080258b5 	.word	0x080258b5

0802106c <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 802106c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8021070:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8021074:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8021078:	4606      	mov	r6, r0
 802107a:	4690      	mov	r8, r2
 802107c:	461f      	mov	r7, r3
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 802107e:	d867      	bhi.n	8021150 <ES_WIFI_ReceiveData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8021080:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8021084:	460a      	mov	r2, r1
 8021086:	4628      	mov	r0, r5
 8021088:	4932      	ldr	r1, [pc, #200]	; (8021154 <ES_WIFI_ReceiveData+0xe8>)
 802108a:	f002 fe5b 	bl	8023d44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 802108e:	462a      	mov	r2, r5
 8021090:	4629      	mov	r1, r5
 8021092:	4630      	mov	r0, r6
 8021094:	f7ff fcb0 	bl	80209f8 <AT_ExecuteCommand>
 8021098:	4604      	mov	r4, r0
 802109a:	4682      	mov	sl, r0

    if(ret == ES_WIFI_STATUS_OK)
 802109c:	2800      	cmp	r0, #0
 802109e:	d149      	bne.n	8021134 <ES_WIFI_ReceiveData+0xc8>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80210a0:	492d      	ldr	r1, [pc, #180]	; (8021158 <ES_WIFI_ReceiveData+0xec>)
 80210a2:	463a      	mov	r2, r7
 80210a4:	4628      	mov	r0, r5
 80210a6:	f002 fe4d 	bl	8023d44 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80210aa:	462a      	mov	r2, r5
 80210ac:	4629      	mov	r1, r5
 80210ae:	4630      	mov	r0, r6
 80210b0:	f7ff fca2 	bl	80209f8 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80210b4:	4604      	mov	r4, r0
 80210b6:	bb88      	cbnz	r0, 802111c <ES_WIFI_ReceiveData+0xb0>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80210b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80210ba:	4928      	ldr	r1, [pc, #160]	; (802115c <ES_WIFI_ReceiveData+0xf0>)
 80210bc:	2a01      	cmp	r2, #1
 80210be:	bf38      	it	cc
 80210c0:	2201      	movcc	r2, #1
 80210c2:	4628      	mov	r0, r5
 80210c4:	f002 fe3e 	bl	8023d44 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80210c8:	462a      	mov	r2, r5
 80210ca:	4629      	mov	r1, r5
 80210cc:	4630      	mov	r0, r6
 80210ce:	f7ff fc93 	bl	80209f8 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80210d2:	4604      	mov	r4, r0
 80210d4:	b9d0      	cbnz	r0, 802110c <ES_WIFI_ReceiveData+0xa0>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80210d6:	4922      	ldr	r1, [pc, #136]	; (8021160 <ES_WIFI_ReceiveData+0xf4>)
 80210d8:	4628      	mov	r0, r5
 80210da:	f002 fe53 	bl	8023d84 <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80210de:	f8cd 9000 	str.w	r9, [sp]
 80210e2:	463b      	mov	r3, r7
 80210e4:	4642      	mov	r2, r8
 80210e6:	4629      	mov	r1, r5
 80210e8:	4630      	mov	r0, r6
 80210ea:	f7ff fcc1 	bl	8020a70 <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 80210ee:	4604      	mov	r4, r0
 80210f0:	b140      	cbz	r0, 8021104 <ES_WIFI_ReceiveData+0x98>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 80210f2:	491c      	ldr	r1, [pc, #112]	; (8021164 <ES_WIFI_ReceiveData+0xf8>)
 80210f4:	481c      	ldr	r0, [pc, #112]	; (8021168 <ES_WIFI_ReceiveData+0xfc>)
 80210f6:	f640 1208 	movw	r2, #2312	; 0x908
 80210fa:	f002 fd95 	bl	8023c28 <iprintf>
 80210fe:	481b      	ldr	r0, [pc, #108]	; (802116c <ES_WIFI_ReceiveData+0x100>)
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 8021100:	f002 fe18 	bl	8023d34 <puts>
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8021104:	4620      	mov	r0, r4
 8021106:	b002      	add	sp, #8
 8021108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("setting timeout failed\n");
 802110c:	4915      	ldr	r1, [pc, #84]	; (8021164 <ES_WIFI_ReceiveData+0xf8>)
 802110e:	4816      	ldr	r0, [pc, #88]	; (8021168 <ES_WIFI_ReceiveData+0xfc>)
 8021110:	f640 120d 	movw	r2, #2317	; 0x90d
 8021114:	f002 fd88 	bl	8023c28 <iprintf>
 8021118:	4815      	ldr	r0, [pc, #84]	; (8021170 <ES_WIFI_ReceiveData+0x104>)
 802111a:	e7f1      	b.n	8021100 <ES_WIFI_ReceiveData+0x94>
        DEBUG("setting requested len failed\n");
 802111c:	4911      	ldr	r1, [pc, #68]	; (8021164 <ES_WIFI_ReceiveData+0xf8>)
 802111e:	4812      	ldr	r0, [pc, #72]	; (8021168 <ES_WIFI_ReceiveData+0xfc>)
 8021120:	f640 1212 	movw	r2, #2322	; 0x912
 8021124:	f002 fd80 	bl	8023c28 <iprintf>
 8021128:	4812      	ldr	r0, [pc, #72]	; (8021174 <ES_WIFI_ReceiveData+0x108>)
 802112a:	f002 fe03 	bl	8023d34 <puts>
        *Receivedlen = 0;
 802112e:	f8a9 a000 	strh.w	sl, [r9]
 8021132:	e7e7      	b.n	8021104 <ES_WIFI_ReceiveData+0x98>
      DEBUG("setting socket for read failed\n");
 8021134:	f640 1218 	movw	r2, #2328	; 0x918
 8021138:	490a      	ldr	r1, [pc, #40]	; (8021164 <ES_WIFI_ReceiveData+0xf8>)
 802113a:	480b      	ldr	r0, [pc, #44]	; (8021168 <ES_WIFI_ReceiveData+0xfc>)
 802113c:	f002 fd74 	bl	8023c28 <iprintf>
 8021140:	480d      	ldr	r0, [pc, #52]	; (8021178 <ES_WIFI_ReceiveData+0x10c>)
 8021142:	f002 fdf7 	bl	8023d34 <puts>
      issue15++;
 8021146:	4a0d      	ldr	r2, [pc, #52]	; (802117c <ES_WIFI_ReceiveData+0x110>)
 8021148:	6813      	ldr	r3, [r2, #0]
 802114a:	3301      	adds	r3, #1
 802114c:	6013      	str	r3, [r2, #0]
 802114e:	e7d9      	b.n	8021104 <ES_WIFI_ReceiveData+0x98>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8021150:	2402      	movs	r4, #2
 8021152:	e7d7      	b.n	8021104 <ES_WIFI_ReceiveData+0x98>
 8021154:	0802569e 	.word	0x0802569e
 8021158:	080258d7 	.word	0x080258d7
 802115c:	080258de 	.word	0x080258de
 8021160:	080258e6 	.word	0x080258e6
 8021164:	08025712 	.word	0x08025712
 8021168:	0802576a 	.word	0x0802576a
 802116c:	080258ea 	.word	0x080258ea
 8021170:	08025908 	.word	0x08025908
 8021174:	0802591f 	.word	0x0802591f
 8021178:	0802593c 	.word	0x0802593c
 802117c:	20000298 	.word	0x20000298

08021180 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8021180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t        loop_per_us = 0;
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8021182:	4c17      	ldr	r4, [pc, #92]	; (80211e0 <SPI_WIFI_DelayUs+0x60>)
 8021184:	4f17      	ldr	r7, [pc, #92]	; (80211e4 <SPI_WIFI_DelayUs+0x64>)
  volatile        uint32_t ct = 0;
 8021186:	2300      	movs	r3, #0
 8021188:	9301      	str	r3, [sp, #4]
  if (cycle_per_loop == 0 ) 
 802118a:	6823      	ldr	r3, [r4, #0]
{
 802118c:	4605      	mov	r5, r0
  if (cycle_per_loop == 0 ) 
 802118e:	b98b      	cbnz	r3, 80211b4 <SPI_WIFI_DelayUs+0x34>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8021190:	683b      	ldr	r3, [r7, #0]
 8021192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8021196:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t t = 0;
     ct = cycle_per_ms;
 802119a:	9301      	str	r3, [sp, #4]
     t = HAL_GetTick();
 802119c:	f000 fbde 	bl	802195c <HAL_GetTick>
 80211a0:	4606      	mov	r6, r0
     while(ct) ct--;
 80211a2:	9b01      	ldr	r3, [sp, #4]
 80211a4:	b99b      	cbnz	r3, 80211ce <SPI_WIFI_DelayUs+0x4e>
     cycle_per_loop = HAL_GetTick()-t;
 80211a6:	f000 fbd9 	bl	802195c <HAL_GetTick>
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80211aa:	1b80      	subs	r0, r0, r6
 80211ac:	bf0a      	itet	eq
 80211ae:	2301      	moveq	r3, #1
     cycle_per_loop = HAL_GetTick()-t;
 80211b0:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80211b2:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80211b4:	4b0c      	ldr	r3, [pc, #48]	; (80211e8 <SPI_WIFI_DelayUs+0x68>)
 80211b6:	6838      	ldr	r0, [r7, #0]
 80211b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80211bc:	6823      	ldr	r3, [r4, #0]
 80211be:	fbb0 f0f3 	udiv	r0, r0, r3
  ct = n * loop_per_us;
 80211c2:	4368      	muls	r0, r5
 80211c4:	9001      	str	r0, [sp, #4]
  while(ct) ct--;
 80211c6:	9b01      	ldr	r3, [sp, #4]
 80211c8:	b92b      	cbnz	r3, 80211d6 <SPI_WIFI_DelayUs+0x56>
  return;
}
 80211ca:	b003      	add	sp, #12
 80211cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 80211ce:	9b01      	ldr	r3, [sp, #4]
 80211d0:	3b01      	subs	r3, #1
 80211d2:	9301      	str	r3, [sp, #4]
 80211d4:	e7e5      	b.n	80211a2 <SPI_WIFI_DelayUs+0x22>
  while(ct) ct--;
 80211d6:	9b01      	ldr	r3, [sp, #4]
 80211d8:	3b01      	subs	r3, #1
 80211da:	9301      	str	r3, [sp, #4]
 80211dc:	e7f3      	b.n	80211c6 <SPI_WIFI_DelayUs+0x46>
 80211de:	bf00      	nop
 80211e0:	2000029c 	.word	0x2000029c
 80211e4:	20000018 	.word	0x20000018
 80211e8:	000f4240 	.word	0x000f4240

080211ec <wait_spi_tx_event>:
{
 80211ec:	b570      	push	{r4, r5, r6, lr}
 80211ee:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 80211f0:	f000 fbb4 	bl	802195c <HAL_GetTick>
  while (spi_tx_event==1)
 80211f4:	4e07      	ldr	r6, [pc, #28]	; (8021214 <wait_spi_tx_event+0x28>)
  int tickstart = HAL_GetTick();
 80211f6:	4604      	mov	r4, r0
  while (spi_tx_event==1)
 80211f8:	6873      	ldr	r3, [r6, #4]
 80211fa:	2b01      	cmp	r3, #1
 80211fc:	d001      	beq.n	8021202 <wait_spi_tx_event+0x16>
  return 0;
 80211fe:	2000      	movs	r0, #0
}
 8021200:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 8021202:	f000 fbab 	bl	802195c <HAL_GetTick>
 8021206:	1b00      	subs	r0, r0, r4
 8021208:	42a8      	cmp	r0, r5
 802120a:	d9f5      	bls.n	80211f8 <wait_spi_tx_event+0xc>
      return -1;
 802120c:	f04f 30ff 	mov.w	r0, #4294967295
 8021210:	e7f6      	b.n	8021200 <wait_spi_tx_event+0x14>
 8021212:	bf00      	nop
 8021214:	2000029c 	.word	0x2000029c

08021218 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8021218:	4b3f      	ldr	r3, [pc, #252]	; (8021318 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 802121a:	4840      	ldr	r0, [pc, #256]	; (802131c <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 802121c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 802121e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8021220:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021224:	659a      	str	r2, [r3, #88]	; 0x58
 8021226:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8021228:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 802122a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 802122e:	9201      	str	r2, [sp, #4]
 8021230:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021234:	f042 0202 	orr.w	r2, r2, #2
 8021238:	64da      	str	r2, [r3, #76]	; 0x4c
 802123a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802123c:	f002 0202 	and.w	r2, r2, #2
 8021240:	9202      	str	r2, [sp, #8]
 8021242:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8021244:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021246:	f042 0204 	orr.w	r2, r2, #4
 802124a:	64da      	str	r2, [r3, #76]	; 0x4c
 802124c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802124e:	f002 0204 	and.w	r2, r2, #4
 8021252:	9203      	str	r2, [sp, #12]
 8021254:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8021256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021258:	f042 0210 	orr.w	r2, r2, #16
 802125c:	64da      	str	r2, [r3, #76]	; 0x4c
 802125e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021260:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8021264:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8021266:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8021268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 802126c:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 802126e:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8021270:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8021272:	f000 fcff 	bl	8021c74 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8021276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 802127a:	a905      	add	r1, sp, #20
 802127c:	4827      	ldr	r0, [pc, #156]	; (802131c <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 802127e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8021282:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8021286:	f000 fc11 	bl	8021aac <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 802128a:	4b25      	ldr	r3, [pc, #148]	; (8021320 <SPI_WIFI_MspInit+0x108>)
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 802128c:	4825      	ldr	r0, [pc, #148]	; (8021324 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 802128e:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8021290:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8021292:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8021296:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 802129a:	f000 fc07 	bl	8021aac <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 802129e:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80212a2:	a905      	add	r1, sp, #20
 80212a4:	481f      	ldr	r0, [pc, #124]	; (8021324 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = 0;
 80212a6:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80212a8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80212ac:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80212b0:	f000 fbfc 	bl	8021aac <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80212b4:	4622      	mov	r2, r4
 80212b6:	4621      	mov	r1, r4
 80212b8:	481a      	ldr	r0, [pc, #104]	; (8021324 <SPI_WIFI_MspInit+0x10c>)
 80212ba:	f000 fcdb 	bl	8021c74 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80212be:	a905      	add	r1, sp, #20
 80212c0:	4818      	ldr	r0, [pc, #96]	; (8021324 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80212c2:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80212c4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80212c8:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80212cc:	f000 fbee 	bl	8021aac <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80212d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80212d4:	a905      	add	r1, sp, #20
 80212d6:	4814      	ldr	r0, [pc, #80]	; (8021328 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80212d8:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80212da:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80212de:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80212e2:	f000 fbe3 	bl	8021aac <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 80212e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80212ea:	a905      	add	r1, sp, #20
 80212ec:	480e      	ldr	r0, [pc, #56]	; (8021328 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80212ee:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80212f0:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80212f4:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80212f8:	f000 fbd8 	bl	8021aac <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 80212fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8021300:	4809      	ldr	r0, [pc, #36]	; (8021328 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8021302:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8021304:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8021306:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 802130a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 802130e:	f000 fbcd 	bl	8021aac <HAL_GPIO_Init>
}
 8021312:	b00b      	add	sp, #44	; 0x2c
 8021314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021316:	bf00      	nop
 8021318:	40021000 	.word	0x40021000
 802131c:	48000400 	.word	0x48000400
 8021320:	10110000 	.word	0x10110000
 8021324:	48001000 	.word	0x48001000
 8021328:	48000800 	.word	0x48000800

0802132c <SPI_WIFI_ResetModule>:
{
 802132c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 802132e:	f000 fb15 	bl	802195c <HAL_GetTick>
  WIFI_RESET_MODULE();
 8021332:	2200      	movs	r2, #0
 8021334:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 8021338:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 802133a:	482e      	ldr	r0, [pc, #184]	; (80213f4 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 802133c:	4f2e      	ldr	r7, [pc, #184]	; (80213f8 <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 802133e:	f000 fc99 	bl	8021c74 <HAL_GPIO_WritePin>
 8021342:	200a      	movs	r0, #10
 8021344:	f000 fb10 	bl	8021968 <HAL_Delay>
 8021348:	2201      	movs	r2, #1
 802134a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802134e:	4829      	ldr	r0, [pc, #164]	; (80213f4 <SPI_WIFI_ResetModule+0xc8>)
 8021350:	f000 fc90 	bl	8021c74 <HAL_GPIO_WritePin>
 8021354:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8021358:	f000 fb06 	bl	8021968 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 802135c:	4825      	ldr	r0, [pc, #148]	; (80213f4 <SPI_WIFI_ResetModule+0xc8>)
 802135e:	2200      	movs	r2, #0
 8021360:	2101      	movs	r1, #1
 8021362:	f000 fc87 	bl	8021c74 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8021366:	200f      	movs	r0, #15
 8021368:	f7ff ff0a 	bl	8021180 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 802136c:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 802136e:	4821      	ldr	r0, [pc, #132]	; (80213f4 <SPI_WIFI_ResetModule+0xc8>)
 8021370:	2102      	movs	r1, #2
 8021372:	f000 fc79 	bl	8021c68 <HAL_GPIO_ReadPin>
 8021376:	2801      	cmp	r0, #1
 8021378:	4602      	mov	r2, r0
 802137a:	d020      	beq.n	80213be <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS();
 802137c:	2201      	movs	r2, #1
 802137e:	481d      	ldr	r0, [pc, #116]	; (80213f4 <SPI_WIFI_ResetModule+0xc8>)
 8021380:	4611      	mov	r1, r2
 8021382:	f000 fc77 	bl	8021c74 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8021386:	f89d 3000 	ldrb.w	r3, [sp]
 802138a:	2b15      	cmp	r3, #21
 802138c:	d12e      	bne.n	80213ec <SPI_WIFI_ResetModule+0xc0>
 802138e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8021392:	2b15      	cmp	r3, #21
 8021394:	d12a      	bne.n	80213ec <SPI_WIFI_ResetModule+0xc0>
 8021396:	f89d 3002 	ldrb.w	r3, [sp, #2]
 802139a:	2b0d      	cmp	r3, #13
 802139c:	d126      	bne.n	80213ec <SPI_WIFI_ResetModule+0xc0>
 802139e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80213a2:	2b0a      	cmp	r3, #10
 80213a4:	d122      	bne.n	80213ec <SPI_WIFI_ResetModule+0xc0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80213a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80213aa:	2b3e      	cmp	r3, #62	; 0x3e
 80213ac:	d11e      	bne.n	80213ec <SPI_WIFI_ResetModule+0xc0>
 80213ae:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80213b2:	3820      	subs	r0, #32
 80213b4:	bf18      	it	ne
 80213b6:	f04f 30ff 	movne.w	r0, #4294967295
}
 80213ba:	b003      	add	sp, #12
 80213bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80213be:	eb0d 0104 	add.w	r1, sp, r4
 80213c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80213c6:	4638      	mov	r0, r7
 80213c8:	f001 fbb7 	bl	8022b3a <HAL_SPI_Receive>
 80213cc:	4606      	mov	r6, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80213ce:	f000 fac5 	bl	802195c <HAL_GetTick>
 80213d2:	1b40      	subs	r0, r0, r5
    count += 2;
 80213d4:	3402      	adds	r4, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80213d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 80213da:	b2e4      	uxtb	r4, r4
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80213dc:	d201      	bcs.n	80213e2 <SPI_WIFI_ResetModule+0xb6>
 80213de:	2e00      	cmp	r6, #0
 80213e0:	d0c5      	beq.n	802136e <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS();
 80213e2:	2201      	movs	r2, #1
 80213e4:	4803      	ldr	r0, [pc, #12]	; (80213f4 <SPI_WIFI_ResetModule+0xc8>)
 80213e6:	4611      	mov	r1, r2
 80213e8:	f000 fc44 	bl	8021c74 <HAL_GPIO_WritePin>
    return -1;
 80213ec:	f04f 30ff 	mov.w	r0, #4294967295
 80213f0:	e7e3      	b.n	80213ba <SPI_WIFI_ResetModule+0x8e>
 80213f2:	bf00      	nop
 80213f4:	48001000 	.word	0x48001000
 80213f8:	2000032c 	.word	0x2000032c

080213fc <SPI_WIFI_Init>:
{
 80213fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 80213fe:	4605      	mov	r5, r0
 8021400:	bb78      	cbnz	r0, 8021462 <SPI_WIFI_Init+0x66>
    hspi.Instance               = SPI3;
 8021402:	4c1c      	ldr	r4, [pc, #112]	; (8021474 <SPI_WIFI_Init+0x78>)
 8021404:	4b1c      	ldr	r3, [pc, #112]	; (8021478 <SPI_WIFI_Init+0x7c>)
 8021406:	6023      	str	r3, [r4, #0]
    SPI_WIFI_MspInit(&hspi);
 8021408:	4620      	mov	r0, r4
 802140a:	f7ff ff05 	bl	8021218 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 802140e:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8021412:	e9c4 3501 	strd	r3, r5, [r4, #4]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8021416:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 802141a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 802141e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8021422:	4620      	mov	r0, r4
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8021424:	2310      	movs	r3, #16
 8021426:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 802142a:	e9c4 5508 	strd	r5, r5, [r4, #32]
    hspi.Init.CRCPolynomial     = 0;
 802142e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8021432:	6165      	str	r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8021434:	f001 f92b 	bl	802268e <HAL_SPI_Init>
 8021438:	4602      	mov	r2, r0
 802143a:	b9b8      	cbnz	r0, 802146c <SPI_WIFI_Init+0x70>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 802143c:	4601      	mov	r1, r0
 802143e:	9001      	str	r0, [sp, #4]
 8021440:	2007      	movs	r0, #7
 8021442:	f000 fab7 	bl	80219b4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8021446:	2007      	movs	r0, #7
 8021448:	f000 fae6 	bl	8021a18 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 802144c:	9a01      	ldr	r2, [sp, #4]
 802144e:	2033      	movs	r0, #51	; 0x33
 8021450:	4611      	mov	r1, r2
 8021452:	f000 faaf 	bl	80219b4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8021456:	2033      	movs	r0, #51	; 0x33
 8021458:	f000 fade 	bl	8021a18 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 802145c:	200a      	movs	r0, #10
 802145e:	f7ff fe8f 	bl	8021180 <SPI_WIFI_DelayUs>
}
 8021462:	b003      	add	sp, #12
 8021464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc= SPI_WIFI_ResetModule();
 8021468:	f7ff bf60 	b.w	802132c <SPI_WIFI_ResetModule>
}
 802146c:	f04f 30ff 	mov.w	r0, #4294967295
 8021470:	b003      	add	sp, #12
 8021472:	bd30      	pop	{r4, r5, pc}
 8021474:	2000032c 	.word	0x2000032c
 8021478:	40003c00 	.word	0x40003c00

0802147c <SPI_WIFI_DeInit>:
{
 802147c:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 802147e:	4802      	ldr	r0, [pc, #8]	; (8021488 <SPI_WIFI_DeInit+0xc>)
 8021480:	f001 f98a 	bl	8022798 <HAL_SPI_DeInit>
}
 8021484:	2000      	movs	r0, #0
 8021486:	bd08      	pop	{r3, pc}
 8021488:	2000032c 	.word	0x2000032c

0802148c <SPI_WIFI_ReceiveData>:
{
 802148c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021490:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS();
 8021492:	2201      	movs	r2, #1
{
 8021494:	4604      	mov	r4, r0
 8021496:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS();
 8021498:	4836      	ldr	r0, [pc, #216]	; (8021574 <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event==1)
 802149a:	4e37      	ldr	r6, [pc, #220]	; (8021578 <SPI_WIFI_ReceiveData+0xec>)
  WIFI_DISABLE_NSS();
 802149c:	4611      	mov	r1, r2
 802149e:	f000 fbe9 	bl	8021c74 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 80214a2:	2003      	movs	r0, #3
 80214a4:	f7ff fe6c 	bl	8021180 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 80214a8:	f000 fa58 	bl	802195c <HAL_GetTick>
 80214ac:	46b1      	mov	r9, r6
 80214ae:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event==1)
 80214b0:	68b3      	ldr	r3, [r6, #8]
 80214b2:	2b01      	cmp	r3, #1
 80214b4:	d01a      	beq.n	80214ec <SPI_WIFI_ReceiveData+0x60>
  WIFI_ENABLE_NSS();
 80214b6:	482f      	ldr	r0, [pc, #188]	; (8021574 <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 80214b8:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8021574 <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80214bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 802157c <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS();
 80214c0:	2200      	movs	r2, #0
 80214c2:	2101      	movs	r1, #1
 80214c4:	f000 fbd6 	bl	8021c74 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80214c8:	200f      	movs	r0, #15
 80214ca:	f7ff fe59 	bl	8021180 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80214ce:	3402      	adds	r4, #2
 80214d0:	2500      	movs	r5, #0
 80214d2:	2102      	movs	r1, #2
 80214d4:	4658      	mov	r0, fp
 80214d6:	f000 fbc7 	bl	8021c68 <HAL_GPIO_ReadPin>
 80214da:	2801      	cmp	r0, #1
 80214dc:	b22e      	sxth	r6, r5
 80214de:	d00d      	beq.n	80214fc <SPI_WIFI_ReceiveData+0x70>
  WIFI_DISABLE_NSS();
 80214e0:	2201      	movs	r2, #1
 80214e2:	4824      	ldr	r0, [pc, #144]	; (8021574 <SPI_WIFI_ReceiveData+0xe8>)
 80214e4:	4611      	mov	r1, r2
 80214e6:	f000 fbc5 	bl	8021c74 <HAL_GPIO_WritePin>
  return length;
 80214ea:	e01a      	b.n	8021522 <SPI_WIFI_ReceiveData+0x96>
    if((HAL_GetTick() - tickstart ) > timeout)
 80214ec:	f000 fa36 	bl	802195c <HAL_GetTick>
 80214f0:	1b40      	subs	r0, r0, r5
 80214f2:	4580      	cmp	r8, r0
 80214f4:	d2dc      	bcs.n	80214b0 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80214f6:	f06f 0602 	mvn.w	r6, #2
 80214fa:	e012      	b.n	8021522 <SPI_WIFI_ReceiveData+0x96>
    if((length < len) || (!len))
 80214fc:	42af      	cmp	r7, r5
 80214fe:	dc01      	bgt.n	8021504 <SPI_WIFI_ReceiveData+0x78>
 8021500:	2f00      	cmp	r7, #0
 8021502:	d1ed      	bne.n	80214e0 <SPI_WIFI_ReceiveData+0x54>
      spi_rx_event=1;
 8021504:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8021506:	a901      	add	r1, sp, #4
 8021508:	4650      	mov	r0, sl
      spi_rx_event=1;
 802150a:	f8c9 200c 	str.w	r2, [r9, #12]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 802150e:	f001 fd05 	bl	8022f1c <HAL_SPI_Receive_IT>
 8021512:	2201      	movs	r2, #1
 8021514:	b148      	cbz	r0, 802152a <SPI_WIFI_ReceiveData+0x9e>
        WIFI_DISABLE_NSS();
 8021516:	4817      	ldr	r0, [pc, #92]	; (8021574 <SPI_WIFI_ReceiveData+0xe8>)
 8021518:	4611      	mov	r1, r2
 802151a:	f000 fbab 	bl	8021c74 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 802151e:	f04f 36ff 	mov.w	r6, #4294967295
}
 8021522:	4630      	mov	r0, r6
 8021524:	b003      	add	sp, #12
 8021526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 802152a:	f000 fa17 	bl	802195c <HAL_GetTick>
 802152e:	4606      	mov	r6, r0
  while (spi_rx_event==1)
 8021530:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8021534:	2b01      	cmp	r3, #1
 8021536:	d104      	bne.n	8021542 <SPI_WIFI_ReceiveData+0xb6>
    if((HAL_GetTick() - tickstart ) > timeout)
 8021538:	f000 fa10 	bl	802195c <HAL_GetTick>
 802153c:	1b80      	subs	r0, r0, r6
 802153e:	4580      	cmp	r8, r0
 8021540:	d2f6      	bcs.n	8021530 <SPI_WIFI_ReceiveData+0xa4>
      pData[0] = tmp[0];
 8021542:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8021546:	f804 3c02 	strb.w	r3, [r4, #-2]
      pData[1] = tmp[1];
 802154a:	3502      	adds	r5, #2
 802154c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8021550:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 8021554:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8021558:	f104 0402 	add.w	r4, r4, #2
 802155c:	d1b9      	bne.n	80214d2 <SPI_WIFI_ReceiveData+0x46>
        WIFI_DISABLE_NSS();
 802155e:	2201      	movs	r2, #1
 8021560:	4804      	ldr	r0, [pc, #16]	; (8021574 <SPI_WIFI_ReceiveData+0xe8>)
 8021562:	4611      	mov	r1, r2
 8021564:	f000 fb86 	bl	8021c74 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8021568:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();
 802156c:	f7ff fede 	bl	802132c <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8021570:	e7d7      	b.n	8021522 <SPI_WIFI_ReceiveData+0x96>
 8021572:	bf00      	nop
 8021574:	48001000 	.word	0x48001000
 8021578:	2000029c 	.word	0x2000029c
 802157c:	2000032c 	.word	0x2000032c

08021580 <SPI_WIFI_SendData>:
{
 8021580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021584:	4605      	mov	r5, r0
 8021586:	460c      	mov	r4, r1
 8021588:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 802158a:	f000 f9e7 	bl	802195c <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY()==0)
 802158e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8021628 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 8021592:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY()==0)
 8021594:	2102      	movs	r1, #2
 8021596:	4648      	mov	r0, r9
 8021598:	f000 fb66 	bl	8021c68 <HAL_GPIO_ReadPin>
 802159c:	2801      	cmp	r0, #1
 802159e:	4606      	mov	r6, r0
 80215a0:	d11b      	bne.n	80215da <SPI_WIFI_SendData+0x5a>
  cmddata_rdy_rising_event=1;
 80215a2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8021630 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 80215a6:	4601      	mov	r1, r0
  cmddata_rdy_rising_event=1;
 80215a8:	f8c8 0008 	str.w	r0, [r8, #8]
  WIFI_ENABLE_NSS();
 80215ac:	2200      	movs	r2, #0
 80215ae:	481e      	ldr	r0, [pc, #120]	; (8021628 <SPI_WIFI_SendData+0xa8>)
 80215b0:	f000 fb60 	bl	8021c74 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80215b4:	200f      	movs	r0, #15
 80215b6:	f7ff fde3 	bl	8021180 <SPI_WIFI_DelayUs>
  if (len > 1)
 80215ba:	2c01      	cmp	r4, #1
 80215bc:	d919      	bls.n	80215f2 <SPI_WIFI_SendData+0x72>
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80215be:	481b      	ldr	r0, [pc, #108]	; (802162c <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 80215c0:	f8c8 6004 	str.w	r6, [r8, #4]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80215c4:	0862      	lsrs	r2, r4, #1
 80215c6:	4629      	mov	r1, r5
 80215c8:	f001 fbce 	bl	8022d68 <HAL_SPI_Transmit_IT>
 80215cc:	b170      	cbz	r0, 80215ec <SPI_WIFI_SendData+0x6c>
      WIFI_DISABLE_NSS();
 80215ce:	2201      	movs	r2, #1
 80215d0:	4815      	ldr	r0, [pc, #84]	; (8021628 <SPI_WIFI_SendData+0xa8>)
 80215d2:	4611      	mov	r1, r2
 80215d4:	f000 fb4e 	bl	8021c74 <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 80215d8:	e005      	b.n	80215e6 <SPI_WIFI_SendData+0x66>
    if((HAL_GetTick() - tickstart ) > timeout)
 80215da:	f000 f9bf 	bl	802195c <HAL_GetTick>
 80215de:	eba0 0008 	sub.w	r0, r0, r8
 80215e2:	4287      	cmp	r7, r0
 80215e4:	d2d6      	bcs.n	8021594 <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 80215e6:	f04f 30ff 	mov.w	r0, #4294967295
 80215ea:	e019      	b.n	8021620 <SPI_WIFI_SendData+0xa0>
    wait_spi_tx_event(timeout);
 80215ec:	4638      	mov	r0, r7
 80215ee:	f7ff fdfd 	bl	80211ec <wait_spi_tx_event>
  if ( len & 1)
 80215f2:	07e3      	lsls	r3, r4, #31
 80215f4:	d513      	bpl.n	802161e <SPI_WIFI_SendData+0x9e>
    Padding[0] = pdata[len-1];
 80215f6:	4425      	add	r5, r4
    spi_tx_event=1;
 80215f8:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 80215fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80215fe:	f88d 3004 	strb.w	r3, [sp, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8021602:	480a      	ldr	r0, [pc, #40]	; (802162c <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8021604:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8021608:	230a      	movs	r3, #10
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 802160a:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 802160c:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8021610:	f001 fbaa 	bl	8022d68 <HAL_SPI_Transmit_IT>
 8021614:	2800      	cmp	r0, #0
 8021616:	d1da      	bne.n	80215ce <SPI_WIFI_SendData+0x4e>
    wait_spi_tx_event(timeout);
 8021618:	4638      	mov	r0, r7
 802161a:	f7ff fde7 	bl	80211ec <wait_spi_tx_event>
  return len;
 802161e:	b220      	sxth	r0, r4
}
 8021620:	b003      	add	sp, #12
 8021622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021626:	bf00      	nop
 8021628:	48001000 	.word	0x48001000
 802162c:	2000032c 	.word	0x2000032c
 8021630:	2000029c 	.word	0x2000029c

08021634 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8021634:	f000 b998 	b.w	8021968 <HAL_Delay>

08021638 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8021638:	4b02      	ldr	r3, [pc, #8]	; (8021644 <HAL_SPI_RxCpltCallback+0xc>)
 802163a:	68da      	ldr	r2, [r3, #12]
 802163c:	b10a      	cbz	r2, 8021642 <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 802163e:	2200      	movs	r2, #0
 8021640:	60da      	str	r2, [r3, #12]
  }
}
 8021642:	4770      	bx	lr
 8021644:	2000029c 	.word	0x2000029c

08021648 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8021648:	4b02      	ldr	r3, [pc, #8]	; (8021654 <HAL_SPI_TxCpltCallback+0xc>)
 802164a:	685a      	ldr	r2, [r3, #4]
 802164c:	b10a      	cbz	r2, 8021652 <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 802164e:	2200      	movs	r2, #0
 8021650:	605a      	str	r2, [r3, #4]
  }
}
 8021652:	4770      	bx	lr
 8021654:	2000029c 	.word	0x2000029c

08021658 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event==1)  
 8021658:	4b03      	ldr	r3, [pc, #12]	; (8021668 <SPI_WIFI_ISR+0x10>)
 802165a:	689a      	ldr	r2, [r3, #8]
 802165c:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 802165e:	bf04      	itt	eq
 8021660:	2200      	moveq	r2, #0
 8021662:	609a      	streq	r2, [r3, #8]
   }
}
 8021664:	4770      	bx	lr
 8021666:	bf00      	nop
 8021668:	2000029c 	.word	0x2000029c

0802166c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 802166c:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 802166e:	4b0b      	ldr	r3, [pc, #44]	; (802169c <WIFI_Init+0x30>)
 8021670:	9301      	str	r3, [sp, #4]
 8021672:	4b0b      	ldr	r3, [pc, #44]	; (80216a0 <WIFI_Init+0x34>)
 8021674:	9300      	str	r3, [sp, #0]
 8021676:	4a0b      	ldr	r2, [pc, #44]	; (80216a4 <WIFI_Init+0x38>)
 8021678:	4b0b      	ldr	r3, [pc, #44]	; (80216a8 <WIFI_Init+0x3c>)
 802167a:	490c      	ldr	r1, [pc, #48]	; (80216ac <WIFI_Init+0x40>)
 802167c:	480c      	ldr	r0, [pc, #48]	; (80216b0 <WIFI_Init+0x44>)
 802167e:	f7ff faf3 	bl	8020c68 <ES_WIFI_RegisterBusIO>
 8021682:	b940      	cbnz	r0, 8021696 <WIFI_Init+0x2a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8021684:	480a      	ldr	r0, [pc, #40]	; (80216b0 <WIFI_Init+0x44>)
 8021686:	f7ff fa8d 	bl	8020ba4 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 802168a:	3800      	subs	r0, #0
 802168c:	bf18      	it	ne
 802168e:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8021690:	b003      	add	sp, #12
 8021692:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021696:	2001      	movs	r0, #1
 8021698:	e7fa      	b.n	8021690 <WIFI_Init+0x24>
 802169a:	bf00      	nop
 802169c:	0802148d 	.word	0x0802148d
 80216a0:	08021581 	.word	0x08021581
 80216a4:	0802147d 	.word	0x0802147d
 80216a8:	08021635 	.word	0x08021635
 80216ac:	080213fd 	.word	0x080213fd
 80216b0:	20000390 	.word	0x20000390

080216b4 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80216b4:	b508      	push	{r3, lr}
 80216b6:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80216b8:	460a      	mov	r2, r1
 80216ba:	4601      	mov	r1, r0
 80216bc:	4806      	ldr	r0, [pc, #24]	; (80216d8 <WIFI_Connect+0x24>)
 80216be:	f7ff fae5 	bl	8020c8c <ES_WIFI_Connect>
 80216c2:	b930      	cbnz	r0, 80216d2 <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80216c4:	4804      	ldr	r0, [pc, #16]	; (80216d8 <WIFI_Connect+0x24>)
 80216c6:	f7ff fb3d 	bl	8020d44 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80216ca:	3800      	subs	r0, #0
 80216cc:	bf18      	it	ne
 80216ce:	2001      	movne	r0, #1
    {
       ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80216d0:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80216d2:	2001      	movs	r0, #1
 80216d4:	e7fc      	b.n	80216d0 <WIFI_Connect+0x1c>
 80216d6:	bf00      	nop
 80216d8:	20000390 	.word	0x20000390

080216dc <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 80216dc:	4601      	mov	r1, r0
 80216de:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 80216e0:	4803      	ldr	r0, [pc, #12]	; (80216f0 <WIFI_GetMAC_Address+0x14>)
 80216e2:	f7ff fba3 	bl	8020e2c <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 80216e6:	3800      	subs	r0, #0
 80216e8:	bf18      	it	ne
 80216ea:	2001      	movne	r0, #1
 80216ec:	bd08      	pop	{r3, pc}
 80216ee:	bf00      	nop
 80216f0:	20000390 	.word	0x20000390

080216f4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 80216f4:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80216f6:	4d06      	ldr	r5, [pc, #24]	; (8021710 <WIFI_GetIP_Address+0x1c>)
{
 80216f8:	4604      	mov	r4, r0
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80216fa:	4628      	mov	r0, r5
 80216fc:	f7ff fb06 	bl	8020d0c <ES_WIFI_IsConnected>
 8021700:	2801      	cmp	r0, #1
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8021702:	bf03      	ittte	eq
 8021704:	f8d5 30d5 	ldreq.w	r3, [r5, #213]	; 0xd5
 8021708:	6023      	streq	r3, [r4, #0]
    ret = WIFI_STATUS_OK;
 802170a:	2000      	moveq	r0, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 802170c:	2001      	movne	r0, #1
  }
  return ret;
}
 802170e:	bd38      	pop	{r3, r4, r5, pc}
 8021710:	20000390 	.word	0x20000390

08021714 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8021714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8021716:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802171a:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 802171e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021722:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8021726:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8021728:	781a      	ldrb	r2, [r3, #0]
 802172a:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 802172e:	bf18      	it	ne
 8021730:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8021732:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8021734:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8021738:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 802173c:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8021740:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 8021742:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8021744:	4806      	ldr	r0, [pc, #24]	; (8021760 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8021746:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8021748:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 802174c:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8021750:	f7ff fb8a 	bl	8020e68 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8021754:	3800      	subs	r0, #0
 8021756:	bf18      	it	ne
 8021758:	2001      	movne	r0, #1
 802175a:	b007      	add	sp, #28
 802175c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021760:	20000390 	.word	0x20000390

08021764 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8021764:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8021766:	9c04      	ldr	r4, [sp, #16]
 8021768:	e9cd 3400 	strd	r3, r4, [sp]
 802176c:	4613      	mov	r3, r2
 802176e:	460a      	mov	r2, r1
 8021770:	4601      	mov	r1, r0
 8021772:	4804      	ldr	r0, [pc, #16]	; (8021784 <WIFI_SendData+0x20>)
 8021774:	f7ff fbf8 	bl	8020f68 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8021778:	3800      	subs	r0, #0
 802177a:	bf18      	it	ne
 802177c:	2001      	movne	r0, #1
 802177e:	b002      	add	sp, #8
 8021780:	bd10      	pop	{r4, pc}
 8021782:	bf00      	nop
 8021784:	20000390 	.word	0x20000390

08021788 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8021788:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 802178a:	9c04      	ldr	r4, [sp, #16]
 802178c:	e9cd 3400 	strd	r3, r4, [sp]
 8021790:	4613      	mov	r3, r2
 8021792:	460a      	mov	r2, r1
 8021794:	4601      	mov	r1, r0
 8021796:	4804      	ldr	r0, [pc, #16]	; (80217a8 <WIFI_ReceiveData+0x20>)
 8021798:	f7ff fc68 	bl	802106c <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 802179c:	3800      	subs	r0, #0
 802179e:	bf18      	it	ne
 80217a0:	2001      	movne	r0, #1
 80217a2:	b002      	add	sp, #8
 80217a4:	bd10      	pop	{r4, pc}
 80217a6:	bf00      	nop
 80217a8:	20000390 	.word	0x20000390

080217ac <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80217ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80217ae:	b948      	cbnz	r0, 80217c4 <BSP_LED_Init+0x18>
 80217b0:	4b0d      	ldr	r3, [pc, #52]	; (80217e8 <BSP_LED_Init+0x3c>)
 80217b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80217b4:	f042 0202 	orr.w	r2, r2, #2
 80217b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80217ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80217bc:	f003 0302 	and.w	r3, r3, #2
 80217c0:	9300      	str	r3, [sp, #0]
 80217c2:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80217c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80217c8:	2301      	movs	r3, #1
 80217ca:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80217ce:	2100      	movs	r1, #0
 80217d0:	2302      	movs	r3, #2
 80217d2:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80217d6:	4b05      	ldr	r3, [pc, #20]	; (80217ec <BSP_LED_Init+0x40>)
 80217d8:	a901      	add	r1, sp, #4
 80217da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80217de:	f000 f965 	bl	8021aac <HAL_GPIO_Init>
}
 80217e2:	b007      	add	sp, #28
 80217e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80217e8:	40021000 	.word	0x40021000
 80217ec:	20000004 	.word	0x20000004

080217f0 <BSP_LED_On>:
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80217f0:	4b03      	ldr	r3, [pc, #12]	; (8021800 <BSP_LED_On+0x10>)
 80217f2:	2201      	movs	r2, #1
 80217f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80217f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80217fc:	f000 ba3a 	b.w	8021c74 <HAL_GPIO_WritePin>
 8021800:	20000004 	.word	0x20000004

08021804 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8021804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021806:	460d      	mov	r5, r1
 8021808:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 802180a:	b9d8      	cbnz	r0, 8021844 <BSP_COM_Init+0x40>
 802180c:	4b1d      	ldr	r3, [pc, #116]	; (8021884 <BSP_COM_Init+0x80>)
 802180e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021810:	f042 0202 	orr.w	r2, r2, #2
 8021814:	64da      	str	r2, [r3, #76]	; 0x4c
 8021816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021818:	f002 0202 	and.w	r2, r2, #2
 802181c:	9200      	str	r2, [sp, #0]
 802181e:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8021820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021822:	f042 0202 	orr.w	r2, r2, #2
 8021826:	64da      	str	r2, [r3, #76]	; 0x4c
 8021828:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802182a:	f002 0202 	and.w	r2, r2, #2
 802182e:	9201      	str	r2, [sp, #4]
 8021830:	9a01      	ldr	r2, [sp, #4]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8021832:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8021838:	661a      	str	r2, [r3, #96]	; 0x60
 802183a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802183c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021840:	9302      	str	r3, [sp, #8]
 8021842:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = COM_TX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Alternate = COM_TX_AF[COM];
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021844:	4c10      	ldr	r4, [pc, #64]	; (8021888 <BSP_COM_Init+0x84>)
 8021846:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 802184a:	2602      	movs	r6, #2
 802184c:	2340      	movs	r3, #64	; 0x40
 802184e:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021852:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8021854:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8021856:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8021858:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 802185a:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 802185c:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 802185e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021860:	f000 f924 	bl	8021aac <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8021864:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8021866:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8021868:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 802186a:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 802186c:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8021870:	f000 f91c 	bl	8021aac <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8021874:	6923      	ldr	r3, [r4, #16]
 8021876:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 8021878:	4628      	mov	r0, r5
 802187a:	f002 f8f2 	bl	8023a62 <HAL_UART_Init>
}
 802187e:	b009      	add	sp, #36	; 0x24
 8021880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021882:	bf00      	nop
 8021884:	40021000 	.word	0x40021000
 8021888:	20000004 	.word	0x20000004

0802188c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802188c:	490f      	ldr	r1, [pc, #60]	; (80218cc <SystemInit+0x40>)
 802188e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8021892:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 802189a:	4b0d      	ldr	r3, [pc, #52]	; (80218d0 <SystemInit+0x44>)
 802189c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802189e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80218a0:	f042 0201 	orr.w	r2, r2, #1
 80218a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80218a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80218a8:	681a      	ldr	r2, [r3, #0]
 80218aa:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80218ae:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80218b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80218b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80218b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80218ba:	681a      	ldr	r2, [r3, #0]
 80218bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80218c0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80218c2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80218c4:	4b03      	ldr	r3, [pc, #12]	; (80218d4 <SystemInit+0x48>)
 80218c6:	608b      	str	r3, [r1, #8]
#endif
}
 80218c8:	4770      	bx	lr
 80218ca:	bf00      	nop
 80218cc:	e000ed00 	.word	0xe000ed00
 80218d0:	40021000 	.word	0x40021000
 80218d4:	08020000 	.word	0x08020000

080218d8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80218d8:	4770      	bx	lr
	...

080218dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80218dc:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80218de:	4e0f      	ldr	r6, [pc, #60]	; (802191c <HAL_InitTick+0x40>)
{
 80218e0:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80218e2:	7830      	ldrb	r0, [r6, #0]
 80218e4:	b908      	cbnz	r0, 80218ea <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80218e6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80218e8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80218ea:	4a0d      	ldr	r2, [pc, #52]	; (8021920 <HAL_InitTick+0x44>)
 80218ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80218f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80218f4:	6810      	ldr	r0, [r2, #0]
 80218f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80218fa:	f000 f89b 	bl	8021a34 <HAL_SYSTICK_Config>
 80218fe:	4604      	mov	r4, r0
 8021900:	2800      	cmp	r0, #0
 8021902:	d1f0      	bne.n	80218e6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021904:	2d0f      	cmp	r5, #15
 8021906:	d8ee      	bhi.n	80218e6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021908:	4602      	mov	r2, r0
 802190a:	4629      	mov	r1, r5
 802190c:	f04f 30ff 	mov.w	r0, #4294967295
 8021910:	f000 f850 	bl	80219b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021914:	6075      	str	r5, [r6, #4]
 8021916:	4620      	mov	r0, r4
 8021918:	e7e6      	b.n	80218e8 <HAL_InitTick+0xc>
 802191a:	bf00      	nop
 802191c:	2000001c 	.word	0x2000001c
 8021920:	20000018 	.word	0x20000018

08021924 <HAL_Init>:
{
 8021924:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021926:	2003      	movs	r0, #3
 8021928:	f000 f832 	bl	8021990 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802192c:	200f      	movs	r0, #15
 802192e:	f7ff ffd5 	bl	80218dc <HAL_InitTick>
 8021932:	4604      	mov	r4, r0
 8021934:	b918      	cbnz	r0, 802193e <HAL_Init+0x1a>
    HAL_MspInit();
 8021936:	f7ff ffcf 	bl	80218d8 <HAL_MspInit>
}
 802193a:	4620      	mov	r0, r4
 802193c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 802193e:	2401      	movs	r4, #1
 8021940:	e7fb      	b.n	802193a <HAL_Init+0x16>
	...

08021944 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8021944:	4a03      	ldr	r2, [pc, #12]	; (8021954 <HAL_IncTick+0x10>)
 8021946:	4b04      	ldr	r3, [pc, #16]	; (8021958 <HAL_IncTick+0x14>)
 8021948:	6811      	ldr	r1, [r2, #0]
 802194a:	781b      	ldrb	r3, [r3, #0]
 802194c:	440b      	add	r3, r1
 802194e:	6013      	str	r3, [r2, #0]
}
 8021950:	4770      	bx	lr
 8021952:	bf00      	nop
 8021954:	20000d60 	.word	0x20000d60
 8021958:	2000001c 	.word	0x2000001c

0802195c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 802195c:	4b01      	ldr	r3, [pc, #4]	; (8021964 <HAL_GetTick+0x8>)
 802195e:	6818      	ldr	r0, [r3, #0]
}
 8021960:	4770      	bx	lr
 8021962:	bf00      	nop
 8021964:	20000d60 	.word	0x20000d60

08021968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021968:	b538      	push	{r3, r4, r5, lr}
 802196a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 802196c:	f7ff fff6 	bl	802195c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8021970:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8021972:	bf1c      	itt	ne
 8021974:	4b05      	ldrne	r3, [pc, #20]	; (802198c <HAL_Delay+0x24>)
 8021976:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8021978:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 802197a:	bf18      	it	ne
 802197c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802197e:	f7ff ffed 	bl	802195c <HAL_GetTick>
 8021982:	1b43      	subs	r3, r0, r5
 8021984:	42a3      	cmp	r3, r4
 8021986:	d3fa      	bcc.n	802197e <HAL_Delay+0x16>
  {
  }
}
 8021988:	bd38      	pop	{r3, r4, r5, pc}
 802198a:	bf00      	nop
 802198c:	2000001c 	.word	0x2000001c

08021990 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8021990:	4907      	ldr	r1, [pc, #28]	; (80219b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8021992:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8021994:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8021998:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802199a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802199c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80219a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80219a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80219a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80219a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80219ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80219ae:	4770      	bx	lr
 80219b0:	e000ed00 	.word	0xe000ed00

080219b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80219b4:	4b16      	ldr	r3, [pc, #88]	; (8021a10 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80219b6:	b530      	push	{r4, r5, lr}
 80219b8:	68dc      	ldr	r4, [r3, #12]
 80219ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80219be:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80219c2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80219c4:	2d04      	cmp	r5, #4
 80219c6:	bf28      	it	cs
 80219c8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80219ca:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80219cc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80219d0:	bf8c      	ite	hi
 80219d2:	3c03      	subhi	r4, #3
 80219d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80219d6:	fa03 f505 	lsl.w	r5, r3, r5
 80219da:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80219de:	40a3      	lsls	r3, r4
 80219e0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80219e4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80219e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80219e8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80219ec:	bfac      	ite	ge
 80219ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80219f2:	4a08      	ldrlt	r2, [pc, #32]	; (8021a14 <HAL_NVIC_SetPriority+0x60>)
 80219f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80219f8:	bfb8      	it	lt
 80219fa:	f000 000f 	andlt.w	r0, r0, #15
 80219fe:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021a00:	bfaa      	itet	ge
 8021a02:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021a06:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021a08:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8021a0c:	bd30      	pop	{r4, r5, pc}
 8021a0e:	bf00      	nop
 8021a10:	e000ed00 	.word	0xe000ed00
 8021a14:	e000ed14 	.word	0xe000ed14

08021a18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8021a18:	2800      	cmp	r0, #0
 8021a1a:	db08      	blt.n	8021a2e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021a1c:	2301      	movs	r3, #1
 8021a1e:	0942      	lsrs	r2, r0, #5
 8021a20:	f000 001f 	and.w	r0, r0, #31
 8021a24:	fa03 f000 	lsl.w	r0, r3, r0
 8021a28:	4b01      	ldr	r3, [pc, #4]	; (8021a30 <HAL_NVIC_EnableIRQ+0x18>)
 8021a2a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8021a2e:	4770      	bx	lr
 8021a30:	e000e100 	.word	0xe000e100

08021a34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8021a34:	3801      	subs	r0, #1
 8021a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8021a3a:	d20a      	bcs.n	8021a52 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8021a3c:	4b06      	ldr	r3, [pc, #24]	; (8021a58 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021a3e:	4a07      	ldr	r2, [pc, #28]	; (8021a5c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8021a40:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021a42:	21f0      	movs	r1, #240	; 0xf0
 8021a44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021a48:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8021a4a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021a4c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8021a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8021a50:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8021a52:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8021a54:	4770      	bx	lr
 8021a56:	bf00      	nop
 8021a58:	e000e010 	.word	0xe000e010
 8021a5c:	e000ed00 	.word	0xe000ed00

08021a60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8021a60:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8021a62:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8021a66:	2a02      	cmp	r2, #2
 8021a68:	d003      	beq.n	8021a72 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8021a6a:	2204      	movs	r2, #4
 8021a6c:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8021a6e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8021a70:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8021a72:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8021a74:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8021a76:	6811      	ldr	r1, [r2, #0]
 8021a78:	f021 010e 	bic.w	r1, r1, #14
 8021a7c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8021a7e:	6811      	ldr	r1, [r2, #0]
 8021a80:	f021 0101 	bic.w	r1, r1, #1
 8021a84:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8021a86:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8021a8a:	2101      	movs	r1, #1
 8021a8c:	f002 021c 	and.w	r2, r2, #28
 8021a90:	fa01 f202 	lsl.w	r2, r1, r2
 8021a94:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8021a96:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8021a98:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8021a9c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8021aa0:	b113      	cbz	r3, 8021aa8 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8021aa2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8021aa4:	4620      	mov	r0, r4
 8021aa6:	e7e3      	b.n	8021a70 <HAL_DMA_Abort_IT+0x10>
 8021aa8:	4618      	mov	r0, r3
 8021aaa:	e7e1      	b.n	8021a70 <HAL_DMA_Abort_IT+0x10>

08021aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8021aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021ab0:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8021c64 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8021ab4:	4d69      	ldr	r5, [pc, #420]	; (8021c5c <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8021ab6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8021ab8:	680a      	ldr	r2, [r1, #0]
 8021aba:	fa32 f403 	lsrs.w	r4, r2, r3
 8021abe:	d102      	bne.n	8021ac6 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8021ac0:	b003      	add	sp, #12
 8021ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8021ac6:	f04f 0a01 	mov.w	sl, #1
 8021aca:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 8021ace:	ea1a 0202 	ands.w	r2, sl, r2
 8021ad2:	f000 80b4 	beq.w	8021c3e <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021ad6:	684c      	ldr	r4, [r1, #4]
 8021ad8:	f024 0e10 	bic.w	lr, r4, #16
 8021adc:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8021ae0:	2603      	movs	r6, #3
 8021ae2:	f10e 37ff 	add.w	r7, lr, #4294967295
 8021ae6:	fa06 f608 	lsl.w	r6, r6, r8
 8021aea:	2f01      	cmp	r7, #1
 8021aec:	ea6f 0606 	mvn.w	r6, r6
 8021af0:	d811      	bhi.n	8021b16 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8021af2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8021af4:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8021af8:	68cf      	ldr	r7, [r1, #12]
 8021afa:	fa07 f708 	lsl.w	r7, r7, r8
 8021afe:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8021b02:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8021b04:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8021b06:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8021b0a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8021b0e:	409f      	lsls	r7, r3
 8021b10:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8021b14:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8021b16:	f004 0c03 	and.w	ip, r4, #3
 8021b1a:	f1bc 0f03 	cmp.w	ip, #3
 8021b1e:	d108      	bne.n	8021b32 <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 8021b20:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8021b22:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8021b26:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8021b2a:	409f      	lsls	r7, r3
 8021b2c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8021b30:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8021b32:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8021b34:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8021b38:	688f      	ldr	r7, [r1, #8]
 8021b3a:	fa07 f708 	lsl.w	r7, r7, r8
 8021b3e:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021b42:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8021b46:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021b48:	d116      	bne.n	8021b78 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 8021b4a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8021b4e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8021b52:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8021b56:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8021b5a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8021b5e:	f04f 0e0f 	mov.w	lr, #15
 8021b62:	fa0e fe0b 	lsl.w	lr, lr, fp
 8021b66:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8021b6a:	690f      	ldr	r7, [r1, #16]
 8021b6c:	fa07 f70b 	lsl.w	r7, r7, fp
 8021b70:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8021b74:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8021b78:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8021b7a:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8021b7e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8021b80:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 8021b84:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8021b86:	00e6      	lsls	r6, r4, #3
 8021b88:	d559      	bpl.n	8021c3e <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021b8a:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8021b8e:	f046 0601 	orr.w	r6, r6, #1
 8021b92:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8021b96:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8021b9a:	f023 0703 	bic.w	r7, r3, #3
 8021b9e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8021ba2:	f006 0601 	and.w	r6, r6, #1
 8021ba6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8021baa:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8021bac:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021bb0:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8021bb2:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8021bb4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8021bb8:	f04f 0c0f 	mov.w	ip, #15
 8021bbc:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8021bc0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8021bc4:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8021bc8:	d03b      	beq.n	8021c42 <HAL_GPIO_Init+0x196>
 8021bca:	4e25      	ldr	r6, [pc, #148]	; (8021c60 <HAL_GPIO_Init+0x1b4>)
 8021bcc:	42b0      	cmp	r0, r6
 8021bce:	d03a      	beq.n	8021c46 <HAL_GPIO_Init+0x19a>
 8021bd0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8021bd4:	42b0      	cmp	r0, r6
 8021bd6:	d038      	beq.n	8021c4a <HAL_GPIO_Init+0x19e>
 8021bd8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8021bdc:	42b0      	cmp	r0, r6
 8021bde:	d036      	beq.n	8021c4e <HAL_GPIO_Init+0x1a2>
 8021be0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8021be4:	42b0      	cmp	r0, r6
 8021be6:	d034      	beq.n	8021c52 <HAL_GPIO_Init+0x1a6>
 8021be8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8021bec:	42b0      	cmp	r0, r6
 8021bee:	d032      	beq.n	8021c56 <HAL_GPIO_Init+0x1aa>
 8021bf0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8021bf4:	42b0      	cmp	r0, r6
 8021bf6:	bf0c      	ite	eq
 8021bf8:	2606      	moveq	r6, #6
 8021bfa:	2607      	movne	r6, #7
 8021bfc:	fa06 f60e 	lsl.w	r6, r6, lr
 8021c00:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8021c04:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8021c06:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8021c08:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8021c0a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8021c0e:	bf0c      	ite	eq
 8021c10:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8021c12:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8021c14:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8021c16:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8021c18:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8021c1c:	bf0c      	ite	eq
 8021c1e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8021c20:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8021c22:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8021c24:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8021c26:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8021c2a:	bf0c      	ite	eq
 8021c2c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8021c2e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8021c30:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8021c32:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8021c34:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8021c36:	bf54      	ite	pl
 8021c38:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8021c3a:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8021c3c:	60ee      	str	r6, [r5, #12]
    position++;
 8021c3e:	3301      	adds	r3, #1
 8021c40:	e73a      	b.n	8021ab8 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8021c42:	2600      	movs	r6, #0
 8021c44:	e7da      	b.n	8021bfc <HAL_GPIO_Init+0x150>
 8021c46:	2601      	movs	r6, #1
 8021c48:	e7d8      	b.n	8021bfc <HAL_GPIO_Init+0x150>
 8021c4a:	2602      	movs	r6, #2
 8021c4c:	e7d6      	b.n	8021bfc <HAL_GPIO_Init+0x150>
 8021c4e:	2603      	movs	r6, #3
 8021c50:	e7d4      	b.n	8021bfc <HAL_GPIO_Init+0x150>
 8021c52:	2604      	movs	r6, #4
 8021c54:	e7d2      	b.n	8021bfc <HAL_GPIO_Init+0x150>
 8021c56:	2605      	movs	r6, #5
 8021c58:	e7d0      	b.n	8021bfc <HAL_GPIO_Init+0x150>
 8021c5a:	bf00      	nop
 8021c5c:	40010400 	.word	0x40010400
 8021c60:	48000400 	.word	0x48000400
 8021c64:	40021000 	.word	0x40021000

08021c68 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8021c68:	6903      	ldr	r3, [r0, #16]
 8021c6a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8021c6c:	bf14      	ite	ne
 8021c6e:	2001      	movne	r0, #1
 8021c70:	2000      	moveq	r0, #0
 8021c72:	4770      	bx	lr

08021c74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8021c74:	b10a      	cbz	r2, 8021c7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8021c76:	6181      	str	r1, [r0, #24]
 8021c78:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8021c7a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8021c7c:	4770      	bx	lr
	...

08021c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8021c80:	4a04      	ldr	r2, [pc, #16]	; (8021c94 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8021c82:	6951      	ldr	r1, [r2, #20]
 8021c84:	4201      	tst	r1, r0
{
 8021c86:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8021c88:	d002      	beq.n	8021c90 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8021c8a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8021c8c:	f7fe fe02 	bl	8020894 <HAL_GPIO_EXTI_Callback>
  }
}
 8021c90:	bd08      	pop	{r3, pc}
 8021c92:	bf00      	nop
 8021c94:	40010400 	.word	0x40010400

08021c98 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8021c98:	4b02      	ldr	r3, [pc, #8]	; (8021ca4 <HAL_PWREx_GetVoltageRange+0xc>)
 8021c9a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8021c9c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8021ca0:	4770      	bx	lr
 8021ca2:	bf00      	nop
 8021ca4:	40007000 	.word	0x40007000

08021ca8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8021ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8021caa:	4d1e      	ldr	r5, [pc, #120]	; (8021d24 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8021cac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8021cae:	00da      	lsls	r2, r3, #3
{
 8021cb0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8021cb2:	d518      	bpl.n	8021ce6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8021cb4:	f7ff fff0 	bl	8021c98 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8021cb8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8021cbc:	d123      	bne.n	8021d06 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8021cbe:	2c80      	cmp	r4, #128	; 0x80
 8021cc0:	d929      	bls.n	8021d16 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8021cc2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021cc4:	bf8c      	ite	hi
 8021cc6:	2402      	movhi	r4, #2
 8021cc8:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8021cca:	4917      	ldr	r1, [pc, #92]	; (8021d28 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8021ccc:	680a      	ldr	r2, [r1, #0]
 8021cce:	f022 0207 	bic.w	r2, r2, #7
 8021cd2:	4322      	orrs	r2, r4
 8021cd4:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8021cd6:	6808      	ldr	r0, [r1, #0]
 8021cd8:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8021cdc:	1b00      	subs	r0, r0, r4
 8021cde:	bf18      	it	ne
 8021ce0:	2001      	movne	r0, #1
 8021ce2:	b003      	add	sp, #12
 8021ce4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8021ce6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8021ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021cec:	65ab      	str	r3, [r5, #88]	; 0x58
 8021cee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8021cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021cf4:	9301      	str	r3, [sp, #4]
 8021cf6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8021cf8:	f7ff ffce 	bl	8021c98 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8021cfc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8021cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021d02:	65ab      	str	r3, [r5, #88]	; 0x58
 8021d04:	e7d8      	b.n	8021cb8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8021d06:	2c80      	cmp	r4, #128	; 0x80
 8021d08:	d807      	bhi.n	8021d1a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8021d0a:	d008      	beq.n	8021d1e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8021d0c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8021d10:	425c      	negs	r4, r3
 8021d12:	415c      	adcs	r4, r3
 8021d14:	e7d9      	b.n	8021cca <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8021d16:	2400      	movs	r4, #0
 8021d18:	e7d7      	b.n	8021cca <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8021d1a:	2403      	movs	r4, #3
 8021d1c:	e7d5      	b.n	8021cca <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8021d1e:	2402      	movs	r4, #2
 8021d20:	e7d3      	b.n	8021cca <RCC_SetFlashLatencyFromMSIRange+0x22>
 8021d22:	bf00      	nop
 8021d24:	40021000 	.word	0x40021000
 8021d28:	40022000 	.word	0x40022000

08021d2c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021d2c:	4b22      	ldr	r3, [pc, #136]	; (8021db8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8021d2e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021d30:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021d32:	f012 020c 	ands.w	r2, r2, #12
 8021d36:	d005      	beq.n	8021d44 <HAL_RCC_GetSysClockFreq+0x18>
 8021d38:	2a0c      	cmp	r2, #12
 8021d3a:	d115      	bne.n	8021d68 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021d3c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8021d40:	2901      	cmp	r1, #1
 8021d42:	d118      	bne.n	8021d76 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021d44:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8021d46:	481d      	ldr	r0, [pc, #116]	; (8021dbc <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021d48:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021d4a:	bf55      	itete	pl
 8021d4c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021d50:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021d52:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021d56:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8021d5a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021d5e:	b34a      	cbz	r2, 8021db4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8021d60:	2a0c      	cmp	r2, #12
 8021d62:	d009      	beq.n	8021d78 <HAL_RCC_GetSysClockFreq+0x4c>
 8021d64:	2000      	movs	r0, #0
  return sysclockfreq;
 8021d66:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8021d68:	2a04      	cmp	r2, #4
 8021d6a:	d022      	beq.n	8021db2 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8021d6c:	2a08      	cmp	r2, #8
 8021d6e:	4814      	ldr	r0, [pc, #80]	; (8021dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8021d70:	bf18      	it	ne
 8021d72:	2000      	movne	r0, #0
 8021d74:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8021d76:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8021d78:	68da      	ldr	r2, [r3, #12]
 8021d7a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8021d7e:	2a02      	cmp	r2, #2
 8021d80:	d015      	beq.n	8021dae <HAL_RCC_GetSysClockFreq+0x82>
 8021d82:	490f      	ldr	r1, [pc, #60]	; (8021dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8021d84:	2a03      	cmp	r2, #3
 8021d86:	bf08      	it	eq
 8021d88:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021d8a:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021d8c:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021d8e:	68db      	ldr	r3, [r3, #12]
 8021d90:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021d94:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021d98:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021d9c:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021d9e:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021da0:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021da2:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021da4:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8021da8:	fbb0 f0f3 	udiv	r0, r0, r3
 8021dac:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8021dae:	4805      	ldr	r0, [pc, #20]	; (8021dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8021db0:	e7eb      	b.n	8021d8a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8021db2:	4804      	ldr	r0, [pc, #16]	; (8021dc4 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8021db4:	4770      	bx	lr
 8021db6:	bf00      	nop
 8021db8:	40021000 	.word	0x40021000
 8021dbc:	08025188 	.word	0x08025188
 8021dc0:	007a1200 	.word	0x007a1200
 8021dc4:	00f42400 	.word	0x00f42400

08021dc8 <HAL_RCC_OscConfig>:
{
 8021dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8021dcc:	4605      	mov	r5, r0
 8021dce:	b918      	cbnz	r0, 8021dd8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8021dd0:	2001      	movs	r0, #1
}
 8021dd2:	b003      	add	sp, #12
 8021dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021dd8:	4ca7      	ldr	r4, [pc, #668]	; (8022078 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021dda:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021ddc:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021dde:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021de0:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021de2:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021de6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021dea:	d53d      	bpl.n	8021e68 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021dec:	b11e      	cbz	r6, 8021df6 <HAL_RCC_OscConfig+0x2e>
 8021dee:	2e0c      	cmp	r6, #12
 8021df0:	d166      	bne.n	8021ec0 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8021df2:	2f01      	cmp	r7, #1
 8021df4:	d164      	bne.n	8021ec0 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021df6:	6823      	ldr	r3, [r4, #0]
 8021df8:	0799      	lsls	r1, r3, #30
 8021dfa:	d502      	bpl.n	8021e02 <HAL_RCC_OscConfig+0x3a>
 8021dfc:	69ab      	ldr	r3, [r5, #24]
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	d0e6      	beq.n	8021dd0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8021e02:	6823      	ldr	r3, [r4, #0]
 8021e04:	6a28      	ldr	r0, [r5, #32]
 8021e06:	071a      	lsls	r2, r3, #28
 8021e08:	bf56      	itet	pl
 8021e0a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8021e0e:	6823      	ldrmi	r3, [r4, #0]
 8021e10:	091b      	lsrpl	r3, r3, #4
 8021e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021e16:	4298      	cmp	r0, r3
 8021e18:	d93b      	bls.n	8021e92 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021e1a:	f7ff ff45 	bl	8021ca8 <RCC_SetFlashLatencyFromMSIRange>
 8021e1e:	2800      	cmp	r0, #0
 8021e20:	d1d6      	bne.n	8021dd0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021e22:	6823      	ldr	r3, [r4, #0]
 8021e24:	f043 0308 	orr.w	r3, r3, #8
 8021e28:	6023      	str	r3, [r4, #0]
 8021e2a:	6823      	ldr	r3, [r4, #0]
 8021e2c:	6a2a      	ldr	r2, [r5, #32]
 8021e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021e32:	4313      	orrs	r3, r2
 8021e34:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021e36:	6863      	ldr	r3, [r4, #4]
 8021e38:	69ea      	ldr	r2, [r5, #28]
 8021e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021e42:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021e44:	f7ff ff72 	bl	8021d2c <HAL_RCC_GetSysClockFreq>
 8021e48:	68a3      	ldr	r3, [r4, #8]
 8021e4a:	4a8c      	ldr	r2, [pc, #560]	; (802207c <HAL_RCC_OscConfig+0x2b4>)
 8021e4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8021e50:	5cd3      	ldrb	r3, [r2, r3]
 8021e52:	f003 031f 	and.w	r3, r3, #31
 8021e56:	40d8      	lsrs	r0, r3
 8021e58:	4b89      	ldr	r3, [pc, #548]	; (8022080 <HAL_RCC_OscConfig+0x2b8>)
 8021e5a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8021e5c:	4b89      	ldr	r3, [pc, #548]	; (8022084 <HAL_RCC_OscConfig+0x2bc>)
 8021e5e:	6818      	ldr	r0, [r3, #0]
 8021e60:	f7ff fd3c 	bl	80218dc <HAL_InitTick>
        if(status != HAL_OK)
 8021e64:	2800      	cmp	r0, #0
 8021e66:	d1b4      	bne.n	8021dd2 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021e68:	682b      	ldr	r3, [r5, #0]
 8021e6a:	07d9      	lsls	r1, r3, #31
 8021e6c:	d45f      	bmi.n	8021f2e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021e6e:	682b      	ldr	r3, [r5, #0]
 8021e70:	079a      	lsls	r2, r3, #30
 8021e72:	f100 809e 	bmi.w	8021fb2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021e76:	682b      	ldr	r3, [r5, #0]
 8021e78:	0719      	lsls	r1, r3, #28
 8021e7a:	f100 80d2 	bmi.w	8022022 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021e7e:	682b      	ldr	r3, [r5, #0]
 8021e80:	075a      	lsls	r2, r3, #29
 8021e82:	f100 8101 	bmi.w	8022088 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8021e86:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	f040 816a 	bne.w	8022162 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8021e8e:	2000      	movs	r0, #0
 8021e90:	e79f      	b.n	8021dd2 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021e92:	6823      	ldr	r3, [r4, #0]
 8021e94:	f043 0308 	orr.w	r3, r3, #8
 8021e98:	6023      	str	r3, [r4, #0]
 8021e9a:	6823      	ldr	r3, [r4, #0]
 8021e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021ea0:	4303      	orrs	r3, r0
 8021ea2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021ea4:	6863      	ldr	r3, [r4, #4]
 8021ea6:	69ea      	ldr	r2, [r5, #28]
 8021ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021eac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021eb0:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021eb2:	2e00      	cmp	r6, #0
 8021eb4:	d1c6      	bne.n	8021e44 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021eb6:	f7ff fef7 	bl	8021ca8 <RCC_SetFlashLatencyFromMSIRange>
 8021eba:	2800      	cmp	r0, #0
 8021ebc:	d0c2      	beq.n	8021e44 <HAL_RCC_OscConfig+0x7c>
 8021ebe:	e787      	b.n	8021dd0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8021ec0:	69ab      	ldr	r3, [r5, #24]
 8021ec2:	b31b      	cbz	r3, 8021f0c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8021ec4:	6823      	ldr	r3, [r4, #0]
 8021ec6:	f043 0301 	orr.w	r3, r3, #1
 8021eca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8021ecc:	f7ff fd46 	bl	802195c <HAL_GetTick>
 8021ed0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021ed2:	6823      	ldr	r3, [r4, #0]
 8021ed4:	079b      	lsls	r3, r3, #30
 8021ed6:	d511      	bpl.n	8021efc <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021ed8:	6823      	ldr	r3, [r4, #0]
 8021eda:	f043 0308 	orr.w	r3, r3, #8
 8021ede:	6023      	str	r3, [r4, #0]
 8021ee0:	6823      	ldr	r3, [r4, #0]
 8021ee2:	6a2a      	ldr	r2, [r5, #32]
 8021ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021ee8:	4313      	orrs	r3, r2
 8021eea:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021eec:	6863      	ldr	r3, [r4, #4]
 8021eee:	69ea      	ldr	r2, [r5, #28]
 8021ef0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021ef4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021ef8:	6063      	str	r3, [r4, #4]
 8021efa:	e7b5      	b.n	8021e68 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021efc:	f7ff fd2e 	bl	802195c <HAL_GetTick>
 8021f00:	eba0 0008 	sub.w	r0, r0, r8
 8021f04:	2802      	cmp	r0, #2
 8021f06:	d9e4      	bls.n	8021ed2 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8021f08:	2003      	movs	r0, #3
 8021f0a:	e762      	b.n	8021dd2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8021f0c:	6823      	ldr	r3, [r4, #0]
 8021f0e:	f023 0301 	bic.w	r3, r3, #1
 8021f12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8021f14:	f7ff fd22 	bl	802195c <HAL_GetTick>
 8021f18:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021f1a:	6823      	ldr	r3, [r4, #0]
 8021f1c:	0798      	lsls	r0, r3, #30
 8021f1e:	d5a3      	bpl.n	8021e68 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021f20:	f7ff fd1c 	bl	802195c <HAL_GetTick>
 8021f24:	eba0 0008 	sub.w	r0, r0, r8
 8021f28:	2802      	cmp	r0, #2
 8021f2a:	d9f6      	bls.n	8021f1a <HAL_RCC_OscConfig+0x152>
 8021f2c:	e7ec      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8021f2e:	2e08      	cmp	r6, #8
 8021f30:	d003      	beq.n	8021f3a <HAL_RCC_OscConfig+0x172>
 8021f32:	2e0c      	cmp	r6, #12
 8021f34:	d108      	bne.n	8021f48 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8021f36:	2f03      	cmp	r7, #3
 8021f38:	d106      	bne.n	8021f48 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021f3a:	6823      	ldr	r3, [r4, #0]
 8021f3c:	039b      	lsls	r3, r3, #14
 8021f3e:	d596      	bpl.n	8021e6e <HAL_RCC_OscConfig+0xa6>
 8021f40:	686b      	ldr	r3, [r5, #4]
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	d193      	bne.n	8021e6e <HAL_RCC_OscConfig+0xa6>
 8021f46:	e743      	b.n	8021dd0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021f48:	686b      	ldr	r3, [r5, #4]
 8021f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021f4e:	d110      	bne.n	8021f72 <HAL_RCC_OscConfig+0x1aa>
 8021f50:	6823      	ldr	r3, [r4, #0]
 8021f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021f56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8021f58:	f7ff fd00 	bl	802195c <HAL_GetTick>
 8021f5c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021f5e:	6823      	ldr	r3, [r4, #0]
 8021f60:	0398      	lsls	r0, r3, #14
 8021f62:	d484      	bmi.n	8021e6e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021f64:	f7ff fcfa 	bl	802195c <HAL_GetTick>
 8021f68:	eba0 0008 	sub.w	r0, r0, r8
 8021f6c:	2864      	cmp	r0, #100	; 0x64
 8021f6e:	d9f6      	bls.n	8021f5e <HAL_RCC_OscConfig+0x196>
 8021f70:	e7ca      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021f76:	d104      	bne.n	8021f82 <HAL_RCC_OscConfig+0x1ba>
 8021f78:	6823      	ldr	r3, [r4, #0]
 8021f7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021f7e:	6023      	str	r3, [r4, #0]
 8021f80:	e7e6      	b.n	8021f50 <HAL_RCC_OscConfig+0x188>
 8021f82:	6822      	ldr	r2, [r4, #0]
 8021f84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8021f88:	6022      	str	r2, [r4, #0]
 8021f8a:	6822      	ldr	r2, [r4, #0]
 8021f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8021f90:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	d1e0      	bne.n	8021f58 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8021f96:	f7ff fce1 	bl	802195c <HAL_GetTick>
 8021f9a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021f9c:	6823      	ldr	r3, [r4, #0]
 8021f9e:	0399      	lsls	r1, r3, #14
 8021fa0:	f57f af65 	bpl.w	8021e6e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021fa4:	f7ff fcda 	bl	802195c <HAL_GetTick>
 8021fa8:	eba0 0008 	sub.w	r0, r0, r8
 8021fac:	2864      	cmp	r0, #100	; 0x64
 8021fae:	d9f5      	bls.n	8021f9c <HAL_RCC_OscConfig+0x1d4>
 8021fb0:	e7aa      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8021fb2:	2e04      	cmp	r6, #4
 8021fb4:	d003      	beq.n	8021fbe <HAL_RCC_OscConfig+0x1f6>
 8021fb6:	2e0c      	cmp	r6, #12
 8021fb8:	d110      	bne.n	8021fdc <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8021fba:	2f02      	cmp	r7, #2
 8021fbc:	d10e      	bne.n	8021fdc <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021fbe:	6823      	ldr	r3, [r4, #0]
 8021fc0:	055a      	lsls	r2, r3, #21
 8021fc2:	d503      	bpl.n	8021fcc <HAL_RCC_OscConfig+0x204>
 8021fc4:	68eb      	ldr	r3, [r5, #12]
 8021fc6:	2b00      	cmp	r3, #0
 8021fc8:	f43f af02 	beq.w	8021dd0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021fcc:	6863      	ldr	r3, [r4, #4]
 8021fce:	692a      	ldr	r2, [r5, #16]
 8021fd0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8021fd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8021fd8:	6063      	str	r3, [r4, #4]
 8021fda:	e74c      	b.n	8021e76 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8021fdc:	68eb      	ldr	r3, [r5, #12]
 8021fde:	b17b      	cbz	r3, 8022000 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8021fe0:	6823      	ldr	r3, [r4, #0]
 8021fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021fe6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8021fe8:	f7ff fcb8 	bl	802195c <HAL_GetTick>
 8021fec:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021fee:	6823      	ldr	r3, [r4, #0]
 8021ff0:	055b      	lsls	r3, r3, #21
 8021ff2:	d4eb      	bmi.n	8021fcc <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021ff4:	f7ff fcb2 	bl	802195c <HAL_GetTick>
 8021ff8:	1bc0      	subs	r0, r0, r7
 8021ffa:	2802      	cmp	r0, #2
 8021ffc:	d9f7      	bls.n	8021fee <HAL_RCC_OscConfig+0x226>
 8021ffe:	e783      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8022000:	6823      	ldr	r3, [r4, #0]
 8022002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8022006:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8022008:	f7ff fca8 	bl	802195c <HAL_GetTick>
 802200c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 802200e:	6823      	ldr	r3, [r4, #0]
 8022010:	0558      	lsls	r0, r3, #21
 8022012:	f57f af30 	bpl.w	8021e76 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8022016:	f7ff fca1 	bl	802195c <HAL_GetTick>
 802201a:	1bc0      	subs	r0, r0, r7
 802201c:	2802      	cmp	r0, #2
 802201e:	d9f6      	bls.n	802200e <HAL_RCC_OscConfig+0x246>
 8022020:	e772      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8022022:	696b      	ldr	r3, [r5, #20]
 8022024:	b19b      	cbz	r3, 802204e <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8022026:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 802202a:	f043 0301 	orr.w	r3, r3, #1
 802202e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8022032:	f7ff fc93 	bl	802195c <HAL_GetTick>
 8022036:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8022038:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 802203c:	079b      	lsls	r3, r3, #30
 802203e:	f53f af1e 	bmi.w	8021e7e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8022042:	f7ff fc8b 	bl	802195c <HAL_GetTick>
 8022046:	1bc0      	subs	r0, r0, r7
 8022048:	2802      	cmp	r0, #2
 802204a:	d9f5      	bls.n	8022038 <HAL_RCC_OscConfig+0x270>
 802204c:	e75c      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 802204e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8022052:	f023 0301 	bic.w	r3, r3, #1
 8022056:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 802205a:	f7ff fc7f 	bl	802195c <HAL_GetTick>
 802205e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8022060:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8022064:	0798      	lsls	r0, r3, #30
 8022066:	f57f af0a 	bpl.w	8021e7e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802206a:	f7ff fc77 	bl	802195c <HAL_GetTick>
 802206e:	1bc0      	subs	r0, r0, r7
 8022070:	2802      	cmp	r0, #2
 8022072:	d9f5      	bls.n	8022060 <HAL_RCC_OscConfig+0x298>
 8022074:	e748      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
 8022076:	bf00      	nop
 8022078:	40021000 	.word	0x40021000
 802207c:	080251b8 	.word	0x080251b8
 8022080:	20000018 	.word	0x20000018
 8022084:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8022088:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802208a:	00d9      	lsls	r1, r3, #3
 802208c:	d429      	bmi.n	80220e2 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 802208e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022094:	65a3      	str	r3, [r4, #88]	; 0x58
 8022096:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802209c:	9301      	str	r3, [sp, #4]
 802209e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80220a0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80220a4:	4f89      	ldr	r7, [pc, #548]	; (80222cc <HAL_RCC_OscConfig+0x504>)
 80220a6:	683b      	ldr	r3, [r7, #0]
 80220a8:	05da      	lsls	r2, r3, #23
 80220aa:	d51d      	bpl.n	80220e8 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80220ac:	68ab      	ldr	r3, [r5, #8]
 80220ae:	2b01      	cmp	r3, #1
 80220b0:	d12b      	bne.n	802210a <HAL_RCC_OscConfig+0x342>
 80220b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80220b6:	f043 0301 	orr.w	r3, r3, #1
 80220ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80220be:	f7ff fc4d 	bl	802195c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80220c2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80220c6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80220c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80220cc:	0798      	lsls	r0, r3, #30
 80220ce:	d542      	bpl.n	8022156 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 80220d0:	f1b8 0f00 	cmp.w	r8, #0
 80220d4:	f43f aed7 	beq.w	8021e86 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80220d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80220da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80220de:	65a3      	str	r3, [r4, #88]	; 0x58
 80220e0:	e6d1      	b.n	8021e86 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80220e2:	f04f 0800 	mov.w	r8, #0
 80220e6:	e7dd      	b.n	80220a4 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80220e8:	683b      	ldr	r3, [r7, #0]
 80220ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80220ee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80220f0:	f7ff fc34 	bl	802195c <HAL_GetTick>
 80220f4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80220f6:	683b      	ldr	r3, [r7, #0]
 80220f8:	05db      	lsls	r3, r3, #23
 80220fa:	d4d7      	bmi.n	80220ac <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80220fc:	f7ff fc2e 	bl	802195c <HAL_GetTick>
 8022100:	eba0 0009 	sub.w	r0, r0, r9
 8022104:	2802      	cmp	r0, #2
 8022106:	d9f6      	bls.n	80220f6 <HAL_RCC_OscConfig+0x32e>
 8022108:	e6fe      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802210a:	2b05      	cmp	r3, #5
 802210c:	d106      	bne.n	802211c <HAL_RCC_OscConfig+0x354>
 802210e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8022112:	f043 0304 	orr.w	r3, r3, #4
 8022116:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 802211a:	e7ca      	b.n	80220b2 <HAL_RCC_OscConfig+0x2ea>
 802211c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8022120:	f022 0201 	bic.w	r2, r2, #1
 8022124:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8022128:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 802212c:	f022 0204 	bic.w	r2, r2, #4
 8022130:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8022134:	2b00      	cmp	r3, #0
 8022136:	d1c2      	bne.n	80220be <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8022138:	f7ff fc10 	bl	802195c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802213c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8022140:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8022142:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8022146:	0799      	lsls	r1, r3, #30
 8022148:	d5c2      	bpl.n	80220d0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802214a:	f7ff fc07 	bl	802195c <HAL_GetTick>
 802214e:	1bc0      	subs	r0, r0, r7
 8022150:	4548      	cmp	r0, r9
 8022152:	d9f6      	bls.n	8022142 <HAL_RCC_OscConfig+0x37a>
 8022154:	e6d8      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022156:	f7ff fc01 	bl	802195c <HAL_GetTick>
 802215a:	1bc0      	subs	r0, r0, r7
 802215c:	4548      	cmp	r0, r9
 802215e:	d9b3      	bls.n	80220c8 <HAL_RCC_OscConfig+0x300>
 8022160:	e6d2      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8022162:	2b02      	cmp	r3, #2
 8022164:	f040 808f 	bne.w	8022286 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8022168:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 802216a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 802216c:	f003 0103 	and.w	r1, r3, #3
 8022170:	4291      	cmp	r1, r2
 8022172:	d124      	bne.n	80221be <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8022174:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8022176:	f003 0270 	and.w	r2, r3, #112	; 0x70
 802217a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 802217c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8022180:	d11d      	bne.n	80221be <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8022182:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8022184:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8022188:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 802218c:	d117      	bne.n	80221be <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 802218e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8022190:	3a07      	subs	r2, #7
 8022192:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8022196:	bf18      	it	ne
 8022198:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 802219a:	4291      	cmp	r1, r2
 802219c:	d10f      	bne.n	80221be <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 802219e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80221a0:	0852      	lsrs	r2, r2, #1
 80221a2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80221a6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80221a8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80221ac:	d107      	bne.n	80221be <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80221ae:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80221b0:	0852      	lsrs	r2, r2, #1
 80221b2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80221b6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80221b8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80221bc:	d04a      	beq.n	8022254 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80221be:	2e0c      	cmp	r6, #12
 80221c0:	f43f ae06 	beq.w	8021dd0 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80221c4:	6823      	ldr	r3, [r4, #0]
 80221c6:	015a      	lsls	r2, r3, #5
 80221c8:	f53f ae02 	bmi.w	8021dd0 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80221cc:	6823      	ldr	r3, [r4, #0]
 80221ce:	00db      	lsls	r3, r3, #3
 80221d0:	f53f adfe 	bmi.w	8021dd0 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80221d4:	6823      	ldr	r3, [r4, #0]
 80221d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80221da:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80221dc:	f7ff fbbe 	bl	802195c <HAL_GetTick>
 80221e0:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80221e2:	6823      	ldr	r3, [r4, #0]
 80221e4:	019f      	lsls	r7, r3, #6
 80221e6:	d42f      	bmi.n	8022248 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80221e8:	68e2      	ldr	r2, [r4, #12]
 80221ea:	4b39      	ldr	r3, [pc, #228]	; (80222d0 <HAL_RCC_OscConfig+0x508>)
 80221ec:	4013      	ands	r3, r2
 80221ee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80221f0:	4313      	orrs	r3, r2
 80221f2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80221f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80221f8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80221fa:	3a01      	subs	r2, #1
 80221fc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8022200:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8022202:	0912      	lsrs	r2, r2, #4
 8022204:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8022208:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 802220a:	0852      	lsrs	r2, r2, #1
 802220c:	3a01      	subs	r2, #1
 802220e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8022212:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8022214:	0852      	lsrs	r2, r2, #1
 8022216:	3a01      	subs	r2, #1
 8022218:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 802221c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 802221e:	6823      	ldr	r3, [r4, #0]
 8022220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8022224:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8022226:	68e3      	ldr	r3, [r4, #12]
 8022228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802222c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 802222e:	f7ff fb95 	bl	802195c <HAL_GetTick>
 8022232:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022234:	6823      	ldr	r3, [r4, #0]
 8022236:	0198      	lsls	r0, r3, #6
 8022238:	f53f ae29 	bmi.w	8021e8e <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802223c:	f7ff fb8e 	bl	802195c <HAL_GetTick>
 8022240:	1b40      	subs	r0, r0, r5
 8022242:	2802      	cmp	r0, #2
 8022244:	d9f6      	bls.n	8022234 <HAL_RCC_OscConfig+0x46c>
 8022246:	e65f      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022248:	f7ff fb88 	bl	802195c <HAL_GetTick>
 802224c:	1b80      	subs	r0, r0, r6
 802224e:	2802      	cmp	r0, #2
 8022250:	d9c7      	bls.n	80221e2 <HAL_RCC_OscConfig+0x41a>
 8022252:	e659      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022254:	6823      	ldr	r3, [r4, #0]
 8022256:	0199      	lsls	r1, r3, #6
 8022258:	f53f ae19 	bmi.w	8021e8e <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 802225c:	6823      	ldr	r3, [r4, #0]
 802225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8022262:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8022264:	68e3      	ldr	r3, [r4, #12]
 8022266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802226a:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 802226c:	f7ff fb76 	bl	802195c <HAL_GetTick>
 8022270:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022272:	6823      	ldr	r3, [r4, #0]
 8022274:	019a      	lsls	r2, r3, #6
 8022276:	f53f ae0a 	bmi.w	8021e8e <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802227a:	f7ff fb6f 	bl	802195c <HAL_GetTick>
 802227e:	1b40      	subs	r0, r0, r5
 8022280:	2802      	cmp	r0, #2
 8022282:	d9f6      	bls.n	8022272 <HAL_RCC_OscConfig+0x4aa>
 8022284:	e640      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8022286:	2e0c      	cmp	r6, #12
 8022288:	f43f ada2 	beq.w	8021dd0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 802228c:	6823      	ldr	r3, [r4, #0]
 802228e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8022292:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8022294:	6823      	ldr	r3, [r4, #0]
 8022296:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 802229a:	bf02      	ittt	eq
 802229c:	68e3      	ldreq	r3, [r4, #12]
 802229e:	f023 0303 	biceq.w	r3, r3, #3
 80222a2:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80222a4:	68e3      	ldr	r3, [r4, #12]
 80222a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80222aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80222ae:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80222b0:	f7ff fb54 	bl	802195c <HAL_GetTick>
 80222b4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80222b6:	6823      	ldr	r3, [r4, #0]
 80222b8:	019b      	lsls	r3, r3, #6
 80222ba:	f57f ade8 	bpl.w	8021e8e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80222be:	f7ff fb4d 	bl	802195c <HAL_GetTick>
 80222c2:	1b40      	subs	r0, r0, r5
 80222c4:	2802      	cmp	r0, #2
 80222c6:	d9f6      	bls.n	80222b6 <HAL_RCC_OscConfig+0x4ee>
 80222c8:	e61e      	b.n	8021f08 <HAL_RCC_OscConfig+0x140>
 80222ca:	bf00      	nop
 80222cc:	40007000 	.word	0x40007000
 80222d0:	f99d808c 	.word	0xf99d808c

080222d4 <HAL_RCC_ClockConfig>:
{
 80222d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222d8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80222da:	4604      	mov	r4, r0
 80222dc:	b910      	cbnz	r0, 80222e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80222de:	2001      	movs	r0, #1
}
 80222e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80222e4:	4a40      	ldr	r2, [pc, #256]	; (80223e8 <HAL_RCC_ClockConfig+0x114>)
 80222e6:	6813      	ldr	r3, [r2, #0]
 80222e8:	f003 0307 	and.w	r3, r3, #7
 80222ec:	428b      	cmp	r3, r1
 80222ee:	d32a      	bcc.n	8022346 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80222f0:	6823      	ldr	r3, [r4, #0]
 80222f2:	07d9      	lsls	r1, r3, #31
 80222f4:	d432      	bmi.n	802235c <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80222f6:	6821      	ldr	r1, [r4, #0]
 80222f8:	078a      	lsls	r2, r1, #30
 80222fa:	d45b      	bmi.n	80223b4 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80222fc:	4a3a      	ldr	r2, [pc, #232]	; (80223e8 <HAL_RCC_ClockConfig+0x114>)
 80222fe:	6813      	ldr	r3, [r2, #0]
 8022300:	f003 0307 	and.w	r3, r3, #7
 8022304:	42ab      	cmp	r3, r5
 8022306:	d85d      	bhi.n	80223c4 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022308:	f011 0f04 	tst.w	r1, #4
 802230c:	4d37      	ldr	r5, [pc, #220]	; (80223ec <HAL_RCC_ClockConfig+0x118>)
 802230e:	d164      	bne.n	80223da <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022310:	070b      	lsls	r3, r1, #28
 8022312:	d506      	bpl.n	8022322 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8022314:	68ab      	ldr	r3, [r5, #8]
 8022316:	6922      	ldr	r2, [r4, #16]
 8022318:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 802231c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8022320:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8022322:	f7ff fd03 	bl	8021d2c <HAL_RCC_GetSysClockFreq>
 8022326:	68ab      	ldr	r3, [r5, #8]
 8022328:	4a31      	ldr	r2, [pc, #196]	; (80223f0 <HAL_RCC_ClockConfig+0x11c>)
 802232a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 802232e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8022332:	5cd3      	ldrb	r3, [r2, r3]
 8022334:	f003 031f 	and.w	r3, r3, #31
 8022338:	40d8      	lsrs	r0, r3
 802233a:	4b2e      	ldr	r3, [pc, #184]	; (80223f4 <HAL_RCC_ClockConfig+0x120>)
 802233c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 802233e:	4b2e      	ldr	r3, [pc, #184]	; (80223f8 <HAL_RCC_ClockConfig+0x124>)
 8022340:	6818      	ldr	r0, [r3, #0]
 8022342:	f7ff bacb 	b.w	80218dc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022346:	6813      	ldr	r3, [r2, #0]
 8022348:	f023 0307 	bic.w	r3, r3, #7
 802234c:	430b      	orrs	r3, r1
 802234e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022350:	6813      	ldr	r3, [r2, #0]
 8022352:	f003 0307 	and.w	r3, r3, #7
 8022356:	428b      	cmp	r3, r1
 8022358:	d1c1      	bne.n	80222de <HAL_RCC_ClockConfig+0xa>
 802235a:	e7c9      	b.n	80222f0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802235c:	6862      	ldr	r2, [r4, #4]
 802235e:	4e23      	ldr	r6, [pc, #140]	; (80223ec <HAL_RCC_ClockConfig+0x118>)
 8022360:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022362:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8022364:	d11a      	bne.n	802239c <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022366:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 802236a:	d0b8      	beq.n	80222de <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 802236c:	68b3      	ldr	r3, [r6, #8]
 802236e:	f023 0303 	bic.w	r3, r3, #3
 8022372:	4313      	orrs	r3, r2
 8022374:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8022376:	f7ff faf1 	bl	802195c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802237a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 802237e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022380:	68b3      	ldr	r3, [r6, #8]
 8022382:	6862      	ldr	r2, [r4, #4]
 8022384:	f003 030c 	and.w	r3, r3, #12
 8022388:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 802238c:	d0b3      	beq.n	80222f6 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802238e:	f7ff fae5 	bl	802195c <HAL_GetTick>
 8022392:	1bc0      	subs	r0, r0, r7
 8022394:	4540      	cmp	r0, r8
 8022396:	d9f3      	bls.n	8022380 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8022398:	2003      	movs	r0, #3
 802239a:	e7a1      	b.n	80222e0 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802239c:	2a02      	cmp	r2, #2
 802239e:	d102      	bne.n	80223a6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80223a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80223a4:	e7e1      	b.n	802236a <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80223a6:	b912      	cbnz	r2, 80223ae <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80223a8:	f013 0f02 	tst.w	r3, #2
 80223ac:	e7dd      	b.n	802236a <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80223ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80223b2:	e7da      	b.n	802236a <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80223b4:	4a0d      	ldr	r2, [pc, #52]	; (80223ec <HAL_RCC_ClockConfig+0x118>)
 80223b6:	68a0      	ldr	r0, [r4, #8]
 80223b8:	6893      	ldr	r3, [r2, #8]
 80223ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80223be:	4303      	orrs	r3, r0
 80223c0:	6093      	str	r3, [r2, #8]
 80223c2:	e79b      	b.n	80222fc <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80223c4:	6813      	ldr	r3, [r2, #0]
 80223c6:	f023 0307 	bic.w	r3, r3, #7
 80223ca:	432b      	orrs	r3, r5
 80223cc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80223ce:	6813      	ldr	r3, [r2, #0]
 80223d0:	f003 0307 	and.w	r3, r3, #7
 80223d4:	42ab      	cmp	r3, r5
 80223d6:	d182      	bne.n	80222de <HAL_RCC_ClockConfig+0xa>
 80223d8:	e796      	b.n	8022308 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80223da:	68ab      	ldr	r3, [r5, #8]
 80223dc:	68e2      	ldr	r2, [r4, #12]
 80223de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80223e2:	4313      	orrs	r3, r2
 80223e4:	60ab      	str	r3, [r5, #8]
 80223e6:	e793      	b.n	8022310 <HAL_RCC_ClockConfig+0x3c>
 80223e8:	40022000 	.word	0x40022000
 80223ec:	40021000 	.word	0x40021000
 80223f0:	080251b8 	.word	0x080251b8
 80223f4:	20000018 	.word	0x20000018
 80223f8:	20000020 	.word	0x20000020

080223fc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80223fc:	4b05      	ldr	r3, [pc, #20]	; (8022414 <HAL_RCC_GetPCLK1Freq+0x18>)
 80223fe:	4a06      	ldr	r2, [pc, #24]	; (8022418 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8022400:	689b      	ldr	r3, [r3, #8]
 8022402:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8022406:	5cd3      	ldrb	r3, [r2, r3]
 8022408:	4a04      	ldr	r2, [pc, #16]	; (802241c <HAL_RCC_GetPCLK1Freq+0x20>)
 802240a:	6810      	ldr	r0, [r2, #0]
 802240c:	f003 031f 	and.w	r3, r3, #31
}
 8022410:	40d8      	lsrs	r0, r3
 8022412:	4770      	bx	lr
 8022414:	40021000 	.word	0x40021000
 8022418:	080251c8 	.word	0x080251c8
 802241c:	20000018 	.word	0x20000018

08022420 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8022420:	4b05      	ldr	r3, [pc, #20]	; (8022438 <HAL_RCC_GetPCLK2Freq+0x18>)
 8022422:	4a06      	ldr	r2, [pc, #24]	; (802243c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8022424:	689b      	ldr	r3, [r3, #8]
 8022426:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 802242a:	5cd3      	ldrb	r3, [r2, r3]
 802242c:	4a04      	ldr	r2, [pc, #16]	; (8022440 <HAL_RCC_GetPCLK2Freq+0x20>)
 802242e:	6810      	ldr	r0, [r2, #0]
 8022430:	f003 031f 	and.w	r3, r3, #31
}
 8022434:	40d8      	lsrs	r0, r3
 8022436:	4770      	bx	lr
 8022438:	40021000 	.word	0x40021000
 802243c:	080251c8 	.word	0x080251c8
 8022440:	20000018 	.word	0x20000018

08022444 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8022444:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8022448:	4699      	mov	r9, r3
 802244a:	4688      	mov	r8, r1
 802244c:	4617      	mov	r7, r2
 802244e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8022450:	f7ff fa84 	bl	802195c <HAL_GetTick>
 8022454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022456:	444b      	add	r3, r9
 8022458:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 802245a:	f7ff fa7f 	bl	802195c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 802245e:	4b2a      	ldr	r3, [pc, #168]	; (8022508 <SPI_WaitFifoStateUntilTimeout+0xc4>)
 8022460:	681b      	ldr	r3, [r3, #0]
 8022462:	2623      	movs	r6, #35	; 0x23
 8022464:	435e      	muls	r6, r3
 8022466:	0d36      	lsrs	r6, r6, #20
 8022468:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 802246a:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 802246c:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 802246e:	6822      	ldr	r2, [r4, #0]
 8022470:	6893      	ldr	r3, [r2, #8]
 8022472:	ea03 0308 	and.w	r3, r3, r8
 8022476:	42bb      	cmp	r3, r7
 8022478:	d101      	bne.n	802247e <SPI_WaitFifoStateUntilTimeout+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 802247a:	2000      	movs	r0, #0
 802247c:	e037      	b.n	80224ee <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 802247e:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 8022482:	d104      	bne.n	802248e <SPI_WaitFifoStateUntilTimeout+0x4a>
 8022484:	b91f      	cbnz	r7, 802248e <SPI_WaitFifoStateUntilTimeout+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8022486:	7b13      	ldrb	r3, [r2, #12]
 8022488:	b2db      	uxtb	r3, r3
 802248a:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 802248c:	9b00      	ldr	r3, [sp, #0]
    if (Timeout != HAL_MAX_DELAY)
 802248e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8022492:	d0ed      	beq.n	8022470 <SPI_WaitFifoStateUntilTimeout+0x2c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8022494:	f7ff fa62 	bl	802195c <HAL_GetTick>
 8022498:	eba0 000a 	sub.w	r0, r0, sl
 802249c:	4285      	cmp	r5, r0
 802249e:	d829      	bhi.n	80224f4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80224a0:	6823      	ldr	r3, [r4, #0]
 80224a2:	685a      	ldr	r2, [r3, #4]
 80224a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80224a8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80224aa:	6862      	ldr	r2, [r4, #4]
 80224ac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80224b0:	d10a      	bne.n	80224c8 <SPI_WaitFifoStateUntilTimeout+0x84>
 80224b2:	68a2      	ldr	r2, [r4, #8]
 80224b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80224b8:	d002      	beq.n	80224c0 <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80224ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80224be:	d103      	bne.n	80224c8 <SPI_WaitFifoStateUntilTimeout+0x84>
          __HAL_SPI_DISABLE(hspi);
 80224c0:	681a      	ldr	r2, [r3, #0]
 80224c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80224c6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80224c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80224ca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80224ce:	d107      	bne.n	80224e0 <SPI_WaitFifoStateUntilTimeout+0x9c>
          SPI_RESET_CRC(hspi);
 80224d0:	681a      	ldr	r2, [r3, #0]
 80224d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80224d6:	601a      	str	r2, [r3, #0]
 80224d8:	681a      	ldr	r2, [r3, #0]
 80224da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80224de:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80224e0:	2301      	movs	r3, #1
 80224e2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80224e6:	2300      	movs	r3, #0
 80224e8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 80224ec:	2003      	movs	r0, #3
}
 80224ee:	b002      	add	sp, #8
 80224f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 80224f4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80224f6:	2b00      	cmp	r3, #0
      count--;
 80224f8:	9b01      	ldr	r3, [sp, #4]
 80224fa:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80224fe:	bf08      	it	eq
 8022500:	2500      	moveq	r5, #0
      count--;
 8022502:	9301      	str	r3, [sp, #4]
 8022504:	e7b3      	b.n	802246e <SPI_WaitFifoStateUntilTimeout+0x2a>
 8022506:	bf00      	nop
 8022508:	20000018 	.word	0x20000018

0802250c <SPI_WaitFlagStateUntilTimeout>:
{
 802250c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8022510:	461f      	mov	r7, r3
 8022512:	4689      	mov	r9, r1
 8022514:	4690      	mov	r8, r2
 8022516:	4604      	mov	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8022518:	f7ff fa20 	bl	802195c <HAL_GetTick>
 802251c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802251e:	443b      	add	r3, r7
 8022520:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8022522:	f7ff fa1b 	bl	802195c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8022526:	4b26      	ldr	r3, [pc, #152]	; (80225c0 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8022528:	681e      	ldr	r6, [r3, #0]
 802252a:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 802252e:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8022530:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8022532:	9601      	str	r6, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8022534:	6822      	ldr	r2, [r4, #0]
 8022536:	6893      	ldr	r3, [r2, #8]
 8022538:	ea39 0303 	bics.w	r3, r9, r3
 802253c:	bf0c      	ite	eq
 802253e:	2301      	moveq	r3, #1
 8022540:	2300      	movne	r3, #0
 8022542:	4543      	cmp	r3, r8
 8022544:	d101      	bne.n	802254a <SPI_WaitFlagStateUntilTimeout+0x3e>
  return HAL_OK;
 8022546:	2000      	movs	r0, #0
 8022548:	e02e      	b.n	80225a8 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 802254a:	1c7b      	adds	r3, r7, #1
 802254c:	d0f3      	beq.n	8022536 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 802254e:	f7ff fa05 	bl	802195c <HAL_GetTick>
 8022552:	eba0 000a 	sub.w	r0, r0, sl
 8022556:	42a8      	cmp	r0, r5
 8022558:	d329      	bcc.n	80225ae <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802255a:	6823      	ldr	r3, [r4, #0]
 802255c:	685a      	ldr	r2, [r3, #4]
 802255e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8022562:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8022564:	6862      	ldr	r2, [r4, #4]
 8022566:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 802256a:	d10a      	bne.n	8022582 <SPI_WaitFlagStateUntilTimeout+0x76>
 802256c:	68a2      	ldr	r2, [r4, #8]
 802256e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8022572:	d002      	beq.n	802257a <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8022574:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8022578:	d103      	bne.n	8022582 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 802257a:	681a      	ldr	r2, [r3, #0]
 802257c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022580:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022582:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8022584:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8022588:	d107      	bne.n	802259a <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 802258a:	681a      	ldr	r2, [r3, #0]
 802258c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8022590:	601a      	str	r2, [r3, #0]
 8022592:	681a      	ldr	r2, [r3, #0]
 8022594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8022598:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 802259a:	2301      	movs	r3, #1
 802259c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80225a0:	2300      	movs	r3, #0
 80225a2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80225a6:	2003      	movs	r0, #3
}
 80225a8:	b002      	add	sp, #8
 80225aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 80225ae:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80225b0:	2b00      	cmp	r3, #0
      count--;
 80225b2:	9b01      	ldr	r3, [sp, #4]
 80225b4:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80225b8:	bf08      	it	eq
 80225ba:	2500      	moveq	r5, #0
      count--;
 80225bc:	9301      	str	r3, [sp, #4]
 80225be:	e7b9      	b.n	8022534 <SPI_WaitFlagStateUntilTimeout+0x28>
 80225c0:	20000018 	.word	0x20000018

080225c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80225c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80225c6:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80225c8:	6842      	ldr	r2, [r0, #4]
 80225ca:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80225ce:	4604      	mov	r4, r0
 80225d0:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80225d2:	d10b      	bne.n	80225ec <SPI_EndRxTransaction+0x28>
 80225d4:	6882      	ldr	r2, [r0, #8]
 80225d6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80225da:	d002      	beq.n	80225e2 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80225dc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80225e0:	d104      	bne.n	80225ec <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80225e2:	6821      	ldr	r1, [r4, #0]
 80225e4:	680a      	ldr	r2, [r1, #0]
 80225e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80225ea:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80225ec:	9600      	str	r6, [sp, #0]
 80225ee:	2200      	movs	r2, #0
 80225f0:	2180      	movs	r1, #128	; 0x80
 80225f2:	4620      	mov	r0, r4
 80225f4:	9303      	str	r3, [sp, #12]
 80225f6:	f7ff ff89 	bl	802250c <SPI_WaitFlagStateUntilTimeout>
 80225fa:	9b03      	ldr	r3, [sp, #12]
 80225fc:	4605      	mov	r5, r0
 80225fe:	b128      	cbz	r0, 802260c <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8022600:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8022602:	f043 0320 	orr.w	r3, r3, #32
 8022606:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8022608:	2503      	movs	r5, #3
 802260a:	e013      	b.n	8022634 <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802260c:	6862      	ldr	r2, [r4, #4]
 802260e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8022612:	d10f      	bne.n	8022634 <SPI_EndRxTransaction+0x70>
 8022614:	68a2      	ldr	r2, [r4, #8]
 8022616:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 802261a:	d002      	beq.n	8022622 <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802261c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8022620:	d108      	bne.n	8022634 <SPI_EndRxTransaction+0x70>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8022622:	9600      	str	r6, [sp, #0]
 8022624:	2200      	movs	r2, #0
 8022626:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 802262a:	4620      	mov	r0, r4
 802262c:	f7ff ff0a 	bl	8022444 <SPI_WaitFifoStateUntilTimeout>
 8022630:	2800      	cmp	r0, #0
 8022632:	d1e5      	bne.n	8022600 <SPI_EndRxTransaction+0x3c>
}
 8022634:	4628      	mov	r0, r5
 8022636:	b004      	add	sp, #16
 8022638:	bd70      	pop	{r4, r5, r6, pc}

0802263a <SPI_EndRxTxTransaction>:
{
 802263a:	b530      	push	{r4, r5, lr}
 802263c:	b085      	sub	sp, #20
 802263e:	460b      	mov	r3, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8022640:	9200      	str	r2, [sp, #0]
 8022642:	9103      	str	r1, [sp, #12]
{
 8022644:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8022646:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 802264a:	2200      	movs	r2, #0
{
 802264c:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 802264e:	f7ff fef9 	bl	8022444 <SPI_WaitFifoStateUntilTimeout>
 8022652:	9b03      	ldr	r3, [sp, #12]
 8022654:	4602      	mov	r2, r0
 8022656:	b128      	cbz	r0, 8022664 <SPI_EndRxTxTransaction+0x2a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8022658:	6e23      	ldr	r3, [r4, #96]	; 0x60
 802265a:	f043 0320 	orr.w	r3, r3, #32
 802265e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8022660:	2003      	movs	r0, #3
 8022662:	e011      	b.n	8022688 <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8022664:	9500      	str	r5, [sp, #0]
 8022666:	2180      	movs	r1, #128	; 0x80
 8022668:	4620      	mov	r0, r4
 802266a:	9303      	str	r3, [sp, #12]
 802266c:	f7ff ff4e 	bl	802250c <SPI_WaitFlagStateUntilTimeout>
 8022670:	9b03      	ldr	r3, [sp, #12]
 8022672:	4602      	mov	r2, r0
 8022674:	2800      	cmp	r0, #0
 8022676:	d1ef      	bne.n	8022658 <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8022678:	9500      	str	r5, [sp, #0]
 802267a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 802267e:	4620      	mov	r0, r4
 8022680:	f7ff fee0 	bl	8022444 <SPI_WaitFifoStateUntilTimeout>
 8022684:	2800      	cmp	r0, #0
 8022686:	d1e7      	bne.n	8022658 <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 8022688:	b005      	add	sp, #20
 802268a:	bd30      	pop	{r4, r5, pc}

0802268c <HAL_SPI_MspInit>:
}
 802268c:	4770      	bx	lr

0802268e <HAL_SPI_Init>:
{
 802268e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 8022690:	4604      	mov	r4, r0
 8022692:	2800      	cmp	r0, #0
 8022694:	d079      	beq.n	802278a <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8022696:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8022698:	2b00      	cmp	r3, #0
 802269a:	d14f      	bne.n	802273c <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 802269c:	6842      	ldr	r2, [r0, #4]
 802269e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80226a2:	d000      	beq.n	80226a6 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80226a4:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80226a6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80226aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80226ae:	b923      	cbnz	r3, 80226ba <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 80226b0:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80226b4:	4620      	mov	r0, r4
 80226b6:	f7ff ffe9 	bl	802268c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80226ba:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80226bc:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80226be:	2302      	movs	r3, #2
 80226c0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80226c4:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80226c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80226ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80226ce:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80226d0:	f04f 0300 	mov.w	r3, #0
 80226d4:	d85b      	bhi.n	802278e <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80226d6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80226da:	d000      	beq.n	80226de <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80226dc:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80226de:	6863      	ldr	r3, [r4, #4]
 80226e0:	68a7      	ldr	r7, [r4, #8]
 80226e2:	69a0      	ldr	r0, [r4, #24]
 80226e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80226e6:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 80226ea:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80226ee:	433b      	orrs	r3, r7
 80226f0:	6927      	ldr	r7, [r4, #16]
 80226f2:	f007 0702 	and.w	r7, r7, #2
 80226f6:	433b      	orrs	r3, r7
 80226f8:	6967      	ldr	r7, [r4, #20]
 80226fa:	f007 0701 	and.w	r7, r7, #1
 80226fe:	433b      	orrs	r3, r7
 8022700:	f400 7700 	and.w	r7, r0, #512	; 0x200
 8022704:	433b      	orrs	r3, r7
 8022706:	69e7      	ldr	r7, [r4, #28]
 8022708:	f007 0738 	and.w	r7, r7, #56	; 0x38
 802270c:	433b      	orrs	r3, r7
 802270e:	6a27      	ldr	r7, [r4, #32]
 8022710:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8022714:	433b      	orrs	r3, r7
 8022716:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 802271a:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802271c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8022720:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022722:	d111      	bne.n	8022748 <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8022724:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022726:	bb6b      	cbnz	r3, 8022784 <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022728:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802272c:	d90a      	bls.n	8022744 <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 802272e:	2302      	movs	r3, #2
 8022730:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8022732:	6813      	ldr	r3, [r2, #0]
 8022734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8022738:	6013      	str	r3, [r2, #0]
 802273a:	e005      	b.n	8022748 <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 802273c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802273e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022742:	e7b0      	b.n	80226a6 <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8022744:	2301      	movs	r3, #1
 8022746:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8022748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802274a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 802274c:	f003 0310 	and.w	r3, r3, #16
 8022750:	f007 0708 	and.w	r7, r7, #8
 8022754:	433b      	orrs	r3, r7
 8022756:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 802275a:	0c00      	lsrs	r0, r0, #16
 802275c:	4319      	orrs	r1, r3
 802275e:	f000 0004 	and.w	r0, r0, #4
 8022762:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022764:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8022768:	bf08      	it	eq
 802276a:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 802276c:	ea45 0501 	orr.w	r5, r5, r1
 8022770:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8022772:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8022776:	bf08      	it	eq
 8022778:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 802277a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802277c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 802277e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8022782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8022784:	2b02      	cmp	r3, #2
 8022786:	d1df      	bne.n	8022748 <HAL_SPI_Init+0xba>
 8022788:	e7d3      	b.n	8022732 <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 802278a:	2001      	movs	r0, #1
 802278c:	e7f9      	b.n	8022782 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 802278e:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8022790:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8022794:	e7a1      	b.n	80226da <HAL_SPI_Init+0x4c>

08022796 <HAL_SPI_MspDeInit>:
 8022796:	4770      	bx	lr

08022798 <HAL_SPI_DeInit>:
{
 8022798:	b510      	push	{r4, lr}
  if (hspi == NULL)
 802279a:	4604      	mov	r4, r0
 802279c:	b180      	cbz	r0, 80227c0 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 802279e:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80227a0:	2302      	movs	r3, #2
 80227a2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80227a6:	6813      	ldr	r3, [r2, #0]
 80227a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80227ac:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80227ae:	f7ff fff2 	bl	8022796 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80227b2:	2000      	movs	r0, #0
 80227b4:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 80227b6:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 80227ba:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 80227be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80227c0:	2001      	movs	r0, #1
 80227c2:	e7fc      	b.n	80227be <HAL_SPI_DeInit+0x26>

080227c4 <HAL_SPI_TransmitReceive>:
{
 80227c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80227c8:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 80227ca:	2300      	movs	r3, #0
 80227cc:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hspi);
 80227ce:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80227d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80227d4:	2b01      	cmp	r3, #1
{
 80227d6:	4604      	mov	r4, r0
 80227d8:	460e      	mov	r6, r1
 80227da:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 80227dc:	f000 81ab 	beq.w	8022b36 <HAL_SPI_TransmitReceive+0x372>
 80227e0:	2301      	movs	r3, #1
 80227e2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80227e6:	f7ff f8b9 	bl	802195c <HAL_GetTick>
  tmp_state           = hspi->State;
 80227ea:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80227ee:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80227f2:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80227f4:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 80227f6:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 80227f8:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80227fc:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80227fe:	d00b      	beq.n	8022818 <HAL_SPI_TransmitReceive+0x54>
 8022800:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8022804:	f040 8195 	bne.w	8022b32 <HAL_SPI_TransmitReceive+0x36e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8022808:	68a3      	ldr	r3, [r4, #8]
 802280a:	2b00      	cmp	r3, #0
 802280c:	f040 8191 	bne.w	8022b32 <HAL_SPI_TransmitReceive+0x36e>
 8022810:	f1bc 0f04 	cmp.w	ip, #4
 8022814:	f040 818d 	bne.w	8022b32 <HAL_SPI_TransmitReceive+0x36e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8022818:	2e00      	cmp	r6, #0
 802281a:	f000 8172 	beq.w	8022b02 <HAL_SPI_TransmitReceive+0x33e>
 802281e:	f1ba 0f00 	cmp.w	sl, #0
 8022822:	f000 816e 	beq.w	8022b02 <HAL_SPI_TransmitReceive+0x33e>
 8022826:	f1b9 0f00 	cmp.w	r9, #0
 802282a:	f000 816a 	beq.w	8022b02 <HAL_SPI_TransmitReceive+0x33e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802282e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8022832:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8022836:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8022838:	bf1c      	itt	ne
 802283a:	2305      	movne	r3, #5
 802283c:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8022840:	2300      	movs	r3, #0
 8022842:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8022844:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022848:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 802284a:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802284e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8022852:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8022856:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8022858:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 802285c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022860:	d107      	bne.n	8022872 <HAL_SPI_TransmitReceive+0xae>
    SPI_RESET_CRC(hspi);
 8022862:	682b      	ldr	r3, [r5, #0]
 8022864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8022868:	602b      	str	r3, [r5, #0]
 802286a:	682b      	ldr	r3, [r5, #0]
 802286c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022870:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8022872:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022876:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8022878:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 802287c:	d802      	bhi.n	8022884 <HAL_SPI_TransmitReceive+0xc0>
 802287e:	f1b9 0f01 	cmp.w	r9, #1
 8022882:	d93a      	bls.n	80228fa <HAL_SPI_TransmitReceive+0x136>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022888:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802288a:	682b      	ldr	r3, [r5, #0]
 802288c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 802288e:	bf5e      	ittt	pl
 8022890:	682b      	ldrpl	r3, [r5, #0]
 8022892:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8022896:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022898:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 802289c:	d97f      	bls.n	802299e <HAL_SPI_TransmitReceive+0x1da>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802289e:	b112      	cbz	r2, 80228a6 <HAL_SPI_TransmitReceive+0xe2>
 80228a0:	f1b9 0f01 	cmp.w	r9, #1
 80228a4:	d107      	bne.n	80228b6 <HAL_SPI_TransmitReceive+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80228a6:	f836 3b02 	ldrh.w	r3, [r6], #2
 80228aa:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 80228ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80228ae:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80228b0:	3b01      	subs	r3, #1
 80228b2:	b29b      	uxth	r3, r3
 80228b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80228b6:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80228ba:	f001 0604 	and.w	r6, r1, #4
 80228be:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80228c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80228c4:	b29b      	uxth	r3, r3
 80228c6:	b9db      	cbnz	r3, 8022900 <HAL_SPI_TransmitReceive+0x13c>
 80228c8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80228cc:	b29b      	uxth	r3, r3
 80228ce:	b9bb      	cbnz	r3, 8022900 <HAL_SPI_TransmitReceive+0x13c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80228d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80228d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80228d6:	f040 80fd 	bne.w	8022ad4 <HAL_SPI_TransmitReceive+0x310>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80228da:	2201      	movs	r2, #1
 80228dc:	f8cd 8000 	str.w	r8, [sp]
 80228e0:	463b      	mov	r3, r7
 80228e2:	4611      	mov	r1, r2
 80228e4:	4620      	mov	r0, r4
 80228e6:	f7ff fe11 	bl	802250c <SPI_WaitFlagStateUntilTimeout>
 80228ea:	2800      	cmp	r0, #0
 80228ec:	f000 80ea 	beq.w	8022ac4 <HAL_SPI_TransmitReceive+0x300>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80228f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80228f2:	f043 0302 	orr.w	r3, r3, #2
 80228f6:	6623      	str	r3, [r4, #96]	; 0x60
 80228f8:	e02a      	b.n	8022950 <HAL_SPI_TransmitReceive+0x18c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80228fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80228fe:	e7c3      	b.n	8022888 <HAL_SPI_TransmitReceive+0xc4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8022900:	6823      	ldr	r3, [r4, #0]
 8022902:	689a      	ldr	r2, [r3, #8]
 8022904:	0790      	lsls	r0, r2, #30
 8022906:	d507      	bpl.n	8022918 <HAL_SPI_TransmitReceive+0x154>
 8022908:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 802290a:	b292      	uxth	r2, r2
 802290c:	b122      	cbz	r2, 8022918 <HAL_SPI_TransmitReceive+0x154>
 802290e:	f1b9 0f00 	cmp.w	r9, #0
 8022912:	d128      	bne.n	8022966 <HAL_SPI_TransmitReceive+0x1a2>
        txallowed = 0U;
 8022914:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8022918:	6899      	ldr	r1, [r3, #8]
 802291a:	f011 0101 	ands.w	r1, r1, #1
 802291e:	d00f      	beq.n	8022940 <HAL_SPI_TransmitReceive+0x17c>
 8022920:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8022924:	b292      	uxth	r2, r2
 8022926:	b15a      	cbz	r2, 8022940 <HAL_SPI_TransmitReceive+0x17c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8022928:	68da      	ldr	r2, [r3, #12]
 802292a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802292c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8022930:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8022932:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8022936:	3b01      	subs	r3, #1
 8022938:	b29b      	uxth	r3, r3
 802293a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 802293e:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8022940:	f7ff f80c 	bl	802195c <HAL_GetTick>
 8022944:	eba0 0008 	sub.w	r0, r0, r8
 8022948:	42b8      	cmp	r0, r7
 802294a:	d3ba      	bcc.n	80228c2 <HAL_SPI_TransmitReceive+0xfe>
 802294c:	1c79      	adds	r1, r7, #1
 802294e:	d0b8      	beq.n	80228c2 <HAL_SPI_TransmitReceive+0xfe>
          errorcode = HAL_TIMEOUT;
 8022950:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8022952:	2301      	movs	r3, #1
 8022954:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8022958:	2300      	movs	r3, #0
 802295a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 802295e:	4628      	mov	r0, r5
 8022960:	b004      	add	sp, #16
 8022962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8022966:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8022968:	f832 1b02 	ldrh.w	r1, [r2], #2
 802296c:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802296e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8022970:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8022972:	3a01      	subs	r2, #1
 8022974:	b292      	uxth	r2, r2
 8022976:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8022978:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 802297a:	b292      	uxth	r2, r2
 802297c:	2a00      	cmp	r2, #0
 802297e:	d1c9      	bne.n	8022914 <HAL_SPI_TransmitReceive+0x150>
 8022980:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8022982:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8022986:	d1c5      	bne.n	8022914 <HAL_SPI_TransmitReceive+0x150>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8022988:	b926      	cbnz	r6, 8022994 <HAL_SPI_TransmitReceive+0x1d0>
 802298a:	b11d      	cbz	r5, 8022994 <HAL_SPI_TransmitReceive+0x1d0>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 802298c:	681a      	ldr	r2, [r3, #0]
 802298e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022992:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8022994:	681a      	ldr	r2, [r3, #0]
 8022996:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802299a:	601a      	str	r2, [r3, #0]
 802299c:	e7ba      	b.n	8022914 <HAL_SPI_TransmitReceive+0x150>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802299e:	b112      	cbz	r2, 80229a6 <HAL_SPI_TransmitReceive+0x1e2>
 80229a0:	f1b9 0f01 	cmp.w	r9, #1
 80229a4:	d10b      	bne.n	80229be <HAL_SPI_TransmitReceive+0x1fa>
      if (hspi->TxXferCount > 1U)
 80229a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80229a8:	b29b      	uxth	r3, r3
 80229aa:	2b01      	cmp	r3, #1
 80229ac:	d94b      	bls.n	8022a46 <HAL_SPI_TransmitReceive+0x282>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80229ae:	f836 3b02 	ldrh.w	r3, [r6], #2
 80229b2:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 80229b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80229b6:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80229b8:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80229ba:	b29b      	uxth	r3, r3
 80229bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80229be:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80229c0:	f001 0604 	and.w	r6, r1, #4
 80229c4:	f000 0908 	and.w	r9, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80229c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80229ca:	b29b      	uxth	r3, r3
 80229cc:	b92b      	cbnz	r3, 80229da <HAL_SPI_TransmitReceive+0x216>
 80229ce:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80229d2:	b29b      	uxth	r3, r3
 80229d4:	2b00      	cmp	r3, #0
 80229d6:	f43f af7b 	beq.w	80228d0 <HAL_SPI_TransmitReceive+0x10c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80229da:	6821      	ldr	r1, [r4, #0]
 80229dc:	688b      	ldr	r3, [r1, #8]
 80229de:	079a      	lsls	r2, r3, #30
 80229e0:	d505      	bpl.n	80229ee <HAL_SPI_TransmitReceive+0x22a>
 80229e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80229e4:	b29b      	uxth	r3, r3
 80229e6:	b113      	cbz	r3, 80229ee <HAL_SPI_TransmitReceive+0x22a>
 80229e8:	2d00      	cmp	r5, #0
 80229ea:	d134      	bne.n	8022a56 <HAL_SPI_TransmitReceive+0x292>
        txallowed = 0U;
 80229ec:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80229ee:	6821      	ldr	r1, [r4, #0]
 80229f0:	688b      	ldr	r3, [r1, #8]
 80229f2:	f013 0301 	ands.w	r3, r3, #1
 80229f6:	d01d      	beq.n	8022a34 <HAL_SPI_TransmitReceive+0x270>
 80229f8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80229fc:	b292      	uxth	r2, r2
 80229fe:	b1ca      	cbz	r2, 8022a34 <HAL_SPI_TransmitReceive+0x270>
        if (hspi->RxXferCount > 1U)
 8022a00:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8022a04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022a06:	b280      	uxth	r0, r0
 8022a08:	2801      	cmp	r0, #1
 8022a0a:	d94f      	bls.n	8022aac <HAL_SPI_TransmitReceive+0x2e8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8022a0c:	68c8      	ldr	r0, [r1, #12]
 8022a0e:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8022a12:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8022a14:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8022a18:	3a02      	subs	r2, #2
 8022a1a:	b292      	uxth	r2, r2
 8022a1c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8022a20:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8022a24:	b292      	uxth	r2, r2
 8022a26:	2a01      	cmp	r2, #1
 8022a28:	d803      	bhi.n	8022a32 <HAL_SPI_TransmitReceive+0x26e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022a2a:	684a      	ldr	r2, [r1, #4]
 8022a2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8022a30:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8022a32:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8022a34:	f7fe ff92 	bl	802195c <HAL_GetTick>
 8022a38:	eba0 0008 	sub.w	r0, r0, r8
 8022a3c:	42b8      	cmp	r0, r7
 8022a3e:	d3c3      	bcc.n	80229c8 <HAL_SPI_TransmitReceive+0x204>
 8022a40:	1c7b      	adds	r3, r7, #1
 8022a42:	d0c1      	beq.n	80229c8 <HAL_SPI_TransmitReceive+0x204>
 8022a44:	e784      	b.n	8022950 <HAL_SPI_TransmitReceive+0x18c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8022a46:	7833      	ldrb	r3, [r6, #0]
 8022a48:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 8022a4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022a4c:	3301      	adds	r3, #1
 8022a4e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8022a50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8022a52:	3b01      	subs	r3, #1
 8022a54:	e7b1      	b.n	80229ba <HAL_SPI_TransmitReceive+0x1f6>
        if (hspi->TxXferCount > 1U)
 8022a56:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8022a58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022a5a:	b292      	uxth	r2, r2
 8022a5c:	2a01      	cmp	r2, #1
 8022a5e:	d91d      	bls.n	8022a9c <HAL_SPI_TransmitReceive+0x2d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8022a60:	f833 2b02 	ldrh.w	r2, [r3], #2
 8022a64:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8022a66:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8022a68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8022a6a:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8022a6c:	b29b      	uxth	r3, r3
 8022a6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8022a70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8022a72:	b29b      	uxth	r3, r3
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	d1b9      	bne.n	80229ec <HAL_SPI_TransmitReceive+0x228>
 8022a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022a7e:	d1b5      	bne.n	80229ec <HAL_SPI_TransmitReceive+0x228>
 8022a80:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8022a82:	b936      	cbnz	r6, 8022a92 <HAL_SPI_TransmitReceive+0x2ce>
 8022a84:	f1b9 0f00 	cmp.w	r9, #0
 8022a88:	d003      	beq.n	8022a92 <HAL_SPI_TransmitReceive+0x2ce>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8022a8a:	681a      	ldr	r2, [r3, #0]
 8022a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022a90:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8022a92:	681a      	ldr	r2, [r3, #0]
 8022a94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8022a98:	601a      	str	r2, [r3, #0]
 8022a9a:	e7a7      	b.n	80229ec <HAL_SPI_TransmitReceive+0x228>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8022a9c:	781b      	ldrb	r3, [r3, #0]
 8022a9e:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 8022aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022aa2:	3301      	adds	r3, #1
 8022aa4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8022aa6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8022aa8:	3b01      	subs	r3, #1
 8022aaa:	e7df      	b.n	8022a6c <HAL_SPI_TransmitReceive+0x2a8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8022aac:	7b09      	ldrb	r1, [r1, #12]
 8022aae:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8022ab0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022ab2:	3201      	adds	r2, #1
 8022ab4:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8022ab6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8022aba:	3a01      	subs	r2, #1
 8022abc:	b292      	uxth	r2, r2
 8022abe:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8022ac2:	e7b6      	b.n	8022a32 <HAL_SPI_TransmitReceive+0x26e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8022ac4:	68e2      	ldr	r2, [r4, #12]
 8022ac6:	6823      	ldr	r3, [r4, #0]
 8022ac8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8022acc:	d11b      	bne.n	8022b06 <HAL_SPI_TransmitReceive+0x342>
      tmpreg = READ_REG(hspi->Instance->DR);
 8022ace:	68db      	ldr	r3, [r3, #12]
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8022ad0:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8022ad2:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8022ad4:	6822      	ldr	r2, [r4, #0]
 8022ad6:	6895      	ldr	r5, [r2, #8]
 8022ad8:	f015 0510 	ands.w	r5, r5, #16
 8022adc:	d007      	beq.n	8022aee <HAL_SPI_TransmitReceive+0x32a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8022ade:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8022ae0:	f043 0302 	orr.w	r3, r3, #2
 8022ae4:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8022ae6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8022aea:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8022aec:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8022aee:	4642      	mov	r2, r8
 8022af0:	4639      	mov	r1, r7
 8022af2:	4620      	mov	r0, r4
 8022af4:	f7ff fda1 	bl	802263a <SPI_EndRxTxTransaction>
 8022af8:	2800      	cmp	r0, #0
 8022afa:	f43f af2a 	beq.w	8022952 <HAL_SPI_TransmitReceive+0x18e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8022afe:	2320      	movs	r3, #32
 8022b00:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8022b02:	2501      	movs	r5, #1
 8022b04:	e725      	b.n	8022952 <HAL_SPI_TransmitReceive+0x18e>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8022b06:	7b1b      	ldrb	r3, [r3, #12]
 8022b08:	b2db      	uxtb	r3, r3
 8022b0a:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8022b0c:	9b03      	ldr	r3, [sp, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8022b0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022b10:	2b02      	cmp	r3, #2
 8022b12:	d1df      	bne.n	8022ad4 <HAL_SPI_TransmitReceive+0x310>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8022b14:	2201      	movs	r2, #1
 8022b16:	f8cd 8000 	str.w	r8, [sp]
 8022b1a:	463b      	mov	r3, r7
 8022b1c:	4611      	mov	r1, r2
 8022b1e:	4620      	mov	r0, r4
 8022b20:	f7ff fcf4 	bl	802250c <SPI_WaitFlagStateUntilTimeout>
 8022b24:	2800      	cmp	r0, #0
 8022b26:	f47f aee3 	bne.w	80228f0 <HAL_SPI_TransmitReceive+0x12c>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8022b2a:	6823      	ldr	r3, [r4, #0]
 8022b2c:	7b1b      	ldrb	r3, [r3, #12]
 8022b2e:	b2db      	uxtb	r3, r3
 8022b30:	e7ce      	b.n	8022ad0 <HAL_SPI_TransmitReceive+0x30c>
    errorcode = HAL_BUSY;
 8022b32:	2502      	movs	r5, #2
 8022b34:	e70d      	b.n	8022952 <HAL_SPI_TransmitReceive+0x18e>
  __HAL_LOCK(hspi);
 8022b36:	2502      	movs	r5, #2
 8022b38:	e711      	b.n	802295e <HAL_SPI_TransmitReceive+0x19a>

08022b3a <HAL_SPI_Receive>:
{
 8022b3a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022b3e:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 8022b40:	2300      	movs	r3, #0
 8022b42:	9303      	str	r3, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8022b44:	6843      	ldr	r3, [r0, #4]
 8022b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8022b4a:	4604      	mov	r4, r0
 8022b4c:	4688      	mov	r8, r1
 8022b4e:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8022b50:	d10c      	bne.n	8022b6c <HAL_SPI_Receive+0x32>
 8022b52:	6883      	ldr	r3, [r0, #8]
 8022b54:	b953      	cbnz	r3, 8022b6c <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8022b56:	2304      	movs	r3, #4
 8022b58:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8022b5c:	4613      	mov	r3, r2
 8022b5e:	9500      	str	r5, [sp, #0]
 8022b60:	460a      	mov	r2, r1
 8022b62:	f7ff fe2f 	bl	80227c4 <HAL_SPI_TransmitReceive>
}
 8022b66:	b004      	add	sp, #16
 8022b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8022b6c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8022b70:	2b01      	cmp	r3, #1
 8022b72:	f000 80f7 	beq.w	8022d64 <HAL_SPI_Receive+0x22a>
 8022b76:	2301      	movs	r3, #1
 8022b78:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8022b7c:	f7fe feee 	bl	802195c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8022b80:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8022b84:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8022b86:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8022b88:	b2d8      	uxtb	r0, r3
 8022b8a:	f040 80e9 	bne.w	8022d60 <HAL_SPI_Receive+0x226>
  if ((pData == NULL) || (Size == 0U))
 8022b8e:	f1b8 0f00 	cmp.w	r8, #0
 8022b92:	f000 809f 	beq.w	8022cd4 <HAL_SPI_Receive+0x19a>
 8022b96:	2f00      	cmp	r7, #0
 8022b98:	f000 809c 	beq.w	8022cd4 <HAL_SPI_Receive+0x19a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8022b9c:	2304      	movs	r3, #4
 8022b9e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8022ba2:	2300      	movs	r3, #0
 8022ba4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8022ba6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8022baa:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8022bae:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8022bb0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8022bb2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022bb6:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8022bb8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8022bc0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022bc4:	d10d      	bne.n	8022be2 <HAL_SPI_Receive+0xa8>
    SPI_RESET_CRC(hspi);
 8022bc6:	6813      	ldr	r3, [r2, #0]
 8022bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8022bcc:	6013      	str	r3, [r2, #0]
 8022bce:	6813      	ldr	r3, [r2, #0]
 8022bd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022bd4:	6013      	str	r3, [r2, #0]
    hspi->RxXferCount--;
 8022bd6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8022bda:	3b01      	subs	r3, #1
 8022bdc:	b29b      	uxth	r3, r3
 8022bde:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022be2:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022be4:	6853      	ldr	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022be6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022bea:	bf8c      	ite	hi
 8022bec:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022bf0:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8022bf4:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8022bf6:	68a3      	ldr	r3, [r4, #8]
 8022bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022bfc:	d107      	bne.n	8022c0e <HAL_SPI_Receive+0xd4>
    __HAL_SPI_DISABLE(hspi);
 8022bfe:	6813      	ldr	r3, [r2, #0]
 8022c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022c04:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8022c06:	6813      	ldr	r3, [r2, #0]
 8022c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8022c0c:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8022c0e:	6813      	ldr	r3, [r2, #0]
 8022c10:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8022c12:	bf5e      	ittt	pl
 8022c14:	6813      	ldrpl	r3, [r2, #0]
 8022c16:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8022c1a:	6013      	strpl	r3, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8022c1c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8022c20:	d923      	bls.n	8022c6a <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0U)
 8022c22:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8022c26:	b29b      	uxth	r3, r3
 8022c28:	b323      	cbz	r3, 8022c74 <HAL_SPI_Receive+0x13a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8022c2a:	6823      	ldr	r3, [r4, #0]
 8022c2c:	689a      	ldr	r2, [r3, #8]
 8022c2e:	07d1      	lsls	r1, r2, #31
 8022c30:	d557      	bpl.n	8022ce2 <HAL_SPI_Receive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8022c32:	68da      	ldr	r2, [r3, #12]
 8022c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022c36:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8022c3a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8022c3c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8022c40:	3b01      	subs	r3, #1
 8022c42:	b29b      	uxth	r3, r3
 8022c44:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8022c48:	e7eb      	b.n	8022c22 <HAL_SPI_Receive+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8022c4a:	6823      	ldr	r3, [r4, #0]
 8022c4c:	689a      	ldr	r2, [r3, #8]
 8022c4e:	07d7      	lsls	r7, r2, #31
 8022c50:	d538      	bpl.n	8022cc4 <HAL_SPI_Receive+0x18a>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8022c52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022c54:	7b1b      	ldrb	r3, [r3, #12]
 8022c56:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8022c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022c5a:	3301      	adds	r3, #1
 8022c5c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8022c5e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8022c62:	3b01      	subs	r3, #1
 8022c64:	b29b      	uxth	r3, r3
 8022c66:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8022c6a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8022c6e:	b29b      	uxth	r3, r3
 8022c70:	2b00      	cmp	r3, #0
 8022c72:	d1ea      	bne.n	8022c4a <HAL_SPI_Receive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022c74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022c7a:	d142      	bne.n	8022d02 <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8022c7c:	6822      	ldr	r2, [r4, #0]
 8022c7e:	6813      	ldr	r3, [r2, #0]
 8022c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8022c84:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8022c86:	2201      	movs	r2, #1
 8022c88:	9600      	str	r6, [sp, #0]
 8022c8a:	462b      	mov	r3, r5
 8022c8c:	4611      	mov	r1, r2
 8022c8e:	4620      	mov	r0, r4
 8022c90:	f7ff fc3c 	bl	802250c <SPI_WaitFlagStateUntilTimeout>
 8022c94:	b9e8      	cbnz	r0, 8022cd2 <HAL_SPI_Receive+0x198>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022c96:	68e1      	ldr	r1, [r4, #12]
 8022c98:	6822      	ldr	r2, [r4, #0]
 8022c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022c9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8022ca0:	bf8b      	itete	hi
 8022ca2:	68d2      	ldrhi	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8022ca4:	7b12      	ldrbls	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8022ca6:	801a      	strhhi	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8022ca8:	701a      	strbls	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8022caa:	2201      	movs	r2, #1
 8022cac:	9600      	str	r6, [sp, #0]
 8022cae:	462b      	mov	r3, r5
 8022cb0:	4611      	mov	r1, r2
 8022cb2:	4620      	mov	r0, r4
 8022cb4:	f7ff fc2a 	bl	802250c <SPI_WaitFlagStateUntilTimeout>
 8022cb8:	b1d8      	cbz	r0, 8022cf2 <HAL_SPI_Receive+0x1b8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8022cba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8022cbc:	f043 0302 	orr.w	r3, r3, #2
 8022cc0:	6623      	str	r3, [r4, #96]	; 0x60
 8022cc2:	e006      	b.n	8022cd2 <HAL_SPI_Receive+0x198>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8022cc4:	f7fe fe4a 	bl	802195c <HAL_GetTick>
 8022cc8:	1b80      	subs	r0, r0, r6
 8022cca:	42a8      	cmp	r0, r5
 8022ccc:	d3cd      	bcc.n	8022c6a <HAL_SPI_Receive+0x130>
 8022cce:	1c68      	adds	r0, r5, #1
 8022cd0:	d0cb      	beq.n	8022c6a <HAL_SPI_Receive+0x130>
          errorcode = HAL_TIMEOUT;
 8022cd2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8022cd4:	2301      	movs	r3, #1
 8022cd6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8022cda:	2300      	movs	r3, #0
 8022cdc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8022ce0:	e741      	b.n	8022b66 <HAL_SPI_Receive+0x2c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8022ce2:	f7fe fe3b 	bl	802195c <HAL_GetTick>
 8022ce6:	1b80      	subs	r0, r0, r6
 8022ce8:	42a8      	cmp	r0, r5
 8022cea:	d39a      	bcc.n	8022c22 <HAL_SPI_Receive+0xe8>
 8022cec:	1c6a      	adds	r2, r5, #1
 8022cee:	d098      	beq.n	8022c22 <HAL_SPI_Receive+0xe8>
 8022cf0:	e7ef      	b.n	8022cd2 <HAL_SPI_Receive+0x198>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8022cf2:	68e2      	ldr	r2, [r4, #12]
 8022cf4:	6823      	ldr	r3, [r4, #0]
 8022cf6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8022cfa:	d11a      	bne.n	8022d32 <HAL_SPI_Receive+0x1f8>
      tmpreg = READ_REG(hspi->Instance->DR);
 8022cfc:	68db      	ldr	r3, [r3, #12]
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8022cfe:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8022d00:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8022d02:	4632      	mov	r2, r6
 8022d04:	4629      	mov	r1, r5
 8022d06:	4620      	mov	r0, r4
 8022d08:	f7ff fc5c 	bl	80225c4 <SPI_EndRxTransaction>
 8022d0c:	b108      	cbz	r0, 8022d12 <HAL_SPI_Receive+0x1d8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8022d0e:	2320      	movs	r3, #32
 8022d10:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8022d12:	6822      	ldr	r2, [r4, #0]
 8022d14:	6893      	ldr	r3, [r2, #8]
 8022d16:	06db      	lsls	r3, r3, #27
 8022d18:	d506      	bpl.n	8022d28 <HAL_SPI_Receive+0x1ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8022d1a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8022d1c:	f043 0302 	orr.w	r3, r3, #2
 8022d20:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8022d22:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8022d26:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8022d28:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8022d2a:	3800      	subs	r0, #0
 8022d2c:	bf18      	it	ne
 8022d2e:	2001      	movne	r0, #1
error :
 8022d30:	e7d0      	b.n	8022cd4 <HAL_SPI_Receive+0x19a>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8022d32:	7b1b      	ldrb	r3, [r3, #12]
 8022d34:	b2db      	uxtb	r3, r3
 8022d36:	9303      	str	r3, [sp, #12]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8022d38:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg);
 8022d3c:	9b03      	ldr	r3, [sp, #12]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8022d3e:	d1e0      	bne.n	8022d02 <HAL_SPI_Receive+0x1c8>
 8022d40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022d42:	2b02      	cmp	r3, #2
 8022d44:	d1dd      	bne.n	8022d02 <HAL_SPI_Receive+0x1c8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8022d46:	2201      	movs	r2, #1
 8022d48:	9600      	str	r6, [sp, #0]
 8022d4a:	462b      	mov	r3, r5
 8022d4c:	4611      	mov	r1, r2
 8022d4e:	4620      	mov	r0, r4
 8022d50:	f7ff fbdc 	bl	802250c <SPI_WaitFlagStateUntilTimeout>
 8022d54:	2800      	cmp	r0, #0
 8022d56:	d1b0      	bne.n	8022cba <HAL_SPI_Receive+0x180>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8022d58:	6823      	ldr	r3, [r4, #0]
 8022d5a:	7b1b      	ldrb	r3, [r3, #12]
 8022d5c:	b2db      	uxtb	r3, r3
 8022d5e:	e7ce      	b.n	8022cfe <HAL_SPI_Receive+0x1c4>
    errorcode = HAL_BUSY;
 8022d60:	2002      	movs	r0, #2
 8022d62:	e7b7      	b.n	8022cd4 <HAL_SPI_Receive+0x19a>
  __HAL_LOCK(hspi);
 8022d64:	2002      	movs	r0, #2
 8022d66:	e6fe      	b.n	8022b66 <HAL_SPI_Receive+0x2c>

08022d68 <HAL_SPI_Transmit_IT>:
{
 8022d68:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8022d6a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8022d6e:	2801      	cmp	r0, #1
 8022d70:	d04d      	beq.n	8022e0e <HAL_SPI_Transmit_IT+0xa6>
 8022d72:	2001      	movs	r0, #1
 8022d74:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 8022d78:	2900      	cmp	r1, #0
 8022d7a:	d040      	beq.n	8022dfe <HAL_SPI_Transmit_IT+0x96>
 8022d7c:	2a00      	cmp	r2, #0
 8022d7e:	d03e      	beq.n	8022dfe <HAL_SPI_Transmit_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_READY)
 8022d80:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8022d84:	2801      	cmp	r0, #1
 8022d86:	d13e      	bne.n	8022e06 <HAL_SPI_Transmit_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8022d88:	2003      	movs	r0, #3
 8022d8a:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8022d8e:	2000      	movs	r0, #0
 8022d90:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8022d92:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8022d94:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 8022d96:	491f      	ldr	r1, [pc, #124]	; (8022e14 <HAL_SPI_Transmit_IT+0xac>)
  hspi->TxXferSize  = Size;
 8022d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8022d9a:	6418      	str	r0, [r3, #64]	; 0x40
    hspi->TxISR = SPI_TxISR_8BIT;
 8022d9c:	4a1e      	ldr	r2, [pc, #120]	; (8022e18 <HAL_SPI_Transmit_IT+0xb0>)
  hspi->RxXferSize  = 0U;
 8022d9e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8022da2:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8022da6:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022da8:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 8022daa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8022dae:	bf98      	it	ls
 8022db0:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8022db2:	6899      	ldr	r1, [r3, #8]
 8022db4:	651a      	str	r2, [r3, #80]	; 0x50
 8022db6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8022dba:	681a      	ldr	r2, [r3, #0]
 8022dbc:	d107      	bne.n	8022dce <HAL_SPI_Transmit_IT+0x66>
    __HAL_SPI_DISABLE(hspi);
 8022dbe:	6811      	ldr	r1, [r2, #0]
 8022dc0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8022dc4:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 8022dc6:	6811      	ldr	r1, [r2, #0]
 8022dc8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8022dcc:	6011      	str	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022dce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8022dd0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8022dd4:	d107      	bne.n	8022de6 <HAL_SPI_Transmit_IT+0x7e>
    SPI_RESET_CRC(hspi);
 8022dd6:	6811      	ldr	r1, [r2, #0]
 8022dd8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8022ddc:	6011      	str	r1, [r2, #0]
 8022dde:	6811      	ldr	r1, [r2, #0]
 8022de0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8022de4:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8022de6:	6851      	ldr	r1, [r2, #4]
 8022de8:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8022dec:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8022dee:	6810      	ldr	r0, [r2, #0]
 8022df0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8022df4:	d109      	bne.n	8022e0a <HAL_SPI_Transmit_IT+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8022df6:	6811      	ldr	r1, [r2, #0]
 8022df8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8022dfc:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8022dfe:	2200      	movs	r2, #0
 8022e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8022e04:	4770      	bx	lr
    errorcode = HAL_BUSY;
 8022e06:	2002      	movs	r0, #2
 8022e08:	e7f9      	b.n	8022dfe <HAL_SPI_Transmit_IT+0x96>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8022e0a:	2000      	movs	r0, #0
 8022e0c:	e7f7      	b.n	8022dfe <HAL_SPI_Transmit_IT+0x96>
  __HAL_LOCK(hspi);
 8022e0e:	2002      	movs	r0, #2
}
 8022e10:	4770      	bx	lr
 8022e12:	bf00      	nop
 8022e14:	0802306f 	.word	0x0802306f
 8022e18:	080230a3 	.word	0x080230a3

08022e1c <HAL_SPI_TransmitReceive_IT>:
{
 8022e1c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 8022e1e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8022e22:	2c01      	cmp	r4, #1
 8022e24:	d070      	beq.n	8022f08 <HAL_SPI_TransmitReceive_IT+0xec>
 8022e26:	2401      	movs	r4, #1
 8022e28:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 8022e2c:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8022e30:	2c01      	cmp	r4, #1
  tmp_state           = hspi->State;
 8022e32:	b2e5      	uxtb	r5, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8022e34:	d008      	beq.n	8022e48 <HAL_SPI_TransmitReceive_IT+0x2c>
 8022e36:	6844      	ldr	r4, [r0, #4]
 8022e38:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8022e3c:	d15e      	bne.n	8022efc <HAL_SPI_TransmitReceive_IT+0xe0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8022e3e:	6884      	ldr	r4, [r0, #8]
 8022e40:	2c00      	cmp	r4, #0
 8022e42:	d15b      	bne.n	8022efc <HAL_SPI_TransmitReceive_IT+0xe0>
 8022e44:	2d04      	cmp	r5, #4
 8022e46:	d159      	bne.n	8022efc <HAL_SPI_TransmitReceive_IT+0xe0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8022e48:	2900      	cmp	r1, #0
 8022e4a:	d059      	beq.n	8022f00 <HAL_SPI_TransmitReceive_IT+0xe4>
 8022e4c:	2a00      	cmp	r2, #0
 8022e4e:	d057      	beq.n	8022f00 <HAL_SPI_TransmitReceive_IT+0xe4>
 8022e50:	2b00      	cmp	r3, #0
 8022e52:	d055      	beq.n	8022f00 <HAL_SPI_TransmitReceive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8022e54:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8022e58:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8022e5a:	2c04      	cmp	r4, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022e5c:	68c1      	ldr	r1, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8022e5e:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8022e60:	bf1c      	itt	ne
 8022e62:	2405      	movne	r4, #5
 8022e64:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022e68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8022e6c:	bf8b      	itete	hi
 8022e6e:	4a27      	ldrhi	r2, [pc, #156]	; (8022f0c <HAL_SPI_TransmitReceive_IT+0xf0>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8022e70:	4a27      	ldrls	r2, [pc, #156]	; (8022f10 <HAL_SPI_TransmitReceive_IT+0xf4>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8022e72:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8022e74:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8022e76:	bf8c      	ite	hi
 8022e78:	4a26      	ldrhi	r2, [pc, #152]	; (8022f14 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8022e7a:	4a27      	ldrls	r2, [pc, #156]	; (8022f18 <HAL_SPI_TransmitReceive_IT+0xfc>)
 8022e7c:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022e7e:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->TxXferSize  = Size;
 8022e80:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8022e82:	2400      	movs	r4, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022e84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8022e88:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 8022e8a:	6802      	ldr	r2, [r0, #0]
 8022e8c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8022e8e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8022e92:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022e96:	d12a      	bne.n	8022eee <HAL_SPI_TransmitReceive_IT+0xd2>
    hspi->CRCSize = 1U;
 8022e98:	2401      	movs	r4, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8022e9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8022e9e:	6484      	str	r4, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8022ea0:	d803      	bhi.n	8022eaa <HAL_SPI_TransmitReceive_IT+0x8e>
 8022ea2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8022ea4:	2c02      	cmp	r4, #2
      hspi->CRCSize = 2U;
 8022ea6:	bf08      	it	eq
 8022ea8:	6484      	streq	r4, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8022eaa:	6814      	ldr	r4, [r2, #0]
 8022eac:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8022eb0:	6014      	str	r4, [r2, #0]
 8022eb2:	6814      	ldr	r4, [r2, #0]
 8022eb4:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8022eb8:	6014      	str	r4, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8022eba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8022ebe:	d801      	bhi.n	8022ec4 <HAL_SPI_TransmitReceive_IT+0xa8>
 8022ec0:	2b01      	cmp	r3, #1
 8022ec2:	d917      	bls.n	8022ef4 <HAL_SPI_TransmitReceive_IT+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022ec4:	6853      	ldr	r3, [r2, #4]
 8022ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022eca:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8022ecc:	6853      	ldr	r3, [r2, #4]
 8022ece:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8022ed2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8022ed4:	6813      	ldr	r3, [r2, #0]
 8022ed6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8022eda:	d113      	bne.n	8022f04 <HAL_SPI_TransmitReceive_IT+0xe8>
    __HAL_SPI_ENABLE(hspi);
 8022edc:	6811      	ldr	r1, [r2, #0]
 8022ede:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8022ee2:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8022ee4:	2200      	movs	r2, #0
 8022ee6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8022eea:	4618      	mov	r0, r3
 8022eec:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 8022eee:	2400      	movs	r4, #0
 8022ef0:	6484      	str	r4, [r0, #72]	; 0x48
 8022ef2:	e7e2      	b.n	8022eba <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022ef4:	6853      	ldr	r3, [r2, #4]
 8022ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8022efa:	e7e6      	b.n	8022eca <HAL_SPI_TransmitReceive_IT+0xae>
    errorcode = HAL_BUSY;
 8022efc:	2302      	movs	r3, #2
 8022efe:	e7f1      	b.n	8022ee4 <HAL_SPI_TransmitReceive_IT+0xc8>
    errorcode = HAL_ERROR;
 8022f00:	2301      	movs	r3, #1
 8022f02:	e7ef      	b.n	8022ee4 <HAL_SPI_TransmitReceive_IT+0xc8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8022f04:	2300      	movs	r3, #0
 8022f06:	e7ed      	b.n	8022ee4 <HAL_SPI_TransmitReceive_IT+0xc8>
  __HAL_LOCK(hspi);
 8022f08:	2302      	movs	r3, #2
 8022f0a:	e7ee      	b.n	8022eea <HAL_SPI_TransmitReceive_IT+0xce>
 8022f0c:	080233f9 	.word	0x080233f9
 8022f10:	080232f1 	.word	0x080232f1
 8022f14:	080233a5 	.word	0x080233a5
 8022f18:	0802328b 	.word	0x0802328b

08022f1c <HAL_SPI_Receive_IT>:
{
 8022f1c:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8022f1e:	6886      	ldr	r6, [r0, #8]
{
 8022f20:	4604      	mov	r4, r0
 8022f22:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8022f24:	b95e      	cbnz	r6, 8022f3e <HAL_SPI_Receive_IT+0x22>
 8022f26:	6843      	ldr	r3, [r0, #4]
 8022f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8022f2c:	d107      	bne.n	8022f3e <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8022f2e:	2304      	movs	r3, #4
 8022f30:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 8022f34:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8022f36:	4613      	mov	r3, r2
 8022f38:	460a      	mov	r2, r1
 8022f3a:	f7ff bf6f 	b.w	8022e1c <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 8022f3e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8022f42:	2b01      	cmp	r3, #1
 8022f44:	d061      	beq.n	802300a <HAL_SPI_Receive_IT+0xee>
 8022f46:	2301      	movs	r3, #1
 8022f48:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8022f4c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8022f50:	2b01      	cmp	r3, #1
 8022f52:	b2d8      	uxtb	r0, r3
 8022f54:	d155      	bne.n	8023002 <HAL_SPI_Receive_IT+0xe6>
  if ((pData == NULL) || (Size == 0U))
 8022f56:	2d00      	cmp	r5, #0
 8022f58:	d04b      	beq.n	8022ff2 <HAL_SPI_Receive_IT+0xd6>
 8022f5a:	2a00      	cmp	r2, #0
 8022f5c:	d049      	beq.n	8022ff2 <HAL_SPI_Receive_IT+0xd6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8022f5e:	2304      	movs	r3, #4
 8022f60:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8022f64:	2300      	movs	r3, #0
 8022f66:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8022f68:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8022f6a:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 8022f6e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8022f70:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8022f72:	6523      	str	r3, [r4, #80]	; 0x50
 8022f74:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022f76:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 8022f78:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022f7c:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8022f7e:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8022f80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022f84:	bf8b      	itete	hi
 8022f86:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022f8a:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022f8e:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8022f90:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8022f92:	bf8c      	ite	hi
 8022f94:	4a1e      	ldrhi	r2, [pc, #120]	; (8023010 <HAL_SPI_Receive_IT+0xf4>)
    hspi->RxISR = SPI_RxISR_8BIT;
 8022f96:	4a1f      	ldrls	r2, [pc, #124]	; (8023014 <HAL_SPI_Receive_IT+0xf8>)
 8022f98:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8022f9a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8022f9e:	d107      	bne.n	8022fb0 <HAL_SPI_Receive_IT+0x94>
    __HAL_SPI_DISABLE(hspi);
 8022fa0:	681a      	ldr	r2, [r3, #0]
 8022fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022fa6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8022fa8:	681a      	ldr	r2, [r3, #0]
 8022faa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8022fae:	601a      	str	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022fb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8022fb2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8022fb6:	d121      	bne.n	8022ffc <HAL_SPI_Receive_IT+0xe0>
    hspi->CRCSize = 1U;
 8022fb8:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8022fba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8022fbe:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8022fc0:	d803      	bhi.n	8022fca <HAL_SPI_Receive_IT+0xae>
 8022fc2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8022fc4:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 8022fc6:	bf08      	it	eq
 8022fc8:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8022fca:	681a      	ldr	r2, [r3, #0]
 8022fcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8022fd0:	601a      	str	r2, [r3, #0]
 8022fd2:	681a      	ldr	r2, [r3, #0]
 8022fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8022fd8:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8022fda:	685a      	ldr	r2, [r3, #4]
 8022fdc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8022fe0:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8022fe2:	6818      	ldr	r0, [r3, #0]
 8022fe4:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8022fe8:	d10d      	bne.n	8023006 <HAL_SPI_Receive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 8022fea:	681a      	ldr	r2, [r3, #0]
 8022fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022ff0:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8022ff2:	2300      	movs	r3, #0
 8022ff4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8022ff8:	bc70      	pop	{r4, r5, r6}
 8022ffa:	4770      	bx	lr
    hspi->CRCSize = 0U;
 8022ffc:	2200      	movs	r2, #0
 8022ffe:	64a2      	str	r2, [r4, #72]	; 0x48
 8023000:	e7eb      	b.n	8022fda <HAL_SPI_Receive_IT+0xbe>
    errorcode = HAL_BUSY;
 8023002:	2002      	movs	r0, #2
 8023004:	e7f5      	b.n	8022ff2 <HAL_SPI_Receive_IT+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8023006:	2000      	movs	r0, #0
 8023008:	e7f3      	b.n	8022ff2 <HAL_SPI_Receive_IT+0xd6>
  __HAL_LOCK(hspi);
 802300a:	2002      	movs	r0, #2
 802300c:	e7f4      	b.n	8022ff8 <HAL_SPI_Receive_IT+0xdc>
 802300e:	bf00      	nop
 8023010:	080231a9 	.word	0x080231a9
 8023014:	0802312d 	.word	0x0802312d

08023018 <HAL_SPI_TxRxCpltCallback>:
 8023018:	4770      	bx	lr

0802301a <HAL_SPI_ErrorCallback>:
 802301a:	4770      	bx	lr

0802301c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 802301c:	b513      	push	{r0, r1, r4, lr}
 802301e:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8023020:	f7fe fc9c 	bl	802195c <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8023024:	6821      	ldr	r1, [r4, #0]
 8023026:	684b      	ldr	r3, [r1, #4]
 8023028:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 802302c:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 802302e:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8023030:	4620      	mov	r0, r4
 8023032:	2164      	movs	r1, #100	; 0x64
 8023034:	f7ff fb01 	bl	802263a <SPI_EndRxTxTransaction>
 8023038:	b118      	cbz	r0, 8023042 <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802303a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 802303c:	f043 0320 	orr.w	r3, r3, #32
 8023040:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8023042:	68a3      	ldr	r3, [r4, #8]
 8023044:	b933      	cbnz	r3, 8023054 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8023046:	9301      	str	r3, [sp, #4]
 8023048:	6823      	ldr	r3, [r4, #0]
 802304a:	68da      	ldr	r2, [r3, #12]
 802304c:	9201      	str	r2, [sp, #4]
 802304e:	689b      	ldr	r3, [r3, #8]
 8023050:	9301      	str	r3, [sp, #4]
 8023052:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8023054:	2301      	movs	r3, #1
 8023056:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802305a:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 802305c:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802305e:	b11b      	cbz	r3, 8023068 <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 8023060:	f7ff ffdb 	bl	802301a <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8023064:	b002      	add	sp, #8
 8023066:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 8023068:	f7fe faee 	bl	8021648 <HAL_SPI_TxCpltCallback>
}
 802306c:	e7fa      	b.n	8023064 <SPI_CloseTx_ISR+0x48>

0802306e <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802306e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8023070:	6803      	ldr	r3, [r0, #0]
 8023072:	7812      	ldrb	r2, [r2, #0]
 8023074:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8023076:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8023078:	3301      	adds	r3, #1
 802307a:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 802307c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 802307e:	3b01      	subs	r3, #1
 8023080:	b29b      	uxth	r3, r3
 8023082:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8023084:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8023086:	b29b      	uxth	r3, r3
 8023088:	b953      	cbnz	r3, 80230a0 <SPI_TxISR_8BIT+0x32>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802308a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802308c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8023090:	bf01      	itttt	eq
 8023092:	6802      	ldreq	r2, [r0, #0]
 8023094:	6813      	ldreq	r3, [r2, #0]
 8023096:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 802309a:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 802309c:	f7ff bfbe 	b.w	802301c <SPI_CloseTx_ISR>
}
 80230a0:	4770      	bx	lr

080230a2 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80230a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80230a4:	6802      	ldr	r2, [r0, #0]
 80230a6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80230aa:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80230ac:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80230ae:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80230b0:	3b01      	subs	r3, #1
 80230b2:	b29b      	uxth	r3, r3
 80230b4:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80230b6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80230b8:	b29b      	uxth	r3, r3
 80230ba:	b94b      	cbnz	r3, 80230d0 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80230bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80230be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80230c2:	bf02      	ittt	eq
 80230c4:	6813      	ldreq	r3, [r2, #0]
 80230c6:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80230ca:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 80230cc:	f7ff bfa6 	b.w	802301c <SPI_CloseTx_ISR>
}
 80230d0:	4770      	bx	lr

080230d2 <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80230d2:	6802      	ldr	r2, [r0, #0]
 80230d4:	6853      	ldr	r3, [r2, #4]
 80230d6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 80230da:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80230dc:	6053      	str	r3, [r2, #4]
{
 80230de:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80230e0:	f7fe fc3c 	bl	802195c <HAL_GetTick>
 80230e4:	2164      	movs	r1, #100	; 0x64
 80230e6:	4602      	mov	r2, r0
 80230e8:	4620      	mov	r0, r4
 80230ea:	f7ff fa6b 	bl	80225c4 <SPI_EndRxTransaction>
 80230ee:	b118      	cbz	r0, 80230f8 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80230f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80230f2:	f043 0320 	orr.w	r3, r3, #32
 80230f6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80230f8:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80230fa:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 80230fc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8023100:	6893      	ldr	r3, [r2, #8]
 8023102:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8023106:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8023108:	d009      	beq.n	802311e <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 802310a:	f043 0302 	orr.w	r3, r3, #2
 802310e:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8023110:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8023114:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 8023116:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 8023118:	f7ff ff7f 	bl	802301a <HAL_SPI_ErrorCallback>
}
 802311c:	e004      	b.n	8023128 <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 802311e:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8023120:	2b00      	cmp	r3, #0
 8023122:	d1f9      	bne.n	8023118 <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 8023124:	f7fe fa88 	bl	8021638 <HAL_SPI_RxCpltCallback>
}
 8023128:	bd10      	pop	{r4, pc}
	...

0802312c <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 802312c:	6802      	ldr	r2, [r0, #0]
 802312e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8023130:	7b12      	ldrb	r2, [r2, #12]
 8023132:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8023134:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8023136:	3301      	adds	r3, #1
 8023138:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 802313a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 802313e:	3b01      	subs	r3, #1
 8023140:	b29b      	uxth	r3, r3
 8023142:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8023146:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 802314a:	b29b      	uxth	r3, r3
 802314c:	2b01      	cmp	r3, #1
 802314e:	d108      	bne.n	8023162 <SPI_RxISR_8BIT+0x36>
 8023150:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8023156:	bf01      	itttt	eq
 8023158:	6802      	ldreq	r2, [r0, #0]
 802315a:	6813      	ldreq	r3, [r2, #0]
 802315c:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8023160:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8023162:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8023166:	b29b      	uxth	r3, r3
 8023168:	b943      	cbnz	r3, 802317c <SPI_RxISR_8BIT+0x50>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802316a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802316c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023170:	d102      	bne.n	8023178 <SPI_RxISR_8BIT+0x4c>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8023172:	4b03      	ldr	r3, [pc, #12]	; (8023180 <SPI_RxISR_8BIT+0x54>)
 8023174:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8023176:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8023178:	f7ff bfab 	b.w	80230d2 <SPI_CloseRx_ISR>
}
 802317c:	4770      	bx	lr
 802317e:	bf00      	nop
 8023180:	08023185 	.word	0x08023185

08023184 <SPI_RxISR_8BITCRC>:
{
 8023184:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8023186:	2200      	movs	r2, #0
 8023188:	9201      	str	r2, [sp, #4]
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 802318a:	6802      	ldr	r2, [r0, #0]
 802318c:	7b12      	ldrb	r2, [r2, #12]
 802318e:	b2d2      	uxtb	r2, r2
 8023190:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8023192:	9a01      	ldr	r2, [sp, #4]
  hspi->CRCSize--;
 8023194:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8023196:	3a01      	subs	r2, #1
 8023198:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 802319a:	b912      	cbnz	r2, 80231a2 <SPI_RxISR_8BITCRC+0x1e>
}
 802319c:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 802319e:	f7ff bf98 	b.w	80230d2 <SPI_CloseRx_ISR>
}
 80231a2:	b002      	add	sp, #8
 80231a4:	4770      	bx	lr
	...

080231a8 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80231a8:	6802      	ldr	r2, [r0, #0]
 80231aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80231ac:	68d1      	ldr	r1, [r2, #12]
 80231ae:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80231b2:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 80231b4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80231b8:	3b01      	subs	r3, #1
 80231ba:	b29b      	uxth	r3, r3
 80231bc:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80231c0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80231c4:	b29b      	uxth	r3, r3
 80231c6:	2b01      	cmp	r3, #1
 80231c8:	d107      	bne.n	80231da <SPI_RxISR_16BIT+0x32>
 80231ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80231cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80231d0:	bf02      	ittt	eq
 80231d2:	6813      	ldreq	r3, [r2, #0]
 80231d4:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80231d8:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 80231da:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80231de:	b29b      	uxth	r3, r3
 80231e0:	b943      	cbnz	r3, 80231f4 <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80231e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80231e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80231e8:	d102      	bne.n	80231f0 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 80231ea:	4b03      	ldr	r3, [pc, #12]	; (80231f8 <SPI_RxISR_16BIT+0x50>)
 80231ec:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 80231ee:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 80231f0:	f7ff bf6f 	b.w	80230d2 <SPI_CloseRx_ISR>
}
 80231f4:	4770      	bx	lr
 80231f6:	bf00      	nop
 80231f8:	080231fd 	.word	0x080231fd

080231fc <SPI_RxISR_16BITCRC>:
{
 80231fc:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 80231fe:	2300      	movs	r3, #0
 8023200:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8023202:	6803      	ldr	r3, [r0, #0]
 8023204:	68da      	ldr	r2, [r3, #12]
 8023206:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8023208:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 802320a:	685a      	ldr	r2, [r3, #4]
 802320c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8023210:	605a      	str	r2, [r3, #4]
}
 8023212:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 8023214:	f7ff bf5d 	b.w	80230d2 <SPI_CloseRx_ISR>

08023218 <SPI_CloseRxTx_ISR>:
{
 8023218:	b510      	push	{r4, lr}
 802321a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 802321c:	f7fe fb9e 	bl	802195c <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8023220:	6821      	ldr	r1, [r4, #0]
 8023222:	684b      	ldr	r3, [r1, #4]
 8023224:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 8023228:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 802322a:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 802322c:	4620      	mov	r0, r4
 802322e:	2164      	movs	r1, #100	; 0x64
 8023230:	f7ff fa03 	bl	802263a <SPI_EndRxTxTransaction>
 8023234:	b118      	cbz	r0, 802323e <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8023236:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8023238:	f043 0320 	orr.w	r3, r3, #32
 802323c:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 802323e:	6822      	ldr	r2, [r4, #0]
 8023240:	6893      	ldr	r3, [r2, #8]
 8023242:	f013 0f10 	tst.w	r3, #16
 8023246:	f04f 0301 	mov.w	r3, #1
 802324a:	d00c      	beq.n	8023266 <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 802324c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8023250:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8023252:	f043 0302 	orr.w	r3, r3, #2
 8023256:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8023258:	f64f 73ef 	movw	r3, #65519	; 0xffef
 802325c:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 802325e:	4620      	mov	r0, r4
 8023260:	f7ff fedb 	bl	802301a <HAL_SPI_ErrorCallback>
}
 8023264:	e00a      	b.n	802327c <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8023266:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8023268:	b962      	cbnz	r2, 8023284 <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 802326a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 802326e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8023272:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 8023274:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8023276:	d102      	bne.n	802327e <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 8023278:	f7fe f9de 	bl	8021638 <HAL_SPI_RxCpltCallback>
}
 802327c:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 802327e:	f7ff fecb 	bl	8023018 <HAL_SPI_TxRxCpltCallback>
 8023282:	e7fb      	b.n	802327c <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 8023284:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8023288:	e7e9      	b.n	802325e <SPI_CloseRxTx_ISR+0x46>

0802328a <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 802328a:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 802328c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802328e:	6801      	ldr	r1, [r0, #0]
 8023290:	b292      	uxth	r2, r2
 8023292:	2a01      	cmp	r2, #1
 8023294:	d918      	bls.n	80232c8 <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8023296:	f833 2b02 	ldrh.w	r2, [r3], #2
 802329a:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 802329c:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 802329e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80232a0:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 80232a2:	b29b      	uxth	r3, r3
 80232a4:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80232a6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80232a8:	b29b      	uxth	r3, r3
 80232aa:	b9fb      	cbnz	r3, 80232ec <SPI_2linesTxISR_8BIT+0x62>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80232ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80232ae:	6803      	ldr	r3, [r0, #0]
 80232b0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80232b4:	d110      	bne.n	80232d8 <SPI_2linesTxISR_8BIT+0x4e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80232b6:	681a      	ldr	r2, [r3, #0]
 80232b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80232bc:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80232be:	685a      	ldr	r2, [r3, #4]
 80232c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80232c4:	605a      	str	r2, [r3, #4]
      return;
 80232c6:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80232c8:	781b      	ldrb	r3, [r3, #0]
 80232ca:	730b      	strb	r3, [r1, #12]
    hspi->pTxBuffPtr++;
 80232cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80232ce:	3301      	adds	r3, #1
 80232d0:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 80232d2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80232d4:	3b01      	subs	r3, #1
 80232d6:	e7e4      	b.n	80232a2 <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80232d8:	685a      	ldr	r2, [r3, #4]
 80232da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80232de:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 80232e0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80232e4:	b29b      	uxth	r3, r3
 80232e6:	b90b      	cbnz	r3, 80232ec <SPI_2linesTxISR_8BIT+0x62>
      SPI_CloseRxTx_ISR(hspi);
 80232e8:	f7ff bf96 	b.w	8023218 <SPI_CloseRxTx_ISR>
}
 80232ec:	4770      	bx	lr
	...

080232f0 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 80232f0:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
 80232f4:	6802      	ldr	r2, [r0, #0]
 80232f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80232f8:	b289      	uxth	r1, r1
 80232fa:	2901      	cmp	r1, #1
 80232fc:	d922      	bls.n	8023344 <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80232fe:	68d1      	ldr	r1, [r2, #12]
 8023300:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8023304:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8023306:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 802330a:	3b02      	subs	r3, #2
 802330c:	b29b      	uxth	r3, r3
 802330e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8023312:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8023316:	b29b      	uxth	r3, r3
 8023318:	2b01      	cmp	r3, #1
 802331a:	d103      	bne.n	8023324 <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802331c:	6853      	ldr	r3, [r2, #4]
 802331e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8023322:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 8023324:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8023328:	b29b      	uxth	r3, r3
 802332a:	b9fb      	cbnz	r3, 802336c <SPI_2linesRxISR_8BIT+0x7c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802332c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 802332e:	6803      	ldr	r3, [r0, #0]
 8023330:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8023334:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8023336:	d111      	bne.n	802335c <SPI_2linesRxISR_8BIT+0x6c>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8023338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802333c:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 802333e:	4b0c      	ldr	r3, [pc, #48]	; (8023370 <SPI_2linesRxISR_8BIT+0x80>)
 8023340:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8023342:	4770      	bx	lr
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8023344:	7b12      	ldrb	r2, [r2, #12]
 8023346:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8023348:	6c03      	ldr	r3, [r0, #64]	; 0x40
 802334a:	3301      	adds	r3, #1
 802334c:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 802334e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8023352:	3b01      	subs	r3, #1
 8023354:	b29b      	uxth	r3, r3
 8023356:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 802335a:	e7e3      	b.n	8023324 <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 802335c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8023360:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 8023362:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8023364:	b29b      	uxth	r3, r3
 8023366:	b90b      	cbnz	r3, 802336c <SPI_2linesRxISR_8BIT+0x7c>
      SPI_CloseRxTx_ISR(hspi);
 8023368:	f7ff bf56 	b.w	8023218 <SPI_CloseRxTx_ISR>
}
 802336c:	4770      	bx	lr
 802336e:	bf00      	nop
 8023370:	08023375 	.word	0x08023375

08023374 <SPI_2linesRxISR_8BITCRC>:
{
 8023374:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8023376:	2200      	movs	r2, #0
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8023378:	6801      	ldr	r1, [r0, #0]
  __IO uint32_t tmpreg = 0U;
 802337a:	9201      	str	r2, [sp, #4]
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 802337c:	7b0a      	ldrb	r2, [r1, #12]
 802337e:	b2d2      	uxtb	r2, r2
 8023380:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8023382:	9a01      	ldr	r2, [sp, #4]
  hspi->CRCSize--;
 8023384:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8023386:	3a01      	subs	r2, #1
 8023388:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 802338a:	b94a      	cbnz	r2, 80233a0 <SPI_2linesRxISR_8BITCRC+0x2c>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 802338c:	684a      	ldr	r2, [r1, #4]
 802338e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8023392:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8023394:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8023396:	b29b      	uxth	r3, r3
 8023398:	b913      	cbnz	r3, 80233a0 <SPI_2linesRxISR_8BITCRC+0x2c>
}
 802339a:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 802339c:	f7ff bf3c 	b.w	8023218 <SPI_CloseRxTx_ISR>
}
 80233a0:	b002      	add	sp, #8
 80233a2:	4770      	bx	lr

080233a4 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80233a4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80233a6:	6802      	ldr	r2, [r0, #0]
{
 80233a8:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80233aa:	f831 4b02 	ldrh.w	r4, [r1], #2
 80233ae:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80233b0:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80233b2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 80233b4:	3901      	subs	r1, #1
 80233b6:	b289      	uxth	r1, r1
 80233b8:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80233ba:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 80233bc:	b289      	uxth	r1, r1
 80233be:	b959      	cbnz	r1, 80233d8 <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80233c0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80233c2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80233c6:	d10a      	bne.n	80233de <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80233c8:	6813      	ldr	r3, [r2, #0]
 80233ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80233ce:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80233d0:	6853      	ldr	r3, [r2, #4]
 80233d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80233d6:	6053      	str	r3, [r2, #4]
}
 80233d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80233dc:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80233de:	6851      	ldr	r1, [r2, #4]
 80233e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80233e4:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80233e6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80233ea:	b29b      	uxth	r3, r3
 80233ec:	2b00      	cmp	r3, #0
 80233ee:	d1f3      	bne.n	80233d8 <SPI_2linesTxISR_16BIT+0x34>
}
 80233f0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 80233f4:	f7ff bf10 	b.w	8023218 <SPI_CloseRxTx_ISR>

080233f8 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80233f8:	6801      	ldr	r1, [r0, #0]
 80233fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80233fc:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80233fe:	68cc      	ldr	r4, [r1, #12]
 8023400:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8023404:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8023406:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 802340a:	3a01      	subs	r2, #1
 802340c:	b292      	uxth	r2, r2
 802340e:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8023412:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8023416:	b292      	uxth	r2, r2
 8023418:	b92a      	cbnz	r2, 8023426 <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802341a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 802341c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8023420:	d104      	bne.n	802342c <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8023422:	4a08      	ldr	r2, [pc, #32]	; (8023444 <SPI_2linesRxISR_16BIT+0x4c>)
 8023424:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 8023426:	f85d 4b04 	ldr.w	r4, [sp], #4
 802342a:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 802342c:	684a      	ldr	r2, [r1, #4]
 802342e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023432:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8023434:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8023436:	b29b      	uxth	r3, r3
 8023438:	2b00      	cmp	r3, #0
 802343a:	d1f4      	bne.n	8023426 <SPI_2linesRxISR_16BIT+0x2e>
}
 802343c:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8023440:	f7ff beea 	b.w	8023218 <SPI_CloseRxTx_ISR>
 8023444:	08023449 	.word	0x08023449

08023448 <SPI_2linesRxISR_16BITCRC>:
{
 8023448:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 802344a:	2300      	movs	r3, #0
 802344c:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 802344e:	6803      	ldr	r3, [r0, #0]
 8023450:	68da      	ldr	r2, [r3, #12]
 8023452:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);  
 8023454:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8023456:	685a      	ldr	r2, [r3, #4]
 8023458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802345c:	605a      	str	r2, [r3, #4]
}
 802345e:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 8023460:	f7ff beda 	b.w	8023218 <SPI_CloseRxTx_ISR>

08023464 <HAL_SPI_IRQHandler>:
{
 8023464:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8023466:	6803      	ldr	r3, [r0, #0]
 8023468:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 802346a:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802346c:	0656      	lsls	r6, r2, #25
{
 802346e:	b085      	sub	sp, #20
 8023470:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8023472:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8023476:	f3c2 1780 	ubfx	r7, r2, #6, #1
 802347a:	d408      	bmi.n	802348e <HAL_SPI_IRQHandler+0x2a>
 802347c:	07d6      	lsls	r6, r2, #31
 802347e:	d506      	bpl.n	802348e <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8023480:	066e      	lsls	r6, r5, #25
 8023482:	d504      	bpl.n	802348e <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8023484:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 8023486:	b005      	add	sp, #20
 8023488:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 802348c:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 802348e:	0796      	lsls	r6, r2, #30
 8023490:	d504      	bpl.n	802349c <HAL_SPI_IRQHandler+0x38>
 8023492:	0628      	lsls	r0, r5, #24
 8023494:	d502      	bpl.n	802349c <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8023496:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8023498:	4620      	mov	r0, r4
 802349a:	e7f4      	b.n	8023486 <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 802349c:	f3c2 2000 	ubfx	r0, r2, #8, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80234a0:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80234a2:	ea41 1252 	orr.w	r2, r1, r2, lsr #5
 80234a6:	f002 0201 	and.w	r2, r2, #1
 80234aa:	4302      	orrs	r2, r0
 80234ac:	d057      	beq.n	802355e <HAL_SPI_IRQHandler+0xfa>
 80234ae:	06aa      	lsls	r2, r5, #26
 80234b0:	d555      	bpl.n	802355e <HAL_SPI_IRQHandler+0xfa>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80234b2:	b17f      	cbz	r7, 80234d4 <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80234b4:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 80234b8:	2a03      	cmp	r2, #3
 80234ba:	f04f 0100 	mov.w	r1, #0
 80234be:	d048      	beq.n	8023552 <HAL_SPI_IRQHandler+0xee>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80234c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80234c2:	f042 0204 	orr.w	r2, r2, #4
 80234c6:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80234c8:	9100      	str	r1, [sp, #0]
 80234ca:	68da      	ldr	r2, [r3, #12]
 80234cc:	9200      	str	r2, [sp, #0]
 80234ce:	689a      	ldr	r2, [r3, #8]
 80234d0:	9200      	str	r2, [sp, #0]
 80234d2:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80234d4:	07f1      	lsls	r1, r6, #31
 80234d6:	d50c      	bpl.n	80234f2 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80234d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80234da:	f042 0201 	orr.w	r2, r2, #1
 80234de:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80234e0:	2200      	movs	r2, #0
 80234e2:	9202      	str	r2, [sp, #8]
 80234e4:	689a      	ldr	r2, [r3, #8]
 80234e6:	9202      	str	r2, [sp, #8]
 80234e8:	681a      	ldr	r2, [r3, #0]
 80234ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80234ee:	601a      	str	r2, [r3, #0]
 80234f0:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80234f2:	b140      	cbz	r0, 8023506 <HAL_SPI_IRQHandler+0xa2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80234f4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80234f6:	f042 0208 	orr.w	r2, r2, #8
 80234fa:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80234fc:	2200      	movs	r2, #0
 80234fe:	9203      	str	r2, [sp, #12]
 8023500:	689a      	ldr	r2, [r3, #8]
 8023502:	9203      	str	r2, [sp, #12]
 8023504:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8023506:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8023508:	b34a      	cbz	r2, 802355e <HAL_SPI_IRQHandler+0xfa>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 802350a:	685a      	ldr	r2, [r3, #4]
 802350c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8023510:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8023512:	2201      	movs	r2, #1
 8023514:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8023518:	07aa      	lsls	r2, r5, #30
 802351a:	d022      	beq.n	8023562 <HAL_SPI_IRQHandler+0xfe>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 802351c:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 802351e:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8023520:	f022 0203 	bic.w	r2, r2, #3
 8023524:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8023526:	b140      	cbz	r0, 802353a <HAL_SPI_IRQHandler+0xd6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8023528:	4b10      	ldr	r3, [pc, #64]	; (802356c <HAL_SPI_IRQHandler+0x108>)
 802352a:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802352c:	f7fe fa98 	bl	8021a60 <HAL_DMA_Abort_IT>
 8023530:	b118      	cbz	r0, 802353a <HAL_SPI_IRQHandler+0xd6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8023532:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8023534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023538:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 802353a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802353c:	b178      	cbz	r0, 802355e <HAL_SPI_IRQHandler+0xfa>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802353e:	4b0b      	ldr	r3, [pc, #44]	; (802356c <HAL_SPI_IRQHandler+0x108>)
 8023540:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8023542:	f7fe fa8d 	bl	8021a60 <HAL_DMA_Abort_IT>
 8023546:	b150      	cbz	r0, 802355e <HAL_SPI_IRQHandler+0xfa>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8023548:	6e23      	ldr	r3, [r4, #96]	; 0x60
 802354a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802354e:	6623      	str	r3, [r4, #96]	; 0x60
 8023550:	e005      	b.n	802355e <HAL_SPI_IRQHandler+0xfa>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8023552:	9101      	str	r1, [sp, #4]
 8023554:	68da      	ldr	r2, [r3, #12]
 8023556:	9201      	str	r2, [sp, #4]
 8023558:	689b      	ldr	r3, [r3, #8]
 802355a:	9301      	str	r3, [sp, #4]
 802355c:	9b01      	ldr	r3, [sp, #4]
}
 802355e:	b005      	add	sp, #20
 8023560:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8023562:	4620      	mov	r0, r4
 8023564:	f7ff fd59 	bl	802301a <HAL_SPI_ErrorCallback>
 8023568:	e7f9      	b.n	802355e <HAL_SPI_IRQHandler+0xfa>
 802356a:	bf00      	nop
 802356c:	08023571 	.word	0x08023571

08023570 <SPI_DMAAbortOnError>:
{
 8023570:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8023572:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8023574:	2300      	movs	r3, #0
 8023576:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 802357a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 802357c:	f7ff fd4d 	bl	802301a <HAL_SPI_ErrorCallback>
}
 8023580:	bd08      	pop	{r3, pc}

08023582 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8023582:	4770      	bx	lr

08023584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8023584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023586:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8023588:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802358a:	6921      	ldr	r1, [r4, #16]
 802358c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802358e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8023590:	69c0      	ldr	r0, [r0, #28]
 8023592:	430a      	orrs	r2, r1
 8023594:	6961      	ldr	r1, [r4, #20]
 8023596:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8023598:	4993      	ldr	r1, [pc, #588]	; (80237e8 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802359a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802359c:	4029      	ands	r1, r5
 802359e:	430a      	orrs	r2, r1
 80235a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80235a2:	685a      	ldr	r2, [r3, #4]
 80235a4:	68e1      	ldr	r1, [r4, #12]
 80235a6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80235aa:	430a      	orrs	r2, r1
 80235ac:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80235ae:	4a8f      	ldr	r2, [pc, #572]	; (80237ec <UART_SetConfig+0x268>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80235b0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80235b2:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 80235b4:	bf1c      	itt	ne
 80235b6:	6a22      	ldrne	r2, [r4, #32]
 80235b8:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80235ba:	689a      	ldr	r2, [r3, #8]
 80235bc:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80235c0:	430a      	orrs	r2, r1
 80235c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80235c4:	4a8a      	ldr	r2, [pc, #552]	; (80237f0 <UART_SetConfig+0x26c>)
 80235c6:	4293      	cmp	r3, r2
 80235c8:	d11b      	bne.n	8023602 <UART_SetConfig+0x7e>
 80235ca:	4b8a      	ldr	r3, [pc, #552]	; (80237f4 <UART_SetConfig+0x270>)
 80235cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80235d0:	f003 0303 	and.w	r3, r3, #3
 80235d4:	3b01      	subs	r3, #1
 80235d6:	2b02      	cmp	r3, #2
 80235d8:	f200 80d6 	bhi.w	8023788 <UART_SetConfig+0x204>
 80235dc:	4a86      	ldr	r2, [pc, #536]	; (80237f8 <UART_SetConfig+0x274>)
 80235de:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80235e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80235e4:	f040 809e 	bne.w	8023724 <UART_SetConfig+0x1a0>
  {
    switch (clocksource)
 80235e8:	2b08      	cmp	r3, #8
 80235ea:	d828      	bhi.n	802363e <UART_SetConfig+0xba>
 80235ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 80235f0:	00cf00e0 	.word	0x00cf00e0
 80235f4:	00270098 	.word	0x00270098
 80235f8:	002700d5 	.word	0x002700d5
 80235fc:	00270027 	.word	0x00270027
 8023600:	00e4      	.short	0x00e4
  UART_GETCLOCKSOURCE(huart, clocksource);
 8023602:	4a7e      	ldr	r2, [pc, #504]	; (80237fc <UART_SetConfig+0x278>)
 8023604:	4293      	cmp	r3, r2
 8023606:	d108      	bne.n	802361a <UART_SetConfig+0x96>
 8023608:	4b7a      	ldr	r3, [pc, #488]	; (80237f4 <UART_SetConfig+0x270>)
 802360a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802360e:	4b7a      	ldr	r3, [pc, #488]	; (80237f8 <UART_SetConfig+0x274>)
 8023610:	f002 020c 	and.w	r2, r2, #12
 8023614:	4413      	add	r3, r2
 8023616:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8023618:	e7e2      	b.n	80235e0 <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 802361a:	4a79      	ldr	r2, [pc, #484]	; (8023800 <UART_SetConfig+0x27c>)
 802361c:	4293      	cmp	r3, r2
 802361e:	d119      	bne.n	8023654 <UART_SetConfig+0xd0>
 8023620:	4b74      	ldr	r3, [pc, #464]	; (80237f4 <UART_SetConfig+0x270>)
 8023622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023626:	f003 0330 	and.w	r3, r3, #48	; 0x30
 802362a:	2b20      	cmp	r3, #32
 802362c:	f000 80b8 	beq.w	80237a0 <UART_SetConfig+0x21c>
 8023630:	d807      	bhi.n	8023642 <UART_SetConfig+0xbe>
 8023632:	2b00      	cmp	r3, #0
 8023634:	f000 80b9 	beq.w	80237aa <UART_SetConfig+0x226>
 8023638:	2b10      	cmp	r3, #16
 802363a:	f000 80ab 	beq.w	8023794 <UART_SetConfig+0x210>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802363e:	2001      	movs	r0, #1
 8023640:	e04e      	b.n	80236e0 <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8023642:	2b30      	cmp	r3, #48	; 0x30
 8023644:	d1fb      	bne.n	802363e <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8023646:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 802364a:	f000 80b5 	beq.w	80237b8 <UART_SetConfig+0x234>
 802364e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8023652:	e083      	b.n	802375c <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8023654:	4a6b      	ldr	r2, [pc, #428]	; (8023804 <UART_SetConfig+0x280>)
 8023656:	4293      	cmp	r3, r2
 8023658:	d10f      	bne.n	802367a <UART_SetConfig+0xf6>
 802365a:	4b66      	ldr	r3, [pc, #408]	; (80237f4 <UART_SetConfig+0x270>)
 802365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023660:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8023664:	2b80      	cmp	r3, #128	; 0x80
 8023666:	f000 809b 	beq.w	80237a0 <UART_SetConfig+0x21c>
 802366a:	d804      	bhi.n	8023676 <UART_SetConfig+0xf2>
 802366c:	2b00      	cmp	r3, #0
 802366e:	f000 809c 	beq.w	80237aa <UART_SetConfig+0x226>
 8023672:	2b40      	cmp	r3, #64	; 0x40
 8023674:	e7e1      	b.n	802363a <UART_SetConfig+0xb6>
 8023676:	2bc0      	cmp	r3, #192	; 0xc0
 8023678:	e7e4      	b.n	8023644 <UART_SetConfig+0xc0>
 802367a:	4a63      	ldr	r2, [pc, #396]	; (8023808 <UART_SetConfig+0x284>)
 802367c:	4293      	cmp	r3, r2
 802367e:	d112      	bne.n	80236a6 <UART_SetConfig+0x122>
 8023680:	4b5c      	ldr	r3, [pc, #368]	; (80237f4 <UART_SetConfig+0x270>)
 8023682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802368a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802368e:	f000 8087 	beq.w	80237a0 <UART_SetConfig+0x21c>
 8023692:	d805      	bhi.n	80236a0 <UART_SetConfig+0x11c>
 8023694:	2b00      	cmp	r3, #0
 8023696:	f000 8088 	beq.w	80237aa <UART_SetConfig+0x226>
 802369a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802369e:	e7cc      	b.n	802363a <UART_SetConfig+0xb6>
 80236a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80236a4:	e7ce      	b.n	8023644 <UART_SetConfig+0xc0>
 80236a6:	4a51      	ldr	r2, [pc, #324]	; (80237ec <UART_SetConfig+0x268>)
 80236a8:	4293      	cmp	r3, r2
 80236aa:	d1c8      	bne.n	802363e <UART_SetConfig+0xba>
 80236ac:	4b51      	ldr	r3, [pc, #324]	; (80237f4 <UART_SetConfig+0x270>)
 80236ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80236b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80236b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80236ba:	d015      	beq.n	80236e8 <UART_SetConfig+0x164>
 80236bc:	d806      	bhi.n	80236cc <UART_SetConfig+0x148>
 80236be:	b15b      	cbz	r3, 80236d8 <UART_SetConfig+0x154>
 80236c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80236c4:	d1bb      	bne.n	802363e <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 80236c6:	f7fe fb31 	bl	8021d2c <HAL_RCC_GetSysClockFreq>
        break;
 80236ca:	e007      	b.n	80236dc <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80236cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80236d0:	d1b5      	bne.n	802363e <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 80236d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80236d6:	e008      	b.n	80236ea <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 80236d8:	f7fe fe90 	bl	80223fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80236dc:	b928      	cbnz	r0, 80236ea <UART_SetConfig+0x166>
 80236de:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80236e0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80236e2:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 80236e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = (uint32_t) HSI_VALUE;
 80236e8:	4848      	ldr	r0, [pc, #288]	; (802380c <UART_SetConfig+0x288>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80236ea:	6862      	ldr	r2, [r4, #4]
 80236ec:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80236f0:	4298      	cmp	r0, r3
 80236f2:	d3a4      	bcc.n	802363e <UART_SetConfig+0xba>
 80236f4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80236f8:	d8a1      	bhi.n	802363e <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80236fa:	0856      	lsrs	r6, r2, #1
 80236fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023700:	2700      	movs	r7, #0
 8023702:	fbe1 6700 	umlal	r6, r7, r1, r0
 8023706:	2300      	movs	r3, #0
 8023708:	4630      	mov	r0, r6
 802370a:	4639      	mov	r1, r7
 802370c:	f7fc fdb8 	bl	8020280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8023710:	4b3f      	ldr	r3, [pc, #252]	; (8023810 <UART_SetConfig+0x28c>)
 8023712:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8023716:	429a      	cmp	r2, r3
 8023718:	d891      	bhi.n	802363e <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 802371a:	6823      	ldr	r3, [r4, #0]
 802371c:	60d8      	str	r0, [r3, #12]
 802371e:	e7de      	b.n	80236de <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 8023720:	483a      	ldr	r0, [pc, #232]	; (802380c <UART_SetConfig+0x288>)
 8023722:	e049      	b.n	80237b8 <UART_SetConfig+0x234>
    switch (clocksource)
 8023724:	2b08      	cmp	r3, #8
 8023726:	d88a      	bhi.n	802363e <UART_SetConfig+0xba>
 8023728:	a201      	add	r2, pc, #4	; (adr r2, 8023730 <UART_SetConfig+0x1ac>)
 802372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802372e:	bf00      	nop
 8023730:	08023755 	.word	0x08023755
 8023734:	0802377d 	.word	0x0802377d
 8023738:	080237a7 	.word	0x080237a7
 802373c:	0802363f 	.word	0x0802363f
 8023740:	08023783 	.word	0x08023783
 8023744:	0802363f 	.word	0x0802363f
 8023748:	0802363f 	.word	0x0802363f
 802374c:	0802363f 	.word	0x0802363f
 8023750:	0802364f 	.word	0x0802364f
        pclk = HAL_RCC_GetPCLK1Freq();
 8023754:	f7fe fe52 	bl	80223fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8023758:	2800      	cmp	r0, #0
 802375a:	d0c0      	beq.n	80236de <UART_SetConfig+0x15a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 802375c:	6862      	ldr	r2, [r4, #4]
 802375e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8023762:	fbb3 f3f2 	udiv	r3, r3, r2
 8023766:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8023768:	f1a3 0110 	sub.w	r1, r3, #16
 802376c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8023770:	4291      	cmp	r1, r2
 8023772:	f63f af64 	bhi.w	802363e <UART_SetConfig+0xba>
        huart->Instance->BRR = usartdiv;
 8023776:	6822      	ldr	r2, [r4, #0]
 8023778:	60d3      	str	r3, [r2, #12]
 802377a:	e7b0      	b.n	80236de <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 802377c:	f7fe fe50 	bl	8022420 <HAL_RCC_GetPCLK2Freq>
        break;
 8023780:	e7ea      	b.n	8023758 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8023782:	f7fe fad3 	bl	8021d2c <HAL_RCC_GetSysClockFreq>
        break;
 8023786:	e7e7      	b.n	8023758 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8023788:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 802378c:	d1f6      	bne.n	802377c <UART_SetConfig+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 802378e:	f7fe fe47 	bl	8022420 <HAL_RCC_GetPCLK2Freq>
        break;
 8023792:	e00f      	b.n	80237b4 <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8023794:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8023798:	d1f3      	bne.n	8023782 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetSysClockFreq();
 802379a:	f7fe fac7 	bl	8021d2c <HAL_RCC_GetSysClockFreq>
        break;
 802379e:	e009      	b.n	80237b4 <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80237a0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80237a4:	d0bc      	beq.n	8023720 <UART_SetConfig+0x19c>
        pclk = (uint32_t) HSI_VALUE;
 80237a6:	4819      	ldr	r0, [pc, #100]	; (802380c <UART_SetConfig+0x288>)
 80237a8:	e7d8      	b.n	802375c <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80237aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80237ae:	d1d1      	bne.n	8023754 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80237b0:	f7fe fe24 	bl	80223fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80237b4:	2800      	cmp	r0, #0
 80237b6:	d092      	beq.n	80236de <UART_SetConfig+0x15a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80237b8:	6862      	ldr	r2, [r4, #4]
 80237ba:	0853      	lsrs	r3, r2, #1
 80237bc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80237c0:	fbb0 f0f2 	udiv	r0, r0, r2
 80237c4:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80237c6:	f1a3 0110 	sub.w	r1, r3, #16
 80237ca:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80237ce:	4291      	cmp	r1, r2
 80237d0:	f63f af35 	bhi.w	802363e <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80237d4:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 80237d8:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80237da:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80237dc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80237e0:	4318      	orrs	r0, r3
 80237e2:	60d0      	str	r0, [r2, #12]
 80237e4:	e77b      	b.n	80236de <UART_SetConfig+0x15a>
 80237e6:	bf00      	nop
 80237e8:	efff69f3 	.word	0xefff69f3
 80237ec:	40008000 	.word	0x40008000
 80237f0:	40013800 	.word	0x40013800
 80237f4:	40021000 	.word	0x40021000
 80237f8:	080251d0 	.word	0x080251d0
 80237fc:	40004400 	.word	0x40004400
 8023800:	40004800 	.word	0x40004800
 8023804:	40004c00 	.word	0x40004c00
 8023808:	40005000 	.word	0x40005000
 802380c:	00f42400 	.word	0x00f42400
 8023810:	000ffcff 	.word	0x000ffcff

08023814 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8023814:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023816:	07da      	lsls	r2, r3, #31
{
 8023818:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802381a:	d506      	bpl.n	802382a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802381c:	6801      	ldr	r1, [r0, #0]
 802381e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8023820:	684a      	ldr	r2, [r1, #4]
 8023822:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8023826:	4322      	orrs	r2, r4
 8023828:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802382a:	079c      	lsls	r4, r3, #30
 802382c:	d506      	bpl.n	802383c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 802382e:	6801      	ldr	r1, [r0, #0]
 8023830:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8023832:	684a      	ldr	r2, [r1, #4]
 8023834:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8023838:	4322      	orrs	r2, r4
 802383a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802383c:	0759      	lsls	r1, r3, #29
 802383e:	d506      	bpl.n	802384e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8023840:	6801      	ldr	r1, [r0, #0]
 8023842:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8023844:	684a      	ldr	r2, [r1, #4]
 8023846:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802384a:	4322      	orrs	r2, r4
 802384c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 802384e:	071a      	lsls	r2, r3, #28
 8023850:	d506      	bpl.n	8023860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8023852:	6801      	ldr	r1, [r0, #0]
 8023854:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8023856:	684a      	ldr	r2, [r1, #4]
 8023858:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802385c:	4322      	orrs	r2, r4
 802385e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8023860:	06dc      	lsls	r4, r3, #27
 8023862:	d506      	bpl.n	8023872 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8023864:	6801      	ldr	r1, [r0, #0]
 8023866:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8023868:	688a      	ldr	r2, [r1, #8]
 802386a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802386e:	4322      	orrs	r2, r4
 8023870:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8023872:	0699      	lsls	r1, r3, #26
 8023874:	d506      	bpl.n	8023884 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8023876:	6801      	ldr	r1, [r0, #0]
 8023878:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 802387a:	688a      	ldr	r2, [r1, #8]
 802387c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023880:	4322      	orrs	r2, r4
 8023882:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8023884:	065a      	lsls	r2, r3, #25
 8023886:	d50f      	bpl.n	80238a8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8023888:	6801      	ldr	r1, [r0, #0]
 802388a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 802388c:	684a      	ldr	r2, [r1, #4]
 802388e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8023892:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8023894:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8023898:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802389a:	d105      	bne.n	80238a8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 802389c:	684a      	ldr	r2, [r1, #4]
 802389e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80238a0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80238a4:	4322      	orrs	r2, r4
 80238a6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80238a8:	061b      	lsls	r3, r3, #24
 80238aa:	d506      	bpl.n	80238ba <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80238ac:	6802      	ldr	r2, [r0, #0]
 80238ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80238b0:	6853      	ldr	r3, [r2, #4]
 80238b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80238b6:	430b      	orrs	r3, r1
 80238b8:	6053      	str	r3, [r2, #4]
  }
}
 80238ba:	bd10      	pop	{r4, pc}

080238bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80238bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80238c4:	4604      	mov	r4, r0
 80238c6:	460e      	mov	r6, r1
 80238c8:	4615      	mov	r5, r2
 80238ca:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80238cc:	6822      	ldr	r2, [r4, #0]
 80238ce:	69d3      	ldr	r3, [r2, #28]
 80238d0:	ea36 0303 	bics.w	r3, r6, r3
 80238d4:	bf0c      	ite	eq
 80238d6:	2301      	moveq	r3, #1
 80238d8:	2300      	movne	r3, #0
 80238da:	42ab      	cmp	r3, r5
 80238dc:	d001      	beq.n	80238e2 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80238de:	2000      	movs	r0, #0
 80238e0:	e01a      	b.n	8023918 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80238e2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80238e6:	d0f2      	beq.n	80238ce <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80238e8:	f7fe f838 	bl	802195c <HAL_GetTick>
 80238ec:	1bc0      	subs	r0, r0, r7
 80238ee:	4540      	cmp	r0, r8
 80238f0:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80238f2:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80238f4:	d802      	bhi.n	80238fc <UART_WaitOnFlagUntilTimeout+0x40>
 80238f6:	f1b8 0f00 	cmp.w	r8, #0
 80238fa:	d10f      	bne.n	802391c <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80238fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8023900:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023902:	6883      	ldr	r3, [r0, #8]
 8023904:	f023 0301 	bic.w	r3, r3, #1
 8023908:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 802390a:	2320      	movs	r3, #32
 802390c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 802390e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8023910:	2300      	movs	r3, #0
 8023912:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8023916:	2003      	movs	r0, #3
}
 8023918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 802391c:	075a      	lsls	r2, r3, #29
 802391e:	d5d5      	bpl.n	80238cc <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8023920:	69c3      	ldr	r3, [r0, #28]
 8023922:	051b      	lsls	r3, r3, #20
 8023924:	d5d2      	bpl.n	80238cc <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8023926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802392a:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802392c:	6803      	ldr	r3, [r0, #0]
 802392e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8023932:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023934:	6883      	ldr	r3, [r0, #8]
 8023936:	f023 0301 	bic.w	r3, r3, #1
 802393a:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 802393c:	2320      	movs	r3, #32
 802393e:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8023940:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8023942:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8023946:	e7e3      	b.n	8023910 <UART_WaitOnFlagUntilTimeout+0x54>

08023948 <HAL_UART_Transmit>:
{
 8023948:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802394c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 802394e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8023950:	2b20      	cmp	r3, #32
{
 8023952:	4604      	mov	r4, r0
 8023954:	460e      	mov	r6, r1
 8023956:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8023958:	d14e      	bne.n	80239f8 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 802395a:	2900      	cmp	r1, #0
 802395c:	d04a      	beq.n	80239f4 <HAL_UART_Transmit+0xac>
 802395e:	2a00      	cmp	r2, #0
 8023960:	d048      	beq.n	80239f4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8023962:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8023966:	2b01      	cmp	r3, #1
 8023968:	d046      	beq.n	80239f8 <HAL_UART_Transmit+0xb0>
 802396a:	2301      	movs	r3, #1
 802396c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023970:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8023972:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023974:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8023978:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 802397a:	f7fd ffef 	bl	802195c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802397e:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8023980:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023984:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8023988:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 802398a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802398e:	d103      	bne.n	8023998 <HAL_UART_Transmit+0x50>
 8023990:	6922      	ldr	r2, [r4, #16]
 8023992:	b90a      	cbnz	r2, 8023998 <HAL_UART_Transmit+0x50>
 8023994:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8023996:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8023998:	2200      	movs	r2, #0
 802399a:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 802399e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80239a2:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80239a6:	b292      	uxth	r2, r2
 80239a8:	b93a      	cbnz	r2, 80239ba <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80239aa:	2140      	movs	r1, #64	; 0x40
 80239ac:	4620      	mov	r0, r4
 80239ae:	f7ff ff85 	bl	80238bc <UART_WaitOnFlagUntilTimeout>
 80239b2:	b950      	cbnz	r0, 80239ca <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80239b4:	2320      	movs	r3, #32
 80239b6:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80239b8:	e008      	b.n	80239cc <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80239ba:	2200      	movs	r2, #0
 80239bc:	2180      	movs	r1, #128	; 0x80
 80239be:	4620      	mov	r0, r4
 80239c0:	9303      	str	r3, [sp, #12]
 80239c2:	f7ff ff7b 	bl	80238bc <UART_WaitOnFlagUntilTimeout>
 80239c6:	9b03      	ldr	r3, [sp, #12]
 80239c8:	b118      	cbz	r0, 80239d2 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80239ca:	2003      	movs	r0, #3
}
 80239cc:	b004      	add	sp, #16
 80239ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 80239d2:	6821      	ldr	r1, [r4, #0]
 80239d4:	b95e      	cbnz	r6, 80239ee <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80239d6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80239da:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80239de:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80239e0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80239e4:	3a01      	subs	r2, #1
 80239e6:	b292      	uxth	r2, r2
 80239e8:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80239ec:	e7d7      	b.n	802399e <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80239ee:	f816 2b01 	ldrb.w	r2, [r6], #1
 80239f2:	e7f4      	b.n	80239de <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80239f4:	2001      	movs	r0, #1
 80239f6:	e7e9      	b.n	80239cc <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80239f8:	2002      	movs	r0, #2
 80239fa:	e7e7      	b.n	80239cc <HAL_UART_Transmit+0x84>

080239fc <UART_CheckIdleState>:
{
 80239fc:	b530      	push	{r4, r5, lr}
 80239fe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023a00:	2500      	movs	r5, #0
{
 8023a02:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023a04:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8023a08:	f7fd ffa8 	bl	802195c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8023a0c:	6822      	ldr	r2, [r4, #0]
 8023a0e:	6812      	ldr	r2, [r2, #0]
 8023a10:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8023a12:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8023a14:	d415      	bmi.n	8023a42 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8023a16:	6822      	ldr	r2, [r4, #0]
 8023a18:	6812      	ldr	r2, [r2, #0]
 8023a1a:	0752      	lsls	r2, r2, #29
 8023a1c:	d509      	bpl.n	8023a32 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023a1e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8023a22:	9200      	str	r2, [sp, #0]
 8023a24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8023a28:	2200      	movs	r2, #0
 8023a2a:	4620      	mov	r0, r4
 8023a2c:	f7ff ff46 	bl	80238bc <UART_WaitOnFlagUntilTimeout>
 8023a30:	b9a0      	cbnz	r0, 8023a5c <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8023a32:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023a34:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8023a36:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8023a38:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8023a3c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023a3e:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8023a40:	e00d      	b.n	8023a5e <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023a42:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8023a46:	9200      	str	r2, [sp, #0]
 8023a48:	9003      	str	r0, [sp, #12]
 8023a4a:	462a      	mov	r2, r5
 8023a4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8023a50:	4620      	mov	r0, r4
 8023a52:	f7ff ff33 	bl	80238bc <UART_WaitOnFlagUntilTimeout>
 8023a56:	9b03      	ldr	r3, [sp, #12]
 8023a58:	2800      	cmp	r0, #0
 8023a5a:	d0dc      	beq.n	8023a16 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8023a5c:	2003      	movs	r0, #3
}
 8023a5e:	b005      	add	sp, #20
 8023a60:	bd30      	pop	{r4, r5, pc}

08023a62 <HAL_UART_Init>:
{
 8023a62:	b510      	push	{r4, lr}
  if (huart == NULL)
 8023a64:	4604      	mov	r4, r0
 8023a66:	b340      	cbz	r0, 8023aba <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8023a68:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8023a6a:	b91b      	cbnz	r3, 8023a74 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8023a6c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8023a70:	f7ff fd87 	bl	8023582 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8023a74:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8023a76:	2324      	movs	r3, #36	; 0x24
 8023a78:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8023a7a:	6813      	ldr	r3, [r2, #0]
 8023a7c:	f023 0301 	bic.w	r3, r3, #1
 8023a80:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8023a82:	4620      	mov	r0, r4
 8023a84:	f7ff fd7e 	bl	8023584 <UART_SetConfig>
 8023a88:	2801      	cmp	r0, #1
 8023a8a:	d016      	beq.n	8023aba <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8023a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023a8e:	b113      	cbz	r3, 8023a96 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8023a90:	4620      	mov	r0, r4
 8023a92:	f7ff febf 	bl	8023814 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8023a96:	6823      	ldr	r3, [r4, #0]
 8023a98:	685a      	ldr	r2, [r3, #4]
 8023a9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8023a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8023aa0:	689a      	ldr	r2, [r3, #8]
 8023aa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8023aa6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8023aa8:	681a      	ldr	r2, [r3, #0]
 8023aaa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8023aae:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8023ab0:	601a      	str	r2, [r3, #0]
}
 8023ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8023ab6:	f7ff bfa1 	b.w	80239fc <UART_CheckIdleState>
}
 8023aba:	2001      	movs	r0, #1
 8023abc:	bd10      	pop	{r4, pc}
	...

08023ac0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8023ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8023af8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8023ac4:	f7fd fee2 	bl	802188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8023ac8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8023aca:	e003      	b.n	8023ad4 <LoopCopyDataInit>

08023acc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8023acc:	4b0b      	ldr	r3, [pc, #44]	; (8023afc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8023ace:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8023ad0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8023ad2:	3104      	adds	r1, #4

08023ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8023ad4:	480a      	ldr	r0, [pc, #40]	; (8023b00 <LoopForever+0xa>)
	ldr	r3, =_edata
 8023ad6:	4b0b      	ldr	r3, [pc, #44]	; (8023b04 <LoopForever+0xe>)
	adds	r2, r0, r1
 8023ad8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8023ada:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8023adc:	d3f6      	bcc.n	8023acc <CopyDataInit>
	ldr	r2, =_sbss
 8023ade:	4a0a      	ldr	r2, [pc, #40]	; (8023b08 <LoopForever+0x12>)
	b	LoopFillZerobss
 8023ae0:	e002      	b.n	8023ae8 <LoopFillZerobss>

08023ae2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8023ae2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8023ae4:	f842 3b04 	str.w	r3, [r2], #4

08023ae8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8023ae8:	4b08      	ldr	r3, [pc, #32]	; (8023b0c <LoopForever+0x16>)
	cmp	r2, r3
 8023aea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8023aec:	d3f9      	bcc.n	8023ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8023aee:	f000 f861 	bl	8023bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8023af2:	f7fc fd5d 	bl	80205b0 <main>

08023af6 <LoopForever>:

LoopForever:
    b LoopForever
 8023af6:	e7fe      	b.n	8023af6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8023af8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8023afc:	08025b48 	.word	0x08025b48
	ldr	r0, =_sdata
 8023b00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8023b04:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8023b08:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8023b0c:	20000d74 	.word	0x20000d74

08023b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8023b10:	e7fe      	b.n	8023b10 <ADC1_2_IRQHandler>

08023b12 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8023b12:	2001      	movs	r0, #1
 8023b14:	4770      	bx	lr

08023b16 <_kill>:

int _kill(int pid, int sig)
{
 8023b16:	b508      	push	{r3, lr}
	errno = EINVAL;
 8023b18:	f000 f846 	bl	8023ba8 <__errno>
 8023b1c:	2316      	movs	r3, #22
 8023b1e:	6003      	str	r3, [r0, #0]
	return -1;
}
 8023b20:	f04f 30ff 	mov.w	r0, #4294967295
 8023b24:	bd08      	pop	{r3, pc}

08023b26 <_exit>:

void _exit (int status)
{
 8023b26:	b508      	push	{r3, lr}
	errno = EINVAL;
 8023b28:	f000 f83e 	bl	8023ba8 <__errno>
 8023b2c:	2316      	movs	r3, #22
 8023b2e:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8023b30:	e7fe      	b.n	8023b30 <_exit+0xa>

08023b32 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8023b32:	b510      	push	{r4, lr}
 8023b34:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8023b36:	f3af 8000 	nop.w
 8023b3a:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8023b3c:	2001      	movs	r0, #1
 8023b3e:	bd10      	pop	{r4, pc}

08023b40 <_write>:

int _write(int file, char *ptr, int len)
{
 8023b40:	b570      	push	{r4, r5, r6, lr}
 8023b42:	460e      	mov	r6, r1
 8023b44:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023b46:	2500      	movs	r5, #0
 8023b48:	42a5      	cmp	r5, r4
 8023b4a:	db01      	blt.n	8023b50 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8023b4c:	4620      	mov	r0, r4
 8023b4e:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8023b50:	5d70      	ldrb	r0, [r6, r5]
 8023b52:	f7fc fe8f 	bl	8020874 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023b56:	3501      	adds	r5, #1
 8023b58:	e7f6      	b.n	8023b48 <_write+0x8>
	...

08023b5c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8023b5c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8023b5e:	4b0a      	ldr	r3, [pc, #40]	; (8023b88 <_sbrk+0x2c>)
 8023b60:	6819      	ldr	r1, [r3, #0]
{
 8023b62:	4602      	mov	r2, r0
	if (heap_end == 0)
 8023b64:	b909      	cbnz	r1, 8023b6a <_sbrk+0xe>
		heap_end = &end;
 8023b66:	4909      	ldr	r1, [pc, #36]	; (8023b8c <_sbrk+0x30>)
 8023b68:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8023b6a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8023b6c:	4669      	mov	r1, sp
 8023b6e:	4402      	add	r2, r0
 8023b70:	428a      	cmp	r2, r1
 8023b72:	d906      	bls.n	8023b82 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8023b74:	f000 f818 	bl	8023ba8 <__errno>
 8023b78:	230c      	movs	r3, #12
 8023b7a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8023b7c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8023b80:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8023b82:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8023b84:	e7fc      	b.n	8023b80 <_sbrk+0x24>
 8023b86:	bf00      	nop
 8023b88:	200002ac 	.word	0x200002ac
 8023b8c:	20000d78 	.word	0x20000d78

08023b90 <_close>:

int _close(int file)
{
	return -1;
}
 8023b90:	f04f 30ff 	mov.w	r0, #4294967295
 8023b94:	4770      	bx	lr

08023b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8023b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8023b9a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8023b9c:	2000      	movs	r0, #0
 8023b9e:	4770      	bx	lr

08023ba0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8023ba0:	2001      	movs	r0, #1
 8023ba2:	4770      	bx	lr

08023ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8023ba4:	2000      	movs	r0, #0
 8023ba6:	4770      	bx	lr

08023ba8 <__errno>:
 8023ba8:	4b01      	ldr	r3, [pc, #4]	; (8023bb0 <__errno+0x8>)
 8023baa:	6818      	ldr	r0, [r3, #0]
 8023bac:	4770      	bx	lr
 8023bae:	bf00      	nop
 8023bb0:	20000024 	.word	0x20000024

08023bb4 <__libc_init_array>:
 8023bb4:	b570      	push	{r4, r5, r6, lr}
 8023bb6:	4d0d      	ldr	r5, [pc, #52]	; (8023bec <__libc_init_array+0x38>)
 8023bb8:	4c0d      	ldr	r4, [pc, #52]	; (8023bf0 <__libc_init_array+0x3c>)
 8023bba:	1b64      	subs	r4, r4, r5
 8023bbc:	10a4      	asrs	r4, r4, #2
 8023bbe:	2600      	movs	r6, #0
 8023bc0:	42a6      	cmp	r6, r4
 8023bc2:	d109      	bne.n	8023bd8 <__libc_init_array+0x24>
 8023bc4:	4d0b      	ldr	r5, [pc, #44]	; (8023bf4 <__libc_init_array+0x40>)
 8023bc6:	4c0c      	ldr	r4, [pc, #48]	; (8023bf8 <__libc_init_array+0x44>)
 8023bc8:	f001 fad0 	bl	802516c <_init>
 8023bcc:	1b64      	subs	r4, r4, r5
 8023bce:	10a4      	asrs	r4, r4, #2
 8023bd0:	2600      	movs	r6, #0
 8023bd2:	42a6      	cmp	r6, r4
 8023bd4:	d105      	bne.n	8023be2 <__libc_init_array+0x2e>
 8023bd6:	bd70      	pop	{r4, r5, r6, pc}
 8023bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8023bdc:	4798      	blx	r3
 8023bde:	3601      	adds	r6, #1
 8023be0:	e7ee      	b.n	8023bc0 <__libc_init_array+0xc>
 8023be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8023be6:	4798      	blx	r3
 8023be8:	3601      	adds	r6, #1
 8023bea:	e7f2      	b.n	8023bd2 <__libc_init_array+0x1e>
 8023bec:	08025b38 	.word	0x08025b38
 8023bf0:	08025b38 	.word	0x08025b38
 8023bf4:	08025b38 	.word	0x08025b38
 8023bf8:	08025b3c 	.word	0x08025b3c

08023bfc <memcpy>:
 8023bfc:	440a      	add	r2, r1
 8023bfe:	4291      	cmp	r1, r2
 8023c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8023c04:	d100      	bne.n	8023c08 <memcpy+0xc>
 8023c06:	4770      	bx	lr
 8023c08:	b510      	push	{r4, lr}
 8023c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023c12:	4291      	cmp	r1, r2
 8023c14:	d1f9      	bne.n	8023c0a <memcpy+0xe>
 8023c16:	bd10      	pop	{r4, pc}

08023c18 <memset>:
 8023c18:	4402      	add	r2, r0
 8023c1a:	4603      	mov	r3, r0
 8023c1c:	4293      	cmp	r3, r2
 8023c1e:	d100      	bne.n	8023c22 <memset+0xa>
 8023c20:	4770      	bx	lr
 8023c22:	f803 1b01 	strb.w	r1, [r3], #1
 8023c26:	e7f9      	b.n	8023c1c <memset+0x4>

08023c28 <iprintf>:
 8023c28:	b40f      	push	{r0, r1, r2, r3}
 8023c2a:	4b0a      	ldr	r3, [pc, #40]	; (8023c54 <iprintf+0x2c>)
 8023c2c:	b513      	push	{r0, r1, r4, lr}
 8023c2e:	681c      	ldr	r4, [r3, #0]
 8023c30:	b124      	cbz	r4, 8023c3c <iprintf+0x14>
 8023c32:	69a3      	ldr	r3, [r4, #24]
 8023c34:	b913      	cbnz	r3, 8023c3c <iprintf+0x14>
 8023c36:	4620      	mov	r0, r4
 8023c38:	f000 fb2a 	bl	8024290 <__sinit>
 8023c3c:	ab05      	add	r3, sp, #20
 8023c3e:	9a04      	ldr	r2, [sp, #16]
 8023c40:	68a1      	ldr	r1, [r4, #8]
 8023c42:	9301      	str	r3, [sp, #4]
 8023c44:	4620      	mov	r0, r4
 8023c46:	f000 fe71 	bl	802492c <_vfiprintf_r>
 8023c4a:	b002      	add	sp, #8
 8023c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c50:	b004      	add	sp, #16
 8023c52:	4770      	bx	lr
 8023c54:	20000024 	.word	0x20000024

08023c58 <_puts_r>:
 8023c58:	b570      	push	{r4, r5, r6, lr}
 8023c5a:	460e      	mov	r6, r1
 8023c5c:	4605      	mov	r5, r0
 8023c5e:	b118      	cbz	r0, 8023c68 <_puts_r+0x10>
 8023c60:	6983      	ldr	r3, [r0, #24]
 8023c62:	b90b      	cbnz	r3, 8023c68 <_puts_r+0x10>
 8023c64:	f000 fb14 	bl	8024290 <__sinit>
 8023c68:	69ab      	ldr	r3, [r5, #24]
 8023c6a:	68ac      	ldr	r4, [r5, #8]
 8023c6c:	b913      	cbnz	r3, 8023c74 <_puts_r+0x1c>
 8023c6e:	4628      	mov	r0, r5
 8023c70:	f000 fb0e 	bl	8024290 <__sinit>
 8023c74:	4b2c      	ldr	r3, [pc, #176]	; (8023d28 <_puts_r+0xd0>)
 8023c76:	429c      	cmp	r4, r3
 8023c78:	d120      	bne.n	8023cbc <_puts_r+0x64>
 8023c7a:	686c      	ldr	r4, [r5, #4]
 8023c7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023c7e:	07db      	lsls	r3, r3, #31
 8023c80:	d405      	bmi.n	8023c8e <_puts_r+0x36>
 8023c82:	89a3      	ldrh	r3, [r4, #12]
 8023c84:	0598      	lsls	r0, r3, #22
 8023c86:	d402      	bmi.n	8023c8e <_puts_r+0x36>
 8023c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023c8a:	f000 fbb1 	bl	80243f0 <__retarget_lock_acquire_recursive>
 8023c8e:	89a3      	ldrh	r3, [r4, #12]
 8023c90:	0719      	lsls	r1, r3, #28
 8023c92:	d51d      	bpl.n	8023cd0 <_puts_r+0x78>
 8023c94:	6923      	ldr	r3, [r4, #16]
 8023c96:	b1db      	cbz	r3, 8023cd0 <_puts_r+0x78>
 8023c98:	3e01      	subs	r6, #1
 8023c9a:	68a3      	ldr	r3, [r4, #8]
 8023c9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8023ca0:	3b01      	subs	r3, #1
 8023ca2:	60a3      	str	r3, [r4, #8]
 8023ca4:	bb39      	cbnz	r1, 8023cf6 <_puts_r+0x9e>
 8023ca6:	2b00      	cmp	r3, #0
 8023ca8:	da38      	bge.n	8023d1c <_puts_r+0xc4>
 8023caa:	4622      	mov	r2, r4
 8023cac:	210a      	movs	r1, #10
 8023cae:	4628      	mov	r0, r5
 8023cb0:	f000 f8f6 	bl	8023ea0 <__swbuf_r>
 8023cb4:	3001      	adds	r0, #1
 8023cb6:	d011      	beq.n	8023cdc <_puts_r+0x84>
 8023cb8:	250a      	movs	r5, #10
 8023cba:	e011      	b.n	8023ce0 <_puts_r+0x88>
 8023cbc:	4b1b      	ldr	r3, [pc, #108]	; (8023d2c <_puts_r+0xd4>)
 8023cbe:	429c      	cmp	r4, r3
 8023cc0:	d101      	bne.n	8023cc6 <_puts_r+0x6e>
 8023cc2:	68ac      	ldr	r4, [r5, #8]
 8023cc4:	e7da      	b.n	8023c7c <_puts_r+0x24>
 8023cc6:	4b1a      	ldr	r3, [pc, #104]	; (8023d30 <_puts_r+0xd8>)
 8023cc8:	429c      	cmp	r4, r3
 8023cca:	bf08      	it	eq
 8023ccc:	68ec      	ldreq	r4, [r5, #12]
 8023cce:	e7d5      	b.n	8023c7c <_puts_r+0x24>
 8023cd0:	4621      	mov	r1, r4
 8023cd2:	4628      	mov	r0, r5
 8023cd4:	f000 f936 	bl	8023f44 <__swsetup_r>
 8023cd8:	2800      	cmp	r0, #0
 8023cda:	d0dd      	beq.n	8023c98 <_puts_r+0x40>
 8023cdc:	f04f 35ff 	mov.w	r5, #4294967295
 8023ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023ce2:	07da      	lsls	r2, r3, #31
 8023ce4:	d405      	bmi.n	8023cf2 <_puts_r+0x9a>
 8023ce6:	89a3      	ldrh	r3, [r4, #12]
 8023ce8:	059b      	lsls	r3, r3, #22
 8023cea:	d402      	bmi.n	8023cf2 <_puts_r+0x9a>
 8023cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023cee:	f000 fb80 	bl	80243f2 <__retarget_lock_release_recursive>
 8023cf2:	4628      	mov	r0, r5
 8023cf4:	bd70      	pop	{r4, r5, r6, pc}
 8023cf6:	2b00      	cmp	r3, #0
 8023cf8:	da04      	bge.n	8023d04 <_puts_r+0xac>
 8023cfa:	69a2      	ldr	r2, [r4, #24]
 8023cfc:	429a      	cmp	r2, r3
 8023cfe:	dc06      	bgt.n	8023d0e <_puts_r+0xb6>
 8023d00:	290a      	cmp	r1, #10
 8023d02:	d004      	beq.n	8023d0e <_puts_r+0xb6>
 8023d04:	6823      	ldr	r3, [r4, #0]
 8023d06:	1c5a      	adds	r2, r3, #1
 8023d08:	6022      	str	r2, [r4, #0]
 8023d0a:	7019      	strb	r1, [r3, #0]
 8023d0c:	e7c5      	b.n	8023c9a <_puts_r+0x42>
 8023d0e:	4622      	mov	r2, r4
 8023d10:	4628      	mov	r0, r5
 8023d12:	f000 f8c5 	bl	8023ea0 <__swbuf_r>
 8023d16:	3001      	adds	r0, #1
 8023d18:	d1bf      	bne.n	8023c9a <_puts_r+0x42>
 8023d1a:	e7df      	b.n	8023cdc <_puts_r+0x84>
 8023d1c:	6823      	ldr	r3, [r4, #0]
 8023d1e:	250a      	movs	r5, #10
 8023d20:	1c5a      	adds	r2, r3, #1
 8023d22:	6022      	str	r2, [r4, #0]
 8023d24:	701d      	strb	r5, [r3, #0]
 8023d26:	e7db      	b.n	8023ce0 <_puts_r+0x88>
 8023d28:	08025abc 	.word	0x08025abc
 8023d2c:	08025adc 	.word	0x08025adc
 8023d30:	08025a9c 	.word	0x08025a9c

08023d34 <puts>:
 8023d34:	4b02      	ldr	r3, [pc, #8]	; (8023d40 <puts+0xc>)
 8023d36:	4601      	mov	r1, r0
 8023d38:	6818      	ldr	r0, [r3, #0]
 8023d3a:	f7ff bf8d 	b.w	8023c58 <_puts_r>
 8023d3e:	bf00      	nop
 8023d40:	20000024 	.word	0x20000024

08023d44 <siprintf>:
 8023d44:	b40e      	push	{r1, r2, r3}
 8023d46:	b500      	push	{lr}
 8023d48:	b09c      	sub	sp, #112	; 0x70
 8023d4a:	ab1d      	add	r3, sp, #116	; 0x74
 8023d4c:	9002      	str	r0, [sp, #8]
 8023d4e:	9006      	str	r0, [sp, #24]
 8023d50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023d54:	4809      	ldr	r0, [pc, #36]	; (8023d7c <siprintf+0x38>)
 8023d56:	9107      	str	r1, [sp, #28]
 8023d58:	9104      	str	r1, [sp, #16]
 8023d5a:	4909      	ldr	r1, [pc, #36]	; (8023d80 <siprintf+0x3c>)
 8023d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8023d60:	9105      	str	r1, [sp, #20]
 8023d62:	6800      	ldr	r0, [r0, #0]
 8023d64:	9301      	str	r3, [sp, #4]
 8023d66:	a902      	add	r1, sp, #8
 8023d68:	f000 fcb6 	bl	80246d8 <_svfiprintf_r>
 8023d6c:	9b02      	ldr	r3, [sp, #8]
 8023d6e:	2200      	movs	r2, #0
 8023d70:	701a      	strb	r2, [r3, #0]
 8023d72:	b01c      	add	sp, #112	; 0x70
 8023d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8023d78:	b003      	add	sp, #12
 8023d7a:	4770      	bx	lr
 8023d7c:	20000024 	.word	0x20000024
 8023d80:	ffff0208 	.word	0xffff0208

08023d84 <strcpy>:
 8023d84:	4603      	mov	r3, r0
 8023d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023d8a:	f803 2b01 	strb.w	r2, [r3], #1
 8023d8e:	2a00      	cmp	r2, #0
 8023d90:	d1f9      	bne.n	8023d86 <strcpy+0x2>
 8023d92:	4770      	bx	lr

08023d94 <strncpy>:
 8023d94:	b510      	push	{r4, lr}
 8023d96:	3901      	subs	r1, #1
 8023d98:	4603      	mov	r3, r0
 8023d9a:	b132      	cbz	r2, 8023daa <strncpy+0x16>
 8023d9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023da0:	f803 4b01 	strb.w	r4, [r3], #1
 8023da4:	3a01      	subs	r2, #1
 8023da6:	2c00      	cmp	r4, #0
 8023da8:	d1f7      	bne.n	8023d9a <strncpy+0x6>
 8023daa:	441a      	add	r2, r3
 8023dac:	2100      	movs	r1, #0
 8023dae:	4293      	cmp	r3, r2
 8023db0:	d100      	bne.n	8023db4 <strncpy+0x20>
 8023db2:	bd10      	pop	{r4, pc}
 8023db4:	f803 1b01 	strb.w	r1, [r3], #1
 8023db8:	e7f9      	b.n	8023dae <strncpy+0x1a>

08023dba <strstr>:
 8023dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023dbc:	780c      	ldrb	r4, [r1, #0]
 8023dbe:	b164      	cbz	r4, 8023dda <strstr+0x20>
 8023dc0:	4603      	mov	r3, r0
 8023dc2:	781a      	ldrb	r2, [r3, #0]
 8023dc4:	4618      	mov	r0, r3
 8023dc6:	1c5e      	adds	r6, r3, #1
 8023dc8:	b90a      	cbnz	r2, 8023dce <strstr+0x14>
 8023dca:	4610      	mov	r0, r2
 8023dcc:	e005      	b.n	8023dda <strstr+0x20>
 8023dce:	4294      	cmp	r4, r2
 8023dd0:	d108      	bne.n	8023de4 <strstr+0x2a>
 8023dd2:	460d      	mov	r5, r1
 8023dd4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8023dd8:	b902      	cbnz	r2, 8023ddc <strstr+0x22>
 8023dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ddc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8023de0:	4297      	cmp	r7, r2
 8023de2:	d0f7      	beq.n	8023dd4 <strstr+0x1a>
 8023de4:	4633      	mov	r3, r6
 8023de6:	e7ec      	b.n	8023dc2 <strstr+0x8>

08023de8 <strtok>:
 8023de8:	4b16      	ldr	r3, [pc, #88]	; (8023e44 <strtok+0x5c>)
 8023dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023dec:	681e      	ldr	r6, [r3, #0]
 8023dee:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8023df0:	4605      	mov	r5, r0
 8023df2:	b9fc      	cbnz	r4, 8023e34 <strtok+0x4c>
 8023df4:	2050      	movs	r0, #80	; 0x50
 8023df6:	9101      	str	r1, [sp, #4]
 8023df8:	f000 fb60 	bl	80244bc <malloc>
 8023dfc:	9901      	ldr	r1, [sp, #4]
 8023dfe:	65b0      	str	r0, [r6, #88]	; 0x58
 8023e00:	4602      	mov	r2, r0
 8023e02:	b920      	cbnz	r0, 8023e0e <strtok+0x26>
 8023e04:	4b10      	ldr	r3, [pc, #64]	; (8023e48 <strtok+0x60>)
 8023e06:	4811      	ldr	r0, [pc, #68]	; (8023e4c <strtok+0x64>)
 8023e08:	2157      	movs	r1, #87	; 0x57
 8023e0a:	f000 f909 	bl	8024020 <__assert_func>
 8023e0e:	e9c0 4400 	strd	r4, r4, [r0]
 8023e12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8023e16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8023e1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8023e1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8023e22:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8023e26:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8023e2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8023e2e:	6184      	str	r4, [r0, #24]
 8023e30:	7704      	strb	r4, [r0, #28]
 8023e32:	6244      	str	r4, [r0, #36]	; 0x24
 8023e34:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8023e36:	2301      	movs	r3, #1
 8023e38:	4628      	mov	r0, r5
 8023e3a:	b002      	add	sp, #8
 8023e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023e40:	f000 b806 	b.w	8023e50 <__strtok_r>
 8023e44:	20000024 	.word	0x20000024
 8023e48:	080259e8 	.word	0x080259e8
 8023e4c:	080259ff 	.word	0x080259ff

08023e50 <__strtok_r>:
 8023e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e52:	b908      	cbnz	r0, 8023e58 <__strtok_r+0x8>
 8023e54:	6810      	ldr	r0, [r2, #0]
 8023e56:	b188      	cbz	r0, 8023e7c <__strtok_r+0x2c>
 8023e58:	4604      	mov	r4, r0
 8023e5a:	4620      	mov	r0, r4
 8023e5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8023e60:	460f      	mov	r7, r1
 8023e62:	f817 6b01 	ldrb.w	r6, [r7], #1
 8023e66:	b91e      	cbnz	r6, 8023e70 <__strtok_r+0x20>
 8023e68:	b965      	cbnz	r5, 8023e84 <__strtok_r+0x34>
 8023e6a:	6015      	str	r5, [r2, #0]
 8023e6c:	4628      	mov	r0, r5
 8023e6e:	e005      	b.n	8023e7c <__strtok_r+0x2c>
 8023e70:	42b5      	cmp	r5, r6
 8023e72:	d1f6      	bne.n	8023e62 <__strtok_r+0x12>
 8023e74:	2b00      	cmp	r3, #0
 8023e76:	d1f0      	bne.n	8023e5a <__strtok_r+0xa>
 8023e78:	6014      	str	r4, [r2, #0]
 8023e7a:	7003      	strb	r3, [r0, #0]
 8023e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023e7e:	461c      	mov	r4, r3
 8023e80:	e00c      	b.n	8023e9c <__strtok_r+0x4c>
 8023e82:	b915      	cbnz	r5, 8023e8a <__strtok_r+0x3a>
 8023e84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023e88:	460e      	mov	r6, r1
 8023e8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8023e8e:	42ab      	cmp	r3, r5
 8023e90:	d1f7      	bne.n	8023e82 <__strtok_r+0x32>
 8023e92:	2b00      	cmp	r3, #0
 8023e94:	d0f3      	beq.n	8023e7e <__strtok_r+0x2e>
 8023e96:	2300      	movs	r3, #0
 8023e98:	f804 3c01 	strb.w	r3, [r4, #-1]
 8023e9c:	6014      	str	r4, [r2, #0]
 8023e9e:	e7ed      	b.n	8023e7c <__strtok_r+0x2c>

08023ea0 <__swbuf_r>:
 8023ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ea2:	460e      	mov	r6, r1
 8023ea4:	4614      	mov	r4, r2
 8023ea6:	4605      	mov	r5, r0
 8023ea8:	b118      	cbz	r0, 8023eb2 <__swbuf_r+0x12>
 8023eaa:	6983      	ldr	r3, [r0, #24]
 8023eac:	b90b      	cbnz	r3, 8023eb2 <__swbuf_r+0x12>
 8023eae:	f000 f9ef 	bl	8024290 <__sinit>
 8023eb2:	4b21      	ldr	r3, [pc, #132]	; (8023f38 <__swbuf_r+0x98>)
 8023eb4:	429c      	cmp	r4, r3
 8023eb6:	d12b      	bne.n	8023f10 <__swbuf_r+0x70>
 8023eb8:	686c      	ldr	r4, [r5, #4]
 8023eba:	69a3      	ldr	r3, [r4, #24]
 8023ebc:	60a3      	str	r3, [r4, #8]
 8023ebe:	89a3      	ldrh	r3, [r4, #12]
 8023ec0:	071a      	lsls	r2, r3, #28
 8023ec2:	d52f      	bpl.n	8023f24 <__swbuf_r+0x84>
 8023ec4:	6923      	ldr	r3, [r4, #16]
 8023ec6:	b36b      	cbz	r3, 8023f24 <__swbuf_r+0x84>
 8023ec8:	6923      	ldr	r3, [r4, #16]
 8023eca:	6820      	ldr	r0, [r4, #0]
 8023ecc:	1ac0      	subs	r0, r0, r3
 8023ece:	6963      	ldr	r3, [r4, #20]
 8023ed0:	b2f6      	uxtb	r6, r6
 8023ed2:	4283      	cmp	r3, r0
 8023ed4:	4637      	mov	r7, r6
 8023ed6:	dc04      	bgt.n	8023ee2 <__swbuf_r+0x42>
 8023ed8:	4621      	mov	r1, r4
 8023eda:	4628      	mov	r0, r5
 8023edc:	f000 f944 	bl	8024168 <_fflush_r>
 8023ee0:	bb30      	cbnz	r0, 8023f30 <__swbuf_r+0x90>
 8023ee2:	68a3      	ldr	r3, [r4, #8]
 8023ee4:	3b01      	subs	r3, #1
 8023ee6:	60a3      	str	r3, [r4, #8]
 8023ee8:	6823      	ldr	r3, [r4, #0]
 8023eea:	1c5a      	adds	r2, r3, #1
 8023eec:	6022      	str	r2, [r4, #0]
 8023eee:	701e      	strb	r6, [r3, #0]
 8023ef0:	6963      	ldr	r3, [r4, #20]
 8023ef2:	3001      	adds	r0, #1
 8023ef4:	4283      	cmp	r3, r0
 8023ef6:	d004      	beq.n	8023f02 <__swbuf_r+0x62>
 8023ef8:	89a3      	ldrh	r3, [r4, #12]
 8023efa:	07db      	lsls	r3, r3, #31
 8023efc:	d506      	bpl.n	8023f0c <__swbuf_r+0x6c>
 8023efe:	2e0a      	cmp	r6, #10
 8023f00:	d104      	bne.n	8023f0c <__swbuf_r+0x6c>
 8023f02:	4621      	mov	r1, r4
 8023f04:	4628      	mov	r0, r5
 8023f06:	f000 f92f 	bl	8024168 <_fflush_r>
 8023f0a:	b988      	cbnz	r0, 8023f30 <__swbuf_r+0x90>
 8023f0c:	4638      	mov	r0, r7
 8023f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023f10:	4b0a      	ldr	r3, [pc, #40]	; (8023f3c <__swbuf_r+0x9c>)
 8023f12:	429c      	cmp	r4, r3
 8023f14:	d101      	bne.n	8023f1a <__swbuf_r+0x7a>
 8023f16:	68ac      	ldr	r4, [r5, #8]
 8023f18:	e7cf      	b.n	8023eba <__swbuf_r+0x1a>
 8023f1a:	4b09      	ldr	r3, [pc, #36]	; (8023f40 <__swbuf_r+0xa0>)
 8023f1c:	429c      	cmp	r4, r3
 8023f1e:	bf08      	it	eq
 8023f20:	68ec      	ldreq	r4, [r5, #12]
 8023f22:	e7ca      	b.n	8023eba <__swbuf_r+0x1a>
 8023f24:	4621      	mov	r1, r4
 8023f26:	4628      	mov	r0, r5
 8023f28:	f000 f80c 	bl	8023f44 <__swsetup_r>
 8023f2c:	2800      	cmp	r0, #0
 8023f2e:	d0cb      	beq.n	8023ec8 <__swbuf_r+0x28>
 8023f30:	f04f 37ff 	mov.w	r7, #4294967295
 8023f34:	e7ea      	b.n	8023f0c <__swbuf_r+0x6c>
 8023f36:	bf00      	nop
 8023f38:	08025abc 	.word	0x08025abc
 8023f3c:	08025adc 	.word	0x08025adc
 8023f40:	08025a9c 	.word	0x08025a9c

08023f44 <__swsetup_r>:
 8023f44:	4b32      	ldr	r3, [pc, #200]	; (8024010 <__swsetup_r+0xcc>)
 8023f46:	b570      	push	{r4, r5, r6, lr}
 8023f48:	681d      	ldr	r5, [r3, #0]
 8023f4a:	4606      	mov	r6, r0
 8023f4c:	460c      	mov	r4, r1
 8023f4e:	b125      	cbz	r5, 8023f5a <__swsetup_r+0x16>
 8023f50:	69ab      	ldr	r3, [r5, #24]
 8023f52:	b913      	cbnz	r3, 8023f5a <__swsetup_r+0x16>
 8023f54:	4628      	mov	r0, r5
 8023f56:	f000 f99b 	bl	8024290 <__sinit>
 8023f5a:	4b2e      	ldr	r3, [pc, #184]	; (8024014 <__swsetup_r+0xd0>)
 8023f5c:	429c      	cmp	r4, r3
 8023f5e:	d10f      	bne.n	8023f80 <__swsetup_r+0x3c>
 8023f60:	686c      	ldr	r4, [r5, #4]
 8023f62:	89a3      	ldrh	r3, [r4, #12]
 8023f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023f68:	0719      	lsls	r1, r3, #28
 8023f6a:	d42c      	bmi.n	8023fc6 <__swsetup_r+0x82>
 8023f6c:	06dd      	lsls	r5, r3, #27
 8023f6e:	d411      	bmi.n	8023f94 <__swsetup_r+0x50>
 8023f70:	2309      	movs	r3, #9
 8023f72:	6033      	str	r3, [r6, #0]
 8023f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023f78:	81a3      	strh	r3, [r4, #12]
 8023f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8023f7e:	e03e      	b.n	8023ffe <__swsetup_r+0xba>
 8023f80:	4b25      	ldr	r3, [pc, #148]	; (8024018 <__swsetup_r+0xd4>)
 8023f82:	429c      	cmp	r4, r3
 8023f84:	d101      	bne.n	8023f8a <__swsetup_r+0x46>
 8023f86:	68ac      	ldr	r4, [r5, #8]
 8023f88:	e7eb      	b.n	8023f62 <__swsetup_r+0x1e>
 8023f8a:	4b24      	ldr	r3, [pc, #144]	; (802401c <__swsetup_r+0xd8>)
 8023f8c:	429c      	cmp	r4, r3
 8023f8e:	bf08      	it	eq
 8023f90:	68ec      	ldreq	r4, [r5, #12]
 8023f92:	e7e6      	b.n	8023f62 <__swsetup_r+0x1e>
 8023f94:	0758      	lsls	r0, r3, #29
 8023f96:	d512      	bpl.n	8023fbe <__swsetup_r+0x7a>
 8023f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023f9a:	b141      	cbz	r1, 8023fae <__swsetup_r+0x6a>
 8023f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023fa0:	4299      	cmp	r1, r3
 8023fa2:	d002      	beq.n	8023faa <__swsetup_r+0x66>
 8023fa4:	4630      	mov	r0, r6
 8023fa6:	f000 fa91 	bl	80244cc <_free_r>
 8023faa:	2300      	movs	r3, #0
 8023fac:	6363      	str	r3, [r4, #52]	; 0x34
 8023fae:	89a3      	ldrh	r3, [r4, #12]
 8023fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023fb4:	81a3      	strh	r3, [r4, #12]
 8023fb6:	2300      	movs	r3, #0
 8023fb8:	6063      	str	r3, [r4, #4]
 8023fba:	6923      	ldr	r3, [r4, #16]
 8023fbc:	6023      	str	r3, [r4, #0]
 8023fbe:	89a3      	ldrh	r3, [r4, #12]
 8023fc0:	f043 0308 	orr.w	r3, r3, #8
 8023fc4:	81a3      	strh	r3, [r4, #12]
 8023fc6:	6923      	ldr	r3, [r4, #16]
 8023fc8:	b94b      	cbnz	r3, 8023fde <__swsetup_r+0x9a>
 8023fca:	89a3      	ldrh	r3, [r4, #12]
 8023fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023fd4:	d003      	beq.n	8023fde <__swsetup_r+0x9a>
 8023fd6:	4621      	mov	r1, r4
 8023fd8:	4630      	mov	r0, r6
 8023fda:	f000 fa2f 	bl	802443c <__smakebuf_r>
 8023fde:	89a0      	ldrh	r0, [r4, #12]
 8023fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023fe4:	f010 0301 	ands.w	r3, r0, #1
 8023fe8:	d00a      	beq.n	8024000 <__swsetup_r+0xbc>
 8023fea:	2300      	movs	r3, #0
 8023fec:	60a3      	str	r3, [r4, #8]
 8023fee:	6963      	ldr	r3, [r4, #20]
 8023ff0:	425b      	negs	r3, r3
 8023ff2:	61a3      	str	r3, [r4, #24]
 8023ff4:	6923      	ldr	r3, [r4, #16]
 8023ff6:	b943      	cbnz	r3, 802400a <__swsetup_r+0xc6>
 8023ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023ffc:	d1ba      	bne.n	8023f74 <__swsetup_r+0x30>
 8023ffe:	bd70      	pop	{r4, r5, r6, pc}
 8024000:	0781      	lsls	r1, r0, #30
 8024002:	bf58      	it	pl
 8024004:	6963      	ldrpl	r3, [r4, #20]
 8024006:	60a3      	str	r3, [r4, #8]
 8024008:	e7f4      	b.n	8023ff4 <__swsetup_r+0xb0>
 802400a:	2000      	movs	r0, #0
 802400c:	e7f7      	b.n	8023ffe <__swsetup_r+0xba>
 802400e:	bf00      	nop
 8024010:	20000024 	.word	0x20000024
 8024014:	08025abc 	.word	0x08025abc
 8024018:	08025adc 	.word	0x08025adc
 802401c:	08025a9c 	.word	0x08025a9c

08024020 <__assert_func>:
 8024020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024022:	4614      	mov	r4, r2
 8024024:	461a      	mov	r2, r3
 8024026:	4b09      	ldr	r3, [pc, #36]	; (802404c <__assert_func+0x2c>)
 8024028:	681b      	ldr	r3, [r3, #0]
 802402a:	4605      	mov	r5, r0
 802402c:	68d8      	ldr	r0, [r3, #12]
 802402e:	b14c      	cbz	r4, 8024044 <__assert_func+0x24>
 8024030:	4b07      	ldr	r3, [pc, #28]	; (8024050 <__assert_func+0x30>)
 8024032:	9100      	str	r1, [sp, #0]
 8024034:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024038:	4906      	ldr	r1, [pc, #24]	; (8024054 <__assert_func+0x34>)
 802403a:	462b      	mov	r3, r5
 802403c:	f000 f9a6 	bl	802438c <fiprintf>
 8024040:	f000 ff9e 	bl	8024f80 <abort>
 8024044:	4b04      	ldr	r3, [pc, #16]	; (8024058 <__assert_func+0x38>)
 8024046:	461c      	mov	r4, r3
 8024048:	e7f3      	b.n	8024032 <__assert_func+0x12>
 802404a:	bf00      	nop
 802404c:	20000024 	.word	0x20000024
 8024050:	08025a60 	.word	0x08025a60
 8024054:	08025a6d 	.word	0x08025a6d
 8024058:	0802586e 	.word	0x0802586e

0802405c <__sflush_r>:
 802405c:	898a      	ldrh	r2, [r1, #12]
 802405e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024062:	4605      	mov	r5, r0
 8024064:	0710      	lsls	r0, r2, #28
 8024066:	460c      	mov	r4, r1
 8024068:	d458      	bmi.n	802411c <__sflush_r+0xc0>
 802406a:	684b      	ldr	r3, [r1, #4]
 802406c:	2b00      	cmp	r3, #0
 802406e:	dc05      	bgt.n	802407c <__sflush_r+0x20>
 8024070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024072:	2b00      	cmp	r3, #0
 8024074:	dc02      	bgt.n	802407c <__sflush_r+0x20>
 8024076:	2000      	movs	r0, #0
 8024078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802407c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802407e:	2e00      	cmp	r6, #0
 8024080:	d0f9      	beq.n	8024076 <__sflush_r+0x1a>
 8024082:	2300      	movs	r3, #0
 8024084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024088:	682f      	ldr	r7, [r5, #0]
 802408a:	602b      	str	r3, [r5, #0]
 802408c:	d032      	beq.n	80240f4 <__sflush_r+0x98>
 802408e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024090:	89a3      	ldrh	r3, [r4, #12]
 8024092:	075a      	lsls	r2, r3, #29
 8024094:	d505      	bpl.n	80240a2 <__sflush_r+0x46>
 8024096:	6863      	ldr	r3, [r4, #4]
 8024098:	1ac0      	subs	r0, r0, r3
 802409a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802409c:	b10b      	cbz	r3, 80240a2 <__sflush_r+0x46>
 802409e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80240a0:	1ac0      	subs	r0, r0, r3
 80240a2:	2300      	movs	r3, #0
 80240a4:	4602      	mov	r2, r0
 80240a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80240a8:	6a21      	ldr	r1, [r4, #32]
 80240aa:	4628      	mov	r0, r5
 80240ac:	47b0      	blx	r6
 80240ae:	1c43      	adds	r3, r0, #1
 80240b0:	89a3      	ldrh	r3, [r4, #12]
 80240b2:	d106      	bne.n	80240c2 <__sflush_r+0x66>
 80240b4:	6829      	ldr	r1, [r5, #0]
 80240b6:	291d      	cmp	r1, #29
 80240b8:	d82c      	bhi.n	8024114 <__sflush_r+0xb8>
 80240ba:	4a2a      	ldr	r2, [pc, #168]	; (8024164 <__sflush_r+0x108>)
 80240bc:	40ca      	lsrs	r2, r1
 80240be:	07d6      	lsls	r6, r2, #31
 80240c0:	d528      	bpl.n	8024114 <__sflush_r+0xb8>
 80240c2:	2200      	movs	r2, #0
 80240c4:	6062      	str	r2, [r4, #4]
 80240c6:	04d9      	lsls	r1, r3, #19
 80240c8:	6922      	ldr	r2, [r4, #16]
 80240ca:	6022      	str	r2, [r4, #0]
 80240cc:	d504      	bpl.n	80240d8 <__sflush_r+0x7c>
 80240ce:	1c42      	adds	r2, r0, #1
 80240d0:	d101      	bne.n	80240d6 <__sflush_r+0x7a>
 80240d2:	682b      	ldr	r3, [r5, #0]
 80240d4:	b903      	cbnz	r3, 80240d8 <__sflush_r+0x7c>
 80240d6:	6560      	str	r0, [r4, #84]	; 0x54
 80240d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80240da:	602f      	str	r7, [r5, #0]
 80240dc:	2900      	cmp	r1, #0
 80240de:	d0ca      	beq.n	8024076 <__sflush_r+0x1a>
 80240e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80240e4:	4299      	cmp	r1, r3
 80240e6:	d002      	beq.n	80240ee <__sflush_r+0x92>
 80240e8:	4628      	mov	r0, r5
 80240ea:	f000 f9ef 	bl	80244cc <_free_r>
 80240ee:	2000      	movs	r0, #0
 80240f0:	6360      	str	r0, [r4, #52]	; 0x34
 80240f2:	e7c1      	b.n	8024078 <__sflush_r+0x1c>
 80240f4:	6a21      	ldr	r1, [r4, #32]
 80240f6:	2301      	movs	r3, #1
 80240f8:	4628      	mov	r0, r5
 80240fa:	47b0      	blx	r6
 80240fc:	1c41      	adds	r1, r0, #1
 80240fe:	d1c7      	bne.n	8024090 <__sflush_r+0x34>
 8024100:	682b      	ldr	r3, [r5, #0]
 8024102:	2b00      	cmp	r3, #0
 8024104:	d0c4      	beq.n	8024090 <__sflush_r+0x34>
 8024106:	2b1d      	cmp	r3, #29
 8024108:	d001      	beq.n	802410e <__sflush_r+0xb2>
 802410a:	2b16      	cmp	r3, #22
 802410c:	d101      	bne.n	8024112 <__sflush_r+0xb6>
 802410e:	602f      	str	r7, [r5, #0]
 8024110:	e7b1      	b.n	8024076 <__sflush_r+0x1a>
 8024112:	89a3      	ldrh	r3, [r4, #12]
 8024114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024118:	81a3      	strh	r3, [r4, #12]
 802411a:	e7ad      	b.n	8024078 <__sflush_r+0x1c>
 802411c:	690f      	ldr	r7, [r1, #16]
 802411e:	2f00      	cmp	r7, #0
 8024120:	d0a9      	beq.n	8024076 <__sflush_r+0x1a>
 8024122:	0793      	lsls	r3, r2, #30
 8024124:	680e      	ldr	r6, [r1, #0]
 8024126:	bf08      	it	eq
 8024128:	694b      	ldreq	r3, [r1, #20]
 802412a:	600f      	str	r7, [r1, #0]
 802412c:	bf18      	it	ne
 802412e:	2300      	movne	r3, #0
 8024130:	eba6 0807 	sub.w	r8, r6, r7
 8024134:	608b      	str	r3, [r1, #8]
 8024136:	f1b8 0f00 	cmp.w	r8, #0
 802413a:	dd9c      	ble.n	8024076 <__sflush_r+0x1a>
 802413c:	6a21      	ldr	r1, [r4, #32]
 802413e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024140:	4643      	mov	r3, r8
 8024142:	463a      	mov	r2, r7
 8024144:	4628      	mov	r0, r5
 8024146:	47b0      	blx	r6
 8024148:	2800      	cmp	r0, #0
 802414a:	dc06      	bgt.n	802415a <__sflush_r+0xfe>
 802414c:	89a3      	ldrh	r3, [r4, #12]
 802414e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024152:	81a3      	strh	r3, [r4, #12]
 8024154:	f04f 30ff 	mov.w	r0, #4294967295
 8024158:	e78e      	b.n	8024078 <__sflush_r+0x1c>
 802415a:	4407      	add	r7, r0
 802415c:	eba8 0800 	sub.w	r8, r8, r0
 8024160:	e7e9      	b.n	8024136 <__sflush_r+0xda>
 8024162:	bf00      	nop
 8024164:	20400001 	.word	0x20400001

08024168 <_fflush_r>:
 8024168:	b538      	push	{r3, r4, r5, lr}
 802416a:	690b      	ldr	r3, [r1, #16]
 802416c:	4605      	mov	r5, r0
 802416e:	460c      	mov	r4, r1
 8024170:	b913      	cbnz	r3, 8024178 <_fflush_r+0x10>
 8024172:	2500      	movs	r5, #0
 8024174:	4628      	mov	r0, r5
 8024176:	bd38      	pop	{r3, r4, r5, pc}
 8024178:	b118      	cbz	r0, 8024182 <_fflush_r+0x1a>
 802417a:	6983      	ldr	r3, [r0, #24]
 802417c:	b90b      	cbnz	r3, 8024182 <_fflush_r+0x1a>
 802417e:	f000 f887 	bl	8024290 <__sinit>
 8024182:	4b14      	ldr	r3, [pc, #80]	; (80241d4 <_fflush_r+0x6c>)
 8024184:	429c      	cmp	r4, r3
 8024186:	d11b      	bne.n	80241c0 <_fflush_r+0x58>
 8024188:	686c      	ldr	r4, [r5, #4]
 802418a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802418e:	2b00      	cmp	r3, #0
 8024190:	d0ef      	beq.n	8024172 <_fflush_r+0xa>
 8024192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024194:	07d0      	lsls	r0, r2, #31
 8024196:	d404      	bmi.n	80241a2 <_fflush_r+0x3a>
 8024198:	0599      	lsls	r1, r3, #22
 802419a:	d402      	bmi.n	80241a2 <_fflush_r+0x3a>
 802419c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802419e:	f000 f927 	bl	80243f0 <__retarget_lock_acquire_recursive>
 80241a2:	4628      	mov	r0, r5
 80241a4:	4621      	mov	r1, r4
 80241a6:	f7ff ff59 	bl	802405c <__sflush_r>
 80241aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80241ac:	07da      	lsls	r2, r3, #31
 80241ae:	4605      	mov	r5, r0
 80241b0:	d4e0      	bmi.n	8024174 <_fflush_r+0xc>
 80241b2:	89a3      	ldrh	r3, [r4, #12]
 80241b4:	059b      	lsls	r3, r3, #22
 80241b6:	d4dd      	bmi.n	8024174 <_fflush_r+0xc>
 80241b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80241ba:	f000 f91a 	bl	80243f2 <__retarget_lock_release_recursive>
 80241be:	e7d9      	b.n	8024174 <_fflush_r+0xc>
 80241c0:	4b05      	ldr	r3, [pc, #20]	; (80241d8 <_fflush_r+0x70>)
 80241c2:	429c      	cmp	r4, r3
 80241c4:	d101      	bne.n	80241ca <_fflush_r+0x62>
 80241c6:	68ac      	ldr	r4, [r5, #8]
 80241c8:	e7df      	b.n	802418a <_fflush_r+0x22>
 80241ca:	4b04      	ldr	r3, [pc, #16]	; (80241dc <_fflush_r+0x74>)
 80241cc:	429c      	cmp	r4, r3
 80241ce:	bf08      	it	eq
 80241d0:	68ec      	ldreq	r4, [r5, #12]
 80241d2:	e7da      	b.n	802418a <_fflush_r+0x22>
 80241d4:	08025abc 	.word	0x08025abc
 80241d8:	08025adc 	.word	0x08025adc
 80241dc:	08025a9c 	.word	0x08025a9c

080241e0 <std>:
 80241e0:	2300      	movs	r3, #0
 80241e2:	b510      	push	{r4, lr}
 80241e4:	4604      	mov	r4, r0
 80241e6:	e9c0 3300 	strd	r3, r3, [r0]
 80241ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80241ee:	6083      	str	r3, [r0, #8]
 80241f0:	8181      	strh	r1, [r0, #12]
 80241f2:	6643      	str	r3, [r0, #100]	; 0x64
 80241f4:	81c2      	strh	r2, [r0, #14]
 80241f6:	6183      	str	r3, [r0, #24]
 80241f8:	4619      	mov	r1, r3
 80241fa:	2208      	movs	r2, #8
 80241fc:	305c      	adds	r0, #92	; 0x5c
 80241fe:	f7ff fd0b 	bl	8023c18 <memset>
 8024202:	4b05      	ldr	r3, [pc, #20]	; (8024218 <std+0x38>)
 8024204:	6263      	str	r3, [r4, #36]	; 0x24
 8024206:	4b05      	ldr	r3, [pc, #20]	; (802421c <std+0x3c>)
 8024208:	62a3      	str	r3, [r4, #40]	; 0x28
 802420a:	4b05      	ldr	r3, [pc, #20]	; (8024220 <std+0x40>)
 802420c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802420e:	4b05      	ldr	r3, [pc, #20]	; (8024224 <std+0x44>)
 8024210:	6224      	str	r4, [r4, #32]
 8024212:	6323      	str	r3, [r4, #48]	; 0x30
 8024214:	bd10      	pop	{r4, pc}
 8024216:	bf00      	nop
 8024218:	08024ed5 	.word	0x08024ed5
 802421c:	08024ef7 	.word	0x08024ef7
 8024220:	08024f2f 	.word	0x08024f2f
 8024224:	08024f53 	.word	0x08024f53

08024228 <_cleanup_r>:
 8024228:	4901      	ldr	r1, [pc, #4]	; (8024230 <_cleanup_r+0x8>)
 802422a:	f000 b8c1 	b.w	80243b0 <_fwalk_reent>
 802422e:	bf00      	nop
 8024230:	08024169 	.word	0x08024169

08024234 <__sfmoreglue>:
 8024234:	b570      	push	{r4, r5, r6, lr}
 8024236:	1e4a      	subs	r2, r1, #1
 8024238:	2568      	movs	r5, #104	; 0x68
 802423a:	4355      	muls	r5, r2
 802423c:	460e      	mov	r6, r1
 802423e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024242:	f000 f993 	bl	802456c <_malloc_r>
 8024246:	4604      	mov	r4, r0
 8024248:	b140      	cbz	r0, 802425c <__sfmoreglue+0x28>
 802424a:	2100      	movs	r1, #0
 802424c:	e9c0 1600 	strd	r1, r6, [r0]
 8024250:	300c      	adds	r0, #12
 8024252:	60a0      	str	r0, [r4, #8]
 8024254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024258:	f7ff fcde 	bl	8023c18 <memset>
 802425c:	4620      	mov	r0, r4
 802425e:	bd70      	pop	{r4, r5, r6, pc}

08024260 <__sfp_lock_acquire>:
 8024260:	4801      	ldr	r0, [pc, #4]	; (8024268 <__sfp_lock_acquire+0x8>)
 8024262:	f000 b8c5 	b.w	80243f0 <__retarget_lock_acquire_recursive>
 8024266:	bf00      	nop
 8024268:	20000d6c 	.word	0x20000d6c

0802426c <__sfp_lock_release>:
 802426c:	4801      	ldr	r0, [pc, #4]	; (8024274 <__sfp_lock_release+0x8>)
 802426e:	f000 b8c0 	b.w	80243f2 <__retarget_lock_release_recursive>
 8024272:	bf00      	nop
 8024274:	20000d6c 	.word	0x20000d6c

08024278 <__sinit_lock_acquire>:
 8024278:	4801      	ldr	r0, [pc, #4]	; (8024280 <__sinit_lock_acquire+0x8>)
 802427a:	f000 b8b9 	b.w	80243f0 <__retarget_lock_acquire_recursive>
 802427e:	bf00      	nop
 8024280:	20000d67 	.word	0x20000d67

08024284 <__sinit_lock_release>:
 8024284:	4801      	ldr	r0, [pc, #4]	; (802428c <__sinit_lock_release+0x8>)
 8024286:	f000 b8b4 	b.w	80243f2 <__retarget_lock_release_recursive>
 802428a:	bf00      	nop
 802428c:	20000d67 	.word	0x20000d67

08024290 <__sinit>:
 8024290:	b510      	push	{r4, lr}
 8024292:	4604      	mov	r4, r0
 8024294:	f7ff fff0 	bl	8024278 <__sinit_lock_acquire>
 8024298:	69a3      	ldr	r3, [r4, #24]
 802429a:	b11b      	cbz	r3, 80242a4 <__sinit+0x14>
 802429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80242a0:	f7ff bff0 	b.w	8024284 <__sinit_lock_release>
 80242a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80242a8:	6523      	str	r3, [r4, #80]	; 0x50
 80242aa:	4b13      	ldr	r3, [pc, #76]	; (80242f8 <__sinit+0x68>)
 80242ac:	4a13      	ldr	r2, [pc, #76]	; (80242fc <__sinit+0x6c>)
 80242ae:	681b      	ldr	r3, [r3, #0]
 80242b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80242b2:	42a3      	cmp	r3, r4
 80242b4:	bf04      	itt	eq
 80242b6:	2301      	moveq	r3, #1
 80242b8:	61a3      	streq	r3, [r4, #24]
 80242ba:	4620      	mov	r0, r4
 80242bc:	f000 f820 	bl	8024300 <__sfp>
 80242c0:	6060      	str	r0, [r4, #4]
 80242c2:	4620      	mov	r0, r4
 80242c4:	f000 f81c 	bl	8024300 <__sfp>
 80242c8:	60a0      	str	r0, [r4, #8]
 80242ca:	4620      	mov	r0, r4
 80242cc:	f000 f818 	bl	8024300 <__sfp>
 80242d0:	2200      	movs	r2, #0
 80242d2:	60e0      	str	r0, [r4, #12]
 80242d4:	2104      	movs	r1, #4
 80242d6:	6860      	ldr	r0, [r4, #4]
 80242d8:	f7ff ff82 	bl	80241e0 <std>
 80242dc:	68a0      	ldr	r0, [r4, #8]
 80242de:	2201      	movs	r2, #1
 80242e0:	2109      	movs	r1, #9
 80242e2:	f7ff ff7d 	bl	80241e0 <std>
 80242e6:	68e0      	ldr	r0, [r4, #12]
 80242e8:	2202      	movs	r2, #2
 80242ea:	2112      	movs	r1, #18
 80242ec:	f7ff ff78 	bl	80241e0 <std>
 80242f0:	2301      	movs	r3, #1
 80242f2:	61a3      	str	r3, [r4, #24]
 80242f4:	e7d2      	b.n	802429c <__sinit+0xc>
 80242f6:	bf00      	nop
 80242f8:	080259e4 	.word	0x080259e4
 80242fc:	08024229 	.word	0x08024229

08024300 <__sfp>:
 8024300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024302:	4607      	mov	r7, r0
 8024304:	f7ff ffac 	bl	8024260 <__sfp_lock_acquire>
 8024308:	4b1e      	ldr	r3, [pc, #120]	; (8024384 <__sfp+0x84>)
 802430a:	681e      	ldr	r6, [r3, #0]
 802430c:	69b3      	ldr	r3, [r6, #24]
 802430e:	b913      	cbnz	r3, 8024316 <__sfp+0x16>
 8024310:	4630      	mov	r0, r6
 8024312:	f7ff ffbd 	bl	8024290 <__sinit>
 8024316:	3648      	adds	r6, #72	; 0x48
 8024318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802431c:	3b01      	subs	r3, #1
 802431e:	d503      	bpl.n	8024328 <__sfp+0x28>
 8024320:	6833      	ldr	r3, [r6, #0]
 8024322:	b30b      	cbz	r3, 8024368 <__sfp+0x68>
 8024324:	6836      	ldr	r6, [r6, #0]
 8024326:	e7f7      	b.n	8024318 <__sfp+0x18>
 8024328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802432c:	b9d5      	cbnz	r5, 8024364 <__sfp+0x64>
 802432e:	4b16      	ldr	r3, [pc, #88]	; (8024388 <__sfp+0x88>)
 8024330:	60e3      	str	r3, [r4, #12]
 8024332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024336:	6665      	str	r5, [r4, #100]	; 0x64
 8024338:	f000 f859 	bl	80243ee <__retarget_lock_init_recursive>
 802433c:	f7ff ff96 	bl	802426c <__sfp_lock_release>
 8024340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8024348:	6025      	str	r5, [r4, #0]
 802434a:	61a5      	str	r5, [r4, #24]
 802434c:	2208      	movs	r2, #8
 802434e:	4629      	mov	r1, r5
 8024350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024354:	f7ff fc60 	bl	8023c18 <memset>
 8024358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802435c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024360:	4620      	mov	r0, r4
 8024362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024364:	3468      	adds	r4, #104	; 0x68
 8024366:	e7d9      	b.n	802431c <__sfp+0x1c>
 8024368:	2104      	movs	r1, #4
 802436a:	4638      	mov	r0, r7
 802436c:	f7ff ff62 	bl	8024234 <__sfmoreglue>
 8024370:	4604      	mov	r4, r0
 8024372:	6030      	str	r0, [r6, #0]
 8024374:	2800      	cmp	r0, #0
 8024376:	d1d5      	bne.n	8024324 <__sfp+0x24>
 8024378:	f7ff ff78 	bl	802426c <__sfp_lock_release>
 802437c:	230c      	movs	r3, #12
 802437e:	603b      	str	r3, [r7, #0]
 8024380:	e7ee      	b.n	8024360 <__sfp+0x60>
 8024382:	bf00      	nop
 8024384:	080259e4 	.word	0x080259e4
 8024388:	ffff0001 	.word	0xffff0001

0802438c <fiprintf>:
 802438c:	b40e      	push	{r1, r2, r3}
 802438e:	b503      	push	{r0, r1, lr}
 8024390:	4601      	mov	r1, r0
 8024392:	ab03      	add	r3, sp, #12
 8024394:	4805      	ldr	r0, [pc, #20]	; (80243ac <fiprintf+0x20>)
 8024396:	f853 2b04 	ldr.w	r2, [r3], #4
 802439a:	6800      	ldr	r0, [r0, #0]
 802439c:	9301      	str	r3, [sp, #4]
 802439e:	f000 fac5 	bl	802492c <_vfiprintf_r>
 80243a2:	b002      	add	sp, #8
 80243a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80243a8:	b003      	add	sp, #12
 80243aa:	4770      	bx	lr
 80243ac:	20000024 	.word	0x20000024

080243b0 <_fwalk_reent>:
 80243b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80243b4:	4606      	mov	r6, r0
 80243b6:	4688      	mov	r8, r1
 80243b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80243bc:	2700      	movs	r7, #0
 80243be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80243c2:	f1b9 0901 	subs.w	r9, r9, #1
 80243c6:	d505      	bpl.n	80243d4 <_fwalk_reent+0x24>
 80243c8:	6824      	ldr	r4, [r4, #0]
 80243ca:	2c00      	cmp	r4, #0
 80243cc:	d1f7      	bne.n	80243be <_fwalk_reent+0xe>
 80243ce:	4638      	mov	r0, r7
 80243d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80243d4:	89ab      	ldrh	r3, [r5, #12]
 80243d6:	2b01      	cmp	r3, #1
 80243d8:	d907      	bls.n	80243ea <_fwalk_reent+0x3a>
 80243da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80243de:	3301      	adds	r3, #1
 80243e0:	d003      	beq.n	80243ea <_fwalk_reent+0x3a>
 80243e2:	4629      	mov	r1, r5
 80243e4:	4630      	mov	r0, r6
 80243e6:	47c0      	blx	r8
 80243e8:	4307      	orrs	r7, r0
 80243ea:	3568      	adds	r5, #104	; 0x68
 80243ec:	e7e9      	b.n	80243c2 <_fwalk_reent+0x12>

080243ee <__retarget_lock_init_recursive>:
 80243ee:	4770      	bx	lr

080243f0 <__retarget_lock_acquire_recursive>:
 80243f0:	4770      	bx	lr

080243f2 <__retarget_lock_release_recursive>:
 80243f2:	4770      	bx	lr

080243f4 <__swhatbuf_r>:
 80243f4:	b570      	push	{r4, r5, r6, lr}
 80243f6:	460e      	mov	r6, r1
 80243f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80243fc:	2900      	cmp	r1, #0
 80243fe:	b096      	sub	sp, #88	; 0x58
 8024400:	4614      	mov	r4, r2
 8024402:	461d      	mov	r5, r3
 8024404:	da07      	bge.n	8024416 <__swhatbuf_r+0x22>
 8024406:	2300      	movs	r3, #0
 8024408:	602b      	str	r3, [r5, #0]
 802440a:	89b3      	ldrh	r3, [r6, #12]
 802440c:	061a      	lsls	r2, r3, #24
 802440e:	d410      	bmi.n	8024432 <__swhatbuf_r+0x3e>
 8024410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024414:	e00e      	b.n	8024434 <__swhatbuf_r+0x40>
 8024416:	466a      	mov	r2, sp
 8024418:	f000 fdca 	bl	8024fb0 <_fstat_r>
 802441c:	2800      	cmp	r0, #0
 802441e:	dbf2      	blt.n	8024406 <__swhatbuf_r+0x12>
 8024420:	9a01      	ldr	r2, [sp, #4]
 8024422:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024426:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802442a:	425a      	negs	r2, r3
 802442c:	415a      	adcs	r2, r3
 802442e:	602a      	str	r2, [r5, #0]
 8024430:	e7ee      	b.n	8024410 <__swhatbuf_r+0x1c>
 8024432:	2340      	movs	r3, #64	; 0x40
 8024434:	2000      	movs	r0, #0
 8024436:	6023      	str	r3, [r4, #0]
 8024438:	b016      	add	sp, #88	; 0x58
 802443a:	bd70      	pop	{r4, r5, r6, pc}

0802443c <__smakebuf_r>:
 802443c:	898b      	ldrh	r3, [r1, #12]
 802443e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024440:	079d      	lsls	r5, r3, #30
 8024442:	4606      	mov	r6, r0
 8024444:	460c      	mov	r4, r1
 8024446:	d507      	bpl.n	8024458 <__smakebuf_r+0x1c>
 8024448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802444c:	6023      	str	r3, [r4, #0]
 802444e:	6123      	str	r3, [r4, #16]
 8024450:	2301      	movs	r3, #1
 8024452:	6163      	str	r3, [r4, #20]
 8024454:	b002      	add	sp, #8
 8024456:	bd70      	pop	{r4, r5, r6, pc}
 8024458:	ab01      	add	r3, sp, #4
 802445a:	466a      	mov	r2, sp
 802445c:	f7ff ffca 	bl	80243f4 <__swhatbuf_r>
 8024460:	9900      	ldr	r1, [sp, #0]
 8024462:	4605      	mov	r5, r0
 8024464:	4630      	mov	r0, r6
 8024466:	f000 f881 	bl	802456c <_malloc_r>
 802446a:	b948      	cbnz	r0, 8024480 <__smakebuf_r+0x44>
 802446c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024470:	059a      	lsls	r2, r3, #22
 8024472:	d4ef      	bmi.n	8024454 <__smakebuf_r+0x18>
 8024474:	f023 0303 	bic.w	r3, r3, #3
 8024478:	f043 0302 	orr.w	r3, r3, #2
 802447c:	81a3      	strh	r3, [r4, #12]
 802447e:	e7e3      	b.n	8024448 <__smakebuf_r+0xc>
 8024480:	4b0d      	ldr	r3, [pc, #52]	; (80244b8 <__smakebuf_r+0x7c>)
 8024482:	62b3      	str	r3, [r6, #40]	; 0x28
 8024484:	89a3      	ldrh	r3, [r4, #12]
 8024486:	6020      	str	r0, [r4, #0]
 8024488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802448c:	81a3      	strh	r3, [r4, #12]
 802448e:	9b00      	ldr	r3, [sp, #0]
 8024490:	6163      	str	r3, [r4, #20]
 8024492:	9b01      	ldr	r3, [sp, #4]
 8024494:	6120      	str	r0, [r4, #16]
 8024496:	b15b      	cbz	r3, 80244b0 <__smakebuf_r+0x74>
 8024498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802449c:	4630      	mov	r0, r6
 802449e:	f000 fd99 	bl	8024fd4 <_isatty_r>
 80244a2:	b128      	cbz	r0, 80244b0 <__smakebuf_r+0x74>
 80244a4:	89a3      	ldrh	r3, [r4, #12]
 80244a6:	f023 0303 	bic.w	r3, r3, #3
 80244aa:	f043 0301 	orr.w	r3, r3, #1
 80244ae:	81a3      	strh	r3, [r4, #12]
 80244b0:	89a0      	ldrh	r0, [r4, #12]
 80244b2:	4305      	orrs	r5, r0
 80244b4:	81a5      	strh	r5, [r4, #12]
 80244b6:	e7cd      	b.n	8024454 <__smakebuf_r+0x18>
 80244b8:	08024229 	.word	0x08024229

080244bc <malloc>:
 80244bc:	4b02      	ldr	r3, [pc, #8]	; (80244c8 <malloc+0xc>)
 80244be:	4601      	mov	r1, r0
 80244c0:	6818      	ldr	r0, [r3, #0]
 80244c2:	f000 b853 	b.w	802456c <_malloc_r>
 80244c6:	bf00      	nop
 80244c8:	20000024 	.word	0x20000024

080244cc <_free_r>:
 80244cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80244ce:	2900      	cmp	r1, #0
 80244d0:	d048      	beq.n	8024564 <_free_r+0x98>
 80244d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80244d6:	9001      	str	r0, [sp, #4]
 80244d8:	2b00      	cmp	r3, #0
 80244da:	f1a1 0404 	sub.w	r4, r1, #4
 80244de:	bfb8      	it	lt
 80244e0:	18e4      	addlt	r4, r4, r3
 80244e2:	f000 fdb3 	bl	802504c <__malloc_lock>
 80244e6:	4a20      	ldr	r2, [pc, #128]	; (8024568 <_free_r+0x9c>)
 80244e8:	9801      	ldr	r0, [sp, #4]
 80244ea:	6813      	ldr	r3, [r2, #0]
 80244ec:	4615      	mov	r5, r2
 80244ee:	b933      	cbnz	r3, 80244fe <_free_r+0x32>
 80244f0:	6063      	str	r3, [r4, #4]
 80244f2:	6014      	str	r4, [r2, #0]
 80244f4:	b003      	add	sp, #12
 80244f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80244fa:	f000 bdad 	b.w	8025058 <__malloc_unlock>
 80244fe:	42a3      	cmp	r3, r4
 8024500:	d90b      	bls.n	802451a <_free_r+0x4e>
 8024502:	6821      	ldr	r1, [r4, #0]
 8024504:	1862      	adds	r2, r4, r1
 8024506:	4293      	cmp	r3, r2
 8024508:	bf04      	itt	eq
 802450a:	681a      	ldreq	r2, [r3, #0]
 802450c:	685b      	ldreq	r3, [r3, #4]
 802450e:	6063      	str	r3, [r4, #4]
 8024510:	bf04      	itt	eq
 8024512:	1852      	addeq	r2, r2, r1
 8024514:	6022      	streq	r2, [r4, #0]
 8024516:	602c      	str	r4, [r5, #0]
 8024518:	e7ec      	b.n	80244f4 <_free_r+0x28>
 802451a:	461a      	mov	r2, r3
 802451c:	685b      	ldr	r3, [r3, #4]
 802451e:	b10b      	cbz	r3, 8024524 <_free_r+0x58>
 8024520:	42a3      	cmp	r3, r4
 8024522:	d9fa      	bls.n	802451a <_free_r+0x4e>
 8024524:	6811      	ldr	r1, [r2, #0]
 8024526:	1855      	adds	r5, r2, r1
 8024528:	42a5      	cmp	r5, r4
 802452a:	d10b      	bne.n	8024544 <_free_r+0x78>
 802452c:	6824      	ldr	r4, [r4, #0]
 802452e:	4421      	add	r1, r4
 8024530:	1854      	adds	r4, r2, r1
 8024532:	42a3      	cmp	r3, r4
 8024534:	6011      	str	r1, [r2, #0]
 8024536:	d1dd      	bne.n	80244f4 <_free_r+0x28>
 8024538:	681c      	ldr	r4, [r3, #0]
 802453a:	685b      	ldr	r3, [r3, #4]
 802453c:	6053      	str	r3, [r2, #4]
 802453e:	4421      	add	r1, r4
 8024540:	6011      	str	r1, [r2, #0]
 8024542:	e7d7      	b.n	80244f4 <_free_r+0x28>
 8024544:	d902      	bls.n	802454c <_free_r+0x80>
 8024546:	230c      	movs	r3, #12
 8024548:	6003      	str	r3, [r0, #0]
 802454a:	e7d3      	b.n	80244f4 <_free_r+0x28>
 802454c:	6825      	ldr	r5, [r4, #0]
 802454e:	1961      	adds	r1, r4, r5
 8024550:	428b      	cmp	r3, r1
 8024552:	bf04      	itt	eq
 8024554:	6819      	ldreq	r1, [r3, #0]
 8024556:	685b      	ldreq	r3, [r3, #4]
 8024558:	6063      	str	r3, [r4, #4]
 802455a:	bf04      	itt	eq
 802455c:	1949      	addeq	r1, r1, r5
 802455e:	6021      	streq	r1, [r4, #0]
 8024560:	6054      	str	r4, [r2, #4]
 8024562:	e7c7      	b.n	80244f4 <_free_r+0x28>
 8024564:	b003      	add	sp, #12
 8024566:	bd30      	pop	{r4, r5, pc}
 8024568:	200002b4 	.word	0x200002b4

0802456c <_malloc_r>:
 802456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802456e:	1ccd      	adds	r5, r1, #3
 8024570:	f025 0503 	bic.w	r5, r5, #3
 8024574:	3508      	adds	r5, #8
 8024576:	2d0c      	cmp	r5, #12
 8024578:	bf38      	it	cc
 802457a:	250c      	movcc	r5, #12
 802457c:	2d00      	cmp	r5, #0
 802457e:	4606      	mov	r6, r0
 8024580:	db01      	blt.n	8024586 <_malloc_r+0x1a>
 8024582:	42a9      	cmp	r1, r5
 8024584:	d903      	bls.n	802458e <_malloc_r+0x22>
 8024586:	230c      	movs	r3, #12
 8024588:	6033      	str	r3, [r6, #0]
 802458a:	2000      	movs	r0, #0
 802458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802458e:	f000 fd5d 	bl	802504c <__malloc_lock>
 8024592:	4921      	ldr	r1, [pc, #132]	; (8024618 <_malloc_r+0xac>)
 8024594:	680a      	ldr	r2, [r1, #0]
 8024596:	4614      	mov	r4, r2
 8024598:	b99c      	cbnz	r4, 80245c2 <_malloc_r+0x56>
 802459a:	4f20      	ldr	r7, [pc, #128]	; (802461c <_malloc_r+0xb0>)
 802459c:	683b      	ldr	r3, [r7, #0]
 802459e:	b923      	cbnz	r3, 80245aa <_malloc_r+0x3e>
 80245a0:	4621      	mov	r1, r4
 80245a2:	4630      	mov	r0, r6
 80245a4:	f000 fc86 	bl	8024eb4 <_sbrk_r>
 80245a8:	6038      	str	r0, [r7, #0]
 80245aa:	4629      	mov	r1, r5
 80245ac:	4630      	mov	r0, r6
 80245ae:	f000 fc81 	bl	8024eb4 <_sbrk_r>
 80245b2:	1c43      	adds	r3, r0, #1
 80245b4:	d123      	bne.n	80245fe <_malloc_r+0x92>
 80245b6:	230c      	movs	r3, #12
 80245b8:	6033      	str	r3, [r6, #0]
 80245ba:	4630      	mov	r0, r6
 80245bc:	f000 fd4c 	bl	8025058 <__malloc_unlock>
 80245c0:	e7e3      	b.n	802458a <_malloc_r+0x1e>
 80245c2:	6823      	ldr	r3, [r4, #0]
 80245c4:	1b5b      	subs	r3, r3, r5
 80245c6:	d417      	bmi.n	80245f8 <_malloc_r+0x8c>
 80245c8:	2b0b      	cmp	r3, #11
 80245ca:	d903      	bls.n	80245d4 <_malloc_r+0x68>
 80245cc:	6023      	str	r3, [r4, #0]
 80245ce:	441c      	add	r4, r3
 80245d0:	6025      	str	r5, [r4, #0]
 80245d2:	e004      	b.n	80245de <_malloc_r+0x72>
 80245d4:	6863      	ldr	r3, [r4, #4]
 80245d6:	42a2      	cmp	r2, r4
 80245d8:	bf0c      	ite	eq
 80245da:	600b      	streq	r3, [r1, #0]
 80245dc:	6053      	strne	r3, [r2, #4]
 80245de:	4630      	mov	r0, r6
 80245e0:	f000 fd3a 	bl	8025058 <__malloc_unlock>
 80245e4:	f104 000b 	add.w	r0, r4, #11
 80245e8:	1d23      	adds	r3, r4, #4
 80245ea:	f020 0007 	bic.w	r0, r0, #7
 80245ee:	1ac2      	subs	r2, r0, r3
 80245f0:	d0cc      	beq.n	802458c <_malloc_r+0x20>
 80245f2:	1a1b      	subs	r3, r3, r0
 80245f4:	50a3      	str	r3, [r4, r2]
 80245f6:	e7c9      	b.n	802458c <_malloc_r+0x20>
 80245f8:	4622      	mov	r2, r4
 80245fa:	6864      	ldr	r4, [r4, #4]
 80245fc:	e7cc      	b.n	8024598 <_malloc_r+0x2c>
 80245fe:	1cc4      	adds	r4, r0, #3
 8024600:	f024 0403 	bic.w	r4, r4, #3
 8024604:	42a0      	cmp	r0, r4
 8024606:	d0e3      	beq.n	80245d0 <_malloc_r+0x64>
 8024608:	1a21      	subs	r1, r4, r0
 802460a:	4630      	mov	r0, r6
 802460c:	f000 fc52 	bl	8024eb4 <_sbrk_r>
 8024610:	3001      	adds	r0, #1
 8024612:	d1dd      	bne.n	80245d0 <_malloc_r+0x64>
 8024614:	e7cf      	b.n	80245b6 <_malloc_r+0x4a>
 8024616:	bf00      	nop
 8024618:	200002b4 	.word	0x200002b4
 802461c:	200002b8 	.word	0x200002b8

08024620 <__ssputs_r>:
 8024620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024624:	688e      	ldr	r6, [r1, #8]
 8024626:	429e      	cmp	r6, r3
 8024628:	4682      	mov	sl, r0
 802462a:	460c      	mov	r4, r1
 802462c:	4690      	mov	r8, r2
 802462e:	461f      	mov	r7, r3
 8024630:	d838      	bhi.n	80246a4 <__ssputs_r+0x84>
 8024632:	898a      	ldrh	r2, [r1, #12]
 8024634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8024638:	d032      	beq.n	80246a0 <__ssputs_r+0x80>
 802463a:	6825      	ldr	r5, [r4, #0]
 802463c:	6909      	ldr	r1, [r1, #16]
 802463e:	eba5 0901 	sub.w	r9, r5, r1
 8024642:	6965      	ldr	r5, [r4, #20]
 8024644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802464c:	3301      	adds	r3, #1
 802464e:	444b      	add	r3, r9
 8024650:	106d      	asrs	r5, r5, #1
 8024652:	429d      	cmp	r5, r3
 8024654:	bf38      	it	cc
 8024656:	461d      	movcc	r5, r3
 8024658:	0553      	lsls	r3, r2, #21
 802465a:	d531      	bpl.n	80246c0 <__ssputs_r+0xa0>
 802465c:	4629      	mov	r1, r5
 802465e:	f7ff ff85 	bl	802456c <_malloc_r>
 8024662:	4606      	mov	r6, r0
 8024664:	b950      	cbnz	r0, 802467c <__ssputs_r+0x5c>
 8024666:	230c      	movs	r3, #12
 8024668:	f8ca 3000 	str.w	r3, [sl]
 802466c:	89a3      	ldrh	r3, [r4, #12]
 802466e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024672:	81a3      	strh	r3, [r4, #12]
 8024674:	f04f 30ff 	mov.w	r0, #4294967295
 8024678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802467c:	6921      	ldr	r1, [r4, #16]
 802467e:	464a      	mov	r2, r9
 8024680:	f7ff fabc 	bl	8023bfc <memcpy>
 8024684:	89a3      	ldrh	r3, [r4, #12]
 8024686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802468a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802468e:	81a3      	strh	r3, [r4, #12]
 8024690:	6126      	str	r6, [r4, #16]
 8024692:	6165      	str	r5, [r4, #20]
 8024694:	444e      	add	r6, r9
 8024696:	eba5 0509 	sub.w	r5, r5, r9
 802469a:	6026      	str	r6, [r4, #0]
 802469c:	60a5      	str	r5, [r4, #8]
 802469e:	463e      	mov	r6, r7
 80246a0:	42be      	cmp	r6, r7
 80246a2:	d900      	bls.n	80246a6 <__ssputs_r+0x86>
 80246a4:	463e      	mov	r6, r7
 80246a6:	4632      	mov	r2, r6
 80246a8:	6820      	ldr	r0, [r4, #0]
 80246aa:	4641      	mov	r1, r8
 80246ac:	f000 fcb4 	bl	8025018 <memmove>
 80246b0:	68a3      	ldr	r3, [r4, #8]
 80246b2:	6822      	ldr	r2, [r4, #0]
 80246b4:	1b9b      	subs	r3, r3, r6
 80246b6:	4432      	add	r2, r6
 80246b8:	60a3      	str	r3, [r4, #8]
 80246ba:	6022      	str	r2, [r4, #0]
 80246bc:	2000      	movs	r0, #0
 80246be:	e7db      	b.n	8024678 <__ssputs_r+0x58>
 80246c0:	462a      	mov	r2, r5
 80246c2:	f000 fccf 	bl	8025064 <_realloc_r>
 80246c6:	4606      	mov	r6, r0
 80246c8:	2800      	cmp	r0, #0
 80246ca:	d1e1      	bne.n	8024690 <__ssputs_r+0x70>
 80246cc:	6921      	ldr	r1, [r4, #16]
 80246ce:	4650      	mov	r0, sl
 80246d0:	f7ff fefc 	bl	80244cc <_free_r>
 80246d4:	e7c7      	b.n	8024666 <__ssputs_r+0x46>
	...

080246d8 <_svfiprintf_r>:
 80246d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246dc:	4698      	mov	r8, r3
 80246de:	898b      	ldrh	r3, [r1, #12]
 80246e0:	061b      	lsls	r3, r3, #24
 80246e2:	b09d      	sub	sp, #116	; 0x74
 80246e4:	4607      	mov	r7, r0
 80246e6:	460d      	mov	r5, r1
 80246e8:	4614      	mov	r4, r2
 80246ea:	d50e      	bpl.n	802470a <_svfiprintf_r+0x32>
 80246ec:	690b      	ldr	r3, [r1, #16]
 80246ee:	b963      	cbnz	r3, 802470a <_svfiprintf_r+0x32>
 80246f0:	2140      	movs	r1, #64	; 0x40
 80246f2:	f7ff ff3b 	bl	802456c <_malloc_r>
 80246f6:	6028      	str	r0, [r5, #0]
 80246f8:	6128      	str	r0, [r5, #16]
 80246fa:	b920      	cbnz	r0, 8024706 <_svfiprintf_r+0x2e>
 80246fc:	230c      	movs	r3, #12
 80246fe:	603b      	str	r3, [r7, #0]
 8024700:	f04f 30ff 	mov.w	r0, #4294967295
 8024704:	e0d1      	b.n	80248aa <_svfiprintf_r+0x1d2>
 8024706:	2340      	movs	r3, #64	; 0x40
 8024708:	616b      	str	r3, [r5, #20]
 802470a:	2300      	movs	r3, #0
 802470c:	9309      	str	r3, [sp, #36]	; 0x24
 802470e:	2320      	movs	r3, #32
 8024710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024714:	f8cd 800c 	str.w	r8, [sp, #12]
 8024718:	2330      	movs	r3, #48	; 0x30
 802471a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80248c4 <_svfiprintf_r+0x1ec>
 802471e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024722:	f04f 0901 	mov.w	r9, #1
 8024726:	4623      	mov	r3, r4
 8024728:	469a      	mov	sl, r3
 802472a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802472e:	b10a      	cbz	r2, 8024734 <_svfiprintf_r+0x5c>
 8024730:	2a25      	cmp	r2, #37	; 0x25
 8024732:	d1f9      	bne.n	8024728 <_svfiprintf_r+0x50>
 8024734:	ebba 0b04 	subs.w	fp, sl, r4
 8024738:	d00b      	beq.n	8024752 <_svfiprintf_r+0x7a>
 802473a:	465b      	mov	r3, fp
 802473c:	4622      	mov	r2, r4
 802473e:	4629      	mov	r1, r5
 8024740:	4638      	mov	r0, r7
 8024742:	f7ff ff6d 	bl	8024620 <__ssputs_r>
 8024746:	3001      	adds	r0, #1
 8024748:	f000 80aa 	beq.w	80248a0 <_svfiprintf_r+0x1c8>
 802474c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802474e:	445a      	add	r2, fp
 8024750:	9209      	str	r2, [sp, #36]	; 0x24
 8024752:	f89a 3000 	ldrb.w	r3, [sl]
 8024756:	2b00      	cmp	r3, #0
 8024758:	f000 80a2 	beq.w	80248a0 <_svfiprintf_r+0x1c8>
 802475c:	2300      	movs	r3, #0
 802475e:	f04f 32ff 	mov.w	r2, #4294967295
 8024762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024766:	f10a 0a01 	add.w	sl, sl, #1
 802476a:	9304      	str	r3, [sp, #16]
 802476c:	9307      	str	r3, [sp, #28]
 802476e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024772:	931a      	str	r3, [sp, #104]	; 0x68
 8024774:	4654      	mov	r4, sl
 8024776:	2205      	movs	r2, #5
 8024778:	f814 1b01 	ldrb.w	r1, [r4], #1
 802477c:	4851      	ldr	r0, [pc, #324]	; (80248c4 <_svfiprintf_r+0x1ec>)
 802477e:	f7fb fd2f 	bl	80201e0 <memchr>
 8024782:	9a04      	ldr	r2, [sp, #16]
 8024784:	b9d8      	cbnz	r0, 80247be <_svfiprintf_r+0xe6>
 8024786:	06d0      	lsls	r0, r2, #27
 8024788:	bf44      	itt	mi
 802478a:	2320      	movmi	r3, #32
 802478c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024790:	0711      	lsls	r1, r2, #28
 8024792:	bf44      	itt	mi
 8024794:	232b      	movmi	r3, #43	; 0x2b
 8024796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802479a:	f89a 3000 	ldrb.w	r3, [sl]
 802479e:	2b2a      	cmp	r3, #42	; 0x2a
 80247a0:	d015      	beq.n	80247ce <_svfiprintf_r+0xf6>
 80247a2:	9a07      	ldr	r2, [sp, #28]
 80247a4:	4654      	mov	r4, sl
 80247a6:	2000      	movs	r0, #0
 80247a8:	f04f 0c0a 	mov.w	ip, #10
 80247ac:	4621      	mov	r1, r4
 80247ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80247b2:	3b30      	subs	r3, #48	; 0x30
 80247b4:	2b09      	cmp	r3, #9
 80247b6:	d94e      	bls.n	8024856 <_svfiprintf_r+0x17e>
 80247b8:	b1b0      	cbz	r0, 80247e8 <_svfiprintf_r+0x110>
 80247ba:	9207      	str	r2, [sp, #28]
 80247bc:	e014      	b.n	80247e8 <_svfiprintf_r+0x110>
 80247be:	eba0 0308 	sub.w	r3, r0, r8
 80247c2:	fa09 f303 	lsl.w	r3, r9, r3
 80247c6:	4313      	orrs	r3, r2
 80247c8:	9304      	str	r3, [sp, #16]
 80247ca:	46a2      	mov	sl, r4
 80247cc:	e7d2      	b.n	8024774 <_svfiprintf_r+0x9c>
 80247ce:	9b03      	ldr	r3, [sp, #12]
 80247d0:	1d19      	adds	r1, r3, #4
 80247d2:	681b      	ldr	r3, [r3, #0]
 80247d4:	9103      	str	r1, [sp, #12]
 80247d6:	2b00      	cmp	r3, #0
 80247d8:	bfbb      	ittet	lt
 80247da:	425b      	neglt	r3, r3
 80247dc:	f042 0202 	orrlt.w	r2, r2, #2
 80247e0:	9307      	strge	r3, [sp, #28]
 80247e2:	9307      	strlt	r3, [sp, #28]
 80247e4:	bfb8      	it	lt
 80247e6:	9204      	strlt	r2, [sp, #16]
 80247e8:	7823      	ldrb	r3, [r4, #0]
 80247ea:	2b2e      	cmp	r3, #46	; 0x2e
 80247ec:	d10c      	bne.n	8024808 <_svfiprintf_r+0x130>
 80247ee:	7863      	ldrb	r3, [r4, #1]
 80247f0:	2b2a      	cmp	r3, #42	; 0x2a
 80247f2:	d135      	bne.n	8024860 <_svfiprintf_r+0x188>
 80247f4:	9b03      	ldr	r3, [sp, #12]
 80247f6:	1d1a      	adds	r2, r3, #4
 80247f8:	681b      	ldr	r3, [r3, #0]
 80247fa:	9203      	str	r2, [sp, #12]
 80247fc:	2b00      	cmp	r3, #0
 80247fe:	bfb8      	it	lt
 8024800:	f04f 33ff 	movlt.w	r3, #4294967295
 8024804:	3402      	adds	r4, #2
 8024806:	9305      	str	r3, [sp, #20]
 8024808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80248d4 <_svfiprintf_r+0x1fc>
 802480c:	7821      	ldrb	r1, [r4, #0]
 802480e:	2203      	movs	r2, #3
 8024810:	4650      	mov	r0, sl
 8024812:	f7fb fce5 	bl	80201e0 <memchr>
 8024816:	b140      	cbz	r0, 802482a <_svfiprintf_r+0x152>
 8024818:	2340      	movs	r3, #64	; 0x40
 802481a:	eba0 000a 	sub.w	r0, r0, sl
 802481e:	fa03 f000 	lsl.w	r0, r3, r0
 8024822:	9b04      	ldr	r3, [sp, #16]
 8024824:	4303      	orrs	r3, r0
 8024826:	3401      	adds	r4, #1
 8024828:	9304      	str	r3, [sp, #16]
 802482a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802482e:	4826      	ldr	r0, [pc, #152]	; (80248c8 <_svfiprintf_r+0x1f0>)
 8024830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024834:	2206      	movs	r2, #6
 8024836:	f7fb fcd3 	bl	80201e0 <memchr>
 802483a:	2800      	cmp	r0, #0
 802483c:	d038      	beq.n	80248b0 <_svfiprintf_r+0x1d8>
 802483e:	4b23      	ldr	r3, [pc, #140]	; (80248cc <_svfiprintf_r+0x1f4>)
 8024840:	bb1b      	cbnz	r3, 802488a <_svfiprintf_r+0x1b2>
 8024842:	9b03      	ldr	r3, [sp, #12]
 8024844:	3307      	adds	r3, #7
 8024846:	f023 0307 	bic.w	r3, r3, #7
 802484a:	3308      	adds	r3, #8
 802484c:	9303      	str	r3, [sp, #12]
 802484e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024850:	4433      	add	r3, r6
 8024852:	9309      	str	r3, [sp, #36]	; 0x24
 8024854:	e767      	b.n	8024726 <_svfiprintf_r+0x4e>
 8024856:	fb0c 3202 	mla	r2, ip, r2, r3
 802485a:	460c      	mov	r4, r1
 802485c:	2001      	movs	r0, #1
 802485e:	e7a5      	b.n	80247ac <_svfiprintf_r+0xd4>
 8024860:	2300      	movs	r3, #0
 8024862:	3401      	adds	r4, #1
 8024864:	9305      	str	r3, [sp, #20]
 8024866:	4619      	mov	r1, r3
 8024868:	f04f 0c0a 	mov.w	ip, #10
 802486c:	4620      	mov	r0, r4
 802486e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024872:	3a30      	subs	r2, #48	; 0x30
 8024874:	2a09      	cmp	r2, #9
 8024876:	d903      	bls.n	8024880 <_svfiprintf_r+0x1a8>
 8024878:	2b00      	cmp	r3, #0
 802487a:	d0c5      	beq.n	8024808 <_svfiprintf_r+0x130>
 802487c:	9105      	str	r1, [sp, #20]
 802487e:	e7c3      	b.n	8024808 <_svfiprintf_r+0x130>
 8024880:	fb0c 2101 	mla	r1, ip, r1, r2
 8024884:	4604      	mov	r4, r0
 8024886:	2301      	movs	r3, #1
 8024888:	e7f0      	b.n	802486c <_svfiprintf_r+0x194>
 802488a:	ab03      	add	r3, sp, #12
 802488c:	9300      	str	r3, [sp, #0]
 802488e:	462a      	mov	r2, r5
 8024890:	4b0f      	ldr	r3, [pc, #60]	; (80248d0 <_svfiprintf_r+0x1f8>)
 8024892:	a904      	add	r1, sp, #16
 8024894:	4638      	mov	r0, r7
 8024896:	f3af 8000 	nop.w
 802489a:	1c42      	adds	r2, r0, #1
 802489c:	4606      	mov	r6, r0
 802489e:	d1d6      	bne.n	802484e <_svfiprintf_r+0x176>
 80248a0:	89ab      	ldrh	r3, [r5, #12]
 80248a2:	065b      	lsls	r3, r3, #25
 80248a4:	f53f af2c 	bmi.w	8024700 <_svfiprintf_r+0x28>
 80248a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80248aa:	b01d      	add	sp, #116	; 0x74
 80248ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248b0:	ab03      	add	r3, sp, #12
 80248b2:	9300      	str	r3, [sp, #0]
 80248b4:	462a      	mov	r2, r5
 80248b6:	4b06      	ldr	r3, [pc, #24]	; (80248d0 <_svfiprintf_r+0x1f8>)
 80248b8:	a904      	add	r1, sp, #16
 80248ba:	4638      	mov	r0, r7
 80248bc:	f000 f9d4 	bl	8024c68 <_printf_i>
 80248c0:	e7eb      	b.n	802489a <_svfiprintf_r+0x1c2>
 80248c2:	bf00      	nop
 80248c4:	08025afc 	.word	0x08025afc
 80248c8:	08025b06 	.word	0x08025b06
 80248cc:	00000000 	.word	0x00000000
 80248d0:	08024621 	.word	0x08024621
 80248d4:	08025b02 	.word	0x08025b02

080248d8 <__sfputc_r>:
 80248d8:	6893      	ldr	r3, [r2, #8]
 80248da:	3b01      	subs	r3, #1
 80248dc:	2b00      	cmp	r3, #0
 80248de:	b410      	push	{r4}
 80248e0:	6093      	str	r3, [r2, #8]
 80248e2:	da08      	bge.n	80248f6 <__sfputc_r+0x1e>
 80248e4:	6994      	ldr	r4, [r2, #24]
 80248e6:	42a3      	cmp	r3, r4
 80248e8:	db01      	blt.n	80248ee <__sfputc_r+0x16>
 80248ea:	290a      	cmp	r1, #10
 80248ec:	d103      	bne.n	80248f6 <__sfputc_r+0x1e>
 80248ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80248f2:	f7ff bad5 	b.w	8023ea0 <__swbuf_r>
 80248f6:	6813      	ldr	r3, [r2, #0]
 80248f8:	1c58      	adds	r0, r3, #1
 80248fa:	6010      	str	r0, [r2, #0]
 80248fc:	7019      	strb	r1, [r3, #0]
 80248fe:	4608      	mov	r0, r1
 8024900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024904:	4770      	bx	lr

08024906 <__sfputs_r>:
 8024906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024908:	4606      	mov	r6, r0
 802490a:	460f      	mov	r7, r1
 802490c:	4614      	mov	r4, r2
 802490e:	18d5      	adds	r5, r2, r3
 8024910:	42ac      	cmp	r4, r5
 8024912:	d101      	bne.n	8024918 <__sfputs_r+0x12>
 8024914:	2000      	movs	r0, #0
 8024916:	e007      	b.n	8024928 <__sfputs_r+0x22>
 8024918:	f814 1b01 	ldrb.w	r1, [r4], #1
 802491c:	463a      	mov	r2, r7
 802491e:	4630      	mov	r0, r6
 8024920:	f7ff ffda 	bl	80248d8 <__sfputc_r>
 8024924:	1c43      	adds	r3, r0, #1
 8024926:	d1f3      	bne.n	8024910 <__sfputs_r+0xa>
 8024928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802492c <_vfiprintf_r>:
 802492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024930:	460d      	mov	r5, r1
 8024932:	b09d      	sub	sp, #116	; 0x74
 8024934:	4614      	mov	r4, r2
 8024936:	4698      	mov	r8, r3
 8024938:	4606      	mov	r6, r0
 802493a:	b118      	cbz	r0, 8024944 <_vfiprintf_r+0x18>
 802493c:	6983      	ldr	r3, [r0, #24]
 802493e:	b90b      	cbnz	r3, 8024944 <_vfiprintf_r+0x18>
 8024940:	f7ff fca6 	bl	8024290 <__sinit>
 8024944:	4b89      	ldr	r3, [pc, #548]	; (8024b6c <_vfiprintf_r+0x240>)
 8024946:	429d      	cmp	r5, r3
 8024948:	d11b      	bne.n	8024982 <_vfiprintf_r+0x56>
 802494a:	6875      	ldr	r5, [r6, #4]
 802494c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802494e:	07d9      	lsls	r1, r3, #31
 8024950:	d405      	bmi.n	802495e <_vfiprintf_r+0x32>
 8024952:	89ab      	ldrh	r3, [r5, #12]
 8024954:	059a      	lsls	r2, r3, #22
 8024956:	d402      	bmi.n	802495e <_vfiprintf_r+0x32>
 8024958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802495a:	f7ff fd49 	bl	80243f0 <__retarget_lock_acquire_recursive>
 802495e:	89ab      	ldrh	r3, [r5, #12]
 8024960:	071b      	lsls	r3, r3, #28
 8024962:	d501      	bpl.n	8024968 <_vfiprintf_r+0x3c>
 8024964:	692b      	ldr	r3, [r5, #16]
 8024966:	b9eb      	cbnz	r3, 80249a4 <_vfiprintf_r+0x78>
 8024968:	4629      	mov	r1, r5
 802496a:	4630      	mov	r0, r6
 802496c:	f7ff faea 	bl	8023f44 <__swsetup_r>
 8024970:	b1c0      	cbz	r0, 80249a4 <_vfiprintf_r+0x78>
 8024972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024974:	07dc      	lsls	r4, r3, #31
 8024976:	d50e      	bpl.n	8024996 <_vfiprintf_r+0x6a>
 8024978:	f04f 30ff 	mov.w	r0, #4294967295
 802497c:	b01d      	add	sp, #116	; 0x74
 802497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024982:	4b7b      	ldr	r3, [pc, #492]	; (8024b70 <_vfiprintf_r+0x244>)
 8024984:	429d      	cmp	r5, r3
 8024986:	d101      	bne.n	802498c <_vfiprintf_r+0x60>
 8024988:	68b5      	ldr	r5, [r6, #8]
 802498a:	e7df      	b.n	802494c <_vfiprintf_r+0x20>
 802498c:	4b79      	ldr	r3, [pc, #484]	; (8024b74 <_vfiprintf_r+0x248>)
 802498e:	429d      	cmp	r5, r3
 8024990:	bf08      	it	eq
 8024992:	68f5      	ldreq	r5, [r6, #12]
 8024994:	e7da      	b.n	802494c <_vfiprintf_r+0x20>
 8024996:	89ab      	ldrh	r3, [r5, #12]
 8024998:	0598      	lsls	r0, r3, #22
 802499a:	d4ed      	bmi.n	8024978 <_vfiprintf_r+0x4c>
 802499c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802499e:	f7ff fd28 	bl	80243f2 <__retarget_lock_release_recursive>
 80249a2:	e7e9      	b.n	8024978 <_vfiprintf_r+0x4c>
 80249a4:	2300      	movs	r3, #0
 80249a6:	9309      	str	r3, [sp, #36]	; 0x24
 80249a8:	2320      	movs	r3, #32
 80249aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80249ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80249b2:	2330      	movs	r3, #48	; 0x30
 80249b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024b78 <_vfiprintf_r+0x24c>
 80249b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80249bc:	f04f 0901 	mov.w	r9, #1
 80249c0:	4623      	mov	r3, r4
 80249c2:	469a      	mov	sl, r3
 80249c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80249c8:	b10a      	cbz	r2, 80249ce <_vfiprintf_r+0xa2>
 80249ca:	2a25      	cmp	r2, #37	; 0x25
 80249cc:	d1f9      	bne.n	80249c2 <_vfiprintf_r+0x96>
 80249ce:	ebba 0b04 	subs.w	fp, sl, r4
 80249d2:	d00b      	beq.n	80249ec <_vfiprintf_r+0xc0>
 80249d4:	465b      	mov	r3, fp
 80249d6:	4622      	mov	r2, r4
 80249d8:	4629      	mov	r1, r5
 80249da:	4630      	mov	r0, r6
 80249dc:	f7ff ff93 	bl	8024906 <__sfputs_r>
 80249e0:	3001      	adds	r0, #1
 80249e2:	f000 80aa 	beq.w	8024b3a <_vfiprintf_r+0x20e>
 80249e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80249e8:	445a      	add	r2, fp
 80249ea:	9209      	str	r2, [sp, #36]	; 0x24
 80249ec:	f89a 3000 	ldrb.w	r3, [sl]
 80249f0:	2b00      	cmp	r3, #0
 80249f2:	f000 80a2 	beq.w	8024b3a <_vfiprintf_r+0x20e>
 80249f6:	2300      	movs	r3, #0
 80249f8:	f04f 32ff 	mov.w	r2, #4294967295
 80249fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024a00:	f10a 0a01 	add.w	sl, sl, #1
 8024a04:	9304      	str	r3, [sp, #16]
 8024a06:	9307      	str	r3, [sp, #28]
 8024a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8024a0e:	4654      	mov	r4, sl
 8024a10:	2205      	movs	r2, #5
 8024a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024a16:	4858      	ldr	r0, [pc, #352]	; (8024b78 <_vfiprintf_r+0x24c>)
 8024a18:	f7fb fbe2 	bl	80201e0 <memchr>
 8024a1c:	9a04      	ldr	r2, [sp, #16]
 8024a1e:	b9d8      	cbnz	r0, 8024a58 <_vfiprintf_r+0x12c>
 8024a20:	06d1      	lsls	r1, r2, #27
 8024a22:	bf44      	itt	mi
 8024a24:	2320      	movmi	r3, #32
 8024a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024a2a:	0713      	lsls	r3, r2, #28
 8024a2c:	bf44      	itt	mi
 8024a2e:	232b      	movmi	r3, #43	; 0x2b
 8024a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024a34:	f89a 3000 	ldrb.w	r3, [sl]
 8024a38:	2b2a      	cmp	r3, #42	; 0x2a
 8024a3a:	d015      	beq.n	8024a68 <_vfiprintf_r+0x13c>
 8024a3c:	9a07      	ldr	r2, [sp, #28]
 8024a3e:	4654      	mov	r4, sl
 8024a40:	2000      	movs	r0, #0
 8024a42:	f04f 0c0a 	mov.w	ip, #10
 8024a46:	4621      	mov	r1, r4
 8024a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024a4c:	3b30      	subs	r3, #48	; 0x30
 8024a4e:	2b09      	cmp	r3, #9
 8024a50:	d94e      	bls.n	8024af0 <_vfiprintf_r+0x1c4>
 8024a52:	b1b0      	cbz	r0, 8024a82 <_vfiprintf_r+0x156>
 8024a54:	9207      	str	r2, [sp, #28]
 8024a56:	e014      	b.n	8024a82 <_vfiprintf_r+0x156>
 8024a58:	eba0 0308 	sub.w	r3, r0, r8
 8024a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8024a60:	4313      	orrs	r3, r2
 8024a62:	9304      	str	r3, [sp, #16]
 8024a64:	46a2      	mov	sl, r4
 8024a66:	e7d2      	b.n	8024a0e <_vfiprintf_r+0xe2>
 8024a68:	9b03      	ldr	r3, [sp, #12]
 8024a6a:	1d19      	adds	r1, r3, #4
 8024a6c:	681b      	ldr	r3, [r3, #0]
 8024a6e:	9103      	str	r1, [sp, #12]
 8024a70:	2b00      	cmp	r3, #0
 8024a72:	bfbb      	ittet	lt
 8024a74:	425b      	neglt	r3, r3
 8024a76:	f042 0202 	orrlt.w	r2, r2, #2
 8024a7a:	9307      	strge	r3, [sp, #28]
 8024a7c:	9307      	strlt	r3, [sp, #28]
 8024a7e:	bfb8      	it	lt
 8024a80:	9204      	strlt	r2, [sp, #16]
 8024a82:	7823      	ldrb	r3, [r4, #0]
 8024a84:	2b2e      	cmp	r3, #46	; 0x2e
 8024a86:	d10c      	bne.n	8024aa2 <_vfiprintf_r+0x176>
 8024a88:	7863      	ldrb	r3, [r4, #1]
 8024a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8024a8c:	d135      	bne.n	8024afa <_vfiprintf_r+0x1ce>
 8024a8e:	9b03      	ldr	r3, [sp, #12]
 8024a90:	1d1a      	adds	r2, r3, #4
 8024a92:	681b      	ldr	r3, [r3, #0]
 8024a94:	9203      	str	r2, [sp, #12]
 8024a96:	2b00      	cmp	r3, #0
 8024a98:	bfb8      	it	lt
 8024a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8024a9e:	3402      	adds	r4, #2
 8024aa0:	9305      	str	r3, [sp, #20]
 8024aa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024b88 <_vfiprintf_r+0x25c>
 8024aa6:	7821      	ldrb	r1, [r4, #0]
 8024aa8:	2203      	movs	r2, #3
 8024aaa:	4650      	mov	r0, sl
 8024aac:	f7fb fb98 	bl	80201e0 <memchr>
 8024ab0:	b140      	cbz	r0, 8024ac4 <_vfiprintf_r+0x198>
 8024ab2:	2340      	movs	r3, #64	; 0x40
 8024ab4:	eba0 000a 	sub.w	r0, r0, sl
 8024ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8024abc:	9b04      	ldr	r3, [sp, #16]
 8024abe:	4303      	orrs	r3, r0
 8024ac0:	3401      	adds	r4, #1
 8024ac2:	9304      	str	r3, [sp, #16]
 8024ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024ac8:	482c      	ldr	r0, [pc, #176]	; (8024b7c <_vfiprintf_r+0x250>)
 8024aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024ace:	2206      	movs	r2, #6
 8024ad0:	f7fb fb86 	bl	80201e0 <memchr>
 8024ad4:	2800      	cmp	r0, #0
 8024ad6:	d03f      	beq.n	8024b58 <_vfiprintf_r+0x22c>
 8024ad8:	4b29      	ldr	r3, [pc, #164]	; (8024b80 <_vfiprintf_r+0x254>)
 8024ada:	bb1b      	cbnz	r3, 8024b24 <_vfiprintf_r+0x1f8>
 8024adc:	9b03      	ldr	r3, [sp, #12]
 8024ade:	3307      	adds	r3, #7
 8024ae0:	f023 0307 	bic.w	r3, r3, #7
 8024ae4:	3308      	adds	r3, #8
 8024ae6:	9303      	str	r3, [sp, #12]
 8024ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024aea:	443b      	add	r3, r7
 8024aec:	9309      	str	r3, [sp, #36]	; 0x24
 8024aee:	e767      	b.n	80249c0 <_vfiprintf_r+0x94>
 8024af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8024af4:	460c      	mov	r4, r1
 8024af6:	2001      	movs	r0, #1
 8024af8:	e7a5      	b.n	8024a46 <_vfiprintf_r+0x11a>
 8024afa:	2300      	movs	r3, #0
 8024afc:	3401      	adds	r4, #1
 8024afe:	9305      	str	r3, [sp, #20]
 8024b00:	4619      	mov	r1, r3
 8024b02:	f04f 0c0a 	mov.w	ip, #10
 8024b06:	4620      	mov	r0, r4
 8024b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024b0c:	3a30      	subs	r2, #48	; 0x30
 8024b0e:	2a09      	cmp	r2, #9
 8024b10:	d903      	bls.n	8024b1a <_vfiprintf_r+0x1ee>
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	d0c5      	beq.n	8024aa2 <_vfiprintf_r+0x176>
 8024b16:	9105      	str	r1, [sp, #20]
 8024b18:	e7c3      	b.n	8024aa2 <_vfiprintf_r+0x176>
 8024b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8024b1e:	4604      	mov	r4, r0
 8024b20:	2301      	movs	r3, #1
 8024b22:	e7f0      	b.n	8024b06 <_vfiprintf_r+0x1da>
 8024b24:	ab03      	add	r3, sp, #12
 8024b26:	9300      	str	r3, [sp, #0]
 8024b28:	462a      	mov	r2, r5
 8024b2a:	4b16      	ldr	r3, [pc, #88]	; (8024b84 <_vfiprintf_r+0x258>)
 8024b2c:	a904      	add	r1, sp, #16
 8024b2e:	4630      	mov	r0, r6
 8024b30:	f3af 8000 	nop.w
 8024b34:	4607      	mov	r7, r0
 8024b36:	1c78      	adds	r0, r7, #1
 8024b38:	d1d6      	bne.n	8024ae8 <_vfiprintf_r+0x1bc>
 8024b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024b3c:	07d9      	lsls	r1, r3, #31
 8024b3e:	d405      	bmi.n	8024b4c <_vfiprintf_r+0x220>
 8024b40:	89ab      	ldrh	r3, [r5, #12]
 8024b42:	059a      	lsls	r2, r3, #22
 8024b44:	d402      	bmi.n	8024b4c <_vfiprintf_r+0x220>
 8024b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024b48:	f7ff fc53 	bl	80243f2 <__retarget_lock_release_recursive>
 8024b4c:	89ab      	ldrh	r3, [r5, #12]
 8024b4e:	065b      	lsls	r3, r3, #25
 8024b50:	f53f af12 	bmi.w	8024978 <_vfiprintf_r+0x4c>
 8024b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024b56:	e711      	b.n	802497c <_vfiprintf_r+0x50>
 8024b58:	ab03      	add	r3, sp, #12
 8024b5a:	9300      	str	r3, [sp, #0]
 8024b5c:	462a      	mov	r2, r5
 8024b5e:	4b09      	ldr	r3, [pc, #36]	; (8024b84 <_vfiprintf_r+0x258>)
 8024b60:	a904      	add	r1, sp, #16
 8024b62:	4630      	mov	r0, r6
 8024b64:	f000 f880 	bl	8024c68 <_printf_i>
 8024b68:	e7e4      	b.n	8024b34 <_vfiprintf_r+0x208>
 8024b6a:	bf00      	nop
 8024b6c:	08025abc 	.word	0x08025abc
 8024b70:	08025adc 	.word	0x08025adc
 8024b74:	08025a9c 	.word	0x08025a9c
 8024b78:	08025afc 	.word	0x08025afc
 8024b7c:	08025b06 	.word	0x08025b06
 8024b80:	00000000 	.word	0x00000000
 8024b84:	08024907 	.word	0x08024907
 8024b88:	08025b02 	.word	0x08025b02

08024b8c <_printf_common>:
 8024b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024b90:	4616      	mov	r6, r2
 8024b92:	4699      	mov	r9, r3
 8024b94:	688a      	ldr	r2, [r1, #8]
 8024b96:	690b      	ldr	r3, [r1, #16]
 8024b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024b9c:	4293      	cmp	r3, r2
 8024b9e:	bfb8      	it	lt
 8024ba0:	4613      	movlt	r3, r2
 8024ba2:	6033      	str	r3, [r6, #0]
 8024ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024ba8:	4607      	mov	r7, r0
 8024baa:	460c      	mov	r4, r1
 8024bac:	b10a      	cbz	r2, 8024bb2 <_printf_common+0x26>
 8024bae:	3301      	adds	r3, #1
 8024bb0:	6033      	str	r3, [r6, #0]
 8024bb2:	6823      	ldr	r3, [r4, #0]
 8024bb4:	0699      	lsls	r1, r3, #26
 8024bb6:	bf42      	ittt	mi
 8024bb8:	6833      	ldrmi	r3, [r6, #0]
 8024bba:	3302      	addmi	r3, #2
 8024bbc:	6033      	strmi	r3, [r6, #0]
 8024bbe:	6825      	ldr	r5, [r4, #0]
 8024bc0:	f015 0506 	ands.w	r5, r5, #6
 8024bc4:	d106      	bne.n	8024bd4 <_printf_common+0x48>
 8024bc6:	f104 0a19 	add.w	sl, r4, #25
 8024bca:	68e3      	ldr	r3, [r4, #12]
 8024bcc:	6832      	ldr	r2, [r6, #0]
 8024bce:	1a9b      	subs	r3, r3, r2
 8024bd0:	42ab      	cmp	r3, r5
 8024bd2:	dc26      	bgt.n	8024c22 <_printf_common+0x96>
 8024bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024bd8:	1e13      	subs	r3, r2, #0
 8024bda:	6822      	ldr	r2, [r4, #0]
 8024bdc:	bf18      	it	ne
 8024bde:	2301      	movne	r3, #1
 8024be0:	0692      	lsls	r2, r2, #26
 8024be2:	d42b      	bmi.n	8024c3c <_printf_common+0xb0>
 8024be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024be8:	4649      	mov	r1, r9
 8024bea:	4638      	mov	r0, r7
 8024bec:	47c0      	blx	r8
 8024bee:	3001      	adds	r0, #1
 8024bf0:	d01e      	beq.n	8024c30 <_printf_common+0xa4>
 8024bf2:	6823      	ldr	r3, [r4, #0]
 8024bf4:	68e5      	ldr	r5, [r4, #12]
 8024bf6:	6832      	ldr	r2, [r6, #0]
 8024bf8:	f003 0306 	and.w	r3, r3, #6
 8024bfc:	2b04      	cmp	r3, #4
 8024bfe:	bf08      	it	eq
 8024c00:	1aad      	subeq	r5, r5, r2
 8024c02:	68a3      	ldr	r3, [r4, #8]
 8024c04:	6922      	ldr	r2, [r4, #16]
 8024c06:	bf0c      	ite	eq
 8024c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024c0c:	2500      	movne	r5, #0
 8024c0e:	4293      	cmp	r3, r2
 8024c10:	bfc4      	itt	gt
 8024c12:	1a9b      	subgt	r3, r3, r2
 8024c14:	18ed      	addgt	r5, r5, r3
 8024c16:	2600      	movs	r6, #0
 8024c18:	341a      	adds	r4, #26
 8024c1a:	42b5      	cmp	r5, r6
 8024c1c:	d11a      	bne.n	8024c54 <_printf_common+0xc8>
 8024c1e:	2000      	movs	r0, #0
 8024c20:	e008      	b.n	8024c34 <_printf_common+0xa8>
 8024c22:	2301      	movs	r3, #1
 8024c24:	4652      	mov	r2, sl
 8024c26:	4649      	mov	r1, r9
 8024c28:	4638      	mov	r0, r7
 8024c2a:	47c0      	blx	r8
 8024c2c:	3001      	adds	r0, #1
 8024c2e:	d103      	bne.n	8024c38 <_printf_common+0xac>
 8024c30:	f04f 30ff 	mov.w	r0, #4294967295
 8024c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024c38:	3501      	adds	r5, #1
 8024c3a:	e7c6      	b.n	8024bca <_printf_common+0x3e>
 8024c3c:	18e1      	adds	r1, r4, r3
 8024c3e:	1c5a      	adds	r2, r3, #1
 8024c40:	2030      	movs	r0, #48	; 0x30
 8024c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024c46:	4422      	add	r2, r4
 8024c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024c50:	3302      	adds	r3, #2
 8024c52:	e7c7      	b.n	8024be4 <_printf_common+0x58>
 8024c54:	2301      	movs	r3, #1
 8024c56:	4622      	mov	r2, r4
 8024c58:	4649      	mov	r1, r9
 8024c5a:	4638      	mov	r0, r7
 8024c5c:	47c0      	blx	r8
 8024c5e:	3001      	adds	r0, #1
 8024c60:	d0e6      	beq.n	8024c30 <_printf_common+0xa4>
 8024c62:	3601      	adds	r6, #1
 8024c64:	e7d9      	b.n	8024c1a <_printf_common+0x8e>
	...

08024c68 <_printf_i>:
 8024c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024c6c:	460c      	mov	r4, r1
 8024c6e:	4691      	mov	r9, r2
 8024c70:	7e27      	ldrb	r7, [r4, #24]
 8024c72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024c74:	2f78      	cmp	r7, #120	; 0x78
 8024c76:	4680      	mov	r8, r0
 8024c78:	469a      	mov	sl, r3
 8024c7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024c7e:	d807      	bhi.n	8024c90 <_printf_i+0x28>
 8024c80:	2f62      	cmp	r7, #98	; 0x62
 8024c82:	d80a      	bhi.n	8024c9a <_printf_i+0x32>
 8024c84:	2f00      	cmp	r7, #0
 8024c86:	f000 80d8 	beq.w	8024e3a <_printf_i+0x1d2>
 8024c8a:	2f58      	cmp	r7, #88	; 0x58
 8024c8c:	f000 80a3 	beq.w	8024dd6 <_printf_i+0x16e>
 8024c90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024c98:	e03a      	b.n	8024d10 <_printf_i+0xa8>
 8024c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024c9e:	2b15      	cmp	r3, #21
 8024ca0:	d8f6      	bhi.n	8024c90 <_printf_i+0x28>
 8024ca2:	a001      	add	r0, pc, #4	; (adr r0, 8024ca8 <_printf_i+0x40>)
 8024ca4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8024ca8:	08024d01 	.word	0x08024d01
 8024cac:	08024d15 	.word	0x08024d15
 8024cb0:	08024c91 	.word	0x08024c91
 8024cb4:	08024c91 	.word	0x08024c91
 8024cb8:	08024c91 	.word	0x08024c91
 8024cbc:	08024c91 	.word	0x08024c91
 8024cc0:	08024d15 	.word	0x08024d15
 8024cc4:	08024c91 	.word	0x08024c91
 8024cc8:	08024c91 	.word	0x08024c91
 8024ccc:	08024c91 	.word	0x08024c91
 8024cd0:	08024c91 	.word	0x08024c91
 8024cd4:	08024e21 	.word	0x08024e21
 8024cd8:	08024d45 	.word	0x08024d45
 8024cdc:	08024e03 	.word	0x08024e03
 8024ce0:	08024c91 	.word	0x08024c91
 8024ce4:	08024c91 	.word	0x08024c91
 8024ce8:	08024e43 	.word	0x08024e43
 8024cec:	08024c91 	.word	0x08024c91
 8024cf0:	08024d45 	.word	0x08024d45
 8024cf4:	08024c91 	.word	0x08024c91
 8024cf8:	08024c91 	.word	0x08024c91
 8024cfc:	08024e0b 	.word	0x08024e0b
 8024d00:	680b      	ldr	r3, [r1, #0]
 8024d02:	1d1a      	adds	r2, r3, #4
 8024d04:	681b      	ldr	r3, [r3, #0]
 8024d06:	600a      	str	r2, [r1, #0]
 8024d08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024d10:	2301      	movs	r3, #1
 8024d12:	e0a3      	b.n	8024e5c <_printf_i+0x1f4>
 8024d14:	6825      	ldr	r5, [r4, #0]
 8024d16:	6808      	ldr	r0, [r1, #0]
 8024d18:	062e      	lsls	r6, r5, #24
 8024d1a:	f100 0304 	add.w	r3, r0, #4
 8024d1e:	d50a      	bpl.n	8024d36 <_printf_i+0xce>
 8024d20:	6805      	ldr	r5, [r0, #0]
 8024d22:	600b      	str	r3, [r1, #0]
 8024d24:	2d00      	cmp	r5, #0
 8024d26:	da03      	bge.n	8024d30 <_printf_i+0xc8>
 8024d28:	232d      	movs	r3, #45	; 0x2d
 8024d2a:	426d      	negs	r5, r5
 8024d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024d30:	485e      	ldr	r0, [pc, #376]	; (8024eac <_printf_i+0x244>)
 8024d32:	230a      	movs	r3, #10
 8024d34:	e019      	b.n	8024d6a <_printf_i+0x102>
 8024d36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8024d3a:	6805      	ldr	r5, [r0, #0]
 8024d3c:	600b      	str	r3, [r1, #0]
 8024d3e:	bf18      	it	ne
 8024d40:	b22d      	sxthne	r5, r5
 8024d42:	e7ef      	b.n	8024d24 <_printf_i+0xbc>
 8024d44:	680b      	ldr	r3, [r1, #0]
 8024d46:	6825      	ldr	r5, [r4, #0]
 8024d48:	1d18      	adds	r0, r3, #4
 8024d4a:	6008      	str	r0, [r1, #0]
 8024d4c:	0628      	lsls	r0, r5, #24
 8024d4e:	d501      	bpl.n	8024d54 <_printf_i+0xec>
 8024d50:	681d      	ldr	r5, [r3, #0]
 8024d52:	e002      	b.n	8024d5a <_printf_i+0xf2>
 8024d54:	0669      	lsls	r1, r5, #25
 8024d56:	d5fb      	bpl.n	8024d50 <_printf_i+0xe8>
 8024d58:	881d      	ldrh	r5, [r3, #0]
 8024d5a:	4854      	ldr	r0, [pc, #336]	; (8024eac <_printf_i+0x244>)
 8024d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8024d5e:	bf0c      	ite	eq
 8024d60:	2308      	moveq	r3, #8
 8024d62:	230a      	movne	r3, #10
 8024d64:	2100      	movs	r1, #0
 8024d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024d6a:	6866      	ldr	r6, [r4, #4]
 8024d6c:	60a6      	str	r6, [r4, #8]
 8024d6e:	2e00      	cmp	r6, #0
 8024d70:	bfa2      	ittt	ge
 8024d72:	6821      	ldrge	r1, [r4, #0]
 8024d74:	f021 0104 	bicge.w	r1, r1, #4
 8024d78:	6021      	strge	r1, [r4, #0]
 8024d7a:	b90d      	cbnz	r5, 8024d80 <_printf_i+0x118>
 8024d7c:	2e00      	cmp	r6, #0
 8024d7e:	d04d      	beq.n	8024e1c <_printf_i+0x1b4>
 8024d80:	4616      	mov	r6, r2
 8024d82:	fbb5 f1f3 	udiv	r1, r5, r3
 8024d86:	fb03 5711 	mls	r7, r3, r1, r5
 8024d8a:	5dc7      	ldrb	r7, [r0, r7]
 8024d8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024d90:	462f      	mov	r7, r5
 8024d92:	42bb      	cmp	r3, r7
 8024d94:	460d      	mov	r5, r1
 8024d96:	d9f4      	bls.n	8024d82 <_printf_i+0x11a>
 8024d98:	2b08      	cmp	r3, #8
 8024d9a:	d10b      	bne.n	8024db4 <_printf_i+0x14c>
 8024d9c:	6823      	ldr	r3, [r4, #0]
 8024d9e:	07df      	lsls	r7, r3, #31
 8024da0:	d508      	bpl.n	8024db4 <_printf_i+0x14c>
 8024da2:	6923      	ldr	r3, [r4, #16]
 8024da4:	6861      	ldr	r1, [r4, #4]
 8024da6:	4299      	cmp	r1, r3
 8024da8:	bfde      	ittt	le
 8024daa:	2330      	movle	r3, #48	; 0x30
 8024dac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024db0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024db4:	1b92      	subs	r2, r2, r6
 8024db6:	6122      	str	r2, [r4, #16]
 8024db8:	f8cd a000 	str.w	sl, [sp]
 8024dbc:	464b      	mov	r3, r9
 8024dbe:	aa03      	add	r2, sp, #12
 8024dc0:	4621      	mov	r1, r4
 8024dc2:	4640      	mov	r0, r8
 8024dc4:	f7ff fee2 	bl	8024b8c <_printf_common>
 8024dc8:	3001      	adds	r0, #1
 8024dca:	d14c      	bne.n	8024e66 <_printf_i+0x1fe>
 8024dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8024dd0:	b004      	add	sp, #16
 8024dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024dd6:	4835      	ldr	r0, [pc, #212]	; (8024eac <_printf_i+0x244>)
 8024dd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8024ddc:	6823      	ldr	r3, [r4, #0]
 8024dde:	680e      	ldr	r6, [r1, #0]
 8024de0:	061f      	lsls	r7, r3, #24
 8024de2:	f856 5b04 	ldr.w	r5, [r6], #4
 8024de6:	600e      	str	r6, [r1, #0]
 8024de8:	d514      	bpl.n	8024e14 <_printf_i+0x1ac>
 8024dea:	07d9      	lsls	r1, r3, #31
 8024dec:	bf44      	itt	mi
 8024dee:	f043 0320 	orrmi.w	r3, r3, #32
 8024df2:	6023      	strmi	r3, [r4, #0]
 8024df4:	b91d      	cbnz	r5, 8024dfe <_printf_i+0x196>
 8024df6:	6823      	ldr	r3, [r4, #0]
 8024df8:	f023 0320 	bic.w	r3, r3, #32
 8024dfc:	6023      	str	r3, [r4, #0]
 8024dfe:	2310      	movs	r3, #16
 8024e00:	e7b0      	b.n	8024d64 <_printf_i+0xfc>
 8024e02:	6823      	ldr	r3, [r4, #0]
 8024e04:	f043 0320 	orr.w	r3, r3, #32
 8024e08:	6023      	str	r3, [r4, #0]
 8024e0a:	2378      	movs	r3, #120	; 0x78
 8024e0c:	4828      	ldr	r0, [pc, #160]	; (8024eb0 <_printf_i+0x248>)
 8024e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024e12:	e7e3      	b.n	8024ddc <_printf_i+0x174>
 8024e14:	065e      	lsls	r6, r3, #25
 8024e16:	bf48      	it	mi
 8024e18:	b2ad      	uxthmi	r5, r5
 8024e1a:	e7e6      	b.n	8024dea <_printf_i+0x182>
 8024e1c:	4616      	mov	r6, r2
 8024e1e:	e7bb      	b.n	8024d98 <_printf_i+0x130>
 8024e20:	680b      	ldr	r3, [r1, #0]
 8024e22:	6826      	ldr	r6, [r4, #0]
 8024e24:	6960      	ldr	r0, [r4, #20]
 8024e26:	1d1d      	adds	r5, r3, #4
 8024e28:	600d      	str	r5, [r1, #0]
 8024e2a:	0635      	lsls	r5, r6, #24
 8024e2c:	681b      	ldr	r3, [r3, #0]
 8024e2e:	d501      	bpl.n	8024e34 <_printf_i+0x1cc>
 8024e30:	6018      	str	r0, [r3, #0]
 8024e32:	e002      	b.n	8024e3a <_printf_i+0x1d2>
 8024e34:	0671      	lsls	r1, r6, #25
 8024e36:	d5fb      	bpl.n	8024e30 <_printf_i+0x1c8>
 8024e38:	8018      	strh	r0, [r3, #0]
 8024e3a:	2300      	movs	r3, #0
 8024e3c:	6123      	str	r3, [r4, #16]
 8024e3e:	4616      	mov	r6, r2
 8024e40:	e7ba      	b.n	8024db8 <_printf_i+0x150>
 8024e42:	680b      	ldr	r3, [r1, #0]
 8024e44:	1d1a      	adds	r2, r3, #4
 8024e46:	600a      	str	r2, [r1, #0]
 8024e48:	681e      	ldr	r6, [r3, #0]
 8024e4a:	6862      	ldr	r2, [r4, #4]
 8024e4c:	2100      	movs	r1, #0
 8024e4e:	4630      	mov	r0, r6
 8024e50:	f7fb f9c6 	bl	80201e0 <memchr>
 8024e54:	b108      	cbz	r0, 8024e5a <_printf_i+0x1f2>
 8024e56:	1b80      	subs	r0, r0, r6
 8024e58:	6060      	str	r0, [r4, #4]
 8024e5a:	6863      	ldr	r3, [r4, #4]
 8024e5c:	6123      	str	r3, [r4, #16]
 8024e5e:	2300      	movs	r3, #0
 8024e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024e64:	e7a8      	b.n	8024db8 <_printf_i+0x150>
 8024e66:	6923      	ldr	r3, [r4, #16]
 8024e68:	4632      	mov	r2, r6
 8024e6a:	4649      	mov	r1, r9
 8024e6c:	4640      	mov	r0, r8
 8024e6e:	47d0      	blx	sl
 8024e70:	3001      	adds	r0, #1
 8024e72:	d0ab      	beq.n	8024dcc <_printf_i+0x164>
 8024e74:	6823      	ldr	r3, [r4, #0]
 8024e76:	079b      	lsls	r3, r3, #30
 8024e78:	d413      	bmi.n	8024ea2 <_printf_i+0x23a>
 8024e7a:	68e0      	ldr	r0, [r4, #12]
 8024e7c:	9b03      	ldr	r3, [sp, #12]
 8024e7e:	4298      	cmp	r0, r3
 8024e80:	bfb8      	it	lt
 8024e82:	4618      	movlt	r0, r3
 8024e84:	e7a4      	b.n	8024dd0 <_printf_i+0x168>
 8024e86:	2301      	movs	r3, #1
 8024e88:	4632      	mov	r2, r6
 8024e8a:	4649      	mov	r1, r9
 8024e8c:	4640      	mov	r0, r8
 8024e8e:	47d0      	blx	sl
 8024e90:	3001      	adds	r0, #1
 8024e92:	d09b      	beq.n	8024dcc <_printf_i+0x164>
 8024e94:	3501      	adds	r5, #1
 8024e96:	68e3      	ldr	r3, [r4, #12]
 8024e98:	9903      	ldr	r1, [sp, #12]
 8024e9a:	1a5b      	subs	r3, r3, r1
 8024e9c:	42ab      	cmp	r3, r5
 8024e9e:	dcf2      	bgt.n	8024e86 <_printf_i+0x21e>
 8024ea0:	e7eb      	b.n	8024e7a <_printf_i+0x212>
 8024ea2:	2500      	movs	r5, #0
 8024ea4:	f104 0619 	add.w	r6, r4, #25
 8024ea8:	e7f5      	b.n	8024e96 <_printf_i+0x22e>
 8024eaa:	bf00      	nop
 8024eac:	08025b0d 	.word	0x08025b0d
 8024eb0:	08025b1e 	.word	0x08025b1e

08024eb4 <_sbrk_r>:
 8024eb4:	b538      	push	{r3, r4, r5, lr}
 8024eb6:	4d06      	ldr	r5, [pc, #24]	; (8024ed0 <_sbrk_r+0x1c>)
 8024eb8:	2300      	movs	r3, #0
 8024eba:	4604      	mov	r4, r0
 8024ebc:	4608      	mov	r0, r1
 8024ebe:	602b      	str	r3, [r5, #0]
 8024ec0:	f7fe fe4c 	bl	8023b5c <_sbrk>
 8024ec4:	1c43      	adds	r3, r0, #1
 8024ec6:	d102      	bne.n	8024ece <_sbrk_r+0x1a>
 8024ec8:	682b      	ldr	r3, [r5, #0]
 8024eca:	b103      	cbz	r3, 8024ece <_sbrk_r+0x1a>
 8024ecc:	6023      	str	r3, [r4, #0]
 8024ece:	bd38      	pop	{r3, r4, r5, pc}
 8024ed0:	20000d70 	.word	0x20000d70

08024ed4 <__sread>:
 8024ed4:	b510      	push	{r4, lr}
 8024ed6:	460c      	mov	r4, r1
 8024ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024edc:	f000 f8e8 	bl	80250b0 <_read_r>
 8024ee0:	2800      	cmp	r0, #0
 8024ee2:	bfab      	itete	ge
 8024ee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8024ee8:	181b      	addge	r3, r3, r0
 8024eea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024eee:	bfac      	ite	ge
 8024ef0:	6563      	strge	r3, [r4, #84]	; 0x54
 8024ef2:	81a3      	strhlt	r3, [r4, #12]
 8024ef4:	bd10      	pop	{r4, pc}

08024ef6 <__swrite>:
 8024ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024efa:	461f      	mov	r7, r3
 8024efc:	898b      	ldrh	r3, [r1, #12]
 8024efe:	05db      	lsls	r3, r3, #23
 8024f00:	4605      	mov	r5, r0
 8024f02:	460c      	mov	r4, r1
 8024f04:	4616      	mov	r6, r2
 8024f06:	d505      	bpl.n	8024f14 <__swrite+0x1e>
 8024f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f0c:	2302      	movs	r3, #2
 8024f0e:	2200      	movs	r2, #0
 8024f10:	f000 f870 	bl	8024ff4 <_lseek_r>
 8024f14:	89a3      	ldrh	r3, [r4, #12]
 8024f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024f1e:	81a3      	strh	r3, [r4, #12]
 8024f20:	4632      	mov	r2, r6
 8024f22:	463b      	mov	r3, r7
 8024f24:	4628      	mov	r0, r5
 8024f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024f2a:	f000 b817 	b.w	8024f5c <_write_r>

08024f2e <__sseek>:
 8024f2e:	b510      	push	{r4, lr}
 8024f30:	460c      	mov	r4, r1
 8024f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f36:	f000 f85d 	bl	8024ff4 <_lseek_r>
 8024f3a:	1c43      	adds	r3, r0, #1
 8024f3c:	89a3      	ldrh	r3, [r4, #12]
 8024f3e:	bf15      	itete	ne
 8024f40:	6560      	strne	r0, [r4, #84]	; 0x54
 8024f42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024f46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024f4a:	81a3      	strheq	r3, [r4, #12]
 8024f4c:	bf18      	it	ne
 8024f4e:	81a3      	strhne	r3, [r4, #12]
 8024f50:	bd10      	pop	{r4, pc}

08024f52 <__sclose>:
 8024f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f56:	f000 b81b 	b.w	8024f90 <_close_r>
	...

08024f5c <_write_r>:
 8024f5c:	b538      	push	{r3, r4, r5, lr}
 8024f5e:	4d07      	ldr	r5, [pc, #28]	; (8024f7c <_write_r+0x20>)
 8024f60:	4604      	mov	r4, r0
 8024f62:	4608      	mov	r0, r1
 8024f64:	4611      	mov	r1, r2
 8024f66:	2200      	movs	r2, #0
 8024f68:	602a      	str	r2, [r5, #0]
 8024f6a:	461a      	mov	r2, r3
 8024f6c:	f7fe fde8 	bl	8023b40 <_write>
 8024f70:	1c43      	adds	r3, r0, #1
 8024f72:	d102      	bne.n	8024f7a <_write_r+0x1e>
 8024f74:	682b      	ldr	r3, [r5, #0]
 8024f76:	b103      	cbz	r3, 8024f7a <_write_r+0x1e>
 8024f78:	6023      	str	r3, [r4, #0]
 8024f7a:	bd38      	pop	{r3, r4, r5, pc}
 8024f7c:	20000d70 	.word	0x20000d70

08024f80 <abort>:
 8024f80:	b508      	push	{r3, lr}
 8024f82:	2006      	movs	r0, #6
 8024f84:	f000 f8ce 	bl	8025124 <raise>
 8024f88:	2001      	movs	r0, #1
 8024f8a:	f7fe fdcc 	bl	8023b26 <_exit>
	...

08024f90 <_close_r>:
 8024f90:	b538      	push	{r3, r4, r5, lr}
 8024f92:	4d06      	ldr	r5, [pc, #24]	; (8024fac <_close_r+0x1c>)
 8024f94:	2300      	movs	r3, #0
 8024f96:	4604      	mov	r4, r0
 8024f98:	4608      	mov	r0, r1
 8024f9a:	602b      	str	r3, [r5, #0]
 8024f9c:	f7fe fdf8 	bl	8023b90 <_close>
 8024fa0:	1c43      	adds	r3, r0, #1
 8024fa2:	d102      	bne.n	8024faa <_close_r+0x1a>
 8024fa4:	682b      	ldr	r3, [r5, #0]
 8024fa6:	b103      	cbz	r3, 8024faa <_close_r+0x1a>
 8024fa8:	6023      	str	r3, [r4, #0]
 8024faa:	bd38      	pop	{r3, r4, r5, pc}
 8024fac:	20000d70 	.word	0x20000d70

08024fb0 <_fstat_r>:
 8024fb0:	b538      	push	{r3, r4, r5, lr}
 8024fb2:	4d07      	ldr	r5, [pc, #28]	; (8024fd0 <_fstat_r+0x20>)
 8024fb4:	2300      	movs	r3, #0
 8024fb6:	4604      	mov	r4, r0
 8024fb8:	4608      	mov	r0, r1
 8024fba:	4611      	mov	r1, r2
 8024fbc:	602b      	str	r3, [r5, #0]
 8024fbe:	f7fe fdea 	bl	8023b96 <_fstat>
 8024fc2:	1c43      	adds	r3, r0, #1
 8024fc4:	d102      	bne.n	8024fcc <_fstat_r+0x1c>
 8024fc6:	682b      	ldr	r3, [r5, #0]
 8024fc8:	b103      	cbz	r3, 8024fcc <_fstat_r+0x1c>
 8024fca:	6023      	str	r3, [r4, #0]
 8024fcc:	bd38      	pop	{r3, r4, r5, pc}
 8024fce:	bf00      	nop
 8024fd0:	20000d70 	.word	0x20000d70

08024fd4 <_isatty_r>:
 8024fd4:	b538      	push	{r3, r4, r5, lr}
 8024fd6:	4d06      	ldr	r5, [pc, #24]	; (8024ff0 <_isatty_r+0x1c>)
 8024fd8:	2300      	movs	r3, #0
 8024fda:	4604      	mov	r4, r0
 8024fdc:	4608      	mov	r0, r1
 8024fde:	602b      	str	r3, [r5, #0]
 8024fe0:	f7fe fdde 	bl	8023ba0 <_isatty>
 8024fe4:	1c43      	adds	r3, r0, #1
 8024fe6:	d102      	bne.n	8024fee <_isatty_r+0x1a>
 8024fe8:	682b      	ldr	r3, [r5, #0]
 8024fea:	b103      	cbz	r3, 8024fee <_isatty_r+0x1a>
 8024fec:	6023      	str	r3, [r4, #0]
 8024fee:	bd38      	pop	{r3, r4, r5, pc}
 8024ff0:	20000d70 	.word	0x20000d70

08024ff4 <_lseek_r>:
 8024ff4:	b538      	push	{r3, r4, r5, lr}
 8024ff6:	4d07      	ldr	r5, [pc, #28]	; (8025014 <_lseek_r+0x20>)
 8024ff8:	4604      	mov	r4, r0
 8024ffa:	4608      	mov	r0, r1
 8024ffc:	4611      	mov	r1, r2
 8024ffe:	2200      	movs	r2, #0
 8025000:	602a      	str	r2, [r5, #0]
 8025002:	461a      	mov	r2, r3
 8025004:	f7fe fdce 	bl	8023ba4 <_lseek>
 8025008:	1c43      	adds	r3, r0, #1
 802500a:	d102      	bne.n	8025012 <_lseek_r+0x1e>
 802500c:	682b      	ldr	r3, [r5, #0]
 802500e:	b103      	cbz	r3, 8025012 <_lseek_r+0x1e>
 8025010:	6023      	str	r3, [r4, #0]
 8025012:	bd38      	pop	{r3, r4, r5, pc}
 8025014:	20000d70 	.word	0x20000d70

08025018 <memmove>:
 8025018:	4288      	cmp	r0, r1
 802501a:	b510      	push	{r4, lr}
 802501c:	eb01 0402 	add.w	r4, r1, r2
 8025020:	d902      	bls.n	8025028 <memmove+0x10>
 8025022:	4284      	cmp	r4, r0
 8025024:	4623      	mov	r3, r4
 8025026:	d807      	bhi.n	8025038 <memmove+0x20>
 8025028:	1e43      	subs	r3, r0, #1
 802502a:	42a1      	cmp	r1, r4
 802502c:	d008      	beq.n	8025040 <memmove+0x28>
 802502e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025036:	e7f8      	b.n	802502a <memmove+0x12>
 8025038:	4402      	add	r2, r0
 802503a:	4601      	mov	r1, r0
 802503c:	428a      	cmp	r2, r1
 802503e:	d100      	bne.n	8025042 <memmove+0x2a>
 8025040:	bd10      	pop	{r4, pc}
 8025042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802504a:	e7f7      	b.n	802503c <memmove+0x24>

0802504c <__malloc_lock>:
 802504c:	4801      	ldr	r0, [pc, #4]	; (8025054 <__malloc_lock+0x8>)
 802504e:	f7ff b9cf 	b.w	80243f0 <__retarget_lock_acquire_recursive>
 8025052:	bf00      	nop
 8025054:	20000d68 	.word	0x20000d68

08025058 <__malloc_unlock>:
 8025058:	4801      	ldr	r0, [pc, #4]	; (8025060 <__malloc_unlock+0x8>)
 802505a:	f7ff b9ca 	b.w	80243f2 <__retarget_lock_release_recursive>
 802505e:	bf00      	nop
 8025060:	20000d68 	.word	0x20000d68

08025064 <_realloc_r>:
 8025064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025066:	4607      	mov	r7, r0
 8025068:	4614      	mov	r4, r2
 802506a:	460e      	mov	r6, r1
 802506c:	b921      	cbnz	r1, 8025078 <_realloc_r+0x14>
 802506e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8025072:	4611      	mov	r1, r2
 8025074:	f7ff ba7a 	b.w	802456c <_malloc_r>
 8025078:	b922      	cbnz	r2, 8025084 <_realloc_r+0x20>
 802507a:	f7ff fa27 	bl	80244cc <_free_r>
 802507e:	4625      	mov	r5, r4
 8025080:	4628      	mov	r0, r5
 8025082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025084:	f000 f86a 	bl	802515c <_malloc_usable_size_r>
 8025088:	42a0      	cmp	r0, r4
 802508a:	d20f      	bcs.n	80250ac <_realloc_r+0x48>
 802508c:	4621      	mov	r1, r4
 802508e:	4638      	mov	r0, r7
 8025090:	f7ff fa6c 	bl	802456c <_malloc_r>
 8025094:	4605      	mov	r5, r0
 8025096:	2800      	cmp	r0, #0
 8025098:	d0f2      	beq.n	8025080 <_realloc_r+0x1c>
 802509a:	4631      	mov	r1, r6
 802509c:	4622      	mov	r2, r4
 802509e:	f7fe fdad 	bl	8023bfc <memcpy>
 80250a2:	4631      	mov	r1, r6
 80250a4:	4638      	mov	r0, r7
 80250a6:	f7ff fa11 	bl	80244cc <_free_r>
 80250aa:	e7e9      	b.n	8025080 <_realloc_r+0x1c>
 80250ac:	4635      	mov	r5, r6
 80250ae:	e7e7      	b.n	8025080 <_realloc_r+0x1c>

080250b0 <_read_r>:
 80250b0:	b538      	push	{r3, r4, r5, lr}
 80250b2:	4d07      	ldr	r5, [pc, #28]	; (80250d0 <_read_r+0x20>)
 80250b4:	4604      	mov	r4, r0
 80250b6:	4608      	mov	r0, r1
 80250b8:	4611      	mov	r1, r2
 80250ba:	2200      	movs	r2, #0
 80250bc:	602a      	str	r2, [r5, #0]
 80250be:	461a      	mov	r2, r3
 80250c0:	f7fe fd37 	bl	8023b32 <_read>
 80250c4:	1c43      	adds	r3, r0, #1
 80250c6:	d102      	bne.n	80250ce <_read_r+0x1e>
 80250c8:	682b      	ldr	r3, [r5, #0]
 80250ca:	b103      	cbz	r3, 80250ce <_read_r+0x1e>
 80250cc:	6023      	str	r3, [r4, #0]
 80250ce:	bd38      	pop	{r3, r4, r5, pc}
 80250d0:	20000d70 	.word	0x20000d70

080250d4 <_raise_r>:
 80250d4:	291f      	cmp	r1, #31
 80250d6:	b538      	push	{r3, r4, r5, lr}
 80250d8:	4604      	mov	r4, r0
 80250da:	460d      	mov	r5, r1
 80250dc:	d904      	bls.n	80250e8 <_raise_r+0x14>
 80250de:	2316      	movs	r3, #22
 80250e0:	6003      	str	r3, [r0, #0]
 80250e2:	f04f 30ff 	mov.w	r0, #4294967295
 80250e6:	bd38      	pop	{r3, r4, r5, pc}
 80250e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80250ea:	b112      	cbz	r2, 80250f2 <_raise_r+0x1e>
 80250ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80250f0:	b94b      	cbnz	r3, 8025106 <_raise_r+0x32>
 80250f2:	4620      	mov	r0, r4
 80250f4:	f000 f830 	bl	8025158 <_getpid_r>
 80250f8:	462a      	mov	r2, r5
 80250fa:	4601      	mov	r1, r0
 80250fc:	4620      	mov	r0, r4
 80250fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025102:	f000 b817 	b.w	8025134 <_kill_r>
 8025106:	2b01      	cmp	r3, #1
 8025108:	d00a      	beq.n	8025120 <_raise_r+0x4c>
 802510a:	1c59      	adds	r1, r3, #1
 802510c:	d103      	bne.n	8025116 <_raise_r+0x42>
 802510e:	2316      	movs	r3, #22
 8025110:	6003      	str	r3, [r0, #0]
 8025112:	2001      	movs	r0, #1
 8025114:	e7e7      	b.n	80250e6 <_raise_r+0x12>
 8025116:	2400      	movs	r4, #0
 8025118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802511c:	4628      	mov	r0, r5
 802511e:	4798      	blx	r3
 8025120:	2000      	movs	r0, #0
 8025122:	e7e0      	b.n	80250e6 <_raise_r+0x12>

08025124 <raise>:
 8025124:	4b02      	ldr	r3, [pc, #8]	; (8025130 <raise+0xc>)
 8025126:	4601      	mov	r1, r0
 8025128:	6818      	ldr	r0, [r3, #0]
 802512a:	f7ff bfd3 	b.w	80250d4 <_raise_r>
 802512e:	bf00      	nop
 8025130:	20000024 	.word	0x20000024

08025134 <_kill_r>:
 8025134:	b538      	push	{r3, r4, r5, lr}
 8025136:	4d07      	ldr	r5, [pc, #28]	; (8025154 <_kill_r+0x20>)
 8025138:	2300      	movs	r3, #0
 802513a:	4604      	mov	r4, r0
 802513c:	4608      	mov	r0, r1
 802513e:	4611      	mov	r1, r2
 8025140:	602b      	str	r3, [r5, #0]
 8025142:	f7fe fce8 	bl	8023b16 <_kill>
 8025146:	1c43      	adds	r3, r0, #1
 8025148:	d102      	bne.n	8025150 <_kill_r+0x1c>
 802514a:	682b      	ldr	r3, [r5, #0]
 802514c:	b103      	cbz	r3, 8025150 <_kill_r+0x1c>
 802514e:	6023      	str	r3, [r4, #0]
 8025150:	bd38      	pop	{r3, r4, r5, pc}
 8025152:	bf00      	nop
 8025154:	20000d70 	.word	0x20000d70

08025158 <_getpid_r>:
 8025158:	f7fe bcdb 	b.w	8023b12 <_getpid>

0802515c <_malloc_usable_size_r>:
 802515c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025160:	1f18      	subs	r0, r3, #4
 8025162:	2b00      	cmp	r3, #0
 8025164:	bfbc      	itt	lt
 8025166:	580b      	ldrlt	r3, [r1, r0]
 8025168:	18c0      	addlt	r0, r0, r3
 802516a:	4770      	bx	lr

0802516c <_init>:
 802516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802516e:	bf00      	nop
 8025170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025172:	bc08      	pop	{r3}
 8025174:	469e      	mov	lr, r3
 8025176:	4770      	bx	lr

08025178 <_fini>:
 8025178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802517a:	bf00      	nop
 802517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802517e:	bc08      	pop	{r3}
 8025180:	469e      	mov	lr, r3
 8025182:	4770      	bx	lr
 8025184:	0000      	movs	r0, r0
	...
