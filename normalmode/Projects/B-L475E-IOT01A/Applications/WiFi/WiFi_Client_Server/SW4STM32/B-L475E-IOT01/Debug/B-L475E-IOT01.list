
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006998  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  08026b28  08026b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080274f8  080274f8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080274f8  080274f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027500  08027500  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08027500  08027500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08027508  08027508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08027510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b7c  20000088  08027598  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00017004  20000c04  08027598  00020c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029dfb  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d1f  00000000  00000000  00049eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001248e  00000000  00000000  0004ebd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00061060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d10  00000000  00000000  000623c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bae9  00000000  00000000  000640d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd17  00000000  00000000  0008fbc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010843d  00000000  00000000  000af8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b7d15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046a8  00000000  00000000  001b7d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000088 	.word	0x20000088
 80201ac:	00000000 	.word	0x00000000
 80201b0:	08026b10 	.word	0x08026b10

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	2000008c 	.word	0x2000008c
 80201cc:	08026b10 	.word	0x08026b10

080201d0 <strlen>:
 80201d0:	4603      	mov	r3, r0
 80201d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201d6:	2a00      	cmp	r2, #0
 80201d8:	d1fb      	bne.n	80201d2 <strlen+0x2>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	3801      	subs	r0, #1
 80201de:	4770      	bx	lr

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_dmul>:
 8020280:	b570      	push	{r4, r5, r6, lr}
 8020282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 802028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802028e:	bf1d      	ittte	ne
 8020290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020294:	ea94 0f0c 	teqne	r4, ip
 8020298:	ea95 0f0c 	teqne	r5, ip
 802029c:	f000 f8de 	bleq	802045c <__aeabi_dmul+0x1dc>
 80202a0:	442c      	add	r4, r5
 80202a2:	ea81 0603 	eor.w	r6, r1, r3
 80202a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80202aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80202ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80202b2:	bf18      	it	ne
 80202b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80202b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80202bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80202c0:	d038      	beq.n	8020334 <__aeabi_dmul+0xb4>
 80202c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80202c6:	f04f 0500 	mov.w	r5, #0
 80202ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80202ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80202d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80202d6:	f04f 0600 	mov.w	r6, #0
 80202da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80202de:	f09c 0f00 	teq	ip, #0
 80202e2:	bf18      	it	ne
 80202e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80202e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80202ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80202f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80202f4:	d204      	bcs.n	8020300 <__aeabi_dmul+0x80>
 80202f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80202fa:	416d      	adcs	r5, r5
 80202fc:	eb46 0606 	adc.w	r6, r6, r6
 8020300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8020304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 802030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8020314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020318:	bf88      	it	hi
 802031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 802031e:	d81e      	bhi.n	802035e <__aeabi_dmul+0xde>
 8020320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8020324:	bf08      	it	eq
 8020326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 802032a:	f150 0000 	adcs.w	r0, r0, #0
 802032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8020332:	bd70      	pop	{r4, r5, r6, pc}
 8020334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020338:	ea46 0101 	orr.w	r1, r6, r1
 802033c:	ea40 0002 	orr.w	r0, r0, r2
 8020340:	ea81 0103 	eor.w	r1, r1, r3
 8020344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020348:	bfc2      	ittt	gt
 802034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 802034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020352:	bd70      	popgt	{r4, r5, r6, pc}
 8020354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020358:	f04f 0e00 	mov.w	lr, #0
 802035c:	3c01      	subs	r4, #1
 802035e:	f300 80ab 	bgt.w	80204b8 <__aeabi_dmul+0x238>
 8020362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8020366:	bfde      	ittt	le
 8020368:	2000      	movle	r0, #0
 802036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 802036e:	bd70      	pople	{r4, r5, r6, pc}
 8020370:	f1c4 0400 	rsb	r4, r4, #0
 8020374:	3c20      	subs	r4, #32
 8020376:	da35      	bge.n	80203e4 <__aeabi_dmul+0x164>
 8020378:	340c      	adds	r4, #12
 802037a:	dc1b      	bgt.n	80203b4 <__aeabi_dmul+0x134>
 802037c:	f104 0414 	add.w	r4, r4, #20
 8020380:	f1c4 0520 	rsb	r5, r4, #32
 8020384:	fa00 f305 	lsl.w	r3, r0, r5
 8020388:	fa20 f004 	lsr.w	r0, r0, r4
 802038c:	fa01 f205 	lsl.w	r2, r1, r5
 8020390:	ea40 0002 	orr.w	r0, r0, r2
 8020394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80203a0:	fa21 f604 	lsr.w	r6, r1, r4
 80203a4:	eb42 0106 	adc.w	r1, r2, r6
 80203a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80203ac:	bf08      	it	eq
 80203ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80203b2:	bd70      	pop	{r4, r5, r6, pc}
 80203b4:	f1c4 040c 	rsb	r4, r4, #12
 80203b8:	f1c4 0520 	rsb	r5, r4, #32
 80203bc:	fa00 f304 	lsl.w	r3, r0, r4
 80203c0:	fa20 f005 	lsr.w	r0, r0, r5
 80203c4:	fa01 f204 	lsl.w	r2, r1, r4
 80203c8:	ea40 0002 	orr.w	r0, r0, r2
 80203cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80203d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80203d4:	f141 0100 	adc.w	r1, r1, #0
 80203d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80203dc:	bf08      	it	eq
 80203de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80203e2:	bd70      	pop	{r4, r5, r6, pc}
 80203e4:	f1c4 0520 	rsb	r5, r4, #32
 80203e8:	fa00 f205 	lsl.w	r2, r0, r5
 80203ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80203f0:	fa20 f304 	lsr.w	r3, r0, r4
 80203f4:	fa01 f205 	lsl.w	r2, r1, r5
 80203f8:	ea43 0302 	orr.w	r3, r3, r2
 80203fc:	fa21 f004 	lsr.w	r0, r1, r4
 8020400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020404:	fa21 f204 	lsr.w	r2, r1, r4
 8020408:	ea20 0002 	bic.w	r0, r0, r2
 802040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020414:	bf08      	it	eq
 8020416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802041a:	bd70      	pop	{r4, r5, r6, pc}
 802041c:	f094 0f00 	teq	r4, #0
 8020420:	d10f      	bne.n	8020442 <__aeabi_dmul+0x1c2>
 8020422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8020426:	0040      	lsls	r0, r0, #1
 8020428:	eb41 0101 	adc.w	r1, r1, r1
 802042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020430:	bf08      	it	eq
 8020432:	3c01      	subeq	r4, #1
 8020434:	d0f7      	beq.n	8020426 <__aeabi_dmul+0x1a6>
 8020436:	ea41 0106 	orr.w	r1, r1, r6
 802043a:	f095 0f00 	teq	r5, #0
 802043e:	bf18      	it	ne
 8020440:	4770      	bxne	lr
 8020442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8020446:	0052      	lsls	r2, r2, #1
 8020448:	eb43 0303 	adc.w	r3, r3, r3
 802044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020450:	bf08      	it	eq
 8020452:	3d01      	subeq	r5, #1
 8020454:	d0f7      	beq.n	8020446 <__aeabi_dmul+0x1c6>
 8020456:	ea43 0306 	orr.w	r3, r3, r6
 802045a:	4770      	bx	lr
 802045c:	ea94 0f0c 	teq	r4, ip
 8020460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8020464:	bf18      	it	ne
 8020466:	ea95 0f0c 	teqne	r5, ip
 802046a:	d00c      	beq.n	8020486 <__aeabi_dmul+0x206>
 802046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020470:	bf18      	it	ne
 8020472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020476:	d1d1      	bne.n	802041c <__aeabi_dmul+0x19c>
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020480:	f04f 0000 	mov.w	r0, #0
 8020484:	bd70      	pop	{r4, r5, r6, pc}
 8020486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 802048a:	bf06      	itte	eq
 802048c:	4610      	moveq	r0, r2
 802048e:	4619      	moveq	r1, r3
 8020490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020494:	d019      	beq.n	80204ca <__aeabi_dmul+0x24a>
 8020496:	ea94 0f0c 	teq	r4, ip
 802049a:	d102      	bne.n	80204a2 <__aeabi_dmul+0x222>
 802049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80204a0:	d113      	bne.n	80204ca <__aeabi_dmul+0x24a>
 80204a2:	ea95 0f0c 	teq	r5, ip
 80204a6:	d105      	bne.n	80204b4 <__aeabi_dmul+0x234>
 80204a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80204ac:	bf1c      	itt	ne
 80204ae:	4610      	movne	r0, r2
 80204b0:	4619      	movne	r1, r3
 80204b2:	d10a      	bne.n	80204ca <__aeabi_dmul+0x24a>
 80204b4:	ea81 0103 	eor.w	r1, r1, r3
 80204b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80204bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80204c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80204c4:	f04f 0000 	mov.w	r0, #0
 80204c8:	bd70      	pop	{r4, r5, r6, pc}
 80204ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80204ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80204d2:	bd70      	pop	{r4, r5, r6, pc}

080204d4 <__aeabi_drsub>:
 80204d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80204d8:	e002      	b.n	80204e0 <__adddf3>
 80204da:	bf00      	nop

080204dc <__aeabi_dsub>:
 80204dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080204e0 <__adddf3>:
 80204e0:	b530      	push	{r4, r5, lr}
 80204e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80204e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80204ea:	ea94 0f05 	teq	r4, r5
 80204ee:	bf08      	it	eq
 80204f0:	ea90 0f02 	teqeq	r0, r2
 80204f4:	bf1f      	itttt	ne
 80204f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80204fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80204fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8020502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020506:	f000 80e2 	beq.w	80206ce <__adddf3+0x1ee>
 802050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8020512:	bfb8      	it	lt
 8020514:	426d      	neglt	r5, r5
 8020516:	dd0c      	ble.n	8020532 <__adddf3+0x52>
 8020518:	442c      	add	r4, r5
 802051a:	ea80 0202 	eor.w	r2, r0, r2
 802051e:	ea81 0303 	eor.w	r3, r1, r3
 8020522:	ea82 0000 	eor.w	r0, r2, r0
 8020526:	ea83 0101 	eor.w	r1, r3, r1
 802052a:	ea80 0202 	eor.w	r2, r0, r2
 802052e:	ea81 0303 	eor.w	r3, r1, r3
 8020532:	2d36      	cmp	r5, #54	; 0x36
 8020534:	bf88      	it	hi
 8020536:	bd30      	pophi	{r4, r5, pc}
 8020538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 802053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8020540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020548:	d002      	beq.n	8020550 <__adddf3+0x70>
 802054a:	4240      	negs	r0, r0
 802054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 802055c:	d002      	beq.n	8020564 <__adddf3+0x84>
 802055e:	4252      	negs	r2, r2
 8020560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020564:	ea94 0f05 	teq	r4, r5
 8020568:	f000 80a7 	beq.w	80206ba <__adddf3+0x1da>
 802056c:	f1a4 0401 	sub.w	r4, r4, #1
 8020570:	f1d5 0e20 	rsbs	lr, r5, #32
 8020574:	db0d      	blt.n	8020592 <__adddf3+0xb2>
 8020576:	fa02 fc0e 	lsl.w	ip, r2, lr
 802057a:	fa22 f205 	lsr.w	r2, r2, r5
 802057e:	1880      	adds	r0, r0, r2
 8020580:	f141 0100 	adc.w	r1, r1, #0
 8020584:	fa03 f20e 	lsl.w	r2, r3, lr
 8020588:	1880      	adds	r0, r0, r2
 802058a:	fa43 f305 	asr.w	r3, r3, r5
 802058e:	4159      	adcs	r1, r3
 8020590:	e00e      	b.n	80205b0 <__adddf3+0xd0>
 8020592:	f1a5 0520 	sub.w	r5, r5, #32
 8020596:	f10e 0e20 	add.w	lr, lr, #32
 802059a:	2a01      	cmp	r2, #1
 802059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80205a0:	bf28      	it	cs
 80205a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80205a6:	fa43 f305 	asr.w	r3, r3, r5
 80205aa:	18c0      	adds	r0, r0, r3
 80205ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80205b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80205b4:	d507      	bpl.n	80205c6 <__adddf3+0xe6>
 80205b6:	f04f 0e00 	mov.w	lr, #0
 80205ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80205be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80205c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80205c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80205ca:	d31b      	bcc.n	8020604 <__adddf3+0x124>
 80205cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80205d0:	d30c      	bcc.n	80205ec <__adddf3+0x10c>
 80205d2:	0849      	lsrs	r1, r1, #1
 80205d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80205d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80205dc:	f104 0401 	add.w	r4, r4, #1
 80205e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80205e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80205e8:	f080 809a 	bcs.w	8020720 <__adddf3+0x240>
 80205ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80205f0:	bf08      	it	eq
 80205f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80205f6:	f150 0000 	adcs.w	r0, r0, #0
 80205fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80205fe:	ea41 0105 	orr.w	r1, r1, r5
 8020602:	bd30      	pop	{r4, r5, pc}
 8020604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020608:	4140      	adcs	r0, r0
 802060a:	eb41 0101 	adc.w	r1, r1, r1
 802060e:	3c01      	subs	r4, #1
 8020610:	bf28      	it	cs
 8020612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8020616:	d2e9      	bcs.n	80205ec <__adddf3+0x10c>
 8020618:	f091 0f00 	teq	r1, #0
 802061c:	bf04      	itt	eq
 802061e:	4601      	moveq	r1, r0
 8020620:	2000      	moveq	r0, #0
 8020622:	fab1 f381 	clz	r3, r1
 8020626:	bf08      	it	eq
 8020628:	3320      	addeq	r3, #32
 802062a:	f1a3 030b 	sub.w	r3, r3, #11
 802062e:	f1b3 0220 	subs.w	r2, r3, #32
 8020632:	da0c      	bge.n	802064e <__adddf3+0x16e>
 8020634:	320c      	adds	r2, #12
 8020636:	dd08      	ble.n	802064a <__adddf3+0x16a>
 8020638:	f102 0c14 	add.w	ip, r2, #20
 802063c:	f1c2 020c 	rsb	r2, r2, #12
 8020640:	fa01 f00c 	lsl.w	r0, r1, ip
 8020644:	fa21 f102 	lsr.w	r1, r1, r2
 8020648:	e00c      	b.n	8020664 <__adddf3+0x184>
 802064a:	f102 0214 	add.w	r2, r2, #20
 802064e:	bfd8      	it	le
 8020650:	f1c2 0c20 	rsble	ip, r2, #32
 8020654:	fa01 f102 	lsl.w	r1, r1, r2
 8020658:	fa20 fc0c 	lsr.w	ip, r0, ip
 802065c:	bfdc      	itt	le
 802065e:	ea41 010c 	orrle.w	r1, r1, ip
 8020662:	4090      	lslle	r0, r2
 8020664:	1ae4      	subs	r4, r4, r3
 8020666:	bfa2      	ittt	ge
 8020668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 802066c:	4329      	orrge	r1, r5
 802066e:	bd30      	popge	{r4, r5, pc}
 8020670:	ea6f 0404 	mvn.w	r4, r4
 8020674:	3c1f      	subs	r4, #31
 8020676:	da1c      	bge.n	80206b2 <__adddf3+0x1d2>
 8020678:	340c      	adds	r4, #12
 802067a:	dc0e      	bgt.n	802069a <__adddf3+0x1ba>
 802067c:	f104 0414 	add.w	r4, r4, #20
 8020680:	f1c4 0220 	rsb	r2, r4, #32
 8020684:	fa20 f004 	lsr.w	r0, r0, r4
 8020688:	fa01 f302 	lsl.w	r3, r1, r2
 802068c:	ea40 0003 	orr.w	r0, r0, r3
 8020690:	fa21 f304 	lsr.w	r3, r1, r4
 8020694:	ea45 0103 	orr.w	r1, r5, r3
 8020698:	bd30      	pop	{r4, r5, pc}
 802069a:	f1c4 040c 	rsb	r4, r4, #12
 802069e:	f1c4 0220 	rsb	r2, r4, #32
 80206a2:	fa20 f002 	lsr.w	r0, r0, r2
 80206a6:	fa01 f304 	lsl.w	r3, r1, r4
 80206aa:	ea40 0003 	orr.w	r0, r0, r3
 80206ae:	4629      	mov	r1, r5
 80206b0:	bd30      	pop	{r4, r5, pc}
 80206b2:	fa21 f004 	lsr.w	r0, r1, r4
 80206b6:	4629      	mov	r1, r5
 80206b8:	bd30      	pop	{r4, r5, pc}
 80206ba:	f094 0f00 	teq	r4, #0
 80206be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80206c2:	bf06      	itte	eq
 80206c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80206c8:	3401      	addeq	r4, #1
 80206ca:	3d01      	subne	r5, #1
 80206cc:	e74e      	b.n	802056c <__adddf3+0x8c>
 80206ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80206d2:	bf18      	it	ne
 80206d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80206d8:	d029      	beq.n	802072e <__adddf3+0x24e>
 80206da:	ea94 0f05 	teq	r4, r5
 80206de:	bf08      	it	eq
 80206e0:	ea90 0f02 	teqeq	r0, r2
 80206e4:	d005      	beq.n	80206f2 <__adddf3+0x212>
 80206e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80206ea:	bf04      	itt	eq
 80206ec:	4619      	moveq	r1, r3
 80206ee:	4610      	moveq	r0, r2
 80206f0:	bd30      	pop	{r4, r5, pc}
 80206f2:	ea91 0f03 	teq	r1, r3
 80206f6:	bf1e      	ittt	ne
 80206f8:	2100      	movne	r1, #0
 80206fa:	2000      	movne	r0, #0
 80206fc:	bd30      	popne	{r4, r5, pc}
 80206fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8020702:	d105      	bne.n	8020710 <__adddf3+0x230>
 8020704:	0040      	lsls	r0, r0, #1
 8020706:	4149      	adcs	r1, r1
 8020708:	bf28      	it	cs
 802070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802070e:	bd30      	pop	{r4, r5, pc}
 8020710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020714:	bf3c      	itt	cc
 8020716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 802071a:	bd30      	popcc	{r4, r5, pc}
 802071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020728:	f04f 0000 	mov.w	r0, #0
 802072c:	bd30      	pop	{r4, r5, pc}
 802072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8020732:	bf1a      	itte	ne
 8020734:	4619      	movne	r1, r3
 8020736:	4610      	movne	r0, r2
 8020738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 802073c:	bf1c      	itt	ne
 802073e:	460b      	movne	r3, r1
 8020740:	4602      	movne	r2, r0
 8020742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020746:	bf06      	itte	eq
 8020748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 802074c:	ea91 0f03 	teqeq	r1, r3
 8020750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020754:	bd30      	pop	{r4, r5, pc}
 8020756:	bf00      	nop

08020758 <__aeabi_ui2d>:
 8020758:	f090 0f00 	teq	r0, #0
 802075c:	bf04      	itt	eq
 802075e:	2100      	moveq	r1, #0
 8020760:	4770      	bxeq	lr
 8020762:	b530      	push	{r4, r5, lr}
 8020764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802076c:	f04f 0500 	mov.w	r5, #0
 8020770:	f04f 0100 	mov.w	r1, #0
 8020774:	e750      	b.n	8020618 <__adddf3+0x138>
 8020776:	bf00      	nop

08020778 <__aeabi_i2d>:
 8020778:	f090 0f00 	teq	r0, #0
 802077c:	bf04      	itt	eq
 802077e:	2100      	moveq	r1, #0
 8020780:	4770      	bxeq	lr
 8020782:	b530      	push	{r4, r5, lr}
 8020784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8020790:	bf48      	it	mi
 8020792:	4240      	negmi	r0, r0
 8020794:	f04f 0100 	mov.w	r1, #0
 8020798:	e73e      	b.n	8020618 <__adddf3+0x138>
 802079a:	bf00      	nop

0802079c <__aeabi_f2d>:
 802079c:	0042      	lsls	r2, r0, #1
 802079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80207a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80207a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80207aa:	bf1f      	itttt	ne
 80207ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80207b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80207b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80207b8:	4770      	bxne	lr
 80207ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80207be:	bf08      	it	eq
 80207c0:	4770      	bxeq	lr
 80207c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80207c6:	bf04      	itt	eq
 80207c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80207cc:	4770      	bxeq	lr
 80207ce:	b530      	push	{r4, r5, lr}
 80207d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80207d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80207d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80207dc:	e71c      	b.n	8020618 <__adddf3+0x138>
 80207de:	bf00      	nop

080207e0 <__aeabi_ul2d>:
 80207e0:	ea50 0201 	orrs.w	r2, r0, r1
 80207e4:	bf08      	it	eq
 80207e6:	4770      	bxeq	lr
 80207e8:	b530      	push	{r4, r5, lr}
 80207ea:	f04f 0500 	mov.w	r5, #0
 80207ee:	e00a      	b.n	8020806 <__aeabi_l2d+0x16>

080207f0 <__aeabi_l2d>:
 80207f0:	ea50 0201 	orrs.w	r2, r0, r1
 80207f4:	bf08      	it	eq
 80207f6:	4770      	bxeq	lr
 80207f8:	b530      	push	{r4, r5, lr}
 80207fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80207fe:	d502      	bpl.n	8020806 <__aeabi_l2d+0x16>
 8020800:	4240      	negs	r0, r0
 8020802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 802080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8020812:	f43f aed8 	beq.w	80205c6 <__adddf3+0xe6>
 8020816:	f04f 0203 	mov.w	r2, #3
 802081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802081e:	bf18      	it	ne
 8020820:	3203      	addne	r2, #3
 8020822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020826:	bf18      	it	ne
 8020828:	3203      	addne	r2, #3
 802082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802082e:	f1c2 0320 	rsb	r3, r2, #32
 8020832:	fa00 fc03 	lsl.w	ip, r0, r3
 8020836:	fa20 f002 	lsr.w	r0, r0, r2
 802083a:	fa01 fe03 	lsl.w	lr, r1, r3
 802083e:	ea40 000e 	orr.w	r0, r0, lr
 8020842:	fa21 f102 	lsr.w	r1, r1, r2
 8020846:	4414      	add	r4, r2
 8020848:	e6bd      	b.n	80205c6 <__adddf3+0xe6>
 802084a:	bf00      	nop

0802084c <__aeabi_d2iz>:
 802084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020854:	d215      	bcs.n	8020882 <__aeabi_d2iz+0x36>
 8020856:	d511      	bpl.n	802087c <__aeabi_d2iz+0x30>
 8020858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 802085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020860:	d912      	bls.n	8020888 <__aeabi_d2iz+0x3c>
 8020862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 802086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020872:	fa23 f002 	lsr.w	r0, r3, r2
 8020876:	bf18      	it	ne
 8020878:	4240      	negne	r0, r0
 802087a:	4770      	bx	lr
 802087c:	f04f 0000 	mov.w	r0, #0
 8020880:	4770      	bx	lr
 8020882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020886:	d105      	bne.n	8020894 <__aeabi_d2iz+0x48>
 8020888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 802088c:	bf08      	it	eq
 802088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020892:	4770      	bx	lr
 8020894:	f04f 0000 	mov.w	r0, #0
 8020898:	4770      	bx	lr
 802089a:	bf00      	nop

0802089c <__aeabi_uldivmod>:
 802089c:	b953      	cbnz	r3, 80208b4 <__aeabi_uldivmod+0x18>
 802089e:	b94a      	cbnz	r2, 80208b4 <__aeabi_uldivmod+0x18>
 80208a0:	2900      	cmp	r1, #0
 80208a2:	bf08      	it	eq
 80208a4:	2800      	cmpeq	r0, #0
 80208a6:	bf1c      	itt	ne
 80208a8:	f04f 31ff 	movne.w	r1, #4294967295
 80208ac:	f04f 30ff 	movne.w	r0, #4294967295
 80208b0:	f000 b96e 	b.w	8020b90 <__aeabi_idiv0>
 80208b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80208b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80208bc:	f000 f806 	bl	80208cc <__udivmoddi4>
 80208c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80208c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80208c8:	b004      	add	sp, #16
 80208ca:	4770      	bx	lr

080208cc <__udivmoddi4>:
 80208cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80208d0:	9d08      	ldr	r5, [sp, #32]
 80208d2:	4604      	mov	r4, r0
 80208d4:	468c      	mov	ip, r1
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	f040 8083 	bne.w	80209e2 <__udivmoddi4+0x116>
 80208dc:	428a      	cmp	r2, r1
 80208de:	4617      	mov	r7, r2
 80208e0:	d947      	bls.n	8020972 <__udivmoddi4+0xa6>
 80208e2:	fab2 f282 	clz	r2, r2
 80208e6:	b142      	cbz	r2, 80208fa <__udivmoddi4+0x2e>
 80208e8:	f1c2 0020 	rsb	r0, r2, #32
 80208ec:	fa24 f000 	lsr.w	r0, r4, r0
 80208f0:	4091      	lsls	r1, r2
 80208f2:	4097      	lsls	r7, r2
 80208f4:	ea40 0c01 	orr.w	ip, r0, r1
 80208f8:	4094      	lsls	r4, r2
 80208fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80208fe:	0c23      	lsrs	r3, r4, #16
 8020900:	fbbc f6f8 	udiv	r6, ip, r8
 8020904:	fa1f fe87 	uxth.w	lr, r7
 8020908:	fb08 c116 	mls	r1, r8, r6, ip
 802090c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020910:	fb06 f10e 	mul.w	r1, r6, lr
 8020914:	4299      	cmp	r1, r3
 8020916:	d909      	bls.n	802092c <__udivmoddi4+0x60>
 8020918:	18fb      	adds	r3, r7, r3
 802091a:	f106 30ff 	add.w	r0, r6, #4294967295
 802091e:	f080 8119 	bcs.w	8020b54 <__udivmoddi4+0x288>
 8020922:	4299      	cmp	r1, r3
 8020924:	f240 8116 	bls.w	8020b54 <__udivmoddi4+0x288>
 8020928:	3e02      	subs	r6, #2
 802092a:	443b      	add	r3, r7
 802092c:	1a5b      	subs	r3, r3, r1
 802092e:	b2a4      	uxth	r4, r4
 8020930:	fbb3 f0f8 	udiv	r0, r3, r8
 8020934:	fb08 3310 	mls	r3, r8, r0, r3
 8020938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 802093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8020940:	45a6      	cmp	lr, r4
 8020942:	d909      	bls.n	8020958 <__udivmoddi4+0x8c>
 8020944:	193c      	adds	r4, r7, r4
 8020946:	f100 33ff 	add.w	r3, r0, #4294967295
 802094a:	f080 8105 	bcs.w	8020b58 <__udivmoddi4+0x28c>
 802094e:	45a6      	cmp	lr, r4
 8020950:	f240 8102 	bls.w	8020b58 <__udivmoddi4+0x28c>
 8020954:	3802      	subs	r0, #2
 8020956:	443c      	add	r4, r7
 8020958:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802095c:	eba4 040e 	sub.w	r4, r4, lr
 8020960:	2600      	movs	r6, #0
 8020962:	b11d      	cbz	r5, 802096c <__udivmoddi4+0xa0>
 8020964:	40d4      	lsrs	r4, r2
 8020966:	2300      	movs	r3, #0
 8020968:	e9c5 4300 	strd	r4, r3, [r5]
 802096c:	4631      	mov	r1, r6
 802096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020972:	b902      	cbnz	r2, 8020976 <__udivmoddi4+0xaa>
 8020974:	deff      	udf	#255	; 0xff
 8020976:	fab2 f282 	clz	r2, r2
 802097a:	2a00      	cmp	r2, #0
 802097c:	d150      	bne.n	8020a20 <__udivmoddi4+0x154>
 802097e:	1bcb      	subs	r3, r1, r7
 8020980:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020984:	fa1f f887 	uxth.w	r8, r7
 8020988:	2601      	movs	r6, #1
 802098a:	fbb3 fcfe 	udiv	ip, r3, lr
 802098e:	0c21      	lsrs	r1, r4, #16
 8020990:	fb0e 331c 	mls	r3, lr, ip, r3
 8020994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020998:	fb08 f30c 	mul.w	r3, r8, ip
 802099c:	428b      	cmp	r3, r1
 802099e:	d907      	bls.n	80209b0 <__udivmoddi4+0xe4>
 80209a0:	1879      	adds	r1, r7, r1
 80209a2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80209a6:	d202      	bcs.n	80209ae <__udivmoddi4+0xe2>
 80209a8:	428b      	cmp	r3, r1
 80209aa:	f200 80e9 	bhi.w	8020b80 <__udivmoddi4+0x2b4>
 80209ae:	4684      	mov	ip, r0
 80209b0:	1ac9      	subs	r1, r1, r3
 80209b2:	b2a3      	uxth	r3, r4
 80209b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80209b8:	fb0e 1110 	mls	r1, lr, r0, r1
 80209bc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80209c0:	fb08 f800 	mul.w	r8, r8, r0
 80209c4:	45a0      	cmp	r8, r4
 80209c6:	d907      	bls.n	80209d8 <__udivmoddi4+0x10c>
 80209c8:	193c      	adds	r4, r7, r4
 80209ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80209ce:	d202      	bcs.n	80209d6 <__udivmoddi4+0x10a>
 80209d0:	45a0      	cmp	r8, r4
 80209d2:	f200 80d9 	bhi.w	8020b88 <__udivmoddi4+0x2bc>
 80209d6:	4618      	mov	r0, r3
 80209d8:	eba4 0408 	sub.w	r4, r4, r8
 80209dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80209e0:	e7bf      	b.n	8020962 <__udivmoddi4+0x96>
 80209e2:	428b      	cmp	r3, r1
 80209e4:	d909      	bls.n	80209fa <__udivmoddi4+0x12e>
 80209e6:	2d00      	cmp	r5, #0
 80209e8:	f000 80b1 	beq.w	8020b4e <__udivmoddi4+0x282>
 80209ec:	2600      	movs	r6, #0
 80209ee:	e9c5 0100 	strd	r0, r1, [r5]
 80209f2:	4630      	mov	r0, r6
 80209f4:	4631      	mov	r1, r6
 80209f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80209fa:	fab3 f683 	clz	r6, r3
 80209fe:	2e00      	cmp	r6, #0
 8020a00:	d14a      	bne.n	8020a98 <__udivmoddi4+0x1cc>
 8020a02:	428b      	cmp	r3, r1
 8020a04:	d302      	bcc.n	8020a0c <__udivmoddi4+0x140>
 8020a06:	4282      	cmp	r2, r0
 8020a08:	f200 80b8 	bhi.w	8020b7c <__udivmoddi4+0x2b0>
 8020a0c:	1a84      	subs	r4, r0, r2
 8020a0e:	eb61 0103 	sbc.w	r1, r1, r3
 8020a12:	2001      	movs	r0, #1
 8020a14:	468c      	mov	ip, r1
 8020a16:	2d00      	cmp	r5, #0
 8020a18:	d0a8      	beq.n	802096c <__udivmoddi4+0xa0>
 8020a1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8020a1e:	e7a5      	b.n	802096c <__udivmoddi4+0xa0>
 8020a20:	f1c2 0320 	rsb	r3, r2, #32
 8020a24:	fa20 f603 	lsr.w	r6, r0, r3
 8020a28:	4097      	lsls	r7, r2
 8020a2a:	fa01 f002 	lsl.w	r0, r1, r2
 8020a2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020a32:	40d9      	lsrs	r1, r3
 8020a34:	4330      	orrs	r0, r6
 8020a36:	0c03      	lsrs	r3, r0, #16
 8020a38:	fbb1 f6fe 	udiv	r6, r1, lr
 8020a3c:	fa1f f887 	uxth.w	r8, r7
 8020a40:	fb0e 1116 	mls	r1, lr, r6, r1
 8020a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020a48:	fb06 f108 	mul.w	r1, r6, r8
 8020a4c:	4299      	cmp	r1, r3
 8020a4e:	fa04 f402 	lsl.w	r4, r4, r2
 8020a52:	d909      	bls.n	8020a68 <__udivmoddi4+0x19c>
 8020a54:	18fb      	adds	r3, r7, r3
 8020a56:	f106 3cff 	add.w	ip, r6, #4294967295
 8020a5a:	f080 808d 	bcs.w	8020b78 <__udivmoddi4+0x2ac>
 8020a5e:	4299      	cmp	r1, r3
 8020a60:	f240 808a 	bls.w	8020b78 <__udivmoddi4+0x2ac>
 8020a64:	3e02      	subs	r6, #2
 8020a66:	443b      	add	r3, r7
 8020a68:	1a5b      	subs	r3, r3, r1
 8020a6a:	b281      	uxth	r1, r0
 8020a6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a70:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020a78:	fb00 f308 	mul.w	r3, r0, r8
 8020a7c:	428b      	cmp	r3, r1
 8020a7e:	d907      	bls.n	8020a90 <__udivmoddi4+0x1c4>
 8020a80:	1879      	adds	r1, r7, r1
 8020a82:	f100 3cff 	add.w	ip, r0, #4294967295
 8020a86:	d273      	bcs.n	8020b70 <__udivmoddi4+0x2a4>
 8020a88:	428b      	cmp	r3, r1
 8020a8a:	d971      	bls.n	8020b70 <__udivmoddi4+0x2a4>
 8020a8c:	3802      	subs	r0, #2
 8020a8e:	4439      	add	r1, r7
 8020a90:	1acb      	subs	r3, r1, r3
 8020a92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8020a96:	e778      	b.n	802098a <__udivmoddi4+0xbe>
 8020a98:	f1c6 0c20 	rsb	ip, r6, #32
 8020a9c:	fa03 f406 	lsl.w	r4, r3, r6
 8020aa0:	fa22 f30c 	lsr.w	r3, r2, ip
 8020aa4:	431c      	orrs	r4, r3
 8020aa6:	fa20 f70c 	lsr.w	r7, r0, ip
 8020aaa:	fa01 f306 	lsl.w	r3, r1, r6
 8020aae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8020ab2:	fa21 f10c 	lsr.w	r1, r1, ip
 8020ab6:	431f      	orrs	r7, r3
 8020ab8:	0c3b      	lsrs	r3, r7, #16
 8020aba:	fbb1 f9fe 	udiv	r9, r1, lr
 8020abe:	fa1f f884 	uxth.w	r8, r4
 8020ac2:	fb0e 1119 	mls	r1, lr, r9, r1
 8020ac6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8020aca:	fb09 fa08 	mul.w	sl, r9, r8
 8020ace:	458a      	cmp	sl, r1
 8020ad0:	fa02 f206 	lsl.w	r2, r2, r6
 8020ad4:	fa00 f306 	lsl.w	r3, r0, r6
 8020ad8:	d908      	bls.n	8020aec <__udivmoddi4+0x220>
 8020ada:	1861      	adds	r1, r4, r1
 8020adc:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ae0:	d248      	bcs.n	8020b74 <__udivmoddi4+0x2a8>
 8020ae2:	458a      	cmp	sl, r1
 8020ae4:	d946      	bls.n	8020b74 <__udivmoddi4+0x2a8>
 8020ae6:	f1a9 0902 	sub.w	r9, r9, #2
 8020aea:	4421      	add	r1, r4
 8020aec:	eba1 010a 	sub.w	r1, r1, sl
 8020af0:	b2bf      	uxth	r7, r7
 8020af2:	fbb1 f0fe 	udiv	r0, r1, lr
 8020af6:	fb0e 1110 	mls	r1, lr, r0, r1
 8020afa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8020afe:	fb00 f808 	mul.w	r8, r0, r8
 8020b02:	45b8      	cmp	r8, r7
 8020b04:	d907      	bls.n	8020b16 <__udivmoddi4+0x24a>
 8020b06:	19e7      	adds	r7, r4, r7
 8020b08:	f100 31ff 	add.w	r1, r0, #4294967295
 8020b0c:	d22e      	bcs.n	8020b6c <__udivmoddi4+0x2a0>
 8020b0e:	45b8      	cmp	r8, r7
 8020b10:	d92c      	bls.n	8020b6c <__udivmoddi4+0x2a0>
 8020b12:	3802      	subs	r0, #2
 8020b14:	4427      	add	r7, r4
 8020b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020b1a:	eba7 0708 	sub.w	r7, r7, r8
 8020b1e:	fba0 8902 	umull	r8, r9, r0, r2
 8020b22:	454f      	cmp	r7, r9
 8020b24:	46c6      	mov	lr, r8
 8020b26:	4649      	mov	r1, r9
 8020b28:	d31a      	bcc.n	8020b60 <__udivmoddi4+0x294>
 8020b2a:	d017      	beq.n	8020b5c <__udivmoddi4+0x290>
 8020b2c:	b15d      	cbz	r5, 8020b46 <__udivmoddi4+0x27a>
 8020b2e:	ebb3 020e 	subs.w	r2, r3, lr
 8020b32:	eb67 0701 	sbc.w	r7, r7, r1
 8020b36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8020b3a:	40f2      	lsrs	r2, r6
 8020b3c:	ea4c 0202 	orr.w	r2, ip, r2
 8020b40:	40f7      	lsrs	r7, r6
 8020b42:	e9c5 2700 	strd	r2, r7, [r5]
 8020b46:	2600      	movs	r6, #0
 8020b48:	4631      	mov	r1, r6
 8020b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b4e:	462e      	mov	r6, r5
 8020b50:	4628      	mov	r0, r5
 8020b52:	e70b      	b.n	802096c <__udivmoddi4+0xa0>
 8020b54:	4606      	mov	r6, r0
 8020b56:	e6e9      	b.n	802092c <__udivmoddi4+0x60>
 8020b58:	4618      	mov	r0, r3
 8020b5a:	e6fd      	b.n	8020958 <__udivmoddi4+0x8c>
 8020b5c:	4543      	cmp	r3, r8
 8020b5e:	d2e5      	bcs.n	8020b2c <__udivmoddi4+0x260>
 8020b60:	ebb8 0e02 	subs.w	lr, r8, r2
 8020b64:	eb69 0104 	sbc.w	r1, r9, r4
 8020b68:	3801      	subs	r0, #1
 8020b6a:	e7df      	b.n	8020b2c <__udivmoddi4+0x260>
 8020b6c:	4608      	mov	r0, r1
 8020b6e:	e7d2      	b.n	8020b16 <__udivmoddi4+0x24a>
 8020b70:	4660      	mov	r0, ip
 8020b72:	e78d      	b.n	8020a90 <__udivmoddi4+0x1c4>
 8020b74:	4681      	mov	r9, r0
 8020b76:	e7b9      	b.n	8020aec <__udivmoddi4+0x220>
 8020b78:	4666      	mov	r6, ip
 8020b7a:	e775      	b.n	8020a68 <__udivmoddi4+0x19c>
 8020b7c:	4630      	mov	r0, r6
 8020b7e:	e74a      	b.n	8020a16 <__udivmoddi4+0x14a>
 8020b80:	f1ac 0c02 	sub.w	ip, ip, #2
 8020b84:	4439      	add	r1, r7
 8020b86:	e713      	b.n	80209b0 <__udivmoddi4+0xe4>
 8020b88:	3802      	subs	r0, #2
 8020b8a:	443c      	add	r4, r7
 8020b8c:	e724      	b.n	80209d8 <__udivmoddi4+0x10c>
 8020b8e:	bf00      	nop

08020b90 <__aeabi_idiv0>:
 8020b90:	4770      	bx	lr
 8020b92:	bf00      	nop

08020b94 <Potato_enter_standby>:
    HAL_SuspendTick();
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}

void Potato_enter_standby(void){
    __HAL_RCC_PWR_CLK_ENABLE();
 8020b94:	4b0b      	ldr	r3, [pc, #44]	; (8020bc4 <Potato_enter_standby+0x30>)
void Potato_enter_standby(void){
 8020b96:	b507      	push	{r0, r1, r2, lr}
    __HAL_RCC_PWR_CLK_ENABLE();
 8020b98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8020b9a:	480b      	ldr	r0, [pc, #44]	; (8020bc8 <Potato_enter_standby+0x34>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8020b9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8020ba0:	659a      	str	r2, [r3, #88]	; 0x58
 8020ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020ba8:	9301      	str	r3, [sp, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8020baa:	2200      	movs	r2, #0
 8020bac:	f644 6120 	movw	r1, #20000	; 0x4e20
    __HAL_RCC_PWR_CLK_ENABLE();
 8020bb0:	9b01      	ldr	r3, [sp, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8020bb2:	f003 f867 	bl	8023c84 <HAL_RTCEx_SetWakeUpTimer_IT>
    HAL_SuspendTick();
 8020bb6:	f001 fad3 	bl	8022160 <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
}
 8020bba:	b003      	add	sp, #12
 8020bbc:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_PWR_EnterSTANDBYMode();
 8020bc0:	f002 b8a2 	b.w	8022d08 <HAL_PWR_EnterSTANDBYMode>
 8020bc4:	40021000 	.word	0x40021000
 8020bc8:	20000194 	.word	0x20000194

08020bcc <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8020bcc:	b507      	push	{r0, r1, r2, lr}
 8020bce:	9001      	str	r0, [sp, #4]

	SystemClock_Config();
 8020bd0:	f000 f86a 	bl	8020ca8 <SystemClock_Config>
	SystemCoreClockUpdate();
 8020bd4:	f001 fa14 	bl	8022000 <SystemCoreClockUpdate>
	HAL_ResumeTick();
 8020bd8:	f001 faca 	bl	8022170 <HAL_ResumeTick>
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8020bdc:	9801      	ldr	r0, [sp, #4]
 8020bde:	f003 f8af 	bl	8023d40 <HAL_RTCEx_DeactivateWakeUpTimer>
	printf("exit stop\n");
 8020be2:	4803      	ldr	r0, [pc, #12]	; (8020bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)

}
 8020be4:	b003      	add	sp, #12
 8020be6:	f85d eb04 	ldr.w	lr, [sp], #4
	printf("exit stop\n");
 8020bea:	f004 bd75 	b.w	80256d8 <puts>
 8020bee:	bf00      	nop
 8020bf0:	08026b80 	.word	0x08026b80
 8020bf4:	00000000 	.word	0x00000000

08020bf8 <Potato_Readadc>:
#include "adc.h"

extern ADC_HandleTypeDef hadc1;


long Potato_Readadc(void){
 8020bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	volatile long adc_value = 0;
 8020bfa:	2300      	movs	r3, #0

	//return adc_value;
*/

	for(uint8_t i = 0; i<20; i++){
		HAL_ADC_Start(&hadc1);
 8020bfc:	4d1a      	ldr	r5, [pc, #104]	; (8020c68 <Potato_Readadc+0x70>)
	volatile long adc_value = 0;
 8020bfe:	9301      	str	r3, [sp, #4]
	adc_value = 0;
 8020c00:	2414      	movs	r4, #20
 8020c02:	9301      	str	r3, [sp, #4]
		HAL_ADC_Start(&hadc1);
 8020c04:	4628      	mov	r0, r5
 8020c06:	f001 fe13 	bl	8022830 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8020c0a:	2164      	movs	r1, #100	; 0x64
 8020c0c:	4628      	mov	r0, r5
 8020c0e:	f001 fba9 	bl	8022364 <HAL_ADC_PollForConversion>
		adc_value += HAL_ADC_GetValue(&hadc1);
 8020c12:	4628      	mov	r0, r5
 8020c14:	f001 fc1e 	bl	8022454 <HAL_ADC_GetValue>
 8020c18:	9b01      	ldr	r3, [sp, #4]
 8020c1a:	4418      	add	r0, r3
 8020c1c:	9001      	str	r0, [sp, #4]
		HAL_Delay(10);
 8020c1e:	3c01      	subs	r4, #1
 8020c20:	200a      	movs	r0, #10
 8020c22:	f001 fa89 	bl	8022138 <HAL_Delay>
	for(uint8_t i = 0; i<20; i++){
 8020c26:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8020c2a:	d1eb      	bne.n	8020c04 <Potato_Readadc+0xc>
	}

	adc_value = (adc_value/20U);
 8020c2c:	9b01      	ldr	r3, [sp, #4]
 8020c2e:	2214      	movs	r2, #20
 8020c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8020c34:	9301      	str	r3, [sp, #4]
	/*
	sprintf(buffer,"adc_val_raw = %d\n",adc_value);
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 20);
	*/
	//adc_value -= 3065;
	adc_value -= 3005;
 8020c36:	9b01      	ldr	r3, [sp, #4]
 8020c38:	f6a3 33bd 	subw	r3, r3, #3005	; 0xbbd
 8020c3c:	9301      	str	r3, [sp, #4]
	real_A = (long)(((double)adc_value * V_per_adcvalue)*10);
 8020c3e:	9801      	ldr	r0, [sp, #4]
 8020c40:	f7ff fd9a 	bl	8020778 <__aeabi_i2d>
 8020c44:	a306      	add	r3, pc, #24	; (adr r3, 8020c60 <Potato_Readadc+0x68>)
 8020c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c4a:	f7ff fb19 	bl	8020280 <__aeabi_dmul>
 8020c4e:	4b07      	ldr	r3, [pc, #28]	; (8020c6c <Potato_Readadc+0x74>)
 8020c50:	2200      	movs	r2, #0
 8020c52:	f7ff fb15 	bl	8020280 <__aeabi_dmul>
 8020c56:	f7ff fdf9 	bl	802084c <__aeabi_d2iz>
	*/
	return real_A;

	//HAL_Delay(1000);

}
 8020c5a:	b003      	add	sp, #12
 8020c5c:	bd30      	pop	{r4, r5, pc}
 8020c5e:	bf00      	nop
 8020c60:	5c28f5c3 	.word	0x5c28f5c3
 8020c64:	3fe9c28f 	.word	0x3fe9c28f
 8020c68:	20000130 	.word	0x20000130
 8020c6c:	40240000 	.word	0x40240000

08020c70 <crcSlow>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
 8020c70:	b570      	push	{r4, r5, r6, lr}
 8020c72:	4605      	mov	r5, r0


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 8020c74:	2400      	movs	r4, #0
    crc            remainder = INITIAL_REMAINDER;
 8020c76:	f64f 70ff 	movw	r0, #65535	; 0xffff
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8020c7a:	f241 0621 	movw	r6, #4129	; 0x1021
    for (byte = 0; byte < nBytes; ++byte)
 8020c7e:	428c      	cmp	r4, r1
 8020c80:	db00      	blt.n	8020c84 <crcSlow+0x14>
    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);

}   /* crcSlow() */
 8020c82:	bd70      	pop	{r4, r5, r6, pc}
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
 8020c84:	5d2b      	ldrb	r3, [r5, r4]
 8020c86:	2208      	movs	r2, #8
 8020c88:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
            if (remainder & TOPBIT)
 8020c8c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8020c90:	ea4f 0340 	mov.w	r3, r0, lsl #1
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8020c94:	bf18      	it	ne
 8020c96:	4073      	eorne	r3, r6
                remainder = (remainder << 1);
 8020c98:	b298      	uxth	r0, r3
        for (bit = 8; bit > 0; --bit)
 8020c9a:	1e53      	subs	r3, r2, #1
 8020c9c:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 8020ca0:	d1f4      	bne.n	8020c8c <crcSlow+0x1c>
    for (byte = 0; byte < nBytes; ++byte)
 8020ca2:	3401      	adds	r4, #1
 8020ca4:	e7eb      	b.n	8020c7e <crcSlow+0xe>
	...

08020ca8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8020ca8:	b500      	push	{lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020caa:	f44f 7000 	mov.w	r0, #512	; 0x200
{
 8020cae:	b097      	sub	sp, #92	; 0x5c
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020cb0:	f002 f844 	bl	8022d3c <HAL_PWREx_ControlVoltageScaling>
  HAL_PWR_EnableBkUpAccess();
 8020cb4:	f002 f820 	bl	8022cf8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8020cb8:	4a18      	ldr	r2, [pc, #96]	; (8020d1c <SystemClock_Config+0x74>)
 8020cba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8020cbe:	f023 0318 	bic.w	r3, r3, #24
 8020cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8020cc6:	2060      	movs	r0, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8020cc8:	2314      	movs	r3, #20
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8020cca:	2200      	movs	r2, #0
 8020ccc:	e9cd 200c 	strd	r2, r0, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8020cd0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020cd2:	2202      	movs	r2, #2
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8020cd4:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8020cd6:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8020cda:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8020cdc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8020cde:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8020ce0:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8020ce4:	2307      	movs	r3, #7
  /*
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  */
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020ce6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8020ce8:	e9cd c312 	strd	ip, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8020cec:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020cf0:	f002 f8ea 	bl	8022ec8 <HAL_RCC_OscConfig>
 8020cf4:	b100      	cbz	r0, 8020cf8 <SystemClock_Config+0x50>
  {
    /* Initialization Error */
    while(1);
 8020cf6:	e7fe      	b.n	8020cf6 <SystemClock_Config+0x4e>
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8020cf8:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020cfc:	220f      	movs	r2, #15
 8020cfe:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020d00:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8020d02:	2104      	movs	r1, #4
 8020d04:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020d06:	e9cd 2300 	strd	r2, r3, [sp]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8020d0a:	f002 fb63 	bl	80233d4 <HAL_RCC_ClockConfig>
 8020d0e:	b100      	cbz	r0, 8020d12 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 8020d10:	e7fe      	b.n	8020d10 <SystemClock_Config+0x68>
  }
  HAL_RCCEx_EnableMSIPLLMode();
 8020d12:	f002 ff0b 	bl	8023b2c <HAL_RCCEx_EnableMSIPLLMode>
}
 8020d16:	b017      	add	sp, #92	; 0x5c
 8020d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8020d1c:	40021000 	.word	0x40021000

08020d20 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8020d20:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8020d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8020d26:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8020d28:	2201      	movs	r2, #1
 8020d2a:	a901      	add	r1, sp, #4
 8020d2c:	4803      	ldr	r0, [pc, #12]	; (8020d3c <__io_putchar+0x1c>)
 8020d2e:	f004 fadd 	bl	80252ec <HAL_UART_Transmit>

  return ch;
}
 8020d32:	9801      	ldr	r0, [sp, #4]
 8020d34:	b003      	add	sp, #12
 8020d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8020d3a:	bf00      	nop
 8020d3c:	20000b20 	.word	0x20000b20

08020d40 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8020d40:	2802      	cmp	r0, #2
 8020d42:	d101      	bne.n	8020d48 <HAL_GPIO_EXTI_Callback+0x8>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8020d44:	f001 b82e 	b.w	8021da4 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 8020d48:	4770      	bx	lr
	...

08020d4c <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 8020d4c:	4801      	ldr	r0, [pc, #4]	; (8020d54 <SPI3_IRQHandler+0x8>)
 8020d4e:	f004 b85b 	b.w	8024e08 <HAL_SPI_IRQHandler>
 8020d52:	bf00      	nop
 8020d54:	200001bc 	.word	0x200001bc

08020d58 <MX_ADC1_Init>:
}



void MX_ADC1_Init(void)
{
 8020d58:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8020d5a:	2400      	movs	r4, #0
{
 8020d5c:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8020d5e:	2218      	movs	r2, #24
 8020d60:	4621      	mov	r1, r4
 8020d62:	a804      	add	r0, sp, #16
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8020d64:	4d18      	ldr	r5, [pc, #96]	; (8020dc8 <MX_ADC1_Init+0x70>)
  ADC_MultiModeTypeDef multimode = {0};
 8020d66:	9403      	str	r4, [sp, #12]
 8020d68:	e9cd 4401 	strd	r4, r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8020d6c:	f004 fc26 	bl	80255bc <memset>
  hadc1.Instance = ADC1;
 8020d70:	4b16      	ldr	r3, [pc, #88]	; (8020dcc <MX_ADC1_Init+0x74>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8020d72:	612c      	str	r4, [r5, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020d74:	2604      	movs	r6, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8020d76:	e9c5 3400 	strd	r3, r4, [r5]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8020d7a:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 1;
 8020d7c:	2301      	movs	r3, #1
 8020d7e:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8020d80:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8020d84:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020d88:	616e      	str	r6, [r5, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8020d8a:	832c      	strh	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8020d8c:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8020d90:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8020d94:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8020d96:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8020d9a:	f001 fa07 	bl	80221ac <HAL_ADC_Init>
	  ;
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8020d9e:	eb0d 0106 	add.w	r1, sp, r6
 8020da2:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8020da4:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8020da6:	f001 fdb7 	bl	8022918 <HAL_ADCEx_MultiModeConfigChannel>
	  ;
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8020daa:	4a09      	ldr	r2, [pc, #36]	; (8020dd0 <MX_ADC1_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8020dac:	9406      	str	r4, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8020dae:	2306      	movs	r3, #6
 8020db0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020db4:	a904      	add	r1, sp, #16
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8020db6:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020db8:	4628      	mov	r0, r5
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8020dba:	e9cd 3607 	strd	r3, r6, [sp, #28]
  sConfig.Offset = 0;
 8020dbe:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020dc0:	f001 fb4c 	bl	802245c <HAL_ADC_ConfigChannel>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8020dc4:	b00a      	add	sp, #40	; 0x28
 8020dc6:	bd70      	pop	{r4, r5, r6, pc}
 8020dc8:	20000130 	.word	0x20000130
 8020dcc:	50040000 	.word	0x50040000
 8020dd0:	04300002 	.word	0x04300002

08020dd4 <main>:
{
 8020dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SCB->VTOR = 0x08020000;
 8020dd8:	4b8e      	ldr	r3, [pc, #568]	; (8021014 <main+0x240>)
 8020dda:	4a8f      	ldr	r2, [pc, #572]	; (8021018 <main+0x244>)
 8020ddc:	609a      	str	r2, [r3, #8]
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8020dde:	4b8f      	ldr	r3, [pc, #572]	; (802101c <main+0x248>)
{
 8020de0:	b0a4      	sub	sp, #144	; 0x90
  uint8_t TxData[100] = {0,};
 8020de2:	2400      	movs	r4, #0
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8020de4:	221f      	movs	r2, #31
 8020de6:	619a      	str	r2, [r3, #24]
  uint8_t TxData[100] = {0,};
 8020de8:	4621      	mov	r1, r4
 8020dea:	2260      	movs	r2, #96	; 0x60
 8020dec:	a80c      	add	r0, sp, #48	; 0x30
 8020dee:	940b      	str	r4, [sp, #44]	; 0x2c
 8020df0:	f004 fbe4 	bl	80255bc <memset>
  HAL_Init();
 8020df4:	f001 f97e 	bl	80220f4 <HAL_Init>
  SystemClock_Config();
 8020df8:	f7ff ff56 	bl	8020ca8 <SystemClock_Config>
  BSP_LED_Init(LED2);
 8020dfc:	4620      	mov	r0, r4
 8020dfe:	f001 f869 	bl	8021ed4 <BSP_LED_Init>


static void MX_RTC_Init(void)
{

  hrtc.Instance = RTC;
 8020e02:	4887      	ldr	r0, [pc, #540]	; (8021020 <main+0x24c>)
 8020e04:	4b87      	ldr	r3, [pc, #540]	; (8021024 <main+0x250>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8020e06:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8020e08:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.SynchPrediv = 255;
 8020e0c:	23ff      	movs	r3, #255	; 0xff
 8020e0e:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8020e12:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8020e16:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8020e1a:	f002 feed 	bl	8023bf8 <HAL_RTC_Init>
 8020e1e:	b110      	cbz	r0, 8020e26 <main+0x52>
  {
    printf("RTC Init error\n");
 8020e20:	4881      	ldr	r0, [pc, #516]	; (8021028 <main+0x254>)
 8020e22:	f004 fc59 	bl	80256d8 <puts>
  hDiscoUart.Init.BaudRate = 115200;
 8020e26:	4a81      	ldr	r2, [pc, #516]	; (802102c <main+0x258>)
  hDiscoUart.Instance = DISCOVERY_COM1;
 8020e28:	4981      	ldr	r1, [pc, #516]	; (8021030 <main+0x25c>)
  Potato_Load(&POTATO);
 8020e2a:	4e82      	ldr	r6, [pc, #520]	; (8021034 <main+0x260>)
	  RemoteIP[i] = POTATO.POTATO_IP[i];
 8020e2c:	4d82      	ldr	r5, [pc, #520]	; (8021038 <main+0x264>)
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8020e2e:	2400      	movs	r4, #0
  hDiscoUart.Init.BaudRate = 115200;
 8020e30:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8020e34:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 8020e38:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8020e3a:	230c      	movs	r3, #12
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020e3c:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8020e40:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020e44:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8020e48:	610c      	str	r4, [r1, #16]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020e4a:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 8020e4c:	f001 f86e 	bl	8021f2c <BSP_COM_Init>
  TERMOUT("sysclock : %d\n",HAL_RCC_GetSysClockFreq());
 8020e50:	f001 ffec 	bl	8022e2c <HAL_RCC_GetSysClockFreq>
 8020e54:	4601      	mov	r1, r0
 8020e56:	4879      	ldr	r0, [pc, #484]	; (802103c <main+0x268>)
 8020e58:	f004 fbb8 	bl	80255cc <iprintf>
  Potato_Load(&POTATO);
 8020e5c:	4630      	mov	r0, r6
 8020e5e:	f000 f9a7 	bl	80211b0 <Potato_Load>
  TERMOUT("Load done\n");
 8020e62:	4877      	ldr	r0, [pc, #476]	; (8021040 <main+0x26c>)
 8020e64:	f004 fc38 	bl	80256d8 <puts>
  MX_ADC1_Init();
 8020e68:	f7ff ff76 	bl	8020d58 <MX_ADC1_Init>
	  RemoteIP[i] = POTATO.POTATO_IP[i];
 8020e6c:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 8020e70:	702b      	strb	r3, [r5, #0]
 8020e72:	f896 305e 	ldrb.w	r3, [r6, #94]	; 0x5e
 8020e76:	706b      	strb	r3, [r5, #1]
 8020e78:	f896 305f 	ldrb.w	r3, [r6, #95]	; 0x5f
 8020e7c:	70ab      	strb	r3, [r5, #2]
  TERMOUT("****** WIFI Module in TCP Client mode demonstration123 ****** \n\n");
 8020e7e:	4871      	ldr	r0, [pc, #452]	; (8021044 <main+0x270>)
	  RemoteIP[i] = POTATO.POTATO_IP[i];
 8020e80:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 8020e84:	70eb      	strb	r3, [r5, #3]
  TERMOUT("****** WIFI Module in TCP Client mode demonstration123 ****** \n\n");
 8020e86:	f004 fc27 	bl	80256d8 <puts>
  TERMOUT("TCP Client Instructions :\n");
 8020e8a:	486f      	ldr	r0, [pc, #444]	; (8021048 <main+0x274>)
 8020e8c:	f004 fc24 	bl	80256d8 <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8020e90:	486e      	ldr	r0, [pc, #440]	; (802104c <main+0x278>)
 8020e92:	f004 fc21 	bl	80256d8 <puts>
  TERMOUT("   you configured using the Configuration Access Point.\n");
 8020e96:	486e      	ldr	r0, [pc, #440]	; (8021050 <main+0x27c>)
 8020e98:	f004 fc1e 	bl	80256d8 <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\n");
 8020e9c:	486d      	ldr	r0, [pc, #436]	; (8021054 <main+0x280>)
 8020e9e:	f004 fc1b 	bl	80256d8 <puts>
  TERMOUT("   with port(8002).\n");
 8020ea2:	486d      	ldr	r0, [pc, #436]	; (8021058 <main+0x284>)
 8020ea4:	f004 fc18 	bl	80256d8 <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8020ea8:	486c      	ldr	r0, [pc, #432]	; (802105c <main+0x288>)
 8020eaa:	f004 fc15 	bl	80256d8 <puts>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8020eae:	f000 ff83 	bl	8021db8 <WIFI_Init>
 8020eb2:	4606      	mov	r6, r0
 8020eb4:	2800      	cmp	r0, #0
 8020eb6:	f040 808a 	bne.w	8020fce <main+0x1fa>
    TERMOUT("> WIFI Module Initialized.\n");
 8020eba:	4869      	ldr	r0, [pc, #420]	; (8021060 <main+0x28c>)
 8020ebc:	f004 fc0c 	bl	80256d8 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8020ec0:	a809      	add	r0, sp, #36	; 0x24
 8020ec2:	f000 ffb1 	bl	8021e28 <WIFI_GetMAC_Address>
 8020ec6:	2800      	cmp	r0, #0
 8020ec8:	d14a      	bne.n	8020f60 <main+0x18c>
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8020eca:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8020ece:	9302      	str	r3, [sp, #8]
 8020ed0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8020ed4:	9301      	str	r3, [sp, #4]
 8020ed6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8020eda:	9300      	str	r3, [sp, #0]
 8020edc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8020ee0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8020ee4:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8020ee8:	485e      	ldr	r0, [pc, #376]	; (8021064 <main+0x290>)
 8020eea:	f004 fb6f 	bl	80255cc <iprintf>
    if( WIFI_Connect(&POTATO.POTATO_SSID, &POTATO.POTATO_PW, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8020eee:	495e      	ldr	r1, [pc, #376]	; (8021068 <main+0x294>)
 8020ef0:	2203      	movs	r2, #3
 8020ef2:	f1a1 001f 	sub.w	r0, r1, #31
 8020ef6:	f000 ff83 	bl	8021e00 <WIFI_Connect>
 8020efa:	2800      	cmp	r0, #0
 8020efc:	d165      	bne.n	8020fca <main+0x1f6>
      TERMOUT("> es-wifi module connected \n");
 8020efe:	485b      	ldr	r0, [pc, #364]	; (802106c <main+0x298>)
 8020f00:	f004 fbea 	bl	80256d8 <puts>
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8020f04:	a808      	add	r0, sp, #32
 8020f06:	f000 ff9b 	bl	8021e40 <WIFI_GetIP_Address>
 8020f0a:	4604      	mov	r4, r0
 8020f0c:	2800      	cmp	r0, #0
 8020f0e:	d15a      	bne.n	8020fc6 <main+0x1f2>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8020f10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8020f14:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8020f18:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8020f1c:	9300      	str	r3, [sp, #0]
 8020f1e:	4854      	ldr	r0, [pc, #336]	; (8021070 <main+0x29c>)
 8020f20:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8020f24:	4f44      	ldr	r7, [pc, #272]	; (8021038 <main+0x264>)
 8020f26:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80210a8 <main+0x2d4>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8020f2a:	f004 fb4f 	bl	80255cc <iprintf>
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 8020f2e:	f641 7342 	movw	r3, #8002	; 0x1f42
 8020f32:	9301      	str	r3, [sp, #4]
 8020f34:	78eb      	ldrb	r3, [r5, #3]
 8020f36:	9300      	str	r3, [sp, #0]
 8020f38:	78ab      	ldrb	r3, [r5, #2]
 8020f3a:	786a      	ldrb	r2, [r5, #1]
 8020f3c:	7829      	ldrb	r1, [r5, #0]
 8020f3e:	484d      	ldr	r0, [pc, #308]	; (8021074 <main+0x2a0>)
 8020f40:	f004 fb44 	bl	80255cc <iprintf>
        while (Trials--)
 8020f44:	250b      	movs	r5, #11
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8020f46:	4626      	mov	r6, r4
        while (Trials--)
 8020f48:	3d01      	subs	r5, #1
 8020f4a:	b2ad      	uxth	r5, r5
 8020f4c:	b97d      	cbnz	r5, 8020f6e <main+0x19a>
          TERMOUT("> ERROR : Cannot open Connection\n");
 8020f4e:	484a      	ldr	r0, [pc, #296]	; (8021078 <main+0x2a4>)
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8020f50:	f004 fbc2 	bl	80256d8 <puts>
      BSP_LED_On(LED2);
 8020f54:	2000      	movs	r0, #0
    BSP_LED_On(LED2);
 8020f56:	f000 ffdf 	bl	8021f18 <BSP_LED_On>
  int32_t Socket = -1;
 8020f5a:	f04f 34ff 	mov.w	r4, #4294967295
 8020f5e:	e016      	b.n	8020f8e <main+0x1ba>
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 8020f60:	4846      	ldr	r0, [pc, #280]	; (802107c <main+0x2a8>)
 8020f62:	f004 fbb9 	bl	80256d8 <puts>
      BSP_LED_On(LED2);
 8020f66:	4630      	mov	r0, r6
 8020f68:	f000 ffd6 	bl	8021f18 <BSP_LED_On>
 8020f6c:	e7bf      	b.n	8020eee <main+0x11a>
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8020f6e:	f641 7342 	movw	r3, #8002	; 0x1f42
 8020f72:	2100      	movs	r1, #0
 8020f74:	9300      	str	r3, [sp, #0]
 8020f76:	9601      	str	r6, [sp, #4]
 8020f78:	463b      	mov	r3, r7
 8020f7a:	4642      	mov	r2, r8
 8020f7c:	4608      	mov	r0, r1
 8020f7e:	f000 ff6f 	bl	8021e60 <WIFI_OpenClientConnection>
 8020f82:	4604      	mov	r4, r0
 8020f84:	2800      	cmp	r0, #0
 8020f86:	d1df      	bne.n	8020f48 <main+0x174>
            TERMOUT("> TCP Connection opened successfully.\n");
 8020f88:	483d      	ldr	r0, [pc, #244]	; (8021080 <main+0x2ac>)
 8020f8a:	f004 fba5 	bl	80256d8 <puts>
	sprintf(TxData,"current = %ld mA\n",adc_mA);
 8020f8e:	4e3d      	ldr	r6, [pc, #244]	; (8021084 <main+0x2b0>)
	sprintf(TxData,"%ld\n",adc_mA);
 8020f90:	4f3d      	ldr	r7, [pc, #244]	; (8021088 <main+0x2b4>)
		TERMOUT("Socket -1?\n");
 8020f92:	4d3e      	ldr	r5, [pc, #248]	; (802108c <main+0x2b8>)
	adc_mA = Potato_Readadc();
 8020f94:	f7ff fe30 	bl	8020bf8 <Potato_Readadc>
	sprintf(TxData,"current = %ld mA\n",adc_mA);
 8020f98:	4631      	mov	r1, r6
	adc_mA = Potato_Readadc();
 8020f9a:	4602      	mov	r2, r0
	sprintf(TxData,"current = %ld mA\n",adc_mA);
 8020f9c:	9005      	str	r0, [sp, #20]
 8020f9e:	a80b      	add	r0, sp, #44	; 0x2c
 8020fa0:	f004 fba2 	bl	80256e8 <siprintf>
	TERMOUT(TxData);
 8020fa4:	a80b      	add	r0, sp, #44	; 0x2c
 8020fa6:	f004 fb11 	bl	80255cc <iprintf>
	sprintf(TxData,"%ld\n",adc_mA);
 8020faa:	9a05      	ldr	r2, [sp, #20]
 8020fac:	4639      	mov	r1, r7
 8020fae:	a80b      	add	r0, sp, #44	; 0x2c
 8020fb0:	f004 fb9a 	bl	80256e8 <siprintf>
	while(Socket == -1)
 8020fb4:	b184      	cbz	r4, 8020fd8 <main+0x204>
		HAL_Delay(500);
 8020fb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020fba:	f001 f8bd 	bl	8022138 <HAL_Delay>
		TERMOUT("Socket -1?\n");
 8020fbe:	4628      	mov	r0, r5
 8020fc0:	f004 fb8a 	bl	80256d8 <puts>
 8020fc4:	e7f7      	b.n	8020fb6 <main+0x1e2>
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 8020fc6:	4832      	ldr	r0, [pc, #200]	; (8021090 <main+0x2bc>)
 8020fc8:	e7c2      	b.n	8020f50 <main+0x17c>
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8020fca:	4832      	ldr	r0, [pc, #200]	; (8021094 <main+0x2c0>)
 8020fcc:	e7c0      	b.n	8020f50 <main+0x17c>
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8020fce:	4832      	ldr	r0, [pc, #200]	; (8021098 <main+0x2c4>)
 8020fd0:	f004 fb82 	bl	80256d8 <puts>
    BSP_LED_On(LED2);
 8020fd4:	4620      	mov	r0, r4
 8020fd6:	e7be      	b.n	8020f56 <main+0x182>
    	ret = WIFI_SendData(Socket, TxData, strlen(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8020fd8:	a80b      	add	r0, sp, #44	; 0x2c
 8020fda:	f7ff f8f9 	bl	80201d0 <strlen>
 8020fde:	f242 7310 	movw	r3, #10000	; 0x2710
 8020fe2:	9300      	str	r3, [sp, #0]
 8020fe4:	b282      	uxth	r2, r0
 8020fe6:	f10d 031e 	add.w	r3, sp, #30
 8020fea:	a90b      	add	r1, sp, #44	; 0x2c
 8020fec:	2000      	movs	r0, #0
 8020fee:	f000 ff5f 	bl	8021eb0 <WIFI_SendData>
    	          if (ret != WIFI_STATUS_OK)
 8020ff2:	b940      	cbnz	r0, 8021006 <main+0x232>
    	          TERMOUT("Sended\n");
 8020ff4:	4829      	ldr	r0, [pc, #164]	; (802109c <main+0x2c8>)
 8020ff6:	f004 fb6f 	bl	80256d8 <puts>
    TERMOUT("Entering standby mode\n");
 8020ffa:	4829      	ldr	r0, [pc, #164]	; (80210a0 <main+0x2cc>)
 8020ffc:	f004 fb6c 	bl	80256d8 <puts>
    Potato_enter_standby();
 8021000:	f7ff fdc8 	bl	8020b94 <Potato_enter_standby>
	adc_mA = Potato_Readadc();
 8021004:	e7c6      	b.n	8020f94 <main+0x1c0>
    	            TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 8021006:	4827      	ldr	r0, [pc, #156]	; (80210a4 <main+0x2d0>)
 8021008:	f004 fb66 	bl	80256d8 <puts>
}
 802100c:	2000      	movs	r0, #0
 802100e:	b024      	add	sp, #144	; 0x90
 8021010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021014:	e000ed00 	.word	0xe000ed00
 8021018:	08020000 	.word	0x08020000
 802101c:	40007000 	.word	0x40007000
 8021020:	20000194 	.word	0x20000194
 8021024:	40002800 	.word	0x40002800
 8021028:	08026b8a 	.word	0x08026b8a
 802102c:	40013800 	.word	0x40013800
 8021030:	20000b20 	.word	0x20000b20
 8021034:	200000c4 	.word	0x200000c4
 8021038:	20000000 	.word	0x20000000
 802103c:	08026b99 	.word	0x08026b99
 8021040:	08026ba8 	.word	0x08026ba8
 8021044:	08026bb2 	.word	0x08026bb2
 8021048:	08026bf2 	.word	0x08026bf2
 802104c:	08026c0c 	.word	0x08026c0c
 8021050:	08026c4a 	.word	0x08026c4a
 8021054:	08026c82 	.word	0x08026c82
 8021058:	08026cc1 	.word	0x08026cc1
 802105c:	08026cd5 	.word	0x08026cd5
 8021060:	08026d1d 	.word	0x08026d1d
 8021064:	08026d38 	.word	0x08026d38
 8021068:	200000e3 	.word	0x200000e3
 802106c:	08026d8b 	.word	0x08026d8b
 8021070:	08026da7 	.word	0x08026da7
 8021074:	08026dd6 	.word	0x08026dd6
 8021078:	08026e3a 	.word	0x08026e3a
 802107c:	08026d6a 	.word	0x08026d6a
 8021080:	08026e14 	.word	0x08026e14
 8021084:	08026ede 	.word	0x08026ede
 8021088:	08026ef0 	.word	0x08026ef0
 802108c:	08026ef5 	.word	0x08026ef5
 8021090:	08026e5b 	.word	0x08026e5b
 8021094:	08026e8a 	.word	0x08026e8a
 8021098:	08026eb1 	.word	0x08026eb1
 802109c:	08026f31 	.word	0x08026f31
 80210a0:	08026f38 	.word	0x08026f38
 80210a4:	08026f00 	.word	0x08026f00
 80210a8:	08026e09 	.word	0x08026e09

080210ac <HAL_ADC_MspInit>:
{
 80210ac:	b510      	push	{r4, lr}
 80210ae:	b0aa      	sub	sp, #168	; 0xa8
 80210b0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80210b2:	2214      	movs	r2, #20
 80210b4:	2100      	movs	r1, #0
 80210b6:	a803      	add	r0, sp, #12
 80210b8:	f004 fa80 	bl	80255bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80210bc:	2288      	movs	r2, #136	; 0x88
 80210be:	2100      	movs	r1, #0
 80210c0:	a808      	add	r0, sp, #32
 80210c2:	f004 fa7b 	bl	80255bc <memset>
  if(hadc->Instance==ADC1)
 80210c6:	6822      	ldr	r2, [r4, #0]
 80210c8:	4b1b      	ldr	r3, [pc, #108]	; (8021138 <HAL_ADC_MspInit+0x8c>)
 80210ca:	429a      	cmp	r2, r3
 80210cc:	d131      	bne.n	8021132 <HAL_ADC_MspInit+0x86>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80210ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80210d2:	9308      	str	r3, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80210d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80210d8:	2118      	movs	r1, #24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80210da:	9326      	str	r3, [sp, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80210dc:	2307      	movs	r3, #7
 80210de:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80210e2:	2302      	movs	r3, #2
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80210e4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80210e8:	2401      	movs	r4, #1
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80210ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80210ee:	a808      	add	r0, sp, #32
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80210f0:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80210f2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80210f6:	f002 fb2f 	bl	8023758 <HAL_RCCEx_PeriphCLKConfig>
    __HAL_RCC_ADC_CLK_ENABLE();
 80210fa:	4b10      	ldr	r3, [pc, #64]	; (802113c <HAL_ADC_MspInit+0x90>)
 80210fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80210fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8021102:	64da      	str	r2, [r3, #76]	; 0x4c
 8021104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021106:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 802110a:	9201      	str	r2, [sp, #4]
 802110c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802110e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021110:	f042 0204 	orr.w	r2, r2, #4
 8021114:	64da      	str	r2, [r3, #76]	; 0x4c
 8021116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8021118:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802111a:	f003 0304 	and.w	r3, r3, #4
 802111e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021120:	200b      	movs	r0, #11
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021122:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021124:	2300      	movs	r3, #0
 8021126:	e9cd 0304 	strd	r0, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802112a:	a903      	add	r1, sp, #12
 802112c:	4804      	ldr	r0, [pc, #16]	; (8021140 <HAL_ADC_MspInit+0x94>)
 802112e:	f001 fced 	bl	8022b0c <HAL_GPIO_Init>
}
 8021132:	b02a      	add	sp, #168	; 0xa8
 8021134:	bd10      	pop	{r4, pc}
 8021136:	bf00      	nop
 8021138:	50040000 	.word	0x50040000
 802113c:	40021000 	.word	0x40021000
 8021140:	48000800 	.word	0x48000800

08021144 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8021144:	4801      	ldr	r0, [pc, #4]	; (802114c <RTC_WKUP_IRQHandler+0x8>)
 8021146:	f002 be37 	b.w	8023db8 <HAL_RTCEx_WakeUpTimerIRQHandler>
 802114a:	bf00      	nop
 802114c:	20000194 	.word	0x20000194

08021150 <HAL_RTC_MspInit>:

  /* USER CODE END RTC_WKUP_IRQn 1 */
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8021150:	b510      	push	{r4, lr}
 8021152:	4604      	mov	r4, r0
 8021154:	b0a2      	sub	sp, #136	; 0x88
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8021156:	2288      	movs	r2, #136	; 0x88
 8021158:	2100      	movs	r1, #0
 802115a:	4668      	mov	r0, sp
 802115c:	f004 fa2e 	bl	80255bc <memset>
  if(hrtc->Instance==RTC)
 8021160:	6822      	ldr	r2, [r4, #0]
 8021162:	4b10      	ldr	r3, [pc, #64]	; (80211a4 <HAL_RTC_MspInit+0x54>)
 8021164:	429a      	cmp	r2, r3
 8021166:	d11b      	bne.n	80211a0 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8021168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802116c:	9300      	str	r3, [sp, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 802116e:	4668      	mov	r0, sp
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8021170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021174:	9321      	str	r3, [sp, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8021176:	f002 faef 	bl	8023758 <HAL_RCCEx_PeriphCLKConfig>
 802117a:	b110      	cbz	r0, 8021182 <HAL_RTC_MspInit+0x32>
    {
      TERMOUT("RTC CLKConfig error\n");
 802117c:	480a      	ldr	r0, [pc, #40]	; (80211a8 <HAL_RTC_MspInit+0x58>)
 802117e:	f004 faab 	bl	80256d8 <puts>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8021182:	4a0a      	ldr	r2, [pc, #40]	; (80211ac <HAL_RTC_MspInit+0x5c>)
 8021184:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8021188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802118c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8021190:	2200      	movs	r2, #0
 8021192:	2003      	movs	r0, #3
 8021194:	4611      	mov	r1, r2
 8021196:	f001 fc3d 	bl	8022a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 802119a:	2003      	movs	r0, #3
 802119c:	f001 fc6c 	bl	8022a78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80211a0:	b022      	add	sp, #136	; 0x88
 80211a2:	bd10      	pop	{r4, pc}
 80211a4:	40002800 	.word	0x40002800
 80211a8:	08026f4e 	.word	0x08026f4e
 80211ac:	40021000 	.word	0x40021000

080211b0 <Potato_Load>:

	return save_ok;

}

save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 80211b0:	b530      	push	{r4, r5, lr}
 80211b2:	b09b      	sub	sp, #108	; 0x6c

	save_ret_t ret = 0;
	uint16_t crcval = 0;
	uint8_t temp[102] = {0,};
 80211b4:	2100      	movs	r1, #0
 80211b6:	2262      	movs	r2, #98	; 0x62
save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 80211b8:	4605      	mov	r5, r0
	uint8_t temp[102] = {0,};
 80211ba:	a801      	add	r0, sp, #4
 80211bc:	9100      	str	r1, [sp, #0]
 80211be:	f004 f9fd 	bl	80255bc <memset>
	//uint16_t saved_crcval = 0;
	//uint8_t *normal_crc_address = Potato_Flash_CRC_Address;
	//uint8_t *backup_crc_address = Potato_Flash_Backup_CRC_Address;

	memcpy(temp, Potato_Flash_Address,Potato_Data_Length_Bytes);
 80211c2:	2266      	movs	r2, #102	; 0x66
 80211c4:	4910      	ldr	r1, [pc, #64]	; (8021208 <Potato_Load+0x58>)
 80211c6:	4668      	mov	r0, sp
 80211c8:	f004 f9ea 	bl	80255a0 <memcpy>


	//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
	crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 80211cc:	2166      	movs	r1, #102	; 0x66
 80211ce:	4668      	mov	r0, sp
 80211d0:	f7ff fd4e 	bl	8020c70 <crcSlow>
	if(crcval == 0){
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 80211d4:	2266      	movs	r2, #102	; 0x66
	if(crcval == 0){
 80211d6:	4604      	mov	r4, r0
 80211d8:	b930      	cbnz	r0, 80211e8 <Potato_Load+0x38>
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 80211da:	490b      	ldr	r1, [pc, #44]	; (8021208 <Potato_Load+0x58>)

		//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);

		if(crcval == 0){
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 80211dc:	4628      	mov	r0, r5
 80211de:	f004 f9df 	bl	80255a0 <memcpy>
			ret = save_ok;
			return ret;
 80211e2:	4620      	mov	r0, r4
			ret = crc_error;
			return ret;
		}
	}

}
 80211e4:	b01b      	add	sp, #108	; 0x6c
 80211e6:	bd30      	pop	{r4, r5, pc}
		memcpy(temp, Potato_Flash_Backup_Address, Potato_Data_Length_Bytes);
 80211e8:	4908      	ldr	r1, [pc, #32]	; (802120c <Potato_Load+0x5c>)
 80211ea:	4668      	mov	r0, sp
 80211ec:	f004 f9d8 	bl	80255a0 <memcpy>
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 80211f0:	2166      	movs	r1, #102	; 0x66
 80211f2:	4668      	mov	r0, sp
 80211f4:	f7ff fd3c 	bl	8020c70 <crcSlow>
		if(crcval == 0){
 80211f8:	4604      	mov	r4, r0
 80211fa:	b910      	cbnz	r0, 8021202 <Potato_Load+0x52>
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 80211fc:	4903      	ldr	r1, [pc, #12]	; (802120c <Potato_Load+0x5c>)
 80211fe:	2266      	movs	r2, #102	; 0x66
 8021200:	e7ec      	b.n	80211dc <Potato_Load+0x2c>
			return ret;
 8021202:	2006      	movs	r0, #6
 8021204:	e7ee      	b.n	80211e4 <Potato_Load+0x34>
 8021206:	bf00      	nop
 8021208:	0807f000 	.word	0x0807f000
 802120c:	0807f800 	.word	0x0807f800

08021210 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8021210:	4770      	bx	lr

08021212 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8021212:	e7fe      	b.n	8021212 <HardFault_Handler>

08021214 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8021214:	e7fe      	b.n	8021214 <MemManage_Handler>

08021216 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8021216:	e7fe      	b.n	8021216 <BusFault_Handler>

08021218 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8021218:	e7fe      	b.n	8021218 <UsageFault_Handler>

0802121a <SVC_Handler>:
 802121a:	4770      	bx	lr

0802121c <DebugMon_Handler>:
 802121c:	4770      	bx	lr

0802121e <PendSV_Handler>:
 802121e:	4770      	bx	lr

08021220 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8021220:	f000 bf78 	b.w	8022114 <HAL_IncTick>

08021224 <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8021224:	2002      	movs	r0, #2
 8021226:	f001 bd5b 	b.w	8022ce0 <HAL_GPIO_EXTI_IRQHandler>

0802122a <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 802122a:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 802122c:	7803      	ldrb	r3, [r0, #0]
 802122e:	2b2d      	cmp	r3, #45	; 0x2d
 8021230:	d115      	bne.n	802125e <ParseNumber+0x34>
        minus = 1;
        ptr++;
 8021232:	3001      	adds	r0, #1
        minus = 1;
 8021234:	2501      	movs	r5, #1
 8021236:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 8021238:	462a      	mov	r2, r5
 802123a:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 802123c:	270a      	movs	r7, #10
 802123e:	e003      	b.n	8021248 <ParseNumber+0x1e>
        ptr++;
        i++;
 8021240:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8021242:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8021246:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8021248:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 802124c:	3c30      	subs	r4, #48	; 0x30
 802124e:	b2e6      	uxtb	r6, r4
 8021250:	2e09      	cmp	r6, #9
 8021252:	d9f5      	bls.n	8021240 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8021254:	b101      	cbz	r1, 8021258 <ParseNumber+0x2e>
        *cnt = i;
 8021256:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8021258:	b105      	cbz	r5, 802125c <ParseNumber+0x32>
        return 0 - sum;
 802125a:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 802125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 802125e:	2500      	movs	r5, #0
 8021260:	e7e9      	b.n	8021236 <ParseNumber+0xc>

08021262 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8021262:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8021264:	2600      	movs	r6, #0

  while(* ptr) {
 8021266:	7803      	ldrb	r3, [r0, #0]
 8021268:	b903      	cbnz	r3, 802126c <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 802126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 802126c:	2b3a      	cmp	r3, #58	; 0x3a
 802126e:	d128      	bne.n	80212c2 <ParseMAC+0x60>
    hexcnt = 1;
 8021270:	f04f 0c01 	mov.w	ip, #1
    ptr = ptr + hexcnt;
 8021274:	4460      	add	r0, ip
 8021276:	e7f6      	b.n	8021266 <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8021278:	2a09      	cmp	r2, #9
        sum <<= 4;
 802127a:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 802127e:	d905      	bls.n	802128c <ParseMAC+0x2a>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8021280:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8021284:	2a05      	cmp	r2, #5
 8021286:	d814      	bhi.n	80212b2 <ParseMAC+0x50>
        return (a - 'a') + 10;
 8021288:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 802128a:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 802128c:	4414      	add	r4, r2
        i++;
 802128e:	3501      	adds	r5, #1
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8021290:	5d43      	ldrb	r3, [r0, r5]
 8021292:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021296:	b2d2      	uxtb	r2, r2
 8021298:	2a09      	cmp	r2, #9
 802129a:	fa5f fc85 	uxtb.w	ip, r5
 802129e:	d9eb      	bls.n	8021278 <ParseMAC+0x16>
 80212a0:	f023 0720 	bic.w	r7, r3, #32
 80212a4:	3f41      	subs	r7, #65	; 0x41
 80212a6:	2f05      	cmp	r7, #5
 80212a8:	d9e6      	bls.n	8021278 <ParseMAC+0x16>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80212aa:	1c73      	adds	r3, r6, #1
 80212ac:	558c      	strb	r4, [r1, r6]
 80212ae:	b2de      	uxtb	r6, r3
 80212b0:	e7e0      	b.n	8021274 <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80212b2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80212b6:	2a05      	cmp	r2, #5
 80212b8:	d801      	bhi.n	80212be <ParseMAC+0x5c>
        return (a - 'A') + 10;
 80212ba:	3b37      	subs	r3, #55	; 0x37
 80212bc:	e7e5      	b.n	802128a <ParseMAC+0x28>
    return 0;
 80212be:	2200      	movs	r2, #0
 80212c0:	e7e4      	b.n	802128c <ParseMAC+0x2a>
 80212c2:	2500      	movs	r5, #0
    uint32_t sum = 0;
 80212c4:	462c      	mov	r4, r5
 80212c6:	e7e3      	b.n	8021290 <ParseMAC+0x2e>

080212c8 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80212c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80212ca:	4604      	mov	r4, r0
 80212cc:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 80212ce:	2500      	movs	r5, #0

  while(* ptr) {
    hexcnt = 1;
 80212d0:	2701      	movs	r7, #1
  while(* ptr) {
 80212d2:	7823      	ldrb	r3, [r4, #0]
 80212d4:	b90b      	cbnz	r3, 80212da <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 80212d6:	b003      	add	sp, #12
 80212d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 80212da:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 80212dc:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 80212e0:	d007      	beq.n	80212f2 <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 80212e2:	f10d 0107 	add.w	r1, sp, #7
 80212e6:	4620      	mov	r0, r4
 80212e8:	f7ff ff9f 	bl	802122a <ParseNumber>
 80212ec:	1c6b      	adds	r3, r5, #1
 80212ee:	5570      	strb	r0, [r6, r5]
 80212f0:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 80212f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80212f6:	441c      	add	r4, r3
 80212f8:	e7eb      	b.n	80212d2 <ParseIP+0xa>
	...

080212fc <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80212fc:	b570      	push	{r4, r5, r6, lr}
 80212fe:	4604      	mov	r4, r0
  int ret = 0;
  int16_t recv_len = 0;
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8021300:	4608      	mov	r0, r1
{
 8021302:	460e      	mov	r6, r1
 8021304:	4615      	mov	r5, r2
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8021306:	f7fe ff63 	bl	80201d0 <strlen>
 802130a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 802130e:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8021312:	b281      	uxth	r1, r0
 8021314:	4630      	mov	r0, r6
 8021316:	4798      	blx	r3

  if( ret > 0)
 8021318:	2800      	cmp	r0, #0
 802131a:	dd24      	ble.n	8021366 <AT_ExecuteCommand+0x6a>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 802131c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8021320:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8021324:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8021328:	4628      	mov	r0, r5
 802132a:	4798      	blx	r3
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 802132c:	1e43      	subs	r3, r0, #1
 802132e:	b29b      	uxth	r3, r3
 8021330:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8021334:	d211      	bcs.n	802135a <AT_ExecuteCommand+0x5e>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8021336:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 802133a:	bf08      	it	eq
 802133c:	b218      	sxtheq	r0, r3
      }
      *(pdata + recv_len) = 0;
 802133e:	2400      	movs	r4, #0
 8021340:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8021342:	490a      	ldr	r1, [pc, #40]	; (802136c <AT_ExecuteCommand+0x70>)
 8021344:	4628      	mov	r0, r5
 8021346:	f004 fa0a 	bl	802575e <strstr>
 802134a:	b950      	cbnz	r0, 8021362 <AT_ExecuteCommand+0x66>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 802134c:	4908      	ldr	r1, [pc, #32]	; (8021370 <AT_ExecuteCommand+0x74>)
 802134e:	4628      	mov	r0, r5
 8021350:	f004 fa05 	bl	802575e <strstr>
 8021354:	b138      	cbz	r0, 8021366 <AT_ExecuteCommand+0x6a>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8021356:	2005      	movs	r0, #5
 8021358:	e002      	b.n	8021360 <AT_ExecuteCommand+0x64>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 802135a:	3004      	adds	r0, #4
 802135c:	d103      	bne.n	8021366 <AT_ExecuteCommand+0x6a>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 802135e:	2006      	movs	r0, #6
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
}
 8021360:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 8021362:	4620      	mov	r0, r4
 8021364:	e7fc      	b.n	8021360 <AT_ExecuteCommand+0x64>
  return ES_WIFI_STATUS_IO_ERROR;
 8021366:	2004      	movs	r0, #4
 8021368:	e7fa      	b.n	8021360 <AT_ExecuteCommand+0x64>
 802136a:	bf00      	nop
 802136c:	08026f62 	.word	0x08026f62
 8021370:	08026f6b 	.word	0x08026f6b

08021374 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8021374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021378:	4605      	mov	r5, r0
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 802137a:	4608      	mov	r0, r1
{
 802137c:	4688      	mov	r8, r1
 802137e:	4691      	mov	r9, r2
 8021380:	461f      	mov	r7, r3
  cmd_len = strlen((char*)cmd);
 8021382:	f7fe ff25 	bl	80201d0 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8021386:	f010 0401 	ands.w	r4, r0, #1
{
 802138a:	9e08      	ldr	r6, [sp, #32]
  cmd_len = strlen((char*)cmd);
 802138c:	fa1f fa80 	uxth.w	sl, r0
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8021390:	d126      	bne.n	80213e0 <AT_RequestSendData+0x6c>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8021392:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8021396:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 802139a:	4651      	mov	r1, sl
 802139c:	4640      	mov	r0, r8
 802139e:	4798      	blx	r3
  if (n == cmd_len)
 80213a0:	b280      	uxth	r0, r0
 80213a2:	4582      	cmp	sl, r0
 80213a4:	d123      	bne.n	80213ee <AT_RequestSendData+0x7a>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80213a6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80213aa:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 80213ae:	4639      	mov	r1, r7
 80213b0:	4648      	mov	r0, r9
 80213b2:	4798      	blx	r3
    if (send_len == len)
 80213b4:	42b8      	cmp	r0, r7
 80213b6:	d113      	bne.n	80213e0 <AT_RequestSendData+0x6c>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80213b8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80213bc:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 80213c0:	4621      	mov	r1, r4
 80213c2:	4630      	mov	r0, r6
 80213c4:	4798      	blx	r3
      if (recv_len > 0)
 80213c6:	2800      	cmp	r0, #0
 80213c8:	dd0d      	ble.n	80213e6 <AT_RequestSendData+0x72>
      {
        *(pdata+recv_len) = 0;
 80213ca:	5434      	strb	r4, [r6, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80213cc:	490b      	ldr	r1, [pc, #44]	; (80213fc <AT_RequestSendData+0x88>)
 80213ce:	4630      	mov	r0, r6
 80213d0:	f004 f9c5 	bl	802575e <strstr>
 80213d4:	b968      	cbnz	r0, 80213f2 <AT_RequestSendData+0x7e>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80213d6:	490a      	ldr	r1, [pc, #40]	; (8021400 <AT_RequestSendData+0x8c>)
 80213d8:	4630      	mov	r0, r6
 80213da:	f004 f9c0 	bl	802575e <strstr>
 80213de:	b950      	cbnz	r0, 80213f6 <AT_RequestSendData+0x82>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80213e0:	2002      	movs	r0, #2
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
}
 80213e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80213e6:	3004      	adds	r0, #4
 80213e8:	d1fa      	bne.n	80213e0 <AT_RequestSendData+0x6c>
        return ES_WIFI_STATUS_MODULE_CRASH;
 80213ea:	2006      	movs	r0, #6
 80213ec:	e7f9      	b.n	80213e2 <AT_RequestSendData+0x6e>
  return ES_WIFI_STATUS_IO_ERROR;
 80213ee:	2004      	movs	r0, #4
 80213f0:	e7f7      	b.n	80213e2 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 80213f2:	4620      	mov	r0, r4
 80213f4:	e7f5      	b.n	80213e2 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80213f6:	2005      	movs	r0, #5
 80213f8:	e7f3      	b.n	80213e2 <AT_RequestSendData+0x6e>
 80213fa:	bf00      	nop
 80213fc:	08026f62 	.word	0x08026f62
 8021400:	08026f6b 	.word	0x08026f6b

08021404 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8021404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8021408:	f247 5330 	movw	r3, #30000	; 0x7530
 802140c:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8
{
 8021410:	4604      	mov	r4, r0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8021412:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8021416:	2000      	movs	r0, #0
 8021418:	4798      	blx	r3
 802141a:	2800      	cmp	r0, #0
 802141c:	d14b      	bne.n	80214b6 <ES_WIFI_Init+0xb2>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 802141e:	4927      	ldr	r1, [pc, #156]	; (80214bc <ES_WIFI_Init+0xb8>)
 8021420:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8021424:	4620      	mov	r0, r4
 8021426:	f7ff ff69 	bl	80212fc <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 802142a:	4605      	mov	r5, r0
 802142c:	b960      	cbnz	r0, 8021448 <ES_WIFI_Init+0x44>
  ptr = strtok((char *)pdata + 2, ",");
 802142e:	4924      	ldr	r1, [pc, #144]	; (80214c0 <ES_WIFI_Init+0xbc>)
      ptr = strtok(ptr, "\r");
 8021430:	4f24      	ldr	r7, [pc, #144]	; (80214c4 <ES_WIFI_Init+0xc0>)
    ptr = strtok(NULL, ",");
 8021432:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80214c0 <ES_WIFI_Init+0xbc>
  ptr = strtok((char *)pdata + 2, ",");
 8021436:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 802143a:	f004 f9a7 	bl	802578c <strtok>
  while (ptr != NULL){
 802143e:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8021440:	f104 0868 	add.w	r8, r4, #104	; 0x68
 8021444:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8021446:	b910      	cbnz	r0, 802144e <ES_WIFI_Init+0x4a>
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8021448:	4628      	mov	r0, r5
 802144a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 802144e:	2b06      	cmp	r3, #6
 8021450:	d824      	bhi.n	802149c <ES_WIFI_Init+0x98>
 8021452:	e8df f003 	tbb	[pc, r3]
 8021456:	0a04      	.short	0x0a04
 8021458:	1e19140f 	.word	0x1e19140f
 802145c:	29          	.byte	0x29
 802145d:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 802145e:	4601      	mov	r1, r0
 8021460:	2220      	movs	r2, #32
 8021462:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8021464:	f004 f968 	bl	8025738 <strncpy>
      break;
 8021468:	e018      	b.n	802149c <ES_WIFI_Init+0x98>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 802146a:	4601      	mov	r1, r0
 802146c:	2218      	movs	r2, #24
 802146e:	f104 0020 	add.w	r0, r4, #32
 8021472:	e7f7      	b.n	8021464 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8021474:	4601      	mov	r1, r0
 8021476:	2210      	movs	r2, #16
 8021478:	f104 0038 	add.w	r0, r4, #56	; 0x38
 802147c:	e7f2      	b.n	8021464 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 802147e:	4601      	mov	r1, r0
 8021480:	2210      	movs	r2, #16
 8021482:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8021486:	e7ed      	b.n	8021464 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8021488:	4601      	mov	r1, r0
 802148a:	2210      	movs	r2, #16
 802148c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021490:	e7e8      	b.n	8021464 <ES_WIFI_Init+0x60>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8021492:	2100      	movs	r1, #0
 8021494:	f7ff fec9 	bl	802122a <ParseNumber>
 8021498:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ptr = strtok(NULL, ",");
 802149c:	4649      	mov	r1, r9
 802149e:	2000      	movs	r0, #0
 80214a0:	f004 f974 	bl	802578c <strtok>
 80214a4:	3601      	adds	r6, #1
 80214a6:	e7cd      	b.n	8021444 <ES_WIFI_Init+0x40>
      ptr = strtok(ptr, "\r");
 80214a8:	4639      	mov	r1, r7
 80214aa:	f004 f96f 	bl	802578c <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80214ae:	2220      	movs	r2, #32
      ptr = strtok(ptr, "\r");
 80214b0:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80214b2:	4640      	mov	r0, r8
 80214b4:	e7d6      	b.n	8021464 <ES_WIFI_Init+0x60>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80214b6:	2502      	movs	r5, #2
 80214b8:	e7c6      	b.n	8021448 <ES_WIFI_Init+0x44>
 80214ba:	bf00      	nop
 80214bc:	08026f93 	.word	0x08026f93
 80214c0:	08027176 	.word	0x08027176
 80214c4:	0802705e 	.word	0x0802705e

080214c8 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 80214c8:	b530      	push	{r4, r5, lr}
 80214ca:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80214ce:	b158      	cbz	r0, 80214e8 <ES_WIFI_RegisterBusIO+0x20>
 80214d0:	b151      	cbz	r1, 80214e8 <ES_WIFI_RegisterBusIO+0x20>
 80214d2:	b14a      	cbz	r2, 80214e8 <ES_WIFI_RegisterBusIO+0x20>
 80214d4:	b145      	cbz	r5, 80214e8 <ES_WIFI_RegisterBusIO+0x20>
 80214d6:	b13c      	cbz	r4, 80214e8 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 80214d8:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 80214dc:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 80214e0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80214e4:	2000      	movs	r0, #0
}
 80214e6:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 80214e8:	2002      	movs	r0, #2
 80214ea:	e7fc      	b.n	80214e6 <ES_WIFI_RegisterBusIO+0x1e>

080214ec <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80214ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80214ee:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 80214f2:	4605      	mov	r5, r0
 80214f4:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80214f6:	4620      	mov	r0, r4
 80214f8:	460a      	mov	r2, r1
 80214fa:	4918      	ldr	r1, [pc, #96]	; (802155c <ES_WIFI_Connect+0x70>)
{
 80214fc:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80214fe:	f004 f8f3 	bl	80256e8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021502:	4622      	mov	r2, r4
 8021504:	4621      	mov	r1, r4
 8021506:	4628      	mov	r0, r5
 8021508:	f7ff fef8 	bl	80212fc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 802150c:	bb20      	cbnz	r0, 8021558 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 802150e:	4914      	ldr	r1, [pc, #80]	; (8021560 <ES_WIFI_Connect+0x74>)
 8021510:	463a      	mov	r2, r7
 8021512:	4620      	mov	r0, r4
 8021514:	f004 f8e8 	bl	80256e8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021518:	4622      	mov	r2, r4
 802151a:	4621      	mov	r1, r4
 802151c:	4628      	mov	r0, r5
 802151e:	f7ff feed 	bl	80212fc <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8021522:	b9c8      	cbnz	r0, 8021558 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8021524:	490f      	ldr	r1, [pc, #60]	; (8021564 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8021526:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 802152a:	4632      	mov	r2, r6
 802152c:	4620      	mov	r0, r4
 802152e:	f004 f8db 	bl	80256e8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021532:	4622      	mov	r2, r4
 8021534:	4621      	mov	r1, r4
 8021536:	4628      	mov	r0, r5
 8021538:	f7ff fee0 	bl	80212fc <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 802153c:	b960      	cbnz	r0, 8021558 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 802153e:	490a      	ldr	r1, [pc, #40]	; (8021568 <ES_WIFI_Connect+0x7c>)
 8021540:	4620      	mov	r0, r4
 8021542:	f004 f8f1 	bl	8025728 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021546:	4622      	mov	r2, r4
 8021548:	4621      	mov	r1, r4
 802154a:	4628      	mov	r0, r5
 802154c:	f7ff fed6 	bl	80212fc <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8021550:	b910      	cbnz	r0, 8021558 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8021552:	2301      	movs	r3, #1
 8021554:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8021558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802155a:	bf00      	nop
 802155c:	08026fa6 	.word	0x08026fa6
 8021560:	08026fad 	.word	0x08026fad
 8021564:	08026fb4 	.word	0x08026fb4
 8021568:	08026fbb 	.word	0x08026fbb

0802156c <ES_WIFI_IsConnected>:
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 802156c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8021570:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"CS\r");
 8021572:	490b      	ldr	r1, [pc, #44]	; (80215a0 <ES_WIFI_IsConnected+0x34>)
{
 8021574:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"CS\r");
 8021576:	4610      	mov	r0, r2
 8021578:	f004 f8d6 	bl	8025728 <strcpy>
 802157c:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 802157e:	4601      	mov	r1, r0
 8021580:	4620      	mov	r0, r4
 8021582:	f7ff febb 	bl	80212fc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8021586:	b938      	cbnz	r0, 8021598 <ES_WIFI_IsConnected+0x2c>
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8021588:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 802158c:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8021590:	4253      	negs	r3, r2
 8021592:	4153      	adcs	r3, r2
 8021594:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8021598:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 802159c:	bd10      	pop	{r4, pc}
 802159e:	bf00      	nop
 80215a0:	08026fbf 	.word	0x08026fbf

080215a4 <ES_WIFI_GetNetworkSettings>:
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 80215a4:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 80215a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 80215ac:	4935      	ldr	r1, [pc, #212]	; (8021684 <ES_WIFI_GetNetworkSettings+0xe0>)
{
 80215ae:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 80215b0:	4610      	mov	r0, r2
 80215b2:	f004 f8b9 	bl	8025728 <strcpy>
 80215b6:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80215b8:	4601      	mov	r1, r0
 80215ba:	4620      	mov	r0, r4
 80215bc:	f7ff fe9e 	bl	80212fc <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 80215c0:	4606      	mov	r6, r0
 80215c2:	b960      	cbnz	r0, 80215de <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 80215c4:	4930      	ldr	r1, [pc, #192]	; (8021688 <ES_WIFI_GetNetworkSettings+0xe4>)
    ptr = strtok(NULL, ",");
 80215c6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8021688 <ES_WIFI_GetNetworkSettings+0xe4>
  ptr = strtok(pdata + 2, ",");
 80215ca:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80215ce:	f004 f8dd 	bl	802578c <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80215d2:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 80215d6:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2);
 80215d8:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 80215dc:	b910      	cbnz	r0, 80215e4 <ES_WIFI_GetNetworkSettings+0x40>
  }

  UNLOCK_WIFI();
  return ret;
}
 80215de:	4630      	mov	r0, r6
 80215e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 80215e4:	2d0b      	cmp	r5, #11
 80215e6:	d80c      	bhi.n	8021602 <ES_WIFI_GetNetworkSettings+0x5e>
 80215e8:	e8df f005 	tbb	[pc, r5]
 80215ec:	241e1906 	.word	0x241e1906
 80215f0:	3835302a 	.word	0x3835302a
 80215f4:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80215f8:	4601      	mov	r1, r0
 80215fa:	2221      	movs	r2, #33	; 0x21
 80215fc:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80215fe:	f004 f89b 	bl	8025738 <strncpy>
    ptr = strtok(NULL, ",");
 8021602:	4649      	mov	r1, r9
 8021604:	2000      	movs	r0, #0
 8021606:	f004 f8c1 	bl	802578c <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 802160a:	2800      	cmp	r0, #0
 802160c:	d0e7      	beq.n	80215de <ES_WIFI_GetNetworkSettings+0x3a>
 802160e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8021612:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8021614:	bf14      	ite	ne
 8021616:	3501      	addne	r5, #1
      num++;
 8021618:	3502      	addeq	r5, #2
 802161a:	b2ed      	uxtb	r5, r5
 802161c:	e7de      	b.n	80215dc <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 802161e:	4601      	mov	r1, r0
 8021620:	2221      	movs	r2, #33	; 0x21
 8021622:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 8021626:	e7ea      	b.n	80215fe <ES_WIFI_GetNetworkSettings+0x5a>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8021628:	2100      	movs	r1, #0
 802162a:	f7ff fdfe 	bl	802122a <ParseNumber>
 802162e:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 8021632:	e7e6      	b.n	8021602 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8021634:	2100      	movs	r1, #0
 8021636:	f7ff fdf8 	bl	802122a <ParseNumber>
 802163a:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 802163e:	e7e0      	b.n	8021602 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8021640:	2100      	movs	r1, #0
 8021642:	f7ff fdf2 	bl	802122a <ParseNumber>
 8021646:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 802164a:	e7da      	b.n	8021602 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Addr);
 802164c:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask);
 8021650:	f7ff fe3a 	bl	80212c8 <ParseIP>
      break;
 8021654:	e7d5      	b.n	8021602 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Mask);
 8021656:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 802165a:	e7f9      	b.n	8021650 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 802165c:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 8021660:	e7f6      	b.n	8021650 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS1);
 8021662:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 8021666:	e7f3      	b.n	8021650 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS2);
 8021668:	4641      	mov	r1, r8
 802166a:	e7f1      	b.n	8021650 <ES_WIFI_GetNetworkSettings+0xac>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 802166c:	2100      	movs	r1, #0
 802166e:	f7ff fddc 	bl	802122a <ParseNumber>
 8021672:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 8021676:	e7c4      	b.n	8021602 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8021678:	2100      	movs	r1, #0
 802167a:	f7ff fdd6 	bl	802122a <ParseNumber>
 802167e:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 8021682:	e7be      	b.n	8021602 <ES_WIFI_GetNetworkSettings+0x5e>
 8021684:	08026fc7 	.word	0x08026fc7
 8021688:	08027176 	.word	0x08027176

0802168c <ES_WIFI_GetMACAddress>:
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 802168c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8021690:	b570      	push	{r4, r5, r6, lr}
 8021692:	4604      	mov	r4, r0
 8021694:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 8021696:	4610      	mov	r0, r2
 8021698:	4909      	ldr	r1, [pc, #36]	; (80216c0 <ES_WIFI_GetMACAddress+0x34>)
 802169a:	f004 f845 	bl	8025728 <strcpy>
 802169e:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80216a0:	4601      	mov	r1, r0
 80216a2:	4620      	mov	r0, r4
 80216a4:	f7ff fe2a 	bl	80212fc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80216a8:	4605      	mov	r5, r0
 80216aa:	b938      	cbnz	r0, 80216bc <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80216ac:	4905      	ldr	r1, [pc, #20]	; (80216c4 <ES_WIFI_GetMACAddress+0x38>)
 80216ae:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80216b2:	f004 f86b 	bl	802578c <strtok>
    ParseMAC(ptr, mac) ;
 80216b6:	4631      	mov	r1, r6
 80216b8:	f7ff fdd3 	bl	8021262 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
}
 80216bc:	4628      	mov	r0, r5
 80216be:	bd70      	pop	{r4, r5, r6, pc}
 80216c0:	08027008 	.word	0x08027008
 80216c4:	08027235 	.word	0x08027235

080216c8 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80216c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80216ca:	780b      	ldrb	r3, [r1, #0]
{
 80216cc:	4605      	mov	r5, r0
 80216ce:	460e      	mov	r6, r1
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80216d0:	b10b      	cbz	r3, 80216d6 <ES_WIFI_StartClientConnection+0xe>
 80216d2:	2b03      	cmp	r3, #3
 80216d4:	d102      	bne.n	80216dc <ES_WIFI_StartClientConnection+0x14>
 80216d6:	8873      	ldrh	r3, [r6, #2]
 80216d8:	2b00      	cmp	r3, #0
 80216da:	d064      	beq.n	80217a6 <ES_WIFI_StartClientConnection+0xde>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80216dc:	f505 7494 	add.w	r4, r5, #296	; 0x128
 80216e0:	7872      	ldrb	r2, [r6, #1]
 80216e2:	4932      	ldr	r1, [pc, #200]	; (80217ac <ES_WIFI_StartClientConnection+0xe4>)
 80216e4:	4620      	mov	r0, r4
 80216e6:	f003 ffff 	bl	80256e8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80216ea:	4622      	mov	r2, r4
 80216ec:	4621      	mov	r1, r4
 80216ee:	4628      	mov	r0, r5
 80216f0:	f7ff fe04 	bl	80212fc <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80216f4:	2800      	cmp	r0, #0
 80216f6:	d146      	bne.n	8021786 <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80216f8:	7832      	ldrb	r2, [r6, #0]
 80216fa:	492d      	ldr	r1, [pc, #180]	; (80217b0 <ES_WIFI_StartClientConnection+0xe8>)
 80216fc:	4620      	mov	r0, r4
 80216fe:	f003 fff3 	bl	80256e8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021702:	4622      	mov	r2, r4
 8021704:	4621      	mov	r1, r4
 8021706:	4628      	mov	r0, r5
 8021708:	f7ff fdf8 	bl	80212fc <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 802170c:	2800      	cmp	r0, #0
 802170e:	d13a      	bne.n	8021786 <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8021710:	88b2      	ldrh	r2, [r6, #4]
 8021712:	4928      	ldr	r1, [pc, #160]	; (80217b4 <ES_WIFI_StartClientConnection+0xec>)
 8021714:	4620      	mov	r0, r4
 8021716:	f003 ffe7 	bl	80256e8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 802171a:	4622      	mov	r2, r4
 802171c:	4621      	mov	r1, r4
 802171e:	4628      	mov	r0, r5
 8021720:	f7ff fdec 	bl	80212fc <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8021724:	bb78      	cbnz	r0, 8021786 <ES_WIFI_StartClientConnection+0xbe>
 8021726:	7833      	ldrb	r3, [r6, #0]
 8021728:	b30b      	cbz	r3, 802176e <ES_WIFI_StartClientConnection+0xa6>
 802172a:	2b03      	cmp	r3, #3
 802172c:	d01f      	beq.n	802176e <ES_WIFI_StartClientConnection+0xa6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 802172e:	7833      	ldrb	r3, [r6, #0]
 8021730:	bb5b      	cbnz	r3, 802178a <ES_WIFI_StartClientConnection+0xc2>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8021732:	7a73      	ldrb	r3, [r6, #9]
 8021734:	9301      	str	r3, [sp, #4]
 8021736:	7a33      	ldrb	r3, [r6, #8]
 8021738:	79b2      	ldrb	r2, [r6, #6]
 802173a:	491f      	ldr	r1, [pc, #124]	; (80217b8 <ES_WIFI_StartClientConnection+0xf0>)
 802173c:	9300      	str	r3, [sp, #0]
 802173e:	4620      	mov	r0, r4
 8021740:	79f3      	ldrb	r3, [r6, #7]
 8021742:	f003 ffd1 	bl	80256e8 <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021746:	4622      	mov	r2, r4
 8021748:	4621      	mov	r1, r4
 802174a:	4628      	mov	r0, r5
 802174c:	f7ff fdd6 	bl	80212fc <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8021750:	b9c8      	cbnz	r0, 8021786 <ES_WIFI_StartClientConnection+0xbe>
 8021752:	7833      	ldrb	r3, [r6, #0]
 8021754:	2b03      	cmp	r3, #3
 8021756:	d11a      	bne.n	802178e <ES_WIFI_StartClientConnection+0xc6>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8021758:	4918      	ldr	r1, [pc, #96]	; (80217bc <ES_WIFI_StartClientConnection+0xf4>)
 802175a:	4620      	mov	r0, r4
 802175c:	f003 ffe4 	bl	8025728 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021760:	4622      	mov	r2, r4
 8021762:	4621      	mov	r1, r4
 8021764:	4628      	mov	r0, r5
 8021766:	f7ff fdc9 	bl	80212fc <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 802176a:	b180      	cbz	r0, 802178e <ES_WIFI_StartClientConnection+0xc6>
 802176c:	e00b      	b.n	8021786 <ES_WIFI_StartClientConnection+0xbe>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 802176e:	8872      	ldrh	r2, [r6, #2]
 8021770:	4913      	ldr	r1, [pc, #76]	; (80217c0 <ES_WIFI_StartClientConnection+0xf8>)
 8021772:	4620      	mov	r0, r4
 8021774:	f003 ffb8 	bl	80256e8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021778:	4622      	mov	r2, r4
 802177a:	4621      	mov	r1, r4
 802177c:	4628      	mov	r0, r5
 802177e:	f7ff fdbd 	bl	80212fc <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8021782:	2800      	cmp	r0, #0
 8021784:	d0d3      	beq.n	802172e <ES_WIFI_StartClientConnection+0x66>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8021786:	b002      	add	sp, #8
 8021788:	bd70      	pop	{r4, r5, r6, pc}
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 802178a:	2b03      	cmp	r3, #3
 802178c:	d0d1      	beq.n	8021732 <ES_WIFI_StartClientConnection+0x6a>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 802178e:	490d      	ldr	r1, [pc, #52]	; (80217c4 <ES_WIFI_StartClientConnection+0xfc>)
 8021790:	4620      	mov	r0, r4
 8021792:	f003 ffc9 	bl	8025728 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021796:	4622      	mov	r2, r4
 8021798:	4621      	mov	r1, r4
 802179a:	4628      	mov	r0, r5
}
 802179c:	b002      	add	sp, #8
 802179e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80217a2:	f7ff bdab 	b.w	80212fc <AT_ExecuteCommand>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80217a6:	2002      	movs	r0, #2
 80217a8:	e7ed      	b.n	8021786 <ES_WIFI_StartClientConnection+0xbe>
 80217aa:	bf00      	nop
 80217ac:	08027067 	.word	0x08027067
 80217b0:	0802706e 	.word	0x0802706e
 80217b4:	08027075 	.word	0x08027075
 80217b8:	08027089 	.word	0x08027089
 80217bc:	08027099 	.word	0x08027099
 80217c0:	0802707c 	.word	0x0802707c
 80217c4:	08027083 	.word	0x08027083

080217c8 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80217c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80217cc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 80217d0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80217d4:	bf28      	it	cs
 80217d6:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80217da:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 80217de:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 80217e0:	f8a8 3000 	strh.w	r3, [r8]
{
 80217e4:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80217e6:	4628      	mov	r0, r5
 80217e8:	460a      	mov	r2, r1
 80217ea:	492e      	ldr	r1, [pc, #184]	; (80218a4 <ES_WIFI_SendData+0xdc>)
 80217ec:	461f      	mov	r7, r3
 80217ee:	f003 ff7b 	bl	80256e8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80217f2:	462a      	mov	r2, r5
 80217f4:	4629      	mov	r1, r5
 80217f6:	4630      	mov	r0, r6
 80217f8:	f7ff fd80 	bl	80212fc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80217fc:	4604      	mov	r4, r0
 80217fe:	2800      	cmp	r0, #0
 8021800:	d147      	bne.n	8021892 <ES_WIFI_SendData+0xca>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8021802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021804:	4928      	ldr	r1, [pc, #160]	; (80218a8 <ES_WIFI_SendData+0xe0>)
 8021806:	2a01      	cmp	r2, #1
 8021808:	bf38      	it	cc
 802180a:	2201      	movcc	r2, #1
 802180c:	4628      	mov	r0, r5
 802180e:	f003 ff6b 	bl	80256e8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021812:	462a      	mov	r2, r5
 8021814:	4629      	mov	r1, r5
 8021816:	4630      	mov	r0, r6
 8021818:	f7ff fd70 	bl	80212fc <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 802181c:	4604      	mov	r4, r0
 802181e:	bb80      	cbnz	r0, 8021882 <ES_WIFI_SendData+0xba>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8021820:	4922      	ldr	r1, [pc, #136]	; (80218ac <ES_WIFI_SendData+0xe4>)
 8021822:	463a      	mov	r2, r7
 8021824:	4628      	mov	r0, r5
 8021826:	f003 ff5f 	bl	80256e8 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 802182a:	9500      	str	r5, [sp, #0]
 802182c:	463b      	mov	r3, r7
 802182e:	464a      	mov	r2, r9
 8021830:	4629      	mov	r1, r5
 8021832:	4630      	mov	r0, r6
 8021834:	f7ff fd9e 	bl	8021374 <AT_RequestSendData>

      if(ret == ES_WIFI_STATUS_OK)
 8021838:	4604      	mov	r4, r0
 802183a:	b998      	cbnz	r0, 8021864 <ES_WIFI_SendData+0x9c>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 802183c:	491c      	ldr	r1, [pc, #112]	; (80218b0 <ES_WIFI_SendData+0xe8>)
 802183e:	4628      	mov	r0, r5
 8021840:	f003 ff8d 	bl	802575e <strstr>
 8021844:	b1c8      	cbz	r0, 802187a <ES_WIFI_SendData+0xb2>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8021846:	491b      	ldr	r1, [pc, #108]	; (80218b4 <ES_WIFI_SendData+0xec>)
 8021848:	481b      	ldr	r0, [pc, #108]	; (80218b8 <ES_WIFI_SendData+0xf0>)
 802184a:	f640 0267 	movw	r2, #2151	; 0x867
 802184e:	f003 febd 	bl	80255cc <iprintf>
 8021852:	481a      	ldr	r0, [pc, #104]	; (80218bc <ES_WIFI_SendData+0xf4>)
 8021854:	4629      	mov	r1, r5
 8021856:	f003 feb9 	bl	80255cc <iprintf>
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 802185a:	2300      	movs	r3, #0
 802185c:	f8a8 3000 	strh.w	r3, [r8]
 8021860:	2402      	movs	r4, #2
 8021862:	e00a      	b.n	802187a <ES_WIFI_SendData+0xb2>
        DEBUG("Send Data command failed\n");
 8021864:	4913      	ldr	r1, [pc, #76]	; (80218b4 <ES_WIFI_SendData+0xec>)
 8021866:	4814      	ldr	r0, [pc, #80]	; (80218b8 <ES_WIFI_SendData+0xf0>)
 8021868:	f640 026d 	movw	r2, #2157	; 0x86d
 802186c:	f003 feae 	bl	80255cc <iprintf>
 8021870:	4813      	ldr	r0, [pc, #76]	; (80218c0 <ES_WIFI_SendData+0xf8>)
   DEBUG("P0 command failed\n");
 8021872:	f003 ff31 	bl	80256d8 <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 8021876:	2c02      	cmp	r4, #2
 8021878:	d0ef      	beq.n	802185a <ES_WIFI_SendData+0x92>
  }
  UNLOCK_WIFI();
  return ret;
}
 802187a:	4620      	mov	r0, r4
 802187c:	b003      	add	sp, #12
 802187e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n");
 8021882:	490c      	ldr	r1, [pc, #48]	; (80218b4 <ES_WIFI_SendData+0xec>)
 8021884:	480c      	ldr	r0, [pc, #48]	; (80218b8 <ES_WIFI_SendData+0xf0>)
 8021886:	f640 0272 	movw	r2, #2162	; 0x872
 802188a:	f003 fe9f 	bl	80255cc <iprintf>
 802188e:	480d      	ldr	r0, [pc, #52]	; (80218c4 <ES_WIFI_SendData+0xfc>)
 8021890:	e7ef      	b.n	8021872 <ES_WIFI_SendData+0xaa>
   DEBUG("P0 command failed\n");
 8021892:	4908      	ldr	r1, [pc, #32]	; (80218b4 <ES_WIFI_SendData+0xec>)
 8021894:	4808      	ldr	r0, [pc, #32]	; (80218b8 <ES_WIFI_SendData+0xf0>)
 8021896:	f640 0277 	movw	r2, #2167	; 0x877
 802189a:	f003 fe97 	bl	80255cc <iprintf>
 802189e:	480a      	ldr	r0, [pc, #40]	; (80218c8 <ES_WIFI_SendData+0x100>)
 80218a0:	e7e7      	b.n	8021872 <ES_WIFI_SendData+0xaa>
 80218a2:	bf00      	nop
 80218a4:	08027067 	.word	0x08027067
 80218a8:	08027222 	.word	0x08027222
 80218ac:	0802722a 	.word	0x0802722a
 80218b0:	08027233 	.word	0x08027233
 80218b4:	080270db 	.word	0x080270db
 80218b8:	08027133 	.word	0x08027133
 80218bc:	08027238 	.word	0x08027238
 80218c0:	08027253 	.word	0x08027253
 80218c4:	0802726c 	.word	0x0802726c
 80218c8:	0802727e 	.word	0x0802727e

080218cc <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80218cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t        loop_per_us = 0;
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 80218ce:	4c17      	ldr	r4, [pc, #92]	; (802192c <SPI_WIFI_DelayUs+0x60>)
 80218d0:	4f17      	ldr	r7, [pc, #92]	; (8021930 <SPI_WIFI_DelayUs+0x64>)
  volatile        uint32_t ct = 0;
 80218d2:	2300      	movs	r3, #0
 80218d4:	9301      	str	r3, [sp, #4]
  if (cycle_per_loop == 0 ) 
 80218d6:	6823      	ldr	r3, [r4, #0]
{
 80218d8:	4605      	mov	r5, r0
  if (cycle_per_loop == 0 ) 
 80218da:	b98b      	cbnz	r3, 8021900 <SPI_WIFI_DelayUs+0x34>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 80218dc:	683b      	ldr	r3, [r7, #0]
 80218de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80218e2:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t t = 0;
     ct = cycle_per_ms;
 80218e6:	9301      	str	r3, [sp, #4]
     t = HAL_GetTick();
 80218e8:	f000 fc20 	bl	802212c <HAL_GetTick>
 80218ec:	4606      	mov	r6, r0
     while(ct) ct--;
 80218ee:	9b01      	ldr	r3, [sp, #4]
 80218f0:	b99b      	cbnz	r3, 802191a <SPI_WIFI_DelayUs+0x4e>
     cycle_per_loop = HAL_GetTick()-t;
 80218f2:	f000 fc1b 	bl	802212c <HAL_GetTick>
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80218f6:	1b80      	subs	r0, r0, r6
 80218f8:	bf0a      	itet	eq
 80218fa:	2301      	moveq	r3, #1
     cycle_per_loop = HAL_GetTick()-t;
 80218fc:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80218fe:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8021900:	4b0c      	ldr	r3, [pc, #48]	; (8021934 <SPI_WIFI_DelayUs+0x68>)
 8021902:	6838      	ldr	r0, [r7, #0]
 8021904:	fbb0 f0f3 	udiv	r0, r0, r3
 8021908:	6823      	ldr	r3, [r4, #0]
 802190a:	fbb0 f0f3 	udiv	r0, r0, r3
  ct = n * loop_per_us;
 802190e:	4368      	muls	r0, r5
 8021910:	9001      	str	r0, [sp, #4]
  while(ct) ct--;
 8021912:	9b01      	ldr	r3, [sp, #4]
 8021914:	b92b      	cbnz	r3, 8021922 <SPI_WIFI_DelayUs+0x56>
  return;
}
 8021916:	b003      	add	sp, #12
 8021918:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 802191a:	9b01      	ldr	r3, [sp, #4]
 802191c:	3b01      	subs	r3, #1
 802191e:	9301      	str	r3, [sp, #4]
 8021920:	e7e5      	b.n	80218ee <SPI_WIFI_DelayUs+0x22>
  while(ct) ct--;
 8021922:	9b01      	ldr	r3, [sp, #4]
 8021924:	3b01      	subs	r3, #1
 8021926:	9301      	str	r3, [sp, #4]
 8021928:	e7f3      	b.n	8021912 <SPI_WIFI_DelayUs+0x46>
 802192a:	bf00      	nop
 802192c:	200000a4 	.word	0x200000a4
 8021930:	20000018 	.word	0x20000018
 8021934:	000f4240 	.word	0x000f4240

08021938 <wait_spi_tx_event>:
{
 8021938:	b570      	push	{r4, r5, r6, lr}
 802193a:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 802193c:	f000 fbf6 	bl	802212c <HAL_GetTick>
  while (spi_tx_event==1)
 8021940:	4e07      	ldr	r6, [pc, #28]	; (8021960 <wait_spi_tx_event+0x28>)
  int tickstart = HAL_GetTick();
 8021942:	4604      	mov	r4, r0
  while (spi_tx_event==1)
 8021944:	6873      	ldr	r3, [r6, #4]
 8021946:	2b01      	cmp	r3, #1
 8021948:	d001      	beq.n	802194e <wait_spi_tx_event+0x16>
  return 0;
 802194a:	2000      	movs	r0, #0
}
 802194c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 802194e:	f000 fbed 	bl	802212c <HAL_GetTick>
 8021952:	1b00      	subs	r0, r0, r4
 8021954:	42a8      	cmp	r0, r5
 8021956:	d9f5      	bls.n	8021944 <wait_spi_tx_event+0xc>
      return -1;
 8021958:	f04f 30ff 	mov.w	r0, #4294967295
 802195c:	e7f6      	b.n	802194c <wait_spi_tx_event+0x14>
 802195e:	bf00      	nop
 8021960:	200000a4 	.word	0x200000a4

08021964 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8021964:	4b3f      	ldr	r3, [pc, #252]	; (8021a64 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8021966:	4840      	ldr	r0, [pc, #256]	; (8021a68 <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8021968:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 802196a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 802196c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021970:	659a      	str	r2, [r3, #88]	; 0x58
 8021972:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8021974:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 8021976:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 802197a:	9201      	str	r2, [sp, #4]
 802197c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802197e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021980:	f042 0202 	orr.w	r2, r2, #2
 8021984:	64da      	str	r2, [r3, #76]	; 0x4c
 8021986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021988:	f002 0202 	and.w	r2, r2, #2
 802198c:	9202      	str	r2, [sp, #8]
 802198e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8021990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021992:	f042 0204 	orr.w	r2, r2, #4
 8021996:	64da      	str	r2, [r3, #76]	; 0x4c
 8021998:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802199a:	f002 0204 	and.w	r2, r2, #4
 802199e:	9203      	str	r2, [sp, #12]
 80219a0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80219a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80219a4:	f042 0210 	orr.w	r2, r2, #16
 80219a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80219aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80219ac:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80219b0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80219b2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80219b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80219b8:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 80219ba:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80219bc:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80219be:	f001 f989 	bl	8022cd4 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80219c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80219c6:	a905      	add	r1, sp, #20
 80219c8:	4827      	ldr	r0, [pc, #156]	; (8021a68 <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80219ca:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80219ce:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80219d2:	f001 f89b 	bl	8022b0c <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80219d6:	4b25      	ldr	r3, [pc, #148]	; (8021a6c <SPI_WIFI_MspInit+0x108>)
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80219d8:	4825      	ldr	r0, [pc, #148]	; (8021a70 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80219da:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80219dc:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80219de:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80219e2:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80219e6:	f001 f891 	bl	8022b0c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 80219ea:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80219ee:	a905      	add	r1, sp, #20
 80219f0:	481f      	ldr	r0, [pc, #124]	; (8021a70 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = 0;
 80219f2:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80219f4:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80219f8:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80219fc:	f001 f886 	bl	8022b0c <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8021a00:	4622      	mov	r2, r4
 8021a02:	4621      	mov	r1, r4
 8021a04:	481a      	ldr	r0, [pc, #104]	; (8021a70 <SPI_WIFI_MspInit+0x10c>)
 8021a06:	f001 f965 	bl	8022cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8021a0a:	a905      	add	r1, sp, #20
 8021a0c:	4818      	ldr	r0, [pc, #96]	; (8021a70 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8021a0e:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8021a10:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8021a14:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8021a18:	f001 f878 	bl	8022b0c <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8021a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8021a20:	a905      	add	r1, sp, #20
 8021a22:	4814      	ldr	r0, [pc, #80]	; (8021a74 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8021a24:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8021a26:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8021a2a:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8021a2e:	f001 f86d 	bl	8022b0c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8021a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8021a36:	a905      	add	r1, sp, #20
 8021a38:	480e      	ldr	r0, [pc, #56]	; (8021a74 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8021a3a:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8021a3c:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8021a40:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8021a44:	f001 f862 	bl	8022b0c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 8021a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8021a4c:	4809      	ldr	r0, [pc, #36]	; (8021a74 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8021a4e:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8021a50:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8021a52:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8021a56:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8021a5a:	f001 f857 	bl	8022b0c <HAL_GPIO_Init>
}
 8021a5e:	b00b      	add	sp, #44	; 0x2c
 8021a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a62:	bf00      	nop
 8021a64:	40021000 	.word	0x40021000
 8021a68:	48000400 	.word	0x48000400
 8021a6c:	10110000 	.word	0x10110000
 8021a70:	48001000 	.word	0x48001000
 8021a74:	48000800 	.word	0x48000800

08021a78 <SPI_WIFI_ResetModule>:
{
 8021a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8021a7a:	f000 fb57 	bl	802212c <HAL_GetTick>
  WIFI_RESET_MODULE();
 8021a7e:	2200      	movs	r2, #0
 8021a80:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 8021a84:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 8021a86:	482e      	ldr	r0, [pc, #184]	; (8021b40 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8021a88:	4f2e      	ldr	r7, [pc, #184]	; (8021b44 <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 8021a8a:	f001 f923 	bl	8022cd4 <HAL_GPIO_WritePin>
 8021a8e:	200a      	movs	r0, #10
 8021a90:	f000 fb52 	bl	8022138 <HAL_Delay>
 8021a94:	2201      	movs	r2, #1
 8021a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8021a9a:	4829      	ldr	r0, [pc, #164]	; (8021b40 <SPI_WIFI_ResetModule+0xc8>)
 8021a9c:	f001 f91a 	bl	8022cd4 <HAL_GPIO_WritePin>
 8021aa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8021aa4:	f000 fb48 	bl	8022138 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8021aa8:	4825      	ldr	r0, [pc, #148]	; (8021b40 <SPI_WIFI_ResetModule+0xc8>)
 8021aaa:	2200      	movs	r2, #0
 8021aac:	2101      	movs	r1, #1
 8021aae:	f001 f911 	bl	8022cd4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8021ab2:	200f      	movs	r0, #15
 8021ab4:	f7ff ff0a 	bl	80218cc <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 8021ab8:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 8021aba:	4821      	ldr	r0, [pc, #132]	; (8021b40 <SPI_WIFI_ResetModule+0xc8>)
 8021abc:	2102      	movs	r1, #2
 8021abe:	f001 f903 	bl	8022cc8 <HAL_GPIO_ReadPin>
 8021ac2:	2801      	cmp	r0, #1
 8021ac4:	4602      	mov	r2, r0
 8021ac6:	d020      	beq.n	8021b0a <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS();
 8021ac8:	2201      	movs	r2, #1
 8021aca:	481d      	ldr	r0, [pc, #116]	; (8021b40 <SPI_WIFI_ResetModule+0xc8>)
 8021acc:	4611      	mov	r1, r2
 8021ace:	f001 f901 	bl	8022cd4 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8021ad2:	f89d 3000 	ldrb.w	r3, [sp]
 8021ad6:	2b15      	cmp	r3, #21
 8021ad8:	d12e      	bne.n	8021b38 <SPI_WIFI_ResetModule+0xc0>
 8021ada:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8021ade:	2b15      	cmp	r3, #21
 8021ae0:	d12a      	bne.n	8021b38 <SPI_WIFI_ResetModule+0xc0>
 8021ae2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8021ae6:	2b0d      	cmp	r3, #13
 8021ae8:	d126      	bne.n	8021b38 <SPI_WIFI_ResetModule+0xc0>
 8021aea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8021aee:	2b0a      	cmp	r3, #10
 8021af0:	d122      	bne.n	8021b38 <SPI_WIFI_ResetModule+0xc0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8021af2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8021af6:	2b3e      	cmp	r3, #62	; 0x3e
 8021af8:	d11e      	bne.n	8021b38 <SPI_WIFI_ResetModule+0xc0>
 8021afa:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8021afe:	3820      	subs	r0, #32
 8021b00:	bf18      	it	ne
 8021b02:	f04f 30ff 	movne.w	r0, #4294967295
}
 8021b06:	b003      	add	sp, #12
 8021b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8021b0a:	eb0d 0104 	add.w	r1, sp, r4
 8021b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021b12:	4638      	mov	r0, r7
 8021b14:	f002 fce3 	bl	80244de <HAL_SPI_Receive>
 8021b18:	4606      	mov	r6, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8021b1a:	f000 fb07 	bl	802212c <HAL_GetTick>
 8021b1e:	1b40      	subs	r0, r0, r5
    count += 2;
 8021b20:	3402      	adds	r4, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8021b22:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8021b26:	b2e4      	uxtb	r4, r4
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8021b28:	d201      	bcs.n	8021b2e <SPI_WIFI_ResetModule+0xb6>
 8021b2a:	2e00      	cmp	r6, #0
 8021b2c:	d0c5      	beq.n	8021aba <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS();
 8021b2e:	2201      	movs	r2, #1
 8021b30:	4803      	ldr	r0, [pc, #12]	; (8021b40 <SPI_WIFI_ResetModule+0xc8>)
 8021b32:	4611      	mov	r1, r2
 8021b34:	f001 f8ce 	bl	8022cd4 <HAL_GPIO_WritePin>
    return -1;
 8021b38:	f04f 30ff 	mov.w	r0, #4294967295
 8021b3c:	e7e3      	b.n	8021b06 <SPI_WIFI_ResetModule+0x8e>
 8021b3e:	bf00      	nop
 8021b40:	48001000 	.word	0x48001000
 8021b44:	200001bc 	.word	0x200001bc

08021b48 <SPI_WIFI_Init>:
{
 8021b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8021b4a:	4605      	mov	r5, r0
 8021b4c:	bb78      	cbnz	r0, 8021bae <SPI_WIFI_Init+0x66>
    hspi.Instance               = SPI3;
 8021b4e:	4c1c      	ldr	r4, [pc, #112]	; (8021bc0 <SPI_WIFI_Init+0x78>)
 8021b50:	4b1c      	ldr	r3, [pc, #112]	; (8021bc4 <SPI_WIFI_Init+0x7c>)
 8021b52:	6023      	str	r3, [r4, #0]
    SPI_WIFI_MspInit(&hspi);
 8021b54:	4620      	mov	r0, r4
 8021b56:	f7ff ff05 	bl	8021964 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8021b5a:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8021b5e:	e9c4 3501 	strd	r3, r5, [r4, #4]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8021b62:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8021b66:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8021b6a:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8021b6e:	4620      	mov	r0, r4
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8021b70:	2310      	movs	r3, #16
 8021b72:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8021b76:	e9c4 5508 	strd	r5, r5, [r4, #32]
    hspi.Init.CRCPolynomial     = 0;
 8021b7a:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8021b7e:	6165      	str	r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8021b80:	f002 fa57 	bl	8024032 <HAL_SPI_Init>
 8021b84:	4602      	mov	r2, r0
 8021b86:	b9b8      	cbnz	r0, 8021bb8 <SPI_WIFI_Init+0x70>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8021b88:	4601      	mov	r1, r0
 8021b8a:	9001      	str	r0, [sp, #4]
 8021b8c:	2007      	movs	r0, #7
 8021b8e:	f000 ff41 	bl	8022a14 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8021b92:	2007      	movs	r0, #7
 8021b94:	f000 ff70 	bl	8022a78 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8021b98:	9a01      	ldr	r2, [sp, #4]
 8021b9a:	2033      	movs	r0, #51	; 0x33
 8021b9c:	4611      	mov	r1, r2
 8021b9e:	f000 ff39 	bl	8022a14 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8021ba2:	2033      	movs	r0, #51	; 0x33
 8021ba4:	f000 ff68 	bl	8022a78 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8021ba8:	200a      	movs	r0, #10
 8021baa:	f7ff fe8f 	bl	80218cc <SPI_WIFI_DelayUs>
}
 8021bae:	b003      	add	sp, #12
 8021bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc= SPI_WIFI_ResetModule();
 8021bb4:	f7ff bf60 	b.w	8021a78 <SPI_WIFI_ResetModule>
}
 8021bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8021bbc:	b003      	add	sp, #12
 8021bbe:	bd30      	pop	{r4, r5, pc}
 8021bc0:	200001bc 	.word	0x200001bc
 8021bc4:	40003c00 	.word	0x40003c00

08021bc8 <SPI_WIFI_DeInit>:
{
 8021bc8:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8021bca:	4802      	ldr	r0, [pc, #8]	; (8021bd4 <SPI_WIFI_DeInit+0xc>)
 8021bcc:	f002 fab6 	bl	802413c <HAL_SPI_DeInit>
}
 8021bd0:	2000      	movs	r0, #0
 8021bd2:	bd08      	pop	{r3, pc}
 8021bd4:	200001bc 	.word	0x200001bc

08021bd8 <SPI_WIFI_ReceiveData>:
{
 8021bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bdc:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS();
 8021bde:	2201      	movs	r2, #1
{
 8021be0:	4604      	mov	r4, r0
 8021be2:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS();
 8021be4:	4836      	ldr	r0, [pc, #216]	; (8021cc0 <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event==1)
 8021be6:	4e37      	ldr	r6, [pc, #220]	; (8021cc4 <SPI_WIFI_ReceiveData+0xec>)
  WIFI_DISABLE_NSS();
 8021be8:	4611      	mov	r1, r2
 8021bea:	f001 f873 	bl	8022cd4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 8021bee:	2003      	movs	r0, #3
 8021bf0:	f7ff fe6c 	bl	80218cc <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 8021bf4:	f000 fa9a 	bl	802212c <HAL_GetTick>
 8021bf8:	46b1      	mov	r9, r6
 8021bfa:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event==1)
 8021bfc:	68b3      	ldr	r3, [r6, #8]
 8021bfe:	2b01      	cmp	r3, #1
 8021c00:	d01a      	beq.n	8021c38 <SPI_WIFI_ReceiveData+0x60>
  WIFI_ENABLE_NSS();
 8021c02:	482f      	ldr	r0, [pc, #188]	; (8021cc0 <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 8021c04:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8021cc0 <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8021c08:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8021cc8 <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS();
 8021c0c:	2200      	movs	r2, #0
 8021c0e:	2101      	movs	r1, #1
 8021c10:	f001 f860 	bl	8022cd4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8021c14:	200f      	movs	r0, #15
 8021c16:	f7ff fe59 	bl	80218cc <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8021c1a:	3402      	adds	r4, #2
 8021c1c:	2500      	movs	r5, #0
 8021c1e:	2102      	movs	r1, #2
 8021c20:	4658      	mov	r0, fp
 8021c22:	f001 f851 	bl	8022cc8 <HAL_GPIO_ReadPin>
 8021c26:	2801      	cmp	r0, #1
 8021c28:	b22e      	sxth	r6, r5
 8021c2a:	d00d      	beq.n	8021c48 <SPI_WIFI_ReceiveData+0x70>
  WIFI_DISABLE_NSS();
 8021c2c:	2201      	movs	r2, #1
 8021c2e:	4824      	ldr	r0, [pc, #144]	; (8021cc0 <SPI_WIFI_ReceiveData+0xe8>)
 8021c30:	4611      	mov	r1, r2
 8021c32:	f001 f84f 	bl	8022cd4 <HAL_GPIO_WritePin>
  return length;
 8021c36:	e01a      	b.n	8021c6e <SPI_WIFI_ReceiveData+0x96>
    if((HAL_GetTick() - tickstart ) > timeout)
 8021c38:	f000 fa78 	bl	802212c <HAL_GetTick>
 8021c3c:	1b40      	subs	r0, r0, r5
 8021c3e:	4580      	cmp	r8, r0
 8021c40:	d2dc      	bcs.n	8021bfc <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8021c42:	f06f 0602 	mvn.w	r6, #2
 8021c46:	e012      	b.n	8021c6e <SPI_WIFI_ReceiveData+0x96>
    if((length < len) || (!len))
 8021c48:	42af      	cmp	r7, r5
 8021c4a:	dc01      	bgt.n	8021c50 <SPI_WIFI_ReceiveData+0x78>
 8021c4c:	2f00      	cmp	r7, #0
 8021c4e:	d1ed      	bne.n	8021c2c <SPI_WIFI_ReceiveData+0x54>
      spi_rx_event=1;
 8021c50:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8021c52:	a901      	add	r1, sp, #4
 8021c54:	4650      	mov	r0, sl
      spi_rx_event=1;
 8021c56:	f8c9 200c 	str.w	r2, [r9, #12]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8021c5a:	f002 fe31 	bl	80248c0 <HAL_SPI_Receive_IT>
 8021c5e:	2201      	movs	r2, #1
 8021c60:	b148      	cbz	r0, 8021c76 <SPI_WIFI_ReceiveData+0x9e>
        WIFI_DISABLE_NSS();
 8021c62:	4817      	ldr	r0, [pc, #92]	; (8021cc0 <SPI_WIFI_ReceiveData+0xe8>)
 8021c64:	4611      	mov	r1, r2
 8021c66:	f001 f835 	bl	8022cd4 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8021c6a:	f04f 36ff 	mov.w	r6, #4294967295
}
 8021c6e:	4630      	mov	r0, r6
 8021c70:	b003      	add	sp, #12
 8021c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8021c76:	f000 fa59 	bl	802212c <HAL_GetTick>
 8021c7a:	4606      	mov	r6, r0
  while (spi_rx_event==1)
 8021c7c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8021c80:	2b01      	cmp	r3, #1
 8021c82:	d104      	bne.n	8021c8e <SPI_WIFI_ReceiveData+0xb6>
    if((HAL_GetTick() - tickstart ) > timeout)
 8021c84:	f000 fa52 	bl	802212c <HAL_GetTick>
 8021c88:	1b80      	subs	r0, r0, r6
 8021c8a:	4580      	cmp	r8, r0
 8021c8c:	d2f6      	bcs.n	8021c7c <SPI_WIFI_ReceiveData+0xa4>
      pData[0] = tmp[0];
 8021c8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8021c92:	f804 3c02 	strb.w	r3, [r4, #-2]
      pData[1] = tmp[1];
 8021c96:	3502      	adds	r5, #2
 8021c98:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8021c9c:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 8021ca0:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8021ca4:	f104 0402 	add.w	r4, r4, #2
 8021ca8:	d1b9      	bne.n	8021c1e <SPI_WIFI_ReceiveData+0x46>
        WIFI_DISABLE_NSS();
 8021caa:	2201      	movs	r2, #1
 8021cac:	4804      	ldr	r0, [pc, #16]	; (8021cc0 <SPI_WIFI_ReceiveData+0xe8>)
 8021cae:	4611      	mov	r1, r2
 8021cb0:	f001 f810 	bl	8022cd4 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8021cb4:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();
 8021cb8:	f7ff fede 	bl	8021a78 <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8021cbc:	e7d7      	b.n	8021c6e <SPI_WIFI_ReceiveData+0x96>
 8021cbe:	bf00      	nop
 8021cc0:	48001000 	.word	0x48001000
 8021cc4:	200000a4 	.word	0x200000a4
 8021cc8:	200001bc 	.word	0x200001bc

08021ccc <SPI_WIFI_SendData>:
{
 8021ccc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021cd0:	4605      	mov	r5, r0
 8021cd2:	460c      	mov	r4, r1
 8021cd4:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 8021cd6:	f000 fa29 	bl	802212c <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY()==0)
 8021cda:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8021d74 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 8021cde:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY()==0)
 8021ce0:	2102      	movs	r1, #2
 8021ce2:	4648      	mov	r0, r9
 8021ce4:	f000 fff0 	bl	8022cc8 <HAL_GPIO_ReadPin>
 8021ce8:	2801      	cmp	r0, #1
 8021cea:	4606      	mov	r6, r0
 8021cec:	d11b      	bne.n	8021d26 <SPI_WIFI_SendData+0x5a>
  cmddata_rdy_rising_event=1;
 8021cee:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8021d7c <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 8021cf2:	4601      	mov	r1, r0
  cmddata_rdy_rising_event=1;
 8021cf4:	f8c8 0008 	str.w	r0, [r8, #8]
  WIFI_ENABLE_NSS();
 8021cf8:	2200      	movs	r2, #0
 8021cfa:	481e      	ldr	r0, [pc, #120]	; (8021d74 <SPI_WIFI_SendData+0xa8>)
 8021cfc:	f000 ffea 	bl	8022cd4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8021d00:	200f      	movs	r0, #15
 8021d02:	f7ff fde3 	bl	80218cc <SPI_WIFI_DelayUs>
  if (len > 1)
 8021d06:	2c01      	cmp	r4, #1
 8021d08:	d919      	bls.n	8021d3e <SPI_WIFI_SendData+0x72>
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8021d0a:	481b      	ldr	r0, [pc, #108]	; (8021d78 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8021d0c:	f8c8 6004 	str.w	r6, [r8, #4]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8021d10:	0862      	lsrs	r2, r4, #1
 8021d12:	4629      	mov	r1, r5
 8021d14:	f002 fcfa 	bl	802470c <HAL_SPI_Transmit_IT>
 8021d18:	b170      	cbz	r0, 8021d38 <SPI_WIFI_SendData+0x6c>
      WIFI_DISABLE_NSS();
 8021d1a:	2201      	movs	r2, #1
 8021d1c:	4815      	ldr	r0, [pc, #84]	; (8021d74 <SPI_WIFI_SendData+0xa8>)
 8021d1e:	4611      	mov	r1, r2
 8021d20:	f000 ffd8 	bl	8022cd4 <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 8021d24:	e005      	b.n	8021d32 <SPI_WIFI_SendData+0x66>
    if((HAL_GetTick() - tickstart ) > timeout)
 8021d26:	f000 fa01 	bl	802212c <HAL_GetTick>
 8021d2a:	eba0 0008 	sub.w	r0, r0, r8
 8021d2e:	4287      	cmp	r7, r0
 8021d30:	d2d6      	bcs.n	8021ce0 <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 8021d32:	f04f 30ff 	mov.w	r0, #4294967295
 8021d36:	e019      	b.n	8021d6c <SPI_WIFI_SendData+0xa0>
    wait_spi_tx_event(timeout);
 8021d38:	4638      	mov	r0, r7
 8021d3a:	f7ff fdfd 	bl	8021938 <wait_spi_tx_event>
  if ( len & 1)
 8021d3e:	07e3      	lsls	r3, r4, #31
 8021d40:	d513      	bpl.n	8021d6a <SPI_WIFI_SendData+0x9e>
    Padding[0] = pdata[len-1];
 8021d42:	4425      	add	r5, r4
    spi_tx_event=1;
 8021d44:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 8021d46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021d4a:	f88d 3004 	strb.w	r3, [sp, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8021d4e:	480a      	ldr	r0, [pc, #40]	; (8021d78 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8021d50:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8021d54:	230a      	movs	r3, #10
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8021d56:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8021d58:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8021d5c:	f002 fcd6 	bl	802470c <HAL_SPI_Transmit_IT>
 8021d60:	2800      	cmp	r0, #0
 8021d62:	d1da      	bne.n	8021d1a <SPI_WIFI_SendData+0x4e>
    wait_spi_tx_event(timeout);
 8021d64:	4638      	mov	r0, r7
 8021d66:	f7ff fde7 	bl	8021938 <wait_spi_tx_event>
  return len;
 8021d6a:	b220      	sxth	r0, r4
}
 8021d6c:	b003      	add	sp, #12
 8021d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021d72:	bf00      	nop
 8021d74:	48001000 	.word	0x48001000
 8021d78:	200001bc 	.word	0x200001bc
 8021d7c:	200000a4 	.word	0x200000a4

08021d80 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8021d80:	f000 b9da 	b.w	8022138 <HAL_Delay>

08021d84 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8021d84:	4b02      	ldr	r3, [pc, #8]	; (8021d90 <HAL_SPI_RxCpltCallback+0xc>)
 8021d86:	68da      	ldr	r2, [r3, #12]
 8021d88:	b10a      	cbz	r2, 8021d8e <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8021d8a:	2200      	movs	r2, #0
 8021d8c:	60da      	str	r2, [r3, #12]
  }
}
 8021d8e:	4770      	bx	lr
 8021d90:	200000a4 	.word	0x200000a4

08021d94 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8021d94:	4b02      	ldr	r3, [pc, #8]	; (8021da0 <HAL_SPI_TxCpltCallback+0xc>)
 8021d96:	685a      	ldr	r2, [r3, #4]
 8021d98:	b10a      	cbz	r2, 8021d9e <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8021d9a:	2200      	movs	r2, #0
 8021d9c:	605a      	str	r2, [r3, #4]
  }
}
 8021d9e:	4770      	bx	lr
 8021da0:	200000a4 	.word	0x200000a4

08021da4 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event==1)  
 8021da4:	4b03      	ldr	r3, [pc, #12]	; (8021db4 <SPI_WIFI_ISR+0x10>)
 8021da6:	689a      	ldr	r2, [r3, #8]
 8021da8:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8021daa:	bf04      	itt	eq
 8021dac:	2200      	moveq	r2, #0
 8021dae:	609a      	streq	r2, [r3, #8]
   }
}
 8021db0:	4770      	bx	lr
 8021db2:	bf00      	nop
 8021db4:	200000a4 	.word	0x200000a4

08021db8 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8021db8:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8021dba:	4b0b      	ldr	r3, [pc, #44]	; (8021de8 <WIFI_Init+0x30>)
 8021dbc:	9301      	str	r3, [sp, #4]
 8021dbe:	4b0b      	ldr	r3, [pc, #44]	; (8021dec <WIFI_Init+0x34>)
 8021dc0:	9300      	str	r3, [sp, #0]
 8021dc2:	4a0b      	ldr	r2, [pc, #44]	; (8021df0 <WIFI_Init+0x38>)
 8021dc4:	4b0b      	ldr	r3, [pc, #44]	; (8021df4 <WIFI_Init+0x3c>)
 8021dc6:	490c      	ldr	r1, [pc, #48]	; (8021df8 <WIFI_Init+0x40>)
 8021dc8:	480c      	ldr	r0, [pc, #48]	; (8021dfc <WIFI_Init+0x44>)
 8021dca:	f7ff fb7d 	bl	80214c8 <ES_WIFI_RegisterBusIO>
 8021dce:	b940      	cbnz	r0, 8021de2 <WIFI_Init+0x2a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8021dd0:	480a      	ldr	r0, [pc, #40]	; (8021dfc <WIFI_Init+0x44>)
 8021dd2:	f7ff fb17 	bl	8021404 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021dd6:	3800      	subs	r0, #0
 8021dd8:	bf18      	it	ne
 8021dda:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8021ddc:	b003      	add	sp, #12
 8021dde:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021de2:	2001      	movs	r0, #1
 8021de4:	e7fa      	b.n	8021ddc <WIFI_Init+0x24>
 8021de6:	bf00      	nop
 8021de8:	08021bd9 	.word	0x08021bd9
 8021dec:	08021ccd 	.word	0x08021ccd
 8021df0:	08021bc9 	.word	0x08021bc9
 8021df4:	08021d81 	.word	0x08021d81
 8021df8:	08021b49 	.word	0x08021b49
 8021dfc:	20000220 	.word	0x20000220

08021e00 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8021e00:	b508      	push	{r3, lr}
 8021e02:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8021e04:	460a      	mov	r2, r1
 8021e06:	4601      	mov	r1, r0
 8021e08:	4806      	ldr	r0, [pc, #24]	; (8021e24 <WIFI_Connect+0x24>)
 8021e0a:	f7ff fb6f 	bl	80214ec <ES_WIFI_Connect>
 8021e0e:	b930      	cbnz	r0, 8021e1e <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8021e10:	4804      	ldr	r0, [pc, #16]	; (8021e24 <WIFI_Connect+0x24>)
 8021e12:	f7ff fbc7 	bl	80215a4 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021e16:	3800      	subs	r0, #0
 8021e18:	bf18      	it	ne
 8021e1a:	2001      	movne	r0, #1
    {
       ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8021e1c:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021e1e:	2001      	movs	r0, #1
 8021e20:	e7fc      	b.n	8021e1c <WIFI_Connect+0x1c>
 8021e22:	bf00      	nop
 8021e24:	20000220 	.word	0x20000220

08021e28 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8021e28:	4601      	mov	r1, r0
 8021e2a:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8021e2c:	4803      	ldr	r0, [pc, #12]	; (8021e3c <WIFI_GetMAC_Address+0x14>)
 8021e2e:	f7ff fc2d 	bl	802168c <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8021e32:	3800      	subs	r0, #0
 8021e34:	bf18      	it	ne
 8021e36:	2001      	movne	r0, #1
 8021e38:	bd08      	pop	{r3, pc}
 8021e3a:	bf00      	nop
 8021e3c:	20000220 	.word	0x20000220

08021e40 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8021e40:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8021e42:	4d06      	ldr	r5, [pc, #24]	; (8021e5c <WIFI_GetIP_Address+0x1c>)
{
 8021e44:	4604      	mov	r4, r0
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8021e46:	4628      	mov	r0, r5
 8021e48:	f7ff fb90 	bl	802156c <ES_WIFI_IsConnected>
 8021e4c:	2801      	cmp	r0, #1
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8021e4e:	bf03      	ittte	eq
 8021e50:	f8d5 30d5 	ldreq.w	r3, [r5, #213]	; 0xd5
 8021e54:	6023      	streq	r3, [r4, #0]
    ret = WIFI_STATUS_OK;
 8021e56:	2000      	moveq	r0, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021e58:	2001      	movne	r0, #1
  }
  return ret;
}
 8021e5a:	bd38      	pop	{r3, r4, r5, pc}
 8021e5c:	20000220 	.word	0x20000220

08021e60 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8021e60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8021e62:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021e66:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 8021e6a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021e6e:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8021e72:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8021e74:	781a      	ldrb	r2, [r3, #0]
 8021e76:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8021e7a:	bf18      	it	ne
 8021e7c:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8021e7e:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8021e80:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8021e84:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 8021e88:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8021e8c:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 8021e8e:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8021e90:	4806      	ldr	r0, [pc, #24]	; (8021eac <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8021e92:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8021e94:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 8021e98:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8021e9c:	f7ff fc14 	bl	80216c8 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8021ea0:	3800      	subs	r0, #0
 8021ea2:	bf18      	it	ne
 8021ea4:	2001      	movne	r0, #1
 8021ea6:	b007      	add	sp, #28
 8021ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8021eac:	20000220 	.word	0x20000220

08021eb0 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8021eb0:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8021eb2:	9c04      	ldr	r4, [sp, #16]
 8021eb4:	e9cd 3400 	strd	r3, r4, [sp]
 8021eb8:	4613      	mov	r3, r2
 8021eba:	460a      	mov	r2, r1
 8021ebc:	4601      	mov	r1, r0
 8021ebe:	4804      	ldr	r0, [pc, #16]	; (8021ed0 <WIFI_SendData+0x20>)
 8021ec0:	f7ff fc82 	bl	80217c8 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8021ec4:	3800      	subs	r0, #0
 8021ec6:	bf18      	it	ne
 8021ec8:	2001      	movne	r0, #1
 8021eca:	b002      	add	sp, #8
 8021ecc:	bd10      	pop	{r4, pc}
 8021ece:	bf00      	nop
 8021ed0:	20000220 	.word	0x20000220

08021ed4 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8021ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8021ed6:	b948      	cbnz	r0, 8021eec <BSP_LED_Init+0x18>
 8021ed8:	4b0d      	ldr	r3, [pc, #52]	; (8021f10 <BSP_LED_Init+0x3c>)
 8021eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021edc:	f042 0202 	orr.w	r2, r2, #2
 8021ee0:	64da      	str	r2, [r3, #76]	; 0x4c
 8021ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021ee4:	f003 0302 	and.w	r3, r3, #2
 8021ee8:	9300      	str	r3, [sp, #0]
 8021eea:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8021eec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8021ef0:	2301      	movs	r3, #1
 8021ef2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8021ef6:	2100      	movs	r1, #0
 8021ef8:	2302      	movs	r3, #2
 8021efa:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8021efe:	4b05      	ldr	r3, [pc, #20]	; (8021f14 <BSP_LED_Init+0x40>)
 8021f00:	a901      	add	r1, sp, #4
 8021f02:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021f06:	f000 fe01 	bl	8022b0c <HAL_GPIO_Init>
}
 8021f0a:	b007      	add	sp, #28
 8021f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021f10:	40021000 	.word	0x40021000
 8021f14:	20000004 	.word	0x20000004

08021f18 <BSP_LED_On>:
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8021f18:	4b03      	ldr	r3, [pc, #12]	; (8021f28 <BSP_LED_On+0x10>)
 8021f1a:	2201      	movs	r2, #1
 8021f1c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021f20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021f24:	f000 bed6 	b.w	8022cd4 <HAL_GPIO_WritePin>
 8021f28:	20000004 	.word	0x20000004

08021f2c <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8021f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f2e:	460d      	mov	r5, r1
 8021f30:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8021f32:	b9d8      	cbnz	r0, 8021f6c <BSP_COM_Init+0x40>
 8021f34:	4b1d      	ldr	r3, [pc, #116]	; (8021fac <BSP_COM_Init+0x80>)
 8021f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021f38:	f042 0202 	orr.w	r2, r2, #2
 8021f3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8021f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021f40:	f002 0202 	and.w	r2, r2, #2
 8021f44:	9200      	str	r2, [sp, #0]
 8021f46:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8021f48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021f4a:	f042 0202 	orr.w	r2, r2, #2
 8021f4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8021f50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021f52:	f002 0202 	and.w	r2, r2, #2
 8021f56:	9201      	str	r2, [sp, #4]
 8021f58:	9a01      	ldr	r2, [sp, #4]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8021f5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8021f60:	661a      	str	r2, [r3, #96]	; 0x60
 8021f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8021f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021f68:	9302      	str	r3, [sp, #8]
 8021f6a:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = COM_TX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Alternate = COM_TX_AF[COM];
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021f6c:	4c10      	ldr	r4, [pc, #64]	; (8021fb0 <BSP_COM_Init+0x84>)
 8021f6e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8021f72:	2602      	movs	r6, #2
 8021f74:	2340      	movs	r3, #64	; 0x40
 8021f76:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021f7a:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8021f7c:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8021f7e:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8021f80:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021f82:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8021f84:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8021f86:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021f88:	f000 fdc0 	bl	8022b0c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8021f8c:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8021f8e:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8021f90:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8021f92:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8021f94:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8021f98:	f000 fdb8 	bl	8022b0c <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8021f9c:	6923      	ldr	r3, [r4, #16]
 8021f9e:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 8021fa0:	4628      	mov	r0, r5
 8021fa2:	f003 fa30 	bl	8025406 <HAL_UART_Init>
}
 8021fa6:	b009      	add	sp, #36	; 0x24
 8021fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021faa:	bf00      	nop
 8021fac:	40021000 	.word	0x40021000
 8021fb0:	20000004 	.word	0x20000004

08021fb4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021fb4:	490f      	ldr	r1, [pc, #60]	; (8021ff4 <SystemInit+0x40>)
 8021fb6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8021fba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8021fc2:	4b0d      	ldr	r3, [pc, #52]	; (8021ff8 <SystemInit+0x44>)
 8021fc4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8021fc6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8021fc8:	f042 0201 	orr.w	r2, r2, #1
 8021fcc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8021fce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8021fd0:	681a      	ldr	r2, [r3, #0]
 8021fd2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8021fd6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8021fda:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8021fdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8021fe0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8021fe2:	681a      	ldr	r2, [r3, #0]
 8021fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8021fe8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8021fea:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8021fec:	4b03      	ldr	r3, [pc, #12]	; (8021ffc <SystemInit+0x48>)
 8021fee:	608b      	str	r3, [r1, #8]
#endif
}
 8021ff0:	4770      	bx	lr
 8021ff2:	bf00      	nop
 8021ff4:	e000ed00 	.word	0xe000ed00
 8021ff8:	40021000 	.word	0x40021000
 8021ffc:	08020000 	.word	0x08020000

08022000 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, msirange = 0, pllvco = 0, pllr = 2, pllsource = 0, pllm = 2;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8022000:	4a24      	ldr	r2, [pc, #144]	; (8022094 <SystemCoreClockUpdate+0x94>)
 8022002:	4825      	ldr	r0, [pc, #148]	; (8022098 <SystemCoreClockUpdate+0x98>)
 8022004:	6813      	ldr	r3, [r2, #0]
 8022006:	071b      	lsls	r3, r3, #28
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8;
 8022008:	bf54      	ite	pl
 802200a:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4;
 802200e:	6813      	ldrmi	r3, [r2, #0]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022010:	6891      	ldr	r1, [r2, #8]
{
 8022012:	b530      	push	{r4, r5, lr}
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8;
 8022014:	bf54      	ite	pl
 8022016:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4;
 802201a:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
  msirange = MSIRangeTable[msirange];
 802201e:	4c1f      	ldr	r4, [pc, #124]	; (802209c <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022020:	f001 010c 	and.w	r1, r1, #12
 8022024:	2908      	cmp	r1, #8
  msirange = MSIRangeTable[msirange];
 8022026:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802202a:	d00f      	beq.n	802204c <SystemCoreClockUpdate+0x4c>
 802202c:	290c      	cmp	r1, #12
 802202e:	d00f      	beq.n	8022050 <SystemCoreClockUpdate+0x50>
 8022030:	2904      	cmp	r1, #4
 8022032:	d12d      	bne.n	8022090 <SystemCoreClockUpdate+0x90>
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8022034:	4b1a      	ldr	r3, [pc, #104]	; (80220a0 <SystemCoreClockUpdate+0xa0>)
          pllvco = (msirange / pllm);
          break;
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
      SystemCoreClock = pllvco/pllr;
 8022036:	6003      	str	r3, [r0, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8022038:	6893      	ldr	r3, [r2, #8]
 802203a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 802203e:	441c      	add	r4, r3
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8022040:	6803      	ldr	r3, [r0, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8022042:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  SystemCoreClock >>= tmp;
 8022046:	40d3      	lsrs	r3, r2
 8022048:	6003      	str	r3, [r0, #0]
}
 802204a:	bd30      	pop	{r4, r5, pc}
      SystemCoreClock = HSE_VALUE;
 802204c:	4b15      	ldr	r3, [pc, #84]	; (80220a4 <SystemCoreClockUpdate+0xa4>)
 802204e:	e7f2      	b.n	8022036 <SystemCoreClockUpdate+0x36>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8022050:	68d1      	ldr	r1, [r2, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 8022052:	68d3      	ldr	r3, [r2, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8022054:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 8022058:	f3c3 1302 	ubfx	r3, r3, #4, #3
 802205c:	2902      	cmp	r1, #2
 802205e:	f103 0301 	add.w	r3, r3, #1
      switch (pllsource)
 8022062:	d004      	beq.n	802206e <SystemCoreClockUpdate+0x6e>
 8022064:	2903      	cmp	r1, #3
 8022066:	d011      	beq.n	802208c <SystemCoreClockUpdate+0x8c>
          pllvco = (msirange / pllm);
 8022068:	fbb5 f3f3 	udiv	r3, r5, r3
          break;
 802206c:	e002      	b.n	8022074 <SystemCoreClockUpdate+0x74>
          pllvco = (HSI_VALUE / pllm);
 802206e:	490c      	ldr	r1, [pc, #48]	; (80220a0 <SystemCoreClockUpdate+0xa0>)
          pllvco = (HSE_VALUE / pllm);
 8022070:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8022074:	68d5      	ldr	r5, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 8022076:	68d1      	ldr	r1, [r2, #12]
 8022078:	f3c1 6141 	ubfx	r1, r1, #25, #2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 802207c:	f3c5 2506 	ubfx	r5, r5, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 8022080:	3101      	adds	r1, #1
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8022082:	436b      	muls	r3, r5
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 8022084:	0049      	lsls	r1, r1, #1
      SystemCoreClock = pllvco/pllr;
 8022086:	fbb3 f3f1 	udiv	r3, r3, r1
 802208a:	e7d4      	b.n	8022036 <SystemCoreClockUpdate+0x36>
          pllvco = (HSE_VALUE / pllm);
 802208c:	4905      	ldr	r1, [pc, #20]	; (80220a4 <SystemCoreClockUpdate+0xa4>)
 802208e:	e7ef      	b.n	8022070 <SystemCoreClockUpdate+0x70>
      SystemCoreClock = msirange;
 8022090:	6005      	str	r5, [r0, #0]
      break;
 8022092:	e7d1      	b.n	8022038 <SystemCoreClockUpdate+0x38>
 8022094:	40021000 	.word	0x40021000
 8022098:	20000018 	.word	0x20000018
 802209c:	08026b28 	.word	0x08026b28
 80220a0:	00f42400 	.word	0x00f42400
 80220a4:	007a1200 	.word	0x007a1200

080220a8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80220a8:	4770      	bx	lr
	...

080220ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80220ac:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80220ae:	4e0f      	ldr	r6, [pc, #60]	; (80220ec <HAL_InitTick+0x40>)
{
 80220b0:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80220b2:	7830      	ldrb	r0, [r6, #0]
 80220b4:	b908      	cbnz	r0, 80220ba <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80220b6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80220b8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80220ba:	4a0d      	ldr	r2, [pc, #52]	; (80220f0 <HAL_InitTick+0x44>)
 80220bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80220c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80220c4:	6810      	ldr	r0, [r2, #0]
 80220c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80220ca:	f000 fce3 	bl	8022a94 <HAL_SYSTICK_Config>
 80220ce:	4604      	mov	r4, r0
 80220d0:	2800      	cmp	r0, #0
 80220d2:	d1f0      	bne.n	80220b6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80220d4:	2d0f      	cmp	r5, #15
 80220d6:	d8ee      	bhi.n	80220b6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80220d8:	4602      	mov	r2, r0
 80220da:	4629      	mov	r1, r5
 80220dc:	f04f 30ff 	mov.w	r0, #4294967295
 80220e0:	f000 fc98 	bl	8022a14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80220e4:	6075      	str	r5, [r6, #4]
 80220e6:	4620      	mov	r0, r4
 80220e8:	e7e6      	b.n	80220b8 <HAL_InitTick+0xc>
 80220ea:	bf00      	nop
 80220ec:	2000001c 	.word	0x2000001c
 80220f0:	20000018 	.word	0x20000018

080220f4 <HAL_Init>:
{
 80220f4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80220f6:	2003      	movs	r0, #3
 80220f8:	f000 fc7a 	bl	80229f0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80220fc:	200f      	movs	r0, #15
 80220fe:	f7ff ffd5 	bl	80220ac <HAL_InitTick>
 8022102:	4604      	mov	r4, r0
 8022104:	b918      	cbnz	r0, 802210e <HAL_Init+0x1a>
    HAL_MspInit();
 8022106:	f7ff ffcf 	bl	80220a8 <HAL_MspInit>
}
 802210a:	4620      	mov	r0, r4
 802210c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 802210e:	2401      	movs	r4, #1
 8022110:	e7fb      	b.n	802210a <HAL_Init+0x16>
	...

08022114 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8022114:	4a03      	ldr	r2, [pc, #12]	; (8022124 <HAL_IncTick+0x10>)
 8022116:	4b04      	ldr	r3, [pc, #16]	; (8022128 <HAL_IncTick+0x14>)
 8022118:	6811      	ldr	r1, [r2, #0]
 802211a:	781b      	ldrb	r3, [r3, #0]
 802211c:	440b      	add	r3, r1
 802211e:	6013      	str	r3, [r2, #0]
}
 8022120:	4770      	bx	lr
 8022122:	bf00      	nop
 8022124:	20000bf0 	.word	0x20000bf0
 8022128:	2000001c 	.word	0x2000001c

0802212c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 802212c:	4b01      	ldr	r3, [pc, #4]	; (8022134 <HAL_GetTick+0x8>)
 802212e:	6818      	ldr	r0, [r3, #0]
}
 8022130:	4770      	bx	lr
 8022132:	bf00      	nop
 8022134:	20000bf0 	.word	0x20000bf0

08022138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8022138:	b538      	push	{r3, r4, r5, lr}
 802213a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 802213c:	f7ff fff6 	bl	802212c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8022140:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8022142:	bf1c      	itt	ne
 8022144:	4b05      	ldrne	r3, [pc, #20]	; (802215c <HAL_Delay+0x24>)
 8022146:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8022148:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 802214a:	bf18      	it	ne
 802214c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802214e:	f7ff ffed 	bl	802212c <HAL_GetTick>
 8022152:	1b43      	subs	r3, r0, r5
 8022154:	42a3      	cmp	r3, r4
 8022156:	d3fa      	bcc.n	802214e <HAL_Delay+0x16>
  {
  }
}
 8022158:	bd38      	pop	{r3, r4, r5, pc}
 802215a:	bf00      	nop
 802215c:	2000001c 	.word	0x2000001c

08022160 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8022160:	4a02      	ldr	r2, [pc, #8]	; (802216c <HAL_SuspendTick+0xc>)
 8022162:	6813      	ldr	r3, [r2, #0]
 8022164:	f023 0302 	bic.w	r3, r3, #2
 8022168:	6013      	str	r3, [r2, #0]
}
 802216a:	4770      	bx	lr
 802216c:	e000e010 	.word	0xe000e010

08022170 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8022170:	4a02      	ldr	r2, [pc, #8]	; (802217c <HAL_ResumeTick+0xc>)
 8022172:	6813      	ldr	r3, [r2, #0]
 8022174:	f043 0302 	orr.w	r3, r3, #2
 8022178:	6013      	str	r3, [r2, #0]
}
 802217a:	4770      	bx	lr
 802217c:	e000e010 	.word	0xe000e010

08022180 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8022180:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8022182:	0dcc      	lsrs	r4, r1, #23
 8022184:	f004 0404 	and.w	r4, r4, #4
 8022188:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 802218a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 802218e:	5823      	ldr	r3, [r4, r0]
 8022190:	2507      	movs	r5, #7
 8022192:	408d      	lsls	r5, r1
 8022194:	ea23 0305 	bic.w	r3, r3, r5
 8022198:	fa02 f101 	lsl.w	r1, r2, r1
 802219c:	430b      	orrs	r3, r1
 802219e:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80221a0:	bd30      	pop	{r4, r5, pc}

080221a2 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80221a2:	6880      	ldr	r0, [r0, #8]
}
 80221a4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80221a8:	4770      	bx	lr
	...

080221ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80221ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80221ae:	2300      	movs	r3, #0
 80221b0:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80221b2:	4604      	mov	r4, r0
 80221b4:	2800      	cmp	r0, #0
 80221b6:	f000 80c6 	beq.w	8022346 <HAL_ADC_Init+0x19a>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80221ba:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80221bc:	b925      	cbnz	r5, 80221c8 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80221be:	f7fe ff75 	bl	80210ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80221c2:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80221c4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80221c8:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80221ca:	6883      	ldr	r3, [r0, #8]
 80221cc:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80221ce:	bf41      	itttt	mi
 80221d0:	6883      	ldrmi	r3, [r0, #8]
 80221d2:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 80221d6:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 80221da:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80221dc:	6883      	ldr	r3, [r0, #8]
 80221de:	00dd      	lsls	r5, r3, #3
 80221e0:	f140 8091 	bpl.w	8022306 <HAL_ADC_Init+0x15a>
 80221e4:	6883      	ldr	r3, [r0, #8]
 80221e6:	00d9      	lsls	r1, r3, #3
 80221e8:	f100 80a4 	bmi.w	8022334 <HAL_ADC_Init+0x188>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80221ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80221ee:	f043 0310 	orr.w	r3, r3, #16
 80221f2:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80221f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80221f6:	f043 0301 	orr.w	r3, r3, #1
 80221fa:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80221fc:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80221fe:	f7ff ffd0 	bl	80221a2 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8022202:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022204:	f003 0310 	and.w	r3, r3, #16
 8022208:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802220a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 802220c:	f040 8098 	bne.w	8022340 <HAL_ADC_Init+0x194>
    ADC_STATE_CLR_SET(hadc->State,
 8022210:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8022214:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8022218:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 802221a:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 802221c:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 802221e:	07da      	lsls	r2, r3, #31
 8022220:	d411      	bmi.n	8022246 <HAL_ADC_Init+0x9a>
 8022222:	4b4a      	ldr	r3, [pc, #296]	; (802234c <HAL_ADC_Init+0x1a0>)
 8022224:	4a4a      	ldr	r2, [pc, #296]	; (8022350 <HAL_ADC_Init+0x1a4>)
 8022226:	689d      	ldr	r5, [r3, #8]
 8022228:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802222c:	689b      	ldr	r3, [r3, #8]
 802222e:	6892      	ldr	r2, [r2, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8022230:	432b      	orrs	r3, r5
 8022232:	4313      	orrs	r3, r2
 8022234:	07db      	lsls	r3, r3, #31
 8022236:	d406      	bmi.n	8022246 <HAL_ADC_Init+0x9a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8022238:	4a46      	ldr	r2, [pc, #280]	; (8022354 <HAL_ADC_Init+0x1a8>)
 802223a:	6865      	ldr	r5, [r4, #4]
 802223c:	6893      	ldr	r3, [r2, #8]
 802223e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8022242:	432b      	orrs	r3, r5
 8022244:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8022246:	68e5      	ldr	r5, [r4, #12]
 8022248:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 802224a:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 802224e:	432b      	orrs	r3, r5
 8022250:	68a5      	ldr	r5, [r4, #8]
 8022252:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8022254:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8022256:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8022258:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 802225c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8022260:	bf02      	ittt	eq
 8022262:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8022264:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8022268:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802226c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802226e:	b122      	cbz	r2, 802227a <HAL_ADC_Init+0xce>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8022270:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8022272:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8022276:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8022278:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 802227a:	68c5      	ldr	r5, [r0, #12]
 802227c:	4a36      	ldr	r2, [pc, #216]	; (8022358 <HAL_ADC_Init+0x1ac>)
 802227e:	402a      	ands	r2, r5
 8022280:	4313      	orrs	r3, r2
 8022282:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8022284:	f7ff ff8d 	bl	80221a2 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8022288:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 802228a:	689a      	ldr	r2, [r3, #8]
 802228c:	f002 0208 	and.w	r2, r2, #8
 8022290:	4302      	orrs	r2, r0
 8022292:	d120      	bne.n	80222d6 <HAL_ADC_Init+0x12a>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8022294:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8022296:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 802229a:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 802229c:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 802229e:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80222a2:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80222a6:	f020 0002 	bic.w	r0, r0, #2
 80222aa:	4302      	orrs	r2, r0
 80222ac:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80222ae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80222b2:	2a01      	cmp	r2, #1
 80222b4:	d140      	bne.n	8022338 <HAL_ADC_Init+0x18c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80222b6:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 80222ba:	6918      	ldr	r0, [r3, #16]
 80222bc:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80222c0:	f020 0004 	bic.w	r0, r0, #4
 80222c4:	432a      	orrs	r2, r5
 80222c6:	4302      	orrs	r2, r0
 80222c8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80222ca:	4302      	orrs	r2, r0
 80222cc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80222ce:	4302      	orrs	r2, r0
 80222d0:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80222d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80222d6:	6922      	ldr	r2, [r4, #16]
 80222d8:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80222da:	bf05      	ittet	eq
 80222dc:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 80222de:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80222e0:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80222e2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80222e6:	bf06      	itte	eq
 80222e8:	f020 000f 	biceq.w	r0, r0, #15
 80222ec:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80222ee:	f022 020f 	bicne.w	r2, r2, #15
 80222f2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80222f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80222f6:	f023 0303 	bic.w	r3, r3, #3
 80222fa:	f043 0301 	orr.w	r3, r3, #1
 80222fe:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8022300:	4608      	mov	r0, r1
 8022302:	b003      	add	sp, #12
 8022304:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8022306:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8022308:	4a14      	ldr	r2, [pc, #80]	; (802235c <HAL_ADC_Init+0x1b0>)
 802230a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 802230e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8022312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022316:	6083      	str	r3, [r0, #8]
 8022318:	4b11      	ldr	r3, [pc, #68]	; (8022360 <HAL_ADC_Init+0x1b4>)
 802231a:	681b      	ldr	r3, [r3, #0]
 802231c:	fbb3 f3f2 	udiv	r3, r3, r2
 8022320:	3301      	adds	r3, #1
 8022322:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 8022324:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8022326:	9b01      	ldr	r3, [sp, #4]
 8022328:	2b00      	cmp	r3, #0
 802232a:	f43f af5b 	beq.w	80221e4 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 802232e:	9b01      	ldr	r3, [sp, #4]
 8022330:	3b01      	subs	r3, #1
 8022332:	e7f7      	b.n	8022324 <HAL_ADC_Init+0x178>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8022334:	2100      	movs	r1, #0
 8022336:	e762      	b.n	80221fe <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8022338:	691a      	ldr	r2, [r3, #16]
 802233a:	f022 0201 	bic.w	r2, r2, #1
 802233e:	e7c9      	b.n	80222d4 <HAL_ADC_Init+0x128>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8022340:	f043 0310 	orr.w	r3, r3, #16
 8022344:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8022346:	2101      	movs	r1, #1
 8022348:	e7da      	b.n	8022300 <HAL_ADC_Init+0x154>
 802234a:	bf00      	nop
 802234c:	50040000 	.word	0x50040000
 8022350:	50040200 	.word	0x50040200
 8022354:	50040300 	.word	0x50040300
 8022358:	fff0c007 	.word	0xfff0c007
 802235c:	00030d40 	.word	0x00030d40
 8022360:	20000018 	.word	0x20000018

08022364 <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8022364:	4b38      	ldr	r3, [pc, #224]	; (8022448 <HAL_ADC_PollForConversion+0xe4>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8022366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 802236a:	6945      	ldr	r5, [r0, #20]
 802236c:	689e      	ldr	r6, [r3, #8]
 802236e:	2d08      	cmp	r5, #8
{
 8022370:	4604      	mov	r4, r0
 8022372:	460f      	mov	r7, r1
 8022374:	f006 061f 	and.w	r6, r6, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8022378:	d017      	beq.n	80223aa <HAL_ADC_PollForConversion+0x46>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 802237a:	2e09      	cmp	r6, #9
 802237c:	d810      	bhi.n	80223a0 <HAL_ADC_PollForConversion+0x3c>
 802237e:	f240 2221 	movw	r2, #545	; 0x221
 8022382:	40f2      	lsrs	r2, r6
 8022384:	07d1      	lsls	r1, r2, #31
 8022386:	d50b      	bpl.n	80223a0 <HAL_ADC_PollForConversion+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8022388:	6803      	ldr	r3, [r0, #0]
 802238a:	68db      	ldr	r3, [r3, #12]
 802238c:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8022390:	d00a      	beq.n	80223a8 <HAL_ADC_PollForConversion+0x44>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8022392:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022394:	f043 0320 	orr.w	r3, r3, #32
 8022398:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 802239a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 802239c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80223a0:	689b      	ldr	r3, [r3, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80223a2:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 80223a6:	e7f3      	b.n	8022390 <HAL_ADC_PollForConversion+0x2c>
        tmp_Flag_End = (ADC_FLAG_EOC);
 80223a8:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 80223aa:	f7ff febf 	bl	802212c <HAL_GetTick>
 80223ae:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80223b0:	6823      	ldr	r3, [r4, #0]
 80223b2:	681a      	ldr	r2, [r3, #0]
 80223b4:	422a      	tst	r2, r5
 80223b6:	d020      	beq.n	80223fa <HAL_ADC_PollForConversion+0x96>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80223b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80223ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80223be:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80223c0:	68da      	ldr	r2, [r3, #12]
 80223c2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80223c6:	d10f      	bne.n	80223e8 <HAL_ADC_PollForConversion+0x84>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80223c8:	7e62      	ldrb	r2, [r4, #25]
 80223ca:	b96a      	cbnz	r2, 80223e8 <HAL_ADC_PollForConversion+0x84>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80223cc:	681a      	ldr	r2, [r3, #0]
 80223ce:	0710      	lsls	r0, r2, #28
 80223d0:	d50a      	bpl.n	80223e8 <HAL_ADC_PollForConversion+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80223d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80223d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80223d8:	6562      	str	r2, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80223da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80223dc:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80223de:	bf5e      	ittt	pl
 80223e0:	6d62      	ldrpl	r2, [r4, #84]	; 0x54
 80223e2:	f042 0201 	orrpl.w	r2, r2, #1
 80223e6:	6562      	strpl	r2, [r4, #84]	; 0x54
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80223e8:	4a18      	ldr	r2, [pc, #96]	; (802244c <HAL_ADC_PollForConversion+0xe8>)
 80223ea:	4293      	cmp	r3, r2
 80223ec:	d021      	beq.n	8022432 <HAL_ADC_PollForConversion+0xce>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80223ee:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80223f0:	2d08      	cmp	r5, #8
 80223f2:	d118      	bne.n	8022426 <HAL_ADC_PollForConversion+0xc2>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80223f4:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 80223f6:	2000      	movs	r0, #0
 80223f8:	e7d0      	b.n	802239c <HAL_ADC_PollForConversion+0x38>
    if (Timeout != HAL_MAX_DELAY)
 80223fa:	1c7a      	adds	r2, r7, #1
 80223fc:	d0d9      	beq.n	80223b2 <HAL_ADC_PollForConversion+0x4e>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80223fe:	f7ff fe95 	bl	802212c <HAL_GetTick>
 8022402:	eba0 0008 	sub.w	r0, r0, r8
 8022406:	42b8      	cmp	r0, r7
 8022408:	d801      	bhi.n	802240e <HAL_ADC_PollForConversion+0xaa>
 802240a:	2f00      	cmp	r7, #0
 802240c:	d1d0      	bne.n	80223b0 <HAL_ADC_PollForConversion+0x4c>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 802240e:	6823      	ldr	r3, [r4, #0]
 8022410:	681b      	ldr	r3, [r3, #0]
 8022412:	402b      	ands	r3, r5
 8022414:	d1cc      	bne.n	80223b0 <HAL_ADC_PollForConversion+0x4c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8022416:	6d62      	ldr	r2, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 8022418:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 802241c:	f042 0204 	orr.w	r2, r2, #4
 8022420:	6562      	str	r2, [r4, #84]	; 0x54
          return HAL_TIMEOUT;
 8022422:	2003      	movs	r0, #3
 8022424:	e7ba      	b.n	802239c <HAL_ADC_PollForConversion+0x38>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8022426:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 802242a:	d1e4      	bne.n	80223f6 <HAL_ADC_PollForConversion+0x92>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 802242c:	220c      	movs	r2, #12
 802242e:	601a      	str	r2, [r3, #0]
 8022430:	e7b4      	b.n	802239c <HAL_ADC_PollForConversion+0x38>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8022432:	2e09      	cmp	r6, #9
 8022434:	d805      	bhi.n	8022442 <HAL_ADC_PollForConversion+0xde>
 8022436:	f240 2221 	movw	r2, #545	; 0x221
 802243a:	fa22 f606 	lsr.w	r6, r2, r6
 802243e:	07f2      	lsls	r2, r6, #31
 8022440:	d4d5      	bmi.n	80223ee <HAL_ADC_PollForConversion+0x8a>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8022442:	4a03      	ldr	r2, [pc, #12]	; (8022450 <HAL_ADC_PollForConversion+0xec>)
 8022444:	68d0      	ldr	r0, [r2, #12]
 8022446:	e7d3      	b.n	80223f0 <HAL_ADC_PollForConversion+0x8c>
 8022448:	50040300 	.word	0x50040300
 802244c:	50040100 	.word	0x50040100
 8022450:	50040000 	.word	0x50040000

08022454 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8022454:	6803      	ldr	r3, [r0, #0]
 8022456:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8022458:	4770      	bx	lr
	...

0802245c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 802245c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 802245e:	2300      	movs	r3, #0
 8022460:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8022462:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8022466:	2b01      	cmp	r3, #1
{
 8022468:	4605      	mov	r5, r0
 802246a:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 802246c:	f000 818d 	beq.w	802278a <HAL_ADC_ConfigChannel+0x32e>
 8022470:	2301      	movs	r3, #1
 8022472:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8022476:	6800      	ldr	r0, [r0, #0]
 8022478:	f7ff fe93 	bl	80221a2 <LL_ADC_REG_IsConversionOngoing>
 802247c:	2800      	cmp	r0, #0
 802247e:	f040 817e 	bne.w	802277e <HAL_ADC_ConfigChannel+0x322>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8022482:	684b      	ldr	r3, [r1, #4]
 8022484:	2b05      	cmp	r3, #5
 8022486:	d809      	bhi.n	802249c <HAL_ADC_ConfigChannel+0x40>
    {
      switch (sConfig->Rank)
 8022488:	3b02      	subs	r3, #2
 802248a:	2b03      	cmp	r3, #3
 802248c:	f200 8083 	bhi.w	8022596 <HAL_ADC_ConfigChannel+0x13a>
 8022490:	e8df f003 	tbb	[pc, r3]
 8022494:	7e7c7a02 	.word	0x7e7c7a02
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8022498:	230c      	movs	r3, #12
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
          break;
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 802249a:	6063      	str	r3, [r4, #4]
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 802249c:	6862      	ldr	r2, [r4, #4]
 802249e:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 80224a0:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80224a2:	0991      	lsrs	r1, r2, #6
 80224a4:	f001 010c 	and.w	r1, r1, #12
 80224a8:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80224ac:	f002 021f 	and.w	r2, r2, #31
 80224b0:	59ce      	ldr	r6, [r1, r7]
 80224b2:	f04f 0c1f 	mov.w	ip, #31
 80224b6:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80224ba:	4093      	lsls	r3, r2
 80224bc:	fa0c f202 	lsl.w	r2, ip, r2
 80224c0:	ea26 0202 	bic.w	r2, r6, r2
 80224c4:	4313      	orrs	r3, r2
 80224c6:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80224c8:	f7ff fe6b 	bl	80221a2 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80224cc:	682e      	ldr	r6, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80224ce:	68b3      	ldr	r3, [r6, #8]
 80224d0:	f003 0308 	and.w	r3, r3, #8
 80224d4:	4303      	orrs	r3, r0
 80224d6:	d11d      	bne.n	8022514 <HAL_ADC_ConfigChannel+0xb8>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80224d8:	4630      	mov	r0, r6
 80224da:	68a2      	ldr	r2, [r4, #8]
 80224dc:	6821      	ldr	r1, [r4, #0]
 80224de:	f7ff fe4f 	bl	8022180 <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80224e2:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80224e4:	6829      	ldr	r1, [r5, #0]
 80224e6:	6823      	ldr	r3, [r4, #0]
 80224e8:	68c8      	ldr	r0, [r1, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80224ea:	2e04      	cmp	r6, #4
 80224ec:	f101 0260 	add.w	r2, r1, #96	; 0x60
 80224f0:	d053      	beq.n	802259a <HAL_ADC_ConfigChannel+0x13e>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80224f2:	f3c0 01c1 	ubfx	r1, r0, #3, #2
 80224f6:	0048      	lsls	r0, r1, #1
 80224f8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 80224fa:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80224fe:	4081      	lsls	r1, r0
 8022500:	48a3      	ldr	r0, [pc, #652]	; (8022790 <HAL_ADC_ConfigChannel+0x334>)
 8022502:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8022506:	4038      	ands	r0, r7
 8022508:	4303      	orrs	r3, r0
 802250a:	4319      	orrs	r1, r3
 802250c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8022510:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8022514:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8022516:	6883      	ldr	r3, [r0, #8]
 8022518:	07d9      	lsls	r1, r3, #31
 802251a:	f100 80bb 	bmi.w	8022694 <HAL_ADC_ConfigChannel+0x238>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 802251e:	68e6      	ldr	r6, [r4, #12]
 8022520:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8022522:	4a9c      	ldr	r2, [pc, #624]	; (8022794 <HAL_ADC_ConfigChannel+0x338>)
 8022524:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8022528:	f006 0c18 	and.w	ip, r6, #24
 802252c:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8022530:	fa22 f20c 	lsr.w	r2, r2, ip
 8022534:	401a      	ands	r2, r3
 8022536:	ea21 0107 	bic.w	r1, r1, r7
 802253a:	430a      	orrs	r2, r1
 802253c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8022540:	4a95      	ldr	r2, [pc, #596]	; (8022798 <HAL_ADC_ConfigChannel+0x33c>)
 8022542:	4296      	cmp	r6, r2
 8022544:	f040 80a6 	bne.w	8022694 <HAL_ADC_ConfigChannel+0x238>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8022548:	2f00      	cmp	r7, #0
 802254a:	d17b      	bne.n	8022644 <HAL_ADC_ConfigChannel+0x1e8>
 802254c:	0e99      	lsrs	r1, r3, #26
 802254e:	3101      	adds	r1, #1
 8022550:	f001 061f 	and.w	r6, r1, #31
 8022554:	0689      	lsls	r1, r1, #26
 8022556:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 802255a:	2e09      	cmp	r6, #9
 802255c:	f04f 0101 	mov.w	r1, #1
 8022560:	fa01 f106 	lsl.w	r1, r1, r6
 8022564:	f240 8089 	bls.w	802267a <HAL_ADC_ConfigChannel+0x21e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8022568:	4311      	orrs	r1, r2
 802256a:	2f00      	cmp	r7, #0
 802256c:	f040 80b3 	bne.w	80226d6 <HAL_ADC_ConfigChannel+0x27a>
 8022570:	0e9a      	lsrs	r2, r3, #26
 8022572:	3201      	adds	r2, #1
 8022574:	f002 021f 	and.w	r2, r2, #31
 8022578:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 802257c:	3b1e      	subs	r3, #30
 802257e:	051b      	lsls	r3, r3, #20
 8022580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8022584:	4319      	orrs	r1, r3
 8022586:	e082      	b.n	802268e <HAL_ADC_ConfigChannel+0x232>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8022588:	2312      	movs	r3, #18
 802258a:	e786      	b.n	802249a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 802258c:	2318      	movs	r3, #24
 802258e:	e784      	b.n	802249a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8022590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022594:	e781      	b.n	802249a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8022596:	2306      	movs	r3, #6
 8022598:	e77f      	b.n	802249a <HAL_ADC_ConfigChannel+0x3e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 802259a:	6e08      	ldr	r0, [r1, #96]	; 0x60
 802259c:	6e08      	ldr	r0, [r1, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 802259e:	f3c3 0612 	ubfx	r6, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80225a2:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80225a6:	2e00      	cmp	r6, #0
 80225a8:	d138      	bne.n	802261c <HAL_ADC_ConfigChannel+0x1c0>
 80225aa:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80225ae:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 80225b0:	bf02      	ittt	eq
 80225b2:	6e0b      	ldreq	r3, [r1, #96]	; 0x60
 80225b4:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80225b8:	660b      	streq	r3, [r1, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80225ba:	6e4b      	ldr	r3, [r1, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80225bc:	6823      	ldr	r3, [r4, #0]
 80225be:	6e48      	ldr	r0, [r1, #100]	; 0x64
 80225c0:	f3c3 0612 	ubfx	r6, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80225c4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80225c8:	bb6e      	cbnz	r6, 8022626 <HAL_ADC_ConfigChannel+0x1ca>
 80225ca:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80225ce:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 80225d0:	bf02      	ittt	eq
 80225d2:	6e4b      	ldreq	r3, [r1, #100]	; 0x64
 80225d4:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80225d8:	664b      	streq	r3, [r1, #100]	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80225da:	6893      	ldr	r3, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80225dc:	6823      	ldr	r3, [r4, #0]
 80225de:	6891      	ldr	r1, [r2, #8]
 80225e0:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80225e4:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80225e8:	bb10      	cbnz	r0, 8022630 <HAL_ADC_ConfigChannel+0x1d4>
 80225ea:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80225ee:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 80225f0:	bf02      	ittt	eq
 80225f2:	6893      	ldreq	r3, [r2, #8]
 80225f4:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80225f8:	6093      	streq	r3, [r2, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80225fa:	68d3      	ldr	r3, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80225fc:	6823      	ldr	r3, [r4, #0]
 80225fe:	68d1      	ldr	r1, [r2, #12]
 8022600:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8022604:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8022608:	b9b8      	cbnz	r0, 802263a <HAL_ADC_ConfigChannel+0x1de>
 802260a:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 802260e:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 8022610:	bf02      	ittt	eq
 8022612:	68d3      	ldreq	r3, [r2, #12]
 8022614:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8022618:	60d3      	streq	r3, [r2, #12]
}
 802261a:	e77b      	b.n	8022514 <HAL_ADC_ConfigChannel+0xb8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802261c:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8022620:	fab3 f383 	clz	r3, r3
 8022624:	e7c3      	b.n	80225ae <HAL_ADC_ConfigChannel+0x152>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022626:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 802262a:	fab3 f383 	clz	r3, r3
 802262e:	e7ce      	b.n	80225ce <HAL_ADC_ConfigChannel+0x172>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022630:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8022634:	fab3 f383 	clz	r3, r3
 8022638:	e7d9      	b.n	80225ee <HAL_ADC_ConfigChannel+0x192>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802263a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 802263e:	fab3 f383 	clz	r3, r3
 8022642:	e7e4      	b.n	802260e <HAL_ADC_ConfigChannel+0x1b2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022644:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8022648:	b132      	cbz	r2, 8022658 <HAL_ADC_ConfigChannel+0x1fc>
  return __builtin_clz(value);
 802264a:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 802264e:	3201      	adds	r2, #1
 8022650:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8022654:	2a09      	cmp	r2, #9
 8022656:	d82c      	bhi.n	80226b2 <HAL_ADC_ConfigChannel+0x256>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022658:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 802265c:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8022660:	3101      	adds	r1, #1
 8022662:	0689      	lsls	r1, r1, #26
 8022664:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022668:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 802266c:	fab1 f181 	clz	r1, r1
 8022670:	3101      	adds	r1, #1
 8022672:	f001 061f 	and.w	r6, r1, #31
 8022676:	2101      	movs	r1, #1
 8022678:	40b1      	lsls	r1, r6
 802267a:	4311      	orrs	r1, r2
 802267c:	b9a7      	cbnz	r7, 80226a8 <HAL_ADC_ConfigChannel+0x24c>
 802267e:	0e9e      	lsrs	r6, r3, #26
 8022680:	3601      	adds	r6, #1
 8022682:	f006 061f 	and.w	r6, r6, #31
 8022686:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802268a:	0536      	lsls	r6, r6, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 802268c:	4331      	orrs	r1, r6
 802268e:	68a2      	ldr	r2, [r4, #8]
 8022690:	f7ff fd76 	bl	8022180 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8022694:	6822      	ldr	r2, [r4, #0]
 8022696:	4b41      	ldr	r3, [pc, #260]	; (802279c <HAL_ADC_ConfigChannel+0x340>)
 8022698:	421a      	tst	r2, r3
 802269a:	d121      	bne.n	80226e0 <HAL_ADC_ConfigChannel+0x284>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 802269c:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802269e:	2300      	movs	r3, #0
 80226a0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80226a4:	b003      	add	sp, #12
 80226a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80226a8:	fa93 f6a3 	rbit	r6, r3
  return __builtin_clz(value);
 80226ac:	fab6 f686 	clz	r6, r6
 80226b0:	e7e6      	b.n	8022680 <HAL_ADC_ConfigChannel+0x224>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80226b2:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 80226b6:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80226ba:	3101      	adds	r1, #1
 80226bc:	0689      	lsls	r1, r1, #26
 80226be:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80226c2:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 80226c6:	fab1 f181 	clz	r1, r1
 80226ca:	3101      	adds	r1, #1
 80226cc:	f001 061f 	and.w	r6, r1, #31
 80226d0:	2101      	movs	r1, #1
 80226d2:	40b1      	lsls	r1, r6
 80226d4:	e748      	b.n	8022568 <HAL_ADC_ConfigChannel+0x10c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80226d6:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80226da:	fab2 f282 	clz	r2, r2
 80226de:	e748      	b.n	8022572 <HAL_ADC_ConfigChannel+0x116>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80226e0:	492f      	ldr	r1, [pc, #188]	; (80227a0 <HAL_ADC_ConfigChannel+0x344>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80226e2:	4b30      	ldr	r3, [pc, #192]	; (80227a4 <HAL_ADC_ConfigChannel+0x348>)
 80226e4:	6888      	ldr	r0, [r1, #8]
 80226e6:	429a      	cmp	r2, r3
 80226e8:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80226ec:	460c      	mov	r4, r1
 80226ee:	d11f      	bne.n	8022730 <HAL_ADC_ConfigChannel+0x2d4>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80226f0:	0202      	lsls	r2, r0, #8
 80226f2:	d4d3      	bmi.n	802269c <HAL_ADC_ConfigChannel+0x240>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80226f4:	682b      	ldr	r3, [r5, #0]
 80226f6:	4a2c      	ldr	r2, [pc, #176]	; (80227a8 <HAL_ADC_ConfigChannel+0x34c>)
 80226f8:	4293      	cmp	r3, r2
 80226fa:	d003      	beq.n	8022704 <HAL_ADC_ConfigChannel+0x2a8>
 80226fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8022700:	4293      	cmp	r3, r2
 8022702:	d1cb      	bne.n	802269c <HAL_ADC_ConfigChannel+0x240>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8022704:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8022706:	4a29      	ldr	r2, [pc, #164]	; (80227ac <HAL_ADC_ConfigChannel+0x350>)
 8022708:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 802270c:	4333      	orrs	r3, r6
 802270e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8022712:	60a3      	str	r3, [r4, #8]
 8022714:	4b26      	ldr	r3, [pc, #152]	; (80227b0 <HAL_ADC_ConfigChannel+0x354>)
 8022716:	681b      	ldr	r3, [r3, #0]
 8022718:	fbb3 f2f2 	udiv	r2, r3, r2
 802271c:	230c      	movs	r3, #12
 802271e:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8022722:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8022724:	9b01      	ldr	r3, [sp, #4]
 8022726:	2b00      	cmp	r3, #0
 8022728:	d0b8      	beq.n	802269c <HAL_ADC_ConfigChannel+0x240>
            wait_loop_index--;
 802272a:	9b01      	ldr	r3, [sp, #4]
 802272c:	3b01      	subs	r3, #1
 802272e:	e7f8      	b.n	8022722 <HAL_ADC_ConfigChannel+0x2c6>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8022730:	4b20      	ldr	r3, [pc, #128]	; (80227b4 <HAL_ADC_ConfigChannel+0x358>)
 8022732:	429a      	cmp	r2, r3
 8022734:	d111      	bne.n	802275a <HAL_ADC_ConfigChannel+0x2fe>
 8022736:	01c3      	lsls	r3, r0, #7
 8022738:	d4b0      	bmi.n	802269c <HAL_ADC_ConfigChannel+0x240>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 802273a:	682b      	ldr	r3, [r5, #0]
 802273c:	4a1a      	ldr	r2, [pc, #104]	; (80227a8 <HAL_ADC_ConfigChannel+0x34c>)
 802273e:	4293      	cmp	r3, r2
 8022740:	d003      	beq.n	802274a <HAL_ADC_ConfigChannel+0x2ee>
 8022742:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8022746:	4293      	cmp	r3, r2
 8022748:	d1a8      	bne.n	802269c <HAL_ADC_ConfigChannel+0x240>
 802274a:	68a3      	ldr	r3, [r4, #8]
 802274c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8022750:	4333      	orrs	r3, r6
 8022752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8022756:	60a3      	str	r3, [r4, #8]
 8022758:	e7a0      	b.n	802269c <HAL_ADC_ConfigChannel+0x240>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 802275a:	4b17      	ldr	r3, [pc, #92]	; (80227b8 <HAL_ADC_ConfigChannel+0x35c>)
 802275c:	429a      	cmp	r2, r3
 802275e:	d19d      	bne.n	802269c <HAL_ADC_ConfigChannel+0x240>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8022760:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8022764:	d19a      	bne.n	802269c <HAL_ADC_ConfigChannel+0x240>
        if (ADC_VREFINT_INSTANCE(hadc))
 8022766:	682a      	ldr	r2, [r5, #0]
 8022768:	4b0f      	ldr	r3, [pc, #60]	; (80227a8 <HAL_ADC_ConfigChannel+0x34c>)
 802276a:	429a      	cmp	r2, r3
 802276c:	d196      	bne.n	802269c <HAL_ADC_ConfigChannel+0x240>
 802276e:	688b      	ldr	r3, [r1, #8]
 8022770:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8022774:	4333      	orrs	r3, r6
 8022776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802277a:	608b      	str	r3, [r1, #8]
}
 802277c:	e78f      	b.n	802269e <HAL_ADC_ConfigChannel+0x242>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 802277e:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8022780:	f042 0220 	orr.w	r2, r2, #32
 8022784:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8022786:	4618      	mov	r0, r3
 8022788:	e789      	b.n	802269e <HAL_ADC_ConfigChannel+0x242>
  __HAL_LOCK(hadc);
 802278a:	2002      	movs	r0, #2
 802278c:	e78a      	b.n	80226a4 <HAL_ADC_ConfigChannel+0x248>
 802278e:	bf00      	nop
 8022790:	03fff000 	.word	0x03fff000
 8022794:	0007ffff 	.word	0x0007ffff
 8022798:	407f0000 	.word	0x407f0000
 802279c:	80080000 	.word	0x80080000
 80227a0:	50040300 	.word	0x50040300
 80227a4:	c7520000 	.word	0xc7520000
 80227a8:	50040000 	.word	0x50040000
 80227ac:	00030d40 	.word	0x00030d40
 80227b0:	20000018 	.word	0x20000018
 80227b4:	cb840000 	.word	0xcb840000
 80227b8:	80000001 	.word	0x80000001

080227bc <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80227bc:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80227be:	6893      	ldr	r3, [r2, #8]
{
 80227c0:	b570      	push	{r4, r5, r6, lr}
 80227c2:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80227c4:	07d8      	lsls	r0, r3, #31
 80227c6:	d501      	bpl.n	80227cc <ADC_Enable+0x10>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80227c8:	2000      	movs	r0, #0
}
 80227ca:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80227cc:	6891      	ldr	r1, [r2, #8]
 80227ce:	4b16      	ldr	r3, [pc, #88]	; (8022828 <ADC_Enable+0x6c>)
 80227d0:	4219      	tst	r1, r3
 80227d2:	d009      	beq.n	80227e8 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80227d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80227d6:	f043 0310 	orr.w	r3, r3, #16
 80227da:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80227dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80227de:	f043 0301 	orr.w	r3, r3, #1
 80227e2:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80227e4:	2001      	movs	r0, #1
 80227e6:	e7f0      	b.n	80227ca <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 80227e8:	6893      	ldr	r3, [r2, #8]
 80227ea:	4d10      	ldr	r5, [pc, #64]	; (802282c <ADC_Enable+0x70>)
 80227ec:	402b      	ands	r3, r5
 80227ee:	f043 0301 	orr.w	r3, r3, #1
 80227f2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80227f4:	f7ff fc9a 	bl	802212c <HAL_GetTick>
 80227f8:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80227fa:	6822      	ldr	r2, [r4, #0]
 80227fc:	6813      	ldr	r3, [r2, #0]
 80227fe:	07db      	lsls	r3, r3, #31
 8022800:	d4e2      	bmi.n	80227c8 <ADC_Enable+0xc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8022802:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8022804:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8022806:	bf5f      	itttt	pl
 8022808:	6893      	ldrpl	r3, [r2, #8]
 802280a:	402b      	andpl	r3, r5
 802280c:	f043 0301 	orrpl.w	r3, r3, #1
 8022810:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8022812:	f7ff fc8b 	bl	802212c <HAL_GetTick>
 8022816:	1b83      	subs	r3, r0, r6
 8022818:	2b02      	cmp	r3, #2
 802281a:	d9ee      	bls.n	80227fa <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 802281c:	6823      	ldr	r3, [r4, #0]
 802281e:	681b      	ldr	r3, [r3, #0]
 8022820:	07da      	lsls	r2, r3, #31
 8022822:	d4ea      	bmi.n	80227fa <ADC_Enable+0x3e>
 8022824:	e7d6      	b.n	80227d4 <ADC_Enable+0x18>
 8022826:	bf00      	nop
 8022828:	8000003f 	.word	0x8000003f
 802282c:	7fffffc0 	.word	0x7fffffc0

08022830 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8022830:	4b34      	ldr	r3, [pc, #208]	; (8022904 <HAL_ADC_Start+0xd4>)
{
 8022832:	b570      	push	{r4, r5, r6, lr}
 8022834:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8022836:	6800      	ldr	r0, [r0, #0]
 8022838:	689e      	ldr	r6, [r3, #8]
 802283a:	f7ff fcb2 	bl	80221a2 <LL_ADC_REG_IsConversionOngoing>
 802283e:	4605      	mov	r5, r0
 8022840:	2800      	cmp	r0, #0
 8022842:	d159      	bne.n	80228f8 <HAL_ADC_Start+0xc8>
    __HAL_LOCK(hadc);
 8022844:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8022848:	2b01      	cmp	r3, #1
 802284a:	d055      	beq.n	80228f8 <HAL_ADC_Start+0xc8>
 802284c:	2301      	movs	r3, #1
 802284e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8022852:	4620      	mov	r0, r4
 8022854:	f7ff ffb2 	bl	80227bc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8022858:	2800      	cmp	r0, #0
 802285a:	d14a      	bne.n	80228f2 <HAL_ADC_Start+0xc2>
      ADC_STATE_CLR_SET(hadc->State,
 802285c:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 802285e:	492a      	ldr	r1, [pc, #168]	; (8022908 <HAL_ADC_Start+0xd8>)
      ADC_STATE_CLR_SET(hadc->State,
 8022860:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8022864:	f023 0301 	bic.w	r3, r3, #1
 8022868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802286c:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 802286e:	6823      	ldr	r3, [r4, #0]
 8022870:	428b      	cmp	r3, r1
 8022872:	f006 021f 	and.w	r2, r6, #31
 8022876:	d041      	beq.n	80228fc <HAL_ADC_Start+0xcc>
 8022878:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 802287a:	6d65      	ldr	r5, [r4, #84]	; 0x54
 802287c:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8022880:	6565      	str	r5, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8022882:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8022884:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8022888:	bf1c      	itt	ne
 802288a:	6da5      	ldrne	r5, [r4, #88]	; 0x58
 802288c:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8022890:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8022892:	251c      	movs	r5, #28
 8022894:	601d      	str	r5, [r3, #0]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8022896:	428b      	cmp	r3, r1
      __HAL_UNLOCK(hadc);
 8022898:	f04f 0500 	mov.w	r5, #0
 802289c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80228a0:	d007      	beq.n	80228b2 <HAL_ADC_Start+0x82>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80228a2:	2a09      	cmp	r2, #9
 80228a4:	d817      	bhi.n	80228d6 <HAL_ADC_Start+0xa6>
 80228a6:	f240 2521 	movw	r5, #545	; 0x221
 80228aa:	fa25 f202 	lsr.w	r2, r5, r2
 80228ae:	07d5      	lsls	r5, r2, #31
 80228b0:	d511      	bpl.n	80228d6 <HAL_ADC_Start+0xa6>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80228b2:	68da      	ldr	r2, [r3, #12]
 80228b4:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80228b6:	bf41      	itttt	mi
 80228b8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80228ba:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80228be:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80228c2:	6562      	strmi	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80228c4:	689a      	ldr	r2, [r3, #8]
 80228c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80228ca:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80228ce:	f042 0204 	orr.w	r2, r2, #4
 80228d2:	609a      	str	r2, [r3, #8]
}
 80228d4:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80228d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80228d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80228dc:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80228de:	68cb      	ldr	r3, [r1, #12]
 80228e0:	019b      	lsls	r3, r3, #6
 80228e2:	d5f7      	bpl.n	80228d4 <HAL_ADC_Start+0xa4>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80228e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80228e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80228ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80228ee:	6563      	str	r3, [r4, #84]	; 0x54
 80228f0:	e7f0      	b.n	80228d4 <HAL_ADC_Start+0xa4>
      __HAL_UNLOCK(hadc);
 80228f2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80228f6:	e7ed      	b.n	80228d4 <HAL_ADC_Start+0xa4>
    tmp_hal_status = HAL_BUSY;
 80228f8:	2002      	movs	r0, #2
 80228fa:	e7eb      	b.n	80228d4 <HAL_ADC_Start+0xa4>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80228fc:	4903      	ldr	r1, [pc, #12]	; (802290c <HAL_ADC_Start+0xdc>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80228fe:	2a00      	cmp	r2, #0
 8022900:	d0bb      	beq.n	802287a <HAL_ADC_Start+0x4a>
 8022902:	e7be      	b.n	8022882 <HAL_ADC_Start+0x52>
 8022904:	50040300 	.word	0x50040300
 8022908:	50040100 	.word	0x50040100
 802290c:	50040000 	.word	0x50040000

08022910 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8022910:	6880      	ldr	r0, [r0, #8]
}
 8022912:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8022916:	4770      	bx	lr

08022918 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8022918:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 802291a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 802291e:	2b01      	cmp	r3, #1
{
 8022920:	b09b      	sub	sp, #108	; 0x6c
 8022922:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8022924:	d05a      	beq.n	80229dc <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8022926:	2301      	movs	r3, #1
 8022928:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 802292c:	6817      	ldr	r7, [r2, #0]
 802292e:	4c2c      	ldr	r4, [pc, #176]	; (80229e0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8022930:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8022932:	42a7      	cmp	r7, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8022934:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8022936:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8022938:	d008      	beq.n	802294c <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 802293a:	6d51      	ldr	r1, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 802293c:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8022940:	f041 0120 	orr.w	r1, r1, #32
 8022944:	6551      	str	r1, [r2, #84]	; 0x54

    return HAL_ERROR;
 8022946:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8022948:	b01b      	add	sp, #108	; 0x6c
 802294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 802294c:	4e25      	ldr	r6, [pc, #148]	; (80229e4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 802294e:	4630      	mov	r0, r6
 8022950:	f7ff ffde 	bl	8022910 <LL_ADC_REG_IsConversionOngoing>
 8022954:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8022956:	6810      	ldr	r0, [r2, #0]
 8022958:	f7ff ffda 	bl	8022910 <LL_ADC_REG_IsConversionOngoing>
 802295c:	4320      	orrs	r0, r4
 802295e:	d138      	bne.n	80229d2 <HAL_ADCEx_MultiModeConfigChannel+0xba>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8022960:	4c21      	ldr	r4, [pc, #132]	; (80229e8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8022962:	680d      	ldr	r5, [r1, #0]
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8022964:	68a3      	ldr	r3, [r4, #8]
 8022966:	f8df c084 	ldr.w	ip, [pc, #132]	; 80229ec <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 802296a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 802296e:	b1fd      	cbz	r5, 80229b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8022970:	6848      	ldr	r0, [r1, #4]
 8022972:	4303      	orrs	r3, r0
 8022974:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8022978:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 802297c:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 802297e:	68bf      	ldr	r7, [r7, #8]
 8022980:	68b3      	ldr	r3, [r6, #8]
 8022982:	f8dc 0008 	ldr.w	r0, [ip, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8022986:	433b      	orrs	r3, r7
 8022988:	4303      	orrs	r3, r0
 802298a:	f013 0301 	ands.w	r3, r3, #1
 802298e:	d004      	beq.n	802299a <HAL_ADCEx_MultiModeConfigChannel+0x82>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8022990:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8022992:	2300      	movs	r3, #0
 8022994:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8022998:	e7d6      	b.n	8022948 <HAL_ADCEx_MultiModeConfigChannel+0x30>
        MODIFY_REG(tmpADC_Common->CCR,
 802299a:	6889      	ldr	r1, [r1, #8]
 802299c:	68a0      	ldr	r0, [r4, #8]
 802299e:	430d      	orrs	r5, r1
 80229a0:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80229a4:	f021 010f 	bic.w	r1, r1, #15
 80229a8:	430d      	orrs	r5, r1
 80229aa:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 80229ac:	4618      	mov	r0, r3
 80229ae:	e7f0      	b.n	8022992 <HAL_ADCEx_MultiModeConfigChannel+0x7a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80229b0:	60a3      	str	r3, [r4, #8]
 80229b2:	68b9      	ldr	r1, [r7, #8]
 80229b4:	68b3      	ldr	r3, [r6, #8]
 80229b6:	f8dc 0008 	ldr.w	r0, [ip, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80229ba:	430b      	orrs	r3, r1
 80229bc:	4303      	orrs	r3, r0
 80229be:	f013 0301 	ands.w	r3, r3, #1
 80229c2:	d1e5      	bne.n	8022990 <HAL_ADCEx_MultiModeConfigChannel+0x78>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80229c4:	68a1      	ldr	r1, [r4, #8]
 80229c6:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80229ca:	f021 010f 	bic.w	r1, r1, #15
 80229ce:	60a1      	str	r1, [r4, #8]
 80229d0:	e7ec      	b.n	80229ac <HAL_ADCEx_MultiModeConfigChannel+0x94>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80229d2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80229d4:	f041 0120 	orr.w	r1, r1, #32
 80229d8:	6551      	str	r1, [r2, #84]	; 0x54
 80229da:	e7e7      	b.n	80229ac <HAL_ADCEx_MultiModeConfigChannel+0x94>
  __HAL_LOCK(hadc);
 80229dc:	2002      	movs	r0, #2
 80229de:	e7b3      	b.n	8022948 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 80229e0:	50040000 	.word	0x50040000
 80229e4:	50040100 	.word	0x50040100
 80229e8:	50040300 	.word	0x50040300
 80229ec:	50040200 	.word	0x50040200

080229f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80229f0:	4907      	ldr	r1, [pc, #28]	; (8022a10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80229f2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80229f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80229f8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80229fa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80229fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022a00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8022a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8022a0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8022a0e:	4770      	bx	lr
 8022a10:	e000ed00 	.word	0xe000ed00

08022a14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022a14:	4b16      	ldr	r3, [pc, #88]	; (8022a70 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022a16:	b530      	push	{r4, r5, lr}
 8022a18:	68dc      	ldr	r4, [r3, #12]
 8022a1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022a1e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022a22:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022a24:	2d04      	cmp	r5, #4
 8022a26:	bf28      	it	cs
 8022a28:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022a2a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022a2c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022a30:	bf8c      	ite	hi
 8022a32:	3c03      	subhi	r4, #3
 8022a34:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022a36:	fa03 f505 	lsl.w	r5, r3, r5
 8022a3a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022a3e:	40a3      	lsls	r3, r4
 8022a40:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022a44:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8022a46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022a48:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022a4c:	bfac      	ite	ge
 8022a4e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022a52:	4a08      	ldrlt	r2, [pc, #32]	; (8022a74 <HAL_NVIC_SetPriority+0x60>)
 8022a54:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022a58:	bfb8      	it	lt
 8022a5a:	f000 000f 	andlt.w	r0, r0, #15
 8022a5e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022a60:	bfaa      	itet	ge
 8022a62:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022a66:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022a68:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8022a6c:	bd30      	pop	{r4, r5, pc}
 8022a6e:	bf00      	nop
 8022a70:	e000ed00 	.word	0xe000ed00
 8022a74:	e000ed14 	.word	0xe000ed14

08022a78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8022a78:	2800      	cmp	r0, #0
 8022a7a:	db08      	blt.n	8022a8e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022a7c:	2301      	movs	r3, #1
 8022a7e:	0942      	lsrs	r2, r0, #5
 8022a80:	f000 001f 	and.w	r0, r0, #31
 8022a84:	fa03 f000 	lsl.w	r0, r3, r0
 8022a88:	4b01      	ldr	r3, [pc, #4]	; (8022a90 <HAL_NVIC_EnableIRQ+0x18>)
 8022a8a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8022a8e:	4770      	bx	lr
 8022a90:	e000e100 	.word	0xe000e100

08022a94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8022a94:	3801      	subs	r0, #1
 8022a96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8022a9a:	d20a      	bcs.n	8022ab2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8022a9c:	4b06      	ldr	r3, [pc, #24]	; (8022ab8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022a9e:	4a07      	ldr	r2, [pc, #28]	; (8022abc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8022aa0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022aa2:	21f0      	movs	r1, #240	; 0xf0
 8022aa4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8022aa8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022aaa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8022aac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8022ab0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8022ab2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8022ab4:	4770      	bx	lr
 8022ab6:	bf00      	nop
 8022ab8:	e000e010 	.word	0xe000e010
 8022abc:	e000ed00 	.word	0xe000ed00

08022ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8022ac0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8022ac2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8022ac6:	2a02      	cmp	r2, #2
 8022ac8:	d003      	beq.n	8022ad2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8022aca:	2204      	movs	r2, #4
 8022acc:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8022ace:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8022ad0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8022ad2:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8022ad4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8022ad6:	6811      	ldr	r1, [r2, #0]
 8022ad8:	f021 010e 	bic.w	r1, r1, #14
 8022adc:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8022ade:	6811      	ldr	r1, [r2, #0]
 8022ae0:	f021 0101 	bic.w	r1, r1, #1
 8022ae4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8022ae6:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8022aea:	2101      	movs	r1, #1
 8022aec:	f002 021c 	and.w	r2, r2, #28
 8022af0:	fa01 f202 	lsl.w	r2, r1, r2
 8022af4:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8022af6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8022af8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8022afc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8022b00:	b113      	cbz	r3, 8022b08 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8022b02:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8022b04:	4620      	mov	r0, r4
 8022b06:	e7e3      	b.n	8022ad0 <HAL_DMA_Abort_IT+0x10>
 8022b08:	4618      	mov	r0, r3
 8022b0a:	e7e1      	b.n	8022ad0 <HAL_DMA_Abort_IT+0x10>

08022b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8022b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022b10:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8022cc4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8022b14:	4d69      	ldr	r5, [pc, #420]	; (8022cbc <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8022b16:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8022b18:	680a      	ldr	r2, [r1, #0]
 8022b1a:	fa32 f403 	lsrs.w	r4, r2, r3
 8022b1e:	d102      	bne.n	8022b26 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8022b20:	b003      	add	sp, #12
 8022b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8022b26:	f04f 0a01 	mov.w	sl, #1
 8022b2a:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 8022b2e:	ea1a 0202 	ands.w	r2, sl, r2
 8022b32:	f000 80b4 	beq.w	8022c9e <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8022b36:	684c      	ldr	r4, [r1, #4]
 8022b38:	f024 0e10 	bic.w	lr, r4, #16
 8022b3c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8022b40:	2603      	movs	r6, #3
 8022b42:	f10e 37ff 	add.w	r7, lr, #4294967295
 8022b46:	fa06 f608 	lsl.w	r6, r6, r8
 8022b4a:	2f01      	cmp	r7, #1
 8022b4c:	ea6f 0606 	mvn.w	r6, r6
 8022b50:	d811      	bhi.n	8022b76 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8022b52:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8022b54:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8022b58:	68cf      	ldr	r7, [r1, #12]
 8022b5a:	fa07 f708 	lsl.w	r7, r7, r8
 8022b5e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8022b62:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8022b64:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8022b66:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8022b6a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8022b6e:	409f      	lsls	r7, r3
 8022b70:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8022b74:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8022b76:	f004 0c03 	and.w	ip, r4, #3
 8022b7a:	f1bc 0f03 	cmp.w	ip, #3
 8022b7e:	d108      	bne.n	8022b92 <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 8022b80:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8022b82:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8022b86:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8022b8a:	409f      	lsls	r7, r3
 8022b8c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8022b90:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8022b92:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8022b94:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8022b98:	688f      	ldr	r7, [r1, #8]
 8022b9a:	fa07 f708 	lsl.w	r7, r7, r8
 8022b9e:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8022ba2:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8022ba6:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8022ba8:	d116      	bne.n	8022bd8 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 8022baa:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8022bae:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8022bb2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8022bb6:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8022bba:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8022bbe:	f04f 0e0f 	mov.w	lr, #15
 8022bc2:	fa0e fe0b 	lsl.w	lr, lr, fp
 8022bc6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8022bca:	690f      	ldr	r7, [r1, #16]
 8022bcc:	fa07 f70b 	lsl.w	r7, r7, fp
 8022bd0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8022bd4:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8022bd8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8022bda:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8022bde:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8022be0:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 8022be4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8022be6:	00e6      	lsls	r6, r4, #3
 8022be8:	d559      	bpl.n	8022c9e <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022bea:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8022bee:	f046 0601 	orr.w	r6, r6, #1
 8022bf2:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8022bf6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8022bfa:	f023 0703 	bic.w	r7, r3, #3
 8022bfe:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8022c02:	f006 0601 	and.w	r6, r6, #1
 8022c06:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8022c0a:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8022c0c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022c10:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8022c12:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8022c14:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8022c18:	f04f 0c0f 	mov.w	ip, #15
 8022c1c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8022c20:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8022c24:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8022c28:	d03b      	beq.n	8022ca2 <HAL_GPIO_Init+0x196>
 8022c2a:	4e25      	ldr	r6, [pc, #148]	; (8022cc0 <HAL_GPIO_Init+0x1b4>)
 8022c2c:	42b0      	cmp	r0, r6
 8022c2e:	d03a      	beq.n	8022ca6 <HAL_GPIO_Init+0x19a>
 8022c30:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022c34:	42b0      	cmp	r0, r6
 8022c36:	d038      	beq.n	8022caa <HAL_GPIO_Init+0x19e>
 8022c38:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022c3c:	42b0      	cmp	r0, r6
 8022c3e:	d036      	beq.n	8022cae <HAL_GPIO_Init+0x1a2>
 8022c40:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022c44:	42b0      	cmp	r0, r6
 8022c46:	d034      	beq.n	8022cb2 <HAL_GPIO_Init+0x1a6>
 8022c48:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022c4c:	42b0      	cmp	r0, r6
 8022c4e:	d032      	beq.n	8022cb6 <HAL_GPIO_Init+0x1aa>
 8022c50:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022c54:	42b0      	cmp	r0, r6
 8022c56:	bf0c      	ite	eq
 8022c58:	2606      	moveq	r6, #6
 8022c5a:	2607      	movne	r6, #7
 8022c5c:	fa06 f60e 	lsl.w	r6, r6, lr
 8022c60:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8022c64:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8022c66:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8022c68:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8022c6a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8022c6e:	bf0c      	ite	eq
 8022c70:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8022c72:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8022c74:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8022c76:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8022c78:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8022c7c:	bf0c      	ite	eq
 8022c7e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8022c80:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8022c82:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8022c84:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8022c86:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8022c8a:	bf0c      	ite	eq
 8022c8c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8022c8e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8022c90:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8022c92:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8022c94:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8022c96:	bf54      	ite	pl
 8022c98:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8022c9a:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8022c9c:	60ee      	str	r6, [r5, #12]
    position++;
 8022c9e:	3301      	adds	r3, #1
 8022ca0:	e73a      	b.n	8022b18 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8022ca2:	2600      	movs	r6, #0
 8022ca4:	e7da      	b.n	8022c5c <HAL_GPIO_Init+0x150>
 8022ca6:	2601      	movs	r6, #1
 8022ca8:	e7d8      	b.n	8022c5c <HAL_GPIO_Init+0x150>
 8022caa:	2602      	movs	r6, #2
 8022cac:	e7d6      	b.n	8022c5c <HAL_GPIO_Init+0x150>
 8022cae:	2603      	movs	r6, #3
 8022cb0:	e7d4      	b.n	8022c5c <HAL_GPIO_Init+0x150>
 8022cb2:	2604      	movs	r6, #4
 8022cb4:	e7d2      	b.n	8022c5c <HAL_GPIO_Init+0x150>
 8022cb6:	2605      	movs	r6, #5
 8022cb8:	e7d0      	b.n	8022c5c <HAL_GPIO_Init+0x150>
 8022cba:	bf00      	nop
 8022cbc:	40010400 	.word	0x40010400
 8022cc0:	48000400 	.word	0x48000400
 8022cc4:	40021000 	.word	0x40021000

08022cc8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8022cc8:	6903      	ldr	r3, [r0, #16]
 8022cca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8022ccc:	bf14      	ite	ne
 8022cce:	2001      	movne	r0, #1
 8022cd0:	2000      	moveq	r0, #0
 8022cd2:	4770      	bx	lr

08022cd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8022cd4:	b10a      	cbz	r2, 8022cda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8022cd6:	6181      	str	r1, [r0, #24]
 8022cd8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8022cda:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8022cdc:	4770      	bx	lr
	...

08022ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8022ce0:	4a04      	ldr	r2, [pc, #16]	; (8022cf4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8022ce2:	6951      	ldr	r1, [r2, #20]
 8022ce4:	4201      	tst	r1, r0
{
 8022ce6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8022ce8:	d002      	beq.n	8022cf0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8022cea:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8022cec:	f7fe f828 	bl	8020d40 <HAL_GPIO_EXTI_Callback>
  }
}
 8022cf0:	bd08      	pop	{r3, pc}
 8022cf2:	bf00      	nop
 8022cf4:	40010400 	.word	0x40010400

08022cf8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8022cf8:	4a02      	ldr	r2, [pc, #8]	; (8022d04 <HAL_PWR_EnableBkUpAccess+0xc>)
 8022cfa:	6813      	ldr	r3, [r2, #0]
 8022cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022d00:	6013      	str	r3, [r2, #0]
}
 8022d02:	4770      	bx	lr
 8022d04:	40007000 	.word	0x40007000

08022d08 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8022d08:	4a06      	ldr	r2, [pc, #24]	; (8022d24 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 8022d0a:	6813      	ldr	r3, [r2, #0]
 8022d0c:	f023 0307 	bic.w	r3, r3, #7
 8022d10:	f043 0303 	orr.w	r3, r3, #3
 8022d14:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8022d16:	4a04      	ldr	r2, [pc, #16]	; (8022d28 <HAL_PWR_EnterSTANDBYMode+0x20>)
 8022d18:	6913      	ldr	r3, [r2, #16]
 8022d1a:	f043 0304 	orr.w	r3, r3, #4
 8022d1e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8022d20:	bf30      	wfi
}
 8022d22:	4770      	bx	lr
 8022d24:	40007000 	.word	0x40007000
 8022d28:	e000ed00 	.word	0xe000ed00

08022d2c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8022d2c:	4b02      	ldr	r3, [pc, #8]	; (8022d38 <HAL_PWREx_GetVoltageRange+0xc>)
 8022d2e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8022d30:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8022d34:	4770      	bx	lr
 8022d36:	bf00      	nop
 8022d38:	40007000 	.word	0x40007000

08022d3c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8022d3c:	4b17      	ldr	r3, [pc, #92]	; (8022d9c <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8022d3e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8022d40:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8022d44:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8022d48:	d11e      	bne.n	8022d88 <HAL_PWREx_ControlVoltageScaling+0x4c>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8022d4a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8022d4e:	d101      	bne.n	8022d54 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8022d50:	2000      	movs	r0, #0
 8022d52:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8022d54:	681a      	ldr	r2, [r3, #0]
 8022d56:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8022d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022d5e:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8022d60:	4a0f      	ldr	r2, [pc, #60]	; (8022da0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8022d62:	6811      	ldr	r1, [r2, #0]
 8022d64:	2232      	movs	r2, #50	; 0x32
 8022d66:	434a      	muls	r2, r1
 8022d68:	490e      	ldr	r1, [pc, #56]	; (8022da4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8022d6a:	fbb2 f2f1 	udiv	r2, r2, r1
 8022d6e:	4619      	mov	r1, r3
 8022d70:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8022d72:	6958      	ldr	r0, [r3, #20]
 8022d74:	0540      	lsls	r0, r0, #21
 8022d76:	d500      	bpl.n	8022d7a <HAL_PWREx_ControlVoltageScaling+0x3e>
 8022d78:	b922      	cbnz	r2, 8022d84 <HAL_PWREx_ControlVoltageScaling+0x48>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8022d7a:	694b      	ldr	r3, [r1, #20]
 8022d7c:	055b      	lsls	r3, r3, #21
 8022d7e:	d5e7      	bpl.n	8022d50 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8022d80:	2003      	movs	r0, #3
}
 8022d82:	4770      	bx	lr
        wait_loop_index--;
 8022d84:	3a01      	subs	r2, #1
 8022d86:	e7f4      	b.n	8022d72 <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8022d88:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8022d8c:	bf1f      	itttt	ne
 8022d8e:	681a      	ldrne	r2, [r3, #0]
 8022d90:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8022d94:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8022d98:	601a      	strne	r2, [r3, #0]
 8022d9a:	e7d9      	b.n	8022d50 <HAL_PWREx_ControlVoltageScaling+0x14>
 8022d9c:	40007000 	.word	0x40007000
 8022da0:	20000018 	.word	0x20000018
 8022da4:	000f4240 	.word	0x000f4240

08022da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8022da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8022daa:	4d1e      	ldr	r5, [pc, #120]	; (8022e24 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8022dac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8022dae:	00da      	lsls	r2, r3, #3
{
 8022db0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8022db2:	d518      	bpl.n	8022de6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8022db4:	f7ff ffba 	bl	8022d2c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8022db8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8022dbc:	d123      	bne.n	8022e06 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8022dbe:	2c80      	cmp	r4, #128	; 0x80
 8022dc0:	d929      	bls.n	8022e16 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8022dc2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8022dc4:	bf8c      	ite	hi
 8022dc6:	2402      	movhi	r4, #2
 8022dc8:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8022dca:	4917      	ldr	r1, [pc, #92]	; (8022e28 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8022dcc:	680a      	ldr	r2, [r1, #0]
 8022dce:	f022 0207 	bic.w	r2, r2, #7
 8022dd2:	4322      	orrs	r2, r4
 8022dd4:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8022dd6:	6808      	ldr	r0, [r1, #0]
 8022dd8:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8022ddc:	1b00      	subs	r0, r0, r4
 8022dde:	bf18      	it	ne
 8022de0:	2001      	movne	r0, #1
 8022de2:	b003      	add	sp, #12
 8022de4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8022de6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8022de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022dec:	65ab      	str	r3, [r5, #88]	; 0x58
 8022dee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8022df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022df4:	9301      	str	r3, [sp, #4]
 8022df6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8022df8:	f7ff ff98 	bl	8022d2c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8022dfc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8022dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022e02:	65ab      	str	r3, [r5, #88]	; 0x58
 8022e04:	e7d8      	b.n	8022db8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8022e06:	2c80      	cmp	r4, #128	; 0x80
 8022e08:	d807      	bhi.n	8022e1a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8022e0a:	d008      	beq.n	8022e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8022e0c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8022e10:	425c      	negs	r4, r3
 8022e12:	415c      	adcs	r4, r3
 8022e14:	e7d9      	b.n	8022dca <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8022e16:	2400      	movs	r4, #0
 8022e18:	e7d7      	b.n	8022dca <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8022e1a:	2403      	movs	r4, #3
 8022e1c:	e7d5      	b.n	8022dca <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8022e1e:	2402      	movs	r4, #2
 8022e20:	e7d3      	b.n	8022dca <RCC_SetFlashLatencyFromMSIRange+0x22>
 8022e22:	bf00      	nop
 8022e24:	40021000 	.word	0x40021000
 8022e28:	40022000 	.word	0x40022000

08022e2c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022e2c:	4b22      	ldr	r3, [pc, #136]	; (8022eb8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8022e2e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8022e30:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8022e32:	f012 020c 	ands.w	r2, r2, #12
 8022e36:	d005      	beq.n	8022e44 <HAL_RCC_GetSysClockFreq+0x18>
 8022e38:	2a0c      	cmp	r2, #12
 8022e3a:	d115      	bne.n	8022e68 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8022e3c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8022e40:	2901      	cmp	r1, #1
 8022e42:	d118      	bne.n	8022e76 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8022e44:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8022e46:	481d      	ldr	r0, [pc, #116]	; (8022ebc <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8022e48:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8022e4a:	bf55      	itete	pl
 8022e4c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8022e50:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8022e52:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8022e56:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8022e5a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8022e5e:	b34a      	cbz	r2, 8022eb4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8022e60:	2a0c      	cmp	r2, #12
 8022e62:	d009      	beq.n	8022e78 <HAL_RCC_GetSysClockFreq+0x4c>
 8022e64:	2000      	movs	r0, #0
  return sysclockfreq;
 8022e66:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8022e68:	2a04      	cmp	r2, #4
 8022e6a:	d022      	beq.n	8022eb2 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8022e6c:	2a08      	cmp	r2, #8
 8022e6e:	4814      	ldr	r0, [pc, #80]	; (8022ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8022e70:	bf18      	it	ne
 8022e72:	2000      	movne	r0, #0
 8022e74:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8022e76:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8022e78:	68da      	ldr	r2, [r3, #12]
 8022e7a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8022e7e:	2a02      	cmp	r2, #2
 8022e80:	d015      	beq.n	8022eae <HAL_RCC_GetSysClockFreq+0x82>
 8022e82:	490f      	ldr	r1, [pc, #60]	; (8022ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8022e84:	2a03      	cmp	r2, #3
 8022e86:	bf08      	it	eq
 8022e88:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022e8a:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022e8c:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022e8e:	68db      	ldr	r3, [r3, #12]
 8022e90:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022e94:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022e98:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022e9c:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022e9e:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022ea0:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022ea2:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022ea4:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8022ea8:	fbb0 f0f3 	udiv	r0, r0, r3
 8022eac:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8022eae:	4805      	ldr	r0, [pc, #20]	; (8022ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8022eb0:	e7eb      	b.n	8022e8a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8022eb2:	4804      	ldr	r0, [pc, #16]	; (8022ec4 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8022eb4:	4770      	bx	lr
 8022eb6:	bf00      	nop
 8022eb8:	40021000 	.word	0x40021000
 8022ebc:	08026b28 	.word	0x08026b28
 8022ec0:	007a1200 	.word	0x007a1200
 8022ec4:	00f42400 	.word	0x00f42400

08022ec8 <HAL_RCC_OscConfig>:
{
 8022ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8022ecc:	4605      	mov	r5, r0
 8022ece:	b918      	cbnz	r0, 8022ed8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8022ed0:	2001      	movs	r0, #1
}
 8022ed2:	b003      	add	sp, #12
 8022ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022ed8:	4ca7      	ldr	r4, [pc, #668]	; (8023178 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8022eda:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022edc:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8022ede:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8022ee0:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022ee2:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8022ee6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8022eea:	d53d      	bpl.n	8022f68 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8022eec:	b11e      	cbz	r6, 8022ef6 <HAL_RCC_OscConfig+0x2e>
 8022eee:	2e0c      	cmp	r6, #12
 8022ef0:	d166      	bne.n	8022fc0 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8022ef2:	2f01      	cmp	r7, #1
 8022ef4:	d164      	bne.n	8022fc0 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8022ef6:	6823      	ldr	r3, [r4, #0]
 8022ef8:	0799      	lsls	r1, r3, #30
 8022efa:	d502      	bpl.n	8022f02 <HAL_RCC_OscConfig+0x3a>
 8022efc:	69ab      	ldr	r3, [r5, #24]
 8022efe:	2b00      	cmp	r3, #0
 8022f00:	d0e6      	beq.n	8022ed0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8022f02:	6823      	ldr	r3, [r4, #0]
 8022f04:	6a28      	ldr	r0, [r5, #32]
 8022f06:	071a      	lsls	r2, r3, #28
 8022f08:	bf56      	itet	pl
 8022f0a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8022f0e:	6823      	ldrmi	r3, [r4, #0]
 8022f10:	091b      	lsrpl	r3, r3, #4
 8022f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022f16:	4298      	cmp	r0, r3
 8022f18:	d93b      	bls.n	8022f92 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8022f1a:	f7ff ff45 	bl	8022da8 <RCC_SetFlashLatencyFromMSIRange>
 8022f1e:	2800      	cmp	r0, #0
 8022f20:	d1d6      	bne.n	8022ed0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8022f22:	6823      	ldr	r3, [r4, #0]
 8022f24:	f043 0308 	orr.w	r3, r3, #8
 8022f28:	6023      	str	r3, [r4, #0]
 8022f2a:	6823      	ldr	r3, [r4, #0]
 8022f2c:	6a2a      	ldr	r2, [r5, #32]
 8022f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022f32:	4313      	orrs	r3, r2
 8022f34:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8022f36:	6863      	ldr	r3, [r4, #4]
 8022f38:	69ea      	ldr	r2, [r5, #28]
 8022f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8022f3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022f42:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8022f44:	f7ff ff72 	bl	8022e2c <HAL_RCC_GetSysClockFreq>
 8022f48:	68a3      	ldr	r3, [r4, #8]
 8022f4a:	4a8c      	ldr	r2, [pc, #560]	; (802317c <HAL_RCC_OscConfig+0x2b4>)
 8022f4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8022f50:	5cd3      	ldrb	r3, [r2, r3]
 8022f52:	f003 031f 	and.w	r3, r3, #31
 8022f56:	40d8      	lsrs	r0, r3
 8022f58:	4b89      	ldr	r3, [pc, #548]	; (8023180 <HAL_RCC_OscConfig+0x2b8>)
 8022f5a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8022f5c:	4b89      	ldr	r3, [pc, #548]	; (8023184 <HAL_RCC_OscConfig+0x2bc>)
 8022f5e:	6818      	ldr	r0, [r3, #0]
 8022f60:	f7ff f8a4 	bl	80220ac <HAL_InitTick>
        if(status != HAL_OK)
 8022f64:	2800      	cmp	r0, #0
 8022f66:	d1b4      	bne.n	8022ed2 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8022f68:	682b      	ldr	r3, [r5, #0]
 8022f6a:	07d9      	lsls	r1, r3, #31
 8022f6c:	d45f      	bmi.n	802302e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8022f6e:	682b      	ldr	r3, [r5, #0]
 8022f70:	079a      	lsls	r2, r3, #30
 8022f72:	f100 809e 	bmi.w	80230b2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8022f76:	682b      	ldr	r3, [r5, #0]
 8022f78:	0719      	lsls	r1, r3, #28
 8022f7a:	f100 80d2 	bmi.w	8023122 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8022f7e:	682b      	ldr	r3, [r5, #0]
 8022f80:	075a      	lsls	r2, r3, #29
 8022f82:	f100 8101 	bmi.w	8023188 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8022f86:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8022f88:	2b00      	cmp	r3, #0
 8022f8a:	f040 816a 	bne.w	8023262 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8022f8e:	2000      	movs	r0, #0
 8022f90:	e79f      	b.n	8022ed2 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8022f92:	6823      	ldr	r3, [r4, #0]
 8022f94:	f043 0308 	orr.w	r3, r3, #8
 8022f98:	6023      	str	r3, [r4, #0]
 8022f9a:	6823      	ldr	r3, [r4, #0]
 8022f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022fa0:	4303      	orrs	r3, r0
 8022fa2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8022fa4:	6863      	ldr	r3, [r4, #4]
 8022fa6:	69ea      	ldr	r2, [r5, #28]
 8022fa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8022fac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022fb0:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8022fb2:	2e00      	cmp	r6, #0
 8022fb4:	d1c6      	bne.n	8022f44 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8022fb6:	f7ff fef7 	bl	8022da8 <RCC_SetFlashLatencyFromMSIRange>
 8022fba:	2800      	cmp	r0, #0
 8022fbc:	d0c2      	beq.n	8022f44 <HAL_RCC_OscConfig+0x7c>
 8022fbe:	e787      	b.n	8022ed0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8022fc0:	69ab      	ldr	r3, [r5, #24]
 8022fc2:	b31b      	cbz	r3, 802300c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8022fc4:	6823      	ldr	r3, [r4, #0]
 8022fc6:	f043 0301 	orr.w	r3, r3, #1
 8022fca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8022fcc:	f7ff f8ae 	bl	802212c <HAL_GetTick>
 8022fd0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8022fd2:	6823      	ldr	r3, [r4, #0]
 8022fd4:	079b      	lsls	r3, r3, #30
 8022fd6:	d511      	bpl.n	8022ffc <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8022fd8:	6823      	ldr	r3, [r4, #0]
 8022fda:	f043 0308 	orr.w	r3, r3, #8
 8022fde:	6023      	str	r3, [r4, #0]
 8022fe0:	6823      	ldr	r3, [r4, #0]
 8022fe2:	6a2a      	ldr	r2, [r5, #32]
 8022fe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022fe8:	4313      	orrs	r3, r2
 8022fea:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8022fec:	6863      	ldr	r3, [r4, #4]
 8022fee:	69ea      	ldr	r2, [r5, #28]
 8022ff0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8022ff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022ff8:	6063      	str	r3, [r4, #4]
 8022ffa:	e7b5      	b.n	8022f68 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8022ffc:	f7ff f896 	bl	802212c <HAL_GetTick>
 8023000:	eba0 0008 	sub.w	r0, r0, r8
 8023004:	2802      	cmp	r0, #2
 8023006:	d9e4      	bls.n	8022fd2 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8023008:	2003      	movs	r0, #3
 802300a:	e762      	b.n	8022ed2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 802300c:	6823      	ldr	r3, [r4, #0]
 802300e:	f023 0301 	bic.w	r3, r3, #1
 8023012:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8023014:	f7ff f88a 	bl	802212c <HAL_GetTick>
 8023018:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 802301a:	6823      	ldr	r3, [r4, #0]
 802301c:	0798      	lsls	r0, r3, #30
 802301e:	d5a3      	bpl.n	8022f68 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8023020:	f7ff f884 	bl	802212c <HAL_GetTick>
 8023024:	eba0 0008 	sub.w	r0, r0, r8
 8023028:	2802      	cmp	r0, #2
 802302a:	d9f6      	bls.n	802301a <HAL_RCC_OscConfig+0x152>
 802302c:	e7ec      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 802302e:	2e08      	cmp	r6, #8
 8023030:	d003      	beq.n	802303a <HAL_RCC_OscConfig+0x172>
 8023032:	2e0c      	cmp	r6, #12
 8023034:	d108      	bne.n	8023048 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8023036:	2f03      	cmp	r7, #3
 8023038:	d106      	bne.n	8023048 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802303a:	6823      	ldr	r3, [r4, #0]
 802303c:	039b      	lsls	r3, r3, #14
 802303e:	d596      	bpl.n	8022f6e <HAL_RCC_OscConfig+0xa6>
 8023040:	686b      	ldr	r3, [r5, #4]
 8023042:	2b00      	cmp	r3, #0
 8023044:	d193      	bne.n	8022f6e <HAL_RCC_OscConfig+0xa6>
 8023046:	e743      	b.n	8022ed0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8023048:	686b      	ldr	r3, [r5, #4]
 802304a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802304e:	d110      	bne.n	8023072 <HAL_RCC_OscConfig+0x1aa>
 8023050:	6823      	ldr	r3, [r4, #0]
 8023052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023056:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8023058:	f7ff f868 	bl	802212c <HAL_GetTick>
 802305c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 802305e:	6823      	ldr	r3, [r4, #0]
 8023060:	0398      	lsls	r0, r3, #14
 8023062:	d484      	bmi.n	8022f6e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8023064:	f7ff f862 	bl	802212c <HAL_GetTick>
 8023068:	eba0 0008 	sub.w	r0, r0, r8
 802306c:	2864      	cmp	r0, #100	; 0x64
 802306e:	d9f6      	bls.n	802305e <HAL_RCC_OscConfig+0x196>
 8023070:	e7ca      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8023072:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8023076:	d104      	bne.n	8023082 <HAL_RCC_OscConfig+0x1ba>
 8023078:	6823      	ldr	r3, [r4, #0]
 802307a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802307e:	6023      	str	r3, [r4, #0]
 8023080:	e7e6      	b.n	8023050 <HAL_RCC_OscConfig+0x188>
 8023082:	6822      	ldr	r2, [r4, #0]
 8023084:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8023088:	6022      	str	r2, [r4, #0]
 802308a:	6822      	ldr	r2, [r4, #0]
 802308c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8023090:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8023092:	2b00      	cmp	r3, #0
 8023094:	d1e0      	bne.n	8023058 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8023096:	f7ff f849 	bl	802212c <HAL_GetTick>
 802309a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 802309c:	6823      	ldr	r3, [r4, #0]
 802309e:	0399      	lsls	r1, r3, #14
 80230a0:	f57f af65 	bpl.w	8022f6e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80230a4:	f7ff f842 	bl	802212c <HAL_GetTick>
 80230a8:	eba0 0008 	sub.w	r0, r0, r8
 80230ac:	2864      	cmp	r0, #100	; 0x64
 80230ae:	d9f5      	bls.n	802309c <HAL_RCC_OscConfig+0x1d4>
 80230b0:	e7aa      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80230b2:	2e04      	cmp	r6, #4
 80230b4:	d003      	beq.n	80230be <HAL_RCC_OscConfig+0x1f6>
 80230b6:	2e0c      	cmp	r6, #12
 80230b8:	d110      	bne.n	80230dc <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80230ba:	2f02      	cmp	r7, #2
 80230bc:	d10e      	bne.n	80230dc <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80230be:	6823      	ldr	r3, [r4, #0]
 80230c0:	055a      	lsls	r2, r3, #21
 80230c2:	d503      	bpl.n	80230cc <HAL_RCC_OscConfig+0x204>
 80230c4:	68eb      	ldr	r3, [r5, #12]
 80230c6:	2b00      	cmp	r3, #0
 80230c8:	f43f af02 	beq.w	8022ed0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80230cc:	6863      	ldr	r3, [r4, #4]
 80230ce:	692a      	ldr	r2, [r5, #16]
 80230d0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80230d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80230d8:	6063      	str	r3, [r4, #4]
 80230da:	e74c      	b.n	8022f76 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80230dc:	68eb      	ldr	r3, [r5, #12]
 80230de:	b17b      	cbz	r3, 8023100 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80230e0:	6823      	ldr	r3, [r4, #0]
 80230e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80230e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80230e8:	f7ff f820 	bl	802212c <HAL_GetTick>
 80230ec:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80230ee:	6823      	ldr	r3, [r4, #0]
 80230f0:	055b      	lsls	r3, r3, #21
 80230f2:	d4eb      	bmi.n	80230cc <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80230f4:	f7ff f81a 	bl	802212c <HAL_GetTick>
 80230f8:	1bc0      	subs	r0, r0, r7
 80230fa:	2802      	cmp	r0, #2
 80230fc:	d9f7      	bls.n	80230ee <HAL_RCC_OscConfig+0x226>
 80230fe:	e783      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8023100:	6823      	ldr	r3, [r4, #0]
 8023102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8023106:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8023108:	f7ff f810 	bl	802212c <HAL_GetTick>
 802310c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 802310e:	6823      	ldr	r3, [r4, #0]
 8023110:	0558      	lsls	r0, r3, #21
 8023112:	f57f af30 	bpl.w	8022f76 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8023116:	f7ff f809 	bl	802212c <HAL_GetTick>
 802311a:	1bc0      	subs	r0, r0, r7
 802311c:	2802      	cmp	r0, #2
 802311e:	d9f6      	bls.n	802310e <HAL_RCC_OscConfig+0x246>
 8023120:	e772      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8023122:	696b      	ldr	r3, [r5, #20]
 8023124:	b19b      	cbz	r3, 802314e <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8023126:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 802312a:	f043 0301 	orr.w	r3, r3, #1
 802312e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8023132:	f7fe fffb 	bl	802212c <HAL_GetTick>
 8023136:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8023138:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 802313c:	079b      	lsls	r3, r3, #30
 802313e:	f53f af1e 	bmi.w	8022f7e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8023142:	f7fe fff3 	bl	802212c <HAL_GetTick>
 8023146:	1bc0      	subs	r0, r0, r7
 8023148:	2802      	cmp	r0, #2
 802314a:	d9f5      	bls.n	8023138 <HAL_RCC_OscConfig+0x270>
 802314c:	e75c      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 802314e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8023152:	f023 0301 	bic.w	r3, r3, #1
 8023156:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 802315a:	f7fe ffe7 	bl	802212c <HAL_GetTick>
 802315e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8023160:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8023164:	0798      	lsls	r0, r3, #30
 8023166:	f57f af0a 	bpl.w	8022f7e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802316a:	f7fe ffdf 	bl	802212c <HAL_GetTick>
 802316e:	1bc0      	subs	r0, r0, r7
 8023170:	2802      	cmp	r0, #2
 8023172:	d9f5      	bls.n	8023160 <HAL_RCC_OscConfig+0x298>
 8023174:	e748      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
 8023176:	bf00      	nop
 8023178:	40021000 	.word	0x40021000
 802317c:	08026b58 	.word	0x08026b58
 8023180:	20000018 	.word	0x20000018
 8023184:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8023188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802318a:	00d9      	lsls	r1, r3, #3
 802318c:	d429      	bmi.n	80231e2 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 802318e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023194:	65a3      	str	r3, [r4, #88]	; 0x58
 8023196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802319c:	9301      	str	r3, [sp, #4]
 802319e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80231a0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80231a4:	4f89      	ldr	r7, [pc, #548]	; (80233cc <HAL_RCC_OscConfig+0x504>)
 80231a6:	683b      	ldr	r3, [r7, #0]
 80231a8:	05da      	lsls	r2, r3, #23
 80231aa:	d51d      	bpl.n	80231e8 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80231ac:	68ab      	ldr	r3, [r5, #8]
 80231ae:	2b01      	cmp	r3, #1
 80231b0:	d12b      	bne.n	802320a <HAL_RCC_OscConfig+0x342>
 80231b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80231b6:	f043 0301 	orr.w	r3, r3, #1
 80231ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80231be:	f7fe ffb5 	bl	802212c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80231c2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80231c6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80231c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80231cc:	0798      	lsls	r0, r3, #30
 80231ce:	d542      	bpl.n	8023256 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 80231d0:	f1b8 0f00 	cmp.w	r8, #0
 80231d4:	f43f aed7 	beq.w	8022f86 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80231d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80231da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80231de:	65a3      	str	r3, [r4, #88]	; 0x58
 80231e0:	e6d1      	b.n	8022f86 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80231e2:	f04f 0800 	mov.w	r8, #0
 80231e6:	e7dd      	b.n	80231a4 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80231e8:	683b      	ldr	r3, [r7, #0]
 80231ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80231ee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80231f0:	f7fe ff9c 	bl	802212c <HAL_GetTick>
 80231f4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80231f6:	683b      	ldr	r3, [r7, #0]
 80231f8:	05db      	lsls	r3, r3, #23
 80231fa:	d4d7      	bmi.n	80231ac <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80231fc:	f7fe ff96 	bl	802212c <HAL_GetTick>
 8023200:	eba0 0009 	sub.w	r0, r0, r9
 8023204:	2802      	cmp	r0, #2
 8023206:	d9f6      	bls.n	80231f6 <HAL_RCC_OscConfig+0x32e>
 8023208:	e6fe      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802320a:	2b05      	cmp	r3, #5
 802320c:	d106      	bne.n	802321c <HAL_RCC_OscConfig+0x354>
 802320e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8023212:	f043 0304 	orr.w	r3, r3, #4
 8023216:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 802321a:	e7ca      	b.n	80231b2 <HAL_RCC_OscConfig+0x2ea>
 802321c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8023220:	f022 0201 	bic.w	r2, r2, #1
 8023224:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8023228:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 802322c:	f022 0204 	bic.w	r2, r2, #4
 8023230:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8023234:	2b00      	cmp	r3, #0
 8023236:	d1c2      	bne.n	80231be <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8023238:	f7fe ff78 	bl	802212c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802323c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8023240:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8023242:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8023246:	0799      	lsls	r1, r3, #30
 8023248:	d5c2      	bpl.n	80231d0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802324a:	f7fe ff6f 	bl	802212c <HAL_GetTick>
 802324e:	1bc0      	subs	r0, r0, r7
 8023250:	4548      	cmp	r0, r9
 8023252:	d9f6      	bls.n	8023242 <HAL_RCC_OscConfig+0x37a>
 8023254:	e6d8      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8023256:	f7fe ff69 	bl	802212c <HAL_GetTick>
 802325a:	1bc0      	subs	r0, r0, r7
 802325c:	4548      	cmp	r0, r9
 802325e:	d9b3      	bls.n	80231c8 <HAL_RCC_OscConfig+0x300>
 8023260:	e6d2      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8023262:	2b02      	cmp	r3, #2
 8023264:	f040 808f 	bne.w	8023386 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8023268:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 802326a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 802326c:	f003 0103 	and.w	r1, r3, #3
 8023270:	4291      	cmp	r1, r2
 8023272:	d124      	bne.n	80232be <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8023274:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8023276:	f003 0270 	and.w	r2, r3, #112	; 0x70
 802327a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 802327c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8023280:	d11d      	bne.n	80232be <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8023282:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8023284:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8023288:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 802328c:	d117      	bne.n	80232be <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 802328e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8023290:	3a07      	subs	r2, #7
 8023292:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8023296:	bf18      	it	ne
 8023298:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 802329a:	4291      	cmp	r1, r2
 802329c:	d10f      	bne.n	80232be <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 802329e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80232a0:	0852      	lsrs	r2, r2, #1
 80232a2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80232a6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80232a8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80232ac:	d107      	bne.n	80232be <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80232ae:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80232b0:	0852      	lsrs	r2, r2, #1
 80232b2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80232b6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80232b8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80232bc:	d04a      	beq.n	8023354 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80232be:	2e0c      	cmp	r6, #12
 80232c0:	f43f ae06 	beq.w	8022ed0 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80232c4:	6823      	ldr	r3, [r4, #0]
 80232c6:	015a      	lsls	r2, r3, #5
 80232c8:	f53f ae02 	bmi.w	8022ed0 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80232cc:	6823      	ldr	r3, [r4, #0]
 80232ce:	00db      	lsls	r3, r3, #3
 80232d0:	f53f adfe 	bmi.w	8022ed0 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80232d4:	6823      	ldr	r3, [r4, #0]
 80232d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80232da:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80232dc:	f7fe ff26 	bl	802212c <HAL_GetTick>
 80232e0:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80232e2:	6823      	ldr	r3, [r4, #0]
 80232e4:	019f      	lsls	r7, r3, #6
 80232e6:	d42f      	bmi.n	8023348 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80232e8:	68e2      	ldr	r2, [r4, #12]
 80232ea:	4b39      	ldr	r3, [pc, #228]	; (80233d0 <HAL_RCC_OscConfig+0x508>)
 80232ec:	4013      	ands	r3, r2
 80232ee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80232f0:	4313      	orrs	r3, r2
 80232f2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80232f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80232f8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80232fa:	3a01      	subs	r2, #1
 80232fc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8023300:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8023302:	0912      	lsrs	r2, r2, #4
 8023304:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8023308:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 802330a:	0852      	lsrs	r2, r2, #1
 802330c:	3a01      	subs	r2, #1
 802330e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8023312:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8023314:	0852      	lsrs	r2, r2, #1
 8023316:	3a01      	subs	r2, #1
 8023318:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 802331c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 802331e:	6823      	ldr	r3, [r4, #0]
 8023320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8023324:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8023326:	68e3      	ldr	r3, [r4, #12]
 8023328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802332c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 802332e:	f7fe fefd 	bl	802212c <HAL_GetTick>
 8023332:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8023334:	6823      	ldr	r3, [r4, #0]
 8023336:	0198      	lsls	r0, r3, #6
 8023338:	f53f ae29 	bmi.w	8022f8e <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802333c:	f7fe fef6 	bl	802212c <HAL_GetTick>
 8023340:	1b40      	subs	r0, r0, r5
 8023342:	2802      	cmp	r0, #2
 8023344:	d9f6      	bls.n	8023334 <HAL_RCC_OscConfig+0x46c>
 8023346:	e65f      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8023348:	f7fe fef0 	bl	802212c <HAL_GetTick>
 802334c:	1b80      	subs	r0, r0, r6
 802334e:	2802      	cmp	r0, #2
 8023350:	d9c7      	bls.n	80232e2 <HAL_RCC_OscConfig+0x41a>
 8023352:	e659      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8023354:	6823      	ldr	r3, [r4, #0]
 8023356:	0199      	lsls	r1, r3, #6
 8023358:	f53f ae19 	bmi.w	8022f8e <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 802335c:	6823      	ldr	r3, [r4, #0]
 802335e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8023362:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8023364:	68e3      	ldr	r3, [r4, #12]
 8023366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802336a:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 802336c:	f7fe fede 	bl	802212c <HAL_GetTick>
 8023370:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8023372:	6823      	ldr	r3, [r4, #0]
 8023374:	019a      	lsls	r2, r3, #6
 8023376:	f53f ae0a 	bmi.w	8022f8e <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802337a:	f7fe fed7 	bl	802212c <HAL_GetTick>
 802337e:	1b40      	subs	r0, r0, r5
 8023380:	2802      	cmp	r0, #2
 8023382:	d9f6      	bls.n	8023372 <HAL_RCC_OscConfig+0x4aa>
 8023384:	e640      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8023386:	2e0c      	cmp	r6, #12
 8023388:	f43f ada2 	beq.w	8022ed0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 802338c:	6823      	ldr	r3, [r4, #0]
 802338e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8023392:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8023394:	6823      	ldr	r3, [r4, #0]
 8023396:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 802339a:	bf02      	ittt	eq
 802339c:	68e3      	ldreq	r3, [r4, #12]
 802339e:	f023 0303 	biceq.w	r3, r3, #3
 80233a2:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80233a4:	68e3      	ldr	r3, [r4, #12]
 80233a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80233aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80233ae:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80233b0:	f7fe febc 	bl	802212c <HAL_GetTick>
 80233b4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80233b6:	6823      	ldr	r3, [r4, #0]
 80233b8:	019b      	lsls	r3, r3, #6
 80233ba:	f57f ade8 	bpl.w	8022f8e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80233be:	f7fe feb5 	bl	802212c <HAL_GetTick>
 80233c2:	1b40      	subs	r0, r0, r5
 80233c4:	2802      	cmp	r0, #2
 80233c6:	d9f6      	bls.n	80233b6 <HAL_RCC_OscConfig+0x4ee>
 80233c8:	e61e      	b.n	8023008 <HAL_RCC_OscConfig+0x140>
 80233ca:	bf00      	nop
 80233cc:	40007000 	.word	0x40007000
 80233d0:	f99d808c 	.word	0xf99d808c

080233d4 <HAL_RCC_ClockConfig>:
{
 80233d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80233d8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80233da:	4604      	mov	r4, r0
 80233dc:	b910      	cbnz	r0, 80233e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80233de:	2001      	movs	r0, #1
}
 80233e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80233e4:	4a40      	ldr	r2, [pc, #256]	; (80234e8 <HAL_RCC_ClockConfig+0x114>)
 80233e6:	6813      	ldr	r3, [r2, #0]
 80233e8:	f003 0307 	and.w	r3, r3, #7
 80233ec:	428b      	cmp	r3, r1
 80233ee:	d32a      	bcc.n	8023446 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80233f0:	6823      	ldr	r3, [r4, #0]
 80233f2:	07d9      	lsls	r1, r3, #31
 80233f4:	d432      	bmi.n	802345c <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80233f6:	6821      	ldr	r1, [r4, #0]
 80233f8:	078a      	lsls	r2, r1, #30
 80233fa:	d45b      	bmi.n	80234b4 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80233fc:	4a3a      	ldr	r2, [pc, #232]	; (80234e8 <HAL_RCC_ClockConfig+0x114>)
 80233fe:	6813      	ldr	r3, [r2, #0]
 8023400:	f003 0307 	and.w	r3, r3, #7
 8023404:	42ab      	cmp	r3, r5
 8023406:	d85d      	bhi.n	80234c4 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8023408:	f011 0f04 	tst.w	r1, #4
 802340c:	4d37      	ldr	r5, [pc, #220]	; (80234ec <HAL_RCC_ClockConfig+0x118>)
 802340e:	d164      	bne.n	80234da <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8023410:	070b      	lsls	r3, r1, #28
 8023412:	d506      	bpl.n	8023422 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8023414:	68ab      	ldr	r3, [r5, #8]
 8023416:	6922      	ldr	r2, [r4, #16]
 8023418:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 802341c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8023420:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8023422:	f7ff fd03 	bl	8022e2c <HAL_RCC_GetSysClockFreq>
 8023426:	68ab      	ldr	r3, [r5, #8]
 8023428:	4a31      	ldr	r2, [pc, #196]	; (80234f0 <HAL_RCC_ClockConfig+0x11c>)
 802342a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 802342e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8023432:	5cd3      	ldrb	r3, [r2, r3]
 8023434:	f003 031f 	and.w	r3, r3, #31
 8023438:	40d8      	lsrs	r0, r3
 802343a:	4b2e      	ldr	r3, [pc, #184]	; (80234f4 <HAL_RCC_ClockConfig+0x120>)
 802343c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 802343e:	4b2e      	ldr	r3, [pc, #184]	; (80234f8 <HAL_RCC_ClockConfig+0x124>)
 8023440:	6818      	ldr	r0, [r3, #0]
 8023442:	f7fe be33 	b.w	80220ac <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8023446:	6813      	ldr	r3, [r2, #0]
 8023448:	f023 0307 	bic.w	r3, r3, #7
 802344c:	430b      	orrs	r3, r1
 802344e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8023450:	6813      	ldr	r3, [r2, #0]
 8023452:	f003 0307 	and.w	r3, r3, #7
 8023456:	428b      	cmp	r3, r1
 8023458:	d1c1      	bne.n	80233de <HAL_RCC_ClockConfig+0xa>
 802345a:	e7c9      	b.n	80233f0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802345c:	6862      	ldr	r2, [r4, #4]
 802345e:	4e23      	ldr	r6, [pc, #140]	; (80234ec <HAL_RCC_ClockConfig+0x118>)
 8023460:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8023462:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8023464:	d11a      	bne.n	802349c <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8023466:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 802346a:	d0b8      	beq.n	80233de <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 802346c:	68b3      	ldr	r3, [r6, #8]
 802346e:	f023 0303 	bic.w	r3, r3, #3
 8023472:	4313      	orrs	r3, r2
 8023474:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8023476:	f7fe fe59 	bl	802212c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802347a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 802347e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8023480:	68b3      	ldr	r3, [r6, #8]
 8023482:	6862      	ldr	r2, [r4, #4]
 8023484:	f003 030c 	and.w	r3, r3, #12
 8023488:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 802348c:	d0b3      	beq.n	80233f6 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802348e:	f7fe fe4d 	bl	802212c <HAL_GetTick>
 8023492:	1bc0      	subs	r0, r0, r7
 8023494:	4540      	cmp	r0, r8
 8023496:	d9f3      	bls.n	8023480 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8023498:	2003      	movs	r0, #3
 802349a:	e7a1      	b.n	80233e0 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802349c:	2a02      	cmp	r2, #2
 802349e:	d102      	bne.n	80234a6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80234a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80234a4:	e7e1      	b.n	802346a <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80234a6:	b912      	cbnz	r2, 80234ae <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80234a8:	f013 0f02 	tst.w	r3, #2
 80234ac:	e7dd      	b.n	802346a <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80234ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80234b2:	e7da      	b.n	802346a <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80234b4:	4a0d      	ldr	r2, [pc, #52]	; (80234ec <HAL_RCC_ClockConfig+0x118>)
 80234b6:	68a0      	ldr	r0, [r4, #8]
 80234b8:	6893      	ldr	r3, [r2, #8]
 80234ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80234be:	4303      	orrs	r3, r0
 80234c0:	6093      	str	r3, [r2, #8]
 80234c2:	e79b      	b.n	80233fc <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80234c4:	6813      	ldr	r3, [r2, #0]
 80234c6:	f023 0307 	bic.w	r3, r3, #7
 80234ca:	432b      	orrs	r3, r5
 80234cc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80234ce:	6813      	ldr	r3, [r2, #0]
 80234d0:	f003 0307 	and.w	r3, r3, #7
 80234d4:	42ab      	cmp	r3, r5
 80234d6:	d182      	bne.n	80233de <HAL_RCC_ClockConfig+0xa>
 80234d8:	e796      	b.n	8023408 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80234da:	68ab      	ldr	r3, [r5, #8]
 80234dc:	68e2      	ldr	r2, [r4, #12]
 80234de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80234e2:	4313      	orrs	r3, r2
 80234e4:	60ab      	str	r3, [r5, #8]
 80234e6:	e793      	b.n	8023410 <HAL_RCC_ClockConfig+0x3c>
 80234e8:	40022000 	.word	0x40022000
 80234ec:	40021000 	.word	0x40021000
 80234f0:	08026b58 	.word	0x08026b58
 80234f4:	20000018 	.word	0x20000018
 80234f8:	20000020 	.word	0x20000020

080234fc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80234fc:	4b05      	ldr	r3, [pc, #20]	; (8023514 <HAL_RCC_GetPCLK1Freq+0x18>)
 80234fe:	4a06      	ldr	r2, [pc, #24]	; (8023518 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8023500:	689b      	ldr	r3, [r3, #8]
 8023502:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8023506:	5cd3      	ldrb	r3, [r2, r3]
 8023508:	4a04      	ldr	r2, [pc, #16]	; (802351c <HAL_RCC_GetPCLK1Freq+0x20>)
 802350a:	6810      	ldr	r0, [r2, #0]
 802350c:	f003 031f 	and.w	r3, r3, #31
}
 8023510:	40d8      	lsrs	r0, r3
 8023512:	4770      	bx	lr
 8023514:	40021000 	.word	0x40021000
 8023518:	08026b68 	.word	0x08026b68
 802351c:	20000018 	.word	0x20000018

08023520 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8023520:	4b05      	ldr	r3, [pc, #20]	; (8023538 <HAL_RCC_GetPCLK2Freq+0x18>)
 8023522:	4a06      	ldr	r2, [pc, #24]	; (802353c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8023524:	689b      	ldr	r3, [r3, #8]
 8023526:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 802352a:	5cd3      	ldrb	r3, [r2, r3]
 802352c:	4a04      	ldr	r2, [pc, #16]	; (8023540 <HAL_RCC_GetPCLK2Freq+0x20>)
 802352e:	6810      	ldr	r0, [r2, #0]
 8023530:	f003 031f 	and.w	r3, r3, #31
}
 8023534:	40d8      	lsrs	r0, r3
 8023536:	4770      	bx	lr
 8023538:	40021000 	.word	0x40021000
 802353c:	08026b68 	.word	0x08026b68
 8023540:	20000018 	.word	0x20000018

08023544 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8023544:	4a44      	ldr	r2, [pc, #272]	; (8023658 <RCCEx_PLLSAI1_Config+0x114>)
{
 8023546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023548:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 802354a:	68d1      	ldr	r1, [r2, #12]
 802354c:	6803      	ldr	r3, [r0, #0]
 802354e:	f011 0f03 	tst.w	r1, #3
{
 8023552:	4605      	mov	r5, r0
 8023554:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8023556:	d029      	beq.n	80235ac <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8023558:	68d1      	ldr	r1, [r2, #12]
 802355a:	f001 0103 	and.w	r1, r1, #3
 802355e:	4299      	cmp	r1, r3
 8023560:	d178      	bne.n	8023654 <RCCEx_PLLSAI1_Config+0x110>
       ||
 8023562:	2900      	cmp	r1, #0
 8023564:	d076      	beq.n	8023654 <RCCEx_PLLSAI1_Config+0x110>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8023566:	68d3      	ldr	r3, [r2, #12]
       ||
 8023568:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 802356a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 802356e:	3301      	adds	r3, #1
       ||
 8023570:	4293      	cmp	r3, r2
 8023572:	d16f      	bne.n	8023654 <RCCEx_PLLSAI1_Config+0x110>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8023574:	6823      	ldr	r3, [r4, #0]
 8023576:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 802357a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802357c:	f7fe fdd6 	bl	802212c <HAL_GetTick>
 8023580:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8023582:	6823      	ldr	r3, [r4, #0]
 8023584:	011a      	lsls	r2, r3, #4
 8023586:	d430      	bmi.n	80235ea <RCCEx_PLLSAI1_Config+0xa6>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8023588:	68ab      	ldr	r3, [r5, #8]
 802358a:	021f      	lsls	r7, r3, #8
 802358c:	b3a6      	cbz	r6, 80235f8 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 802358e:	2e01      	cmp	r6, #1
 8023590:	d14d      	bne.n	802362e <RCCEx_PLLSAI1_Config+0xea>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8023592:	692a      	ldr	r2, [r5, #16]
 8023594:	6921      	ldr	r1, [r4, #16]
 8023596:	0852      	lsrs	r2, r2, #1
 8023598:	1e53      	subs	r3, r2, #1
 802359a:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 802359e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80235a2:	433a      	orrs	r2, r7
 80235a4:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 80235a8:	6122      	str	r2, [r4, #16]
 80235aa:	e030      	b.n	802360e <RCCEx_PLLSAI1_Config+0xca>
    switch(PllSai1->PLLSAI1Source)
 80235ac:	2b02      	cmp	r3, #2
 80235ae:	d011      	beq.n	80235d4 <RCCEx_PLLSAI1_Config+0x90>
 80235b0:	2b03      	cmp	r3, #3
 80235b2:	d013      	beq.n	80235dc <RCCEx_PLLSAI1_Config+0x98>
 80235b4:	2b01      	cmp	r3, #1
 80235b6:	d14d      	bne.n	8023654 <RCCEx_PLLSAI1_Config+0x110>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80235b8:	6812      	ldr	r2, [r2, #0]
 80235ba:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80235be:	d049      	beq.n	8023654 <RCCEx_PLLSAI1_Config+0x110>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80235c0:	68e0      	ldr	r0, [r4, #12]
 80235c2:	686a      	ldr	r2, [r5, #4]
 80235c4:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 80235c8:	3a01      	subs	r2, #1
 80235ca:	4318      	orrs	r0, r3
 80235cc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80235d0:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 80235d2:	e7cf      	b.n	8023574 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80235d4:	6812      	ldr	r2, [r2, #0]
 80235d6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80235da:	e7f0      	b.n	80235be <RCCEx_PLLSAI1_Config+0x7a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80235dc:	6811      	ldr	r1, [r2, #0]
 80235de:	0389      	lsls	r1, r1, #14
 80235e0:	d4ee      	bmi.n	80235c0 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80235e2:	6812      	ldr	r2, [r2, #0]
 80235e4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80235e8:	e7e9      	b.n	80235be <RCCEx_PLLSAI1_Config+0x7a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80235ea:	f7fe fd9f 	bl	802212c <HAL_GetTick>
 80235ee:	1bc0      	subs	r0, r0, r7
 80235f0:	2802      	cmp	r0, #2
 80235f2:	d9c6      	bls.n	8023582 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80235f4:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80235f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80235f8:	6921      	ldr	r1, [r4, #16]
 80235fa:	68eb      	ldr	r3, [r5, #12]
 80235fc:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8023600:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8023604:	091b      	lsrs	r3, r3, #4
 8023606:	4339      	orrs	r1, r7
 8023608:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 802360c:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 802360e:	6823      	ldr	r3, [r4, #0]
 8023610:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8023614:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8023616:	f7fe fd89 	bl	802212c <HAL_GetTick>
 802361a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 802361c:	6823      	ldr	r3, [r4, #0]
 802361e:	011b      	lsls	r3, r3, #4
 8023620:	d512      	bpl.n	8023648 <RCCEx_PLLSAI1_Config+0x104>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8023622:	6923      	ldr	r3, [r4, #16]
 8023624:	69aa      	ldr	r2, [r5, #24]
 8023626:	4313      	orrs	r3, r2
 8023628:	6123      	str	r3, [r4, #16]
 802362a:	2000      	movs	r0, #0
  return status;
 802362c:	e7e3      	b.n	80235f6 <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 802362e:	696b      	ldr	r3, [r5, #20]
 8023630:	6922      	ldr	r2, [r4, #16]
 8023632:	085b      	lsrs	r3, r3, #1
 8023634:	1e59      	subs	r1, r3, #1
 8023636:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 802363a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 802363e:	433b      	orrs	r3, r7
 8023640:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8023644:	6123      	str	r3, [r4, #16]
 8023646:	e7e2      	b.n	802360e <RCCEx_PLLSAI1_Config+0xca>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8023648:	f7fe fd70 	bl	802212c <HAL_GetTick>
 802364c:	1b80      	subs	r0, r0, r6
 802364e:	2802      	cmp	r0, #2
 8023650:	d9e4      	bls.n	802361c <RCCEx_PLLSAI1_Config+0xd8>
 8023652:	e7cf      	b.n	80235f4 <RCCEx_PLLSAI1_Config+0xb0>
      status = HAL_ERROR;
 8023654:	2001      	movs	r0, #1
 8023656:	e7ce      	b.n	80235f6 <RCCEx_PLLSAI1_Config+0xb2>
 8023658:	40021000 	.word	0x40021000

0802365c <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 802365c:	4a3d      	ldr	r2, [pc, #244]	; (8023754 <RCCEx_PLLSAI2_Config+0xf8>)
{
 802365e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023660:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8023662:	68d1      	ldr	r1, [r2, #12]
 8023664:	6803      	ldr	r3, [r0, #0]
 8023666:	f011 0f03 	tst.w	r1, #3
{
 802366a:	4605      	mov	r5, r0
 802366c:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 802366e:	d027      	beq.n	80236c0 <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8023670:	68d1      	ldr	r1, [r2, #12]
 8023672:	f001 0103 	and.w	r1, r1, #3
 8023676:	4299      	cmp	r1, r3
 8023678:	d169      	bne.n	802374e <RCCEx_PLLSAI2_Config+0xf2>
       ||
 802367a:	2900      	cmp	r1, #0
 802367c:	d067      	beq.n	802374e <RCCEx_PLLSAI2_Config+0xf2>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 802367e:	68d3      	ldr	r3, [r2, #12]
       ||
 8023680:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8023682:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8023686:	3301      	adds	r3, #1
       ||
 8023688:	4293      	cmp	r3, r2
 802368a:	d160      	bne.n	802374e <RCCEx_PLLSAI2_Config+0xf2>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 802368c:	6823      	ldr	r3, [r4, #0]
 802368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8023692:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8023694:	f7fe fd4a 	bl	802212c <HAL_GetTick>
 8023698:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 802369a:	6823      	ldr	r3, [r4, #0]
 802369c:	009a      	lsls	r2, r3, #2
 802369e:	d42e      	bmi.n	80236fe <RCCEx_PLLSAI2_Config+0xa2>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80236a0:	68ab      	ldr	r3, [r5, #8]
 80236a2:	0218      	lsls	r0, r3, #8
 80236a4:	b396      	cbz	r6, 802370c <RCCEx_PLLSAI2_Config+0xb0>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80236a6:	6963      	ldr	r3, [r4, #20]
 80236a8:	6929      	ldr	r1, [r5, #16]
 80236aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80236ae:	0849      	lsrs	r1, r1, #1
 80236b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80236b4:	3901      	subs	r1, #1
 80236b6:	4303      	orrs	r3, r0
 80236b8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80236bc:	6163      	str	r3, [r4, #20]
 80236be:	e030      	b.n	8023722 <RCCEx_PLLSAI2_Config+0xc6>
    switch(PllSai2->PLLSAI2Source)
 80236c0:	2b02      	cmp	r3, #2
 80236c2:	d011      	beq.n	80236e8 <RCCEx_PLLSAI2_Config+0x8c>
 80236c4:	2b03      	cmp	r3, #3
 80236c6:	d013      	beq.n	80236f0 <RCCEx_PLLSAI2_Config+0x94>
 80236c8:	2b01      	cmp	r3, #1
 80236ca:	d140      	bne.n	802374e <RCCEx_PLLSAI2_Config+0xf2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80236cc:	6812      	ldr	r2, [r2, #0]
 80236ce:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80236d2:	d03c      	beq.n	802374e <RCCEx_PLLSAI2_Config+0xf2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80236d4:	68e0      	ldr	r0, [r4, #12]
 80236d6:	686a      	ldr	r2, [r5, #4]
 80236d8:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 80236dc:	3a01      	subs	r2, #1
 80236de:	4318      	orrs	r0, r3
 80236e0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80236e4:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 80236e6:	e7d1      	b.n	802368c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80236e8:	6812      	ldr	r2, [r2, #0]
 80236ea:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80236ee:	e7f0      	b.n	80236d2 <RCCEx_PLLSAI2_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80236f0:	6811      	ldr	r1, [r2, #0]
 80236f2:	0389      	lsls	r1, r1, #14
 80236f4:	d4ee      	bmi.n	80236d4 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80236f6:	6812      	ldr	r2, [r2, #0]
 80236f8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80236fc:	e7e9      	b.n	80236d2 <RCCEx_PLLSAI2_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80236fe:	f7fe fd15 	bl	802212c <HAL_GetTick>
 8023702:	1bc0      	subs	r0, r0, r7
 8023704:	2802      	cmp	r0, #2
 8023706:	d9c8      	bls.n	802369a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8023708:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 802370a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 802370c:	6962      	ldr	r2, [r4, #20]
 802370e:	68eb      	ldr	r3, [r5, #12]
 8023710:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8023714:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8023718:	091b      	lsrs	r3, r3, #4
 802371a:	4302      	orrs	r2, r0
 802371c:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8023720:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8023722:	6823      	ldr	r3, [r4, #0]
 8023724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023728:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 802372a:	f7fe fcff 	bl	802212c <HAL_GetTick>
 802372e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8023730:	6823      	ldr	r3, [r4, #0]
 8023732:	009b      	lsls	r3, r3, #2
 8023734:	d505      	bpl.n	8023742 <RCCEx_PLLSAI2_Config+0xe6>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8023736:	6963      	ldr	r3, [r4, #20]
 8023738:	696a      	ldr	r2, [r5, #20]
 802373a:	4313      	orrs	r3, r2
 802373c:	6163      	str	r3, [r4, #20]
 802373e:	2000      	movs	r0, #0
  return status;
 8023740:	e7e3      	b.n	802370a <RCCEx_PLLSAI2_Config+0xae>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8023742:	f7fe fcf3 	bl	802212c <HAL_GetTick>
 8023746:	1b80      	subs	r0, r0, r6
 8023748:	2802      	cmp	r0, #2
 802374a:	d9f1      	bls.n	8023730 <RCCEx_PLLSAI2_Config+0xd4>
 802374c:	e7dc      	b.n	8023708 <RCCEx_PLLSAI2_Config+0xac>
      status = HAL_ERROR;
 802374e:	2001      	movs	r0, #1
 8023750:	e7db      	b.n	802370a <RCCEx_PLLSAI2_Config+0xae>
 8023752:	bf00      	nop
 8023754:	40021000 	.word	0x40021000

08023758 <HAL_RCCEx_PeriphCLKConfig>:
{
 8023758:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 802375c:	6806      	ldr	r6, [r0, #0]
 802375e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8023762:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8023764:	d009      	beq.n	802377a <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 8023766:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8023768:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 802376c:	d022      	beq.n	80237b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 802376e:	d813      	bhi.n	8023798 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8023770:	b331      	cbz	r1, 80237c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8023772:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8023776:	d02a      	beq.n	80237ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8023778:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 802377a:	6823      	ldr	r3, [r4, #0]
 802377c:	04d8      	lsls	r0, r3, #19
 802377e:	d509      	bpl.n	8023794 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8023780:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8023782:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8023786:	d02c      	beq.n	80237e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8023788:	d826      	bhi.n	80237d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
 802378a:	b381      	cbz	r1, 80237ee <HAL_RCCEx_PeriphCLKConfig+0x96>
 802378c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8023790:	d070      	beq.n	8023874 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8023792:	2601      	movs	r6, #1
 8023794:	4635      	mov	r5, r6
 8023796:	e039      	b.n	802380c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8023798:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 802379c:	d1ec      	bne.n	8023778 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802379e:	4ab5      	ldr	r2, [pc, #724]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80237a0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80237a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80237a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80237aa:	430b      	orrs	r3, r1
 80237ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80237b0:	2600      	movs	r6, #0
 80237b2:	e7e2      	b.n	802377a <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80237b4:	4aaf      	ldr	r2, [pc, #700]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80237b6:	68d3      	ldr	r3, [r2, #12]
 80237b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80237bc:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80237be:	e7ee      	b.n	802379e <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80237c0:	3004      	adds	r0, #4
 80237c2:	f7ff febf 	bl	8023544 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80237c6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80237c8:	2800      	cmp	r0, #0
 80237ca:	d1d6      	bne.n	802377a <HAL_RCCEx_PeriphCLKConfig+0x22>
 80237cc:	e7e7      	b.n	802379e <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80237ce:	2100      	movs	r1, #0
 80237d0:	3020      	adds	r0, #32
 80237d2:	f7ff ff43 	bl	802365c <RCCEx_PLLSAI2_Config>
 80237d6:	e7f6      	b.n	80237c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80237d8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80237dc:	d1d9      	bne.n	8023792 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80237de:	4635      	mov	r5, r6
 80237e0:	e009      	b.n	80237f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80237e2:	4aa4      	ldr	r2, [pc, #656]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80237e4:	68d3      	ldr	r3, [r2, #12]
 80237e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80237ea:	60d3      	str	r3, [r2, #12]
      break;
 80237ec:	e7f7      	b.n	80237de <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80237ee:	1d20      	adds	r0, r4, #4
 80237f0:	f7ff fea8 	bl	8023544 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80237f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80237f6:	2d00      	cmp	r5, #0
 80237f8:	d142      	bne.n	8023880 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80237fa:	4a9e      	ldr	r2, [pc, #632]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80237fc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80237fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8023802:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8023806:	430b      	orrs	r3, r1
 8023808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 802380c:	6823      	ldr	r3, [r4, #0]
 802380e:	0399      	lsls	r1, r3, #14
 8023810:	f140 815e 	bpl.w	8023ad0 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8023814:	4f97      	ldr	r7, [pc, #604]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023818:	00da      	lsls	r2, r3, #3
 802381a:	d433      	bmi.n	8023884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 802381c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802381e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023822:	65bb      	str	r3, [r7, #88]	; 0x58
 8023824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802382a:	9301      	str	r3, [sp, #4]
 802382c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 802382e:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8023832:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8023a78 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8023836:	f8d9 3000 	ldr.w	r3, [r9]
 802383a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802383e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8023842:	f7fe fc73 	bl	802212c <HAL_GetTick>
 8023846:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8023848:	f8d9 3000 	ldr.w	r3, [r9]
 802384c:	05db      	lsls	r3, r3, #23
 802384e:	d51c      	bpl.n	802388a <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 8023850:	bb15      	cbnz	r5, 8023898 <HAL_RCCEx_PeriphCLKConfig+0x140>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8023852:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8023856:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 802385a:	f040 810f 	bne.w	8023a7c <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802385e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8023862:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8023866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802386a:	4313      	orrs	r3, r2
 802386c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8023870:	4635      	mov	r5, r6
 8023872:	e011      	b.n	8023898 <HAL_RCCEx_PeriphCLKConfig+0x140>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8023874:	2100      	movs	r1, #0
 8023876:	f104 0020 	add.w	r0, r4, #32
 802387a:	f7ff feef 	bl	802365c <RCCEx_PLLSAI2_Config>
 802387e:	e7b9      	b.n	80237f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8023880:	462e      	mov	r6, r5
 8023882:	e7c3      	b.n	802380c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8023884:	f04f 0800 	mov.w	r8, #0
 8023888:	e7d3      	b.n	8023832 <HAL_RCCEx_PeriphCLKConfig+0xda>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802388a:	f7fe fc4f 	bl	802212c <HAL_GetTick>
 802388e:	eba0 000a 	sub.w	r0, r0, sl
 8023892:	2802      	cmp	r0, #2
 8023894:	d9d8      	bls.n	8023848 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8023896:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8023898:	f1b8 0f00 	cmp.w	r8, #0
 802389c:	d003      	beq.n	80238a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      __HAL_RCC_PWR_CLK_DISABLE();
 802389e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80238a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80238a4:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80238a6:	6823      	ldr	r3, [r4, #0]
 80238a8:	07da      	lsls	r2, r3, #31
 80238aa:	d508      	bpl.n	80238be <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80238ac:	4971      	ldr	r1, [pc, #452]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80238ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80238b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80238b4:	f022 0203 	bic.w	r2, r2, #3
 80238b8:	4302      	orrs	r2, r0
 80238ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80238be:	079f      	lsls	r7, r3, #30
 80238c0:	d508      	bpl.n	80238d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80238c2:	496c      	ldr	r1, [pc, #432]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80238c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80238c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80238ca:	f022 020c 	bic.w	r2, r2, #12
 80238ce:	4302      	orrs	r2, r0
 80238d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80238d4:	075e      	lsls	r6, r3, #29
 80238d6:	d508      	bpl.n	80238ea <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80238d8:	4966      	ldr	r1, [pc, #408]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80238da:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80238dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80238e0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80238e4:	4302      	orrs	r2, r0
 80238e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80238ea:	0718      	lsls	r0, r3, #28
 80238ec:	d508      	bpl.n	8023900 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80238ee:	4961      	ldr	r1, [pc, #388]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80238f0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80238f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80238f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80238fa:	4302      	orrs	r2, r0
 80238fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8023900:	06d9      	lsls	r1, r3, #27
 8023902:	d508      	bpl.n	8023916 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8023904:	495b      	ldr	r1, [pc, #364]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023906:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8023908:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 802390c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8023910:	4302      	orrs	r2, r0
 8023912:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8023916:	069a      	lsls	r2, r3, #26
 8023918:	d508      	bpl.n	802392c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 802391a:	4956      	ldr	r1, [pc, #344]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 802391c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802391e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8023922:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8023926:	4302      	orrs	r2, r0
 8023928:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 802392c:	059f      	lsls	r7, r3, #22
 802392e:	d508      	bpl.n	8023942 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8023930:	4950      	ldr	r1, [pc, #320]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023932:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8023934:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8023938:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 802393c:	4302      	orrs	r2, r0
 802393e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8023942:	055e      	lsls	r6, r3, #21
 8023944:	d508      	bpl.n	8023958 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8023946:	494b      	ldr	r1, [pc, #300]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023948:	6e20      	ldr	r0, [r4, #96]	; 0x60
 802394a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 802394e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8023952:	4302      	orrs	r2, r0
 8023954:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8023958:	0658      	lsls	r0, r3, #25
 802395a:	d508      	bpl.n	802396e <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 802395c:	4945      	ldr	r1, [pc, #276]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 802395e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8023960:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8023964:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8023968:	4302      	orrs	r2, r0
 802396a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 802396e:	0619      	lsls	r1, r3, #24
 8023970:	d508      	bpl.n	8023984 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8023972:	4940      	ldr	r1, [pc, #256]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023976:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 802397a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 802397e:	4302      	orrs	r2, r0
 8023980:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8023984:	05da      	lsls	r2, r3, #23
 8023986:	d508      	bpl.n	802399a <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8023988:	493a      	ldr	r1, [pc, #232]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 802398a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802398c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8023990:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8023994:	4302      	orrs	r2, r0
 8023996:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 802399a:	049b      	lsls	r3, r3, #18
 802399c:	d510      	bpl.n	80239c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 802399e:	4a35      	ldr	r2, [pc, #212]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80239a0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80239a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80239a6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80239aa:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80239ac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80239b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80239b4:	f040 808e 	bne.w	8023ad4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80239b8:	68d3      	ldr	r3, [r2, #12]
 80239ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80239be:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80239c0:	6823      	ldr	r3, [r4, #0]
 80239c2:	031f      	lsls	r7, r3, #12
 80239c4:	d510      	bpl.n	80239e8 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80239c6:	4a2b      	ldr	r2, [pc, #172]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80239c8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80239ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80239ce:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80239d2:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80239d4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80239d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80239dc:	f040 8086 	bne.w	8023aec <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80239e0:	68d3      	ldr	r3, [r2, #12]
 80239e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80239e6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80239e8:	6823      	ldr	r3, [r4, #0]
 80239ea:	035e      	lsls	r6, r3, #13
 80239ec:	d50f      	bpl.n	8023a0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80239ee:	4a21      	ldr	r2, [pc, #132]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80239f0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80239f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80239f6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80239fa:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80239fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8023a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8023a04:	d17e      	bne.n	8023b04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8023a06:	68d3      	ldr	r3, [r2, #12]
 8023a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023a0c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8023a0e:	6823      	ldr	r3, [r4, #0]
 8023a10:	0458      	lsls	r0, r3, #17
 8023a12:	d512      	bpl.n	8023a3a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8023a14:	4917      	ldr	r1, [pc, #92]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023a16:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8023a18:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8023a1c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8023a20:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8023a22:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8023a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8023a2a:	d176      	bne.n	8023b1a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8023a2c:	2102      	movs	r1, #2
 8023a2e:	1d20      	adds	r0, r4, #4
 8023a30:	f7ff fd88 	bl	8023544 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8023a34:	2800      	cmp	r0, #0
 8023a36:	bf18      	it	ne
 8023a38:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8023a3a:	6822      	ldr	r2, [r4, #0]
 8023a3c:	0411      	lsls	r1, r2, #16
 8023a3e:	d508      	bpl.n	8023a52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8023a40:	490c      	ldr	r1, [pc, #48]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023a42:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8023a44:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8023a48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8023a4c:	4303      	orrs	r3, r0
 8023a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8023a52:	03d3      	lsls	r3, r2, #15
 8023a54:	d509      	bpl.n	8023a6a <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8023a56:	4a07      	ldr	r2, [pc, #28]	; (8023a74 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023a58:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8023a5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8023a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023a64:	430b      	orrs	r3, r1
 8023a66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8023a6a:	4628      	mov	r0, r5
 8023a6c:	b002      	add	sp, #8
 8023a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023a72:	bf00      	nop
 8023a74:	40021000 	.word	0x40021000
 8023a78:	40007000 	.word	0x40007000
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8023a7c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8023a80:	4293      	cmp	r3, r2
 8023a82:	f43f aeec 	beq.w	802385e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8023a86:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8023a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8023a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023a92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8023a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8023a9a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8023a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8023aa2:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8023aa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8023aa8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8023aac:	f57f aed7 	bpl.w	802385e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8023ab0:	f7fe fb3c 	bl	802212c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8023ab4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8023ab8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8023aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8023abe:	0799      	lsls	r1, r3, #30
 8023ac0:	f53f aecd 	bmi.w	802385e <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8023ac4:	f7fe fb32 	bl	802212c <HAL_GetTick>
 8023ac8:	1b40      	subs	r0, r0, r5
 8023aca:	4548      	cmp	r0, r9
 8023acc:	d9f5      	bls.n	8023aba <HAL_RCCEx_PeriphCLKConfig+0x362>
 8023ace:	e6e2      	b.n	8023896 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8023ad0:	4635      	mov	r5, r6
 8023ad2:	e6e8      	b.n	80238a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8023ad4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8023ad8:	f47f af72 	bne.w	80239c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8023adc:	2101      	movs	r1, #1
 8023ade:	1d20      	adds	r0, r4, #4
 8023ae0:	f7ff fd30 	bl	8023544 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8023ae4:	2800      	cmp	r0, #0
 8023ae6:	bf18      	it	ne
 8023ae8:	4605      	movne	r5, r0
 8023aea:	e769      	b.n	80239c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8023aec:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8023af0:	f47f af7a 	bne.w	80239e8 <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8023af4:	2101      	movs	r1, #1
 8023af6:	1d20      	adds	r0, r4, #4
 8023af8:	f7ff fd24 	bl	8023544 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8023afc:	2800      	cmp	r0, #0
 8023afe:	bf18      	it	ne
 8023b00:	4605      	movne	r5, r0
 8023b02:	e771      	b.n	80239e8 <HAL_RCCEx_PeriphCLKConfig+0x290>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8023b04:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8023b08:	d181      	bne.n	8023a0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8023b0a:	2101      	movs	r1, #1
 8023b0c:	1d20      	adds	r0, r4, #4
 8023b0e:	f7ff fd19 	bl	8023544 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8023b12:	2800      	cmp	r0, #0
 8023b14:	bf18      	it	ne
 8023b16:	4605      	movne	r5, r0
 8023b18:	e779      	b.n	8023a0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8023b1a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8023b1e:	d18c      	bne.n	8023a3a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8023b20:	2102      	movs	r1, #2
 8023b22:	f104 0020 	add.w	r0, r4, #32
 8023b26:	f7ff fd99 	bl	802365c <RCCEx_PLLSAI2_Config>
 8023b2a:	e783      	b.n	8023a34 <HAL_RCCEx_PeriphCLKConfig+0x2dc>

08023b2c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8023b2c:	4a02      	ldr	r2, [pc, #8]	; (8023b38 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8023b2e:	6813      	ldr	r3, [r2, #0]
 8023b30:	f043 0304 	orr.w	r3, r3, #4
 8023b34:	6013      	str	r3, [r2, #0]
}
 8023b36:	4770      	bx	lr
 8023b38:	40021000 	.word	0x40021000

08023b3c <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8023b3c:	6802      	ldr	r2, [r0, #0]
{
 8023b3e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8023b40:	68d3      	ldr	r3, [r2, #12]
 8023b42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8023b46:	60d3      	str	r3, [r2, #12]
{
 8023b48:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8023b4a:	f7fe faef 	bl	802212c <HAL_GetTick>
 8023b4e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8023b50:	6823      	ldr	r3, [r4, #0]
 8023b52:	68db      	ldr	r3, [r3, #12]
 8023b54:	069b      	lsls	r3, r3, #26
 8023b56:	d501      	bpl.n	8023b5c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8023b58:	2000      	movs	r0, #0
}
 8023b5a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8023b5c:	f7fe fae6 	bl	802212c <HAL_GetTick>
 8023b60:	1b40      	subs	r0, r0, r5
 8023b62:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8023b66:	d9f3      	bls.n	8023b50 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8023b68:	2003      	movs	r0, #3
 8023b6a:	e7f6      	b.n	8023b5a <HAL_RTC_WaitForSynchro+0x1e>

08023b6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8023b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8023b6e:	6803      	ldr	r3, [r0, #0]
 8023b70:	68dc      	ldr	r4, [r3, #12]
 8023b72:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 8023b76:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8023b78:	d118      	bne.n	8023bac <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8023b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8023b7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8023b80:	f7fe fad4 	bl	802212c <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023b84:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 8023b86:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8023b88:	682b      	ldr	r3, [r5, #0]
 8023b8a:	68db      	ldr	r3, [r3, #12]
 8023b8c:	065b      	lsls	r3, r3, #25
 8023b8e:	d401      	bmi.n	8023b94 <RTC_EnterInitMode+0x28>
 8023b90:	2c03      	cmp	r4, #3
 8023b92:	d101      	bne.n	8023b98 <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 8023b94:	4620      	mov	r0, r4
 8023b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8023b98:	f7fe fac8 	bl	802212c <HAL_GetTick>
 8023b9c:	1b80      	subs	r0, r0, r6
 8023b9e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023ba2:	bf84      	itt	hi
 8023ba4:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 8023ba8:	2403      	movhi	r4, #3
 8023baa:	e7ed      	b.n	8023b88 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8023bac:	2400      	movs	r4, #0
 8023bae:	e7f1      	b.n	8023b94 <RTC_EnterInitMode+0x28>

08023bb0 <RTC_ExitInitMode>:
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8023bb0:	4b10      	ldr	r3, [pc, #64]	; (8023bf4 <RTC_ExitInitMode+0x44>)
 8023bb2:	68da      	ldr	r2, [r3, #12]
 8023bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 8023bb8:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8023bba:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8023bbc:	689a      	ldr	r2, [r3, #8]
 8023bbe:	0692      	lsls	r2, r2, #26
{
 8023bc0:	4604      	mov	r4, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8023bc2:	d406      	bmi.n	8023bd2 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8023bc4:	f7ff ffba 	bl	8023b3c <HAL_RTC_WaitForSynchro>
 8023bc8:	b110      	cbz	r0, 8023bd0 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023bca:	2003      	movs	r0, #3
 8023bcc:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8023bd0:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8023bd2:	689a      	ldr	r2, [r3, #8]
 8023bd4:	f022 0220 	bic.w	r2, r2, #32
 8023bd8:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8023bda:	f7ff ffaf 	bl	8023b3c <HAL_RTC_WaitForSynchro>
 8023bde:	b110      	cbz	r0, 8023be6 <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023be0:	2003      	movs	r0, #3
 8023be2:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8023be6:	4a03      	ldr	r2, [pc, #12]	; (8023bf4 <RTC_ExitInitMode+0x44>)
 8023be8:	6893      	ldr	r3, [r2, #8]
 8023bea:	f043 0320 	orr.w	r3, r3, #32
 8023bee:	6093      	str	r3, [r2, #8]
  return status;
 8023bf0:	e7ee      	b.n	8023bd0 <RTC_ExitInitMode+0x20>
 8023bf2:	bf00      	nop
 8023bf4:	40002800 	.word	0x40002800

08023bf8 <HAL_RTC_Init>:
{
 8023bf8:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8023bfa:	4604      	mov	r4, r0
 8023bfc:	2800      	cmp	r0, #0
 8023bfe:	d03f      	beq.n	8023c80 <HAL_RTC_Init+0x88>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8023c00:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8023c04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8023c08:	b91b      	cbnz	r3, 8023c12 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8023c0a:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8023c0e:	f7fd fa9f 	bl	8021150 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8023c12:	2302      	movs	r3, #2
 8023c14:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023c18:	6823      	ldr	r3, [r4, #0]
 8023c1a:	22ca      	movs	r2, #202	; 0xca
 8023c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8023c1e:	2253      	movs	r2, #83	; 0x53
 8023c20:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8023c22:	4620      	mov	r0, r4
 8023c24:	f7ff ffa2 	bl	8023b6c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8023c28:	bb48      	cbnz	r0, 8023c7e <HAL_RTC_Init+0x86>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8023c2a:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8023c2c:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8023c2e:	689a      	ldr	r2, [r3, #8]
 8023c30:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8023c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023c38:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8023c3a:	6862      	ldr	r2, [r4, #4]
 8023c3c:	6899      	ldr	r1, [r3, #8]
 8023c3e:	4302      	orrs	r2, r0
 8023c40:	69a0      	ldr	r0, [r4, #24]
 8023c42:	4302      	orrs	r2, r0
 8023c44:	430a      	orrs	r2, r1
 8023c46:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8023c48:	68e2      	ldr	r2, [r4, #12]
 8023c4a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8023c4c:	691a      	ldr	r2, [r3, #16]
 8023c4e:	68a1      	ldr	r1, [r4, #8]
 8023c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8023c54:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8023c56:	4620      	mov	r0, r4
 8023c58:	f7ff ffaa 	bl	8023bb0 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8023c5c:	b978      	cbnz	r0, 8023c7e <HAL_RTC_Init+0x86>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8023c5e:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8023c60:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8023c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8023c64:	f022 0203 	bic.w	r2, r2, #3
 8023c68:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8023c6a:	69e2      	ldr	r2, [r4, #28]
 8023c6c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8023c6e:	432a      	orrs	r2, r5
 8023c70:	430a      	orrs	r2, r1
 8023c72:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023c74:	22ff      	movs	r2, #255	; 0xff
 8023c76:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 8023c78:	2301      	movs	r3, #1
 8023c7a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8023c7e:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8023c80:	2001      	movs	r0, #1
 8023c82:	e7fc      	b.n	8023c7e <HAL_RTC_Init+0x86>

08023c84 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8023c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8023c88:	f890 3020 	ldrb.w	r3, [r0, #32]
 8023c8c:	2b01      	cmp	r3, #1
{
 8023c8e:	4604      	mov	r4, r0
 8023c90:	460e      	mov	r6, r1
 8023c92:	4615      	mov	r5, r2
 8023c94:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8023c98:	d035      	beq.n	8023d06 <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
 8023c9a:	2301      	movs	r3, #1
 8023c9c:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023ca0:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8023ca2:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023ca6:	22ca      	movs	r2, #202	; 0xca
 8023ca8:	625a      	str	r2, [r3, #36]	; 0x24
 8023caa:	2253      	movs	r2, #83	; 0x53
 8023cac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8023cae:	689a      	ldr	r2, [r3, #8]
 8023cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023cb4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8023cb6:	68d8      	ldr	r0, [r3, #12]
 8023cb8:	b2c0      	uxtb	r0, r0
 8023cba:	f460 6090 	orn	r0, r0, #1152	; 0x480
 8023cbe:	60d8      	str	r0, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8023cc0:	68db      	ldr	r3, [r3, #12]
 8023cc2:	065b      	lsls	r3, r3, #25
 8023cc4:	d521      	bpl.n	8023d0a <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8023cc6:	6823      	ldr	r3, [r4, #0]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8023cc8:	4a1c      	ldr	r2, [pc, #112]	; (8023d3c <HAL_RTCEx_SetWakeUpTimer_IT+0xb8>)
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8023cca:	615e      	str	r6, [r3, #20]
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8023ccc:	6899      	ldr	r1, [r3, #8]
 8023cce:	f021 0107 	bic.w	r1, r1, #7
 8023cd2:	4329      	orrs	r1, r5
 8023cd4:	6099      	str	r1, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8023cd6:	6811      	ldr	r1, [r2, #0]
 8023cd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8023cdc:	6011      	str	r1, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8023cde:	6891      	ldr	r1, [r2, #8]
 8023ce0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8023ce4:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8023ce6:	689a      	ldr	r2, [r3, #8]
 8023ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8023cec:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8023cee:	689a      	ldr	r2, [r3, #8]
 8023cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8023cf4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023cf6:	22ff      	movs	r2, #255	; 0xff
 8023cf8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8023cfa:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8023cfc:	2301      	movs	r3, #1
 8023cfe:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8023d02:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 8023d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8023d0a:	f7fe fa0f 	bl	802212c <HAL_GetTick>
 8023d0e:	4680      	mov	r8, r0
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8023d10:	6823      	ldr	r3, [r4, #0]
 8023d12:	68df      	ldr	r7, [r3, #12]
 8023d14:	f017 0704 	ands.w	r7, r7, #4
 8023d18:	d1d5      	bne.n	8023cc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8023d1a:	f7fe fa07 	bl	802212c <HAL_GetTick>
 8023d1e:	eba0 0008 	sub.w	r0, r0, r8
 8023d22:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8023d26:	d9f3      	bls.n	8023d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023d28:	6823      	ldr	r3, [r4, #0]
 8023d2a:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023d2c:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023d2e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023d30:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8023d34:	f884 7020 	strb.w	r7, [r4, #32]
        return HAL_TIMEOUT;
 8023d38:	e7e5      	b.n	8023d06 <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
 8023d3a:	bf00      	nop
 8023d3c:	40010400 	.word	0x40010400

08023d40 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8023d40:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8023d42:	f890 3020 	ldrb.w	r3, [r0, #32]
 8023d46:	2b01      	cmp	r3, #1
{
 8023d48:	4604      	mov	r4, r0
 8023d4a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8023d4e:	d030      	beq.n	8023db2 <HAL_RTCEx_DeactivateWakeUpTimer+0x72>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8023d50:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_LOCK(hrtc);
 8023d54:	2201      	movs	r2, #1

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023d56:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 8023d58:	f880 2020 	strb.w	r2, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023d5c:	22ca      	movs	r2, #202	; 0xca
 8023d5e:	625a      	str	r2, [r3, #36]	; 0x24
 8023d60:	2253      	movs	r2, #83	; 0x53
 8023d62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8023d64:	689a      	ldr	r2, [r3, #8]
 8023d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023d6a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8023d6c:	689a      	ldr	r2, [r3, #8]
 8023d6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8023d72:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8023d74:	f7fe f9da 	bl	802212c <HAL_GetTick>
 8023d78:	4606      	mov	r6, r0
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8023d7a:	6822      	ldr	r2, [r4, #0]
 8023d7c:	68d5      	ldr	r5, [r2, #12]
 8023d7e:	f015 0504 	ands.w	r5, r5, #4
 8023d82:	d008      	beq.n	8023d96 <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
      return HAL_TIMEOUT;
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023d84:	23ff      	movs	r3, #255	; 0xff
 8023d86:	6253      	str	r3, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8023d88:	2301      	movs	r3, #1
 8023d8a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8023d8e:	2300      	movs	r3, #0
 8023d90:	f884 3020 	strb.w	r3, [r4, #32]

  return HAL_OK;
 8023d94:	e00d      	b.n	8023db2 <HAL_RTCEx_DeactivateWakeUpTimer+0x72>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8023d96:	f7fe f9c9 	bl	802212c <HAL_GetTick>
 8023d9a:	1b80      	subs	r0, r0, r6
 8023d9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8023da0:	d9eb      	bls.n	8023d7a <HAL_RTCEx_DeactivateWakeUpTimer+0x3a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023da2:	6823      	ldr	r3, [r4, #0]
 8023da4:	22ff      	movs	r2, #255	; 0xff
 8023da6:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023da8:	2303      	movs	r3, #3
 8023daa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      __HAL_UNLOCK(hrtc);
 8023dae:	f884 5020 	strb.w	r5, [r4, #32]
}
 8023db2:	4618      	mov	r0, r3
 8023db4:	bd70      	pop	{r4, r5, r6, pc}
	...

08023db8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8023db8:	4b0a      	ldr	r3, [pc, #40]	; (8023de4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8023dba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
{
 8023dbe:	b510      	push	{r4, lr}
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8023dc0:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8023dc2:	6802      	ldr	r2, [r0, #0]
 8023dc4:	68d3      	ldr	r3, [r2, #12]
 8023dc6:	055b      	lsls	r3, r3, #21
{
 8023dc8:	4604      	mov	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8023dca:	d506      	bpl.n	8023dda <HAL_RTCEx_WakeUpTimerIRQHandler+0x22>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8023dcc:	68d3      	ldr	r3, [r2, #12]
 8023dce:	b2db      	uxtb	r3, r3
 8023dd0:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8023dd4:	60d3      	str	r3, [r2, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8023dd6:	f7fc fef9 	bl	8020bcc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8023dda:	2301      	movs	r3, #1
 8023ddc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8023de0:	bd10      	pop	{r4, pc}
 8023de2:	bf00      	nop
 8023de4:	40010400 	.word	0x40010400

08023de8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8023de8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8023dec:	4699      	mov	r9, r3
 8023dee:	4688      	mov	r8, r1
 8023df0:	4617      	mov	r7, r2
 8023df2:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8023df4:	f7fe f99a 	bl	802212c <HAL_GetTick>
 8023df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023dfa:	444b      	add	r3, r9
 8023dfc:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8023dfe:	f7fe f995 	bl	802212c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8023e02:	4b2a      	ldr	r3, [pc, #168]	; (8023eac <SPI_WaitFifoStateUntilTimeout+0xc4>)
 8023e04:	681b      	ldr	r3, [r3, #0]
 8023e06:	2623      	movs	r6, #35	; 0x23
 8023e08:	435e      	muls	r6, r3
 8023e0a:	0d36      	lsrs	r6, r6, #20
 8023e0c:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8023e0e:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8023e10:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8023e12:	6822      	ldr	r2, [r4, #0]
 8023e14:	6893      	ldr	r3, [r2, #8]
 8023e16:	ea03 0308 	and.w	r3, r3, r8
 8023e1a:	42bb      	cmp	r3, r7
 8023e1c:	d101      	bne.n	8023e22 <SPI_WaitFifoStateUntilTimeout+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 8023e1e:	2000      	movs	r0, #0
 8023e20:	e037      	b.n	8023e92 <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8023e22:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 8023e26:	d104      	bne.n	8023e32 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8023e28:	b91f      	cbnz	r7, 8023e32 <SPI_WaitFifoStateUntilTimeout+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8023e2a:	7b13      	ldrb	r3, [r2, #12]
 8023e2c:	b2db      	uxtb	r3, r3
 8023e2e:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8023e30:	9b00      	ldr	r3, [sp, #0]
    if (Timeout != HAL_MAX_DELAY)
 8023e32:	f1b9 3fff 	cmp.w	r9, #4294967295
 8023e36:	d0ed      	beq.n	8023e14 <SPI_WaitFifoStateUntilTimeout+0x2c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8023e38:	f7fe f978 	bl	802212c <HAL_GetTick>
 8023e3c:	eba0 000a 	sub.w	r0, r0, sl
 8023e40:	4285      	cmp	r5, r0
 8023e42:	d829      	bhi.n	8023e98 <SPI_WaitFifoStateUntilTimeout+0xb0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8023e44:	6823      	ldr	r3, [r4, #0]
 8023e46:	685a      	ldr	r2, [r3, #4]
 8023e48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8023e4c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8023e4e:	6862      	ldr	r2, [r4, #4]
 8023e50:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8023e54:	d10a      	bne.n	8023e6c <SPI_WaitFifoStateUntilTimeout+0x84>
 8023e56:	68a2      	ldr	r2, [r4, #8]
 8023e58:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8023e5c:	d002      	beq.n	8023e64 <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8023e5e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8023e62:	d103      	bne.n	8023e6c <SPI_WaitFifoStateUntilTimeout+0x84>
          __HAL_SPI_DISABLE(hspi);
 8023e64:	681a      	ldr	r2, [r3, #0]
 8023e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023e6a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8023e6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8023e6e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8023e72:	d107      	bne.n	8023e84 <SPI_WaitFifoStateUntilTimeout+0x9c>
          SPI_RESET_CRC(hspi);
 8023e74:	681a      	ldr	r2, [r3, #0]
 8023e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023e7a:	601a      	str	r2, [r3, #0]
 8023e7c:	681a      	ldr	r2, [r3, #0]
 8023e7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8023e82:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8023e84:	2301      	movs	r3, #1
 8023e86:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8023e8a:	2300      	movs	r3, #0
 8023e8c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 8023e90:	2003      	movs	r0, #3
}
 8023e92:	b002      	add	sp, #8
 8023e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8023e98:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8023e9a:	2b00      	cmp	r3, #0
      count--;
 8023e9c:	9b01      	ldr	r3, [sp, #4]
 8023e9e:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8023ea2:	bf08      	it	eq
 8023ea4:	2500      	moveq	r5, #0
      count--;
 8023ea6:	9301      	str	r3, [sp, #4]
 8023ea8:	e7b3      	b.n	8023e12 <SPI_WaitFifoStateUntilTimeout+0x2a>
 8023eaa:	bf00      	nop
 8023eac:	20000018 	.word	0x20000018

08023eb0 <SPI_WaitFlagStateUntilTimeout>:
{
 8023eb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8023eb4:	461f      	mov	r7, r3
 8023eb6:	4689      	mov	r9, r1
 8023eb8:	4690      	mov	r8, r2
 8023eba:	4604      	mov	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8023ebc:	f7fe f936 	bl	802212c <HAL_GetTick>
 8023ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ec2:	443b      	add	r3, r7
 8023ec4:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8023ec6:	f7fe f931 	bl	802212c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8023eca:	4b26      	ldr	r3, [pc, #152]	; (8023f64 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8023ecc:	681e      	ldr	r6, [r3, #0]
 8023ece:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8023ed2:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8023ed4:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8023ed6:	9601      	str	r6, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8023ed8:	6822      	ldr	r2, [r4, #0]
 8023eda:	6893      	ldr	r3, [r2, #8]
 8023edc:	ea39 0303 	bics.w	r3, r9, r3
 8023ee0:	bf0c      	ite	eq
 8023ee2:	2301      	moveq	r3, #1
 8023ee4:	2300      	movne	r3, #0
 8023ee6:	4543      	cmp	r3, r8
 8023ee8:	d101      	bne.n	8023eee <SPI_WaitFlagStateUntilTimeout+0x3e>
  return HAL_OK;
 8023eea:	2000      	movs	r0, #0
 8023eec:	e02e      	b.n	8023f4c <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8023eee:	1c7b      	adds	r3, r7, #1
 8023ef0:	d0f3      	beq.n	8023eda <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8023ef2:	f7fe f91b 	bl	802212c <HAL_GetTick>
 8023ef6:	eba0 000a 	sub.w	r0, r0, sl
 8023efa:	42a8      	cmp	r0, r5
 8023efc:	d329      	bcc.n	8023f52 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8023efe:	6823      	ldr	r3, [r4, #0]
 8023f00:	685a      	ldr	r2, [r3, #4]
 8023f02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8023f06:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8023f08:	6862      	ldr	r2, [r4, #4]
 8023f0a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8023f0e:	d10a      	bne.n	8023f26 <SPI_WaitFlagStateUntilTimeout+0x76>
 8023f10:	68a2      	ldr	r2, [r4, #8]
 8023f12:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8023f16:	d002      	beq.n	8023f1e <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8023f18:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8023f1c:	d103      	bne.n	8023f26 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8023f1e:	681a      	ldr	r2, [r3, #0]
 8023f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023f24:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8023f26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8023f28:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8023f2c:	d107      	bne.n	8023f3e <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8023f2e:	681a      	ldr	r2, [r3, #0]
 8023f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023f34:	601a      	str	r2, [r3, #0]
 8023f36:	681a      	ldr	r2, [r3, #0]
 8023f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8023f3c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8023f3e:	2301      	movs	r3, #1
 8023f40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8023f44:	2300      	movs	r3, #0
 8023f46:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8023f4a:	2003      	movs	r0, #3
}
 8023f4c:	b002      	add	sp, #8
 8023f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8023f52:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8023f54:	2b00      	cmp	r3, #0
      count--;
 8023f56:	9b01      	ldr	r3, [sp, #4]
 8023f58:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8023f5c:	bf08      	it	eq
 8023f5e:	2500      	moveq	r5, #0
      count--;
 8023f60:	9301      	str	r3, [sp, #4]
 8023f62:	e7b9      	b.n	8023ed8 <SPI_WaitFlagStateUntilTimeout+0x28>
 8023f64:	20000018 	.word	0x20000018

08023f68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8023f68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8023f6a:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8023f6c:	6842      	ldr	r2, [r0, #4]
 8023f6e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8023f72:	4604      	mov	r4, r0
 8023f74:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8023f76:	d10b      	bne.n	8023f90 <SPI_EndRxTransaction+0x28>
 8023f78:	6882      	ldr	r2, [r0, #8]
 8023f7a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8023f7e:	d002      	beq.n	8023f86 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8023f80:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8023f84:	d104      	bne.n	8023f90 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8023f86:	6821      	ldr	r1, [r4, #0]
 8023f88:	680a      	ldr	r2, [r1, #0]
 8023f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023f8e:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8023f90:	9600      	str	r6, [sp, #0]
 8023f92:	2200      	movs	r2, #0
 8023f94:	2180      	movs	r1, #128	; 0x80
 8023f96:	4620      	mov	r0, r4
 8023f98:	9303      	str	r3, [sp, #12]
 8023f9a:	f7ff ff89 	bl	8023eb0 <SPI_WaitFlagStateUntilTimeout>
 8023f9e:	9b03      	ldr	r3, [sp, #12]
 8023fa0:	4605      	mov	r5, r0
 8023fa2:	b128      	cbz	r0, 8023fb0 <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8023fa4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8023fa6:	f043 0320 	orr.w	r3, r3, #32
 8023faa:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8023fac:	2503      	movs	r5, #3
 8023fae:	e013      	b.n	8023fd8 <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8023fb0:	6862      	ldr	r2, [r4, #4]
 8023fb2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8023fb6:	d10f      	bne.n	8023fd8 <SPI_EndRxTransaction+0x70>
 8023fb8:	68a2      	ldr	r2, [r4, #8]
 8023fba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8023fbe:	d002      	beq.n	8023fc6 <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8023fc0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8023fc4:	d108      	bne.n	8023fd8 <SPI_EndRxTransaction+0x70>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8023fc6:	9600      	str	r6, [sp, #0]
 8023fc8:	2200      	movs	r2, #0
 8023fca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8023fce:	4620      	mov	r0, r4
 8023fd0:	f7ff ff0a 	bl	8023de8 <SPI_WaitFifoStateUntilTimeout>
 8023fd4:	2800      	cmp	r0, #0
 8023fd6:	d1e5      	bne.n	8023fa4 <SPI_EndRxTransaction+0x3c>
}
 8023fd8:	4628      	mov	r0, r5
 8023fda:	b004      	add	sp, #16
 8023fdc:	bd70      	pop	{r4, r5, r6, pc}

08023fde <SPI_EndRxTxTransaction>:
{
 8023fde:	b530      	push	{r4, r5, lr}
 8023fe0:	b085      	sub	sp, #20
 8023fe2:	460b      	mov	r3, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8023fe4:	9200      	str	r2, [sp, #0]
 8023fe6:	9103      	str	r1, [sp, #12]
{
 8023fe8:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8023fea:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8023fee:	2200      	movs	r2, #0
{
 8023ff0:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8023ff2:	f7ff fef9 	bl	8023de8 <SPI_WaitFifoStateUntilTimeout>
 8023ff6:	9b03      	ldr	r3, [sp, #12]
 8023ff8:	4602      	mov	r2, r0
 8023ffa:	b128      	cbz	r0, 8024008 <SPI_EndRxTxTransaction+0x2a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8023ffc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8023ffe:	f043 0320 	orr.w	r3, r3, #32
 8024002:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8024004:	2003      	movs	r0, #3
 8024006:	e011      	b.n	802402c <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8024008:	9500      	str	r5, [sp, #0]
 802400a:	2180      	movs	r1, #128	; 0x80
 802400c:	4620      	mov	r0, r4
 802400e:	9303      	str	r3, [sp, #12]
 8024010:	f7ff ff4e 	bl	8023eb0 <SPI_WaitFlagStateUntilTimeout>
 8024014:	9b03      	ldr	r3, [sp, #12]
 8024016:	4602      	mov	r2, r0
 8024018:	2800      	cmp	r0, #0
 802401a:	d1ef      	bne.n	8023ffc <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 802401c:	9500      	str	r5, [sp, #0]
 802401e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8024022:	4620      	mov	r0, r4
 8024024:	f7ff fee0 	bl	8023de8 <SPI_WaitFifoStateUntilTimeout>
 8024028:	2800      	cmp	r0, #0
 802402a:	d1e7      	bne.n	8023ffc <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 802402c:	b005      	add	sp, #20
 802402e:	bd30      	pop	{r4, r5, pc}

08024030 <HAL_SPI_MspInit>:
}
 8024030:	4770      	bx	lr

08024032 <HAL_SPI_Init>:
{
 8024032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 8024034:	4604      	mov	r4, r0
 8024036:	2800      	cmp	r0, #0
 8024038:	d079      	beq.n	802412e <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802403a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802403c:	2b00      	cmp	r3, #0
 802403e:	d14f      	bne.n	80240e0 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8024040:	6842      	ldr	r2, [r0, #4]
 8024042:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8024046:	d000      	beq.n	802404a <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8024048:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 802404a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 802404e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8024052:	b923      	cbnz	r3, 802405e <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8024054:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8024058:	4620      	mov	r0, r4
 802405a:	f7ff ffe9 	bl	8024030 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 802405e:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024060:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8024062:	2302      	movs	r3, #2
 8024064:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8024068:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802406a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 802406e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024072:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024074:	f04f 0300 	mov.w	r3, #0
 8024078:	d85b      	bhi.n	8024132 <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 802407a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 802407e:	d000      	beq.n	8024082 <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8024080:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8024082:	6863      	ldr	r3, [r4, #4]
 8024084:	68a7      	ldr	r7, [r4, #8]
 8024086:	69a0      	ldr	r0, [r4, #24]
 8024088:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802408a:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 802408e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8024092:	433b      	orrs	r3, r7
 8024094:	6927      	ldr	r7, [r4, #16]
 8024096:	f007 0702 	and.w	r7, r7, #2
 802409a:	433b      	orrs	r3, r7
 802409c:	6967      	ldr	r7, [r4, #20]
 802409e:	f007 0701 	and.w	r7, r7, #1
 80240a2:	433b      	orrs	r3, r7
 80240a4:	f400 7700 	and.w	r7, r0, #512	; 0x200
 80240a8:	433b      	orrs	r3, r7
 80240aa:	69e7      	ldr	r7, [r4, #28]
 80240ac:	f007 0738 	and.w	r7, r7, #56	; 0x38
 80240b0:	433b      	orrs	r3, r7
 80240b2:	6a27      	ldr	r7, [r4, #32]
 80240b4:	f007 0780 	and.w	r7, r7, #128	; 0x80
 80240b8:	433b      	orrs	r3, r7
 80240ba:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 80240be:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80240c0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80240c4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80240c6:	d111      	bne.n	80240ec <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80240c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80240ca:	bb6b      	cbnz	r3, 8024128 <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80240cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80240d0:	d90a      	bls.n	80240e8 <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80240d2:	2302      	movs	r3, #2
 80240d4:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80240d6:	6813      	ldr	r3, [r2, #0]
 80240d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80240dc:	6013      	str	r3, [r2, #0]
 80240de:	e005      	b.n	80240ec <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80240e0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80240e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80240e6:	e7b0      	b.n	802404a <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80240e8:	2301      	movs	r3, #1
 80240ea:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80240ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80240ee:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80240f0:	f003 0310 	and.w	r3, r3, #16
 80240f4:	f007 0708 	and.w	r7, r7, #8
 80240f8:	433b      	orrs	r3, r7
 80240fa:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80240fe:	0c00      	lsrs	r0, r0, #16
 8024100:	4319      	orrs	r1, r3
 8024102:	f000 0004 	and.w	r0, r0, #4
 8024106:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024108:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 802410c:	bf08      	it	eq
 802410e:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8024110:	ea45 0501 	orr.w	r5, r5, r1
 8024114:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8024116:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 802411a:	bf08      	it	eq
 802411c:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 802411e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8024120:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8024122:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8024126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8024128:	2b02      	cmp	r3, #2
 802412a:	d1df      	bne.n	80240ec <HAL_SPI_Init+0xba>
 802412c:	e7d3      	b.n	80240d6 <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 802412e:	2001      	movs	r0, #1
 8024130:	e7f9      	b.n	8024126 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8024132:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8024134:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8024138:	e7a1      	b.n	802407e <HAL_SPI_Init+0x4c>

0802413a <HAL_SPI_MspDeInit>:
 802413a:	4770      	bx	lr

0802413c <HAL_SPI_DeInit>:
{
 802413c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 802413e:	4604      	mov	r4, r0
 8024140:	b180      	cbz	r0, 8024164 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8024142:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8024144:	2302      	movs	r3, #2
 8024146:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 802414a:	6813      	ldr	r3, [r2, #0]
 802414c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024150:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8024152:	f7ff fff2 	bl	802413a <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8024156:	2000      	movs	r0, #0
 8024158:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 802415a:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 802415e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 8024162:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8024164:	2001      	movs	r0, #1
 8024166:	e7fc      	b.n	8024162 <HAL_SPI_DeInit+0x26>

08024168 <HAL_SPI_TransmitReceive>:
{
 8024168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802416c:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 802416e:	2300      	movs	r3, #0
 8024170:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hspi);
 8024172:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8024176:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8024178:	2b01      	cmp	r3, #1
{
 802417a:	4604      	mov	r4, r0
 802417c:	460e      	mov	r6, r1
 802417e:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 8024180:	f000 81ab 	beq.w	80244da <HAL_SPI_TransmitReceive+0x372>
 8024184:	2301      	movs	r3, #1
 8024186:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 802418a:	f7fd ffcf 	bl	802212c <HAL_GetTick>
  tmp_state           = hspi->State;
 802418e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8024192:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8024196:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8024198:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 802419a:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 802419c:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80241a0:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80241a2:	d00b      	beq.n	80241bc <HAL_SPI_TransmitReceive+0x54>
 80241a4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80241a8:	f040 8195 	bne.w	80244d6 <HAL_SPI_TransmitReceive+0x36e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80241ac:	68a3      	ldr	r3, [r4, #8]
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	f040 8191 	bne.w	80244d6 <HAL_SPI_TransmitReceive+0x36e>
 80241b4:	f1bc 0f04 	cmp.w	ip, #4
 80241b8:	f040 818d 	bne.w	80244d6 <HAL_SPI_TransmitReceive+0x36e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80241bc:	2e00      	cmp	r6, #0
 80241be:	f000 8172 	beq.w	80244a6 <HAL_SPI_TransmitReceive+0x33e>
 80241c2:	f1ba 0f00 	cmp.w	sl, #0
 80241c6:	f000 816e 	beq.w	80244a6 <HAL_SPI_TransmitReceive+0x33e>
 80241ca:	f1b9 0f00 	cmp.w	r9, #0
 80241ce:	f000 816a 	beq.w	80244a6 <HAL_SPI_TransmitReceive+0x33e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80241d2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80241d6:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80241da:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80241dc:	bf1c      	itt	ne
 80241de:	2305      	movne	r3, #5
 80241e0:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80241e4:	2300      	movs	r3, #0
 80241e6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80241e8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80241ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 80241ee:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80241f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 80241f6:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80241fa:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80241fc:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8024200:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024204:	d107      	bne.n	8024216 <HAL_SPI_TransmitReceive+0xae>
    SPI_RESET_CRC(hspi);
 8024206:	682b      	ldr	r3, [r5, #0]
 8024208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802420c:	602b      	str	r3, [r5, #0]
 802420e:	682b      	ldr	r3, [r5, #0]
 8024210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8024214:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8024216:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802421a:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 802421c:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8024220:	d802      	bhi.n	8024228 <HAL_SPI_TransmitReceive+0xc0>
 8024222:	f1b9 0f01 	cmp.w	r9, #1
 8024226:	d93a      	bls.n	802429e <HAL_SPI_TransmitReceive+0x136>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024228:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802422c:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802422e:	682b      	ldr	r3, [r5, #0]
 8024230:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8024232:	bf5e      	ittt	pl
 8024234:	682b      	ldrpl	r3, [r5, #0]
 8024236:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 802423a:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802423c:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8024240:	d97f      	bls.n	8024342 <HAL_SPI_TransmitReceive+0x1da>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8024242:	b112      	cbz	r2, 802424a <HAL_SPI_TransmitReceive+0xe2>
 8024244:	f1b9 0f01 	cmp.w	r9, #1
 8024248:	d107      	bne.n	802425a <HAL_SPI_TransmitReceive+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802424a:	f836 3b02 	ldrh.w	r3, [r6], #2
 802424e:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 8024250:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8024252:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8024254:	3b01      	subs	r3, #1
 8024256:	b29b      	uxth	r3, r3
 8024258:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 802425a:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 802425e:	f001 0604 	and.w	r6, r1, #4
 8024262:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8024266:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8024268:	b29b      	uxth	r3, r3
 802426a:	b9db      	cbnz	r3, 80242a4 <HAL_SPI_TransmitReceive+0x13c>
 802426c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8024270:	b29b      	uxth	r3, r3
 8024272:	b9bb      	cbnz	r3, 80242a4 <HAL_SPI_TransmitReceive+0x13c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802427a:	f040 80fd 	bne.w	8024478 <HAL_SPI_TransmitReceive+0x310>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 802427e:	2201      	movs	r2, #1
 8024280:	f8cd 8000 	str.w	r8, [sp]
 8024284:	463b      	mov	r3, r7
 8024286:	4611      	mov	r1, r2
 8024288:	4620      	mov	r0, r4
 802428a:	f7ff fe11 	bl	8023eb0 <SPI_WaitFlagStateUntilTimeout>
 802428e:	2800      	cmp	r0, #0
 8024290:	f000 80ea 	beq.w	8024468 <HAL_SPI_TransmitReceive+0x300>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8024294:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024296:	f043 0302 	orr.w	r3, r3, #2
 802429a:	6623      	str	r3, [r4, #96]	; 0x60
 802429c:	e02a      	b.n	80242f4 <HAL_SPI_TransmitReceive+0x18c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802429e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80242a2:	e7c3      	b.n	802422c <HAL_SPI_TransmitReceive+0xc4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80242a4:	6823      	ldr	r3, [r4, #0]
 80242a6:	689a      	ldr	r2, [r3, #8]
 80242a8:	0790      	lsls	r0, r2, #30
 80242aa:	d507      	bpl.n	80242bc <HAL_SPI_TransmitReceive+0x154>
 80242ac:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80242ae:	b292      	uxth	r2, r2
 80242b0:	b122      	cbz	r2, 80242bc <HAL_SPI_TransmitReceive+0x154>
 80242b2:	f1b9 0f00 	cmp.w	r9, #0
 80242b6:	d128      	bne.n	802430a <HAL_SPI_TransmitReceive+0x1a2>
        txallowed = 0U;
 80242b8:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80242bc:	6899      	ldr	r1, [r3, #8]
 80242be:	f011 0101 	ands.w	r1, r1, #1
 80242c2:	d00f      	beq.n	80242e4 <HAL_SPI_TransmitReceive+0x17c>
 80242c4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80242c8:	b292      	uxth	r2, r2
 80242ca:	b15a      	cbz	r2, 80242e4 <HAL_SPI_TransmitReceive+0x17c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80242cc:	68da      	ldr	r2, [r3, #12]
 80242ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80242d0:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80242d4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80242d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80242da:	3b01      	subs	r3, #1
 80242dc:	b29b      	uxth	r3, r3
 80242de:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80242e2:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80242e4:	f7fd ff22 	bl	802212c <HAL_GetTick>
 80242e8:	eba0 0008 	sub.w	r0, r0, r8
 80242ec:	42b8      	cmp	r0, r7
 80242ee:	d3ba      	bcc.n	8024266 <HAL_SPI_TransmitReceive+0xfe>
 80242f0:	1c79      	adds	r1, r7, #1
 80242f2:	d0b8      	beq.n	8024266 <HAL_SPI_TransmitReceive+0xfe>
          errorcode = HAL_TIMEOUT;
 80242f4:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80242f6:	2301      	movs	r3, #1
 80242f8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80242fc:	2300      	movs	r3, #0
 80242fe:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8024302:	4628      	mov	r0, r5
 8024304:	b004      	add	sp, #16
 8024306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802430a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802430c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8024310:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8024312:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8024314:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8024316:	3a01      	subs	r2, #1
 8024318:	b292      	uxth	r2, r2
 802431a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 802431c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 802431e:	b292      	uxth	r2, r2
 8024320:	2a00      	cmp	r2, #0
 8024322:	d1c9      	bne.n	80242b8 <HAL_SPI_TransmitReceive+0x150>
 8024324:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8024326:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 802432a:	d1c5      	bne.n	80242b8 <HAL_SPI_TransmitReceive+0x150>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 802432c:	b926      	cbnz	r6, 8024338 <HAL_SPI_TransmitReceive+0x1d0>
 802432e:	b11d      	cbz	r5, 8024338 <HAL_SPI_TransmitReceive+0x1d0>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8024330:	681a      	ldr	r2, [r3, #0]
 8024332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024336:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024338:	681a      	ldr	r2, [r3, #0]
 802433a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802433e:	601a      	str	r2, [r3, #0]
 8024340:	e7ba      	b.n	80242b8 <HAL_SPI_TransmitReceive+0x150>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8024342:	b112      	cbz	r2, 802434a <HAL_SPI_TransmitReceive+0x1e2>
 8024344:	f1b9 0f01 	cmp.w	r9, #1
 8024348:	d10b      	bne.n	8024362 <HAL_SPI_TransmitReceive+0x1fa>
      if (hspi->TxXferCount > 1U)
 802434a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 802434c:	b29b      	uxth	r3, r3
 802434e:	2b01      	cmp	r3, #1
 8024350:	d94b      	bls.n	80243ea <HAL_SPI_TransmitReceive+0x282>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024352:	f836 3b02 	ldrh.w	r3, [r6], #2
 8024356:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 8024358:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802435a:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 802435c:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 802435e:	b29b      	uxth	r3, r3
 8024360:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8024362:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8024364:	f001 0604 	and.w	r6, r1, #4
 8024368:	f000 0908 	and.w	r9, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802436c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 802436e:	b29b      	uxth	r3, r3
 8024370:	b92b      	cbnz	r3, 802437e <HAL_SPI_TransmitReceive+0x216>
 8024372:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8024376:	b29b      	uxth	r3, r3
 8024378:	2b00      	cmp	r3, #0
 802437a:	f43f af7b 	beq.w	8024274 <HAL_SPI_TransmitReceive+0x10c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802437e:	6821      	ldr	r1, [r4, #0]
 8024380:	688b      	ldr	r3, [r1, #8]
 8024382:	079a      	lsls	r2, r3, #30
 8024384:	d505      	bpl.n	8024392 <HAL_SPI_TransmitReceive+0x22a>
 8024386:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8024388:	b29b      	uxth	r3, r3
 802438a:	b113      	cbz	r3, 8024392 <HAL_SPI_TransmitReceive+0x22a>
 802438c:	2d00      	cmp	r5, #0
 802438e:	d134      	bne.n	80243fa <HAL_SPI_TransmitReceive+0x292>
        txallowed = 0U;
 8024390:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8024392:	6821      	ldr	r1, [r4, #0]
 8024394:	688b      	ldr	r3, [r1, #8]
 8024396:	f013 0301 	ands.w	r3, r3, #1
 802439a:	d01d      	beq.n	80243d8 <HAL_SPI_TransmitReceive+0x270>
 802439c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80243a0:	b292      	uxth	r2, r2
 80243a2:	b1ca      	cbz	r2, 80243d8 <HAL_SPI_TransmitReceive+0x270>
        if (hspi->RxXferCount > 1U)
 80243a4:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 80243a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80243aa:	b280      	uxth	r0, r0
 80243ac:	2801      	cmp	r0, #1
 80243ae:	d94f      	bls.n	8024450 <HAL_SPI_TransmitReceive+0x2e8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80243b0:	68c8      	ldr	r0, [r1, #12]
 80243b2:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80243b6:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80243b8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80243bc:	3a02      	subs	r2, #2
 80243be:	b292      	uxth	r2, r2
 80243c0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80243c4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80243c8:	b292      	uxth	r2, r2
 80243ca:	2a01      	cmp	r2, #1
 80243cc:	d803      	bhi.n	80243d6 <HAL_SPI_TransmitReceive+0x26e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80243ce:	684a      	ldr	r2, [r1, #4]
 80243d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80243d4:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 80243d6:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80243d8:	f7fd fea8 	bl	802212c <HAL_GetTick>
 80243dc:	eba0 0008 	sub.w	r0, r0, r8
 80243e0:	42b8      	cmp	r0, r7
 80243e2:	d3c3      	bcc.n	802436c <HAL_SPI_TransmitReceive+0x204>
 80243e4:	1c7b      	adds	r3, r7, #1
 80243e6:	d0c1      	beq.n	802436c <HAL_SPI_TransmitReceive+0x204>
 80243e8:	e784      	b.n	80242f4 <HAL_SPI_TransmitReceive+0x18c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80243ea:	7833      	ldrb	r3, [r6, #0]
 80243ec:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 80243ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80243f0:	3301      	adds	r3, #1
 80243f2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80243f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80243f6:	3b01      	subs	r3, #1
 80243f8:	e7b1      	b.n	802435e <HAL_SPI_TransmitReceive+0x1f6>
        if (hspi->TxXferCount > 1U)
 80243fa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80243fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80243fe:	b292      	uxth	r2, r2
 8024400:	2a01      	cmp	r2, #1
 8024402:	d91d      	bls.n	8024440 <HAL_SPI_TransmitReceive+0x2d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024404:	f833 2b02 	ldrh.w	r2, [r3], #2
 8024408:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 802440a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 802440c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 802440e:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8024410:	b29b      	uxth	r3, r3
 8024412:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8024414:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8024416:	b29b      	uxth	r3, r3
 8024418:	2b00      	cmp	r3, #0
 802441a:	d1b9      	bne.n	8024390 <HAL_SPI_TransmitReceive+0x228>
 802441c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802441e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024422:	d1b5      	bne.n	8024390 <HAL_SPI_TransmitReceive+0x228>
 8024424:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8024426:	b936      	cbnz	r6, 8024436 <HAL_SPI_TransmitReceive+0x2ce>
 8024428:	f1b9 0f00 	cmp.w	r9, #0
 802442c:	d003      	beq.n	8024436 <HAL_SPI_TransmitReceive+0x2ce>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 802442e:	681a      	ldr	r2, [r3, #0]
 8024430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024434:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024436:	681a      	ldr	r2, [r3, #0]
 8024438:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802443c:	601a      	str	r2, [r3, #0]
 802443e:	e7a7      	b.n	8024390 <HAL_SPI_TransmitReceive+0x228>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8024440:	781b      	ldrb	r3, [r3, #0]
 8024442:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 8024444:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024446:	3301      	adds	r3, #1
 8024448:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 802444a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 802444c:	3b01      	subs	r3, #1
 802444e:	e7df      	b.n	8024410 <HAL_SPI_TransmitReceive+0x2a8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8024450:	7b09      	ldrb	r1, [r1, #12]
 8024452:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8024454:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024456:	3201      	adds	r2, #1
 8024458:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 802445a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 802445e:	3a01      	subs	r2, #1
 8024460:	b292      	uxth	r2, r2
 8024462:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8024466:	e7b6      	b.n	80243d6 <HAL_SPI_TransmitReceive+0x26e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8024468:	68e2      	ldr	r2, [r4, #12]
 802446a:	6823      	ldr	r3, [r4, #0]
 802446c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8024470:	d11b      	bne.n	80244aa <HAL_SPI_TransmitReceive+0x342>
      tmpreg = READ_REG(hspi->Instance->DR);
 8024472:	68db      	ldr	r3, [r3, #12]
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8024474:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8024476:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8024478:	6822      	ldr	r2, [r4, #0]
 802447a:	6895      	ldr	r5, [r2, #8]
 802447c:	f015 0510 	ands.w	r5, r5, #16
 8024480:	d007      	beq.n	8024492 <HAL_SPI_TransmitReceive+0x32a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8024482:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024484:	f043 0302 	orr.w	r3, r3, #2
 8024488:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 802448a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 802448e:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8024490:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8024492:	4642      	mov	r2, r8
 8024494:	4639      	mov	r1, r7
 8024496:	4620      	mov	r0, r4
 8024498:	f7ff fda1 	bl	8023fde <SPI_EndRxTxTransaction>
 802449c:	2800      	cmp	r0, #0
 802449e:	f43f af2a 	beq.w	80242f6 <HAL_SPI_TransmitReceive+0x18e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80244a2:	2320      	movs	r3, #32
 80244a4:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80244a6:	2501      	movs	r5, #1
 80244a8:	e725      	b.n	80242f6 <HAL_SPI_TransmitReceive+0x18e>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80244aa:	7b1b      	ldrb	r3, [r3, #12]
 80244ac:	b2db      	uxtb	r3, r3
 80244ae:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80244b0:	9b03      	ldr	r3, [sp, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80244b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80244b4:	2b02      	cmp	r3, #2
 80244b6:	d1df      	bne.n	8024478 <HAL_SPI_TransmitReceive+0x310>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80244b8:	2201      	movs	r2, #1
 80244ba:	f8cd 8000 	str.w	r8, [sp]
 80244be:	463b      	mov	r3, r7
 80244c0:	4611      	mov	r1, r2
 80244c2:	4620      	mov	r0, r4
 80244c4:	f7ff fcf4 	bl	8023eb0 <SPI_WaitFlagStateUntilTimeout>
 80244c8:	2800      	cmp	r0, #0
 80244ca:	f47f aee3 	bne.w	8024294 <HAL_SPI_TransmitReceive+0x12c>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80244ce:	6823      	ldr	r3, [r4, #0]
 80244d0:	7b1b      	ldrb	r3, [r3, #12]
 80244d2:	b2db      	uxtb	r3, r3
 80244d4:	e7ce      	b.n	8024474 <HAL_SPI_TransmitReceive+0x30c>
    errorcode = HAL_BUSY;
 80244d6:	2502      	movs	r5, #2
 80244d8:	e70d      	b.n	80242f6 <HAL_SPI_TransmitReceive+0x18e>
  __HAL_LOCK(hspi);
 80244da:	2502      	movs	r5, #2
 80244dc:	e711      	b.n	8024302 <HAL_SPI_TransmitReceive+0x19a>

080244de <HAL_SPI_Receive>:
{
 80244de:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80244e2:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 80244e4:	2300      	movs	r3, #0
 80244e6:	9303      	str	r3, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80244e8:	6843      	ldr	r3, [r0, #4]
 80244ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80244ee:	4604      	mov	r4, r0
 80244f0:	4688      	mov	r8, r1
 80244f2:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80244f4:	d10c      	bne.n	8024510 <HAL_SPI_Receive+0x32>
 80244f6:	6883      	ldr	r3, [r0, #8]
 80244f8:	b953      	cbnz	r3, 8024510 <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80244fa:	2304      	movs	r3, #4
 80244fc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8024500:	4613      	mov	r3, r2
 8024502:	9500      	str	r5, [sp, #0]
 8024504:	460a      	mov	r2, r1
 8024506:	f7ff fe2f 	bl	8024168 <HAL_SPI_TransmitReceive>
}
 802450a:	b004      	add	sp, #16
 802450c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8024510:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8024514:	2b01      	cmp	r3, #1
 8024516:	f000 80f7 	beq.w	8024708 <HAL_SPI_Receive+0x22a>
 802451a:	2301      	movs	r3, #1
 802451c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8024520:	f7fd fe04 	bl	802212c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8024524:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8024528:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 802452a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 802452c:	b2d8      	uxtb	r0, r3
 802452e:	f040 80e9 	bne.w	8024704 <HAL_SPI_Receive+0x226>
  if ((pData == NULL) || (Size == 0U))
 8024532:	f1b8 0f00 	cmp.w	r8, #0
 8024536:	f000 809f 	beq.w	8024678 <HAL_SPI_Receive+0x19a>
 802453a:	2f00      	cmp	r7, #0
 802453c:	f000 809c 	beq.w	8024678 <HAL_SPI_Receive+0x19a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8024540:	2304      	movs	r3, #4
 8024542:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8024546:	2300      	movs	r3, #0
 8024548:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 802454a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 802454e:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8024552:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8024554:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8024556:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802455a:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 802455c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8024564:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024568:	d10d      	bne.n	8024586 <HAL_SPI_Receive+0xa8>
    SPI_RESET_CRC(hspi);
 802456a:	6813      	ldr	r3, [r2, #0]
 802456c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8024570:	6013      	str	r3, [r2, #0]
 8024572:	6813      	ldr	r3, [r2, #0]
 8024574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8024578:	6013      	str	r3, [r2, #0]
    hspi->RxXferCount--;
 802457a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 802457e:	3b01      	subs	r3, #1
 8024580:	b29b      	uxth	r3, r3
 8024582:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024586:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024588:	6853      	ldr	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802458a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802458e:	bf8c      	ite	hi
 8024590:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024594:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8024598:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802459a:	68a3      	ldr	r3, [r4, #8]
 802459c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80245a0:	d107      	bne.n	80245b2 <HAL_SPI_Receive+0xd4>
    __HAL_SPI_DISABLE(hspi);
 80245a2:	6813      	ldr	r3, [r2, #0]
 80245a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80245a8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80245aa:	6813      	ldr	r3, [r2, #0]
 80245ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80245b0:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80245b2:	6813      	ldr	r3, [r2, #0]
 80245b4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80245b6:	bf5e      	ittt	pl
 80245b8:	6813      	ldrpl	r3, [r2, #0]
 80245ba:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80245be:	6013      	strpl	r3, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80245c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80245c4:	d923      	bls.n	802460e <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0U)
 80245c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80245ca:	b29b      	uxth	r3, r3
 80245cc:	b323      	cbz	r3, 8024618 <HAL_SPI_Receive+0x13a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80245ce:	6823      	ldr	r3, [r4, #0]
 80245d0:	689a      	ldr	r2, [r3, #8]
 80245d2:	07d1      	lsls	r1, r2, #31
 80245d4:	d557      	bpl.n	8024686 <HAL_SPI_Receive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80245d6:	68da      	ldr	r2, [r3, #12]
 80245d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80245da:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80245de:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80245e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80245e4:	3b01      	subs	r3, #1
 80245e6:	b29b      	uxth	r3, r3
 80245e8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80245ec:	e7eb      	b.n	80245c6 <HAL_SPI_Receive+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80245ee:	6823      	ldr	r3, [r4, #0]
 80245f0:	689a      	ldr	r2, [r3, #8]
 80245f2:	07d7      	lsls	r7, r2, #31
 80245f4:	d538      	bpl.n	8024668 <HAL_SPI_Receive+0x18a>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80245f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80245f8:	7b1b      	ldrb	r3, [r3, #12]
 80245fa:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80245fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80245fe:	3301      	adds	r3, #1
 8024600:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8024602:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8024606:	3b01      	subs	r3, #1
 8024608:	b29b      	uxth	r3, r3
 802460a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 802460e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8024612:	b29b      	uxth	r3, r3
 8024614:	2b00      	cmp	r3, #0
 8024616:	d1ea      	bne.n	80245ee <HAL_SPI_Receive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802461a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802461e:	d142      	bne.n	80246a6 <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024620:	6822      	ldr	r2, [r4, #0]
 8024622:	6813      	ldr	r3, [r2, #0]
 8024624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8024628:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 802462a:	2201      	movs	r2, #1
 802462c:	9600      	str	r6, [sp, #0]
 802462e:	462b      	mov	r3, r5
 8024630:	4611      	mov	r1, r2
 8024632:	4620      	mov	r0, r4
 8024634:	f7ff fc3c 	bl	8023eb0 <SPI_WaitFlagStateUntilTimeout>
 8024638:	b9e8      	cbnz	r0, 8024676 <HAL_SPI_Receive+0x198>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802463a:	68e1      	ldr	r1, [r4, #12]
 802463c:	6822      	ldr	r2, [r4, #0]
 802463e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024640:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8024644:	bf8b      	itete	hi
 8024646:	68d2      	ldrhi	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8024648:	7b12      	ldrbls	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802464a:	801a      	strhhi	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 802464c:	701a      	strbls	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 802464e:	2201      	movs	r2, #1
 8024650:	9600      	str	r6, [sp, #0]
 8024652:	462b      	mov	r3, r5
 8024654:	4611      	mov	r1, r2
 8024656:	4620      	mov	r0, r4
 8024658:	f7ff fc2a 	bl	8023eb0 <SPI_WaitFlagStateUntilTimeout>
 802465c:	b1d8      	cbz	r0, 8024696 <HAL_SPI_Receive+0x1b8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 802465e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024660:	f043 0302 	orr.w	r3, r3, #2
 8024664:	6623      	str	r3, [r4, #96]	; 0x60
 8024666:	e006      	b.n	8024676 <HAL_SPI_Receive+0x198>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8024668:	f7fd fd60 	bl	802212c <HAL_GetTick>
 802466c:	1b80      	subs	r0, r0, r6
 802466e:	42a8      	cmp	r0, r5
 8024670:	d3cd      	bcc.n	802460e <HAL_SPI_Receive+0x130>
 8024672:	1c68      	adds	r0, r5, #1
 8024674:	d0cb      	beq.n	802460e <HAL_SPI_Receive+0x130>
          errorcode = HAL_TIMEOUT;
 8024676:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8024678:	2301      	movs	r3, #1
 802467a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 802467e:	2300      	movs	r3, #0
 8024680:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8024684:	e741      	b.n	802450a <HAL_SPI_Receive+0x2c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8024686:	f7fd fd51 	bl	802212c <HAL_GetTick>
 802468a:	1b80      	subs	r0, r0, r6
 802468c:	42a8      	cmp	r0, r5
 802468e:	d39a      	bcc.n	80245c6 <HAL_SPI_Receive+0xe8>
 8024690:	1c6a      	adds	r2, r5, #1
 8024692:	d098      	beq.n	80245c6 <HAL_SPI_Receive+0xe8>
 8024694:	e7ef      	b.n	8024676 <HAL_SPI_Receive+0x198>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8024696:	68e2      	ldr	r2, [r4, #12]
 8024698:	6823      	ldr	r3, [r4, #0]
 802469a:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 802469e:	d11a      	bne.n	80246d6 <HAL_SPI_Receive+0x1f8>
      tmpreg = READ_REG(hspi->Instance->DR);
 80246a0:	68db      	ldr	r3, [r3, #12]
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80246a2:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 80246a4:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80246a6:	4632      	mov	r2, r6
 80246a8:	4629      	mov	r1, r5
 80246aa:	4620      	mov	r0, r4
 80246ac:	f7ff fc5c 	bl	8023f68 <SPI_EndRxTransaction>
 80246b0:	b108      	cbz	r0, 80246b6 <HAL_SPI_Receive+0x1d8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80246b2:	2320      	movs	r3, #32
 80246b4:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80246b6:	6822      	ldr	r2, [r4, #0]
 80246b8:	6893      	ldr	r3, [r2, #8]
 80246ba:	06db      	lsls	r3, r3, #27
 80246bc:	d506      	bpl.n	80246cc <HAL_SPI_Receive+0x1ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80246be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80246c0:	f043 0302 	orr.w	r3, r3, #2
 80246c4:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80246c6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80246ca:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80246cc:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80246ce:	3800      	subs	r0, #0
 80246d0:	bf18      	it	ne
 80246d2:	2001      	movne	r0, #1
error :
 80246d4:	e7d0      	b.n	8024678 <HAL_SPI_Receive+0x19a>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80246d6:	7b1b      	ldrb	r3, [r3, #12]
 80246d8:	b2db      	uxtb	r3, r3
 80246da:	9303      	str	r3, [sp, #12]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80246dc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg);
 80246e0:	9b03      	ldr	r3, [sp, #12]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80246e2:	d1e0      	bne.n	80246a6 <HAL_SPI_Receive+0x1c8>
 80246e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80246e6:	2b02      	cmp	r3, #2
 80246e8:	d1dd      	bne.n	80246a6 <HAL_SPI_Receive+0x1c8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80246ea:	2201      	movs	r2, #1
 80246ec:	9600      	str	r6, [sp, #0]
 80246ee:	462b      	mov	r3, r5
 80246f0:	4611      	mov	r1, r2
 80246f2:	4620      	mov	r0, r4
 80246f4:	f7ff fbdc 	bl	8023eb0 <SPI_WaitFlagStateUntilTimeout>
 80246f8:	2800      	cmp	r0, #0
 80246fa:	d1b0      	bne.n	802465e <HAL_SPI_Receive+0x180>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80246fc:	6823      	ldr	r3, [r4, #0]
 80246fe:	7b1b      	ldrb	r3, [r3, #12]
 8024700:	b2db      	uxtb	r3, r3
 8024702:	e7ce      	b.n	80246a2 <HAL_SPI_Receive+0x1c4>
    errorcode = HAL_BUSY;
 8024704:	2002      	movs	r0, #2
 8024706:	e7b7      	b.n	8024678 <HAL_SPI_Receive+0x19a>
  __HAL_LOCK(hspi);
 8024708:	2002      	movs	r0, #2
 802470a:	e6fe      	b.n	802450a <HAL_SPI_Receive+0x2c>

0802470c <HAL_SPI_Transmit_IT>:
{
 802470c:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 802470e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8024712:	2801      	cmp	r0, #1
 8024714:	d04d      	beq.n	80247b2 <HAL_SPI_Transmit_IT+0xa6>
 8024716:	2001      	movs	r0, #1
 8024718:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 802471c:	2900      	cmp	r1, #0
 802471e:	d040      	beq.n	80247a2 <HAL_SPI_Transmit_IT+0x96>
 8024720:	2a00      	cmp	r2, #0
 8024722:	d03e      	beq.n	80247a2 <HAL_SPI_Transmit_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_READY)
 8024724:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8024728:	2801      	cmp	r0, #1
 802472a:	d13e      	bne.n	80247aa <HAL_SPI_Transmit_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802472c:	2003      	movs	r0, #3
 802472e:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8024732:	2000      	movs	r0, #0
 8024734:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8024736:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8024738:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 802473a:	491f      	ldr	r1, [pc, #124]	; (80247b8 <HAL_SPI_Transmit_IT+0xac>)
  hspi->TxXferSize  = Size;
 802473c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802473e:	6418      	str	r0, [r3, #64]	; 0x40
    hspi->TxISR = SPI_TxISR_8BIT;
 8024740:	4a1e      	ldr	r2, [pc, #120]	; (80247bc <HAL_SPI_Transmit_IT+0xb0>)
  hspi->RxXferSize  = 0U;
 8024742:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8024746:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 802474a:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802474c:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 802474e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8024752:	bf98      	it	ls
 8024754:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8024756:	6899      	ldr	r1, [r3, #8]
 8024758:	651a      	str	r2, [r3, #80]	; 0x50
 802475a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 802475e:	681a      	ldr	r2, [r3, #0]
 8024760:	d107      	bne.n	8024772 <HAL_SPI_Transmit_IT+0x66>
    __HAL_SPI_DISABLE(hspi);
 8024762:	6811      	ldr	r1, [r2, #0]
 8024764:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8024768:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 802476a:	6811      	ldr	r1, [r2, #0]
 802476c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8024770:	6011      	str	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024772:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8024774:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8024778:	d107      	bne.n	802478a <HAL_SPI_Transmit_IT+0x7e>
    SPI_RESET_CRC(hspi);
 802477a:	6811      	ldr	r1, [r2, #0]
 802477c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8024780:	6011      	str	r1, [r2, #0]
 8024782:	6811      	ldr	r1, [r2, #0]
 8024784:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8024788:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 802478a:	6851      	ldr	r1, [r2, #4]
 802478c:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8024790:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8024792:	6810      	ldr	r0, [r2, #0]
 8024794:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8024798:	d109      	bne.n	80247ae <HAL_SPI_Transmit_IT+0xa2>
    __HAL_SPI_ENABLE(hspi);
 802479a:	6811      	ldr	r1, [r2, #0]
 802479c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80247a0:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 80247a2:	2200      	movs	r2, #0
 80247a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80247a8:	4770      	bx	lr
    errorcode = HAL_BUSY;
 80247aa:	2002      	movs	r0, #2
 80247ac:	e7f9      	b.n	80247a2 <HAL_SPI_Transmit_IT+0x96>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80247ae:	2000      	movs	r0, #0
 80247b0:	e7f7      	b.n	80247a2 <HAL_SPI_Transmit_IT+0x96>
  __HAL_LOCK(hspi);
 80247b2:	2002      	movs	r0, #2
}
 80247b4:	4770      	bx	lr
 80247b6:	bf00      	nop
 80247b8:	08024a13 	.word	0x08024a13
 80247bc:	08024a47 	.word	0x08024a47

080247c0 <HAL_SPI_TransmitReceive_IT>:
{
 80247c0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 80247c2:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 80247c6:	2c01      	cmp	r4, #1
 80247c8:	d070      	beq.n	80248ac <HAL_SPI_TransmitReceive_IT+0xec>
 80247ca:	2401      	movs	r4, #1
 80247cc:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 80247d0:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80247d4:	2c01      	cmp	r4, #1
  tmp_state           = hspi->State;
 80247d6:	b2e5      	uxtb	r5, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80247d8:	d008      	beq.n	80247ec <HAL_SPI_TransmitReceive_IT+0x2c>
 80247da:	6844      	ldr	r4, [r0, #4]
 80247dc:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80247e0:	d15e      	bne.n	80248a0 <HAL_SPI_TransmitReceive_IT+0xe0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80247e2:	6884      	ldr	r4, [r0, #8]
 80247e4:	2c00      	cmp	r4, #0
 80247e6:	d15b      	bne.n	80248a0 <HAL_SPI_TransmitReceive_IT+0xe0>
 80247e8:	2d04      	cmp	r5, #4
 80247ea:	d159      	bne.n	80248a0 <HAL_SPI_TransmitReceive_IT+0xe0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80247ec:	2900      	cmp	r1, #0
 80247ee:	d059      	beq.n	80248a4 <HAL_SPI_TransmitReceive_IT+0xe4>
 80247f0:	2a00      	cmp	r2, #0
 80247f2:	d057      	beq.n	80248a4 <HAL_SPI_TransmitReceive_IT+0xe4>
 80247f4:	2b00      	cmp	r3, #0
 80247f6:	d055      	beq.n	80248a4 <HAL_SPI_TransmitReceive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80247f8:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80247fc:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80247fe:	2c04      	cmp	r4, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024800:	68c1      	ldr	r1, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8024802:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8024804:	bf1c      	itt	ne
 8024806:	2405      	movne	r4, #5
 8024808:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802480c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8024810:	bf8b      	itete	hi
 8024812:	4a27      	ldrhi	r2, [pc, #156]	; (80248b0 <HAL_SPI_TransmitReceive_IT+0xf0>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8024814:	4a27      	ldrls	r2, [pc, #156]	; (80248b4 <HAL_SPI_TransmitReceive_IT+0xf4>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8024816:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8024818:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 802481a:	bf8c      	ite	hi
 802481c:	4a26      	ldrhi	r2, [pc, #152]	; (80248b8 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 802481e:	4a27      	ldrls	r2, [pc, #156]	; (80248bc <HAL_SPI_TransmitReceive_IT+0xfc>)
 8024820:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024822:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->TxXferSize  = Size;
 8024824:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8024826:	2400      	movs	r4, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024828:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802482c:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 802482e:	6802      	ldr	r2, [r0, #0]
 8024830:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8024832:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8024836:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802483a:	d12a      	bne.n	8024892 <HAL_SPI_TransmitReceive_IT+0xd2>
    hspi->CRCSize = 1U;
 802483c:	2401      	movs	r4, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 802483e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8024842:	6484      	str	r4, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8024844:	d803      	bhi.n	802484e <HAL_SPI_TransmitReceive_IT+0x8e>
 8024846:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8024848:	2c02      	cmp	r4, #2
      hspi->CRCSize = 2U;
 802484a:	bf08      	it	eq
 802484c:	6484      	streq	r4, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 802484e:	6814      	ldr	r4, [r2, #0]
 8024850:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8024854:	6014      	str	r4, [r2, #0]
 8024856:	6814      	ldr	r4, [r2, #0]
 8024858:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 802485c:	6014      	str	r4, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 802485e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8024862:	d801      	bhi.n	8024868 <HAL_SPI_TransmitReceive_IT+0xa8>
 8024864:	2b01      	cmp	r3, #1
 8024866:	d917      	bls.n	8024898 <HAL_SPI_TransmitReceive_IT+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024868:	6853      	ldr	r3, [r2, #4]
 802486a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802486e:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8024870:	6853      	ldr	r3, [r2, #4]
 8024872:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8024876:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8024878:	6813      	ldr	r3, [r2, #0]
 802487a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 802487e:	d113      	bne.n	80248a8 <HAL_SPI_TransmitReceive_IT+0xe8>
    __HAL_SPI_ENABLE(hspi);
 8024880:	6811      	ldr	r1, [r2, #0]
 8024882:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8024886:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8024888:	2200      	movs	r2, #0
 802488a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 802488e:	4618      	mov	r0, r3
 8024890:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 8024892:	2400      	movs	r4, #0
 8024894:	6484      	str	r4, [r0, #72]	; 0x48
 8024896:	e7e2      	b.n	802485e <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024898:	6853      	ldr	r3, [r2, #4]
 802489a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802489e:	e7e6      	b.n	802486e <HAL_SPI_TransmitReceive_IT+0xae>
    errorcode = HAL_BUSY;
 80248a0:	2302      	movs	r3, #2
 80248a2:	e7f1      	b.n	8024888 <HAL_SPI_TransmitReceive_IT+0xc8>
    errorcode = HAL_ERROR;
 80248a4:	2301      	movs	r3, #1
 80248a6:	e7ef      	b.n	8024888 <HAL_SPI_TransmitReceive_IT+0xc8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80248a8:	2300      	movs	r3, #0
 80248aa:	e7ed      	b.n	8024888 <HAL_SPI_TransmitReceive_IT+0xc8>
  __HAL_LOCK(hspi);
 80248ac:	2302      	movs	r3, #2
 80248ae:	e7ee      	b.n	802488e <HAL_SPI_TransmitReceive_IT+0xce>
 80248b0:	08024d9d 	.word	0x08024d9d
 80248b4:	08024c95 	.word	0x08024c95
 80248b8:	08024d49 	.word	0x08024d49
 80248bc:	08024c2f 	.word	0x08024c2f

080248c0 <HAL_SPI_Receive_IT>:
{
 80248c0:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80248c2:	6886      	ldr	r6, [r0, #8]
{
 80248c4:	4604      	mov	r4, r0
 80248c6:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80248c8:	b95e      	cbnz	r6, 80248e2 <HAL_SPI_Receive_IT+0x22>
 80248ca:	6843      	ldr	r3, [r0, #4]
 80248cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80248d0:	d107      	bne.n	80248e2 <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80248d2:	2304      	movs	r3, #4
 80248d4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 80248d8:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80248da:	4613      	mov	r3, r2
 80248dc:	460a      	mov	r2, r1
 80248de:	f7ff bf6f 	b.w	80247c0 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 80248e2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80248e6:	2b01      	cmp	r3, #1
 80248e8:	d061      	beq.n	80249ae <HAL_SPI_Receive_IT+0xee>
 80248ea:	2301      	movs	r3, #1
 80248ec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 80248f0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80248f4:	2b01      	cmp	r3, #1
 80248f6:	b2d8      	uxtb	r0, r3
 80248f8:	d155      	bne.n	80249a6 <HAL_SPI_Receive_IT+0xe6>
  if ((pData == NULL) || (Size == 0U))
 80248fa:	2d00      	cmp	r5, #0
 80248fc:	d04b      	beq.n	8024996 <HAL_SPI_Receive_IT+0xd6>
 80248fe:	2a00      	cmp	r2, #0
 8024900:	d049      	beq.n	8024996 <HAL_SPI_Receive_IT+0xd6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8024902:	2304      	movs	r3, #4
 8024904:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8024908:	2300      	movs	r3, #0
 802490a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 802490c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 802490e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 8024912:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8024914:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8024916:	6523      	str	r3, [r4, #80]	; 0x50
 8024918:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802491a:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 802491c:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024920:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8024922:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024924:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024928:	bf8b      	itete	hi
 802492a:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802492e:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024932:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024934:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8024936:	bf8c      	ite	hi
 8024938:	4a1e      	ldrhi	r2, [pc, #120]	; (80249b4 <HAL_SPI_Receive_IT+0xf4>)
    hspi->RxISR = SPI_RxISR_8BIT;
 802493a:	4a1f      	ldrls	r2, [pc, #124]	; (80249b8 <HAL_SPI_Receive_IT+0xf8>)
 802493c:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802493e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8024942:	d107      	bne.n	8024954 <HAL_SPI_Receive_IT+0x94>
    __HAL_SPI_DISABLE(hspi);
 8024944:	681a      	ldr	r2, [r3, #0]
 8024946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802494a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 802494c:	681a      	ldr	r2, [r3, #0]
 802494e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8024952:	601a      	str	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024954:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8024956:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 802495a:	d121      	bne.n	80249a0 <HAL_SPI_Receive_IT+0xe0>
    hspi->CRCSize = 1U;
 802495c:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 802495e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8024962:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8024964:	d803      	bhi.n	802496e <HAL_SPI_Receive_IT+0xae>
 8024966:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8024968:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 802496a:	bf08      	it	eq
 802496c:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 802496e:	681a      	ldr	r2, [r3, #0]
 8024970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8024974:	601a      	str	r2, [r3, #0]
 8024976:	681a      	ldr	r2, [r3, #0]
 8024978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802497c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 802497e:	685a      	ldr	r2, [r3, #4]
 8024980:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8024984:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8024986:	6818      	ldr	r0, [r3, #0]
 8024988:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 802498c:	d10d      	bne.n	80249aa <HAL_SPI_Receive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 802498e:	681a      	ldr	r2, [r3, #0]
 8024990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8024994:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8024996:	2300      	movs	r3, #0
 8024998:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 802499c:	bc70      	pop	{r4, r5, r6}
 802499e:	4770      	bx	lr
    hspi->CRCSize = 0U;
 80249a0:	2200      	movs	r2, #0
 80249a2:	64a2      	str	r2, [r4, #72]	; 0x48
 80249a4:	e7eb      	b.n	802497e <HAL_SPI_Receive_IT+0xbe>
    errorcode = HAL_BUSY;
 80249a6:	2002      	movs	r0, #2
 80249a8:	e7f5      	b.n	8024996 <HAL_SPI_Receive_IT+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80249aa:	2000      	movs	r0, #0
 80249ac:	e7f3      	b.n	8024996 <HAL_SPI_Receive_IT+0xd6>
  __HAL_LOCK(hspi);
 80249ae:	2002      	movs	r0, #2
 80249b0:	e7f4      	b.n	802499c <HAL_SPI_Receive_IT+0xdc>
 80249b2:	bf00      	nop
 80249b4:	08024b4d 	.word	0x08024b4d
 80249b8:	08024ad1 	.word	0x08024ad1

080249bc <HAL_SPI_TxRxCpltCallback>:
 80249bc:	4770      	bx	lr

080249be <HAL_SPI_ErrorCallback>:
 80249be:	4770      	bx	lr

080249c0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80249c0:	b513      	push	{r0, r1, r4, lr}
 80249c2:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80249c4:	f7fd fbb2 	bl	802212c <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80249c8:	6821      	ldr	r1, [r4, #0]
 80249ca:	684b      	ldr	r3, [r1, #4]
 80249cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 80249d0:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80249d2:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80249d4:	4620      	mov	r0, r4
 80249d6:	2164      	movs	r1, #100	; 0x64
 80249d8:	f7ff fb01 	bl	8023fde <SPI_EndRxTxTransaction>
 80249dc:	b118      	cbz	r0, 80249e6 <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80249de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80249e0:	f043 0320 	orr.w	r3, r3, #32
 80249e4:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80249e6:	68a3      	ldr	r3, [r4, #8]
 80249e8:	b933      	cbnz	r3, 80249f8 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80249ea:	9301      	str	r3, [sp, #4]
 80249ec:	6823      	ldr	r3, [r4, #0]
 80249ee:	68da      	ldr	r2, [r3, #12]
 80249f0:	9201      	str	r2, [sp, #4]
 80249f2:	689b      	ldr	r3, [r3, #8]
 80249f4:	9301      	str	r3, [sp, #4]
 80249f6:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80249f8:	2301      	movs	r3, #1
 80249fa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80249fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8024a00:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8024a02:	b11b      	cbz	r3, 8024a0c <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 8024a04:	f7ff ffdb 	bl	80249be <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8024a08:	b002      	add	sp, #8
 8024a0a:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 8024a0c:	f7fd f9c2 	bl	8021d94 <HAL_SPI_TxCpltCallback>
}
 8024a10:	e7fa      	b.n	8024a08 <SPI_CloseTx_ISR+0x48>

08024a12 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8024a12:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8024a14:	6803      	ldr	r3, [r0, #0]
 8024a16:	7812      	ldrb	r2, [r2, #0]
 8024a18:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8024a1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8024a1c:	3301      	adds	r3, #1
 8024a1e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8024a20:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024a22:	3b01      	subs	r3, #1
 8024a24:	b29b      	uxth	r3, r3
 8024a26:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8024a28:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024a2a:	b29b      	uxth	r3, r3
 8024a2c:	b953      	cbnz	r3, 8024a44 <SPI_TxISR_8BIT+0x32>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024a2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8024a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024a34:	bf01      	itttt	eq
 8024a36:	6802      	ldreq	r2, [r0, #0]
 8024a38:	6813      	ldreq	r3, [r2, #0]
 8024a3a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8024a3e:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8024a40:	f7ff bfbe 	b.w	80249c0 <SPI_CloseTx_ISR>
}
 8024a44:	4770      	bx	lr

08024a46 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024a46:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8024a48:	6802      	ldr	r2, [r0, #0]
 8024a4a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8024a4e:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8024a50:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8024a52:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024a54:	3b01      	subs	r3, #1
 8024a56:	b29b      	uxth	r3, r3
 8024a58:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8024a5a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024a5c:	b29b      	uxth	r3, r3
 8024a5e:	b94b      	cbnz	r3, 8024a74 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024a60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8024a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024a66:	bf02      	ittt	eq
 8024a68:	6813      	ldreq	r3, [r2, #0]
 8024a6a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8024a6e:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8024a70:	f7ff bfa6 	b.w	80249c0 <SPI_CloseTx_ISR>
}
 8024a74:	4770      	bx	lr

08024a76 <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8024a76:	6802      	ldr	r2, [r0, #0]
 8024a78:	6853      	ldr	r3, [r2, #4]
 8024a7a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 8024a7e:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8024a80:	6053      	str	r3, [r2, #4]
{
 8024a82:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8024a84:	f7fd fb52 	bl	802212c <HAL_GetTick>
 8024a88:	2164      	movs	r1, #100	; 0x64
 8024a8a:	4602      	mov	r2, r0
 8024a8c:	4620      	mov	r0, r4
 8024a8e:	f7ff fa6b 	bl	8023f68 <SPI_EndRxTransaction>
 8024a92:	b118      	cbz	r0, 8024a9c <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8024a94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024a96:	f043 0320 	orr.w	r3, r3, #32
 8024a9a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8024a9c:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8024a9e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 8024aa0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8024aa4:	6893      	ldr	r3, [r2, #8]
 8024aa6:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8024aaa:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8024aac:	d009      	beq.n	8024ac2 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8024aae:	f043 0302 	orr.w	r3, r3, #2
 8024ab2:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8024ab4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8024ab8:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 8024aba:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 8024abc:	f7ff ff7f 	bl	80249be <HAL_SPI_ErrorCallback>
}
 8024ac0:	e004      	b.n	8024acc <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 8024ac2:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8024ac4:	2b00      	cmp	r3, #0
 8024ac6:	d1f9      	bne.n	8024abc <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 8024ac8:	f7fd f95c 	bl	8021d84 <HAL_SPI_RxCpltCallback>
}
 8024acc:	bd10      	pop	{r4, pc}
	...

08024ad0 <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8024ad0:	6802      	ldr	r2, [r0, #0]
 8024ad2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8024ad4:	7b12      	ldrb	r2, [r2, #12]
 8024ad6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8024ad8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8024ada:	3301      	adds	r3, #1
 8024adc:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8024ade:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024ae2:	3b01      	subs	r3, #1
 8024ae4:	b29b      	uxth	r3, r3
 8024ae6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8024aea:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024aee:	b29b      	uxth	r3, r3
 8024af0:	2b01      	cmp	r3, #1
 8024af2:	d108      	bne.n	8024b06 <SPI_RxISR_8BIT+0x36>
 8024af4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8024af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024afa:	bf01      	itttt	eq
 8024afc:	6802      	ldreq	r2, [r0, #0]
 8024afe:	6813      	ldreq	r3, [r2, #0]
 8024b00:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8024b04:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8024b06:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024b0a:	b29b      	uxth	r3, r3
 8024b0c:	b943      	cbnz	r3, 8024b20 <SPI_RxISR_8BIT+0x50>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024b0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8024b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024b14:	d102      	bne.n	8024b1c <SPI_RxISR_8BIT+0x4c>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8024b16:	4b03      	ldr	r3, [pc, #12]	; (8024b24 <SPI_RxISR_8BIT+0x54>)
 8024b18:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8024b1a:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8024b1c:	f7ff bfab 	b.w	8024a76 <SPI_CloseRx_ISR>
}
 8024b20:	4770      	bx	lr
 8024b22:	bf00      	nop
 8024b24:	08024b29 	.word	0x08024b29

08024b28 <SPI_RxISR_8BITCRC>:
{
 8024b28:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8024b2a:	2200      	movs	r2, #0
 8024b2c:	9201      	str	r2, [sp, #4]
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8024b2e:	6802      	ldr	r2, [r0, #0]
 8024b30:	7b12      	ldrb	r2, [r2, #12]
 8024b32:	b2d2      	uxtb	r2, r2
 8024b34:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8024b36:	9a01      	ldr	r2, [sp, #4]
  hspi->CRCSize--;
 8024b38:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8024b3a:	3a01      	subs	r2, #1
 8024b3c:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8024b3e:	b912      	cbnz	r2, 8024b46 <SPI_RxISR_8BITCRC+0x1e>
}
 8024b40:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 8024b42:	f7ff bf98 	b.w	8024a76 <SPI_CloseRx_ISR>
}
 8024b46:	b002      	add	sp, #8
 8024b48:	4770      	bx	lr
	...

08024b4c <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8024b4c:	6802      	ldr	r2, [r0, #0]
 8024b4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8024b50:	68d1      	ldr	r1, [r2, #12]
 8024b52:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8024b56:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8024b58:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024b5c:	3b01      	subs	r3, #1
 8024b5e:	b29b      	uxth	r3, r3
 8024b60:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8024b64:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024b68:	b29b      	uxth	r3, r3
 8024b6a:	2b01      	cmp	r3, #1
 8024b6c:	d107      	bne.n	8024b7e <SPI_RxISR_16BIT+0x32>
 8024b6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8024b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024b74:	bf02      	ittt	eq
 8024b76:	6813      	ldreq	r3, [r2, #0]
 8024b78:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8024b7c:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8024b7e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024b82:	b29b      	uxth	r3, r3
 8024b84:	b943      	cbnz	r3, 8024b98 <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024b86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8024b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024b8c:	d102      	bne.n	8024b94 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8024b8e:	4b03      	ldr	r3, [pc, #12]	; (8024b9c <SPI_RxISR_16BIT+0x50>)
 8024b90:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8024b92:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8024b94:	f7ff bf6f 	b.w	8024a76 <SPI_CloseRx_ISR>
}
 8024b98:	4770      	bx	lr
 8024b9a:	bf00      	nop
 8024b9c:	08024ba1 	.word	0x08024ba1

08024ba0 <SPI_RxISR_16BITCRC>:
{
 8024ba0:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8024ba2:	2300      	movs	r3, #0
 8024ba4:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8024ba6:	6803      	ldr	r3, [r0, #0]
 8024ba8:	68da      	ldr	r2, [r3, #12]
 8024baa:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8024bac:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8024bae:	685a      	ldr	r2, [r3, #4]
 8024bb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024bb4:	605a      	str	r2, [r3, #4]
}
 8024bb6:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 8024bb8:	f7ff bf5d 	b.w	8024a76 <SPI_CloseRx_ISR>

08024bbc <SPI_CloseRxTx_ISR>:
{
 8024bbc:	b510      	push	{r4, lr}
 8024bbe:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8024bc0:	f7fd fab4 	bl	802212c <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8024bc4:	6821      	ldr	r1, [r4, #0]
 8024bc6:	684b      	ldr	r3, [r1, #4]
 8024bc8:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 8024bcc:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8024bce:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8024bd0:	4620      	mov	r0, r4
 8024bd2:	2164      	movs	r1, #100	; 0x64
 8024bd4:	f7ff fa03 	bl	8023fde <SPI_EndRxTxTransaction>
 8024bd8:	b118      	cbz	r0, 8024be2 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8024bda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024bdc:	f043 0320 	orr.w	r3, r3, #32
 8024be0:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8024be2:	6822      	ldr	r2, [r4, #0]
 8024be4:	6893      	ldr	r3, [r2, #8]
 8024be6:	f013 0f10 	tst.w	r3, #16
 8024bea:	f04f 0301 	mov.w	r3, #1
 8024bee:	d00c      	beq.n	8024c0a <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 8024bf0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8024bf4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024bf6:	f043 0302 	orr.w	r3, r3, #2
 8024bfa:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8024bfc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8024c00:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 8024c02:	4620      	mov	r0, r4
 8024c04:	f7ff fedb 	bl	80249be <HAL_SPI_ErrorCallback>
}
 8024c08:	e00a      	b.n	8024c20 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8024c0a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024c0c:	b962      	cbnz	r2, 8024c28 <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8024c0e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 8024c12:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8024c16:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 8024c18:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8024c1a:	d102      	bne.n	8024c22 <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 8024c1c:	f7fd f8b2 	bl	8021d84 <HAL_SPI_RxCpltCallback>
}
 8024c20:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 8024c22:	f7ff fecb 	bl	80249bc <HAL_SPI_TxRxCpltCallback>
 8024c26:	e7fb      	b.n	8024c20 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 8024c28:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8024c2c:	e7e9      	b.n	8024c02 <SPI_CloseRxTx_ISR+0x46>

08024c2e <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 8024c2e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8024c30:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8024c32:	6801      	ldr	r1, [r0, #0]
 8024c34:	b292      	uxth	r2, r2
 8024c36:	2a01      	cmp	r2, #1
 8024c38:	d918      	bls.n	8024c6c <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024c3a:	f833 2b02 	ldrh.w	r2, [r3], #2
 8024c3e:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8024c40:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8024c42:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024c44:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 8024c46:	b29b      	uxth	r3, r3
 8024c48:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8024c4a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024c4c:	b29b      	uxth	r3, r3
 8024c4e:	b9fb      	cbnz	r3, 8024c90 <SPI_2linesTxISR_8BIT+0x62>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024c50:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8024c52:	6803      	ldr	r3, [r0, #0]
 8024c54:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8024c58:	d110      	bne.n	8024c7c <SPI_2linesTxISR_8BIT+0x4e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024c5a:	681a      	ldr	r2, [r3, #0]
 8024c5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8024c60:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8024c62:	685a      	ldr	r2, [r3, #4]
 8024c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024c68:	605a      	str	r2, [r3, #4]
      return;
 8024c6a:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8024c6c:	781b      	ldrb	r3, [r3, #0]
 8024c6e:	730b      	strb	r3, [r1, #12]
    hspi->pTxBuffPtr++;
 8024c70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8024c72:	3301      	adds	r3, #1
 8024c74:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8024c76:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024c78:	3b01      	subs	r3, #1
 8024c7a:	e7e4      	b.n	8024c46 <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8024c7c:	685a      	ldr	r2, [r3, #4]
 8024c7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024c82:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 8024c84:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024c88:	b29b      	uxth	r3, r3
 8024c8a:	b90b      	cbnz	r3, 8024c90 <SPI_2linesTxISR_8BIT+0x62>
      SPI_CloseRxTx_ISR(hspi);
 8024c8c:	f7ff bf96 	b.w	8024bbc <SPI_CloseRxTx_ISR>
}
 8024c90:	4770      	bx	lr
	...

08024c94 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 8024c94:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
 8024c98:	6802      	ldr	r2, [r0, #0]
 8024c9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8024c9c:	b289      	uxth	r1, r1
 8024c9e:	2901      	cmp	r1, #1
 8024ca0:	d922      	bls.n	8024ce8 <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8024ca2:	68d1      	ldr	r1, [r2, #12]
 8024ca4:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8024ca8:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8024caa:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024cae:	3b02      	subs	r3, #2
 8024cb0:	b29b      	uxth	r3, r3
 8024cb2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8024cb6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024cba:	b29b      	uxth	r3, r3
 8024cbc:	2b01      	cmp	r3, #1
 8024cbe:	d103      	bne.n	8024cc8 <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024cc0:	6853      	ldr	r3, [r2, #4]
 8024cc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8024cc6:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 8024cc8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024ccc:	b29b      	uxth	r3, r3
 8024cce:	b9fb      	cbnz	r3, 8024d10 <SPI_2linesRxISR_8BIT+0x7c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024cd0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8024cd2:	6803      	ldr	r3, [r0, #0]
 8024cd4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024cd8:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024cda:	d111      	bne.n	8024d00 <SPI_2linesRxISR_8BIT+0x6c>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024cdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8024ce0:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8024ce2:	4b0c      	ldr	r3, [pc, #48]	; (8024d14 <SPI_2linesRxISR_8BIT+0x80>)
 8024ce4:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8024ce6:	4770      	bx	lr
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8024ce8:	7b12      	ldrb	r2, [r2, #12]
 8024cea:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8024cec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8024cee:	3301      	adds	r3, #1
 8024cf0:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8024cf2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024cf6:	3b01      	subs	r3, #1
 8024cf8:	b29b      	uxth	r3, r3
 8024cfa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8024cfe:	e7e3      	b.n	8024cc8 <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8024d00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024d04:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 8024d06:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024d08:	b29b      	uxth	r3, r3
 8024d0a:	b90b      	cbnz	r3, 8024d10 <SPI_2linesRxISR_8BIT+0x7c>
      SPI_CloseRxTx_ISR(hspi);
 8024d0c:	f7ff bf56 	b.w	8024bbc <SPI_CloseRxTx_ISR>
}
 8024d10:	4770      	bx	lr
 8024d12:	bf00      	nop
 8024d14:	08024d19 	.word	0x08024d19

08024d18 <SPI_2linesRxISR_8BITCRC>:
{
 8024d18:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8024d1a:	2200      	movs	r2, #0
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8024d1c:	6801      	ldr	r1, [r0, #0]
  __IO uint32_t tmpreg = 0U;
 8024d1e:	9201      	str	r2, [sp, #4]
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8024d20:	7b0a      	ldrb	r2, [r1, #12]
 8024d22:	b2d2      	uxtb	r2, r2
 8024d24:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8024d26:	9a01      	ldr	r2, [sp, #4]
  hspi->CRCSize--;
 8024d28:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8024d2a:	3a01      	subs	r2, #1
 8024d2c:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8024d2e:	b94a      	cbnz	r2, 8024d44 <SPI_2linesRxISR_8BITCRC+0x2c>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8024d30:	684a      	ldr	r2, [r1, #4]
 8024d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024d36:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8024d38:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024d3a:	b29b      	uxth	r3, r3
 8024d3c:	b913      	cbnz	r3, 8024d44 <SPI_2linesRxISR_8BITCRC+0x2c>
}
 8024d3e:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 8024d40:	f7ff bf3c 	b.w	8024bbc <SPI_CloseRxTx_ISR>
}
 8024d44:	b002      	add	sp, #8
 8024d46:	4770      	bx	lr

08024d48 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024d48:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8024d4a:	6802      	ldr	r2, [r0, #0]
{
 8024d4c:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024d4e:	f831 4b02 	ldrh.w	r4, [r1], #2
 8024d52:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8024d54:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8024d56:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8024d58:	3901      	subs	r1, #1
 8024d5a:	b289      	uxth	r1, r1
 8024d5c:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8024d5e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8024d60:	b289      	uxth	r1, r1
 8024d62:	b959      	cbnz	r1, 8024d7c <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024d64:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8024d66:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8024d6a:	d10a      	bne.n	8024d82 <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024d6c:	6813      	ldr	r3, [r2, #0]
 8024d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8024d72:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8024d74:	6853      	ldr	r3, [r2, #4]
 8024d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8024d7a:	6053      	str	r3, [r2, #4]
}
 8024d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024d80:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8024d82:	6851      	ldr	r1, [r2, #4]
 8024d84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8024d88:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8024d8a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024d8e:	b29b      	uxth	r3, r3
 8024d90:	2b00      	cmp	r3, #0
 8024d92:	d1f3      	bne.n	8024d7c <SPI_2linesTxISR_16BIT+0x34>
}
 8024d94:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8024d98:	f7ff bf10 	b.w	8024bbc <SPI_CloseRxTx_ISR>

08024d9c <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8024d9c:	6801      	ldr	r1, [r0, #0]
 8024d9e:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8024da0:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8024da2:	68cc      	ldr	r4, [r1, #12]
 8024da4:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8024da8:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8024daa:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8024dae:	3a01      	subs	r2, #1
 8024db0:	b292      	uxth	r2, r2
 8024db2:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8024db6:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8024dba:	b292      	uxth	r2, r2
 8024dbc:	b92a      	cbnz	r2, 8024dca <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024dbe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8024dc0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8024dc4:	d104      	bne.n	8024dd0 <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8024dc6:	4a08      	ldr	r2, [pc, #32]	; (8024de8 <SPI_2linesRxISR_16BIT+0x4c>)
 8024dc8:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 8024dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024dce:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8024dd0:	684a      	ldr	r2, [r1, #4]
 8024dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024dd6:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8024dd8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024dda:	b29b      	uxth	r3, r3
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	d1f4      	bne.n	8024dca <SPI_2linesRxISR_16BIT+0x2e>
}
 8024de0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8024de4:	f7ff beea 	b.w	8024bbc <SPI_CloseRxTx_ISR>
 8024de8:	08024ded 	.word	0x08024ded

08024dec <SPI_2linesRxISR_16BITCRC>:
{
 8024dec:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8024dee:	2300      	movs	r3, #0
 8024df0:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8024df2:	6803      	ldr	r3, [r0, #0]
 8024df4:	68da      	ldr	r2, [r3, #12]
 8024df6:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);  
 8024df8:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8024dfa:	685a      	ldr	r2, [r3, #4]
 8024dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024e00:	605a      	str	r2, [r3, #4]
}
 8024e02:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 8024e04:	f7ff beda 	b.w	8024bbc <SPI_CloseRxTx_ISR>

08024e08 <HAL_SPI_IRQHandler>:
{
 8024e08:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8024e0a:	6803      	ldr	r3, [r0, #0]
 8024e0c:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8024e0e:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8024e10:	0656      	lsls	r6, r2, #25
{
 8024e12:	b085      	sub	sp, #20
 8024e14:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8024e16:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8024e1a:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8024e1e:	d408      	bmi.n	8024e32 <HAL_SPI_IRQHandler+0x2a>
 8024e20:	07d6      	lsls	r6, r2, #31
 8024e22:	d506      	bpl.n	8024e32 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8024e24:	066e      	lsls	r6, r5, #25
 8024e26:	d504      	bpl.n	8024e32 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8024e28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 8024e2a:	b005      	add	sp, #20
 8024e2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8024e30:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8024e32:	0796      	lsls	r6, r2, #30
 8024e34:	d504      	bpl.n	8024e40 <HAL_SPI_IRQHandler+0x38>
 8024e36:	0628      	lsls	r0, r5, #24
 8024e38:	d502      	bpl.n	8024e40 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8024e3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8024e3c:	4620      	mov	r0, r4
 8024e3e:	e7f4      	b.n	8024e2a <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8024e40:	f3c2 2000 	ubfx	r0, r2, #8, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8024e44:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8024e46:	ea41 1252 	orr.w	r2, r1, r2, lsr #5
 8024e4a:	f002 0201 	and.w	r2, r2, #1
 8024e4e:	4302      	orrs	r2, r0
 8024e50:	d057      	beq.n	8024f02 <HAL_SPI_IRQHandler+0xfa>
 8024e52:	06aa      	lsls	r2, r5, #26
 8024e54:	d555      	bpl.n	8024f02 <HAL_SPI_IRQHandler+0xfa>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8024e56:	b17f      	cbz	r7, 8024e78 <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8024e58:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8024e5c:	2a03      	cmp	r2, #3
 8024e5e:	f04f 0100 	mov.w	r1, #0
 8024e62:	d048      	beq.n	8024ef6 <HAL_SPI_IRQHandler+0xee>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8024e64:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024e66:	f042 0204 	orr.w	r2, r2, #4
 8024e6a:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8024e6c:	9100      	str	r1, [sp, #0]
 8024e6e:	68da      	ldr	r2, [r3, #12]
 8024e70:	9200      	str	r2, [sp, #0]
 8024e72:	689a      	ldr	r2, [r3, #8]
 8024e74:	9200      	str	r2, [sp, #0]
 8024e76:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8024e78:	07f1      	lsls	r1, r6, #31
 8024e7a:	d50c      	bpl.n	8024e96 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8024e7c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024e7e:	f042 0201 	orr.w	r2, r2, #1
 8024e82:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8024e84:	2200      	movs	r2, #0
 8024e86:	9202      	str	r2, [sp, #8]
 8024e88:	689a      	ldr	r2, [r3, #8]
 8024e8a:	9202      	str	r2, [sp, #8]
 8024e8c:	681a      	ldr	r2, [r3, #0]
 8024e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024e92:	601a      	str	r2, [r3, #0]
 8024e94:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8024e96:	b140      	cbz	r0, 8024eaa <HAL_SPI_IRQHandler+0xa2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8024e98:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024e9a:	f042 0208 	orr.w	r2, r2, #8
 8024e9e:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8024ea0:	2200      	movs	r2, #0
 8024ea2:	9203      	str	r2, [sp, #12]
 8024ea4:	689a      	ldr	r2, [r3, #8]
 8024ea6:	9203      	str	r2, [sp, #12]
 8024ea8:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8024eaa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024eac:	b34a      	cbz	r2, 8024f02 <HAL_SPI_IRQHandler+0xfa>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8024eae:	685a      	ldr	r2, [r3, #4]
 8024eb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8024eb4:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8024eb6:	2201      	movs	r2, #1
 8024eb8:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8024ebc:	07aa      	lsls	r2, r5, #30
 8024ebe:	d022      	beq.n	8024f06 <HAL_SPI_IRQHandler+0xfe>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8024ec0:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8024ec2:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8024ec4:	f022 0203 	bic.w	r2, r2, #3
 8024ec8:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8024eca:	b140      	cbz	r0, 8024ede <HAL_SPI_IRQHandler+0xd6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8024ecc:	4b10      	ldr	r3, [pc, #64]	; (8024f10 <HAL_SPI_IRQHandler+0x108>)
 8024ece:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8024ed0:	f7fd fdf6 	bl	8022ac0 <HAL_DMA_Abort_IT>
 8024ed4:	b118      	cbz	r0, 8024ede <HAL_SPI_IRQHandler+0xd6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8024ed6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024edc:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8024ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024ee0:	b178      	cbz	r0, 8024f02 <HAL_SPI_IRQHandler+0xfa>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8024ee2:	4b0b      	ldr	r3, [pc, #44]	; (8024f10 <HAL_SPI_IRQHandler+0x108>)
 8024ee4:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8024ee6:	f7fd fdeb 	bl	8022ac0 <HAL_DMA_Abort_IT>
 8024eea:	b150      	cbz	r0, 8024f02 <HAL_SPI_IRQHandler+0xfa>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8024eec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024ef2:	6623      	str	r3, [r4, #96]	; 0x60
 8024ef4:	e005      	b.n	8024f02 <HAL_SPI_IRQHandler+0xfa>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8024ef6:	9101      	str	r1, [sp, #4]
 8024ef8:	68da      	ldr	r2, [r3, #12]
 8024efa:	9201      	str	r2, [sp, #4]
 8024efc:	689b      	ldr	r3, [r3, #8]
 8024efe:	9301      	str	r3, [sp, #4]
 8024f00:	9b01      	ldr	r3, [sp, #4]
}
 8024f02:	b005      	add	sp, #20
 8024f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8024f06:	4620      	mov	r0, r4
 8024f08:	f7ff fd59 	bl	80249be <HAL_SPI_ErrorCallback>
 8024f0c:	e7f9      	b.n	8024f02 <HAL_SPI_IRQHandler+0xfa>
 8024f0e:	bf00      	nop
 8024f10:	08024f15 	.word	0x08024f15

08024f14 <SPI_DMAAbortOnError>:
{
 8024f14:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8024f16:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8024f18:	2300      	movs	r3, #0
 8024f1a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8024f1e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8024f20:	f7ff fd4d 	bl	80249be <HAL_SPI_ErrorCallback>
}
 8024f24:	bd08      	pop	{r3, pc}

08024f26 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8024f26:	4770      	bx	lr

08024f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8024f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f2a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8024f2c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8024f2e:	6921      	ldr	r1, [r4, #16]
 8024f30:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8024f32:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8024f34:	69c0      	ldr	r0, [r0, #28]
 8024f36:	430a      	orrs	r2, r1
 8024f38:	6961      	ldr	r1, [r4, #20]
 8024f3a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8024f3c:	4993      	ldr	r1, [pc, #588]	; (802518c <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8024f3e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8024f40:	4029      	ands	r1, r5
 8024f42:	430a      	orrs	r2, r1
 8024f44:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8024f46:	685a      	ldr	r2, [r3, #4]
 8024f48:	68e1      	ldr	r1, [r4, #12]
 8024f4a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8024f4e:	430a      	orrs	r2, r1
 8024f50:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8024f52:	4a8f      	ldr	r2, [pc, #572]	; (8025190 <UART_SetConfig+0x268>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8024f54:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8024f56:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8024f58:	bf1c      	itt	ne
 8024f5a:	6a22      	ldrne	r2, [r4, #32]
 8024f5c:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8024f5e:	689a      	ldr	r2, [r3, #8]
 8024f60:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8024f64:	430a      	orrs	r2, r1
 8024f66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024f68:	4a8a      	ldr	r2, [pc, #552]	; (8025194 <UART_SetConfig+0x26c>)
 8024f6a:	4293      	cmp	r3, r2
 8024f6c:	d11b      	bne.n	8024fa6 <UART_SetConfig+0x7e>
 8024f6e:	4b8a      	ldr	r3, [pc, #552]	; (8025198 <UART_SetConfig+0x270>)
 8024f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024f74:	f003 0303 	and.w	r3, r3, #3
 8024f78:	3b01      	subs	r3, #1
 8024f7a:	2b02      	cmp	r3, #2
 8024f7c:	f200 80d6 	bhi.w	802512c <UART_SetConfig+0x204>
 8024f80:	4a86      	ldr	r2, [pc, #536]	; (802519c <UART_SetConfig+0x274>)
 8024f82:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024f84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8024f88:	f040 809e 	bne.w	80250c8 <UART_SetConfig+0x1a0>
  {
    switch (clocksource)
 8024f8c:	2b08      	cmp	r3, #8
 8024f8e:	d828      	bhi.n	8024fe2 <UART_SetConfig+0xba>
 8024f90:	e8df f013 	tbh	[pc, r3, lsl #1]
 8024f94:	00cf00e0 	.word	0x00cf00e0
 8024f98:	00270098 	.word	0x00270098
 8024f9c:	002700d5 	.word	0x002700d5
 8024fa0:	00270027 	.word	0x00270027
 8024fa4:	00e4      	.short	0x00e4
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024fa6:	4a7e      	ldr	r2, [pc, #504]	; (80251a0 <UART_SetConfig+0x278>)
 8024fa8:	4293      	cmp	r3, r2
 8024faa:	d108      	bne.n	8024fbe <UART_SetConfig+0x96>
 8024fac:	4b7a      	ldr	r3, [pc, #488]	; (8025198 <UART_SetConfig+0x270>)
 8024fae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8024fb2:	4b7a      	ldr	r3, [pc, #488]	; (802519c <UART_SetConfig+0x274>)
 8024fb4:	f002 020c 	and.w	r2, r2, #12
 8024fb8:	4413      	add	r3, r2
 8024fba:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8024fbc:	e7e2      	b.n	8024f84 <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024fbe:	4a79      	ldr	r2, [pc, #484]	; (80251a4 <UART_SetConfig+0x27c>)
 8024fc0:	4293      	cmp	r3, r2
 8024fc2:	d119      	bne.n	8024ff8 <UART_SetConfig+0xd0>
 8024fc4:	4b74      	ldr	r3, [pc, #464]	; (8025198 <UART_SetConfig+0x270>)
 8024fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024fca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8024fce:	2b20      	cmp	r3, #32
 8024fd0:	f000 80b8 	beq.w	8025144 <UART_SetConfig+0x21c>
 8024fd4:	d807      	bhi.n	8024fe6 <UART_SetConfig+0xbe>
 8024fd6:	2b00      	cmp	r3, #0
 8024fd8:	f000 80b9 	beq.w	802514e <UART_SetConfig+0x226>
 8024fdc:	2b10      	cmp	r3, #16
 8024fde:	f000 80ab 	beq.w	8025138 <UART_SetConfig+0x210>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024fe2:	2001      	movs	r0, #1
 8024fe4:	e04e      	b.n	8025084 <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024fe6:	2b30      	cmp	r3, #48	; 0x30
 8024fe8:	d1fb      	bne.n	8024fe2 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024fea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8024fee:	f000 80b5 	beq.w	802515c <UART_SetConfig+0x234>
 8024ff2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8024ff6:	e083      	b.n	8025100 <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024ff8:	4a6b      	ldr	r2, [pc, #428]	; (80251a8 <UART_SetConfig+0x280>)
 8024ffa:	4293      	cmp	r3, r2
 8024ffc:	d10f      	bne.n	802501e <UART_SetConfig+0xf6>
 8024ffe:	4b66      	ldr	r3, [pc, #408]	; (8025198 <UART_SetConfig+0x270>)
 8025000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8025004:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8025008:	2b80      	cmp	r3, #128	; 0x80
 802500a:	f000 809b 	beq.w	8025144 <UART_SetConfig+0x21c>
 802500e:	d804      	bhi.n	802501a <UART_SetConfig+0xf2>
 8025010:	2b00      	cmp	r3, #0
 8025012:	f000 809c 	beq.w	802514e <UART_SetConfig+0x226>
 8025016:	2b40      	cmp	r3, #64	; 0x40
 8025018:	e7e1      	b.n	8024fde <UART_SetConfig+0xb6>
 802501a:	2bc0      	cmp	r3, #192	; 0xc0
 802501c:	e7e4      	b.n	8024fe8 <UART_SetConfig+0xc0>
 802501e:	4a63      	ldr	r2, [pc, #396]	; (80251ac <UART_SetConfig+0x284>)
 8025020:	4293      	cmp	r3, r2
 8025022:	d112      	bne.n	802504a <UART_SetConfig+0x122>
 8025024:	4b5c      	ldr	r3, [pc, #368]	; (8025198 <UART_SetConfig+0x270>)
 8025026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802502a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802502e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025032:	f000 8087 	beq.w	8025144 <UART_SetConfig+0x21c>
 8025036:	d805      	bhi.n	8025044 <UART_SetConfig+0x11c>
 8025038:	2b00      	cmp	r3, #0
 802503a:	f000 8088 	beq.w	802514e <UART_SetConfig+0x226>
 802503e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8025042:	e7cc      	b.n	8024fde <UART_SetConfig+0xb6>
 8025044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8025048:	e7ce      	b.n	8024fe8 <UART_SetConfig+0xc0>
 802504a:	4a51      	ldr	r2, [pc, #324]	; (8025190 <UART_SetConfig+0x268>)
 802504c:	4293      	cmp	r3, r2
 802504e:	d1c8      	bne.n	8024fe2 <UART_SetConfig+0xba>
 8025050:	4b51      	ldr	r3, [pc, #324]	; (8025198 <UART_SetConfig+0x270>)
 8025052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8025056:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 802505a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802505e:	d015      	beq.n	802508c <UART_SetConfig+0x164>
 8025060:	d806      	bhi.n	8025070 <UART_SetConfig+0x148>
 8025062:	b15b      	cbz	r3, 802507c <UART_SetConfig+0x154>
 8025064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025068:	d1bb      	bne.n	8024fe2 <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 802506a:	f7fd fedf 	bl	8022e2c <HAL_RCC_GetSysClockFreq>
        break;
 802506e:	e007      	b.n	8025080 <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8025070:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8025074:	d1b5      	bne.n	8024fe2 <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 8025076:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 802507a:	e008      	b.n	802508e <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 802507c:	f7fe fa3e 	bl	80234fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8025080:	b928      	cbnz	r0, 802508e <UART_SetConfig+0x166>
 8025082:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8025084:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8025086:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 802508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = (uint32_t) HSI_VALUE;
 802508c:	4848      	ldr	r0, [pc, #288]	; (80251b0 <UART_SetConfig+0x288>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 802508e:	6862      	ldr	r2, [r4, #4]
 8025090:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8025094:	4298      	cmp	r0, r3
 8025096:	d3a4      	bcc.n	8024fe2 <UART_SetConfig+0xba>
 8025098:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 802509c:	d8a1      	bhi.n	8024fe2 <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 802509e:	0856      	lsrs	r6, r2, #1
 80250a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80250a4:	2700      	movs	r7, #0
 80250a6:	fbe1 6700 	umlal	r6, r7, r1, r0
 80250aa:	2300      	movs	r3, #0
 80250ac:	4630      	mov	r0, r6
 80250ae:	4639      	mov	r1, r7
 80250b0:	f7fb fbf4 	bl	802089c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80250b4:	4b3f      	ldr	r3, [pc, #252]	; (80251b4 <UART_SetConfig+0x28c>)
 80250b6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80250ba:	429a      	cmp	r2, r3
 80250bc:	d891      	bhi.n	8024fe2 <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 80250be:	6823      	ldr	r3, [r4, #0]
 80250c0:	60d8      	str	r0, [r3, #12]
 80250c2:	e7de      	b.n	8025082 <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 80250c4:	483a      	ldr	r0, [pc, #232]	; (80251b0 <UART_SetConfig+0x288>)
 80250c6:	e049      	b.n	802515c <UART_SetConfig+0x234>
    switch (clocksource)
 80250c8:	2b08      	cmp	r3, #8
 80250ca:	d88a      	bhi.n	8024fe2 <UART_SetConfig+0xba>
 80250cc:	a201      	add	r2, pc, #4	; (adr r2, 80250d4 <UART_SetConfig+0x1ac>)
 80250ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80250d2:	bf00      	nop
 80250d4:	080250f9 	.word	0x080250f9
 80250d8:	08025121 	.word	0x08025121
 80250dc:	0802514b 	.word	0x0802514b
 80250e0:	08024fe3 	.word	0x08024fe3
 80250e4:	08025127 	.word	0x08025127
 80250e8:	08024fe3 	.word	0x08024fe3
 80250ec:	08024fe3 	.word	0x08024fe3
 80250f0:	08024fe3 	.word	0x08024fe3
 80250f4:	08024ff3 	.word	0x08024ff3
        pclk = HAL_RCC_GetPCLK1Freq();
 80250f8:	f7fe fa00 	bl	80234fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80250fc:	2800      	cmp	r0, #0
 80250fe:	d0c0      	beq.n	8025082 <UART_SetConfig+0x15a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8025100:	6862      	ldr	r2, [r4, #4]
 8025102:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8025106:	fbb3 f3f2 	udiv	r3, r3, r2
 802510a:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802510c:	f1a3 0110 	sub.w	r1, r3, #16
 8025110:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8025114:	4291      	cmp	r1, r2
 8025116:	f63f af64 	bhi.w	8024fe2 <UART_SetConfig+0xba>
        huart->Instance->BRR = usartdiv;
 802511a:	6822      	ldr	r2, [r4, #0]
 802511c:	60d3      	str	r3, [r2, #12]
 802511e:	e7b0      	b.n	8025082 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8025120:	f7fe f9fe 	bl	8023520 <HAL_RCC_GetPCLK2Freq>
        break;
 8025124:	e7ea      	b.n	80250fc <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8025126:	f7fd fe81 	bl	8022e2c <HAL_RCC_GetSysClockFreq>
        break;
 802512a:	e7e7      	b.n	80250fc <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802512c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8025130:	d1f6      	bne.n	8025120 <UART_SetConfig+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8025132:	f7fe f9f5 	bl	8023520 <HAL_RCC_GetPCLK2Freq>
        break;
 8025136:	e00f      	b.n	8025158 <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8025138:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 802513c:	d1f3      	bne.n	8025126 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetSysClockFreq();
 802513e:	f7fd fe75 	bl	8022e2c <HAL_RCC_GetSysClockFreq>
        break;
 8025142:	e009      	b.n	8025158 <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8025144:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8025148:	d0bc      	beq.n	80250c4 <UART_SetConfig+0x19c>
        pclk = (uint32_t) HSI_VALUE;
 802514a:	4819      	ldr	r0, [pc, #100]	; (80251b0 <UART_SetConfig+0x288>)
 802514c:	e7d8      	b.n	8025100 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802514e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8025152:	d1d1      	bne.n	80250f8 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8025154:	f7fe f9d2 	bl	80234fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8025158:	2800      	cmp	r0, #0
 802515a:	d092      	beq.n	8025082 <UART_SetConfig+0x15a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 802515c:	6862      	ldr	r2, [r4, #4]
 802515e:	0853      	lsrs	r3, r2, #1
 8025160:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8025164:	fbb0 f0f2 	udiv	r0, r0, r2
 8025168:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802516a:	f1a3 0110 	sub.w	r1, r3, #16
 802516e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8025172:	4291      	cmp	r1, r2
 8025174:	f63f af35 	bhi.w	8024fe2 <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8025178:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 802517c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802517e:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8025180:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8025184:	4318      	orrs	r0, r3
 8025186:	60d0      	str	r0, [r2, #12]
 8025188:	e77b      	b.n	8025082 <UART_SetConfig+0x15a>
 802518a:	bf00      	nop
 802518c:	efff69f3 	.word	0xefff69f3
 8025190:	40008000 	.word	0x40008000
 8025194:	40013800 	.word	0x40013800
 8025198:	40021000 	.word	0x40021000
 802519c:	08026b70 	.word	0x08026b70
 80251a0:	40004400 	.word	0x40004400
 80251a4:	40004800 	.word	0x40004800
 80251a8:	40004c00 	.word	0x40004c00
 80251ac:	40005000 	.word	0x40005000
 80251b0:	00f42400 	.word	0x00f42400
 80251b4:	000ffcff 	.word	0x000ffcff

080251b8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80251b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80251ba:	07da      	lsls	r2, r3, #31
{
 80251bc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80251be:	d506      	bpl.n	80251ce <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80251c0:	6801      	ldr	r1, [r0, #0]
 80251c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80251c4:	684a      	ldr	r2, [r1, #4]
 80251c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80251ca:	4322      	orrs	r2, r4
 80251cc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80251ce:	079c      	lsls	r4, r3, #30
 80251d0:	d506      	bpl.n	80251e0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80251d2:	6801      	ldr	r1, [r0, #0]
 80251d4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80251d6:	684a      	ldr	r2, [r1, #4]
 80251d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80251dc:	4322      	orrs	r2, r4
 80251de:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80251e0:	0759      	lsls	r1, r3, #29
 80251e2:	d506      	bpl.n	80251f2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80251e4:	6801      	ldr	r1, [r0, #0]
 80251e6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80251e8:	684a      	ldr	r2, [r1, #4]
 80251ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80251ee:	4322      	orrs	r2, r4
 80251f0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80251f2:	071a      	lsls	r2, r3, #28
 80251f4:	d506      	bpl.n	8025204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80251f6:	6801      	ldr	r1, [r0, #0]
 80251f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80251fa:	684a      	ldr	r2, [r1, #4]
 80251fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025200:	4322      	orrs	r2, r4
 8025202:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8025204:	06dc      	lsls	r4, r3, #27
 8025206:	d506      	bpl.n	8025216 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8025208:	6801      	ldr	r1, [r0, #0]
 802520a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 802520c:	688a      	ldr	r2, [r1, #8]
 802520e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8025212:	4322      	orrs	r2, r4
 8025214:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8025216:	0699      	lsls	r1, r3, #26
 8025218:	d506      	bpl.n	8025228 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802521a:	6801      	ldr	r1, [r0, #0]
 802521c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 802521e:	688a      	ldr	r2, [r1, #8]
 8025220:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8025224:	4322      	orrs	r2, r4
 8025226:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8025228:	065a      	lsls	r2, r3, #25
 802522a:	d50f      	bpl.n	802524c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802522c:	6801      	ldr	r1, [r0, #0]
 802522e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8025230:	684a      	ldr	r2, [r1, #4]
 8025232:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8025236:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8025238:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802523c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802523e:	d105      	bne.n	802524c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8025240:	684a      	ldr	r2, [r1, #4]
 8025242:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8025244:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8025248:	4322      	orrs	r2, r4
 802524a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802524c:	061b      	lsls	r3, r3, #24
 802524e:	d506      	bpl.n	802525e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8025250:	6802      	ldr	r2, [r0, #0]
 8025252:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8025254:	6853      	ldr	r3, [r2, #4]
 8025256:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 802525a:	430b      	orrs	r3, r1
 802525c:	6053      	str	r3, [r2, #4]
  }
}
 802525e:	bd10      	pop	{r4, pc}

08025260 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8025260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025264:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8025268:	4604      	mov	r4, r0
 802526a:	460e      	mov	r6, r1
 802526c:	4615      	mov	r5, r2
 802526e:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8025270:	6822      	ldr	r2, [r4, #0]
 8025272:	69d3      	ldr	r3, [r2, #28]
 8025274:	ea36 0303 	bics.w	r3, r6, r3
 8025278:	bf0c      	ite	eq
 802527a:	2301      	moveq	r3, #1
 802527c:	2300      	movne	r3, #0
 802527e:	42ab      	cmp	r3, r5
 8025280:	d001      	beq.n	8025286 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8025282:	2000      	movs	r0, #0
 8025284:	e01a      	b.n	80252bc <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8025286:	f1b8 3fff 	cmp.w	r8, #4294967295
 802528a:	d0f2      	beq.n	8025272 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802528c:	f7fc ff4e 	bl	802212c <HAL_GetTick>
 8025290:	1bc0      	subs	r0, r0, r7
 8025292:	4540      	cmp	r0, r8
 8025294:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8025296:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025298:	d802      	bhi.n	80252a0 <UART_WaitOnFlagUntilTimeout+0x40>
 802529a:	f1b8 0f00 	cmp.w	r8, #0
 802529e:	d10f      	bne.n	80252c0 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80252a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80252a4:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80252a6:	6883      	ldr	r3, [r0, #8]
 80252a8:	f023 0301 	bic.w	r3, r3, #1
 80252ac:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80252ae:	2320      	movs	r3, #32
 80252b0:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80252b2:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80252b4:	2300      	movs	r3, #0
 80252b6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 80252ba:	2003      	movs	r0, #3
}
 80252bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80252c0:	075a      	lsls	r2, r3, #29
 80252c2:	d5d5      	bpl.n	8025270 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80252c4:	69c3      	ldr	r3, [r0, #28]
 80252c6:	051b      	lsls	r3, r3, #20
 80252c8:	d5d2      	bpl.n	8025270 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80252ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80252ce:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80252d0:	6803      	ldr	r3, [r0, #0]
 80252d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80252d6:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80252d8:	6883      	ldr	r3, [r0, #8]
 80252da:	f023 0301 	bic.w	r3, r3, #1
 80252de:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80252e0:	2320      	movs	r3, #32
 80252e2:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80252e4:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80252e6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80252ea:	e7e3      	b.n	80252b4 <UART_WaitOnFlagUntilTimeout+0x54>

080252ec <HAL_UART_Transmit>:
{
 80252ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80252f0:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80252f2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80252f4:	2b20      	cmp	r3, #32
{
 80252f6:	4604      	mov	r4, r0
 80252f8:	460e      	mov	r6, r1
 80252fa:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80252fc:	d14e      	bne.n	802539c <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80252fe:	2900      	cmp	r1, #0
 8025300:	d04a      	beq.n	8025398 <HAL_UART_Transmit+0xac>
 8025302:	2a00      	cmp	r2, #0
 8025304:	d048      	beq.n	8025398 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8025306:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802530a:	2b01      	cmp	r3, #1
 802530c:	d046      	beq.n	802539c <HAL_UART_Transmit+0xb0>
 802530e:	2301      	movs	r3, #1
 8025310:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8025314:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8025316:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8025318:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802531c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 802531e:	f7fc ff05 	bl	802212c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8025322:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8025324:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8025328:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 802532c:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 802532e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8025332:	d103      	bne.n	802533c <HAL_UART_Transmit+0x50>
 8025334:	6922      	ldr	r2, [r4, #16]
 8025336:	b90a      	cbnz	r2, 802533c <HAL_UART_Transmit+0x50>
 8025338:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 802533a:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 802533c:	2200      	movs	r2, #0
 802533e:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8025342:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8025346:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 802534a:	b292      	uxth	r2, r2
 802534c:	b93a      	cbnz	r2, 802535e <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802534e:	2140      	movs	r1, #64	; 0x40
 8025350:	4620      	mov	r0, r4
 8025352:	f7ff ff85 	bl	8025260 <UART_WaitOnFlagUntilTimeout>
 8025356:	b950      	cbnz	r0, 802536e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8025358:	2320      	movs	r3, #32
 802535a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 802535c:	e008      	b.n	8025370 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802535e:	2200      	movs	r2, #0
 8025360:	2180      	movs	r1, #128	; 0x80
 8025362:	4620      	mov	r0, r4
 8025364:	9303      	str	r3, [sp, #12]
 8025366:	f7ff ff7b 	bl	8025260 <UART_WaitOnFlagUntilTimeout>
 802536a:	9b03      	ldr	r3, [sp, #12]
 802536c:	b118      	cbz	r0, 8025376 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 802536e:	2003      	movs	r0, #3
}
 8025370:	b004      	add	sp, #16
 8025372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 8025376:	6821      	ldr	r1, [r4, #0]
 8025378:	b95e      	cbnz	r6, 8025392 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 802537a:	f835 2b02 	ldrh.w	r2, [r5], #2
 802537e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8025382:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8025384:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8025388:	3a01      	subs	r2, #1
 802538a:	b292      	uxth	r2, r2
 802538c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8025390:	e7d7      	b.n	8025342 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8025392:	f816 2b01 	ldrb.w	r2, [r6], #1
 8025396:	e7f4      	b.n	8025382 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8025398:	2001      	movs	r0, #1
 802539a:	e7e9      	b.n	8025370 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 802539c:	2002      	movs	r0, #2
 802539e:	e7e7      	b.n	8025370 <HAL_UART_Transmit+0x84>

080253a0 <UART_CheckIdleState>:
{
 80253a0:	b530      	push	{r4, r5, lr}
 80253a2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80253a4:	2500      	movs	r5, #0
{
 80253a6:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80253a8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80253ac:	f7fc febe 	bl	802212c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80253b0:	6822      	ldr	r2, [r4, #0]
 80253b2:	6812      	ldr	r2, [r2, #0]
 80253b4:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80253b6:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80253b8:	d415      	bmi.n	80253e6 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80253ba:	6822      	ldr	r2, [r4, #0]
 80253bc:	6812      	ldr	r2, [r2, #0]
 80253be:	0752      	lsls	r2, r2, #29
 80253c0:	d509      	bpl.n	80253d6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80253c2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80253c6:	9200      	str	r2, [sp, #0]
 80253c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80253cc:	2200      	movs	r2, #0
 80253ce:	4620      	mov	r0, r4
 80253d0:	f7ff ff46 	bl	8025260 <UART_WaitOnFlagUntilTimeout>
 80253d4:	b9a0      	cbnz	r0, 8025400 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80253d6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80253d8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80253da:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80253dc:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80253e0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80253e2:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 80253e4:	e00d      	b.n	8025402 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80253e6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80253ea:	9200      	str	r2, [sp, #0]
 80253ec:	9003      	str	r0, [sp, #12]
 80253ee:	462a      	mov	r2, r5
 80253f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80253f4:	4620      	mov	r0, r4
 80253f6:	f7ff ff33 	bl	8025260 <UART_WaitOnFlagUntilTimeout>
 80253fa:	9b03      	ldr	r3, [sp, #12]
 80253fc:	2800      	cmp	r0, #0
 80253fe:	d0dc      	beq.n	80253ba <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8025400:	2003      	movs	r0, #3
}
 8025402:	b005      	add	sp, #20
 8025404:	bd30      	pop	{r4, r5, pc}

08025406 <HAL_UART_Init>:
{
 8025406:	b510      	push	{r4, lr}
  if (huart == NULL)
 8025408:	4604      	mov	r4, r0
 802540a:	b340      	cbz	r0, 802545e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 802540c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 802540e:	b91b      	cbnz	r3, 8025418 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8025410:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8025414:	f7ff fd87 	bl	8024f26 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8025418:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 802541a:	2324      	movs	r3, #36	; 0x24
 802541c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 802541e:	6813      	ldr	r3, [r2, #0]
 8025420:	f023 0301 	bic.w	r3, r3, #1
 8025424:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8025426:	4620      	mov	r0, r4
 8025428:	f7ff fd7e 	bl	8024f28 <UART_SetConfig>
 802542c:	2801      	cmp	r0, #1
 802542e:	d016      	beq.n	802545e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8025430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025432:	b113      	cbz	r3, 802543a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8025434:	4620      	mov	r0, r4
 8025436:	f7ff febf 	bl	80251b8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802543a:	6823      	ldr	r3, [r4, #0]
 802543c:	685a      	ldr	r2, [r3, #4]
 802543e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8025442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8025444:	689a      	ldr	r2, [r3, #8]
 8025446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802544a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 802544c:	681a      	ldr	r2, [r3, #0]
 802544e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8025452:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8025454:	601a      	str	r2, [r3, #0]
}
 8025456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 802545a:	f7ff bfa1 	b.w	80253a0 <UART_CheckIdleState>
}
 802545e:	2001      	movs	r0, #1
 8025460:	bd10      	pop	{r4, pc}
	...

08025464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8025464:	f8df d034 	ldr.w	sp, [pc, #52]	; 802549c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8025468:	f7fc fda4 	bl	8021fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 802546c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 802546e:	e003      	b.n	8025478 <LoopCopyDataInit>

08025470 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8025470:	4b0b      	ldr	r3, [pc, #44]	; (80254a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8025472:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8025474:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8025476:	3104      	adds	r1, #4

08025478 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8025478:	480a      	ldr	r0, [pc, #40]	; (80254a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 802547a:	4b0b      	ldr	r3, [pc, #44]	; (80254a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 802547c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 802547e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8025480:	d3f6      	bcc.n	8025470 <CopyDataInit>
	ldr	r2, =_sbss
 8025482:	4a0a      	ldr	r2, [pc, #40]	; (80254ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8025484:	e002      	b.n	802548c <LoopFillZerobss>

08025486 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8025486:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8025488:	f842 3b04 	str.w	r3, [r2], #4

0802548c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 802548c:	4b08      	ldr	r3, [pc, #32]	; (80254b0 <LoopForever+0x16>)
	cmp	r2, r3
 802548e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8025490:	d3f9      	bcc.n	8025486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8025492:	f000 f861 	bl	8025558 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8025496:	f7fb fc9d 	bl	8020dd4 <main>

0802549a <LoopForever>:

LoopForever:
    b LoopForever
 802549a:	e7fe      	b.n	802549a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 802549c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80254a0:	08027510 	.word	0x08027510
	ldr	r0, =_sdata
 80254a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80254a8:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80254ac:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80254b0:	20000c04 	.word	0x20000c04

080254b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80254b4:	e7fe      	b.n	80254b4 <ADC1_2_IRQHandler>

080254b6 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80254b6:	2001      	movs	r0, #1
 80254b8:	4770      	bx	lr

080254ba <_kill>:

int _kill(int pid, int sig)
{
 80254ba:	b508      	push	{r3, lr}
	errno = EINVAL;
 80254bc:	f000 f846 	bl	802554c <__errno>
 80254c0:	2316      	movs	r3, #22
 80254c2:	6003      	str	r3, [r0, #0]
	return -1;
}
 80254c4:	f04f 30ff 	mov.w	r0, #4294967295
 80254c8:	bd08      	pop	{r3, pc}

080254ca <_exit>:

void _exit (int status)
{
 80254ca:	b508      	push	{r3, lr}
	errno = EINVAL;
 80254cc:	f000 f83e 	bl	802554c <__errno>
 80254d0:	2316      	movs	r3, #22
 80254d2:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80254d4:	e7fe      	b.n	80254d4 <_exit+0xa>

080254d6 <_read>:
}

int _read (int file, char *ptr, int len)
{
 80254d6:	b510      	push	{r4, lr}
 80254d8:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 80254da:	f3af 8000 	nop.w
 80254de:	7020      	strb	r0, [r4, #0]

	return 1;
}
 80254e0:	2001      	movs	r0, #1
 80254e2:	bd10      	pop	{r4, pc}

080254e4 <_write>:

int _write(int file, char *ptr, int len)
{
 80254e4:	b570      	push	{r4, r5, r6, lr}
 80254e6:	460e      	mov	r6, r1
 80254e8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80254ea:	2500      	movs	r5, #0
 80254ec:	42a5      	cmp	r5, r4
 80254ee:	db01      	blt.n	80254f4 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80254f0:	4620      	mov	r0, r4
 80254f2:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80254f4:	5d70      	ldrb	r0, [r6, r5]
 80254f6:	f7fb fc13 	bl	8020d20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80254fa:	3501      	adds	r5, #1
 80254fc:	e7f6      	b.n	80254ec <_write+0x8>
	...

08025500 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8025500:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8025502:	4b0a      	ldr	r3, [pc, #40]	; (802552c <_sbrk+0x2c>)
 8025504:	6819      	ldr	r1, [r3, #0]
{
 8025506:	4602      	mov	r2, r0
	if (heap_end == 0)
 8025508:	b909      	cbnz	r1, 802550e <_sbrk+0xe>
		heap_end = &end;
 802550a:	4909      	ldr	r1, [pc, #36]	; (8025530 <_sbrk+0x30>)
 802550c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 802550e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8025510:	4669      	mov	r1, sp
 8025512:	4402      	add	r2, r0
 8025514:	428a      	cmp	r2, r1
 8025516:	d906      	bls.n	8025526 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8025518:	f000 f818 	bl	802554c <__errno>
 802551c:	230c      	movs	r3, #12
 802551e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8025520:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8025524:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8025526:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8025528:	e7fc      	b.n	8025524 <_sbrk+0x24>
 802552a:	bf00      	nop
 802552c:	200000b4 	.word	0x200000b4
 8025530:	20000c08 	.word	0x20000c08

08025534 <_close>:

int _close(int file)
{
	return -1;
}
 8025534:	f04f 30ff 	mov.w	r0, #4294967295
 8025538:	4770      	bx	lr

0802553a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 802553a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802553e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8025540:	2000      	movs	r0, #0
 8025542:	4770      	bx	lr

08025544 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8025544:	2001      	movs	r0, #1
 8025546:	4770      	bx	lr

08025548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8025548:	2000      	movs	r0, #0
 802554a:	4770      	bx	lr

0802554c <__errno>:
 802554c:	4b01      	ldr	r3, [pc, #4]	; (8025554 <__errno+0x8>)
 802554e:	6818      	ldr	r0, [r3, #0]
 8025550:	4770      	bx	lr
 8025552:	bf00      	nop
 8025554:	20000024 	.word	0x20000024

08025558 <__libc_init_array>:
 8025558:	b570      	push	{r4, r5, r6, lr}
 802555a:	4d0d      	ldr	r5, [pc, #52]	; (8025590 <__libc_init_array+0x38>)
 802555c:	4c0d      	ldr	r4, [pc, #52]	; (8025594 <__libc_init_array+0x3c>)
 802555e:	1b64      	subs	r4, r4, r5
 8025560:	10a4      	asrs	r4, r4, #2
 8025562:	2600      	movs	r6, #0
 8025564:	42a6      	cmp	r6, r4
 8025566:	d109      	bne.n	802557c <__libc_init_array+0x24>
 8025568:	4d0b      	ldr	r5, [pc, #44]	; (8025598 <__libc_init_array+0x40>)
 802556a:	4c0c      	ldr	r4, [pc, #48]	; (802559c <__libc_init_array+0x44>)
 802556c:	f001 fad0 	bl	8026b10 <_init>
 8025570:	1b64      	subs	r4, r4, r5
 8025572:	10a4      	asrs	r4, r4, #2
 8025574:	2600      	movs	r6, #0
 8025576:	42a6      	cmp	r6, r4
 8025578:	d105      	bne.n	8025586 <__libc_init_array+0x2e>
 802557a:	bd70      	pop	{r4, r5, r6, pc}
 802557c:	f855 3b04 	ldr.w	r3, [r5], #4
 8025580:	4798      	blx	r3
 8025582:	3601      	adds	r6, #1
 8025584:	e7ee      	b.n	8025564 <__libc_init_array+0xc>
 8025586:	f855 3b04 	ldr.w	r3, [r5], #4
 802558a:	4798      	blx	r3
 802558c:	3601      	adds	r6, #1
 802558e:	e7f2      	b.n	8025576 <__libc_init_array+0x1e>
 8025590:	08027500 	.word	0x08027500
 8025594:	08027500 	.word	0x08027500
 8025598:	08027500 	.word	0x08027500
 802559c:	08027504 	.word	0x08027504

080255a0 <memcpy>:
 80255a0:	440a      	add	r2, r1
 80255a2:	4291      	cmp	r1, r2
 80255a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80255a8:	d100      	bne.n	80255ac <memcpy+0xc>
 80255aa:	4770      	bx	lr
 80255ac:	b510      	push	{r4, lr}
 80255ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80255b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80255b6:	4291      	cmp	r1, r2
 80255b8:	d1f9      	bne.n	80255ae <memcpy+0xe>
 80255ba:	bd10      	pop	{r4, pc}

080255bc <memset>:
 80255bc:	4402      	add	r2, r0
 80255be:	4603      	mov	r3, r0
 80255c0:	4293      	cmp	r3, r2
 80255c2:	d100      	bne.n	80255c6 <memset+0xa>
 80255c4:	4770      	bx	lr
 80255c6:	f803 1b01 	strb.w	r1, [r3], #1
 80255ca:	e7f9      	b.n	80255c0 <memset+0x4>

080255cc <iprintf>:
 80255cc:	b40f      	push	{r0, r1, r2, r3}
 80255ce:	4b0a      	ldr	r3, [pc, #40]	; (80255f8 <iprintf+0x2c>)
 80255d0:	b513      	push	{r0, r1, r4, lr}
 80255d2:	681c      	ldr	r4, [r3, #0]
 80255d4:	b124      	cbz	r4, 80255e0 <iprintf+0x14>
 80255d6:	69a3      	ldr	r3, [r4, #24]
 80255d8:	b913      	cbnz	r3, 80255e0 <iprintf+0x14>
 80255da:	4620      	mov	r0, r4
 80255dc:	f000 fb2a 	bl	8025c34 <__sinit>
 80255e0:	ab05      	add	r3, sp, #20
 80255e2:	9a04      	ldr	r2, [sp, #16]
 80255e4:	68a1      	ldr	r1, [r4, #8]
 80255e6:	9301      	str	r3, [sp, #4]
 80255e8:	4620      	mov	r0, r4
 80255ea:	f000 fe71 	bl	80262d0 <_vfiprintf_r>
 80255ee:	b002      	add	sp, #8
 80255f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80255f4:	b004      	add	sp, #16
 80255f6:	4770      	bx	lr
 80255f8:	20000024 	.word	0x20000024

080255fc <_puts_r>:
 80255fc:	b570      	push	{r4, r5, r6, lr}
 80255fe:	460e      	mov	r6, r1
 8025600:	4605      	mov	r5, r0
 8025602:	b118      	cbz	r0, 802560c <_puts_r+0x10>
 8025604:	6983      	ldr	r3, [r0, #24]
 8025606:	b90b      	cbnz	r3, 802560c <_puts_r+0x10>
 8025608:	f000 fb14 	bl	8025c34 <__sinit>
 802560c:	69ab      	ldr	r3, [r5, #24]
 802560e:	68ac      	ldr	r4, [r5, #8]
 8025610:	b913      	cbnz	r3, 8025618 <_puts_r+0x1c>
 8025612:	4628      	mov	r0, r5
 8025614:	f000 fb0e 	bl	8025c34 <__sinit>
 8025618:	4b2c      	ldr	r3, [pc, #176]	; (80256cc <_puts_r+0xd0>)
 802561a:	429c      	cmp	r4, r3
 802561c:	d120      	bne.n	8025660 <_puts_r+0x64>
 802561e:	686c      	ldr	r4, [r5, #4]
 8025620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025622:	07db      	lsls	r3, r3, #31
 8025624:	d405      	bmi.n	8025632 <_puts_r+0x36>
 8025626:	89a3      	ldrh	r3, [r4, #12]
 8025628:	0598      	lsls	r0, r3, #22
 802562a:	d402      	bmi.n	8025632 <_puts_r+0x36>
 802562c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802562e:	f000 fbb1 	bl	8025d94 <__retarget_lock_acquire_recursive>
 8025632:	89a3      	ldrh	r3, [r4, #12]
 8025634:	0719      	lsls	r1, r3, #28
 8025636:	d51d      	bpl.n	8025674 <_puts_r+0x78>
 8025638:	6923      	ldr	r3, [r4, #16]
 802563a:	b1db      	cbz	r3, 8025674 <_puts_r+0x78>
 802563c:	3e01      	subs	r6, #1
 802563e:	68a3      	ldr	r3, [r4, #8]
 8025640:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025644:	3b01      	subs	r3, #1
 8025646:	60a3      	str	r3, [r4, #8]
 8025648:	bb39      	cbnz	r1, 802569a <_puts_r+0x9e>
 802564a:	2b00      	cmp	r3, #0
 802564c:	da38      	bge.n	80256c0 <_puts_r+0xc4>
 802564e:	4622      	mov	r2, r4
 8025650:	210a      	movs	r1, #10
 8025652:	4628      	mov	r0, r5
 8025654:	f000 f8f6 	bl	8025844 <__swbuf_r>
 8025658:	3001      	adds	r0, #1
 802565a:	d011      	beq.n	8025680 <_puts_r+0x84>
 802565c:	250a      	movs	r5, #10
 802565e:	e011      	b.n	8025684 <_puts_r+0x88>
 8025660:	4b1b      	ldr	r3, [pc, #108]	; (80256d0 <_puts_r+0xd4>)
 8025662:	429c      	cmp	r4, r3
 8025664:	d101      	bne.n	802566a <_puts_r+0x6e>
 8025666:	68ac      	ldr	r4, [r5, #8]
 8025668:	e7da      	b.n	8025620 <_puts_r+0x24>
 802566a:	4b1a      	ldr	r3, [pc, #104]	; (80256d4 <_puts_r+0xd8>)
 802566c:	429c      	cmp	r4, r3
 802566e:	bf08      	it	eq
 8025670:	68ec      	ldreq	r4, [r5, #12]
 8025672:	e7d5      	b.n	8025620 <_puts_r+0x24>
 8025674:	4621      	mov	r1, r4
 8025676:	4628      	mov	r0, r5
 8025678:	f000 f936 	bl	80258e8 <__swsetup_r>
 802567c:	2800      	cmp	r0, #0
 802567e:	d0dd      	beq.n	802563c <_puts_r+0x40>
 8025680:	f04f 35ff 	mov.w	r5, #4294967295
 8025684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025686:	07da      	lsls	r2, r3, #31
 8025688:	d405      	bmi.n	8025696 <_puts_r+0x9a>
 802568a:	89a3      	ldrh	r3, [r4, #12]
 802568c:	059b      	lsls	r3, r3, #22
 802568e:	d402      	bmi.n	8025696 <_puts_r+0x9a>
 8025690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025692:	f000 fb80 	bl	8025d96 <__retarget_lock_release_recursive>
 8025696:	4628      	mov	r0, r5
 8025698:	bd70      	pop	{r4, r5, r6, pc}
 802569a:	2b00      	cmp	r3, #0
 802569c:	da04      	bge.n	80256a8 <_puts_r+0xac>
 802569e:	69a2      	ldr	r2, [r4, #24]
 80256a0:	429a      	cmp	r2, r3
 80256a2:	dc06      	bgt.n	80256b2 <_puts_r+0xb6>
 80256a4:	290a      	cmp	r1, #10
 80256a6:	d004      	beq.n	80256b2 <_puts_r+0xb6>
 80256a8:	6823      	ldr	r3, [r4, #0]
 80256aa:	1c5a      	adds	r2, r3, #1
 80256ac:	6022      	str	r2, [r4, #0]
 80256ae:	7019      	strb	r1, [r3, #0]
 80256b0:	e7c5      	b.n	802563e <_puts_r+0x42>
 80256b2:	4622      	mov	r2, r4
 80256b4:	4628      	mov	r0, r5
 80256b6:	f000 f8c5 	bl	8025844 <__swbuf_r>
 80256ba:	3001      	adds	r0, #1
 80256bc:	d1bf      	bne.n	802563e <_puts_r+0x42>
 80256be:	e7df      	b.n	8025680 <_puts_r+0x84>
 80256c0:	6823      	ldr	r3, [r4, #0]
 80256c2:	250a      	movs	r5, #10
 80256c4:	1c5a      	adds	r2, r3, #1
 80256c6:	6022      	str	r2, [r4, #0]
 80256c8:	701d      	strb	r5, [r3, #0]
 80256ca:	e7db      	b.n	8025684 <_puts_r+0x88>
 80256cc:	08027484 	.word	0x08027484
 80256d0:	080274a4 	.word	0x080274a4
 80256d4:	08027464 	.word	0x08027464

080256d8 <puts>:
 80256d8:	4b02      	ldr	r3, [pc, #8]	; (80256e4 <puts+0xc>)
 80256da:	4601      	mov	r1, r0
 80256dc:	6818      	ldr	r0, [r3, #0]
 80256de:	f7ff bf8d 	b.w	80255fc <_puts_r>
 80256e2:	bf00      	nop
 80256e4:	20000024 	.word	0x20000024

080256e8 <siprintf>:
 80256e8:	b40e      	push	{r1, r2, r3}
 80256ea:	b500      	push	{lr}
 80256ec:	b09c      	sub	sp, #112	; 0x70
 80256ee:	ab1d      	add	r3, sp, #116	; 0x74
 80256f0:	9002      	str	r0, [sp, #8]
 80256f2:	9006      	str	r0, [sp, #24]
 80256f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80256f8:	4809      	ldr	r0, [pc, #36]	; (8025720 <siprintf+0x38>)
 80256fa:	9107      	str	r1, [sp, #28]
 80256fc:	9104      	str	r1, [sp, #16]
 80256fe:	4909      	ldr	r1, [pc, #36]	; (8025724 <siprintf+0x3c>)
 8025700:	f853 2b04 	ldr.w	r2, [r3], #4
 8025704:	9105      	str	r1, [sp, #20]
 8025706:	6800      	ldr	r0, [r0, #0]
 8025708:	9301      	str	r3, [sp, #4]
 802570a:	a902      	add	r1, sp, #8
 802570c:	f000 fcb6 	bl	802607c <_svfiprintf_r>
 8025710:	9b02      	ldr	r3, [sp, #8]
 8025712:	2200      	movs	r2, #0
 8025714:	701a      	strb	r2, [r3, #0]
 8025716:	b01c      	add	sp, #112	; 0x70
 8025718:	f85d eb04 	ldr.w	lr, [sp], #4
 802571c:	b003      	add	sp, #12
 802571e:	4770      	bx	lr
 8025720:	20000024 	.word	0x20000024
 8025724:	ffff0208 	.word	0xffff0208

08025728 <strcpy>:
 8025728:	4603      	mov	r3, r0
 802572a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802572e:	f803 2b01 	strb.w	r2, [r3], #1
 8025732:	2a00      	cmp	r2, #0
 8025734:	d1f9      	bne.n	802572a <strcpy+0x2>
 8025736:	4770      	bx	lr

08025738 <strncpy>:
 8025738:	b510      	push	{r4, lr}
 802573a:	3901      	subs	r1, #1
 802573c:	4603      	mov	r3, r0
 802573e:	b132      	cbz	r2, 802574e <strncpy+0x16>
 8025740:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025744:	f803 4b01 	strb.w	r4, [r3], #1
 8025748:	3a01      	subs	r2, #1
 802574a:	2c00      	cmp	r4, #0
 802574c:	d1f7      	bne.n	802573e <strncpy+0x6>
 802574e:	441a      	add	r2, r3
 8025750:	2100      	movs	r1, #0
 8025752:	4293      	cmp	r3, r2
 8025754:	d100      	bne.n	8025758 <strncpy+0x20>
 8025756:	bd10      	pop	{r4, pc}
 8025758:	f803 1b01 	strb.w	r1, [r3], #1
 802575c:	e7f9      	b.n	8025752 <strncpy+0x1a>

0802575e <strstr>:
 802575e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025760:	780c      	ldrb	r4, [r1, #0]
 8025762:	b164      	cbz	r4, 802577e <strstr+0x20>
 8025764:	4603      	mov	r3, r0
 8025766:	781a      	ldrb	r2, [r3, #0]
 8025768:	4618      	mov	r0, r3
 802576a:	1c5e      	adds	r6, r3, #1
 802576c:	b90a      	cbnz	r2, 8025772 <strstr+0x14>
 802576e:	4610      	mov	r0, r2
 8025770:	e005      	b.n	802577e <strstr+0x20>
 8025772:	4294      	cmp	r4, r2
 8025774:	d108      	bne.n	8025788 <strstr+0x2a>
 8025776:	460d      	mov	r5, r1
 8025778:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802577c:	b902      	cbnz	r2, 8025780 <strstr+0x22>
 802577e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025780:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8025784:	4297      	cmp	r7, r2
 8025786:	d0f7      	beq.n	8025778 <strstr+0x1a>
 8025788:	4633      	mov	r3, r6
 802578a:	e7ec      	b.n	8025766 <strstr+0x8>

0802578c <strtok>:
 802578c:	4b16      	ldr	r3, [pc, #88]	; (80257e8 <strtok+0x5c>)
 802578e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025790:	681e      	ldr	r6, [r3, #0]
 8025792:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8025794:	4605      	mov	r5, r0
 8025796:	b9fc      	cbnz	r4, 80257d8 <strtok+0x4c>
 8025798:	2050      	movs	r0, #80	; 0x50
 802579a:	9101      	str	r1, [sp, #4]
 802579c:	f000 fb60 	bl	8025e60 <malloc>
 80257a0:	9901      	ldr	r1, [sp, #4]
 80257a2:	65b0      	str	r0, [r6, #88]	; 0x58
 80257a4:	4602      	mov	r2, r0
 80257a6:	b920      	cbnz	r0, 80257b2 <strtok+0x26>
 80257a8:	4b10      	ldr	r3, [pc, #64]	; (80257ec <strtok+0x60>)
 80257aa:	4811      	ldr	r0, [pc, #68]	; (80257f0 <strtok+0x64>)
 80257ac:	2157      	movs	r1, #87	; 0x57
 80257ae:	f000 f909 	bl	80259c4 <__assert_func>
 80257b2:	e9c0 4400 	strd	r4, r4, [r0]
 80257b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80257ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80257be:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80257c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80257c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80257ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80257ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80257d2:	6184      	str	r4, [r0, #24]
 80257d4:	7704      	strb	r4, [r0, #28]
 80257d6:	6244      	str	r4, [r0, #36]	; 0x24
 80257d8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80257da:	2301      	movs	r3, #1
 80257dc:	4628      	mov	r0, r5
 80257de:	b002      	add	sp, #8
 80257e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80257e4:	f000 b806 	b.w	80257f4 <__strtok_r>
 80257e8:	20000024 	.word	0x20000024
 80257ec:	080273b0 	.word	0x080273b0
 80257f0:	080273c7 	.word	0x080273c7

080257f4 <__strtok_r>:
 80257f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80257f6:	b908      	cbnz	r0, 80257fc <__strtok_r+0x8>
 80257f8:	6810      	ldr	r0, [r2, #0]
 80257fa:	b188      	cbz	r0, 8025820 <__strtok_r+0x2c>
 80257fc:	4604      	mov	r4, r0
 80257fe:	4620      	mov	r0, r4
 8025800:	f814 5b01 	ldrb.w	r5, [r4], #1
 8025804:	460f      	mov	r7, r1
 8025806:	f817 6b01 	ldrb.w	r6, [r7], #1
 802580a:	b91e      	cbnz	r6, 8025814 <__strtok_r+0x20>
 802580c:	b965      	cbnz	r5, 8025828 <__strtok_r+0x34>
 802580e:	6015      	str	r5, [r2, #0]
 8025810:	4628      	mov	r0, r5
 8025812:	e005      	b.n	8025820 <__strtok_r+0x2c>
 8025814:	42b5      	cmp	r5, r6
 8025816:	d1f6      	bne.n	8025806 <__strtok_r+0x12>
 8025818:	2b00      	cmp	r3, #0
 802581a:	d1f0      	bne.n	80257fe <__strtok_r+0xa>
 802581c:	6014      	str	r4, [r2, #0]
 802581e:	7003      	strb	r3, [r0, #0]
 8025820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025822:	461c      	mov	r4, r3
 8025824:	e00c      	b.n	8025840 <__strtok_r+0x4c>
 8025826:	b915      	cbnz	r5, 802582e <__strtok_r+0x3a>
 8025828:	f814 3b01 	ldrb.w	r3, [r4], #1
 802582c:	460e      	mov	r6, r1
 802582e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8025832:	42ab      	cmp	r3, r5
 8025834:	d1f7      	bne.n	8025826 <__strtok_r+0x32>
 8025836:	2b00      	cmp	r3, #0
 8025838:	d0f3      	beq.n	8025822 <__strtok_r+0x2e>
 802583a:	2300      	movs	r3, #0
 802583c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8025840:	6014      	str	r4, [r2, #0]
 8025842:	e7ed      	b.n	8025820 <__strtok_r+0x2c>

08025844 <__swbuf_r>:
 8025844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025846:	460e      	mov	r6, r1
 8025848:	4614      	mov	r4, r2
 802584a:	4605      	mov	r5, r0
 802584c:	b118      	cbz	r0, 8025856 <__swbuf_r+0x12>
 802584e:	6983      	ldr	r3, [r0, #24]
 8025850:	b90b      	cbnz	r3, 8025856 <__swbuf_r+0x12>
 8025852:	f000 f9ef 	bl	8025c34 <__sinit>
 8025856:	4b21      	ldr	r3, [pc, #132]	; (80258dc <__swbuf_r+0x98>)
 8025858:	429c      	cmp	r4, r3
 802585a:	d12b      	bne.n	80258b4 <__swbuf_r+0x70>
 802585c:	686c      	ldr	r4, [r5, #4]
 802585e:	69a3      	ldr	r3, [r4, #24]
 8025860:	60a3      	str	r3, [r4, #8]
 8025862:	89a3      	ldrh	r3, [r4, #12]
 8025864:	071a      	lsls	r2, r3, #28
 8025866:	d52f      	bpl.n	80258c8 <__swbuf_r+0x84>
 8025868:	6923      	ldr	r3, [r4, #16]
 802586a:	b36b      	cbz	r3, 80258c8 <__swbuf_r+0x84>
 802586c:	6923      	ldr	r3, [r4, #16]
 802586e:	6820      	ldr	r0, [r4, #0]
 8025870:	1ac0      	subs	r0, r0, r3
 8025872:	6963      	ldr	r3, [r4, #20]
 8025874:	b2f6      	uxtb	r6, r6
 8025876:	4283      	cmp	r3, r0
 8025878:	4637      	mov	r7, r6
 802587a:	dc04      	bgt.n	8025886 <__swbuf_r+0x42>
 802587c:	4621      	mov	r1, r4
 802587e:	4628      	mov	r0, r5
 8025880:	f000 f944 	bl	8025b0c <_fflush_r>
 8025884:	bb30      	cbnz	r0, 80258d4 <__swbuf_r+0x90>
 8025886:	68a3      	ldr	r3, [r4, #8]
 8025888:	3b01      	subs	r3, #1
 802588a:	60a3      	str	r3, [r4, #8]
 802588c:	6823      	ldr	r3, [r4, #0]
 802588e:	1c5a      	adds	r2, r3, #1
 8025890:	6022      	str	r2, [r4, #0]
 8025892:	701e      	strb	r6, [r3, #0]
 8025894:	6963      	ldr	r3, [r4, #20]
 8025896:	3001      	adds	r0, #1
 8025898:	4283      	cmp	r3, r0
 802589a:	d004      	beq.n	80258a6 <__swbuf_r+0x62>
 802589c:	89a3      	ldrh	r3, [r4, #12]
 802589e:	07db      	lsls	r3, r3, #31
 80258a0:	d506      	bpl.n	80258b0 <__swbuf_r+0x6c>
 80258a2:	2e0a      	cmp	r6, #10
 80258a4:	d104      	bne.n	80258b0 <__swbuf_r+0x6c>
 80258a6:	4621      	mov	r1, r4
 80258a8:	4628      	mov	r0, r5
 80258aa:	f000 f92f 	bl	8025b0c <_fflush_r>
 80258ae:	b988      	cbnz	r0, 80258d4 <__swbuf_r+0x90>
 80258b0:	4638      	mov	r0, r7
 80258b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80258b4:	4b0a      	ldr	r3, [pc, #40]	; (80258e0 <__swbuf_r+0x9c>)
 80258b6:	429c      	cmp	r4, r3
 80258b8:	d101      	bne.n	80258be <__swbuf_r+0x7a>
 80258ba:	68ac      	ldr	r4, [r5, #8]
 80258bc:	e7cf      	b.n	802585e <__swbuf_r+0x1a>
 80258be:	4b09      	ldr	r3, [pc, #36]	; (80258e4 <__swbuf_r+0xa0>)
 80258c0:	429c      	cmp	r4, r3
 80258c2:	bf08      	it	eq
 80258c4:	68ec      	ldreq	r4, [r5, #12]
 80258c6:	e7ca      	b.n	802585e <__swbuf_r+0x1a>
 80258c8:	4621      	mov	r1, r4
 80258ca:	4628      	mov	r0, r5
 80258cc:	f000 f80c 	bl	80258e8 <__swsetup_r>
 80258d0:	2800      	cmp	r0, #0
 80258d2:	d0cb      	beq.n	802586c <__swbuf_r+0x28>
 80258d4:	f04f 37ff 	mov.w	r7, #4294967295
 80258d8:	e7ea      	b.n	80258b0 <__swbuf_r+0x6c>
 80258da:	bf00      	nop
 80258dc:	08027484 	.word	0x08027484
 80258e0:	080274a4 	.word	0x080274a4
 80258e4:	08027464 	.word	0x08027464

080258e8 <__swsetup_r>:
 80258e8:	4b32      	ldr	r3, [pc, #200]	; (80259b4 <__swsetup_r+0xcc>)
 80258ea:	b570      	push	{r4, r5, r6, lr}
 80258ec:	681d      	ldr	r5, [r3, #0]
 80258ee:	4606      	mov	r6, r0
 80258f0:	460c      	mov	r4, r1
 80258f2:	b125      	cbz	r5, 80258fe <__swsetup_r+0x16>
 80258f4:	69ab      	ldr	r3, [r5, #24]
 80258f6:	b913      	cbnz	r3, 80258fe <__swsetup_r+0x16>
 80258f8:	4628      	mov	r0, r5
 80258fa:	f000 f99b 	bl	8025c34 <__sinit>
 80258fe:	4b2e      	ldr	r3, [pc, #184]	; (80259b8 <__swsetup_r+0xd0>)
 8025900:	429c      	cmp	r4, r3
 8025902:	d10f      	bne.n	8025924 <__swsetup_r+0x3c>
 8025904:	686c      	ldr	r4, [r5, #4]
 8025906:	89a3      	ldrh	r3, [r4, #12]
 8025908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802590c:	0719      	lsls	r1, r3, #28
 802590e:	d42c      	bmi.n	802596a <__swsetup_r+0x82>
 8025910:	06dd      	lsls	r5, r3, #27
 8025912:	d411      	bmi.n	8025938 <__swsetup_r+0x50>
 8025914:	2309      	movs	r3, #9
 8025916:	6033      	str	r3, [r6, #0]
 8025918:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802591c:	81a3      	strh	r3, [r4, #12]
 802591e:	f04f 30ff 	mov.w	r0, #4294967295
 8025922:	e03e      	b.n	80259a2 <__swsetup_r+0xba>
 8025924:	4b25      	ldr	r3, [pc, #148]	; (80259bc <__swsetup_r+0xd4>)
 8025926:	429c      	cmp	r4, r3
 8025928:	d101      	bne.n	802592e <__swsetup_r+0x46>
 802592a:	68ac      	ldr	r4, [r5, #8]
 802592c:	e7eb      	b.n	8025906 <__swsetup_r+0x1e>
 802592e:	4b24      	ldr	r3, [pc, #144]	; (80259c0 <__swsetup_r+0xd8>)
 8025930:	429c      	cmp	r4, r3
 8025932:	bf08      	it	eq
 8025934:	68ec      	ldreq	r4, [r5, #12]
 8025936:	e7e6      	b.n	8025906 <__swsetup_r+0x1e>
 8025938:	0758      	lsls	r0, r3, #29
 802593a:	d512      	bpl.n	8025962 <__swsetup_r+0x7a>
 802593c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802593e:	b141      	cbz	r1, 8025952 <__swsetup_r+0x6a>
 8025940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025944:	4299      	cmp	r1, r3
 8025946:	d002      	beq.n	802594e <__swsetup_r+0x66>
 8025948:	4630      	mov	r0, r6
 802594a:	f000 fa91 	bl	8025e70 <_free_r>
 802594e:	2300      	movs	r3, #0
 8025950:	6363      	str	r3, [r4, #52]	; 0x34
 8025952:	89a3      	ldrh	r3, [r4, #12]
 8025954:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025958:	81a3      	strh	r3, [r4, #12]
 802595a:	2300      	movs	r3, #0
 802595c:	6063      	str	r3, [r4, #4]
 802595e:	6923      	ldr	r3, [r4, #16]
 8025960:	6023      	str	r3, [r4, #0]
 8025962:	89a3      	ldrh	r3, [r4, #12]
 8025964:	f043 0308 	orr.w	r3, r3, #8
 8025968:	81a3      	strh	r3, [r4, #12]
 802596a:	6923      	ldr	r3, [r4, #16]
 802596c:	b94b      	cbnz	r3, 8025982 <__swsetup_r+0x9a>
 802596e:	89a3      	ldrh	r3, [r4, #12]
 8025970:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025978:	d003      	beq.n	8025982 <__swsetup_r+0x9a>
 802597a:	4621      	mov	r1, r4
 802597c:	4630      	mov	r0, r6
 802597e:	f000 fa2f 	bl	8025de0 <__smakebuf_r>
 8025982:	89a0      	ldrh	r0, [r4, #12]
 8025984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025988:	f010 0301 	ands.w	r3, r0, #1
 802598c:	d00a      	beq.n	80259a4 <__swsetup_r+0xbc>
 802598e:	2300      	movs	r3, #0
 8025990:	60a3      	str	r3, [r4, #8]
 8025992:	6963      	ldr	r3, [r4, #20]
 8025994:	425b      	negs	r3, r3
 8025996:	61a3      	str	r3, [r4, #24]
 8025998:	6923      	ldr	r3, [r4, #16]
 802599a:	b943      	cbnz	r3, 80259ae <__swsetup_r+0xc6>
 802599c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80259a0:	d1ba      	bne.n	8025918 <__swsetup_r+0x30>
 80259a2:	bd70      	pop	{r4, r5, r6, pc}
 80259a4:	0781      	lsls	r1, r0, #30
 80259a6:	bf58      	it	pl
 80259a8:	6963      	ldrpl	r3, [r4, #20]
 80259aa:	60a3      	str	r3, [r4, #8]
 80259ac:	e7f4      	b.n	8025998 <__swsetup_r+0xb0>
 80259ae:	2000      	movs	r0, #0
 80259b0:	e7f7      	b.n	80259a2 <__swsetup_r+0xba>
 80259b2:	bf00      	nop
 80259b4:	20000024 	.word	0x20000024
 80259b8:	08027484 	.word	0x08027484
 80259bc:	080274a4 	.word	0x080274a4
 80259c0:	08027464 	.word	0x08027464

080259c4 <__assert_func>:
 80259c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80259c6:	4614      	mov	r4, r2
 80259c8:	461a      	mov	r2, r3
 80259ca:	4b09      	ldr	r3, [pc, #36]	; (80259f0 <__assert_func+0x2c>)
 80259cc:	681b      	ldr	r3, [r3, #0]
 80259ce:	4605      	mov	r5, r0
 80259d0:	68d8      	ldr	r0, [r3, #12]
 80259d2:	b14c      	cbz	r4, 80259e8 <__assert_func+0x24>
 80259d4:	4b07      	ldr	r3, [pc, #28]	; (80259f4 <__assert_func+0x30>)
 80259d6:	9100      	str	r1, [sp, #0]
 80259d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80259dc:	4906      	ldr	r1, [pc, #24]	; (80259f8 <__assert_func+0x34>)
 80259de:	462b      	mov	r3, r5
 80259e0:	f000 f9a6 	bl	8025d30 <fiprintf>
 80259e4:	f000 ff9e 	bl	8026924 <abort>
 80259e8:	4b04      	ldr	r3, [pc, #16]	; (80259fc <__assert_func+0x38>)
 80259ea:	461c      	mov	r4, r3
 80259ec:	e7f3      	b.n	80259d6 <__assert_func+0x12>
 80259ee:	bf00      	nop
 80259f0:	20000024 	.word	0x20000024
 80259f4:	08027428 	.word	0x08027428
 80259f8:	08027435 	.word	0x08027435
 80259fc:	08027237 	.word	0x08027237

08025a00 <__sflush_r>:
 8025a00:	898a      	ldrh	r2, [r1, #12]
 8025a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a06:	4605      	mov	r5, r0
 8025a08:	0710      	lsls	r0, r2, #28
 8025a0a:	460c      	mov	r4, r1
 8025a0c:	d458      	bmi.n	8025ac0 <__sflush_r+0xc0>
 8025a0e:	684b      	ldr	r3, [r1, #4]
 8025a10:	2b00      	cmp	r3, #0
 8025a12:	dc05      	bgt.n	8025a20 <__sflush_r+0x20>
 8025a14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025a16:	2b00      	cmp	r3, #0
 8025a18:	dc02      	bgt.n	8025a20 <__sflush_r+0x20>
 8025a1a:	2000      	movs	r0, #0
 8025a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025a22:	2e00      	cmp	r6, #0
 8025a24:	d0f9      	beq.n	8025a1a <__sflush_r+0x1a>
 8025a26:	2300      	movs	r3, #0
 8025a28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025a2c:	682f      	ldr	r7, [r5, #0]
 8025a2e:	602b      	str	r3, [r5, #0]
 8025a30:	d032      	beq.n	8025a98 <__sflush_r+0x98>
 8025a32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025a34:	89a3      	ldrh	r3, [r4, #12]
 8025a36:	075a      	lsls	r2, r3, #29
 8025a38:	d505      	bpl.n	8025a46 <__sflush_r+0x46>
 8025a3a:	6863      	ldr	r3, [r4, #4]
 8025a3c:	1ac0      	subs	r0, r0, r3
 8025a3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025a40:	b10b      	cbz	r3, 8025a46 <__sflush_r+0x46>
 8025a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025a44:	1ac0      	subs	r0, r0, r3
 8025a46:	2300      	movs	r3, #0
 8025a48:	4602      	mov	r2, r0
 8025a4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025a4c:	6a21      	ldr	r1, [r4, #32]
 8025a4e:	4628      	mov	r0, r5
 8025a50:	47b0      	blx	r6
 8025a52:	1c43      	adds	r3, r0, #1
 8025a54:	89a3      	ldrh	r3, [r4, #12]
 8025a56:	d106      	bne.n	8025a66 <__sflush_r+0x66>
 8025a58:	6829      	ldr	r1, [r5, #0]
 8025a5a:	291d      	cmp	r1, #29
 8025a5c:	d82c      	bhi.n	8025ab8 <__sflush_r+0xb8>
 8025a5e:	4a2a      	ldr	r2, [pc, #168]	; (8025b08 <__sflush_r+0x108>)
 8025a60:	40ca      	lsrs	r2, r1
 8025a62:	07d6      	lsls	r6, r2, #31
 8025a64:	d528      	bpl.n	8025ab8 <__sflush_r+0xb8>
 8025a66:	2200      	movs	r2, #0
 8025a68:	6062      	str	r2, [r4, #4]
 8025a6a:	04d9      	lsls	r1, r3, #19
 8025a6c:	6922      	ldr	r2, [r4, #16]
 8025a6e:	6022      	str	r2, [r4, #0]
 8025a70:	d504      	bpl.n	8025a7c <__sflush_r+0x7c>
 8025a72:	1c42      	adds	r2, r0, #1
 8025a74:	d101      	bne.n	8025a7a <__sflush_r+0x7a>
 8025a76:	682b      	ldr	r3, [r5, #0]
 8025a78:	b903      	cbnz	r3, 8025a7c <__sflush_r+0x7c>
 8025a7a:	6560      	str	r0, [r4, #84]	; 0x54
 8025a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025a7e:	602f      	str	r7, [r5, #0]
 8025a80:	2900      	cmp	r1, #0
 8025a82:	d0ca      	beq.n	8025a1a <__sflush_r+0x1a>
 8025a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025a88:	4299      	cmp	r1, r3
 8025a8a:	d002      	beq.n	8025a92 <__sflush_r+0x92>
 8025a8c:	4628      	mov	r0, r5
 8025a8e:	f000 f9ef 	bl	8025e70 <_free_r>
 8025a92:	2000      	movs	r0, #0
 8025a94:	6360      	str	r0, [r4, #52]	; 0x34
 8025a96:	e7c1      	b.n	8025a1c <__sflush_r+0x1c>
 8025a98:	6a21      	ldr	r1, [r4, #32]
 8025a9a:	2301      	movs	r3, #1
 8025a9c:	4628      	mov	r0, r5
 8025a9e:	47b0      	blx	r6
 8025aa0:	1c41      	adds	r1, r0, #1
 8025aa2:	d1c7      	bne.n	8025a34 <__sflush_r+0x34>
 8025aa4:	682b      	ldr	r3, [r5, #0]
 8025aa6:	2b00      	cmp	r3, #0
 8025aa8:	d0c4      	beq.n	8025a34 <__sflush_r+0x34>
 8025aaa:	2b1d      	cmp	r3, #29
 8025aac:	d001      	beq.n	8025ab2 <__sflush_r+0xb2>
 8025aae:	2b16      	cmp	r3, #22
 8025ab0:	d101      	bne.n	8025ab6 <__sflush_r+0xb6>
 8025ab2:	602f      	str	r7, [r5, #0]
 8025ab4:	e7b1      	b.n	8025a1a <__sflush_r+0x1a>
 8025ab6:	89a3      	ldrh	r3, [r4, #12]
 8025ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025abc:	81a3      	strh	r3, [r4, #12]
 8025abe:	e7ad      	b.n	8025a1c <__sflush_r+0x1c>
 8025ac0:	690f      	ldr	r7, [r1, #16]
 8025ac2:	2f00      	cmp	r7, #0
 8025ac4:	d0a9      	beq.n	8025a1a <__sflush_r+0x1a>
 8025ac6:	0793      	lsls	r3, r2, #30
 8025ac8:	680e      	ldr	r6, [r1, #0]
 8025aca:	bf08      	it	eq
 8025acc:	694b      	ldreq	r3, [r1, #20]
 8025ace:	600f      	str	r7, [r1, #0]
 8025ad0:	bf18      	it	ne
 8025ad2:	2300      	movne	r3, #0
 8025ad4:	eba6 0807 	sub.w	r8, r6, r7
 8025ad8:	608b      	str	r3, [r1, #8]
 8025ada:	f1b8 0f00 	cmp.w	r8, #0
 8025ade:	dd9c      	ble.n	8025a1a <__sflush_r+0x1a>
 8025ae0:	6a21      	ldr	r1, [r4, #32]
 8025ae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025ae4:	4643      	mov	r3, r8
 8025ae6:	463a      	mov	r2, r7
 8025ae8:	4628      	mov	r0, r5
 8025aea:	47b0      	blx	r6
 8025aec:	2800      	cmp	r0, #0
 8025aee:	dc06      	bgt.n	8025afe <__sflush_r+0xfe>
 8025af0:	89a3      	ldrh	r3, [r4, #12]
 8025af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025af6:	81a3      	strh	r3, [r4, #12]
 8025af8:	f04f 30ff 	mov.w	r0, #4294967295
 8025afc:	e78e      	b.n	8025a1c <__sflush_r+0x1c>
 8025afe:	4407      	add	r7, r0
 8025b00:	eba8 0800 	sub.w	r8, r8, r0
 8025b04:	e7e9      	b.n	8025ada <__sflush_r+0xda>
 8025b06:	bf00      	nop
 8025b08:	20400001 	.word	0x20400001

08025b0c <_fflush_r>:
 8025b0c:	b538      	push	{r3, r4, r5, lr}
 8025b0e:	690b      	ldr	r3, [r1, #16]
 8025b10:	4605      	mov	r5, r0
 8025b12:	460c      	mov	r4, r1
 8025b14:	b913      	cbnz	r3, 8025b1c <_fflush_r+0x10>
 8025b16:	2500      	movs	r5, #0
 8025b18:	4628      	mov	r0, r5
 8025b1a:	bd38      	pop	{r3, r4, r5, pc}
 8025b1c:	b118      	cbz	r0, 8025b26 <_fflush_r+0x1a>
 8025b1e:	6983      	ldr	r3, [r0, #24]
 8025b20:	b90b      	cbnz	r3, 8025b26 <_fflush_r+0x1a>
 8025b22:	f000 f887 	bl	8025c34 <__sinit>
 8025b26:	4b14      	ldr	r3, [pc, #80]	; (8025b78 <_fflush_r+0x6c>)
 8025b28:	429c      	cmp	r4, r3
 8025b2a:	d11b      	bne.n	8025b64 <_fflush_r+0x58>
 8025b2c:	686c      	ldr	r4, [r5, #4]
 8025b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b32:	2b00      	cmp	r3, #0
 8025b34:	d0ef      	beq.n	8025b16 <_fflush_r+0xa>
 8025b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025b38:	07d0      	lsls	r0, r2, #31
 8025b3a:	d404      	bmi.n	8025b46 <_fflush_r+0x3a>
 8025b3c:	0599      	lsls	r1, r3, #22
 8025b3e:	d402      	bmi.n	8025b46 <_fflush_r+0x3a>
 8025b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025b42:	f000 f927 	bl	8025d94 <__retarget_lock_acquire_recursive>
 8025b46:	4628      	mov	r0, r5
 8025b48:	4621      	mov	r1, r4
 8025b4a:	f7ff ff59 	bl	8025a00 <__sflush_r>
 8025b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025b50:	07da      	lsls	r2, r3, #31
 8025b52:	4605      	mov	r5, r0
 8025b54:	d4e0      	bmi.n	8025b18 <_fflush_r+0xc>
 8025b56:	89a3      	ldrh	r3, [r4, #12]
 8025b58:	059b      	lsls	r3, r3, #22
 8025b5a:	d4dd      	bmi.n	8025b18 <_fflush_r+0xc>
 8025b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025b5e:	f000 f91a 	bl	8025d96 <__retarget_lock_release_recursive>
 8025b62:	e7d9      	b.n	8025b18 <_fflush_r+0xc>
 8025b64:	4b05      	ldr	r3, [pc, #20]	; (8025b7c <_fflush_r+0x70>)
 8025b66:	429c      	cmp	r4, r3
 8025b68:	d101      	bne.n	8025b6e <_fflush_r+0x62>
 8025b6a:	68ac      	ldr	r4, [r5, #8]
 8025b6c:	e7df      	b.n	8025b2e <_fflush_r+0x22>
 8025b6e:	4b04      	ldr	r3, [pc, #16]	; (8025b80 <_fflush_r+0x74>)
 8025b70:	429c      	cmp	r4, r3
 8025b72:	bf08      	it	eq
 8025b74:	68ec      	ldreq	r4, [r5, #12]
 8025b76:	e7da      	b.n	8025b2e <_fflush_r+0x22>
 8025b78:	08027484 	.word	0x08027484
 8025b7c:	080274a4 	.word	0x080274a4
 8025b80:	08027464 	.word	0x08027464

08025b84 <std>:
 8025b84:	2300      	movs	r3, #0
 8025b86:	b510      	push	{r4, lr}
 8025b88:	4604      	mov	r4, r0
 8025b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8025b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025b92:	6083      	str	r3, [r0, #8]
 8025b94:	8181      	strh	r1, [r0, #12]
 8025b96:	6643      	str	r3, [r0, #100]	; 0x64
 8025b98:	81c2      	strh	r2, [r0, #14]
 8025b9a:	6183      	str	r3, [r0, #24]
 8025b9c:	4619      	mov	r1, r3
 8025b9e:	2208      	movs	r2, #8
 8025ba0:	305c      	adds	r0, #92	; 0x5c
 8025ba2:	f7ff fd0b 	bl	80255bc <memset>
 8025ba6:	4b05      	ldr	r3, [pc, #20]	; (8025bbc <std+0x38>)
 8025ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8025baa:	4b05      	ldr	r3, [pc, #20]	; (8025bc0 <std+0x3c>)
 8025bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8025bae:	4b05      	ldr	r3, [pc, #20]	; (8025bc4 <std+0x40>)
 8025bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025bb2:	4b05      	ldr	r3, [pc, #20]	; (8025bc8 <std+0x44>)
 8025bb4:	6224      	str	r4, [r4, #32]
 8025bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8025bb8:	bd10      	pop	{r4, pc}
 8025bba:	bf00      	nop
 8025bbc:	08026879 	.word	0x08026879
 8025bc0:	0802689b 	.word	0x0802689b
 8025bc4:	080268d3 	.word	0x080268d3
 8025bc8:	080268f7 	.word	0x080268f7

08025bcc <_cleanup_r>:
 8025bcc:	4901      	ldr	r1, [pc, #4]	; (8025bd4 <_cleanup_r+0x8>)
 8025bce:	f000 b8c1 	b.w	8025d54 <_fwalk_reent>
 8025bd2:	bf00      	nop
 8025bd4:	08025b0d 	.word	0x08025b0d

08025bd8 <__sfmoreglue>:
 8025bd8:	b570      	push	{r4, r5, r6, lr}
 8025bda:	1e4a      	subs	r2, r1, #1
 8025bdc:	2568      	movs	r5, #104	; 0x68
 8025bde:	4355      	muls	r5, r2
 8025be0:	460e      	mov	r6, r1
 8025be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025be6:	f000 f993 	bl	8025f10 <_malloc_r>
 8025bea:	4604      	mov	r4, r0
 8025bec:	b140      	cbz	r0, 8025c00 <__sfmoreglue+0x28>
 8025bee:	2100      	movs	r1, #0
 8025bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8025bf4:	300c      	adds	r0, #12
 8025bf6:	60a0      	str	r0, [r4, #8]
 8025bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025bfc:	f7ff fcde 	bl	80255bc <memset>
 8025c00:	4620      	mov	r0, r4
 8025c02:	bd70      	pop	{r4, r5, r6, pc}

08025c04 <__sfp_lock_acquire>:
 8025c04:	4801      	ldr	r0, [pc, #4]	; (8025c0c <__sfp_lock_acquire+0x8>)
 8025c06:	f000 b8c5 	b.w	8025d94 <__retarget_lock_acquire_recursive>
 8025c0a:	bf00      	nop
 8025c0c:	20000bfc 	.word	0x20000bfc

08025c10 <__sfp_lock_release>:
 8025c10:	4801      	ldr	r0, [pc, #4]	; (8025c18 <__sfp_lock_release+0x8>)
 8025c12:	f000 b8c0 	b.w	8025d96 <__retarget_lock_release_recursive>
 8025c16:	bf00      	nop
 8025c18:	20000bfc 	.word	0x20000bfc

08025c1c <__sinit_lock_acquire>:
 8025c1c:	4801      	ldr	r0, [pc, #4]	; (8025c24 <__sinit_lock_acquire+0x8>)
 8025c1e:	f000 b8b9 	b.w	8025d94 <__retarget_lock_acquire_recursive>
 8025c22:	bf00      	nop
 8025c24:	20000bf7 	.word	0x20000bf7

08025c28 <__sinit_lock_release>:
 8025c28:	4801      	ldr	r0, [pc, #4]	; (8025c30 <__sinit_lock_release+0x8>)
 8025c2a:	f000 b8b4 	b.w	8025d96 <__retarget_lock_release_recursive>
 8025c2e:	bf00      	nop
 8025c30:	20000bf7 	.word	0x20000bf7

08025c34 <__sinit>:
 8025c34:	b510      	push	{r4, lr}
 8025c36:	4604      	mov	r4, r0
 8025c38:	f7ff fff0 	bl	8025c1c <__sinit_lock_acquire>
 8025c3c:	69a3      	ldr	r3, [r4, #24]
 8025c3e:	b11b      	cbz	r3, 8025c48 <__sinit+0x14>
 8025c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025c44:	f7ff bff0 	b.w	8025c28 <__sinit_lock_release>
 8025c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8025c4e:	4b13      	ldr	r3, [pc, #76]	; (8025c9c <__sinit+0x68>)
 8025c50:	4a13      	ldr	r2, [pc, #76]	; (8025ca0 <__sinit+0x6c>)
 8025c52:	681b      	ldr	r3, [r3, #0]
 8025c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8025c56:	42a3      	cmp	r3, r4
 8025c58:	bf04      	itt	eq
 8025c5a:	2301      	moveq	r3, #1
 8025c5c:	61a3      	streq	r3, [r4, #24]
 8025c5e:	4620      	mov	r0, r4
 8025c60:	f000 f820 	bl	8025ca4 <__sfp>
 8025c64:	6060      	str	r0, [r4, #4]
 8025c66:	4620      	mov	r0, r4
 8025c68:	f000 f81c 	bl	8025ca4 <__sfp>
 8025c6c:	60a0      	str	r0, [r4, #8]
 8025c6e:	4620      	mov	r0, r4
 8025c70:	f000 f818 	bl	8025ca4 <__sfp>
 8025c74:	2200      	movs	r2, #0
 8025c76:	60e0      	str	r0, [r4, #12]
 8025c78:	2104      	movs	r1, #4
 8025c7a:	6860      	ldr	r0, [r4, #4]
 8025c7c:	f7ff ff82 	bl	8025b84 <std>
 8025c80:	68a0      	ldr	r0, [r4, #8]
 8025c82:	2201      	movs	r2, #1
 8025c84:	2109      	movs	r1, #9
 8025c86:	f7ff ff7d 	bl	8025b84 <std>
 8025c8a:	68e0      	ldr	r0, [r4, #12]
 8025c8c:	2202      	movs	r2, #2
 8025c8e:	2112      	movs	r1, #18
 8025c90:	f7ff ff78 	bl	8025b84 <std>
 8025c94:	2301      	movs	r3, #1
 8025c96:	61a3      	str	r3, [r4, #24]
 8025c98:	e7d2      	b.n	8025c40 <__sinit+0xc>
 8025c9a:	bf00      	nop
 8025c9c:	080273ac 	.word	0x080273ac
 8025ca0:	08025bcd 	.word	0x08025bcd

08025ca4 <__sfp>:
 8025ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ca6:	4607      	mov	r7, r0
 8025ca8:	f7ff ffac 	bl	8025c04 <__sfp_lock_acquire>
 8025cac:	4b1e      	ldr	r3, [pc, #120]	; (8025d28 <__sfp+0x84>)
 8025cae:	681e      	ldr	r6, [r3, #0]
 8025cb0:	69b3      	ldr	r3, [r6, #24]
 8025cb2:	b913      	cbnz	r3, 8025cba <__sfp+0x16>
 8025cb4:	4630      	mov	r0, r6
 8025cb6:	f7ff ffbd 	bl	8025c34 <__sinit>
 8025cba:	3648      	adds	r6, #72	; 0x48
 8025cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025cc0:	3b01      	subs	r3, #1
 8025cc2:	d503      	bpl.n	8025ccc <__sfp+0x28>
 8025cc4:	6833      	ldr	r3, [r6, #0]
 8025cc6:	b30b      	cbz	r3, 8025d0c <__sfp+0x68>
 8025cc8:	6836      	ldr	r6, [r6, #0]
 8025cca:	e7f7      	b.n	8025cbc <__sfp+0x18>
 8025ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025cd0:	b9d5      	cbnz	r5, 8025d08 <__sfp+0x64>
 8025cd2:	4b16      	ldr	r3, [pc, #88]	; (8025d2c <__sfp+0x88>)
 8025cd4:	60e3      	str	r3, [r4, #12]
 8025cd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025cda:	6665      	str	r5, [r4, #100]	; 0x64
 8025cdc:	f000 f859 	bl	8025d92 <__retarget_lock_init_recursive>
 8025ce0:	f7ff ff96 	bl	8025c10 <__sfp_lock_release>
 8025ce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025ce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025cec:	6025      	str	r5, [r4, #0]
 8025cee:	61a5      	str	r5, [r4, #24]
 8025cf0:	2208      	movs	r2, #8
 8025cf2:	4629      	mov	r1, r5
 8025cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025cf8:	f7ff fc60 	bl	80255bc <memset>
 8025cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025d04:	4620      	mov	r0, r4
 8025d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d08:	3468      	adds	r4, #104	; 0x68
 8025d0a:	e7d9      	b.n	8025cc0 <__sfp+0x1c>
 8025d0c:	2104      	movs	r1, #4
 8025d0e:	4638      	mov	r0, r7
 8025d10:	f7ff ff62 	bl	8025bd8 <__sfmoreglue>
 8025d14:	4604      	mov	r4, r0
 8025d16:	6030      	str	r0, [r6, #0]
 8025d18:	2800      	cmp	r0, #0
 8025d1a:	d1d5      	bne.n	8025cc8 <__sfp+0x24>
 8025d1c:	f7ff ff78 	bl	8025c10 <__sfp_lock_release>
 8025d20:	230c      	movs	r3, #12
 8025d22:	603b      	str	r3, [r7, #0]
 8025d24:	e7ee      	b.n	8025d04 <__sfp+0x60>
 8025d26:	bf00      	nop
 8025d28:	080273ac 	.word	0x080273ac
 8025d2c:	ffff0001 	.word	0xffff0001

08025d30 <fiprintf>:
 8025d30:	b40e      	push	{r1, r2, r3}
 8025d32:	b503      	push	{r0, r1, lr}
 8025d34:	4601      	mov	r1, r0
 8025d36:	ab03      	add	r3, sp, #12
 8025d38:	4805      	ldr	r0, [pc, #20]	; (8025d50 <fiprintf+0x20>)
 8025d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8025d3e:	6800      	ldr	r0, [r0, #0]
 8025d40:	9301      	str	r3, [sp, #4]
 8025d42:	f000 fac5 	bl	80262d0 <_vfiprintf_r>
 8025d46:	b002      	add	sp, #8
 8025d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8025d4c:	b003      	add	sp, #12
 8025d4e:	4770      	bx	lr
 8025d50:	20000024 	.word	0x20000024

08025d54 <_fwalk_reent>:
 8025d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025d58:	4606      	mov	r6, r0
 8025d5a:	4688      	mov	r8, r1
 8025d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025d60:	2700      	movs	r7, #0
 8025d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025d66:	f1b9 0901 	subs.w	r9, r9, #1
 8025d6a:	d505      	bpl.n	8025d78 <_fwalk_reent+0x24>
 8025d6c:	6824      	ldr	r4, [r4, #0]
 8025d6e:	2c00      	cmp	r4, #0
 8025d70:	d1f7      	bne.n	8025d62 <_fwalk_reent+0xe>
 8025d72:	4638      	mov	r0, r7
 8025d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d78:	89ab      	ldrh	r3, [r5, #12]
 8025d7a:	2b01      	cmp	r3, #1
 8025d7c:	d907      	bls.n	8025d8e <_fwalk_reent+0x3a>
 8025d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025d82:	3301      	adds	r3, #1
 8025d84:	d003      	beq.n	8025d8e <_fwalk_reent+0x3a>
 8025d86:	4629      	mov	r1, r5
 8025d88:	4630      	mov	r0, r6
 8025d8a:	47c0      	blx	r8
 8025d8c:	4307      	orrs	r7, r0
 8025d8e:	3568      	adds	r5, #104	; 0x68
 8025d90:	e7e9      	b.n	8025d66 <_fwalk_reent+0x12>

08025d92 <__retarget_lock_init_recursive>:
 8025d92:	4770      	bx	lr

08025d94 <__retarget_lock_acquire_recursive>:
 8025d94:	4770      	bx	lr

08025d96 <__retarget_lock_release_recursive>:
 8025d96:	4770      	bx	lr

08025d98 <__swhatbuf_r>:
 8025d98:	b570      	push	{r4, r5, r6, lr}
 8025d9a:	460e      	mov	r6, r1
 8025d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025da0:	2900      	cmp	r1, #0
 8025da2:	b096      	sub	sp, #88	; 0x58
 8025da4:	4614      	mov	r4, r2
 8025da6:	461d      	mov	r5, r3
 8025da8:	da07      	bge.n	8025dba <__swhatbuf_r+0x22>
 8025daa:	2300      	movs	r3, #0
 8025dac:	602b      	str	r3, [r5, #0]
 8025dae:	89b3      	ldrh	r3, [r6, #12]
 8025db0:	061a      	lsls	r2, r3, #24
 8025db2:	d410      	bmi.n	8025dd6 <__swhatbuf_r+0x3e>
 8025db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025db8:	e00e      	b.n	8025dd8 <__swhatbuf_r+0x40>
 8025dba:	466a      	mov	r2, sp
 8025dbc:	f000 fdca 	bl	8026954 <_fstat_r>
 8025dc0:	2800      	cmp	r0, #0
 8025dc2:	dbf2      	blt.n	8025daa <__swhatbuf_r+0x12>
 8025dc4:	9a01      	ldr	r2, [sp, #4]
 8025dc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025dca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025dce:	425a      	negs	r2, r3
 8025dd0:	415a      	adcs	r2, r3
 8025dd2:	602a      	str	r2, [r5, #0]
 8025dd4:	e7ee      	b.n	8025db4 <__swhatbuf_r+0x1c>
 8025dd6:	2340      	movs	r3, #64	; 0x40
 8025dd8:	2000      	movs	r0, #0
 8025dda:	6023      	str	r3, [r4, #0]
 8025ddc:	b016      	add	sp, #88	; 0x58
 8025dde:	bd70      	pop	{r4, r5, r6, pc}

08025de0 <__smakebuf_r>:
 8025de0:	898b      	ldrh	r3, [r1, #12]
 8025de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025de4:	079d      	lsls	r5, r3, #30
 8025de6:	4606      	mov	r6, r0
 8025de8:	460c      	mov	r4, r1
 8025dea:	d507      	bpl.n	8025dfc <__smakebuf_r+0x1c>
 8025dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025df0:	6023      	str	r3, [r4, #0]
 8025df2:	6123      	str	r3, [r4, #16]
 8025df4:	2301      	movs	r3, #1
 8025df6:	6163      	str	r3, [r4, #20]
 8025df8:	b002      	add	sp, #8
 8025dfa:	bd70      	pop	{r4, r5, r6, pc}
 8025dfc:	ab01      	add	r3, sp, #4
 8025dfe:	466a      	mov	r2, sp
 8025e00:	f7ff ffca 	bl	8025d98 <__swhatbuf_r>
 8025e04:	9900      	ldr	r1, [sp, #0]
 8025e06:	4605      	mov	r5, r0
 8025e08:	4630      	mov	r0, r6
 8025e0a:	f000 f881 	bl	8025f10 <_malloc_r>
 8025e0e:	b948      	cbnz	r0, 8025e24 <__smakebuf_r+0x44>
 8025e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025e14:	059a      	lsls	r2, r3, #22
 8025e16:	d4ef      	bmi.n	8025df8 <__smakebuf_r+0x18>
 8025e18:	f023 0303 	bic.w	r3, r3, #3
 8025e1c:	f043 0302 	orr.w	r3, r3, #2
 8025e20:	81a3      	strh	r3, [r4, #12]
 8025e22:	e7e3      	b.n	8025dec <__smakebuf_r+0xc>
 8025e24:	4b0d      	ldr	r3, [pc, #52]	; (8025e5c <__smakebuf_r+0x7c>)
 8025e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8025e28:	89a3      	ldrh	r3, [r4, #12]
 8025e2a:	6020      	str	r0, [r4, #0]
 8025e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025e30:	81a3      	strh	r3, [r4, #12]
 8025e32:	9b00      	ldr	r3, [sp, #0]
 8025e34:	6163      	str	r3, [r4, #20]
 8025e36:	9b01      	ldr	r3, [sp, #4]
 8025e38:	6120      	str	r0, [r4, #16]
 8025e3a:	b15b      	cbz	r3, 8025e54 <__smakebuf_r+0x74>
 8025e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025e40:	4630      	mov	r0, r6
 8025e42:	f000 fd99 	bl	8026978 <_isatty_r>
 8025e46:	b128      	cbz	r0, 8025e54 <__smakebuf_r+0x74>
 8025e48:	89a3      	ldrh	r3, [r4, #12]
 8025e4a:	f023 0303 	bic.w	r3, r3, #3
 8025e4e:	f043 0301 	orr.w	r3, r3, #1
 8025e52:	81a3      	strh	r3, [r4, #12]
 8025e54:	89a0      	ldrh	r0, [r4, #12]
 8025e56:	4305      	orrs	r5, r0
 8025e58:	81a5      	strh	r5, [r4, #12]
 8025e5a:	e7cd      	b.n	8025df8 <__smakebuf_r+0x18>
 8025e5c:	08025bcd 	.word	0x08025bcd

08025e60 <malloc>:
 8025e60:	4b02      	ldr	r3, [pc, #8]	; (8025e6c <malloc+0xc>)
 8025e62:	4601      	mov	r1, r0
 8025e64:	6818      	ldr	r0, [r3, #0]
 8025e66:	f000 b853 	b.w	8025f10 <_malloc_r>
 8025e6a:	bf00      	nop
 8025e6c:	20000024 	.word	0x20000024

08025e70 <_free_r>:
 8025e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025e72:	2900      	cmp	r1, #0
 8025e74:	d048      	beq.n	8025f08 <_free_r+0x98>
 8025e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025e7a:	9001      	str	r0, [sp, #4]
 8025e7c:	2b00      	cmp	r3, #0
 8025e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8025e82:	bfb8      	it	lt
 8025e84:	18e4      	addlt	r4, r4, r3
 8025e86:	f000 fdb3 	bl	80269f0 <__malloc_lock>
 8025e8a:	4a20      	ldr	r2, [pc, #128]	; (8025f0c <_free_r+0x9c>)
 8025e8c:	9801      	ldr	r0, [sp, #4]
 8025e8e:	6813      	ldr	r3, [r2, #0]
 8025e90:	4615      	mov	r5, r2
 8025e92:	b933      	cbnz	r3, 8025ea2 <_free_r+0x32>
 8025e94:	6063      	str	r3, [r4, #4]
 8025e96:	6014      	str	r4, [r2, #0]
 8025e98:	b003      	add	sp, #12
 8025e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025e9e:	f000 bdad 	b.w	80269fc <__malloc_unlock>
 8025ea2:	42a3      	cmp	r3, r4
 8025ea4:	d90b      	bls.n	8025ebe <_free_r+0x4e>
 8025ea6:	6821      	ldr	r1, [r4, #0]
 8025ea8:	1862      	adds	r2, r4, r1
 8025eaa:	4293      	cmp	r3, r2
 8025eac:	bf04      	itt	eq
 8025eae:	681a      	ldreq	r2, [r3, #0]
 8025eb0:	685b      	ldreq	r3, [r3, #4]
 8025eb2:	6063      	str	r3, [r4, #4]
 8025eb4:	bf04      	itt	eq
 8025eb6:	1852      	addeq	r2, r2, r1
 8025eb8:	6022      	streq	r2, [r4, #0]
 8025eba:	602c      	str	r4, [r5, #0]
 8025ebc:	e7ec      	b.n	8025e98 <_free_r+0x28>
 8025ebe:	461a      	mov	r2, r3
 8025ec0:	685b      	ldr	r3, [r3, #4]
 8025ec2:	b10b      	cbz	r3, 8025ec8 <_free_r+0x58>
 8025ec4:	42a3      	cmp	r3, r4
 8025ec6:	d9fa      	bls.n	8025ebe <_free_r+0x4e>
 8025ec8:	6811      	ldr	r1, [r2, #0]
 8025eca:	1855      	adds	r5, r2, r1
 8025ecc:	42a5      	cmp	r5, r4
 8025ece:	d10b      	bne.n	8025ee8 <_free_r+0x78>
 8025ed0:	6824      	ldr	r4, [r4, #0]
 8025ed2:	4421      	add	r1, r4
 8025ed4:	1854      	adds	r4, r2, r1
 8025ed6:	42a3      	cmp	r3, r4
 8025ed8:	6011      	str	r1, [r2, #0]
 8025eda:	d1dd      	bne.n	8025e98 <_free_r+0x28>
 8025edc:	681c      	ldr	r4, [r3, #0]
 8025ede:	685b      	ldr	r3, [r3, #4]
 8025ee0:	6053      	str	r3, [r2, #4]
 8025ee2:	4421      	add	r1, r4
 8025ee4:	6011      	str	r1, [r2, #0]
 8025ee6:	e7d7      	b.n	8025e98 <_free_r+0x28>
 8025ee8:	d902      	bls.n	8025ef0 <_free_r+0x80>
 8025eea:	230c      	movs	r3, #12
 8025eec:	6003      	str	r3, [r0, #0]
 8025eee:	e7d3      	b.n	8025e98 <_free_r+0x28>
 8025ef0:	6825      	ldr	r5, [r4, #0]
 8025ef2:	1961      	adds	r1, r4, r5
 8025ef4:	428b      	cmp	r3, r1
 8025ef6:	bf04      	itt	eq
 8025ef8:	6819      	ldreq	r1, [r3, #0]
 8025efa:	685b      	ldreq	r3, [r3, #4]
 8025efc:	6063      	str	r3, [r4, #4]
 8025efe:	bf04      	itt	eq
 8025f00:	1949      	addeq	r1, r1, r5
 8025f02:	6021      	streq	r1, [r4, #0]
 8025f04:	6054      	str	r4, [r2, #4]
 8025f06:	e7c7      	b.n	8025e98 <_free_r+0x28>
 8025f08:	b003      	add	sp, #12
 8025f0a:	bd30      	pop	{r4, r5, pc}
 8025f0c:	200000bc 	.word	0x200000bc

08025f10 <_malloc_r>:
 8025f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f12:	1ccd      	adds	r5, r1, #3
 8025f14:	f025 0503 	bic.w	r5, r5, #3
 8025f18:	3508      	adds	r5, #8
 8025f1a:	2d0c      	cmp	r5, #12
 8025f1c:	bf38      	it	cc
 8025f1e:	250c      	movcc	r5, #12
 8025f20:	2d00      	cmp	r5, #0
 8025f22:	4606      	mov	r6, r0
 8025f24:	db01      	blt.n	8025f2a <_malloc_r+0x1a>
 8025f26:	42a9      	cmp	r1, r5
 8025f28:	d903      	bls.n	8025f32 <_malloc_r+0x22>
 8025f2a:	230c      	movs	r3, #12
 8025f2c:	6033      	str	r3, [r6, #0]
 8025f2e:	2000      	movs	r0, #0
 8025f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025f32:	f000 fd5d 	bl	80269f0 <__malloc_lock>
 8025f36:	4921      	ldr	r1, [pc, #132]	; (8025fbc <_malloc_r+0xac>)
 8025f38:	680a      	ldr	r2, [r1, #0]
 8025f3a:	4614      	mov	r4, r2
 8025f3c:	b99c      	cbnz	r4, 8025f66 <_malloc_r+0x56>
 8025f3e:	4f20      	ldr	r7, [pc, #128]	; (8025fc0 <_malloc_r+0xb0>)
 8025f40:	683b      	ldr	r3, [r7, #0]
 8025f42:	b923      	cbnz	r3, 8025f4e <_malloc_r+0x3e>
 8025f44:	4621      	mov	r1, r4
 8025f46:	4630      	mov	r0, r6
 8025f48:	f000 fc86 	bl	8026858 <_sbrk_r>
 8025f4c:	6038      	str	r0, [r7, #0]
 8025f4e:	4629      	mov	r1, r5
 8025f50:	4630      	mov	r0, r6
 8025f52:	f000 fc81 	bl	8026858 <_sbrk_r>
 8025f56:	1c43      	adds	r3, r0, #1
 8025f58:	d123      	bne.n	8025fa2 <_malloc_r+0x92>
 8025f5a:	230c      	movs	r3, #12
 8025f5c:	6033      	str	r3, [r6, #0]
 8025f5e:	4630      	mov	r0, r6
 8025f60:	f000 fd4c 	bl	80269fc <__malloc_unlock>
 8025f64:	e7e3      	b.n	8025f2e <_malloc_r+0x1e>
 8025f66:	6823      	ldr	r3, [r4, #0]
 8025f68:	1b5b      	subs	r3, r3, r5
 8025f6a:	d417      	bmi.n	8025f9c <_malloc_r+0x8c>
 8025f6c:	2b0b      	cmp	r3, #11
 8025f6e:	d903      	bls.n	8025f78 <_malloc_r+0x68>
 8025f70:	6023      	str	r3, [r4, #0]
 8025f72:	441c      	add	r4, r3
 8025f74:	6025      	str	r5, [r4, #0]
 8025f76:	e004      	b.n	8025f82 <_malloc_r+0x72>
 8025f78:	6863      	ldr	r3, [r4, #4]
 8025f7a:	42a2      	cmp	r2, r4
 8025f7c:	bf0c      	ite	eq
 8025f7e:	600b      	streq	r3, [r1, #0]
 8025f80:	6053      	strne	r3, [r2, #4]
 8025f82:	4630      	mov	r0, r6
 8025f84:	f000 fd3a 	bl	80269fc <__malloc_unlock>
 8025f88:	f104 000b 	add.w	r0, r4, #11
 8025f8c:	1d23      	adds	r3, r4, #4
 8025f8e:	f020 0007 	bic.w	r0, r0, #7
 8025f92:	1ac2      	subs	r2, r0, r3
 8025f94:	d0cc      	beq.n	8025f30 <_malloc_r+0x20>
 8025f96:	1a1b      	subs	r3, r3, r0
 8025f98:	50a3      	str	r3, [r4, r2]
 8025f9a:	e7c9      	b.n	8025f30 <_malloc_r+0x20>
 8025f9c:	4622      	mov	r2, r4
 8025f9e:	6864      	ldr	r4, [r4, #4]
 8025fa0:	e7cc      	b.n	8025f3c <_malloc_r+0x2c>
 8025fa2:	1cc4      	adds	r4, r0, #3
 8025fa4:	f024 0403 	bic.w	r4, r4, #3
 8025fa8:	42a0      	cmp	r0, r4
 8025faa:	d0e3      	beq.n	8025f74 <_malloc_r+0x64>
 8025fac:	1a21      	subs	r1, r4, r0
 8025fae:	4630      	mov	r0, r6
 8025fb0:	f000 fc52 	bl	8026858 <_sbrk_r>
 8025fb4:	3001      	adds	r0, #1
 8025fb6:	d1dd      	bne.n	8025f74 <_malloc_r+0x64>
 8025fb8:	e7cf      	b.n	8025f5a <_malloc_r+0x4a>
 8025fba:	bf00      	nop
 8025fbc:	200000bc 	.word	0x200000bc
 8025fc0:	200000c0 	.word	0x200000c0

08025fc4 <__ssputs_r>:
 8025fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025fc8:	688e      	ldr	r6, [r1, #8]
 8025fca:	429e      	cmp	r6, r3
 8025fcc:	4682      	mov	sl, r0
 8025fce:	460c      	mov	r4, r1
 8025fd0:	4690      	mov	r8, r2
 8025fd2:	461f      	mov	r7, r3
 8025fd4:	d838      	bhi.n	8026048 <__ssputs_r+0x84>
 8025fd6:	898a      	ldrh	r2, [r1, #12]
 8025fd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8025fdc:	d032      	beq.n	8026044 <__ssputs_r+0x80>
 8025fde:	6825      	ldr	r5, [r4, #0]
 8025fe0:	6909      	ldr	r1, [r1, #16]
 8025fe2:	eba5 0901 	sub.w	r9, r5, r1
 8025fe6:	6965      	ldr	r5, [r4, #20]
 8025fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025fec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025ff0:	3301      	adds	r3, #1
 8025ff2:	444b      	add	r3, r9
 8025ff4:	106d      	asrs	r5, r5, #1
 8025ff6:	429d      	cmp	r5, r3
 8025ff8:	bf38      	it	cc
 8025ffa:	461d      	movcc	r5, r3
 8025ffc:	0553      	lsls	r3, r2, #21
 8025ffe:	d531      	bpl.n	8026064 <__ssputs_r+0xa0>
 8026000:	4629      	mov	r1, r5
 8026002:	f7ff ff85 	bl	8025f10 <_malloc_r>
 8026006:	4606      	mov	r6, r0
 8026008:	b950      	cbnz	r0, 8026020 <__ssputs_r+0x5c>
 802600a:	230c      	movs	r3, #12
 802600c:	f8ca 3000 	str.w	r3, [sl]
 8026010:	89a3      	ldrh	r3, [r4, #12]
 8026012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026016:	81a3      	strh	r3, [r4, #12]
 8026018:	f04f 30ff 	mov.w	r0, #4294967295
 802601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026020:	6921      	ldr	r1, [r4, #16]
 8026022:	464a      	mov	r2, r9
 8026024:	f7ff fabc 	bl	80255a0 <memcpy>
 8026028:	89a3      	ldrh	r3, [r4, #12]
 802602a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802602e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026032:	81a3      	strh	r3, [r4, #12]
 8026034:	6126      	str	r6, [r4, #16]
 8026036:	6165      	str	r5, [r4, #20]
 8026038:	444e      	add	r6, r9
 802603a:	eba5 0509 	sub.w	r5, r5, r9
 802603e:	6026      	str	r6, [r4, #0]
 8026040:	60a5      	str	r5, [r4, #8]
 8026042:	463e      	mov	r6, r7
 8026044:	42be      	cmp	r6, r7
 8026046:	d900      	bls.n	802604a <__ssputs_r+0x86>
 8026048:	463e      	mov	r6, r7
 802604a:	4632      	mov	r2, r6
 802604c:	6820      	ldr	r0, [r4, #0]
 802604e:	4641      	mov	r1, r8
 8026050:	f000 fcb4 	bl	80269bc <memmove>
 8026054:	68a3      	ldr	r3, [r4, #8]
 8026056:	6822      	ldr	r2, [r4, #0]
 8026058:	1b9b      	subs	r3, r3, r6
 802605a:	4432      	add	r2, r6
 802605c:	60a3      	str	r3, [r4, #8]
 802605e:	6022      	str	r2, [r4, #0]
 8026060:	2000      	movs	r0, #0
 8026062:	e7db      	b.n	802601c <__ssputs_r+0x58>
 8026064:	462a      	mov	r2, r5
 8026066:	f000 fccf 	bl	8026a08 <_realloc_r>
 802606a:	4606      	mov	r6, r0
 802606c:	2800      	cmp	r0, #0
 802606e:	d1e1      	bne.n	8026034 <__ssputs_r+0x70>
 8026070:	6921      	ldr	r1, [r4, #16]
 8026072:	4650      	mov	r0, sl
 8026074:	f7ff fefc 	bl	8025e70 <_free_r>
 8026078:	e7c7      	b.n	802600a <__ssputs_r+0x46>
	...

0802607c <_svfiprintf_r>:
 802607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026080:	4698      	mov	r8, r3
 8026082:	898b      	ldrh	r3, [r1, #12]
 8026084:	061b      	lsls	r3, r3, #24
 8026086:	b09d      	sub	sp, #116	; 0x74
 8026088:	4607      	mov	r7, r0
 802608a:	460d      	mov	r5, r1
 802608c:	4614      	mov	r4, r2
 802608e:	d50e      	bpl.n	80260ae <_svfiprintf_r+0x32>
 8026090:	690b      	ldr	r3, [r1, #16]
 8026092:	b963      	cbnz	r3, 80260ae <_svfiprintf_r+0x32>
 8026094:	2140      	movs	r1, #64	; 0x40
 8026096:	f7ff ff3b 	bl	8025f10 <_malloc_r>
 802609a:	6028      	str	r0, [r5, #0]
 802609c:	6128      	str	r0, [r5, #16]
 802609e:	b920      	cbnz	r0, 80260aa <_svfiprintf_r+0x2e>
 80260a0:	230c      	movs	r3, #12
 80260a2:	603b      	str	r3, [r7, #0]
 80260a4:	f04f 30ff 	mov.w	r0, #4294967295
 80260a8:	e0d1      	b.n	802624e <_svfiprintf_r+0x1d2>
 80260aa:	2340      	movs	r3, #64	; 0x40
 80260ac:	616b      	str	r3, [r5, #20]
 80260ae:	2300      	movs	r3, #0
 80260b0:	9309      	str	r3, [sp, #36]	; 0x24
 80260b2:	2320      	movs	r3, #32
 80260b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80260b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80260bc:	2330      	movs	r3, #48	; 0x30
 80260be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8026268 <_svfiprintf_r+0x1ec>
 80260c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80260c6:	f04f 0901 	mov.w	r9, #1
 80260ca:	4623      	mov	r3, r4
 80260cc:	469a      	mov	sl, r3
 80260ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80260d2:	b10a      	cbz	r2, 80260d8 <_svfiprintf_r+0x5c>
 80260d4:	2a25      	cmp	r2, #37	; 0x25
 80260d6:	d1f9      	bne.n	80260cc <_svfiprintf_r+0x50>
 80260d8:	ebba 0b04 	subs.w	fp, sl, r4
 80260dc:	d00b      	beq.n	80260f6 <_svfiprintf_r+0x7a>
 80260de:	465b      	mov	r3, fp
 80260e0:	4622      	mov	r2, r4
 80260e2:	4629      	mov	r1, r5
 80260e4:	4638      	mov	r0, r7
 80260e6:	f7ff ff6d 	bl	8025fc4 <__ssputs_r>
 80260ea:	3001      	adds	r0, #1
 80260ec:	f000 80aa 	beq.w	8026244 <_svfiprintf_r+0x1c8>
 80260f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80260f2:	445a      	add	r2, fp
 80260f4:	9209      	str	r2, [sp, #36]	; 0x24
 80260f6:	f89a 3000 	ldrb.w	r3, [sl]
 80260fa:	2b00      	cmp	r3, #0
 80260fc:	f000 80a2 	beq.w	8026244 <_svfiprintf_r+0x1c8>
 8026100:	2300      	movs	r3, #0
 8026102:	f04f 32ff 	mov.w	r2, #4294967295
 8026106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802610a:	f10a 0a01 	add.w	sl, sl, #1
 802610e:	9304      	str	r3, [sp, #16]
 8026110:	9307      	str	r3, [sp, #28]
 8026112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026116:	931a      	str	r3, [sp, #104]	; 0x68
 8026118:	4654      	mov	r4, sl
 802611a:	2205      	movs	r2, #5
 802611c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026120:	4851      	ldr	r0, [pc, #324]	; (8026268 <_svfiprintf_r+0x1ec>)
 8026122:	f7fa f85d 	bl	80201e0 <memchr>
 8026126:	9a04      	ldr	r2, [sp, #16]
 8026128:	b9d8      	cbnz	r0, 8026162 <_svfiprintf_r+0xe6>
 802612a:	06d0      	lsls	r0, r2, #27
 802612c:	bf44      	itt	mi
 802612e:	2320      	movmi	r3, #32
 8026130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026134:	0711      	lsls	r1, r2, #28
 8026136:	bf44      	itt	mi
 8026138:	232b      	movmi	r3, #43	; 0x2b
 802613a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802613e:	f89a 3000 	ldrb.w	r3, [sl]
 8026142:	2b2a      	cmp	r3, #42	; 0x2a
 8026144:	d015      	beq.n	8026172 <_svfiprintf_r+0xf6>
 8026146:	9a07      	ldr	r2, [sp, #28]
 8026148:	4654      	mov	r4, sl
 802614a:	2000      	movs	r0, #0
 802614c:	f04f 0c0a 	mov.w	ip, #10
 8026150:	4621      	mov	r1, r4
 8026152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026156:	3b30      	subs	r3, #48	; 0x30
 8026158:	2b09      	cmp	r3, #9
 802615a:	d94e      	bls.n	80261fa <_svfiprintf_r+0x17e>
 802615c:	b1b0      	cbz	r0, 802618c <_svfiprintf_r+0x110>
 802615e:	9207      	str	r2, [sp, #28]
 8026160:	e014      	b.n	802618c <_svfiprintf_r+0x110>
 8026162:	eba0 0308 	sub.w	r3, r0, r8
 8026166:	fa09 f303 	lsl.w	r3, r9, r3
 802616a:	4313      	orrs	r3, r2
 802616c:	9304      	str	r3, [sp, #16]
 802616e:	46a2      	mov	sl, r4
 8026170:	e7d2      	b.n	8026118 <_svfiprintf_r+0x9c>
 8026172:	9b03      	ldr	r3, [sp, #12]
 8026174:	1d19      	adds	r1, r3, #4
 8026176:	681b      	ldr	r3, [r3, #0]
 8026178:	9103      	str	r1, [sp, #12]
 802617a:	2b00      	cmp	r3, #0
 802617c:	bfbb      	ittet	lt
 802617e:	425b      	neglt	r3, r3
 8026180:	f042 0202 	orrlt.w	r2, r2, #2
 8026184:	9307      	strge	r3, [sp, #28]
 8026186:	9307      	strlt	r3, [sp, #28]
 8026188:	bfb8      	it	lt
 802618a:	9204      	strlt	r2, [sp, #16]
 802618c:	7823      	ldrb	r3, [r4, #0]
 802618e:	2b2e      	cmp	r3, #46	; 0x2e
 8026190:	d10c      	bne.n	80261ac <_svfiprintf_r+0x130>
 8026192:	7863      	ldrb	r3, [r4, #1]
 8026194:	2b2a      	cmp	r3, #42	; 0x2a
 8026196:	d135      	bne.n	8026204 <_svfiprintf_r+0x188>
 8026198:	9b03      	ldr	r3, [sp, #12]
 802619a:	1d1a      	adds	r2, r3, #4
 802619c:	681b      	ldr	r3, [r3, #0]
 802619e:	9203      	str	r2, [sp, #12]
 80261a0:	2b00      	cmp	r3, #0
 80261a2:	bfb8      	it	lt
 80261a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80261a8:	3402      	adds	r4, #2
 80261aa:	9305      	str	r3, [sp, #20]
 80261ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8026278 <_svfiprintf_r+0x1fc>
 80261b0:	7821      	ldrb	r1, [r4, #0]
 80261b2:	2203      	movs	r2, #3
 80261b4:	4650      	mov	r0, sl
 80261b6:	f7fa f813 	bl	80201e0 <memchr>
 80261ba:	b140      	cbz	r0, 80261ce <_svfiprintf_r+0x152>
 80261bc:	2340      	movs	r3, #64	; 0x40
 80261be:	eba0 000a 	sub.w	r0, r0, sl
 80261c2:	fa03 f000 	lsl.w	r0, r3, r0
 80261c6:	9b04      	ldr	r3, [sp, #16]
 80261c8:	4303      	orrs	r3, r0
 80261ca:	3401      	adds	r4, #1
 80261cc:	9304      	str	r3, [sp, #16]
 80261ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80261d2:	4826      	ldr	r0, [pc, #152]	; (802626c <_svfiprintf_r+0x1f0>)
 80261d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80261d8:	2206      	movs	r2, #6
 80261da:	f7fa f801 	bl	80201e0 <memchr>
 80261de:	2800      	cmp	r0, #0
 80261e0:	d038      	beq.n	8026254 <_svfiprintf_r+0x1d8>
 80261e2:	4b23      	ldr	r3, [pc, #140]	; (8026270 <_svfiprintf_r+0x1f4>)
 80261e4:	bb1b      	cbnz	r3, 802622e <_svfiprintf_r+0x1b2>
 80261e6:	9b03      	ldr	r3, [sp, #12]
 80261e8:	3307      	adds	r3, #7
 80261ea:	f023 0307 	bic.w	r3, r3, #7
 80261ee:	3308      	adds	r3, #8
 80261f0:	9303      	str	r3, [sp, #12]
 80261f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80261f4:	4433      	add	r3, r6
 80261f6:	9309      	str	r3, [sp, #36]	; 0x24
 80261f8:	e767      	b.n	80260ca <_svfiprintf_r+0x4e>
 80261fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80261fe:	460c      	mov	r4, r1
 8026200:	2001      	movs	r0, #1
 8026202:	e7a5      	b.n	8026150 <_svfiprintf_r+0xd4>
 8026204:	2300      	movs	r3, #0
 8026206:	3401      	adds	r4, #1
 8026208:	9305      	str	r3, [sp, #20]
 802620a:	4619      	mov	r1, r3
 802620c:	f04f 0c0a 	mov.w	ip, #10
 8026210:	4620      	mov	r0, r4
 8026212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026216:	3a30      	subs	r2, #48	; 0x30
 8026218:	2a09      	cmp	r2, #9
 802621a:	d903      	bls.n	8026224 <_svfiprintf_r+0x1a8>
 802621c:	2b00      	cmp	r3, #0
 802621e:	d0c5      	beq.n	80261ac <_svfiprintf_r+0x130>
 8026220:	9105      	str	r1, [sp, #20]
 8026222:	e7c3      	b.n	80261ac <_svfiprintf_r+0x130>
 8026224:	fb0c 2101 	mla	r1, ip, r1, r2
 8026228:	4604      	mov	r4, r0
 802622a:	2301      	movs	r3, #1
 802622c:	e7f0      	b.n	8026210 <_svfiprintf_r+0x194>
 802622e:	ab03      	add	r3, sp, #12
 8026230:	9300      	str	r3, [sp, #0]
 8026232:	462a      	mov	r2, r5
 8026234:	4b0f      	ldr	r3, [pc, #60]	; (8026274 <_svfiprintf_r+0x1f8>)
 8026236:	a904      	add	r1, sp, #16
 8026238:	4638      	mov	r0, r7
 802623a:	f3af 8000 	nop.w
 802623e:	1c42      	adds	r2, r0, #1
 8026240:	4606      	mov	r6, r0
 8026242:	d1d6      	bne.n	80261f2 <_svfiprintf_r+0x176>
 8026244:	89ab      	ldrh	r3, [r5, #12]
 8026246:	065b      	lsls	r3, r3, #25
 8026248:	f53f af2c 	bmi.w	80260a4 <_svfiprintf_r+0x28>
 802624c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802624e:	b01d      	add	sp, #116	; 0x74
 8026250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026254:	ab03      	add	r3, sp, #12
 8026256:	9300      	str	r3, [sp, #0]
 8026258:	462a      	mov	r2, r5
 802625a:	4b06      	ldr	r3, [pc, #24]	; (8026274 <_svfiprintf_r+0x1f8>)
 802625c:	a904      	add	r1, sp, #16
 802625e:	4638      	mov	r0, r7
 8026260:	f000 f9d4 	bl	802660c <_printf_i>
 8026264:	e7eb      	b.n	802623e <_svfiprintf_r+0x1c2>
 8026266:	bf00      	nop
 8026268:	080274c4 	.word	0x080274c4
 802626c:	080274ce 	.word	0x080274ce
 8026270:	00000000 	.word	0x00000000
 8026274:	08025fc5 	.word	0x08025fc5
 8026278:	080274ca 	.word	0x080274ca

0802627c <__sfputc_r>:
 802627c:	6893      	ldr	r3, [r2, #8]
 802627e:	3b01      	subs	r3, #1
 8026280:	2b00      	cmp	r3, #0
 8026282:	b410      	push	{r4}
 8026284:	6093      	str	r3, [r2, #8]
 8026286:	da08      	bge.n	802629a <__sfputc_r+0x1e>
 8026288:	6994      	ldr	r4, [r2, #24]
 802628a:	42a3      	cmp	r3, r4
 802628c:	db01      	blt.n	8026292 <__sfputc_r+0x16>
 802628e:	290a      	cmp	r1, #10
 8026290:	d103      	bne.n	802629a <__sfputc_r+0x1e>
 8026292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026296:	f7ff bad5 	b.w	8025844 <__swbuf_r>
 802629a:	6813      	ldr	r3, [r2, #0]
 802629c:	1c58      	adds	r0, r3, #1
 802629e:	6010      	str	r0, [r2, #0]
 80262a0:	7019      	strb	r1, [r3, #0]
 80262a2:	4608      	mov	r0, r1
 80262a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80262a8:	4770      	bx	lr

080262aa <__sfputs_r>:
 80262aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262ac:	4606      	mov	r6, r0
 80262ae:	460f      	mov	r7, r1
 80262b0:	4614      	mov	r4, r2
 80262b2:	18d5      	adds	r5, r2, r3
 80262b4:	42ac      	cmp	r4, r5
 80262b6:	d101      	bne.n	80262bc <__sfputs_r+0x12>
 80262b8:	2000      	movs	r0, #0
 80262ba:	e007      	b.n	80262cc <__sfputs_r+0x22>
 80262bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80262c0:	463a      	mov	r2, r7
 80262c2:	4630      	mov	r0, r6
 80262c4:	f7ff ffda 	bl	802627c <__sfputc_r>
 80262c8:	1c43      	adds	r3, r0, #1
 80262ca:	d1f3      	bne.n	80262b4 <__sfputs_r+0xa>
 80262cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080262d0 <_vfiprintf_r>:
 80262d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262d4:	460d      	mov	r5, r1
 80262d6:	b09d      	sub	sp, #116	; 0x74
 80262d8:	4614      	mov	r4, r2
 80262da:	4698      	mov	r8, r3
 80262dc:	4606      	mov	r6, r0
 80262de:	b118      	cbz	r0, 80262e8 <_vfiprintf_r+0x18>
 80262e0:	6983      	ldr	r3, [r0, #24]
 80262e2:	b90b      	cbnz	r3, 80262e8 <_vfiprintf_r+0x18>
 80262e4:	f7ff fca6 	bl	8025c34 <__sinit>
 80262e8:	4b89      	ldr	r3, [pc, #548]	; (8026510 <_vfiprintf_r+0x240>)
 80262ea:	429d      	cmp	r5, r3
 80262ec:	d11b      	bne.n	8026326 <_vfiprintf_r+0x56>
 80262ee:	6875      	ldr	r5, [r6, #4]
 80262f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80262f2:	07d9      	lsls	r1, r3, #31
 80262f4:	d405      	bmi.n	8026302 <_vfiprintf_r+0x32>
 80262f6:	89ab      	ldrh	r3, [r5, #12]
 80262f8:	059a      	lsls	r2, r3, #22
 80262fa:	d402      	bmi.n	8026302 <_vfiprintf_r+0x32>
 80262fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80262fe:	f7ff fd49 	bl	8025d94 <__retarget_lock_acquire_recursive>
 8026302:	89ab      	ldrh	r3, [r5, #12]
 8026304:	071b      	lsls	r3, r3, #28
 8026306:	d501      	bpl.n	802630c <_vfiprintf_r+0x3c>
 8026308:	692b      	ldr	r3, [r5, #16]
 802630a:	b9eb      	cbnz	r3, 8026348 <_vfiprintf_r+0x78>
 802630c:	4629      	mov	r1, r5
 802630e:	4630      	mov	r0, r6
 8026310:	f7ff faea 	bl	80258e8 <__swsetup_r>
 8026314:	b1c0      	cbz	r0, 8026348 <_vfiprintf_r+0x78>
 8026316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026318:	07dc      	lsls	r4, r3, #31
 802631a:	d50e      	bpl.n	802633a <_vfiprintf_r+0x6a>
 802631c:	f04f 30ff 	mov.w	r0, #4294967295
 8026320:	b01d      	add	sp, #116	; 0x74
 8026322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026326:	4b7b      	ldr	r3, [pc, #492]	; (8026514 <_vfiprintf_r+0x244>)
 8026328:	429d      	cmp	r5, r3
 802632a:	d101      	bne.n	8026330 <_vfiprintf_r+0x60>
 802632c:	68b5      	ldr	r5, [r6, #8]
 802632e:	e7df      	b.n	80262f0 <_vfiprintf_r+0x20>
 8026330:	4b79      	ldr	r3, [pc, #484]	; (8026518 <_vfiprintf_r+0x248>)
 8026332:	429d      	cmp	r5, r3
 8026334:	bf08      	it	eq
 8026336:	68f5      	ldreq	r5, [r6, #12]
 8026338:	e7da      	b.n	80262f0 <_vfiprintf_r+0x20>
 802633a:	89ab      	ldrh	r3, [r5, #12]
 802633c:	0598      	lsls	r0, r3, #22
 802633e:	d4ed      	bmi.n	802631c <_vfiprintf_r+0x4c>
 8026340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026342:	f7ff fd28 	bl	8025d96 <__retarget_lock_release_recursive>
 8026346:	e7e9      	b.n	802631c <_vfiprintf_r+0x4c>
 8026348:	2300      	movs	r3, #0
 802634a:	9309      	str	r3, [sp, #36]	; 0x24
 802634c:	2320      	movs	r3, #32
 802634e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026352:	f8cd 800c 	str.w	r8, [sp, #12]
 8026356:	2330      	movs	r3, #48	; 0x30
 8026358:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802651c <_vfiprintf_r+0x24c>
 802635c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026360:	f04f 0901 	mov.w	r9, #1
 8026364:	4623      	mov	r3, r4
 8026366:	469a      	mov	sl, r3
 8026368:	f813 2b01 	ldrb.w	r2, [r3], #1
 802636c:	b10a      	cbz	r2, 8026372 <_vfiprintf_r+0xa2>
 802636e:	2a25      	cmp	r2, #37	; 0x25
 8026370:	d1f9      	bne.n	8026366 <_vfiprintf_r+0x96>
 8026372:	ebba 0b04 	subs.w	fp, sl, r4
 8026376:	d00b      	beq.n	8026390 <_vfiprintf_r+0xc0>
 8026378:	465b      	mov	r3, fp
 802637a:	4622      	mov	r2, r4
 802637c:	4629      	mov	r1, r5
 802637e:	4630      	mov	r0, r6
 8026380:	f7ff ff93 	bl	80262aa <__sfputs_r>
 8026384:	3001      	adds	r0, #1
 8026386:	f000 80aa 	beq.w	80264de <_vfiprintf_r+0x20e>
 802638a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802638c:	445a      	add	r2, fp
 802638e:	9209      	str	r2, [sp, #36]	; 0x24
 8026390:	f89a 3000 	ldrb.w	r3, [sl]
 8026394:	2b00      	cmp	r3, #0
 8026396:	f000 80a2 	beq.w	80264de <_vfiprintf_r+0x20e>
 802639a:	2300      	movs	r3, #0
 802639c:	f04f 32ff 	mov.w	r2, #4294967295
 80263a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80263a4:	f10a 0a01 	add.w	sl, sl, #1
 80263a8:	9304      	str	r3, [sp, #16]
 80263aa:	9307      	str	r3, [sp, #28]
 80263ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80263b0:	931a      	str	r3, [sp, #104]	; 0x68
 80263b2:	4654      	mov	r4, sl
 80263b4:	2205      	movs	r2, #5
 80263b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80263ba:	4858      	ldr	r0, [pc, #352]	; (802651c <_vfiprintf_r+0x24c>)
 80263bc:	f7f9 ff10 	bl	80201e0 <memchr>
 80263c0:	9a04      	ldr	r2, [sp, #16]
 80263c2:	b9d8      	cbnz	r0, 80263fc <_vfiprintf_r+0x12c>
 80263c4:	06d1      	lsls	r1, r2, #27
 80263c6:	bf44      	itt	mi
 80263c8:	2320      	movmi	r3, #32
 80263ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80263ce:	0713      	lsls	r3, r2, #28
 80263d0:	bf44      	itt	mi
 80263d2:	232b      	movmi	r3, #43	; 0x2b
 80263d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80263d8:	f89a 3000 	ldrb.w	r3, [sl]
 80263dc:	2b2a      	cmp	r3, #42	; 0x2a
 80263de:	d015      	beq.n	802640c <_vfiprintf_r+0x13c>
 80263e0:	9a07      	ldr	r2, [sp, #28]
 80263e2:	4654      	mov	r4, sl
 80263e4:	2000      	movs	r0, #0
 80263e6:	f04f 0c0a 	mov.w	ip, #10
 80263ea:	4621      	mov	r1, r4
 80263ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80263f0:	3b30      	subs	r3, #48	; 0x30
 80263f2:	2b09      	cmp	r3, #9
 80263f4:	d94e      	bls.n	8026494 <_vfiprintf_r+0x1c4>
 80263f6:	b1b0      	cbz	r0, 8026426 <_vfiprintf_r+0x156>
 80263f8:	9207      	str	r2, [sp, #28]
 80263fa:	e014      	b.n	8026426 <_vfiprintf_r+0x156>
 80263fc:	eba0 0308 	sub.w	r3, r0, r8
 8026400:	fa09 f303 	lsl.w	r3, r9, r3
 8026404:	4313      	orrs	r3, r2
 8026406:	9304      	str	r3, [sp, #16]
 8026408:	46a2      	mov	sl, r4
 802640a:	e7d2      	b.n	80263b2 <_vfiprintf_r+0xe2>
 802640c:	9b03      	ldr	r3, [sp, #12]
 802640e:	1d19      	adds	r1, r3, #4
 8026410:	681b      	ldr	r3, [r3, #0]
 8026412:	9103      	str	r1, [sp, #12]
 8026414:	2b00      	cmp	r3, #0
 8026416:	bfbb      	ittet	lt
 8026418:	425b      	neglt	r3, r3
 802641a:	f042 0202 	orrlt.w	r2, r2, #2
 802641e:	9307      	strge	r3, [sp, #28]
 8026420:	9307      	strlt	r3, [sp, #28]
 8026422:	bfb8      	it	lt
 8026424:	9204      	strlt	r2, [sp, #16]
 8026426:	7823      	ldrb	r3, [r4, #0]
 8026428:	2b2e      	cmp	r3, #46	; 0x2e
 802642a:	d10c      	bne.n	8026446 <_vfiprintf_r+0x176>
 802642c:	7863      	ldrb	r3, [r4, #1]
 802642e:	2b2a      	cmp	r3, #42	; 0x2a
 8026430:	d135      	bne.n	802649e <_vfiprintf_r+0x1ce>
 8026432:	9b03      	ldr	r3, [sp, #12]
 8026434:	1d1a      	adds	r2, r3, #4
 8026436:	681b      	ldr	r3, [r3, #0]
 8026438:	9203      	str	r2, [sp, #12]
 802643a:	2b00      	cmp	r3, #0
 802643c:	bfb8      	it	lt
 802643e:	f04f 33ff 	movlt.w	r3, #4294967295
 8026442:	3402      	adds	r4, #2
 8026444:	9305      	str	r3, [sp, #20]
 8026446:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802652c <_vfiprintf_r+0x25c>
 802644a:	7821      	ldrb	r1, [r4, #0]
 802644c:	2203      	movs	r2, #3
 802644e:	4650      	mov	r0, sl
 8026450:	f7f9 fec6 	bl	80201e0 <memchr>
 8026454:	b140      	cbz	r0, 8026468 <_vfiprintf_r+0x198>
 8026456:	2340      	movs	r3, #64	; 0x40
 8026458:	eba0 000a 	sub.w	r0, r0, sl
 802645c:	fa03 f000 	lsl.w	r0, r3, r0
 8026460:	9b04      	ldr	r3, [sp, #16]
 8026462:	4303      	orrs	r3, r0
 8026464:	3401      	adds	r4, #1
 8026466:	9304      	str	r3, [sp, #16]
 8026468:	f814 1b01 	ldrb.w	r1, [r4], #1
 802646c:	482c      	ldr	r0, [pc, #176]	; (8026520 <_vfiprintf_r+0x250>)
 802646e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026472:	2206      	movs	r2, #6
 8026474:	f7f9 feb4 	bl	80201e0 <memchr>
 8026478:	2800      	cmp	r0, #0
 802647a:	d03f      	beq.n	80264fc <_vfiprintf_r+0x22c>
 802647c:	4b29      	ldr	r3, [pc, #164]	; (8026524 <_vfiprintf_r+0x254>)
 802647e:	bb1b      	cbnz	r3, 80264c8 <_vfiprintf_r+0x1f8>
 8026480:	9b03      	ldr	r3, [sp, #12]
 8026482:	3307      	adds	r3, #7
 8026484:	f023 0307 	bic.w	r3, r3, #7
 8026488:	3308      	adds	r3, #8
 802648a:	9303      	str	r3, [sp, #12]
 802648c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802648e:	443b      	add	r3, r7
 8026490:	9309      	str	r3, [sp, #36]	; 0x24
 8026492:	e767      	b.n	8026364 <_vfiprintf_r+0x94>
 8026494:	fb0c 3202 	mla	r2, ip, r2, r3
 8026498:	460c      	mov	r4, r1
 802649a:	2001      	movs	r0, #1
 802649c:	e7a5      	b.n	80263ea <_vfiprintf_r+0x11a>
 802649e:	2300      	movs	r3, #0
 80264a0:	3401      	adds	r4, #1
 80264a2:	9305      	str	r3, [sp, #20]
 80264a4:	4619      	mov	r1, r3
 80264a6:	f04f 0c0a 	mov.w	ip, #10
 80264aa:	4620      	mov	r0, r4
 80264ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80264b0:	3a30      	subs	r2, #48	; 0x30
 80264b2:	2a09      	cmp	r2, #9
 80264b4:	d903      	bls.n	80264be <_vfiprintf_r+0x1ee>
 80264b6:	2b00      	cmp	r3, #0
 80264b8:	d0c5      	beq.n	8026446 <_vfiprintf_r+0x176>
 80264ba:	9105      	str	r1, [sp, #20]
 80264bc:	e7c3      	b.n	8026446 <_vfiprintf_r+0x176>
 80264be:	fb0c 2101 	mla	r1, ip, r1, r2
 80264c2:	4604      	mov	r4, r0
 80264c4:	2301      	movs	r3, #1
 80264c6:	e7f0      	b.n	80264aa <_vfiprintf_r+0x1da>
 80264c8:	ab03      	add	r3, sp, #12
 80264ca:	9300      	str	r3, [sp, #0]
 80264cc:	462a      	mov	r2, r5
 80264ce:	4b16      	ldr	r3, [pc, #88]	; (8026528 <_vfiprintf_r+0x258>)
 80264d0:	a904      	add	r1, sp, #16
 80264d2:	4630      	mov	r0, r6
 80264d4:	f3af 8000 	nop.w
 80264d8:	4607      	mov	r7, r0
 80264da:	1c78      	adds	r0, r7, #1
 80264dc:	d1d6      	bne.n	802648c <_vfiprintf_r+0x1bc>
 80264de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80264e0:	07d9      	lsls	r1, r3, #31
 80264e2:	d405      	bmi.n	80264f0 <_vfiprintf_r+0x220>
 80264e4:	89ab      	ldrh	r3, [r5, #12]
 80264e6:	059a      	lsls	r2, r3, #22
 80264e8:	d402      	bmi.n	80264f0 <_vfiprintf_r+0x220>
 80264ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80264ec:	f7ff fc53 	bl	8025d96 <__retarget_lock_release_recursive>
 80264f0:	89ab      	ldrh	r3, [r5, #12]
 80264f2:	065b      	lsls	r3, r3, #25
 80264f4:	f53f af12 	bmi.w	802631c <_vfiprintf_r+0x4c>
 80264f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80264fa:	e711      	b.n	8026320 <_vfiprintf_r+0x50>
 80264fc:	ab03      	add	r3, sp, #12
 80264fe:	9300      	str	r3, [sp, #0]
 8026500:	462a      	mov	r2, r5
 8026502:	4b09      	ldr	r3, [pc, #36]	; (8026528 <_vfiprintf_r+0x258>)
 8026504:	a904      	add	r1, sp, #16
 8026506:	4630      	mov	r0, r6
 8026508:	f000 f880 	bl	802660c <_printf_i>
 802650c:	e7e4      	b.n	80264d8 <_vfiprintf_r+0x208>
 802650e:	bf00      	nop
 8026510:	08027484 	.word	0x08027484
 8026514:	080274a4 	.word	0x080274a4
 8026518:	08027464 	.word	0x08027464
 802651c:	080274c4 	.word	0x080274c4
 8026520:	080274ce 	.word	0x080274ce
 8026524:	00000000 	.word	0x00000000
 8026528:	080262ab 	.word	0x080262ab
 802652c:	080274ca 	.word	0x080274ca

08026530 <_printf_common>:
 8026530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026534:	4616      	mov	r6, r2
 8026536:	4699      	mov	r9, r3
 8026538:	688a      	ldr	r2, [r1, #8]
 802653a:	690b      	ldr	r3, [r1, #16]
 802653c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026540:	4293      	cmp	r3, r2
 8026542:	bfb8      	it	lt
 8026544:	4613      	movlt	r3, r2
 8026546:	6033      	str	r3, [r6, #0]
 8026548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802654c:	4607      	mov	r7, r0
 802654e:	460c      	mov	r4, r1
 8026550:	b10a      	cbz	r2, 8026556 <_printf_common+0x26>
 8026552:	3301      	adds	r3, #1
 8026554:	6033      	str	r3, [r6, #0]
 8026556:	6823      	ldr	r3, [r4, #0]
 8026558:	0699      	lsls	r1, r3, #26
 802655a:	bf42      	ittt	mi
 802655c:	6833      	ldrmi	r3, [r6, #0]
 802655e:	3302      	addmi	r3, #2
 8026560:	6033      	strmi	r3, [r6, #0]
 8026562:	6825      	ldr	r5, [r4, #0]
 8026564:	f015 0506 	ands.w	r5, r5, #6
 8026568:	d106      	bne.n	8026578 <_printf_common+0x48>
 802656a:	f104 0a19 	add.w	sl, r4, #25
 802656e:	68e3      	ldr	r3, [r4, #12]
 8026570:	6832      	ldr	r2, [r6, #0]
 8026572:	1a9b      	subs	r3, r3, r2
 8026574:	42ab      	cmp	r3, r5
 8026576:	dc26      	bgt.n	80265c6 <_printf_common+0x96>
 8026578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802657c:	1e13      	subs	r3, r2, #0
 802657e:	6822      	ldr	r2, [r4, #0]
 8026580:	bf18      	it	ne
 8026582:	2301      	movne	r3, #1
 8026584:	0692      	lsls	r2, r2, #26
 8026586:	d42b      	bmi.n	80265e0 <_printf_common+0xb0>
 8026588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802658c:	4649      	mov	r1, r9
 802658e:	4638      	mov	r0, r7
 8026590:	47c0      	blx	r8
 8026592:	3001      	adds	r0, #1
 8026594:	d01e      	beq.n	80265d4 <_printf_common+0xa4>
 8026596:	6823      	ldr	r3, [r4, #0]
 8026598:	68e5      	ldr	r5, [r4, #12]
 802659a:	6832      	ldr	r2, [r6, #0]
 802659c:	f003 0306 	and.w	r3, r3, #6
 80265a0:	2b04      	cmp	r3, #4
 80265a2:	bf08      	it	eq
 80265a4:	1aad      	subeq	r5, r5, r2
 80265a6:	68a3      	ldr	r3, [r4, #8]
 80265a8:	6922      	ldr	r2, [r4, #16]
 80265aa:	bf0c      	ite	eq
 80265ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80265b0:	2500      	movne	r5, #0
 80265b2:	4293      	cmp	r3, r2
 80265b4:	bfc4      	itt	gt
 80265b6:	1a9b      	subgt	r3, r3, r2
 80265b8:	18ed      	addgt	r5, r5, r3
 80265ba:	2600      	movs	r6, #0
 80265bc:	341a      	adds	r4, #26
 80265be:	42b5      	cmp	r5, r6
 80265c0:	d11a      	bne.n	80265f8 <_printf_common+0xc8>
 80265c2:	2000      	movs	r0, #0
 80265c4:	e008      	b.n	80265d8 <_printf_common+0xa8>
 80265c6:	2301      	movs	r3, #1
 80265c8:	4652      	mov	r2, sl
 80265ca:	4649      	mov	r1, r9
 80265cc:	4638      	mov	r0, r7
 80265ce:	47c0      	blx	r8
 80265d0:	3001      	adds	r0, #1
 80265d2:	d103      	bne.n	80265dc <_printf_common+0xac>
 80265d4:	f04f 30ff 	mov.w	r0, #4294967295
 80265d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80265dc:	3501      	adds	r5, #1
 80265de:	e7c6      	b.n	802656e <_printf_common+0x3e>
 80265e0:	18e1      	adds	r1, r4, r3
 80265e2:	1c5a      	adds	r2, r3, #1
 80265e4:	2030      	movs	r0, #48	; 0x30
 80265e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80265ea:	4422      	add	r2, r4
 80265ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80265f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80265f4:	3302      	adds	r3, #2
 80265f6:	e7c7      	b.n	8026588 <_printf_common+0x58>
 80265f8:	2301      	movs	r3, #1
 80265fa:	4622      	mov	r2, r4
 80265fc:	4649      	mov	r1, r9
 80265fe:	4638      	mov	r0, r7
 8026600:	47c0      	blx	r8
 8026602:	3001      	adds	r0, #1
 8026604:	d0e6      	beq.n	80265d4 <_printf_common+0xa4>
 8026606:	3601      	adds	r6, #1
 8026608:	e7d9      	b.n	80265be <_printf_common+0x8e>
	...

0802660c <_printf_i>:
 802660c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026610:	460c      	mov	r4, r1
 8026612:	4691      	mov	r9, r2
 8026614:	7e27      	ldrb	r7, [r4, #24]
 8026616:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026618:	2f78      	cmp	r7, #120	; 0x78
 802661a:	4680      	mov	r8, r0
 802661c:	469a      	mov	sl, r3
 802661e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026622:	d807      	bhi.n	8026634 <_printf_i+0x28>
 8026624:	2f62      	cmp	r7, #98	; 0x62
 8026626:	d80a      	bhi.n	802663e <_printf_i+0x32>
 8026628:	2f00      	cmp	r7, #0
 802662a:	f000 80d8 	beq.w	80267de <_printf_i+0x1d2>
 802662e:	2f58      	cmp	r7, #88	; 0x58
 8026630:	f000 80a3 	beq.w	802677a <_printf_i+0x16e>
 8026634:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802663c:	e03a      	b.n	80266b4 <_printf_i+0xa8>
 802663e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026642:	2b15      	cmp	r3, #21
 8026644:	d8f6      	bhi.n	8026634 <_printf_i+0x28>
 8026646:	a001      	add	r0, pc, #4	; (adr r0, 802664c <_printf_i+0x40>)
 8026648:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802664c:	080266a5 	.word	0x080266a5
 8026650:	080266b9 	.word	0x080266b9
 8026654:	08026635 	.word	0x08026635
 8026658:	08026635 	.word	0x08026635
 802665c:	08026635 	.word	0x08026635
 8026660:	08026635 	.word	0x08026635
 8026664:	080266b9 	.word	0x080266b9
 8026668:	08026635 	.word	0x08026635
 802666c:	08026635 	.word	0x08026635
 8026670:	08026635 	.word	0x08026635
 8026674:	08026635 	.word	0x08026635
 8026678:	080267c5 	.word	0x080267c5
 802667c:	080266e9 	.word	0x080266e9
 8026680:	080267a7 	.word	0x080267a7
 8026684:	08026635 	.word	0x08026635
 8026688:	08026635 	.word	0x08026635
 802668c:	080267e7 	.word	0x080267e7
 8026690:	08026635 	.word	0x08026635
 8026694:	080266e9 	.word	0x080266e9
 8026698:	08026635 	.word	0x08026635
 802669c:	08026635 	.word	0x08026635
 80266a0:	080267af 	.word	0x080267af
 80266a4:	680b      	ldr	r3, [r1, #0]
 80266a6:	1d1a      	adds	r2, r3, #4
 80266a8:	681b      	ldr	r3, [r3, #0]
 80266aa:	600a      	str	r2, [r1, #0]
 80266ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80266b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80266b4:	2301      	movs	r3, #1
 80266b6:	e0a3      	b.n	8026800 <_printf_i+0x1f4>
 80266b8:	6825      	ldr	r5, [r4, #0]
 80266ba:	6808      	ldr	r0, [r1, #0]
 80266bc:	062e      	lsls	r6, r5, #24
 80266be:	f100 0304 	add.w	r3, r0, #4
 80266c2:	d50a      	bpl.n	80266da <_printf_i+0xce>
 80266c4:	6805      	ldr	r5, [r0, #0]
 80266c6:	600b      	str	r3, [r1, #0]
 80266c8:	2d00      	cmp	r5, #0
 80266ca:	da03      	bge.n	80266d4 <_printf_i+0xc8>
 80266cc:	232d      	movs	r3, #45	; 0x2d
 80266ce:	426d      	negs	r5, r5
 80266d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80266d4:	485e      	ldr	r0, [pc, #376]	; (8026850 <_printf_i+0x244>)
 80266d6:	230a      	movs	r3, #10
 80266d8:	e019      	b.n	802670e <_printf_i+0x102>
 80266da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80266de:	6805      	ldr	r5, [r0, #0]
 80266e0:	600b      	str	r3, [r1, #0]
 80266e2:	bf18      	it	ne
 80266e4:	b22d      	sxthne	r5, r5
 80266e6:	e7ef      	b.n	80266c8 <_printf_i+0xbc>
 80266e8:	680b      	ldr	r3, [r1, #0]
 80266ea:	6825      	ldr	r5, [r4, #0]
 80266ec:	1d18      	adds	r0, r3, #4
 80266ee:	6008      	str	r0, [r1, #0]
 80266f0:	0628      	lsls	r0, r5, #24
 80266f2:	d501      	bpl.n	80266f8 <_printf_i+0xec>
 80266f4:	681d      	ldr	r5, [r3, #0]
 80266f6:	e002      	b.n	80266fe <_printf_i+0xf2>
 80266f8:	0669      	lsls	r1, r5, #25
 80266fa:	d5fb      	bpl.n	80266f4 <_printf_i+0xe8>
 80266fc:	881d      	ldrh	r5, [r3, #0]
 80266fe:	4854      	ldr	r0, [pc, #336]	; (8026850 <_printf_i+0x244>)
 8026700:	2f6f      	cmp	r7, #111	; 0x6f
 8026702:	bf0c      	ite	eq
 8026704:	2308      	moveq	r3, #8
 8026706:	230a      	movne	r3, #10
 8026708:	2100      	movs	r1, #0
 802670a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802670e:	6866      	ldr	r6, [r4, #4]
 8026710:	60a6      	str	r6, [r4, #8]
 8026712:	2e00      	cmp	r6, #0
 8026714:	bfa2      	ittt	ge
 8026716:	6821      	ldrge	r1, [r4, #0]
 8026718:	f021 0104 	bicge.w	r1, r1, #4
 802671c:	6021      	strge	r1, [r4, #0]
 802671e:	b90d      	cbnz	r5, 8026724 <_printf_i+0x118>
 8026720:	2e00      	cmp	r6, #0
 8026722:	d04d      	beq.n	80267c0 <_printf_i+0x1b4>
 8026724:	4616      	mov	r6, r2
 8026726:	fbb5 f1f3 	udiv	r1, r5, r3
 802672a:	fb03 5711 	mls	r7, r3, r1, r5
 802672e:	5dc7      	ldrb	r7, [r0, r7]
 8026730:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026734:	462f      	mov	r7, r5
 8026736:	42bb      	cmp	r3, r7
 8026738:	460d      	mov	r5, r1
 802673a:	d9f4      	bls.n	8026726 <_printf_i+0x11a>
 802673c:	2b08      	cmp	r3, #8
 802673e:	d10b      	bne.n	8026758 <_printf_i+0x14c>
 8026740:	6823      	ldr	r3, [r4, #0]
 8026742:	07df      	lsls	r7, r3, #31
 8026744:	d508      	bpl.n	8026758 <_printf_i+0x14c>
 8026746:	6923      	ldr	r3, [r4, #16]
 8026748:	6861      	ldr	r1, [r4, #4]
 802674a:	4299      	cmp	r1, r3
 802674c:	bfde      	ittt	le
 802674e:	2330      	movle	r3, #48	; 0x30
 8026750:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026754:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026758:	1b92      	subs	r2, r2, r6
 802675a:	6122      	str	r2, [r4, #16]
 802675c:	f8cd a000 	str.w	sl, [sp]
 8026760:	464b      	mov	r3, r9
 8026762:	aa03      	add	r2, sp, #12
 8026764:	4621      	mov	r1, r4
 8026766:	4640      	mov	r0, r8
 8026768:	f7ff fee2 	bl	8026530 <_printf_common>
 802676c:	3001      	adds	r0, #1
 802676e:	d14c      	bne.n	802680a <_printf_i+0x1fe>
 8026770:	f04f 30ff 	mov.w	r0, #4294967295
 8026774:	b004      	add	sp, #16
 8026776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802677a:	4835      	ldr	r0, [pc, #212]	; (8026850 <_printf_i+0x244>)
 802677c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8026780:	6823      	ldr	r3, [r4, #0]
 8026782:	680e      	ldr	r6, [r1, #0]
 8026784:	061f      	lsls	r7, r3, #24
 8026786:	f856 5b04 	ldr.w	r5, [r6], #4
 802678a:	600e      	str	r6, [r1, #0]
 802678c:	d514      	bpl.n	80267b8 <_printf_i+0x1ac>
 802678e:	07d9      	lsls	r1, r3, #31
 8026790:	bf44      	itt	mi
 8026792:	f043 0320 	orrmi.w	r3, r3, #32
 8026796:	6023      	strmi	r3, [r4, #0]
 8026798:	b91d      	cbnz	r5, 80267a2 <_printf_i+0x196>
 802679a:	6823      	ldr	r3, [r4, #0]
 802679c:	f023 0320 	bic.w	r3, r3, #32
 80267a0:	6023      	str	r3, [r4, #0]
 80267a2:	2310      	movs	r3, #16
 80267a4:	e7b0      	b.n	8026708 <_printf_i+0xfc>
 80267a6:	6823      	ldr	r3, [r4, #0]
 80267a8:	f043 0320 	orr.w	r3, r3, #32
 80267ac:	6023      	str	r3, [r4, #0]
 80267ae:	2378      	movs	r3, #120	; 0x78
 80267b0:	4828      	ldr	r0, [pc, #160]	; (8026854 <_printf_i+0x248>)
 80267b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80267b6:	e7e3      	b.n	8026780 <_printf_i+0x174>
 80267b8:	065e      	lsls	r6, r3, #25
 80267ba:	bf48      	it	mi
 80267bc:	b2ad      	uxthmi	r5, r5
 80267be:	e7e6      	b.n	802678e <_printf_i+0x182>
 80267c0:	4616      	mov	r6, r2
 80267c2:	e7bb      	b.n	802673c <_printf_i+0x130>
 80267c4:	680b      	ldr	r3, [r1, #0]
 80267c6:	6826      	ldr	r6, [r4, #0]
 80267c8:	6960      	ldr	r0, [r4, #20]
 80267ca:	1d1d      	adds	r5, r3, #4
 80267cc:	600d      	str	r5, [r1, #0]
 80267ce:	0635      	lsls	r5, r6, #24
 80267d0:	681b      	ldr	r3, [r3, #0]
 80267d2:	d501      	bpl.n	80267d8 <_printf_i+0x1cc>
 80267d4:	6018      	str	r0, [r3, #0]
 80267d6:	e002      	b.n	80267de <_printf_i+0x1d2>
 80267d8:	0671      	lsls	r1, r6, #25
 80267da:	d5fb      	bpl.n	80267d4 <_printf_i+0x1c8>
 80267dc:	8018      	strh	r0, [r3, #0]
 80267de:	2300      	movs	r3, #0
 80267e0:	6123      	str	r3, [r4, #16]
 80267e2:	4616      	mov	r6, r2
 80267e4:	e7ba      	b.n	802675c <_printf_i+0x150>
 80267e6:	680b      	ldr	r3, [r1, #0]
 80267e8:	1d1a      	adds	r2, r3, #4
 80267ea:	600a      	str	r2, [r1, #0]
 80267ec:	681e      	ldr	r6, [r3, #0]
 80267ee:	6862      	ldr	r2, [r4, #4]
 80267f0:	2100      	movs	r1, #0
 80267f2:	4630      	mov	r0, r6
 80267f4:	f7f9 fcf4 	bl	80201e0 <memchr>
 80267f8:	b108      	cbz	r0, 80267fe <_printf_i+0x1f2>
 80267fa:	1b80      	subs	r0, r0, r6
 80267fc:	6060      	str	r0, [r4, #4]
 80267fe:	6863      	ldr	r3, [r4, #4]
 8026800:	6123      	str	r3, [r4, #16]
 8026802:	2300      	movs	r3, #0
 8026804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026808:	e7a8      	b.n	802675c <_printf_i+0x150>
 802680a:	6923      	ldr	r3, [r4, #16]
 802680c:	4632      	mov	r2, r6
 802680e:	4649      	mov	r1, r9
 8026810:	4640      	mov	r0, r8
 8026812:	47d0      	blx	sl
 8026814:	3001      	adds	r0, #1
 8026816:	d0ab      	beq.n	8026770 <_printf_i+0x164>
 8026818:	6823      	ldr	r3, [r4, #0]
 802681a:	079b      	lsls	r3, r3, #30
 802681c:	d413      	bmi.n	8026846 <_printf_i+0x23a>
 802681e:	68e0      	ldr	r0, [r4, #12]
 8026820:	9b03      	ldr	r3, [sp, #12]
 8026822:	4298      	cmp	r0, r3
 8026824:	bfb8      	it	lt
 8026826:	4618      	movlt	r0, r3
 8026828:	e7a4      	b.n	8026774 <_printf_i+0x168>
 802682a:	2301      	movs	r3, #1
 802682c:	4632      	mov	r2, r6
 802682e:	4649      	mov	r1, r9
 8026830:	4640      	mov	r0, r8
 8026832:	47d0      	blx	sl
 8026834:	3001      	adds	r0, #1
 8026836:	d09b      	beq.n	8026770 <_printf_i+0x164>
 8026838:	3501      	adds	r5, #1
 802683a:	68e3      	ldr	r3, [r4, #12]
 802683c:	9903      	ldr	r1, [sp, #12]
 802683e:	1a5b      	subs	r3, r3, r1
 8026840:	42ab      	cmp	r3, r5
 8026842:	dcf2      	bgt.n	802682a <_printf_i+0x21e>
 8026844:	e7eb      	b.n	802681e <_printf_i+0x212>
 8026846:	2500      	movs	r5, #0
 8026848:	f104 0619 	add.w	r6, r4, #25
 802684c:	e7f5      	b.n	802683a <_printf_i+0x22e>
 802684e:	bf00      	nop
 8026850:	080274d5 	.word	0x080274d5
 8026854:	080274e6 	.word	0x080274e6

08026858 <_sbrk_r>:
 8026858:	b538      	push	{r3, r4, r5, lr}
 802685a:	4d06      	ldr	r5, [pc, #24]	; (8026874 <_sbrk_r+0x1c>)
 802685c:	2300      	movs	r3, #0
 802685e:	4604      	mov	r4, r0
 8026860:	4608      	mov	r0, r1
 8026862:	602b      	str	r3, [r5, #0]
 8026864:	f7fe fe4c 	bl	8025500 <_sbrk>
 8026868:	1c43      	adds	r3, r0, #1
 802686a:	d102      	bne.n	8026872 <_sbrk_r+0x1a>
 802686c:	682b      	ldr	r3, [r5, #0]
 802686e:	b103      	cbz	r3, 8026872 <_sbrk_r+0x1a>
 8026870:	6023      	str	r3, [r4, #0]
 8026872:	bd38      	pop	{r3, r4, r5, pc}
 8026874:	20000c00 	.word	0x20000c00

08026878 <__sread>:
 8026878:	b510      	push	{r4, lr}
 802687a:	460c      	mov	r4, r1
 802687c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026880:	f000 f8e8 	bl	8026a54 <_read_r>
 8026884:	2800      	cmp	r0, #0
 8026886:	bfab      	itete	ge
 8026888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802688a:	89a3      	ldrhlt	r3, [r4, #12]
 802688c:	181b      	addge	r3, r3, r0
 802688e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026892:	bfac      	ite	ge
 8026894:	6563      	strge	r3, [r4, #84]	; 0x54
 8026896:	81a3      	strhlt	r3, [r4, #12]
 8026898:	bd10      	pop	{r4, pc}

0802689a <__swrite>:
 802689a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802689e:	461f      	mov	r7, r3
 80268a0:	898b      	ldrh	r3, [r1, #12]
 80268a2:	05db      	lsls	r3, r3, #23
 80268a4:	4605      	mov	r5, r0
 80268a6:	460c      	mov	r4, r1
 80268a8:	4616      	mov	r6, r2
 80268aa:	d505      	bpl.n	80268b8 <__swrite+0x1e>
 80268ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268b0:	2302      	movs	r3, #2
 80268b2:	2200      	movs	r2, #0
 80268b4:	f000 f870 	bl	8026998 <_lseek_r>
 80268b8:	89a3      	ldrh	r3, [r4, #12]
 80268ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80268be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80268c2:	81a3      	strh	r3, [r4, #12]
 80268c4:	4632      	mov	r2, r6
 80268c6:	463b      	mov	r3, r7
 80268c8:	4628      	mov	r0, r5
 80268ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80268ce:	f000 b817 	b.w	8026900 <_write_r>

080268d2 <__sseek>:
 80268d2:	b510      	push	{r4, lr}
 80268d4:	460c      	mov	r4, r1
 80268d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268da:	f000 f85d 	bl	8026998 <_lseek_r>
 80268de:	1c43      	adds	r3, r0, #1
 80268e0:	89a3      	ldrh	r3, [r4, #12]
 80268e2:	bf15      	itete	ne
 80268e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80268e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80268ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80268ee:	81a3      	strheq	r3, [r4, #12]
 80268f0:	bf18      	it	ne
 80268f2:	81a3      	strhne	r3, [r4, #12]
 80268f4:	bd10      	pop	{r4, pc}

080268f6 <__sclose>:
 80268f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268fa:	f000 b81b 	b.w	8026934 <_close_r>
	...

08026900 <_write_r>:
 8026900:	b538      	push	{r3, r4, r5, lr}
 8026902:	4d07      	ldr	r5, [pc, #28]	; (8026920 <_write_r+0x20>)
 8026904:	4604      	mov	r4, r0
 8026906:	4608      	mov	r0, r1
 8026908:	4611      	mov	r1, r2
 802690a:	2200      	movs	r2, #0
 802690c:	602a      	str	r2, [r5, #0]
 802690e:	461a      	mov	r2, r3
 8026910:	f7fe fde8 	bl	80254e4 <_write>
 8026914:	1c43      	adds	r3, r0, #1
 8026916:	d102      	bne.n	802691e <_write_r+0x1e>
 8026918:	682b      	ldr	r3, [r5, #0]
 802691a:	b103      	cbz	r3, 802691e <_write_r+0x1e>
 802691c:	6023      	str	r3, [r4, #0]
 802691e:	bd38      	pop	{r3, r4, r5, pc}
 8026920:	20000c00 	.word	0x20000c00

08026924 <abort>:
 8026924:	b508      	push	{r3, lr}
 8026926:	2006      	movs	r0, #6
 8026928:	f000 f8ce 	bl	8026ac8 <raise>
 802692c:	2001      	movs	r0, #1
 802692e:	f7fe fdcc 	bl	80254ca <_exit>
	...

08026934 <_close_r>:
 8026934:	b538      	push	{r3, r4, r5, lr}
 8026936:	4d06      	ldr	r5, [pc, #24]	; (8026950 <_close_r+0x1c>)
 8026938:	2300      	movs	r3, #0
 802693a:	4604      	mov	r4, r0
 802693c:	4608      	mov	r0, r1
 802693e:	602b      	str	r3, [r5, #0]
 8026940:	f7fe fdf8 	bl	8025534 <_close>
 8026944:	1c43      	adds	r3, r0, #1
 8026946:	d102      	bne.n	802694e <_close_r+0x1a>
 8026948:	682b      	ldr	r3, [r5, #0]
 802694a:	b103      	cbz	r3, 802694e <_close_r+0x1a>
 802694c:	6023      	str	r3, [r4, #0]
 802694e:	bd38      	pop	{r3, r4, r5, pc}
 8026950:	20000c00 	.word	0x20000c00

08026954 <_fstat_r>:
 8026954:	b538      	push	{r3, r4, r5, lr}
 8026956:	4d07      	ldr	r5, [pc, #28]	; (8026974 <_fstat_r+0x20>)
 8026958:	2300      	movs	r3, #0
 802695a:	4604      	mov	r4, r0
 802695c:	4608      	mov	r0, r1
 802695e:	4611      	mov	r1, r2
 8026960:	602b      	str	r3, [r5, #0]
 8026962:	f7fe fdea 	bl	802553a <_fstat>
 8026966:	1c43      	adds	r3, r0, #1
 8026968:	d102      	bne.n	8026970 <_fstat_r+0x1c>
 802696a:	682b      	ldr	r3, [r5, #0]
 802696c:	b103      	cbz	r3, 8026970 <_fstat_r+0x1c>
 802696e:	6023      	str	r3, [r4, #0]
 8026970:	bd38      	pop	{r3, r4, r5, pc}
 8026972:	bf00      	nop
 8026974:	20000c00 	.word	0x20000c00

08026978 <_isatty_r>:
 8026978:	b538      	push	{r3, r4, r5, lr}
 802697a:	4d06      	ldr	r5, [pc, #24]	; (8026994 <_isatty_r+0x1c>)
 802697c:	2300      	movs	r3, #0
 802697e:	4604      	mov	r4, r0
 8026980:	4608      	mov	r0, r1
 8026982:	602b      	str	r3, [r5, #0]
 8026984:	f7fe fdde 	bl	8025544 <_isatty>
 8026988:	1c43      	adds	r3, r0, #1
 802698a:	d102      	bne.n	8026992 <_isatty_r+0x1a>
 802698c:	682b      	ldr	r3, [r5, #0]
 802698e:	b103      	cbz	r3, 8026992 <_isatty_r+0x1a>
 8026990:	6023      	str	r3, [r4, #0]
 8026992:	bd38      	pop	{r3, r4, r5, pc}
 8026994:	20000c00 	.word	0x20000c00

08026998 <_lseek_r>:
 8026998:	b538      	push	{r3, r4, r5, lr}
 802699a:	4d07      	ldr	r5, [pc, #28]	; (80269b8 <_lseek_r+0x20>)
 802699c:	4604      	mov	r4, r0
 802699e:	4608      	mov	r0, r1
 80269a0:	4611      	mov	r1, r2
 80269a2:	2200      	movs	r2, #0
 80269a4:	602a      	str	r2, [r5, #0]
 80269a6:	461a      	mov	r2, r3
 80269a8:	f7fe fdce 	bl	8025548 <_lseek>
 80269ac:	1c43      	adds	r3, r0, #1
 80269ae:	d102      	bne.n	80269b6 <_lseek_r+0x1e>
 80269b0:	682b      	ldr	r3, [r5, #0]
 80269b2:	b103      	cbz	r3, 80269b6 <_lseek_r+0x1e>
 80269b4:	6023      	str	r3, [r4, #0]
 80269b6:	bd38      	pop	{r3, r4, r5, pc}
 80269b8:	20000c00 	.word	0x20000c00

080269bc <memmove>:
 80269bc:	4288      	cmp	r0, r1
 80269be:	b510      	push	{r4, lr}
 80269c0:	eb01 0402 	add.w	r4, r1, r2
 80269c4:	d902      	bls.n	80269cc <memmove+0x10>
 80269c6:	4284      	cmp	r4, r0
 80269c8:	4623      	mov	r3, r4
 80269ca:	d807      	bhi.n	80269dc <memmove+0x20>
 80269cc:	1e43      	subs	r3, r0, #1
 80269ce:	42a1      	cmp	r1, r4
 80269d0:	d008      	beq.n	80269e4 <memmove+0x28>
 80269d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80269d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80269da:	e7f8      	b.n	80269ce <memmove+0x12>
 80269dc:	4402      	add	r2, r0
 80269de:	4601      	mov	r1, r0
 80269e0:	428a      	cmp	r2, r1
 80269e2:	d100      	bne.n	80269e6 <memmove+0x2a>
 80269e4:	bd10      	pop	{r4, pc}
 80269e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80269ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80269ee:	e7f7      	b.n	80269e0 <memmove+0x24>

080269f0 <__malloc_lock>:
 80269f0:	4801      	ldr	r0, [pc, #4]	; (80269f8 <__malloc_lock+0x8>)
 80269f2:	f7ff b9cf 	b.w	8025d94 <__retarget_lock_acquire_recursive>
 80269f6:	bf00      	nop
 80269f8:	20000bf8 	.word	0x20000bf8

080269fc <__malloc_unlock>:
 80269fc:	4801      	ldr	r0, [pc, #4]	; (8026a04 <__malloc_unlock+0x8>)
 80269fe:	f7ff b9ca 	b.w	8025d96 <__retarget_lock_release_recursive>
 8026a02:	bf00      	nop
 8026a04:	20000bf8 	.word	0x20000bf8

08026a08 <_realloc_r>:
 8026a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026a0a:	4607      	mov	r7, r0
 8026a0c:	4614      	mov	r4, r2
 8026a0e:	460e      	mov	r6, r1
 8026a10:	b921      	cbnz	r1, 8026a1c <_realloc_r+0x14>
 8026a12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8026a16:	4611      	mov	r1, r2
 8026a18:	f7ff ba7a 	b.w	8025f10 <_malloc_r>
 8026a1c:	b922      	cbnz	r2, 8026a28 <_realloc_r+0x20>
 8026a1e:	f7ff fa27 	bl	8025e70 <_free_r>
 8026a22:	4625      	mov	r5, r4
 8026a24:	4628      	mov	r0, r5
 8026a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026a28:	f000 f86a 	bl	8026b00 <_malloc_usable_size_r>
 8026a2c:	42a0      	cmp	r0, r4
 8026a2e:	d20f      	bcs.n	8026a50 <_realloc_r+0x48>
 8026a30:	4621      	mov	r1, r4
 8026a32:	4638      	mov	r0, r7
 8026a34:	f7ff fa6c 	bl	8025f10 <_malloc_r>
 8026a38:	4605      	mov	r5, r0
 8026a3a:	2800      	cmp	r0, #0
 8026a3c:	d0f2      	beq.n	8026a24 <_realloc_r+0x1c>
 8026a3e:	4631      	mov	r1, r6
 8026a40:	4622      	mov	r2, r4
 8026a42:	f7fe fdad 	bl	80255a0 <memcpy>
 8026a46:	4631      	mov	r1, r6
 8026a48:	4638      	mov	r0, r7
 8026a4a:	f7ff fa11 	bl	8025e70 <_free_r>
 8026a4e:	e7e9      	b.n	8026a24 <_realloc_r+0x1c>
 8026a50:	4635      	mov	r5, r6
 8026a52:	e7e7      	b.n	8026a24 <_realloc_r+0x1c>

08026a54 <_read_r>:
 8026a54:	b538      	push	{r3, r4, r5, lr}
 8026a56:	4d07      	ldr	r5, [pc, #28]	; (8026a74 <_read_r+0x20>)
 8026a58:	4604      	mov	r4, r0
 8026a5a:	4608      	mov	r0, r1
 8026a5c:	4611      	mov	r1, r2
 8026a5e:	2200      	movs	r2, #0
 8026a60:	602a      	str	r2, [r5, #0]
 8026a62:	461a      	mov	r2, r3
 8026a64:	f7fe fd37 	bl	80254d6 <_read>
 8026a68:	1c43      	adds	r3, r0, #1
 8026a6a:	d102      	bne.n	8026a72 <_read_r+0x1e>
 8026a6c:	682b      	ldr	r3, [r5, #0]
 8026a6e:	b103      	cbz	r3, 8026a72 <_read_r+0x1e>
 8026a70:	6023      	str	r3, [r4, #0]
 8026a72:	bd38      	pop	{r3, r4, r5, pc}
 8026a74:	20000c00 	.word	0x20000c00

08026a78 <_raise_r>:
 8026a78:	291f      	cmp	r1, #31
 8026a7a:	b538      	push	{r3, r4, r5, lr}
 8026a7c:	4604      	mov	r4, r0
 8026a7e:	460d      	mov	r5, r1
 8026a80:	d904      	bls.n	8026a8c <_raise_r+0x14>
 8026a82:	2316      	movs	r3, #22
 8026a84:	6003      	str	r3, [r0, #0]
 8026a86:	f04f 30ff 	mov.w	r0, #4294967295
 8026a8a:	bd38      	pop	{r3, r4, r5, pc}
 8026a8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026a8e:	b112      	cbz	r2, 8026a96 <_raise_r+0x1e>
 8026a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026a94:	b94b      	cbnz	r3, 8026aaa <_raise_r+0x32>
 8026a96:	4620      	mov	r0, r4
 8026a98:	f000 f830 	bl	8026afc <_getpid_r>
 8026a9c:	462a      	mov	r2, r5
 8026a9e:	4601      	mov	r1, r0
 8026aa0:	4620      	mov	r0, r4
 8026aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026aa6:	f000 b817 	b.w	8026ad8 <_kill_r>
 8026aaa:	2b01      	cmp	r3, #1
 8026aac:	d00a      	beq.n	8026ac4 <_raise_r+0x4c>
 8026aae:	1c59      	adds	r1, r3, #1
 8026ab0:	d103      	bne.n	8026aba <_raise_r+0x42>
 8026ab2:	2316      	movs	r3, #22
 8026ab4:	6003      	str	r3, [r0, #0]
 8026ab6:	2001      	movs	r0, #1
 8026ab8:	e7e7      	b.n	8026a8a <_raise_r+0x12>
 8026aba:	2400      	movs	r4, #0
 8026abc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026ac0:	4628      	mov	r0, r5
 8026ac2:	4798      	blx	r3
 8026ac4:	2000      	movs	r0, #0
 8026ac6:	e7e0      	b.n	8026a8a <_raise_r+0x12>

08026ac8 <raise>:
 8026ac8:	4b02      	ldr	r3, [pc, #8]	; (8026ad4 <raise+0xc>)
 8026aca:	4601      	mov	r1, r0
 8026acc:	6818      	ldr	r0, [r3, #0]
 8026ace:	f7ff bfd3 	b.w	8026a78 <_raise_r>
 8026ad2:	bf00      	nop
 8026ad4:	20000024 	.word	0x20000024

08026ad8 <_kill_r>:
 8026ad8:	b538      	push	{r3, r4, r5, lr}
 8026ada:	4d07      	ldr	r5, [pc, #28]	; (8026af8 <_kill_r+0x20>)
 8026adc:	2300      	movs	r3, #0
 8026ade:	4604      	mov	r4, r0
 8026ae0:	4608      	mov	r0, r1
 8026ae2:	4611      	mov	r1, r2
 8026ae4:	602b      	str	r3, [r5, #0]
 8026ae6:	f7fe fce8 	bl	80254ba <_kill>
 8026aea:	1c43      	adds	r3, r0, #1
 8026aec:	d102      	bne.n	8026af4 <_kill_r+0x1c>
 8026aee:	682b      	ldr	r3, [r5, #0]
 8026af0:	b103      	cbz	r3, 8026af4 <_kill_r+0x1c>
 8026af2:	6023      	str	r3, [r4, #0]
 8026af4:	bd38      	pop	{r3, r4, r5, pc}
 8026af6:	bf00      	nop
 8026af8:	20000c00 	.word	0x20000c00

08026afc <_getpid_r>:
 8026afc:	f7fe bcdb 	b.w	80254b6 <_getpid>

08026b00 <_malloc_usable_size_r>:
 8026b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026b04:	1f18      	subs	r0, r3, #4
 8026b06:	2b00      	cmp	r3, #0
 8026b08:	bfbc      	itt	lt
 8026b0a:	580b      	ldrlt	r3, [r1, r0]
 8026b0c:	18c0      	addlt	r0, r0, r3
 8026b0e:	4770      	bx	lr

08026b10 <_init>:
 8026b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026b12:	bf00      	nop
 8026b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026b16:	bc08      	pop	{r3}
 8026b18:	469e      	mov	lr, r3
 8026b1a:	4770      	bx	lr

08026b1c <_fini>:
 8026b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026b1e:	bf00      	nop
 8026b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026b22:	bc08      	pop	{r3}
 8026b24:	469e      	mov	lr, r3
 8026b26:	4770      	bx	lr
