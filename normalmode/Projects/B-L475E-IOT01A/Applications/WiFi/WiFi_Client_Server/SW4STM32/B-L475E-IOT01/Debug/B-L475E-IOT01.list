
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d0  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08026960  08026960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027310  08027310  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08027310  08027310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027318  08027318  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08027318  08027318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08027320  08027320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08027328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b7c  20000088  080273b0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00017004  20000c04  080273b0  00020c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029a6f  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d16  00000000  00000000  00049b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001245c  00000000  00000000  0004e83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00060ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d08  00000000  00000000  00062000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bae9  00000000  00000000  00063d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fcb2  00000000  00000000  0008f7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010843d  00000000  00000000  000af4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b78e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000468c  00000000  00000000  001b7934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000088 	.word	0x20000088
 80201ac:	00000000 	.word	0x00000000
 80201b0:	08026944 	.word	0x08026944

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	2000008c 	.word	0x2000008c
 80201cc:	08026944 	.word	0x08026944

080201d0 <strlen>:
 80201d0:	4603      	mov	r3, r0
 80201d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201d6:	2a00      	cmp	r2, #0
 80201d8:	d1fb      	bne.n	80201d2 <strlen+0x2>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	3801      	subs	r0, #1
 80201de:	4770      	bx	lr

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_dmul>:
 8020280:	b570      	push	{r4, r5, r6, lr}
 8020282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 802028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802028e:	bf1d      	ittte	ne
 8020290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020294:	ea94 0f0c 	teqne	r4, ip
 8020298:	ea95 0f0c 	teqne	r5, ip
 802029c:	f000 f8de 	bleq	802045c <__aeabi_dmul+0x1dc>
 80202a0:	442c      	add	r4, r5
 80202a2:	ea81 0603 	eor.w	r6, r1, r3
 80202a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80202aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80202ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80202b2:	bf18      	it	ne
 80202b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80202b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80202bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80202c0:	d038      	beq.n	8020334 <__aeabi_dmul+0xb4>
 80202c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80202c6:	f04f 0500 	mov.w	r5, #0
 80202ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80202ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80202d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80202d6:	f04f 0600 	mov.w	r6, #0
 80202da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80202de:	f09c 0f00 	teq	ip, #0
 80202e2:	bf18      	it	ne
 80202e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80202e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80202ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80202f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80202f4:	d204      	bcs.n	8020300 <__aeabi_dmul+0x80>
 80202f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80202fa:	416d      	adcs	r5, r5
 80202fc:	eb46 0606 	adc.w	r6, r6, r6
 8020300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8020304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 802030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8020314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020318:	bf88      	it	hi
 802031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 802031e:	d81e      	bhi.n	802035e <__aeabi_dmul+0xde>
 8020320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8020324:	bf08      	it	eq
 8020326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 802032a:	f150 0000 	adcs.w	r0, r0, #0
 802032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8020332:	bd70      	pop	{r4, r5, r6, pc}
 8020334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020338:	ea46 0101 	orr.w	r1, r6, r1
 802033c:	ea40 0002 	orr.w	r0, r0, r2
 8020340:	ea81 0103 	eor.w	r1, r1, r3
 8020344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020348:	bfc2      	ittt	gt
 802034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 802034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020352:	bd70      	popgt	{r4, r5, r6, pc}
 8020354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020358:	f04f 0e00 	mov.w	lr, #0
 802035c:	3c01      	subs	r4, #1
 802035e:	f300 80ab 	bgt.w	80204b8 <__aeabi_dmul+0x238>
 8020362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8020366:	bfde      	ittt	le
 8020368:	2000      	movle	r0, #0
 802036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 802036e:	bd70      	pople	{r4, r5, r6, pc}
 8020370:	f1c4 0400 	rsb	r4, r4, #0
 8020374:	3c20      	subs	r4, #32
 8020376:	da35      	bge.n	80203e4 <__aeabi_dmul+0x164>
 8020378:	340c      	adds	r4, #12
 802037a:	dc1b      	bgt.n	80203b4 <__aeabi_dmul+0x134>
 802037c:	f104 0414 	add.w	r4, r4, #20
 8020380:	f1c4 0520 	rsb	r5, r4, #32
 8020384:	fa00 f305 	lsl.w	r3, r0, r5
 8020388:	fa20 f004 	lsr.w	r0, r0, r4
 802038c:	fa01 f205 	lsl.w	r2, r1, r5
 8020390:	ea40 0002 	orr.w	r0, r0, r2
 8020394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80203a0:	fa21 f604 	lsr.w	r6, r1, r4
 80203a4:	eb42 0106 	adc.w	r1, r2, r6
 80203a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80203ac:	bf08      	it	eq
 80203ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80203b2:	bd70      	pop	{r4, r5, r6, pc}
 80203b4:	f1c4 040c 	rsb	r4, r4, #12
 80203b8:	f1c4 0520 	rsb	r5, r4, #32
 80203bc:	fa00 f304 	lsl.w	r3, r0, r4
 80203c0:	fa20 f005 	lsr.w	r0, r0, r5
 80203c4:	fa01 f204 	lsl.w	r2, r1, r4
 80203c8:	ea40 0002 	orr.w	r0, r0, r2
 80203cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80203d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80203d4:	f141 0100 	adc.w	r1, r1, #0
 80203d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80203dc:	bf08      	it	eq
 80203de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80203e2:	bd70      	pop	{r4, r5, r6, pc}
 80203e4:	f1c4 0520 	rsb	r5, r4, #32
 80203e8:	fa00 f205 	lsl.w	r2, r0, r5
 80203ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80203f0:	fa20 f304 	lsr.w	r3, r0, r4
 80203f4:	fa01 f205 	lsl.w	r2, r1, r5
 80203f8:	ea43 0302 	orr.w	r3, r3, r2
 80203fc:	fa21 f004 	lsr.w	r0, r1, r4
 8020400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020404:	fa21 f204 	lsr.w	r2, r1, r4
 8020408:	ea20 0002 	bic.w	r0, r0, r2
 802040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020414:	bf08      	it	eq
 8020416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802041a:	bd70      	pop	{r4, r5, r6, pc}
 802041c:	f094 0f00 	teq	r4, #0
 8020420:	d10f      	bne.n	8020442 <__aeabi_dmul+0x1c2>
 8020422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8020426:	0040      	lsls	r0, r0, #1
 8020428:	eb41 0101 	adc.w	r1, r1, r1
 802042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020430:	bf08      	it	eq
 8020432:	3c01      	subeq	r4, #1
 8020434:	d0f7      	beq.n	8020426 <__aeabi_dmul+0x1a6>
 8020436:	ea41 0106 	orr.w	r1, r1, r6
 802043a:	f095 0f00 	teq	r5, #0
 802043e:	bf18      	it	ne
 8020440:	4770      	bxne	lr
 8020442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8020446:	0052      	lsls	r2, r2, #1
 8020448:	eb43 0303 	adc.w	r3, r3, r3
 802044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020450:	bf08      	it	eq
 8020452:	3d01      	subeq	r5, #1
 8020454:	d0f7      	beq.n	8020446 <__aeabi_dmul+0x1c6>
 8020456:	ea43 0306 	orr.w	r3, r3, r6
 802045a:	4770      	bx	lr
 802045c:	ea94 0f0c 	teq	r4, ip
 8020460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8020464:	bf18      	it	ne
 8020466:	ea95 0f0c 	teqne	r5, ip
 802046a:	d00c      	beq.n	8020486 <__aeabi_dmul+0x206>
 802046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020470:	bf18      	it	ne
 8020472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020476:	d1d1      	bne.n	802041c <__aeabi_dmul+0x19c>
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020480:	f04f 0000 	mov.w	r0, #0
 8020484:	bd70      	pop	{r4, r5, r6, pc}
 8020486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 802048a:	bf06      	itte	eq
 802048c:	4610      	moveq	r0, r2
 802048e:	4619      	moveq	r1, r3
 8020490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020494:	d019      	beq.n	80204ca <__aeabi_dmul+0x24a>
 8020496:	ea94 0f0c 	teq	r4, ip
 802049a:	d102      	bne.n	80204a2 <__aeabi_dmul+0x222>
 802049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80204a0:	d113      	bne.n	80204ca <__aeabi_dmul+0x24a>
 80204a2:	ea95 0f0c 	teq	r5, ip
 80204a6:	d105      	bne.n	80204b4 <__aeabi_dmul+0x234>
 80204a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80204ac:	bf1c      	itt	ne
 80204ae:	4610      	movne	r0, r2
 80204b0:	4619      	movne	r1, r3
 80204b2:	d10a      	bne.n	80204ca <__aeabi_dmul+0x24a>
 80204b4:	ea81 0103 	eor.w	r1, r1, r3
 80204b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80204bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80204c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80204c4:	f04f 0000 	mov.w	r0, #0
 80204c8:	bd70      	pop	{r4, r5, r6, pc}
 80204ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80204ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80204d2:	bd70      	pop	{r4, r5, r6, pc}

080204d4 <__aeabi_drsub>:
 80204d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80204d8:	e002      	b.n	80204e0 <__adddf3>
 80204da:	bf00      	nop

080204dc <__aeabi_dsub>:
 80204dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080204e0 <__adddf3>:
 80204e0:	b530      	push	{r4, r5, lr}
 80204e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80204e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80204ea:	ea94 0f05 	teq	r4, r5
 80204ee:	bf08      	it	eq
 80204f0:	ea90 0f02 	teqeq	r0, r2
 80204f4:	bf1f      	itttt	ne
 80204f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80204fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80204fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8020502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020506:	f000 80e2 	beq.w	80206ce <__adddf3+0x1ee>
 802050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8020512:	bfb8      	it	lt
 8020514:	426d      	neglt	r5, r5
 8020516:	dd0c      	ble.n	8020532 <__adddf3+0x52>
 8020518:	442c      	add	r4, r5
 802051a:	ea80 0202 	eor.w	r2, r0, r2
 802051e:	ea81 0303 	eor.w	r3, r1, r3
 8020522:	ea82 0000 	eor.w	r0, r2, r0
 8020526:	ea83 0101 	eor.w	r1, r3, r1
 802052a:	ea80 0202 	eor.w	r2, r0, r2
 802052e:	ea81 0303 	eor.w	r3, r1, r3
 8020532:	2d36      	cmp	r5, #54	; 0x36
 8020534:	bf88      	it	hi
 8020536:	bd30      	pophi	{r4, r5, pc}
 8020538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 802053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8020540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020548:	d002      	beq.n	8020550 <__adddf3+0x70>
 802054a:	4240      	negs	r0, r0
 802054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 802055c:	d002      	beq.n	8020564 <__adddf3+0x84>
 802055e:	4252      	negs	r2, r2
 8020560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020564:	ea94 0f05 	teq	r4, r5
 8020568:	f000 80a7 	beq.w	80206ba <__adddf3+0x1da>
 802056c:	f1a4 0401 	sub.w	r4, r4, #1
 8020570:	f1d5 0e20 	rsbs	lr, r5, #32
 8020574:	db0d      	blt.n	8020592 <__adddf3+0xb2>
 8020576:	fa02 fc0e 	lsl.w	ip, r2, lr
 802057a:	fa22 f205 	lsr.w	r2, r2, r5
 802057e:	1880      	adds	r0, r0, r2
 8020580:	f141 0100 	adc.w	r1, r1, #0
 8020584:	fa03 f20e 	lsl.w	r2, r3, lr
 8020588:	1880      	adds	r0, r0, r2
 802058a:	fa43 f305 	asr.w	r3, r3, r5
 802058e:	4159      	adcs	r1, r3
 8020590:	e00e      	b.n	80205b0 <__adddf3+0xd0>
 8020592:	f1a5 0520 	sub.w	r5, r5, #32
 8020596:	f10e 0e20 	add.w	lr, lr, #32
 802059a:	2a01      	cmp	r2, #1
 802059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80205a0:	bf28      	it	cs
 80205a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80205a6:	fa43 f305 	asr.w	r3, r3, r5
 80205aa:	18c0      	adds	r0, r0, r3
 80205ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80205b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80205b4:	d507      	bpl.n	80205c6 <__adddf3+0xe6>
 80205b6:	f04f 0e00 	mov.w	lr, #0
 80205ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80205be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80205c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80205c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80205ca:	d31b      	bcc.n	8020604 <__adddf3+0x124>
 80205cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80205d0:	d30c      	bcc.n	80205ec <__adddf3+0x10c>
 80205d2:	0849      	lsrs	r1, r1, #1
 80205d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80205d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80205dc:	f104 0401 	add.w	r4, r4, #1
 80205e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80205e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80205e8:	f080 809a 	bcs.w	8020720 <__adddf3+0x240>
 80205ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80205f0:	bf08      	it	eq
 80205f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80205f6:	f150 0000 	adcs.w	r0, r0, #0
 80205fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80205fe:	ea41 0105 	orr.w	r1, r1, r5
 8020602:	bd30      	pop	{r4, r5, pc}
 8020604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020608:	4140      	adcs	r0, r0
 802060a:	eb41 0101 	adc.w	r1, r1, r1
 802060e:	3c01      	subs	r4, #1
 8020610:	bf28      	it	cs
 8020612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8020616:	d2e9      	bcs.n	80205ec <__adddf3+0x10c>
 8020618:	f091 0f00 	teq	r1, #0
 802061c:	bf04      	itt	eq
 802061e:	4601      	moveq	r1, r0
 8020620:	2000      	moveq	r0, #0
 8020622:	fab1 f381 	clz	r3, r1
 8020626:	bf08      	it	eq
 8020628:	3320      	addeq	r3, #32
 802062a:	f1a3 030b 	sub.w	r3, r3, #11
 802062e:	f1b3 0220 	subs.w	r2, r3, #32
 8020632:	da0c      	bge.n	802064e <__adddf3+0x16e>
 8020634:	320c      	adds	r2, #12
 8020636:	dd08      	ble.n	802064a <__adddf3+0x16a>
 8020638:	f102 0c14 	add.w	ip, r2, #20
 802063c:	f1c2 020c 	rsb	r2, r2, #12
 8020640:	fa01 f00c 	lsl.w	r0, r1, ip
 8020644:	fa21 f102 	lsr.w	r1, r1, r2
 8020648:	e00c      	b.n	8020664 <__adddf3+0x184>
 802064a:	f102 0214 	add.w	r2, r2, #20
 802064e:	bfd8      	it	le
 8020650:	f1c2 0c20 	rsble	ip, r2, #32
 8020654:	fa01 f102 	lsl.w	r1, r1, r2
 8020658:	fa20 fc0c 	lsr.w	ip, r0, ip
 802065c:	bfdc      	itt	le
 802065e:	ea41 010c 	orrle.w	r1, r1, ip
 8020662:	4090      	lslle	r0, r2
 8020664:	1ae4      	subs	r4, r4, r3
 8020666:	bfa2      	ittt	ge
 8020668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 802066c:	4329      	orrge	r1, r5
 802066e:	bd30      	popge	{r4, r5, pc}
 8020670:	ea6f 0404 	mvn.w	r4, r4
 8020674:	3c1f      	subs	r4, #31
 8020676:	da1c      	bge.n	80206b2 <__adddf3+0x1d2>
 8020678:	340c      	adds	r4, #12
 802067a:	dc0e      	bgt.n	802069a <__adddf3+0x1ba>
 802067c:	f104 0414 	add.w	r4, r4, #20
 8020680:	f1c4 0220 	rsb	r2, r4, #32
 8020684:	fa20 f004 	lsr.w	r0, r0, r4
 8020688:	fa01 f302 	lsl.w	r3, r1, r2
 802068c:	ea40 0003 	orr.w	r0, r0, r3
 8020690:	fa21 f304 	lsr.w	r3, r1, r4
 8020694:	ea45 0103 	orr.w	r1, r5, r3
 8020698:	bd30      	pop	{r4, r5, pc}
 802069a:	f1c4 040c 	rsb	r4, r4, #12
 802069e:	f1c4 0220 	rsb	r2, r4, #32
 80206a2:	fa20 f002 	lsr.w	r0, r0, r2
 80206a6:	fa01 f304 	lsl.w	r3, r1, r4
 80206aa:	ea40 0003 	orr.w	r0, r0, r3
 80206ae:	4629      	mov	r1, r5
 80206b0:	bd30      	pop	{r4, r5, pc}
 80206b2:	fa21 f004 	lsr.w	r0, r1, r4
 80206b6:	4629      	mov	r1, r5
 80206b8:	bd30      	pop	{r4, r5, pc}
 80206ba:	f094 0f00 	teq	r4, #0
 80206be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80206c2:	bf06      	itte	eq
 80206c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80206c8:	3401      	addeq	r4, #1
 80206ca:	3d01      	subne	r5, #1
 80206cc:	e74e      	b.n	802056c <__adddf3+0x8c>
 80206ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80206d2:	bf18      	it	ne
 80206d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80206d8:	d029      	beq.n	802072e <__adddf3+0x24e>
 80206da:	ea94 0f05 	teq	r4, r5
 80206de:	bf08      	it	eq
 80206e0:	ea90 0f02 	teqeq	r0, r2
 80206e4:	d005      	beq.n	80206f2 <__adddf3+0x212>
 80206e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80206ea:	bf04      	itt	eq
 80206ec:	4619      	moveq	r1, r3
 80206ee:	4610      	moveq	r0, r2
 80206f0:	bd30      	pop	{r4, r5, pc}
 80206f2:	ea91 0f03 	teq	r1, r3
 80206f6:	bf1e      	ittt	ne
 80206f8:	2100      	movne	r1, #0
 80206fa:	2000      	movne	r0, #0
 80206fc:	bd30      	popne	{r4, r5, pc}
 80206fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8020702:	d105      	bne.n	8020710 <__adddf3+0x230>
 8020704:	0040      	lsls	r0, r0, #1
 8020706:	4149      	adcs	r1, r1
 8020708:	bf28      	it	cs
 802070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802070e:	bd30      	pop	{r4, r5, pc}
 8020710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020714:	bf3c      	itt	cc
 8020716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 802071a:	bd30      	popcc	{r4, r5, pc}
 802071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020728:	f04f 0000 	mov.w	r0, #0
 802072c:	bd30      	pop	{r4, r5, pc}
 802072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8020732:	bf1a      	itte	ne
 8020734:	4619      	movne	r1, r3
 8020736:	4610      	movne	r0, r2
 8020738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 802073c:	bf1c      	itt	ne
 802073e:	460b      	movne	r3, r1
 8020740:	4602      	movne	r2, r0
 8020742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020746:	bf06      	itte	eq
 8020748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 802074c:	ea91 0f03 	teqeq	r1, r3
 8020750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020754:	bd30      	pop	{r4, r5, pc}
 8020756:	bf00      	nop

08020758 <__aeabi_ui2d>:
 8020758:	f090 0f00 	teq	r0, #0
 802075c:	bf04      	itt	eq
 802075e:	2100      	moveq	r1, #0
 8020760:	4770      	bxeq	lr
 8020762:	b530      	push	{r4, r5, lr}
 8020764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802076c:	f04f 0500 	mov.w	r5, #0
 8020770:	f04f 0100 	mov.w	r1, #0
 8020774:	e750      	b.n	8020618 <__adddf3+0x138>
 8020776:	bf00      	nop

08020778 <__aeabi_i2d>:
 8020778:	f090 0f00 	teq	r0, #0
 802077c:	bf04      	itt	eq
 802077e:	2100      	moveq	r1, #0
 8020780:	4770      	bxeq	lr
 8020782:	b530      	push	{r4, r5, lr}
 8020784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8020790:	bf48      	it	mi
 8020792:	4240      	negmi	r0, r0
 8020794:	f04f 0100 	mov.w	r1, #0
 8020798:	e73e      	b.n	8020618 <__adddf3+0x138>
 802079a:	bf00      	nop

0802079c <__aeabi_f2d>:
 802079c:	0042      	lsls	r2, r0, #1
 802079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80207a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80207a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80207aa:	bf1f      	itttt	ne
 80207ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80207b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80207b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80207b8:	4770      	bxne	lr
 80207ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80207be:	bf08      	it	eq
 80207c0:	4770      	bxeq	lr
 80207c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80207c6:	bf04      	itt	eq
 80207c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80207cc:	4770      	bxeq	lr
 80207ce:	b530      	push	{r4, r5, lr}
 80207d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80207d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80207d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80207dc:	e71c      	b.n	8020618 <__adddf3+0x138>
 80207de:	bf00      	nop

080207e0 <__aeabi_ul2d>:
 80207e0:	ea50 0201 	orrs.w	r2, r0, r1
 80207e4:	bf08      	it	eq
 80207e6:	4770      	bxeq	lr
 80207e8:	b530      	push	{r4, r5, lr}
 80207ea:	f04f 0500 	mov.w	r5, #0
 80207ee:	e00a      	b.n	8020806 <__aeabi_l2d+0x16>

080207f0 <__aeabi_l2d>:
 80207f0:	ea50 0201 	orrs.w	r2, r0, r1
 80207f4:	bf08      	it	eq
 80207f6:	4770      	bxeq	lr
 80207f8:	b530      	push	{r4, r5, lr}
 80207fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80207fe:	d502      	bpl.n	8020806 <__aeabi_l2d+0x16>
 8020800:	4240      	negs	r0, r0
 8020802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 802080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8020812:	f43f aed8 	beq.w	80205c6 <__adddf3+0xe6>
 8020816:	f04f 0203 	mov.w	r2, #3
 802081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802081e:	bf18      	it	ne
 8020820:	3203      	addne	r2, #3
 8020822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020826:	bf18      	it	ne
 8020828:	3203      	addne	r2, #3
 802082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802082e:	f1c2 0320 	rsb	r3, r2, #32
 8020832:	fa00 fc03 	lsl.w	ip, r0, r3
 8020836:	fa20 f002 	lsr.w	r0, r0, r2
 802083a:	fa01 fe03 	lsl.w	lr, r1, r3
 802083e:	ea40 000e 	orr.w	r0, r0, lr
 8020842:	fa21 f102 	lsr.w	r1, r1, r2
 8020846:	4414      	add	r4, r2
 8020848:	e6bd      	b.n	80205c6 <__adddf3+0xe6>
 802084a:	bf00      	nop

0802084c <__aeabi_d2iz>:
 802084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020854:	d215      	bcs.n	8020882 <__aeabi_d2iz+0x36>
 8020856:	d511      	bpl.n	802087c <__aeabi_d2iz+0x30>
 8020858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 802085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020860:	d912      	bls.n	8020888 <__aeabi_d2iz+0x3c>
 8020862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 802086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020872:	fa23 f002 	lsr.w	r0, r3, r2
 8020876:	bf18      	it	ne
 8020878:	4240      	negne	r0, r0
 802087a:	4770      	bx	lr
 802087c:	f04f 0000 	mov.w	r0, #0
 8020880:	4770      	bx	lr
 8020882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020886:	d105      	bne.n	8020894 <__aeabi_d2iz+0x48>
 8020888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 802088c:	bf08      	it	eq
 802088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020892:	4770      	bx	lr
 8020894:	f04f 0000 	mov.w	r0, #0
 8020898:	4770      	bx	lr
 802089a:	bf00      	nop

0802089c <__aeabi_uldivmod>:
 802089c:	b953      	cbnz	r3, 80208b4 <__aeabi_uldivmod+0x18>
 802089e:	b94a      	cbnz	r2, 80208b4 <__aeabi_uldivmod+0x18>
 80208a0:	2900      	cmp	r1, #0
 80208a2:	bf08      	it	eq
 80208a4:	2800      	cmpeq	r0, #0
 80208a6:	bf1c      	itt	ne
 80208a8:	f04f 31ff 	movne.w	r1, #4294967295
 80208ac:	f04f 30ff 	movne.w	r0, #4294967295
 80208b0:	f000 b96e 	b.w	8020b90 <__aeabi_idiv0>
 80208b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80208b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80208bc:	f000 f806 	bl	80208cc <__udivmoddi4>
 80208c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80208c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80208c8:	b004      	add	sp, #16
 80208ca:	4770      	bx	lr

080208cc <__udivmoddi4>:
 80208cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80208d0:	9d08      	ldr	r5, [sp, #32]
 80208d2:	4604      	mov	r4, r0
 80208d4:	468c      	mov	ip, r1
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	f040 8083 	bne.w	80209e2 <__udivmoddi4+0x116>
 80208dc:	428a      	cmp	r2, r1
 80208de:	4617      	mov	r7, r2
 80208e0:	d947      	bls.n	8020972 <__udivmoddi4+0xa6>
 80208e2:	fab2 f282 	clz	r2, r2
 80208e6:	b142      	cbz	r2, 80208fa <__udivmoddi4+0x2e>
 80208e8:	f1c2 0020 	rsb	r0, r2, #32
 80208ec:	fa24 f000 	lsr.w	r0, r4, r0
 80208f0:	4091      	lsls	r1, r2
 80208f2:	4097      	lsls	r7, r2
 80208f4:	ea40 0c01 	orr.w	ip, r0, r1
 80208f8:	4094      	lsls	r4, r2
 80208fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80208fe:	0c23      	lsrs	r3, r4, #16
 8020900:	fbbc f6f8 	udiv	r6, ip, r8
 8020904:	fa1f fe87 	uxth.w	lr, r7
 8020908:	fb08 c116 	mls	r1, r8, r6, ip
 802090c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020910:	fb06 f10e 	mul.w	r1, r6, lr
 8020914:	4299      	cmp	r1, r3
 8020916:	d909      	bls.n	802092c <__udivmoddi4+0x60>
 8020918:	18fb      	adds	r3, r7, r3
 802091a:	f106 30ff 	add.w	r0, r6, #4294967295
 802091e:	f080 8119 	bcs.w	8020b54 <__udivmoddi4+0x288>
 8020922:	4299      	cmp	r1, r3
 8020924:	f240 8116 	bls.w	8020b54 <__udivmoddi4+0x288>
 8020928:	3e02      	subs	r6, #2
 802092a:	443b      	add	r3, r7
 802092c:	1a5b      	subs	r3, r3, r1
 802092e:	b2a4      	uxth	r4, r4
 8020930:	fbb3 f0f8 	udiv	r0, r3, r8
 8020934:	fb08 3310 	mls	r3, r8, r0, r3
 8020938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 802093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8020940:	45a6      	cmp	lr, r4
 8020942:	d909      	bls.n	8020958 <__udivmoddi4+0x8c>
 8020944:	193c      	adds	r4, r7, r4
 8020946:	f100 33ff 	add.w	r3, r0, #4294967295
 802094a:	f080 8105 	bcs.w	8020b58 <__udivmoddi4+0x28c>
 802094e:	45a6      	cmp	lr, r4
 8020950:	f240 8102 	bls.w	8020b58 <__udivmoddi4+0x28c>
 8020954:	3802      	subs	r0, #2
 8020956:	443c      	add	r4, r7
 8020958:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802095c:	eba4 040e 	sub.w	r4, r4, lr
 8020960:	2600      	movs	r6, #0
 8020962:	b11d      	cbz	r5, 802096c <__udivmoddi4+0xa0>
 8020964:	40d4      	lsrs	r4, r2
 8020966:	2300      	movs	r3, #0
 8020968:	e9c5 4300 	strd	r4, r3, [r5]
 802096c:	4631      	mov	r1, r6
 802096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020972:	b902      	cbnz	r2, 8020976 <__udivmoddi4+0xaa>
 8020974:	deff      	udf	#255	; 0xff
 8020976:	fab2 f282 	clz	r2, r2
 802097a:	2a00      	cmp	r2, #0
 802097c:	d150      	bne.n	8020a20 <__udivmoddi4+0x154>
 802097e:	1bcb      	subs	r3, r1, r7
 8020980:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020984:	fa1f f887 	uxth.w	r8, r7
 8020988:	2601      	movs	r6, #1
 802098a:	fbb3 fcfe 	udiv	ip, r3, lr
 802098e:	0c21      	lsrs	r1, r4, #16
 8020990:	fb0e 331c 	mls	r3, lr, ip, r3
 8020994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020998:	fb08 f30c 	mul.w	r3, r8, ip
 802099c:	428b      	cmp	r3, r1
 802099e:	d907      	bls.n	80209b0 <__udivmoddi4+0xe4>
 80209a0:	1879      	adds	r1, r7, r1
 80209a2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80209a6:	d202      	bcs.n	80209ae <__udivmoddi4+0xe2>
 80209a8:	428b      	cmp	r3, r1
 80209aa:	f200 80e9 	bhi.w	8020b80 <__udivmoddi4+0x2b4>
 80209ae:	4684      	mov	ip, r0
 80209b0:	1ac9      	subs	r1, r1, r3
 80209b2:	b2a3      	uxth	r3, r4
 80209b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80209b8:	fb0e 1110 	mls	r1, lr, r0, r1
 80209bc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80209c0:	fb08 f800 	mul.w	r8, r8, r0
 80209c4:	45a0      	cmp	r8, r4
 80209c6:	d907      	bls.n	80209d8 <__udivmoddi4+0x10c>
 80209c8:	193c      	adds	r4, r7, r4
 80209ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80209ce:	d202      	bcs.n	80209d6 <__udivmoddi4+0x10a>
 80209d0:	45a0      	cmp	r8, r4
 80209d2:	f200 80d9 	bhi.w	8020b88 <__udivmoddi4+0x2bc>
 80209d6:	4618      	mov	r0, r3
 80209d8:	eba4 0408 	sub.w	r4, r4, r8
 80209dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80209e0:	e7bf      	b.n	8020962 <__udivmoddi4+0x96>
 80209e2:	428b      	cmp	r3, r1
 80209e4:	d909      	bls.n	80209fa <__udivmoddi4+0x12e>
 80209e6:	2d00      	cmp	r5, #0
 80209e8:	f000 80b1 	beq.w	8020b4e <__udivmoddi4+0x282>
 80209ec:	2600      	movs	r6, #0
 80209ee:	e9c5 0100 	strd	r0, r1, [r5]
 80209f2:	4630      	mov	r0, r6
 80209f4:	4631      	mov	r1, r6
 80209f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80209fa:	fab3 f683 	clz	r6, r3
 80209fe:	2e00      	cmp	r6, #0
 8020a00:	d14a      	bne.n	8020a98 <__udivmoddi4+0x1cc>
 8020a02:	428b      	cmp	r3, r1
 8020a04:	d302      	bcc.n	8020a0c <__udivmoddi4+0x140>
 8020a06:	4282      	cmp	r2, r0
 8020a08:	f200 80b8 	bhi.w	8020b7c <__udivmoddi4+0x2b0>
 8020a0c:	1a84      	subs	r4, r0, r2
 8020a0e:	eb61 0103 	sbc.w	r1, r1, r3
 8020a12:	2001      	movs	r0, #1
 8020a14:	468c      	mov	ip, r1
 8020a16:	2d00      	cmp	r5, #0
 8020a18:	d0a8      	beq.n	802096c <__udivmoddi4+0xa0>
 8020a1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8020a1e:	e7a5      	b.n	802096c <__udivmoddi4+0xa0>
 8020a20:	f1c2 0320 	rsb	r3, r2, #32
 8020a24:	fa20 f603 	lsr.w	r6, r0, r3
 8020a28:	4097      	lsls	r7, r2
 8020a2a:	fa01 f002 	lsl.w	r0, r1, r2
 8020a2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020a32:	40d9      	lsrs	r1, r3
 8020a34:	4330      	orrs	r0, r6
 8020a36:	0c03      	lsrs	r3, r0, #16
 8020a38:	fbb1 f6fe 	udiv	r6, r1, lr
 8020a3c:	fa1f f887 	uxth.w	r8, r7
 8020a40:	fb0e 1116 	mls	r1, lr, r6, r1
 8020a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020a48:	fb06 f108 	mul.w	r1, r6, r8
 8020a4c:	4299      	cmp	r1, r3
 8020a4e:	fa04 f402 	lsl.w	r4, r4, r2
 8020a52:	d909      	bls.n	8020a68 <__udivmoddi4+0x19c>
 8020a54:	18fb      	adds	r3, r7, r3
 8020a56:	f106 3cff 	add.w	ip, r6, #4294967295
 8020a5a:	f080 808d 	bcs.w	8020b78 <__udivmoddi4+0x2ac>
 8020a5e:	4299      	cmp	r1, r3
 8020a60:	f240 808a 	bls.w	8020b78 <__udivmoddi4+0x2ac>
 8020a64:	3e02      	subs	r6, #2
 8020a66:	443b      	add	r3, r7
 8020a68:	1a5b      	subs	r3, r3, r1
 8020a6a:	b281      	uxth	r1, r0
 8020a6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a70:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020a78:	fb00 f308 	mul.w	r3, r0, r8
 8020a7c:	428b      	cmp	r3, r1
 8020a7e:	d907      	bls.n	8020a90 <__udivmoddi4+0x1c4>
 8020a80:	1879      	adds	r1, r7, r1
 8020a82:	f100 3cff 	add.w	ip, r0, #4294967295
 8020a86:	d273      	bcs.n	8020b70 <__udivmoddi4+0x2a4>
 8020a88:	428b      	cmp	r3, r1
 8020a8a:	d971      	bls.n	8020b70 <__udivmoddi4+0x2a4>
 8020a8c:	3802      	subs	r0, #2
 8020a8e:	4439      	add	r1, r7
 8020a90:	1acb      	subs	r3, r1, r3
 8020a92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8020a96:	e778      	b.n	802098a <__udivmoddi4+0xbe>
 8020a98:	f1c6 0c20 	rsb	ip, r6, #32
 8020a9c:	fa03 f406 	lsl.w	r4, r3, r6
 8020aa0:	fa22 f30c 	lsr.w	r3, r2, ip
 8020aa4:	431c      	orrs	r4, r3
 8020aa6:	fa20 f70c 	lsr.w	r7, r0, ip
 8020aaa:	fa01 f306 	lsl.w	r3, r1, r6
 8020aae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8020ab2:	fa21 f10c 	lsr.w	r1, r1, ip
 8020ab6:	431f      	orrs	r7, r3
 8020ab8:	0c3b      	lsrs	r3, r7, #16
 8020aba:	fbb1 f9fe 	udiv	r9, r1, lr
 8020abe:	fa1f f884 	uxth.w	r8, r4
 8020ac2:	fb0e 1119 	mls	r1, lr, r9, r1
 8020ac6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8020aca:	fb09 fa08 	mul.w	sl, r9, r8
 8020ace:	458a      	cmp	sl, r1
 8020ad0:	fa02 f206 	lsl.w	r2, r2, r6
 8020ad4:	fa00 f306 	lsl.w	r3, r0, r6
 8020ad8:	d908      	bls.n	8020aec <__udivmoddi4+0x220>
 8020ada:	1861      	adds	r1, r4, r1
 8020adc:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ae0:	d248      	bcs.n	8020b74 <__udivmoddi4+0x2a8>
 8020ae2:	458a      	cmp	sl, r1
 8020ae4:	d946      	bls.n	8020b74 <__udivmoddi4+0x2a8>
 8020ae6:	f1a9 0902 	sub.w	r9, r9, #2
 8020aea:	4421      	add	r1, r4
 8020aec:	eba1 010a 	sub.w	r1, r1, sl
 8020af0:	b2bf      	uxth	r7, r7
 8020af2:	fbb1 f0fe 	udiv	r0, r1, lr
 8020af6:	fb0e 1110 	mls	r1, lr, r0, r1
 8020afa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8020afe:	fb00 f808 	mul.w	r8, r0, r8
 8020b02:	45b8      	cmp	r8, r7
 8020b04:	d907      	bls.n	8020b16 <__udivmoddi4+0x24a>
 8020b06:	19e7      	adds	r7, r4, r7
 8020b08:	f100 31ff 	add.w	r1, r0, #4294967295
 8020b0c:	d22e      	bcs.n	8020b6c <__udivmoddi4+0x2a0>
 8020b0e:	45b8      	cmp	r8, r7
 8020b10:	d92c      	bls.n	8020b6c <__udivmoddi4+0x2a0>
 8020b12:	3802      	subs	r0, #2
 8020b14:	4427      	add	r7, r4
 8020b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020b1a:	eba7 0708 	sub.w	r7, r7, r8
 8020b1e:	fba0 8902 	umull	r8, r9, r0, r2
 8020b22:	454f      	cmp	r7, r9
 8020b24:	46c6      	mov	lr, r8
 8020b26:	4649      	mov	r1, r9
 8020b28:	d31a      	bcc.n	8020b60 <__udivmoddi4+0x294>
 8020b2a:	d017      	beq.n	8020b5c <__udivmoddi4+0x290>
 8020b2c:	b15d      	cbz	r5, 8020b46 <__udivmoddi4+0x27a>
 8020b2e:	ebb3 020e 	subs.w	r2, r3, lr
 8020b32:	eb67 0701 	sbc.w	r7, r7, r1
 8020b36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8020b3a:	40f2      	lsrs	r2, r6
 8020b3c:	ea4c 0202 	orr.w	r2, ip, r2
 8020b40:	40f7      	lsrs	r7, r6
 8020b42:	e9c5 2700 	strd	r2, r7, [r5]
 8020b46:	2600      	movs	r6, #0
 8020b48:	4631      	mov	r1, r6
 8020b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b4e:	462e      	mov	r6, r5
 8020b50:	4628      	mov	r0, r5
 8020b52:	e70b      	b.n	802096c <__udivmoddi4+0xa0>
 8020b54:	4606      	mov	r6, r0
 8020b56:	e6e9      	b.n	802092c <__udivmoddi4+0x60>
 8020b58:	4618      	mov	r0, r3
 8020b5a:	e6fd      	b.n	8020958 <__udivmoddi4+0x8c>
 8020b5c:	4543      	cmp	r3, r8
 8020b5e:	d2e5      	bcs.n	8020b2c <__udivmoddi4+0x260>
 8020b60:	ebb8 0e02 	subs.w	lr, r8, r2
 8020b64:	eb69 0104 	sbc.w	r1, r9, r4
 8020b68:	3801      	subs	r0, #1
 8020b6a:	e7df      	b.n	8020b2c <__udivmoddi4+0x260>
 8020b6c:	4608      	mov	r0, r1
 8020b6e:	e7d2      	b.n	8020b16 <__udivmoddi4+0x24a>
 8020b70:	4660      	mov	r0, ip
 8020b72:	e78d      	b.n	8020a90 <__udivmoddi4+0x1c4>
 8020b74:	4681      	mov	r9, r0
 8020b76:	e7b9      	b.n	8020aec <__udivmoddi4+0x220>
 8020b78:	4666      	mov	r6, ip
 8020b7a:	e775      	b.n	8020a68 <__udivmoddi4+0x19c>
 8020b7c:	4630      	mov	r0, r6
 8020b7e:	e74a      	b.n	8020a16 <__udivmoddi4+0x14a>
 8020b80:	f1ac 0c02 	sub.w	ip, ip, #2
 8020b84:	4439      	add	r1, r7
 8020b86:	e713      	b.n	80209b0 <__udivmoddi4+0xe4>
 8020b88:	3802      	subs	r0, #2
 8020b8a:	443c      	add	r4, r7
 8020b8c:	e724      	b.n	80209d8 <__udivmoddi4+0x10c>
 8020b8e:	bf00      	nop

08020b90 <__aeabi_idiv0>:
 8020b90:	4770      	bx	lr
 8020b92:	bf00      	nop

08020b94 <Potato_enter_standby>:
    HAL_SuspendTick();
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}

void Potato_enter_standby(void){
    __HAL_RCC_PWR_CLK_ENABLE();
 8020b94:	4b0b      	ldr	r3, [pc, #44]	; (8020bc4 <Potato_enter_standby+0x30>)
void Potato_enter_standby(void){
 8020b96:	b507      	push	{r0, r1, r2, lr}
    __HAL_RCC_PWR_CLK_ENABLE();
 8020b98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8020b9a:	480b      	ldr	r0, [pc, #44]	; (8020bc8 <Potato_enter_standby+0x34>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8020b9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8020ba0:	659a      	str	r2, [r3, #88]	; 0x58
 8020ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020ba8:	9301      	str	r3, [sp, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8020baa:	2200      	movs	r2, #0
 8020bac:	f644 6120 	movw	r1, #20000	; 0x4e20
    __HAL_RCC_PWR_CLK_ENABLE();
 8020bb0:	9b01      	ldr	r3, [sp, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8020bb2:	f002 ff81 	bl	8023ab8 <HAL_RTCEx_SetWakeUpTimer_IT>
    HAL_SuspendTick();
 8020bb6:	f001 fa31 	bl	802201c <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
}
 8020bba:	b003      	add	sp, #12
 8020bbc:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_PWR_EnterSTANDBYMode();
 8020bc0:	f001 bff8 	b.w	8022bb4 <HAL_PWR_EnterSTANDBYMode>
 8020bc4:	40021000 	.word	0x40021000
 8020bc8:	20000194 	.word	0x20000194

08020bcc <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8020bcc:	b507      	push	{r0, r1, r2, lr}
 8020bce:	9001      	str	r0, [sp, #4]

	SystemClock_Config();
 8020bd0:	f000 f865 	bl	8020c9e <SystemClock_Config>
	HAL_ResumeTick();
 8020bd4:	f001 fa2a 	bl	802202c <HAL_ResumeTick>
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8020bd8:	9801      	ldr	r0, [sp, #4]
 8020bda:	f002 ffcb 	bl	8023b74 <HAL_RTCEx_DeactivateWakeUpTimer>
	printf("exit stop\n");
 8020bde:	4803      	ldr	r0, [pc, #12]	; (8020bec <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)

}
 8020be0:	b003      	add	sp, #12
 8020be2:	f85d eb04 	ldr.w	lr, [sp], #4
	printf("exit stop\n");
 8020be6:	f004 bc91 	b.w	802550c <puts>
 8020bea:	bf00      	nop
 8020bec:	080269b8 	.word	0x080269b8

08020bf0 <Potato_Readadc>:
#include "adc.h"

extern ADC_HandleTypeDef hadc1;


long Potato_Readadc(void){
 8020bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	volatile long adc_value = 0;
 8020bf2:	2300      	movs	r3, #0

	//return adc_value;
*/

	for(uint8_t i = 0; i<20; i++){
		HAL_ADC_Start(&hadc1);
 8020bf4:	4d1a      	ldr	r5, [pc, #104]	; (8020c60 <Potato_Readadc+0x70>)
	volatile long adc_value = 0;
 8020bf6:	9301      	str	r3, [sp, #4]
	adc_value = 0;
 8020bf8:	2414      	movs	r4, #20
 8020bfa:	9301      	str	r3, [sp, #4]
		HAL_ADC_Start(&hadc1);
 8020bfc:	4628      	mov	r0, r5
 8020bfe:	f001 fd75 	bl	80226ec <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8020c02:	2164      	movs	r1, #100	; 0x64
 8020c04:	4628      	mov	r0, r5
 8020c06:	f001 fb0b 	bl	8022220 <HAL_ADC_PollForConversion>
		adc_value += HAL_ADC_GetValue(&hadc1);
 8020c0a:	4628      	mov	r0, r5
 8020c0c:	f001 fb80 	bl	8022310 <HAL_ADC_GetValue>
 8020c10:	9b01      	ldr	r3, [sp, #4]
 8020c12:	4418      	add	r0, r3
 8020c14:	9001      	str	r0, [sp, #4]
		HAL_Delay(10);
 8020c16:	3c01      	subs	r4, #1
 8020c18:	200a      	movs	r0, #10
 8020c1a:	f001 f9eb 	bl	8021ff4 <HAL_Delay>
	for(uint8_t i = 0; i<20; i++){
 8020c1e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8020c22:	d1eb      	bne.n	8020bfc <Potato_Readadc+0xc>
	}

	adc_value = (adc_value/20U);
 8020c24:	9b01      	ldr	r3, [sp, #4]
 8020c26:	2214      	movs	r2, #20
 8020c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8020c2c:	9301      	str	r3, [sp, #4]
	/*
	sprintf(buffer,"adc_val_raw = %d\n",adc_value);
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 20);
	*/
	//adc_value -= 3065;
	adc_value -= 3005;
 8020c2e:	9b01      	ldr	r3, [sp, #4]
 8020c30:	f6a3 33bd 	subw	r3, r3, #3005	; 0xbbd
 8020c34:	9301      	str	r3, [sp, #4]
	real_A = (long)(((double)adc_value * V_per_adcvalue)*10);
 8020c36:	9801      	ldr	r0, [sp, #4]
 8020c38:	f7ff fd9e 	bl	8020778 <__aeabi_i2d>
 8020c3c:	a306      	add	r3, pc, #24	; (adr r3, 8020c58 <Potato_Readadc+0x68>)
 8020c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c42:	f7ff fb1d 	bl	8020280 <__aeabi_dmul>
 8020c46:	4b07      	ldr	r3, [pc, #28]	; (8020c64 <Potato_Readadc+0x74>)
 8020c48:	2200      	movs	r2, #0
 8020c4a:	f7ff fb19 	bl	8020280 <__aeabi_dmul>
 8020c4e:	f7ff fdfd 	bl	802084c <__aeabi_d2iz>
	*/
	return real_A;

	//HAL_Delay(1000);

}
 8020c52:	b003      	add	sp, #12
 8020c54:	bd30      	pop	{r4, r5, pc}
 8020c56:	bf00      	nop
 8020c58:	5c28f5c3 	.word	0x5c28f5c3
 8020c5c:	3fe9c28f 	.word	0x3fe9c28f
 8020c60:	20000130 	.word	0x20000130
 8020c64:	40240000 	.word	0x40240000

08020c68 <crcSlow>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
 8020c68:	b570      	push	{r4, r5, r6, lr}
 8020c6a:	4605      	mov	r5, r0


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 8020c6c:	2400      	movs	r4, #0
    crc            remainder = INITIAL_REMAINDER;
 8020c6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8020c72:	f241 0621 	movw	r6, #4129	; 0x1021
    for (byte = 0; byte < nBytes; ++byte)
 8020c76:	428c      	cmp	r4, r1
 8020c78:	db00      	blt.n	8020c7c <crcSlow+0x14>
    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);

}   /* crcSlow() */
 8020c7a:	bd70      	pop	{r4, r5, r6, pc}
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
 8020c7c:	5d2b      	ldrb	r3, [r5, r4]
 8020c7e:	2208      	movs	r2, #8
 8020c80:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
            if (remainder & TOPBIT)
 8020c84:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8020c88:	ea4f 0340 	mov.w	r3, r0, lsl #1
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8020c8c:	bf18      	it	ne
 8020c8e:	4073      	eorne	r3, r6
                remainder = (remainder << 1);
 8020c90:	b298      	uxth	r0, r3
        for (bit = 8; bit > 0; --bit)
 8020c92:	1e53      	subs	r3, r2, #1
 8020c94:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 8020c98:	d1f4      	bne.n	8020c84 <crcSlow+0x1c>
    for (byte = 0; byte < nBytes; ++byte)
 8020c9a:	3401      	adds	r4, #1
 8020c9c:	e7eb      	b.n	8020c76 <crcSlow+0xe>

08020c9e <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8020c9e:	b510      	push	{r4, lr}
 8020ca0:	b096      	sub	sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8020ca2:	2314      	movs	r3, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8020ca4:	2200      	movs	r2, #0
 8020ca6:	2060      	movs	r0, #96	; 0x60
 8020ca8:	e9cd 200c 	strd	r2, r0, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8020cac:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020cae:	2202      	movs	r2, #2
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8020cb0:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8020cb2:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8020cb6:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8020cb8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8020cba:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8020cbc:	2328      	movs	r3, #40	; 0x28
 8020cbe:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8020cc0:	2404      	movs	r4, #4
 8020cc2:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020cc4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8020cc6:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8020cca:	9215      	str	r2, [sp, #84]	; 0x54
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020ccc:	f002 f81c 	bl	8022d08 <HAL_RCC_OscConfig>
 8020cd0:	b100      	cbz	r0, 8020cd4 <SystemClock_Config+0x36>
  {
    /* Initialization Error */
    while(1);
 8020cd2:	e7fe      	b.n	8020cd2 <SystemClock_Config+0x34>
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8020cd4:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020cd8:	220f      	movs	r2, #15
 8020cda:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020cdc:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8020cde:	4621      	mov	r1, r4
 8020ce0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020ce2:	e9cd 2300 	strd	r2, r3, [sp]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8020ce6:	f002 fa95 	bl	8023214 <HAL_RCC_ClockConfig>
 8020cea:	b100      	cbz	r0, 8020cee <SystemClock_Config+0x50>
  {
    /* Initialization Error */
    while(1);
 8020cec:	e7fe      	b.n	8020cec <SystemClock_Config+0x4e>
  }
}
 8020cee:	b016      	add	sp, #88	; 0x58
 8020cf0:	bd10      	pop	{r4, pc}
	...

08020cf4 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8020cf4:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8020cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8020cfa:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8020cfc:	2201      	movs	r2, #1
 8020cfe:	a901      	add	r1, sp, #4
 8020d00:	4803      	ldr	r0, [pc, #12]	; (8020d10 <__io_putchar+0x1c>)
 8020d02:	f004 fa0d 	bl	8025120 <HAL_UART_Transmit>

  return ch;
}
 8020d06:	9801      	ldr	r0, [sp, #4]
 8020d08:	b003      	add	sp, #12
 8020d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8020d0e:	bf00      	nop
 8020d10:	20000b20 	.word	0x20000b20

08020d14 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8020d14:	2802      	cmp	r0, #2
 8020d16:	d101      	bne.n	8020d1c <HAL_GPIO_EXTI_Callback+0x8>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8020d18:	f000 bff6 	b.w	8021d08 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 8020d1c:	4770      	bx	lr
	...

08020d20 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 8020d20:	4801      	ldr	r0, [pc, #4]	; (8020d28 <SPI3_IRQHandler+0x8>)
 8020d22:	f003 bf8b 	b.w	8024c3c <HAL_SPI_IRQHandler>
 8020d26:	bf00      	nop
 8020d28:	200001bc 	.word	0x200001bc

08020d2c <MX_ADC1_Init>:
}



void MX_ADC1_Init(void)
{
 8020d2c:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8020d2e:	2400      	movs	r4, #0
{
 8020d30:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8020d32:	2218      	movs	r2, #24
 8020d34:	4621      	mov	r1, r4
 8020d36:	a804      	add	r0, sp, #16
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8020d38:	4d18      	ldr	r5, [pc, #96]	; (8020d9c <MX_ADC1_Init+0x70>)
  ADC_MultiModeTypeDef multimode = {0};
 8020d3a:	9403      	str	r4, [sp, #12]
 8020d3c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8020d40:	f004 fb56 	bl	80253f0 <memset>
  hadc1.Instance = ADC1;
 8020d44:	4b16      	ldr	r3, [pc, #88]	; (8020da0 <MX_ADC1_Init+0x74>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8020d46:	612c      	str	r4, [r5, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020d48:	2604      	movs	r6, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8020d4a:	e9c5 3400 	strd	r3, r4, [r5]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8020d4e:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 1;
 8020d50:	2301      	movs	r3, #1
 8020d52:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8020d54:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8020d58:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020d5c:	616e      	str	r6, [r5, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8020d5e:	832c      	strh	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8020d60:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8020d64:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8020d68:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8020d6a:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8020d6e:	f001 f97b 	bl	8022068 <HAL_ADC_Init>
	  ;
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8020d72:	eb0d 0106 	add.w	r1, sp, r6
 8020d76:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8020d78:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8020d7a:	f001 fd2b 	bl	80227d4 <HAL_ADCEx_MultiModeConfigChannel>
	  ;
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8020d7e:	4a09      	ldr	r2, [pc, #36]	; (8020da4 <MX_ADC1_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8020d80:	9406      	str	r4, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8020d82:	2306      	movs	r3, #6
 8020d84:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020d88:	a904      	add	r1, sp, #16
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8020d8a:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020d8c:	4628      	mov	r0, r5
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8020d8e:	e9cd 3607 	strd	r3, r6, [sp, #28]
  sConfig.Offset = 0;
 8020d92:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020d94:	f001 fac0 	bl	8022318 <HAL_ADC_ConfigChannel>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8020d98:	b00a      	add	sp, #40	; 0x28
 8020d9a:	bd70      	pop	{r4, r5, r6, pc}
 8020d9c:	20000130 	.word	0x20000130
 8020da0:	50040000 	.word	0x50040000
 8020da4:	04300002 	.word	0x04300002

08020da8 <main>:
{
 8020da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SCB->VTOR = 0x08020000;
 8020dac:	4b8b      	ldr	r3, [pc, #556]	; (8020fdc <main+0x234>)
 8020dae:	4a8c      	ldr	r2, [pc, #560]	; (8020fe0 <main+0x238>)
 8020db0:	609a      	str	r2, [r3, #8]
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8020db2:	4b8c      	ldr	r3, [pc, #560]	; (8020fe4 <main+0x23c>)
{
 8020db4:	b0a4      	sub	sp, #144	; 0x90
  uint8_t TxData[100] = {0,};
 8020db6:	2400      	movs	r4, #0
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8020db8:	221f      	movs	r2, #31
 8020dba:	619a      	str	r2, [r3, #24]
  uint8_t TxData[100] = {0,};
 8020dbc:	4621      	mov	r1, r4
 8020dbe:	2260      	movs	r2, #96	; 0x60
 8020dc0:	a80c      	add	r0, sp, #48	; 0x30
 8020dc2:	940b      	str	r4, [sp, #44]	; 0x2c
 8020dc4:	f004 fb14 	bl	80253f0 <memset>
  HAL_Init();
 8020dc8:	f001 f8f2 	bl	8021fb0 <HAL_Init>
  SystemClock_Config();
 8020dcc:	f7ff ff67 	bl	8020c9e <SystemClock_Config>
  BSP_LED_Init(LED2);
 8020dd0:	4620      	mov	r0, r4
 8020dd2:	f001 f831 	bl	8021e38 <BSP_LED_Init>


static void MX_RTC_Init(void)
{

  hrtc.Instance = RTC;
 8020dd6:	4884      	ldr	r0, [pc, #528]	; (8020fe8 <main+0x240>)
 8020dd8:	4b84      	ldr	r3, [pc, #528]	; (8020fec <main+0x244>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8020dda:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8020ddc:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.SynchPrediv = 255;
 8020de0:	23ff      	movs	r3, #255	; 0xff
 8020de2:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8020de6:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8020dea:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8020dee:	f002 fe1d 	bl	8023a2c <HAL_RTC_Init>
 8020df2:	b110      	cbz	r0, 8020dfa <main+0x52>
  {
    printf("RTC Init error\n");
 8020df4:	487e      	ldr	r0, [pc, #504]	; (8020ff0 <main+0x248>)
 8020df6:	f004 fb89 	bl	802550c <puts>
  hDiscoUart.Instance = DISCOVERY_COM1;
 8020dfa:	497e      	ldr	r1, [pc, #504]	; (8020ff4 <main+0x24c>)
  hDiscoUart.Init.BaudRate = 115200;
 8020dfc:	4a7e      	ldr	r2, [pc, #504]	; (8020ff8 <main+0x250>)
  Potato_Load(&POTATO);
 8020dfe:	4e7f      	ldr	r6, [pc, #508]	; (8020ffc <main+0x254>)
	  RemoteIP[i] = POTATO.POTATO_IP[i];
 8020e00:	4d7f      	ldr	r5, [pc, #508]	; (8021000 <main+0x258>)
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8020e02:	2400      	movs	r4, #0
  hDiscoUart.Init.BaudRate = 115200;
 8020e04:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8020e08:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 8020e0c:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8020e0e:	230c      	movs	r3, #12
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020e10:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8020e14:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020e18:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8020e1c:	610c      	str	r4, [r1, #16]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020e1e:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 8020e20:	f001 f836 	bl	8021e90 <BSP_COM_Init>
  Potato_Load(&POTATO);
 8020e24:	4630      	mov	r0, r6
 8020e26:	f000 f975 	bl	8021114 <Potato_Load>
  TERMOUT("Load done\n");
 8020e2a:	4876      	ldr	r0, [pc, #472]	; (8021004 <main+0x25c>)
 8020e2c:	f004 fb6e 	bl	802550c <puts>
  MX_ADC1_Init();
 8020e30:	f7ff ff7c 	bl	8020d2c <MX_ADC1_Init>
	  RemoteIP[i] = POTATO.POTATO_IP[i];
 8020e34:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 8020e38:	702b      	strb	r3, [r5, #0]
 8020e3a:	f896 305e 	ldrb.w	r3, [r6, #94]	; 0x5e
 8020e3e:	706b      	strb	r3, [r5, #1]
 8020e40:	f896 305f 	ldrb.w	r3, [r6, #95]	; 0x5f
 8020e44:	70ab      	strb	r3, [r5, #2]
  TERMOUT("****** WIFI Module in TCP Client mode demonstration123 ****** \n\n");
 8020e46:	4870      	ldr	r0, [pc, #448]	; (8021008 <main+0x260>)
	  RemoteIP[i] = POTATO.POTATO_IP[i];
 8020e48:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 8020e4c:	70eb      	strb	r3, [r5, #3]
  TERMOUT("****** WIFI Module in TCP Client mode demonstration123 ****** \n\n");
 8020e4e:	f004 fb5d 	bl	802550c <puts>
  TERMOUT("TCP Client Instructions :\n");
 8020e52:	486e      	ldr	r0, [pc, #440]	; (802100c <main+0x264>)
 8020e54:	f004 fb5a 	bl	802550c <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8020e58:	486d      	ldr	r0, [pc, #436]	; (8021010 <main+0x268>)
 8020e5a:	f004 fb57 	bl	802550c <puts>
  TERMOUT("   you configured using the Configuration Access Point.\n");
 8020e5e:	486d      	ldr	r0, [pc, #436]	; (8021014 <main+0x26c>)
 8020e60:	f004 fb54 	bl	802550c <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\n");
 8020e64:	486c      	ldr	r0, [pc, #432]	; (8021018 <main+0x270>)
 8020e66:	f004 fb51 	bl	802550c <puts>
  TERMOUT("   with port(8002).\n");
 8020e6a:	486c      	ldr	r0, [pc, #432]	; (802101c <main+0x274>)
 8020e6c:	f004 fb4e 	bl	802550c <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8020e70:	486b      	ldr	r0, [pc, #428]	; (8021020 <main+0x278>)
 8020e72:	f004 fb4b 	bl	802550c <puts>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8020e76:	f000 ff51 	bl	8021d1c <WIFI_Init>
 8020e7a:	4606      	mov	r6, r0
 8020e7c:	2800      	cmp	r0, #0
 8020e7e:	f040 808a 	bne.w	8020f96 <main+0x1ee>
    TERMOUT("> WIFI Module Initialized.\n");
 8020e82:	4868      	ldr	r0, [pc, #416]	; (8021024 <main+0x27c>)
 8020e84:	f004 fb42 	bl	802550c <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8020e88:	a809      	add	r0, sp, #36	; 0x24
 8020e8a:	f000 ff7f 	bl	8021d8c <WIFI_GetMAC_Address>
 8020e8e:	2800      	cmp	r0, #0
 8020e90:	d14a      	bne.n	8020f28 <main+0x180>
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8020e92:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8020e96:	9302      	str	r3, [sp, #8]
 8020e98:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8020e9c:	9301      	str	r3, [sp, #4]
 8020e9e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8020ea2:	9300      	str	r3, [sp, #0]
 8020ea4:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8020ea8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8020eac:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8020eb0:	485d      	ldr	r0, [pc, #372]	; (8021028 <main+0x280>)
 8020eb2:	f004 faa5 	bl	8025400 <iprintf>
    if( WIFI_Connect(&POTATO.POTATO_SSID, &POTATO.POTATO_PW, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8020eb6:	495d      	ldr	r1, [pc, #372]	; (802102c <main+0x284>)
 8020eb8:	2203      	movs	r2, #3
 8020eba:	f1a1 001f 	sub.w	r0, r1, #31
 8020ebe:	f000 ff51 	bl	8021d64 <WIFI_Connect>
 8020ec2:	2800      	cmp	r0, #0
 8020ec4:	d165      	bne.n	8020f92 <main+0x1ea>
      TERMOUT("> es-wifi module connected \n");
 8020ec6:	485a      	ldr	r0, [pc, #360]	; (8021030 <main+0x288>)
 8020ec8:	f004 fb20 	bl	802550c <puts>
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8020ecc:	a808      	add	r0, sp, #32
 8020ece:	f000 ff69 	bl	8021da4 <WIFI_GetIP_Address>
 8020ed2:	4604      	mov	r4, r0
 8020ed4:	2800      	cmp	r0, #0
 8020ed6:	d15a      	bne.n	8020f8e <main+0x1e6>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8020ed8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8020edc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8020ee0:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8020ee4:	9300      	str	r3, [sp, #0]
 8020ee6:	4853      	ldr	r0, [pc, #332]	; (8021034 <main+0x28c>)
 8020ee8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8020eec:	4f44      	ldr	r7, [pc, #272]	; (8021000 <main+0x258>)
 8020eee:	f8df 817c 	ldr.w	r8, [pc, #380]	; 802106c <main+0x2c4>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8020ef2:	f004 fa85 	bl	8025400 <iprintf>
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 8020ef6:	f641 7342 	movw	r3, #8002	; 0x1f42
 8020efa:	9301      	str	r3, [sp, #4]
 8020efc:	78eb      	ldrb	r3, [r5, #3]
 8020efe:	9300      	str	r3, [sp, #0]
 8020f00:	78ab      	ldrb	r3, [r5, #2]
 8020f02:	786a      	ldrb	r2, [r5, #1]
 8020f04:	7829      	ldrb	r1, [r5, #0]
 8020f06:	484c      	ldr	r0, [pc, #304]	; (8021038 <main+0x290>)
 8020f08:	f004 fa7a 	bl	8025400 <iprintf>
        while (Trials--)
 8020f0c:	250b      	movs	r5, #11
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8020f0e:	4626      	mov	r6, r4
        while (Trials--)
 8020f10:	3d01      	subs	r5, #1
 8020f12:	b2ad      	uxth	r5, r5
 8020f14:	b97d      	cbnz	r5, 8020f36 <main+0x18e>
          TERMOUT("> ERROR : Cannot open Connection\n");
 8020f16:	4849      	ldr	r0, [pc, #292]	; (802103c <main+0x294>)
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8020f18:	f004 faf8 	bl	802550c <puts>
      BSP_LED_On(LED2);
 8020f1c:	2000      	movs	r0, #0
    BSP_LED_On(LED2);
 8020f1e:	f000 ffad 	bl	8021e7c <BSP_LED_On>
  int32_t Socket = -1;
 8020f22:	f04f 34ff 	mov.w	r4, #4294967295
 8020f26:	e016      	b.n	8020f56 <main+0x1ae>
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 8020f28:	4845      	ldr	r0, [pc, #276]	; (8021040 <main+0x298>)
 8020f2a:	f004 faef 	bl	802550c <puts>
      BSP_LED_On(LED2);
 8020f2e:	4630      	mov	r0, r6
 8020f30:	f000 ffa4 	bl	8021e7c <BSP_LED_On>
 8020f34:	e7bf      	b.n	8020eb6 <main+0x10e>
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8020f36:	f641 7342 	movw	r3, #8002	; 0x1f42
 8020f3a:	2100      	movs	r1, #0
 8020f3c:	9300      	str	r3, [sp, #0]
 8020f3e:	9601      	str	r6, [sp, #4]
 8020f40:	463b      	mov	r3, r7
 8020f42:	4642      	mov	r2, r8
 8020f44:	4608      	mov	r0, r1
 8020f46:	f000 ff3d 	bl	8021dc4 <WIFI_OpenClientConnection>
 8020f4a:	4604      	mov	r4, r0
 8020f4c:	2800      	cmp	r0, #0
 8020f4e:	d1df      	bne.n	8020f10 <main+0x168>
            TERMOUT("> TCP Connection opened successfully.\n");
 8020f50:	483c      	ldr	r0, [pc, #240]	; (8021044 <main+0x29c>)
 8020f52:	f004 fadb 	bl	802550c <puts>
	sprintf(TxData,"current = %ld mA\n",adc_mA);
 8020f56:	4e3c      	ldr	r6, [pc, #240]	; (8021048 <main+0x2a0>)
	sprintf(TxData,"%ld\n",adc_mA);
 8020f58:	4f3c      	ldr	r7, [pc, #240]	; (802104c <main+0x2a4>)
		TERMOUT("Socket -1?\n");
 8020f5a:	4d3d      	ldr	r5, [pc, #244]	; (8021050 <main+0x2a8>)
	adc_mA = Potato_Readadc();
 8020f5c:	f7ff fe48 	bl	8020bf0 <Potato_Readadc>
	sprintf(TxData,"current = %ld mA\n",adc_mA);
 8020f60:	4631      	mov	r1, r6
	adc_mA = Potato_Readadc();
 8020f62:	4602      	mov	r2, r0
	sprintf(TxData,"current = %ld mA\n",adc_mA);
 8020f64:	9005      	str	r0, [sp, #20]
 8020f66:	a80b      	add	r0, sp, #44	; 0x2c
 8020f68:	f004 fad8 	bl	802551c <siprintf>
	TERMOUT(TxData);
 8020f6c:	a80b      	add	r0, sp, #44	; 0x2c
 8020f6e:	f004 fa47 	bl	8025400 <iprintf>
	sprintf(TxData,"%ld\n",adc_mA);
 8020f72:	9a05      	ldr	r2, [sp, #20]
 8020f74:	4639      	mov	r1, r7
 8020f76:	a80b      	add	r0, sp, #44	; 0x2c
 8020f78:	f004 fad0 	bl	802551c <siprintf>
	while(Socket == -1)
 8020f7c:	b184      	cbz	r4, 8020fa0 <main+0x1f8>
		HAL_Delay(500);
 8020f7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020f82:	f001 f837 	bl	8021ff4 <HAL_Delay>
		TERMOUT("Socket -1?\n");
 8020f86:	4628      	mov	r0, r5
 8020f88:	f004 fac0 	bl	802550c <puts>
 8020f8c:	e7f7      	b.n	8020f7e <main+0x1d6>
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 8020f8e:	4831      	ldr	r0, [pc, #196]	; (8021054 <main+0x2ac>)
 8020f90:	e7c2      	b.n	8020f18 <main+0x170>
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8020f92:	4831      	ldr	r0, [pc, #196]	; (8021058 <main+0x2b0>)
 8020f94:	e7c0      	b.n	8020f18 <main+0x170>
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8020f96:	4831      	ldr	r0, [pc, #196]	; (802105c <main+0x2b4>)
 8020f98:	f004 fab8 	bl	802550c <puts>
    BSP_LED_On(LED2);
 8020f9c:	4620      	mov	r0, r4
 8020f9e:	e7be      	b.n	8020f1e <main+0x176>
    	ret = WIFI_SendData(Socket, TxData, strlen(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8020fa0:	a80b      	add	r0, sp, #44	; 0x2c
 8020fa2:	f7ff f915 	bl	80201d0 <strlen>
 8020fa6:	f242 7310 	movw	r3, #10000	; 0x2710
 8020faa:	9300      	str	r3, [sp, #0]
 8020fac:	b282      	uxth	r2, r0
 8020fae:	f10d 031e 	add.w	r3, sp, #30
 8020fb2:	a90b      	add	r1, sp, #44	; 0x2c
 8020fb4:	2000      	movs	r0, #0
 8020fb6:	f000 ff2d 	bl	8021e14 <WIFI_SendData>
    	          if (ret != WIFI_STATUS_OK)
 8020fba:	b940      	cbnz	r0, 8020fce <main+0x226>
    	          TERMOUT("Sended\n");
 8020fbc:	4828      	ldr	r0, [pc, #160]	; (8021060 <main+0x2b8>)
 8020fbe:	f004 faa5 	bl	802550c <puts>
    TERMOUT("Entering standby mode\n");
 8020fc2:	4828      	ldr	r0, [pc, #160]	; (8021064 <main+0x2bc>)
 8020fc4:	f004 faa2 	bl	802550c <puts>
    Potato_enter_standby();
 8020fc8:	f7ff fde4 	bl	8020b94 <Potato_enter_standby>
	adc_mA = Potato_Readadc();
 8020fcc:	e7c6      	b.n	8020f5c <main+0x1b4>
    	            TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 8020fce:	4826      	ldr	r0, [pc, #152]	; (8021068 <main+0x2c0>)
 8020fd0:	f004 fa9c 	bl	802550c <puts>
}
 8020fd4:	2000      	movs	r0, #0
 8020fd6:	b024      	add	sp, #144	; 0x90
 8020fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020fdc:	e000ed00 	.word	0xe000ed00
 8020fe0:	08020000 	.word	0x08020000
 8020fe4:	40007000 	.word	0x40007000
 8020fe8:	20000194 	.word	0x20000194
 8020fec:	40002800 	.word	0x40002800
 8020ff0:	080269c2 	.word	0x080269c2
 8020ff4:	20000b20 	.word	0x20000b20
 8020ff8:	40013800 	.word	0x40013800
 8020ffc:	200000c4 	.word	0x200000c4
 8021000:	20000000 	.word	0x20000000
 8021004:	080269d1 	.word	0x080269d1
 8021008:	080269db 	.word	0x080269db
 802100c:	08026a1b 	.word	0x08026a1b
 8021010:	08026a35 	.word	0x08026a35
 8021014:	08026a73 	.word	0x08026a73
 8021018:	08026aab 	.word	0x08026aab
 802101c:	08026aea 	.word	0x08026aea
 8021020:	08026afe 	.word	0x08026afe
 8021024:	08026b46 	.word	0x08026b46
 8021028:	08026b61 	.word	0x08026b61
 802102c:	200000e3 	.word	0x200000e3
 8021030:	08026bb4 	.word	0x08026bb4
 8021034:	08026bd0 	.word	0x08026bd0
 8021038:	08026bff 	.word	0x08026bff
 802103c:	08026c63 	.word	0x08026c63
 8021040:	08026b93 	.word	0x08026b93
 8021044:	08026c3d 	.word	0x08026c3d
 8021048:	08026d07 	.word	0x08026d07
 802104c:	08026d19 	.word	0x08026d19
 8021050:	08026d1e 	.word	0x08026d1e
 8021054:	08026c84 	.word	0x08026c84
 8021058:	08026cb3 	.word	0x08026cb3
 802105c:	08026cda 	.word	0x08026cda
 8021060:	08026d5a 	.word	0x08026d5a
 8021064:	08026d61 	.word	0x08026d61
 8021068:	08026d29 	.word	0x08026d29
 802106c:	08026c32 	.word	0x08026c32

08021070 <HAL_ADC_MspInit>:
{
 8021070:	b510      	push	{r4, lr}
 8021072:	b0aa      	sub	sp, #168	; 0xa8
 8021074:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021076:	2214      	movs	r2, #20
 8021078:	2100      	movs	r1, #0
 802107a:	a803      	add	r0, sp, #12
 802107c:	f004 f9b8 	bl	80253f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8021080:	2288      	movs	r2, #136	; 0x88
 8021082:	2100      	movs	r1, #0
 8021084:	a808      	add	r0, sp, #32
 8021086:	f004 f9b3 	bl	80253f0 <memset>
  if(hadc->Instance==ADC1)
 802108a:	6822      	ldr	r2, [r4, #0]
 802108c:	4b1b      	ldr	r3, [pc, #108]	; (80210fc <HAL_ADC_MspInit+0x8c>)
 802108e:	429a      	cmp	r2, r3
 8021090:	d131      	bne.n	80210f6 <HAL_ADC_MspInit+0x86>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8021092:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8021096:	9308      	str	r3, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8021098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 802109c:	2118      	movs	r1, #24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 802109e:	9326      	str	r3, [sp, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80210a0:	2307      	movs	r3, #7
 80210a2:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80210a6:	2302      	movs	r3, #2
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80210a8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80210ac:	2401      	movs	r4, #1
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80210ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80210b2:	a808      	add	r0, sp, #32
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80210b4:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80210b6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80210ba:	f002 fa6d 	bl	8023598 <HAL_RCCEx_PeriphCLKConfig>
    __HAL_RCC_ADC_CLK_ENABLE();
 80210be:	4b10      	ldr	r3, [pc, #64]	; (8021100 <HAL_ADC_MspInit+0x90>)
 80210c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80210c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80210c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80210c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80210ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80210ce:	9201      	str	r2, [sp, #4]
 80210d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80210d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80210d4:	f042 0204 	orr.w	r2, r2, #4
 80210d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80210da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80210dc:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80210de:	f003 0304 	and.w	r3, r3, #4
 80210e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80210e4:	200b      	movs	r0, #11
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80210e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80210e8:	2300      	movs	r3, #0
 80210ea:	e9cd 0304 	strd	r0, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80210ee:	a903      	add	r1, sp, #12
 80210f0:	4804      	ldr	r0, [pc, #16]	; (8021104 <HAL_ADC_MspInit+0x94>)
 80210f2:	f001 fc69 	bl	80229c8 <HAL_GPIO_Init>
}
 80210f6:	b02a      	add	sp, #168	; 0xa8
 80210f8:	bd10      	pop	{r4, pc}
 80210fa:	bf00      	nop
 80210fc:	50040000 	.word	0x50040000
 8021100:	40021000 	.word	0x40021000
 8021104:	48000800 	.word	0x48000800

08021108 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8021108:	4801      	ldr	r0, [pc, #4]	; (8021110 <RTC_WKUP_IRQHandler+0x8>)
 802110a:	f002 bd6f 	b.w	8023bec <HAL_RTCEx_WakeUpTimerIRQHandler>
 802110e:	bf00      	nop
 8021110:	20000194 	.word	0x20000194

08021114 <Potato_Load>:

	return save_ok;

}

save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 8021114:	b530      	push	{r4, r5, lr}
 8021116:	b09b      	sub	sp, #108	; 0x6c

	save_ret_t ret = 0;
	uint16_t crcval = 0;
	uint8_t temp[102] = {0,};
 8021118:	2100      	movs	r1, #0
 802111a:	2262      	movs	r2, #98	; 0x62
save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 802111c:	4605      	mov	r5, r0
	uint8_t temp[102] = {0,};
 802111e:	a801      	add	r0, sp, #4
 8021120:	9100      	str	r1, [sp, #0]
 8021122:	f004 f965 	bl	80253f0 <memset>
	//uint16_t saved_crcval = 0;
	//uint8_t *normal_crc_address = Potato_Flash_CRC_Address;
	//uint8_t *backup_crc_address = Potato_Flash_Backup_CRC_Address;

	memcpy(temp, Potato_Flash_Address,Potato_Data_Length_Bytes);
 8021126:	2266      	movs	r2, #102	; 0x66
 8021128:	4910      	ldr	r1, [pc, #64]	; (802116c <Potato_Load+0x58>)
 802112a:	4668      	mov	r0, sp
 802112c:	f004 f952 	bl	80253d4 <memcpy>


	//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
	crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 8021130:	2166      	movs	r1, #102	; 0x66
 8021132:	4668      	mov	r0, sp
 8021134:	f7ff fd98 	bl	8020c68 <crcSlow>
	if(crcval == 0){
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 8021138:	2266      	movs	r2, #102	; 0x66
	if(crcval == 0){
 802113a:	4604      	mov	r4, r0
 802113c:	b930      	cbnz	r0, 802114c <Potato_Load+0x38>
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 802113e:	490b      	ldr	r1, [pc, #44]	; (802116c <Potato_Load+0x58>)

		//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);

		if(crcval == 0){
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 8021140:	4628      	mov	r0, r5
 8021142:	f004 f947 	bl	80253d4 <memcpy>
			ret = save_ok;
			return ret;
 8021146:	4620      	mov	r0, r4
			ret = crc_error;
			return ret;
		}
	}

}
 8021148:	b01b      	add	sp, #108	; 0x6c
 802114a:	bd30      	pop	{r4, r5, pc}
		memcpy(temp, Potato_Flash_Backup_Address, Potato_Data_Length_Bytes);
 802114c:	4908      	ldr	r1, [pc, #32]	; (8021170 <Potato_Load+0x5c>)
 802114e:	4668      	mov	r0, sp
 8021150:	f004 f940 	bl	80253d4 <memcpy>
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 8021154:	2166      	movs	r1, #102	; 0x66
 8021156:	4668      	mov	r0, sp
 8021158:	f7ff fd86 	bl	8020c68 <crcSlow>
		if(crcval == 0){
 802115c:	4604      	mov	r4, r0
 802115e:	b910      	cbnz	r0, 8021166 <Potato_Load+0x52>
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 8021160:	4903      	ldr	r1, [pc, #12]	; (8021170 <Potato_Load+0x5c>)
 8021162:	2266      	movs	r2, #102	; 0x66
 8021164:	e7ec      	b.n	8021140 <Potato_Load+0x2c>
			return ret;
 8021166:	2006      	movs	r0, #6
 8021168:	e7ee      	b.n	8021148 <Potato_Load+0x34>
 802116a:	bf00      	nop
 802116c:	0807f000 	.word	0x0807f000
 8021170:	0807f800 	.word	0x0807f800

08021174 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8021174:	4770      	bx	lr

08021176 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8021176:	e7fe      	b.n	8021176 <HardFault_Handler>

08021178 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8021178:	e7fe      	b.n	8021178 <MemManage_Handler>

0802117a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 802117a:	e7fe      	b.n	802117a <BusFault_Handler>

0802117c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 802117c:	e7fe      	b.n	802117c <UsageFault_Handler>

0802117e <SVC_Handler>:
 802117e:	4770      	bx	lr

08021180 <DebugMon_Handler>:
 8021180:	4770      	bx	lr

08021182 <PendSV_Handler>:
 8021182:	4770      	bx	lr

08021184 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8021184:	f000 bf24 	b.w	8021fd0 <HAL_IncTick>

08021188 <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8021188:	2002      	movs	r0, #2
 802118a:	f001 bd07 	b.w	8022b9c <HAL_GPIO_EXTI_IRQHandler>

0802118e <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 802118e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8021190:	7803      	ldrb	r3, [r0, #0]
 8021192:	2b2d      	cmp	r3, #45	; 0x2d
 8021194:	d115      	bne.n	80211c2 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 8021196:	3001      	adds	r0, #1
        minus = 1;
 8021198:	2501      	movs	r5, #1
 802119a:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 802119c:	462a      	mov	r2, r5
 802119e:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 80211a0:	270a      	movs	r7, #10
 80211a2:	e003      	b.n	80211ac <ParseNumber+0x1e>
        ptr++;
        i++;
 80211a4:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 80211a6:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 80211aa:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80211ac:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80211b0:	3c30      	subs	r4, #48	; 0x30
 80211b2:	b2e6      	uxtb	r6, r4
 80211b4:	2e09      	cmp	r6, #9
 80211b6:	d9f5      	bls.n	80211a4 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80211b8:	b101      	cbz	r1, 80211bc <ParseNumber+0x2e>
        *cnt = i;
 80211ba:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80211bc:	b105      	cbz	r5, 80211c0 <ParseNumber+0x32>
        return 0 - sum;
 80211be:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 80211c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 80211c2:	2500      	movs	r5, #0
 80211c4:	e7e9      	b.n	802119a <ParseNumber+0xc>

080211c6 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80211c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 80211c8:	2600      	movs	r6, #0

  while(* ptr) {
 80211ca:	7803      	ldrb	r3, [r0, #0]
 80211cc:	b903      	cbnz	r3, 80211d0 <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 80211ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 80211d0:	2b3a      	cmp	r3, #58	; 0x3a
 80211d2:	d128      	bne.n	8021226 <ParseMAC+0x60>
    hexcnt = 1;
 80211d4:	f04f 0c01 	mov.w	ip, #1
    ptr = ptr + hexcnt;
 80211d8:	4460      	add	r0, ip
 80211da:	e7f6      	b.n	80211ca <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80211dc:	2a09      	cmp	r2, #9
        sum <<= 4;
 80211de:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80211e2:	d905      	bls.n	80211f0 <ParseMAC+0x2a>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80211e4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80211e8:	2a05      	cmp	r2, #5
 80211ea:	d814      	bhi.n	8021216 <ParseMAC+0x50>
        return (a - 'a') + 10;
 80211ec:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 80211ee:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 80211f0:	4414      	add	r4, r2
        i++;
 80211f2:	3501      	adds	r5, #1
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80211f4:	5d43      	ldrb	r3, [r0, r5]
 80211f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80211fa:	b2d2      	uxtb	r2, r2
 80211fc:	2a09      	cmp	r2, #9
 80211fe:	fa5f fc85 	uxtb.w	ip, r5
 8021202:	d9eb      	bls.n	80211dc <ParseMAC+0x16>
 8021204:	f023 0720 	bic.w	r7, r3, #32
 8021208:	3f41      	subs	r7, #65	; 0x41
 802120a:	2f05      	cmp	r7, #5
 802120c:	d9e6      	bls.n	80211dc <ParseMAC+0x16>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 802120e:	1c73      	adds	r3, r6, #1
 8021210:	558c      	strb	r4, [r1, r6]
 8021212:	b2de      	uxtb	r6, r3
 8021214:	e7e0      	b.n	80211d8 <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8021216:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 802121a:	2a05      	cmp	r2, #5
 802121c:	d801      	bhi.n	8021222 <ParseMAC+0x5c>
        return (a - 'A') + 10;
 802121e:	3b37      	subs	r3, #55	; 0x37
 8021220:	e7e5      	b.n	80211ee <ParseMAC+0x28>
    return 0;
 8021222:	2200      	movs	r2, #0
 8021224:	e7e4      	b.n	80211f0 <ParseMAC+0x2a>
 8021226:	2500      	movs	r5, #0
    uint32_t sum = 0;
 8021228:	462c      	mov	r4, r5
 802122a:	e7e3      	b.n	80211f4 <ParseMAC+0x2e>

0802122c <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 802122c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802122e:	4604      	mov	r4, r0
 8021230:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8021232:	2500      	movs	r5, #0

  while(* ptr) {
    hexcnt = 1;
 8021234:	2701      	movs	r7, #1
  while(* ptr) {
 8021236:	7823      	ldrb	r3, [r4, #0]
 8021238:	b90b      	cbnz	r3, 802123e <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 802123a:	b003      	add	sp, #12
 802123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 802123e:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8021240:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 8021244:	d007      	beq.n	8021256 <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8021246:	f10d 0107 	add.w	r1, sp, #7
 802124a:	4620      	mov	r0, r4
 802124c:	f7ff ff9f 	bl	802118e <ParseNumber>
 8021250:	1c6b      	adds	r3, r5, #1
 8021252:	5570      	strb	r0, [r6, r5]
 8021254:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 8021256:	f89d 3007 	ldrb.w	r3, [sp, #7]
 802125a:	441c      	add	r4, r3
 802125c:	e7eb      	b.n	8021236 <ParseIP+0xa>
	...

08021260 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8021260:	b570      	push	{r4, r5, r6, lr}
 8021262:	4604      	mov	r4, r0
  int ret = 0;
  int16_t recv_len = 0;
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8021264:	4608      	mov	r0, r1
{
 8021266:	460e      	mov	r6, r1
 8021268:	4615      	mov	r5, r2
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 802126a:	f7fe ffb1 	bl	80201d0 <strlen>
 802126e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8021272:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8021276:	b281      	uxth	r1, r0
 8021278:	4630      	mov	r0, r6
 802127a:	4798      	blx	r3

  if( ret > 0)
 802127c:	2800      	cmp	r0, #0
 802127e:	dd24      	ble.n	80212ca <AT_ExecuteCommand+0x6a>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8021280:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8021284:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8021288:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 802128c:	4628      	mov	r0, r5
 802128e:	4798      	blx	r3
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8021290:	1e43      	subs	r3, r0, #1
 8021292:	b29b      	uxth	r3, r3
 8021294:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8021298:	d211      	bcs.n	80212be <AT_ExecuteCommand+0x5e>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 802129a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 802129e:	bf08      	it	eq
 80212a0:	b218      	sxtheq	r0, r3
      }
      *(pdata + recv_len) = 0;
 80212a2:	2400      	movs	r4, #0
 80212a4:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80212a6:	490a      	ldr	r1, [pc, #40]	; (80212d0 <AT_ExecuteCommand+0x70>)
 80212a8:	4628      	mov	r0, r5
 80212aa:	f004 f972 	bl	8025592 <strstr>
 80212ae:	b950      	cbnz	r0, 80212c6 <AT_ExecuteCommand+0x66>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80212b0:	4908      	ldr	r1, [pc, #32]	; (80212d4 <AT_ExecuteCommand+0x74>)
 80212b2:	4628      	mov	r0, r5
 80212b4:	f004 f96d 	bl	8025592 <strstr>
 80212b8:	b138      	cbz	r0, 80212ca <AT_ExecuteCommand+0x6a>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80212ba:	2005      	movs	r0, #5
 80212bc:	e002      	b.n	80212c4 <AT_ExecuteCommand+0x64>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80212be:	3004      	adds	r0, #4
 80212c0:	d103      	bne.n	80212ca <AT_ExecuteCommand+0x6a>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80212c2:	2006      	movs	r0, #6
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
}
 80212c4:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 80212c6:	4620      	mov	r0, r4
 80212c8:	e7fc      	b.n	80212c4 <AT_ExecuteCommand+0x64>
  return ES_WIFI_STATUS_IO_ERROR;
 80212ca:	2004      	movs	r0, #4
 80212cc:	e7fa      	b.n	80212c4 <AT_ExecuteCommand+0x64>
 80212ce:	bf00      	nop
 80212d0:	08026d77 	.word	0x08026d77
 80212d4:	08026d80 	.word	0x08026d80

080212d8 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80212d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212dc:	4605      	mov	r5, r0
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 80212de:	4608      	mov	r0, r1
{
 80212e0:	4688      	mov	r8, r1
 80212e2:	4691      	mov	r9, r2
 80212e4:	461f      	mov	r7, r3
  cmd_len = strlen((char*)cmd);
 80212e6:	f7fe ff73 	bl	80201d0 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80212ea:	f010 0401 	ands.w	r4, r0, #1
{
 80212ee:	9e08      	ldr	r6, [sp, #32]
  cmd_len = strlen((char*)cmd);
 80212f0:	fa1f fa80 	uxth.w	sl, r0
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80212f4:	d126      	bne.n	8021344 <AT_RequestSendData+0x6c>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80212f6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80212fa:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 80212fe:	4651      	mov	r1, sl
 8021300:	4640      	mov	r0, r8
 8021302:	4798      	blx	r3
  if (n == cmd_len)
 8021304:	b280      	uxth	r0, r0
 8021306:	4582      	cmp	sl, r0
 8021308:	d123      	bne.n	8021352 <AT_RequestSendData+0x7a>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 802130a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 802130e:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8021312:	4639      	mov	r1, r7
 8021314:	4648      	mov	r0, r9
 8021316:	4798      	blx	r3
    if (send_len == len)
 8021318:	42b8      	cmp	r0, r7
 802131a:	d113      	bne.n	8021344 <AT_RequestSendData+0x6c>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 802131c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8021320:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8021324:	4621      	mov	r1, r4
 8021326:	4630      	mov	r0, r6
 8021328:	4798      	blx	r3
      if (recv_len > 0)
 802132a:	2800      	cmp	r0, #0
 802132c:	dd0d      	ble.n	802134a <AT_RequestSendData+0x72>
      {
        *(pdata+recv_len) = 0;
 802132e:	5434      	strb	r4, [r6, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8021330:	490b      	ldr	r1, [pc, #44]	; (8021360 <AT_RequestSendData+0x88>)
 8021332:	4630      	mov	r0, r6
 8021334:	f004 f92d 	bl	8025592 <strstr>
 8021338:	b968      	cbnz	r0, 8021356 <AT_RequestSendData+0x7e>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 802133a:	490a      	ldr	r1, [pc, #40]	; (8021364 <AT_RequestSendData+0x8c>)
 802133c:	4630      	mov	r0, r6
 802133e:	f004 f928 	bl	8025592 <strstr>
 8021342:	b950      	cbnz	r0, 802135a <AT_RequestSendData+0x82>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8021344:	2002      	movs	r0, #2
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
}
 8021346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 802134a:	3004      	adds	r0, #4
 802134c:	d1fa      	bne.n	8021344 <AT_RequestSendData+0x6c>
        return ES_WIFI_STATUS_MODULE_CRASH;
 802134e:	2006      	movs	r0, #6
 8021350:	e7f9      	b.n	8021346 <AT_RequestSendData+0x6e>
  return ES_WIFI_STATUS_IO_ERROR;
 8021352:	2004      	movs	r0, #4
 8021354:	e7f7      	b.n	8021346 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 8021356:	4620      	mov	r0, r4
 8021358:	e7f5      	b.n	8021346 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 802135a:	2005      	movs	r0, #5
 802135c:	e7f3      	b.n	8021346 <AT_RequestSendData+0x6e>
 802135e:	bf00      	nop
 8021360:	08026d77 	.word	0x08026d77
 8021364:	08026d80 	.word	0x08026d80

08021368 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8021368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 802136c:	f247 5330 	movw	r3, #30000	; 0x7530
 8021370:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8
{
 8021374:	4604      	mov	r4, r0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8021376:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 802137a:	2000      	movs	r0, #0
 802137c:	4798      	blx	r3
 802137e:	2800      	cmp	r0, #0
 8021380:	d14b      	bne.n	802141a <ES_WIFI_Init+0xb2>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8021382:	4927      	ldr	r1, [pc, #156]	; (8021420 <ES_WIFI_Init+0xb8>)
 8021384:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8021388:	4620      	mov	r0, r4
 802138a:	f7ff ff69 	bl	8021260 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 802138e:	4605      	mov	r5, r0
 8021390:	b960      	cbnz	r0, 80213ac <ES_WIFI_Init+0x44>
  ptr = strtok((char *)pdata + 2, ",");
 8021392:	4924      	ldr	r1, [pc, #144]	; (8021424 <ES_WIFI_Init+0xbc>)
      ptr = strtok(ptr, "\r");
 8021394:	4f24      	ldr	r7, [pc, #144]	; (8021428 <ES_WIFI_Init+0xc0>)
    ptr = strtok(NULL, ",");
 8021396:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8021424 <ES_WIFI_Init+0xbc>
  ptr = strtok((char *)pdata + 2, ",");
 802139a:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 802139e:	f004 f90f 	bl	80255c0 <strtok>
  while (ptr != NULL){
 80213a2:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80213a4:	f104 0868 	add.w	r8, r4, #104	; 0x68
 80213a8:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 80213aa:	b910      	cbnz	r0, 80213b2 <ES_WIFI_Init+0x4a>
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80213ac:	4628      	mov	r0, r5
 80213ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 80213b2:	2b06      	cmp	r3, #6
 80213b4:	d824      	bhi.n	8021400 <ES_WIFI_Init+0x98>
 80213b6:	e8df f003 	tbb	[pc, r3]
 80213ba:	0a04      	.short	0x0a04
 80213bc:	1e19140f 	.word	0x1e19140f
 80213c0:	29          	.byte	0x29
 80213c1:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80213c2:	4601      	mov	r1, r0
 80213c4:	2220      	movs	r2, #32
 80213c6:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80213c8:	f004 f8d0 	bl	802556c <strncpy>
      break;
 80213cc:	e018      	b.n	8021400 <ES_WIFI_Init+0x98>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80213ce:	4601      	mov	r1, r0
 80213d0:	2218      	movs	r2, #24
 80213d2:	f104 0020 	add.w	r0, r4, #32
 80213d6:	e7f7      	b.n	80213c8 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80213d8:	4601      	mov	r1, r0
 80213da:	2210      	movs	r2, #16
 80213dc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80213e0:	e7f2      	b.n	80213c8 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80213e2:	4601      	mov	r1, r0
 80213e4:	2210      	movs	r2, #16
 80213e6:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80213ea:	e7ed      	b.n	80213c8 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80213ec:	4601      	mov	r1, r0
 80213ee:	2210      	movs	r2, #16
 80213f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80213f4:	e7e8      	b.n	80213c8 <ES_WIFI_Init+0x60>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80213f6:	2100      	movs	r1, #0
 80213f8:	f7ff fec9 	bl	802118e <ParseNumber>
 80213fc:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ptr = strtok(NULL, ",");
 8021400:	4649      	mov	r1, r9
 8021402:	2000      	movs	r0, #0
 8021404:	f004 f8dc 	bl	80255c0 <strtok>
 8021408:	3601      	adds	r6, #1
 802140a:	e7cd      	b.n	80213a8 <ES_WIFI_Init+0x40>
      ptr = strtok(ptr, "\r");
 802140c:	4639      	mov	r1, r7
 802140e:	f004 f8d7 	bl	80255c0 <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8021412:	2220      	movs	r2, #32
      ptr = strtok(ptr, "\r");
 8021414:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8021416:	4640      	mov	r0, r8
 8021418:	e7d6      	b.n	80213c8 <ES_WIFI_Init+0x60>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 802141a:	2502      	movs	r5, #2
 802141c:	e7c6      	b.n	80213ac <ES_WIFI_Init+0x44>
 802141e:	bf00      	nop
 8021420:	08026da8 	.word	0x08026da8
 8021424:	08026f8b 	.word	0x08026f8b
 8021428:	08026e73 	.word	0x08026e73

0802142c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 802142c:	b530      	push	{r4, r5, lr}
 802142e:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8021432:	b158      	cbz	r0, 802144c <ES_WIFI_RegisterBusIO+0x20>
 8021434:	b151      	cbz	r1, 802144c <ES_WIFI_RegisterBusIO+0x20>
 8021436:	b14a      	cbz	r2, 802144c <ES_WIFI_RegisterBusIO+0x20>
 8021438:	b145      	cbz	r5, 802144c <ES_WIFI_RegisterBusIO+0x20>
 802143a:	b13c      	cbz	r4, 802144c <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 802143c:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 8021440:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8021444:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8021448:	2000      	movs	r0, #0
}
 802144a:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 802144c:	2002      	movs	r0, #2
 802144e:	e7fc      	b.n	802144a <ES_WIFI_RegisterBusIO+0x1e>

08021450 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8021450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8021452:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 8021456:	4605      	mov	r5, r0
 8021458:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 802145a:	4620      	mov	r0, r4
 802145c:	460a      	mov	r2, r1
 802145e:	4918      	ldr	r1, [pc, #96]	; (80214c0 <ES_WIFI_Connect+0x70>)
{
 8021460:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8021462:	f004 f85b 	bl	802551c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021466:	4622      	mov	r2, r4
 8021468:	4621      	mov	r1, r4
 802146a:	4628      	mov	r0, r5
 802146c:	f7ff fef8 	bl	8021260 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8021470:	bb20      	cbnz	r0, 80214bc <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8021472:	4914      	ldr	r1, [pc, #80]	; (80214c4 <ES_WIFI_Connect+0x74>)
 8021474:	463a      	mov	r2, r7
 8021476:	4620      	mov	r0, r4
 8021478:	f004 f850 	bl	802551c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 802147c:	4622      	mov	r2, r4
 802147e:	4621      	mov	r1, r4
 8021480:	4628      	mov	r0, r5
 8021482:	f7ff feed 	bl	8021260 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8021486:	b9c8      	cbnz	r0, 80214bc <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8021488:	490f      	ldr	r1, [pc, #60]	; (80214c8 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 802148a:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 802148e:	4632      	mov	r2, r6
 8021490:	4620      	mov	r0, r4
 8021492:	f004 f843 	bl	802551c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021496:	4622      	mov	r2, r4
 8021498:	4621      	mov	r1, r4
 802149a:	4628      	mov	r0, r5
 802149c:	f7ff fee0 	bl	8021260 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 80214a0:	b960      	cbnz	r0, 80214bc <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 80214a2:	490a      	ldr	r1, [pc, #40]	; (80214cc <ES_WIFI_Connect+0x7c>)
 80214a4:	4620      	mov	r0, r4
 80214a6:	f004 f859 	bl	802555c <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80214aa:	4622      	mov	r2, r4
 80214ac:	4621      	mov	r1, r4
 80214ae:	4628      	mov	r0, r5
 80214b0:	f7ff fed6 	bl	8021260 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80214b4:	b910      	cbnz	r0, 80214bc <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 80214b6:	2301      	movs	r3, #1
 80214b8:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80214bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80214be:	bf00      	nop
 80214c0:	08026dbb 	.word	0x08026dbb
 80214c4:	08026dc2 	.word	0x08026dc2
 80214c8:	08026dc9 	.word	0x08026dc9
 80214cc:	08026dd0 	.word	0x08026dd0

080214d0 <ES_WIFI_IsConnected>:
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 80214d0:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 80214d4:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"CS\r");
 80214d6:	490b      	ldr	r1, [pc, #44]	; (8021504 <ES_WIFI_IsConnected+0x34>)
{
 80214d8:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"CS\r");
 80214da:	4610      	mov	r0, r2
 80214dc:	f004 f83e 	bl	802555c <strcpy>
 80214e0:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80214e2:	4601      	mov	r1, r0
 80214e4:	4620      	mov	r0, r4
 80214e6:	f7ff febb 	bl	8021260 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80214ea:	b938      	cbnz	r0, 80214fc <ES_WIFI_IsConnected+0x2c>
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80214ec:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 80214f0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80214f4:	4253      	negs	r3, r2
 80214f6:	4153      	adcs	r3, r2
 80214f8:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 80214fc:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8021500:	bd10      	pop	{r4, pc}
 8021502:	bf00      	nop
 8021504:	08026dd4 	.word	0x08026dd4

08021508 <ES_WIFI_GetNetworkSettings>:
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8021508:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 802150c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8021510:	4935      	ldr	r1, [pc, #212]	; (80215e8 <ES_WIFI_GetNetworkSettings+0xe0>)
{
 8021512:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8021514:	4610      	mov	r0, r2
 8021516:	f004 f821 	bl	802555c <strcpy>
 802151a:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 802151c:	4601      	mov	r1, r0
 802151e:	4620      	mov	r0, r4
 8021520:	f7ff fe9e 	bl	8021260 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8021524:	4606      	mov	r6, r0
 8021526:	b960      	cbnz	r0, 8021542 <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8021528:	4930      	ldr	r1, [pc, #192]	; (80215ec <ES_WIFI_GetNetworkSettings+0xe4>)
    ptr = strtok(NULL, ",");
 802152a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80215ec <ES_WIFI_GetNetworkSettings+0xe4>
  ptr = strtok(pdata + 2, ",");
 802152e:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8021532:	f004 f845 	bl	80255c0 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8021536:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 802153a:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2);
 802153c:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 8021540:	b910      	cbnz	r0, 8021548 <ES_WIFI_GetNetworkSettings+0x40>
  }

  UNLOCK_WIFI();
  return ret;
}
 8021542:	4630      	mov	r0, r6
 8021544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8021548:	2d0b      	cmp	r5, #11
 802154a:	d80c      	bhi.n	8021566 <ES_WIFI_GetNetworkSettings+0x5e>
 802154c:	e8df f005 	tbb	[pc, r5]
 8021550:	241e1906 	.word	0x241e1906
 8021554:	3835302a 	.word	0x3835302a
 8021558:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 802155c:	4601      	mov	r1, r0
 802155e:	2221      	movs	r2, #33	; 0x21
 8021560:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8021562:	f004 f803 	bl	802556c <strncpy>
    ptr = strtok(NULL, ",");
 8021566:	4649      	mov	r1, r9
 8021568:	2000      	movs	r0, #0
 802156a:	f004 f829 	bl	80255c0 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 802156e:	2800      	cmp	r0, #0
 8021570:	d0e7      	beq.n	8021542 <ES_WIFI_GetNetworkSettings+0x3a>
 8021572:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8021576:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8021578:	bf14      	ite	ne
 802157a:	3501      	addne	r5, #1
      num++;
 802157c:	3502      	addeq	r5, #2
 802157e:	b2ed      	uxtb	r5, r5
 8021580:	e7de      	b.n	8021540 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8021582:	4601      	mov	r1, r0
 8021584:	2221      	movs	r2, #33	; 0x21
 8021586:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 802158a:	e7ea      	b.n	8021562 <ES_WIFI_GetNetworkSettings+0x5a>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 802158c:	2100      	movs	r1, #0
 802158e:	f7ff fdfe 	bl	802118e <ParseNumber>
 8021592:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 8021596:	e7e6      	b.n	8021566 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8021598:	2100      	movs	r1, #0
 802159a:	f7ff fdf8 	bl	802118e <ParseNumber>
 802159e:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 80215a2:	e7e0      	b.n	8021566 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80215a4:	2100      	movs	r1, #0
 80215a6:	f7ff fdf2 	bl	802118e <ParseNumber>
 80215aa:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 80215ae:	e7da      	b.n	8021566 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Addr);
 80215b0:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask);
 80215b4:	f7ff fe3a 	bl	802122c <ParseIP>
      break;
 80215b8:	e7d5      	b.n	8021566 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Mask);
 80215ba:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 80215be:	e7f9      	b.n	80215b4 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80215c0:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 80215c4:	e7f6      	b.n	80215b4 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS1);
 80215c6:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 80215ca:	e7f3      	b.n	80215b4 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS2);
 80215cc:	4641      	mov	r1, r8
 80215ce:	e7f1      	b.n	80215b4 <ES_WIFI_GetNetworkSettings+0xac>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 80215d0:	2100      	movs	r1, #0
 80215d2:	f7ff fddc 	bl	802118e <ParseNumber>
 80215d6:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 80215da:	e7c4      	b.n	8021566 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80215dc:	2100      	movs	r1, #0
 80215de:	f7ff fdd6 	bl	802118e <ParseNumber>
 80215e2:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 80215e6:	e7be      	b.n	8021566 <ES_WIFI_GetNetworkSettings+0x5e>
 80215e8:	08026ddc 	.word	0x08026ddc
 80215ec:	08026f8b 	.word	0x08026f8b

080215f0 <ES_WIFI_GetMACAddress>:
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 80215f0:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 80215f4:	b570      	push	{r4, r5, r6, lr}
 80215f6:	4604      	mov	r4, r0
 80215f8:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 80215fa:	4610      	mov	r0, r2
 80215fc:	4909      	ldr	r1, [pc, #36]	; (8021624 <ES_WIFI_GetMACAddress+0x34>)
 80215fe:	f003 ffad 	bl	802555c <strcpy>
 8021602:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021604:	4601      	mov	r1, r0
 8021606:	4620      	mov	r0, r4
 8021608:	f7ff fe2a 	bl	8021260 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 802160c:	4605      	mov	r5, r0
 802160e:	b938      	cbnz	r0, 8021620 <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8021610:	4905      	ldr	r1, [pc, #20]	; (8021628 <ES_WIFI_GetMACAddress+0x38>)
 8021612:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8021616:	f003 ffd3 	bl	80255c0 <strtok>
    ParseMAC(ptr, mac) ;
 802161a:	4631      	mov	r1, r6
 802161c:	f7ff fdd3 	bl	80211c6 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
}
 8021620:	4628      	mov	r0, r5
 8021622:	bd70      	pop	{r4, r5, r6, pc}
 8021624:	08026e1d 	.word	0x08026e1d
 8021628:	0802704a 	.word	0x0802704a

0802162c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 802162c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 802162e:	780b      	ldrb	r3, [r1, #0]
{
 8021630:	4605      	mov	r5, r0
 8021632:	460e      	mov	r6, r1
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8021634:	b10b      	cbz	r3, 802163a <ES_WIFI_StartClientConnection+0xe>
 8021636:	2b03      	cmp	r3, #3
 8021638:	d102      	bne.n	8021640 <ES_WIFI_StartClientConnection+0x14>
 802163a:	8873      	ldrh	r3, [r6, #2]
 802163c:	2b00      	cmp	r3, #0
 802163e:	d064      	beq.n	802170a <ES_WIFI_StartClientConnection+0xde>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8021640:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8021644:	7872      	ldrb	r2, [r6, #1]
 8021646:	4932      	ldr	r1, [pc, #200]	; (8021710 <ES_WIFI_StartClientConnection+0xe4>)
 8021648:	4620      	mov	r0, r4
 802164a:	f003 ff67 	bl	802551c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 802164e:	4622      	mov	r2, r4
 8021650:	4621      	mov	r1, r4
 8021652:	4628      	mov	r0, r5
 8021654:	f7ff fe04 	bl	8021260 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8021658:	2800      	cmp	r0, #0
 802165a:	d146      	bne.n	80216ea <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 802165c:	7832      	ldrb	r2, [r6, #0]
 802165e:	492d      	ldr	r1, [pc, #180]	; (8021714 <ES_WIFI_StartClientConnection+0xe8>)
 8021660:	4620      	mov	r0, r4
 8021662:	f003 ff5b 	bl	802551c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021666:	4622      	mov	r2, r4
 8021668:	4621      	mov	r1, r4
 802166a:	4628      	mov	r0, r5
 802166c:	f7ff fdf8 	bl	8021260 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8021670:	2800      	cmp	r0, #0
 8021672:	d13a      	bne.n	80216ea <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8021674:	88b2      	ldrh	r2, [r6, #4]
 8021676:	4928      	ldr	r1, [pc, #160]	; (8021718 <ES_WIFI_StartClientConnection+0xec>)
 8021678:	4620      	mov	r0, r4
 802167a:	f003 ff4f 	bl	802551c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 802167e:	4622      	mov	r2, r4
 8021680:	4621      	mov	r1, r4
 8021682:	4628      	mov	r0, r5
 8021684:	f7ff fdec 	bl	8021260 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8021688:	bb78      	cbnz	r0, 80216ea <ES_WIFI_StartClientConnection+0xbe>
 802168a:	7833      	ldrb	r3, [r6, #0]
 802168c:	b30b      	cbz	r3, 80216d2 <ES_WIFI_StartClientConnection+0xa6>
 802168e:	2b03      	cmp	r3, #3
 8021690:	d01f      	beq.n	80216d2 <ES_WIFI_StartClientConnection+0xa6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8021692:	7833      	ldrb	r3, [r6, #0]
 8021694:	bb5b      	cbnz	r3, 80216ee <ES_WIFI_StartClientConnection+0xc2>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8021696:	7a73      	ldrb	r3, [r6, #9]
 8021698:	9301      	str	r3, [sp, #4]
 802169a:	7a33      	ldrb	r3, [r6, #8]
 802169c:	79b2      	ldrb	r2, [r6, #6]
 802169e:	491f      	ldr	r1, [pc, #124]	; (802171c <ES_WIFI_StartClientConnection+0xf0>)
 80216a0:	9300      	str	r3, [sp, #0]
 80216a2:	4620      	mov	r0, r4
 80216a4:	79f3      	ldrb	r3, [r6, #7]
 80216a6:	f003 ff39 	bl	802551c <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80216aa:	4622      	mov	r2, r4
 80216ac:	4621      	mov	r1, r4
 80216ae:	4628      	mov	r0, r5
 80216b0:	f7ff fdd6 	bl	8021260 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80216b4:	b9c8      	cbnz	r0, 80216ea <ES_WIFI_StartClientConnection+0xbe>
 80216b6:	7833      	ldrb	r3, [r6, #0]
 80216b8:	2b03      	cmp	r3, #3
 80216ba:	d11a      	bne.n	80216f2 <ES_WIFI_StartClientConnection+0xc6>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80216bc:	4918      	ldr	r1, [pc, #96]	; (8021720 <ES_WIFI_StartClientConnection+0xf4>)
 80216be:	4620      	mov	r0, r4
 80216c0:	f003 ff4c 	bl	802555c <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80216c4:	4622      	mov	r2, r4
 80216c6:	4621      	mov	r1, r4
 80216c8:	4628      	mov	r0, r5
 80216ca:	f7ff fdc9 	bl	8021260 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80216ce:	b180      	cbz	r0, 80216f2 <ES_WIFI_StartClientConnection+0xc6>
 80216d0:	e00b      	b.n	80216ea <ES_WIFI_StartClientConnection+0xbe>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80216d2:	8872      	ldrh	r2, [r6, #2]
 80216d4:	4913      	ldr	r1, [pc, #76]	; (8021724 <ES_WIFI_StartClientConnection+0xf8>)
 80216d6:	4620      	mov	r0, r4
 80216d8:	f003 ff20 	bl	802551c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80216dc:	4622      	mov	r2, r4
 80216de:	4621      	mov	r1, r4
 80216e0:	4628      	mov	r0, r5
 80216e2:	f7ff fdbd 	bl	8021260 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80216e6:	2800      	cmp	r0, #0
 80216e8:	d0d3      	beq.n	8021692 <ES_WIFI_StartClientConnection+0x66>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 80216ea:	b002      	add	sp, #8
 80216ec:	bd70      	pop	{r4, r5, r6, pc}
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80216ee:	2b03      	cmp	r3, #3
 80216f0:	d0d1      	beq.n	8021696 <ES_WIFI_StartClientConnection+0x6a>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80216f2:	490d      	ldr	r1, [pc, #52]	; (8021728 <ES_WIFI_StartClientConnection+0xfc>)
 80216f4:	4620      	mov	r0, r4
 80216f6:	f003 ff31 	bl	802555c <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80216fa:	4622      	mov	r2, r4
 80216fc:	4621      	mov	r1, r4
 80216fe:	4628      	mov	r0, r5
}
 8021700:	b002      	add	sp, #8
 8021702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021706:	f7ff bdab 	b.w	8021260 <AT_ExecuteCommand>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 802170a:	2002      	movs	r0, #2
 802170c:	e7ed      	b.n	80216ea <ES_WIFI_StartClientConnection+0xbe>
 802170e:	bf00      	nop
 8021710:	08026e7c 	.word	0x08026e7c
 8021714:	08026e83 	.word	0x08026e83
 8021718:	08026e8a 	.word	0x08026e8a
 802171c:	08026e9e 	.word	0x08026e9e
 8021720:	08026eae 	.word	0x08026eae
 8021724:	08026e91 	.word	0x08026e91
 8021728:	08026e98 	.word	0x08026e98

0802172c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 802172c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8021730:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8021734:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8021738:	bf28      	it	cs
 802173a:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 802173e:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8021742:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 8021744:	f8a8 3000 	strh.w	r3, [r8]
{
 8021748:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 802174a:	4628      	mov	r0, r5
 802174c:	460a      	mov	r2, r1
 802174e:	492e      	ldr	r1, [pc, #184]	; (8021808 <ES_WIFI_SendData+0xdc>)
 8021750:	461f      	mov	r7, r3
 8021752:	f003 fee3 	bl	802551c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021756:	462a      	mov	r2, r5
 8021758:	4629      	mov	r1, r5
 802175a:	4630      	mov	r0, r6
 802175c:	f7ff fd80 	bl	8021260 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8021760:	4604      	mov	r4, r0
 8021762:	2800      	cmp	r0, #0
 8021764:	d147      	bne.n	80217f6 <ES_WIFI_SendData+0xca>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8021766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021768:	4928      	ldr	r1, [pc, #160]	; (802180c <ES_WIFI_SendData+0xe0>)
 802176a:	2a01      	cmp	r2, #1
 802176c:	bf38      	it	cc
 802176e:	2201      	movcc	r2, #1
 8021770:	4628      	mov	r0, r5
 8021772:	f003 fed3 	bl	802551c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8021776:	462a      	mov	r2, r5
 8021778:	4629      	mov	r1, r5
 802177a:	4630      	mov	r0, r6
 802177c:	f7ff fd70 	bl	8021260 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8021780:	4604      	mov	r4, r0
 8021782:	bb80      	cbnz	r0, 80217e6 <ES_WIFI_SendData+0xba>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8021784:	4922      	ldr	r1, [pc, #136]	; (8021810 <ES_WIFI_SendData+0xe4>)
 8021786:	463a      	mov	r2, r7
 8021788:	4628      	mov	r0, r5
 802178a:	f003 fec7 	bl	802551c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 802178e:	9500      	str	r5, [sp, #0]
 8021790:	463b      	mov	r3, r7
 8021792:	464a      	mov	r2, r9
 8021794:	4629      	mov	r1, r5
 8021796:	4630      	mov	r0, r6
 8021798:	f7ff fd9e 	bl	80212d8 <AT_RequestSendData>

      if(ret == ES_WIFI_STATUS_OK)
 802179c:	4604      	mov	r4, r0
 802179e:	b998      	cbnz	r0, 80217c8 <ES_WIFI_SendData+0x9c>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 80217a0:	491c      	ldr	r1, [pc, #112]	; (8021814 <ES_WIFI_SendData+0xe8>)
 80217a2:	4628      	mov	r0, r5
 80217a4:	f003 fef5 	bl	8025592 <strstr>
 80217a8:	b1c8      	cbz	r0, 80217de <ES_WIFI_SendData+0xb2>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 80217aa:	491b      	ldr	r1, [pc, #108]	; (8021818 <ES_WIFI_SendData+0xec>)
 80217ac:	481b      	ldr	r0, [pc, #108]	; (802181c <ES_WIFI_SendData+0xf0>)
 80217ae:	f640 0267 	movw	r2, #2151	; 0x867
 80217b2:	f003 fe25 	bl	8025400 <iprintf>
 80217b6:	481a      	ldr	r0, [pc, #104]	; (8021820 <ES_WIFI_SendData+0xf4>)
 80217b8:	4629      	mov	r1, r5
 80217ba:	f003 fe21 	bl	8025400 <iprintf>
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 80217be:	2300      	movs	r3, #0
 80217c0:	f8a8 3000 	strh.w	r3, [r8]
 80217c4:	2402      	movs	r4, #2
 80217c6:	e00a      	b.n	80217de <ES_WIFI_SendData+0xb2>
        DEBUG("Send Data command failed\n");
 80217c8:	4913      	ldr	r1, [pc, #76]	; (8021818 <ES_WIFI_SendData+0xec>)
 80217ca:	4814      	ldr	r0, [pc, #80]	; (802181c <ES_WIFI_SendData+0xf0>)
 80217cc:	f640 026d 	movw	r2, #2157	; 0x86d
 80217d0:	f003 fe16 	bl	8025400 <iprintf>
 80217d4:	4813      	ldr	r0, [pc, #76]	; (8021824 <ES_WIFI_SendData+0xf8>)
   DEBUG("P0 command failed\n");
 80217d6:	f003 fe99 	bl	802550c <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 80217da:	2c02      	cmp	r4, #2
 80217dc:	d0ef      	beq.n	80217be <ES_WIFI_SendData+0x92>
  }
  UNLOCK_WIFI();
  return ret;
}
 80217de:	4620      	mov	r0, r4
 80217e0:	b003      	add	sp, #12
 80217e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n");
 80217e6:	490c      	ldr	r1, [pc, #48]	; (8021818 <ES_WIFI_SendData+0xec>)
 80217e8:	480c      	ldr	r0, [pc, #48]	; (802181c <ES_WIFI_SendData+0xf0>)
 80217ea:	f640 0272 	movw	r2, #2162	; 0x872
 80217ee:	f003 fe07 	bl	8025400 <iprintf>
 80217f2:	480d      	ldr	r0, [pc, #52]	; (8021828 <ES_WIFI_SendData+0xfc>)
 80217f4:	e7ef      	b.n	80217d6 <ES_WIFI_SendData+0xaa>
   DEBUG("P0 command failed\n");
 80217f6:	4908      	ldr	r1, [pc, #32]	; (8021818 <ES_WIFI_SendData+0xec>)
 80217f8:	4808      	ldr	r0, [pc, #32]	; (802181c <ES_WIFI_SendData+0xf0>)
 80217fa:	f640 0277 	movw	r2, #2167	; 0x877
 80217fe:	f003 fdff 	bl	8025400 <iprintf>
 8021802:	480a      	ldr	r0, [pc, #40]	; (802182c <ES_WIFI_SendData+0x100>)
 8021804:	e7e7      	b.n	80217d6 <ES_WIFI_SendData+0xaa>
 8021806:	bf00      	nop
 8021808:	08026e7c 	.word	0x08026e7c
 802180c:	08027037 	.word	0x08027037
 8021810:	0802703f 	.word	0x0802703f
 8021814:	08027048 	.word	0x08027048
 8021818:	08026ef0 	.word	0x08026ef0
 802181c:	08026f48 	.word	0x08026f48
 8021820:	0802704d 	.word	0x0802704d
 8021824:	08027068 	.word	0x08027068
 8021828:	08027081 	.word	0x08027081
 802182c:	08027093 	.word	0x08027093

08021830 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8021830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t        loop_per_us = 0;
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8021832:	4c17      	ldr	r4, [pc, #92]	; (8021890 <SPI_WIFI_DelayUs+0x60>)
 8021834:	4f17      	ldr	r7, [pc, #92]	; (8021894 <SPI_WIFI_DelayUs+0x64>)
  volatile        uint32_t ct = 0;
 8021836:	2300      	movs	r3, #0
 8021838:	9301      	str	r3, [sp, #4]
  if (cycle_per_loop == 0 ) 
 802183a:	6823      	ldr	r3, [r4, #0]
{
 802183c:	4605      	mov	r5, r0
  if (cycle_per_loop == 0 ) 
 802183e:	b98b      	cbnz	r3, 8021864 <SPI_WIFI_DelayUs+0x34>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8021840:	683b      	ldr	r3, [r7, #0]
 8021842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8021846:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t t = 0;
     ct = cycle_per_ms;
 802184a:	9301      	str	r3, [sp, #4]
     t = HAL_GetTick();
 802184c:	f000 fbcc 	bl	8021fe8 <HAL_GetTick>
 8021850:	4606      	mov	r6, r0
     while(ct) ct--;
 8021852:	9b01      	ldr	r3, [sp, #4]
 8021854:	b99b      	cbnz	r3, 802187e <SPI_WIFI_DelayUs+0x4e>
     cycle_per_loop = HAL_GetTick()-t;
 8021856:	f000 fbc7 	bl	8021fe8 <HAL_GetTick>
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 802185a:	1b80      	subs	r0, r0, r6
 802185c:	bf0a      	itet	eq
 802185e:	2301      	moveq	r3, #1
     cycle_per_loop = HAL_GetTick()-t;
 8021860:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8021862:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8021864:	4b0c      	ldr	r3, [pc, #48]	; (8021898 <SPI_WIFI_DelayUs+0x68>)
 8021866:	6838      	ldr	r0, [r7, #0]
 8021868:	fbb0 f0f3 	udiv	r0, r0, r3
 802186c:	6823      	ldr	r3, [r4, #0]
 802186e:	fbb0 f0f3 	udiv	r0, r0, r3
  ct = n * loop_per_us;
 8021872:	4368      	muls	r0, r5
 8021874:	9001      	str	r0, [sp, #4]
  while(ct) ct--;
 8021876:	9b01      	ldr	r3, [sp, #4]
 8021878:	b92b      	cbnz	r3, 8021886 <SPI_WIFI_DelayUs+0x56>
  return;
}
 802187a:	b003      	add	sp, #12
 802187c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 802187e:	9b01      	ldr	r3, [sp, #4]
 8021880:	3b01      	subs	r3, #1
 8021882:	9301      	str	r3, [sp, #4]
 8021884:	e7e5      	b.n	8021852 <SPI_WIFI_DelayUs+0x22>
  while(ct) ct--;
 8021886:	9b01      	ldr	r3, [sp, #4]
 8021888:	3b01      	subs	r3, #1
 802188a:	9301      	str	r3, [sp, #4]
 802188c:	e7f3      	b.n	8021876 <SPI_WIFI_DelayUs+0x46>
 802188e:	bf00      	nop
 8021890:	200000a4 	.word	0x200000a4
 8021894:	20000018 	.word	0x20000018
 8021898:	000f4240 	.word	0x000f4240

0802189c <wait_spi_tx_event>:
{
 802189c:	b570      	push	{r4, r5, r6, lr}
 802189e:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 80218a0:	f000 fba2 	bl	8021fe8 <HAL_GetTick>
  while (spi_tx_event==1)
 80218a4:	4e07      	ldr	r6, [pc, #28]	; (80218c4 <wait_spi_tx_event+0x28>)
  int tickstart = HAL_GetTick();
 80218a6:	4604      	mov	r4, r0
  while (spi_tx_event==1)
 80218a8:	6873      	ldr	r3, [r6, #4]
 80218aa:	2b01      	cmp	r3, #1
 80218ac:	d001      	beq.n	80218b2 <wait_spi_tx_event+0x16>
  return 0;
 80218ae:	2000      	movs	r0, #0
}
 80218b0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 80218b2:	f000 fb99 	bl	8021fe8 <HAL_GetTick>
 80218b6:	1b00      	subs	r0, r0, r4
 80218b8:	42a8      	cmp	r0, r5
 80218ba:	d9f5      	bls.n	80218a8 <wait_spi_tx_event+0xc>
      return -1;
 80218bc:	f04f 30ff 	mov.w	r0, #4294967295
 80218c0:	e7f6      	b.n	80218b0 <wait_spi_tx_event+0x14>
 80218c2:	bf00      	nop
 80218c4:	200000a4 	.word	0x200000a4

080218c8 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 80218c8:	4b3f      	ldr	r3, [pc, #252]	; (80219c8 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80218ca:	4840      	ldr	r0, [pc, #256]	; (80219cc <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 80218cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 80218ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 80218d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80218d4:	659a      	str	r2, [r3, #88]	; 0x58
 80218d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 80218d8:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 80218da:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80218de:	9201      	str	r2, [sp, #4]
 80218e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80218e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80218e4:	f042 0202 	orr.w	r2, r2, #2
 80218e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80218ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80218ec:	f002 0202 	and.w	r2, r2, #2
 80218f0:	9202      	str	r2, [sp, #8]
 80218f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80218f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80218f6:	f042 0204 	orr.w	r2, r2, #4
 80218fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80218fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80218fe:	f002 0204 	and.w	r2, r2, #4
 8021902:	9203      	str	r2, [sp, #12]
 8021904:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8021906:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021908:	f042 0210 	orr.w	r2, r2, #16
 802190c:	64da      	str	r2, [r3, #76]	; 0x4c
 802190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021910:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8021914:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8021916:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8021918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 802191c:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 802191e:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8021920:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8021922:	f001 f935 	bl	8022b90 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8021926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 802192a:	a905      	add	r1, sp, #20
 802192c:	4827      	ldr	r0, [pc, #156]	; (80219cc <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 802192e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8021932:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8021936:	f001 f847 	bl	80229c8 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 802193a:	4b25      	ldr	r3, [pc, #148]	; (80219d0 <SPI_WIFI_MspInit+0x108>)
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 802193c:	4825      	ldr	r0, [pc, #148]	; (80219d4 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 802193e:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8021940:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8021942:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8021946:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 802194a:	f001 f83d 	bl	80229c8 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 802194e:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8021952:	a905      	add	r1, sp, #20
 8021954:	481f      	ldr	r0, [pc, #124]	; (80219d4 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = 0;
 8021956:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8021958:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 802195c:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8021960:	f001 f832 	bl	80229c8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8021964:	4622      	mov	r2, r4
 8021966:	4621      	mov	r1, r4
 8021968:	481a      	ldr	r0, [pc, #104]	; (80219d4 <SPI_WIFI_MspInit+0x10c>)
 802196a:	f001 f911 	bl	8022b90 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 802196e:	a905      	add	r1, sp, #20
 8021970:	4818      	ldr	r0, [pc, #96]	; (80219d4 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8021972:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8021974:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8021978:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 802197c:	f001 f824 	bl	80229c8 <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8021980:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8021984:	a905      	add	r1, sp, #20
 8021986:	4814      	ldr	r0, [pc, #80]	; (80219d8 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8021988:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 802198a:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 802198e:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8021992:	f001 f819 	bl	80229c8 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8021996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 802199a:	a905      	add	r1, sp, #20
 802199c:	480e      	ldr	r0, [pc, #56]	; (80219d8 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 802199e:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80219a0:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80219a4:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80219a8:	f001 f80e 	bl	80229c8 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 80219ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80219b0:	4809      	ldr	r0, [pc, #36]	; (80219d8 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80219b2:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80219b4:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80219b6:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80219ba:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80219be:	f001 f803 	bl	80229c8 <HAL_GPIO_Init>
}
 80219c2:	b00b      	add	sp, #44	; 0x2c
 80219c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80219c6:	bf00      	nop
 80219c8:	40021000 	.word	0x40021000
 80219cc:	48000400 	.word	0x48000400
 80219d0:	10110000 	.word	0x10110000
 80219d4:	48001000 	.word	0x48001000
 80219d8:	48000800 	.word	0x48000800

080219dc <SPI_WIFI_ResetModule>:
{
 80219dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 80219de:	f000 fb03 	bl	8021fe8 <HAL_GetTick>
  WIFI_RESET_MODULE();
 80219e2:	2200      	movs	r2, #0
 80219e4:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 80219e8:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 80219ea:	482e      	ldr	r0, [pc, #184]	; (8021aa4 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80219ec:	4f2e      	ldr	r7, [pc, #184]	; (8021aa8 <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 80219ee:	f001 f8cf 	bl	8022b90 <HAL_GPIO_WritePin>
 80219f2:	200a      	movs	r0, #10
 80219f4:	f000 fafe 	bl	8021ff4 <HAL_Delay>
 80219f8:	2201      	movs	r2, #1
 80219fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80219fe:	4829      	ldr	r0, [pc, #164]	; (8021aa4 <SPI_WIFI_ResetModule+0xc8>)
 8021a00:	f001 f8c6 	bl	8022b90 <HAL_GPIO_WritePin>
 8021a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8021a08:	f000 faf4 	bl	8021ff4 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8021a0c:	4825      	ldr	r0, [pc, #148]	; (8021aa4 <SPI_WIFI_ResetModule+0xc8>)
 8021a0e:	2200      	movs	r2, #0
 8021a10:	2101      	movs	r1, #1
 8021a12:	f001 f8bd 	bl	8022b90 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8021a16:	200f      	movs	r0, #15
 8021a18:	f7ff ff0a 	bl	8021830 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 8021a1c:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 8021a1e:	4821      	ldr	r0, [pc, #132]	; (8021aa4 <SPI_WIFI_ResetModule+0xc8>)
 8021a20:	2102      	movs	r1, #2
 8021a22:	f001 f8af 	bl	8022b84 <HAL_GPIO_ReadPin>
 8021a26:	2801      	cmp	r0, #1
 8021a28:	4602      	mov	r2, r0
 8021a2a:	d020      	beq.n	8021a6e <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS();
 8021a2c:	2201      	movs	r2, #1
 8021a2e:	481d      	ldr	r0, [pc, #116]	; (8021aa4 <SPI_WIFI_ResetModule+0xc8>)
 8021a30:	4611      	mov	r1, r2
 8021a32:	f001 f8ad 	bl	8022b90 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8021a36:	f89d 3000 	ldrb.w	r3, [sp]
 8021a3a:	2b15      	cmp	r3, #21
 8021a3c:	d12e      	bne.n	8021a9c <SPI_WIFI_ResetModule+0xc0>
 8021a3e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8021a42:	2b15      	cmp	r3, #21
 8021a44:	d12a      	bne.n	8021a9c <SPI_WIFI_ResetModule+0xc0>
 8021a46:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8021a4a:	2b0d      	cmp	r3, #13
 8021a4c:	d126      	bne.n	8021a9c <SPI_WIFI_ResetModule+0xc0>
 8021a4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8021a52:	2b0a      	cmp	r3, #10
 8021a54:	d122      	bne.n	8021a9c <SPI_WIFI_ResetModule+0xc0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8021a56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8021a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8021a5c:	d11e      	bne.n	8021a9c <SPI_WIFI_ResetModule+0xc0>
 8021a5e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8021a62:	3820      	subs	r0, #32
 8021a64:	bf18      	it	ne
 8021a66:	f04f 30ff 	movne.w	r0, #4294967295
}
 8021a6a:	b003      	add	sp, #12
 8021a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8021a6e:	eb0d 0104 	add.w	r1, sp, r4
 8021a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021a76:	4638      	mov	r0, r7
 8021a78:	f002 fc4b 	bl	8024312 <HAL_SPI_Receive>
 8021a7c:	4606      	mov	r6, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8021a7e:	f000 fab3 	bl	8021fe8 <HAL_GetTick>
 8021a82:	1b40      	subs	r0, r0, r5
    count += 2;
 8021a84:	3402      	adds	r4, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8021a86:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8021a8a:	b2e4      	uxtb	r4, r4
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8021a8c:	d201      	bcs.n	8021a92 <SPI_WIFI_ResetModule+0xb6>
 8021a8e:	2e00      	cmp	r6, #0
 8021a90:	d0c5      	beq.n	8021a1e <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS();
 8021a92:	2201      	movs	r2, #1
 8021a94:	4803      	ldr	r0, [pc, #12]	; (8021aa4 <SPI_WIFI_ResetModule+0xc8>)
 8021a96:	4611      	mov	r1, r2
 8021a98:	f001 f87a 	bl	8022b90 <HAL_GPIO_WritePin>
    return -1;
 8021a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8021aa0:	e7e3      	b.n	8021a6a <SPI_WIFI_ResetModule+0x8e>
 8021aa2:	bf00      	nop
 8021aa4:	48001000 	.word	0x48001000
 8021aa8:	200001bc 	.word	0x200001bc

08021aac <SPI_WIFI_Init>:
{
 8021aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8021aae:	4605      	mov	r5, r0
 8021ab0:	bb78      	cbnz	r0, 8021b12 <SPI_WIFI_Init+0x66>
    hspi.Instance               = SPI3;
 8021ab2:	4c1c      	ldr	r4, [pc, #112]	; (8021b24 <SPI_WIFI_Init+0x78>)
 8021ab4:	4b1c      	ldr	r3, [pc, #112]	; (8021b28 <SPI_WIFI_Init+0x7c>)
 8021ab6:	6023      	str	r3, [r4, #0]
    SPI_WIFI_MspInit(&hspi);
 8021ab8:	4620      	mov	r0, r4
 8021aba:	f7ff ff05 	bl	80218c8 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8021abe:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8021ac2:	e9c4 3501 	strd	r3, r5, [r4, #4]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8021ac6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8021aca:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8021ace:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8021ad2:	4620      	mov	r0, r4
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8021ad4:	2310      	movs	r3, #16
 8021ad6:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8021ada:	e9c4 5508 	strd	r5, r5, [r4, #32]
    hspi.Init.CRCPolynomial     = 0;
 8021ade:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8021ae2:	6165      	str	r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8021ae4:	f002 f9bf 	bl	8023e66 <HAL_SPI_Init>
 8021ae8:	4602      	mov	r2, r0
 8021aea:	b9b8      	cbnz	r0, 8021b1c <SPI_WIFI_Init+0x70>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8021aec:	4601      	mov	r1, r0
 8021aee:	9001      	str	r0, [sp, #4]
 8021af0:	2007      	movs	r0, #7
 8021af2:	f000 feed 	bl	80228d0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8021af6:	2007      	movs	r0, #7
 8021af8:	f000 ff1c 	bl	8022934 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8021afc:	9a01      	ldr	r2, [sp, #4]
 8021afe:	2033      	movs	r0, #51	; 0x33
 8021b00:	4611      	mov	r1, r2
 8021b02:	f000 fee5 	bl	80228d0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8021b06:	2033      	movs	r0, #51	; 0x33
 8021b08:	f000 ff14 	bl	8022934 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8021b0c:	200a      	movs	r0, #10
 8021b0e:	f7ff fe8f 	bl	8021830 <SPI_WIFI_DelayUs>
}
 8021b12:	b003      	add	sp, #12
 8021b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc= SPI_WIFI_ResetModule();
 8021b18:	f7ff bf60 	b.w	80219dc <SPI_WIFI_ResetModule>
}
 8021b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8021b20:	b003      	add	sp, #12
 8021b22:	bd30      	pop	{r4, r5, pc}
 8021b24:	200001bc 	.word	0x200001bc
 8021b28:	40003c00 	.word	0x40003c00

08021b2c <SPI_WIFI_DeInit>:
{
 8021b2c:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8021b2e:	4802      	ldr	r0, [pc, #8]	; (8021b38 <SPI_WIFI_DeInit+0xc>)
 8021b30:	f002 fa1e 	bl	8023f70 <HAL_SPI_DeInit>
}
 8021b34:	2000      	movs	r0, #0
 8021b36:	bd08      	pop	{r3, pc}
 8021b38:	200001bc 	.word	0x200001bc

08021b3c <SPI_WIFI_ReceiveData>:
{
 8021b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b40:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS();
 8021b42:	2201      	movs	r2, #1
{
 8021b44:	4604      	mov	r4, r0
 8021b46:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS();
 8021b48:	4836      	ldr	r0, [pc, #216]	; (8021c24 <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event==1)
 8021b4a:	4e37      	ldr	r6, [pc, #220]	; (8021c28 <SPI_WIFI_ReceiveData+0xec>)
  WIFI_DISABLE_NSS();
 8021b4c:	4611      	mov	r1, r2
 8021b4e:	f001 f81f 	bl	8022b90 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 8021b52:	2003      	movs	r0, #3
 8021b54:	f7ff fe6c 	bl	8021830 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 8021b58:	f000 fa46 	bl	8021fe8 <HAL_GetTick>
 8021b5c:	46b1      	mov	r9, r6
 8021b5e:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event==1)
 8021b60:	68b3      	ldr	r3, [r6, #8]
 8021b62:	2b01      	cmp	r3, #1
 8021b64:	d01a      	beq.n	8021b9c <SPI_WIFI_ReceiveData+0x60>
  WIFI_ENABLE_NSS();
 8021b66:	482f      	ldr	r0, [pc, #188]	; (8021c24 <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 8021b68:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8021c24 <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8021b6c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8021c2c <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS();
 8021b70:	2200      	movs	r2, #0
 8021b72:	2101      	movs	r1, #1
 8021b74:	f001 f80c 	bl	8022b90 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8021b78:	200f      	movs	r0, #15
 8021b7a:	f7ff fe59 	bl	8021830 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8021b7e:	3402      	adds	r4, #2
 8021b80:	2500      	movs	r5, #0
 8021b82:	2102      	movs	r1, #2
 8021b84:	4658      	mov	r0, fp
 8021b86:	f000 fffd 	bl	8022b84 <HAL_GPIO_ReadPin>
 8021b8a:	2801      	cmp	r0, #1
 8021b8c:	b22e      	sxth	r6, r5
 8021b8e:	d00d      	beq.n	8021bac <SPI_WIFI_ReceiveData+0x70>
  WIFI_DISABLE_NSS();
 8021b90:	2201      	movs	r2, #1
 8021b92:	4824      	ldr	r0, [pc, #144]	; (8021c24 <SPI_WIFI_ReceiveData+0xe8>)
 8021b94:	4611      	mov	r1, r2
 8021b96:	f000 fffb 	bl	8022b90 <HAL_GPIO_WritePin>
  return length;
 8021b9a:	e01a      	b.n	8021bd2 <SPI_WIFI_ReceiveData+0x96>
    if((HAL_GetTick() - tickstart ) > timeout)
 8021b9c:	f000 fa24 	bl	8021fe8 <HAL_GetTick>
 8021ba0:	1b40      	subs	r0, r0, r5
 8021ba2:	4580      	cmp	r8, r0
 8021ba4:	d2dc      	bcs.n	8021b60 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8021ba6:	f06f 0602 	mvn.w	r6, #2
 8021baa:	e012      	b.n	8021bd2 <SPI_WIFI_ReceiveData+0x96>
    if((length < len) || (!len))
 8021bac:	42af      	cmp	r7, r5
 8021bae:	dc01      	bgt.n	8021bb4 <SPI_WIFI_ReceiveData+0x78>
 8021bb0:	2f00      	cmp	r7, #0
 8021bb2:	d1ed      	bne.n	8021b90 <SPI_WIFI_ReceiveData+0x54>
      spi_rx_event=1;
 8021bb4:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8021bb6:	a901      	add	r1, sp, #4
 8021bb8:	4650      	mov	r0, sl
      spi_rx_event=1;
 8021bba:	f8c9 200c 	str.w	r2, [r9, #12]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8021bbe:	f002 fd99 	bl	80246f4 <HAL_SPI_Receive_IT>
 8021bc2:	2201      	movs	r2, #1
 8021bc4:	b148      	cbz	r0, 8021bda <SPI_WIFI_ReceiveData+0x9e>
        WIFI_DISABLE_NSS();
 8021bc6:	4817      	ldr	r0, [pc, #92]	; (8021c24 <SPI_WIFI_ReceiveData+0xe8>)
 8021bc8:	4611      	mov	r1, r2
 8021bca:	f000 ffe1 	bl	8022b90 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8021bce:	f04f 36ff 	mov.w	r6, #4294967295
}
 8021bd2:	4630      	mov	r0, r6
 8021bd4:	b003      	add	sp, #12
 8021bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8021bda:	f000 fa05 	bl	8021fe8 <HAL_GetTick>
 8021bde:	4606      	mov	r6, r0
  while (spi_rx_event==1)
 8021be0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8021be4:	2b01      	cmp	r3, #1
 8021be6:	d104      	bne.n	8021bf2 <SPI_WIFI_ReceiveData+0xb6>
    if((HAL_GetTick() - tickstart ) > timeout)
 8021be8:	f000 f9fe 	bl	8021fe8 <HAL_GetTick>
 8021bec:	1b80      	subs	r0, r0, r6
 8021bee:	4580      	cmp	r8, r0
 8021bf0:	d2f6      	bcs.n	8021be0 <SPI_WIFI_ReceiveData+0xa4>
      pData[0] = tmp[0];
 8021bf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8021bf6:	f804 3c02 	strb.w	r3, [r4, #-2]
      pData[1] = tmp[1];
 8021bfa:	3502      	adds	r5, #2
 8021bfc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8021c00:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 8021c04:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8021c08:	f104 0402 	add.w	r4, r4, #2
 8021c0c:	d1b9      	bne.n	8021b82 <SPI_WIFI_ReceiveData+0x46>
        WIFI_DISABLE_NSS();
 8021c0e:	2201      	movs	r2, #1
 8021c10:	4804      	ldr	r0, [pc, #16]	; (8021c24 <SPI_WIFI_ReceiveData+0xe8>)
 8021c12:	4611      	mov	r1, r2
 8021c14:	f000 ffbc 	bl	8022b90 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8021c18:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();
 8021c1c:	f7ff fede 	bl	80219dc <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8021c20:	e7d7      	b.n	8021bd2 <SPI_WIFI_ReceiveData+0x96>
 8021c22:	bf00      	nop
 8021c24:	48001000 	.word	0x48001000
 8021c28:	200000a4 	.word	0x200000a4
 8021c2c:	200001bc 	.word	0x200001bc

08021c30 <SPI_WIFI_SendData>:
{
 8021c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021c34:	4605      	mov	r5, r0
 8021c36:	460c      	mov	r4, r1
 8021c38:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 8021c3a:	f000 f9d5 	bl	8021fe8 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY()==0)
 8021c3e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8021cd8 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 8021c42:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY()==0)
 8021c44:	2102      	movs	r1, #2
 8021c46:	4648      	mov	r0, r9
 8021c48:	f000 ff9c 	bl	8022b84 <HAL_GPIO_ReadPin>
 8021c4c:	2801      	cmp	r0, #1
 8021c4e:	4606      	mov	r6, r0
 8021c50:	d11b      	bne.n	8021c8a <SPI_WIFI_SendData+0x5a>
  cmddata_rdy_rising_event=1;
 8021c52:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8021ce0 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 8021c56:	4601      	mov	r1, r0
  cmddata_rdy_rising_event=1;
 8021c58:	f8c8 0008 	str.w	r0, [r8, #8]
  WIFI_ENABLE_NSS();
 8021c5c:	2200      	movs	r2, #0
 8021c5e:	481e      	ldr	r0, [pc, #120]	; (8021cd8 <SPI_WIFI_SendData+0xa8>)
 8021c60:	f000 ff96 	bl	8022b90 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8021c64:	200f      	movs	r0, #15
 8021c66:	f7ff fde3 	bl	8021830 <SPI_WIFI_DelayUs>
  if (len > 1)
 8021c6a:	2c01      	cmp	r4, #1
 8021c6c:	d919      	bls.n	8021ca2 <SPI_WIFI_SendData+0x72>
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8021c6e:	481b      	ldr	r0, [pc, #108]	; (8021cdc <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8021c70:	f8c8 6004 	str.w	r6, [r8, #4]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8021c74:	0862      	lsrs	r2, r4, #1
 8021c76:	4629      	mov	r1, r5
 8021c78:	f002 fc62 	bl	8024540 <HAL_SPI_Transmit_IT>
 8021c7c:	b170      	cbz	r0, 8021c9c <SPI_WIFI_SendData+0x6c>
      WIFI_DISABLE_NSS();
 8021c7e:	2201      	movs	r2, #1
 8021c80:	4815      	ldr	r0, [pc, #84]	; (8021cd8 <SPI_WIFI_SendData+0xa8>)
 8021c82:	4611      	mov	r1, r2
 8021c84:	f000 ff84 	bl	8022b90 <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 8021c88:	e005      	b.n	8021c96 <SPI_WIFI_SendData+0x66>
    if((HAL_GetTick() - tickstart ) > timeout)
 8021c8a:	f000 f9ad 	bl	8021fe8 <HAL_GetTick>
 8021c8e:	eba0 0008 	sub.w	r0, r0, r8
 8021c92:	4287      	cmp	r7, r0
 8021c94:	d2d6      	bcs.n	8021c44 <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 8021c96:	f04f 30ff 	mov.w	r0, #4294967295
 8021c9a:	e019      	b.n	8021cd0 <SPI_WIFI_SendData+0xa0>
    wait_spi_tx_event(timeout);
 8021c9c:	4638      	mov	r0, r7
 8021c9e:	f7ff fdfd 	bl	802189c <wait_spi_tx_event>
  if ( len & 1)
 8021ca2:	07e3      	lsls	r3, r4, #31
 8021ca4:	d513      	bpl.n	8021cce <SPI_WIFI_SendData+0x9e>
    Padding[0] = pdata[len-1];
 8021ca6:	4425      	add	r5, r4
    spi_tx_event=1;
 8021ca8:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 8021caa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021cae:	f88d 3004 	strb.w	r3, [sp, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8021cb2:	480a      	ldr	r0, [pc, #40]	; (8021cdc <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8021cb4:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8021cb8:	230a      	movs	r3, #10
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8021cba:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8021cbc:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8021cc0:	f002 fc3e 	bl	8024540 <HAL_SPI_Transmit_IT>
 8021cc4:	2800      	cmp	r0, #0
 8021cc6:	d1da      	bne.n	8021c7e <SPI_WIFI_SendData+0x4e>
    wait_spi_tx_event(timeout);
 8021cc8:	4638      	mov	r0, r7
 8021cca:	f7ff fde7 	bl	802189c <wait_spi_tx_event>
  return len;
 8021cce:	b220      	sxth	r0, r4
}
 8021cd0:	b003      	add	sp, #12
 8021cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021cd6:	bf00      	nop
 8021cd8:	48001000 	.word	0x48001000
 8021cdc:	200001bc 	.word	0x200001bc
 8021ce0:	200000a4 	.word	0x200000a4

08021ce4 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8021ce4:	f000 b986 	b.w	8021ff4 <HAL_Delay>

08021ce8 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8021ce8:	4b02      	ldr	r3, [pc, #8]	; (8021cf4 <HAL_SPI_RxCpltCallback+0xc>)
 8021cea:	68da      	ldr	r2, [r3, #12]
 8021cec:	b10a      	cbz	r2, 8021cf2 <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8021cee:	2200      	movs	r2, #0
 8021cf0:	60da      	str	r2, [r3, #12]
  }
}
 8021cf2:	4770      	bx	lr
 8021cf4:	200000a4 	.word	0x200000a4

08021cf8 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8021cf8:	4b02      	ldr	r3, [pc, #8]	; (8021d04 <HAL_SPI_TxCpltCallback+0xc>)
 8021cfa:	685a      	ldr	r2, [r3, #4]
 8021cfc:	b10a      	cbz	r2, 8021d02 <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8021cfe:	2200      	movs	r2, #0
 8021d00:	605a      	str	r2, [r3, #4]
  }
}
 8021d02:	4770      	bx	lr
 8021d04:	200000a4 	.word	0x200000a4

08021d08 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event==1)  
 8021d08:	4b03      	ldr	r3, [pc, #12]	; (8021d18 <SPI_WIFI_ISR+0x10>)
 8021d0a:	689a      	ldr	r2, [r3, #8]
 8021d0c:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8021d0e:	bf04      	itt	eq
 8021d10:	2200      	moveq	r2, #0
 8021d12:	609a      	streq	r2, [r3, #8]
   }
}
 8021d14:	4770      	bx	lr
 8021d16:	bf00      	nop
 8021d18:	200000a4 	.word	0x200000a4

08021d1c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8021d1c:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8021d1e:	4b0b      	ldr	r3, [pc, #44]	; (8021d4c <WIFI_Init+0x30>)
 8021d20:	9301      	str	r3, [sp, #4]
 8021d22:	4b0b      	ldr	r3, [pc, #44]	; (8021d50 <WIFI_Init+0x34>)
 8021d24:	9300      	str	r3, [sp, #0]
 8021d26:	4a0b      	ldr	r2, [pc, #44]	; (8021d54 <WIFI_Init+0x38>)
 8021d28:	4b0b      	ldr	r3, [pc, #44]	; (8021d58 <WIFI_Init+0x3c>)
 8021d2a:	490c      	ldr	r1, [pc, #48]	; (8021d5c <WIFI_Init+0x40>)
 8021d2c:	480c      	ldr	r0, [pc, #48]	; (8021d60 <WIFI_Init+0x44>)
 8021d2e:	f7ff fb7d 	bl	802142c <ES_WIFI_RegisterBusIO>
 8021d32:	b940      	cbnz	r0, 8021d46 <WIFI_Init+0x2a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8021d34:	480a      	ldr	r0, [pc, #40]	; (8021d60 <WIFI_Init+0x44>)
 8021d36:	f7ff fb17 	bl	8021368 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021d3a:	3800      	subs	r0, #0
 8021d3c:	bf18      	it	ne
 8021d3e:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8021d40:	b003      	add	sp, #12
 8021d42:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021d46:	2001      	movs	r0, #1
 8021d48:	e7fa      	b.n	8021d40 <WIFI_Init+0x24>
 8021d4a:	bf00      	nop
 8021d4c:	08021b3d 	.word	0x08021b3d
 8021d50:	08021c31 	.word	0x08021c31
 8021d54:	08021b2d 	.word	0x08021b2d
 8021d58:	08021ce5 	.word	0x08021ce5
 8021d5c:	08021aad 	.word	0x08021aad
 8021d60:	20000220 	.word	0x20000220

08021d64 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8021d64:	b508      	push	{r3, lr}
 8021d66:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8021d68:	460a      	mov	r2, r1
 8021d6a:	4601      	mov	r1, r0
 8021d6c:	4806      	ldr	r0, [pc, #24]	; (8021d88 <WIFI_Connect+0x24>)
 8021d6e:	f7ff fb6f 	bl	8021450 <ES_WIFI_Connect>
 8021d72:	b930      	cbnz	r0, 8021d82 <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8021d74:	4804      	ldr	r0, [pc, #16]	; (8021d88 <WIFI_Connect+0x24>)
 8021d76:	f7ff fbc7 	bl	8021508 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021d7a:	3800      	subs	r0, #0
 8021d7c:	bf18      	it	ne
 8021d7e:	2001      	movne	r0, #1
    {
       ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8021d80:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021d82:	2001      	movs	r0, #1
 8021d84:	e7fc      	b.n	8021d80 <WIFI_Connect+0x1c>
 8021d86:	bf00      	nop
 8021d88:	20000220 	.word	0x20000220

08021d8c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8021d8c:	4601      	mov	r1, r0
 8021d8e:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8021d90:	4803      	ldr	r0, [pc, #12]	; (8021da0 <WIFI_GetMAC_Address+0x14>)
 8021d92:	f7ff fc2d 	bl	80215f0 <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8021d96:	3800      	subs	r0, #0
 8021d98:	bf18      	it	ne
 8021d9a:	2001      	movne	r0, #1
 8021d9c:	bd08      	pop	{r3, pc}
 8021d9e:	bf00      	nop
 8021da0:	20000220 	.word	0x20000220

08021da4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8021da4:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8021da6:	4d06      	ldr	r5, [pc, #24]	; (8021dc0 <WIFI_GetIP_Address+0x1c>)
{
 8021da8:	4604      	mov	r4, r0
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8021daa:	4628      	mov	r0, r5
 8021dac:	f7ff fb90 	bl	80214d0 <ES_WIFI_IsConnected>
 8021db0:	2801      	cmp	r0, #1
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8021db2:	bf03      	ittte	eq
 8021db4:	f8d5 30d5 	ldreq.w	r3, [r5, #213]	; 0xd5
 8021db8:	6023      	streq	r3, [r4, #0]
    ret = WIFI_STATUS_OK;
 8021dba:	2000      	moveq	r0, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8021dbc:	2001      	movne	r0, #1
  }
  return ret;
}
 8021dbe:	bd38      	pop	{r3, r4, r5, pc}
 8021dc0:	20000220 	.word	0x20000220

08021dc4 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8021dc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8021dc6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021dca:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 8021dce:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021dd2:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8021dd6:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8021dd8:	781a      	ldrb	r2, [r3, #0]
 8021dda:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8021dde:	bf18      	it	ne
 8021de0:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8021de2:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8021de4:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8021de8:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 8021dec:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8021df0:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 8021df2:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8021df4:	4806      	ldr	r0, [pc, #24]	; (8021e10 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8021df6:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8021df8:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 8021dfc:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8021e00:	f7ff fc14 	bl	802162c <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8021e04:	3800      	subs	r0, #0
 8021e06:	bf18      	it	ne
 8021e08:	2001      	movne	r0, #1
 8021e0a:	b007      	add	sp, #28
 8021e0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021e10:	20000220 	.word	0x20000220

08021e14 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8021e14:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8021e16:	9c04      	ldr	r4, [sp, #16]
 8021e18:	e9cd 3400 	strd	r3, r4, [sp]
 8021e1c:	4613      	mov	r3, r2
 8021e1e:	460a      	mov	r2, r1
 8021e20:	4601      	mov	r1, r0
 8021e22:	4804      	ldr	r0, [pc, #16]	; (8021e34 <WIFI_SendData+0x20>)
 8021e24:	f7ff fc82 	bl	802172c <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8021e28:	3800      	subs	r0, #0
 8021e2a:	bf18      	it	ne
 8021e2c:	2001      	movne	r0, #1
 8021e2e:	b002      	add	sp, #8
 8021e30:	bd10      	pop	{r4, pc}
 8021e32:	bf00      	nop
 8021e34:	20000220 	.word	0x20000220

08021e38 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8021e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8021e3a:	b948      	cbnz	r0, 8021e50 <BSP_LED_Init+0x18>
 8021e3c:	4b0d      	ldr	r3, [pc, #52]	; (8021e74 <BSP_LED_Init+0x3c>)
 8021e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021e40:	f042 0202 	orr.w	r2, r2, #2
 8021e44:	64da      	str	r2, [r3, #76]	; 0x4c
 8021e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021e48:	f003 0302 	and.w	r3, r3, #2
 8021e4c:	9300      	str	r3, [sp, #0]
 8021e4e:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8021e50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8021e54:	2301      	movs	r3, #1
 8021e56:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8021e5a:	2100      	movs	r1, #0
 8021e5c:	2302      	movs	r3, #2
 8021e5e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8021e62:	4b05      	ldr	r3, [pc, #20]	; (8021e78 <BSP_LED_Init+0x40>)
 8021e64:	a901      	add	r1, sp, #4
 8021e66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021e6a:	f000 fdad 	bl	80229c8 <HAL_GPIO_Init>
}
 8021e6e:	b007      	add	sp, #28
 8021e70:	f85d fb04 	ldr.w	pc, [sp], #4
 8021e74:	40021000 	.word	0x40021000
 8021e78:	20000004 	.word	0x20000004

08021e7c <BSP_LED_On>:
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8021e7c:	4b03      	ldr	r3, [pc, #12]	; (8021e8c <BSP_LED_On+0x10>)
 8021e7e:	2201      	movs	r2, #1
 8021e80:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021e84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021e88:	f000 be82 	b.w	8022b90 <HAL_GPIO_WritePin>
 8021e8c:	20000004 	.word	0x20000004

08021e90 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8021e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021e92:	460d      	mov	r5, r1
 8021e94:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8021e96:	b9d8      	cbnz	r0, 8021ed0 <BSP_COM_Init+0x40>
 8021e98:	4b1d      	ldr	r3, [pc, #116]	; (8021f10 <BSP_COM_Init+0x80>)
 8021e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021e9c:	f042 0202 	orr.w	r2, r2, #2
 8021ea0:	64da      	str	r2, [r3, #76]	; 0x4c
 8021ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021ea4:	f002 0202 	and.w	r2, r2, #2
 8021ea8:	9200      	str	r2, [sp, #0]
 8021eaa:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8021eac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021eae:	f042 0202 	orr.w	r2, r2, #2
 8021eb2:	64da      	str	r2, [r3, #76]	; 0x4c
 8021eb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021eb6:	f002 0202 	and.w	r2, r2, #2
 8021eba:	9201      	str	r2, [sp, #4]
 8021ebc:	9a01      	ldr	r2, [sp, #4]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8021ebe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8021ec4:	661a      	str	r2, [r3, #96]	; 0x60
 8021ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8021ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021ecc:	9302      	str	r3, [sp, #8]
 8021ece:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = COM_TX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Alternate = COM_TX_AF[COM];
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021ed0:	4c10      	ldr	r4, [pc, #64]	; (8021f14 <BSP_COM_Init+0x84>)
 8021ed2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8021ed6:	2602      	movs	r6, #2
 8021ed8:	2340      	movs	r3, #64	; 0x40
 8021eda:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021ede:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8021ee0:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8021ee2:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8021ee4:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021ee6:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8021ee8:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8021eea:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8021eec:	f000 fd6c 	bl	80229c8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8021ef0:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8021ef2:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8021ef4:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8021ef6:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8021ef8:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8021efc:	f000 fd64 	bl	80229c8 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8021f00:	6923      	ldr	r3, [r4, #16]
 8021f02:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 8021f04:	4628      	mov	r0, r5
 8021f06:	f003 f998 	bl	802523a <HAL_UART_Init>
}
 8021f0a:	b009      	add	sp, #36	; 0x24
 8021f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f0e:	bf00      	nop
 8021f10:	40021000 	.word	0x40021000
 8021f14:	20000004 	.word	0x20000004

08021f18 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021f18:	490f      	ldr	r1, [pc, #60]	; (8021f58 <SystemInit+0x40>)
 8021f1a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8021f1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8021f26:	4b0d      	ldr	r3, [pc, #52]	; (8021f5c <SystemInit+0x44>)
 8021f28:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8021f2a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8021f2c:	f042 0201 	orr.w	r2, r2, #1
 8021f30:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8021f32:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8021f34:	681a      	ldr	r2, [r3, #0]
 8021f36:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8021f3a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8021f3e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8021f40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8021f44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8021f46:	681a      	ldr	r2, [r3, #0]
 8021f48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8021f4c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8021f4e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8021f50:	4b03      	ldr	r3, [pc, #12]	; (8021f60 <SystemInit+0x48>)
 8021f52:	608b      	str	r3, [r1, #8]
#endif
}
 8021f54:	4770      	bx	lr
 8021f56:	bf00      	nop
 8021f58:	e000ed00 	.word	0xe000ed00
 8021f5c:	40021000 	.word	0x40021000
 8021f60:	08020000 	.word	0x08020000

08021f64 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8021f64:	4770      	bx	lr
	...

08021f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021f68:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8021f6a:	4e0f      	ldr	r6, [pc, #60]	; (8021fa8 <HAL_InitTick+0x40>)
{
 8021f6c:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8021f6e:	7830      	ldrb	r0, [r6, #0]
 8021f70:	b908      	cbnz	r0, 8021f76 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8021f72:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8021f74:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8021f76:	4a0d      	ldr	r2, [pc, #52]	; (8021fac <HAL_InitTick+0x44>)
 8021f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021f7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8021f80:	6810      	ldr	r0, [r2, #0]
 8021f82:	fbb0 f0f3 	udiv	r0, r0, r3
 8021f86:	f000 fce3 	bl	8022950 <HAL_SYSTICK_Config>
 8021f8a:	4604      	mov	r4, r0
 8021f8c:	2800      	cmp	r0, #0
 8021f8e:	d1f0      	bne.n	8021f72 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021f90:	2d0f      	cmp	r5, #15
 8021f92:	d8ee      	bhi.n	8021f72 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021f94:	4602      	mov	r2, r0
 8021f96:	4629      	mov	r1, r5
 8021f98:	f04f 30ff 	mov.w	r0, #4294967295
 8021f9c:	f000 fc98 	bl	80228d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021fa0:	6075      	str	r5, [r6, #4]
 8021fa2:	4620      	mov	r0, r4
 8021fa4:	e7e6      	b.n	8021f74 <HAL_InitTick+0xc>
 8021fa6:	bf00      	nop
 8021fa8:	2000001c 	.word	0x2000001c
 8021fac:	20000018 	.word	0x20000018

08021fb0 <HAL_Init>:
{
 8021fb0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021fb2:	2003      	movs	r0, #3
 8021fb4:	f000 fc7a 	bl	80228ac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8021fb8:	200f      	movs	r0, #15
 8021fba:	f7ff ffd5 	bl	8021f68 <HAL_InitTick>
 8021fbe:	4604      	mov	r4, r0
 8021fc0:	b918      	cbnz	r0, 8021fca <HAL_Init+0x1a>
    HAL_MspInit();
 8021fc2:	f7ff ffcf 	bl	8021f64 <HAL_MspInit>
}
 8021fc6:	4620      	mov	r0, r4
 8021fc8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8021fca:	2401      	movs	r4, #1
 8021fcc:	e7fb      	b.n	8021fc6 <HAL_Init+0x16>
	...

08021fd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8021fd0:	4a03      	ldr	r2, [pc, #12]	; (8021fe0 <HAL_IncTick+0x10>)
 8021fd2:	4b04      	ldr	r3, [pc, #16]	; (8021fe4 <HAL_IncTick+0x14>)
 8021fd4:	6811      	ldr	r1, [r2, #0]
 8021fd6:	781b      	ldrb	r3, [r3, #0]
 8021fd8:	440b      	add	r3, r1
 8021fda:	6013      	str	r3, [r2, #0]
}
 8021fdc:	4770      	bx	lr
 8021fde:	bf00      	nop
 8021fe0:	20000bf0 	.word	0x20000bf0
 8021fe4:	2000001c 	.word	0x2000001c

08021fe8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8021fe8:	4b01      	ldr	r3, [pc, #4]	; (8021ff0 <HAL_GetTick+0x8>)
 8021fea:	6818      	ldr	r0, [r3, #0]
}
 8021fec:	4770      	bx	lr
 8021fee:	bf00      	nop
 8021ff0:	20000bf0 	.word	0x20000bf0

08021ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021ff4:	b538      	push	{r3, r4, r5, lr}
 8021ff6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8021ff8:	f7ff fff6 	bl	8021fe8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8021ffc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8021ffe:	bf1c      	itt	ne
 8022000:	4b05      	ldrne	r3, [pc, #20]	; (8022018 <HAL_Delay+0x24>)
 8022002:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8022004:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8022006:	bf18      	it	ne
 8022008:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802200a:	f7ff ffed 	bl	8021fe8 <HAL_GetTick>
 802200e:	1b43      	subs	r3, r0, r5
 8022010:	42a3      	cmp	r3, r4
 8022012:	d3fa      	bcc.n	802200a <HAL_Delay+0x16>
  {
  }
}
 8022014:	bd38      	pop	{r3, r4, r5, pc}
 8022016:	bf00      	nop
 8022018:	2000001c 	.word	0x2000001c

0802201c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 802201c:	4a02      	ldr	r2, [pc, #8]	; (8022028 <HAL_SuspendTick+0xc>)
 802201e:	6813      	ldr	r3, [r2, #0]
 8022020:	f023 0302 	bic.w	r3, r3, #2
 8022024:	6013      	str	r3, [r2, #0]
}
 8022026:	4770      	bx	lr
 8022028:	e000e010 	.word	0xe000e010

0802202c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 802202c:	4a02      	ldr	r2, [pc, #8]	; (8022038 <HAL_ResumeTick+0xc>)
 802202e:	6813      	ldr	r3, [r2, #0]
 8022030:	f043 0302 	orr.w	r3, r3, #2
 8022034:	6013      	str	r3, [r2, #0]
}
 8022036:	4770      	bx	lr
 8022038:	e000e010 	.word	0xe000e010

0802203c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 802203c:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 802203e:	0dcc      	lsrs	r4, r1, #23
 8022040:	f004 0404 	and.w	r4, r4, #4
 8022044:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8022046:	f3c1 5104 	ubfx	r1, r1, #20, #5
 802204a:	5823      	ldr	r3, [r4, r0]
 802204c:	2507      	movs	r5, #7
 802204e:	408d      	lsls	r5, r1
 8022050:	ea23 0305 	bic.w	r3, r3, r5
 8022054:	fa02 f101 	lsl.w	r1, r2, r1
 8022058:	430b      	orrs	r3, r1
 802205a:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 802205c:	bd30      	pop	{r4, r5, pc}

0802205e <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 802205e:	6880      	ldr	r0, [r0, #8]
}
 8022060:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8022064:	4770      	bx	lr
	...

08022068 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8022068:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 802206a:	2300      	movs	r3, #0
 802206c:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 802206e:	4604      	mov	r4, r0
 8022070:	2800      	cmp	r0, #0
 8022072:	f000 80c6 	beq.w	8022202 <HAL_ADC_Init+0x19a>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8022076:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8022078:	b925      	cbnz	r5, 8022084 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 802207a:	f7fe fff9 	bl	8021070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 802207e:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8022080:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8022084:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8022086:	6883      	ldr	r3, [r0, #8]
 8022088:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 802208a:	bf41      	itttt	mi
 802208c:	6883      	ldrmi	r3, [r0, #8]
 802208e:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 8022092:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 8022096:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8022098:	6883      	ldr	r3, [r0, #8]
 802209a:	00dd      	lsls	r5, r3, #3
 802209c:	f140 8091 	bpl.w	80221c2 <HAL_ADC_Init+0x15a>
 80220a0:	6883      	ldr	r3, [r0, #8]
 80220a2:	00d9      	lsls	r1, r3, #3
 80220a4:	f100 80a4 	bmi.w	80221f0 <HAL_ADC_Init+0x188>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80220a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80220aa:	f043 0310 	orr.w	r3, r3, #16
 80220ae:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80220b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80220b2:	f043 0301 	orr.w	r3, r3, #1
 80220b6:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80220b8:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80220ba:	f7ff ffd0 	bl	802205e <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80220be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80220c0:	f003 0310 	and.w	r3, r3, #16
 80220c4:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80220c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80220c8:	f040 8098 	bne.w	80221fc <HAL_ADC_Init+0x194>
    ADC_STATE_CLR_SET(hadc->State,
 80220cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80220d0:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80220d4:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80220d6:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80220d8:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80220da:	07da      	lsls	r2, r3, #31
 80220dc:	d411      	bmi.n	8022102 <HAL_ADC_Init+0x9a>
 80220de:	4b4a      	ldr	r3, [pc, #296]	; (8022208 <HAL_ADC_Init+0x1a0>)
 80220e0:	4a4a      	ldr	r2, [pc, #296]	; (802220c <HAL_ADC_Init+0x1a4>)
 80220e2:	689d      	ldr	r5, [r3, #8]
 80220e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80220e8:	689b      	ldr	r3, [r3, #8]
 80220ea:	6892      	ldr	r2, [r2, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80220ec:	432b      	orrs	r3, r5
 80220ee:	4313      	orrs	r3, r2
 80220f0:	07db      	lsls	r3, r3, #31
 80220f2:	d406      	bmi.n	8022102 <HAL_ADC_Init+0x9a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80220f4:	4a46      	ldr	r2, [pc, #280]	; (8022210 <HAL_ADC_Init+0x1a8>)
 80220f6:	6865      	ldr	r5, [r4, #4]
 80220f8:	6893      	ldr	r3, [r2, #8]
 80220fa:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80220fe:	432b      	orrs	r3, r5
 8022100:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8022102:	68e5      	ldr	r5, [r4, #12]
 8022104:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8022106:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 802210a:	432b      	orrs	r3, r5
 802210c:	68a5      	ldr	r5, [r4, #8]
 802210e:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8022110:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8022112:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8022114:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8022118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 802211c:	bf02      	ittt	eq
 802211e:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8022120:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8022124:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8022128:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802212a:	b122      	cbz	r2, 8022136 <HAL_ADC_Init+0xce>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 802212c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 802212e:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8022132:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8022134:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8022136:	68c5      	ldr	r5, [r0, #12]
 8022138:	4a36      	ldr	r2, [pc, #216]	; (8022214 <HAL_ADC_Init+0x1ac>)
 802213a:	402a      	ands	r2, r5
 802213c:	4313      	orrs	r3, r2
 802213e:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8022140:	f7ff ff8d 	bl	802205e <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8022144:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8022146:	689a      	ldr	r2, [r3, #8]
 8022148:	f002 0208 	and.w	r2, r2, #8
 802214c:	4302      	orrs	r2, r0
 802214e:	d120      	bne.n	8022192 <HAL_ADC_Init+0x12a>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8022150:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8022152:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8022156:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8022158:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 802215a:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 802215e:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8022162:	f020 0002 	bic.w	r0, r0, #2
 8022166:	4302      	orrs	r2, r0
 8022168:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 802216a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 802216e:	2a01      	cmp	r2, #1
 8022170:	d140      	bne.n	80221f4 <HAL_ADC_Init+0x18c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8022172:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 8022176:	6918      	ldr	r0, [r3, #16]
 8022178:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 802217c:	f020 0004 	bic.w	r0, r0, #4
 8022180:	432a      	orrs	r2, r5
 8022182:	4302      	orrs	r2, r0
 8022184:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8022186:	4302      	orrs	r2, r0
 8022188:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 802218a:	4302      	orrs	r2, r0
 802218c:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8022190:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8022192:	6922      	ldr	r2, [r4, #16]
 8022194:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8022196:	bf05      	ittet	eq
 8022198:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 802219a:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 802219c:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 802219e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80221a2:	bf06      	itte	eq
 80221a4:	f020 000f 	biceq.w	r0, r0, #15
 80221a8:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80221aa:	f022 020f 	bicne.w	r2, r2, #15
 80221ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80221b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80221b2:	f023 0303 	bic.w	r3, r3, #3
 80221b6:	f043 0301 	orr.w	r3, r3, #1
 80221ba:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80221bc:	4608      	mov	r0, r1
 80221be:	b003      	add	sp, #12
 80221c0:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80221c2:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80221c4:	4a14      	ldr	r2, [pc, #80]	; (8022218 <HAL_ADC_Init+0x1b0>)
 80221c6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80221ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80221ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80221d2:	6083      	str	r3, [r0, #8]
 80221d4:	4b11      	ldr	r3, [pc, #68]	; (802221c <HAL_ADC_Init+0x1b4>)
 80221d6:	681b      	ldr	r3, [r3, #0]
 80221d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80221dc:	3301      	adds	r3, #1
 80221de:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 80221e0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80221e2:	9b01      	ldr	r3, [sp, #4]
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	f43f af5b 	beq.w	80220a0 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 80221ea:	9b01      	ldr	r3, [sp, #4]
 80221ec:	3b01      	subs	r3, #1
 80221ee:	e7f7      	b.n	80221e0 <HAL_ADC_Init+0x178>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80221f0:	2100      	movs	r1, #0
 80221f2:	e762      	b.n	80220ba <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80221f4:	691a      	ldr	r2, [r3, #16]
 80221f6:	f022 0201 	bic.w	r2, r2, #1
 80221fa:	e7c9      	b.n	8022190 <HAL_ADC_Init+0x128>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80221fc:	f043 0310 	orr.w	r3, r3, #16
 8022200:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8022202:	2101      	movs	r1, #1
 8022204:	e7da      	b.n	80221bc <HAL_ADC_Init+0x154>
 8022206:	bf00      	nop
 8022208:	50040000 	.word	0x50040000
 802220c:	50040200 	.word	0x50040200
 8022210:	50040300 	.word	0x50040300
 8022214:	fff0c007 	.word	0xfff0c007
 8022218:	00030d40 	.word	0x00030d40
 802221c:	20000018 	.word	0x20000018

08022220 <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8022220:	4b38      	ldr	r3, [pc, #224]	; (8022304 <HAL_ADC_PollForConversion+0xe4>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8022222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8022226:	6945      	ldr	r5, [r0, #20]
 8022228:	689e      	ldr	r6, [r3, #8]
 802222a:	2d08      	cmp	r5, #8
{
 802222c:	4604      	mov	r4, r0
 802222e:	460f      	mov	r7, r1
 8022230:	f006 061f 	and.w	r6, r6, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8022234:	d017      	beq.n	8022266 <HAL_ADC_PollForConversion+0x46>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8022236:	2e09      	cmp	r6, #9
 8022238:	d810      	bhi.n	802225c <HAL_ADC_PollForConversion+0x3c>
 802223a:	f240 2221 	movw	r2, #545	; 0x221
 802223e:	40f2      	lsrs	r2, r6
 8022240:	07d1      	lsls	r1, r2, #31
 8022242:	d50b      	bpl.n	802225c <HAL_ADC_PollForConversion+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8022244:	6803      	ldr	r3, [r0, #0]
 8022246:	68db      	ldr	r3, [r3, #12]
 8022248:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 802224c:	d00a      	beq.n	8022264 <HAL_ADC_PollForConversion+0x44>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 802224e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022250:	f043 0320 	orr.w	r3, r3, #32
 8022254:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8022256:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8022258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 802225c:	689b      	ldr	r3, [r3, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 802225e:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8022262:	e7f3      	b.n	802224c <HAL_ADC_PollForConversion+0x2c>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8022264:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 8022266:	f7ff febf 	bl	8021fe8 <HAL_GetTick>
 802226a:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 802226c:	6823      	ldr	r3, [r4, #0]
 802226e:	681a      	ldr	r2, [r3, #0]
 8022270:	422a      	tst	r2, r5
 8022272:	d020      	beq.n	80222b6 <HAL_ADC_PollForConversion+0x96>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8022274:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8022276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802227a:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 802227c:	68da      	ldr	r2, [r3, #12]
 802227e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8022282:	d10f      	bne.n	80222a4 <HAL_ADC_PollForConversion+0x84>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8022284:	7e62      	ldrb	r2, [r4, #25]
 8022286:	b96a      	cbnz	r2, 80222a4 <HAL_ADC_PollForConversion+0x84>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8022288:	681a      	ldr	r2, [r3, #0]
 802228a:	0710      	lsls	r0, r2, #28
 802228c:	d50a      	bpl.n	80222a4 <HAL_ADC_PollForConversion+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 802228e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8022290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022294:	6562      	str	r2, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8022296:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8022298:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 802229a:	bf5e      	ittt	pl
 802229c:	6d62      	ldrpl	r2, [r4, #84]	; 0x54
 802229e:	f042 0201 	orrpl.w	r2, r2, #1
 80222a2:	6562      	strpl	r2, [r4, #84]	; 0x54
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80222a4:	4a18      	ldr	r2, [pc, #96]	; (8022308 <HAL_ADC_PollForConversion+0xe8>)
 80222a6:	4293      	cmp	r3, r2
 80222a8:	d021      	beq.n	80222ee <HAL_ADC_PollForConversion+0xce>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80222aa:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80222ac:	2d08      	cmp	r5, #8
 80222ae:	d118      	bne.n	80222e2 <HAL_ADC_PollForConversion+0xc2>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80222b0:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 80222b2:	2000      	movs	r0, #0
 80222b4:	e7d0      	b.n	8022258 <HAL_ADC_PollForConversion+0x38>
    if (Timeout != HAL_MAX_DELAY)
 80222b6:	1c7a      	adds	r2, r7, #1
 80222b8:	d0d9      	beq.n	802226e <HAL_ADC_PollForConversion+0x4e>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80222ba:	f7ff fe95 	bl	8021fe8 <HAL_GetTick>
 80222be:	eba0 0008 	sub.w	r0, r0, r8
 80222c2:	42b8      	cmp	r0, r7
 80222c4:	d801      	bhi.n	80222ca <HAL_ADC_PollForConversion+0xaa>
 80222c6:	2f00      	cmp	r7, #0
 80222c8:	d1d0      	bne.n	802226c <HAL_ADC_PollForConversion+0x4c>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80222ca:	6823      	ldr	r3, [r4, #0]
 80222cc:	681b      	ldr	r3, [r3, #0]
 80222ce:	402b      	ands	r3, r5
 80222d0:	d1cc      	bne.n	802226c <HAL_ADC_PollForConversion+0x4c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80222d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 80222d4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80222d8:	f042 0204 	orr.w	r2, r2, #4
 80222dc:	6562      	str	r2, [r4, #84]	; 0x54
          return HAL_TIMEOUT;
 80222de:	2003      	movs	r0, #3
 80222e0:	e7ba      	b.n	8022258 <HAL_ADC_PollForConversion+0x38>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80222e2:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80222e6:	d1e4      	bne.n	80222b2 <HAL_ADC_PollForConversion+0x92>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80222e8:	220c      	movs	r2, #12
 80222ea:	601a      	str	r2, [r3, #0]
 80222ec:	e7b4      	b.n	8022258 <HAL_ADC_PollForConversion+0x38>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80222ee:	2e09      	cmp	r6, #9
 80222f0:	d805      	bhi.n	80222fe <HAL_ADC_PollForConversion+0xde>
 80222f2:	f240 2221 	movw	r2, #545	; 0x221
 80222f6:	fa22 f606 	lsr.w	r6, r2, r6
 80222fa:	07f2      	lsls	r2, r6, #31
 80222fc:	d4d5      	bmi.n	80222aa <HAL_ADC_PollForConversion+0x8a>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80222fe:	4a03      	ldr	r2, [pc, #12]	; (802230c <HAL_ADC_PollForConversion+0xec>)
 8022300:	68d0      	ldr	r0, [r2, #12]
 8022302:	e7d3      	b.n	80222ac <HAL_ADC_PollForConversion+0x8c>
 8022304:	50040300 	.word	0x50040300
 8022308:	50040100 	.word	0x50040100
 802230c:	50040000 	.word	0x50040000

08022310 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8022310:	6803      	ldr	r3, [r0, #0]
 8022312:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8022314:	4770      	bx	lr
	...

08022318 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8022318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 802231a:	2300      	movs	r3, #0
 802231c:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 802231e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8022322:	2b01      	cmp	r3, #1
{
 8022324:	4605      	mov	r5, r0
 8022326:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8022328:	f000 818d 	beq.w	8022646 <HAL_ADC_ConfigChannel+0x32e>
 802232c:	2301      	movs	r3, #1
 802232e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8022332:	6800      	ldr	r0, [r0, #0]
 8022334:	f7ff fe93 	bl	802205e <LL_ADC_REG_IsConversionOngoing>
 8022338:	2800      	cmp	r0, #0
 802233a:	f040 817e 	bne.w	802263a <HAL_ADC_ConfigChannel+0x322>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 802233e:	684b      	ldr	r3, [r1, #4]
 8022340:	2b05      	cmp	r3, #5
 8022342:	d809      	bhi.n	8022358 <HAL_ADC_ConfigChannel+0x40>
    {
      switch (sConfig->Rank)
 8022344:	3b02      	subs	r3, #2
 8022346:	2b03      	cmp	r3, #3
 8022348:	f200 8083 	bhi.w	8022452 <HAL_ADC_ConfigChannel+0x13a>
 802234c:	e8df f003 	tbb	[pc, r3]
 8022350:	7e7c7a02 	.word	0x7e7c7a02
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8022354:	230c      	movs	r3, #12
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
          break;
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8022356:	6063      	str	r3, [r4, #4]
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8022358:	6862      	ldr	r2, [r4, #4]
 802235a:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 802235c:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 802235e:	0991      	lsrs	r1, r2, #6
 8022360:	f001 010c 	and.w	r1, r1, #12
 8022364:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8022368:	f002 021f 	and.w	r2, r2, #31
 802236c:	59ce      	ldr	r6, [r1, r7]
 802236e:	f04f 0c1f 	mov.w	ip, #31
 8022372:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8022376:	4093      	lsls	r3, r2
 8022378:	fa0c f202 	lsl.w	r2, ip, r2
 802237c:	ea26 0202 	bic.w	r2, r6, r2
 8022380:	4313      	orrs	r3, r2
 8022382:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8022384:	f7ff fe6b 	bl	802205e <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8022388:	682e      	ldr	r6, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 802238a:	68b3      	ldr	r3, [r6, #8]
 802238c:	f003 0308 	and.w	r3, r3, #8
 8022390:	4303      	orrs	r3, r0
 8022392:	d11d      	bne.n	80223d0 <HAL_ADC_ConfigChannel+0xb8>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8022394:	4630      	mov	r0, r6
 8022396:	68a2      	ldr	r2, [r4, #8]
 8022398:	6821      	ldr	r1, [r4, #0]
 802239a:	f7ff fe4f 	bl	802203c <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 802239e:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80223a0:	6829      	ldr	r1, [r5, #0]
 80223a2:	6823      	ldr	r3, [r4, #0]
 80223a4:	68c8      	ldr	r0, [r1, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80223a6:	2e04      	cmp	r6, #4
 80223a8:	f101 0260 	add.w	r2, r1, #96	; 0x60
 80223ac:	d053      	beq.n	8022456 <HAL_ADC_ConfigChannel+0x13e>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80223ae:	f3c0 01c1 	ubfx	r1, r0, #3, #2
 80223b2:	0048      	lsls	r0, r1, #1
 80223b4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 80223b6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80223ba:	4081      	lsls	r1, r0
 80223bc:	48a3      	ldr	r0, [pc, #652]	; (802264c <HAL_ADC_ConfigChannel+0x334>)
 80223be:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80223c2:	4038      	ands	r0, r7
 80223c4:	4303      	orrs	r3, r0
 80223c6:	4319      	orrs	r1, r3
 80223c8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80223cc:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80223d0:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80223d2:	6883      	ldr	r3, [r0, #8]
 80223d4:	07d9      	lsls	r1, r3, #31
 80223d6:	f100 80bb 	bmi.w	8022550 <HAL_ADC_ConfigChannel+0x238>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80223da:	68e6      	ldr	r6, [r4, #12]
 80223dc:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80223de:	4a9c      	ldr	r2, [pc, #624]	; (8022650 <HAL_ADC_ConfigChannel+0x338>)
 80223e0:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80223e4:	f006 0c18 	and.w	ip, r6, #24
 80223e8:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80223ec:	fa22 f20c 	lsr.w	r2, r2, ip
 80223f0:	401a      	ands	r2, r3
 80223f2:	ea21 0107 	bic.w	r1, r1, r7
 80223f6:	430a      	orrs	r2, r1
 80223f8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80223fc:	4a95      	ldr	r2, [pc, #596]	; (8022654 <HAL_ADC_ConfigChannel+0x33c>)
 80223fe:	4296      	cmp	r6, r2
 8022400:	f040 80a6 	bne.w	8022550 <HAL_ADC_ConfigChannel+0x238>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8022404:	2f00      	cmp	r7, #0
 8022406:	d17b      	bne.n	8022500 <HAL_ADC_ConfigChannel+0x1e8>
 8022408:	0e99      	lsrs	r1, r3, #26
 802240a:	3101      	adds	r1, #1
 802240c:	f001 061f 	and.w	r6, r1, #31
 8022410:	0689      	lsls	r1, r1, #26
 8022412:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8022416:	2e09      	cmp	r6, #9
 8022418:	f04f 0101 	mov.w	r1, #1
 802241c:	fa01 f106 	lsl.w	r1, r1, r6
 8022420:	f240 8089 	bls.w	8022536 <HAL_ADC_ConfigChannel+0x21e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8022424:	4311      	orrs	r1, r2
 8022426:	2f00      	cmp	r7, #0
 8022428:	f040 80b3 	bne.w	8022592 <HAL_ADC_ConfigChannel+0x27a>
 802242c:	0e9a      	lsrs	r2, r3, #26
 802242e:	3201      	adds	r2, #1
 8022430:	f002 021f 	and.w	r2, r2, #31
 8022434:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8022438:	3b1e      	subs	r3, #30
 802243a:	051b      	lsls	r3, r3, #20
 802243c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8022440:	4319      	orrs	r1, r3
 8022442:	e082      	b.n	802254a <HAL_ADC_ConfigChannel+0x232>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8022444:	2312      	movs	r3, #18
 8022446:	e786      	b.n	8022356 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8022448:	2318      	movs	r3, #24
 802244a:	e784      	b.n	8022356 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 802244c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022450:	e781      	b.n	8022356 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8022452:	2306      	movs	r3, #6
 8022454:	e77f      	b.n	8022356 <HAL_ADC_ConfigChannel+0x3e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8022456:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8022458:	6e08      	ldr	r0, [r1, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 802245a:	f3c3 0612 	ubfx	r6, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 802245e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8022462:	2e00      	cmp	r6, #0
 8022464:	d138      	bne.n	80224d8 <HAL_ADC_ConfigChannel+0x1c0>
 8022466:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 802246a:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 802246c:	bf02      	ittt	eq
 802246e:	6e0b      	ldreq	r3, [r1, #96]	; 0x60
 8022470:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8022474:	660b      	streq	r3, [r1, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8022476:	6e4b      	ldr	r3, [r1, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8022478:	6823      	ldr	r3, [r4, #0]
 802247a:	6e48      	ldr	r0, [r1, #100]	; 0x64
 802247c:	f3c3 0612 	ubfx	r6, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8022480:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8022484:	bb6e      	cbnz	r6, 80224e2 <HAL_ADC_ConfigChannel+0x1ca>
 8022486:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 802248a:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 802248c:	bf02      	ittt	eq
 802248e:	6e4b      	ldreq	r3, [r1, #100]	; 0x64
 8022490:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8022494:	664b      	streq	r3, [r1, #100]	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8022496:	6893      	ldr	r3, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8022498:	6823      	ldr	r3, [r4, #0]
 802249a:	6891      	ldr	r1, [r2, #8]
 802249c:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80224a0:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80224a4:	bb10      	cbnz	r0, 80224ec <HAL_ADC_ConfigChannel+0x1d4>
 80224a6:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80224aa:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 80224ac:	bf02      	ittt	eq
 80224ae:	6893      	ldreq	r3, [r2, #8]
 80224b0:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80224b4:	6093      	streq	r3, [r2, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80224b6:	68d3      	ldr	r3, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80224b8:	6823      	ldr	r3, [r4, #0]
 80224ba:	68d1      	ldr	r1, [r2, #12]
 80224bc:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80224c0:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80224c4:	b9b8      	cbnz	r0, 80224f6 <HAL_ADC_ConfigChannel+0x1de>
 80224c6:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80224ca:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 80224cc:	bf02      	ittt	eq
 80224ce:	68d3      	ldreq	r3, [r2, #12]
 80224d0:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80224d4:	60d3      	streq	r3, [r2, #12]
}
 80224d6:	e77b      	b.n	80223d0 <HAL_ADC_ConfigChannel+0xb8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80224d8:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80224dc:	fab3 f383 	clz	r3, r3
 80224e0:	e7c3      	b.n	802246a <HAL_ADC_ConfigChannel+0x152>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80224e2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80224e6:	fab3 f383 	clz	r3, r3
 80224ea:	e7ce      	b.n	802248a <HAL_ADC_ConfigChannel+0x172>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80224ec:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80224f0:	fab3 f383 	clz	r3, r3
 80224f4:	e7d9      	b.n	80224aa <HAL_ADC_ConfigChannel+0x192>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80224f6:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80224fa:	fab3 f383 	clz	r3, r3
 80224fe:	e7e4      	b.n	80224ca <HAL_ADC_ConfigChannel+0x1b2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022500:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8022504:	b132      	cbz	r2, 8022514 <HAL_ADC_ConfigChannel+0x1fc>
  return __builtin_clz(value);
 8022506:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 802250a:	3201      	adds	r2, #1
 802250c:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8022510:	2a09      	cmp	r2, #9
 8022512:	d82c      	bhi.n	802256e <HAL_ADC_ConfigChannel+0x256>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022514:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8022518:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 802251c:	3101      	adds	r1, #1
 802251e:	0689      	lsls	r1, r1, #26
 8022520:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022524:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8022528:	fab1 f181 	clz	r1, r1
 802252c:	3101      	adds	r1, #1
 802252e:	f001 061f 	and.w	r6, r1, #31
 8022532:	2101      	movs	r1, #1
 8022534:	40b1      	lsls	r1, r6
 8022536:	4311      	orrs	r1, r2
 8022538:	b9a7      	cbnz	r7, 8022564 <HAL_ADC_ConfigChannel+0x24c>
 802253a:	0e9e      	lsrs	r6, r3, #26
 802253c:	3601      	adds	r6, #1
 802253e:	f006 061f 	and.w	r6, r6, #31
 8022542:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022546:	0536      	lsls	r6, r6, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8022548:	4331      	orrs	r1, r6
 802254a:	68a2      	ldr	r2, [r4, #8]
 802254c:	f7ff fd76 	bl	802203c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8022550:	6822      	ldr	r2, [r4, #0]
 8022552:	4b41      	ldr	r3, [pc, #260]	; (8022658 <HAL_ADC_ConfigChannel+0x340>)
 8022554:	421a      	tst	r2, r3
 8022556:	d121      	bne.n	802259c <HAL_ADC_ConfigChannel+0x284>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8022558:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802255a:	2300      	movs	r3, #0
 802255c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8022560:	b003      	add	sp, #12
 8022562:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022564:	fa93 f6a3 	rbit	r6, r3
  return __builtin_clz(value);
 8022568:	fab6 f686 	clz	r6, r6
 802256c:	e7e6      	b.n	802253c <HAL_ADC_ConfigChannel+0x224>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802256e:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8022572:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8022576:	3101      	adds	r1, #1
 8022578:	0689      	lsls	r1, r1, #26
 802257a:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802257e:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8022582:	fab1 f181 	clz	r1, r1
 8022586:	3101      	adds	r1, #1
 8022588:	f001 061f 	and.w	r6, r1, #31
 802258c:	2101      	movs	r1, #1
 802258e:	40b1      	lsls	r1, r6
 8022590:	e748      	b.n	8022424 <HAL_ADC_ConfigChannel+0x10c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022592:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8022596:	fab2 f282 	clz	r2, r2
 802259a:	e748      	b.n	802242e <HAL_ADC_ConfigChannel+0x116>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 802259c:	492f      	ldr	r1, [pc, #188]	; (802265c <HAL_ADC_ConfigChannel+0x344>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 802259e:	4b30      	ldr	r3, [pc, #192]	; (8022660 <HAL_ADC_ConfigChannel+0x348>)
 80225a0:	6888      	ldr	r0, [r1, #8]
 80225a2:	429a      	cmp	r2, r3
 80225a4:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80225a8:	460c      	mov	r4, r1
 80225aa:	d11f      	bne.n	80225ec <HAL_ADC_ConfigChannel+0x2d4>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80225ac:	0202      	lsls	r2, r0, #8
 80225ae:	d4d3      	bmi.n	8022558 <HAL_ADC_ConfigChannel+0x240>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80225b0:	682b      	ldr	r3, [r5, #0]
 80225b2:	4a2c      	ldr	r2, [pc, #176]	; (8022664 <HAL_ADC_ConfigChannel+0x34c>)
 80225b4:	4293      	cmp	r3, r2
 80225b6:	d003      	beq.n	80225c0 <HAL_ADC_ConfigChannel+0x2a8>
 80225b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80225bc:	4293      	cmp	r3, r2
 80225be:	d1cb      	bne.n	8022558 <HAL_ADC_ConfigChannel+0x240>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80225c0:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80225c2:	4a29      	ldr	r2, [pc, #164]	; (8022668 <HAL_ADC_ConfigChannel+0x350>)
 80225c4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80225c8:	4333      	orrs	r3, r6
 80225ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80225ce:	60a3      	str	r3, [r4, #8]
 80225d0:	4b26      	ldr	r3, [pc, #152]	; (802266c <HAL_ADC_ConfigChannel+0x354>)
 80225d2:	681b      	ldr	r3, [r3, #0]
 80225d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80225d8:	230c      	movs	r3, #12
 80225da:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 80225de:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80225e0:	9b01      	ldr	r3, [sp, #4]
 80225e2:	2b00      	cmp	r3, #0
 80225e4:	d0b8      	beq.n	8022558 <HAL_ADC_ConfigChannel+0x240>
            wait_loop_index--;
 80225e6:	9b01      	ldr	r3, [sp, #4]
 80225e8:	3b01      	subs	r3, #1
 80225ea:	e7f8      	b.n	80225de <HAL_ADC_ConfigChannel+0x2c6>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80225ec:	4b20      	ldr	r3, [pc, #128]	; (8022670 <HAL_ADC_ConfigChannel+0x358>)
 80225ee:	429a      	cmp	r2, r3
 80225f0:	d111      	bne.n	8022616 <HAL_ADC_ConfigChannel+0x2fe>
 80225f2:	01c3      	lsls	r3, r0, #7
 80225f4:	d4b0      	bmi.n	8022558 <HAL_ADC_ConfigChannel+0x240>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80225f6:	682b      	ldr	r3, [r5, #0]
 80225f8:	4a1a      	ldr	r2, [pc, #104]	; (8022664 <HAL_ADC_ConfigChannel+0x34c>)
 80225fa:	4293      	cmp	r3, r2
 80225fc:	d003      	beq.n	8022606 <HAL_ADC_ConfigChannel+0x2ee>
 80225fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8022602:	4293      	cmp	r3, r2
 8022604:	d1a8      	bne.n	8022558 <HAL_ADC_ConfigChannel+0x240>
 8022606:	68a3      	ldr	r3, [r4, #8]
 8022608:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 802260c:	4333      	orrs	r3, r6
 802260e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8022612:	60a3      	str	r3, [r4, #8]
 8022614:	e7a0      	b.n	8022558 <HAL_ADC_ConfigChannel+0x240>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8022616:	4b17      	ldr	r3, [pc, #92]	; (8022674 <HAL_ADC_ConfigChannel+0x35c>)
 8022618:	429a      	cmp	r2, r3
 802261a:	d19d      	bne.n	8022558 <HAL_ADC_ConfigChannel+0x240>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 802261c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8022620:	d19a      	bne.n	8022558 <HAL_ADC_ConfigChannel+0x240>
        if (ADC_VREFINT_INSTANCE(hadc))
 8022622:	682a      	ldr	r2, [r5, #0]
 8022624:	4b0f      	ldr	r3, [pc, #60]	; (8022664 <HAL_ADC_ConfigChannel+0x34c>)
 8022626:	429a      	cmp	r2, r3
 8022628:	d196      	bne.n	8022558 <HAL_ADC_ConfigChannel+0x240>
 802262a:	688b      	ldr	r3, [r1, #8]
 802262c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8022630:	4333      	orrs	r3, r6
 8022632:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8022636:	608b      	str	r3, [r1, #8]
}
 8022638:	e78f      	b.n	802255a <HAL_ADC_ConfigChannel+0x242>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 802263a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 802263c:	f042 0220 	orr.w	r2, r2, #32
 8022640:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8022642:	4618      	mov	r0, r3
 8022644:	e789      	b.n	802255a <HAL_ADC_ConfigChannel+0x242>
  __HAL_LOCK(hadc);
 8022646:	2002      	movs	r0, #2
 8022648:	e78a      	b.n	8022560 <HAL_ADC_ConfigChannel+0x248>
 802264a:	bf00      	nop
 802264c:	03fff000 	.word	0x03fff000
 8022650:	0007ffff 	.word	0x0007ffff
 8022654:	407f0000 	.word	0x407f0000
 8022658:	80080000 	.word	0x80080000
 802265c:	50040300 	.word	0x50040300
 8022660:	c7520000 	.word	0xc7520000
 8022664:	50040000 	.word	0x50040000
 8022668:	00030d40 	.word	0x00030d40
 802266c:	20000018 	.word	0x20000018
 8022670:	cb840000 	.word	0xcb840000
 8022674:	80000001 	.word	0x80000001

08022678 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8022678:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 802267a:	6893      	ldr	r3, [r2, #8]
{
 802267c:	b570      	push	{r4, r5, r6, lr}
 802267e:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8022680:	07d8      	lsls	r0, r3, #31
 8022682:	d501      	bpl.n	8022688 <ADC_Enable+0x10>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8022684:	2000      	movs	r0, #0
}
 8022686:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8022688:	6891      	ldr	r1, [r2, #8]
 802268a:	4b16      	ldr	r3, [pc, #88]	; (80226e4 <ADC_Enable+0x6c>)
 802268c:	4219      	tst	r1, r3
 802268e:	d009      	beq.n	80226a4 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8022690:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022692:	f043 0310 	orr.w	r3, r3, #16
 8022696:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8022698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802269a:	f043 0301 	orr.w	r3, r3, #1
 802269e:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80226a0:	2001      	movs	r0, #1
 80226a2:	e7f0      	b.n	8022686 <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 80226a4:	6893      	ldr	r3, [r2, #8]
 80226a6:	4d10      	ldr	r5, [pc, #64]	; (80226e8 <ADC_Enable+0x70>)
 80226a8:	402b      	ands	r3, r5
 80226aa:	f043 0301 	orr.w	r3, r3, #1
 80226ae:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80226b0:	f7ff fc9a 	bl	8021fe8 <HAL_GetTick>
 80226b4:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80226b6:	6822      	ldr	r2, [r4, #0]
 80226b8:	6813      	ldr	r3, [r2, #0]
 80226ba:	07db      	lsls	r3, r3, #31
 80226bc:	d4e2      	bmi.n	8022684 <ADC_Enable+0xc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80226be:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80226c0:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 80226c2:	bf5f      	itttt	pl
 80226c4:	6893      	ldrpl	r3, [r2, #8]
 80226c6:	402b      	andpl	r3, r5
 80226c8:	f043 0301 	orrpl.w	r3, r3, #1
 80226cc:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80226ce:	f7ff fc8b 	bl	8021fe8 <HAL_GetTick>
 80226d2:	1b83      	subs	r3, r0, r6
 80226d4:	2b02      	cmp	r3, #2
 80226d6:	d9ee      	bls.n	80226b6 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80226d8:	6823      	ldr	r3, [r4, #0]
 80226da:	681b      	ldr	r3, [r3, #0]
 80226dc:	07da      	lsls	r2, r3, #31
 80226de:	d4ea      	bmi.n	80226b6 <ADC_Enable+0x3e>
 80226e0:	e7d6      	b.n	8022690 <ADC_Enable+0x18>
 80226e2:	bf00      	nop
 80226e4:	8000003f 	.word	0x8000003f
 80226e8:	7fffffc0 	.word	0x7fffffc0

080226ec <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80226ec:	4b34      	ldr	r3, [pc, #208]	; (80227c0 <HAL_ADC_Start+0xd4>)
{
 80226ee:	b570      	push	{r4, r5, r6, lr}
 80226f0:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80226f2:	6800      	ldr	r0, [r0, #0]
 80226f4:	689e      	ldr	r6, [r3, #8]
 80226f6:	f7ff fcb2 	bl	802205e <LL_ADC_REG_IsConversionOngoing>
 80226fa:	4605      	mov	r5, r0
 80226fc:	2800      	cmp	r0, #0
 80226fe:	d159      	bne.n	80227b4 <HAL_ADC_Start+0xc8>
    __HAL_LOCK(hadc);
 8022700:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8022704:	2b01      	cmp	r3, #1
 8022706:	d055      	beq.n	80227b4 <HAL_ADC_Start+0xc8>
 8022708:	2301      	movs	r3, #1
 802270a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 802270e:	4620      	mov	r0, r4
 8022710:	f7ff ffb2 	bl	8022678 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8022714:	2800      	cmp	r0, #0
 8022716:	d14a      	bne.n	80227ae <HAL_ADC_Start+0xc2>
      ADC_STATE_CLR_SET(hadc->State,
 8022718:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 802271a:	492a      	ldr	r1, [pc, #168]	; (80227c4 <HAL_ADC_Start+0xd8>)
      ADC_STATE_CLR_SET(hadc->State,
 802271c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8022720:	f023 0301 	bic.w	r3, r3, #1
 8022724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022728:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 802272a:	6823      	ldr	r3, [r4, #0]
 802272c:	428b      	cmp	r3, r1
 802272e:	f006 021f 	and.w	r2, r6, #31
 8022732:	d041      	beq.n	80227b8 <HAL_ADC_Start+0xcc>
 8022734:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8022736:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8022738:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 802273c:	6565      	str	r5, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802273e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8022740:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8022744:	bf1c      	itt	ne
 8022746:	6da5      	ldrne	r5, [r4, #88]	; 0x58
 8022748:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 802274c:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 802274e:	251c      	movs	r5, #28
 8022750:	601d      	str	r5, [r3, #0]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8022752:	428b      	cmp	r3, r1
      __HAL_UNLOCK(hadc);
 8022754:	f04f 0500 	mov.w	r5, #0
 8022758:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 802275c:	d007      	beq.n	802276e <HAL_ADC_Start+0x82>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 802275e:	2a09      	cmp	r2, #9
 8022760:	d817      	bhi.n	8022792 <HAL_ADC_Start+0xa6>
 8022762:	f240 2521 	movw	r5, #545	; 0x221
 8022766:	fa25 f202 	lsr.w	r2, r5, r2
 802276a:	07d5      	lsls	r5, r2, #31
 802276c:	d511      	bpl.n	8022792 <HAL_ADC_Start+0xa6>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 802276e:	68da      	ldr	r2, [r3, #12]
 8022770:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8022772:	bf41      	itttt	mi
 8022774:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8022776:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 802277a:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 802277e:	6562      	strmi	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8022780:	689a      	ldr	r2, [r3, #8]
 8022782:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8022786:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 802278a:	f042 0204 	orr.w	r2, r2, #4
 802278e:	609a      	str	r2, [r3, #8]
}
 8022790:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8022792:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022798:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 802279a:	68cb      	ldr	r3, [r1, #12]
 802279c:	019b      	lsls	r3, r3, #6
 802279e:	d5f7      	bpl.n	8022790 <HAL_ADC_Start+0xa4>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80227a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80227a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80227a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80227aa:	6563      	str	r3, [r4, #84]	; 0x54
 80227ac:	e7f0      	b.n	8022790 <HAL_ADC_Start+0xa4>
      __HAL_UNLOCK(hadc);
 80227ae:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80227b2:	e7ed      	b.n	8022790 <HAL_ADC_Start+0xa4>
    tmp_hal_status = HAL_BUSY;
 80227b4:	2002      	movs	r0, #2
 80227b6:	e7eb      	b.n	8022790 <HAL_ADC_Start+0xa4>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80227b8:	4903      	ldr	r1, [pc, #12]	; (80227c8 <HAL_ADC_Start+0xdc>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80227ba:	2a00      	cmp	r2, #0
 80227bc:	d0bb      	beq.n	8022736 <HAL_ADC_Start+0x4a>
 80227be:	e7be      	b.n	802273e <HAL_ADC_Start+0x52>
 80227c0:	50040300 	.word	0x50040300
 80227c4:	50040100 	.word	0x50040100
 80227c8:	50040000 	.word	0x50040000

080227cc <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80227cc:	6880      	ldr	r0, [r0, #8]
}
 80227ce:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80227d2:	4770      	bx	lr

080227d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80227d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80227d6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80227da:	2b01      	cmp	r3, #1
{
 80227dc:	b09b      	sub	sp, #108	; 0x6c
 80227de:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80227e0:	d05a      	beq.n	8022898 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80227e2:	2301      	movs	r3, #1
 80227e4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80227e8:	6817      	ldr	r7, [r2, #0]
 80227ea:	4c2c      	ldr	r4, [pc, #176]	; (802289c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80227ec:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80227ee:	42a7      	cmp	r7, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80227f0:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80227f2:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80227f4:	d008      	beq.n	8022808 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80227f6:	6d51      	ldr	r1, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80227f8:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80227fc:	f041 0120 	orr.w	r1, r1, #32
 8022800:	6551      	str	r1, [r2, #84]	; 0x54

    return HAL_ERROR;
 8022802:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8022804:	b01b      	add	sp, #108	; 0x6c
 8022806:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8022808:	4e25      	ldr	r6, [pc, #148]	; (80228a0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 802280a:	4630      	mov	r0, r6
 802280c:	f7ff ffde 	bl	80227cc <LL_ADC_REG_IsConversionOngoing>
 8022810:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8022812:	6810      	ldr	r0, [r2, #0]
 8022814:	f7ff ffda 	bl	80227cc <LL_ADC_REG_IsConversionOngoing>
 8022818:	4320      	orrs	r0, r4
 802281a:	d138      	bne.n	802288e <HAL_ADCEx_MultiModeConfigChannel+0xba>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 802281c:	4c21      	ldr	r4, [pc, #132]	; (80228a4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 802281e:	680d      	ldr	r5, [r1, #0]
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8022820:	68a3      	ldr	r3, [r4, #8]
 8022822:	f8df c084 	ldr.w	ip, [pc, #132]	; 80228a8 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8022826:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 802282a:	b1fd      	cbz	r5, 802286c <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 802282c:	6848      	ldr	r0, [r1, #4]
 802282e:	4303      	orrs	r3, r0
 8022830:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8022834:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8022838:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 802283a:	68bf      	ldr	r7, [r7, #8]
 802283c:	68b3      	ldr	r3, [r6, #8]
 802283e:	f8dc 0008 	ldr.w	r0, [ip, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8022842:	433b      	orrs	r3, r7
 8022844:	4303      	orrs	r3, r0
 8022846:	f013 0301 	ands.w	r3, r3, #1
 802284a:	d004      	beq.n	8022856 <HAL_ADCEx_MultiModeConfigChannel+0x82>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 802284c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 802284e:	2300      	movs	r3, #0
 8022850:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8022854:	e7d6      	b.n	8022804 <HAL_ADCEx_MultiModeConfigChannel+0x30>
        MODIFY_REG(tmpADC_Common->CCR,
 8022856:	6889      	ldr	r1, [r1, #8]
 8022858:	68a0      	ldr	r0, [r4, #8]
 802285a:	430d      	orrs	r5, r1
 802285c:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8022860:	f021 010f 	bic.w	r1, r1, #15
 8022864:	430d      	orrs	r5, r1
 8022866:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 8022868:	4618      	mov	r0, r3
 802286a:	e7f0      	b.n	802284e <HAL_ADCEx_MultiModeConfigChannel+0x7a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 802286c:	60a3      	str	r3, [r4, #8]
 802286e:	68b9      	ldr	r1, [r7, #8]
 8022870:	68b3      	ldr	r3, [r6, #8]
 8022872:	f8dc 0008 	ldr.w	r0, [ip, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8022876:	430b      	orrs	r3, r1
 8022878:	4303      	orrs	r3, r0
 802287a:	f013 0301 	ands.w	r3, r3, #1
 802287e:	d1e5      	bne.n	802284c <HAL_ADCEx_MultiModeConfigChannel+0x78>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8022880:	68a1      	ldr	r1, [r4, #8]
 8022882:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8022886:	f021 010f 	bic.w	r1, r1, #15
 802288a:	60a1      	str	r1, [r4, #8]
 802288c:	e7ec      	b.n	8022868 <HAL_ADCEx_MultiModeConfigChannel+0x94>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 802288e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8022890:	f041 0120 	orr.w	r1, r1, #32
 8022894:	6551      	str	r1, [r2, #84]	; 0x54
 8022896:	e7e7      	b.n	8022868 <HAL_ADCEx_MultiModeConfigChannel+0x94>
  __HAL_LOCK(hadc);
 8022898:	2002      	movs	r0, #2
 802289a:	e7b3      	b.n	8022804 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 802289c:	50040000 	.word	0x50040000
 80228a0:	50040100 	.word	0x50040100
 80228a4:	50040300 	.word	0x50040300
 80228a8:	50040200 	.word	0x50040200

080228ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80228ac:	4907      	ldr	r1, [pc, #28]	; (80228cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80228ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80228b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80228b4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80228b6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80228b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80228bc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80228be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80228c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80228c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80228c8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80228ca:	4770      	bx	lr
 80228cc:	e000ed00 	.word	0xe000ed00

080228d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80228d0:	4b16      	ldr	r3, [pc, #88]	; (802292c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80228d2:	b530      	push	{r4, r5, lr}
 80228d4:	68dc      	ldr	r4, [r3, #12]
 80228d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80228da:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80228de:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80228e0:	2d04      	cmp	r5, #4
 80228e2:	bf28      	it	cs
 80228e4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80228e6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80228e8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80228ec:	bf8c      	ite	hi
 80228ee:	3c03      	subhi	r4, #3
 80228f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80228f2:	fa03 f505 	lsl.w	r5, r3, r5
 80228f6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80228fa:	40a3      	lsls	r3, r4
 80228fc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022900:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8022902:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022904:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022908:	bfac      	ite	ge
 802290a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802290e:	4a08      	ldrlt	r2, [pc, #32]	; (8022930 <HAL_NVIC_SetPriority+0x60>)
 8022910:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022914:	bfb8      	it	lt
 8022916:	f000 000f 	andlt.w	r0, r0, #15
 802291a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802291c:	bfaa      	itet	ge
 802291e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022922:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022924:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8022928:	bd30      	pop	{r4, r5, pc}
 802292a:	bf00      	nop
 802292c:	e000ed00 	.word	0xe000ed00
 8022930:	e000ed14 	.word	0xe000ed14

08022934 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8022934:	2800      	cmp	r0, #0
 8022936:	db08      	blt.n	802294a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022938:	2301      	movs	r3, #1
 802293a:	0942      	lsrs	r2, r0, #5
 802293c:	f000 001f 	and.w	r0, r0, #31
 8022940:	fa03 f000 	lsl.w	r0, r3, r0
 8022944:	4b01      	ldr	r3, [pc, #4]	; (802294c <HAL_NVIC_EnableIRQ+0x18>)
 8022946:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 802294a:	4770      	bx	lr
 802294c:	e000e100 	.word	0xe000e100

08022950 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8022950:	3801      	subs	r0, #1
 8022952:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8022956:	d20a      	bcs.n	802296e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8022958:	4b06      	ldr	r3, [pc, #24]	; (8022974 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802295a:	4a07      	ldr	r2, [pc, #28]	; (8022978 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802295c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802295e:	21f0      	movs	r1, #240	; 0xf0
 8022960:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8022964:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022966:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8022968:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802296c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 802296e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8022970:	4770      	bx	lr
 8022972:	bf00      	nop
 8022974:	e000e010 	.word	0xe000e010
 8022978:	e000ed00 	.word	0xe000ed00

0802297c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802297c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 802297e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8022982:	2a02      	cmp	r2, #2
 8022984:	d003      	beq.n	802298e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8022986:	2204      	movs	r2, #4
 8022988:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 802298a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 802298c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802298e:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8022990:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8022992:	6811      	ldr	r1, [r2, #0]
 8022994:	f021 010e 	bic.w	r1, r1, #14
 8022998:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 802299a:	6811      	ldr	r1, [r2, #0]
 802299c:	f021 0101 	bic.w	r1, r1, #1
 80229a0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80229a2:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 80229a6:	2101      	movs	r1, #1
 80229a8:	f002 021c 	and.w	r2, r2, #28
 80229ac:	fa01 f202 	lsl.w	r2, r1, r2
 80229b0:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80229b2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80229b4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80229b8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80229bc:	b113      	cbz	r3, 80229c4 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80229be:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80229c0:	4620      	mov	r0, r4
 80229c2:	e7e3      	b.n	802298c <HAL_DMA_Abort_IT+0x10>
 80229c4:	4618      	mov	r0, r3
 80229c6:	e7e1      	b.n	802298c <HAL_DMA_Abort_IT+0x10>

080229c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80229c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80229cc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8022b80 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80229d0:	4d69      	ldr	r5, [pc, #420]	; (8022b78 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80229d2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80229d4:	680a      	ldr	r2, [r1, #0]
 80229d6:	fa32 f403 	lsrs.w	r4, r2, r3
 80229da:	d102      	bne.n	80229e2 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80229dc:	b003      	add	sp, #12
 80229de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80229e2:	f04f 0a01 	mov.w	sl, #1
 80229e6:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 80229ea:	ea1a 0202 	ands.w	r2, sl, r2
 80229ee:	f000 80b4 	beq.w	8022b5a <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80229f2:	684c      	ldr	r4, [r1, #4]
 80229f4:	f024 0e10 	bic.w	lr, r4, #16
 80229f8:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80229fc:	2603      	movs	r6, #3
 80229fe:	f10e 37ff 	add.w	r7, lr, #4294967295
 8022a02:	fa06 f608 	lsl.w	r6, r6, r8
 8022a06:	2f01      	cmp	r7, #1
 8022a08:	ea6f 0606 	mvn.w	r6, r6
 8022a0c:	d811      	bhi.n	8022a32 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8022a0e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8022a10:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8022a14:	68cf      	ldr	r7, [r1, #12]
 8022a16:	fa07 f708 	lsl.w	r7, r7, r8
 8022a1a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8022a1e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8022a20:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8022a22:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8022a26:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8022a2a:	409f      	lsls	r7, r3
 8022a2c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8022a30:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8022a32:	f004 0c03 	and.w	ip, r4, #3
 8022a36:	f1bc 0f03 	cmp.w	ip, #3
 8022a3a:	d108      	bne.n	8022a4e <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 8022a3c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8022a3e:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8022a42:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8022a46:	409f      	lsls	r7, r3
 8022a48:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8022a4c:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8022a4e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8022a50:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8022a54:	688f      	ldr	r7, [r1, #8]
 8022a56:	fa07 f708 	lsl.w	r7, r7, r8
 8022a5a:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8022a5e:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8022a62:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8022a64:	d116      	bne.n	8022a94 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 8022a66:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8022a6a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8022a6e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8022a72:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8022a76:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8022a7a:	f04f 0e0f 	mov.w	lr, #15
 8022a7e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8022a82:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8022a86:	690f      	ldr	r7, [r1, #16]
 8022a88:	fa07 f70b 	lsl.w	r7, r7, fp
 8022a8c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8022a90:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8022a94:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8022a96:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8022a9a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8022a9c:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 8022aa0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8022aa2:	00e6      	lsls	r6, r4, #3
 8022aa4:	d559      	bpl.n	8022b5a <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022aa6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8022aaa:	f046 0601 	orr.w	r6, r6, #1
 8022aae:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8022ab2:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8022ab6:	f023 0703 	bic.w	r7, r3, #3
 8022aba:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8022abe:	f006 0601 	and.w	r6, r6, #1
 8022ac2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8022ac6:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8022ac8:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022acc:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8022ace:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8022ad0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8022ad4:	f04f 0c0f 	mov.w	ip, #15
 8022ad8:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8022adc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8022ae0:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8022ae4:	d03b      	beq.n	8022b5e <HAL_GPIO_Init+0x196>
 8022ae6:	4e25      	ldr	r6, [pc, #148]	; (8022b7c <HAL_GPIO_Init+0x1b4>)
 8022ae8:	42b0      	cmp	r0, r6
 8022aea:	d03a      	beq.n	8022b62 <HAL_GPIO_Init+0x19a>
 8022aec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022af0:	42b0      	cmp	r0, r6
 8022af2:	d038      	beq.n	8022b66 <HAL_GPIO_Init+0x19e>
 8022af4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022af8:	42b0      	cmp	r0, r6
 8022afa:	d036      	beq.n	8022b6a <HAL_GPIO_Init+0x1a2>
 8022afc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022b00:	42b0      	cmp	r0, r6
 8022b02:	d034      	beq.n	8022b6e <HAL_GPIO_Init+0x1a6>
 8022b04:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022b08:	42b0      	cmp	r0, r6
 8022b0a:	d032      	beq.n	8022b72 <HAL_GPIO_Init+0x1aa>
 8022b0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8022b10:	42b0      	cmp	r0, r6
 8022b12:	bf0c      	ite	eq
 8022b14:	2606      	moveq	r6, #6
 8022b16:	2607      	movne	r6, #7
 8022b18:	fa06 f60e 	lsl.w	r6, r6, lr
 8022b1c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8022b20:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8022b22:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8022b24:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8022b26:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8022b2a:	bf0c      	ite	eq
 8022b2c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8022b2e:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8022b30:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8022b32:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8022b34:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8022b38:	bf0c      	ite	eq
 8022b3a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8022b3c:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8022b3e:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8022b40:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8022b42:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8022b46:	bf0c      	ite	eq
 8022b48:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8022b4a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8022b4c:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8022b4e:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8022b50:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8022b52:	bf54      	ite	pl
 8022b54:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8022b56:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8022b58:	60ee      	str	r6, [r5, #12]
    position++;
 8022b5a:	3301      	adds	r3, #1
 8022b5c:	e73a      	b.n	80229d4 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8022b5e:	2600      	movs	r6, #0
 8022b60:	e7da      	b.n	8022b18 <HAL_GPIO_Init+0x150>
 8022b62:	2601      	movs	r6, #1
 8022b64:	e7d8      	b.n	8022b18 <HAL_GPIO_Init+0x150>
 8022b66:	2602      	movs	r6, #2
 8022b68:	e7d6      	b.n	8022b18 <HAL_GPIO_Init+0x150>
 8022b6a:	2603      	movs	r6, #3
 8022b6c:	e7d4      	b.n	8022b18 <HAL_GPIO_Init+0x150>
 8022b6e:	2604      	movs	r6, #4
 8022b70:	e7d2      	b.n	8022b18 <HAL_GPIO_Init+0x150>
 8022b72:	2605      	movs	r6, #5
 8022b74:	e7d0      	b.n	8022b18 <HAL_GPIO_Init+0x150>
 8022b76:	bf00      	nop
 8022b78:	40010400 	.word	0x40010400
 8022b7c:	48000400 	.word	0x48000400
 8022b80:	40021000 	.word	0x40021000

08022b84 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8022b84:	6903      	ldr	r3, [r0, #16]
 8022b86:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8022b88:	bf14      	ite	ne
 8022b8a:	2001      	movne	r0, #1
 8022b8c:	2000      	moveq	r0, #0
 8022b8e:	4770      	bx	lr

08022b90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8022b90:	b10a      	cbz	r2, 8022b96 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8022b92:	6181      	str	r1, [r0, #24]
 8022b94:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8022b96:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8022b98:	4770      	bx	lr
	...

08022b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8022b9c:	4a04      	ldr	r2, [pc, #16]	; (8022bb0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8022b9e:	6951      	ldr	r1, [r2, #20]
 8022ba0:	4201      	tst	r1, r0
{
 8022ba2:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8022ba4:	d002      	beq.n	8022bac <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8022ba6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8022ba8:	f7fe f8b4 	bl	8020d14 <HAL_GPIO_EXTI_Callback>
  }
}
 8022bac:	bd08      	pop	{r3, pc}
 8022bae:	bf00      	nop
 8022bb0:	40010400 	.word	0x40010400

08022bb4 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8022bb4:	4a06      	ldr	r2, [pc, #24]	; (8022bd0 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 8022bb6:	6813      	ldr	r3, [r2, #0]
 8022bb8:	f023 0307 	bic.w	r3, r3, #7
 8022bbc:	f043 0303 	orr.w	r3, r3, #3
 8022bc0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8022bc2:	4a04      	ldr	r2, [pc, #16]	; (8022bd4 <HAL_PWR_EnterSTANDBYMode+0x20>)
 8022bc4:	6913      	ldr	r3, [r2, #16]
 8022bc6:	f043 0304 	orr.w	r3, r3, #4
 8022bca:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8022bcc:	bf30      	wfi
}
 8022bce:	4770      	bx	lr
 8022bd0:	40007000 	.word	0x40007000
 8022bd4:	e000ed00 	.word	0xe000ed00

08022bd8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8022bd8:	4b02      	ldr	r3, [pc, #8]	; (8022be4 <HAL_PWREx_GetVoltageRange+0xc>)
 8022bda:	6818      	ldr	r0, [r3, #0]
#endif
}
 8022bdc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8022be0:	4770      	bx	lr
 8022be2:	bf00      	nop
 8022be4:	40007000 	.word	0x40007000

08022be8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8022be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8022bea:	4d1e      	ldr	r5, [pc, #120]	; (8022c64 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8022bec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8022bee:	00da      	lsls	r2, r3, #3
{
 8022bf0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8022bf2:	d518      	bpl.n	8022c26 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8022bf4:	f7ff fff0 	bl	8022bd8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8022bf8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8022bfc:	d123      	bne.n	8022c46 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8022bfe:	2c80      	cmp	r4, #128	; 0x80
 8022c00:	d929      	bls.n	8022c56 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8022c02:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8022c04:	bf8c      	ite	hi
 8022c06:	2402      	movhi	r4, #2
 8022c08:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8022c0a:	4917      	ldr	r1, [pc, #92]	; (8022c68 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8022c0c:	680a      	ldr	r2, [r1, #0]
 8022c0e:	f022 0207 	bic.w	r2, r2, #7
 8022c12:	4322      	orrs	r2, r4
 8022c14:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8022c16:	6808      	ldr	r0, [r1, #0]
 8022c18:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8022c1c:	1b00      	subs	r0, r0, r4
 8022c1e:	bf18      	it	ne
 8022c20:	2001      	movne	r0, #1
 8022c22:	b003      	add	sp, #12
 8022c24:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8022c26:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8022c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022c2c:	65ab      	str	r3, [r5, #88]	; 0x58
 8022c2e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8022c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022c34:	9301      	str	r3, [sp, #4]
 8022c36:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8022c38:	f7ff ffce 	bl	8022bd8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8022c3c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8022c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022c42:	65ab      	str	r3, [r5, #88]	; 0x58
 8022c44:	e7d8      	b.n	8022bf8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8022c46:	2c80      	cmp	r4, #128	; 0x80
 8022c48:	d807      	bhi.n	8022c5a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8022c4a:	d008      	beq.n	8022c5e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8022c4c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8022c50:	425c      	negs	r4, r3
 8022c52:	415c      	adcs	r4, r3
 8022c54:	e7d9      	b.n	8022c0a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8022c56:	2400      	movs	r4, #0
 8022c58:	e7d7      	b.n	8022c0a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8022c5a:	2403      	movs	r4, #3
 8022c5c:	e7d5      	b.n	8022c0a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8022c5e:	2402      	movs	r4, #2
 8022c60:	e7d3      	b.n	8022c0a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8022c62:	bf00      	nop
 8022c64:	40021000 	.word	0x40021000
 8022c68:	40022000 	.word	0x40022000

08022c6c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022c6c:	4b22      	ldr	r3, [pc, #136]	; (8022cf8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8022c6e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8022c70:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8022c72:	f012 020c 	ands.w	r2, r2, #12
 8022c76:	d005      	beq.n	8022c84 <HAL_RCC_GetSysClockFreq+0x18>
 8022c78:	2a0c      	cmp	r2, #12
 8022c7a:	d115      	bne.n	8022ca8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8022c7c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8022c80:	2901      	cmp	r1, #1
 8022c82:	d118      	bne.n	8022cb6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8022c84:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8022c86:	481d      	ldr	r0, [pc, #116]	; (8022cfc <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8022c88:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8022c8a:	bf55      	itete	pl
 8022c8c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8022c90:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8022c92:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8022c96:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8022c9a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8022c9e:	b34a      	cbz	r2, 8022cf4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8022ca0:	2a0c      	cmp	r2, #12
 8022ca2:	d009      	beq.n	8022cb8 <HAL_RCC_GetSysClockFreq+0x4c>
 8022ca4:	2000      	movs	r0, #0
  return sysclockfreq;
 8022ca6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8022ca8:	2a04      	cmp	r2, #4
 8022caa:	d022      	beq.n	8022cf2 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8022cac:	2a08      	cmp	r2, #8
 8022cae:	4814      	ldr	r0, [pc, #80]	; (8022d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8022cb0:	bf18      	it	ne
 8022cb2:	2000      	movne	r0, #0
 8022cb4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8022cb6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8022cb8:	68da      	ldr	r2, [r3, #12]
 8022cba:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8022cbe:	2a02      	cmp	r2, #2
 8022cc0:	d015      	beq.n	8022cee <HAL_RCC_GetSysClockFreq+0x82>
 8022cc2:	490f      	ldr	r1, [pc, #60]	; (8022d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8022cc4:	2a03      	cmp	r2, #3
 8022cc6:	bf08      	it	eq
 8022cc8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022cca:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022ccc:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022cce:	68db      	ldr	r3, [r3, #12]
 8022cd0:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022cd4:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022cd8:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022cdc:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022cde:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022ce0:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022ce2:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022ce4:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8022ce8:	fbb0 f0f3 	udiv	r0, r0, r3
 8022cec:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8022cee:	4805      	ldr	r0, [pc, #20]	; (8022d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8022cf0:	e7eb      	b.n	8022cca <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8022cf2:	4804      	ldr	r0, [pc, #16]	; (8022d04 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8022cf4:	4770      	bx	lr
 8022cf6:	bf00      	nop
 8022cf8:	40021000 	.word	0x40021000
 8022cfc:	08026960 	.word	0x08026960
 8022d00:	007a1200 	.word	0x007a1200
 8022d04:	00f42400 	.word	0x00f42400

08022d08 <HAL_RCC_OscConfig>:
{
 8022d08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8022d0c:	4605      	mov	r5, r0
 8022d0e:	b918      	cbnz	r0, 8022d18 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8022d10:	2001      	movs	r0, #1
}
 8022d12:	b003      	add	sp, #12
 8022d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022d18:	4ca7      	ldr	r4, [pc, #668]	; (8022fb8 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8022d1a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022d1c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8022d1e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8022d20:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022d22:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8022d26:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8022d2a:	d53d      	bpl.n	8022da8 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8022d2c:	b11e      	cbz	r6, 8022d36 <HAL_RCC_OscConfig+0x2e>
 8022d2e:	2e0c      	cmp	r6, #12
 8022d30:	d166      	bne.n	8022e00 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8022d32:	2f01      	cmp	r7, #1
 8022d34:	d164      	bne.n	8022e00 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8022d36:	6823      	ldr	r3, [r4, #0]
 8022d38:	0799      	lsls	r1, r3, #30
 8022d3a:	d502      	bpl.n	8022d42 <HAL_RCC_OscConfig+0x3a>
 8022d3c:	69ab      	ldr	r3, [r5, #24]
 8022d3e:	2b00      	cmp	r3, #0
 8022d40:	d0e6      	beq.n	8022d10 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8022d42:	6823      	ldr	r3, [r4, #0]
 8022d44:	6a28      	ldr	r0, [r5, #32]
 8022d46:	071a      	lsls	r2, r3, #28
 8022d48:	bf56      	itet	pl
 8022d4a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8022d4e:	6823      	ldrmi	r3, [r4, #0]
 8022d50:	091b      	lsrpl	r3, r3, #4
 8022d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022d56:	4298      	cmp	r0, r3
 8022d58:	d93b      	bls.n	8022dd2 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8022d5a:	f7ff ff45 	bl	8022be8 <RCC_SetFlashLatencyFromMSIRange>
 8022d5e:	2800      	cmp	r0, #0
 8022d60:	d1d6      	bne.n	8022d10 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8022d62:	6823      	ldr	r3, [r4, #0]
 8022d64:	f043 0308 	orr.w	r3, r3, #8
 8022d68:	6023      	str	r3, [r4, #0]
 8022d6a:	6823      	ldr	r3, [r4, #0]
 8022d6c:	6a2a      	ldr	r2, [r5, #32]
 8022d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022d72:	4313      	orrs	r3, r2
 8022d74:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8022d76:	6863      	ldr	r3, [r4, #4]
 8022d78:	69ea      	ldr	r2, [r5, #28]
 8022d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8022d7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022d82:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8022d84:	f7ff ff72 	bl	8022c6c <HAL_RCC_GetSysClockFreq>
 8022d88:	68a3      	ldr	r3, [r4, #8]
 8022d8a:	4a8c      	ldr	r2, [pc, #560]	; (8022fbc <HAL_RCC_OscConfig+0x2b4>)
 8022d8c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8022d90:	5cd3      	ldrb	r3, [r2, r3]
 8022d92:	f003 031f 	and.w	r3, r3, #31
 8022d96:	40d8      	lsrs	r0, r3
 8022d98:	4b89      	ldr	r3, [pc, #548]	; (8022fc0 <HAL_RCC_OscConfig+0x2b8>)
 8022d9a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8022d9c:	4b89      	ldr	r3, [pc, #548]	; (8022fc4 <HAL_RCC_OscConfig+0x2bc>)
 8022d9e:	6818      	ldr	r0, [r3, #0]
 8022da0:	f7ff f8e2 	bl	8021f68 <HAL_InitTick>
        if(status != HAL_OK)
 8022da4:	2800      	cmp	r0, #0
 8022da6:	d1b4      	bne.n	8022d12 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8022da8:	682b      	ldr	r3, [r5, #0]
 8022daa:	07d9      	lsls	r1, r3, #31
 8022dac:	d45f      	bmi.n	8022e6e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8022dae:	682b      	ldr	r3, [r5, #0]
 8022db0:	079a      	lsls	r2, r3, #30
 8022db2:	f100 809e 	bmi.w	8022ef2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8022db6:	682b      	ldr	r3, [r5, #0]
 8022db8:	0719      	lsls	r1, r3, #28
 8022dba:	f100 80d2 	bmi.w	8022f62 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8022dbe:	682b      	ldr	r3, [r5, #0]
 8022dc0:	075a      	lsls	r2, r3, #29
 8022dc2:	f100 8101 	bmi.w	8022fc8 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8022dc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	f040 816a 	bne.w	80230a2 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8022dce:	2000      	movs	r0, #0
 8022dd0:	e79f      	b.n	8022d12 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8022dd2:	6823      	ldr	r3, [r4, #0]
 8022dd4:	f043 0308 	orr.w	r3, r3, #8
 8022dd8:	6023      	str	r3, [r4, #0]
 8022dda:	6823      	ldr	r3, [r4, #0]
 8022ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022de0:	4303      	orrs	r3, r0
 8022de2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8022de4:	6863      	ldr	r3, [r4, #4]
 8022de6:	69ea      	ldr	r2, [r5, #28]
 8022de8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8022dec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022df0:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8022df2:	2e00      	cmp	r6, #0
 8022df4:	d1c6      	bne.n	8022d84 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8022df6:	f7ff fef7 	bl	8022be8 <RCC_SetFlashLatencyFromMSIRange>
 8022dfa:	2800      	cmp	r0, #0
 8022dfc:	d0c2      	beq.n	8022d84 <HAL_RCC_OscConfig+0x7c>
 8022dfe:	e787      	b.n	8022d10 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8022e00:	69ab      	ldr	r3, [r5, #24]
 8022e02:	b31b      	cbz	r3, 8022e4c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8022e04:	6823      	ldr	r3, [r4, #0]
 8022e06:	f043 0301 	orr.w	r3, r3, #1
 8022e0a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8022e0c:	f7ff f8ec 	bl	8021fe8 <HAL_GetTick>
 8022e10:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8022e12:	6823      	ldr	r3, [r4, #0]
 8022e14:	079b      	lsls	r3, r3, #30
 8022e16:	d511      	bpl.n	8022e3c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8022e18:	6823      	ldr	r3, [r4, #0]
 8022e1a:	f043 0308 	orr.w	r3, r3, #8
 8022e1e:	6023      	str	r3, [r4, #0]
 8022e20:	6823      	ldr	r3, [r4, #0]
 8022e22:	6a2a      	ldr	r2, [r5, #32]
 8022e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022e28:	4313      	orrs	r3, r2
 8022e2a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8022e2c:	6863      	ldr	r3, [r4, #4]
 8022e2e:	69ea      	ldr	r2, [r5, #28]
 8022e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8022e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022e38:	6063      	str	r3, [r4, #4]
 8022e3a:	e7b5      	b.n	8022da8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8022e3c:	f7ff f8d4 	bl	8021fe8 <HAL_GetTick>
 8022e40:	eba0 0008 	sub.w	r0, r0, r8
 8022e44:	2802      	cmp	r0, #2
 8022e46:	d9e4      	bls.n	8022e12 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8022e48:	2003      	movs	r0, #3
 8022e4a:	e762      	b.n	8022d12 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8022e4c:	6823      	ldr	r3, [r4, #0]
 8022e4e:	f023 0301 	bic.w	r3, r3, #1
 8022e52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8022e54:	f7ff f8c8 	bl	8021fe8 <HAL_GetTick>
 8022e58:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8022e5a:	6823      	ldr	r3, [r4, #0]
 8022e5c:	0798      	lsls	r0, r3, #30
 8022e5e:	d5a3      	bpl.n	8022da8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8022e60:	f7ff f8c2 	bl	8021fe8 <HAL_GetTick>
 8022e64:	eba0 0008 	sub.w	r0, r0, r8
 8022e68:	2802      	cmp	r0, #2
 8022e6a:	d9f6      	bls.n	8022e5a <HAL_RCC_OscConfig+0x152>
 8022e6c:	e7ec      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8022e6e:	2e08      	cmp	r6, #8
 8022e70:	d003      	beq.n	8022e7a <HAL_RCC_OscConfig+0x172>
 8022e72:	2e0c      	cmp	r6, #12
 8022e74:	d108      	bne.n	8022e88 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8022e76:	2f03      	cmp	r7, #3
 8022e78:	d106      	bne.n	8022e88 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022e7a:	6823      	ldr	r3, [r4, #0]
 8022e7c:	039b      	lsls	r3, r3, #14
 8022e7e:	d596      	bpl.n	8022dae <HAL_RCC_OscConfig+0xa6>
 8022e80:	686b      	ldr	r3, [r5, #4]
 8022e82:	2b00      	cmp	r3, #0
 8022e84:	d193      	bne.n	8022dae <HAL_RCC_OscConfig+0xa6>
 8022e86:	e743      	b.n	8022d10 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8022e88:	686b      	ldr	r3, [r5, #4]
 8022e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022e8e:	d110      	bne.n	8022eb2 <HAL_RCC_OscConfig+0x1aa>
 8022e90:	6823      	ldr	r3, [r4, #0]
 8022e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022e96:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8022e98:	f7ff f8a6 	bl	8021fe8 <HAL_GetTick>
 8022e9c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8022e9e:	6823      	ldr	r3, [r4, #0]
 8022ea0:	0398      	lsls	r0, r3, #14
 8022ea2:	d484      	bmi.n	8022dae <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8022ea4:	f7ff f8a0 	bl	8021fe8 <HAL_GetTick>
 8022ea8:	eba0 0008 	sub.w	r0, r0, r8
 8022eac:	2864      	cmp	r0, #100	; 0x64
 8022eae:	d9f6      	bls.n	8022e9e <HAL_RCC_OscConfig+0x196>
 8022eb0:	e7ca      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8022eb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8022eb6:	d104      	bne.n	8022ec2 <HAL_RCC_OscConfig+0x1ba>
 8022eb8:	6823      	ldr	r3, [r4, #0]
 8022eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8022ebe:	6023      	str	r3, [r4, #0]
 8022ec0:	e7e6      	b.n	8022e90 <HAL_RCC_OscConfig+0x188>
 8022ec2:	6822      	ldr	r2, [r4, #0]
 8022ec4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8022ec8:	6022      	str	r2, [r4, #0]
 8022eca:	6822      	ldr	r2, [r4, #0]
 8022ecc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8022ed0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	d1e0      	bne.n	8022e98 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8022ed6:	f7ff f887 	bl	8021fe8 <HAL_GetTick>
 8022eda:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8022edc:	6823      	ldr	r3, [r4, #0]
 8022ede:	0399      	lsls	r1, r3, #14
 8022ee0:	f57f af65 	bpl.w	8022dae <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8022ee4:	f7ff f880 	bl	8021fe8 <HAL_GetTick>
 8022ee8:	eba0 0008 	sub.w	r0, r0, r8
 8022eec:	2864      	cmp	r0, #100	; 0x64
 8022eee:	d9f5      	bls.n	8022edc <HAL_RCC_OscConfig+0x1d4>
 8022ef0:	e7aa      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8022ef2:	2e04      	cmp	r6, #4
 8022ef4:	d003      	beq.n	8022efe <HAL_RCC_OscConfig+0x1f6>
 8022ef6:	2e0c      	cmp	r6, #12
 8022ef8:	d110      	bne.n	8022f1c <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8022efa:	2f02      	cmp	r7, #2
 8022efc:	d10e      	bne.n	8022f1c <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8022efe:	6823      	ldr	r3, [r4, #0]
 8022f00:	055a      	lsls	r2, r3, #21
 8022f02:	d503      	bpl.n	8022f0c <HAL_RCC_OscConfig+0x204>
 8022f04:	68eb      	ldr	r3, [r5, #12]
 8022f06:	2b00      	cmp	r3, #0
 8022f08:	f43f af02 	beq.w	8022d10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022f0c:	6863      	ldr	r3, [r4, #4]
 8022f0e:	692a      	ldr	r2, [r5, #16]
 8022f10:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8022f14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8022f18:	6063      	str	r3, [r4, #4]
 8022f1a:	e74c      	b.n	8022db6 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8022f1c:	68eb      	ldr	r3, [r5, #12]
 8022f1e:	b17b      	cbz	r3, 8022f40 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8022f20:	6823      	ldr	r3, [r4, #0]
 8022f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022f26:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8022f28:	f7ff f85e 	bl	8021fe8 <HAL_GetTick>
 8022f2c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8022f2e:	6823      	ldr	r3, [r4, #0]
 8022f30:	055b      	lsls	r3, r3, #21
 8022f32:	d4eb      	bmi.n	8022f0c <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8022f34:	f7ff f858 	bl	8021fe8 <HAL_GetTick>
 8022f38:	1bc0      	subs	r0, r0, r7
 8022f3a:	2802      	cmp	r0, #2
 8022f3c:	d9f7      	bls.n	8022f2e <HAL_RCC_OscConfig+0x226>
 8022f3e:	e783      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8022f40:	6823      	ldr	r3, [r4, #0]
 8022f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8022f46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8022f48:	f7ff f84e 	bl	8021fe8 <HAL_GetTick>
 8022f4c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8022f4e:	6823      	ldr	r3, [r4, #0]
 8022f50:	0558      	lsls	r0, r3, #21
 8022f52:	f57f af30 	bpl.w	8022db6 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8022f56:	f7ff f847 	bl	8021fe8 <HAL_GetTick>
 8022f5a:	1bc0      	subs	r0, r0, r7
 8022f5c:	2802      	cmp	r0, #2
 8022f5e:	d9f6      	bls.n	8022f4e <HAL_RCC_OscConfig+0x246>
 8022f60:	e772      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8022f62:	696b      	ldr	r3, [r5, #20]
 8022f64:	b19b      	cbz	r3, 8022f8e <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8022f66:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8022f6a:	f043 0301 	orr.w	r3, r3, #1
 8022f6e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8022f72:	f7ff f839 	bl	8021fe8 <HAL_GetTick>
 8022f76:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8022f78:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8022f7c:	079b      	lsls	r3, r3, #30
 8022f7e:	f53f af1e 	bmi.w	8022dbe <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8022f82:	f7ff f831 	bl	8021fe8 <HAL_GetTick>
 8022f86:	1bc0      	subs	r0, r0, r7
 8022f88:	2802      	cmp	r0, #2
 8022f8a:	d9f5      	bls.n	8022f78 <HAL_RCC_OscConfig+0x270>
 8022f8c:	e75c      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8022f8e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8022f92:	f023 0301 	bic.w	r3, r3, #1
 8022f96:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8022f9a:	f7ff f825 	bl	8021fe8 <HAL_GetTick>
 8022f9e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8022fa0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8022fa4:	0798      	lsls	r0, r3, #30
 8022fa6:	f57f af0a 	bpl.w	8022dbe <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8022faa:	f7ff f81d 	bl	8021fe8 <HAL_GetTick>
 8022fae:	1bc0      	subs	r0, r0, r7
 8022fb0:	2802      	cmp	r0, #2
 8022fb2:	d9f5      	bls.n	8022fa0 <HAL_RCC_OscConfig+0x298>
 8022fb4:	e748      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
 8022fb6:	bf00      	nop
 8022fb8:	40021000 	.word	0x40021000
 8022fbc:	08026990 	.word	0x08026990
 8022fc0:	20000018 	.word	0x20000018
 8022fc4:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8022fc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022fca:	00d9      	lsls	r1, r3, #3
 8022fcc:	d429      	bmi.n	8023022 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8022fce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022fd4:	65a3      	str	r3, [r4, #88]	; 0x58
 8022fd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022fdc:	9301      	str	r3, [sp, #4]
 8022fde:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8022fe0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8022fe4:	4f89      	ldr	r7, [pc, #548]	; (802320c <HAL_RCC_OscConfig+0x504>)
 8022fe6:	683b      	ldr	r3, [r7, #0]
 8022fe8:	05da      	lsls	r2, r3, #23
 8022fea:	d51d      	bpl.n	8023028 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8022fec:	68ab      	ldr	r3, [r5, #8]
 8022fee:	2b01      	cmp	r3, #1
 8022ff0:	d12b      	bne.n	802304a <HAL_RCC_OscConfig+0x342>
 8022ff2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8022ff6:	f043 0301 	orr.w	r3, r3, #1
 8022ffa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8022ffe:	f7fe fff3 	bl	8021fe8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8023002:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8023006:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8023008:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 802300c:	0798      	lsls	r0, r3, #30
 802300e:	d542      	bpl.n	8023096 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8023010:	f1b8 0f00 	cmp.w	r8, #0
 8023014:	f43f aed7 	beq.w	8022dc6 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8023018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802301a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802301e:	65a3      	str	r3, [r4, #88]	; 0x58
 8023020:	e6d1      	b.n	8022dc6 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8023022:	f04f 0800 	mov.w	r8, #0
 8023026:	e7dd      	b.n	8022fe4 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8023028:	683b      	ldr	r3, [r7, #0]
 802302a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802302e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8023030:	f7fe ffda 	bl	8021fe8 <HAL_GetTick>
 8023034:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8023036:	683b      	ldr	r3, [r7, #0]
 8023038:	05db      	lsls	r3, r3, #23
 802303a:	d4d7      	bmi.n	8022fec <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802303c:	f7fe ffd4 	bl	8021fe8 <HAL_GetTick>
 8023040:	eba0 0009 	sub.w	r0, r0, r9
 8023044:	2802      	cmp	r0, #2
 8023046:	d9f6      	bls.n	8023036 <HAL_RCC_OscConfig+0x32e>
 8023048:	e6fe      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802304a:	2b05      	cmp	r3, #5
 802304c:	d106      	bne.n	802305c <HAL_RCC_OscConfig+0x354>
 802304e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8023052:	f043 0304 	orr.w	r3, r3, #4
 8023056:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 802305a:	e7ca      	b.n	8022ff2 <HAL_RCC_OscConfig+0x2ea>
 802305c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8023060:	f022 0201 	bic.w	r2, r2, #1
 8023064:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8023068:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 802306c:	f022 0204 	bic.w	r2, r2, #4
 8023070:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8023074:	2b00      	cmp	r3, #0
 8023076:	d1c2      	bne.n	8022ffe <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8023078:	f7fe ffb6 	bl	8021fe8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802307c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8023080:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8023082:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8023086:	0799      	lsls	r1, r3, #30
 8023088:	d5c2      	bpl.n	8023010 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802308a:	f7fe ffad 	bl	8021fe8 <HAL_GetTick>
 802308e:	1bc0      	subs	r0, r0, r7
 8023090:	4548      	cmp	r0, r9
 8023092:	d9f6      	bls.n	8023082 <HAL_RCC_OscConfig+0x37a>
 8023094:	e6d8      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8023096:	f7fe ffa7 	bl	8021fe8 <HAL_GetTick>
 802309a:	1bc0      	subs	r0, r0, r7
 802309c:	4548      	cmp	r0, r9
 802309e:	d9b3      	bls.n	8023008 <HAL_RCC_OscConfig+0x300>
 80230a0:	e6d2      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80230a2:	2b02      	cmp	r3, #2
 80230a4:	f040 808f 	bne.w	80231c6 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 80230a8:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80230aa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80230ac:	f003 0103 	and.w	r1, r3, #3
 80230b0:	4291      	cmp	r1, r2
 80230b2:	d124      	bne.n	80230fe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80230b4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80230b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80230ba:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80230bc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80230c0:	d11d      	bne.n	80230fe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80230c2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80230c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80230c8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80230cc:	d117      	bne.n	80230fe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80230ce:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80230d0:	3a07      	subs	r2, #7
 80230d2:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80230d6:	bf18      	it	ne
 80230d8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80230da:	4291      	cmp	r1, r2
 80230dc:	d10f      	bne.n	80230fe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80230de:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80230e0:	0852      	lsrs	r2, r2, #1
 80230e2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80230e6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80230e8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80230ec:	d107      	bne.n	80230fe <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80230ee:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80230f0:	0852      	lsrs	r2, r2, #1
 80230f2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80230f6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80230f8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80230fc:	d04a      	beq.n	8023194 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80230fe:	2e0c      	cmp	r6, #12
 8023100:	f43f ae06 	beq.w	8022d10 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8023104:	6823      	ldr	r3, [r4, #0]
 8023106:	015a      	lsls	r2, r3, #5
 8023108:	f53f ae02 	bmi.w	8022d10 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 802310c:	6823      	ldr	r3, [r4, #0]
 802310e:	00db      	lsls	r3, r3, #3
 8023110:	f53f adfe 	bmi.w	8022d10 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8023114:	6823      	ldr	r3, [r4, #0]
 8023116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802311a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 802311c:	f7fe ff64 	bl	8021fe8 <HAL_GetTick>
 8023120:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8023122:	6823      	ldr	r3, [r4, #0]
 8023124:	019f      	lsls	r7, r3, #6
 8023126:	d42f      	bmi.n	8023188 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8023128:	68e2      	ldr	r2, [r4, #12]
 802312a:	4b39      	ldr	r3, [pc, #228]	; (8023210 <HAL_RCC_OscConfig+0x508>)
 802312c:	4013      	ands	r3, r2
 802312e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8023130:	4313      	orrs	r3, r2
 8023132:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8023134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023138:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 802313a:	3a01      	subs	r2, #1
 802313c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8023140:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8023142:	0912      	lsrs	r2, r2, #4
 8023144:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8023148:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 802314a:	0852      	lsrs	r2, r2, #1
 802314c:	3a01      	subs	r2, #1
 802314e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8023152:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8023154:	0852      	lsrs	r2, r2, #1
 8023156:	3a01      	subs	r2, #1
 8023158:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 802315c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 802315e:	6823      	ldr	r3, [r4, #0]
 8023160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8023164:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8023166:	68e3      	ldr	r3, [r4, #12]
 8023168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802316c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 802316e:	f7fe ff3b 	bl	8021fe8 <HAL_GetTick>
 8023172:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8023174:	6823      	ldr	r3, [r4, #0]
 8023176:	0198      	lsls	r0, r3, #6
 8023178:	f53f ae29 	bmi.w	8022dce <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802317c:	f7fe ff34 	bl	8021fe8 <HAL_GetTick>
 8023180:	1b40      	subs	r0, r0, r5
 8023182:	2802      	cmp	r0, #2
 8023184:	d9f6      	bls.n	8023174 <HAL_RCC_OscConfig+0x46c>
 8023186:	e65f      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8023188:	f7fe ff2e 	bl	8021fe8 <HAL_GetTick>
 802318c:	1b80      	subs	r0, r0, r6
 802318e:	2802      	cmp	r0, #2
 8023190:	d9c7      	bls.n	8023122 <HAL_RCC_OscConfig+0x41a>
 8023192:	e659      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8023194:	6823      	ldr	r3, [r4, #0]
 8023196:	0199      	lsls	r1, r3, #6
 8023198:	f53f ae19 	bmi.w	8022dce <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 802319c:	6823      	ldr	r3, [r4, #0]
 802319e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80231a2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80231a4:	68e3      	ldr	r3, [r4, #12]
 80231a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80231aa:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80231ac:	f7fe ff1c 	bl	8021fe8 <HAL_GetTick>
 80231b0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80231b2:	6823      	ldr	r3, [r4, #0]
 80231b4:	019a      	lsls	r2, r3, #6
 80231b6:	f53f ae0a 	bmi.w	8022dce <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80231ba:	f7fe ff15 	bl	8021fe8 <HAL_GetTick>
 80231be:	1b40      	subs	r0, r0, r5
 80231c0:	2802      	cmp	r0, #2
 80231c2:	d9f6      	bls.n	80231b2 <HAL_RCC_OscConfig+0x4aa>
 80231c4:	e640      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80231c6:	2e0c      	cmp	r6, #12
 80231c8:	f43f ada2 	beq.w	8022d10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80231cc:	6823      	ldr	r3, [r4, #0]
 80231ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80231d2:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80231d4:	6823      	ldr	r3, [r4, #0]
 80231d6:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80231da:	bf02      	ittt	eq
 80231dc:	68e3      	ldreq	r3, [r4, #12]
 80231de:	f023 0303 	biceq.w	r3, r3, #3
 80231e2:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80231e4:	68e3      	ldr	r3, [r4, #12]
 80231e6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80231ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80231ee:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80231f0:	f7fe fefa 	bl	8021fe8 <HAL_GetTick>
 80231f4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80231f6:	6823      	ldr	r3, [r4, #0]
 80231f8:	019b      	lsls	r3, r3, #6
 80231fa:	f57f ade8 	bpl.w	8022dce <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80231fe:	f7fe fef3 	bl	8021fe8 <HAL_GetTick>
 8023202:	1b40      	subs	r0, r0, r5
 8023204:	2802      	cmp	r0, #2
 8023206:	d9f6      	bls.n	80231f6 <HAL_RCC_OscConfig+0x4ee>
 8023208:	e61e      	b.n	8022e48 <HAL_RCC_OscConfig+0x140>
 802320a:	bf00      	nop
 802320c:	40007000 	.word	0x40007000
 8023210:	f99d808c 	.word	0xf99d808c

08023214 <HAL_RCC_ClockConfig>:
{
 8023214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023218:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 802321a:	4604      	mov	r4, r0
 802321c:	b910      	cbnz	r0, 8023224 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 802321e:	2001      	movs	r0, #1
}
 8023220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8023224:	4a40      	ldr	r2, [pc, #256]	; (8023328 <HAL_RCC_ClockConfig+0x114>)
 8023226:	6813      	ldr	r3, [r2, #0]
 8023228:	f003 0307 	and.w	r3, r3, #7
 802322c:	428b      	cmp	r3, r1
 802322e:	d32a      	bcc.n	8023286 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8023230:	6823      	ldr	r3, [r4, #0]
 8023232:	07d9      	lsls	r1, r3, #31
 8023234:	d432      	bmi.n	802329c <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8023236:	6821      	ldr	r1, [r4, #0]
 8023238:	078a      	lsls	r2, r1, #30
 802323a:	d45b      	bmi.n	80232f4 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802323c:	4a3a      	ldr	r2, [pc, #232]	; (8023328 <HAL_RCC_ClockConfig+0x114>)
 802323e:	6813      	ldr	r3, [r2, #0]
 8023240:	f003 0307 	and.w	r3, r3, #7
 8023244:	42ab      	cmp	r3, r5
 8023246:	d85d      	bhi.n	8023304 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8023248:	f011 0f04 	tst.w	r1, #4
 802324c:	4d37      	ldr	r5, [pc, #220]	; (802332c <HAL_RCC_ClockConfig+0x118>)
 802324e:	d164      	bne.n	802331a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8023250:	070b      	lsls	r3, r1, #28
 8023252:	d506      	bpl.n	8023262 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8023254:	68ab      	ldr	r3, [r5, #8]
 8023256:	6922      	ldr	r2, [r4, #16]
 8023258:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 802325c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8023260:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8023262:	f7ff fd03 	bl	8022c6c <HAL_RCC_GetSysClockFreq>
 8023266:	68ab      	ldr	r3, [r5, #8]
 8023268:	4a31      	ldr	r2, [pc, #196]	; (8023330 <HAL_RCC_ClockConfig+0x11c>)
 802326a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 802326e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8023272:	5cd3      	ldrb	r3, [r2, r3]
 8023274:	f003 031f 	and.w	r3, r3, #31
 8023278:	40d8      	lsrs	r0, r3
 802327a:	4b2e      	ldr	r3, [pc, #184]	; (8023334 <HAL_RCC_ClockConfig+0x120>)
 802327c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 802327e:	4b2e      	ldr	r3, [pc, #184]	; (8023338 <HAL_RCC_ClockConfig+0x124>)
 8023280:	6818      	ldr	r0, [r3, #0]
 8023282:	f7fe be71 	b.w	8021f68 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8023286:	6813      	ldr	r3, [r2, #0]
 8023288:	f023 0307 	bic.w	r3, r3, #7
 802328c:	430b      	orrs	r3, r1
 802328e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8023290:	6813      	ldr	r3, [r2, #0]
 8023292:	f003 0307 	and.w	r3, r3, #7
 8023296:	428b      	cmp	r3, r1
 8023298:	d1c1      	bne.n	802321e <HAL_RCC_ClockConfig+0xa>
 802329a:	e7c9      	b.n	8023230 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802329c:	6862      	ldr	r2, [r4, #4]
 802329e:	4e23      	ldr	r6, [pc, #140]	; (802332c <HAL_RCC_ClockConfig+0x118>)
 80232a0:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80232a2:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80232a4:	d11a      	bne.n	80232dc <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80232a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80232aa:	d0b8      	beq.n	802321e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80232ac:	68b3      	ldr	r3, [r6, #8]
 80232ae:	f023 0303 	bic.w	r3, r3, #3
 80232b2:	4313      	orrs	r3, r2
 80232b4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80232b6:	f7fe fe97 	bl	8021fe8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80232ba:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80232be:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80232c0:	68b3      	ldr	r3, [r6, #8]
 80232c2:	6862      	ldr	r2, [r4, #4]
 80232c4:	f003 030c 	and.w	r3, r3, #12
 80232c8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80232cc:	d0b3      	beq.n	8023236 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80232ce:	f7fe fe8b 	bl	8021fe8 <HAL_GetTick>
 80232d2:	1bc0      	subs	r0, r0, r7
 80232d4:	4540      	cmp	r0, r8
 80232d6:	d9f3      	bls.n	80232c0 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80232d8:	2003      	movs	r0, #3
 80232da:	e7a1      	b.n	8023220 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80232dc:	2a02      	cmp	r2, #2
 80232de:	d102      	bne.n	80232e6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80232e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80232e4:	e7e1      	b.n	80232aa <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80232e6:	b912      	cbnz	r2, 80232ee <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80232e8:	f013 0f02 	tst.w	r3, #2
 80232ec:	e7dd      	b.n	80232aa <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80232ee:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80232f2:	e7da      	b.n	80232aa <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80232f4:	4a0d      	ldr	r2, [pc, #52]	; (802332c <HAL_RCC_ClockConfig+0x118>)
 80232f6:	68a0      	ldr	r0, [r4, #8]
 80232f8:	6893      	ldr	r3, [r2, #8]
 80232fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80232fe:	4303      	orrs	r3, r0
 8023300:	6093      	str	r3, [r2, #8]
 8023302:	e79b      	b.n	802323c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8023304:	6813      	ldr	r3, [r2, #0]
 8023306:	f023 0307 	bic.w	r3, r3, #7
 802330a:	432b      	orrs	r3, r5
 802330c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802330e:	6813      	ldr	r3, [r2, #0]
 8023310:	f003 0307 	and.w	r3, r3, #7
 8023314:	42ab      	cmp	r3, r5
 8023316:	d182      	bne.n	802321e <HAL_RCC_ClockConfig+0xa>
 8023318:	e796      	b.n	8023248 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802331a:	68ab      	ldr	r3, [r5, #8]
 802331c:	68e2      	ldr	r2, [r4, #12]
 802331e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8023322:	4313      	orrs	r3, r2
 8023324:	60ab      	str	r3, [r5, #8]
 8023326:	e793      	b.n	8023250 <HAL_RCC_ClockConfig+0x3c>
 8023328:	40022000 	.word	0x40022000
 802332c:	40021000 	.word	0x40021000
 8023330:	08026990 	.word	0x08026990
 8023334:	20000018 	.word	0x20000018
 8023338:	20000020 	.word	0x20000020

0802333c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 802333c:	4b05      	ldr	r3, [pc, #20]	; (8023354 <HAL_RCC_GetPCLK1Freq+0x18>)
 802333e:	4a06      	ldr	r2, [pc, #24]	; (8023358 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8023340:	689b      	ldr	r3, [r3, #8]
 8023342:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8023346:	5cd3      	ldrb	r3, [r2, r3]
 8023348:	4a04      	ldr	r2, [pc, #16]	; (802335c <HAL_RCC_GetPCLK1Freq+0x20>)
 802334a:	6810      	ldr	r0, [r2, #0]
 802334c:	f003 031f 	and.w	r3, r3, #31
}
 8023350:	40d8      	lsrs	r0, r3
 8023352:	4770      	bx	lr
 8023354:	40021000 	.word	0x40021000
 8023358:	080269a0 	.word	0x080269a0
 802335c:	20000018 	.word	0x20000018

08023360 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8023360:	4b05      	ldr	r3, [pc, #20]	; (8023378 <HAL_RCC_GetPCLK2Freq+0x18>)
 8023362:	4a06      	ldr	r2, [pc, #24]	; (802337c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8023364:	689b      	ldr	r3, [r3, #8]
 8023366:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 802336a:	5cd3      	ldrb	r3, [r2, r3]
 802336c:	4a04      	ldr	r2, [pc, #16]	; (8023380 <HAL_RCC_GetPCLK2Freq+0x20>)
 802336e:	6810      	ldr	r0, [r2, #0]
 8023370:	f003 031f 	and.w	r3, r3, #31
}
 8023374:	40d8      	lsrs	r0, r3
 8023376:	4770      	bx	lr
 8023378:	40021000 	.word	0x40021000
 802337c:	080269a0 	.word	0x080269a0
 8023380:	20000018 	.word	0x20000018

08023384 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8023384:	4a44      	ldr	r2, [pc, #272]	; (8023498 <RCCEx_PLLSAI1_Config+0x114>)
{
 8023386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023388:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 802338a:	68d1      	ldr	r1, [r2, #12]
 802338c:	6803      	ldr	r3, [r0, #0]
 802338e:	f011 0f03 	tst.w	r1, #3
{
 8023392:	4605      	mov	r5, r0
 8023394:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8023396:	d029      	beq.n	80233ec <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8023398:	68d1      	ldr	r1, [r2, #12]
 802339a:	f001 0103 	and.w	r1, r1, #3
 802339e:	4299      	cmp	r1, r3
 80233a0:	d178      	bne.n	8023494 <RCCEx_PLLSAI1_Config+0x110>
       ||
 80233a2:	2900      	cmp	r1, #0
 80233a4:	d076      	beq.n	8023494 <RCCEx_PLLSAI1_Config+0x110>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80233a6:	68d3      	ldr	r3, [r2, #12]
       ||
 80233a8:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80233aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80233ae:	3301      	adds	r3, #1
       ||
 80233b0:	4293      	cmp	r3, r2
 80233b2:	d16f      	bne.n	8023494 <RCCEx_PLLSAI1_Config+0x110>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80233b4:	6823      	ldr	r3, [r4, #0]
 80233b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80233ba:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80233bc:	f7fe fe14 	bl	8021fe8 <HAL_GetTick>
 80233c0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80233c2:	6823      	ldr	r3, [r4, #0]
 80233c4:	011a      	lsls	r2, r3, #4
 80233c6:	d430      	bmi.n	802342a <RCCEx_PLLSAI1_Config+0xa6>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80233c8:	68ab      	ldr	r3, [r5, #8]
 80233ca:	021f      	lsls	r7, r3, #8
 80233cc:	b3a6      	cbz	r6, 8023438 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80233ce:	2e01      	cmp	r6, #1
 80233d0:	d14d      	bne.n	802346e <RCCEx_PLLSAI1_Config+0xea>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80233d2:	692a      	ldr	r2, [r5, #16]
 80233d4:	6921      	ldr	r1, [r4, #16]
 80233d6:	0852      	lsrs	r2, r2, #1
 80233d8:	1e53      	subs	r3, r2, #1
 80233da:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 80233de:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80233e2:	433a      	orrs	r2, r7
 80233e4:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 80233e8:	6122      	str	r2, [r4, #16]
 80233ea:	e030      	b.n	802344e <RCCEx_PLLSAI1_Config+0xca>
    switch(PllSai1->PLLSAI1Source)
 80233ec:	2b02      	cmp	r3, #2
 80233ee:	d011      	beq.n	8023414 <RCCEx_PLLSAI1_Config+0x90>
 80233f0:	2b03      	cmp	r3, #3
 80233f2:	d013      	beq.n	802341c <RCCEx_PLLSAI1_Config+0x98>
 80233f4:	2b01      	cmp	r3, #1
 80233f6:	d14d      	bne.n	8023494 <RCCEx_PLLSAI1_Config+0x110>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80233f8:	6812      	ldr	r2, [r2, #0]
 80233fa:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80233fe:	d049      	beq.n	8023494 <RCCEx_PLLSAI1_Config+0x110>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8023400:	68e0      	ldr	r0, [r4, #12]
 8023402:	686a      	ldr	r2, [r5, #4]
 8023404:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8023408:	3a01      	subs	r2, #1
 802340a:	4318      	orrs	r0, r3
 802340c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8023410:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8023412:	e7cf      	b.n	80233b4 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8023414:	6812      	ldr	r2, [r2, #0]
 8023416:	f412 6f80 	tst.w	r2, #1024	; 0x400
 802341a:	e7f0      	b.n	80233fe <RCCEx_PLLSAI1_Config+0x7a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 802341c:	6811      	ldr	r1, [r2, #0]
 802341e:	0389      	lsls	r1, r1, #14
 8023420:	d4ee      	bmi.n	8023400 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8023422:	6812      	ldr	r2, [r2, #0]
 8023424:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8023428:	e7e9      	b.n	80233fe <RCCEx_PLLSAI1_Config+0x7a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 802342a:	f7fe fddd 	bl	8021fe8 <HAL_GetTick>
 802342e:	1bc0      	subs	r0, r0, r7
 8023430:	2802      	cmp	r0, #2
 8023432:	d9c6      	bls.n	80233c2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8023434:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8023436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8023438:	6921      	ldr	r1, [r4, #16]
 802343a:	68eb      	ldr	r3, [r5, #12]
 802343c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8023440:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8023444:	091b      	lsrs	r3, r3, #4
 8023446:	4339      	orrs	r1, r7
 8023448:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 802344c:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 802344e:	6823      	ldr	r3, [r4, #0]
 8023450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8023454:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8023456:	f7fe fdc7 	bl	8021fe8 <HAL_GetTick>
 802345a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 802345c:	6823      	ldr	r3, [r4, #0]
 802345e:	011b      	lsls	r3, r3, #4
 8023460:	d512      	bpl.n	8023488 <RCCEx_PLLSAI1_Config+0x104>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8023462:	6923      	ldr	r3, [r4, #16]
 8023464:	69aa      	ldr	r2, [r5, #24]
 8023466:	4313      	orrs	r3, r2
 8023468:	6123      	str	r3, [r4, #16]
 802346a:	2000      	movs	r0, #0
  return status;
 802346c:	e7e3      	b.n	8023436 <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 802346e:	696b      	ldr	r3, [r5, #20]
 8023470:	6922      	ldr	r2, [r4, #16]
 8023472:	085b      	lsrs	r3, r3, #1
 8023474:	1e59      	subs	r1, r3, #1
 8023476:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 802347a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 802347e:	433b      	orrs	r3, r7
 8023480:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8023484:	6123      	str	r3, [r4, #16]
 8023486:	e7e2      	b.n	802344e <RCCEx_PLLSAI1_Config+0xca>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8023488:	f7fe fdae 	bl	8021fe8 <HAL_GetTick>
 802348c:	1b80      	subs	r0, r0, r6
 802348e:	2802      	cmp	r0, #2
 8023490:	d9e4      	bls.n	802345c <RCCEx_PLLSAI1_Config+0xd8>
 8023492:	e7cf      	b.n	8023434 <RCCEx_PLLSAI1_Config+0xb0>
      status = HAL_ERROR;
 8023494:	2001      	movs	r0, #1
 8023496:	e7ce      	b.n	8023436 <RCCEx_PLLSAI1_Config+0xb2>
 8023498:	40021000 	.word	0x40021000

0802349c <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 802349c:	4a3d      	ldr	r2, [pc, #244]	; (8023594 <RCCEx_PLLSAI2_Config+0xf8>)
{
 802349e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234a0:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80234a2:	68d1      	ldr	r1, [r2, #12]
 80234a4:	6803      	ldr	r3, [r0, #0]
 80234a6:	f011 0f03 	tst.w	r1, #3
{
 80234aa:	4605      	mov	r5, r0
 80234ac:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80234ae:	d027      	beq.n	8023500 <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80234b0:	68d1      	ldr	r1, [r2, #12]
 80234b2:	f001 0103 	and.w	r1, r1, #3
 80234b6:	4299      	cmp	r1, r3
 80234b8:	d169      	bne.n	802358e <RCCEx_PLLSAI2_Config+0xf2>
       ||
 80234ba:	2900      	cmp	r1, #0
 80234bc:	d067      	beq.n	802358e <RCCEx_PLLSAI2_Config+0xf2>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80234be:	68d3      	ldr	r3, [r2, #12]
       ||
 80234c0:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80234c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80234c6:	3301      	adds	r3, #1
       ||
 80234c8:	4293      	cmp	r3, r2
 80234ca:	d160      	bne.n	802358e <RCCEx_PLLSAI2_Config+0xf2>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80234cc:	6823      	ldr	r3, [r4, #0]
 80234ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80234d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80234d4:	f7fe fd88 	bl	8021fe8 <HAL_GetTick>
 80234d8:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80234da:	6823      	ldr	r3, [r4, #0]
 80234dc:	009a      	lsls	r2, r3, #2
 80234de:	d42e      	bmi.n	802353e <RCCEx_PLLSAI2_Config+0xa2>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80234e0:	68ab      	ldr	r3, [r5, #8]
 80234e2:	0218      	lsls	r0, r3, #8
 80234e4:	b396      	cbz	r6, 802354c <RCCEx_PLLSAI2_Config+0xb0>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80234e6:	6963      	ldr	r3, [r4, #20]
 80234e8:	6929      	ldr	r1, [r5, #16]
 80234ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80234ee:	0849      	lsrs	r1, r1, #1
 80234f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80234f4:	3901      	subs	r1, #1
 80234f6:	4303      	orrs	r3, r0
 80234f8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80234fc:	6163      	str	r3, [r4, #20]
 80234fe:	e030      	b.n	8023562 <RCCEx_PLLSAI2_Config+0xc6>
    switch(PllSai2->PLLSAI2Source)
 8023500:	2b02      	cmp	r3, #2
 8023502:	d011      	beq.n	8023528 <RCCEx_PLLSAI2_Config+0x8c>
 8023504:	2b03      	cmp	r3, #3
 8023506:	d013      	beq.n	8023530 <RCCEx_PLLSAI2_Config+0x94>
 8023508:	2b01      	cmp	r3, #1
 802350a:	d140      	bne.n	802358e <RCCEx_PLLSAI2_Config+0xf2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 802350c:	6812      	ldr	r2, [r2, #0]
 802350e:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8023512:	d03c      	beq.n	802358e <RCCEx_PLLSAI2_Config+0xf2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8023514:	68e0      	ldr	r0, [r4, #12]
 8023516:	686a      	ldr	r2, [r5, #4]
 8023518:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 802351c:	3a01      	subs	r2, #1
 802351e:	4318      	orrs	r0, r3
 8023520:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8023524:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8023526:	e7d1      	b.n	80234cc <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8023528:	6812      	ldr	r2, [r2, #0]
 802352a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 802352e:	e7f0      	b.n	8023512 <RCCEx_PLLSAI2_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8023530:	6811      	ldr	r1, [r2, #0]
 8023532:	0389      	lsls	r1, r1, #14
 8023534:	d4ee      	bmi.n	8023514 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8023536:	6812      	ldr	r2, [r2, #0]
 8023538:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 802353c:	e7e9      	b.n	8023512 <RCCEx_PLLSAI2_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 802353e:	f7fe fd53 	bl	8021fe8 <HAL_GetTick>
 8023542:	1bc0      	subs	r0, r0, r7
 8023544:	2802      	cmp	r0, #2
 8023546:	d9c8      	bls.n	80234da <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8023548:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 802354a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 802354c:	6962      	ldr	r2, [r4, #20]
 802354e:	68eb      	ldr	r3, [r5, #12]
 8023550:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8023554:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8023558:	091b      	lsrs	r3, r3, #4
 802355a:	4302      	orrs	r2, r0
 802355c:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8023560:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8023562:	6823      	ldr	r3, [r4, #0]
 8023564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023568:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 802356a:	f7fe fd3d 	bl	8021fe8 <HAL_GetTick>
 802356e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8023570:	6823      	ldr	r3, [r4, #0]
 8023572:	009b      	lsls	r3, r3, #2
 8023574:	d505      	bpl.n	8023582 <RCCEx_PLLSAI2_Config+0xe6>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8023576:	6963      	ldr	r3, [r4, #20]
 8023578:	696a      	ldr	r2, [r5, #20]
 802357a:	4313      	orrs	r3, r2
 802357c:	6163      	str	r3, [r4, #20]
 802357e:	2000      	movs	r0, #0
  return status;
 8023580:	e7e3      	b.n	802354a <RCCEx_PLLSAI2_Config+0xae>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8023582:	f7fe fd31 	bl	8021fe8 <HAL_GetTick>
 8023586:	1b80      	subs	r0, r0, r6
 8023588:	2802      	cmp	r0, #2
 802358a:	d9f1      	bls.n	8023570 <RCCEx_PLLSAI2_Config+0xd4>
 802358c:	e7dc      	b.n	8023548 <RCCEx_PLLSAI2_Config+0xac>
      status = HAL_ERROR;
 802358e:	2001      	movs	r0, #1
 8023590:	e7db      	b.n	802354a <RCCEx_PLLSAI2_Config+0xae>
 8023592:	bf00      	nop
 8023594:	40021000 	.word	0x40021000

08023598 <HAL_RCCEx_PeriphCLKConfig>:
{
 8023598:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 802359c:	6806      	ldr	r6, [r0, #0]
 802359e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80235a2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80235a4:	d009      	beq.n	80235ba <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 80235a6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80235a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80235ac:	d022      	beq.n	80235f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80235ae:	d813      	bhi.n	80235d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80235b0:	b331      	cbz	r1, 8023600 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80235b2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80235b6:	d02a      	beq.n	802360e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80235b8:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80235ba:	6823      	ldr	r3, [r4, #0]
 80235bc:	04d8      	lsls	r0, r3, #19
 80235be:	d509      	bpl.n	80235d4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80235c0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80235c2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80235c6:	d02c      	beq.n	8023622 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80235c8:	d826      	bhi.n	8023618 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80235ca:	b381      	cbz	r1, 802362e <HAL_RCCEx_PeriphCLKConfig+0x96>
 80235cc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80235d0:	d070      	beq.n	80236b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80235d2:	2601      	movs	r6, #1
 80235d4:	4635      	mov	r5, r6
 80235d6:	e039      	b.n	802364c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80235d8:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80235dc:	d1ec      	bne.n	80235b8 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80235de:	4ab5      	ldr	r2, [pc, #724]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80235e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80235e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80235e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80235ea:	430b      	orrs	r3, r1
 80235ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80235f0:	2600      	movs	r6, #0
 80235f2:	e7e2      	b.n	80235ba <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80235f4:	4aaf      	ldr	r2, [pc, #700]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80235f6:	68d3      	ldr	r3, [r2, #12]
 80235f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80235fc:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80235fe:	e7ee      	b.n	80235de <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8023600:	3004      	adds	r0, #4
 8023602:	f7ff febf 	bl	8023384 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8023606:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8023608:	2800      	cmp	r0, #0
 802360a:	d1d6      	bne.n	80235ba <HAL_RCCEx_PeriphCLKConfig+0x22>
 802360c:	e7e7      	b.n	80235de <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 802360e:	2100      	movs	r1, #0
 8023610:	3020      	adds	r0, #32
 8023612:	f7ff ff43 	bl	802349c <RCCEx_PLLSAI2_Config>
 8023616:	e7f6      	b.n	8023606 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8023618:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 802361c:	d1d9      	bne.n	80235d2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 802361e:	4635      	mov	r5, r6
 8023620:	e009      	b.n	8023636 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8023622:	4aa4      	ldr	r2, [pc, #656]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023624:	68d3      	ldr	r3, [r2, #12]
 8023626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802362a:	60d3      	str	r3, [r2, #12]
      break;
 802362c:	e7f7      	b.n	802361e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 802362e:	1d20      	adds	r0, r4, #4
 8023630:	f7ff fea8 	bl	8023384 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8023634:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8023636:	2d00      	cmp	r5, #0
 8023638:	d142      	bne.n	80236c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 802363a:	4a9e      	ldr	r2, [pc, #632]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 802363c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 802363e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8023642:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8023646:	430b      	orrs	r3, r1
 8023648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 802364c:	6823      	ldr	r3, [r4, #0]
 802364e:	0399      	lsls	r1, r3, #14
 8023650:	f140 815e 	bpl.w	8023910 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8023654:	4f97      	ldr	r7, [pc, #604]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023658:	00da      	lsls	r2, r3, #3
 802365a:	d433      	bmi.n	80236c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 802365c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802365e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023662:	65bb      	str	r3, [r7, #88]	; 0x58
 8023664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802366a:	9301      	str	r3, [sp, #4]
 802366c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 802366e:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8023672:	f8df 9244 	ldr.w	r9, [pc, #580]	; 80238b8 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8023676:	f8d9 3000 	ldr.w	r3, [r9]
 802367a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802367e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8023682:	f7fe fcb1 	bl	8021fe8 <HAL_GetTick>
 8023686:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8023688:	f8d9 3000 	ldr.w	r3, [r9]
 802368c:	05db      	lsls	r3, r3, #23
 802368e:	d51c      	bpl.n	80236ca <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 8023690:	bb15      	cbnz	r5, 80236d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8023692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8023696:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 802369a:	f040 810f 	bne.w	80238bc <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802369e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80236a2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80236a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80236aa:	4313      	orrs	r3, r2
 80236ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80236b0:	4635      	mov	r5, r6
 80236b2:	e011      	b.n	80236d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80236b4:	2100      	movs	r1, #0
 80236b6:	f104 0020 	add.w	r0, r4, #32
 80236ba:	f7ff feef 	bl	802349c <RCCEx_PLLSAI2_Config>
 80236be:	e7b9      	b.n	8023634 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80236c0:	462e      	mov	r6, r5
 80236c2:	e7c3      	b.n	802364c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80236c4:	f04f 0800 	mov.w	r8, #0
 80236c8:	e7d3      	b.n	8023672 <HAL_RCCEx_PeriphCLKConfig+0xda>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80236ca:	f7fe fc8d 	bl	8021fe8 <HAL_GetTick>
 80236ce:	eba0 000a 	sub.w	r0, r0, sl
 80236d2:	2802      	cmp	r0, #2
 80236d4:	d9d8      	bls.n	8023688 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80236d6:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80236d8:	f1b8 0f00 	cmp.w	r8, #0
 80236dc:	d003      	beq.n	80236e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80236de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80236e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80236e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80236e6:	6823      	ldr	r3, [r4, #0]
 80236e8:	07da      	lsls	r2, r3, #31
 80236ea:	d508      	bpl.n	80236fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80236ec:	4971      	ldr	r1, [pc, #452]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80236ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80236f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80236f4:	f022 0203 	bic.w	r2, r2, #3
 80236f8:	4302      	orrs	r2, r0
 80236fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80236fe:	079f      	lsls	r7, r3, #30
 8023700:	d508      	bpl.n	8023714 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8023702:	496c      	ldr	r1, [pc, #432]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023704:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8023706:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 802370a:	f022 020c 	bic.w	r2, r2, #12
 802370e:	4302      	orrs	r2, r0
 8023710:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8023714:	075e      	lsls	r6, r3, #29
 8023716:	d508      	bpl.n	802372a <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8023718:	4966      	ldr	r1, [pc, #408]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 802371a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802371c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8023720:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8023724:	4302      	orrs	r2, r0
 8023726:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 802372a:	0718      	lsls	r0, r3, #28
 802372c:	d508      	bpl.n	8023740 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 802372e:	4961      	ldr	r1, [pc, #388]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023730:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8023732:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8023736:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 802373a:	4302      	orrs	r2, r0
 802373c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8023740:	06d9      	lsls	r1, r3, #27
 8023742:	d508      	bpl.n	8023756 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8023744:	495b      	ldr	r1, [pc, #364]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023746:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8023748:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 802374c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8023750:	4302      	orrs	r2, r0
 8023752:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8023756:	069a      	lsls	r2, r3, #26
 8023758:	d508      	bpl.n	802376c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 802375a:	4956      	ldr	r1, [pc, #344]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 802375c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802375e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8023762:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8023766:	4302      	orrs	r2, r0
 8023768:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 802376c:	059f      	lsls	r7, r3, #22
 802376e:	d508      	bpl.n	8023782 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8023770:	4950      	ldr	r1, [pc, #320]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023772:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8023774:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8023778:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 802377c:	4302      	orrs	r2, r0
 802377e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8023782:	055e      	lsls	r6, r3, #21
 8023784:	d508      	bpl.n	8023798 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8023786:	494b      	ldr	r1, [pc, #300]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023788:	6e20      	ldr	r0, [r4, #96]	; 0x60
 802378a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 802378e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8023792:	4302      	orrs	r2, r0
 8023794:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8023798:	0658      	lsls	r0, r3, #25
 802379a:	d508      	bpl.n	80237ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 802379c:	4945      	ldr	r1, [pc, #276]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 802379e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80237a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80237a4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80237a8:	4302      	orrs	r2, r0
 80237aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80237ae:	0619      	lsls	r1, r3, #24
 80237b0:	d508      	bpl.n	80237c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80237b2:	4940      	ldr	r1, [pc, #256]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80237b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80237b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80237ba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80237be:	4302      	orrs	r2, r0
 80237c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80237c4:	05da      	lsls	r2, r3, #23
 80237c6:	d508      	bpl.n	80237da <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80237c8:	493a      	ldr	r1, [pc, #232]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80237ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80237cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80237d0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80237d4:	4302      	orrs	r2, r0
 80237d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80237da:	049b      	lsls	r3, r3, #18
 80237dc:	d510      	bpl.n	8023800 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80237de:	4a35      	ldr	r2, [pc, #212]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80237e0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80237e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80237e6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80237ea:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80237ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80237f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80237f4:	f040 808e 	bne.w	8023914 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80237f8:	68d3      	ldr	r3, [r2, #12]
 80237fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80237fe:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8023800:	6823      	ldr	r3, [r4, #0]
 8023802:	031f      	lsls	r7, r3, #12
 8023804:	d510      	bpl.n	8023828 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8023806:	4a2b      	ldr	r2, [pc, #172]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023808:	6f21      	ldr	r1, [r4, #112]	; 0x70
 802380a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 802380e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8023812:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8023814:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8023818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 802381c:	f040 8086 	bne.w	802392c <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8023820:	68d3      	ldr	r3, [r2, #12]
 8023822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023826:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8023828:	6823      	ldr	r3, [r4, #0]
 802382a:	035e      	lsls	r6, r3, #13
 802382c:	d50f      	bpl.n	802384e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 802382e:	4a21      	ldr	r2, [pc, #132]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023830:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8023832:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8023836:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 802383a:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 802383c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8023840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8023844:	d17e      	bne.n	8023944 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8023846:	68d3      	ldr	r3, [r2, #12]
 8023848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802384c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 802384e:	6823      	ldr	r3, [r4, #0]
 8023850:	0458      	lsls	r0, r3, #17
 8023852:	d512      	bpl.n	802387a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8023854:	4917      	ldr	r1, [pc, #92]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023856:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8023858:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 802385c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8023860:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8023862:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8023866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 802386a:	d176      	bne.n	802395a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 802386c:	2102      	movs	r1, #2
 802386e:	1d20      	adds	r0, r4, #4
 8023870:	f7ff fd88 	bl	8023384 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8023874:	2800      	cmp	r0, #0
 8023876:	bf18      	it	ne
 8023878:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 802387a:	6822      	ldr	r2, [r4, #0]
 802387c:	0411      	lsls	r1, r2, #16
 802387e:	d508      	bpl.n	8023892 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8023880:	490c      	ldr	r1, [pc, #48]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023882:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8023884:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8023888:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802388c:	4303      	orrs	r3, r0
 802388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8023892:	03d3      	lsls	r3, r2, #15
 8023894:	d509      	bpl.n	80238aa <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8023896:	4a07      	ldr	r2, [pc, #28]	; (80238b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8023898:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 802389c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80238a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80238a4:	430b      	orrs	r3, r1
 80238a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80238aa:	4628      	mov	r0, r5
 80238ac:	b002      	add	sp, #8
 80238ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80238b2:	bf00      	nop
 80238b4:	40021000 	.word	0x40021000
 80238b8:	40007000 	.word	0x40007000
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80238bc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80238c0:	4293      	cmp	r3, r2
 80238c2:	f43f aeec 	beq.w	802369e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80238c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80238ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80238ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80238d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80238d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80238da:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80238de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80238e2:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80238e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80238e8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80238ec:	f57f aed7 	bpl.w	802369e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 80238f0:	f7fe fb7a 	bl	8021fe8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80238f4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80238f8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80238fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80238fe:	0799      	lsls	r1, r3, #30
 8023900:	f53f aecd 	bmi.w	802369e <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8023904:	f7fe fb70 	bl	8021fe8 <HAL_GetTick>
 8023908:	1b40      	subs	r0, r0, r5
 802390a:	4548      	cmp	r0, r9
 802390c:	d9f5      	bls.n	80238fa <HAL_RCCEx_PeriphCLKConfig+0x362>
 802390e:	e6e2      	b.n	80236d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8023910:	4635      	mov	r5, r6
 8023912:	e6e8      	b.n	80236e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8023914:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8023918:	f47f af72 	bne.w	8023800 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 802391c:	2101      	movs	r1, #1
 802391e:	1d20      	adds	r0, r4, #4
 8023920:	f7ff fd30 	bl	8023384 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8023924:	2800      	cmp	r0, #0
 8023926:	bf18      	it	ne
 8023928:	4605      	movne	r5, r0
 802392a:	e769      	b.n	8023800 <HAL_RCCEx_PeriphCLKConfig+0x268>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 802392c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8023930:	f47f af7a 	bne.w	8023828 <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8023934:	2101      	movs	r1, #1
 8023936:	1d20      	adds	r0, r4, #4
 8023938:	f7ff fd24 	bl	8023384 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 802393c:	2800      	cmp	r0, #0
 802393e:	bf18      	it	ne
 8023940:	4605      	movne	r5, r0
 8023942:	e771      	b.n	8023828 <HAL_RCCEx_PeriphCLKConfig+0x290>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8023944:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8023948:	d181      	bne.n	802384e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 802394a:	2101      	movs	r1, #1
 802394c:	1d20      	adds	r0, r4, #4
 802394e:	f7ff fd19 	bl	8023384 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8023952:	2800      	cmp	r0, #0
 8023954:	bf18      	it	ne
 8023956:	4605      	movne	r5, r0
 8023958:	e779      	b.n	802384e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 802395a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 802395e:	d18c      	bne.n	802387a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8023960:	2102      	movs	r1, #2
 8023962:	f104 0020 	add.w	r0, r4, #32
 8023966:	f7ff fd99 	bl	802349c <RCCEx_PLLSAI2_Config>
 802396a:	e783      	b.n	8023874 <HAL_RCCEx_PeriphCLKConfig+0x2dc>

0802396c <HAL_RTC_MspInit>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 802396c:	4770      	bx	lr

0802396e <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 802396e:	6802      	ldr	r2, [r0, #0]
{
 8023970:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8023972:	68d3      	ldr	r3, [r2, #12]
 8023974:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8023978:	60d3      	str	r3, [r2, #12]
{
 802397a:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 802397c:	f7fe fb34 	bl	8021fe8 <HAL_GetTick>
 8023980:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8023982:	6823      	ldr	r3, [r4, #0]
 8023984:	68db      	ldr	r3, [r3, #12]
 8023986:	069b      	lsls	r3, r3, #26
 8023988:	d501      	bpl.n	802398e <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 802398a:	2000      	movs	r0, #0
}
 802398c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802398e:	f7fe fb2b 	bl	8021fe8 <HAL_GetTick>
 8023992:	1b40      	subs	r0, r0, r5
 8023994:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8023998:	d9f3      	bls.n	8023982 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 802399a:	2003      	movs	r0, #3
 802399c:	e7f6      	b.n	802398c <HAL_RTC_WaitForSynchro+0x1e>

0802399e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 802399e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80239a0:	6803      	ldr	r3, [r0, #0]
 80239a2:	68dc      	ldr	r4, [r3, #12]
 80239a4:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 80239a8:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80239aa:	d118      	bne.n	80239de <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80239ac:	f04f 32ff 	mov.w	r2, #4294967295
 80239b0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80239b2:	f7fe fb19 	bl	8021fe8 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80239b6:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 80239b8:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80239ba:	682b      	ldr	r3, [r5, #0]
 80239bc:	68db      	ldr	r3, [r3, #12]
 80239be:	065b      	lsls	r3, r3, #25
 80239c0:	d401      	bmi.n	80239c6 <RTC_EnterInitMode+0x28>
 80239c2:	2c03      	cmp	r4, #3
 80239c4:	d101      	bne.n	80239ca <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 80239c6:	4620      	mov	r0, r4
 80239c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80239ca:	f7fe fb0d 	bl	8021fe8 <HAL_GetTick>
 80239ce:	1b80      	subs	r0, r0, r6
 80239d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80239d4:	bf84      	itt	hi
 80239d6:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 80239da:	2403      	movhi	r4, #3
 80239dc:	e7ed      	b.n	80239ba <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80239de:	2400      	movs	r4, #0
 80239e0:	e7f1      	b.n	80239c6 <RTC_EnterInitMode+0x28>
	...

080239e4 <RTC_ExitInitMode>:
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80239e4:	4b10      	ldr	r3, [pc, #64]	; (8023a28 <RTC_ExitInitMode+0x44>)
 80239e6:	68da      	ldr	r2, [r3, #12]
 80239e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 80239ec:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80239ee:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80239f0:	689a      	ldr	r2, [r3, #8]
 80239f2:	0692      	lsls	r2, r2, #26
{
 80239f4:	4604      	mov	r4, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80239f6:	d406      	bmi.n	8023a06 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80239f8:	f7ff ffb9 	bl	802396e <HAL_RTC_WaitForSynchro>
 80239fc:	b110      	cbz	r0, 8023a04 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80239fe:	2003      	movs	r0, #3
 8023a00:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8023a04:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8023a06:	689a      	ldr	r2, [r3, #8]
 8023a08:	f022 0220 	bic.w	r2, r2, #32
 8023a0c:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8023a0e:	f7ff ffae 	bl	802396e <HAL_RTC_WaitForSynchro>
 8023a12:	b110      	cbz	r0, 8023a1a <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023a14:	2003      	movs	r0, #3
 8023a16:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8023a1a:	4a03      	ldr	r2, [pc, #12]	; (8023a28 <RTC_ExitInitMode+0x44>)
 8023a1c:	6893      	ldr	r3, [r2, #8]
 8023a1e:	f043 0320 	orr.w	r3, r3, #32
 8023a22:	6093      	str	r3, [r2, #8]
  return status;
 8023a24:	e7ee      	b.n	8023a04 <RTC_ExitInitMode+0x20>
 8023a26:	bf00      	nop
 8023a28:	40002800 	.word	0x40002800

08023a2c <HAL_RTC_Init>:
{
 8023a2c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8023a2e:	4604      	mov	r4, r0
 8023a30:	2800      	cmp	r0, #0
 8023a32:	d03f      	beq.n	8023ab4 <HAL_RTC_Init+0x88>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8023a34:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8023a38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8023a3c:	b91b      	cbnz	r3, 8023a46 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8023a3e:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8023a42:	f7ff ff93 	bl	802396c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8023a46:	2302      	movs	r3, #2
 8023a48:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023a4c:	6823      	ldr	r3, [r4, #0]
 8023a4e:	22ca      	movs	r2, #202	; 0xca
 8023a50:	625a      	str	r2, [r3, #36]	; 0x24
 8023a52:	2253      	movs	r2, #83	; 0x53
 8023a54:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8023a56:	4620      	mov	r0, r4
 8023a58:	f7ff ffa1 	bl	802399e <RTC_EnterInitMode>
    if (status == HAL_OK)
 8023a5c:	bb48      	cbnz	r0, 8023ab2 <HAL_RTC_Init+0x86>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8023a5e:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8023a60:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8023a62:	689a      	ldr	r2, [r3, #8]
 8023a64:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8023a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023a6c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8023a6e:	6862      	ldr	r2, [r4, #4]
 8023a70:	6899      	ldr	r1, [r3, #8]
 8023a72:	4302      	orrs	r2, r0
 8023a74:	69a0      	ldr	r0, [r4, #24]
 8023a76:	4302      	orrs	r2, r0
 8023a78:	430a      	orrs	r2, r1
 8023a7a:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8023a7c:	68e2      	ldr	r2, [r4, #12]
 8023a7e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8023a80:	691a      	ldr	r2, [r3, #16]
 8023a82:	68a1      	ldr	r1, [r4, #8]
 8023a84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8023a88:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8023a8a:	4620      	mov	r0, r4
 8023a8c:	f7ff ffaa 	bl	80239e4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8023a90:	b978      	cbnz	r0, 8023ab2 <HAL_RTC_Init+0x86>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8023a92:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8023a94:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8023a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8023a98:	f022 0203 	bic.w	r2, r2, #3
 8023a9c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8023a9e:	69e2      	ldr	r2, [r4, #28]
 8023aa0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8023aa2:	432a      	orrs	r2, r5
 8023aa4:	430a      	orrs	r2, r1
 8023aa6:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023aa8:	22ff      	movs	r2, #255	; 0xff
 8023aaa:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 8023aac:	2301      	movs	r3, #1
 8023aae:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8023ab2:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8023ab4:	2001      	movs	r0, #1
 8023ab6:	e7fc      	b.n	8023ab2 <HAL_RTC_Init+0x86>

08023ab8 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8023ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8023abc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8023ac0:	2b01      	cmp	r3, #1
{
 8023ac2:	4604      	mov	r4, r0
 8023ac4:	460e      	mov	r6, r1
 8023ac6:	4615      	mov	r5, r2
 8023ac8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8023acc:	d035      	beq.n	8023b3a <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
 8023ace:	2301      	movs	r3, #1
 8023ad0:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023ad4:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8023ad6:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023ada:	22ca      	movs	r2, #202	; 0xca
 8023adc:	625a      	str	r2, [r3, #36]	; 0x24
 8023ade:	2253      	movs	r2, #83	; 0x53
 8023ae0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8023ae2:	689a      	ldr	r2, [r3, #8]
 8023ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023ae8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8023aea:	68d8      	ldr	r0, [r3, #12]
 8023aec:	b2c0      	uxtb	r0, r0
 8023aee:	f460 6090 	orn	r0, r0, #1152	; 0x480
 8023af2:	60d8      	str	r0, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8023af4:	68db      	ldr	r3, [r3, #12]
 8023af6:	065b      	lsls	r3, r3, #25
 8023af8:	d521      	bpl.n	8023b3e <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8023afa:	6823      	ldr	r3, [r4, #0]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8023afc:	4a1c      	ldr	r2, [pc, #112]	; (8023b70 <HAL_RTCEx_SetWakeUpTimer_IT+0xb8>)
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8023afe:	615e      	str	r6, [r3, #20]
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8023b00:	6899      	ldr	r1, [r3, #8]
 8023b02:	f021 0107 	bic.w	r1, r1, #7
 8023b06:	4329      	orrs	r1, r5
 8023b08:	6099      	str	r1, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8023b0a:	6811      	ldr	r1, [r2, #0]
 8023b0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8023b10:	6011      	str	r1, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8023b12:	6891      	ldr	r1, [r2, #8]
 8023b14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8023b18:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8023b1a:	689a      	ldr	r2, [r3, #8]
 8023b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8023b20:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8023b22:	689a      	ldr	r2, [r3, #8]
 8023b24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8023b28:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023b2a:	22ff      	movs	r2, #255	; 0xff
 8023b2c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8023b2e:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8023b30:	2301      	movs	r3, #1
 8023b32:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8023b36:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 8023b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8023b3e:	f7fe fa53 	bl	8021fe8 <HAL_GetTick>
 8023b42:	4680      	mov	r8, r0
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8023b44:	6823      	ldr	r3, [r4, #0]
 8023b46:	68df      	ldr	r7, [r3, #12]
 8023b48:	f017 0704 	ands.w	r7, r7, #4
 8023b4c:	d1d5      	bne.n	8023afa <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8023b4e:	f7fe fa4b 	bl	8021fe8 <HAL_GetTick>
 8023b52:	eba0 0008 	sub.w	r0, r0, r8
 8023b56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8023b5a:	d9f3      	bls.n	8023b44 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023b5c:	6823      	ldr	r3, [r4, #0]
 8023b5e:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023b60:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023b62:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023b64:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8023b68:	f884 7020 	strb.w	r7, [r4, #32]
        return HAL_TIMEOUT;
 8023b6c:	e7e5      	b.n	8023b3a <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
 8023b6e:	bf00      	nop
 8023b70:	40010400 	.word	0x40010400

08023b74 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8023b74:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8023b76:	f890 3020 	ldrb.w	r3, [r0, #32]
 8023b7a:	2b01      	cmp	r3, #1
{
 8023b7c:	4604      	mov	r4, r0
 8023b7e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8023b82:	d030      	beq.n	8023be6 <HAL_RTCEx_DeactivateWakeUpTimer+0x72>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8023b84:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_LOCK(hrtc);
 8023b88:	2201      	movs	r2, #1

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023b8a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 8023b8c:	f880 2020 	strb.w	r2, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8023b90:	22ca      	movs	r2, #202	; 0xca
 8023b92:	625a      	str	r2, [r3, #36]	; 0x24
 8023b94:	2253      	movs	r2, #83	; 0x53
 8023b96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8023b98:	689a      	ldr	r2, [r3, #8]
 8023b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023b9e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8023ba0:	689a      	ldr	r2, [r3, #8]
 8023ba2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8023ba6:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8023ba8:	f7fe fa1e 	bl	8021fe8 <HAL_GetTick>
 8023bac:	4606      	mov	r6, r0
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8023bae:	6822      	ldr	r2, [r4, #0]
 8023bb0:	68d5      	ldr	r5, [r2, #12]
 8023bb2:	f015 0504 	ands.w	r5, r5, #4
 8023bb6:	d008      	beq.n	8023bca <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
      return HAL_TIMEOUT;
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023bb8:	23ff      	movs	r3, #255	; 0xff
 8023bba:	6253      	str	r3, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8023bbc:	2301      	movs	r3, #1
 8023bbe:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8023bc2:	2300      	movs	r3, #0
 8023bc4:	f884 3020 	strb.w	r3, [r4, #32]

  return HAL_OK;
 8023bc8:	e00d      	b.n	8023be6 <HAL_RTCEx_DeactivateWakeUpTimer+0x72>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8023bca:	f7fe fa0d 	bl	8021fe8 <HAL_GetTick>
 8023bce:	1b80      	subs	r0, r0, r6
 8023bd0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8023bd4:	d9eb      	bls.n	8023bae <HAL_RTCEx_DeactivateWakeUpTimer+0x3a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8023bd6:	6823      	ldr	r3, [r4, #0]
 8023bd8:	22ff      	movs	r2, #255	; 0xff
 8023bda:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8023bdc:	2303      	movs	r3, #3
 8023bde:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      __HAL_UNLOCK(hrtc);
 8023be2:	f884 5020 	strb.w	r5, [r4, #32]
}
 8023be6:	4618      	mov	r0, r3
 8023be8:	bd70      	pop	{r4, r5, r6, pc}
	...

08023bec <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8023bec:	4b0a      	ldr	r3, [pc, #40]	; (8023c18 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8023bee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
{
 8023bf2:	b510      	push	{r4, lr}
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8023bf4:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8023bf6:	6802      	ldr	r2, [r0, #0]
 8023bf8:	68d3      	ldr	r3, [r2, #12]
 8023bfa:	055b      	lsls	r3, r3, #21
{
 8023bfc:	4604      	mov	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8023bfe:	d506      	bpl.n	8023c0e <HAL_RTCEx_WakeUpTimerIRQHandler+0x22>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8023c00:	68d3      	ldr	r3, [r2, #12]
 8023c02:	b2db      	uxtb	r3, r3
 8023c04:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8023c08:	60d3      	str	r3, [r2, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8023c0a:	f7fc ffdf 	bl	8020bcc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8023c0e:	2301      	movs	r3, #1
 8023c10:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8023c14:	bd10      	pop	{r4, pc}
 8023c16:	bf00      	nop
 8023c18:	40010400 	.word	0x40010400

08023c1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8023c1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8023c20:	4699      	mov	r9, r3
 8023c22:	4688      	mov	r8, r1
 8023c24:	4617      	mov	r7, r2
 8023c26:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8023c28:	f7fe f9de 	bl	8021fe8 <HAL_GetTick>
 8023c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c2e:	444b      	add	r3, r9
 8023c30:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8023c32:	f7fe f9d9 	bl	8021fe8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8023c36:	4b2a      	ldr	r3, [pc, #168]	; (8023ce0 <SPI_WaitFifoStateUntilTimeout+0xc4>)
 8023c38:	681b      	ldr	r3, [r3, #0]
 8023c3a:	2623      	movs	r6, #35	; 0x23
 8023c3c:	435e      	muls	r6, r3
 8023c3e:	0d36      	lsrs	r6, r6, #20
 8023c40:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8023c42:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8023c44:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8023c46:	6822      	ldr	r2, [r4, #0]
 8023c48:	6893      	ldr	r3, [r2, #8]
 8023c4a:	ea03 0308 	and.w	r3, r3, r8
 8023c4e:	42bb      	cmp	r3, r7
 8023c50:	d101      	bne.n	8023c56 <SPI_WaitFifoStateUntilTimeout+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 8023c52:	2000      	movs	r0, #0
 8023c54:	e037      	b.n	8023cc6 <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8023c56:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 8023c5a:	d104      	bne.n	8023c66 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8023c5c:	b91f      	cbnz	r7, 8023c66 <SPI_WaitFifoStateUntilTimeout+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8023c5e:	7b13      	ldrb	r3, [r2, #12]
 8023c60:	b2db      	uxtb	r3, r3
 8023c62:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8023c64:	9b00      	ldr	r3, [sp, #0]
    if (Timeout != HAL_MAX_DELAY)
 8023c66:	f1b9 3fff 	cmp.w	r9, #4294967295
 8023c6a:	d0ed      	beq.n	8023c48 <SPI_WaitFifoStateUntilTimeout+0x2c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8023c6c:	f7fe f9bc 	bl	8021fe8 <HAL_GetTick>
 8023c70:	eba0 000a 	sub.w	r0, r0, sl
 8023c74:	4285      	cmp	r5, r0
 8023c76:	d829      	bhi.n	8023ccc <SPI_WaitFifoStateUntilTimeout+0xb0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8023c78:	6823      	ldr	r3, [r4, #0]
 8023c7a:	685a      	ldr	r2, [r3, #4]
 8023c7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8023c80:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8023c82:	6862      	ldr	r2, [r4, #4]
 8023c84:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8023c88:	d10a      	bne.n	8023ca0 <SPI_WaitFifoStateUntilTimeout+0x84>
 8023c8a:	68a2      	ldr	r2, [r4, #8]
 8023c8c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8023c90:	d002      	beq.n	8023c98 <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8023c92:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8023c96:	d103      	bne.n	8023ca0 <SPI_WaitFifoStateUntilTimeout+0x84>
          __HAL_SPI_DISABLE(hspi);
 8023c98:	681a      	ldr	r2, [r3, #0]
 8023c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023c9e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8023ca0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8023ca2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8023ca6:	d107      	bne.n	8023cb8 <SPI_WaitFifoStateUntilTimeout+0x9c>
          SPI_RESET_CRC(hspi);
 8023ca8:	681a      	ldr	r2, [r3, #0]
 8023caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023cae:	601a      	str	r2, [r3, #0]
 8023cb0:	681a      	ldr	r2, [r3, #0]
 8023cb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8023cb6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8023cb8:	2301      	movs	r3, #1
 8023cba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8023cbe:	2300      	movs	r3, #0
 8023cc0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 8023cc4:	2003      	movs	r0, #3
}
 8023cc6:	b002      	add	sp, #8
 8023cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8023ccc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8023cce:	2b00      	cmp	r3, #0
      count--;
 8023cd0:	9b01      	ldr	r3, [sp, #4]
 8023cd2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8023cd6:	bf08      	it	eq
 8023cd8:	2500      	moveq	r5, #0
      count--;
 8023cda:	9301      	str	r3, [sp, #4]
 8023cdc:	e7b3      	b.n	8023c46 <SPI_WaitFifoStateUntilTimeout+0x2a>
 8023cde:	bf00      	nop
 8023ce0:	20000018 	.word	0x20000018

08023ce4 <SPI_WaitFlagStateUntilTimeout>:
{
 8023ce4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8023ce8:	461f      	mov	r7, r3
 8023cea:	4689      	mov	r9, r1
 8023cec:	4690      	mov	r8, r2
 8023cee:	4604      	mov	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8023cf0:	f7fe f97a 	bl	8021fe8 <HAL_GetTick>
 8023cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cf6:	443b      	add	r3, r7
 8023cf8:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8023cfa:	f7fe f975 	bl	8021fe8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8023cfe:	4b26      	ldr	r3, [pc, #152]	; (8023d98 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8023d00:	681e      	ldr	r6, [r3, #0]
 8023d02:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8023d06:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8023d08:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8023d0a:	9601      	str	r6, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8023d0c:	6822      	ldr	r2, [r4, #0]
 8023d0e:	6893      	ldr	r3, [r2, #8]
 8023d10:	ea39 0303 	bics.w	r3, r9, r3
 8023d14:	bf0c      	ite	eq
 8023d16:	2301      	moveq	r3, #1
 8023d18:	2300      	movne	r3, #0
 8023d1a:	4543      	cmp	r3, r8
 8023d1c:	d101      	bne.n	8023d22 <SPI_WaitFlagStateUntilTimeout+0x3e>
  return HAL_OK;
 8023d1e:	2000      	movs	r0, #0
 8023d20:	e02e      	b.n	8023d80 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8023d22:	1c7b      	adds	r3, r7, #1
 8023d24:	d0f3      	beq.n	8023d0e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8023d26:	f7fe f95f 	bl	8021fe8 <HAL_GetTick>
 8023d2a:	eba0 000a 	sub.w	r0, r0, sl
 8023d2e:	42a8      	cmp	r0, r5
 8023d30:	d329      	bcc.n	8023d86 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8023d32:	6823      	ldr	r3, [r4, #0]
 8023d34:	685a      	ldr	r2, [r3, #4]
 8023d36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8023d3a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8023d3c:	6862      	ldr	r2, [r4, #4]
 8023d3e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8023d42:	d10a      	bne.n	8023d5a <SPI_WaitFlagStateUntilTimeout+0x76>
 8023d44:	68a2      	ldr	r2, [r4, #8]
 8023d46:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8023d4a:	d002      	beq.n	8023d52 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8023d4c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8023d50:	d103      	bne.n	8023d5a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8023d52:	681a      	ldr	r2, [r3, #0]
 8023d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023d58:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8023d5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8023d5c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8023d60:	d107      	bne.n	8023d72 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8023d62:	681a      	ldr	r2, [r3, #0]
 8023d64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023d68:	601a      	str	r2, [r3, #0]
 8023d6a:	681a      	ldr	r2, [r3, #0]
 8023d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8023d70:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8023d72:	2301      	movs	r3, #1
 8023d74:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8023d78:	2300      	movs	r3, #0
 8023d7a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8023d7e:	2003      	movs	r0, #3
}
 8023d80:	b002      	add	sp, #8
 8023d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8023d86:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8023d88:	2b00      	cmp	r3, #0
      count--;
 8023d8a:	9b01      	ldr	r3, [sp, #4]
 8023d8c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8023d90:	bf08      	it	eq
 8023d92:	2500      	moveq	r5, #0
      count--;
 8023d94:	9301      	str	r3, [sp, #4]
 8023d96:	e7b9      	b.n	8023d0c <SPI_WaitFlagStateUntilTimeout+0x28>
 8023d98:	20000018 	.word	0x20000018

08023d9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8023d9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8023d9e:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8023da0:	6842      	ldr	r2, [r0, #4]
 8023da2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8023da6:	4604      	mov	r4, r0
 8023da8:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8023daa:	d10b      	bne.n	8023dc4 <SPI_EndRxTransaction+0x28>
 8023dac:	6882      	ldr	r2, [r0, #8]
 8023dae:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8023db2:	d002      	beq.n	8023dba <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8023db4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8023db8:	d104      	bne.n	8023dc4 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8023dba:	6821      	ldr	r1, [r4, #0]
 8023dbc:	680a      	ldr	r2, [r1, #0]
 8023dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023dc2:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8023dc4:	9600      	str	r6, [sp, #0]
 8023dc6:	2200      	movs	r2, #0
 8023dc8:	2180      	movs	r1, #128	; 0x80
 8023dca:	4620      	mov	r0, r4
 8023dcc:	9303      	str	r3, [sp, #12]
 8023dce:	f7ff ff89 	bl	8023ce4 <SPI_WaitFlagStateUntilTimeout>
 8023dd2:	9b03      	ldr	r3, [sp, #12]
 8023dd4:	4605      	mov	r5, r0
 8023dd6:	b128      	cbz	r0, 8023de4 <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8023dd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8023dda:	f043 0320 	orr.w	r3, r3, #32
 8023dde:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8023de0:	2503      	movs	r5, #3
 8023de2:	e013      	b.n	8023e0c <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8023de4:	6862      	ldr	r2, [r4, #4]
 8023de6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8023dea:	d10f      	bne.n	8023e0c <SPI_EndRxTransaction+0x70>
 8023dec:	68a2      	ldr	r2, [r4, #8]
 8023dee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8023df2:	d002      	beq.n	8023dfa <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8023df4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8023df8:	d108      	bne.n	8023e0c <SPI_EndRxTransaction+0x70>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8023dfa:	9600      	str	r6, [sp, #0]
 8023dfc:	2200      	movs	r2, #0
 8023dfe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8023e02:	4620      	mov	r0, r4
 8023e04:	f7ff ff0a 	bl	8023c1c <SPI_WaitFifoStateUntilTimeout>
 8023e08:	2800      	cmp	r0, #0
 8023e0a:	d1e5      	bne.n	8023dd8 <SPI_EndRxTransaction+0x3c>
}
 8023e0c:	4628      	mov	r0, r5
 8023e0e:	b004      	add	sp, #16
 8023e10:	bd70      	pop	{r4, r5, r6, pc}

08023e12 <SPI_EndRxTxTransaction>:
{
 8023e12:	b530      	push	{r4, r5, lr}
 8023e14:	b085      	sub	sp, #20
 8023e16:	460b      	mov	r3, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8023e18:	9200      	str	r2, [sp, #0]
 8023e1a:	9103      	str	r1, [sp, #12]
{
 8023e1c:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8023e1e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8023e22:	2200      	movs	r2, #0
{
 8023e24:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8023e26:	f7ff fef9 	bl	8023c1c <SPI_WaitFifoStateUntilTimeout>
 8023e2a:	9b03      	ldr	r3, [sp, #12]
 8023e2c:	4602      	mov	r2, r0
 8023e2e:	b128      	cbz	r0, 8023e3c <SPI_EndRxTxTransaction+0x2a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8023e30:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8023e32:	f043 0320 	orr.w	r3, r3, #32
 8023e36:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8023e38:	2003      	movs	r0, #3
 8023e3a:	e011      	b.n	8023e60 <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8023e3c:	9500      	str	r5, [sp, #0]
 8023e3e:	2180      	movs	r1, #128	; 0x80
 8023e40:	4620      	mov	r0, r4
 8023e42:	9303      	str	r3, [sp, #12]
 8023e44:	f7ff ff4e 	bl	8023ce4 <SPI_WaitFlagStateUntilTimeout>
 8023e48:	9b03      	ldr	r3, [sp, #12]
 8023e4a:	4602      	mov	r2, r0
 8023e4c:	2800      	cmp	r0, #0
 8023e4e:	d1ef      	bne.n	8023e30 <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8023e50:	9500      	str	r5, [sp, #0]
 8023e52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8023e56:	4620      	mov	r0, r4
 8023e58:	f7ff fee0 	bl	8023c1c <SPI_WaitFifoStateUntilTimeout>
 8023e5c:	2800      	cmp	r0, #0
 8023e5e:	d1e7      	bne.n	8023e30 <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 8023e60:	b005      	add	sp, #20
 8023e62:	bd30      	pop	{r4, r5, pc}

08023e64 <HAL_SPI_MspInit>:
}
 8023e64:	4770      	bx	lr

08023e66 <HAL_SPI_Init>:
{
 8023e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 8023e68:	4604      	mov	r4, r0
 8023e6a:	2800      	cmp	r0, #0
 8023e6c:	d079      	beq.n	8023f62 <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8023e6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023e70:	2b00      	cmp	r3, #0
 8023e72:	d14f      	bne.n	8023f14 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8023e74:	6842      	ldr	r2, [r0, #4]
 8023e76:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8023e7a:	d000      	beq.n	8023e7e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8023e7c:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8023e7e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8023e82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8023e86:	b923      	cbnz	r3, 8023e92 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8023e88:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8023e8c:	4620      	mov	r0, r4
 8023e8e:	f7ff ffe9 	bl	8023e64 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8023e92:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8023e94:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8023e96:	2302      	movs	r3, #2
 8023e98:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8023e9c:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8023e9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8023ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8023ea6:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8023ea8:	f04f 0300 	mov.w	r3, #0
 8023eac:	d85b      	bhi.n	8023f66 <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8023eae:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8023eb2:	d000      	beq.n	8023eb6 <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023eb4:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8023eb6:	6863      	ldr	r3, [r4, #4]
 8023eb8:	68a7      	ldr	r7, [r4, #8]
 8023eba:	69a0      	ldr	r0, [r4, #24]
 8023ebc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023ebe:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 8023ec2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8023ec6:	433b      	orrs	r3, r7
 8023ec8:	6927      	ldr	r7, [r4, #16]
 8023eca:	f007 0702 	and.w	r7, r7, #2
 8023ece:	433b      	orrs	r3, r7
 8023ed0:	6967      	ldr	r7, [r4, #20]
 8023ed2:	f007 0701 	and.w	r7, r7, #1
 8023ed6:	433b      	orrs	r3, r7
 8023ed8:	f400 7700 	and.w	r7, r0, #512	; 0x200
 8023edc:	433b      	orrs	r3, r7
 8023ede:	69e7      	ldr	r7, [r4, #28]
 8023ee0:	f007 0738 	and.w	r7, r7, #56	; 0x38
 8023ee4:	433b      	orrs	r3, r7
 8023ee6:	6a27      	ldr	r7, [r4, #32]
 8023ee8:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8023eec:	433b      	orrs	r3, r7
 8023eee:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 8023ef2:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8023ef4:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8023ef8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8023efa:	d111      	bne.n	8023f20 <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8023efc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023efe:	bb6b      	cbnz	r3, 8023f5c <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8023f00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8023f04:	d90a      	bls.n	8023f1c <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8023f06:	2302      	movs	r3, #2
 8023f08:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8023f0a:	6813      	ldr	r3, [r2, #0]
 8023f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8023f10:	6013      	str	r3, [r2, #0]
 8023f12:	e005      	b.n	8023f20 <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8023f14:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8023f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023f1a:	e7b0      	b.n	8023e7e <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8023f1c:	2301      	movs	r3, #1
 8023f1e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8023f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023f22:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8023f24:	f003 0310 	and.w	r3, r3, #16
 8023f28:	f007 0708 	and.w	r7, r7, #8
 8023f2c:	433b      	orrs	r3, r7
 8023f2e:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8023f32:	0c00      	lsrs	r0, r0, #16
 8023f34:	4319      	orrs	r1, r3
 8023f36:	f000 0004 	and.w	r0, r0, #4
 8023f3a:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8023f3c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8023f40:	bf08      	it	eq
 8023f42:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8023f44:	ea45 0501 	orr.w	r5, r5, r1
 8023f48:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8023f4a:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8023f4e:	bf08      	it	eq
 8023f50:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 8023f52:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8023f54:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8023f56:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8023f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8023f5c:	2b02      	cmp	r3, #2
 8023f5e:	d1df      	bne.n	8023f20 <HAL_SPI_Init+0xba>
 8023f60:	e7d3      	b.n	8023f0a <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 8023f62:	2001      	movs	r0, #1
 8023f64:	e7f9      	b.n	8023f5a <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8023f66:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8023f68:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8023f6c:	e7a1      	b.n	8023eb2 <HAL_SPI_Init+0x4c>

08023f6e <HAL_SPI_MspDeInit>:
 8023f6e:	4770      	bx	lr

08023f70 <HAL_SPI_DeInit>:
{
 8023f70:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8023f72:	4604      	mov	r4, r0
 8023f74:	b180      	cbz	r0, 8023f98 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8023f76:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8023f78:	2302      	movs	r3, #2
 8023f7a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8023f7e:	6813      	ldr	r3, [r2, #0]
 8023f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8023f84:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8023f86:	f7ff fff2 	bl	8023f6e <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8023f8a:	2000      	movs	r0, #0
 8023f8c:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8023f8e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 8023f92:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 8023f96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8023f98:	2001      	movs	r0, #1
 8023f9a:	e7fc      	b.n	8023f96 <HAL_SPI_DeInit+0x26>

08023f9c <HAL_SPI_TransmitReceive>:
{
 8023f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023fa0:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 8023fa2:	2300      	movs	r3, #0
 8023fa4:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hspi);
 8023fa6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8023faa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8023fac:	2b01      	cmp	r3, #1
{
 8023fae:	4604      	mov	r4, r0
 8023fb0:	460e      	mov	r6, r1
 8023fb2:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 8023fb4:	f000 81ab 	beq.w	802430e <HAL_SPI_TransmitReceive+0x372>
 8023fb8:	2301      	movs	r3, #1
 8023fba:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8023fbe:	f7fe f813 	bl	8021fe8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8023fc2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8023fc6:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8023fca:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8023fcc:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 8023fce:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8023fd0:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8023fd4:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8023fd6:	d00b      	beq.n	8023ff0 <HAL_SPI_TransmitReceive+0x54>
 8023fd8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8023fdc:	f040 8195 	bne.w	802430a <HAL_SPI_TransmitReceive+0x36e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8023fe0:	68a3      	ldr	r3, [r4, #8]
 8023fe2:	2b00      	cmp	r3, #0
 8023fe4:	f040 8191 	bne.w	802430a <HAL_SPI_TransmitReceive+0x36e>
 8023fe8:	f1bc 0f04 	cmp.w	ip, #4
 8023fec:	f040 818d 	bne.w	802430a <HAL_SPI_TransmitReceive+0x36e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8023ff0:	2e00      	cmp	r6, #0
 8023ff2:	f000 8172 	beq.w	80242da <HAL_SPI_TransmitReceive+0x33e>
 8023ff6:	f1ba 0f00 	cmp.w	sl, #0
 8023ffa:	f000 816e 	beq.w	80242da <HAL_SPI_TransmitReceive+0x33e>
 8023ffe:	f1b9 0f00 	cmp.w	r9, #0
 8024002:	f000 816a 	beq.w	80242da <HAL_SPI_TransmitReceive+0x33e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8024006:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802400a:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802400e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8024010:	bf1c      	itt	ne
 8024012:	2305      	movne	r3, #5
 8024014:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8024018:	2300      	movs	r3, #0
 802401a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 802401c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8024022:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 802402a:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802402e:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8024030:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8024034:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024038:	d107      	bne.n	802404a <HAL_SPI_TransmitReceive+0xae>
    SPI_RESET_CRC(hspi);
 802403a:	682b      	ldr	r3, [r5, #0]
 802403c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8024040:	602b      	str	r3, [r5, #0]
 8024042:	682b      	ldr	r3, [r5, #0]
 8024044:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8024048:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 802404a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802404e:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8024050:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8024054:	d802      	bhi.n	802405c <HAL_SPI_TransmitReceive+0xc0>
 8024056:	f1b9 0f01 	cmp.w	r9, #1
 802405a:	d93a      	bls.n	80240d2 <HAL_SPI_TransmitReceive+0x136>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802405c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024060:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8024062:	682b      	ldr	r3, [r5, #0]
 8024064:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8024066:	bf5e      	ittt	pl
 8024068:	682b      	ldrpl	r3, [r5, #0]
 802406a:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 802406e:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024070:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8024074:	d97f      	bls.n	8024176 <HAL_SPI_TransmitReceive+0x1da>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8024076:	b112      	cbz	r2, 802407e <HAL_SPI_TransmitReceive+0xe2>
 8024078:	f1b9 0f01 	cmp.w	r9, #1
 802407c:	d107      	bne.n	802408e <HAL_SPI_TransmitReceive+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802407e:	f836 3b02 	ldrh.w	r3, [r6], #2
 8024082:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 8024084:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8024086:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8024088:	3b01      	subs	r3, #1
 802408a:	b29b      	uxth	r3, r3
 802408c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 802408e:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8024092:	f001 0604 	and.w	r6, r1, #4
 8024096:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802409a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 802409c:	b29b      	uxth	r3, r3
 802409e:	b9db      	cbnz	r3, 80240d8 <HAL_SPI_TransmitReceive+0x13c>
 80240a0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80240a4:	b29b      	uxth	r3, r3
 80240a6:	b9bb      	cbnz	r3, 80240d8 <HAL_SPI_TransmitReceive+0x13c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80240a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80240aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80240ae:	f040 80fd 	bne.w	80242ac <HAL_SPI_TransmitReceive+0x310>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80240b2:	2201      	movs	r2, #1
 80240b4:	f8cd 8000 	str.w	r8, [sp]
 80240b8:	463b      	mov	r3, r7
 80240ba:	4611      	mov	r1, r2
 80240bc:	4620      	mov	r0, r4
 80240be:	f7ff fe11 	bl	8023ce4 <SPI_WaitFlagStateUntilTimeout>
 80240c2:	2800      	cmp	r0, #0
 80240c4:	f000 80ea 	beq.w	802429c <HAL_SPI_TransmitReceive+0x300>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80240c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80240ca:	f043 0302 	orr.w	r3, r3, #2
 80240ce:	6623      	str	r3, [r4, #96]	; 0x60
 80240d0:	e02a      	b.n	8024128 <HAL_SPI_TransmitReceive+0x18c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80240d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80240d6:	e7c3      	b.n	8024060 <HAL_SPI_TransmitReceive+0xc4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80240d8:	6823      	ldr	r3, [r4, #0]
 80240da:	689a      	ldr	r2, [r3, #8]
 80240dc:	0790      	lsls	r0, r2, #30
 80240de:	d507      	bpl.n	80240f0 <HAL_SPI_TransmitReceive+0x154>
 80240e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80240e2:	b292      	uxth	r2, r2
 80240e4:	b122      	cbz	r2, 80240f0 <HAL_SPI_TransmitReceive+0x154>
 80240e6:	f1b9 0f00 	cmp.w	r9, #0
 80240ea:	d128      	bne.n	802413e <HAL_SPI_TransmitReceive+0x1a2>
        txallowed = 0U;
 80240ec:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80240f0:	6899      	ldr	r1, [r3, #8]
 80240f2:	f011 0101 	ands.w	r1, r1, #1
 80240f6:	d00f      	beq.n	8024118 <HAL_SPI_TransmitReceive+0x17c>
 80240f8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80240fc:	b292      	uxth	r2, r2
 80240fe:	b15a      	cbz	r2, 8024118 <HAL_SPI_TransmitReceive+0x17c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8024100:	68da      	ldr	r2, [r3, #12]
 8024102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024104:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8024108:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 802410a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 802410e:	3b01      	subs	r3, #1
 8024110:	b29b      	uxth	r3, r3
 8024112:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8024116:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8024118:	f7fd ff66 	bl	8021fe8 <HAL_GetTick>
 802411c:	eba0 0008 	sub.w	r0, r0, r8
 8024120:	42b8      	cmp	r0, r7
 8024122:	d3ba      	bcc.n	802409a <HAL_SPI_TransmitReceive+0xfe>
 8024124:	1c79      	adds	r1, r7, #1
 8024126:	d0b8      	beq.n	802409a <HAL_SPI_TransmitReceive+0xfe>
          errorcode = HAL_TIMEOUT;
 8024128:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 802412a:	2301      	movs	r3, #1
 802412c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8024130:	2300      	movs	r3, #0
 8024132:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8024136:	4628      	mov	r0, r5
 8024138:	b004      	add	sp, #16
 802413a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802413e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8024140:	f832 1b02 	ldrh.w	r1, [r2], #2
 8024144:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8024146:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8024148:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 802414a:	3a01      	subs	r2, #1
 802414c:	b292      	uxth	r2, r2
 802414e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8024150:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8024152:	b292      	uxth	r2, r2
 8024154:	2a00      	cmp	r2, #0
 8024156:	d1c9      	bne.n	80240ec <HAL_SPI_TransmitReceive+0x150>
 8024158:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802415a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 802415e:	d1c5      	bne.n	80240ec <HAL_SPI_TransmitReceive+0x150>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8024160:	b926      	cbnz	r6, 802416c <HAL_SPI_TransmitReceive+0x1d0>
 8024162:	b11d      	cbz	r5, 802416c <HAL_SPI_TransmitReceive+0x1d0>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8024164:	681a      	ldr	r2, [r3, #0]
 8024166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802416a:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 802416c:	681a      	ldr	r2, [r3, #0]
 802416e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8024172:	601a      	str	r2, [r3, #0]
 8024174:	e7ba      	b.n	80240ec <HAL_SPI_TransmitReceive+0x150>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8024176:	b112      	cbz	r2, 802417e <HAL_SPI_TransmitReceive+0x1e2>
 8024178:	f1b9 0f01 	cmp.w	r9, #1
 802417c:	d10b      	bne.n	8024196 <HAL_SPI_TransmitReceive+0x1fa>
      if (hspi->TxXferCount > 1U)
 802417e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8024180:	b29b      	uxth	r3, r3
 8024182:	2b01      	cmp	r3, #1
 8024184:	d94b      	bls.n	802421e <HAL_SPI_TransmitReceive+0x282>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024186:	f836 3b02 	ldrh.w	r3, [r6], #2
 802418a:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 802418c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802418e:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8024190:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8024192:	b29b      	uxth	r3, r3
 8024194:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8024196:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8024198:	f001 0604 	and.w	r6, r1, #4
 802419c:	f000 0908 	and.w	r9, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80241a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80241a2:	b29b      	uxth	r3, r3
 80241a4:	b92b      	cbnz	r3, 80241b2 <HAL_SPI_TransmitReceive+0x216>
 80241a6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80241aa:	b29b      	uxth	r3, r3
 80241ac:	2b00      	cmp	r3, #0
 80241ae:	f43f af7b 	beq.w	80240a8 <HAL_SPI_TransmitReceive+0x10c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80241b2:	6821      	ldr	r1, [r4, #0]
 80241b4:	688b      	ldr	r3, [r1, #8]
 80241b6:	079a      	lsls	r2, r3, #30
 80241b8:	d505      	bpl.n	80241c6 <HAL_SPI_TransmitReceive+0x22a>
 80241ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80241bc:	b29b      	uxth	r3, r3
 80241be:	b113      	cbz	r3, 80241c6 <HAL_SPI_TransmitReceive+0x22a>
 80241c0:	2d00      	cmp	r5, #0
 80241c2:	d134      	bne.n	802422e <HAL_SPI_TransmitReceive+0x292>
        txallowed = 0U;
 80241c4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80241c6:	6821      	ldr	r1, [r4, #0]
 80241c8:	688b      	ldr	r3, [r1, #8]
 80241ca:	f013 0301 	ands.w	r3, r3, #1
 80241ce:	d01d      	beq.n	802420c <HAL_SPI_TransmitReceive+0x270>
 80241d0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80241d4:	b292      	uxth	r2, r2
 80241d6:	b1ca      	cbz	r2, 802420c <HAL_SPI_TransmitReceive+0x270>
        if (hspi->RxXferCount > 1U)
 80241d8:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 80241dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80241de:	b280      	uxth	r0, r0
 80241e0:	2801      	cmp	r0, #1
 80241e2:	d94f      	bls.n	8024284 <HAL_SPI_TransmitReceive+0x2e8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80241e4:	68c8      	ldr	r0, [r1, #12]
 80241e6:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80241ea:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80241ec:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80241f0:	3a02      	subs	r2, #2
 80241f2:	b292      	uxth	r2, r2
 80241f4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80241f8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80241fc:	b292      	uxth	r2, r2
 80241fe:	2a01      	cmp	r2, #1
 8024200:	d803      	bhi.n	802420a <HAL_SPI_TransmitReceive+0x26e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024202:	684a      	ldr	r2, [r1, #4]
 8024204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8024208:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 802420a:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 802420c:	f7fd feec 	bl	8021fe8 <HAL_GetTick>
 8024210:	eba0 0008 	sub.w	r0, r0, r8
 8024214:	42b8      	cmp	r0, r7
 8024216:	d3c3      	bcc.n	80241a0 <HAL_SPI_TransmitReceive+0x204>
 8024218:	1c7b      	adds	r3, r7, #1
 802421a:	d0c1      	beq.n	80241a0 <HAL_SPI_TransmitReceive+0x204>
 802421c:	e784      	b.n	8024128 <HAL_SPI_TransmitReceive+0x18c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802421e:	7833      	ldrb	r3, [r6, #0]
 8024220:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 8024222:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024224:	3301      	adds	r3, #1
 8024226:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8024228:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 802422a:	3b01      	subs	r3, #1
 802422c:	e7b1      	b.n	8024192 <HAL_SPI_TransmitReceive+0x1f6>
        if (hspi->TxXferCount > 1U)
 802422e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8024230:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024232:	b292      	uxth	r2, r2
 8024234:	2a01      	cmp	r2, #1
 8024236:	d91d      	bls.n	8024274 <HAL_SPI_TransmitReceive+0x2d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024238:	f833 2b02 	ldrh.w	r2, [r3], #2
 802423c:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 802423e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8024240:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8024242:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8024244:	b29b      	uxth	r3, r3
 8024246:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8024248:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 802424a:	b29b      	uxth	r3, r3
 802424c:	2b00      	cmp	r3, #0
 802424e:	d1b9      	bne.n	80241c4 <HAL_SPI_TransmitReceive+0x228>
 8024250:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024256:	d1b5      	bne.n	80241c4 <HAL_SPI_TransmitReceive+0x228>
 8024258:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 802425a:	b936      	cbnz	r6, 802426a <HAL_SPI_TransmitReceive+0x2ce>
 802425c:	f1b9 0f00 	cmp.w	r9, #0
 8024260:	d003      	beq.n	802426a <HAL_SPI_TransmitReceive+0x2ce>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8024262:	681a      	ldr	r2, [r3, #0]
 8024264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024268:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 802426a:	681a      	ldr	r2, [r3, #0]
 802426c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8024270:	601a      	str	r2, [r3, #0]
 8024272:	e7a7      	b.n	80241c4 <HAL_SPI_TransmitReceive+0x228>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8024274:	781b      	ldrb	r3, [r3, #0]
 8024276:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 8024278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802427a:	3301      	adds	r3, #1
 802427c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 802427e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8024280:	3b01      	subs	r3, #1
 8024282:	e7df      	b.n	8024244 <HAL_SPI_TransmitReceive+0x2a8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8024284:	7b09      	ldrb	r1, [r1, #12]
 8024286:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8024288:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802428a:	3201      	adds	r2, #1
 802428c:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 802428e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8024292:	3a01      	subs	r2, #1
 8024294:	b292      	uxth	r2, r2
 8024296:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 802429a:	e7b6      	b.n	802420a <HAL_SPI_TransmitReceive+0x26e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802429c:	68e2      	ldr	r2, [r4, #12]
 802429e:	6823      	ldr	r3, [r4, #0]
 80242a0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80242a4:	d11b      	bne.n	80242de <HAL_SPI_TransmitReceive+0x342>
      tmpreg = READ_REG(hspi->Instance->DR);
 80242a6:	68db      	ldr	r3, [r3, #12]
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80242a8:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 80242aa:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80242ac:	6822      	ldr	r2, [r4, #0]
 80242ae:	6895      	ldr	r5, [r2, #8]
 80242b0:	f015 0510 	ands.w	r5, r5, #16
 80242b4:	d007      	beq.n	80242c6 <HAL_SPI_TransmitReceive+0x32a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80242b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80242b8:	f043 0302 	orr.w	r3, r3, #2
 80242bc:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80242be:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80242c2:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 80242c4:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80242c6:	4642      	mov	r2, r8
 80242c8:	4639      	mov	r1, r7
 80242ca:	4620      	mov	r0, r4
 80242cc:	f7ff fda1 	bl	8023e12 <SPI_EndRxTxTransaction>
 80242d0:	2800      	cmp	r0, #0
 80242d2:	f43f af2a 	beq.w	802412a <HAL_SPI_TransmitReceive+0x18e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80242d6:	2320      	movs	r3, #32
 80242d8:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80242da:	2501      	movs	r5, #1
 80242dc:	e725      	b.n	802412a <HAL_SPI_TransmitReceive+0x18e>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80242de:	7b1b      	ldrb	r3, [r3, #12]
 80242e0:	b2db      	uxtb	r3, r3
 80242e2:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80242e4:	9b03      	ldr	r3, [sp, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80242e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80242e8:	2b02      	cmp	r3, #2
 80242ea:	d1df      	bne.n	80242ac <HAL_SPI_TransmitReceive+0x310>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80242ec:	2201      	movs	r2, #1
 80242ee:	f8cd 8000 	str.w	r8, [sp]
 80242f2:	463b      	mov	r3, r7
 80242f4:	4611      	mov	r1, r2
 80242f6:	4620      	mov	r0, r4
 80242f8:	f7ff fcf4 	bl	8023ce4 <SPI_WaitFlagStateUntilTimeout>
 80242fc:	2800      	cmp	r0, #0
 80242fe:	f47f aee3 	bne.w	80240c8 <HAL_SPI_TransmitReceive+0x12c>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8024302:	6823      	ldr	r3, [r4, #0]
 8024304:	7b1b      	ldrb	r3, [r3, #12]
 8024306:	b2db      	uxtb	r3, r3
 8024308:	e7ce      	b.n	80242a8 <HAL_SPI_TransmitReceive+0x30c>
    errorcode = HAL_BUSY;
 802430a:	2502      	movs	r5, #2
 802430c:	e70d      	b.n	802412a <HAL_SPI_TransmitReceive+0x18e>
  __HAL_LOCK(hspi);
 802430e:	2502      	movs	r5, #2
 8024310:	e711      	b.n	8024136 <HAL_SPI_TransmitReceive+0x19a>

08024312 <HAL_SPI_Receive>:
{
 8024312:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024316:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 8024318:	2300      	movs	r3, #0
 802431a:	9303      	str	r3, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 802431c:	6843      	ldr	r3, [r0, #4]
 802431e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8024322:	4604      	mov	r4, r0
 8024324:	4688      	mov	r8, r1
 8024326:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8024328:	d10c      	bne.n	8024344 <HAL_SPI_Receive+0x32>
 802432a:	6883      	ldr	r3, [r0, #8]
 802432c:	b953      	cbnz	r3, 8024344 <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 802432e:	2304      	movs	r3, #4
 8024330:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8024334:	4613      	mov	r3, r2
 8024336:	9500      	str	r5, [sp, #0]
 8024338:	460a      	mov	r2, r1
 802433a:	f7ff fe2f 	bl	8023f9c <HAL_SPI_TransmitReceive>
}
 802433e:	b004      	add	sp, #16
 8024340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8024344:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8024348:	2b01      	cmp	r3, #1
 802434a:	f000 80f7 	beq.w	802453c <HAL_SPI_Receive+0x22a>
 802434e:	2301      	movs	r3, #1
 8024350:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8024354:	f7fd fe48 	bl	8021fe8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8024358:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 802435c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 802435e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8024360:	b2d8      	uxtb	r0, r3
 8024362:	f040 80e9 	bne.w	8024538 <HAL_SPI_Receive+0x226>
  if ((pData == NULL) || (Size == 0U))
 8024366:	f1b8 0f00 	cmp.w	r8, #0
 802436a:	f000 809f 	beq.w	80244ac <HAL_SPI_Receive+0x19a>
 802436e:	2f00      	cmp	r7, #0
 8024370:	f000 809c 	beq.w	80244ac <HAL_SPI_Receive+0x19a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8024374:	2304      	movs	r3, #4
 8024376:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802437a:	2300      	movs	r3, #0
 802437c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 802437e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8024382:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8024386:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8024388:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 802438a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802438c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802438e:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8024390:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8024398:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802439c:	d10d      	bne.n	80243ba <HAL_SPI_Receive+0xa8>
    SPI_RESET_CRC(hspi);
 802439e:	6813      	ldr	r3, [r2, #0]
 80243a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80243a4:	6013      	str	r3, [r2, #0]
 80243a6:	6813      	ldr	r3, [r2, #0]
 80243a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80243ac:	6013      	str	r3, [r2, #0]
    hspi->RxXferCount--;
 80243ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80243b2:	3b01      	subs	r3, #1
 80243b4:	b29b      	uxth	r3, r3
 80243b6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80243ba:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80243bc:	6853      	ldr	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80243be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80243c2:	bf8c      	ite	hi
 80243c4:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80243c8:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 80243cc:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80243ce:	68a3      	ldr	r3, [r4, #8]
 80243d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80243d4:	d107      	bne.n	80243e6 <HAL_SPI_Receive+0xd4>
    __HAL_SPI_DISABLE(hspi);
 80243d6:	6813      	ldr	r3, [r2, #0]
 80243d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80243dc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80243de:	6813      	ldr	r3, [r2, #0]
 80243e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80243e4:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80243e6:	6813      	ldr	r3, [r2, #0]
 80243e8:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80243ea:	bf5e      	ittt	pl
 80243ec:	6813      	ldrpl	r3, [r2, #0]
 80243ee:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80243f2:	6013      	strpl	r3, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80243f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80243f8:	d923      	bls.n	8024442 <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0U)
 80243fa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80243fe:	b29b      	uxth	r3, r3
 8024400:	b323      	cbz	r3, 802444c <HAL_SPI_Receive+0x13a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8024402:	6823      	ldr	r3, [r4, #0]
 8024404:	689a      	ldr	r2, [r3, #8]
 8024406:	07d1      	lsls	r1, r2, #31
 8024408:	d557      	bpl.n	80244ba <HAL_SPI_Receive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802440a:	68da      	ldr	r2, [r3, #12]
 802440c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802440e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8024412:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8024414:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8024418:	3b01      	subs	r3, #1
 802441a:	b29b      	uxth	r3, r3
 802441c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8024420:	e7eb      	b.n	80243fa <HAL_SPI_Receive+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8024422:	6823      	ldr	r3, [r4, #0]
 8024424:	689a      	ldr	r2, [r3, #8]
 8024426:	07d7      	lsls	r7, r2, #31
 8024428:	d538      	bpl.n	802449c <HAL_SPI_Receive+0x18a>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 802442a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802442c:	7b1b      	ldrb	r3, [r3, #12]
 802442e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8024430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024432:	3301      	adds	r3, #1
 8024434:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8024436:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 802443a:	3b01      	subs	r3, #1
 802443c:	b29b      	uxth	r3, r3
 802443e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8024442:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8024446:	b29b      	uxth	r3, r3
 8024448:	2b00      	cmp	r3, #0
 802444a:	d1ea      	bne.n	8024422 <HAL_SPI_Receive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802444c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802444e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024452:	d142      	bne.n	80244da <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024454:	6822      	ldr	r2, [r4, #0]
 8024456:	6813      	ldr	r3, [r2, #0]
 8024458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802445c:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 802445e:	2201      	movs	r2, #1
 8024460:	9600      	str	r6, [sp, #0]
 8024462:	462b      	mov	r3, r5
 8024464:	4611      	mov	r1, r2
 8024466:	4620      	mov	r0, r4
 8024468:	f7ff fc3c 	bl	8023ce4 <SPI_WaitFlagStateUntilTimeout>
 802446c:	b9e8      	cbnz	r0, 80244aa <HAL_SPI_Receive+0x198>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802446e:	68e1      	ldr	r1, [r4, #12]
 8024470:	6822      	ldr	r2, [r4, #0]
 8024472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024474:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8024478:	bf8b      	itete	hi
 802447a:	68d2      	ldrhi	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 802447c:	7b12      	ldrbls	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802447e:	801a      	strhhi	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8024480:	701a      	strbls	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8024482:	2201      	movs	r2, #1
 8024484:	9600      	str	r6, [sp, #0]
 8024486:	462b      	mov	r3, r5
 8024488:	4611      	mov	r1, r2
 802448a:	4620      	mov	r0, r4
 802448c:	f7ff fc2a 	bl	8023ce4 <SPI_WaitFlagStateUntilTimeout>
 8024490:	b1d8      	cbz	r0, 80244ca <HAL_SPI_Receive+0x1b8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8024492:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024494:	f043 0302 	orr.w	r3, r3, #2
 8024498:	6623      	str	r3, [r4, #96]	; 0x60
 802449a:	e006      	b.n	80244aa <HAL_SPI_Receive+0x198>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802449c:	f7fd fda4 	bl	8021fe8 <HAL_GetTick>
 80244a0:	1b80      	subs	r0, r0, r6
 80244a2:	42a8      	cmp	r0, r5
 80244a4:	d3cd      	bcc.n	8024442 <HAL_SPI_Receive+0x130>
 80244a6:	1c68      	adds	r0, r5, #1
 80244a8:	d0cb      	beq.n	8024442 <HAL_SPI_Receive+0x130>
          errorcode = HAL_TIMEOUT;
 80244aa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80244ac:	2301      	movs	r3, #1
 80244ae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80244b2:	2300      	movs	r3, #0
 80244b4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 80244b8:	e741      	b.n	802433e <HAL_SPI_Receive+0x2c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80244ba:	f7fd fd95 	bl	8021fe8 <HAL_GetTick>
 80244be:	1b80      	subs	r0, r0, r6
 80244c0:	42a8      	cmp	r0, r5
 80244c2:	d39a      	bcc.n	80243fa <HAL_SPI_Receive+0xe8>
 80244c4:	1c6a      	adds	r2, r5, #1
 80244c6:	d098      	beq.n	80243fa <HAL_SPI_Receive+0xe8>
 80244c8:	e7ef      	b.n	80244aa <HAL_SPI_Receive+0x198>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80244ca:	68e2      	ldr	r2, [r4, #12]
 80244cc:	6823      	ldr	r3, [r4, #0]
 80244ce:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80244d2:	d11a      	bne.n	802450a <HAL_SPI_Receive+0x1f8>
      tmpreg = READ_REG(hspi->Instance->DR);
 80244d4:	68db      	ldr	r3, [r3, #12]
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80244d6:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 80244d8:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80244da:	4632      	mov	r2, r6
 80244dc:	4629      	mov	r1, r5
 80244de:	4620      	mov	r0, r4
 80244e0:	f7ff fc5c 	bl	8023d9c <SPI_EndRxTransaction>
 80244e4:	b108      	cbz	r0, 80244ea <HAL_SPI_Receive+0x1d8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80244e6:	2320      	movs	r3, #32
 80244e8:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80244ea:	6822      	ldr	r2, [r4, #0]
 80244ec:	6893      	ldr	r3, [r2, #8]
 80244ee:	06db      	lsls	r3, r3, #27
 80244f0:	d506      	bpl.n	8024500 <HAL_SPI_Receive+0x1ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80244f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80244f4:	f043 0302 	orr.w	r3, r3, #2
 80244f8:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80244fa:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80244fe:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8024500:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8024502:	3800      	subs	r0, #0
 8024504:	bf18      	it	ne
 8024506:	2001      	movne	r0, #1
error :
 8024508:	e7d0      	b.n	80244ac <HAL_SPI_Receive+0x19a>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 802450a:	7b1b      	ldrb	r3, [r3, #12]
 802450c:	b2db      	uxtb	r3, r3
 802450e:	9303      	str	r3, [sp, #12]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8024510:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg);
 8024514:	9b03      	ldr	r3, [sp, #12]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8024516:	d1e0      	bne.n	80244da <HAL_SPI_Receive+0x1c8>
 8024518:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802451a:	2b02      	cmp	r3, #2
 802451c:	d1dd      	bne.n	80244da <HAL_SPI_Receive+0x1c8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 802451e:	2201      	movs	r2, #1
 8024520:	9600      	str	r6, [sp, #0]
 8024522:	462b      	mov	r3, r5
 8024524:	4611      	mov	r1, r2
 8024526:	4620      	mov	r0, r4
 8024528:	f7ff fbdc 	bl	8023ce4 <SPI_WaitFlagStateUntilTimeout>
 802452c:	2800      	cmp	r0, #0
 802452e:	d1b0      	bne.n	8024492 <HAL_SPI_Receive+0x180>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8024530:	6823      	ldr	r3, [r4, #0]
 8024532:	7b1b      	ldrb	r3, [r3, #12]
 8024534:	b2db      	uxtb	r3, r3
 8024536:	e7ce      	b.n	80244d6 <HAL_SPI_Receive+0x1c4>
    errorcode = HAL_BUSY;
 8024538:	2002      	movs	r0, #2
 802453a:	e7b7      	b.n	80244ac <HAL_SPI_Receive+0x19a>
  __HAL_LOCK(hspi);
 802453c:	2002      	movs	r0, #2
 802453e:	e6fe      	b.n	802433e <HAL_SPI_Receive+0x2c>

08024540 <HAL_SPI_Transmit_IT>:
{
 8024540:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8024542:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8024546:	2801      	cmp	r0, #1
 8024548:	d04d      	beq.n	80245e6 <HAL_SPI_Transmit_IT+0xa6>
 802454a:	2001      	movs	r0, #1
 802454c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 8024550:	2900      	cmp	r1, #0
 8024552:	d040      	beq.n	80245d6 <HAL_SPI_Transmit_IT+0x96>
 8024554:	2a00      	cmp	r2, #0
 8024556:	d03e      	beq.n	80245d6 <HAL_SPI_Transmit_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_READY)
 8024558:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 802455c:	2801      	cmp	r0, #1
 802455e:	d13e      	bne.n	80245de <HAL_SPI_Transmit_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8024560:	2003      	movs	r0, #3
 8024562:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8024566:	2000      	movs	r0, #0
 8024568:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802456a:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 802456c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 802456e:	491f      	ldr	r1, [pc, #124]	; (80245ec <HAL_SPI_Transmit_IT+0xac>)
  hspi->TxXferSize  = Size;
 8024570:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8024572:	6418      	str	r0, [r3, #64]	; 0x40
    hspi->TxISR = SPI_TxISR_8BIT;
 8024574:	4a1e      	ldr	r2, [pc, #120]	; (80245f0 <HAL_SPI_Transmit_IT+0xb0>)
  hspi->RxXferSize  = 0U;
 8024576:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 802457a:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 802457e:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024580:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 8024582:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8024586:	bf98      	it	ls
 8024588:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802458a:	6899      	ldr	r1, [r3, #8]
 802458c:	651a      	str	r2, [r3, #80]	; 0x50
 802458e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8024592:	681a      	ldr	r2, [r3, #0]
 8024594:	d107      	bne.n	80245a6 <HAL_SPI_Transmit_IT+0x66>
    __HAL_SPI_DISABLE(hspi);
 8024596:	6811      	ldr	r1, [r2, #0]
 8024598:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 802459c:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 802459e:	6811      	ldr	r1, [r2, #0]
 80245a0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80245a4:	6011      	str	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80245a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80245a8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80245ac:	d107      	bne.n	80245be <HAL_SPI_Transmit_IT+0x7e>
    SPI_RESET_CRC(hspi);
 80245ae:	6811      	ldr	r1, [r2, #0]
 80245b0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80245b4:	6011      	str	r1, [r2, #0]
 80245b6:	6811      	ldr	r1, [r2, #0]
 80245b8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80245bc:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80245be:	6851      	ldr	r1, [r2, #4]
 80245c0:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 80245c4:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80245c6:	6810      	ldr	r0, [r2, #0]
 80245c8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80245cc:	d109      	bne.n	80245e2 <HAL_SPI_Transmit_IT+0xa2>
    __HAL_SPI_ENABLE(hspi);
 80245ce:	6811      	ldr	r1, [r2, #0]
 80245d0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80245d4:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 80245d6:	2200      	movs	r2, #0
 80245d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80245dc:	4770      	bx	lr
    errorcode = HAL_BUSY;
 80245de:	2002      	movs	r0, #2
 80245e0:	e7f9      	b.n	80245d6 <HAL_SPI_Transmit_IT+0x96>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80245e2:	2000      	movs	r0, #0
 80245e4:	e7f7      	b.n	80245d6 <HAL_SPI_Transmit_IT+0x96>
  __HAL_LOCK(hspi);
 80245e6:	2002      	movs	r0, #2
}
 80245e8:	4770      	bx	lr
 80245ea:	bf00      	nop
 80245ec:	08024847 	.word	0x08024847
 80245f0:	0802487b 	.word	0x0802487b

080245f4 <HAL_SPI_TransmitReceive_IT>:
{
 80245f4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 80245f6:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 80245fa:	2c01      	cmp	r4, #1
 80245fc:	d070      	beq.n	80246e0 <HAL_SPI_TransmitReceive_IT+0xec>
 80245fe:	2401      	movs	r4, #1
 8024600:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 8024604:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8024608:	2c01      	cmp	r4, #1
  tmp_state           = hspi->State;
 802460a:	b2e5      	uxtb	r5, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802460c:	d008      	beq.n	8024620 <HAL_SPI_TransmitReceive_IT+0x2c>
 802460e:	6844      	ldr	r4, [r0, #4]
 8024610:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8024614:	d15e      	bne.n	80246d4 <HAL_SPI_TransmitReceive_IT+0xe0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8024616:	6884      	ldr	r4, [r0, #8]
 8024618:	2c00      	cmp	r4, #0
 802461a:	d15b      	bne.n	80246d4 <HAL_SPI_TransmitReceive_IT+0xe0>
 802461c:	2d04      	cmp	r5, #4
 802461e:	d159      	bne.n	80246d4 <HAL_SPI_TransmitReceive_IT+0xe0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8024620:	2900      	cmp	r1, #0
 8024622:	d059      	beq.n	80246d8 <HAL_SPI_TransmitReceive_IT+0xe4>
 8024624:	2a00      	cmp	r2, #0
 8024626:	d057      	beq.n	80246d8 <HAL_SPI_TransmitReceive_IT+0xe4>
 8024628:	2b00      	cmp	r3, #0
 802462a:	d055      	beq.n	80246d8 <HAL_SPI_TransmitReceive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802462c:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8024630:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8024632:	2c04      	cmp	r4, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024634:	68c1      	ldr	r1, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8024636:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8024638:	bf1c      	itt	ne
 802463a:	2405      	movne	r4, #5
 802463c:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024640:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8024644:	bf8b      	itete	hi
 8024646:	4a27      	ldrhi	r2, [pc, #156]	; (80246e4 <HAL_SPI_TransmitReceive_IT+0xf0>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8024648:	4a27      	ldrls	r2, [pc, #156]	; (80246e8 <HAL_SPI_TransmitReceive_IT+0xf4>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 802464a:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 802464c:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 802464e:	bf8c      	ite	hi
 8024650:	4a26      	ldrhi	r2, [pc, #152]	; (80246ec <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8024652:	4a27      	ldrls	r2, [pc, #156]	; (80246f0 <HAL_SPI_TransmitReceive_IT+0xfc>)
 8024654:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024656:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->TxXferSize  = Size;
 8024658:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802465a:	2400      	movs	r4, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802465c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8024660:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 8024662:	6802      	ldr	r2, [r0, #0]
 8024664:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8024666:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 802466a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802466e:	d12a      	bne.n	80246c6 <HAL_SPI_TransmitReceive_IT+0xd2>
    hspi->CRCSize = 1U;
 8024670:	2401      	movs	r4, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8024672:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8024676:	6484      	str	r4, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8024678:	d803      	bhi.n	8024682 <HAL_SPI_TransmitReceive_IT+0x8e>
 802467a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 802467c:	2c02      	cmp	r4, #2
      hspi->CRCSize = 2U;
 802467e:	bf08      	it	eq
 8024680:	6484      	streq	r4, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8024682:	6814      	ldr	r4, [r2, #0]
 8024684:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8024688:	6014      	str	r4, [r2, #0]
 802468a:	6814      	ldr	r4, [r2, #0]
 802468c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8024690:	6014      	str	r4, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8024692:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8024696:	d801      	bhi.n	802469c <HAL_SPI_TransmitReceive_IT+0xa8>
 8024698:	2b01      	cmp	r3, #1
 802469a:	d917      	bls.n	80246cc <HAL_SPI_TransmitReceive_IT+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802469c:	6853      	ldr	r3, [r2, #4]
 802469e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80246a2:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80246a4:	6853      	ldr	r3, [r2, #4]
 80246a6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80246aa:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80246ac:	6813      	ldr	r3, [r2, #0]
 80246ae:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80246b2:	d113      	bne.n	80246dc <HAL_SPI_TransmitReceive_IT+0xe8>
    __HAL_SPI_ENABLE(hspi);
 80246b4:	6811      	ldr	r1, [r2, #0]
 80246b6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80246ba:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 80246bc:	2200      	movs	r2, #0
 80246be:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 80246c2:	4618      	mov	r0, r3
 80246c4:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 80246c6:	2400      	movs	r4, #0
 80246c8:	6484      	str	r4, [r0, #72]	; 0x48
 80246ca:	e7e2      	b.n	8024692 <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80246cc:	6853      	ldr	r3, [r2, #4]
 80246ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80246d2:	e7e6      	b.n	80246a2 <HAL_SPI_TransmitReceive_IT+0xae>
    errorcode = HAL_BUSY;
 80246d4:	2302      	movs	r3, #2
 80246d6:	e7f1      	b.n	80246bc <HAL_SPI_TransmitReceive_IT+0xc8>
    errorcode = HAL_ERROR;
 80246d8:	2301      	movs	r3, #1
 80246da:	e7ef      	b.n	80246bc <HAL_SPI_TransmitReceive_IT+0xc8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80246dc:	2300      	movs	r3, #0
 80246de:	e7ed      	b.n	80246bc <HAL_SPI_TransmitReceive_IT+0xc8>
  __HAL_LOCK(hspi);
 80246e0:	2302      	movs	r3, #2
 80246e2:	e7ee      	b.n	80246c2 <HAL_SPI_TransmitReceive_IT+0xce>
 80246e4:	08024bd1 	.word	0x08024bd1
 80246e8:	08024ac9 	.word	0x08024ac9
 80246ec:	08024b7d 	.word	0x08024b7d
 80246f0:	08024a63 	.word	0x08024a63

080246f4 <HAL_SPI_Receive_IT>:
{
 80246f4:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80246f6:	6886      	ldr	r6, [r0, #8]
{
 80246f8:	4604      	mov	r4, r0
 80246fa:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80246fc:	b95e      	cbnz	r6, 8024716 <HAL_SPI_Receive_IT+0x22>
 80246fe:	6843      	ldr	r3, [r0, #4]
 8024700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8024704:	d107      	bne.n	8024716 <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8024706:	2304      	movs	r3, #4
 8024708:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 802470c:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 802470e:	4613      	mov	r3, r2
 8024710:	460a      	mov	r2, r1
 8024712:	f7ff bf6f 	b.w	80245f4 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 8024716:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 802471a:	2b01      	cmp	r3, #1
 802471c:	d061      	beq.n	80247e2 <HAL_SPI_Receive_IT+0xee>
 802471e:	2301      	movs	r3, #1
 8024720:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8024724:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8024728:	2b01      	cmp	r3, #1
 802472a:	b2d8      	uxtb	r0, r3
 802472c:	d155      	bne.n	80247da <HAL_SPI_Receive_IT+0xe6>
  if ((pData == NULL) || (Size == 0U))
 802472e:	2d00      	cmp	r5, #0
 8024730:	d04b      	beq.n	80247ca <HAL_SPI_Receive_IT+0xd6>
 8024732:	2a00      	cmp	r2, #0
 8024734:	d049      	beq.n	80247ca <HAL_SPI_Receive_IT+0xd6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8024736:	2304      	movs	r3, #4
 8024738:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802473c:	2300      	movs	r3, #0
 802473e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8024740:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8024742:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 8024746:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8024748:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 802474a:	6523      	str	r3, [r4, #80]	; 0x50
 802474c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802474e:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 8024750:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024754:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8024756:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024758:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 802475c:	bf8b      	itete	hi
 802475e:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024762:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024766:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024768:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 802476a:	bf8c      	ite	hi
 802476c:	4a1e      	ldrhi	r2, [pc, #120]	; (80247e8 <HAL_SPI_Receive_IT+0xf4>)
    hspi->RxISR = SPI_RxISR_8BIT;
 802476e:	4a1f      	ldrls	r2, [pc, #124]	; (80247ec <HAL_SPI_Receive_IT+0xf8>)
 8024770:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8024772:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8024776:	d107      	bne.n	8024788 <HAL_SPI_Receive_IT+0x94>
    __HAL_SPI_DISABLE(hspi);
 8024778:	681a      	ldr	r2, [r3, #0]
 802477a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802477e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8024780:	681a      	ldr	r2, [r3, #0]
 8024782:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8024786:	601a      	str	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024788:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802478a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 802478e:	d121      	bne.n	80247d4 <HAL_SPI_Receive_IT+0xe0>
    hspi->CRCSize = 1U;
 8024790:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8024792:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8024796:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8024798:	d803      	bhi.n	80247a2 <HAL_SPI_Receive_IT+0xae>
 802479a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802479c:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 802479e:	bf08      	it	eq
 80247a0:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 80247a2:	681a      	ldr	r2, [r3, #0]
 80247a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80247a8:	601a      	str	r2, [r3, #0]
 80247aa:	681a      	ldr	r2, [r3, #0]
 80247ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80247b0:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80247b2:	685a      	ldr	r2, [r3, #4]
 80247b4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80247b8:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80247ba:	6818      	ldr	r0, [r3, #0]
 80247bc:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80247c0:	d10d      	bne.n	80247de <HAL_SPI_Receive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 80247c2:	681a      	ldr	r2, [r3, #0]
 80247c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80247c8:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80247ca:	2300      	movs	r3, #0
 80247cc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80247d0:	bc70      	pop	{r4, r5, r6}
 80247d2:	4770      	bx	lr
    hspi->CRCSize = 0U;
 80247d4:	2200      	movs	r2, #0
 80247d6:	64a2      	str	r2, [r4, #72]	; 0x48
 80247d8:	e7eb      	b.n	80247b2 <HAL_SPI_Receive_IT+0xbe>
    errorcode = HAL_BUSY;
 80247da:	2002      	movs	r0, #2
 80247dc:	e7f5      	b.n	80247ca <HAL_SPI_Receive_IT+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80247de:	2000      	movs	r0, #0
 80247e0:	e7f3      	b.n	80247ca <HAL_SPI_Receive_IT+0xd6>
  __HAL_LOCK(hspi);
 80247e2:	2002      	movs	r0, #2
 80247e4:	e7f4      	b.n	80247d0 <HAL_SPI_Receive_IT+0xdc>
 80247e6:	bf00      	nop
 80247e8:	08024981 	.word	0x08024981
 80247ec:	08024905 	.word	0x08024905

080247f0 <HAL_SPI_TxRxCpltCallback>:
 80247f0:	4770      	bx	lr

080247f2 <HAL_SPI_ErrorCallback>:
 80247f2:	4770      	bx	lr

080247f4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80247f4:	b513      	push	{r0, r1, r4, lr}
 80247f6:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80247f8:	f7fd fbf6 	bl	8021fe8 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80247fc:	6821      	ldr	r1, [r4, #0]
 80247fe:	684b      	ldr	r3, [r1, #4]
 8024800:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 8024804:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8024806:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8024808:	4620      	mov	r0, r4
 802480a:	2164      	movs	r1, #100	; 0x64
 802480c:	f7ff fb01 	bl	8023e12 <SPI_EndRxTxTransaction>
 8024810:	b118      	cbz	r0, 802481a <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8024812:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024814:	f043 0320 	orr.w	r3, r3, #32
 8024818:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802481a:	68a3      	ldr	r3, [r4, #8]
 802481c:	b933      	cbnz	r3, 802482c <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802481e:	9301      	str	r3, [sp, #4]
 8024820:	6823      	ldr	r3, [r4, #0]
 8024822:	68da      	ldr	r2, [r3, #12]
 8024824:	9201      	str	r2, [sp, #4]
 8024826:	689b      	ldr	r3, [r3, #8]
 8024828:	9301      	str	r3, [sp, #4]
 802482a:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 802482c:	2301      	movs	r3, #1
 802482e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8024832:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8024834:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8024836:	b11b      	cbz	r3, 8024840 <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 8024838:	f7ff ffdb 	bl	80247f2 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 802483c:	b002      	add	sp, #8
 802483e:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 8024840:	f7fd fa5a 	bl	8021cf8 <HAL_SPI_TxCpltCallback>
}
 8024844:	e7fa      	b.n	802483c <SPI_CloseTx_ISR+0x48>

08024846 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8024846:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8024848:	6803      	ldr	r3, [r0, #0]
 802484a:	7812      	ldrb	r2, [r2, #0]
 802484c:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 802484e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8024850:	3301      	adds	r3, #1
 8024852:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8024854:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024856:	3b01      	subs	r3, #1
 8024858:	b29b      	uxth	r3, r3
 802485a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 802485c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 802485e:	b29b      	uxth	r3, r3
 8024860:	b953      	cbnz	r3, 8024878 <SPI_TxISR_8BIT+0x32>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024862:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8024864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024868:	bf01      	itttt	eq
 802486a:	6802      	ldreq	r2, [r0, #0]
 802486c:	6813      	ldreq	r3, [r2, #0]
 802486e:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8024872:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8024874:	f7ff bfbe 	b.w	80247f4 <SPI_CloseTx_ISR>
}
 8024878:	4770      	bx	lr

0802487a <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802487a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802487c:	6802      	ldr	r2, [r0, #0]
 802487e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8024882:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8024884:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8024886:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024888:	3b01      	subs	r3, #1
 802488a:	b29b      	uxth	r3, r3
 802488c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 802488e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024890:	b29b      	uxth	r3, r3
 8024892:	b94b      	cbnz	r3, 80248a8 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024894:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8024896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 802489a:	bf02      	ittt	eq
 802489c:	6813      	ldreq	r3, [r2, #0]
 802489e:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80248a2:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 80248a4:	f7ff bfa6 	b.w	80247f4 <SPI_CloseTx_ISR>
}
 80248a8:	4770      	bx	lr

080248aa <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80248aa:	6802      	ldr	r2, [r0, #0]
 80248ac:	6853      	ldr	r3, [r2, #4]
 80248ae:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 80248b2:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80248b4:	6053      	str	r3, [r2, #4]
{
 80248b6:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80248b8:	f7fd fb96 	bl	8021fe8 <HAL_GetTick>
 80248bc:	2164      	movs	r1, #100	; 0x64
 80248be:	4602      	mov	r2, r0
 80248c0:	4620      	mov	r0, r4
 80248c2:	f7ff fa6b 	bl	8023d9c <SPI_EndRxTransaction>
 80248c6:	b118      	cbz	r0, 80248d0 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80248c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80248ca:	f043 0320 	orr.w	r3, r3, #32
 80248ce:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80248d0:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80248d2:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 80248d4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80248d8:	6893      	ldr	r3, [r2, #8]
 80248da:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80248de:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80248e0:	d009      	beq.n	80248f6 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80248e2:	f043 0302 	orr.w	r3, r3, #2
 80248e6:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80248e8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80248ec:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 80248ee:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 80248f0:	f7ff ff7f 	bl	80247f2 <HAL_SPI_ErrorCallback>
}
 80248f4:	e004      	b.n	8024900 <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 80248f6:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80248f8:	2b00      	cmp	r3, #0
 80248fa:	d1f9      	bne.n	80248f0 <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 80248fc:	f7fd f9f4 	bl	8021ce8 <HAL_SPI_RxCpltCallback>
}
 8024900:	bd10      	pop	{r4, pc}
	...

08024904 <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8024904:	6802      	ldr	r2, [r0, #0]
 8024906:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8024908:	7b12      	ldrb	r2, [r2, #12]
 802490a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 802490c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 802490e:	3301      	adds	r3, #1
 8024910:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8024912:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024916:	3b01      	subs	r3, #1
 8024918:	b29b      	uxth	r3, r3
 802491a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 802491e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024922:	b29b      	uxth	r3, r3
 8024924:	2b01      	cmp	r3, #1
 8024926:	d108      	bne.n	802493a <SPI_RxISR_8BIT+0x36>
 8024928:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802492a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 802492e:	bf01      	itttt	eq
 8024930:	6802      	ldreq	r2, [r0, #0]
 8024932:	6813      	ldreq	r3, [r2, #0]
 8024934:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8024938:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 802493a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 802493e:	b29b      	uxth	r3, r3
 8024940:	b943      	cbnz	r3, 8024954 <SPI_RxISR_8BIT+0x50>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024942:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8024944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024948:	d102      	bne.n	8024950 <SPI_RxISR_8BIT+0x4c>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 802494a:	4b03      	ldr	r3, [pc, #12]	; (8024958 <SPI_RxISR_8BIT+0x54>)
 802494c:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 802494e:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8024950:	f7ff bfab 	b.w	80248aa <SPI_CloseRx_ISR>
}
 8024954:	4770      	bx	lr
 8024956:	bf00      	nop
 8024958:	0802495d 	.word	0x0802495d

0802495c <SPI_RxISR_8BITCRC>:
{
 802495c:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 802495e:	2200      	movs	r2, #0
 8024960:	9201      	str	r2, [sp, #4]
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8024962:	6802      	ldr	r2, [r0, #0]
 8024964:	7b12      	ldrb	r2, [r2, #12]
 8024966:	b2d2      	uxtb	r2, r2
 8024968:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 802496a:	9a01      	ldr	r2, [sp, #4]
  hspi->CRCSize--;
 802496c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 802496e:	3a01      	subs	r2, #1
 8024970:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8024972:	b912      	cbnz	r2, 802497a <SPI_RxISR_8BITCRC+0x1e>
}
 8024974:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 8024976:	f7ff bf98 	b.w	80248aa <SPI_CloseRx_ISR>
}
 802497a:	b002      	add	sp, #8
 802497c:	4770      	bx	lr
	...

08024980 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8024980:	6802      	ldr	r2, [r0, #0]
 8024982:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8024984:	68d1      	ldr	r1, [r2, #12]
 8024986:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 802498a:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 802498c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024990:	3b01      	subs	r3, #1
 8024992:	b29b      	uxth	r3, r3
 8024994:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8024998:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 802499c:	b29b      	uxth	r3, r3
 802499e:	2b01      	cmp	r3, #1
 80249a0:	d107      	bne.n	80249b2 <SPI_RxISR_16BIT+0x32>
 80249a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80249a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80249a8:	bf02      	ittt	eq
 80249aa:	6813      	ldreq	r3, [r2, #0]
 80249ac:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80249b0:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 80249b2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80249b6:	b29b      	uxth	r3, r3
 80249b8:	b943      	cbnz	r3, 80249cc <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80249ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80249bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80249c0:	d102      	bne.n	80249c8 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 80249c2:	4b03      	ldr	r3, [pc, #12]	; (80249d0 <SPI_RxISR_16BIT+0x50>)
 80249c4:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 80249c6:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 80249c8:	f7ff bf6f 	b.w	80248aa <SPI_CloseRx_ISR>
}
 80249cc:	4770      	bx	lr
 80249ce:	bf00      	nop
 80249d0:	080249d5 	.word	0x080249d5

080249d4 <SPI_RxISR_16BITCRC>:
{
 80249d4:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 80249d6:	2300      	movs	r3, #0
 80249d8:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 80249da:	6803      	ldr	r3, [r0, #0]
 80249dc:	68da      	ldr	r2, [r3, #12]
 80249de:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 80249e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80249e2:	685a      	ldr	r2, [r3, #4]
 80249e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80249e8:	605a      	str	r2, [r3, #4]
}
 80249ea:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 80249ec:	f7ff bf5d 	b.w	80248aa <SPI_CloseRx_ISR>

080249f0 <SPI_CloseRxTx_ISR>:
{
 80249f0:	b510      	push	{r4, lr}
 80249f2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80249f4:	f7fd faf8 	bl	8021fe8 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80249f8:	6821      	ldr	r1, [r4, #0]
 80249fa:	684b      	ldr	r3, [r1, #4]
 80249fc:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 8024a00:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8024a02:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8024a04:	4620      	mov	r0, r4
 8024a06:	2164      	movs	r1, #100	; 0x64
 8024a08:	f7ff fa03 	bl	8023e12 <SPI_EndRxTxTransaction>
 8024a0c:	b118      	cbz	r0, 8024a16 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8024a0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024a10:	f043 0320 	orr.w	r3, r3, #32
 8024a14:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8024a16:	6822      	ldr	r2, [r4, #0]
 8024a18:	6893      	ldr	r3, [r2, #8]
 8024a1a:	f013 0f10 	tst.w	r3, #16
 8024a1e:	f04f 0301 	mov.w	r3, #1
 8024a22:	d00c      	beq.n	8024a3e <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 8024a24:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8024a28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024a2a:	f043 0302 	orr.w	r3, r3, #2
 8024a2e:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8024a30:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8024a34:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 8024a36:	4620      	mov	r0, r4
 8024a38:	f7ff fedb 	bl	80247f2 <HAL_SPI_ErrorCallback>
}
 8024a3c:	e00a      	b.n	8024a54 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8024a3e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024a40:	b962      	cbnz	r2, 8024a5c <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8024a42:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 8024a46:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8024a4a:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 8024a4c:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8024a4e:	d102      	bne.n	8024a56 <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 8024a50:	f7fd f94a 	bl	8021ce8 <HAL_SPI_RxCpltCallback>
}
 8024a54:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 8024a56:	f7ff fecb 	bl	80247f0 <HAL_SPI_TxRxCpltCallback>
 8024a5a:	e7fb      	b.n	8024a54 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 8024a5c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8024a60:	e7e9      	b.n	8024a36 <SPI_CloseRxTx_ISR+0x46>

08024a62 <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 8024a62:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8024a64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8024a66:	6801      	ldr	r1, [r0, #0]
 8024a68:	b292      	uxth	r2, r2
 8024a6a:	2a01      	cmp	r2, #1
 8024a6c:	d918      	bls.n	8024aa0 <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024a6e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8024a72:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8024a74:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8024a76:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024a78:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 8024a7a:	b29b      	uxth	r3, r3
 8024a7c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8024a7e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024a80:	b29b      	uxth	r3, r3
 8024a82:	b9fb      	cbnz	r3, 8024ac4 <SPI_2linesTxISR_8BIT+0x62>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024a84:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8024a86:	6803      	ldr	r3, [r0, #0]
 8024a88:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8024a8c:	d110      	bne.n	8024ab0 <SPI_2linesTxISR_8BIT+0x4e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024a8e:	681a      	ldr	r2, [r3, #0]
 8024a90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8024a94:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8024a96:	685a      	ldr	r2, [r3, #4]
 8024a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024a9c:	605a      	str	r2, [r3, #4]
      return;
 8024a9e:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8024aa0:	781b      	ldrb	r3, [r3, #0]
 8024aa2:	730b      	strb	r3, [r1, #12]
    hspi->pTxBuffPtr++;
 8024aa4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8024aa6:	3301      	adds	r3, #1
 8024aa8:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8024aaa:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024aac:	3b01      	subs	r3, #1
 8024aae:	e7e4      	b.n	8024a7a <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8024ab0:	685a      	ldr	r2, [r3, #4]
 8024ab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024ab6:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 8024ab8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024abc:	b29b      	uxth	r3, r3
 8024abe:	b90b      	cbnz	r3, 8024ac4 <SPI_2linesTxISR_8BIT+0x62>
      SPI_CloseRxTx_ISR(hspi);
 8024ac0:	f7ff bf96 	b.w	80249f0 <SPI_CloseRxTx_ISR>
}
 8024ac4:	4770      	bx	lr
	...

08024ac8 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 8024ac8:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
 8024acc:	6802      	ldr	r2, [r0, #0]
 8024ace:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8024ad0:	b289      	uxth	r1, r1
 8024ad2:	2901      	cmp	r1, #1
 8024ad4:	d922      	bls.n	8024b1c <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8024ad6:	68d1      	ldr	r1, [r2, #12]
 8024ad8:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8024adc:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8024ade:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024ae2:	3b02      	subs	r3, #2
 8024ae4:	b29b      	uxth	r3, r3
 8024ae6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8024aea:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024aee:	b29b      	uxth	r3, r3
 8024af0:	2b01      	cmp	r3, #1
 8024af2:	d103      	bne.n	8024afc <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024af4:	6853      	ldr	r3, [r2, #4]
 8024af6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8024afa:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 8024afc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024b00:	b29b      	uxth	r3, r3
 8024b02:	b9fb      	cbnz	r3, 8024b44 <SPI_2linesRxISR_8BIT+0x7c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024b04:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8024b06:	6803      	ldr	r3, [r0, #0]
 8024b08:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024b0c:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024b0e:	d111      	bne.n	8024b34 <SPI_2linesRxISR_8BIT+0x6c>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8024b10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8024b14:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8024b16:	4b0c      	ldr	r3, [pc, #48]	; (8024b48 <SPI_2linesRxISR_8BIT+0x80>)
 8024b18:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8024b1a:	4770      	bx	lr
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8024b1c:	7b12      	ldrb	r2, [r2, #12]
 8024b1e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8024b20:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8024b22:	3301      	adds	r3, #1
 8024b24:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8024b26:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024b2a:	3b01      	subs	r3, #1
 8024b2c:	b29b      	uxth	r3, r3
 8024b2e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8024b32:	e7e3      	b.n	8024afc <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8024b34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024b38:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 8024b3a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024b3c:	b29b      	uxth	r3, r3
 8024b3e:	b90b      	cbnz	r3, 8024b44 <SPI_2linesRxISR_8BIT+0x7c>
      SPI_CloseRxTx_ISR(hspi);
 8024b40:	f7ff bf56 	b.w	80249f0 <SPI_CloseRxTx_ISR>
}
 8024b44:	4770      	bx	lr
 8024b46:	bf00      	nop
 8024b48:	08024b4d 	.word	0x08024b4d

08024b4c <SPI_2linesRxISR_8BITCRC>:
{
 8024b4c:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8024b4e:	2200      	movs	r2, #0
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8024b50:	6801      	ldr	r1, [r0, #0]
  __IO uint32_t tmpreg = 0U;
 8024b52:	9201      	str	r2, [sp, #4]
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8024b54:	7b0a      	ldrb	r2, [r1, #12]
 8024b56:	b2d2      	uxtb	r2, r2
 8024b58:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8024b5a:	9a01      	ldr	r2, [sp, #4]
  hspi->CRCSize--;
 8024b5c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8024b5e:	3a01      	subs	r2, #1
 8024b60:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8024b62:	b94a      	cbnz	r2, 8024b78 <SPI_2linesRxISR_8BITCRC+0x2c>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8024b64:	684a      	ldr	r2, [r1, #4]
 8024b66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024b6a:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8024b6c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024b6e:	b29b      	uxth	r3, r3
 8024b70:	b913      	cbnz	r3, 8024b78 <SPI_2linesRxISR_8BITCRC+0x2c>
}
 8024b72:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 8024b74:	f7ff bf3c 	b.w	80249f0 <SPI_CloseRxTx_ISR>
}
 8024b78:	b002      	add	sp, #8
 8024b7a:	4770      	bx	lr

08024b7c <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024b7c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8024b7e:	6802      	ldr	r2, [r0, #0]
{
 8024b80:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8024b82:	f831 4b02 	ldrh.w	r4, [r1], #2
 8024b86:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8024b88:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8024b8a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8024b8c:	3901      	subs	r1, #1
 8024b8e:	b289      	uxth	r1, r1
 8024b90:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8024b92:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8024b94:	b289      	uxth	r1, r1
 8024b96:	b959      	cbnz	r1, 8024bb0 <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024b98:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8024b9a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8024b9e:	d10a      	bne.n	8024bb6 <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8024ba0:	6813      	ldr	r3, [r2, #0]
 8024ba2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8024ba6:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8024ba8:	6853      	ldr	r3, [r2, #4]
 8024baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8024bae:	6053      	str	r3, [r2, #4]
}
 8024bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024bb4:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8024bb6:	6851      	ldr	r1, [r2, #4]
 8024bb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8024bbc:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8024bbe:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8024bc2:	b29b      	uxth	r3, r3
 8024bc4:	2b00      	cmp	r3, #0
 8024bc6:	d1f3      	bne.n	8024bb0 <SPI_2linesTxISR_16BIT+0x34>
}
 8024bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8024bcc:	f7ff bf10 	b.w	80249f0 <SPI_CloseRxTx_ISR>

08024bd0 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8024bd0:	6801      	ldr	r1, [r0, #0]
 8024bd2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8024bd4:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8024bd6:	68cc      	ldr	r4, [r1, #12]
 8024bd8:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8024bdc:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8024bde:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8024be2:	3a01      	subs	r2, #1
 8024be4:	b292      	uxth	r2, r2
 8024be6:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8024bea:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8024bee:	b292      	uxth	r2, r2
 8024bf0:	b92a      	cbnz	r2, 8024bfe <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8024bf2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8024bf4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8024bf8:	d104      	bne.n	8024c04 <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8024bfa:	4a08      	ldr	r2, [pc, #32]	; (8024c1c <SPI_2linesRxISR_16BIT+0x4c>)
 8024bfc:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 8024bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024c02:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8024c04:	684a      	ldr	r2, [r1, #4]
 8024c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024c0a:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8024c0c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8024c0e:	b29b      	uxth	r3, r3
 8024c10:	2b00      	cmp	r3, #0
 8024c12:	d1f4      	bne.n	8024bfe <SPI_2linesRxISR_16BIT+0x2e>
}
 8024c14:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8024c18:	f7ff beea 	b.w	80249f0 <SPI_CloseRxTx_ISR>
 8024c1c:	08024c21 	.word	0x08024c21

08024c20 <SPI_2linesRxISR_16BITCRC>:
{
 8024c20:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8024c22:	2300      	movs	r3, #0
 8024c24:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8024c26:	6803      	ldr	r3, [r0, #0]
 8024c28:	68da      	ldr	r2, [r3, #12]
 8024c2a:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);  
 8024c2c:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8024c2e:	685a      	ldr	r2, [r3, #4]
 8024c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024c34:	605a      	str	r2, [r3, #4]
}
 8024c36:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 8024c38:	f7ff beda 	b.w	80249f0 <SPI_CloseRxTx_ISR>

08024c3c <HAL_SPI_IRQHandler>:
{
 8024c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8024c3e:	6803      	ldr	r3, [r0, #0]
 8024c40:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8024c42:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8024c44:	0656      	lsls	r6, r2, #25
{
 8024c46:	b085      	sub	sp, #20
 8024c48:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8024c4a:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8024c4e:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8024c52:	d408      	bmi.n	8024c66 <HAL_SPI_IRQHandler+0x2a>
 8024c54:	07d6      	lsls	r6, r2, #31
 8024c56:	d506      	bpl.n	8024c66 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8024c58:	066e      	lsls	r6, r5, #25
 8024c5a:	d504      	bpl.n	8024c66 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8024c5c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 8024c5e:	b005      	add	sp, #20
 8024c60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8024c64:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8024c66:	0796      	lsls	r6, r2, #30
 8024c68:	d504      	bpl.n	8024c74 <HAL_SPI_IRQHandler+0x38>
 8024c6a:	0628      	lsls	r0, r5, #24
 8024c6c:	d502      	bpl.n	8024c74 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8024c6e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8024c70:	4620      	mov	r0, r4
 8024c72:	e7f4      	b.n	8024c5e <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8024c74:	f3c2 2000 	ubfx	r0, r2, #8, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8024c78:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8024c7a:	ea41 1252 	orr.w	r2, r1, r2, lsr #5
 8024c7e:	f002 0201 	and.w	r2, r2, #1
 8024c82:	4302      	orrs	r2, r0
 8024c84:	d057      	beq.n	8024d36 <HAL_SPI_IRQHandler+0xfa>
 8024c86:	06aa      	lsls	r2, r5, #26
 8024c88:	d555      	bpl.n	8024d36 <HAL_SPI_IRQHandler+0xfa>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8024c8a:	b17f      	cbz	r7, 8024cac <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8024c8c:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8024c90:	2a03      	cmp	r2, #3
 8024c92:	f04f 0100 	mov.w	r1, #0
 8024c96:	d048      	beq.n	8024d2a <HAL_SPI_IRQHandler+0xee>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8024c98:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024c9a:	f042 0204 	orr.w	r2, r2, #4
 8024c9e:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8024ca0:	9100      	str	r1, [sp, #0]
 8024ca2:	68da      	ldr	r2, [r3, #12]
 8024ca4:	9200      	str	r2, [sp, #0]
 8024ca6:	689a      	ldr	r2, [r3, #8]
 8024ca8:	9200      	str	r2, [sp, #0]
 8024caa:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8024cac:	07f1      	lsls	r1, r6, #31
 8024cae:	d50c      	bpl.n	8024cca <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8024cb0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024cb2:	f042 0201 	orr.w	r2, r2, #1
 8024cb6:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8024cb8:	2200      	movs	r2, #0
 8024cba:	9202      	str	r2, [sp, #8]
 8024cbc:	689a      	ldr	r2, [r3, #8]
 8024cbe:	9202      	str	r2, [sp, #8]
 8024cc0:	681a      	ldr	r2, [r3, #0]
 8024cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024cc6:	601a      	str	r2, [r3, #0]
 8024cc8:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8024cca:	b140      	cbz	r0, 8024cde <HAL_SPI_IRQHandler+0xa2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8024ccc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024cce:	f042 0208 	orr.w	r2, r2, #8
 8024cd2:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8024cd4:	2200      	movs	r2, #0
 8024cd6:	9203      	str	r2, [sp, #12]
 8024cd8:	689a      	ldr	r2, [r3, #8]
 8024cda:	9203      	str	r2, [sp, #12]
 8024cdc:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8024cde:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024ce0:	b34a      	cbz	r2, 8024d36 <HAL_SPI_IRQHandler+0xfa>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8024ce2:	685a      	ldr	r2, [r3, #4]
 8024ce4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8024ce8:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8024cea:	2201      	movs	r2, #1
 8024cec:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8024cf0:	07aa      	lsls	r2, r5, #30
 8024cf2:	d022      	beq.n	8024d3a <HAL_SPI_IRQHandler+0xfe>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8024cf4:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8024cf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8024cf8:	f022 0203 	bic.w	r2, r2, #3
 8024cfc:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8024cfe:	b140      	cbz	r0, 8024d12 <HAL_SPI_IRQHandler+0xd6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8024d00:	4b10      	ldr	r3, [pc, #64]	; (8024d44 <HAL_SPI_IRQHandler+0x108>)
 8024d02:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8024d04:	f7fd fe3a 	bl	802297c <HAL_DMA_Abort_IT>
 8024d08:	b118      	cbz	r0, 8024d12 <HAL_SPI_IRQHandler+0xd6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8024d0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024d10:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8024d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024d14:	b178      	cbz	r0, 8024d36 <HAL_SPI_IRQHandler+0xfa>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8024d16:	4b0b      	ldr	r3, [pc, #44]	; (8024d44 <HAL_SPI_IRQHandler+0x108>)
 8024d18:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8024d1a:	f7fd fe2f 	bl	802297c <HAL_DMA_Abort_IT>
 8024d1e:	b150      	cbz	r0, 8024d36 <HAL_SPI_IRQHandler+0xfa>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8024d20:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8024d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024d26:	6623      	str	r3, [r4, #96]	; 0x60
 8024d28:	e005      	b.n	8024d36 <HAL_SPI_IRQHandler+0xfa>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8024d2a:	9101      	str	r1, [sp, #4]
 8024d2c:	68da      	ldr	r2, [r3, #12]
 8024d2e:	9201      	str	r2, [sp, #4]
 8024d30:	689b      	ldr	r3, [r3, #8]
 8024d32:	9301      	str	r3, [sp, #4]
 8024d34:	9b01      	ldr	r3, [sp, #4]
}
 8024d36:	b005      	add	sp, #20
 8024d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8024d3a:	4620      	mov	r0, r4
 8024d3c:	f7ff fd59 	bl	80247f2 <HAL_SPI_ErrorCallback>
 8024d40:	e7f9      	b.n	8024d36 <HAL_SPI_IRQHandler+0xfa>
 8024d42:	bf00      	nop
 8024d44:	08024d49 	.word	0x08024d49

08024d48 <SPI_DMAAbortOnError>:
{
 8024d48:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8024d4a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8024d4c:	2300      	movs	r3, #0
 8024d4e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8024d52:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8024d54:	f7ff fd4d 	bl	80247f2 <HAL_SPI_ErrorCallback>
}
 8024d58:	bd08      	pop	{r3, pc}

08024d5a <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8024d5a:	4770      	bx	lr

08024d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8024d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024d5e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8024d60:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8024d62:	6921      	ldr	r1, [r4, #16]
 8024d64:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8024d66:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8024d68:	69c0      	ldr	r0, [r0, #28]
 8024d6a:	430a      	orrs	r2, r1
 8024d6c:	6961      	ldr	r1, [r4, #20]
 8024d6e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8024d70:	4993      	ldr	r1, [pc, #588]	; (8024fc0 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8024d72:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8024d74:	4029      	ands	r1, r5
 8024d76:	430a      	orrs	r2, r1
 8024d78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8024d7a:	685a      	ldr	r2, [r3, #4]
 8024d7c:	68e1      	ldr	r1, [r4, #12]
 8024d7e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8024d82:	430a      	orrs	r2, r1
 8024d84:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8024d86:	4a8f      	ldr	r2, [pc, #572]	; (8024fc4 <UART_SetConfig+0x268>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8024d88:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8024d8a:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8024d8c:	bf1c      	itt	ne
 8024d8e:	6a22      	ldrne	r2, [r4, #32]
 8024d90:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8024d92:	689a      	ldr	r2, [r3, #8]
 8024d94:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8024d98:	430a      	orrs	r2, r1
 8024d9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024d9c:	4a8a      	ldr	r2, [pc, #552]	; (8024fc8 <UART_SetConfig+0x26c>)
 8024d9e:	4293      	cmp	r3, r2
 8024da0:	d11b      	bne.n	8024dda <UART_SetConfig+0x7e>
 8024da2:	4b8a      	ldr	r3, [pc, #552]	; (8024fcc <UART_SetConfig+0x270>)
 8024da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024da8:	f003 0303 	and.w	r3, r3, #3
 8024dac:	3b01      	subs	r3, #1
 8024dae:	2b02      	cmp	r3, #2
 8024db0:	f200 80d6 	bhi.w	8024f60 <UART_SetConfig+0x204>
 8024db4:	4a86      	ldr	r2, [pc, #536]	; (8024fd0 <UART_SetConfig+0x274>)
 8024db6:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024db8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8024dbc:	f040 809e 	bne.w	8024efc <UART_SetConfig+0x1a0>
  {
    switch (clocksource)
 8024dc0:	2b08      	cmp	r3, #8
 8024dc2:	d828      	bhi.n	8024e16 <UART_SetConfig+0xba>
 8024dc4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8024dc8:	00cf00e0 	.word	0x00cf00e0
 8024dcc:	00270098 	.word	0x00270098
 8024dd0:	002700d5 	.word	0x002700d5
 8024dd4:	00270027 	.word	0x00270027
 8024dd8:	00e4      	.short	0x00e4
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024dda:	4a7e      	ldr	r2, [pc, #504]	; (8024fd4 <UART_SetConfig+0x278>)
 8024ddc:	4293      	cmp	r3, r2
 8024dde:	d108      	bne.n	8024df2 <UART_SetConfig+0x96>
 8024de0:	4b7a      	ldr	r3, [pc, #488]	; (8024fcc <UART_SetConfig+0x270>)
 8024de2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8024de6:	4b7a      	ldr	r3, [pc, #488]	; (8024fd0 <UART_SetConfig+0x274>)
 8024de8:	f002 020c 	and.w	r2, r2, #12
 8024dec:	4413      	add	r3, r2
 8024dee:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8024df0:	e7e2      	b.n	8024db8 <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024df2:	4a79      	ldr	r2, [pc, #484]	; (8024fd8 <UART_SetConfig+0x27c>)
 8024df4:	4293      	cmp	r3, r2
 8024df6:	d119      	bne.n	8024e2c <UART_SetConfig+0xd0>
 8024df8:	4b74      	ldr	r3, [pc, #464]	; (8024fcc <UART_SetConfig+0x270>)
 8024dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024dfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8024e02:	2b20      	cmp	r3, #32
 8024e04:	f000 80b8 	beq.w	8024f78 <UART_SetConfig+0x21c>
 8024e08:	d807      	bhi.n	8024e1a <UART_SetConfig+0xbe>
 8024e0a:	2b00      	cmp	r3, #0
 8024e0c:	f000 80b9 	beq.w	8024f82 <UART_SetConfig+0x226>
 8024e10:	2b10      	cmp	r3, #16
 8024e12:	f000 80ab 	beq.w	8024f6c <UART_SetConfig+0x210>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024e16:	2001      	movs	r0, #1
 8024e18:	e04e      	b.n	8024eb8 <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024e1a:	2b30      	cmp	r3, #48	; 0x30
 8024e1c:	d1fb      	bne.n	8024e16 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024e1e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8024e22:	f000 80b5 	beq.w	8024f90 <UART_SetConfig+0x234>
 8024e26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8024e2a:	e083      	b.n	8024f34 <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024e2c:	4a6b      	ldr	r2, [pc, #428]	; (8024fdc <UART_SetConfig+0x280>)
 8024e2e:	4293      	cmp	r3, r2
 8024e30:	d10f      	bne.n	8024e52 <UART_SetConfig+0xf6>
 8024e32:	4b66      	ldr	r3, [pc, #408]	; (8024fcc <UART_SetConfig+0x270>)
 8024e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024e38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024e3c:	2b80      	cmp	r3, #128	; 0x80
 8024e3e:	f000 809b 	beq.w	8024f78 <UART_SetConfig+0x21c>
 8024e42:	d804      	bhi.n	8024e4e <UART_SetConfig+0xf2>
 8024e44:	2b00      	cmp	r3, #0
 8024e46:	f000 809c 	beq.w	8024f82 <UART_SetConfig+0x226>
 8024e4a:	2b40      	cmp	r3, #64	; 0x40
 8024e4c:	e7e1      	b.n	8024e12 <UART_SetConfig+0xb6>
 8024e4e:	2bc0      	cmp	r3, #192	; 0xc0
 8024e50:	e7e4      	b.n	8024e1c <UART_SetConfig+0xc0>
 8024e52:	4a63      	ldr	r2, [pc, #396]	; (8024fe0 <UART_SetConfig+0x284>)
 8024e54:	4293      	cmp	r3, r2
 8024e56:	d112      	bne.n	8024e7e <UART_SetConfig+0x122>
 8024e58:	4b5c      	ldr	r3, [pc, #368]	; (8024fcc <UART_SetConfig+0x270>)
 8024e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8024e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024e66:	f000 8087 	beq.w	8024f78 <UART_SetConfig+0x21c>
 8024e6a:	d805      	bhi.n	8024e78 <UART_SetConfig+0x11c>
 8024e6c:	2b00      	cmp	r3, #0
 8024e6e:	f000 8088 	beq.w	8024f82 <UART_SetConfig+0x226>
 8024e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024e76:	e7cc      	b.n	8024e12 <UART_SetConfig+0xb6>
 8024e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8024e7c:	e7ce      	b.n	8024e1c <UART_SetConfig+0xc0>
 8024e7e:	4a51      	ldr	r2, [pc, #324]	; (8024fc4 <UART_SetConfig+0x268>)
 8024e80:	4293      	cmp	r3, r2
 8024e82:	d1c8      	bne.n	8024e16 <UART_SetConfig+0xba>
 8024e84:	4b51      	ldr	r3, [pc, #324]	; (8024fcc <UART_SetConfig+0x270>)
 8024e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024e8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8024e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8024e92:	d015      	beq.n	8024ec0 <UART_SetConfig+0x164>
 8024e94:	d806      	bhi.n	8024ea4 <UART_SetConfig+0x148>
 8024e96:	b15b      	cbz	r3, 8024eb0 <UART_SetConfig+0x154>
 8024e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024e9c:	d1bb      	bne.n	8024e16 <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 8024e9e:	f7fd fee5 	bl	8022c6c <HAL_RCC_GetSysClockFreq>
        break;
 8024ea2:	e007      	b.n	8024eb4 <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8024ea8:	d1b5      	bne.n	8024e16 <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 8024eaa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8024eae:	e008      	b.n	8024ec2 <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 8024eb0:	f7fe fa44 	bl	802333c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8024eb4:	b928      	cbnz	r0, 8024ec2 <UART_SetConfig+0x166>
 8024eb6:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8024eb8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8024eba:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8024ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = (uint32_t) HSI_VALUE;
 8024ec0:	4848      	ldr	r0, [pc, #288]	; (8024fe4 <UART_SetConfig+0x288>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8024ec2:	6862      	ldr	r2, [r4, #4]
 8024ec4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8024ec8:	4298      	cmp	r0, r3
 8024eca:	d3a4      	bcc.n	8024e16 <UART_SetConfig+0xba>
 8024ecc:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8024ed0:	d8a1      	bhi.n	8024e16 <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8024ed2:	0856      	lsrs	r6, r2, #1
 8024ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024ed8:	2700      	movs	r7, #0
 8024eda:	fbe1 6700 	umlal	r6, r7, r1, r0
 8024ede:	2300      	movs	r3, #0
 8024ee0:	4630      	mov	r0, r6
 8024ee2:	4639      	mov	r1, r7
 8024ee4:	f7fb fcda 	bl	802089c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8024ee8:	4b3f      	ldr	r3, [pc, #252]	; (8024fe8 <UART_SetConfig+0x28c>)
 8024eea:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8024eee:	429a      	cmp	r2, r3
 8024ef0:	d891      	bhi.n	8024e16 <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 8024ef2:	6823      	ldr	r3, [r4, #0]
 8024ef4:	60d8      	str	r0, [r3, #12]
 8024ef6:	e7de      	b.n	8024eb6 <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 8024ef8:	483a      	ldr	r0, [pc, #232]	; (8024fe4 <UART_SetConfig+0x288>)
 8024efa:	e049      	b.n	8024f90 <UART_SetConfig+0x234>
    switch (clocksource)
 8024efc:	2b08      	cmp	r3, #8
 8024efe:	d88a      	bhi.n	8024e16 <UART_SetConfig+0xba>
 8024f00:	a201      	add	r2, pc, #4	; (adr r2, 8024f08 <UART_SetConfig+0x1ac>)
 8024f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024f06:	bf00      	nop
 8024f08:	08024f2d 	.word	0x08024f2d
 8024f0c:	08024f55 	.word	0x08024f55
 8024f10:	08024f7f 	.word	0x08024f7f
 8024f14:	08024e17 	.word	0x08024e17
 8024f18:	08024f5b 	.word	0x08024f5b
 8024f1c:	08024e17 	.word	0x08024e17
 8024f20:	08024e17 	.word	0x08024e17
 8024f24:	08024e17 	.word	0x08024e17
 8024f28:	08024e27 	.word	0x08024e27
        pclk = HAL_RCC_GetPCLK1Freq();
 8024f2c:	f7fe fa06 	bl	802333c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8024f30:	2800      	cmp	r0, #0
 8024f32:	d0c0      	beq.n	8024eb6 <UART_SetConfig+0x15a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8024f34:	6862      	ldr	r2, [r4, #4]
 8024f36:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8024f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8024f3e:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8024f40:	f1a3 0110 	sub.w	r1, r3, #16
 8024f44:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8024f48:	4291      	cmp	r1, r2
 8024f4a:	f63f af64 	bhi.w	8024e16 <UART_SetConfig+0xba>
        huart->Instance->BRR = usartdiv;
 8024f4e:	6822      	ldr	r2, [r4, #0]
 8024f50:	60d3      	str	r3, [r2, #12]
 8024f52:	e7b0      	b.n	8024eb6 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8024f54:	f7fe fa04 	bl	8023360 <HAL_RCC_GetPCLK2Freq>
        break;
 8024f58:	e7ea      	b.n	8024f30 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8024f5a:	f7fd fe87 	bl	8022c6c <HAL_RCC_GetSysClockFreq>
        break;
 8024f5e:	e7e7      	b.n	8024f30 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024f60:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8024f64:	d1f6      	bne.n	8024f54 <UART_SetConfig+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8024f66:	f7fe f9fb 	bl	8023360 <HAL_RCC_GetPCLK2Freq>
        break;
 8024f6a:	e00f      	b.n	8024f8c <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024f6c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8024f70:	d1f3      	bne.n	8024f5a <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetSysClockFreq();
 8024f72:	f7fd fe7b 	bl	8022c6c <HAL_RCC_GetSysClockFreq>
        break;
 8024f76:	e009      	b.n	8024f8c <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024f78:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8024f7c:	d0bc      	beq.n	8024ef8 <UART_SetConfig+0x19c>
        pclk = (uint32_t) HSI_VALUE;
 8024f7e:	4819      	ldr	r0, [pc, #100]	; (8024fe4 <UART_SetConfig+0x288>)
 8024f80:	e7d8      	b.n	8024f34 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024f82:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8024f86:	d1d1      	bne.n	8024f2c <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8024f88:	f7fe f9d8 	bl	802333c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8024f8c:	2800      	cmp	r0, #0
 8024f8e:	d092      	beq.n	8024eb6 <UART_SetConfig+0x15a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8024f90:	6862      	ldr	r2, [r4, #4]
 8024f92:	0853      	lsrs	r3, r2, #1
 8024f94:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8024f98:	fbb0 f0f2 	udiv	r0, r0, r2
 8024f9c:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8024f9e:	f1a3 0110 	sub.w	r1, r3, #16
 8024fa2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8024fa6:	4291      	cmp	r1, r2
 8024fa8:	f63f af35 	bhi.w	8024e16 <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8024fac:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8024fb0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8024fb2:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8024fb4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8024fb8:	4318      	orrs	r0, r3
 8024fba:	60d0      	str	r0, [r2, #12]
 8024fbc:	e77b      	b.n	8024eb6 <UART_SetConfig+0x15a>
 8024fbe:	bf00      	nop
 8024fc0:	efff69f3 	.word	0xefff69f3
 8024fc4:	40008000 	.word	0x40008000
 8024fc8:	40013800 	.word	0x40013800
 8024fcc:	40021000 	.word	0x40021000
 8024fd0:	080269a8 	.word	0x080269a8
 8024fd4:	40004400 	.word	0x40004400
 8024fd8:	40004800 	.word	0x40004800
 8024fdc:	40004c00 	.word	0x40004c00
 8024fe0:	40005000 	.word	0x40005000
 8024fe4:	00f42400 	.word	0x00f42400
 8024fe8:	000ffcff 	.word	0x000ffcff

08024fec <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8024fec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8024fee:	07da      	lsls	r2, r3, #31
{
 8024ff0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8024ff2:	d506      	bpl.n	8025002 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8024ff4:	6801      	ldr	r1, [r0, #0]
 8024ff6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8024ff8:	684a      	ldr	r2, [r1, #4]
 8024ffa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8024ffe:	4322      	orrs	r2, r4
 8025000:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8025002:	079c      	lsls	r4, r3, #30
 8025004:	d506      	bpl.n	8025014 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8025006:	6801      	ldr	r1, [r0, #0]
 8025008:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 802500a:	684a      	ldr	r2, [r1, #4]
 802500c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8025010:	4322      	orrs	r2, r4
 8025012:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8025014:	0759      	lsls	r1, r3, #29
 8025016:	d506      	bpl.n	8025026 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8025018:	6801      	ldr	r1, [r0, #0]
 802501a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 802501c:	684a      	ldr	r2, [r1, #4]
 802501e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8025022:	4322      	orrs	r2, r4
 8025024:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8025026:	071a      	lsls	r2, r3, #28
 8025028:	d506      	bpl.n	8025038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802502a:	6801      	ldr	r1, [r0, #0]
 802502c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 802502e:	684a      	ldr	r2, [r1, #4]
 8025030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025034:	4322      	orrs	r2, r4
 8025036:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8025038:	06dc      	lsls	r4, r3, #27
 802503a:	d506      	bpl.n	802504a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 802503c:	6801      	ldr	r1, [r0, #0]
 802503e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8025040:	688a      	ldr	r2, [r1, #8]
 8025042:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8025046:	4322      	orrs	r2, r4
 8025048:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802504a:	0699      	lsls	r1, r3, #26
 802504c:	d506      	bpl.n	802505c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802504e:	6801      	ldr	r1, [r0, #0]
 8025050:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8025052:	688a      	ldr	r2, [r1, #8]
 8025054:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8025058:	4322      	orrs	r2, r4
 802505a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802505c:	065a      	lsls	r2, r3, #25
 802505e:	d50f      	bpl.n	8025080 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8025060:	6801      	ldr	r1, [r0, #0]
 8025062:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8025064:	684a      	ldr	r2, [r1, #4]
 8025066:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 802506a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802506c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8025070:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8025072:	d105      	bne.n	8025080 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8025074:	684a      	ldr	r2, [r1, #4]
 8025076:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8025078:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 802507c:	4322      	orrs	r2, r4
 802507e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8025080:	061b      	lsls	r3, r3, #24
 8025082:	d506      	bpl.n	8025092 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8025084:	6802      	ldr	r2, [r0, #0]
 8025086:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8025088:	6853      	ldr	r3, [r2, #4]
 802508a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 802508e:	430b      	orrs	r3, r1
 8025090:	6053      	str	r3, [r2, #4]
  }
}
 8025092:	bd10      	pop	{r4, pc}

08025094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8025094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025098:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802509c:	4604      	mov	r4, r0
 802509e:	460e      	mov	r6, r1
 80250a0:	4615      	mov	r5, r2
 80250a2:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80250a4:	6822      	ldr	r2, [r4, #0]
 80250a6:	69d3      	ldr	r3, [r2, #28]
 80250a8:	ea36 0303 	bics.w	r3, r6, r3
 80250ac:	bf0c      	ite	eq
 80250ae:	2301      	moveq	r3, #1
 80250b0:	2300      	movne	r3, #0
 80250b2:	42ab      	cmp	r3, r5
 80250b4:	d001      	beq.n	80250ba <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80250b6:	2000      	movs	r0, #0
 80250b8:	e01a      	b.n	80250f0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80250ba:	f1b8 3fff 	cmp.w	r8, #4294967295
 80250be:	d0f2      	beq.n	80250a6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80250c0:	f7fc ff92 	bl	8021fe8 <HAL_GetTick>
 80250c4:	1bc0      	subs	r0, r0, r7
 80250c6:	4540      	cmp	r0, r8
 80250c8:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80250ca:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80250cc:	d802      	bhi.n	80250d4 <UART_WaitOnFlagUntilTimeout+0x40>
 80250ce:	f1b8 0f00 	cmp.w	r8, #0
 80250d2:	d10f      	bne.n	80250f4 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80250d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80250d8:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80250da:	6883      	ldr	r3, [r0, #8]
 80250dc:	f023 0301 	bic.w	r3, r3, #1
 80250e0:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80250e2:	2320      	movs	r3, #32
 80250e4:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80250e6:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80250e8:	2300      	movs	r3, #0
 80250ea:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 80250ee:	2003      	movs	r0, #3
}
 80250f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80250f4:	075a      	lsls	r2, r3, #29
 80250f6:	d5d5      	bpl.n	80250a4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80250f8:	69c3      	ldr	r3, [r0, #28]
 80250fa:	051b      	lsls	r3, r3, #20
 80250fc:	d5d2      	bpl.n	80250a4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80250fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8025102:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8025104:	6803      	ldr	r3, [r0, #0]
 8025106:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802510a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802510c:	6883      	ldr	r3, [r0, #8]
 802510e:	f023 0301 	bic.w	r3, r3, #1
 8025112:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8025114:	2320      	movs	r3, #32
 8025116:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8025118:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802511a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 802511e:	e7e3      	b.n	80250e8 <UART_WaitOnFlagUntilTimeout+0x54>

08025120 <HAL_UART_Transmit>:
{
 8025120:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8025124:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8025126:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8025128:	2b20      	cmp	r3, #32
{
 802512a:	4604      	mov	r4, r0
 802512c:	460e      	mov	r6, r1
 802512e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8025130:	d14e      	bne.n	80251d0 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8025132:	2900      	cmp	r1, #0
 8025134:	d04a      	beq.n	80251cc <HAL_UART_Transmit+0xac>
 8025136:	2a00      	cmp	r2, #0
 8025138:	d048      	beq.n	80251cc <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 802513a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802513e:	2b01      	cmp	r3, #1
 8025140:	d046      	beq.n	80251d0 <HAL_UART_Transmit+0xb0>
 8025142:	2301      	movs	r3, #1
 8025144:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8025148:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802514a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802514c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8025150:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8025152:	f7fc ff49 	bl	8021fe8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8025156:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8025158:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802515c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8025160:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8025162:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8025166:	d103      	bne.n	8025170 <HAL_UART_Transmit+0x50>
 8025168:	6922      	ldr	r2, [r4, #16]
 802516a:	b90a      	cbnz	r2, 8025170 <HAL_UART_Transmit+0x50>
 802516c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 802516e:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8025170:	2200      	movs	r2, #0
 8025172:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8025176:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802517a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 802517e:	b292      	uxth	r2, r2
 8025180:	b93a      	cbnz	r2, 8025192 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8025182:	2140      	movs	r1, #64	; 0x40
 8025184:	4620      	mov	r0, r4
 8025186:	f7ff ff85 	bl	8025094 <UART_WaitOnFlagUntilTimeout>
 802518a:	b950      	cbnz	r0, 80251a2 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 802518c:	2320      	movs	r3, #32
 802518e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8025190:	e008      	b.n	80251a4 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8025192:	2200      	movs	r2, #0
 8025194:	2180      	movs	r1, #128	; 0x80
 8025196:	4620      	mov	r0, r4
 8025198:	9303      	str	r3, [sp, #12]
 802519a:	f7ff ff7b 	bl	8025094 <UART_WaitOnFlagUntilTimeout>
 802519e:	9b03      	ldr	r3, [sp, #12]
 80251a0:	b118      	cbz	r0, 80251aa <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80251a2:	2003      	movs	r0, #3
}
 80251a4:	b004      	add	sp, #16
 80251a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 80251aa:	6821      	ldr	r1, [r4, #0]
 80251ac:	b95e      	cbnz	r6, 80251c6 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80251ae:	f835 2b02 	ldrh.w	r2, [r5], #2
 80251b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80251b6:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80251b8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80251bc:	3a01      	subs	r2, #1
 80251be:	b292      	uxth	r2, r2
 80251c0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80251c4:	e7d7      	b.n	8025176 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80251c6:	f816 2b01 	ldrb.w	r2, [r6], #1
 80251ca:	e7f4      	b.n	80251b6 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80251cc:	2001      	movs	r0, #1
 80251ce:	e7e9      	b.n	80251a4 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80251d0:	2002      	movs	r0, #2
 80251d2:	e7e7      	b.n	80251a4 <HAL_UART_Transmit+0x84>

080251d4 <UART_CheckIdleState>:
{
 80251d4:	b530      	push	{r4, r5, lr}
 80251d6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80251d8:	2500      	movs	r5, #0
{
 80251da:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80251dc:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80251e0:	f7fc ff02 	bl	8021fe8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80251e4:	6822      	ldr	r2, [r4, #0]
 80251e6:	6812      	ldr	r2, [r2, #0]
 80251e8:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80251ea:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80251ec:	d415      	bmi.n	802521a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80251ee:	6822      	ldr	r2, [r4, #0]
 80251f0:	6812      	ldr	r2, [r2, #0]
 80251f2:	0752      	lsls	r2, r2, #29
 80251f4:	d509      	bpl.n	802520a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80251f6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80251fa:	9200      	str	r2, [sp, #0]
 80251fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8025200:	2200      	movs	r2, #0
 8025202:	4620      	mov	r0, r4
 8025204:	f7ff ff46 	bl	8025094 <UART_WaitOnFlagUntilTimeout>
 8025208:	b9a0      	cbnz	r0, 8025234 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 802520a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802520c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 802520e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8025210:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8025214:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8025216:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8025218:	e00d      	b.n	8025236 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802521a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 802521e:	9200      	str	r2, [sp, #0]
 8025220:	9003      	str	r0, [sp, #12]
 8025222:	462a      	mov	r2, r5
 8025224:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8025228:	4620      	mov	r0, r4
 802522a:	f7ff ff33 	bl	8025094 <UART_WaitOnFlagUntilTimeout>
 802522e:	9b03      	ldr	r3, [sp, #12]
 8025230:	2800      	cmp	r0, #0
 8025232:	d0dc      	beq.n	80251ee <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8025234:	2003      	movs	r0, #3
}
 8025236:	b005      	add	sp, #20
 8025238:	bd30      	pop	{r4, r5, pc}

0802523a <HAL_UART_Init>:
{
 802523a:	b510      	push	{r4, lr}
  if (huart == NULL)
 802523c:	4604      	mov	r4, r0
 802523e:	b340      	cbz	r0, 8025292 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8025240:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8025242:	b91b      	cbnz	r3, 802524c <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8025244:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8025248:	f7ff fd87 	bl	8024d5a <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 802524c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 802524e:	2324      	movs	r3, #36	; 0x24
 8025250:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8025252:	6813      	ldr	r3, [r2, #0]
 8025254:	f023 0301 	bic.w	r3, r3, #1
 8025258:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 802525a:	4620      	mov	r0, r4
 802525c:	f7ff fd7e 	bl	8024d5c <UART_SetConfig>
 8025260:	2801      	cmp	r0, #1
 8025262:	d016      	beq.n	8025292 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8025264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025266:	b113      	cbz	r3, 802526e <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8025268:	4620      	mov	r0, r4
 802526a:	f7ff febf 	bl	8024fec <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802526e:	6823      	ldr	r3, [r4, #0]
 8025270:	685a      	ldr	r2, [r3, #4]
 8025272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8025276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8025278:	689a      	ldr	r2, [r3, #8]
 802527a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802527e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8025280:	681a      	ldr	r2, [r3, #0]
 8025282:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8025286:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8025288:	601a      	str	r2, [r3, #0]
}
 802528a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 802528e:	f7ff bfa1 	b.w	80251d4 <UART_CheckIdleState>
}
 8025292:	2001      	movs	r0, #1
 8025294:	bd10      	pop	{r4, pc}
	...

08025298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8025298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80252d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 802529c:	f7fc fe3c 	bl	8021f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80252a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80252a2:	e003      	b.n	80252ac <LoopCopyDataInit>

080252a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80252a4:	4b0b      	ldr	r3, [pc, #44]	; (80252d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80252a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80252a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80252aa:	3104      	adds	r1, #4

080252ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80252ac:	480a      	ldr	r0, [pc, #40]	; (80252d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80252ae:	4b0b      	ldr	r3, [pc, #44]	; (80252dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80252b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80252b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80252b4:	d3f6      	bcc.n	80252a4 <CopyDataInit>
	ldr	r2, =_sbss
 80252b6:	4a0a      	ldr	r2, [pc, #40]	; (80252e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80252b8:	e002      	b.n	80252c0 <LoopFillZerobss>

080252ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80252ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80252bc:	f842 3b04 	str.w	r3, [r2], #4

080252c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80252c0:	4b08      	ldr	r3, [pc, #32]	; (80252e4 <LoopForever+0x16>)
	cmp	r2, r3
 80252c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80252c4:	d3f9      	bcc.n	80252ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80252c6:	f000 f861 	bl	802538c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80252ca:	f7fb fd6d 	bl	8020da8 <main>

080252ce <LoopForever>:

LoopForever:
    b LoopForever
 80252ce:	e7fe      	b.n	80252ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80252d0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80252d4:	08027328 	.word	0x08027328
	ldr	r0, =_sdata
 80252d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80252dc:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80252e0:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80252e4:	20000c04 	.word	0x20000c04

080252e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80252e8:	e7fe      	b.n	80252e8 <ADC1_2_IRQHandler>

080252ea <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80252ea:	2001      	movs	r0, #1
 80252ec:	4770      	bx	lr

080252ee <_kill>:

int _kill(int pid, int sig)
{
 80252ee:	b508      	push	{r3, lr}
	errno = EINVAL;
 80252f0:	f000 f846 	bl	8025380 <__errno>
 80252f4:	2316      	movs	r3, #22
 80252f6:	6003      	str	r3, [r0, #0]
	return -1;
}
 80252f8:	f04f 30ff 	mov.w	r0, #4294967295
 80252fc:	bd08      	pop	{r3, pc}

080252fe <_exit>:

void _exit (int status)
{
 80252fe:	b508      	push	{r3, lr}
	errno = EINVAL;
 8025300:	f000 f83e 	bl	8025380 <__errno>
 8025304:	2316      	movs	r3, #22
 8025306:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8025308:	e7fe      	b.n	8025308 <_exit+0xa>

0802530a <_read>:
}

int _read (int file, char *ptr, int len)
{
 802530a:	b510      	push	{r4, lr}
 802530c:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 802530e:	f3af 8000 	nop.w
 8025312:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8025314:	2001      	movs	r0, #1
 8025316:	bd10      	pop	{r4, pc}

08025318 <_write>:

int _write(int file, char *ptr, int len)
{
 8025318:	b570      	push	{r4, r5, r6, lr}
 802531a:	460e      	mov	r6, r1
 802531c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802531e:	2500      	movs	r5, #0
 8025320:	42a5      	cmp	r5, r4
 8025322:	db01      	blt.n	8025328 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8025324:	4620      	mov	r0, r4
 8025326:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8025328:	5d70      	ldrb	r0, [r6, r5]
 802532a:	f7fb fce3 	bl	8020cf4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802532e:	3501      	adds	r5, #1
 8025330:	e7f6      	b.n	8025320 <_write+0x8>
	...

08025334 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8025334:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8025336:	4b0a      	ldr	r3, [pc, #40]	; (8025360 <_sbrk+0x2c>)
 8025338:	6819      	ldr	r1, [r3, #0]
{
 802533a:	4602      	mov	r2, r0
	if (heap_end == 0)
 802533c:	b909      	cbnz	r1, 8025342 <_sbrk+0xe>
		heap_end = &end;
 802533e:	4909      	ldr	r1, [pc, #36]	; (8025364 <_sbrk+0x30>)
 8025340:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8025342:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8025344:	4669      	mov	r1, sp
 8025346:	4402      	add	r2, r0
 8025348:	428a      	cmp	r2, r1
 802534a:	d906      	bls.n	802535a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 802534c:	f000 f818 	bl	8025380 <__errno>
 8025350:	230c      	movs	r3, #12
 8025352:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8025354:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8025358:	bd08      	pop	{r3, pc}
	heap_end += incr;
 802535a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 802535c:	e7fc      	b.n	8025358 <_sbrk+0x24>
 802535e:	bf00      	nop
 8025360:	200000b4 	.word	0x200000b4
 8025364:	20000c08 	.word	0x20000c08

08025368 <_close>:

int _close(int file)
{
	return -1;
}
 8025368:	f04f 30ff 	mov.w	r0, #4294967295
 802536c:	4770      	bx	lr

0802536e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 802536e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8025372:	604b      	str	r3, [r1, #4]
	return 0;
}
 8025374:	2000      	movs	r0, #0
 8025376:	4770      	bx	lr

08025378 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8025378:	2001      	movs	r0, #1
 802537a:	4770      	bx	lr

0802537c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 802537c:	2000      	movs	r0, #0
 802537e:	4770      	bx	lr

08025380 <__errno>:
 8025380:	4b01      	ldr	r3, [pc, #4]	; (8025388 <__errno+0x8>)
 8025382:	6818      	ldr	r0, [r3, #0]
 8025384:	4770      	bx	lr
 8025386:	bf00      	nop
 8025388:	20000024 	.word	0x20000024

0802538c <__libc_init_array>:
 802538c:	b570      	push	{r4, r5, r6, lr}
 802538e:	4d0d      	ldr	r5, [pc, #52]	; (80253c4 <__libc_init_array+0x38>)
 8025390:	4c0d      	ldr	r4, [pc, #52]	; (80253c8 <__libc_init_array+0x3c>)
 8025392:	1b64      	subs	r4, r4, r5
 8025394:	10a4      	asrs	r4, r4, #2
 8025396:	2600      	movs	r6, #0
 8025398:	42a6      	cmp	r6, r4
 802539a:	d109      	bne.n	80253b0 <__libc_init_array+0x24>
 802539c:	4d0b      	ldr	r5, [pc, #44]	; (80253cc <__libc_init_array+0x40>)
 802539e:	4c0c      	ldr	r4, [pc, #48]	; (80253d0 <__libc_init_array+0x44>)
 80253a0:	f001 fad0 	bl	8026944 <_init>
 80253a4:	1b64      	subs	r4, r4, r5
 80253a6:	10a4      	asrs	r4, r4, #2
 80253a8:	2600      	movs	r6, #0
 80253aa:	42a6      	cmp	r6, r4
 80253ac:	d105      	bne.n	80253ba <__libc_init_array+0x2e>
 80253ae:	bd70      	pop	{r4, r5, r6, pc}
 80253b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80253b4:	4798      	blx	r3
 80253b6:	3601      	adds	r6, #1
 80253b8:	e7ee      	b.n	8025398 <__libc_init_array+0xc>
 80253ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80253be:	4798      	blx	r3
 80253c0:	3601      	adds	r6, #1
 80253c2:	e7f2      	b.n	80253aa <__libc_init_array+0x1e>
 80253c4:	08027318 	.word	0x08027318
 80253c8:	08027318 	.word	0x08027318
 80253cc:	08027318 	.word	0x08027318
 80253d0:	0802731c 	.word	0x0802731c

080253d4 <memcpy>:
 80253d4:	440a      	add	r2, r1
 80253d6:	4291      	cmp	r1, r2
 80253d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80253dc:	d100      	bne.n	80253e0 <memcpy+0xc>
 80253de:	4770      	bx	lr
 80253e0:	b510      	push	{r4, lr}
 80253e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80253e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80253ea:	4291      	cmp	r1, r2
 80253ec:	d1f9      	bne.n	80253e2 <memcpy+0xe>
 80253ee:	bd10      	pop	{r4, pc}

080253f0 <memset>:
 80253f0:	4402      	add	r2, r0
 80253f2:	4603      	mov	r3, r0
 80253f4:	4293      	cmp	r3, r2
 80253f6:	d100      	bne.n	80253fa <memset+0xa>
 80253f8:	4770      	bx	lr
 80253fa:	f803 1b01 	strb.w	r1, [r3], #1
 80253fe:	e7f9      	b.n	80253f4 <memset+0x4>

08025400 <iprintf>:
 8025400:	b40f      	push	{r0, r1, r2, r3}
 8025402:	4b0a      	ldr	r3, [pc, #40]	; (802542c <iprintf+0x2c>)
 8025404:	b513      	push	{r0, r1, r4, lr}
 8025406:	681c      	ldr	r4, [r3, #0]
 8025408:	b124      	cbz	r4, 8025414 <iprintf+0x14>
 802540a:	69a3      	ldr	r3, [r4, #24]
 802540c:	b913      	cbnz	r3, 8025414 <iprintf+0x14>
 802540e:	4620      	mov	r0, r4
 8025410:	f000 fb2a 	bl	8025a68 <__sinit>
 8025414:	ab05      	add	r3, sp, #20
 8025416:	9a04      	ldr	r2, [sp, #16]
 8025418:	68a1      	ldr	r1, [r4, #8]
 802541a:	9301      	str	r3, [sp, #4]
 802541c:	4620      	mov	r0, r4
 802541e:	f000 fe71 	bl	8026104 <_vfiprintf_r>
 8025422:	b002      	add	sp, #8
 8025424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025428:	b004      	add	sp, #16
 802542a:	4770      	bx	lr
 802542c:	20000024 	.word	0x20000024

08025430 <_puts_r>:
 8025430:	b570      	push	{r4, r5, r6, lr}
 8025432:	460e      	mov	r6, r1
 8025434:	4605      	mov	r5, r0
 8025436:	b118      	cbz	r0, 8025440 <_puts_r+0x10>
 8025438:	6983      	ldr	r3, [r0, #24]
 802543a:	b90b      	cbnz	r3, 8025440 <_puts_r+0x10>
 802543c:	f000 fb14 	bl	8025a68 <__sinit>
 8025440:	69ab      	ldr	r3, [r5, #24]
 8025442:	68ac      	ldr	r4, [r5, #8]
 8025444:	b913      	cbnz	r3, 802544c <_puts_r+0x1c>
 8025446:	4628      	mov	r0, r5
 8025448:	f000 fb0e 	bl	8025a68 <__sinit>
 802544c:	4b2c      	ldr	r3, [pc, #176]	; (8025500 <_puts_r+0xd0>)
 802544e:	429c      	cmp	r4, r3
 8025450:	d120      	bne.n	8025494 <_puts_r+0x64>
 8025452:	686c      	ldr	r4, [r5, #4]
 8025454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025456:	07db      	lsls	r3, r3, #31
 8025458:	d405      	bmi.n	8025466 <_puts_r+0x36>
 802545a:	89a3      	ldrh	r3, [r4, #12]
 802545c:	0598      	lsls	r0, r3, #22
 802545e:	d402      	bmi.n	8025466 <_puts_r+0x36>
 8025460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025462:	f000 fbb1 	bl	8025bc8 <__retarget_lock_acquire_recursive>
 8025466:	89a3      	ldrh	r3, [r4, #12]
 8025468:	0719      	lsls	r1, r3, #28
 802546a:	d51d      	bpl.n	80254a8 <_puts_r+0x78>
 802546c:	6923      	ldr	r3, [r4, #16]
 802546e:	b1db      	cbz	r3, 80254a8 <_puts_r+0x78>
 8025470:	3e01      	subs	r6, #1
 8025472:	68a3      	ldr	r3, [r4, #8]
 8025474:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025478:	3b01      	subs	r3, #1
 802547a:	60a3      	str	r3, [r4, #8]
 802547c:	bb39      	cbnz	r1, 80254ce <_puts_r+0x9e>
 802547e:	2b00      	cmp	r3, #0
 8025480:	da38      	bge.n	80254f4 <_puts_r+0xc4>
 8025482:	4622      	mov	r2, r4
 8025484:	210a      	movs	r1, #10
 8025486:	4628      	mov	r0, r5
 8025488:	f000 f8f6 	bl	8025678 <__swbuf_r>
 802548c:	3001      	adds	r0, #1
 802548e:	d011      	beq.n	80254b4 <_puts_r+0x84>
 8025490:	250a      	movs	r5, #10
 8025492:	e011      	b.n	80254b8 <_puts_r+0x88>
 8025494:	4b1b      	ldr	r3, [pc, #108]	; (8025504 <_puts_r+0xd4>)
 8025496:	429c      	cmp	r4, r3
 8025498:	d101      	bne.n	802549e <_puts_r+0x6e>
 802549a:	68ac      	ldr	r4, [r5, #8]
 802549c:	e7da      	b.n	8025454 <_puts_r+0x24>
 802549e:	4b1a      	ldr	r3, [pc, #104]	; (8025508 <_puts_r+0xd8>)
 80254a0:	429c      	cmp	r4, r3
 80254a2:	bf08      	it	eq
 80254a4:	68ec      	ldreq	r4, [r5, #12]
 80254a6:	e7d5      	b.n	8025454 <_puts_r+0x24>
 80254a8:	4621      	mov	r1, r4
 80254aa:	4628      	mov	r0, r5
 80254ac:	f000 f936 	bl	802571c <__swsetup_r>
 80254b0:	2800      	cmp	r0, #0
 80254b2:	d0dd      	beq.n	8025470 <_puts_r+0x40>
 80254b4:	f04f 35ff 	mov.w	r5, #4294967295
 80254b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80254ba:	07da      	lsls	r2, r3, #31
 80254bc:	d405      	bmi.n	80254ca <_puts_r+0x9a>
 80254be:	89a3      	ldrh	r3, [r4, #12]
 80254c0:	059b      	lsls	r3, r3, #22
 80254c2:	d402      	bmi.n	80254ca <_puts_r+0x9a>
 80254c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80254c6:	f000 fb80 	bl	8025bca <__retarget_lock_release_recursive>
 80254ca:	4628      	mov	r0, r5
 80254cc:	bd70      	pop	{r4, r5, r6, pc}
 80254ce:	2b00      	cmp	r3, #0
 80254d0:	da04      	bge.n	80254dc <_puts_r+0xac>
 80254d2:	69a2      	ldr	r2, [r4, #24]
 80254d4:	429a      	cmp	r2, r3
 80254d6:	dc06      	bgt.n	80254e6 <_puts_r+0xb6>
 80254d8:	290a      	cmp	r1, #10
 80254da:	d004      	beq.n	80254e6 <_puts_r+0xb6>
 80254dc:	6823      	ldr	r3, [r4, #0]
 80254de:	1c5a      	adds	r2, r3, #1
 80254e0:	6022      	str	r2, [r4, #0]
 80254e2:	7019      	strb	r1, [r3, #0]
 80254e4:	e7c5      	b.n	8025472 <_puts_r+0x42>
 80254e6:	4622      	mov	r2, r4
 80254e8:	4628      	mov	r0, r5
 80254ea:	f000 f8c5 	bl	8025678 <__swbuf_r>
 80254ee:	3001      	adds	r0, #1
 80254f0:	d1bf      	bne.n	8025472 <_puts_r+0x42>
 80254f2:	e7df      	b.n	80254b4 <_puts_r+0x84>
 80254f4:	6823      	ldr	r3, [r4, #0]
 80254f6:	250a      	movs	r5, #10
 80254f8:	1c5a      	adds	r2, r3, #1
 80254fa:	6022      	str	r2, [r4, #0]
 80254fc:	701d      	strb	r5, [r3, #0]
 80254fe:	e7db      	b.n	80254b8 <_puts_r+0x88>
 8025500:	08027298 	.word	0x08027298
 8025504:	080272b8 	.word	0x080272b8
 8025508:	08027278 	.word	0x08027278

0802550c <puts>:
 802550c:	4b02      	ldr	r3, [pc, #8]	; (8025518 <puts+0xc>)
 802550e:	4601      	mov	r1, r0
 8025510:	6818      	ldr	r0, [r3, #0]
 8025512:	f7ff bf8d 	b.w	8025430 <_puts_r>
 8025516:	bf00      	nop
 8025518:	20000024 	.word	0x20000024

0802551c <siprintf>:
 802551c:	b40e      	push	{r1, r2, r3}
 802551e:	b500      	push	{lr}
 8025520:	b09c      	sub	sp, #112	; 0x70
 8025522:	ab1d      	add	r3, sp, #116	; 0x74
 8025524:	9002      	str	r0, [sp, #8]
 8025526:	9006      	str	r0, [sp, #24]
 8025528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802552c:	4809      	ldr	r0, [pc, #36]	; (8025554 <siprintf+0x38>)
 802552e:	9107      	str	r1, [sp, #28]
 8025530:	9104      	str	r1, [sp, #16]
 8025532:	4909      	ldr	r1, [pc, #36]	; (8025558 <siprintf+0x3c>)
 8025534:	f853 2b04 	ldr.w	r2, [r3], #4
 8025538:	9105      	str	r1, [sp, #20]
 802553a:	6800      	ldr	r0, [r0, #0]
 802553c:	9301      	str	r3, [sp, #4]
 802553e:	a902      	add	r1, sp, #8
 8025540:	f000 fcb6 	bl	8025eb0 <_svfiprintf_r>
 8025544:	9b02      	ldr	r3, [sp, #8]
 8025546:	2200      	movs	r2, #0
 8025548:	701a      	strb	r2, [r3, #0]
 802554a:	b01c      	add	sp, #112	; 0x70
 802554c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025550:	b003      	add	sp, #12
 8025552:	4770      	bx	lr
 8025554:	20000024 	.word	0x20000024
 8025558:	ffff0208 	.word	0xffff0208

0802555c <strcpy>:
 802555c:	4603      	mov	r3, r0
 802555e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025562:	f803 2b01 	strb.w	r2, [r3], #1
 8025566:	2a00      	cmp	r2, #0
 8025568:	d1f9      	bne.n	802555e <strcpy+0x2>
 802556a:	4770      	bx	lr

0802556c <strncpy>:
 802556c:	b510      	push	{r4, lr}
 802556e:	3901      	subs	r1, #1
 8025570:	4603      	mov	r3, r0
 8025572:	b132      	cbz	r2, 8025582 <strncpy+0x16>
 8025574:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025578:	f803 4b01 	strb.w	r4, [r3], #1
 802557c:	3a01      	subs	r2, #1
 802557e:	2c00      	cmp	r4, #0
 8025580:	d1f7      	bne.n	8025572 <strncpy+0x6>
 8025582:	441a      	add	r2, r3
 8025584:	2100      	movs	r1, #0
 8025586:	4293      	cmp	r3, r2
 8025588:	d100      	bne.n	802558c <strncpy+0x20>
 802558a:	bd10      	pop	{r4, pc}
 802558c:	f803 1b01 	strb.w	r1, [r3], #1
 8025590:	e7f9      	b.n	8025586 <strncpy+0x1a>

08025592 <strstr>:
 8025592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025594:	780c      	ldrb	r4, [r1, #0]
 8025596:	b164      	cbz	r4, 80255b2 <strstr+0x20>
 8025598:	4603      	mov	r3, r0
 802559a:	781a      	ldrb	r2, [r3, #0]
 802559c:	4618      	mov	r0, r3
 802559e:	1c5e      	adds	r6, r3, #1
 80255a0:	b90a      	cbnz	r2, 80255a6 <strstr+0x14>
 80255a2:	4610      	mov	r0, r2
 80255a4:	e005      	b.n	80255b2 <strstr+0x20>
 80255a6:	4294      	cmp	r4, r2
 80255a8:	d108      	bne.n	80255bc <strstr+0x2a>
 80255aa:	460d      	mov	r5, r1
 80255ac:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80255b0:	b902      	cbnz	r2, 80255b4 <strstr+0x22>
 80255b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80255b4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80255b8:	4297      	cmp	r7, r2
 80255ba:	d0f7      	beq.n	80255ac <strstr+0x1a>
 80255bc:	4633      	mov	r3, r6
 80255be:	e7ec      	b.n	802559a <strstr+0x8>

080255c0 <strtok>:
 80255c0:	4b16      	ldr	r3, [pc, #88]	; (802561c <strtok+0x5c>)
 80255c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80255c4:	681e      	ldr	r6, [r3, #0]
 80255c6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80255c8:	4605      	mov	r5, r0
 80255ca:	b9fc      	cbnz	r4, 802560c <strtok+0x4c>
 80255cc:	2050      	movs	r0, #80	; 0x50
 80255ce:	9101      	str	r1, [sp, #4]
 80255d0:	f000 fb60 	bl	8025c94 <malloc>
 80255d4:	9901      	ldr	r1, [sp, #4]
 80255d6:	65b0      	str	r0, [r6, #88]	; 0x58
 80255d8:	4602      	mov	r2, r0
 80255da:	b920      	cbnz	r0, 80255e6 <strtok+0x26>
 80255dc:	4b10      	ldr	r3, [pc, #64]	; (8025620 <strtok+0x60>)
 80255de:	4811      	ldr	r0, [pc, #68]	; (8025624 <strtok+0x64>)
 80255e0:	2157      	movs	r1, #87	; 0x57
 80255e2:	f000 f909 	bl	80257f8 <__assert_func>
 80255e6:	e9c0 4400 	strd	r4, r4, [r0]
 80255ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80255ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80255f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80255f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80255fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80255fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8025602:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8025606:	6184      	str	r4, [r0, #24]
 8025608:	7704      	strb	r4, [r0, #28]
 802560a:	6244      	str	r4, [r0, #36]	; 0x24
 802560c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 802560e:	2301      	movs	r3, #1
 8025610:	4628      	mov	r0, r5
 8025612:	b002      	add	sp, #8
 8025614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025618:	f000 b806 	b.w	8025628 <__strtok_r>
 802561c:	20000024 	.word	0x20000024
 8025620:	080271c4 	.word	0x080271c4
 8025624:	080271db 	.word	0x080271db

08025628 <__strtok_r>:
 8025628:	b5f0      	push	{r4, r5, r6, r7, lr}
 802562a:	b908      	cbnz	r0, 8025630 <__strtok_r+0x8>
 802562c:	6810      	ldr	r0, [r2, #0]
 802562e:	b188      	cbz	r0, 8025654 <__strtok_r+0x2c>
 8025630:	4604      	mov	r4, r0
 8025632:	4620      	mov	r0, r4
 8025634:	f814 5b01 	ldrb.w	r5, [r4], #1
 8025638:	460f      	mov	r7, r1
 802563a:	f817 6b01 	ldrb.w	r6, [r7], #1
 802563e:	b91e      	cbnz	r6, 8025648 <__strtok_r+0x20>
 8025640:	b965      	cbnz	r5, 802565c <__strtok_r+0x34>
 8025642:	6015      	str	r5, [r2, #0]
 8025644:	4628      	mov	r0, r5
 8025646:	e005      	b.n	8025654 <__strtok_r+0x2c>
 8025648:	42b5      	cmp	r5, r6
 802564a:	d1f6      	bne.n	802563a <__strtok_r+0x12>
 802564c:	2b00      	cmp	r3, #0
 802564e:	d1f0      	bne.n	8025632 <__strtok_r+0xa>
 8025650:	6014      	str	r4, [r2, #0]
 8025652:	7003      	strb	r3, [r0, #0]
 8025654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025656:	461c      	mov	r4, r3
 8025658:	e00c      	b.n	8025674 <__strtok_r+0x4c>
 802565a:	b915      	cbnz	r5, 8025662 <__strtok_r+0x3a>
 802565c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025660:	460e      	mov	r6, r1
 8025662:	f816 5b01 	ldrb.w	r5, [r6], #1
 8025666:	42ab      	cmp	r3, r5
 8025668:	d1f7      	bne.n	802565a <__strtok_r+0x32>
 802566a:	2b00      	cmp	r3, #0
 802566c:	d0f3      	beq.n	8025656 <__strtok_r+0x2e>
 802566e:	2300      	movs	r3, #0
 8025670:	f804 3c01 	strb.w	r3, [r4, #-1]
 8025674:	6014      	str	r4, [r2, #0]
 8025676:	e7ed      	b.n	8025654 <__strtok_r+0x2c>

08025678 <__swbuf_r>:
 8025678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802567a:	460e      	mov	r6, r1
 802567c:	4614      	mov	r4, r2
 802567e:	4605      	mov	r5, r0
 8025680:	b118      	cbz	r0, 802568a <__swbuf_r+0x12>
 8025682:	6983      	ldr	r3, [r0, #24]
 8025684:	b90b      	cbnz	r3, 802568a <__swbuf_r+0x12>
 8025686:	f000 f9ef 	bl	8025a68 <__sinit>
 802568a:	4b21      	ldr	r3, [pc, #132]	; (8025710 <__swbuf_r+0x98>)
 802568c:	429c      	cmp	r4, r3
 802568e:	d12b      	bne.n	80256e8 <__swbuf_r+0x70>
 8025690:	686c      	ldr	r4, [r5, #4]
 8025692:	69a3      	ldr	r3, [r4, #24]
 8025694:	60a3      	str	r3, [r4, #8]
 8025696:	89a3      	ldrh	r3, [r4, #12]
 8025698:	071a      	lsls	r2, r3, #28
 802569a:	d52f      	bpl.n	80256fc <__swbuf_r+0x84>
 802569c:	6923      	ldr	r3, [r4, #16]
 802569e:	b36b      	cbz	r3, 80256fc <__swbuf_r+0x84>
 80256a0:	6923      	ldr	r3, [r4, #16]
 80256a2:	6820      	ldr	r0, [r4, #0]
 80256a4:	1ac0      	subs	r0, r0, r3
 80256a6:	6963      	ldr	r3, [r4, #20]
 80256a8:	b2f6      	uxtb	r6, r6
 80256aa:	4283      	cmp	r3, r0
 80256ac:	4637      	mov	r7, r6
 80256ae:	dc04      	bgt.n	80256ba <__swbuf_r+0x42>
 80256b0:	4621      	mov	r1, r4
 80256b2:	4628      	mov	r0, r5
 80256b4:	f000 f944 	bl	8025940 <_fflush_r>
 80256b8:	bb30      	cbnz	r0, 8025708 <__swbuf_r+0x90>
 80256ba:	68a3      	ldr	r3, [r4, #8]
 80256bc:	3b01      	subs	r3, #1
 80256be:	60a3      	str	r3, [r4, #8]
 80256c0:	6823      	ldr	r3, [r4, #0]
 80256c2:	1c5a      	adds	r2, r3, #1
 80256c4:	6022      	str	r2, [r4, #0]
 80256c6:	701e      	strb	r6, [r3, #0]
 80256c8:	6963      	ldr	r3, [r4, #20]
 80256ca:	3001      	adds	r0, #1
 80256cc:	4283      	cmp	r3, r0
 80256ce:	d004      	beq.n	80256da <__swbuf_r+0x62>
 80256d0:	89a3      	ldrh	r3, [r4, #12]
 80256d2:	07db      	lsls	r3, r3, #31
 80256d4:	d506      	bpl.n	80256e4 <__swbuf_r+0x6c>
 80256d6:	2e0a      	cmp	r6, #10
 80256d8:	d104      	bne.n	80256e4 <__swbuf_r+0x6c>
 80256da:	4621      	mov	r1, r4
 80256dc:	4628      	mov	r0, r5
 80256de:	f000 f92f 	bl	8025940 <_fflush_r>
 80256e2:	b988      	cbnz	r0, 8025708 <__swbuf_r+0x90>
 80256e4:	4638      	mov	r0, r7
 80256e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80256e8:	4b0a      	ldr	r3, [pc, #40]	; (8025714 <__swbuf_r+0x9c>)
 80256ea:	429c      	cmp	r4, r3
 80256ec:	d101      	bne.n	80256f2 <__swbuf_r+0x7a>
 80256ee:	68ac      	ldr	r4, [r5, #8]
 80256f0:	e7cf      	b.n	8025692 <__swbuf_r+0x1a>
 80256f2:	4b09      	ldr	r3, [pc, #36]	; (8025718 <__swbuf_r+0xa0>)
 80256f4:	429c      	cmp	r4, r3
 80256f6:	bf08      	it	eq
 80256f8:	68ec      	ldreq	r4, [r5, #12]
 80256fa:	e7ca      	b.n	8025692 <__swbuf_r+0x1a>
 80256fc:	4621      	mov	r1, r4
 80256fe:	4628      	mov	r0, r5
 8025700:	f000 f80c 	bl	802571c <__swsetup_r>
 8025704:	2800      	cmp	r0, #0
 8025706:	d0cb      	beq.n	80256a0 <__swbuf_r+0x28>
 8025708:	f04f 37ff 	mov.w	r7, #4294967295
 802570c:	e7ea      	b.n	80256e4 <__swbuf_r+0x6c>
 802570e:	bf00      	nop
 8025710:	08027298 	.word	0x08027298
 8025714:	080272b8 	.word	0x080272b8
 8025718:	08027278 	.word	0x08027278

0802571c <__swsetup_r>:
 802571c:	4b32      	ldr	r3, [pc, #200]	; (80257e8 <__swsetup_r+0xcc>)
 802571e:	b570      	push	{r4, r5, r6, lr}
 8025720:	681d      	ldr	r5, [r3, #0]
 8025722:	4606      	mov	r6, r0
 8025724:	460c      	mov	r4, r1
 8025726:	b125      	cbz	r5, 8025732 <__swsetup_r+0x16>
 8025728:	69ab      	ldr	r3, [r5, #24]
 802572a:	b913      	cbnz	r3, 8025732 <__swsetup_r+0x16>
 802572c:	4628      	mov	r0, r5
 802572e:	f000 f99b 	bl	8025a68 <__sinit>
 8025732:	4b2e      	ldr	r3, [pc, #184]	; (80257ec <__swsetup_r+0xd0>)
 8025734:	429c      	cmp	r4, r3
 8025736:	d10f      	bne.n	8025758 <__swsetup_r+0x3c>
 8025738:	686c      	ldr	r4, [r5, #4]
 802573a:	89a3      	ldrh	r3, [r4, #12]
 802573c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025740:	0719      	lsls	r1, r3, #28
 8025742:	d42c      	bmi.n	802579e <__swsetup_r+0x82>
 8025744:	06dd      	lsls	r5, r3, #27
 8025746:	d411      	bmi.n	802576c <__swsetup_r+0x50>
 8025748:	2309      	movs	r3, #9
 802574a:	6033      	str	r3, [r6, #0]
 802574c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025750:	81a3      	strh	r3, [r4, #12]
 8025752:	f04f 30ff 	mov.w	r0, #4294967295
 8025756:	e03e      	b.n	80257d6 <__swsetup_r+0xba>
 8025758:	4b25      	ldr	r3, [pc, #148]	; (80257f0 <__swsetup_r+0xd4>)
 802575a:	429c      	cmp	r4, r3
 802575c:	d101      	bne.n	8025762 <__swsetup_r+0x46>
 802575e:	68ac      	ldr	r4, [r5, #8]
 8025760:	e7eb      	b.n	802573a <__swsetup_r+0x1e>
 8025762:	4b24      	ldr	r3, [pc, #144]	; (80257f4 <__swsetup_r+0xd8>)
 8025764:	429c      	cmp	r4, r3
 8025766:	bf08      	it	eq
 8025768:	68ec      	ldreq	r4, [r5, #12]
 802576a:	e7e6      	b.n	802573a <__swsetup_r+0x1e>
 802576c:	0758      	lsls	r0, r3, #29
 802576e:	d512      	bpl.n	8025796 <__swsetup_r+0x7a>
 8025770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025772:	b141      	cbz	r1, 8025786 <__swsetup_r+0x6a>
 8025774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025778:	4299      	cmp	r1, r3
 802577a:	d002      	beq.n	8025782 <__swsetup_r+0x66>
 802577c:	4630      	mov	r0, r6
 802577e:	f000 fa91 	bl	8025ca4 <_free_r>
 8025782:	2300      	movs	r3, #0
 8025784:	6363      	str	r3, [r4, #52]	; 0x34
 8025786:	89a3      	ldrh	r3, [r4, #12]
 8025788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802578c:	81a3      	strh	r3, [r4, #12]
 802578e:	2300      	movs	r3, #0
 8025790:	6063      	str	r3, [r4, #4]
 8025792:	6923      	ldr	r3, [r4, #16]
 8025794:	6023      	str	r3, [r4, #0]
 8025796:	89a3      	ldrh	r3, [r4, #12]
 8025798:	f043 0308 	orr.w	r3, r3, #8
 802579c:	81a3      	strh	r3, [r4, #12]
 802579e:	6923      	ldr	r3, [r4, #16]
 80257a0:	b94b      	cbnz	r3, 80257b6 <__swsetup_r+0x9a>
 80257a2:	89a3      	ldrh	r3, [r4, #12]
 80257a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80257a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80257ac:	d003      	beq.n	80257b6 <__swsetup_r+0x9a>
 80257ae:	4621      	mov	r1, r4
 80257b0:	4630      	mov	r0, r6
 80257b2:	f000 fa2f 	bl	8025c14 <__smakebuf_r>
 80257b6:	89a0      	ldrh	r0, [r4, #12]
 80257b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80257bc:	f010 0301 	ands.w	r3, r0, #1
 80257c0:	d00a      	beq.n	80257d8 <__swsetup_r+0xbc>
 80257c2:	2300      	movs	r3, #0
 80257c4:	60a3      	str	r3, [r4, #8]
 80257c6:	6963      	ldr	r3, [r4, #20]
 80257c8:	425b      	negs	r3, r3
 80257ca:	61a3      	str	r3, [r4, #24]
 80257cc:	6923      	ldr	r3, [r4, #16]
 80257ce:	b943      	cbnz	r3, 80257e2 <__swsetup_r+0xc6>
 80257d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80257d4:	d1ba      	bne.n	802574c <__swsetup_r+0x30>
 80257d6:	bd70      	pop	{r4, r5, r6, pc}
 80257d8:	0781      	lsls	r1, r0, #30
 80257da:	bf58      	it	pl
 80257dc:	6963      	ldrpl	r3, [r4, #20]
 80257de:	60a3      	str	r3, [r4, #8]
 80257e0:	e7f4      	b.n	80257cc <__swsetup_r+0xb0>
 80257e2:	2000      	movs	r0, #0
 80257e4:	e7f7      	b.n	80257d6 <__swsetup_r+0xba>
 80257e6:	bf00      	nop
 80257e8:	20000024 	.word	0x20000024
 80257ec:	08027298 	.word	0x08027298
 80257f0:	080272b8 	.word	0x080272b8
 80257f4:	08027278 	.word	0x08027278

080257f8 <__assert_func>:
 80257f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80257fa:	4614      	mov	r4, r2
 80257fc:	461a      	mov	r2, r3
 80257fe:	4b09      	ldr	r3, [pc, #36]	; (8025824 <__assert_func+0x2c>)
 8025800:	681b      	ldr	r3, [r3, #0]
 8025802:	4605      	mov	r5, r0
 8025804:	68d8      	ldr	r0, [r3, #12]
 8025806:	b14c      	cbz	r4, 802581c <__assert_func+0x24>
 8025808:	4b07      	ldr	r3, [pc, #28]	; (8025828 <__assert_func+0x30>)
 802580a:	9100      	str	r1, [sp, #0]
 802580c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025810:	4906      	ldr	r1, [pc, #24]	; (802582c <__assert_func+0x34>)
 8025812:	462b      	mov	r3, r5
 8025814:	f000 f9a6 	bl	8025b64 <fiprintf>
 8025818:	f000 ff9e 	bl	8026758 <abort>
 802581c:	4b04      	ldr	r3, [pc, #16]	; (8025830 <__assert_func+0x38>)
 802581e:	461c      	mov	r4, r3
 8025820:	e7f3      	b.n	802580a <__assert_func+0x12>
 8025822:	bf00      	nop
 8025824:	20000024 	.word	0x20000024
 8025828:	0802723c 	.word	0x0802723c
 802582c:	08027249 	.word	0x08027249
 8025830:	0802704c 	.word	0x0802704c

08025834 <__sflush_r>:
 8025834:	898a      	ldrh	r2, [r1, #12]
 8025836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802583a:	4605      	mov	r5, r0
 802583c:	0710      	lsls	r0, r2, #28
 802583e:	460c      	mov	r4, r1
 8025840:	d458      	bmi.n	80258f4 <__sflush_r+0xc0>
 8025842:	684b      	ldr	r3, [r1, #4]
 8025844:	2b00      	cmp	r3, #0
 8025846:	dc05      	bgt.n	8025854 <__sflush_r+0x20>
 8025848:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802584a:	2b00      	cmp	r3, #0
 802584c:	dc02      	bgt.n	8025854 <__sflush_r+0x20>
 802584e:	2000      	movs	r0, #0
 8025850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025856:	2e00      	cmp	r6, #0
 8025858:	d0f9      	beq.n	802584e <__sflush_r+0x1a>
 802585a:	2300      	movs	r3, #0
 802585c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025860:	682f      	ldr	r7, [r5, #0]
 8025862:	602b      	str	r3, [r5, #0]
 8025864:	d032      	beq.n	80258cc <__sflush_r+0x98>
 8025866:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025868:	89a3      	ldrh	r3, [r4, #12]
 802586a:	075a      	lsls	r2, r3, #29
 802586c:	d505      	bpl.n	802587a <__sflush_r+0x46>
 802586e:	6863      	ldr	r3, [r4, #4]
 8025870:	1ac0      	subs	r0, r0, r3
 8025872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025874:	b10b      	cbz	r3, 802587a <__sflush_r+0x46>
 8025876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025878:	1ac0      	subs	r0, r0, r3
 802587a:	2300      	movs	r3, #0
 802587c:	4602      	mov	r2, r0
 802587e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025880:	6a21      	ldr	r1, [r4, #32]
 8025882:	4628      	mov	r0, r5
 8025884:	47b0      	blx	r6
 8025886:	1c43      	adds	r3, r0, #1
 8025888:	89a3      	ldrh	r3, [r4, #12]
 802588a:	d106      	bne.n	802589a <__sflush_r+0x66>
 802588c:	6829      	ldr	r1, [r5, #0]
 802588e:	291d      	cmp	r1, #29
 8025890:	d82c      	bhi.n	80258ec <__sflush_r+0xb8>
 8025892:	4a2a      	ldr	r2, [pc, #168]	; (802593c <__sflush_r+0x108>)
 8025894:	40ca      	lsrs	r2, r1
 8025896:	07d6      	lsls	r6, r2, #31
 8025898:	d528      	bpl.n	80258ec <__sflush_r+0xb8>
 802589a:	2200      	movs	r2, #0
 802589c:	6062      	str	r2, [r4, #4]
 802589e:	04d9      	lsls	r1, r3, #19
 80258a0:	6922      	ldr	r2, [r4, #16]
 80258a2:	6022      	str	r2, [r4, #0]
 80258a4:	d504      	bpl.n	80258b0 <__sflush_r+0x7c>
 80258a6:	1c42      	adds	r2, r0, #1
 80258a8:	d101      	bne.n	80258ae <__sflush_r+0x7a>
 80258aa:	682b      	ldr	r3, [r5, #0]
 80258ac:	b903      	cbnz	r3, 80258b0 <__sflush_r+0x7c>
 80258ae:	6560      	str	r0, [r4, #84]	; 0x54
 80258b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80258b2:	602f      	str	r7, [r5, #0]
 80258b4:	2900      	cmp	r1, #0
 80258b6:	d0ca      	beq.n	802584e <__sflush_r+0x1a>
 80258b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80258bc:	4299      	cmp	r1, r3
 80258be:	d002      	beq.n	80258c6 <__sflush_r+0x92>
 80258c0:	4628      	mov	r0, r5
 80258c2:	f000 f9ef 	bl	8025ca4 <_free_r>
 80258c6:	2000      	movs	r0, #0
 80258c8:	6360      	str	r0, [r4, #52]	; 0x34
 80258ca:	e7c1      	b.n	8025850 <__sflush_r+0x1c>
 80258cc:	6a21      	ldr	r1, [r4, #32]
 80258ce:	2301      	movs	r3, #1
 80258d0:	4628      	mov	r0, r5
 80258d2:	47b0      	blx	r6
 80258d4:	1c41      	adds	r1, r0, #1
 80258d6:	d1c7      	bne.n	8025868 <__sflush_r+0x34>
 80258d8:	682b      	ldr	r3, [r5, #0]
 80258da:	2b00      	cmp	r3, #0
 80258dc:	d0c4      	beq.n	8025868 <__sflush_r+0x34>
 80258de:	2b1d      	cmp	r3, #29
 80258e0:	d001      	beq.n	80258e6 <__sflush_r+0xb2>
 80258e2:	2b16      	cmp	r3, #22
 80258e4:	d101      	bne.n	80258ea <__sflush_r+0xb6>
 80258e6:	602f      	str	r7, [r5, #0]
 80258e8:	e7b1      	b.n	802584e <__sflush_r+0x1a>
 80258ea:	89a3      	ldrh	r3, [r4, #12]
 80258ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80258f0:	81a3      	strh	r3, [r4, #12]
 80258f2:	e7ad      	b.n	8025850 <__sflush_r+0x1c>
 80258f4:	690f      	ldr	r7, [r1, #16]
 80258f6:	2f00      	cmp	r7, #0
 80258f8:	d0a9      	beq.n	802584e <__sflush_r+0x1a>
 80258fa:	0793      	lsls	r3, r2, #30
 80258fc:	680e      	ldr	r6, [r1, #0]
 80258fe:	bf08      	it	eq
 8025900:	694b      	ldreq	r3, [r1, #20]
 8025902:	600f      	str	r7, [r1, #0]
 8025904:	bf18      	it	ne
 8025906:	2300      	movne	r3, #0
 8025908:	eba6 0807 	sub.w	r8, r6, r7
 802590c:	608b      	str	r3, [r1, #8]
 802590e:	f1b8 0f00 	cmp.w	r8, #0
 8025912:	dd9c      	ble.n	802584e <__sflush_r+0x1a>
 8025914:	6a21      	ldr	r1, [r4, #32]
 8025916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025918:	4643      	mov	r3, r8
 802591a:	463a      	mov	r2, r7
 802591c:	4628      	mov	r0, r5
 802591e:	47b0      	blx	r6
 8025920:	2800      	cmp	r0, #0
 8025922:	dc06      	bgt.n	8025932 <__sflush_r+0xfe>
 8025924:	89a3      	ldrh	r3, [r4, #12]
 8025926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802592a:	81a3      	strh	r3, [r4, #12]
 802592c:	f04f 30ff 	mov.w	r0, #4294967295
 8025930:	e78e      	b.n	8025850 <__sflush_r+0x1c>
 8025932:	4407      	add	r7, r0
 8025934:	eba8 0800 	sub.w	r8, r8, r0
 8025938:	e7e9      	b.n	802590e <__sflush_r+0xda>
 802593a:	bf00      	nop
 802593c:	20400001 	.word	0x20400001

08025940 <_fflush_r>:
 8025940:	b538      	push	{r3, r4, r5, lr}
 8025942:	690b      	ldr	r3, [r1, #16]
 8025944:	4605      	mov	r5, r0
 8025946:	460c      	mov	r4, r1
 8025948:	b913      	cbnz	r3, 8025950 <_fflush_r+0x10>
 802594a:	2500      	movs	r5, #0
 802594c:	4628      	mov	r0, r5
 802594e:	bd38      	pop	{r3, r4, r5, pc}
 8025950:	b118      	cbz	r0, 802595a <_fflush_r+0x1a>
 8025952:	6983      	ldr	r3, [r0, #24]
 8025954:	b90b      	cbnz	r3, 802595a <_fflush_r+0x1a>
 8025956:	f000 f887 	bl	8025a68 <__sinit>
 802595a:	4b14      	ldr	r3, [pc, #80]	; (80259ac <_fflush_r+0x6c>)
 802595c:	429c      	cmp	r4, r3
 802595e:	d11b      	bne.n	8025998 <_fflush_r+0x58>
 8025960:	686c      	ldr	r4, [r5, #4]
 8025962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025966:	2b00      	cmp	r3, #0
 8025968:	d0ef      	beq.n	802594a <_fflush_r+0xa>
 802596a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802596c:	07d0      	lsls	r0, r2, #31
 802596e:	d404      	bmi.n	802597a <_fflush_r+0x3a>
 8025970:	0599      	lsls	r1, r3, #22
 8025972:	d402      	bmi.n	802597a <_fflush_r+0x3a>
 8025974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025976:	f000 f927 	bl	8025bc8 <__retarget_lock_acquire_recursive>
 802597a:	4628      	mov	r0, r5
 802597c:	4621      	mov	r1, r4
 802597e:	f7ff ff59 	bl	8025834 <__sflush_r>
 8025982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025984:	07da      	lsls	r2, r3, #31
 8025986:	4605      	mov	r5, r0
 8025988:	d4e0      	bmi.n	802594c <_fflush_r+0xc>
 802598a:	89a3      	ldrh	r3, [r4, #12]
 802598c:	059b      	lsls	r3, r3, #22
 802598e:	d4dd      	bmi.n	802594c <_fflush_r+0xc>
 8025990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025992:	f000 f91a 	bl	8025bca <__retarget_lock_release_recursive>
 8025996:	e7d9      	b.n	802594c <_fflush_r+0xc>
 8025998:	4b05      	ldr	r3, [pc, #20]	; (80259b0 <_fflush_r+0x70>)
 802599a:	429c      	cmp	r4, r3
 802599c:	d101      	bne.n	80259a2 <_fflush_r+0x62>
 802599e:	68ac      	ldr	r4, [r5, #8]
 80259a0:	e7df      	b.n	8025962 <_fflush_r+0x22>
 80259a2:	4b04      	ldr	r3, [pc, #16]	; (80259b4 <_fflush_r+0x74>)
 80259a4:	429c      	cmp	r4, r3
 80259a6:	bf08      	it	eq
 80259a8:	68ec      	ldreq	r4, [r5, #12]
 80259aa:	e7da      	b.n	8025962 <_fflush_r+0x22>
 80259ac:	08027298 	.word	0x08027298
 80259b0:	080272b8 	.word	0x080272b8
 80259b4:	08027278 	.word	0x08027278

080259b8 <std>:
 80259b8:	2300      	movs	r3, #0
 80259ba:	b510      	push	{r4, lr}
 80259bc:	4604      	mov	r4, r0
 80259be:	e9c0 3300 	strd	r3, r3, [r0]
 80259c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80259c6:	6083      	str	r3, [r0, #8]
 80259c8:	8181      	strh	r1, [r0, #12]
 80259ca:	6643      	str	r3, [r0, #100]	; 0x64
 80259cc:	81c2      	strh	r2, [r0, #14]
 80259ce:	6183      	str	r3, [r0, #24]
 80259d0:	4619      	mov	r1, r3
 80259d2:	2208      	movs	r2, #8
 80259d4:	305c      	adds	r0, #92	; 0x5c
 80259d6:	f7ff fd0b 	bl	80253f0 <memset>
 80259da:	4b05      	ldr	r3, [pc, #20]	; (80259f0 <std+0x38>)
 80259dc:	6263      	str	r3, [r4, #36]	; 0x24
 80259de:	4b05      	ldr	r3, [pc, #20]	; (80259f4 <std+0x3c>)
 80259e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80259e2:	4b05      	ldr	r3, [pc, #20]	; (80259f8 <std+0x40>)
 80259e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80259e6:	4b05      	ldr	r3, [pc, #20]	; (80259fc <std+0x44>)
 80259e8:	6224      	str	r4, [r4, #32]
 80259ea:	6323      	str	r3, [r4, #48]	; 0x30
 80259ec:	bd10      	pop	{r4, pc}
 80259ee:	bf00      	nop
 80259f0:	080266ad 	.word	0x080266ad
 80259f4:	080266cf 	.word	0x080266cf
 80259f8:	08026707 	.word	0x08026707
 80259fc:	0802672b 	.word	0x0802672b

08025a00 <_cleanup_r>:
 8025a00:	4901      	ldr	r1, [pc, #4]	; (8025a08 <_cleanup_r+0x8>)
 8025a02:	f000 b8c1 	b.w	8025b88 <_fwalk_reent>
 8025a06:	bf00      	nop
 8025a08:	08025941 	.word	0x08025941

08025a0c <__sfmoreglue>:
 8025a0c:	b570      	push	{r4, r5, r6, lr}
 8025a0e:	1e4a      	subs	r2, r1, #1
 8025a10:	2568      	movs	r5, #104	; 0x68
 8025a12:	4355      	muls	r5, r2
 8025a14:	460e      	mov	r6, r1
 8025a16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025a1a:	f000 f993 	bl	8025d44 <_malloc_r>
 8025a1e:	4604      	mov	r4, r0
 8025a20:	b140      	cbz	r0, 8025a34 <__sfmoreglue+0x28>
 8025a22:	2100      	movs	r1, #0
 8025a24:	e9c0 1600 	strd	r1, r6, [r0]
 8025a28:	300c      	adds	r0, #12
 8025a2a:	60a0      	str	r0, [r4, #8]
 8025a2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025a30:	f7ff fcde 	bl	80253f0 <memset>
 8025a34:	4620      	mov	r0, r4
 8025a36:	bd70      	pop	{r4, r5, r6, pc}

08025a38 <__sfp_lock_acquire>:
 8025a38:	4801      	ldr	r0, [pc, #4]	; (8025a40 <__sfp_lock_acquire+0x8>)
 8025a3a:	f000 b8c5 	b.w	8025bc8 <__retarget_lock_acquire_recursive>
 8025a3e:	bf00      	nop
 8025a40:	20000bfc 	.word	0x20000bfc

08025a44 <__sfp_lock_release>:
 8025a44:	4801      	ldr	r0, [pc, #4]	; (8025a4c <__sfp_lock_release+0x8>)
 8025a46:	f000 b8c0 	b.w	8025bca <__retarget_lock_release_recursive>
 8025a4a:	bf00      	nop
 8025a4c:	20000bfc 	.word	0x20000bfc

08025a50 <__sinit_lock_acquire>:
 8025a50:	4801      	ldr	r0, [pc, #4]	; (8025a58 <__sinit_lock_acquire+0x8>)
 8025a52:	f000 b8b9 	b.w	8025bc8 <__retarget_lock_acquire_recursive>
 8025a56:	bf00      	nop
 8025a58:	20000bf7 	.word	0x20000bf7

08025a5c <__sinit_lock_release>:
 8025a5c:	4801      	ldr	r0, [pc, #4]	; (8025a64 <__sinit_lock_release+0x8>)
 8025a5e:	f000 b8b4 	b.w	8025bca <__retarget_lock_release_recursive>
 8025a62:	bf00      	nop
 8025a64:	20000bf7 	.word	0x20000bf7

08025a68 <__sinit>:
 8025a68:	b510      	push	{r4, lr}
 8025a6a:	4604      	mov	r4, r0
 8025a6c:	f7ff fff0 	bl	8025a50 <__sinit_lock_acquire>
 8025a70:	69a3      	ldr	r3, [r4, #24]
 8025a72:	b11b      	cbz	r3, 8025a7c <__sinit+0x14>
 8025a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025a78:	f7ff bff0 	b.w	8025a5c <__sinit_lock_release>
 8025a7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025a80:	6523      	str	r3, [r4, #80]	; 0x50
 8025a82:	4b13      	ldr	r3, [pc, #76]	; (8025ad0 <__sinit+0x68>)
 8025a84:	4a13      	ldr	r2, [pc, #76]	; (8025ad4 <__sinit+0x6c>)
 8025a86:	681b      	ldr	r3, [r3, #0]
 8025a88:	62a2      	str	r2, [r4, #40]	; 0x28
 8025a8a:	42a3      	cmp	r3, r4
 8025a8c:	bf04      	itt	eq
 8025a8e:	2301      	moveq	r3, #1
 8025a90:	61a3      	streq	r3, [r4, #24]
 8025a92:	4620      	mov	r0, r4
 8025a94:	f000 f820 	bl	8025ad8 <__sfp>
 8025a98:	6060      	str	r0, [r4, #4]
 8025a9a:	4620      	mov	r0, r4
 8025a9c:	f000 f81c 	bl	8025ad8 <__sfp>
 8025aa0:	60a0      	str	r0, [r4, #8]
 8025aa2:	4620      	mov	r0, r4
 8025aa4:	f000 f818 	bl	8025ad8 <__sfp>
 8025aa8:	2200      	movs	r2, #0
 8025aaa:	60e0      	str	r0, [r4, #12]
 8025aac:	2104      	movs	r1, #4
 8025aae:	6860      	ldr	r0, [r4, #4]
 8025ab0:	f7ff ff82 	bl	80259b8 <std>
 8025ab4:	68a0      	ldr	r0, [r4, #8]
 8025ab6:	2201      	movs	r2, #1
 8025ab8:	2109      	movs	r1, #9
 8025aba:	f7ff ff7d 	bl	80259b8 <std>
 8025abe:	68e0      	ldr	r0, [r4, #12]
 8025ac0:	2202      	movs	r2, #2
 8025ac2:	2112      	movs	r1, #18
 8025ac4:	f7ff ff78 	bl	80259b8 <std>
 8025ac8:	2301      	movs	r3, #1
 8025aca:	61a3      	str	r3, [r4, #24]
 8025acc:	e7d2      	b.n	8025a74 <__sinit+0xc>
 8025ace:	bf00      	nop
 8025ad0:	080271c0 	.word	0x080271c0
 8025ad4:	08025a01 	.word	0x08025a01

08025ad8 <__sfp>:
 8025ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ada:	4607      	mov	r7, r0
 8025adc:	f7ff ffac 	bl	8025a38 <__sfp_lock_acquire>
 8025ae0:	4b1e      	ldr	r3, [pc, #120]	; (8025b5c <__sfp+0x84>)
 8025ae2:	681e      	ldr	r6, [r3, #0]
 8025ae4:	69b3      	ldr	r3, [r6, #24]
 8025ae6:	b913      	cbnz	r3, 8025aee <__sfp+0x16>
 8025ae8:	4630      	mov	r0, r6
 8025aea:	f7ff ffbd 	bl	8025a68 <__sinit>
 8025aee:	3648      	adds	r6, #72	; 0x48
 8025af0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025af4:	3b01      	subs	r3, #1
 8025af6:	d503      	bpl.n	8025b00 <__sfp+0x28>
 8025af8:	6833      	ldr	r3, [r6, #0]
 8025afa:	b30b      	cbz	r3, 8025b40 <__sfp+0x68>
 8025afc:	6836      	ldr	r6, [r6, #0]
 8025afe:	e7f7      	b.n	8025af0 <__sfp+0x18>
 8025b00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025b04:	b9d5      	cbnz	r5, 8025b3c <__sfp+0x64>
 8025b06:	4b16      	ldr	r3, [pc, #88]	; (8025b60 <__sfp+0x88>)
 8025b08:	60e3      	str	r3, [r4, #12]
 8025b0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025b0e:	6665      	str	r5, [r4, #100]	; 0x64
 8025b10:	f000 f859 	bl	8025bc6 <__retarget_lock_init_recursive>
 8025b14:	f7ff ff96 	bl	8025a44 <__sfp_lock_release>
 8025b18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025b1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025b20:	6025      	str	r5, [r4, #0]
 8025b22:	61a5      	str	r5, [r4, #24]
 8025b24:	2208      	movs	r2, #8
 8025b26:	4629      	mov	r1, r5
 8025b28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025b2c:	f7ff fc60 	bl	80253f0 <memset>
 8025b30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025b34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025b38:	4620      	mov	r0, r4
 8025b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025b3c:	3468      	adds	r4, #104	; 0x68
 8025b3e:	e7d9      	b.n	8025af4 <__sfp+0x1c>
 8025b40:	2104      	movs	r1, #4
 8025b42:	4638      	mov	r0, r7
 8025b44:	f7ff ff62 	bl	8025a0c <__sfmoreglue>
 8025b48:	4604      	mov	r4, r0
 8025b4a:	6030      	str	r0, [r6, #0]
 8025b4c:	2800      	cmp	r0, #0
 8025b4e:	d1d5      	bne.n	8025afc <__sfp+0x24>
 8025b50:	f7ff ff78 	bl	8025a44 <__sfp_lock_release>
 8025b54:	230c      	movs	r3, #12
 8025b56:	603b      	str	r3, [r7, #0]
 8025b58:	e7ee      	b.n	8025b38 <__sfp+0x60>
 8025b5a:	bf00      	nop
 8025b5c:	080271c0 	.word	0x080271c0
 8025b60:	ffff0001 	.word	0xffff0001

08025b64 <fiprintf>:
 8025b64:	b40e      	push	{r1, r2, r3}
 8025b66:	b503      	push	{r0, r1, lr}
 8025b68:	4601      	mov	r1, r0
 8025b6a:	ab03      	add	r3, sp, #12
 8025b6c:	4805      	ldr	r0, [pc, #20]	; (8025b84 <fiprintf+0x20>)
 8025b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8025b72:	6800      	ldr	r0, [r0, #0]
 8025b74:	9301      	str	r3, [sp, #4]
 8025b76:	f000 fac5 	bl	8026104 <_vfiprintf_r>
 8025b7a:	b002      	add	sp, #8
 8025b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025b80:	b003      	add	sp, #12
 8025b82:	4770      	bx	lr
 8025b84:	20000024 	.word	0x20000024

08025b88 <_fwalk_reent>:
 8025b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025b8c:	4606      	mov	r6, r0
 8025b8e:	4688      	mov	r8, r1
 8025b90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025b94:	2700      	movs	r7, #0
 8025b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8025b9e:	d505      	bpl.n	8025bac <_fwalk_reent+0x24>
 8025ba0:	6824      	ldr	r4, [r4, #0]
 8025ba2:	2c00      	cmp	r4, #0
 8025ba4:	d1f7      	bne.n	8025b96 <_fwalk_reent+0xe>
 8025ba6:	4638      	mov	r0, r7
 8025ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025bac:	89ab      	ldrh	r3, [r5, #12]
 8025bae:	2b01      	cmp	r3, #1
 8025bb0:	d907      	bls.n	8025bc2 <_fwalk_reent+0x3a>
 8025bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025bb6:	3301      	adds	r3, #1
 8025bb8:	d003      	beq.n	8025bc2 <_fwalk_reent+0x3a>
 8025bba:	4629      	mov	r1, r5
 8025bbc:	4630      	mov	r0, r6
 8025bbe:	47c0      	blx	r8
 8025bc0:	4307      	orrs	r7, r0
 8025bc2:	3568      	adds	r5, #104	; 0x68
 8025bc4:	e7e9      	b.n	8025b9a <_fwalk_reent+0x12>

08025bc6 <__retarget_lock_init_recursive>:
 8025bc6:	4770      	bx	lr

08025bc8 <__retarget_lock_acquire_recursive>:
 8025bc8:	4770      	bx	lr

08025bca <__retarget_lock_release_recursive>:
 8025bca:	4770      	bx	lr

08025bcc <__swhatbuf_r>:
 8025bcc:	b570      	push	{r4, r5, r6, lr}
 8025bce:	460e      	mov	r6, r1
 8025bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025bd4:	2900      	cmp	r1, #0
 8025bd6:	b096      	sub	sp, #88	; 0x58
 8025bd8:	4614      	mov	r4, r2
 8025bda:	461d      	mov	r5, r3
 8025bdc:	da07      	bge.n	8025bee <__swhatbuf_r+0x22>
 8025bde:	2300      	movs	r3, #0
 8025be0:	602b      	str	r3, [r5, #0]
 8025be2:	89b3      	ldrh	r3, [r6, #12]
 8025be4:	061a      	lsls	r2, r3, #24
 8025be6:	d410      	bmi.n	8025c0a <__swhatbuf_r+0x3e>
 8025be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025bec:	e00e      	b.n	8025c0c <__swhatbuf_r+0x40>
 8025bee:	466a      	mov	r2, sp
 8025bf0:	f000 fdca 	bl	8026788 <_fstat_r>
 8025bf4:	2800      	cmp	r0, #0
 8025bf6:	dbf2      	blt.n	8025bde <__swhatbuf_r+0x12>
 8025bf8:	9a01      	ldr	r2, [sp, #4]
 8025bfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025bfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025c02:	425a      	negs	r2, r3
 8025c04:	415a      	adcs	r2, r3
 8025c06:	602a      	str	r2, [r5, #0]
 8025c08:	e7ee      	b.n	8025be8 <__swhatbuf_r+0x1c>
 8025c0a:	2340      	movs	r3, #64	; 0x40
 8025c0c:	2000      	movs	r0, #0
 8025c0e:	6023      	str	r3, [r4, #0]
 8025c10:	b016      	add	sp, #88	; 0x58
 8025c12:	bd70      	pop	{r4, r5, r6, pc}

08025c14 <__smakebuf_r>:
 8025c14:	898b      	ldrh	r3, [r1, #12]
 8025c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025c18:	079d      	lsls	r5, r3, #30
 8025c1a:	4606      	mov	r6, r0
 8025c1c:	460c      	mov	r4, r1
 8025c1e:	d507      	bpl.n	8025c30 <__smakebuf_r+0x1c>
 8025c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025c24:	6023      	str	r3, [r4, #0]
 8025c26:	6123      	str	r3, [r4, #16]
 8025c28:	2301      	movs	r3, #1
 8025c2a:	6163      	str	r3, [r4, #20]
 8025c2c:	b002      	add	sp, #8
 8025c2e:	bd70      	pop	{r4, r5, r6, pc}
 8025c30:	ab01      	add	r3, sp, #4
 8025c32:	466a      	mov	r2, sp
 8025c34:	f7ff ffca 	bl	8025bcc <__swhatbuf_r>
 8025c38:	9900      	ldr	r1, [sp, #0]
 8025c3a:	4605      	mov	r5, r0
 8025c3c:	4630      	mov	r0, r6
 8025c3e:	f000 f881 	bl	8025d44 <_malloc_r>
 8025c42:	b948      	cbnz	r0, 8025c58 <__smakebuf_r+0x44>
 8025c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025c48:	059a      	lsls	r2, r3, #22
 8025c4a:	d4ef      	bmi.n	8025c2c <__smakebuf_r+0x18>
 8025c4c:	f023 0303 	bic.w	r3, r3, #3
 8025c50:	f043 0302 	orr.w	r3, r3, #2
 8025c54:	81a3      	strh	r3, [r4, #12]
 8025c56:	e7e3      	b.n	8025c20 <__smakebuf_r+0xc>
 8025c58:	4b0d      	ldr	r3, [pc, #52]	; (8025c90 <__smakebuf_r+0x7c>)
 8025c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8025c5c:	89a3      	ldrh	r3, [r4, #12]
 8025c5e:	6020      	str	r0, [r4, #0]
 8025c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025c64:	81a3      	strh	r3, [r4, #12]
 8025c66:	9b00      	ldr	r3, [sp, #0]
 8025c68:	6163      	str	r3, [r4, #20]
 8025c6a:	9b01      	ldr	r3, [sp, #4]
 8025c6c:	6120      	str	r0, [r4, #16]
 8025c6e:	b15b      	cbz	r3, 8025c88 <__smakebuf_r+0x74>
 8025c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025c74:	4630      	mov	r0, r6
 8025c76:	f000 fd99 	bl	80267ac <_isatty_r>
 8025c7a:	b128      	cbz	r0, 8025c88 <__smakebuf_r+0x74>
 8025c7c:	89a3      	ldrh	r3, [r4, #12]
 8025c7e:	f023 0303 	bic.w	r3, r3, #3
 8025c82:	f043 0301 	orr.w	r3, r3, #1
 8025c86:	81a3      	strh	r3, [r4, #12]
 8025c88:	89a0      	ldrh	r0, [r4, #12]
 8025c8a:	4305      	orrs	r5, r0
 8025c8c:	81a5      	strh	r5, [r4, #12]
 8025c8e:	e7cd      	b.n	8025c2c <__smakebuf_r+0x18>
 8025c90:	08025a01 	.word	0x08025a01

08025c94 <malloc>:
 8025c94:	4b02      	ldr	r3, [pc, #8]	; (8025ca0 <malloc+0xc>)
 8025c96:	4601      	mov	r1, r0
 8025c98:	6818      	ldr	r0, [r3, #0]
 8025c9a:	f000 b853 	b.w	8025d44 <_malloc_r>
 8025c9e:	bf00      	nop
 8025ca0:	20000024 	.word	0x20000024

08025ca4 <_free_r>:
 8025ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025ca6:	2900      	cmp	r1, #0
 8025ca8:	d048      	beq.n	8025d3c <_free_r+0x98>
 8025caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025cae:	9001      	str	r0, [sp, #4]
 8025cb0:	2b00      	cmp	r3, #0
 8025cb2:	f1a1 0404 	sub.w	r4, r1, #4
 8025cb6:	bfb8      	it	lt
 8025cb8:	18e4      	addlt	r4, r4, r3
 8025cba:	f000 fdb3 	bl	8026824 <__malloc_lock>
 8025cbe:	4a20      	ldr	r2, [pc, #128]	; (8025d40 <_free_r+0x9c>)
 8025cc0:	9801      	ldr	r0, [sp, #4]
 8025cc2:	6813      	ldr	r3, [r2, #0]
 8025cc4:	4615      	mov	r5, r2
 8025cc6:	b933      	cbnz	r3, 8025cd6 <_free_r+0x32>
 8025cc8:	6063      	str	r3, [r4, #4]
 8025cca:	6014      	str	r4, [r2, #0]
 8025ccc:	b003      	add	sp, #12
 8025cce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025cd2:	f000 bdad 	b.w	8026830 <__malloc_unlock>
 8025cd6:	42a3      	cmp	r3, r4
 8025cd8:	d90b      	bls.n	8025cf2 <_free_r+0x4e>
 8025cda:	6821      	ldr	r1, [r4, #0]
 8025cdc:	1862      	adds	r2, r4, r1
 8025cde:	4293      	cmp	r3, r2
 8025ce0:	bf04      	itt	eq
 8025ce2:	681a      	ldreq	r2, [r3, #0]
 8025ce4:	685b      	ldreq	r3, [r3, #4]
 8025ce6:	6063      	str	r3, [r4, #4]
 8025ce8:	bf04      	itt	eq
 8025cea:	1852      	addeq	r2, r2, r1
 8025cec:	6022      	streq	r2, [r4, #0]
 8025cee:	602c      	str	r4, [r5, #0]
 8025cf0:	e7ec      	b.n	8025ccc <_free_r+0x28>
 8025cf2:	461a      	mov	r2, r3
 8025cf4:	685b      	ldr	r3, [r3, #4]
 8025cf6:	b10b      	cbz	r3, 8025cfc <_free_r+0x58>
 8025cf8:	42a3      	cmp	r3, r4
 8025cfa:	d9fa      	bls.n	8025cf2 <_free_r+0x4e>
 8025cfc:	6811      	ldr	r1, [r2, #0]
 8025cfe:	1855      	adds	r5, r2, r1
 8025d00:	42a5      	cmp	r5, r4
 8025d02:	d10b      	bne.n	8025d1c <_free_r+0x78>
 8025d04:	6824      	ldr	r4, [r4, #0]
 8025d06:	4421      	add	r1, r4
 8025d08:	1854      	adds	r4, r2, r1
 8025d0a:	42a3      	cmp	r3, r4
 8025d0c:	6011      	str	r1, [r2, #0]
 8025d0e:	d1dd      	bne.n	8025ccc <_free_r+0x28>
 8025d10:	681c      	ldr	r4, [r3, #0]
 8025d12:	685b      	ldr	r3, [r3, #4]
 8025d14:	6053      	str	r3, [r2, #4]
 8025d16:	4421      	add	r1, r4
 8025d18:	6011      	str	r1, [r2, #0]
 8025d1a:	e7d7      	b.n	8025ccc <_free_r+0x28>
 8025d1c:	d902      	bls.n	8025d24 <_free_r+0x80>
 8025d1e:	230c      	movs	r3, #12
 8025d20:	6003      	str	r3, [r0, #0]
 8025d22:	e7d3      	b.n	8025ccc <_free_r+0x28>
 8025d24:	6825      	ldr	r5, [r4, #0]
 8025d26:	1961      	adds	r1, r4, r5
 8025d28:	428b      	cmp	r3, r1
 8025d2a:	bf04      	itt	eq
 8025d2c:	6819      	ldreq	r1, [r3, #0]
 8025d2e:	685b      	ldreq	r3, [r3, #4]
 8025d30:	6063      	str	r3, [r4, #4]
 8025d32:	bf04      	itt	eq
 8025d34:	1949      	addeq	r1, r1, r5
 8025d36:	6021      	streq	r1, [r4, #0]
 8025d38:	6054      	str	r4, [r2, #4]
 8025d3a:	e7c7      	b.n	8025ccc <_free_r+0x28>
 8025d3c:	b003      	add	sp, #12
 8025d3e:	bd30      	pop	{r4, r5, pc}
 8025d40:	200000bc 	.word	0x200000bc

08025d44 <_malloc_r>:
 8025d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d46:	1ccd      	adds	r5, r1, #3
 8025d48:	f025 0503 	bic.w	r5, r5, #3
 8025d4c:	3508      	adds	r5, #8
 8025d4e:	2d0c      	cmp	r5, #12
 8025d50:	bf38      	it	cc
 8025d52:	250c      	movcc	r5, #12
 8025d54:	2d00      	cmp	r5, #0
 8025d56:	4606      	mov	r6, r0
 8025d58:	db01      	blt.n	8025d5e <_malloc_r+0x1a>
 8025d5a:	42a9      	cmp	r1, r5
 8025d5c:	d903      	bls.n	8025d66 <_malloc_r+0x22>
 8025d5e:	230c      	movs	r3, #12
 8025d60:	6033      	str	r3, [r6, #0]
 8025d62:	2000      	movs	r0, #0
 8025d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d66:	f000 fd5d 	bl	8026824 <__malloc_lock>
 8025d6a:	4921      	ldr	r1, [pc, #132]	; (8025df0 <_malloc_r+0xac>)
 8025d6c:	680a      	ldr	r2, [r1, #0]
 8025d6e:	4614      	mov	r4, r2
 8025d70:	b99c      	cbnz	r4, 8025d9a <_malloc_r+0x56>
 8025d72:	4f20      	ldr	r7, [pc, #128]	; (8025df4 <_malloc_r+0xb0>)
 8025d74:	683b      	ldr	r3, [r7, #0]
 8025d76:	b923      	cbnz	r3, 8025d82 <_malloc_r+0x3e>
 8025d78:	4621      	mov	r1, r4
 8025d7a:	4630      	mov	r0, r6
 8025d7c:	f000 fc86 	bl	802668c <_sbrk_r>
 8025d80:	6038      	str	r0, [r7, #0]
 8025d82:	4629      	mov	r1, r5
 8025d84:	4630      	mov	r0, r6
 8025d86:	f000 fc81 	bl	802668c <_sbrk_r>
 8025d8a:	1c43      	adds	r3, r0, #1
 8025d8c:	d123      	bne.n	8025dd6 <_malloc_r+0x92>
 8025d8e:	230c      	movs	r3, #12
 8025d90:	6033      	str	r3, [r6, #0]
 8025d92:	4630      	mov	r0, r6
 8025d94:	f000 fd4c 	bl	8026830 <__malloc_unlock>
 8025d98:	e7e3      	b.n	8025d62 <_malloc_r+0x1e>
 8025d9a:	6823      	ldr	r3, [r4, #0]
 8025d9c:	1b5b      	subs	r3, r3, r5
 8025d9e:	d417      	bmi.n	8025dd0 <_malloc_r+0x8c>
 8025da0:	2b0b      	cmp	r3, #11
 8025da2:	d903      	bls.n	8025dac <_malloc_r+0x68>
 8025da4:	6023      	str	r3, [r4, #0]
 8025da6:	441c      	add	r4, r3
 8025da8:	6025      	str	r5, [r4, #0]
 8025daa:	e004      	b.n	8025db6 <_malloc_r+0x72>
 8025dac:	6863      	ldr	r3, [r4, #4]
 8025dae:	42a2      	cmp	r2, r4
 8025db0:	bf0c      	ite	eq
 8025db2:	600b      	streq	r3, [r1, #0]
 8025db4:	6053      	strne	r3, [r2, #4]
 8025db6:	4630      	mov	r0, r6
 8025db8:	f000 fd3a 	bl	8026830 <__malloc_unlock>
 8025dbc:	f104 000b 	add.w	r0, r4, #11
 8025dc0:	1d23      	adds	r3, r4, #4
 8025dc2:	f020 0007 	bic.w	r0, r0, #7
 8025dc6:	1ac2      	subs	r2, r0, r3
 8025dc8:	d0cc      	beq.n	8025d64 <_malloc_r+0x20>
 8025dca:	1a1b      	subs	r3, r3, r0
 8025dcc:	50a3      	str	r3, [r4, r2]
 8025dce:	e7c9      	b.n	8025d64 <_malloc_r+0x20>
 8025dd0:	4622      	mov	r2, r4
 8025dd2:	6864      	ldr	r4, [r4, #4]
 8025dd4:	e7cc      	b.n	8025d70 <_malloc_r+0x2c>
 8025dd6:	1cc4      	adds	r4, r0, #3
 8025dd8:	f024 0403 	bic.w	r4, r4, #3
 8025ddc:	42a0      	cmp	r0, r4
 8025dde:	d0e3      	beq.n	8025da8 <_malloc_r+0x64>
 8025de0:	1a21      	subs	r1, r4, r0
 8025de2:	4630      	mov	r0, r6
 8025de4:	f000 fc52 	bl	802668c <_sbrk_r>
 8025de8:	3001      	adds	r0, #1
 8025dea:	d1dd      	bne.n	8025da8 <_malloc_r+0x64>
 8025dec:	e7cf      	b.n	8025d8e <_malloc_r+0x4a>
 8025dee:	bf00      	nop
 8025df0:	200000bc 	.word	0x200000bc
 8025df4:	200000c0 	.word	0x200000c0

08025df8 <__ssputs_r>:
 8025df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025dfc:	688e      	ldr	r6, [r1, #8]
 8025dfe:	429e      	cmp	r6, r3
 8025e00:	4682      	mov	sl, r0
 8025e02:	460c      	mov	r4, r1
 8025e04:	4690      	mov	r8, r2
 8025e06:	461f      	mov	r7, r3
 8025e08:	d838      	bhi.n	8025e7c <__ssputs_r+0x84>
 8025e0a:	898a      	ldrh	r2, [r1, #12]
 8025e0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8025e10:	d032      	beq.n	8025e78 <__ssputs_r+0x80>
 8025e12:	6825      	ldr	r5, [r4, #0]
 8025e14:	6909      	ldr	r1, [r1, #16]
 8025e16:	eba5 0901 	sub.w	r9, r5, r1
 8025e1a:	6965      	ldr	r5, [r4, #20]
 8025e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025e24:	3301      	adds	r3, #1
 8025e26:	444b      	add	r3, r9
 8025e28:	106d      	asrs	r5, r5, #1
 8025e2a:	429d      	cmp	r5, r3
 8025e2c:	bf38      	it	cc
 8025e2e:	461d      	movcc	r5, r3
 8025e30:	0553      	lsls	r3, r2, #21
 8025e32:	d531      	bpl.n	8025e98 <__ssputs_r+0xa0>
 8025e34:	4629      	mov	r1, r5
 8025e36:	f7ff ff85 	bl	8025d44 <_malloc_r>
 8025e3a:	4606      	mov	r6, r0
 8025e3c:	b950      	cbnz	r0, 8025e54 <__ssputs_r+0x5c>
 8025e3e:	230c      	movs	r3, #12
 8025e40:	f8ca 3000 	str.w	r3, [sl]
 8025e44:	89a3      	ldrh	r3, [r4, #12]
 8025e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025e4a:	81a3      	strh	r3, [r4, #12]
 8025e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8025e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025e54:	6921      	ldr	r1, [r4, #16]
 8025e56:	464a      	mov	r2, r9
 8025e58:	f7ff fabc 	bl	80253d4 <memcpy>
 8025e5c:	89a3      	ldrh	r3, [r4, #12]
 8025e5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8025e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025e66:	81a3      	strh	r3, [r4, #12]
 8025e68:	6126      	str	r6, [r4, #16]
 8025e6a:	6165      	str	r5, [r4, #20]
 8025e6c:	444e      	add	r6, r9
 8025e6e:	eba5 0509 	sub.w	r5, r5, r9
 8025e72:	6026      	str	r6, [r4, #0]
 8025e74:	60a5      	str	r5, [r4, #8]
 8025e76:	463e      	mov	r6, r7
 8025e78:	42be      	cmp	r6, r7
 8025e7a:	d900      	bls.n	8025e7e <__ssputs_r+0x86>
 8025e7c:	463e      	mov	r6, r7
 8025e7e:	4632      	mov	r2, r6
 8025e80:	6820      	ldr	r0, [r4, #0]
 8025e82:	4641      	mov	r1, r8
 8025e84:	f000 fcb4 	bl	80267f0 <memmove>
 8025e88:	68a3      	ldr	r3, [r4, #8]
 8025e8a:	6822      	ldr	r2, [r4, #0]
 8025e8c:	1b9b      	subs	r3, r3, r6
 8025e8e:	4432      	add	r2, r6
 8025e90:	60a3      	str	r3, [r4, #8]
 8025e92:	6022      	str	r2, [r4, #0]
 8025e94:	2000      	movs	r0, #0
 8025e96:	e7db      	b.n	8025e50 <__ssputs_r+0x58>
 8025e98:	462a      	mov	r2, r5
 8025e9a:	f000 fccf 	bl	802683c <_realloc_r>
 8025e9e:	4606      	mov	r6, r0
 8025ea0:	2800      	cmp	r0, #0
 8025ea2:	d1e1      	bne.n	8025e68 <__ssputs_r+0x70>
 8025ea4:	6921      	ldr	r1, [r4, #16]
 8025ea6:	4650      	mov	r0, sl
 8025ea8:	f7ff fefc 	bl	8025ca4 <_free_r>
 8025eac:	e7c7      	b.n	8025e3e <__ssputs_r+0x46>
	...

08025eb0 <_svfiprintf_r>:
 8025eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025eb4:	4698      	mov	r8, r3
 8025eb6:	898b      	ldrh	r3, [r1, #12]
 8025eb8:	061b      	lsls	r3, r3, #24
 8025eba:	b09d      	sub	sp, #116	; 0x74
 8025ebc:	4607      	mov	r7, r0
 8025ebe:	460d      	mov	r5, r1
 8025ec0:	4614      	mov	r4, r2
 8025ec2:	d50e      	bpl.n	8025ee2 <_svfiprintf_r+0x32>
 8025ec4:	690b      	ldr	r3, [r1, #16]
 8025ec6:	b963      	cbnz	r3, 8025ee2 <_svfiprintf_r+0x32>
 8025ec8:	2140      	movs	r1, #64	; 0x40
 8025eca:	f7ff ff3b 	bl	8025d44 <_malloc_r>
 8025ece:	6028      	str	r0, [r5, #0]
 8025ed0:	6128      	str	r0, [r5, #16]
 8025ed2:	b920      	cbnz	r0, 8025ede <_svfiprintf_r+0x2e>
 8025ed4:	230c      	movs	r3, #12
 8025ed6:	603b      	str	r3, [r7, #0]
 8025ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8025edc:	e0d1      	b.n	8026082 <_svfiprintf_r+0x1d2>
 8025ede:	2340      	movs	r3, #64	; 0x40
 8025ee0:	616b      	str	r3, [r5, #20]
 8025ee2:	2300      	movs	r3, #0
 8025ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8025ee6:	2320      	movs	r3, #32
 8025ee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8025ef0:	2330      	movs	r3, #48	; 0x30
 8025ef2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802609c <_svfiprintf_r+0x1ec>
 8025ef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025efa:	f04f 0901 	mov.w	r9, #1
 8025efe:	4623      	mov	r3, r4
 8025f00:	469a      	mov	sl, r3
 8025f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025f06:	b10a      	cbz	r2, 8025f0c <_svfiprintf_r+0x5c>
 8025f08:	2a25      	cmp	r2, #37	; 0x25
 8025f0a:	d1f9      	bne.n	8025f00 <_svfiprintf_r+0x50>
 8025f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8025f10:	d00b      	beq.n	8025f2a <_svfiprintf_r+0x7a>
 8025f12:	465b      	mov	r3, fp
 8025f14:	4622      	mov	r2, r4
 8025f16:	4629      	mov	r1, r5
 8025f18:	4638      	mov	r0, r7
 8025f1a:	f7ff ff6d 	bl	8025df8 <__ssputs_r>
 8025f1e:	3001      	adds	r0, #1
 8025f20:	f000 80aa 	beq.w	8026078 <_svfiprintf_r+0x1c8>
 8025f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025f26:	445a      	add	r2, fp
 8025f28:	9209      	str	r2, [sp, #36]	; 0x24
 8025f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8025f2e:	2b00      	cmp	r3, #0
 8025f30:	f000 80a2 	beq.w	8026078 <_svfiprintf_r+0x1c8>
 8025f34:	2300      	movs	r3, #0
 8025f36:	f04f 32ff 	mov.w	r2, #4294967295
 8025f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025f3e:	f10a 0a01 	add.w	sl, sl, #1
 8025f42:	9304      	str	r3, [sp, #16]
 8025f44:	9307      	str	r3, [sp, #28]
 8025f46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8025f4c:	4654      	mov	r4, sl
 8025f4e:	2205      	movs	r2, #5
 8025f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025f54:	4851      	ldr	r0, [pc, #324]	; (802609c <_svfiprintf_r+0x1ec>)
 8025f56:	f7fa f943 	bl	80201e0 <memchr>
 8025f5a:	9a04      	ldr	r2, [sp, #16]
 8025f5c:	b9d8      	cbnz	r0, 8025f96 <_svfiprintf_r+0xe6>
 8025f5e:	06d0      	lsls	r0, r2, #27
 8025f60:	bf44      	itt	mi
 8025f62:	2320      	movmi	r3, #32
 8025f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025f68:	0711      	lsls	r1, r2, #28
 8025f6a:	bf44      	itt	mi
 8025f6c:	232b      	movmi	r3, #43	; 0x2b
 8025f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025f72:	f89a 3000 	ldrb.w	r3, [sl]
 8025f76:	2b2a      	cmp	r3, #42	; 0x2a
 8025f78:	d015      	beq.n	8025fa6 <_svfiprintf_r+0xf6>
 8025f7a:	9a07      	ldr	r2, [sp, #28]
 8025f7c:	4654      	mov	r4, sl
 8025f7e:	2000      	movs	r0, #0
 8025f80:	f04f 0c0a 	mov.w	ip, #10
 8025f84:	4621      	mov	r1, r4
 8025f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025f8a:	3b30      	subs	r3, #48	; 0x30
 8025f8c:	2b09      	cmp	r3, #9
 8025f8e:	d94e      	bls.n	802602e <_svfiprintf_r+0x17e>
 8025f90:	b1b0      	cbz	r0, 8025fc0 <_svfiprintf_r+0x110>
 8025f92:	9207      	str	r2, [sp, #28]
 8025f94:	e014      	b.n	8025fc0 <_svfiprintf_r+0x110>
 8025f96:	eba0 0308 	sub.w	r3, r0, r8
 8025f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8025f9e:	4313      	orrs	r3, r2
 8025fa0:	9304      	str	r3, [sp, #16]
 8025fa2:	46a2      	mov	sl, r4
 8025fa4:	e7d2      	b.n	8025f4c <_svfiprintf_r+0x9c>
 8025fa6:	9b03      	ldr	r3, [sp, #12]
 8025fa8:	1d19      	adds	r1, r3, #4
 8025faa:	681b      	ldr	r3, [r3, #0]
 8025fac:	9103      	str	r1, [sp, #12]
 8025fae:	2b00      	cmp	r3, #0
 8025fb0:	bfbb      	ittet	lt
 8025fb2:	425b      	neglt	r3, r3
 8025fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8025fb8:	9307      	strge	r3, [sp, #28]
 8025fba:	9307      	strlt	r3, [sp, #28]
 8025fbc:	bfb8      	it	lt
 8025fbe:	9204      	strlt	r2, [sp, #16]
 8025fc0:	7823      	ldrb	r3, [r4, #0]
 8025fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8025fc4:	d10c      	bne.n	8025fe0 <_svfiprintf_r+0x130>
 8025fc6:	7863      	ldrb	r3, [r4, #1]
 8025fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8025fca:	d135      	bne.n	8026038 <_svfiprintf_r+0x188>
 8025fcc:	9b03      	ldr	r3, [sp, #12]
 8025fce:	1d1a      	adds	r2, r3, #4
 8025fd0:	681b      	ldr	r3, [r3, #0]
 8025fd2:	9203      	str	r2, [sp, #12]
 8025fd4:	2b00      	cmp	r3, #0
 8025fd6:	bfb8      	it	lt
 8025fd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8025fdc:	3402      	adds	r4, #2
 8025fde:	9305      	str	r3, [sp, #20]
 8025fe0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80260ac <_svfiprintf_r+0x1fc>
 8025fe4:	7821      	ldrb	r1, [r4, #0]
 8025fe6:	2203      	movs	r2, #3
 8025fe8:	4650      	mov	r0, sl
 8025fea:	f7fa f8f9 	bl	80201e0 <memchr>
 8025fee:	b140      	cbz	r0, 8026002 <_svfiprintf_r+0x152>
 8025ff0:	2340      	movs	r3, #64	; 0x40
 8025ff2:	eba0 000a 	sub.w	r0, r0, sl
 8025ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8025ffa:	9b04      	ldr	r3, [sp, #16]
 8025ffc:	4303      	orrs	r3, r0
 8025ffe:	3401      	adds	r4, #1
 8026000:	9304      	str	r3, [sp, #16]
 8026002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026006:	4826      	ldr	r0, [pc, #152]	; (80260a0 <_svfiprintf_r+0x1f0>)
 8026008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802600c:	2206      	movs	r2, #6
 802600e:	f7fa f8e7 	bl	80201e0 <memchr>
 8026012:	2800      	cmp	r0, #0
 8026014:	d038      	beq.n	8026088 <_svfiprintf_r+0x1d8>
 8026016:	4b23      	ldr	r3, [pc, #140]	; (80260a4 <_svfiprintf_r+0x1f4>)
 8026018:	bb1b      	cbnz	r3, 8026062 <_svfiprintf_r+0x1b2>
 802601a:	9b03      	ldr	r3, [sp, #12]
 802601c:	3307      	adds	r3, #7
 802601e:	f023 0307 	bic.w	r3, r3, #7
 8026022:	3308      	adds	r3, #8
 8026024:	9303      	str	r3, [sp, #12]
 8026026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026028:	4433      	add	r3, r6
 802602a:	9309      	str	r3, [sp, #36]	; 0x24
 802602c:	e767      	b.n	8025efe <_svfiprintf_r+0x4e>
 802602e:	fb0c 3202 	mla	r2, ip, r2, r3
 8026032:	460c      	mov	r4, r1
 8026034:	2001      	movs	r0, #1
 8026036:	e7a5      	b.n	8025f84 <_svfiprintf_r+0xd4>
 8026038:	2300      	movs	r3, #0
 802603a:	3401      	adds	r4, #1
 802603c:	9305      	str	r3, [sp, #20]
 802603e:	4619      	mov	r1, r3
 8026040:	f04f 0c0a 	mov.w	ip, #10
 8026044:	4620      	mov	r0, r4
 8026046:	f810 2b01 	ldrb.w	r2, [r0], #1
 802604a:	3a30      	subs	r2, #48	; 0x30
 802604c:	2a09      	cmp	r2, #9
 802604e:	d903      	bls.n	8026058 <_svfiprintf_r+0x1a8>
 8026050:	2b00      	cmp	r3, #0
 8026052:	d0c5      	beq.n	8025fe0 <_svfiprintf_r+0x130>
 8026054:	9105      	str	r1, [sp, #20]
 8026056:	e7c3      	b.n	8025fe0 <_svfiprintf_r+0x130>
 8026058:	fb0c 2101 	mla	r1, ip, r1, r2
 802605c:	4604      	mov	r4, r0
 802605e:	2301      	movs	r3, #1
 8026060:	e7f0      	b.n	8026044 <_svfiprintf_r+0x194>
 8026062:	ab03      	add	r3, sp, #12
 8026064:	9300      	str	r3, [sp, #0]
 8026066:	462a      	mov	r2, r5
 8026068:	4b0f      	ldr	r3, [pc, #60]	; (80260a8 <_svfiprintf_r+0x1f8>)
 802606a:	a904      	add	r1, sp, #16
 802606c:	4638      	mov	r0, r7
 802606e:	f3af 8000 	nop.w
 8026072:	1c42      	adds	r2, r0, #1
 8026074:	4606      	mov	r6, r0
 8026076:	d1d6      	bne.n	8026026 <_svfiprintf_r+0x176>
 8026078:	89ab      	ldrh	r3, [r5, #12]
 802607a:	065b      	lsls	r3, r3, #25
 802607c:	f53f af2c 	bmi.w	8025ed8 <_svfiprintf_r+0x28>
 8026080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026082:	b01d      	add	sp, #116	; 0x74
 8026084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026088:	ab03      	add	r3, sp, #12
 802608a:	9300      	str	r3, [sp, #0]
 802608c:	462a      	mov	r2, r5
 802608e:	4b06      	ldr	r3, [pc, #24]	; (80260a8 <_svfiprintf_r+0x1f8>)
 8026090:	a904      	add	r1, sp, #16
 8026092:	4638      	mov	r0, r7
 8026094:	f000 f9d4 	bl	8026440 <_printf_i>
 8026098:	e7eb      	b.n	8026072 <_svfiprintf_r+0x1c2>
 802609a:	bf00      	nop
 802609c:	080272d8 	.word	0x080272d8
 80260a0:	080272e2 	.word	0x080272e2
 80260a4:	00000000 	.word	0x00000000
 80260a8:	08025df9 	.word	0x08025df9
 80260ac:	080272de 	.word	0x080272de

080260b0 <__sfputc_r>:
 80260b0:	6893      	ldr	r3, [r2, #8]
 80260b2:	3b01      	subs	r3, #1
 80260b4:	2b00      	cmp	r3, #0
 80260b6:	b410      	push	{r4}
 80260b8:	6093      	str	r3, [r2, #8]
 80260ba:	da08      	bge.n	80260ce <__sfputc_r+0x1e>
 80260bc:	6994      	ldr	r4, [r2, #24]
 80260be:	42a3      	cmp	r3, r4
 80260c0:	db01      	blt.n	80260c6 <__sfputc_r+0x16>
 80260c2:	290a      	cmp	r1, #10
 80260c4:	d103      	bne.n	80260ce <__sfputc_r+0x1e>
 80260c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80260ca:	f7ff bad5 	b.w	8025678 <__swbuf_r>
 80260ce:	6813      	ldr	r3, [r2, #0]
 80260d0:	1c58      	adds	r0, r3, #1
 80260d2:	6010      	str	r0, [r2, #0]
 80260d4:	7019      	strb	r1, [r3, #0]
 80260d6:	4608      	mov	r0, r1
 80260d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80260dc:	4770      	bx	lr

080260de <__sfputs_r>:
 80260de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80260e0:	4606      	mov	r6, r0
 80260e2:	460f      	mov	r7, r1
 80260e4:	4614      	mov	r4, r2
 80260e6:	18d5      	adds	r5, r2, r3
 80260e8:	42ac      	cmp	r4, r5
 80260ea:	d101      	bne.n	80260f0 <__sfputs_r+0x12>
 80260ec:	2000      	movs	r0, #0
 80260ee:	e007      	b.n	8026100 <__sfputs_r+0x22>
 80260f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80260f4:	463a      	mov	r2, r7
 80260f6:	4630      	mov	r0, r6
 80260f8:	f7ff ffda 	bl	80260b0 <__sfputc_r>
 80260fc:	1c43      	adds	r3, r0, #1
 80260fe:	d1f3      	bne.n	80260e8 <__sfputs_r+0xa>
 8026100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026104 <_vfiprintf_r>:
 8026104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026108:	460d      	mov	r5, r1
 802610a:	b09d      	sub	sp, #116	; 0x74
 802610c:	4614      	mov	r4, r2
 802610e:	4698      	mov	r8, r3
 8026110:	4606      	mov	r6, r0
 8026112:	b118      	cbz	r0, 802611c <_vfiprintf_r+0x18>
 8026114:	6983      	ldr	r3, [r0, #24]
 8026116:	b90b      	cbnz	r3, 802611c <_vfiprintf_r+0x18>
 8026118:	f7ff fca6 	bl	8025a68 <__sinit>
 802611c:	4b89      	ldr	r3, [pc, #548]	; (8026344 <_vfiprintf_r+0x240>)
 802611e:	429d      	cmp	r5, r3
 8026120:	d11b      	bne.n	802615a <_vfiprintf_r+0x56>
 8026122:	6875      	ldr	r5, [r6, #4]
 8026124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026126:	07d9      	lsls	r1, r3, #31
 8026128:	d405      	bmi.n	8026136 <_vfiprintf_r+0x32>
 802612a:	89ab      	ldrh	r3, [r5, #12]
 802612c:	059a      	lsls	r2, r3, #22
 802612e:	d402      	bmi.n	8026136 <_vfiprintf_r+0x32>
 8026130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026132:	f7ff fd49 	bl	8025bc8 <__retarget_lock_acquire_recursive>
 8026136:	89ab      	ldrh	r3, [r5, #12]
 8026138:	071b      	lsls	r3, r3, #28
 802613a:	d501      	bpl.n	8026140 <_vfiprintf_r+0x3c>
 802613c:	692b      	ldr	r3, [r5, #16]
 802613e:	b9eb      	cbnz	r3, 802617c <_vfiprintf_r+0x78>
 8026140:	4629      	mov	r1, r5
 8026142:	4630      	mov	r0, r6
 8026144:	f7ff faea 	bl	802571c <__swsetup_r>
 8026148:	b1c0      	cbz	r0, 802617c <_vfiprintf_r+0x78>
 802614a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802614c:	07dc      	lsls	r4, r3, #31
 802614e:	d50e      	bpl.n	802616e <_vfiprintf_r+0x6a>
 8026150:	f04f 30ff 	mov.w	r0, #4294967295
 8026154:	b01d      	add	sp, #116	; 0x74
 8026156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802615a:	4b7b      	ldr	r3, [pc, #492]	; (8026348 <_vfiprintf_r+0x244>)
 802615c:	429d      	cmp	r5, r3
 802615e:	d101      	bne.n	8026164 <_vfiprintf_r+0x60>
 8026160:	68b5      	ldr	r5, [r6, #8]
 8026162:	e7df      	b.n	8026124 <_vfiprintf_r+0x20>
 8026164:	4b79      	ldr	r3, [pc, #484]	; (802634c <_vfiprintf_r+0x248>)
 8026166:	429d      	cmp	r5, r3
 8026168:	bf08      	it	eq
 802616a:	68f5      	ldreq	r5, [r6, #12]
 802616c:	e7da      	b.n	8026124 <_vfiprintf_r+0x20>
 802616e:	89ab      	ldrh	r3, [r5, #12]
 8026170:	0598      	lsls	r0, r3, #22
 8026172:	d4ed      	bmi.n	8026150 <_vfiprintf_r+0x4c>
 8026174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026176:	f7ff fd28 	bl	8025bca <__retarget_lock_release_recursive>
 802617a:	e7e9      	b.n	8026150 <_vfiprintf_r+0x4c>
 802617c:	2300      	movs	r3, #0
 802617e:	9309      	str	r3, [sp, #36]	; 0x24
 8026180:	2320      	movs	r3, #32
 8026182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026186:	f8cd 800c 	str.w	r8, [sp, #12]
 802618a:	2330      	movs	r3, #48	; 0x30
 802618c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026350 <_vfiprintf_r+0x24c>
 8026190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026194:	f04f 0901 	mov.w	r9, #1
 8026198:	4623      	mov	r3, r4
 802619a:	469a      	mov	sl, r3
 802619c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80261a0:	b10a      	cbz	r2, 80261a6 <_vfiprintf_r+0xa2>
 80261a2:	2a25      	cmp	r2, #37	; 0x25
 80261a4:	d1f9      	bne.n	802619a <_vfiprintf_r+0x96>
 80261a6:	ebba 0b04 	subs.w	fp, sl, r4
 80261aa:	d00b      	beq.n	80261c4 <_vfiprintf_r+0xc0>
 80261ac:	465b      	mov	r3, fp
 80261ae:	4622      	mov	r2, r4
 80261b0:	4629      	mov	r1, r5
 80261b2:	4630      	mov	r0, r6
 80261b4:	f7ff ff93 	bl	80260de <__sfputs_r>
 80261b8:	3001      	adds	r0, #1
 80261ba:	f000 80aa 	beq.w	8026312 <_vfiprintf_r+0x20e>
 80261be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80261c0:	445a      	add	r2, fp
 80261c2:	9209      	str	r2, [sp, #36]	; 0x24
 80261c4:	f89a 3000 	ldrb.w	r3, [sl]
 80261c8:	2b00      	cmp	r3, #0
 80261ca:	f000 80a2 	beq.w	8026312 <_vfiprintf_r+0x20e>
 80261ce:	2300      	movs	r3, #0
 80261d0:	f04f 32ff 	mov.w	r2, #4294967295
 80261d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80261d8:	f10a 0a01 	add.w	sl, sl, #1
 80261dc:	9304      	str	r3, [sp, #16]
 80261de:	9307      	str	r3, [sp, #28]
 80261e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80261e4:	931a      	str	r3, [sp, #104]	; 0x68
 80261e6:	4654      	mov	r4, sl
 80261e8:	2205      	movs	r2, #5
 80261ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80261ee:	4858      	ldr	r0, [pc, #352]	; (8026350 <_vfiprintf_r+0x24c>)
 80261f0:	f7f9 fff6 	bl	80201e0 <memchr>
 80261f4:	9a04      	ldr	r2, [sp, #16]
 80261f6:	b9d8      	cbnz	r0, 8026230 <_vfiprintf_r+0x12c>
 80261f8:	06d1      	lsls	r1, r2, #27
 80261fa:	bf44      	itt	mi
 80261fc:	2320      	movmi	r3, #32
 80261fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026202:	0713      	lsls	r3, r2, #28
 8026204:	bf44      	itt	mi
 8026206:	232b      	movmi	r3, #43	; 0x2b
 8026208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802620c:	f89a 3000 	ldrb.w	r3, [sl]
 8026210:	2b2a      	cmp	r3, #42	; 0x2a
 8026212:	d015      	beq.n	8026240 <_vfiprintf_r+0x13c>
 8026214:	9a07      	ldr	r2, [sp, #28]
 8026216:	4654      	mov	r4, sl
 8026218:	2000      	movs	r0, #0
 802621a:	f04f 0c0a 	mov.w	ip, #10
 802621e:	4621      	mov	r1, r4
 8026220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026224:	3b30      	subs	r3, #48	; 0x30
 8026226:	2b09      	cmp	r3, #9
 8026228:	d94e      	bls.n	80262c8 <_vfiprintf_r+0x1c4>
 802622a:	b1b0      	cbz	r0, 802625a <_vfiprintf_r+0x156>
 802622c:	9207      	str	r2, [sp, #28]
 802622e:	e014      	b.n	802625a <_vfiprintf_r+0x156>
 8026230:	eba0 0308 	sub.w	r3, r0, r8
 8026234:	fa09 f303 	lsl.w	r3, r9, r3
 8026238:	4313      	orrs	r3, r2
 802623a:	9304      	str	r3, [sp, #16]
 802623c:	46a2      	mov	sl, r4
 802623e:	e7d2      	b.n	80261e6 <_vfiprintf_r+0xe2>
 8026240:	9b03      	ldr	r3, [sp, #12]
 8026242:	1d19      	adds	r1, r3, #4
 8026244:	681b      	ldr	r3, [r3, #0]
 8026246:	9103      	str	r1, [sp, #12]
 8026248:	2b00      	cmp	r3, #0
 802624a:	bfbb      	ittet	lt
 802624c:	425b      	neglt	r3, r3
 802624e:	f042 0202 	orrlt.w	r2, r2, #2
 8026252:	9307      	strge	r3, [sp, #28]
 8026254:	9307      	strlt	r3, [sp, #28]
 8026256:	bfb8      	it	lt
 8026258:	9204      	strlt	r2, [sp, #16]
 802625a:	7823      	ldrb	r3, [r4, #0]
 802625c:	2b2e      	cmp	r3, #46	; 0x2e
 802625e:	d10c      	bne.n	802627a <_vfiprintf_r+0x176>
 8026260:	7863      	ldrb	r3, [r4, #1]
 8026262:	2b2a      	cmp	r3, #42	; 0x2a
 8026264:	d135      	bne.n	80262d2 <_vfiprintf_r+0x1ce>
 8026266:	9b03      	ldr	r3, [sp, #12]
 8026268:	1d1a      	adds	r2, r3, #4
 802626a:	681b      	ldr	r3, [r3, #0]
 802626c:	9203      	str	r2, [sp, #12]
 802626e:	2b00      	cmp	r3, #0
 8026270:	bfb8      	it	lt
 8026272:	f04f 33ff 	movlt.w	r3, #4294967295
 8026276:	3402      	adds	r4, #2
 8026278:	9305      	str	r3, [sp, #20]
 802627a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8026360 <_vfiprintf_r+0x25c>
 802627e:	7821      	ldrb	r1, [r4, #0]
 8026280:	2203      	movs	r2, #3
 8026282:	4650      	mov	r0, sl
 8026284:	f7f9 ffac 	bl	80201e0 <memchr>
 8026288:	b140      	cbz	r0, 802629c <_vfiprintf_r+0x198>
 802628a:	2340      	movs	r3, #64	; 0x40
 802628c:	eba0 000a 	sub.w	r0, r0, sl
 8026290:	fa03 f000 	lsl.w	r0, r3, r0
 8026294:	9b04      	ldr	r3, [sp, #16]
 8026296:	4303      	orrs	r3, r0
 8026298:	3401      	adds	r4, #1
 802629a:	9304      	str	r3, [sp, #16]
 802629c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80262a0:	482c      	ldr	r0, [pc, #176]	; (8026354 <_vfiprintf_r+0x250>)
 80262a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80262a6:	2206      	movs	r2, #6
 80262a8:	f7f9 ff9a 	bl	80201e0 <memchr>
 80262ac:	2800      	cmp	r0, #0
 80262ae:	d03f      	beq.n	8026330 <_vfiprintf_r+0x22c>
 80262b0:	4b29      	ldr	r3, [pc, #164]	; (8026358 <_vfiprintf_r+0x254>)
 80262b2:	bb1b      	cbnz	r3, 80262fc <_vfiprintf_r+0x1f8>
 80262b4:	9b03      	ldr	r3, [sp, #12]
 80262b6:	3307      	adds	r3, #7
 80262b8:	f023 0307 	bic.w	r3, r3, #7
 80262bc:	3308      	adds	r3, #8
 80262be:	9303      	str	r3, [sp, #12]
 80262c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262c2:	443b      	add	r3, r7
 80262c4:	9309      	str	r3, [sp, #36]	; 0x24
 80262c6:	e767      	b.n	8026198 <_vfiprintf_r+0x94>
 80262c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80262cc:	460c      	mov	r4, r1
 80262ce:	2001      	movs	r0, #1
 80262d0:	e7a5      	b.n	802621e <_vfiprintf_r+0x11a>
 80262d2:	2300      	movs	r3, #0
 80262d4:	3401      	adds	r4, #1
 80262d6:	9305      	str	r3, [sp, #20]
 80262d8:	4619      	mov	r1, r3
 80262da:	f04f 0c0a 	mov.w	ip, #10
 80262de:	4620      	mov	r0, r4
 80262e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80262e4:	3a30      	subs	r2, #48	; 0x30
 80262e6:	2a09      	cmp	r2, #9
 80262e8:	d903      	bls.n	80262f2 <_vfiprintf_r+0x1ee>
 80262ea:	2b00      	cmp	r3, #0
 80262ec:	d0c5      	beq.n	802627a <_vfiprintf_r+0x176>
 80262ee:	9105      	str	r1, [sp, #20]
 80262f0:	e7c3      	b.n	802627a <_vfiprintf_r+0x176>
 80262f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80262f6:	4604      	mov	r4, r0
 80262f8:	2301      	movs	r3, #1
 80262fa:	e7f0      	b.n	80262de <_vfiprintf_r+0x1da>
 80262fc:	ab03      	add	r3, sp, #12
 80262fe:	9300      	str	r3, [sp, #0]
 8026300:	462a      	mov	r2, r5
 8026302:	4b16      	ldr	r3, [pc, #88]	; (802635c <_vfiprintf_r+0x258>)
 8026304:	a904      	add	r1, sp, #16
 8026306:	4630      	mov	r0, r6
 8026308:	f3af 8000 	nop.w
 802630c:	4607      	mov	r7, r0
 802630e:	1c78      	adds	r0, r7, #1
 8026310:	d1d6      	bne.n	80262c0 <_vfiprintf_r+0x1bc>
 8026312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026314:	07d9      	lsls	r1, r3, #31
 8026316:	d405      	bmi.n	8026324 <_vfiprintf_r+0x220>
 8026318:	89ab      	ldrh	r3, [r5, #12]
 802631a:	059a      	lsls	r2, r3, #22
 802631c:	d402      	bmi.n	8026324 <_vfiprintf_r+0x220>
 802631e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026320:	f7ff fc53 	bl	8025bca <__retarget_lock_release_recursive>
 8026324:	89ab      	ldrh	r3, [r5, #12]
 8026326:	065b      	lsls	r3, r3, #25
 8026328:	f53f af12 	bmi.w	8026150 <_vfiprintf_r+0x4c>
 802632c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802632e:	e711      	b.n	8026154 <_vfiprintf_r+0x50>
 8026330:	ab03      	add	r3, sp, #12
 8026332:	9300      	str	r3, [sp, #0]
 8026334:	462a      	mov	r2, r5
 8026336:	4b09      	ldr	r3, [pc, #36]	; (802635c <_vfiprintf_r+0x258>)
 8026338:	a904      	add	r1, sp, #16
 802633a:	4630      	mov	r0, r6
 802633c:	f000 f880 	bl	8026440 <_printf_i>
 8026340:	e7e4      	b.n	802630c <_vfiprintf_r+0x208>
 8026342:	bf00      	nop
 8026344:	08027298 	.word	0x08027298
 8026348:	080272b8 	.word	0x080272b8
 802634c:	08027278 	.word	0x08027278
 8026350:	080272d8 	.word	0x080272d8
 8026354:	080272e2 	.word	0x080272e2
 8026358:	00000000 	.word	0x00000000
 802635c:	080260df 	.word	0x080260df
 8026360:	080272de 	.word	0x080272de

08026364 <_printf_common>:
 8026364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026368:	4616      	mov	r6, r2
 802636a:	4699      	mov	r9, r3
 802636c:	688a      	ldr	r2, [r1, #8]
 802636e:	690b      	ldr	r3, [r1, #16]
 8026370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026374:	4293      	cmp	r3, r2
 8026376:	bfb8      	it	lt
 8026378:	4613      	movlt	r3, r2
 802637a:	6033      	str	r3, [r6, #0]
 802637c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026380:	4607      	mov	r7, r0
 8026382:	460c      	mov	r4, r1
 8026384:	b10a      	cbz	r2, 802638a <_printf_common+0x26>
 8026386:	3301      	adds	r3, #1
 8026388:	6033      	str	r3, [r6, #0]
 802638a:	6823      	ldr	r3, [r4, #0]
 802638c:	0699      	lsls	r1, r3, #26
 802638e:	bf42      	ittt	mi
 8026390:	6833      	ldrmi	r3, [r6, #0]
 8026392:	3302      	addmi	r3, #2
 8026394:	6033      	strmi	r3, [r6, #0]
 8026396:	6825      	ldr	r5, [r4, #0]
 8026398:	f015 0506 	ands.w	r5, r5, #6
 802639c:	d106      	bne.n	80263ac <_printf_common+0x48>
 802639e:	f104 0a19 	add.w	sl, r4, #25
 80263a2:	68e3      	ldr	r3, [r4, #12]
 80263a4:	6832      	ldr	r2, [r6, #0]
 80263a6:	1a9b      	subs	r3, r3, r2
 80263a8:	42ab      	cmp	r3, r5
 80263aa:	dc26      	bgt.n	80263fa <_printf_common+0x96>
 80263ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80263b0:	1e13      	subs	r3, r2, #0
 80263b2:	6822      	ldr	r2, [r4, #0]
 80263b4:	bf18      	it	ne
 80263b6:	2301      	movne	r3, #1
 80263b8:	0692      	lsls	r2, r2, #26
 80263ba:	d42b      	bmi.n	8026414 <_printf_common+0xb0>
 80263bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80263c0:	4649      	mov	r1, r9
 80263c2:	4638      	mov	r0, r7
 80263c4:	47c0      	blx	r8
 80263c6:	3001      	adds	r0, #1
 80263c8:	d01e      	beq.n	8026408 <_printf_common+0xa4>
 80263ca:	6823      	ldr	r3, [r4, #0]
 80263cc:	68e5      	ldr	r5, [r4, #12]
 80263ce:	6832      	ldr	r2, [r6, #0]
 80263d0:	f003 0306 	and.w	r3, r3, #6
 80263d4:	2b04      	cmp	r3, #4
 80263d6:	bf08      	it	eq
 80263d8:	1aad      	subeq	r5, r5, r2
 80263da:	68a3      	ldr	r3, [r4, #8]
 80263dc:	6922      	ldr	r2, [r4, #16]
 80263de:	bf0c      	ite	eq
 80263e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80263e4:	2500      	movne	r5, #0
 80263e6:	4293      	cmp	r3, r2
 80263e8:	bfc4      	itt	gt
 80263ea:	1a9b      	subgt	r3, r3, r2
 80263ec:	18ed      	addgt	r5, r5, r3
 80263ee:	2600      	movs	r6, #0
 80263f0:	341a      	adds	r4, #26
 80263f2:	42b5      	cmp	r5, r6
 80263f4:	d11a      	bne.n	802642c <_printf_common+0xc8>
 80263f6:	2000      	movs	r0, #0
 80263f8:	e008      	b.n	802640c <_printf_common+0xa8>
 80263fa:	2301      	movs	r3, #1
 80263fc:	4652      	mov	r2, sl
 80263fe:	4649      	mov	r1, r9
 8026400:	4638      	mov	r0, r7
 8026402:	47c0      	blx	r8
 8026404:	3001      	adds	r0, #1
 8026406:	d103      	bne.n	8026410 <_printf_common+0xac>
 8026408:	f04f 30ff 	mov.w	r0, #4294967295
 802640c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026410:	3501      	adds	r5, #1
 8026412:	e7c6      	b.n	80263a2 <_printf_common+0x3e>
 8026414:	18e1      	adds	r1, r4, r3
 8026416:	1c5a      	adds	r2, r3, #1
 8026418:	2030      	movs	r0, #48	; 0x30
 802641a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802641e:	4422      	add	r2, r4
 8026420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026428:	3302      	adds	r3, #2
 802642a:	e7c7      	b.n	80263bc <_printf_common+0x58>
 802642c:	2301      	movs	r3, #1
 802642e:	4622      	mov	r2, r4
 8026430:	4649      	mov	r1, r9
 8026432:	4638      	mov	r0, r7
 8026434:	47c0      	blx	r8
 8026436:	3001      	adds	r0, #1
 8026438:	d0e6      	beq.n	8026408 <_printf_common+0xa4>
 802643a:	3601      	adds	r6, #1
 802643c:	e7d9      	b.n	80263f2 <_printf_common+0x8e>
	...

08026440 <_printf_i>:
 8026440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026444:	460c      	mov	r4, r1
 8026446:	4691      	mov	r9, r2
 8026448:	7e27      	ldrb	r7, [r4, #24]
 802644a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802644c:	2f78      	cmp	r7, #120	; 0x78
 802644e:	4680      	mov	r8, r0
 8026450:	469a      	mov	sl, r3
 8026452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026456:	d807      	bhi.n	8026468 <_printf_i+0x28>
 8026458:	2f62      	cmp	r7, #98	; 0x62
 802645a:	d80a      	bhi.n	8026472 <_printf_i+0x32>
 802645c:	2f00      	cmp	r7, #0
 802645e:	f000 80d8 	beq.w	8026612 <_printf_i+0x1d2>
 8026462:	2f58      	cmp	r7, #88	; 0x58
 8026464:	f000 80a3 	beq.w	80265ae <_printf_i+0x16e>
 8026468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802646c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026470:	e03a      	b.n	80264e8 <_printf_i+0xa8>
 8026472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026476:	2b15      	cmp	r3, #21
 8026478:	d8f6      	bhi.n	8026468 <_printf_i+0x28>
 802647a:	a001      	add	r0, pc, #4	; (adr r0, 8026480 <_printf_i+0x40>)
 802647c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8026480:	080264d9 	.word	0x080264d9
 8026484:	080264ed 	.word	0x080264ed
 8026488:	08026469 	.word	0x08026469
 802648c:	08026469 	.word	0x08026469
 8026490:	08026469 	.word	0x08026469
 8026494:	08026469 	.word	0x08026469
 8026498:	080264ed 	.word	0x080264ed
 802649c:	08026469 	.word	0x08026469
 80264a0:	08026469 	.word	0x08026469
 80264a4:	08026469 	.word	0x08026469
 80264a8:	08026469 	.word	0x08026469
 80264ac:	080265f9 	.word	0x080265f9
 80264b0:	0802651d 	.word	0x0802651d
 80264b4:	080265db 	.word	0x080265db
 80264b8:	08026469 	.word	0x08026469
 80264bc:	08026469 	.word	0x08026469
 80264c0:	0802661b 	.word	0x0802661b
 80264c4:	08026469 	.word	0x08026469
 80264c8:	0802651d 	.word	0x0802651d
 80264cc:	08026469 	.word	0x08026469
 80264d0:	08026469 	.word	0x08026469
 80264d4:	080265e3 	.word	0x080265e3
 80264d8:	680b      	ldr	r3, [r1, #0]
 80264da:	1d1a      	adds	r2, r3, #4
 80264dc:	681b      	ldr	r3, [r3, #0]
 80264de:	600a      	str	r2, [r1, #0]
 80264e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80264e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80264e8:	2301      	movs	r3, #1
 80264ea:	e0a3      	b.n	8026634 <_printf_i+0x1f4>
 80264ec:	6825      	ldr	r5, [r4, #0]
 80264ee:	6808      	ldr	r0, [r1, #0]
 80264f0:	062e      	lsls	r6, r5, #24
 80264f2:	f100 0304 	add.w	r3, r0, #4
 80264f6:	d50a      	bpl.n	802650e <_printf_i+0xce>
 80264f8:	6805      	ldr	r5, [r0, #0]
 80264fa:	600b      	str	r3, [r1, #0]
 80264fc:	2d00      	cmp	r5, #0
 80264fe:	da03      	bge.n	8026508 <_printf_i+0xc8>
 8026500:	232d      	movs	r3, #45	; 0x2d
 8026502:	426d      	negs	r5, r5
 8026504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026508:	485e      	ldr	r0, [pc, #376]	; (8026684 <_printf_i+0x244>)
 802650a:	230a      	movs	r3, #10
 802650c:	e019      	b.n	8026542 <_printf_i+0x102>
 802650e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8026512:	6805      	ldr	r5, [r0, #0]
 8026514:	600b      	str	r3, [r1, #0]
 8026516:	bf18      	it	ne
 8026518:	b22d      	sxthne	r5, r5
 802651a:	e7ef      	b.n	80264fc <_printf_i+0xbc>
 802651c:	680b      	ldr	r3, [r1, #0]
 802651e:	6825      	ldr	r5, [r4, #0]
 8026520:	1d18      	adds	r0, r3, #4
 8026522:	6008      	str	r0, [r1, #0]
 8026524:	0628      	lsls	r0, r5, #24
 8026526:	d501      	bpl.n	802652c <_printf_i+0xec>
 8026528:	681d      	ldr	r5, [r3, #0]
 802652a:	e002      	b.n	8026532 <_printf_i+0xf2>
 802652c:	0669      	lsls	r1, r5, #25
 802652e:	d5fb      	bpl.n	8026528 <_printf_i+0xe8>
 8026530:	881d      	ldrh	r5, [r3, #0]
 8026532:	4854      	ldr	r0, [pc, #336]	; (8026684 <_printf_i+0x244>)
 8026534:	2f6f      	cmp	r7, #111	; 0x6f
 8026536:	bf0c      	ite	eq
 8026538:	2308      	moveq	r3, #8
 802653a:	230a      	movne	r3, #10
 802653c:	2100      	movs	r1, #0
 802653e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026542:	6866      	ldr	r6, [r4, #4]
 8026544:	60a6      	str	r6, [r4, #8]
 8026546:	2e00      	cmp	r6, #0
 8026548:	bfa2      	ittt	ge
 802654a:	6821      	ldrge	r1, [r4, #0]
 802654c:	f021 0104 	bicge.w	r1, r1, #4
 8026550:	6021      	strge	r1, [r4, #0]
 8026552:	b90d      	cbnz	r5, 8026558 <_printf_i+0x118>
 8026554:	2e00      	cmp	r6, #0
 8026556:	d04d      	beq.n	80265f4 <_printf_i+0x1b4>
 8026558:	4616      	mov	r6, r2
 802655a:	fbb5 f1f3 	udiv	r1, r5, r3
 802655e:	fb03 5711 	mls	r7, r3, r1, r5
 8026562:	5dc7      	ldrb	r7, [r0, r7]
 8026564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026568:	462f      	mov	r7, r5
 802656a:	42bb      	cmp	r3, r7
 802656c:	460d      	mov	r5, r1
 802656e:	d9f4      	bls.n	802655a <_printf_i+0x11a>
 8026570:	2b08      	cmp	r3, #8
 8026572:	d10b      	bne.n	802658c <_printf_i+0x14c>
 8026574:	6823      	ldr	r3, [r4, #0]
 8026576:	07df      	lsls	r7, r3, #31
 8026578:	d508      	bpl.n	802658c <_printf_i+0x14c>
 802657a:	6923      	ldr	r3, [r4, #16]
 802657c:	6861      	ldr	r1, [r4, #4]
 802657e:	4299      	cmp	r1, r3
 8026580:	bfde      	ittt	le
 8026582:	2330      	movle	r3, #48	; 0x30
 8026584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026588:	f106 36ff 	addle.w	r6, r6, #4294967295
 802658c:	1b92      	subs	r2, r2, r6
 802658e:	6122      	str	r2, [r4, #16]
 8026590:	f8cd a000 	str.w	sl, [sp]
 8026594:	464b      	mov	r3, r9
 8026596:	aa03      	add	r2, sp, #12
 8026598:	4621      	mov	r1, r4
 802659a:	4640      	mov	r0, r8
 802659c:	f7ff fee2 	bl	8026364 <_printf_common>
 80265a0:	3001      	adds	r0, #1
 80265a2:	d14c      	bne.n	802663e <_printf_i+0x1fe>
 80265a4:	f04f 30ff 	mov.w	r0, #4294967295
 80265a8:	b004      	add	sp, #16
 80265aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80265ae:	4835      	ldr	r0, [pc, #212]	; (8026684 <_printf_i+0x244>)
 80265b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80265b4:	6823      	ldr	r3, [r4, #0]
 80265b6:	680e      	ldr	r6, [r1, #0]
 80265b8:	061f      	lsls	r7, r3, #24
 80265ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80265be:	600e      	str	r6, [r1, #0]
 80265c0:	d514      	bpl.n	80265ec <_printf_i+0x1ac>
 80265c2:	07d9      	lsls	r1, r3, #31
 80265c4:	bf44      	itt	mi
 80265c6:	f043 0320 	orrmi.w	r3, r3, #32
 80265ca:	6023      	strmi	r3, [r4, #0]
 80265cc:	b91d      	cbnz	r5, 80265d6 <_printf_i+0x196>
 80265ce:	6823      	ldr	r3, [r4, #0]
 80265d0:	f023 0320 	bic.w	r3, r3, #32
 80265d4:	6023      	str	r3, [r4, #0]
 80265d6:	2310      	movs	r3, #16
 80265d8:	e7b0      	b.n	802653c <_printf_i+0xfc>
 80265da:	6823      	ldr	r3, [r4, #0]
 80265dc:	f043 0320 	orr.w	r3, r3, #32
 80265e0:	6023      	str	r3, [r4, #0]
 80265e2:	2378      	movs	r3, #120	; 0x78
 80265e4:	4828      	ldr	r0, [pc, #160]	; (8026688 <_printf_i+0x248>)
 80265e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80265ea:	e7e3      	b.n	80265b4 <_printf_i+0x174>
 80265ec:	065e      	lsls	r6, r3, #25
 80265ee:	bf48      	it	mi
 80265f0:	b2ad      	uxthmi	r5, r5
 80265f2:	e7e6      	b.n	80265c2 <_printf_i+0x182>
 80265f4:	4616      	mov	r6, r2
 80265f6:	e7bb      	b.n	8026570 <_printf_i+0x130>
 80265f8:	680b      	ldr	r3, [r1, #0]
 80265fa:	6826      	ldr	r6, [r4, #0]
 80265fc:	6960      	ldr	r0, [r4, #20]
 80265fe:	1d1d      	adds	r5, r3, #4
 8026600:	600d      	str	r5, [r1, #0]
 8026602:	0635      	lsls	r5, r6, #24
 8026604:	681b      	ldr	r3, [r3, #0]
 8026606:	d501      	bpl.n	802660c <_printf_i+0x1cc>
 8026608:	6018      	str	r0, [r3, #0]
 802660a:	e002      	b.n	8026612 <_printf_i+0x1d2>
 802660c:	0671      	lsls	r1, r6, #25
 802660e:	d5fb      	bpl.n	8026608 <_printf_i+0x1c8>
 8026610:	8018      	strh	r0, [r3, #0]
 8026612:	2300      	movs	r3, #0
 8026614:	6123      	str	r3, [r4, #16]
 8026616:	4616      	mov	r6, r2
 8026618:	e7ba      	b.n	8026590 <_printf_i+0x150>
 802661a:	680b      	ldr	r3, [r1, #0]
 802661c:	1d1a      	adds	r2, r3, #4
 802661e:	600a      	str	r2, [r1, #0]
 8026620:	681e      	ldr	r6, [r3, #0]
 8026622:	6862      	ldr	r2, [r4, #4]
 8026624:	2100      	movs	r1, #0
 8026626:	4630      	mov	r0, r6
 8026628:	f7f9 fdda 	bl	80201e0 <memchr>
 802662c:	b108      	cbz	r0, 8026632 <_printf_i+0x1f2>
 802662e:	1b80      	subs	r0, r0, r6
 8026630:	6060      	str	r0, [r4, #4]
 8026632:	6863      	ldr	r3, [r4, #4]
 8026634:	6123      	str	r3, [r4, #16]
 8026636:	2300      	movs	r3, #0
 8026638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802663c:	e7a8      	b.n	8026590 <_printf_i+0x150>
 802663e:	6923      	ldr	r3, [r4, #16]
 8026640:	4632      	mov	r2, r6
 8026642:	4649      	mov	r1, r9
 8026644:	4640      	mov	r0, r8
 8026646:	47d0      	blx	sl
 8026648:	3001      	adds	r0, #1
 802664a:	d0ab      	beq.n	80265a4 <_printf_i+0x164>
 802664c:	6823      	ldr	r3, [r4, #0]
 802664e:	079b      	lsls	r3, r3, #30
 8026650:	d413      	bmi.n	802667a <_printf_i+0x23a>
 8026652:	68e0      	ldr	r0, [r4, #12]
 8026654:	9b03      	ldr	r3, [sp, #12]
 8026656:	4298      	cmp	r0, r3
 8026658:	bfb8      	it	lt
 802665a:	4618      	movlt	r0, r3
 802665c:	e7a4      	b.n	80265a8 <_printf_i+0x168>
 802665e:	2301      	movs	r3, #1
 8026660:	4632      	mov	r2, r6
 8026662:	4649      	mov	r1, r9
 8026664:	4640      	mov	r0, r8
 8026666:	47d0      	blx	sl
 8026668:	3001      	adds	r0, #1
 802666a:	d09b      	beq.n	80265a4 <_printf_i+0x164>
 802666c:	3501      	adds	r5, #1
 802666e:	68e3      	ldr	r3, [r4, #12]
 8026670:	9903      	ldr	r1, [sp, #12]
 8026672:	1a5b      	subs	r3, r3, r1
 8026674:	42ab      	cmp	r3, r5
 8026676:	dcf2      	bgt.n	802665e <_printf_i+0x21e>
 8026678:	e7eb      	b.n	8026652 <_printf_i+0x212>
 802667a:	2500      	movs	r5, #0
 802667c:	f104 0619 	add.w	r6, r4, #25
 8026680:	e7f5      	b.n	802666e <_printf_i+0x22e>
 8026682:	bf00      	nop
 8026684:	080272e9 	.word	0x080272e9
 8026688:	080272fa 	.word	0x080272fa

0802668c <_sbrk_r>:
 802668c:	b538      	push	{r3, r4, r5, lr}
 802668e:	4d06      	ldr	r5, [pc, #24]	; (80266a8 <_sbrk_r+0x1c>)
 8026690:	2300      	movs	r3, #0
 8026692:	4604      	mov	r4, r0
 8026694:	4608      	mov	r0, r1
 8026696:	602b      	str	r3, [r5, #0]
 8026698:	f7fe fe4c 	bl	8025334 <_sbrk>
 802669c:	1c43      	adds	r3, r0, #1
 802669e:	d102      	bne.n	80266a6 <_sbrk_r+0x1a>
 80266a0:	682b      	ldr	r3, [r5, #0]
 80266a2:	b103      	cbz	r3, 80266a6 <_sbrk_r+0x1a>
 80266a4:	6023      	str	r3, [r4, #0]
 80266a6:	bd38      	pop	{r3, r4, r5, pc}
 80266a8:	20000c00 	.word	0x20000c00

080266ac <__sread>:
 80266ac:	b510      	push	{r4, lr}
 80266ae:	460c      	mov	r4, r1
 80266b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80266b4:	f000 f8e8 	bl	8026888 <_read_r>
 80266b8:	2800      	cmp	r0, #0
 80266ba:	bfab      	itete	ge
 80266bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80266be:	89a3      	ldrhlt	r3, [r4, #12]
 80266c0:	181b      	addge	r3, r3, r0
 80266c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80266c6:	bfac      	ite	ge
 80266c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80266ca:	81a3      	strhlt	r3, [r4, #12]
 80266cc:	bd10      	pop	{r4, pc}

080266ce <__swrite>:
 80266ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266d2:	461f      	mov	r7, r3
 80266d4:	898b      	ldrh	r3, [r1, #12]
 80266d6:	05db      	lsls	r3, r3, #23
 80266d8:	4605      	mov	r5, r0
 80266da:	460c      	mov	r4, r1
 80266dc:	4616      	mov	r6, r2
 80266de:	d505      	bpl.n	80266ec <__swrite+0x1e>
 80266e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80266e4:	2302      	movs	r3, #2
 80266e6:	2200      	movs	r2, #0
 80266e8:	f000 f870 	bl	80267cc <_lseek_r>
 80266ec:	89a3      	ldrh	r3, [r4, #12]
 80266ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80266f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80266f6:	81a3      	strh	r3, [r4, #12]
 80266f8:	4632      	mov	r2, r6
 80266fa:	463b      	mov	r3, r7
 80266fc:	4628      	mov	r0, r5
 80266fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026702:	f000 b817 	b.w	8026734 <_write_r>

08026706 <__sseek>:
 8026706:	b510      	push	{r4, lr}
 8026708:	460c      	mov	r4, r1
 802670a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802670e:	f000 f85d 	bl	80267cc <_lseek_r>
 8026712:	1c43      	adds	r3, r0, #1
 8026714:	89a3      	ldrh	r3, [r4, #12]
 8026716:	bf15      	itete	ne
 8026718:	6560      	strne	r0, [r4, #84]	; 0x54
 802671a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802671e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026722:	81a3      	strheq	r3, [r4, #12]
 8026724:	bf18      	it	ne
 8026726:	81a3      	strhne	r3, [r4, #12]
 8026728:	bd10      	pop	{r4, pc}

0802672a <__sclose>:
 802672a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802672e:	f000 b81b 	b.w	8026768 <_close_r>
	...

08026734 <_write_r>:
 8026734:	b538      	push	{r3, r4, r5, lr}
 8026736:	4d07      	ldr	r5, [pc, #28]	; (8026754 <_write_r+0x20>)
 8026738:	4604      	mov	r4, r0
 802673a:	4608      	mov	r0, r1
 802673c:	4611      	mov	r1, r2
 802673e:	2200      	movs	r2, #0
 8026740:	602a      	str	r2, [r5, #0]
 8026742:	461a      	mov	r2, r3
 8026744:	f7fe fde8 	bl	8025318 <_write>
 8026748:	1c43      	adds	r3, r0, #1
 802674a:	d102      	bne.n	8026752 <_write_r+0x1e>
 802674c:	682b      	ldr	r3, [r5, #0]
 802674e:	b103      	cbz	r3, 8026752 <_write_r+0x1e>
 8026750:	6023      	str	r3, [r4, #0]
 8026752:	bd38      	pop	{r3, r4, r5, pc}
 8026754:	20000c00 	.word	0x20000c00

08026758 <abort>:
 8026758:	b508      	push	{r3, lr}
 802675a:	2006      	movs	r0, #6
 802675c:	f000 f8ce 	bl	80268fc <raise>
 8026760:	2001      	movs	r0, #1
 8026762:	f7fe fdcc 	bl	80252fe <_exit>
	...

08026768 <_close_r>:
 8026768:	b538      	push	{r3, r4, r5, lr}
 802676a:	4d06      	ldr	r5, [pc, #24]	; (8026784 <_close_r+0x1c>)
 802676c:	2300      	movs	r3, #0
 802676e:	4604      	mov	r4, r0
 8026770:	4608      	mov	r0, r1
 8026772:	602b      	str	r3, [r5, #0]
 8026774:	f7fe fdf8 	bl	8025368 <_close>
 8026778:	1c43      	adds	r3, r0, #1
 802677a:	d102      	bne.n	8026782 <_close_r+0x1a>
 802677c:	682b      	ldr	r3, [r5, #0]
 802677e:	b103      	cbz	r3, 8026782 <_close_r+0x1a>
 8026780:	6023      	str	r3, [r4, #0]
 8026782:	bd38      	pop	{r3, r4, r5, pc}
 8026784:	20000c00 	.word	0x20000c00

08026788 <_fstat_r>:
 8026788:	b538      	push	{r3, r4, r5, lr}
 802678a:	4d07      	ldr	r5, [pc, #28]	; (80267a8 <_fstat_r+0x20>)
 802678c:	2300      	movs	r3, #0
 802678e:	4604      	mov	r4, r0
 8026790:	4608      	mov	r0, r1
 8026792:	4611      	mov	r1, r2
 8026794:	602b      	str	r3, [r5, #0]
 8026796:	f7fe fdea 	bl	802536e <_fstat>
 802679a:	1c43      	adds	r3, r0, #1
 802679c:	d102      	bne.n	80267a4 <_fstat_r+0x1c>
 802679e:	682b      	ldr	r3, [r5, #0]
 80267a0:	b103      	cbz	r3, 80267a4 <_fstat_r+0x1c>
 80267a2:	6023      	str	r3, [r4, #0]
 80267a4:	bd38      	pop	{r3, r4, r5, pc}
 80267a6:	bf00      	nop
 80267a8:	20000c00 	.word	0x20000c00

080267ac <_isatty_r>:
 80267ac:	b538      	push	{r3, r4, r5, lr}
 80267ae:	4d06      	ldr	r5, [pc, #24]	; (80267c8 <_isatty_r+0x1c>)
 80267b0:	2300      	movs	r3, #0
 80267b2:	4604      	mov	r4, r0
 80267b4:	4608      	mov	r0, r1
 80267b6:	602b      	str	r3, [r5, #0]
 80267b8:	f7fe fdde 	bl	8025378 <_isatty>
 80267bc:	1c43      	adds	r3, r0, #1
 80267be:	d102      	bne.n	80267c6 <_isatty_r+0x1a>
 80267c0:	682b      	ldr	r3, [r5, #0]
 80267c2:	b103      	cbz	r3, 80267c6 <_isatty_r+0x1a>
 80267c4:	6023      	str	r3, [r4, #0]
 80267c6:	bd38      	pop	{r3, r4, r5, pc}
 80267c8:	20000c00 	.word	0x20000c00

080267cc <_lseek_r>:
 80267cc:	b538      	push	{r3, r4, r5, lr}
 80267ce:	4d07      	ldr	r5, [pc, #28]	; (80267ec <_lseek_r+0x20>)
 80267d0:	4604      	mov	r4, r0
 80267d2:	4608      	mov	r0, r1
 80267d4:	4611      	mov	r1, r2
 80267d6:	2200      	movs	r2, #0
 80267d8:	602a      	str	r2, [r5, #0]
 80267da:	461a      	mov	r2, r3
 80267dc:	f7fe fdce 	bl	802537c <_lseek>
 80267e0:	1c43      	adds	r3, r0, #1
 80267e2:	d102      	bne.n	80267ea <_lseek_r+0x1e>
 80267e4:	682b      	ldr	r3, [r5, #0]
 80267e6:	b103      	cbz	r3, 80267ea <_lseek_r+0x1e>
 80267e8:	6023      	str	r3, [r4, #0]
 80267ea:	bd38      	pop	{r3, r4, r5, pc}
 80267ec:	20000c00 	.word	0x20000c00

080267f0 <memmove>:
 80267f0:	4288      	cmp	r0, r1
 80267f2:	b510      	push	{r4, lr}
 80267f4:	eb01 0402 	add.w	r4, r1, r2
 80267f8:	d902      	bls.n	8026800 <memmove+0x10>
 80267fa:	4284      	cmp	r4, r0
 80267fc:	4623      	mov	r3, r4
 80267fe:	d807      	bhi.n	8026810 <memmove+0x20>
 8026800:	1e43      	subs	r3, r0, #1
 8026802:	42a1      	cmp	r1, r4
 8026804:	d008      	beq.n	8026818 <memmove+0x28>
 8026806:	f811 2b01 	ldrb.w	r2, [r1], #1
 802680a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802680e:	e7f8      	b.n	8026802 <memmove+0x12>
 8026810:	4402      	add	r2, r0
 8026812:	4601      	mov	r1, r0
 8026814:	428a      	cmp	r2, r1
 8026816:	d100      	bne.n	802681a <memmove+0x2a>
 8026818:	bd10      	pop	{r4, pc}
 802681a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802681e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026822:	e7f7      	b.n	8026814 <memmove+0x24>

08026824 <__malloc_lock>:
 8026824:	4801      	ldr	r0, [pc, #4]	; (802682c <__malloc_lock+0x8>)
 8026826:	f7ff b9cf 	b.w	8025bc8 <__retarget_lock_acquire_recursive>
 802682a:	bf00      	nop
 802682c:	20000bf8 	.word	0x20000bf8

08026830 <__malloc_unlock>:
 8026830:	4801      	ldr	r0, [pc, #4]	; (8026838 <__malloc_unlock+0x8>)
 8026832:	f7ff b9ca 	b.w	8025bca <__retarget_lock_release_recursive>
 8026836:	bf00      	nop
 8026838:	20000bf8 	.word	0x20000bf8

0802683c <_realloc_r>:
 802683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802683e:	4607      	mov	r7, r0
 8026840:	4614      	mov	r4, r2
 8026842:	460e      	mov	r6, r1
 8026844:	b921      	cbnz	r1, 8026850 <_realloc_r+0x14>
 8026846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802684a:	4611      	mov	r1, r2
 802684c:	f7ff ba7a 	b.w	8025d44 <_malloc_r>
 8026850:	b922      	cbnz	r2, 802685c <_realloc_r+0x20>
 8026852:	f7ff fa27 	bl	8025ca4 <_free_r>
 8026856:	4625      	mov	r5, r4
 8026858:	4628      	mov	r0, r5
 802685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802685c:	f000 f86a 	bl	8026934 <_malloc_usable_size_r>
 8026860:	42a0      	cmp	r0, r4
 8026862:	d20f      	bcs.n	8026884 <_realloc_r+0x48>
 8026864:	4621      	mov	r1, r4
 8026866:	4638      	mov	r0, r7
 8026868:	f7ff fa6c 	bl	8025d44 <_malloc_r>
 802686c:	4605      	mov	r5, r0
 802686e:	2800      	cmp	r0, #0
 8026870:	d0f2      	beq.n	8026858 <_realloc_r+0x1c>
 8026872:	4631      	mov	r1, r6
 8026874:	4622      	mov	r2, r4
 8026876:	f7fe fdad 	bl	80253d4 <memcpy>
 802687a:	4631      	mov	r1, r6
 802687c:	4638      	mov	r0, r7
 802687e:	f7ff fa11 	bl	8025ca4 <_free_r>
 8026882:	e7e9      	b.n	8026858 <_realloc_r+0x1c>
 8026884:	4635      	mov	r5, r6
 8026886:	e7e7      	b.n	8026858 <_realloc_r+0x1c>

08026888 <_read_r>:
 8026888:	b538      	push	{r3, r4, r5, lr}
 802688a:	4d07      	ldr	r5, [pc, #28]	; (80268a8 <_read_r+0x20>)
 802688c:	4604      	mov	r4, r0
 802688e:	4608      	mov	r0, r1
 8026890:	4611      	mov	r1, r2
 8026892:	2200      	movs	r2, #0
 8026894:	602a      	str	r2, [r5, #0]
 8026896:	461a      	mov	r2, r3
 8026898:	f7fe fd37 	bl	802530a <_read>
 802689c:	1c43      	adds	r3, r0, #1
 802689e:	d102      	bne.n	80268a6 <_read_r+0x1e>
 80268a0:	682b      	ldr	r3, [r5, #0]
 80268a2:	b103      	cbz	r3, 80268a6 <_read_r+0x1e>
 80268a4:	6023      	str	r3, [r4, #0]
 80268a6:	bd38      	pop	{r3, r4, r5, pc}
 80268a8:	20000c00 	.word	0x20000c00

080268ac <_raise_r>:
 80268ac:	291f      	cmp	r1, #31
 80268ae:	b538      	push	{r3, r4, r5, lr}
 80268b0:	4604      	mov	r4, r0
 80268b2:	460d      	mov	r5, r1
 80268b4:	d904      	bls.n	80268c0 <_raise_r+0x14>
 80268b6:	2316      	movs	r3, #22
 80268b8:	6003      	str	r3, [r0, #0]
 80268ba:	f04f 30ff 	mov.w	r0, #4294967295
 80268be:	bd38      	pop	{r3, r4, r5, pc}
 80268c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80268c2:	b112      	cbz	r2, 80268ca <_raise_r+0x1e>
 80268c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80268c8:	b94b      	cbnz	r3, 80268de <_raise_r+0x32>
 80268ca:	4620      	mov	r0, r4
 80268cc:	f000 f830 	bl	8026930 <_getpid_r>
 80268d0:	462a      	mov	r2, r5
 80268d2:	4601      	mov	r1, r0
 80268d4:	4620      	mov	r0, r4
 80268d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80268da:	f000 b817 	b.w	802690c <_kill_r>
 80268de:	2b01      	cmp	r3, #1
 80268e0:	d00a      	beq.n	80268f8 <_raise_r+0x4c>
 80268e2:	1c59      	adds	r1, r3, #1
 80268e4:	d103      	bne.n	80268ee <_raise_r+0x42>
 80268e6:	2316      	movs	r3, #22
 80268e8:	6003      	str	r3, [r0, #0]
 80268ea:	2001      	movs	r0, #1
 80268ec:	e7e7      	b.n	80268be <_raise_r+0x12>
 80268ee:	2400      	movs	r4, #0
 80268f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80268f4:	4628      	mov	r0, r5
 80268f6:	4798      	blx	r3
 80268f8:	2000      	movs	r0, #0
 80268fa:	e7e0      	b.n	80268be <_raise_r+0x12>

080268fc <raise>:
 80268fc:	4b02      	ldr	r3, [pc, #8]	; (8026908 <raise+0xc>)
 80268fe:	4601      	mov	r1, r0
 8026900:	6818      	ldr	r0, [r3, #0]
 8026902:	f7ff bfd3 	b.w	80268ac <_raise_r>
 8026906:	bf00      	nop
 8026908:	20000024 	.word	0x20000024

0802690c <_kill_r>:
 802690c:	b538      	push	{r3, r4, r5, lr}
 802690e:	4d07      	ldr	r5, [pc, #28]	; (802692c <_kill_r+0x20>)
 8026910:	2300      	movs	r3, #0
 8026912:	4604      	mov	r4, r0
 8026914:	4608      	mov	r0, r1
 8026916:	4611      	mov	r1, r2
 8026918:	602b      	str	r3, [r5, #0]
 802691a:	f7fe fce8 	bl	80252ee <_kill>
 802691e:	1c43      	adds	r3, r0, #1
 8026920:	d102      	bne.n	8026928 <_kill_r+0x1c>
 8026922:	682b      	ldr	r3, [r5, #0]
 8026924:	b103      	cbz	r3, 8026928 <_kill_r+0x1c>
 8026926:	6023      	str	r3, [r4, #0]
 8026928:	bd38      	pop	{r3, r4, r5, pc}
 802692a:	bf00      	nop
 802692c:	20000c00 	.word	0x20000c00

08026930 <_getpid_r>:
 8026930:	f7fe bcdb 	b.w	80252ea <_getpid>

08026934 <_malloc_usable_size_r>:
 8026934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026938:	1f18      	subs	r0, r3, #4
 802693a:	2b00      	cmp	r3, #0
 802693c:	bfbc      	itt	lt
 802693e:	580b      	ldrlt	r3, [r1, r0]
 8026940:	18c0      	addlt	r0, r0, r3
 8026942:	4770      	bx	lr

08026944 <_init>:
 8026944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026946:	bf00      	nop
 8026948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802694a:	bc08      	pop	{r3}
 802694c:	469e      	mov	lr, r3
 802694e:	4770      	bx	lr

08026950 <_fini>:
 8026950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026952:	bf00      	nop
 8026954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026956:	bc08      	pop	{r3}
 8026958:	469e      	mov	lr, r3
 802695a:	4770      	bx	lr
 802695c:	0000      	movs	r0, r0
	...
