
RTCtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c00  08004c00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c08  08004c08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  08004c80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004c80  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f09a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216f  00000000  00000000  0002f13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00031f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002769c  00000000  00000000  00032a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf96  00000000  00000000  0005a134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1155  00000000  00000000  000670ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015821f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003860  00000000  00000000  00158274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b24 	.word	0x08004b24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004b24 	.word	0x08004b24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_write>:
/* USER CODE BEGIN PFP */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc);
void _write(int file, char *ptr, int len)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 500);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004d4:	68b9      	ldr	r1, [r7, #8]
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <_write+0x24>)
 80004d8:	f003 f9a6 	bl	8003828 <HAL_UART_Transmit>
}
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000098 	.word	0x20000098

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fdd8 	bl	80010a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f851 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f975 	bl	80007e4 <MX_GPIO_Init>
  MX_RTC_Init();
 80004fa:	f000 f8a1 	bl	8000640 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80004fe:	f000 f941 	bl	8000784 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  for(uint8_t i = 0; i<10; i++){
 8000502:	2300      	movs	r3, #0
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	e00b      	b.n	8000520 <main+0x38>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050c:	481d      	ldr	r0, [pc, #116]	; (8000584 <main+0x9c>)
 800050e:	f001 f945 	bl	800179c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000516:	f000 fe39 	bl	800118c <HAL_Delay>
  for(uint8_t i = 0; i<10; i++){
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	3301      	adds	r3, #1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b09      	cmp	r3, #9
 8000524:	d9f0      	bls.n	8000508 <main+0x20>
  }

  printf("while start\n");
 8000526:	4818      	ldr	r0, [pc, #96]	; (8000588 <main+0xa0>)
 8000528:	f003 fea4 	bl	8004274 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(uint8_t i = 0; i<50; i++){
 800052c:	2300      	movs	r3, #0
 800052e:	71bb      	strb	r3, [r7, #6]
 8000530:	e00a      	b.n	8000548 <main+0x60>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000536:	4813      	ldr	r0, [pc, #76]	; (8000584 <main+0x9c>)
 8000538:	f001 f930 	bl	800179c <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f000 fe25 	bl	800118c <HAL_Delay>
	  for(uint8_t i = 0; i<50; i++){
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	3301      	adds	r3, #1
 8000546:	71bb      	strb	r3, [r7, #6]
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	2b31      	cmp	r3, #49	; 0x31
 800054c:	d9f1      	bls.n	8000532 <main+0x4a>
	  }



	  printf("enter stop\n");
 800054e:	480f      	ldr	r0, [pc, #60]	; (800058c <main+0xa4>)
 8000550:	f003 fe90 	bl	8004274 <puts>
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <main+0xa8>)
 8000556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000558:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <main+0xa8>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6593      	str	r3, [r2, #88]	; 0x58
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <main+0xa8>)
 8000562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	683b      	ldr	r3, [r7, #0]
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800056c:	2200      	movs	r2, #0
 800056e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000572:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0xac>)
 8000574:	f003 f850 	bl	8003618 <HAL_RTCEx_SetWakeUpTimer_IT>
	  HAL_SuspendTick();
 8000578:	f000 fe2c 	bl	80011d4 <HAL_SuspendTick>
	  //HAL_PWR_EnterSTOPMode(0, PWR_SLEEPENTRY_WFI);
	  HAL_PWR_EnterSTANDBYMode();
 800057c:	f001 f94c 	bl	8001818 <HAL_PWR_EnterSTANDBYMode>
	  for(uint8_t i = 0; i<50; i++){
 8000580:	e7d4      	b.n	800052c <main+0x44>
 8000582:	bf00      	nop
 8000584:	48000400 	.word	0x48000400
 8000588:	08004b3c 	.word	0x08004b3c
 800058c:	08004b48 	.word	0x08004b48
 8000590:	40021000 	.word	0x40021000
 8000594:	2000011c 	.word	0x2000011c

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	; 0x58
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2244      	movs	r2, #68	; 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fdee 	bl	8004188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005be:	f001 f953 	bl	8001868 <HAL_PWREx_ControlVoltageScaling>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c8:	f000 fb56 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80005cc:	2318      	movs	r3, #24
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005dc:	2360      	movs	r3, #96	; 0x60
 80005de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e4:	2301      	movs	r3, #1
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005ec:	2328      	movs	r3, #40	; 0x28
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f0:	2307      	movs	r3, #7
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f987 	bl	8001914 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800060c:	f000 fb34 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2303      	movs	r3, #3
 8000616:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	2104      	movs	r1, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fd59 	bl	80020e0 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000634:	f000 fb20 	bl	8000c78 <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3758      	adds	r7, #88	; 0x58
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b092      	sub	sp, #72	; 0x48
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000646:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000656:	2300      	movs	r3, #0
 8000658:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	222c      	movs	r2, #44	; 0x2c
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fd91 	bl	8004188 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000666:	4b44      	ldr	r3, [pc, #272]	; (8000778 <MX_RTC_Init+0x138>)
 8000668:	4a44      	ldr	r2, [pc, #272]	; (800077c <MX_RTC_Init+0x13c>)
 800066a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800066c:	4b42      	ldr	r3, [pc, #264]	; (8000778 <MX_RTC_Init+0x138>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000672:	4b41      	ldr	r3, [pc, #260]	; (8000778 <MX_RTC_Init+0x138>)
 8000674:	227f      	movs	r2, #127	; 0x7f
 8000676:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000678:	4b3f      	ldr	r3, [pc, #252]	; (8000778 <MX_RTC_Init+0x138>)
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800067e:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <MX_RTC_Init+0x138>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000684:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <MX_RTC_Init+0x138>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800068a:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <MX_RTC_Init+0x138>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <MX_RTC_Init+0x138>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000696:	4838      	ldr	r0, [pc, #224]	; (8000778 <MX_RTC_Init+0x138>)
 8000698:	f002 fbe4 	bl	8002e64 <HAL_RTC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80006a2:	f000 fae9 	bl	8000c78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006bc:	2300      	movs	r3, #0
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006c4:	2201      	movs	r2, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	482b      	ldr	r0, [pc, #172]	; (8000778 <MX_RTC_Init+0x138>)
 80006ca:	f002 fc46 	bl	8002f5a <HAL_RTC_SetTime>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80006d4:	f000 fad0 	bl	8000c78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006d8:	2301      	movs	r3, #1
 80006da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80006de:	2301      	movs	r3, #1
 80006e0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f4:	2201      	movs	r2, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	481f      	ldr	r0, [pc, #124]	; (8000778 <MX_RTC_Init+0x138>)
 80006fa:	f002 fccb 	bl	8003094 <HAL_RTC_SetDate>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000704:	f000 fab8 	bl	8000c78 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000708:	2300      	movs	r3, #0
 800070a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800070c:	2300      	movs	r3, #0
 800070e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x5;
 8000710:	2305      	movs	r3, #5
 8000712:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_RTC_Init+0x140>)
 8000722:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800072c:	2301      	movs	r3, #1
 800072e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2201      	movs	r2, #1
 800073c:	4619      	mov	r1, r3
 800073e:	480e      	ldr	r0, [pc, #56]	; (8000778 <MX_RTC_Init+0x138>)
 8000740:	f002 fd30 	bl	80031a4 <HAL_RTC_SetAlarm_IT>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800074a:	f000 fa95 	bl	8000c78 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Seconds = 0x10;
 800074e:	2310      	movs	r3, #16
 8000750:	71bb      	strb	r3, [r7, #6]
  sAlarm.Alarm = RTC_ALARM_B;
 8000752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_RTC_Init+0x138>)
 8000760:	f002 fd20 	bl	80031a4 <HAL_RTC_SetAlarm_IT>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_RTC_Init+0x12e>
  {
    Error_Handler();
 800076a:	f000 fa85 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3748      	adds	r7, #72	; 0x48
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000011c 	.word	0x2000011c
 800077c:	40002800 	.word	0x40002800
 8000780:	80808000 	.word	0x80808000

08000784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USART1_UART_Init+0x58>)
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <MX_USART1_UART_Init+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_USART1_UART_Init+0x58>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USART1_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007c8:	f002 ffe0 	bl	800378c <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 fa51 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000098 	.word	0x20000098
 80007e0:	40013800 	.word	0x40013800

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fa:	4bba      	ldr	r3, [pc, #744]	; (8000ae4 <MX_GPIO_Init+0x300>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4ab9      	ldr	r2, [pc, #740]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000800:	f043 0310 	orr.w	r3, r3, #16
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4bb7      	ldr	r3, [pc, #732]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0310 	and.w	r3, r3, #16
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4bb4      	ldr	r3, [pc, #720]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4ab3      	ldr	r2, [pc, #716]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4bb1      	ldr	r3, [pc, #708]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4bae      	ldr	r3, [pc, #696]	; (8000ae4 <MX_GPIO_Init+0x300>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4aad      	ldr	r2, [pc, #692]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4bab      	ldr	r3, [pc, #684]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4ba8      	ldr	r3, [pc, #672]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4aa7      	ldr	r2, [pc, #668]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4ba5      	ldr	r3, [pc, #660]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	4ba2      	ldr	r3, [pc, #648]	; (8000ae4 <MX_GPIO_Init+0x300>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4aa1      	ldr	r2, [pc, #644]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b9f      	ldr	r3, [pc, #636]	; (8000ae4 <MX_GPIO_Init+0x300>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000878:	489b      	ldr	r0, [pc, #620]	; (8000ae8 <MX_GPIO_Init+0x304>)
 800087a:	f000 ff77 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f248 1104 	movw	r1, #33028	; 0x8104
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f000 ff70 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800088c:	2200      	movs	r2, #0
 800088e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000892:	4896      	ldr	r0, [pc, #600]	; (8000aec <MX_GPIO_Init+0x308>)
 8000894:	f000 ff6a 	bl	800176c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f241 0181 	movw	r1, #4225	; 0x1081
 800089e:	4894      	ldr	r0, [pc, #592]	; (8000af0 <MX_GPIO_Init+0x30c>)
 80008a0:	f000 ff64 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008aa:	4891      	ldr	r0, [pc, #580]	; (8000af0 <MX_GPIO_Init+0x30c>)
 80008ac:	f000 ff5e 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80008b6:	488f      	ldr	r0, [pc, #572]	; (8000af4 <MX_GPIO_Init+0x310>)
 80008b8:	f000 ff58 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2120      	movs	r1, #32
 80008c0:	488a      	ldr	r0, [pc, #552]	; (8000aec <MX_GPIO_Init+0x308>)
 80008c2:	f000 ff53 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2101      	movs	r1, #1
 80008ca:	4887      	ldr	r0, [pc, #540]	; (8000ae8 <MX_GPIO_Init+0x304>)
 80008cc:	f000 ff4e 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80008d0:	f240 1315 	movw	r3, #277	; 0x115
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	487f      	ldr	r0, [pc, #508]	; (8000ae8 <MX_GPIO_Init+0x304>)
 80008ea:	f000 fd95 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80008ee:	236a      	movs	r3, #106	; 0x6a
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f2:	4b81      	ldr	r3, [pc, #516]	; (8000af8 <MX_GPIO_Init+0x314>)
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4879      	ldr	r0, [pc, #484]	; (8000ae8 <MX_GPIO_Init+0x304>)
 8000902:	f000 fd89 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090c:	4b7b      	ldr	r3, [pc, #492]	; (8000afc <MX_GPIO_Init+0x318>)
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4876      	ldr	r0, [pc, #472]	; (8000af4 <MX_GPIO_Init+0x310>)
 800091c:	f000 fd7c 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000920:	233f      	movs	r3, #63	; 0x3f
 8000922:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000924:	230b      	movs	r3, #11
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4870      	ldr	r0, [pc, #448]	; (8000af4 <MX_GPIO_Init+0x310>)
 8000934:	f000 fd70 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000938:	2303      	movs	r3, #3
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000948:	2308      	movs	r3, #8
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f000 fd5f 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800095a:	f248 1304 	movw	r3, #33028	; 0x8104
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f000 fd4f 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800097a:	2308      	movs	r3, #8
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800098a:	2301      	movs	r3, #1
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000998:	f000 fd3e 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800099c:	2310      	movs	r3, #16
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009a0:	230b      	movs	r3, #11
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f000 fd31 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80009b6:	23e0      	movs	r3, #224	; 0xe0
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009c6:	2305      	movs	r3, #5
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f000 fd20 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009dc:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <MX_GPIO_Init+0x314>)
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4840      	ldr	r0, [pc, #256]	; (8000aec <MX_GPIO_Init+0x308>)
 80009ec:	f000 fd14 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009f4:	230b      	movs	r3, #11
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	483a      	ldr	r0, [pc, #232]	; (8000aec <MX_GPIO_Init+0x308>)
 8000a04:	f000 fd08 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a08:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000a0c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4832      	ldr	r0, [pc, #200]	; (8000aec <MX_GPIO_Init+0x308>)
 8000a22:	f000 fcf9 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000a26:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4829      	ldr	r0, [pc, #164]	; (8000ae8 <MX_GPIO_Init+0x304>)
 8000a44:	f000 fce8 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000a48:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000a4c:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4820      	ldr	r0, [pc, #128]	; (8000ae8 <MX_GPIO_Init+0x304>)
 8000a66:	f000 fcd7 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000a6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a70:	2312      	movs	r3, #18
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4819      	ldr	r0, [pc, #100]	; (8000aec <MX_GPIO_Init+0x308>)
 8000a88:	f000 fcc6 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000a8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <MX_GPIO_Init+0x30c>)
 8000aaa:	f000 fcb5 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000aae:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000ab2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_GPIO_Init+0x314>)
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <MX_GPIO_Init+0x30c>)
 8000ac4:	f000 fca8 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000ac8:	f243 0381 	movw	r3, #12417	; 0x3081
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	e00e      	b.n	8000b00 <MX_GPIO_Init+0x31c>
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48001000 	.word	0x48001000
 8000aec:	48000400 	.word	0x48000400
 8000af0:	48000c00 	.word	0x48000c00
 8000af4:	48000800 	.word	0x48000800
 8000af8:	10110000 	.word	0x10110000
 8000afc:	10210000 	.word	0x10210000
 8000b00:	484a      	ldr	r0, [pc, #296]	; (8000c2c <MX_GPIO_Init+0x448>)
 8000b02:	f000 fc89 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4844      	ldr	r0, [pc, #272]	; (8000c30 <MX_GPIO_Init+0x44c>)
 8000b20:	f000 fc7a 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2a:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <MX_GPIO_Init+0x450>)
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	483d      	ldr	r0, [pc, #244]	; (8000c30 <MX_GPIO_Init+0x44c>)
 8000b3a:	f000 fc6d 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f000 fc5f 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000b5a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b6c:	230a      	movs	r3, #10
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 fc4d 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000b7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b90:	2306      	movs	r3, #6
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_GPIO_Init+0x44c>)
 8000b9c:	f000 fc3c 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481c      	ldr	r0, [pc, #112]	; (8000c2c <MX_GPIO_Init+0x448>)
 8000bbc:	f000 fc2c 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bc0:	2378      	movs	r3, #120	; 0x78
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_GPIO_Init+0x448>)
 8000bdc:	f000 fc1c 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000be0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be6:	2312      	movs	r3, #18
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480e      	ldr	r0, [pc, #56]	; (8000c38 <MX_GPIO_Init+0x454>)
 8000bfe:	f000 fc0b 	bl	8001418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2017      	movs	r0, #23
 8000c08:	f000 fbcf 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c0c:	2017      	movs	r0, #23
 8000c0e:	f000 fbe8 	bl	80013e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2028      	movs	r0, #40	; 0x28
 8000c18:	f000 fbc7 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c1c:	2028      	movs	r0, #40	; 0x28
 8000c1e:	f000 fbe0 	bl	80013e2 <HAL_NVIC_EnableIRQ>

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	48000c00 	.word	0x48000c00
 8000c30:	48000800 	.word	0x48000800
 8000c34:	10110000 	.word	0x10110000
 8000c38:	48000400 	.word	0x48000400

08000c3c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	//printf("A alarmed\n");
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <HAL_RTCEx_AlarmBEventCallback>:
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	//printf("B alarmed\n");
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <HAL_RTCEx_WakeUpTimerEventCallback>:
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	//__HAL_RCC_PWR_CLK_ENABLE();
	HAL_ResumeTick();
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
	printf("exit stop\n");*/

}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6613      	str	r3, [r2, #96]	; 0x60
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0a4      	sub	sp, #144	; 0x90
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	2288      	movs	r2, #136	; 0x88
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fa53 	bl	8004188 <memset>
  if(hrtc->Instance==RTC)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <HAL_RTC_MspInit+0x7c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d128      	bne.n	8000d3e <HAL_RTC_MspInit+0x72>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fbf4 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d0a:	f7ff ffb5 	bl	8000c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_RTC_MspInit+0x80>)
 8000d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_RTC_MspInit+0x80>)
 8000d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 fb41 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 fb5a 	bl	80013e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2029      	movs	r0, #41	; 0x29
 8000d34:	f000 fb39 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000d38:	2029      	movs	r0, #41	; 0x29
 8000d3a:	f000 fb52 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3790      	adds	r7, #144	; 0x90
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40002800 	.word	0x40002800
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0ac      	sub	sp, #176	; 0xb0
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2288      	movs	r2, #136	; 0x88
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fa09 	bl	8004188 <memset>
  if(huart->Instance==USART1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a21      	ldr	r2, [pc, #132]	; (8000e00 <HAL_UART_MspInit+0xb0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d13a      	bne.n	8000df6 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d84:	2300      	movs	r3, #0
 8000d86:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fbad 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d98:	f7ff ff6e 	bl	8000c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_UART_MspInit+0xb4>)
 8000d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <HAL_UART_MspInit+0xb4>)
 8000da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da6:	6613      	str	r3, [r2, #96]	; 0x60
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_UART_MspInit+0xb4>)
 8000daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <HAL_UART_MspInit+0xb4>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <HAL_UART_MspInit+0xb4>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <HAL_UART_MspInit+0xb4>)
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000dcc:	23c0      	movs	r3, #192	; 0xc0
 8000dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de4:	2307      	movs	r3, #7
 8000de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_UART_MspInit+0xb8>)
 8000df2:	f000 fb11 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	37b0      	adds	r7, #176	; 0xb0
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000400 	.word	0x48000400

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f978 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <RTC_WKUP_IRQHandler+0x10>)
 8000e66:	f002 fc6b 	bl	8003740 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000011c 	.word	0x2000011c

08000e74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e78:	2020      	movs	r0, #32
 8000e7a:	f000 fca9 	bl	80017d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e7e:	2040      	movs	r0, #64	; 0x40
 8000e80:	f000 fca6 	bl	80017d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000e84:	2080      	movs	r0, #128	; 0x80
 8000e86:	f000 fca3 	bl	80017d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e8a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e8e:	f000 fc9f 	bl	80017d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e9a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e9e:	f000 fc97 	bl	80017d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000ea2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ea6:	f000 fc93 	bl	80017d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000eaa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eae:	f000 fc8f 	bl	80017d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000eb2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000eb6:	f000 fc8b 	bl	80017d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000eba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ebe:	f000 fc87 	bl	80017d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <RTC_Alarm_IRQHandler+0x10>)
 8000ece:	f002 faa5 	bl	800341c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000011c 	.word	0x2000011c

08000edc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e00a      	b.n	8000f04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eee:	f3af 8000 	nop.w
 8000ef2:	4601      	mov	r1, r0
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	b2ca      	uxtb	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbf0      	blt.n	8000eee <_read+0x12>
	}

return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_isatty>:

int _isatty(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	return 1;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb0:	f003 f8c0 	bl	8004134 <__errno>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <_sbrk+0x64>)
 8000fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20018000 	.word	0x20018000
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	2000008c 	.word	0x2000008c
 8000fe8:	20000158 	.word	0x20000158

08000fec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SystemInit+0x5c>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <SystemInit+0x5c>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <SystemInit+0x60>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <SystemInit+0x60>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <SystemInit+0x60>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <SystemInit+0x60>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0d      	ldr	r2, [pc, #52]	; (800104c <SystemInit+0x60>)
 8001018:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800101c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001020:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <SystemInit+0x60>)
 8001024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001028:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <SystemInit+0x60>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <SystemInit+0x60>)
 8001030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001034:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <SystemInit+0x60>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00
 800104c:	40021000 	.word	0x40021000

08001050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001054:	f7ff ffca 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001058:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800105a:	e003      	b.n	8001064 <LoopCopyDataInit>

0800105c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800105e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001060:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001062:	3104      	adds	r1, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001064:	480a      	ldr	r0, [pc, #40]	; (8001090 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001068:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800106a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800106c:	d3f6      	bcc.n	800105c <CopyDataInit>
	ldr	r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001070:	e002      	b.n	8001078 <LoopFillZerobss>

08001072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001072:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001074:	f842 3b04 	str.w	r3, [r2], #4

08001078 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <LoopForever+0x16>)
	cmp	r2, r3
 800107a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800107c:	d3f9      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107e:	f003 f85f 	bl	8004140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001082:	f7ff fa31 	bl	80004e8 <main>

08001086 <LoopForever>:

LoopForever:
    b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001088:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800108c:	08004c10 	.word	0x08004c10
	ldr	r0, =_sdata
 8001090:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001094:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001098:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800109c:	20000154 	.word	0x20000154

080010a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_2_IRQHandler>

080010a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f971 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f80e 	bl	80010d4 <HAL_InitTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	e001      	b.n	80010c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c4:	f7ff fdde 	bl	8000c84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_InitTick+0x6c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d023      	beq.n	8001130 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_InitTick+0x70>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_InitTick+0x6c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f97d 	bl	80013fe <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10f      	bne.n	800112a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d809      	bhi.n	8001124 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f947 	bl	80013aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_InitTick+0x74>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e007      	b.n	8001134 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e004      	b.n	8001134 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e001      	b.n	8001134 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	20000000 	.word	0x20000000
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	20000140 	.word	0x20000140

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000140 	.word	0x20000140

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008

080011d4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_SuspendTick+0x1c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_SuspendTick+0x1c>)
 80011de:	f023 0302 	bic.w	r3, r3, #2
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4907      	ldr	r1, [pc, #28]	; (8001290 <__NVIC_EnableIRQ+0x38>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff8e 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff29 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff3e 	bl	800123c <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff8e 	bl	80012e8 <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5d 	bl	8001294 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff31 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	e17f      	b.n	8001728 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2101      	movs	r1, #1
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8171 	beq.w	8001722 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d00b      	beq.n	8001460 <HAL_GPIO_Init+0x48>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001454:	2b11      	cmp	r3, #17
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b12      	cmp	r3, #18
 800145e:	d130      	bne.n	80014c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001496:	2201      	movs	r2, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f003 0201 	and.w	r2, r3, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d118      	bne.n	8001500 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014d4:	2201      	movs	r2, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	f003 0201 	and.w	r2, r3, #1
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x128>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b12      	cmp	r3, #18
 800153e:	d123      	bne.n	8001588 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	6939      	ldr	r1, [r7, #16]
 8001584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0203 	and.w	r2, r3, #3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80ac 	beq.w	8001722 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_GPIO_Init+0x330>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	4a5e      	ldr	r2, [pc, #376]	; (8001748 <HAL_GPIO_Init+0x330>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6613      	str	r3, [r2, #96]	; 0x60
 80015d6:	4b5c      	ldr	r3, [pc, #368]	; (8001748 <HAL_GPIO_Init+0x330>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015e2:	4a5a      	ldr	r2, [pc, #360]	; (800174c <HAL_GPIO_Init+0x334>)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	220f      	movs	r2, #15
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800160c:	d025      	beq.n	800165a <HAL_GPIO_Init+0x242>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4f      	ldr	r2, [pc, #316]	; (8001750 <HAL_GPIO_Init+0x338>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01f      	beq.n	8001656 <HAL_GPIO_Init+0x23e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4e      	ldr	r2, [pc, #312]	; (8001754 <HAL_GPIO_Init+0x33c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d019      	beq.n	8001652 <HAL_GPIO_Init+0x23a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4d      	ldr	r2, [pc, #308]	; (8001758 <HAL_GPIO_Init+0x340>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0x236>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4c      	ldr	r2, [pc, #304]	; (800175c <HAL_GPIO_Init+0x344>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00d      	beq.n	800164a <HAL_GPIO_Init+0x232>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4b      	ldr	r2, [pc, #300]	; (8001760 <HAL_GPIO_Init+0x348>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x22e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4a      	ldr	r2, [pc, #296]	; (8001764 <HAL_GPIO_Init+0x34c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_GPIO_Init+0x22a>
 800163e:	2306      	movs	r3, #6
 8001640:	e00c      	b.n	800165c <HAL_GPIO_Init+0x244>
 8001642:	2307      	movs	r3, #7
 8001644:	e00a      	b.n	800165c <HAL_GPIO_Init+0x244>
 8001646:	2305      	movs	r3, #5
 8001648:	e008      	b.n	800165c <HAL_GPIO_Init+0x244>
 800164a:	2304      	movs	r3, #4
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x244>
 800164e:	2303      	movs	r3, #3
 8001650:	e004      	b.n	800165c <HAL_GPIO_Init+0x244>
 8001652:	2302      	movs	r3, #2
 8001654:	e002      	b.n	800165c <HAL_GPIO_Init+0x244>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_GPIO_Init+0x244>
 800165a:	2300      	movs	r3, #0
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	f002 0203 	and.w	r2, r2, #3
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	4093      	lsls	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800166c:	4937      	ldr	r1, [pc, #220]	; (800174c <HAL_GPIO_Init+0x334>)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <HAL_GPIO_Init+0x350>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800169e:	4a32      	ldr	r2, [pc, #200]	; (8001768 <HAL_GPIO_Init+0x350>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_GPIO_Init+0x350>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c8:	4a27      	ldr	r2, [pc, #156]	; (8001768 <HAL_GPIO_Init+0x350>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <HAL_GPIO_Init+0x350>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016f2:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <HAL_GPIO_Init+0x350>)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_GPIO_Init+0x350>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800171c:	4a12      	ldr	r2, [pc, #72]	; (8001768 <HAL_GPIO_Init+0x350>)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	f47f ae78 	bne.w	8001428 <HAL_GPIO_Init+0x10>
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	40010000 	.word	0x40010000
 8001750:	48000400 	.word	0x48000400
 8001754:	48000800 	.word	0x48000800
 8001758:	48000c00 	.word	0x48000c00
 800175c:	48001000 	.word	0x48001000
 8001760:	48001400 	.word	0x48001400
 8001764:	48001800 	.word	0x48001800
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001788:	e002      	b.n	8001790 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	041a      	lsls	r2, r3, #16
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43d9      	mvns	r1, r3
 80017ba:	887b      	ldrh	r3, [r7, #2]
 80017bc:	400b      	ands	r3, r1
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	619a      	str	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d006      	beq.n	80017f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f806 	bl	8001800 <HAL_GPIO_EXTI_Callback>
  }
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40010400 	.word	0x40010400

08001800 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 0307 	bic.w	r3, r3, #7
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001826:	f043 0303 	orr.w	r3, r3, #3
 800182a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	4a05      	ldr	r2, [pc, #20]	; (8001848 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001838:	bf30      	wfi
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40007000 	.word	0x40007000
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <HAL_PWREx_GetVoltageRange+0x18>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40007000 	.word	0x40007000

08001868 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001876:	d130      	bne.n	80018da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001884:	d038      	beq.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800188e:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001894:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2232      	movs	r2, #50	; 0x32
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0c9b      	lsrs	r3, r3, #18
 80018a8:	3301      	adds	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ac:	e002      	b.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c0:	d102      	bne.n	80018c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f2      	bne.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d4:	d110      	bne.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e00f      	b.n	80018fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e6:	d007      	beq.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018f0:	4a05      	ldr	r2, [pc, #20]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40007000 	.word	0x40007000
 800190c:	20000000 	.word	0x20000000
 8001910:	431bde83 	.word	0x431bde83

08001914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e3d4      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001926:	4ba1      	ldr	r3, [pc, #644]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001930:	4b9e      	ldr	r3, [pc, #632]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80e4 	beq.w	8001b10 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <HAL_RCC_OscConfig+0x4a>
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b0c      	cmp	r3, #12
 8001952:	f040 808b 	bne.w	8001a6c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2b01      	cmp	r3, #1
 800195a:	f040 8087 	bne.w	8001a6c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800195e:	4b93      	ldr	r3, [pc, #588]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x62>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e3ac      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1a      	ldr	r2, [r3, #32]
 800197a:	4b8c      	ldr	r3, [pc, #560]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <HAL_RCC_OscConfig+0x7c>
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800198e:	e005      	b.n	800199c <HAL_RCC_OscConfig+0x88>
 8001990:	4b86      	ldr	r3, [pc, #536]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199c:	4293      	cmp	r3, r2
 800199e:	d223      	bcs.n	80019e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fd41 	bl	800242c <RCC_SetFlashLatencyFromMSIRange>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e38d      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b4:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a7c      	ldr	r2, [pc, #496]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b7a      	ldr	r3, [pc, #488]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4977      	ldr	r1, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d2:	4b76      	ldr	r3, [pc, #472]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	4972      	ldr	r1, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
 80019e6:	e025      	b.n	8001a34 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e8:	4b70      	ldr	r3, [pc, #448]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a6f      	ldr	r2, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b6d      	ldr	r3, [pc, #436]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	496a      	ldr	r1, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a06:	4b69      	ldr	r3, [pc, #420]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	4965      	ldr	r1, [pc, #404]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fd01 	bl	800242c <RCC_SetFlashLatencyFromMSIRange>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e34d      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a34:	f000 fc36 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	495a      	ldr	r1, [pc, #360]	; (8001bb0 <HAL_RCC_OscConfig+0x29c>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <HAL_RCC_OscConfig+0x2a0>)
 8001a52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a54:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <HAL_RCC_OscConfig+0x2a4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fb3b 	bl	80010d4 <HAL_InitTick>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d052      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	e331      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d032      	beq.n	8001ada <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a74:	4b4d      	ldr	r3, [pc, #308]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a4c      	ldr	r2, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fb78 	bl	8001174 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a88:	f7ff fb74 	bl	8001174 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e31a      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a9a:	4b44      	ldr	r3, [pc, #272]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa6:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a40      	ldr	r2, [pc, #256]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	493b      	ldr	r1, [pc, #236]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	4936      	ldr	r1, [pc, #216]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
 8001ad8:	e01a      	b.n	8001b10 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ada:	4b34      	ldr	r3, [pc, #208]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a33      	ldr	r2, [pc, #204]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb45 	bl	8001174 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aee:	f7ff fb41 	bl	8001174 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e2e7      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x1da>
 8001b0c:	e000      	b.n	8001b10 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b0e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d074      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x21a>
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d10e      	bne.n	8001b46 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d10b      	bne.n	8001b46 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d064      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d160      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e2c4      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x24a>
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a15      	ldr	r2, [pc, #84]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e01d      	b.n	8001b9a <HAL_RCC_OscConfig+0x286>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b66:	d10c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x26e>
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	e00b      	b.n	8001b9a <HAL_RCC_OscConfig+0x286>
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_RCC_OscConfig+0x298>)
 8001b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fae7 	bl	8001174 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba8:	e011      	b.n	8001bce <HAL_RCC_OscConfig+0x2ba>
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	08004b54 	.word	0x08004b54
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fada 	bl	8001174 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e280      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bce:	4baf      	ldr	r3, [pc, #700]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x2a8>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff faca 	bl	8001174 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fac6 	bl	8001174 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e26c      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf6:	4ba5      	ldr	r3, [pc, #660]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x2d0>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d060      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_OscConfig+0x310>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d119      	bne.n	8001c52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d116      	bne.n	8001c52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c24:	4b99      	ldr	r3, [pc, #612]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_OscConfig+0x328>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e249      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b93      	ldr	r3, [pc, #588]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	4990      	ldr	r1, [pc, #576]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c50:	e040      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d023      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5a:	4b8c      	ldr	r3, [pc, #560]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a8b      	ldr	r2, [pc, #556]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff fa85 	bl	8001174 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6e:	f7ff fa81 	bl	8001174 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e227      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c80:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8c:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	497c      	ldr	r1, [pc, #496]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
 8001ca0:	e018      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca2:	4b7a      	ldr	r3, [pc, #488]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a79      	ldr	r2, [pc, #484]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff fa61 	bl	8001174 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff fa5d 	bl	8001174 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e203      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc8:	4b70      	ldr	r3, [pc, #448]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d03c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce8:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cee:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fa3c 	bl	8001174 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fa38 	bl	8001174 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1de      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d12:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ef      	beq.n	8001d00 <HAL_RCC_OscConfig+0x3ec>
 8001d20:	e01b      	b.n	8001d5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b5a      	ldr	r3, [pc, #360]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d28:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff fa1f 	bl	8001174 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fa1b 	bl	8001174 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e1c1      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d4c:	4b4f      	ldr	r3, [pc, #316]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1ef      	bne.n	8001d3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80a6 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d6c:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10d      	bne.n	8001d94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4a43      	ldr	r2, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
 8001d84:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d90:	2301      	movs	r3, #1
 8001d92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d94:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <HAL_RCC_OscConfig+0x57c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d118      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da0:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_RCC_OscConfig+0x57c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a3a      	ldr	r2, [pc, #232]	; (8001e90 <HAL_RCC_OscConfig+0x57c>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dac:	f7ff f9e2 	bl	8001174 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db4:	f7ff f9de 	bl	8001174 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e184      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc6:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <HAL_RCC_OscConfig+0x57c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <HAL_RCC_OscConfig+0x4d8>
 8001dda:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de0:	4a2a      	ldr	r2, [pc, #168]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dea:	e024      	b.n	8001e36 <HAL_RCC_OscConfig+0x522>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d110      	bne.n	8001e16 <HAL_RCC_OscConfig+0x502>
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e14:	e00f      	b.n	8001e36 <HAL_RCC_OscConfig+0x522>
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2c:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001e2e:	f023 0304 	bic.w	r3, r3, #4
 8001e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d016      	beq.n	8001e6c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7ff f999 	bl	8001174 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff f995 	bl	8001174 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e139      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_OscConfig+0x578>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0ed      	beq.n	8001e46 <HAL_RCC_OscConfig+0x532>
 8001e6a:	e01a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f982 	bl	8001174 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e72:	e00f      	b.n	8001e94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e74:	f7ff f97e 	bl	8001174 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d906      	bls.n	8001e94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e122      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e94:	4b90      	ldr	r3, [pc, #576]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1e8      	bne.n	8001e74 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b8b      	ldr	r3, [pc, #556]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	4a8a      	ldr	r2, [pc, #552]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8108 	beq.w	80020ce <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	f040 80d0 	bne.w	8002068 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ec8:	4b83      	ldr	r3, [pc, #524]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0203 	and.w	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d130      	bne.n	8001f3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d127      	bne.n	8001f3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d11f      	bne.n	8001f3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f08:	2a07      	cmp	r2, #7
 8001f0a:	bf14      	ite	ne
 8001f0c:	2201      	movne	r2, #1
 8001f0e:	2200      	moveq	r2, #0
 8001f10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d113      	bne.n	8001f3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d109      	bne.n	8001f3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	085b      	lsrs	r3, r3, #1
 8001f36:	3b01      	subs	r3, #1
 8001f38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d06e      	beq.n	800201c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2b0c      	cmp	r3, #12
 8001f42:	d069      	beq.n	8002018 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f44:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d105      	bne.n	8001f5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f50:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0b7      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f60:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a5c      	ldr	r2, [pc, #368]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f6c:	f7ff f902 	bl	8001174 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff f8fe 	bl	8001174 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0a4      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f86:	4b54      	ldr	r3, [pc, #336]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f92:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_RCC_OscConfig+0x7c8>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fa2:	3a01      	subs	r2, #1
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	4311      	orrs	r1, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fac:	0212      	lsls	r2, r2, #8
 8001fae:	4311      	orrs	r1, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fb4:	0852      	lsrs	r2, r2, #1
 8001fb6:	3a01      	subs	r2, #1
 8001fb8:	0552      	lsls	r2, r2, #21
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fc0:	0852      	lsrs	r2, r2, #1
 8001fc2:	3a01      	subs	r2, #1
 8001fc4:	0652      	lsls	r2, r2, #25
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fcc:	0912      	lsrs	r2, r2, #4
 8001fce:	0452      	lsls	r2, r2, #17
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	4941      	ldr	r1, [pc, #260]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a3e      	ldr	r2, [pc, #248]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fe4:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a3b      	ldr	r2, [pc, #236]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ff0:	f7ff f8c0 	bl	8001174 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f8bc 	bl	8001174 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e062      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200a:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002016:	e05a      	b.n	80020ce <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e059      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201c:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d152      	bne.n	80020ce <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 800202e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002032:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002040:	f7ff f898 	bl	8001174 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff f894 	bl	8001174 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e03a      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x734>
 8002066:	e032      	b.n	80020ce <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d02d      	beq.n	80020ca <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8002074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002078:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 800208c:	f023 0303 	bic.w	r3, r3, #3
 8002090:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 8002098:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800209c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7ff f867 	bl	8001174 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7ff f863 	bl	8001174 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e009      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_OscConfig+0x7c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f0      	bne.n	80020aa <HAL_RCC_OscConfig+0x796>
 80020c8:	e001      	b.n	80020ce <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	f99d808c 	.word	0xf99d808c

080020e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0c8      	b.n	8002286 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b66      	ldr	r3, [pc, #408]	; (8002290 <HAL_RCC_ClockConfig+0x1b0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d910      	bls.n	8002124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_RCC_ClockConfig+0x1b0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 0207 	bic.w	r2, r3, #7
 800210a:	4961      	ldr	r1, [pc, #388]	; (8002290 <HAL_RCC_ClockConfig+0x1b0>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <HAL_RCC_ClockConfig+0x1b0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0b0      	b.n	8002286 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d04c      	beq.n	80021ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002138:	4b56      	ldr	r3, [pc, #344]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d121      	bne.n	8002188 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e09e      	b.n	8002286 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d115      	bne.n	8002188 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e092      	b.n	8002286 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e086      	b.n	8002286 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002178:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e07e      	b.n	8002286 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002188:	4b42      	ldr	r3, [pc, #264]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 0203 	bic.w	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	493f      	ldr	r1, [pc, #252]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800219a:	f7fe ffeb 	bl	8001174 <HAL_GetTick>
 800219e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f7fe ffe7 	bl	8001174 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e066      	b.n	8002286 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 020c 	and.w	r2, r3, #12
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d1eb      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d6:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	492c      	ldr	r1, [pc, #176]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_RCC_ClockConfig+0x1b0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d210      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_RCC_ClockConfig+0x1b0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4924      	ldr	r1, [pc, #144]	; (8002290 <HAL_RCC_ClockConfig+0x1b0>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_RCC_ClockConfig+0x1b0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e036      	b.n	8002286 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4918      	ldr	r1, [pc, #96]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4910      	ldr	r1, [pc, #64]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002256:	f000 f825 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 800225a:	4602      	mov	r2, r0
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_RCC_ClockConfig+0x1b4>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	490c      	ldr	r1, [pc, #48]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	5ccb      	ldrb	r3, [r1, r3]
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	fa22 f303 	lsr.w	r3, r2, r3
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe ff2a 	bl	80010d4 <HAL_InitTick>
 8002280:	4603      	mov	r3, r0
 8002282:	72fb      	strb	r3, [r7, #11]

  return status;
 8002284:	7afb      	ldrb	r3, [r7, #11]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40022000 	.word	0x40022000
 8002294:	40021000 	.word	0x40021000
 8002298:	08004b54 	.word	0x08004b54
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b2:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x34>
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d121      	bne.n	8002316 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d11e      	bne.n	8002316 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022d8:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e005      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022f4:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002300:	4a2b      	ldr	r2, [pc, #172]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002308:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002314:	e00a      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d102      	bne.n	8002322 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	e004      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d101      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800232a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d134      	bne.n	800239c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002332:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0xa6>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d003      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0xac>
 8002348:	e005      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800234c:	617b      	str	r3, [r7, #20]
      break;
 800234e:	e005      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002352:	617b      	str	r3, [r7, #20]
      break;
 8002354:	e002      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	617b      	str	r3, [r7, #20]
      break;
 800235a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	3301      	adds	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	fb02 f203 	mul.w	r2, r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	0e5b      	lsrs	r3, r3, #25
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	3301      	adds	r3, #1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800239c:	69bb      	ldr	r3, [r7, #24]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08004b6c 	.word	0x08004b6c
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	007a1200 	.word	0x007a1200

080023bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023d8:	f7ff fff0 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4904      	ldr	r1, [pc, #16]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08004b64 	.word	0x08004b64

08002400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002404:	f7ff ffda 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	0adb      	lsrs	r3, r3, #11
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4904      	ldr	r1, [pc, #16]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08004b64 	.word	0x08004b64

0800242c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002444:	f7ff fa02 	bl	800184c <HAL_PWREx_GetVoltageRange>
 8002448:	6178      	str	r0, [r7, #20]
 800244a:	e014      	b.n	8002476 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002456:	6593      	str	r3, [r2, #88]	; 0x58
 8002458:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002464:	f7ff f9f2 	bl	800184c <HAL_PWREx_GetVoltageRange>
 8002468:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002474:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247c:	d10b      	bne.n	8002496 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b80      	cmp	r3, #128	; 0x80
 8002482:	d919      	bls.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2ba0      	cmp	r3, #160	; 0xa0
 8002488:	d902      	bls.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800248a:	2302      	movs	r3, #2
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	e013      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002490:	2301      	movs	r3, #1
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	e010      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b80      	cmp	r3, #128	; 0x80
 800249a:	d902      	bls.n	80024a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800249c:	2303      	movs	r3, #3
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	e00a      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b80      	cmp	r3, #128	; 0x80
 80024a6:	d102      	bne.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024a8:	2302      	movs	r3, #2
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e004      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b70      	cmp	r3, #112	; 0x70
 80024b2:	d101      	bne.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024b4:	2301      	movs	r3, #1
 80024b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 0207 	bic.w	r2, r3, #7
 80024c0:	4909      	ldr	r1, [pc, #36]	; (80024e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40022000 	.word	0x40022000

080024ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024f4:	2300      	movs	r3, #0
 80024f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f8:	2300      	movs	r3, #0
 80024fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002504:	2b00      	cmp	r3, #0
 8002506:	d041      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800250c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002510:	d02a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002512:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002516:	d824      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800251c:	d008      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800251e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002522:	d81e      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800252c:	d010      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800252e:	e018      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002530:	4b86      	ldr	r3, [pc, #536]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a85      	ldr	r2, [pc, #532]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800253c:	e015      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fabb 	bl	8002ac0 <RCCEx_PLLSAI1_Config>
 800254a:	4603      	mov	r3, r0
 800254c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800254e:	e00c      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3320      	adds	r3, #32
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fba6 	bl	8002ca8 <RCCEx_PLLSAI2_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002560:	e003      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	74fb      	strb	r3, [r7, #19]
      break;
 8002566:	e000      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002570:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800257e:	4973      	ldr	r1, [pc, #460]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002586:	e001      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d041      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800259c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025a0:	d02a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025a6:	d824      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ac:	d008      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025b2:	d81e      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025bc:	d010      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025be:	e018      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c0:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a61      	ldr	r2, [pc, #388]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025cc:	e015      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fa73 	bl	8002ac0 <RCCEx_PLLSAI1_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025de:	e00c      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3320      	adds	r3, #32
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fb5e 	bl	8002ca8 <RCCEx_PLLSAI2_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f0:	e003      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	74fb      	strb	r3, [r7, #19]
      break;
 80025f6:	e000      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fa:	7cfb      	ldrb	r3, [r7, #19]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10b      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002600:	4b52      	ldr	r3, [pc, #328]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800260e:	494f      	ldr	r1, [pc, #316]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002616:	e001      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80a0 	beq.w	800276a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800262e:	4b47      	ldr	r3, [pc, #284]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002644:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	4a40      	ldr	r2, [pc, #256]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264e:	6593      	str	r3, [r2, #88]	; 0x58
 8002650:	4b3e      	ldr	r3, [pc, #248]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265c:	2301      	movs	r3, #1
 800265e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002660:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a3a      	ldr	r2, [pc, #232]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800266c:	f7fe fd82 	bl	8001174 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002672:	e009      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002674:	f7fe fd7e 	bl	8001174 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d902      	bls.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	74fb      	strb	r3, [r7, #19]
        break;
 8002686:	e005      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002688:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ef      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d15c      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800269a:	4b2c      	ldr	r3, [pc, #176]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01f      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d019      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	4a20      	ldr	r2, [pc, #128]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026e4:	4a19      	ldr	r2, [pc, #100]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7fe fd3d 	bl	8001174 <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fc:	e00b      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe fd39 	bl	8001174 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d902      	bls.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	74fb      	strb	r3, [r7, #19]
            break;
 8002714:	e006      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ec      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800273a:	4904      	ldr	r1, [pc, #16]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002742:	e009      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	74bb      	strb	r3, [r7, #18]
 8002748:	e006      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002758:	7c7b      	ldrb	r3, [r7, #17]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b9e      	ldr	r3, [pc, #632]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	4a9d      	ldr	r2, [pc, #628]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002768:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002776:	4b98      	ldr	r3, [pc, #608]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f023 0203 	bic.w	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	4994      	ldr	r1, [pc, #592]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002798:	4b8f      	ldr	r3, [pc, #572]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f023 020c 	bic.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	498c      	ldr	r1, [pc, #560]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ba:	4b87      	ldr	r3, [pc, #540]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	4983      	ldr	r1, [pc, #524]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027dc:	4b7e      	ldr	r3, [pc, #504]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	497b      	ldr	r1, [pc, #492]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027fe:	4b76      	ldr	r3, [pc, #472]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280c:	4972      	ldr	r1, [pc, #456]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002820:	4b6d      	ldr	r3, [pc, #436]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	496a      	ldr	r1, [pc, #424]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002842:	4b65      	ldr	r3, [pc, #404]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	4961      	ldr	r1, [pc, #388]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002864:	4b5c      	ldr	r3, [pc, #368]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	4959      	ldr	r1, [pc, #356]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002886:	4b54      	ldr	r3, [pc, #336]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002894:	4950      	ldr	r1, [pc, #320]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028a8:	4b4b      	ldr	r3, [pc, #300]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	4948      	ldr	r1, [pc, #288]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ca:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	493f      	ldr	r1, [pc, #252]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d028      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ec:	4b3a      	ldr	r3, [pc, #232]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fa:	4937      	ldr	r1, [pc, #220]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800290a:	d106      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800290c:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a31      	ldr	r2, [pc, #196]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002916:	60d3      	str	r3, [r2, #12]
 8002918:	e011      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800291e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002922:	d10c      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f8c8 	bl	8002ac0 <RCCEx_PLLSAI1_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d028      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800294a:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	491f      	ldr	r1, [pc, #124]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002968:	d106      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002974:	60d3      	str	r3, [r2, #12]
 8002976:	e011      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002980:	d10c      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	2101      	movs	r1, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f899 	bl	8002ac0 <RCCEx_PLLSAI1_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d02b      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b6:	4908      	ldr	r1, [pc, #32]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c6:	d109      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a02      	ldr	r2, [pc, #8]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d2:	60d3      	str	r3, [r2, #12]
 80029d4:	e014      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2101      	movs	r1, #1
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f867 	bl	8002ac0 <RCCEx_PLLSAI1_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d02f      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1a:	4928      	ldr	r1, [pc, #160]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	2102      	movs	r1, #2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f844 	bl	8002ac0 <RCCEx_PLLSAI1_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d014      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	74bb      	strb	r3, [r7, #18]
 8002a46:	e011      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3320      	adds	r3, #32
 8002a56:	2102      	movs	r1, #2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f925 	bl	8002ca8 <RCCEx_PLLSAI2_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a86:	490d      	ldr	r1, [pc, #52]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aaa:	4904      	ldr	r1, [pc, #16]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ab2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000

08002ac0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ace:	4b75      	ldr	r3, [pc, #468]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d018      	beq.n	8002b0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ada:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0203 	and.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d10d      	bne.n	8002b06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
       ||
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002af2:	4b6c      	ldr	r3, [pc, #432]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
       ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d047      	beq.n	8002b96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
 8002b0a:	e044      	b.n	8002b96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d018      	beq.n	8002b46 <RCCEx_PLLSAI1_Config+0x86>
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d825      	bhi.n	8002b64 <RCCEx_PLLSAI1_Config+0xa4>
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d002      	beq.n	8002b22 <RCCEx_PLLSAI1_Config+0x62>
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d009      	beq.n	8002b34 <RCCEx_PLLSAI1_Config+0x74>
 8002b20:	e020      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b22:	4b60      	ldr	r3, [pc, #384]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11d      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b32:	e01a      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b34:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d116      	bne.n	8002b6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b44:	e013      	b.n	8002b6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b46:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b52:	4b54      	ldr	r3, [pc, #336]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b62:	e006      	b.n	8002b72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
      break;
 8002b68:	e004      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e002      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e000      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b72:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	4944      	ldr	r1, [pc, #272]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d17d      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b9c:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a40      	ldr	r2, [pc, #256]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fae4 	bl	8001174 <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bae:	e009      	b.n	8002bc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bb0:	f7fe fae0 	bl	8001174 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d902      	bls.n	8002bc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	73fb      	strb	r3, [r7, #15]
        break;
 8002bc2:	e005      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bc4:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ef      	bne.n	8002bb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d160      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d111      	bne.n	8002c00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6892      	ldr	r2, [r2, #8]
 8002bec:	0211      	lsls	r1, r2, #8
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68d2      	ldr	r2, [r2, #12]
 8002bf2:	0912      	lsrs	r2, r2, #4
 8002bf4:	0452      	lsls	r2, r2, #17
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	492a      	ldr	r1, [pc, #168]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	610b      	str	r3, [r1, #16]
 8002bfe:	e027      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d112      	bne.n	8002c2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c06:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	0211      	lsls	r1, r2, #8
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6912      	ldr	r2, [r2, #16]
 8002c1c:	0852      	lsrs	r2, r2, #1
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	0552      	lsls	r2, r2, #21
 8002c22:	430a      	orrs	r2, r1
 8002c24:	491f      	ldr	r1, [pc, #124]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	610b      	str	r3, [r1, #16]
 8002c2a:	e011      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6892      	ldr	r2, [r2, #8]
 8002c3c:	0211      	lsls	r1, r2, #8
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6952      	ldr	r2, [r2, #20]
 8002c42:	0852      	lsrs	r2, r2, #1
 8002c44:	3a01      	subs	r2, #1
 8002c46:	0652      	lsls	r2, r2, #25
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fa8a 	bl	8001174 <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c62:	e009      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c64:	f7fe fa86 	bl	8001174 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d902      	bls.n	8002c78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	73fb      	strb	r3, [r7, #15]
          break;
 8002c76:	e005      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ef      	beq.n	8002c64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	4904      	ldr	r1, [pc, #16]	; (8002ca4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cb6:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d018      	beq.n	8002cf4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cc2:	4b67      	ldr	r3, [pc, #412]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0203 	and.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d10d      	bne.n	8002cee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cda:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d047      	beq.n	8002d7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	e044      	b.n	8002d7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d018      	beq.n	8002d2e <RCCEx_PLLSAI2_Config+0x86>
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d825      	bhi.n	8002d4c <RCCEx_PLLSAI2_Config+0xa4>
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d002      	beq.n	8002d0a <RCCEx_PLLSAI2_Config+0x62>
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d009      	beq.n	8002d1c <RCCEx_PLLSAI2_Config+0x74>
 8002d08:	e020      	b.n	8002d4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d0a:	4b55      	ldr	r3, [pc, #340]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d11d      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1a:	e01a      	b.n	8002d52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d1c:	4b50      	ldr	r3, [pc, #320]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d116      	bne.n	8002d56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2c:	e013      	b.n	8002d56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d2e:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10f      	bne.n	8002d5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d3a:	4b49      	ldr	r3, [pc, #292]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d4a:	e006      	b.n	8002d5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d50:	e004      	b.n	8002d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d52:	bf00      	nop
 8002d54:	e002      	b.n	8002d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10d      	bne.n	8002d7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d62:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	430b      	orrs	r3, r1
 8002d78:	4939      	ldr	r1, [pc, #228]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d167      	bne.n	8002e54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a35      	ldr	r2, [pc, #212]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d90:	f7fe f9f0 	bl	8001174 <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d96:	e009      	b.n	8002dac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d98:	f7fe f9ec 	bl	8001174 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d902      	bls.n	8002dac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	73fb      	strb	r3, [r7, #15]
        break;
 8002daa:	e005      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dac:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1ef      	bne.n	8002d98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d14a      	bne.n	8002e54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d111      	bne.n	8002de8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dc4:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6892      	ldr	r2, [r2, #8]
 8002dd4:	0211      	lsls	r1, r2, #8
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68d2      	ldr	r2, [r2, #12]
 8002dda:	0912      	lsrs	r2, r2, #4
 8002ddc:	0452      	lsls	r2, r2, #17
 8002dde:	430a      	orrs	r2, r1
 8002de0:	491f      	ldr	r1, [pc, #124]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	614b      	str	r3, [r1, #20]
 8002de6:	e011      	b.n	8002e0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002de8:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002df0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6892      	ldr	r2, [r2, #8]
 8002df8:	0211      	lsls	r1, r2, #8
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6912      	ldr	r2, [r2, #16]
 8002dfe:	0852      	lsrs	r2, r2, #1
 8002e00:	3a01      	subs	r2, #1
 8002e02:	0652      	lsls	r2, r2, #25
 8002e04:	430a      	orrs	r2, r1
 8002e06:	4916      	ldr	r1, [pc, #88]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe f9ac 	bl	8001174 <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e1e:	e009      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e20:	f7fe f9a8 	bl	8001174 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	73fb      	strb	r3, [r7, #15]
          break;
 8002e32:	e005      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ef      	beq.n	8002e20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	4904      	ldr	r1, [pc, #16]	; (8002e60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000

08002e64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d06c      	beq.n	8002f50 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd ff1e 	bl	8000ccc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	22ca      	movs	r2, #202	; 0xca
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2253      	movs	r2, #83	; 0x53
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fb23 	bl	80034f4 <RTC_EnterInitMode>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d14b      	bne.n	8002f50 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eca:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6899      	ldr	r1, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68d2      	ldr	r2, [r2, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6919      	ldr	r1, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	041a      	lsls	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fb27 	bl	800355c <RTC_ExitInitMode>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11b      	bne.n	8002f50 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0203 	bic.w	r2, r2, #3
 8002f26:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	22ff      	movs	r2, #255	; 0xff
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f5a:	b590      	push	{r4, r7, lr}
 8002f5c:	b087      	sub	sp, #28
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_RTC_SetTime+0x1a>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e08b      	b.n	800308c <HAL_RTC_SetTime+0x132>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	22ca      	movs	r2, #202	; 0xca
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2253      	movs	r2, #83	; 0x53
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 faad 	bl	80034f4 <RTC_EnterInitMode>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002f9e:	7cfb      	ldrb	r3, [r7, #19]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d163      	bne.n	800306c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d126      	bne.n	8002ff8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fb08 	bl	80035d8 <RTC_ByteToBcd2>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fb01 	bl	80035d8 <RTC_ByteToBcd2>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fda:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	789b      	ldrb	r3, [r3, #2]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 faf9 	bl	80035d8 <RTC_ByteToBcd2>
 8002fe6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fe8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	78db      	ldrb	r3, [r3, #3]
 8002ff0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e018      	b.n	800302a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2200      	movs	r2, #0
 800300a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	785b      	ldrb	r3, [r3, #1]
 8003016:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003018:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800301e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	78db      	ldrb	r3, [r3, #3]
 8003024:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003034:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003038:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003048:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fa7a 	bl	800355c <RTC_ExitInitMode>
 8003068:	4603      	mov	r3, r0
 800306a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	22ff      	movs	r2, #255	; 0xff
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800308a:	7cfb      	ldrb	r3, [r7, #19]
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd90      	pop	{r4, r7, pc}

08003094 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_RTC_SetDate+0x1a>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e075      	b.n	800319a <HAL_RTC_SetDate+0x106>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10e      	bne.n	80030e2 <HAL_RTC_SetDate+0x4e>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	785b      	ldrb	r3, [r3, #1]
 80030d4:	f023 0310 	bic.w	r3, r3, #16
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	330a      	adds	r3, #10
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11c      	bne.n	8003122 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	78db      	ldrb	r3, [r3, #3]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fa73 	bl	80035d8 <RTC_ByteToBcd2>
 80030f2:	4603      	mov	r3, r0
 80030f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fa6c 	bl	80035d8 <RTC_ByteToBcd2>
 8003100:	4603      	mov	r3, r0
 8003102:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003104:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	789b      	ldrb	r3, [r3, #2]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fa64 	bl	80035d8 <RTC_ByteToBcd2>
 8003110:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003112:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e00e      	b.n	8003140 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	78db      	ldrb	r3, [r3, #3]
 8003126:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800312e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003134:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	22ca      	movs	r2, #202	; 0xca
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2253      	movs	r2, #83	; 0x53
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f9cf 	bl	80034f4 <RTC_EnterInitMode>
 8003156:	4603      	mov	r3, r0
 8003158:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800315a:	7cfb      	ldrb	r3, [r7, #19]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10c      	bne.n	800317a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800316a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800316e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f9f3 	bl	800355c <RTC_ExitInitMode>
 8003176:	4603      	mov	r3, r0
 8003178:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003198:	7cfb      	ldrb	r3, [r7, #19]
}
 800319a:	4618      	mov	r0, r3
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}
	...

080031a4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_RTC_SetAlarm_IT+0x1a>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e127      	b.n	800340e <HAL_RTC_SetAlarm_IT+0x26a>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d137      	bne.n	8003244 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2200      	movs	r2, #0
 80031e6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f9f3 	bl	80035d8 <RTC_ByteToBcd2>
 80031f2:	4603      	mov	r3, r0
 80031f4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f9ec 	bl	80035d8 <RTC_ByteToBcd2>
 8003200:	4603      	mov	r3, r0
 8003202:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003204:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	789b      	ldrb	r3, [r3, #2]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f9e4 	bl	80035d8 <RTC_ByteToBcd2>
 8003210:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003212:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	78db      	ldrb	r3, [r3, #3]
 800321a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800321c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f9d6 	bl	80035d8 <RTC_ByteToBcd2>
 800322c:	4603      	mov	r3, r0
 800322e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003230:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003238:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800323e:	4313      	orrs	r3, r2
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e023      	b.n	800328c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d102      	bne.n	8003258 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2200      	movs	r2, #0
 8003256:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	785b      	ldrb	r3, [r3, #1]
 8003262:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003264:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800326a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	78db      	ldrb	r3, [r3, #3]
 8003270:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003272:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800327a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800327c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003282:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003288:	4313      	orrs	r3, r2
 800328a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	22ca      	movs	r2, #202	; 0xca
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2253      	movs	r2, #83	; 0x53
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b0:	d14a      	bne.n	8003348 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80032d2:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80032d4:	f7fd ff4e 	bl	8001174 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80032da:	e015      	b.n	8003308 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032dc:	f7fd ff4a 	bl	8001174 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ea:	d90d      	bls.n	8003308 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	22ff      	movs	r2, #255	; 0xff
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2203      	movs	r2, #3
 80032f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e082      	b.n	800340e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0e2      	beq.n	80032dc <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003334:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003344:	609a      	str	r2, [r3, #8]
 8003346:	e049      	b.n	80033dc <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003356:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003368:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800336a:	f7fd ff03 	bl	8001174 <HAL_GetTick>
 800336e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003370:	e015      	b.n	800339e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003372:	f7fd feff 	bl	8001174 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003380:	d90d      	bls.n	800339e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	22ff      	movs	r2, #255	; 0xff
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2203      	movs	r2, #3
 800338e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e037      	b.n	800340e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0e2      	beq.n	8003372 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033da:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_RTC_SetAlarm_IT+0x274>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0d      	ldr	r2, [pc, #52]	; (8003418 <HAL_RTC_SetAlarm_IT+0x274>)
 80033e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RTC_SetAlarm_IT+0x274>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <HAL_RTC_SetAlarm_IT+0x274>)
 80033ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3724      	adds	r7, #36	; 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd90      	pop	{r4, r7, pc}
 8003416:	bf00      	nop
 8003418:	40010400 	.word	0x40010400

0800341c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003426:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800342a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d012      	beq.n	8003460 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003458:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd fbee 	bl	8000c3c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f462 7220 	orn	r2, r2, #640	; 0x280
 800348c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fbde 	bl	8000c50 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40010400 	.word	0x40010400

080034a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034be:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80034c0:	f7fd fe58 	bl	8001174 <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034c6:	e009      	b.n	80034dc <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034c8:	f7fd fe54 	bl	8001174 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034d6:	d901      	bls.n	80034dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e007      	b.n	80034ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0ee      	beq.n	80034c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d120      	bne.n	8003550 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f04f 32ff 	mov.w	r2, #4294967295
 8003516:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003518:	f7fd fe2c 	bl	8001174 <HAL_GetTick>
 800351c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800351e:	e00d      	b.n	800353c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003520:	f7fd fe28 	bl	8001174 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800352e:	d905      	bls.n	800353c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2203      	movs	r2, #3
 8003538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <RTC_EnterInitMode+0x5c>
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d1e7      	bne.n	8003520 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <RTC_ExitInitMode+0x78>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a19      	ldr	r2, [pc, #100]	; (80035d4 <RTC_ExitInitMode+0x78>)
 800356e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003572:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <RTC_ExitInitMode+0x78>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10c      	bne.n	800359a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff91 	bl	80034a8 <HAL_RTC_WaitForSynchro>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01e      	beq.n	80035ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2203      	movs	r2, #3
 8003590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	73fb      	strb	r3, [r7, #15]
 8003598:	e017      	b.n	80035ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <RTC_ExitInitMode+0x78>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <RTC_ExitInitMode+0x78>)
 80035a0:	f023 0320 	bic.w	r3, r3, #32
 80035a4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ff7e 	bl	80034a8 <HAL_RTC_WaitForSynchro>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2203      	movs	r2, #3
 80035b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <RTC_ExitInitMode+0x78>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <RTC_ExitInitMode+0x78>)
 80035c4:	f043 0320 	orr.w	r3, r3, #32
 80035c8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40002800 	.word	0x40002800

080035d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80035ea:	e005      	b.n	80035f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80035f2:	7afb      	ldrb	r3, [r7, #11]
 80035f4:	3b0a      	subs	r3, #10
 80035f6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	2b09      	cmp	r3, #9
 80035fc:	d8f6      	bhi.n	80035ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	b2da      	uxtb	r2, r3
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	4313      	orrs	r3, r2
 800360a:	b2db      	uxtb	r3, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800362e:	2302      	movs	r3, #2
 8003630:	e07f      	b.n	8003732 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	22ca      	movs	r2, #202	; 0xca
 8003648:	625a      	str	r2, [r3, #36]	; 0x24
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2253      	movs	r2, #83	; 0x53
 8003650:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003660:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003672:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d120      	bne.n	80036c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8003682:	f7fd fd77 	bl	8001174 <HAL_GetTick>
 8003686:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003688:	e015      	b.n	80036b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800368a:	f7fd fd73 	bl	8001174 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003698:	d90d      	bls.n	80036b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	22ff      	movs	r2, #255	; 0xff
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2203      	movs	r2, #3
 80036a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e03d      	b.n	8003732 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0e2      	beq.n	800368a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f023 0107 	bic.w	r1, r3, #7
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80036e0:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80036e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a12      	ldr	r2, [pc, #72]	; (800373c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80036f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003706:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003716:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	22ff      	movs	r2, #255	; 0xff
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40010400 	.word	0x40010400

08003740 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800374a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800374e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800376e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7fd fa77 	bl	8000c64 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40010400 	.word	0x40010400

0800378c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e040      	b.n	8003820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd face 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8c0 	bl	8003950 <UART_SetConfig>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e022      	b.n	8003820 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fb3e 	bl	8003e64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fbc5 	bl	8003fa8 <UART_CheckIdleState>
 800381e:	4603      	mov	r3, r0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800383c:	2b20      	cmp	r3, #32
 800383e:	f040 8082 	bne.w	8003946 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_UART_Transmit+0x26>
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07a      	b.n	8003948 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_UART_Transmit+0x38>
 800385c:	2302      	movs	r3, #2
 800385e:	e073      	b.n	8003948 <HAL_UART_Transmit+0x120>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2221      	movs	r2, #33	; 0x21
 8003874:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003876:	f7fd fc7d 	bl	8001174 <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003894:	d108      	bne.n	80038a8 <HAL_UART_Transmit+0x80>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	e003      	b.n	80038b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038b8:	e02d      	b.n	8003916 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	2180      	movs	r1, #128	; 0x80
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fbb8 	bl	800403a <UART_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e039      	b.n	8003948 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	881a      	ldrh	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e6:	b292      	uxth	r2, r2
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	3302      	adds	r3, #2
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	e008      	b.n	8003904 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	b292      	uxth	r2, r2
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3301      	adds	r3, #1
 8003902:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1cb      	bne.n	80038ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	2140      	movs	r1, #64	; 0x40
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fb84 	bl	800403a <UART_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e005      	b.n	8003948 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3720      	adds	r7, #32
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003950:	b5b0      	push	{r4, r5, r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4313      	orrs	r3, r2
 8003972:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4bad      	ldr	r3, [pc, #692]	; (8003c30 <UART_SetConfig+0x2e0>)
 800397c:	4013      	ands	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	69f9      	ldr	r1, [r7, #28]
 8003984:	430b      	orrs	r3, r1
 8003986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4aa2      	ldr	r2, [pc, #648]	; (8003c34 <UART_SetConfig+0x2e4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a99      	ldr	r2, [pc, #612]	; (8003c38 <UART_SetConfig+0x2e8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d121      	bne.n	8003a1a <UART_SetConfig+0xca>
 80039d6:	4b99      	ldr	r3, [pc, #612]	; (8003c3c <UART_SetConfig+0x2ec>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d817      	bhi.n	8003a14 <UART_SetConfig+0xc4>
 80039e4:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <UART_SetConfig+0x9c>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a09 	.word	0x08003a09
 80039f4:	08003a03 	.word	0x08003a03
 80039f8:	08003a0f 	.word	0x08003a0f
 80039fc:	2301      	movs	r3, #1
 80039fe:	76fb      	strb	r3, [r7, #27]
 8003a00:	e0e7      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003a02:	2302      	movs	r3, #2
 8003a04:	76fb      	strb	r3, [r7, #27]
 8003a06:	e0e4      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	76fb      	strb	r3, [r7, #27]
 8003a0c:	e0e1      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003a0e:	2308      	movs	r3, #8
 8003a10:	76fb      	strb	r3, [r7, #27]
 8003a12:	e0de      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003a14:	2310      	movs	r3, #16
 8003a16:	76fb      	strb	r3, [r7, #27]
 8003a18:	e0db      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a88      	ldr	r2, [pc, #544]	; (8003c40 <UART_SetConfig+0x2f0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d132      	bne.n	8003a8a <UART_SetConfig+0x13a>
 8003a24:	4b85      	ldr	r3, [pc, #532]	; (8003c3c <UART_SetConfig+0x2ec>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d828      	bhi.n	8003a84 <UART_SetConfig+0x134>
 8003a32:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <UART_SetConfig+0xe8>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a6d 	.word	0x08003a6d
 8003a3c:	08003a85 	.word	0x08003a85
 8003a40:	08003a85 	.word	0x08003a85
 8003a44:	08003a85 	.word	0x08003a85
 8003a48:	08003a79 	.word	0x08003a79
 8003a4c:	08003a85 	.word	0x08003a85
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003a85 	.word	0x08003a85
 8003a58:	08003a73 	.word	0x08003a73
 8003a5c:	08003a85 	.word	0x08003a85
 8003a60:	08003a85 	.word	0x08003a85
 8003a64:	08003a85 	.word	0x08003a85
 8003a68:	08003a7f 	.word	0x08003a7f
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	76fb      	strb	r3, [r7, #27]
 8003a70:	e0af      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003a72:	2302      	movs	r3, #2
 8003a74:	76fb      	strb	r3, [r7, #27]
 8003a76:	e0ac      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	76fb      	strb	r3, [r7, #27]
 8003a7c:	e0a9      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003a7e:	2308      	movs	r3, #8
 8003a80:	76fb      	strb	r3, [r7, #27]
 8003a82:	e0a6      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003a84:	2310      	movs	r3, #16
 8003a86:	76fb      	strb	r3, [r7, #27]
 8003a88:	e0a3      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a6d      	ldr	r2, [pc, #436]	; (8003c44 <UART_SetConfig+0x2f4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d120      	bne.n	8003ad6 <UART_SetConfig+0x186>
 8003a94:	4b69      	ldr	r3, [pc, #420]	; (8003c3c <UART_SetConfig+0x2ec>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a9e:	2b30      	cmp	r3, #48	; 0x30
 8003aa0:	d013      	beq.n	8003aca <UART_SetConfig+0x17a>
 8003aa2:	2b30      	cmp	r3, #48	; 0x30
 8003aa4:	d814      	bhi.n	8003ad0 <UART_SetConfig+0x180>
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d009      	beq.n	8003abe <UART_SetConfig+0x16e>
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d810      	bhi.n	8003ad0 <UART_SetConfig+0x180>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <UART_SetConfig+0x168>
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d006      	beq.n	8003ac4 <UART_SetConfig+0x174>
 8003ab6:	e00b      	b.n	8003ad0 <UART_SetConfig+0x180>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	76fb      	strb	r3, [r7, #27]
 8003abc:	e089      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	76fb      	strb	r3, [r7, #27]
 8003ac2:	e086      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	76fb      	strb	r3, [r7, #27]
 8003ac8:	e083      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003aca:	2308      	movs	r3, #8
 8003acc:	76fb      	strb	r3, [r7, #27]
 8003ace:	e080      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	76fb      	strb	r3, [r7, #27]
 8003ad4:	e07d      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a5b      	ldr	r2, [pc, #364]	; (8003c48 <UART_SetConfig+0x2f8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d120      	bne.n	8003b22 <UART_SetConfig+0x1d2>
 8003ae0:	4b56      	ldr	r3, [pc, #344]	; (8003c3c <UART_SetConfig+0x2ec>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003aea:	2bc0      	cmp	r3, #192	; 0xc0
 8003aec:	d013      	beq.n	8003b16 <UART_SetConfig+0x1c6>
 8003aee:	2bc0      	cmp	r3, #192	; 0xc0
 8003af0:	d814      	bhi.n	8003b1c <UART_SetConfig+0x1cc>
 8003af2:	2b80      	cmp	r3, #128	; 0x80
 8003af4:	d009      	beq.n	8003b0a <UART_SetConfig+0x1ba>
 8003af6:	2b80      	cmp	r3, #128	; 0x80
 8003af8:	d810      	bhi.n	8003b1c <UART_SetConfig+0x1cc>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <UART_SetConfig+0x1b4>
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d006      	beq.n	8003b10 <UART_SetConfig+0x1c0>
 8003b02:	e00b      	b.n	8003b1c <UART_SetConfig+0x1cc>
 8003b04:	2300      	movs	r3, #0
 8003b06:	76fb      	strb	r3, [r7, #27]
 8003b08:	e063      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	76fb      	strb	r3, [r7, #27]
 8003b0e:	e060      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003b10:	2304      	movs	r3, #4
 8003b12:	76fb      	strb	r3, [r7, #27]
 8003b14:	e05d      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003b16:	2308      	movs	r3, #8
 8003b18:	76fb      	strb	r3, [r7, #27]
 8003b1a:	e05a      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	76fb      	strb	r3, [r7, #27]
 8003b20:	e057      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a49      	ldr	r2, [pc, #292]	; (8003c4c <UART_SetConfig+0x2fc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d125      	bne.n	8003b78 <UART_SetConfig+0x228>
 8003b2c:	4b43      	ldr	r3, [pc, #268]	; (8003c3c <UART_SetConfig+0x2ec>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b3a:	d017      	beq.n	8003b6c <UART_SetConfig+0x21c>
 8003b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b40:	d817      	bhi.n	8003b72 <UART_SetConfig+0x222>
 8003b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b46:	d00b      	beq.n	8003b60 <UART_SetConfig+0x210>
 8003b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4c:	d811      	bhi.n	8003b72 <UART_SetConfig+0x222>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <UART_SetConfig+0x20a>
 8003b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b56:	d006      	beq.n	8003b66 <UART_SetConfig+0x216>
 8003b58:	e00b      	b.n	8003b72 <UART_SetConfig+0x222>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	76fb      	strb	r3, [r7, #27]
 8003b5e:	e038      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003b60:	2302      	movs	r3, #2
 8003b62:	76fb      	strb	r3, [r7, #27]
 8003b64:	e035      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003b66:	2304      	movs	r3, #4
 8003b68:	76fb      	strb	r3, [r7, #27]
 8003b6a:	e032      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	76fb      	strb	r3, [r7, #27]
 8003b70:	e02f      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003b72:	2310      	movs	r3, #16
 8003b74:	76fb      	strb	r3, [r7, #27]
 8003b76:	e02c      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a2d      	ldr	r2, [pc, #180]	; (8003c34 <UART_SetConfig+0x2e4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d125      	bne.n	8003bce <UART_SetConfig+0x27e>
 8003b82:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <UART_SetConfig+0x2ec>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b90:	d017      	beq.n	8003bc2 <UART_SetConfig+0x272>
 8003b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b96:	d817      	bhi.n	8003bc8 <UART_SetConfig+0x278>
 8003b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9c:	d00b      	beq.n	8003bb6 <UART_SetConfig+0x266>
 8003b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba2:	d811      	bhi.n	8003bc8 <UART_SetConfig+0x278>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <UART_SetConfig+0x260>
 8003ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bac:	d006      	beq.n	8003bbc <UART_SetConfig+0x26c>
 8003bae:	e00b      	b.n	8003bc8 <UART_SetConfig+0x278>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	76fb      	strb	r3, [r7, #27]
 8003bb4:	e00d      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	76fb      	strb	r3, [r7, #27]
 8003bba:	e00a      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	76fb      	strb	r3, [r7, #27]
 8003bc0:	e007      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	76fb      	strb	r3, [r7, #27]
 8003bc6:	e004      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	76fb      	strb	r3, [r7, #27]
 8003bcc:	e001      	b.n	8003bd2 <UART_SetConfig+0x282>
 8003bce:	2310      	movs	r3, #16
 8003bd0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <UART_SetConfig+0x2e4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	f040 8087 	bne.w	8003cec <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bde:	7efb      	ldrb	r3, [r7, #27]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d837      	bhi.n	8003c54 <UART_SetConfig+0x304>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0x29c>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c55 	.word	0x08003c55
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c55 	.word	0x08003c55
 8003bfc:	08003c1f 	.word	0x08003c1f
 8003c00:	08003c55 	.word	0x08003c55
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003c55 	.word	0x08003c55
 8003c0c:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7fe fbe0 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8003c14:	6178      	str	r0, [r7, #20]
        break;
 8003c16:	e022      	b.n	8003c5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <UART_SetConfig+0x300>)
 8003c1a:	617b      	str	r3, [r7, #20]
        break;
 8003c1c:	e01f      	b.n	8003c5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7fe fb41 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8003c22:	6178      	str	r0, [r7, #20]
        break;
 8003c24:	e01b      	b.n	8003c5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2a:	617b      	str	r3, [r7, #20]
        break;
 8003c2c:	e017      	b.n	8003c5e <UART_SetConfig+0x30e>
 8003c2e:	bf00      	nop
 8003c30:	efff69f3 	.word	0xefff69f3
 8003c34:	40008000 	.word	0x40008000
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40004400 	.word	0x40004400
 8003c44:	40004800 	.word	0x40004800
 8003c48:	40004c00 	.word	0x40004c00
 8003c4c:	40005000 	.word	0x40005000
 8003c50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	76bb      	strb	r3, [r7, #26]
        break;
 8003c5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80f1 	beq.w	8003e48 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d305      	bcc.n	8003c82 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d902      	bls.n	8003c88 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	76bb      	strb	r3, [r7, #26]
 8003c86:	e0df      	b.n	8003e48 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	020b      	lsls	r3, r1, #8
 8003c9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c9e:	0202      	lsls	r2, r0, #8
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	6849      	ldr	r1, [r1, #4]
 8003ca4:	0849      	lsrs	r1, r1, #1
 8003ca6:	4608      	mov	r0, r1
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	1814      	adds	r4, r2, r0
 8003cae:	eb43 0501 	adc.w	r5, r3, r1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f7fc fa82 	bl	80001c8 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd2:	d308      	bcc.n	8003ce6 <UART_SetConfig+0x396>
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cda:	d204      	bcs.n	8003ce6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	e0b0      	b.n	8003e48 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	76bb      	strb	r3, [r7, #26]
 8003cea:	e0ad      	b.n	8003e48 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf4:	d15c      	bne.n	8003db0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003cf6:	7efb      	ldrb	r3, [r7, #27]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d828      	bhi.n	8003d4e <UART_SetConfig+0x3fe>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <UART_SetConfig+0x3b4>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d4f 	.word	0x08003d4f
 8003d14:	08003d3f 	.word	0x08003d3f
 8003d18:	08003d4f 	.word	0x08003d4f
 8003d1c:	08003d4f 	.word	0x08003d4f
 8003d20:	08003d4f 	.word	0x08003d4f
 8003d24:	08003d47 	.word	0x08003d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7fe fb54 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	6178      	str	r0, [r7, #20]
        break;
 8003d2e:	e013      	b.n	8003d58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d30:	f7fe fb66 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 8003d34:	6178      	str	r0, [r7, #20]
        break;
 8003d36:	e00f      	b.n	8003d58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d38:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <UART_SetConfig+0x510>)
 8003d3a:	617b      	str	r3, [r7, #20]
        break;
 8003d3c:	e00c      	b.n	8003d58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3e:	f7fe fab1 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8003d42:	6178      	str	r0, [r7, #20]
        break;
 8003d44:	e008      	b.n	8003d58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4a:	617b      	str	r3, [r7, #20]
        break;
 8003d4c:	e004      	b.n	8003d58 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	76bb      	strb	r3, [r7, #26]
        break;
 8003d56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d074      	beq.n	8003e48 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005a      	lsls	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	085b      	lsrs	r3, r3, #1
 8003d68:	441a      	add	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b0f      	cmp	r3, #15
 8003d7a:	d916      	bls.n	8003daa <UART_SetConfig+0x45a>
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d82:	d212      	bcs.n	8003daa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f023 030f 	bic.w	r3, r3, #15
 8003d8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	085b      	lsrs	r3, r3, #1
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	89fb      	ldrh	r3, [r7, #14]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	89fa      	ldrh	r2, [r7, #14]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	e04e      	b.n	8003e48 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	76bb      	strb	r3, [r7, #26]
 8003dae:	e04b      	b.n	8003e48 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003db0:	7efb      	ldrb	r3, [r7, #27]
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d827      	bhi.n	8003e06 <UART_SetConfig+0x4b6>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <UART_SetConfig+0x46c>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	08003df1 	.word	0x08003df1
 8003dc8:	08003e07 	.word	0x08003e07
 8003dcc:	08003df7 	.word	0x08003df7
 8003dd0:	08003e07 	.word	0x08003e07
 8003dd4:	08003e07 	.word	0x08003e07
 8003dd8:	08003e07 	.word	0x08003e07
 8003ddc:	08003dff 	.word	0x08003dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de0:	f7fe faf8 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8003de4:	6178      	str	r0, [r7, #20]
        break;
 8003de6:	e013      	b.n	8003e10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7fe fb0a 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 8003dec:	6178      	str	r0, [r7, #20]
        break;
 8003dee:	e00f      	b.n	8003e10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <UART_SetConfig+0x510>)
 8003df2:	617b      	str	r3, [r7, #20]
        break;
 8003df4:	e00c      	b.n	8003e10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df6:	f7fe fa55 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8003dfa:	6178      	str	r0, [r7, #20]
        break;
 8003dfc:	e008      	b.n	8003e10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	617b      	str	r3, [r7, #20]
        break;
 8003e04:	e004      	b.n	8003e10 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	76bb      	strb	r3, [r7, #26]
        break;
 8003e0e:	bf00      	nop
    }

    if (pclk != 0U)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d018      	beq.n	8003e48 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	085a      	lsrs	r2, r3, #1
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	441a      	add	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d908      	bls.n	8003e44 <UART_SetConfig+0x4f4>
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d204      	bcs.n	8003e44 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	e001      	b.n	8003e48 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e54:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	00f42400 	.word	0x00f42400

08003e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f62:	d10a      	bne.n	8003f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fb8:	f7fd f8dc 	bl	8001174 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d10e      	bne.n	8003fea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f82d 	bl	800403a <UART_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e023      	b.n	8004032 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d10e      	bne.n	8004016 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f817 	bl	800403a <UART_WaitOnFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e00d      	b.n	8004032 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	4613      	mov	r3, r2
 8004048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404a:	e05e      	b.n	800410a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d05a      	beq.n	800410a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004054:	f7fd f88e 	bl	8001174 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	429a      	cmp	r2, r3
 8004062:	d302      	bcc.n	800406a <UART_WaitOnFlagUntilTimeout+0x30>
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11b      	bne.n	80040a2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004078:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e043      	b.n	800412a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d02c      	beq.n	800410a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040be:	d124      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040d8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e00f      	b.n	800412a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4013      	ands	r3, r2
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	bf0c      	ite	eq
 800411a:	2301      	moveq	r3, #1
 800411c:	2300      	movne	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	429a      	cmp	r2, r3
 8004126:	d091      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <__errno>:
 8004134:	4b01      	ldr	r3, [pc, #4]	; (800413c <__errno+0x8>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	2000000c 	.word	0x2000000c

08004140 <__libc_init_array>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4d0d      	ldr	r5, [pc, #52]	; (8004178 <__libc_init_array+0x38>)
 8004144:	4c0d      	ldr	r4, [pc, #52]	; (800417c <__libc_init_array+0x3c>)
 8004146:	1b64      	subs	r4, r4, r5
 8004148:	10a4      	asrs	r4, r4, #2
 800414a:	2600      	movs	r6, #0
 800414c:	42a6      	cmp	r6, r4
 800414e:	d109      	bne.n	8004164 <__libc_init_array+0x24>
 8004150:	4d0b      	ldr	r5, [pc, #44]	; (8004180 <__libc_init_array+0x40>)
 8004152:	4c0c      	ldr	r4, [pc, #48]	; (8004184 <__libc_init_array+0x44>)
 8004154:	f000 fce6 	bl	8004b24 <_init>
 8004158:	1b64      	subs	r4, r4, r5
 800415a:	10a4      	asrs	r4, r4, #2
 800415c:	2600      	movs	r6, #0
 800415e:	42a6      	cmp	r6, r4
 8004160:	d105      	bne.n	800416e <__libc_init_array+0x2e>
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	f855 3b04 	ldr.w	r3, [r5], #4
 8004168:	4798      	blx	r3
 800416a:	3601      	adds	r6, #1
 800416c:	e7ee      	b.n	800414c <__libc_init_array+0xc>
 800416e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004172:	4798      	blx	r3
 8004174:	3601      	adds	r6, #1
 8004176:	e7f2      	b.n	800415e <__libc_init_array+0x1e>
 8004178:	08004c08 	.word	0x08004c08
 800417c:	08004c08 	.word	0x08004c08
 8004180:	08004c08 	.word	0x08004c08
 8004184:	08004c0c 	.word	0x08004c0c

08004188 <memset>:
 8004188:	4402      	add	r2, r0
 800418a:	4603      	mov	r3, r0
 800418c:	4293      	cmp	r3, r2
 800418e:	d100      	bne.n	8004192 <memset+0xa>
 8004190:	4770      	bx	lr
 8004192:	f803 1b01 	strb.w	r1, [r3], #1
 8004196:	e7f9      	b.n	800418c <memset+0x4>

08004198 <_puts_r>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	460e      	mov	r6, r1
 800419c:	4605      	mov	r5, r0
 800419e:	b118      	cbz	r0, 80041a8 <_puts_r+0x10>
 80041a0:	6983      	ldr	r3, [r0, #24]
 80041a2:	b90b      	cbnz	r3, 80041a8 <_puts_r+0x10>
 80041a4:	f000 fa48 	bl	8004638 <__sinit>
 80041a8:	69ab      	ldr	r3, [r5, #24]
 80041aa:	68ac      	ldr	r4, [r5, #8]
 80041ac:	b913      	cbnz	r3, 80041b4 <_puts_r+0x1c>
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 fa42 	bl	8004638 <__sinit>
 80041b4:	4b2c      	ldr	r3, [pc, #176]	; (8004268 <_puts_r+0xd0>)
 80041b6:	429c      	cmp	r4, r3
 80041b8:	d120      	bne.n	80041fc <_puts_r+0x64>
 80041ba:	686c      	ldr	r4, [r5, #4]
 80041bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041be:	07db      	lsls	r3, r3, #31
 80041c0:	d405      	bmi.n	80041ce <_puts_r+0x36>
 80041c2:	89a3      	ldrh	r3, [r4, #12]
 80041c4:	0598      	lsls	r0, r3, #22
 80041c6:	d402      	bmi.n	80041ce <_puts_r+0x36>
 80041c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ca:	f000 fad3 	bl	8004774 <__retarget_lock_acquire_recursive>
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	0719      	lsls	r1, r3, #28
 80041d2:	d51d      	bpl.n	8004210 <_puts_r+0x78>
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	b1db      	cbz	r3, 8004210 <_puts_r+0x78>
 80041d8:	3e01      	subs	r6, #1
 80041da:	68a3      	ldr	r3, [r4, #8]
 80041dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041e0:	3b01      	subs	r3, #1
 80041e2:	60a3      	str	r3, [r4, #8]
 80041e4:	bb39      	cbnz	r1, 8004236 <_puts_r+0x9e>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da38      	bge.n	800425c <_puts_r+0xc4>
 80041ea:	4622      	mov	r2, r4
 80041ec:	210a      	movs	r1, #10
 80041ee:	4628      	mov	r0, r5
 80041f0:	f000 f848 	bl	8004284 <__swbuf_r>
 80041f4:	3001      	adds	r0, #1
 80041f6:	d011      	beq.n	800421c <_puts_r+0x84>
 80041f8:	250a      	movs	r5, #10
 80041fa:	e011      	b.n	8004220 <_puts_r+0x88>
 80041fc:	4b1b      	ldr	r3, [pc, #108]	; (800426c <_puts_r+0xd4>)
 80041fe:	429c      	cmp	r4, r3
 8004200:	d101      	bne.n	8004206 <_puts_r+0x6e>
 8004202:	68ac      	ldr	r4, [r5, #8]
 8004204:	e7da      	b.n	80041bc <_puts_r+0x24>
 8004206:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <_puts_r+0xd8>)
 8004208:	429c      	cmp	r4, r3
 800420a:	bf08      	it	eq
 800420c:	68ec      	ldreq	r4, [r5, #12]
 800420e:	e7d5      	b.n	80041bc <_puts_r+0x24>
 8004210:	4621      	mov	r1, r4
 8004212:	4628      	mov	r0, r5
 8004214:	f000 f888 	bl	8004328 <__swsetup_r>
 8004218:	2800      	cmp	r0, #0
 800421a:	d0dd      	beq.n	80041d8 <_puts_r+0x40>
 800421c:	f04f 35ff 	mov.w	r5, #4294967295
 8004220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004222:	07da      	lsls	r2, r3, #31
 8004224:	d405      	bmi.n	8004232 <_puts_r+0x9a>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	059b      	lsls	r3, r3, #22
 800422a:	d402      	bmi.n	8004232 <_puts_r+0x9a>
 800422c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800422e:	f000 faa2 	bl	8004776 <__retarget_lock_release_recursive>
 8004232:	4628      	mov	r0, r5
 8004234:	bd70      	pop	{r4, r5, r6, pc}
 8004236:	2b00      	cmp	r3, #0
 8004238:	da04      	bge.n	8004244 <_puts_r+0xac>
 800423a:	69a2      	ldr	r2, [r4, #24]
 800423c:	429a      	cmp	r2, r3
 800423e:	dc06      	bgt.n	800424e <_puts_r+0xb6>
 8004240:	290a      	cmp	r1, #10
 8004242:	d004      	beq.n	800424e <_puts_r+0xb6>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	6022      	str	r2, [r4, #0]
 800424a:	7019      	strb	r1, [r3, #0]
 800424c:	e7c5      	b.n	80041da <_puts_r+0x42>
 800424e:	4622      	mov	r2, r4
 8004250:	4628      	mov	r0, r5
 8004252:	f000 f817 	bl	8004284 <__swbuf_r>
 8004256:	3001      	adds	r0, #1
 8004258:	d1bf      	bne.n	80041da <_puts_r+0x42>
 800425a:	e7df      	b.n	800421c <_puts_r+0x84>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	250a      	movs	r5, #10
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	6022      	str	r2, [r4, #0]
 8004264:	701d      	strb	r5, [r3, #0]
 8004266:	e7db      	b.n	8004220 <_puts_r+0x88>
 8004268:	08004bc0 	.word	0x08004bc0
 800426c:	08004be0 	.word	0x08004be0
 8004270:	08004ba0 	.word	0x08004ba0

08004274 <puts>:
 8004274:	4b02      	ldr	r3, [pc, #8]	; (8004280 <puts+0xc>)
 8004276:	4601      	mov	r1, r0
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	f7ff bf8d 	b.w	8004198 <_puts_r>
 800427e:	bf00      	nop
 8004280:	2000000c 	.word	0x2000000c

08004284 <__swbuf_r>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	460e      	mov	r6, r1
 8004288:	4614      	mov	r4, r2
 800428a:	4605      	mov	r5, r0
 800428c:	b118      	cbz	r0, 8004296 <__swbuf_r+0x12>
 800428e:	6983      	ldr	r3, [r0, #24]
 8004290:	b90b      	cbnz	r3, 8004296 <__swbuf_r+0x12>
 8004292:	f000 f9d1 	bl	8004638 <__sinit>
 8004296:	4b21      	ldr	r3, [pc, #132]	; (800431c <__swbuf_r+0x98>)
 8004298:	429c      	cmp	r4, r3
 800429a:	d12b      	bne.n	80042f4 <__swbuf_r+0x70>
 800429c:	686c      	ldr	r4, [r5, #4]
 800429e:	69a3      	ldr	r3, [r4, #24]
 80042a0:	60a3      	str	r3, [r4, #8]
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	071a      	lsls	r2, r3, #28
 80042a6:	d52f      	bpl.n	8004308 <__swbuf_r+0x84>
 80042a8:	6923      	ldr	r3, [r4, #16]
 80042aa:	b36b      	cbz	r3, 8004308 <__swbuf_r+0x84>
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	6820      	ldr	r0, [r4, #0]
 80042b0:	1ac0      	subs	r0, r0, r3
 80042b2:	6963      	ldr	r3, [r4, #20]
 80042b4:	b2f6      	uxtb	r6, r6
 80042b6:	4283      	cmp	r3, r0
 80042b8:	4637      	mov	r7, r6
 80042ba:	dc04      	bgt.n	80042c6 <__swbuf_r+0x42>
 80042bc:	4621      	mov	r1, r4
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 f926 	bl	8004510 <_fflush_r>
 80042c4:	bb30      	cbnz	r0, 8004314 <__swbuf_r+0x90>
 80042c6:	68a3      	ldr	r3, [r4, #8]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	60a3      	str	r3, [r4, #8]
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	6022      	str	r2, [r4, #0]
 80042d2:	701e      	strb	r6, [r3, #0]
 80042d4:	6963      	ldr	r3, [r4, #20]
 80042d6:	3001      	adds	r0, #1
 80042d8:	4283      	cmp	r3, r0
 80042da:	d004      	beq.n	80042e6 <__swbuf_r+0x62>
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	07db      	lsls	r3, r3, #31
 80042e0:	d506      	bpl.n	80042f0 <__swbuf_r+0x6c>
 80042e2:	2e0a      	cmp	r6, #10
 80042e4:	d104      	bne.n	80042f0 <__swbuf_r+0x6c>
 80042e6:	4621      	mov	r1, r4
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 f911 	bl	8004510 <_fflush_r>
 80042ee:	b988      	cbnz	r0, 8004314 <__swbuf_r+0x90>
 80042f0:	4638      	mov	r0, r7
 80042f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <__swbuf_r+0x9c>)
 80042f6:	429c      	cmp	r4, r3
 80042f8:	d101      	bne.n	80042fe <__swbuf_r+0x7a>
 80042fa:	68ac      	ldr	r4, [r5, #8]
 80042fc:	e7cf      	b.n	800429e <__swbuf_r+0x1a>
 80042fe:	4b09      	ldr	r3, [pc, #36]	; (8004324 <__swbuf_r+0xa0>)
 8004300:	429c      	cmp	r4, r3
 8004302:	bf08      	it	eq
 8004304:	68ec      	ldreq	r4, [r5, #12]
 8004306:	e7ca      	b.n	800429e <__swbuf_r+0x1a>
 8004308:	4621      	mov	r1, r4
 800430a:	4628      	mov	r0, r5
 800430c:	f000 f80c 	bl	8004328 <__swsetup_r>
 8004310:	2800      	cmp	r0, #0
 8004312:	d0cb      	beq.n	80042ac <__swbuf_r+0x28>
 8004314:	f04f 37ff 	mov.w	r7, #4294967295
 8004318:	e7ea      	b.n	80042f0 <__swbuf_r+0x6c>
 800431a:	bf00      	nop
 800431c:	08004bc0 	.word	0x08004bc0
 8004320:	08004be0 	.word	0x08004be0
 8004324:	08004ba0 	.word	0x08004ba0

08004328 <__swsetup_r>:
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <__swsetup_r+0xcc>)
 800432a:	b570      	push	{r4, r5, r6, lr}
 800432c:	681d      	ldr	r5, [r3, #0]
 800432e:	4606      	mov	r6, r0
 8004330:	460c      	mov	r4, r1
 8004332:	b125      	cbz	r5, 800433e <__swsetup_r+0x16>
 8004334:	69ab      	ldr	r3, [r5, #24]
 8004336:	b913      	cbnz	r3, 800433e <__swsetup_r+0x16>
 8004338:	4628      	mov	r0, r5
 800433a:	f000 f97d 	bl	8004638 <__sinit>
 800433e:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <__swsetup_r+0xd0>)
 8004340:	429c      	cmp	r4, r3
 8004342:	d10f      	bne.n	8004364 <__swsetup_r+0x3c>
 8004344:	686c      	ldr	r4, [r5, #4]
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800434c:	0719      	lsls	r1, r3, #28
 800434e:	d42c      	bmi.n	80043aa <__swsetup_r+0x82>
 8004350:	06dd      	lsls	r5, r3, #27
 8004352:	d411      	bmi.n	8004378 <__swsetup_r+0x50>
 8004354:	2309      	movs	r3, #9
 8004356:	6033      	str	r3, [r6, #0]
 8004358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800435c:	81a3      	strh	r3, [r4, #12]
 800435e:	f04f 30ff 	mov.w	r0, #4294967295
 8004362:	e03e      	b.n	80043e2 <__swsetup_r+0xba>
 8004364:	4b25      	ldr	r3, [pc, #148]	; (80043fc <__swsetup_r+0xd4>)
 8004366:	429c      	cmp	r4, r3
 8004368:	d101      	bne.n	800436e <__swsetup_r+0x46>
 800436a:	68ac      	ldr	r4, [r5, #8]
 800436c:	e7eb      	b.n	8004346 <__swsetup_r+0x1e>
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <__swsetup_r+0xd8>)
 8004370:	429c      	cmp	r4, r3
 8004372:	bf08      	it	eq
 8004374:	68ec      	ldreq	r4, [r5, #12]
 8004376:	e7e6      	b.n	8004346 <__swsetup_r+0x1e>
 8004378:	0758      	lsls	r0, r3, #29
 800437a:	d512      	bpl.n	80043a2 <__swsetup_r+0x7a>
 800437c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800437e:	b141      	cbz	r1, 8004392 <__swsetup_r+0x6a>
 8004380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004384:	4299      	cmp	r1, r3
 8004386:	d002      	beq.n	800438e <__swsetup_r+0x66>
 8004388:	4630      	mov	r0, r6
 800438a:	f000 fa59 	bl	8004840 <_free_r>
 800438e:	2300      	movs	r3, #0
 8004390:	6363      	str	r3, [r4, #52]	; 0x34
 8004392:	89a3      	ldrh	r3, [r4, #12]
 8004394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004398:	81a3      	strh	r3, [r4, #12]
 800439a:	2300      	movs	r3, #0
 800439c:	6063      	str	r3, [r4, #4]
 800439e:	6923      	ldr	r3, [r4, #16]
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	f043 0308 	orr.w	r3, r3, #8
 80043a8:	81a3      	strh	r3, [r4, #12]
 80043aa:	6923      	ldr	r3, [r4, #16]
 80043ac:	b94b      	cbnz	r3, 80043c2 <__swsetup_r+0x9a>
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b8:	d003      	beq.n	80043c2 <__swsetup_r+0x9a>
 80043ba:	4621      	mov	r1, r4
 80043bc:	4630      	mov	r0, r6
 80043be:	f000 f9ff 	bl	80047c0 <__smakebuf_r>
 80043c2:	89a0      	ldrh	r0, [r4, #12]
 80043c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043c8:	f010 0301 	ands.w	r3, r0, #1
 80043cc:	d00a      	beq.n	80043e4 <__swsetup_r+0xbc>
 80043ce:	2300      	movs	r3, #0
 80043d0:	60a3      	str	r3, [r4, #8]
 80043d2:	6963      	ldr	r3, [r4, #20]
 80043d4:	425b      	negs	r3, r3
 80043d6:	61a3      	str	r3, [r4, #24]
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	b943      	cbnz	r3, 80043ee <__swsetup_r+0xc6>
 80043dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043e0:	d1ba      	bne.n	8004358 <__swsetup_r+0x30>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	0781      	lsls	r1, r0, #30
 80043e6:	bf58      	it	pl
 80043e8:	6963      	ldrpl	r3, [r4, #20]
 80043ea:	60a3      	str	r3, [r4, #8]
 80043ec:	e7f4      	b.n	80043d8 <__swsetup_r+0xb0>
 80043ee:	2000      	movs	r0, #0
 80043f0:	e7f7      	b.n	80043e2 <__swsetup_r+0xba>
 80043f2:	bf00      	nop
 80043f4:	2000000c 	.word	0x2000000c
 80043f8:	08004bc0 	.word	0x08004bc0
 80043fc:	08004be0 	.word	0x08004be0
 8004400:	08004ba0 	.word	0x08004ba0

08004404 <__sflush_r>:
 8004404:	898a      	ldrh	r2, [r1, #12]
 8004406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800440a:	4605      	mov	r5, r0
 800440c:	0710      	lsls	r0, r2, #28
 800440e:	460c      	mov	r4, r1
 8004410:	d458      	bmi.n	80044c4 <__sflush_r+0xc0>
 8004412:	684b      	ldr	r3, [r1, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	dc05      	bgt.n	8004424 <__sflush_r+0x20>
 8004418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	dc02      	bgt.n	8004424 <__sflush_r+0x20>
 800441e:	2000      	movs	r0, #0
 8004420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004426:	2e00      	cmp	r6, #0
 8004428:	d0f9      	beq.n	800441e <__sflush_r+0x1a>
 800442a:	2300      	movs	r3, #0
 800442c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004430:	682f      	ldr	r7, [r5, #0]
 8004432:	602b      	str	r3, [r5, #0]
 8004434:	d032      	beq.n	800449c <__sflush_r+0x98>
 8004436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004438:	89a3      	ldrh	r3, [r4, #12]
 800443a:	075a      	lsls	r2, r3, #29
 800443c:	d505      	bpl.n	800444a <__sflush_r+0x46>
 800443e:	6863      	ldr	r3, [r4, #4]
 8004440:	1ac0      	subs	r0, r0, r3
 8004442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004444:	b10b      	cbz	r3, 800444a <__sflush_r+0x46>
 8004446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004448:	1ac0      	subs	r0, r0, r3
 800444a:	2300      	movs	r3, #0
 800444c:	4602      	mov	r2, r0
 800444e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004450:	6a21      	ldr	r1, [r4, #32]
 8004452:	4628      	mov	r0, r5
 8004454:	47b0      	blx	r6
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	d106      	bne.n	800446a <__sflush_r+0x66>
 800445c:	6829      	ldr	r1, [r5, #0]
 800445e:	291d      	cmp	r1, #29
 8004460:	d82c      	bhi.n	80044bc <__sflush_r+0xb8>
 8004462:	4a2a      	ldr	r2, [pc, #168]	; (800450c <__sflush_r+0x108>)
 8004464:	40ca      	lsrs	r2, r1
 8004466:	07d6      	lsls	r6, r2, #31
 8004468:	d528      	bpl.n	80044bc <__sflush_r+0xb8>
 800446a:	2200      	movs	r2, #0
 800446c:	6062      	str	r2, [r4, #4]
 800446e:	04d9      	lsls	r1, r3, #19
 8004470:	6922      	ldr	r2, [r4, #16]
 8004472:	6022      	str	r2, [r4, #0]
 8004474:	d504      	bpl.n	8004480 <__sflush_r+0x7c>
 8004476:	1c42      	adds	r2, r0, #1
 8004478:	d101      	bne.n	800447e <__sflush_r+0x7a>
 800447a:	682b      	ldr	r3, [r5, #0]
 800447c:	b903      	cbnz	r3, 8004480 <__sflush_r+0x7c>
 800447e:	6560      	str	r0, [r4, #84]	; 0x54
 8004480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004482:	602f      	str	r7, [r5, #0]
 8004484:	2900      	cmp	r1, #0
 8004486:	d0ca      	beq.n	800441e <__sflush_r+0x1a>
 8004488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800448c:	4299      	cmp	r1, r3
 800448e:	d002      	beq.n	8004496 <__sflush_r+0x92>
 8004490:	4628      	mov	r0, r5
 8004492:	f000 f9d5 	bl	8004840 <_free_r>
 8004496:	2000      	movs	r0, #0
 8004498:	6360      	str	r0, [r4, #52]	; 0x34
 800449a:	e7c1      	b.n	8004420 <__sflush_r+0x1c>
 800449c:	6a21      	ldr	r1, [r4, #32]
 800449e:	2301      	movs	r3, #1
 80044a0:	4628      	mov	r0, r5
 80044a2:	47b0      	blx	r6
 80044a4:	1c41      	adds	r1, r0, #1
 80044a6:	d1c7      	bne.n	8004438 <__sflush_r+0x34>
 80044a8:	682b      	ldr	r3, [r5, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0c4      	beq.n	8004438 <__sflush_r+0x34>
 80044ae:	2b1d      	cmp	r3, #29
 80044b0:	d001      	beq.n	80044b6 <__sflush_r+0xb2>
 80044b2:	2b16      	cmp	r3, #22
 80044b4:	d101      	bne.n	80044ba <__sflush_r+0xb6>
 80044b6:	602f      	str	r7, [r5, #0]
 80044b8:	e7b1      	b.n	800441e <__sflush_r+0x1a>
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c0:	81a3      	strh	r3, [r4, #12]
 80044c2:	e7ad      	b.n	8004420 <__sflush_r+0x1c>
 80044c4:	690f      	ldr	r7, [r1, #16]
 80044c6:	2f00      	cmp	r7, #0
 80044c8:	d0a9      	beq.n	800441e <__sflush_r+0x1a>
 80044ca:	0793      	lsls	r3, r2, #30
 80044cc:	680e      	ldr	r6, [r1, #0]
 80044ce:	bf08      	it	eq
 80044d0:	694b      	ldreq	r3, [r1, #20]
 80044d2:	600f      	str	r7, [r1, #0]
 80044d4:	bf18      	it	ne
 80044d6:	2300      	movne	r3, #0
 80044d8:	eba6 0807 	sub.w	r8, r6, r7
 80044dc:	608b      	str	r3, [r1, #8]
 80044de:	f1b8 0f00 	cmp.w	r8, #0
 80044e2:	dd9c      	ble.n	800441e <__sflush_r+0x1a>
 80044e4:	6a21      	ldr	r1, [r4, #32]
 80044e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044e8:	4643      	mov	r3, r8
 80044ea:	463a      	mov	r2, r7
 80044ec:	4628      	mov	r0, r5
 80044ee:	47b0      	blx	r6
 80044f0:	2800      	cmp	r0, #0
 80044f2:	dc06      	bgt.n	8004502 <__sflush_r+0xfe>
 80044f4:	89a3      	ldrh	r3, [r4, #12]
 80044f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044fa:	81a3      	strh	r3, [r4, #12]
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	e78e      	b.n	8004420 <__sflush_r+0x1c>
 8004502:	4407      	add	r7, r0
 8004504:	eba8 0800 	sub.w	r8, r8, r0
 8004508:	e7e9      	b.n	80044de <__sflush_r+0xda>
 800450a:	bf00      	nop
 800450c:	20400001 	.word	0x20400001

08004510 <_fflush_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	690b      	ldr	r3, [r1, #16]
 8004514:	4605      	mov	r5, r0
 8004516:	460c      	mov	r4, r1
 8004518:	b913      	cbnz	r3, 8004520 <_fflush_r+0x10>
 800451a:	2500      	movs	r5, #0
 800451c:	4628      	mov	r0, r5
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	b118      	cbz	r0, 800452a <_fflush_r+0x1a>
 8004522:	6983      	ldr	r3, [r0, #24]
 8004524:	b90b      	cbnz	r3, 800452a <_fflush_r+0x1a>
 8004526:	f000 f887 	bl	8004638 <__sinit>
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <_fflush_r+0x6c>)
 800452c:	429c      	cmp	r4, r3
 800452e:	d11b      	bne.n	8004568 <_fflush_r+0x58>
 8004530:	686c      	ldr	r4, [r5, #4]
 8004532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0ef      	beq.n	800451a <_fflush_r+0xa>
 800453a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800453c:	07d0      	lsls	r0, r2, #31
 800453e:	d404      	bmi.n	800454a <_fflush_r+0x3a>
 8004540:	0599      	lsls	r1, r3, #22
 8004542:	d402      	bmi.n	800454a <_fflush_r+0x3a>
 8004544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004546:	f000 f915 	bl	8004774 <__retarget_lock_acquire_recursive>
 800454a:	4628      	mov	r0, r5
 800454c:	4621      	mov	r1, r4
 800454e:	f7ff ff59 	bl	8004404 <__sflush_r>
 8004552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004554:	07da      	lsls	r2, r3, #31
 8004556:	4605      	mov	r5, r0
 8004558:	d4e0      	bmi.n	800451c <_fflush_r+0xc>
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	059b      	lsls	r3, r3, #22
 800455e:	d4dd      	bmi.n	800451c <_fflush_r+0xc>
 8004560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004562:	f000 f908 	bl	8004776 <__retarget_lock_release_recursive>
 8004566:	e7d9      	b.n	800451c <_fflush_r+0xc>
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <_fflush_r+0x70>)
 800456a:	429c      	cmp	r4, r3
 800456c:	d101      	bne.n	8004572 <_fflush_r+0x62>
 800456e:	68ac      	ldr	r4, [r5, #8]
 8004570:	e7df      	b.n	8004532 <_fflush_r+0x22>
 8004572:	4b04      	ldr	r3, [pc, #16]	; (8004584 <_fflush_r+0x74>)
 8004574:	429c      	cmp	r4, r3
 8004576:	bf08      	it	eq
 8004578:	68ec      	ldreq	r4, [r5, #12]
 800457a:	e7da      	b.n	8004532 <_fflush_r+0x22>
 800457c:	08004bc0 	.word	0x08004bc0
 8004580:	08004be0 	.word	0x08004be0
 8004584:	08004ba0 	.word	0x08004ba0

08004588 <std>:
 8004588:	2300      	movs	r3, #0
 800458a:	b510      	push	{r4, lr}
 800458c:	4604      	mov	r4, r0
 800458e:	e9c0 3300 	strd	r3, r3, [r0]
 8004592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004596:	6083      	str	r3, [r0, #8]
 8004598:	8181      	strh	r1, [r0, #12]
 800459a:	6643      	str	r3, [r0, #100]	; 0x64
 800459c:	81c2      	strh	r2, [r0, #14]
 800459e:	6183      	str	r3, [r0, #24]
 80045a0:	4619      	mov	r1, r3
 80045a2:	2208      	movs	r2, #8
 80045a4:	305c      	adds	r0, #92	; 0x5c
 80045a6:	f7ff fdef 	bl	8004188 <memset>
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <std+0x38>)
 80045ac:	6263      	str	r3, [r4, #36]	; 0x24
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <std+0x3c>)
 80045b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <std+0x40>)
 80045b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <std+0x44>)
 80045b8:	6224      	str	r4, [r4, #32]
 80045ba:	6323      	str	r3, [r4, #48]	; 0x30
 80045bc:	bd10      	pop	{r4, pc}
 80045be:	bf00      	nop
 80045c0:	080049b5 	.word	0x080049b5
 80045c4:	080049d7 	.word	0x080049d7
 80045c8:	08004a0f 	.word	0x08004a0f
 80045cc:	08004a33 	.word	0x08004a33

080045d0 <_cleanup_r>:
 80045d0:	4901      	ldr	r1, [pc, #4]	; (80045d8 <_cleanup_r+0x8>)
 80045d2:	f000 b8af 	b.w	8004734 <_fwalk_reent>
 80045d6:	bf00      	nop
 80045d8:	08004511 	.word	0x08004511

080045dc <__sfmoreglue>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	1e4a      	subs	r2, r1, #1
 80045e0:	2568      	movs	r5, #104	; 0x68
 80045e2:	4355      	muls	r5, r2
 80045e4:	460e      	mov	r6, r1
 80045e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045ea:	f000 f979 	bl	80048e0 <_malloc_r>
 80045ee:	4604      	mov	r4, r0
 80045f0:	b140      	cbz	r0, 8004604 <__sfmoreglue+0x28>
 80045f2:	2100      	movs	r1, #0
 80045f4:	e9c0 1600 	strd	r1, r6, [r0]
 80045f8:	300c      	adds	r0, #12
 80045fa:	60a0      	str	r0, [r4, #8]
 80045fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004600:	f7ff fdc2 	bl	8004188 <memset>
 8004604:	4620      	mov	r0, r4
 8004606:	bd70      	pop	{r4, r5, r6, pc}

08004608 <__sfp_lock_acquire>:
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <__sfp_lock_acquire+0x8>)
 800460a:	f000 b8b3 	b.w	8004774 <__retarget_lock_acquire_recursive>
 800460e:	bf00      	nop
 8004610:	2000014c 	.word	0x2000014c

08004614 <__sfp_lock_release>:
 8004614:	4801      	ldr	r0, [pc, #4]	; (800461c <__sfp_lock_release+0x8>)
 8004616:	f000 b8ae 	b.w	8004776 <__retarget_lock_release_recursive>
 800461a:	bf00      	nop
 800461c:	2000014c 	.word	0x2000014c

08004620 <__sinit_lock_acquire>:
 8004620:	4801      	ldr	r0, [pc, #4]	; (8004628 <__sinit_lock_acquire+0x8>)
 8004622:	f000 b8a7 	b.w	8004774 <__retarget_lock_acquire_recursive>
 8004626:	bf00      	nop
 8004628:	20000147 	.word	0x20000147

0800462c <__sinit_lock_release>:
 800462c:	4801      	ldr	r0, [pc, #4]	; (8004634 <__sinit_lock_release+0x8>)
 800462e:	f000 b8a2 	b.w	8004776 <__retarget_lock_release_recursive>
 8004632:	bf00      	nop
 8004634:	20000147 	.word	0x20000147

08004638 <__sinit>:
 8004638:	b510      	push	{r4, lr}
 800463a:	4604      	mov	r4, r0
 800463c:	f7ff fff0 	bl	8004620 <__sinit_lock_acquire>
 8004640:	69a3      	ldr	r3, [r4, #24]
 8004642:	b11b      	cbz	r3, 800464c <__sinit+0x14>
 8004644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004648:	f7ff bff0 	b.w	800462c <__sinit_lock_release>
 800464c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004650:	6523      	str	r3, [r4, #80]	; 0x50
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <__sinit+0x68>)
 8004654:	4a13      	ldr	r2, [pc, #76]	; (80046a4 <__sinit+0x6c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	62a2      	str	r2, [r4, #40]	; 0x28
 800465a:	42a3      	cmp	r3, r4
 800465c:	bf04      	itt	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	61a3      	streq	r3, [r4, #24]
 8004662:	4620      	mov	r0, r4
 8004664:	f000 f820 	bl	80046a8 <__sfp>
 8004668:	6060      	str	r0, [r4, #4]
 800466a:	4620      	mov	r0, r4
 800466c:	f000 f81c 	bl	80046a8 <__sfp>
 8004670:	60a0      	str	r0, [r4, #8]
 8004672:	4620      	mov	r0, r4
 8004674:	f000 f818 	bl	80046a8 <__sfp>
 8004678:	2200      	movs	r2, #0
 800467a:	60e0      	str	r0, [r4, #12]
 800467c:	2104      	movs	r1, #4
 800467e:	6860      	ldr	r0, [r4, #4]
 8004680:	f7ff ff82 	bl	8004588 <std>
 8004684:	68a0      	ldr	r0, [r4, #8]
 8004686:	2201      	movs	r2, #1
 8004688:	2109      	movs	r1, #9
 800468a:	f7ff ff7d 	bl	8004588 <std>
 800468e:	68e0      	ldr	r0, [r4, #12]
 8004690:	2202      	movs	r2, #2
 8004692:	2112      	movs	r1, #18
 8004694:	f7ff ff78 	bl	8004588 <std>
 8004698:	2301      	movs	r3, #1
 800469a:	61a3      	str	r3, [r4, #24]
 800469c:	e7d2      	b.n	8004644 <__sinit+0xc>
 800469e:	bf00      	nop
 80046a0:	08004b9c 	.word	0x08004b9c
 80046a4:	080045d1 	.word	0x080045d1

080046a8 <__sfp>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	4607      	mov	r7, r0
 80046ac:	f7ff ffac 	bl	8004608 <__sfp_lock_acquire>
 80046b0:	4b1e      	ldr	r3, [pc, #120]	; (800472c <__sfp+0x84>)
 80046b2:	681e      	ldr	r6, [r3, #0]
 80046b4:	69b3      	ldr	r3, [r6, #24]
 80046b6:	b913      	cbnz	r3, 80046be <__sfp+0x16>
 80046b8:	4630      	mov	r0, r6
 80046ba:	f7ff ffbd 	bl	8004638 <__sinit>
 80046be:	3648      	adds	r6, #72	; 0x48
 80046c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	d503      	bpl.n	80046d0 <__sfp+0x28>
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	b30b      	cbz	r3, 8004710 <__sfp+0x68>
 80046cc:	6836      	ldr	r6, [r6, #0]
 80046ce:	e7f7      	b.n	80046c0 <__sfp+0x18>
 80046d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046d4:	b9d5      	cbnz	r5, 800470c <__sfp+0x64>
 80046d6:	4b16      	ldr	r3, [pc, #88]	; (8004730 <__sfp+0x88>)
 80046d8:	60e3      	str	r3, [r4, #12]
 80046da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046de:	6665      	str	r5, [r4, #100]	; 0x64
 80046e0:	f000 f847 	bl	8004772 <__retarget_lock_init_recursive>
 80046e4:	f7ff ff96 	bl	8004614 <__sfp_lock_release>
 80046e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046f0:	6025      	str	r5, [r4, #0]
 80046f2:	61a5      	str	r5, [r4, #24]
 80046f4:	2208      	movs	r2, #8
 80046f6:	4629      	mov	r1, r5
 80046f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046fc:	f7ff fd44 	bl	8004188 <memset>
 8004700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004708:	4620      	mov	r0, r4
 800470a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800470c:	3468      	adds	r4, #104	; 0x68
 800470e:	e7d9      	b.n	80046c4 <__sfp+0x1c>
 8004710:	2104      	movs	r1, #4
 8004712:	4638      	mov	r0, r7
 8004714:	f7ff ff62 	bl	80045dc <__sfmoreglue>
 8004718:	4604      	mov	r4, r0
 800471a:	6030      	str	r0, [r6, #0]
 800471c:	2800      	cmp	r0, #0
 800471e:	d1d5      	bne.n	80046cc <__sfp+0x24>
 8004720:	f7ff ff78 	bl	8004614 <__sfp_lock_release>
 8004724:	230c      	movs	r3, #12
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	e7ee      	b.n	8004708 <__sfp+0x60>
 800472a:	bf00      	nop
 800472c:	08004b9c 	.word	0x08004b9c
 8004730:	ffff0001 	.word	0xffff0001

08004734 <_fwalk_reent>:
 8004734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004738:	4606      	mov	r6, r0
 800473a:	4688      	mov	r8, r1
 800473c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004740:	2700      	movs	r7, #0
 8004742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004746:	f1b9 0901 	subs.w	r9, r9, #1
 800474a:	d505      	bpl.n	8004758 <_fwalk_reent+0x24>
 800474c:	6824      	ldr	r4, [r4, #0]
 800474e:	2c00      	cmp	r4, #0
 8004750:	d1f7      	bne.n	8004742 <_fwalk_reent+0xe>
 8004752:	4638      	mov	r0, r7
 8004754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004758:	89ab      	ldrh	r3, [r5, #12]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d907      	bls.n	800476e <_fwalk_reent+0x3a>
 800475e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004762:	3301      	adds	r3, #1
 8004764:	d003      	beq.n	800476e <_fwalk_reent+0x3a>
 8004766:	4629      	mov	r1, r5
 8004768:	4630      	mov	r0, r6
 800476a:	47c0      	blx	r8
 800476c:	4307      	orrs	r7, r0
 800476e:	3568      	adds	r5, #104	; 0x68
 8004770:	e7e9      	b.n	8004746 <_fwalk_reent+0x12>

08004772 <__retarget_lock_init_recursive>:
 8004772:	4770      	bx	lr

08004774 <__retarget_lock_acquire_recursive>:
 8004774:	4770      	bx	lr

08004776 <__retarget_lock_release_recursive>:
 8004776:	4770      	bx	lr

08004778 <__swhatbuf_r>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	460e      	mov	r6, r1
 800477c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004780:	2900      	cmp	r1, #0
 8004782:	b096      	sub	sp, #88	; 0x58
 8004784:	4614      	mov	r4, r2
 8004786:	461d      	mov	r5, r3
 8004788:	da07      	bge.n	800479a <__swhatbuf_r+0x22>
 800478a:	2300      	movs	r3, #0
 800478c:	602b      	str	r3, [r5, #0]
 800478e:	89b3      	ldrh	r3, [r6, #12]
 8004790:	061a      	lsls	r2, r3, #24
 8004792:	d410      	bmi.n	80047b6 <__swhatbuf_r+0x3e>
 8004794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004798:	e00e      	b.n	80047b8 <__swhatbuf_r+0x40>
 800479a:	466a      	mov	r2, sp
 800479c:	f000 f970 	bl	8004a80 <_fstat_r>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	dbf2      	blt.n	800478a <__swhatbuf_r+0x12>
 80047a4:	9a01      	ldr	r2, [sp, #4]
 80047a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047ae:	425a      	negs	r2, r3
 80047b0:	415a      	adcs	r2, r3
 80047b2:	602a      	str	r2, [r5, #0]
 80047b4:	e7ee      	b.n	8004794 <__swhatbuf_r+0x1c>
 80047b6:	2340      	movs	r3, #64	; 0x40
 80047b8:	2000      	movs	r0, #0
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	b016      	add	sp, #88	; 0x58
 80047be:	bd70      	pop	{r4, r5, r6, pc}

080047c0 <__smakebuf_r>:
 80047c0:	898b      	ldrh	r3, [r1, #12]
 80047c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047c4:	079d      	lsls	r5, r3, #30
 80047c6:	4606      	mov	r6, r0
 80047c8:	460c      	mov	r4, r1
 80047ca:	d507      	bpl.n	80047dc <__smakebuf_r+0x1c>
 80047cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	6123      	str	r3, [r4, #16]
 80047d4:	2301      	movs	r3, #1
 80047d6:	6163      	str	r3, [r4, #20]
 80047d8:	b002      	add	sp, #8
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	ab01      	add	r3, sp, #4
 80047de:	466a      	mov	r2, sp
 80047e0:	f7ff ffca 	bl	8004778 <__swhatbuf_r>
 80047e4:	9900      	ldr	r1, [sp, #0]
 80047e6:	4605      	mov	r5, r0
 80047e8:	4630      	mov	r0, r6
 80047ea:	f000 f879 	bl	80048e0 <_malloc_r>
 80047ee:	b948      	cbnz	r0, 8004804 <__smakebuf_r+0x44>
 80047f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047f4:	059a      	lsls	r2, r3, #22
 80047f6:	d4ef      	bmi.n	80047d8 <__smakebuf_r+0x18>
 80047f8:	f023 0303 	bic.w	r3, r3, #3
 80047fc:	f043 0302 	orr.w	r3, r3, #2
 8004800:	81a3      	strh	r3, [r4, #12]
 8004802:	e7e3      	b.n	80047cc <__smakebuf_r+0xc>
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <__smakebuf_r+0x7c>)
 8004806:	62b3      	str	r3, [r6, #40]	; 0x28
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	6020      	str	r0, [r4, #0]
 800480c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004810:	81a3      	strh	r3, [r4, #12]
 8004812:	9b00      	ldr	r3, [sp, #0]
 8004814:	6163      	str	r3, [r4, #20]
 8004816:	9b01      	ldr	r3, [sp, #4]
 8004818:	6120      	str	r0, [r4, #16]
 800481a:	b15b      	cbz	r3, 8004834 <__smakebuf_r+0x74>
 800481c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004820:	4630      	mov	r0, r6
 8004822:	f000 f93f 	bl	8004aa4 <_isatty_r>
 8004826:	b128      	cbz	r0, 8004834 <__smakebuf_r+0x74>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	81a3      	strh	r3, [r4, #12]
 8004834:	89a0      	ldrh	r0, [r4, #12]
 8004836:	4305      	orrs	r5, r0
 8004838:	81a5      	strh	r5, [r4, #12]
 800483a:	e7cd      	b.n	80047d8 <__smakebuf_r+0x18>
 800483c:	080045d1 	.word	0x080045d1

08004840 <_free_r>:
 8004840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004842:	2900      	cmp	r1, #0
 8004844:	d048      	beq.n	80048d8 <_free_r+0x98>
 8004846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800484a:	9001      	str	r0, [sp, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f1a1 0404 	sub.w	r4, r1, #4
 8004852:	bfb8      	it	lt
 8004854:	18e4      	addlt	r4, r4, r3
 8004856:	f000 f947 	bl	8004ae8 <__malloc_lock>
 800485a:	4a20      	ldr	r2, [pc, #128]	; (80048dc <_free_r+0x9c>)
 800485c:	9801      	ldr	r0, [sp, #4]
 800485e:	6813      	ldr	r3, [r2, #0]
 8004860:	4615      	mov	r5, r2
 8004862:	b933      	cbnz	r3, 8004872 <_free_r+0x32>
 8004864:	6063      	str	r3, [r4, #4]
 8004866:	6014      	str	r4, [r2, #0]
 8004868:	b003      	add	sp, #12
 800486a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800486e:	f000 b941 	b.w	8004af4 <__malloc_unlock>
 8004872:	42a3      	cmp	r3, r4
 8004874:	d90b      	bls.n	800488e <_free_r+0x4e>
 8004876:	6821      	ldr	r1, [r4, #0]
 8004878:	1862      	adds	r2, r4, r1
 800487a:	4293      	cmp	r3, r2
 800487c:	bf04      	itt	eq
 800487e:	681a      	ldreq	r2, [r3, #0]
 8004880:	685b      	ldreq	r3, [r3, #4]
 8004882:	6063      	str	r3, [r4, #4]
 8004884:	bf04      	itt	eq
 8004886:	1852      	addeq	r2, r2, r1
 8004888:	6022      	streq	r2, [r4, #0]
 800488a:	602c      	str	r4, [r5, #0]
 800488c:	e7ec      	b.n	8004868 <_free_r+0x28>
 800488e:	461a      	mov	r2, r3
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	b10b      	cbz	r3, 8004898 <_free_r+0x58>
 8004894:	42a3      	cmp	r3, r4
 8004896:	d9fa      	bls.n	800488e <_free_r+0x4e>
 8004898:	6811      	ldr	r1, [r2, #0]
 800489a:	1855      	adds	r5, r2, r1
 800489c:	42a5      	cmp	r5, r4
 800489e:	d10b      	bne.n	80048b8 <_free_r+0x78>
 80048a0:	6824      	ldr	r4, [r4, #0]
 80048a2:	4421      	add	r1, r4
 80048a4:	1854      	adds	r4, r2, r1
 80048a6:	42a3      	cmp	r3, r4
 80048a8:	6011      	str	r1, [r2, #0]
 80048aa:	d1dd      	bne.n	8004868 <_free_r+0x28>
 80048ac:	681c      	ldr	r4, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	6053      	str	r3, [r2, #4]
 80048b2:	4421      	add	r1, r4
 80048b4:	6011      	str	r1, [r2, #0]
 80048b6:	e7d7      	b.n	8004868 <_free_r+0x28>
 80048b8:	d902      	bls.n	80048c0 <_free_r+0x80>
 80048ba:	230c      	movs	r3, #12
 80048bc:	6003      	str	r3, [r0, #0]
 80048be:	e7d3      	b.n	8004868 <_free_r+0x28>
 80048c0:	6825      	ldr	r5, [r4, #0]
 80048c2:	1961      	adds	r1, r4, r5
 80048c4:	428b      	cmp	r3, r1
 80048c6:	bf04      	itt	eq
 80048c8:	6819      	ldreq	r1, [r3, #0]
 80048ca:	685b      	ldreq	r3, [r3, #4]
 80048cc:	6063      	str	r3, [r4, #4]
 80048ce:	bf04      	itt	eq
 80048d0:	1949      	addeq	r1, r1, r5
 80048d2:	6021      	streq	r1, [r4, #0]
 80048d4:	6054      	str	r4, [r2, #4]
 80048d6:	e7c7      	b.n	8004868 <_free_r+0x28>
 80048d8:	b003      	add	sp, #12
 80048da:	bd30      	pop	{r4, r5, pc}
 80048dc:	20000090 	.word	0x20000090

080048e0 <_malloc_r>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	1ccd      	adds	r5, r1, #3
 80048e4:	f025 0503 	bic.w	r5, r5, #3
 80048e8:	3508      	adds	r5, #8
 80048ea:	2d0c      	cmp	r5, #12
 80048ec:	bf38      	it	cc
 80048ee:	250c      	movcc	r5, #12
 80048f0:	2d00      	cmp	r5, #0
 80048f2:	4606      	mov	r6, r0
 80048f4:	db01      	blt.n	80048fa <_malloc_r+0x1a>
 80048f6:	42a9      	cmp	r1, r5
 80048f8:	d903      	bls.n	8004902 <_malloc_r+0x22>
 80048fa:	230c      	movs	r3, #12
 80048fc:	6033      	str	r3, [r6, #0]
 80048fe:	2000      	movs	r0, #0
 8004900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004902:	f000 f8f1 	bl	8004ae8 <__malloc_lock>
 8004906:	4921      	ldr	r1, [pc, #132]	; (800498c <_malloc_r+0xac>)
 8004908:	680a      	ldr	r2, [r1, #0]
 800490a:	4614      	mov	r4, r2
 800490c:	b99c      	cbnz	r4, 8004936 <_malloc_r+0x56>
 800490e:	4f20      	ldr	r7, [pc, #128]	; (8004990 <_malloc_r+0xb0>)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	b923      	cbnz	r3, 800491e <_malloc_r+0x3e>
 8004914:	4621      	mov	r1, r4
 8004916:	4630      	mov	r0, r6
 8004918:	f000 f83c 	bl	8004994 <_sbrk_r>
 800491c:	6038      	str	r0, [r7, #0]
 800491e:	4629      	mov	r1, r5
 8004920:	4630      	mov	r0, r6
 8004922:	f000 f837 	bl	8004994 <_sbrk_r>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	d123      	bne.n	8004972 <_malloc_r+0x92>
 800492a:	230c      	movs	r3, #12
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	4630      	mov	r0, r6
 8004930:	f000 f8e0 	bl	8004af4 <__malloc_unlock>
 8004934:	e7e3      	b.n	80048fe <_malloc_r+0x1e>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	1b5b      	subs	r3, r3, r5
 800493a:	d417      	bmi.n	800496c <_malloc_r+0x8c>
 800493c:	2b0b      	cmp	r3, #11
 800493e:	d903      	bls.n	8004948 <_malloc_r+0x68>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	441c      	add	r4, r3
 8004944:	6025      	str	r5, [r4, #0]
 8004946:	e004      	b.n	8004952 <_malloc_r+0x72>
 8004948:	6863      	ldr	r3, [r4, #4]
 800494a:	42a2      	cmp	r2, r4
 800494c:	bf0c      	ite	eq
 800494e:	600b      	streq	r3, [r1, #0]
 8004950:	6053      	strne	r3, [r2, #4]
 8004952:	4630      	mov	r0, r6
 8004954:	f000 f8ce 	bl	8004af4 <__malloc_unlock>
 8004958:	f104 000b 	add.w	r0, r4, #11
 800495c:	1d23      	adds	r3, r4, #4
 800495e:	f020 0007 	bic.w	r0, r0, #7
 8004962:	1ac2      	subs	r2, r0, r3
 8004964:	d0cc      	beq.n	8004900 <_malloc_r+0x20>
 8004966:	1a1b      	subs	r3, r3, r0
 8004968:	50a3      	str	r3, [r4, r2]
 800496a:	e7c9      	b.n	8004900 <_malloc_r+0x20>
 800496c:	4622      	mov	r2, r4
 800496e:	6864      	ldr	r4, [r4, #4]
 8004970:	e7cc      	b.n	800490c <_malloc_r+0x2c>
 8004972:	1cc4      	adds	r4, r0, #3
 8004974:	f024 0403 	bic.w	r4, r4, #3
 8004978:	42a0      	cmp	r0, r4
 800497a:	d0e3      	beq.n	8004944 <_malloc_r+0x64>
 800497c:	1a21      	subs	r1, r4, r0
 800497e:	4630      	mov	r0, r6
 8004980:	f000 f808 	bl	8004994 <_sbrk_r>
 8004984:	3001      	adds	r0, #1
 8004986:	d1dd      	bne.n	8004944 <_malloc_r+0x64>
 8004988:	e7cf      	b.n	800492a <_malloc_r+0x4a>
 800498a:	bf00      	nop
 800498c:	20000090 	.word	0x20000090
 8004990:	20000094 	.word	0x20000094

08004994 <_sbrk_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4d06      	ldr	r5, [pc, #24]	; (80049b0 <_sbrk_r+0x1c>)
 8004998:	2300      	movs	r3, #0
 800499a:	4604      	mov	r4, r0
 800499c:	4608      	mov	r0, r1
 800499e:	602b      	str	r3, [r5, #0]
 80049a0:	f7fc faee 	bl	8000f80 <_sbrk>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_sbrk_r+0x1a>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_sbrk_r+0x1a>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	20000150 	.word	0x20000150

080049b4 <__sread>:
 80049b4:	b510      	push	{r4, lr}
 80049b6:	460c      	mov	r4, r1
 80049b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049bc:	f000 f8a0 	bl	8004b00 <_read_r>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	bfab      	itete	ge
 80049c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049c6:	89a3      	ldrhlt	r3, [r4, #12]
 80049c8:	181b      	addge	r3, r3, r0
 80049ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049ce:	bfac      	ite	ge
 80049d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80049d2:	81a3      	strhlt	r3, [r4, #12]
 80049d4:	bd10      	pop	{r4, pc}

080049d6 <__swrite>:
 80049d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049da:	461f      	mov	r7, r3
 80049dc:	898b      	ldrh	r3, [r1, #12]
 80049de:	05db      	lsls	r3, r3, #23
 80049e0:	4605      	mov	r5, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	4616      	mov	r6, r2
 80049e6:	d505      	bpl.n	80049f4 <__swrite+0x1e>
 80049e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ec:	2302      	movs	r3, #2
 80049ee:	2200      	movs	r2, #0
 80049f0:	f000 f868 	bl	8004ac4 <_lseek_r>
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049fe:	81a3      	strh	r3, [r4, #12]
 8004a00:	4632      	mov	r2, r6
 8004a02:	463b      	mov	r3, r7
 8004a04:	4628      	mov	r0, r5
 8004a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0a:	f000 b817 	b.w	8004a3c <_write_r>

08004a0e <__sseek>:
 8004a0e:	b510      	push	{r4, lr}
 8004a10:	460c      	mov	r4, r1
 8004a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a16:	f000 f855 	bl	8004ac4 <_lseek_r>
 8004a1a:	1c43      	adds	r3, r0, #1
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	bf15      	itete	ne
 8004a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a2a:	81a3      	strheq	r3, [r4, #12]
 8004a2c:	bf18      	it	ne
 8004a2e:	81a3      	strhne	r3, [r4, #12]
 8004a30:	bd10      	pop	{r4, pc}

08004a32 <__sclose>:
 8004a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a36:	f000 b813 	b.w	8004a60 <_close_r>
	...

08004a3c <_write_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4d07      	ldr	r5, [pc, #28]	; (8004a5c <_write_r+0x20>)
 8004a40:	4604      	mov	r4, r0
 8004a42:	4608      	mov	r0, r1
 8004a44:	4611      	mov	r1, r2
 8004a46:	2200      	movs	r2, #0
 8004a48:	602a      	str	r2, [r5, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f7fb fd38 	bl	80004c0 <_write>
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	d102      	bne.n	8004a5a <_write_r+0x1e>
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	b103      	cbz	r3, 8004a5a <_write_r+0x1e>
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	bd38      	pop	{r3, r4, r5, pc}
 8004a5c:	20000150 	.word	0x20000150

08004a60 <_close_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4d06      	ldr	r5, [pc, #24]	; (8004a7c <_close_r+0x1c>)
 8004a64:	2300      	movs	r3, #0
 8004a66:	4604      	mov	r4, r0
 8004a68:	4608      	mov	r0, r1
 8004a6a:	602b      	str	r3, [r5, #0]
 8004a6c:	f7fc fa53 	bl	8000f16 <_close>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d102      	bne.n	8004a7a <_close_r+0x1a>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	b103      	cbz	r3, 8004a7a <_close_r+0x1a>
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	bd38      	pop	{r3, r4, r5, pc}
 8004a7c:	20000150 	.word	0x20000150

08004a80 <_fstat_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4d07      	ldr	r5, [pc, #28]	; (8004aa0 <_fstat_r+0x20>)
 8004a84:	2300      	movs	r3, #0
 8004a86:	4604      	mov	r4, r0
 8004a88:	4608      	mov	r0, r1
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	602b      	str	r3, [r5, #0]
 8004a8e:	f7fc fa4e 	bl	8000f2e <_fstat>
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	d102      	bne.n	8004a9c <_fstat_r+0x1c>
 8004a96:	682b      	ldr	r3, [r5, #0]
 8004a98:	b103      	cbz	r3, 8004a9c <_fstat_r+0x1c>
 8004a9a:	6023      	str	r3, [r4, #0]
 8004a9c:	bd38      	pop	{r3, r4, r5, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000150 	.word	0x20000150

08004aa4 <_isatty_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	4d06      	ldr	r5, [pc, #24]	; (8004ac0 <_isatty_r+0x1c>)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	602b      	str	r3, [r5, #0]
 8004ab0:	f7fc fa4d 	bl	8000f4e <_isatty>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_isatty_r+0x1a>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_isatty_r+0x1a>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	20000150 	.word	0x20000150

08004ac4 <_lseek_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d07      	ldr	r5, [pc, #28]	; (8004ae4 <_lseek_r+0x20>)
 8004ac8:	4604      	mov	r4, r0
 8004aca:	4608      	mov	r0, r1
 8004acc:	4611      	mov	r1, r2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	602a      	str	r2, [r5, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f7fc fa46 	bl	8000f64 <_lseek>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d102      	bne.n	8004ae2 <_lseek_r+0x1e>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	b103      	cbz	r3, 8004ae2 <_lseek_r+0x1e>
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	20000150 	.word	0x20000150

08004ae8 <__malloc_lock>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <__malloc_lock+0x8>)
 8004aea:	f7ff be43 	b.w	8004774 <__retarget_lock_acquire_recursive>
 8004aee:	bf00      	nop
 8004af0:	20000148 	.word	0x20000148

08004af4 <__malloc_unlock>:
 8004af4:	4801      	ldr	r0, [pc, #4]	; (8004afc <__malloc_unlock+0x8>)
 8004af6:	f7ff be3e 	b.w	8004776 <__retarget_lock_release_recursive>
 8004afa:	bf00      	nop
 8004afc:	20000148 	.word	0x20000148

08004b00 <_read_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4d07      	ldr	r5, [pc, #28]	; (8004b20 <_read_r+0x20>)
 8004b04:	4604      	mov	r4, r0
 8004b06:	4608      	mov	r0, r1
 8004b08:	4611      	mov	r1, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	602a      	str	r2, [r5, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f7fc f9e4 	bl	8000edc <_read>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_read_r+0x1e>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_read_r+0x1e>
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	20000150 	.word	0x20000150

08004b24 <_init>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr

08004b30 <_fini>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	bf00      	nop
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr
