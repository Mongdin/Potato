
STM32L4_IOT_P2P_ClientServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003290  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003490  08003490  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003490  08003490  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003490  08003490  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080034a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b30  20000028  080034c8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b58  080034c8  00020b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be22  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e15  00000000  00000000  0004be7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d9be  00000000  00000000  00051c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  0005f650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001958  00000000  00000000  00060928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f653  00000000  00000000  00062280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021c78  00000000  00000000  000918d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108dfd  00000000  00000000  000b354b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bc348  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003414  00000000  00000000  001bc39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033fc 	.word	0x080033fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080033fc 	.word	0x080033fc

080001c8 <aci_gap_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

#if BLUENRG_MS
tBleStatus aci_gap_init(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80001c8:	b530      	push	{r4, r5, lr}
 80001ca:	b08b      	sub	sp, #44	; 0x2c
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80001cc:	ad02      	add	r5, sp, #8
  cp.role = role;
 80001ce:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 80001d2:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 80001d6:	f88d 2006 	strb.w	r2, [sp, #6]
  Osal_MemSet(&resp, 0, sizeof(resp));
 80001da:	2100      	movs	r1, #0
 80001dc:	2207      	movs	r2, #7
 80001de:	4628      	mov	r0, r5
{
 80001e0:	461c      	mov	r4, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 80001e2:	f000 fa7d 	bl	80006e0 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 80001e6:	2218      	movs	r2, #24
 80001e8:	2100      	movs	r1, #0
 80001ea:	a804      	add	r0, sp, #16
 80001ec:	f000 fa78 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <aci_gap_init+0x7c>)
 80001f2:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
 80001f4:	ab01      	add	r3, sp, #4
 80001f6:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80001f8:	2303      	movs	r3, #3
 80001fa:	f8ad 301c 	strh.w	r3, [sp, #28]
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80001fe:	2100      	movs	r1, #0
  rq.rlen = GAP_INIT_RP_SIZE;
 8000200:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 8000202:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8000204:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8000206:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800020a:	f001 fbc5 	bl	8001998 <hci_send_req>
 800020e:	2800      	cmp	r0, #0
 8000210:	db15      	blt.n	800023e <aci_gap_init+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8000212:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000216:	b980      	cbnz	r0, 800023a <aci_gap_init+0x72>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8000218:	9b02      	ldr	r3, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800021a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 800021e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8000222:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8000224:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8000228:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800022c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800022e:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8000230:	9b03      	ldr	r3, [sp, #12]
 8000232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000234:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8000238:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800023a:	b00b      	add	sp, #44	; 0x2c
 800023c:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_TIMEOUT;
 800023e:	20ff      	movs	r0, #255	; 0xff
 8000240:	e7fb      	b.n	800023a <aci_gap_init+0x72>
 8000242:	bf00      	nop
 8000244:	008a003f 	.word	0x008a003f

08000248 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8000248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024a:	b095      	sub	sp, #84	; 0x54
 800024c:	461f      	mov	r7, r3
 800024e:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8000252:	f89d 5074 	ldrb.w	r5, [sp, #116]	; 0x74
 8000256:	f8ad 1006 	strh.w	r1, [sp, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800025a:	1963      	adds	r3, r4, r5
 800025c:	2b1a      	cmp	r3, #26
{
 800025e:	f8ad 2004 	strh.w	r2, [sp, #4]
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8000262:	dc57      	bgt.n	8000314 <aci_gap_set_discoverable+0xcc>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8000264:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 8000268:	2202      	movs	r2, #2
 800026a:	f10d 0106 	add.w	r1, sp, #6
 800026e:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8000272:	f000 fa33 	bl	80006dc <Osal_MemCpy>
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  Osal_MemCpy(buffer + indx, &AdvIntervMax, 2);
 8000276:	2202      	movs	r2, #2
 8000278:	a901      	add	r1, sp, #4
 800027a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 800027e:	f000 fa2d 	bl	80006dc <Osal_MemCpy>
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8000282:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 8000286:	991c      	ldr	r1, [sp, #112]	; 0x70
  buffer[indx] = AdvFilterPolicy;
 8000288:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 800028c:	4622      	mov	r2, r4
 800028e:	a80c      	add	r0, sp, #48	; 0x30
  buffer[indx] = LocalNameLen;
 8000290:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
  buffer[indx] = OwnAddrType;
 8000294:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 8000298:	f000 fa20 	bl	80006dc <Osal_MemCpy>
  indx +=  LocalNameLen;
 800029c:	f104 0308 	add.w	r3, r4, #8
  
  buffer[indx] = ServiceUUIDLen;
 80002a0:	aa14      	add	r2, sp, #80	; 0x50
 80002a2:	fa52 f383 	uxtab	r3, r2, r3
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 80002a6:	ae0a      	add	r6, sp, #40	; 0x28
  indx++;
 80002a8:	f104 0009 	add.w	r0, r4, #9
 80002ac:	b2c4      	uxtb	r4, r0

  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80002ae:	991e      	ldr	r1, [sp, #120]	; 0x78
  buffer[indx] = ServiceUUIDLen;
 80002b0:	f803 5c28 	strb.w	r5, [r3, #-40]
  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80002b4:	462a      	mov	r2, r5
 80002b6:	fa56 f080 	uxtab	r0, r6, r0
 80002ba:	f000 fa0f 	bl	80006dc <Osal_MemCpy>
  indx +=  ServiceUUIDLen;  
 80002be:	1928      	adds	r0, r5, r4
 80002c0:	b2c4      	uxtb	r4, r0

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMin, 2);
 80002c2:	2202      	movs	r2, #2
 80002c4:	a91f      	add	r1, sp, #124	; 0x7c
 80002c6:	fa56 f080 	uxtab	r0, r6, r0
 80002ca:	f000 fa07 	bl	80006dc <Osal_MemCpy>
  indx +=  2;
 80002ce:	1ca0      	adds	r0, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMax, 2);
 80002d0:	2202      	movs	r2, #2
 80002d2:	a920      	add	r1, sp, #128	; 0x80
 80002d4:	fa56 f080 	uxtab	r0, r6, r0
 80002d8:	f000 fa00 	bl	80006dc <Osal_MemCpy>
  indx +=  2;    

  Osal_MemSet(&rq, 0, sizeof(rq));
 80002dc:	2218      	movs	r2, #24
 80002de:	2100      	movs	r1, #0
 80002e0:	a804      	add	r0, sp, #16
 80002e2:	f000 f9fd 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <aci_gap_set_discoverable+0xd4>)
 80002e8:	9304      	str	r3, [sp, #16]
  indx +=  2;    
 80002ea:	3404      	adds	r4, #4
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 80002ec:	f10d 030f 	add.w	r3, sp, #15
 80002f0:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 80002f2:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80002f4:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80002f6:	2100      	movs	r1, #0
 80002f8:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 80002fa:	9606      	str	r6, [sp, #24]
  rq.clen = indx;
 80002fc:	f8ad 401c 	strh.w	r4, [sp, #28]
  rq.rlen = 1;
 8000300:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8000304:	f001 fb48 	bl	8001998 <hci_send_req>
 8000308:	2800      	cmp	r0, #0
 800030a:	db05      	blt.n	8000318 <aci_gap_set_discoverable+0xd0>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800030c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    return status;
  }

  return 0;
}
 8000310:	b015      	add	sp, #84	; 0x54
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8000314:	2042      	movs	r0, #66	; 0x42
 8000316:	e7fb      	b.n	8000310 <aci_gap_set_discoverable+0xc8>
    return BLE_STATUS_TIMEOUT;
 8000318:	20ff      	movs	r0, #255	; 0xff
 800031a:	e7f9      	b.n	8000310 <aci_gap_set_discoverable+0xc8>
 800031c:	0083003f 	.word	0x0083003f

08000320 <aci_gap_set_io_capability>:
    
  return status;
}

tBleStatus aci_gap_set_io_capability(uint8_t io_capability)
{
 8000320:	b500      	push	{lr}
 8000322:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
  gap_set_io_capability_cp cp;
    
  cp.io_capability = io_capability;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000324:	2218      	movs	r2, #24
  cp.io_capability = io_capability;
 8000326:	f88d 0004 	strb.w	r0, [sp, #4]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800032a:	2100      	movs	r1, #0
 800032c:	a802      	add	r0, sp, #8
 800032e:	f000 f9d7 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <aci_gap_set_io_capability+0x44>)
 8000334:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_IO_CAPABILITY;
  rq.cparam = &cp;
 8000336:	ab01      	add	r3, sp, #4
 8000338:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.rparam = &status;
 800033a:	f10d 0207 	add.w	r2, sp, #7
  rq.clen = sizeof(cp);
 800033e:	2301      	movs	r3, #1
  rq.rlen = 1;
    
  if (hci_send_req(&rq, FALSE) < 0)
 8000340:	2100      	movs	r1, #0
 8000342:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 8000344:	f8ad 3014 	strh.w	r3, [sp, #20]
  rq.rparam = &status;
 8000348:	9206      	str	r2, [sp, #24]
  rq.rlen = 1;
 800034a:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800034e:	f001 fb23 	bl	8001998 <hci_send_req>
 8000352:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
    
  return status;
 8000354:	bfac      	ite	ge
 8000356:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800035a:	20ff      	movlt	r0, #255	; 0xff
}
 800035c:	b009      	add	sp, #36	; 0x24
 800035e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000362:	bf00      	nop
 8000364:	0085003f 	.word	0x0085003f

08000368 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8000368:	b530      	push	{r4, r5, lr}
 800036a:	b08f      	sub	sp, #60	; 0x3c
 800036c:	460d      	mov	r5, r1
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800036e:	f88d 001c 	strb.w	r0, [sp, #28]
{
 8000372:	4611      	mov	r1, r2
  cp.oob_enable = oob_enable;
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 8000374:	f10d 001e 	add.w	r0, sp, #30
 8000378:	2210      	movs	r2, #16
{
 800037a:	461c      	mov	r4, r3
  cp.oob_enable = oob_enable;
 800037c:	f88d 501d 	strb.w	r5, [sp, #29]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 8000380:	f000 f9ac 	bl	80006dc <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
  cp.max_encryption_key_size = max_encryption_key_size;
 8000384:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000388:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 800038c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8000390:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8000394:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000396:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  Osal_MemSet(&rq, 0, sizeof(rq));
 800039a:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 800039c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80003a0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  Osal_MemSet(&rq, 0, sizeof(rq));
 80003a4:	2100      	movs	r1, #0
 80003a6:	a801      	add	r0, sp, #4
  cp.min_encryption_key_size = min_encryption_key_size;
 80003a8:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  Osal_MemSet(&rq, 0, sizeof(rq));
 80003ac:	f000 f998 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80003b0:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <aci_gap_set_auth_requirement+0x78>)
 80003b2:	9301      	str	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
  rq.cparam = &cp;
 80003b4:	ab07      	add	r3, sp, #28
 80003b6:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 80003b8:	231a      	movs	r3, #26
 80003ba:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.rparam = &status;
 80003be:	f10d 0303 	add.w	r3, sp, #3
 80003c2:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80003c4:	2100      	movs	r1, #0
  rq.rlen = 1;
 80003c6:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80003c8:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 80003ca:	f8ad 3018 	strh.w	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 80003ce:	f001 fae3 	bl	8001998 <hci_send_req>
 80003d2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80003d4:	bfac      	ite	ge
 80003d6:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80003da:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 80003dc:	b00f      	add	sp, #60	; 0x3c
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	0086003f 	.word	0x0086003f

080003e4 <aci_gap_configure_whitelist>:

  return resp.status;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 80003e4:	b500      	push	{lr}
 80003e6:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 80003e8:	2218      	movs	r2, #24
 80003ea:	2100      	movs	r1, #0
 80003ec:	a802      	add	r0, sp, #8
 80003ee:	f000 f977 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <aci_gap_configure_whitelist+0x38>)
 80003f4:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GAP_CONFIGURE_WHITELIST;
  rq.rparam = &status;
 80003f6:	f10d 0307 	add.w	r3, sp, #7
 80003fa:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80003fc:	2100      	movs	r1, #0
  rq.rlen = 1;
 80003fe:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8000400:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8000402:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8000406:	f001 fac7 	bl	8001998 <hci_send_req>
 800040a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800040c:	bfac      	ite	ge
 800040e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8000412:	20ff      	movlt	r0, #255	; 0xff
}
 8000414:	b009      	add	sp, #36	; 0x24
 8000416:	f85d fb04 	ldr.w	pc, [sp], #4
 800041a:	bf00      	nop
 800041c:	0092003f 	.word	0x0092003f

08000420 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8000420:	b500      	push	{lr}
 8000422:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000424:	2218      	movs	r2, #24
 8000426:	2100      	movs	r1, #0
 8000428:	a802      	add	r0, sp, #8
 800042a:	f000 f959 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <aci_gatt_init+0x38>)
 8000430:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
  rq.rparam = &status;
 8000432:	f10d 0307 	add.w	r3, sp, #7
 8000436:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8000438:	2100      	movs	r1, #0
  rq.rlen = 1;
 800043a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800043c:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800043e:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8000442:	f001 faa9 	bl	8001998 <hci_send_req>
 8000446:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8000448:	bfac      	ite	ge
 800044a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800044e:	20ff      	movlt	r0, #255	; 0xff
}
 8000450:	b009      	add	sp, #36	; 0x24
 8000452:	f85d fb04 	ldr.w	pc, [sp], #4
 8000456:	bf00      	nop
 8000458:	0101003f 	.word	0x0101003f

0800045c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800045c:	b570      	push	{r4, r5, r6, lr}
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 800045e:	2801      	cmp	r0, #1
{
 8000460:	b08c      	sub	sp, #48	; 0x30
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8000462:	bf0c      	ite	eq
 8000464:	2402      	moveq	r4, #2
 8000466:	2410      	movne	r4, #16
{
 8000468:	4616      	mov	r6, r2
  buffer[indx] = service_uuid_type;
 800046a:	f88d 0004 	strb.w	r0, [sp, #4]
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 800046e:	4622      	mov	r2, r4
 8000470:	f10d 0005 	add.w	r0, sp, #5
{
 8000474:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 8000476:	f000 f931 	bl	80006dc <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800047a:	ab0c      	add	r3, sp, #48	; 0x30
 800047c:	4423      	add	r3, r4
    
  buffer[indx] = max_attr_records;
  indx++;
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800047e:	2203      	movs	r2, #3
  buffer[indx] = service_type;
 8000480:	f803 6c2b 	strb.w	r6, [r3, #-43]
  buffer[indx] = max_attr_records;
 8000484:	ab0c      	add	r3, sp, #48	; 0x30
 8000486:	4423      	add	r3, r4
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000488:	2100      	movs	r1, #0
 800048a:	4668      	mov	r0, sp
  buffer[indx] = max_attr_records;
 800048c:	f803 5c2a 	strb.w	r5, [r3, #-42]
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000490:	f000 f926 	bl	80006e0 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000494:	2218      	movs	r2, #24
 8000496:	2100      	movs	r1, #0
 8000498:	eb0d 0002 	add.w	r0, sp, r2
 800049c:	f000 f920 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <aci_gatt_add_serv+0x80>)
 80004a2:	9306      	str	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
 80004a4:	ab01      	add	r3, sp, #4
 80004a6:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 80004a8:	3403      	adds	r4, #3
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80004aa:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 80004ac:	2100      	movs	r1, #0
 80004ae:	a806      	add	r0, sp, #24
  rq.clen = indx;
 80004b0:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 80004b4:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80004b8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 80004bc:	f001 fa6c 	bl	8001998 <hci_send_req>
 80004c0:	2800      	cmp	r0, #0
 80004c2:	db09      	blt.n	80004d8 <aci_gatt_add_serv+0x7c>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 80004c4:	f89d 0000 	ldrb.w	r0, [sp]
 80004c8:	b920      	cbnz	r0, 80004d4 <aci_gatt_add_serv+0x78>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 80004ca:	9b00      	ldr	r3, [sp, #0]
 80004cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80004ce:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80004d2:	8013      	strh	r3, [r2, #0]

  return 0;
}
 80004d4:	b00c      	add	sp, #48	; 0x30
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80004d8:	20ff      	movs	r0, #255	; 0xff
 80004da:	e7fb      	b.n	80004d4 <aci_gatt_add_serv+0x78>
 80004dc:	0102003f 	.word	0x0102003f

080004e0 <aci_gatt_add_char>:
           uint8_t secPermissions,
           uint8_t gattEvtMask,
           uint8_t encryKeySize,
           uint8_t isVariable,
           uint16_t* charHandle)                     
{
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	b091      	sub	sp, #68	; 0x44
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 80004e4:	af09      	add	r7, sp, #36	; 0x24
{
 80004e6:	460c      	mov	r4, r1
 80004e8:	4616      	mov	r6, r2
 80004ea:	f8ad 0006 	strh.w	r0, [sp, #6]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 80004ee:	2202      	movs	r2, #2
 80004f0:	f10d 0106 	add.w	r1, sp, #6
 80004f4:	4638      	mov	r0, r7
{
 80004f6:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 80004f8:	f000 f8f0 	bl	80006dc <Osal_MemCpy>
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80004fc:	2c01      	cmp	r4, #1
  buffer[indx] = charUuidType;
 80004fe:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
    uuid_len = 16;
 8000502:	bf0c      	ite	eq
 8000504:	2402      	moveq	r4, #2
 8000506:	2410      	movne	r4, #16
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 8000508:	4622      	mov	r2, r4
 800050a:	4631      	mov	r1, r6
 800050c:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8000510:	f000 f8e4 	bl	80006dc <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8000514:	ab10      	add	r3, sp, #64	; 0x40
 8000516:	4423      	add	r3, r4
  indx+=2;
#else
  indx++;
#endif  
    
  buffer[indx] = charProperties;
 8000518:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  buffer[indx] = charValueLen;
 800051c:	f803 5c19 	strb.w	r5, [r3, #-25]
  buffer[indx] = charProperties;
 8000520:	ab10      	add	r3, sp, #64	; 0x40
 8000522:	4423      	add	r3, r4
  indx++;
    
  buffer[indx] = isVariable;
  indx++;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000524:	ad02      	add	r5, sp, #8
  buffer[indx] = charProperties;
 8000526:	f803 2c18 	strb.w	r2, [r3, #-24]
  buffer[indx] = secPermissions;
 800052a:	ab10      	add	r3, sp, #64	; 0x40
 800052c:	4423      	add	r3, r4
 800052e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8000532:	f803 2c17 	strb.w	r2, [r3, #-23]
  buffer[indx] = gattEvtMask;
 8000536:	ab10      	add	r3, sp, #64	; 0x40
 8000538:	4423      	add	r3, r4
 800053a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800053e:	f803 2c16 	strb.w	r2, [r3, #-22]
  buffer[indx] = encryKeySize;
 8000542:	ab10      	add	r3, sp, #64	; 0x40
 8000544:	4423      	add	r3, r4
 8000546:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800054a:	f803 2c15 	strb.w	r2, [r3, #-21]
  buffer[indx] = isVariable;
 800054e:	ab10      	add	r3, sp, #64	; 0x40
 8000550:	4423      	add	r3, r4
 8000552:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8000556:	f803 2c14 	strb.w	r2, [r3, #-20]
  Osal_MemSet(&resp, 0, sizeof(resp));
 800055a:	2100      	movs	r1, #0
 800055c:	2203      	movs	r2, #3
 800055e:	4628      	mov	r0, r5
 8000560:	f000 f8be 	bl	80006e0 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000564:	2218      	movs	r2, #24
 8000566:	2100      	movs	r1, #0
 8000568:	a803      	add	r0, sp, #12
 800056a:	f000 f8b9 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <aci_gatt_add_char+0xc8>)
 8000570:	9303      	str	r3, [sp, #12]
  rq.ocf = OCF_GATT_ADD_CHAR;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8000572:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8000574:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8000576:	2100      	movs	r1, #0
 8000578:	a803      	add	r0, sp, #12
  rq.cparam = (void *)buffer;
 800057a:	9705      	str	r7, [sp, #20]
  rq.clen = indx;
 800057c:	f8ad 4018 	strh.w	r4, [sp, #24]
  rq.rparam = &resp;
 8000580:	9507      	str	r5, [sp, #28]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8000582:	f8ad 3020 	strh.w	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 8000586:	f001 fa07 	bl	8001998 <hci_send_req>
 800058a:	2800      	cmp	r0, #0
 800058c:	db09      	blt.n	80005a2 <aci_gatt_add_char+0xc2>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800058e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000592:	b920      	cbnz	r0, 800059e <aci_gatt_add_char+0xbe>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 8000594:	9b02      	ldr	r3, [sp, #8]
 8000596:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000598:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800059c:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800059e:	b011      	add	sp, #68	; 0x44
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 80005a2:	20ff      	movs	r0, #255	; 0xff
 80005a4:	e7fb      	b.n	800059e <aci_gatt_add_char+0xbe>
 80005a6:	bf00      	nop
 80005a8:	0104003f 	.word	0x0104003f

080005ac <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
              uint16_t charHandle,
              uint8_t charValOffset,
              uint8_t charValueLen,   
                                      const void *charValue)
{
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	b0ca      	sub	sp, #296	; 0x128
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80005b0:	2bf9      	cmp	r3, #249	; 0xf9
{
 80005b2:	4616      	mov	r6, r2
 80005b4:	461c      	mov	r4, r3
 80005b6:	f8ad 0006 	strh.w	r0, [sp, #6]
 80005ba:	f8ad 1004 	strh.w	r1, [sp, #4]
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80005be:	d82f      	bhi.n	8000620 <aci_gatt_update_char_value+0x74>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 80005c0:	ad0a      	add	r5, sp, #40	; 0x28
 80005c2:	2202      	movs	r2, #2
 80005c4:	f10d 0106 	add.w	r1, sp, #6
 80005c8:	4628      	mov	r0, r5
 80005ca:	f000 f887 	bl	80006dc <Osal_MemCpy>
  indx += 2;
    
  charHandle = htobs(charHandle);
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 80005ce:	2202      	movs	r2, #2
 80005d0:	a901      	add	r1, sp, #4
 80005d2:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80005d6:	f000 f881 	bl	80006dc <Osal_MemCpy>
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 80005da:	4622      	mov	r2, r4
 80005dc:	994e      	ldr	r1, [sp, #312]	; 0x138
  buffer[indx] = charValueLen;
 80005de:	716c      	strb	r4, [r5, #5]
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 80005e0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
  buffer[indx] = charValOffset;
 80005e4:	712e      	strb	r6, [r5, #4]
  indx +=  charValueLen;
 80005e6:	3406      	adds	r4, #6
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 80005e8:	f000 f878 	bl	80006dc <Osal_MemCpy>

  Osal_MemSet(&rq, 0, sizeof(rq));
 80005ec:	2218      	movs	r2, #24
 80005ee:	2100      	movs	r1, #0
 80005f0:	a804      	add	r0, sp, #16
 80005f2:	f000 f875 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 80005f6:	b2e4      	uxtb	r4, r4
  rq.ogf = OGF_VENDOR_CMD;
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <aci_gatt_update_char_value+0x7c>)
 80005fa:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
 80005fc:	f8ad 401c 	strh.w	r4, [sp, #28]
  rq.rparam = &status;
  rq.rlen = 1;
 8000600:	2301      	movs	r3, #1
  rq.rparam = &status;
 8000602:	f10d 040f 	add.w	r4, sp, #15

  if (hci_send_req(&rq, FALSE) < 0)
 8000606:	2100      	movs	r1, #0
 8000608:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 800060a:	9506      	str	r5, [sp, #24]
  rq.rparam = &status;
 800060c:	9408      	str	r4, [sp, #32]
  rq.rlen = 1;
 800060e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8000612:	f001 f9c1 	bl	8001998 <hci_send_req>
 8000616:	2800      	cmp	r0, #0
 8000618:	db04      	blt.n	8000624 <aci_gatt_update_char_value+0x78>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800061a:	7820      	ldrb	r0, [r4, #0]
    return status;
  }

  return 0;
}
 800061c:	b04a      	add	sp, #296	; 0x128
 800061e:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8000620:	2042      	movs	r0, #66	; 0x42
 8000622:	e7fb      	b.n	800061c <aci_gatt_update_char_value+0x70>
    return BLE_STATUS_TIMEOUT;
 8000624:	20ff      	movs	r0, #255	; 0xff
 8000626:	e7f9      	b.n	800061c <aci_gatt_update_char_value+0x70>
 8000628:	0106003f 	.word	0x0106003f

0800062c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800062c:	b530      	push	{r4, r5, lr}
 800062e:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8000630:	2cfd      	cmp	r4, #253	; 0xfd
{
 8000632:	b0c9      	sub	sp, #292	; 0x124
 8000634:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8000636:	d824      	bhi.n	8000682 <aci_hal_write_config_data+0x56>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  Osal_MemCpy(buffer + indx, val, len);
 8000638:	4622      	mov	r2, r4
  buffer[indx] = offset;
 800063a:	f88d 0020 	strb.w	r0, [sp, #32]
  Osal_MemCpy(buffer + indx, val, len);
 800063e:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8000642:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  Osal_MemCpy(buffer + indx, val, len);
 8000646:	f000 f849 	bl	80006dc <Osal_MemCpy>
  indx +=  len;
 800064a:	3402      	adds	r4, #2

  Osal_MemSet(&rq, 0, sizeof(rq));
 800064c:	2218      	movs	r2, #24
 800064e:	2100      	movs	r1, #0
 8000650:	a802      	add	r0, sp, #8
 8000652:	f000 f845 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8000656:	b2e4      	uxtb	r4, r4
  rq.ogf = OGF_VENDOR_CMD;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <aci_hal_write_config_data+0x60>)
 800065a:	9302      	str	r3, [sp, #8]
  rq.clen = indx;
 800065c:	f8ad 4014 	strh.w	r4, [sp, #20]
  rq.rparam = &status;
  rq.rlen = 1;
 8000660:	2301      	movs	r3, #1
  buffer[indx] = offset;
 8000662:	ad08      	add	r5, sp, #32
  rq.rparam = &status;
 8000664:	f10d 0407 	add.w	r4, sp, #7

  if (hci_send_req(&rq, FALSE) < 0)
 8000668:	2100      	movs	r1, #0
 800066a:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 800066c:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 800066e:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 8000670:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8000674:	f001 f990 	bl	8001998 <hci_send_req>
 8000678:	2800      	cmp	r0, #0
 800067a:	db04      	blt.n	8000686 <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;

  return status;
 800067c:	7820      	ldrb	r0, [r4, #0]
}
 800067e:	b049      	add	sp, #292	; 0x124
 8000680:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8000682:	2042      	movs	r0, #66	; 0x42
 8000684:	e7fb      	b.n	800067e <aci_hal_write_config_data+0x52>
    return BLE_STATUS_TIMEOUT;
 8000686:	20ff      	movs	r0, #255	; 0xff
 8000688:	e7f9      	b.n	800067e <aci_hal_write_config_data+0x52>
 800068a:	bf00      	nop
 800068c:	000c003f 	.word	0x000c003f

08000690 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8000690:	b500      	push	{lr}
 8000692:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000694:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 8000696:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800069a:	f88d 1005 	strb.w	r1, [sp, #5]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800069e:	a802      	add	r0, sp, #8
 80006a0:	2100      	movs	r1, #0
 80006a2:	f000 f81d 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <aci_hal_set_tx_power_level+0x48>)
 80006a8:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
  rq.cparam = &cp;
 80006aa:	ab01      	add	r3, sp, #4
 80006ac:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8ad 3014 	strh.w	r3, [sp, #20]
  rq.rparam = &status;
 80006b4:	f10d 0303 	add.w	r3, sp, #3
 80006b8:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80006ba:	2100      	movs	r1, #0
  rq.rlen = 1;
 80006bc:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80006be:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80006c0:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80006c4:	f001 f968 	bl	8001998 <hci_send_req>
 80006c8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80006ca:	bfac      	ite	ge
 80006cc:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80006d0:	20ff      	movlt	r0, #255	; 0xff
}
 80006d2:	b009      	add	sp, #36	; 0x24
 80006d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80006d8:	000f003f 	.word	0x000f003f

080006dc <Osal_MemCpy>:
 *               buffer
 * @retval Pointer to the destination buffer
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
    return(memcpy(dest,src,size)); 
 80006dc:	f002 be78 	b.w	80033d0 <memcpy>

080006e0 <Osal_MemSet>:
 * @param  size : Number of bytes to be set to "value"
 * @retval Pointer to the filled block of memory
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
    return(memset(ptr,value,size));
 80006e0:	f002 be84 	b.w	80033ec <memset>

080006e4 <LBS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void LBS_STM_Init(void)
{
 80006e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t uuid;
  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 80006e8:	4860      	ldr	r0, [pc, #384]	; (800086c <LBS_STM_Init+0x188>)

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  	  uuid = testingtest_SVC_UUID;
      aci_gatt_add_serv(UUID_TYPE_16,
 80006ea:	4d61      	ldr	r5, [pc, #388]	; (8000870 <LBS_STM_Init+0x18c>)
{
 80006ec:	b088      	sub	sp, #32
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 80006ee:	f000 f901 	bl	80008f4 <SVCCTL_RegisterSvcHandler>
      aci_gatt_add_serv(UUID_TYPE_16,
 80006f2:	2201      	movs	r2, #1
  	  uuid = testingtest_SVC_UUID;
 80006f4:	f641 2331 	movw	r3, #6705	; 0x1a31
 80006f8:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_serv(UUID_TYPE_16,
 80006fc:	f10d 011e 	add.w	r1, sp, #30
 8000700:	9500      	str	r5, [sp, #0]
 8000702:	230e      	movs	r3, #14
 8000704:	4610      	mov	r0, r2
 8000706:	f7ff fea9 	bl	800045c <aci_gatt_add_serv>
                        (const uint8_t *) &uuid,
                        PRIMARY_SERVICE,
                        14,
                        &(testingtestContext.testing_Svc_Hdle));

      uuid = testingtest_SSID_UUID;
 800070a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800070e:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8000712:	462b      	mov	r3, r5
 8000714:	2401      	movs	r4, #1
 8000716:	f833 0b02 	ldrh.w	r0, [r3], #2
 800071a:	9305      	str	r3, [sp, #20]
 800071c:	270a      	movs	r7, #10
 800071e:	2600      	movs	r6, #0
 8000720:	f04f 0806 	mov.w	r8, #6
 8000724:	231e      	movs	r3, #30
 8000726:	eb0d 0203 	add.w	r2, sp, r3
 800072a:	4621      	mov	r1, r4
 800072c:	e9cd 7403 	strd	r7, r4, [sp, #12]
 8000730:	e9cd 8600 	strd	r8, r6, [sp]
 8000734:	9402      	str	r4, [sp, #8]
 8000736:	f7ff fed3 	bl	80004e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_SSID_Hdle));

      uuid = testingtest_PW_UUID;
 800073a:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 800073e:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8000742:	462b      	mov	r3, r5
 8000744:	4621      	mov	r1, r4
 8000746:	f833 0b04 	ldrh.w	r0, [r3], #4
 800074a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800074e:	231e      	movs	r3, #30
 8000750:	eb0d 0203 	add.w	r2, sp, r3
 8000754:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8000758:	e9cd 8600 	strd	r8, r6, [sp]
 800075c:	f7ff fec0 	bl	80004e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_PW_Hdle));

      uuid = testingtest_NAME_UUID;
 8000760:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 8000764:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8000768:	462b      	mov	r3, r5
 800076a:	4621      	mov	r1, r4
 800076c:	f833 0b06 	ldrh.w	r0, [r3], #6
 8000770:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000774:	231e      	movs	r3, #30
 8000776:	eb0d 0203 	add.w	r2, sp, r3
 800077a:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800077e:	e9cd 8600 	strd	r8, r6, [sp]
 8000782:	f7ff fead 	bl	80004e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_NAME_Hdle));

      uuid = testingtest_IP_UUID;
 8000786:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800078a:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 800078e:	462b      	mov	r3, r5
 8000790:	f10d 021e 	add.w	r2, sp, #30
 8000794:	f833 0b08 	ldrh.w	r0, [r3], #8
 8000798:	4621      	mov	r1, r4
 800079a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800079e:	e9cd 4702 	strd	r4, r7, [sp, #8]
 80007a2:	e9cd 8600 	strd	r8, r6, [sp]
 80007a6:	2304      	movs	r3, #4
 80007a8:	f7ff fe9a 	bl	80004e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_IP_Hdle));

      uuid = testingtest_OP_UUID;
 80007ac:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80007b0:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 80007b4:	462b      	mov	r3, r5
 80007b6:	f10d 021e 	add.w	r2, sp, #30
 80007ba:	f833 0b0a 	ldrh.w	r0, [r3], #10
 80007be:	4621      	mov	r1, r4
 80007c0:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80007c4:	e9cd 4702 	strd	r4, r7, [sp, #8]
 80007c8:	e9cd 8600 	strd	r8, r6, [sp]
 80007cc:	2302      	movs	r3, #2
 80007ce:	f7ff fe87 	bl	80004e0 <aci_gatt_add_char>
                            ATTR_PERMISSION_NONE,
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_OP_Hdle));
      uuid = testingtest_OPwDesc_UUID;
 80007d2:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 80007d6:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 80007da:	462b      	mov	r3, r5
 80007dc:	4621      	mov	r1, r4
 80007de:	f833 0b0c 	ldrh.w	r0, [r3], #12
 80007e2:	9601      	str	r6, [sp, #4]
 80007e4:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80007e8:	2312      	movs	r3, #18
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	231e      	movs	r3, #30
 80007ee:	eb0d 0203 	add.w	r2, sp, r3
 80007f2:	e9cd 4702 	strd	r4, r7, [sp, #8]
 80007f6:	f7ff fe73 	bl	80004e0 <aci_gatt_add_char>
      //aci_gatt_write_charac_value(conn_handle, attr_handle, value_len, attr_value)

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    uuid = LED_BUTTON_SERVICE_UUID;
 80007fa:	f641 2330 	movw	r3, #6704	; 0x1a30
 80007fe:	f8ad 301e 	strh.w	r3, [sp, #30]
    aci_gatt_add_serv(UUID_TYPE_16,
 8000802:	f105 030e 	add.w	r3, r5, #14
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	4622      	mov	r2, r4
 800080a:	4643      	mov	r3, r8
 800080c:	f10d 011e 	add.w	r1, sp, #30
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fe23 	bl	800045c <aci_gatt_add_serv>
                      &(aLedButtonContext.LedButtonSvcHdle));

    /**
     *  Add LED Characteristic
     */
    uuid = LED_CHAR_UUID;
 8000816:	f642 3350 	movw	r3, #11088	; 0x2b50
 800081a:	f8ad 301e 	strh.w	r3, [sp, #30]
   
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 800081e:	f105 0310 	add.w	r3, r5, #16
 8000822:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000826:	f10d 021e 	add.w	r2, sp, #30
 800082a:	4621      	mov	r1, r4
 800082c:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8000830:	e9cd 8600 	strd	r8, r6, [sp]
 8000834:	89e8      	ldrh	r0, [r5, #14]
 8000836:	2302      	movs	r3, #2
 8000838:	f7ff fe52 	bl	80004e0 <aci_gatt_add_char>
                      &(aLedButtonContext.LedsCharHdle));

    /**
     *   Add Button Characteristic
     */
    uuid = BUTTON_CHAR_UUID;
 800083c:	f642 3351 	movw	r3, #11089	; 0x2b51
 8000840:	f8ad 301e 	strh.w	r3, [sp, #30]
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 8000844:	f105 0312 	add.w	r3, r5, #18
 8000848:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800084c:	2310      	movs	r3, #16
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8000854:	89e8      	ldrh	r0, [r5, #14]
 8000856:	9601      	str	r6, [sp, #4]
 8000858:	2302      	movs	r3, #2
 800085a:	f10d 021e 	add.w	r2, sp, #30
 800085e:	4621      	mov	r1, r4
 8000860:	f7ff fe3e 	bl	80004e0 <aci_gatt_add_char>
    
    APPL_MESG_DBG("-- Led Button Service (LBS) is added Successfully %04X\n", 
                 aLedButtonContext.LedButtonSvcHdle);

  return;
}
 8000864:	b008      	add	sp, #32
 8000866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800086a:	bf00      	nop
 800086c:	0800089d 	.word	0x0800089d
 8000870:	20000044 	.word	0x20000044

08000874 <BLE_SVC_LedButton_Update_Char>:
 * 
 */
tBleStatus BLE_SVC_LedButton_Update_Char(uint16_t UUID, uint8_t *pPayload) //LED_BUTTON_Data_t *pDataValue)
{
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 8000874:	f642 3351 	movw	r3, #11089	; 0x2b51
 8000878:	4298      	cmp	r0, r3
{
 800087a:	b507      	push	{r0, r1, r2, lr}
  switch(UUID)
 800087c:	d10a      	bne.n	8000894 <BLE_SVC_LedButton_Update_Char+0x20>
  {
    case BUTTON_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aLedButtonContext.LedButtonSvcHdle,
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <BLE_SVC_LedButton_Update_Char+0x24>)
 8000880:	9100      	str	r1, [sp, #0]
 8000882:	8a41      	ldrh	r1, [r0, #18]
 8000884:	89c0      	ldrh	r0, [r0, #14]
 8000886:	2302      	movs	r3, #2
 8000888:	2200      	movs	r2, #0
 800088a:	f7ff fe8f 	bl	80005ac <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}/* end LBS_STM_Init() */
 800088e:	b003      	add	sp, #12
 8000890:	f85d fb04 	ldr.w	pc, [sp], #4
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8000894:	2042      	movs	r0, #66	; 0x42
 8000896:	e7fa      	b.n	800088e <BLE_SVC_LedButton_Update_Char+0x1a>
 8000898:	20000044 	.word	0x20000044

0800089c <LedButton_Event_Handler>:
{
 800089c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  switch(event_pckt->evt)
 800089e:	7843      	ldrb	r3, [r0, #1]
 80008a0:	2bff      	cmp	r3, #255	; 0xff
 80008a2:	d118      	bne.n	80008d6 <LedButton_Event_Handler+0x3a>
      switch(blue_evt->ecode)
 80008a4:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 80008a8:	f640 4301 	movw	r3, #3073	; 0xc01
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d112      	bne.n	80008d6 <LedButton_Event_Handler+0x3a>
            if(attribute_modified->attr_handle == (testingtestContext.testing_SSID_Hdle + 1))
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <LedButton_Event_Handler+0x44>)
 80008b2:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 80008b6:	885b      	ldrh	r3, [r3, #2]
 80008b8:	3301      	adds	r3, #1
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d10b      	bne.n	80008d6 <LedButton_Event_Handler+0x3a>
                          Notification.LBS_Evt_Opcode = POTATO_SSID_EVT;
 80008be:	2304      	movs	r3, #4
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 80008c0:	300c      	adds	r0, #12
                          Notification.LBS_Evt_Opcode = POTATO_SSID_EVT;
 80008c2:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 80008c6:	f810 3c03 	ldrb.w	r3, [r0, #-3]
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 80008ca:	9001      	str	r0, [sp, #4]
                          LBS_App_Notification(&Notification);
 80008cc:	4668      	mov	r0, sp
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 80008ce:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 80008d2:	f001 fc11 	bl	80020f8 <LBS_App_Notification>
}/* end SVCCTL_EvtAckStatus_t */
 80008d6:	2000      	movs	r0, #0
 80008d8:	b005      	add	sp, #20
 80008da:	f85d fb04 	ldr.w	pc, [sp], #4
 80008de:	bf00      	nop
 80008e0:	20000044 	.word	0x20000044

080008e4 <DIS_Init>:
/* Fake __Weak functions ------------------------------------------------------*/
/* This is a dirty trick to avoid putting compilation flags to say which service are included */	
/* If the related service is added in the project space its Init function will be used */
/* Otherwise the dummy __Weak function allow to avoid the compilatio error */

__weak void DIS_Init(uint16_t *p_options) {}
 80008e4:	4770      	bx	lr

080008e6 <HRS_Init>:
__weak void HRS_Init(void) {}
 80008e6:	4770      	bx	lr

080008e8 <ANS_Init>:
 80008e8:	4770      	bx	lr

080008ea <HIDS_Init>:
 80008ea:	4770      	bx	lr

080008ec <HPS_Init>:
 80008ec:	4770      	bx	lr

080008ee <IPSS_Init>:
 80008ee:	4770      	bx	lr

080008f0 <LNS_Init>:
 80008f0:	4770      	bx	lr

080008f2 <SCPS_Init>:
 80008f2:	4770      	bx	lr

080008f4 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler(SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler)
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80008f4:	4a03      	ldr	r2, [pc, #12]	; (8000904 <SVCCTL_RegisterSvcHandler+0x10>)
 80008f6:	7a13      	ldrb	r3, [r2, #8]
 80008f8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80008fc:	3301      	adds	r3, #1
 80008fe:	7213      	strb	r3, [r2, #8]

  return;
}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000b40 	.word	0x20000b40

08000908 <SVCCTL_HCI_UserEvtRx>:

  return;
}

void SVCCTL_HCI_UserEvtRx(void *pckt)
{
 8000908:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch(event_pckt->evt)
 800090a:	7843      	ldrb	r3, [r0, #1]
 800090c:	2bff      	cmp	r3, #255	; 0xff
{
 800090e:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 8000910:	d004      	beq.n	800091c <SVCCTL_HCI_UserEvtRx+0x14>
  {
    /**
     *  The event has NOT been managed.
     *  It shall be passed to the application for processing
     */
    SVCCTL_App_Notification(pckt);
 8000912:	4620      	mov	r0, r4

  }

  return;
}
 8000914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SVCCTL_App_Notification(pckt);
 8000918:	f001 bb82 	b.w	8002020 <SVCCTL_App_Notification>
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800091c:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8000920:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000928:	d1f3      	bne.n	8000912 <SVCCTL_HCI_UserEvtRx+0xa>
          for(index = 0; index <SVCCTL_EvtHandler.NbreOfRegisteredHandler ; index++)
 800092a:	4e0d      	ldr	r6, [pc, #52]	; (8000960 <SVCCTL_HCI_UserEvtRx+0x58>)
 800092c:	2500      	movs	r5, #0
 800092e:	7a32      	ldrb	r2, [r6, #8]
 8000930:	b2eb      	uxtb	r3, r5
 8000932:	429a      	cmp	r2, r3
 8000934:	d906      	bls.n	8000944 <SVCCTL_HCI_UserEvtRx+0x3c>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8000936:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800093a:	4620      	mov	r0, r4
 800093c:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 800093e:	3501      	adds	r5, #1
 8000940:	2800      	cmp	r0, #0
 8000942:	d0f4      	beq.n	800092e <SVCCTL_HCI_UserEvtRx+0x26>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler ; index++)
 8000944:	4e07      	ldr	r6, [pc, #28]	; (8000964 <SVCCTL_HCI_UserEvtRx+0x5c>)
 8000946:	2500      	movs	r5, #0
 8000948:	7a32      	ldrb	r2, [r6, #8]
 800094a:	b2eb      	uxtb	r3, r5
 800094c:	429a      	cmp	r2, r3
 800094e:	d9e0      	bls.n	8000912 <SVCCTL_HCI_UserEvtRx+0xa>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8000950:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8000954:	4620      	mov	r0, r4
 8000956:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 8000958:	3501      	adds	r5, #1
 800095a:	2800      	cmp	r0, #0
 800095c:	d0f4      	beq.n	8000948 <SVCCTL_HCI_UserEvtRx+0x40>
}
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	20000b40 	.word	0x20000b40
 8000964:	20000b34 	.word	0x20000b34

08000968 <SVCCTL_GetBdAddress>:
           instead of using the harcoded value in the config.h
  */
__weak const uint8_t* SVCCTL_GetBdAddress( void )
{
  return M_bd_addr;
}
 8000968:	4800      	ldr	r0, [pc, #0]	; (800096c <SVCCTL_GetBdAddress+0x4>)
 800096a:	4770      	bx	lr
 800096c:	08003418 	.word	0x08003418

08000970 <SVCCTL_Init>:
{
 8000970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const uint8_t mode = BLE_CFG_DATA_ROLE_MODE;
 8000972:	2304      	movs	r3, #4
 8000974:	f88d 3009 	strb.w	r3, [sp, #9]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <SVCCTL_Init+0x88>)
 800097a:	2400      	movs	r4, #0
 800097c:	721c      	strb	r4, [r3, #8]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <SVCCTL_Init+0x8c>)
 8000980:	721c      	strb	r4, [r3, #8]
  bd_addr = SVCCTL_GetBdAddress();
 8000982:	f7ff fff1 	bl	8000968 <SVCCTL_GetBdAddress>
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000986:	2106      	movs	r1, #6
  bd_addr = SVCCTL_GetBdAddress();
 8000988:	4602      	mov	r2, r0
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800098a:	4620      	mov	r0, r4
 800098c:	f7ff fe4e 	bl	800062c <aci_hal_write_config_data>
  aci_hal_write_config_data(CONFIG_DATA_MODE_OFFSET,
 8000990:	f10d 0209 	add.w	r2, sp, #9
 8000994:	2101      	movs	r1, #1
 8000996:	202d      	movs	r0, #45	; 0x2d
 8000998:	f7ff fe48 	bl	800062c <aci_hal_write_config_data>
  aci_gatt_init();
 800099c:	f7ff fd40 	bl	8000420 <aci_gatt_init>
    aci_gap_init(role,
 80009a0:	f10d 030e 	add.w	r3, sp, #14
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	ab03      	add	r3, sp, #12
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	4621      	mov	r1, r4
 80009ac:	f10d 030a 	add.w	r3, sp, #10
 80009b0:	2207      	movs	r2, #7
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff fc08 	bl	80001c8 <aci_gap_init>
    if(aci_gatt_update_char_value(gap_service_handle,
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <SVCCTL_Init+0x90>)
 80009ba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	4622      	mov	r2, r4
 80009c2:	2307      	movs	r3, #7
 80009c4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80009c8:	f7ff fdf0 	bl	80005ac <aci_gatt_update_char_value>
  HRS_Init();
 80009cc:	f7ff ff8b 	bl	80008e6 <HRS_Init>
  DIS_Init(NULL);
 80009d0:	4620      	mov	r0, r4
 80009d2:	f7ff ff87 	bl	80008e4 <DIS_Init>
  SCPS_Init();
 80009d6:	f7ff ff8c 	bl	80008f2 <SCPS_Init>
  ANS_Init();
 80009da:	f7ff ff85 	bl	80008e8 <ANS_Init>
HIDS_Init();
 80009de:	f7ff ff84 	bl	80008ea <HIDS_Init>
LNS_Init();
 80009e2:	f7ff ff85 	bl	80008f0 <LNS_Init>
IPSS_Init();
 80009e6:	f7ff ff82 	bl	80008ee <IPSS_Init>
HPS_Init();
 80009ea:	f7ff ff7f 	bl	80008ec <HPS_Init>
BLESVC_InitCustomSvc();
 80009ee:	f001 fb46 	bl	800207e <BLESVC_InitCustomSvc>
}
 80009f2:	b004      	add	sp, #16
 80009f4:	bd10      	pop	{r4, pc}
 80009f6:	bf00      	nop
 80009f8:	20000b40 	.word	0x20000b40
 80009fc:	20000b34 	.word	0x20000b34
 8000a00:	08003488 	.word	0x08003488

08000a04 <HW_SleepMode>:
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a04:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <HW_SleepMode+0x10>)
 8000a06:	6913      	ldr	r3, [r2, #16]
 8000a08:	f023 0304 	bic.w	r3, r3, #4
 8000a0c:	6113      	str	r3, [r2, #16]
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 8000a0e:	bf30      	wfi

  return;
}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <HW_StopMode>:
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HW_StopMode+0x1c>)
 8000a1a:	6813      	ldr	r3, [r2, #0]
 8000a1c:	f023 0307 	bic.w	r3, r3, #7
 8000a20:	4318      	orrs	r0, r3
 8000a22:	6010      	str	r0, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HW_StopMode+0x20>)
 8000a26:	6913      	ldr	r3, [r2, #16]
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6113      	str	r3, [r2, #16]
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 8000a2e:	bf30      	wfi

  return;
}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40007000 	.word	0x40007000
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <HW_OffMode>:
 8000a3c:	f7ff bfec 	b.w	8000a18 <HW_StopMode>

08000a40 <pf_nRFResetTimerCallBack>:
 * @param  None
 * @retval None
 */
static void pf_nRFResetTimerCallBack(void)
{
  RfResetTimerLock = 0;
 8000a40:	4b01      	ldr	r3, [pc, #4]	; (8000a48 <pf_nRFResetTimerCallBack+0x8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]

  return;
}
 8000a46:	4770      	bx	lr
 8000a48:	20000058 	.word	0x20000058

08000a4c <TimerTxRxCallback>:
 * @param  None
 * @retval None
 */
static void TimerTxRxCallback(void)
{
  pTimerTxRxCallback();
 8000a4c:	4b01      	ldr	r3, [pc, #4]	; (8000a54 <TimerTxRxCallback+0x8>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	4718      	bx	r3
 8000a52:	bf00      	nop
 8000a54:	20000058 	.word	0x20000058

08000a58 <Enable_SPI_CS>:
 * @retval None
 */
static void Enable_SPI_CS(void)
{
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <Enable_SPI_CS+0xc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a60:	f001 bf92 	b.w	8002988 <HAL_GPIO_WritePin>
 8000a64:	48000c00 	.word	0x48000c00

08000a68 <Disable_SPI_CS>:
 * @param  None
 * @retval None
 */
static void Disable_SPI_CS(void)
{
  while (__HAL_SPI_GET_FLAG(&SpiHandle,SPI_FLAG_BSY) == SET);
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <Disable_SPI_CS+0x18>)
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	6893      	ldr	r3, [r2, #8]
 8000a6e:	061b      	lsls	r3, r3, #24
 8000a70:	d4fc      	bmi.n	8000a6c <Disable_SPI_CS+0x4>

  /* CS set */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <Disable_SPI_CS+0x1c>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7a:	f001 bf85 	b.w	8002988 <HAL_GPIO_WritePin>
 8000a7e:	bf00      	nop
 8000a80:	20000058 	.word	0x20000058
 8000a84:	48000c00 	.word	0x48000c00

08000a88 <DisableEnable_SPI_CS>:
 * @brief  Disable and Enable SPI CS.
 * @param  None
 * @retval None
 */
static void DisableEnable_SPI_CS(void)
{
 8000a88:	b508      	push	{r3, lr}
  uint8_t localloop;
  Disable_SPI_CS(); /**< CS Set */
 8000a8a:	f7ff ffed 	bl	8000a68 <Disable_SPI_CS>
 8000a8e:	230d      	movs	r3, #13

  /* CS set */
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
  {
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 8000a90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000a94:	3b01      	subs	r3, #1
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 8000a96:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 8000a9a:	6811      	ldr	r1, [r2, #0]
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 8000a9c:	d1fa      	bne.n	8000a94 <DisableEnable_SPI_CS+0xc>
  }

  Enable_SPI_CS(); /**< CS Reset */

  return;
}
 8000a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Enable_SPI_CS(); /**< CS Reset */
 8000aa2:	f7ff bfd9 	b.w	8000a58 <Enable_SPI_CS>
	...

08000aa8 <Enable_SPI_Receiving_Path>:
{  
 8000aa8:	b538      	push	{r3, r4, r5, lr}
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 8000aaa:	4c09      	ldr	r4, [pc, #36]	; (8000ad0 <Enable_SPI_Receiving_Path+0x28>)
 8000aac:	2540      	movs	r5, #64	; 0x40
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 8000aae:	2017      	movs	r0, #23
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 8000ab0:	6165      	str	r5, [r4, #20]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 8000ab2:	f001 fe0b 	bl	80026cc <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
 8000ab6:	2017      	movs	r0, #23
 8000ab8:	f001 fdd6 	bl	8002668 <HAL_NVIC_EnableIRQ>
  if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_SET)
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <Enable_SPI_Receiving_Path+0x2c>)
 8000abe:	4629      	mov	r1, r5
 8000ac0:	f001 ff5c 	bl	800297c <HAL_GPIO_ReadPin>
 8000ac4:	2801      	cmp	r0, #1
    __HAL_GPIO_EXTI_GENERATE_SWIT(BNRG_SPI_IRQ_PIN);
 8000ac6:	bf02      	ittt	eq
 8000ac8:	6923      	ldreq	r3, [r4, #16]
 8000aca:	432b      	orreq	r3, r5
 8000acc:	6123      	streq	r3, [r4, #16]
}
 8000ace:	bd38      	pop	{r3, r4, r5, pc}
 8000ad0:	40010400 	.word	0x40010400
 8000ad4:	48001000 	.word	0x48001000

08000ad8 <LL_DMA_SetDataLength.constprop.0>:
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <LL_DMA_SetDataLength.constprop.0+0x18>)
 8000ada:	5c1a      	ldrb	r2, [r3, r0]
 8000adc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000ae0:	f502 3201 	add.w	r2, r2, #132096	; 0x20400
 8000ae4:	6853      	ldr	r3, [r2, #4]
 8000ae6:	0c1b      	lsrs	r3, r3, #16
 8000ae8:	041b      	lsls	r3, r3, #16
 8000aea:	4319      	orrs	r1, r3
 8000aec:	6051      	str	r1, [r2, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000aee:	4770      	bx	lr
 8000af0:	0800341e 	.word	0x0800341e

08000af4 <ReceiveHeader>:
 *               the configuration information for SPI module.
 * @param  DataHeader: buffer holding the header to receive
 * @retval None
 */
static void ReceiveHeader(SPI_RECEIVE_EVENT_t ReceiveEvent, uint8_t * DataHeader)
{
 8000af4:	b570      	push	{r4, r5, r6, lr}
  SpiContext.SpiReceiveContext.SpiReceiveEvent = ReceiveEvent;
 8000af6:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <ReceiveHeader+0x30>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000af8:	4d0b      	ldr	r5, [pc, #44]	; (8000b28 <ReceiveHeader+0x34>)
 8000afa:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
 8000afe:	682b      	ldr	r3, [r5, #0]
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	602b      	str	r3, [r5, #0]
{
 8000b06:	460e      	mov	r6, r1
  LL_DMA_SetMemoryIncMode(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, LL_DMA_MEMORY_INCREMENT);  /**< Configure DMA to send Tx packet */

  /*
   *  Set counter in both DMA
   */
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, HEADER_SIZE);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	2105      	movs	r1, #5
 8000b0c:	f7ff ffe4 	bl	8000ad8 <LL_DMA_SetDataLength.constprop.0>
  LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, HEADER_SIZE);
 8000b10:	2105      	movs	r1, #5
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff ffe0 	bl	8000ad8 <LL_DMA_SetDataLength.constprop.0>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <ReceiveHeader+0x38>)

  /*
   *  Set memory address in both DMA
   */
  LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)ReceivedHeader);
 8000b1a:	348c      	adds	r4, #140	; 0x8c
 8000b1c:	60dc      	str	r4, [r3, #12]
 8000b1e:	60ee      	str	r6, [r5, #12]
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)DataHeader);

  return;
}
 8000b20:	bd70      	pop	{r4, r5, r6, pc}
 8000b22:	bf00      	nop
 8000b24:	20000058 	.word	0x20000058
 8000b28:	4002041c 	.word	0x4002041c
 8000b2c:	40020408 	.word	0x40020408

08000b30 <SPI_Receive_Manager>:
{
 8000b30:	b570      	push	{r4, r5, r6, lr}
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8000b32:	4c36      	ldr	r4, [pc, #216]	; (8000c0c <SPI_Receive_Manager+0xdc>)
 8000b34:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b36:	6812      	ldr	r2, [r2, #0]
 8000b38:	6811      	ldr	r1, [r2, #0]
 8000b3a:	f021 0101 	bic.w	r1, r1, #1
 8000b3e:	6011      	str	r1, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8000b40:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8000b42:	6809      	ldr	r1, [r1, #0]
 8000b44:	680d      	ldr	r5, [r1, #0]
 8000b46:	f025 0501 	bic.w	r5, r5, #1
 8000b4a:	600d      	str	r5, [r1, #0]
    *(volatile uint8_t*)LL_SPI_DMA_GetRegAddr(BNRG_SPI_INSTANCE);
 8000b4c:	4d30      	ldr	r5, [pc, #192]	; (8000c10 <SPI_Receive_Manager+0xe0>)
 8000b4e:	7b2e      	ldrb	r6, [r5, #12]
 8000b50:	7b2e      	ldrb	r6, [r5, #12]
 8000b52:	7b2e      	ldrb	r6, [r5, #12]
 8000b54:	7b2d      	ldrb	r5, [r5, #12]
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmarx, DMA_IT_TC);  /**< Enable Receive packet notification */
 8000b56:	680d      	ldr	r5, [r1, #0]
 8000b58:	f045 0502 	orr.w	r5, r5, #2
 8000b5c:	600d      	str	r5, [r1, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 8000b5e:	6811      	ldr	r1, [r2, #0]
  switch (ReceiveRequest)
 8000b60:	2801      	cmp	r0, #1
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 8000b62:	f021 0102 	bic.w	r1, r1, #2
 8000b66:	6011      	str	r1, [r2, #0]
  switch (ReceiveRequest)
 8000b68:	d012      	beq.n	8000b90 <SPI_Receive_Manager+0x60>
 8000b6a:	2802      	cmp	r0, #2
 8000b6c:	d012      	beq.n	8000b94 <SPI_Receive_Manager+0x64>
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_RX, (uint8_t *)ReadHeaderCmd);
 8000b6e:	4929      	ldr	r1, [pc, #164]	; (8000c14 <SPI_Receive_Manager+0xe4>)
 8000b70:	2000      	movs	r0, #0
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 8000b72:	f7ff ffbf 	bl	8000af4 <ReceiveHeader>
  __HAL_DMA_ENABLE(SpiHandle.hdmarx);
 8000b76:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx);
 8000b82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6013      	str	r3, [r2, #0]
}
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 8000b90:	4921      	ldr	r1, [pc, #132]	; (8000c18 <SPI_Receive_Manager+0xe8>)
 8000b92:	e7ee      	b.n	8000b72 <SPI_Receive_Manager+0x42>
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 8000b94:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 8000b98:	f8b4 5078 	ldrh.w	r5, [r4, #120]	; 0x78
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 8000b9c:	2b01      	cmp	r3, #1
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8000b9e:	bf1b      	ittet	ne
 8000ba0:	f894 308f 	ldrbne.w	r3, [r4, #143]	; 0x8f
 8000ba4:	f894 2090 	ldrbne.w	r2, [r4, #144]	; 0x90
        byte_count = SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive;
 8000ba8:	f8b4 307a 	ldrheq.w	r3, [r4, #122]	; 0x7a
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8000bac:	ea43 2302 	orrne.w	r3, r3, r2, lsl #8
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive = byte_count;
 8000bb0:	bf18      	it	ne
 8000bb2:	f8a4 307a 	strhne.w	r3, [r4, #122]	; 0x7a
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 8000bb6:	429d      	cmp	r5, r3
 8000bb8:	d21f      	bcs.n	8000bfa <SPI_Receive_Manager+0xca>
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive -= byte_count;
 8000bba:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
 8000bbe:	1b5b      	subs	r3, r3, r5
 8000bc0:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_PAYLOAD_CONT;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        SpiContext.SpiReceiveContext.PacketCont = TRUE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000bd0:	4e12      	ldr	r6, [pc, #72]	; (8000c1c <SPI_Receive_Manager+0xec>)
      SpiContext.SpiReceiveContext.PayloadLength = byte_count;
 8000bd2:	f8a4 5072 	strh.w	r5, [r4, #114]	; 0x72
 8000bd6:	6833      	ldr	r3, [r6, #0]
 8000bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bdc:	6033      	str	r3, [r6, #0]
      LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, byte_count);
 8000bde:	4629      	mov	r1, r5
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff ff79 	bl	8000ad8 <LL_DMA_SetDataLength.constprop.0>
      LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, byte_count);
 8000be6:	4629      	mov	r1, r5
 8000be8:	2001      	movs	r0, #1
 8000bea:	f7ff ff75 	bl	8000ad8 <LL_DMA_SetDataLength.constprop.0>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <SPI_Receive_Manager+0xf0>)
      LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)SpiContext.SpiReceiveContext.pBuffer);
 8000bf0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8000bf2:	60da      	str	r2, [r3, #12]
      LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)&DummyBytes);
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <SPI_Receive_Manager+0xf4>)
 8000bf6:	60f3      	str	r3, [r6, #12]
}
 8000bf8:	e7bd      	b.n	8000b76 <SPI_Receive_Manager+0x46>
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_END;
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8000c00:	2200      	movs	r2, #0
 8000c02:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
 8000c06:	461d      	mov	r5, r3
 8000c08:	e7e2      	b.n	8000bd0 <SPI_Receive_Manager+0xa0>
 8000c0a:	bf00      	nop
 8000c0c:	20000058 	.word	0x20000058
 8000c10:	40003c00 	.word	0x40003c00
 8000c14:	08003425 	.word	0x08003425
 8000c18:	0800342a 	.word	0x0800342a
 8000c1c:	4002041c 	.word	0x4002041c
 8000c20:	40020408 	.word	0x40020408
 8000c24:	0800342f 	.word	0x0800342f

08000c28 <TimerTransmitCallback>:
{
 8000c28:	b508      	push	{r3, lr}
  SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f7ff ff80 	bl	8000b30 <SPI_Receive_Manager>
}
 8000c30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_En);
 8000c34:	2101      	movs	r1, #1
 8000c36:	2000      	movs	r0, #0
 8000c38:	f001 b862 	b.w	8001d00 <LPM_SetStopMode>

08000c3c <HAL_SPI_MspInit>:
{
 8000c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 8000c40:	6802      	ldr	r2, [r0, #0]
 8000c42:	4b6d      	ldr	r3, [pc, #436]	; (8000df8 <HAL_SPI_MspInit+0x1bc>)
 8000c44:	429a      	cmp	r2, r3
{
 8000c46:	b08d      	sub	sp, #52	; 0x34
 8000c48:	4606      	mov	r6, r0
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 8000c4a:	f040 80d1 	bne.w	8000df0 <HAL_SPI_MspInit+0x1b4>
    BNRG_SPI_SCLK_CLK_ENABLE();
 8000c4e:	4c6b      	ldr	r4, [pc, #428]	; (8000dfc <HAL_SPI_MspInit+0x1c0>)
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 8000c50:	486b      	ldr	r0, [pc, #428]	; (8000e00 <HAL_SPI_MspInit+0x1c4>)
    BNRG_SPI_SCLK_CLK_ENABLE();
 8000c52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000c5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	9b00      	ldr	r3, [sp, #0]
    BNRG_SPI_MISO_CLK_ENABLE();
 8000c64:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000c6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	9b01      	ldr	r3, [sp, #4]
    BNRG_SPI_MOSI_CLK_ENABLE();
 8000c76:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000c7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	9b02      	ldr	r3, [sp, #8]
    BNRG_SPI_CS_CLK_ENABLE();
 8000c88:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000c90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	9303      	str	r3, [sp, #12]
 8000c98:	9b03      	ldr	r3, [sp, #12]
    BNRG_SPI_IRQ_CLK_ENABLE();
 8000c9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000ca2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	9304      	str	r3, [sp, #16]
 8000caa:	9b04      	ldr	r3, [sp, #16]
    BNRG_SPI_CLK_ENABLE();
 8000cac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cb2:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 8000cc0:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 8000cc4:	f04f 0906 	mov.w	r9, #6
    BNRG_SPI_CLK_ENABLE();
 8000cc8:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 8000cca:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 8000cd4:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 8000cd8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 8000cdc:	f001 fd70 	bl	80027c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
 8000ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8000ce4:	4846      	ldr	r0, [pc, #280]	; (8000e00 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
 8000ce6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8000cea:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
 8000cec:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
 8000cf0:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8000cf4:	f001 fd64 	bl	80027c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 8000cfc:	4840      	ldr	r0, [pc, #256]	; (8000e00 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
 8000cfe:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 8000d02:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
 8000d04:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
 8000d08:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 8000d0c:	f001 fd58 	bl	80027c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	483c      	ldr	r0, [pc, #240]	; (8000e04 <HAL_SPI_MspInit+0x1c8>)
 8000d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d18:	f001 fe36 	bl	8002988 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 8000d1c:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8000d20:	f04f 0a01 	mov.w	sl, #1
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8000d24:	4837      	ldr	r0, [pc, #220]	; (8000e04 <HAL_SPI_MspInit+0x1c8>)
    GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
 8000d26:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8000d28:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
 8000d2a:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 8000d2e:	e9cd ba07 	strd	fp, sl, [sp, #28]
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8000d32:	f001 fd45 	bl	80027c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8000d36:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <HAL_SPI_MspInit+0x1cc>)
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8000d38:	4834      	ldr	r0, [pc, #208]	; (8000e0c <HAL_SPI_MspInit+0x1d0>)
    GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
 8000d3a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8000d3c:	2240      	movs	r2, #64	; 0x40
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8000d3e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8000d40:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
 8000d44:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8000d48:	f001 fd3a 	bl	80027c0 <HAL_GPIO_Init>
    BNRG_DMA_CLK_ENABLE();   
 8000d4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8000d4e:	4930      	ldr	r1, [pc, #192]	; (8000e10 <HAL_SPI_MspInit+0x1d4>)
    BNRG_DMA_CLK_ENABLE();   
 8000d50:	ea43 0308 	orr.w	r3, r3, r8
 8000d54:	64a3      	str	r3, [r4, #72]	; 0x48
 8000d56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 8000d58:	4c2e      	ldr	r4, [pc, #184]	; (8000e14 <HAL_SPI_MspInit+0x1d8>)
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8000d5a:	46a1      	mov	r9, r4
    BNRG_DMA_CLK_ENABLE();   
 8000d5c:	ea03 0308 	and.w	r3, r3, r8
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8000d60:	f849 1f94 	str.w	r1, [r9, #148]!
    BNRG_DMA_CLK_ENABLE();   
 8000d64:	9306      	str	r3, [sp, #24]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000d66:	2280      	movs	r2, #128	; 0x80
    BNRG_DMA_CLK_ENABLE();   
 8000d68:	9b06      	ldr	r3, [sp, #24]
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 8000d6a:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000d6e:	2310      	movs	r3, #16
    HAL_DMA_Init(&hdma_tx);   
 8000d70:	4648      	mov	r0, r9
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000d72:	e9c4 3527 	strd	r3, r5, [r4, #156]	; 0x9c
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d76:	e9c4 2529 	strd	r2, r5, [r4, #164]	; 0xa4
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8000d7a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
    hdma_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000d7e:	f8c4 b0b4 	str.w	fp, [r4, #180]	; 0xb4
    HAL_DMA_Init(&hdma_tx);   
 8000d82:	f001 fcb3 	bl	80026ec <HAL_DMA_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8000d86:	4922      	ldr	r1, [pc, #136]	; (8000e10 <HAL_SPI_MspInit+0x1d4>)
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
  return (uint32_t) &(SPIx->DR);
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <HAL_SPI_MspInit+0x1dc>)
 8000d8a:	608b      	str	r3, [r1, #8]
    hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000d8c:	e9c4 7538 	strd	r7, r5, [r4, #224]	; 0xe0
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 8000d90:	4627      	mov	r7, r4
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 8000d92:	f8c6 9054 	str.w	r9, [r6, #84]	; 0x54
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 8000d96:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8000e1c <HAL_SPI_MspInit+0x1e0>
 8000d9a:	f847 9fdc 	str.w	r9, [r7, #220]!
    hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000d9e:	2280      	movs	r2, #128	; 0x80
    HAL_DMA_Init(&hdma_rx);
 8000da0:	4638      	mov	r0, r7
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da2:	e9c4 253b 	strd	r2, r5, [r4, #236]	; 0xec
    hdma_rx.Init.Mode                = DMA_NORMAL;
 8000da6:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 8000daa:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
    hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000dae:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000db2:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
    HAL_DMA_Init(&hdma_rx);
 8000db6:	f001 fc99 	bl	80026ec <HAL_DMA_Init>
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_SPI_MspInit+0x1dc>)
 8000dbc:	f8c9 3008 	str.w	r3, [r9, #8]
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 8000dc0:	462a      	mov	r2, r5
 8000dc2:	4651      	mov	r1, sl
 8000dc4:	2039      	movs	r0, #57	; 0x39
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx); 
 8000dc6:	65b7      	str	r7, [r6, #88]	; 0x58
 8000dc8:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 8000dcc:	f001 fc1a 	bl	8002604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_TX_IRQn);
 8000dd0:	2039      	movs	r0, #57	; 0x39
 8000dd2:	f001 fc49 	bl	8002668 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_RX_IRQn, 
 8000dd6:	462a      	mov	r2, r5
 8000dd8:	4651      	mov	r1, sl
 8000dda:	2038      	movs	r0, #56	; 0x38
 8000ddc:	f001 fc12 	bl	8002604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_RX_IRQn);
 8000de0:	2038      	movs	r0, #56	; 0x38
 8000de2:	f001 fc41 	bl	8002668 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BNRG_SPI_EXTI_IRQn, 
 8000de6:	462a      	mov	r2, r5
 8000de8:	4641      	mov	r1, r8
 8000dea:	2017      	movs	r0, #23
 8000dec:	f001 fc0a 	bl	8002604 <HAL_NVIC_SetPriority>
}
 8000df0:	b00d      	add	sp, #52	; 0x34
 8000df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df6:	bf00      	nop
 8000df8:	40003c00 	.word	0x40003c00
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48000800 	.word	0x48000800
 8000e04:	48000c00 	.word	0x48000c00
 8000e08:	10110000 	.word	0x10110000
 8000e0c:	48001000 	.word	0x48001000
 8000e10:	4002041c 	.word	0x4002041c
 8000e14:	20000058 	.word	0x20000058
 8000e18:	40003c0c 	.word	0x40003c0c
 8000e1c:	40020408 	.word	0x40020408

08000e20 <HW_BNRG_Init>:
  return;
}


void HW_BNRG_Init(HW_BNRG_InitMode_t InitMode)
{
 8000e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  hspi->Instance = BNRG_SPI_INSTANCE;
 8000e22:	4c44      	ldr	r4, [pc, #272]	; (8000f34 <HW_BNRG_Init+0x114>)
  hspi->Init.Mode = BNRG_SPI_MODE;
 8000e24:	4e44      	ldr	r6, [pc, #272]	; (8000f38 <HW_BNRG_Init+0x118>)
 8000e26:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 8000e2a:	2500      	movs	r5, #0
  hspi->Init.Mode = BNRG_SPI_MODE;
 8000e2c:	e9c4 6302 	strd	r6, r3, [r4, #8]
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 8000e30:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e34:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hspi->Init.NSS = BNRG_SPI_NSS;
 8000e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3c:	6223      	str	r3, [r4, #32]
{
 8000e3e:	b089      	sub	sp, #36	; 0x24
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8000e40:	2307      	movs	r3, #7
{
 8000e42:	4607      	mov	r7, r0
  HAL_SPI_Init(hspi);
 8000e44:	f104 0008 	add.w	r0, r4, #8
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8000e48:	6363      	str	r3, [r4, #52]	; 0x34
  hspi->Init.CLKPhase = BNRG_SPI_CLKPHASE;
 8000e4a:	e9c4 5506 	strd	r5, r5, [r4, #24]
  hspi->Init.TIMode = BNRG_SPI_TIMODE;
 8000e4e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hspi->Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 8000e52:	6265      	str	r5, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 8000e54:	6325      	str	r5, [r4, #48]	; 0x30
  HAL_SPI_Init(hspi);
 8000e56:	f002 fa2c 	bl	80032b2 <HAL_SPI_Init>
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8000e5a:	6873      	ldr	r3, [r6, #4]
  SPI_Init(&SpiHandle);

  LL_SPI_EnableDMAReq_TX(BNRG_SPI_INSTANCE);
  LL_SPI_EnableDMAReq_RX(BNRG_SPI_INSTANCE);

  __HAL_SPI_ENABLE(&SpiHandle);
 8000e5c:	68a2      	ldr	r2, [r4, #8]
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000e64:	6873      	ldr	r3, [r6, #4]
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6073      	str	r3, [r6, #4]
 8000e6c:	6813      	ldr	r3, [r2, #0]

  SpiContext.SpiReceiveContext.PacketCont = FALSE;
  SpiContext.SpiTransmitContext.RequestPending = FALSE;
 8000e6e:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
  __HAL_SPI_ENABLE(&SpiHandle);
 8000e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8000e76:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_SPI_ENABLE(&SpiHandle);
 8000e7a:	6013      	str	r3, [r2, #0]
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 8000e7c:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8000e80:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;

  if(InitMode != HW_BNRG_Limited)
 8000e84:	2f00      	cmp	r7, #0
 8000e86:	d044      	beq.n	8000f12 <HW_BNRG_Init+0xf2>
  *         @arg @ref LL_PWR_WAKEUP_PIN5
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityHigh(uint32_t WakeUpPin)
{
  CLEAR_BIT(PWR->CR4, WakeUpPin);
 8000e88:	4a2c      	ldr	r2, [pc, #176]	; (8000f3c <HW_BNRG_Init+0x11c>)
 8000e8a:	68d3      	ldr	r3, [r2, #12]
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	60d3      	str	r3, [r2, #12]
  {
    LL_PWR_SetWakeUpPinPolarityHigh(BNRG_SPI_IRQ_WAKEUP_PIN);

    HW_TS_Create(CFG_TimProcID_isr, &TxRxTimerId, hw_ts_SingleShot, TimerTxRxCallback);
 8000e92:	f504 7192 	add.w	r1, r4, #292	; 0x124
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HW_BNRG_Init+0x120>)
 8000e98:	462a      	mov	r2, r5
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f000 fad2 	bl	8001444 <HW_TS_Create>
  GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
 8000ea0:	2701      	movs	r7, #1
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <HW_BNRG_Init+0x124>)
  GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
 8000ea4:	9603      	str	r6, [sp, #12]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8000ea6:	462a      	mov	r2, r5
 8000ea8:	f10d 0107 	add.w	r1, sp, #7
 8000eac:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
 8000eae:	e9cd 7504 	strd	r7, r5, [sp, #16]
  GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
 8000eb2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
 8000eb4:	9507      	str	r5, [sp, #28]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8000eb6:	f000 fac5 	bl	8001444 <HW_TS_Create>
  BNRG_SPI_RESET_CLK_ENABLE();
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <HW_BNRG_Init+0x128>)
 8000ebc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ebe:	433a      	orrs	r2, r7
 8000ec0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	403b      	ands	r3, r7
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 8000ec6:	462a      	mov	r2, r5
  BNRG_SPI_RESET_CLK_ENABLE();
 8000ec8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 8000eca:	4631      	mov	r1, r6
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  BNRG_SPI_RESET_CLK_ENABLE();
 8000ed0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 8000ed2:	f001 fd59 	bl	8002988 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);
 8000ed6:	a903      	add	r1, sp, #12
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000edc:	f001 fc70 	bl	80027c0 <HAL_GPIO_Init>
  HW_TS_Start(ubnRFResetTimerID, BLUENRG_HOLD_TIME_IN_RESET);
 8000ee0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000ee4:	211c      	movs	r1, #28
 8000ee6:	f000 fba9 	bl	800163c <HW_TS_Start>
  RfResetTimerLock = 1;
 8000eea:	7027      	strb	r7, [r4, #0]
  while(RfResetTimerLock == 1)
 8000eec:	7823      	ldrb	r3, [r4, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d00c      	beq.n	8000f0c <HW_BNRG_Init+0xec>
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	f001 fd44 	bl	8002988 <HAL_GPIO_WritePin>
  HW_TS_Delete(ubnRFResetTimerID);
 8000f00:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000f04:	f000 fb8c 	bl	8001620 <HW_TS_Delete>
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_CS_STDBY_PIN, BNRG_SPI_CS_STDBY_PORT);
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_RESET_STDBY_PIN, BNRG_SPI_RESET_STDBY_PORT);
  }

  return;
}
 8000f08:	b009      	add	sp, #36	; 0x24
 8000f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HW_SleepMode();
 8000f0c:	f7ff fd7a 	bl	8000a04 <HW_SleepMode>
 8000f10:	e7ec      	b.n	8000eec <HW_BNRG_Init+0xcc>
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HW_BNRG_Init+0x12c>)
 8000f14:	6813      	ldr	r3, [r2, #0]
 8000f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f1a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
 8000f1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HW_BNRG_Init+0x130>)
 8000f22:	6811      	ldr	r1, [r2, #0]
 8000f24:	400b      	ands	r3, r1
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	6832      	ldr	r2, [r6, #0]
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HW_BNRG_Init+0x134>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	6033      	str	r3, [r6, #0]
  return;
 8000f30:	e7ea      	b.n	8000f08 <HW_BNRG_Init+0xe8>
 8000f32:	bf00      	nop
 8000f34:	20000058 	.word	0x20000058
 8000f38:	40003c00 	.word	0x40003c00
 8000f3c:	40007000 	.word	0x40007000
 8000f40:	08000a4d 	.word	0x08000a4d
 8000f44:	08000a41 	.word	0x08000a41
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40007034 	.word	0x40007034
 8000f50:	bfff8fc7 	.word	0xbfff8fc7
 8000f54:	bfff8fdf 	.word	0xbfff8fdf

08000f58 <HW_BNRG_EvtReq>:
}


void HW_BNRG_EvtReq(uint8_t *buffer, uint16_t buff_size)
{
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HW_BNRG_EvtReq+0x20>)
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 8000f5a:	2200      	movs	r2, #0
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 8000f5c:	6758      	str	r0, [r3, #116]	; 0x74
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
 8000f5e:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 8000f62:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  if( SpiContext.SpiReceiveContext.PacketCont == TRUE )
 8000f66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d102      	bne.n	8000f74 <HW_BNRG_EvtReq+0x1c>
  {
    SPI_Receive_Manager(SPI_REQUEST_PAYLOAD);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f7ff bdde 	b.w	8000b30 <SPI_Receive_Manager>
  }
  else
  {
    Enable_SPI_Receiving_Path();
 8000f74:	f7ff bd98 	b.w	8000aa8 <Enable_SPI_Receiving_Path>
 8000f78:	20000058 	.word	0x20000058

08000f7c <HW_BNRG_SpiIrqCb>:
  return;
}


void HW_BNRG_SpiIrqCb(void)
{  
 8000f7c:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7e:	b672      	cpsid	i
  __disable_irq();
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HW_BNRG_SpiIrqCb+0x30>)
 8000f82:	f893 506c 	ldrb.w	r5, [r3, #108]	; 0x6c
 8000f86:	b975      	cbnz	r5, 8000fa6 <HW_BNRG_SpiIrqCb+0x2a>
  {
    SpiContext.SpiPeripheralState = SPI_BUSY;
 8000f88:	2401      	movs	r4, #1
 8000f8a:	f883 406c 	strb.w	r4, [r3, #108]	; 0x6c
  __ASM volatile ("cpsie i" : : : "memory");
 8000f8e:	b662      	cpsie	i
    __enable_irq();
    Enable_SPI_CS();
 8000f90:	f7ff fd62 	bl	8000a58 <Enable_SPI_CS>
    SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX);
 8000f94:	4628      	mov	r0, r5
 8000f96:	f7ff fdcb 	bl	8000b30 <SPI_Receive_Manager>
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4620      	mov	r0, r4
  }
  else
  {
    __enable_irq();
  }
}
 8000f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 8000fa2:	f000 bead 	b.w	8001d00 <LPM_SetStopMode>
 8000fa6:	b662      	cpsie	i
}
 8000fa8:	bd38      	pop	{r3, r4, r5, pc}
 8000faa:	bf00      	nop
 8000fac:	20000058 	.word	0x20000058

08000fb0 <HW_BNRG_DMATxCb>:


void HW_BNRG_DMATxCb(void)
{
 8000fb0:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmatx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG))
 8000fb2:	4c20      	ldr	r4, [pc, #128]	; (8001034 <HW_BNRG_DMATxCb+0x84>)
 8000fb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	0791      	lsls	r1, r2, #30
 8000fbc:	d507      	bpl.n	8000fce <HW_BNRG_DMATxCb+0x1e>
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <HW_BNRG_DMATxCb+0x88>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	bf8c      	ite	hi
 8000fc4:	4b1d      	ldrhi	r3, [pc, #116]	; (800103c <HW_BNRG_DMATxCb+0x8c>)
 8000fc6:	4b1e      	ldrls	r3, [pc, #120]	; (8001040 <HW_BNRG_DMATxCb+0x90>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	0692      	lsls	r2, r2, #26
 8000fcc:	d400      	bmi.n	8000fd0 <HW_BNRG_DMATxCb+0x20>
      TransmitClosure();
    }
  }

  return;
}
 8000fce:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	605a      	str	r2, [r3, #4]
    if(SpiContext.SpiTransmitContext.PacketCont == TRUE)
 8000fd4:	f894 5088 	ldrb.w	r5, [r4, #136]	; 0x88
 8000fd8:	2d01      	cmp	r5, #1
 8000fda:	d10d      	bne.n	8000ff8 <HW_BNRG_DMATxCb+0x48>
      SpiContext.SpiTransmitContext.pPayloadData += SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 8000fdc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8000fe0:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
 8000fe4:	4413      	add	r3, r2
 8000fe6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      DisableEnable_SPI_CS();
 8000fea:	f7ff fd4d 	bl	8000a88 <DisableEnable_SPI_CS>
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 8000fee:	4628      	mov	r0, r5
}
 8000ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 8000ff4:	f7ff bd9c 	b.w	8000b30 <SPI_Receive_Manager>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	f000 fe80 	bl	8001d00 <LPM_SetStopMode>
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  Disable_SPI_CS();
 8001006:	f7ff fd2f 	bl	8000a68 <Disable_SPI_CS>
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 800100a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8001016:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]
  if(SpiContext.SpiReceiveContext.BufferStatus == BUFFER_AVAILABLE)
 8001022:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1d1      	bne.n	8000fce <HW_BNRG_DMATxCb+0x1e>
}
 800102a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Enable_SPI_Receiving_Path();
 800102e:	f7ff bd3b 	b.w	8000aa8 <Enable_SPI_Receiving_Path>
 8001032:	bf00      	nop
 8001034:	20000058 	.word	0x20000058
 8001038:	40020080 	.word	0x40020080
 800103c:	40020400 	.word	0x40020400
 8001040:	40020000 	.word	0x40020000

08001044 <HW_BNRG_TimStartAllowed>:
}


void HW_BNRG_TimStartAllowed(void)
{
  HW_TS_Start(TxRxTimerId, TimeoutTicks);
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HW_BNRG_TimStartAllowed+0x10>)
 8001046:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800104a:	f893 0124 	ldrb.w	r0, [r3, #292]	; 0x124
 800104e:	f000 baf5 	b.w	800163c <HW_TS_Start>
 8001052:	bf00      	nop
 8001054:	20000058 	.word	0x20000058

08001058 <HW_BNRG_TimStartReq>:
   * the Timer requested can be started immediately because there is no risk that
   * the timer is already in use.
   * If a specific application needs to handle the timer differently,
   * it is suggested to overload the function without change the COMMON one. 
   */
  HW_BNRG_TimStartAllowed();
 8001058:	f7ff bff4 	b.w	8001044 <HW_BNRG_TimStartAllowed>

0800105c <WakeupBlueNRG>:
{
 800105c:	b510      	push	{r4, lr}
  pTimerTxRxCallback = TimerTransmitCallback;
 800105e:	4c08      	ldr	r4, [pc, #32]	; (8001080 <WakeupBlueNRG+0x24>)
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <WakeupBlueNRG+0x28>)
 8001062:	6063      	str	r3, [r4, #4]
  Enable_SPI_CS();
 8001064:	f7ff fcf8 	bl	8000a58 <Enable_SPI_CS>
  TimeoutTicks = SPI_TX_TIMEOUT;
 8001068:	2306      	movs	r3, #6
 800106a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
  HW_BNRG_TimStartReq();
 800106e:	f7ff fff3 	bl	8001058 <HW_BNRG_TimStartReq>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8001072:	2100      	movs	r1, #0
}
 8001074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8001078:	4608      	mov	r0, r1
 800107a:	f000 be41 	b.w	8001d00 <LPM_SetStopMode>
 800107e:	bf00      	nop
 8001080:	20000058 	.word	0x20000058
 8001084:	08000c29 	.word	0x08000c29

08001088 <HW_BNRG_Send>:
{  
 8001088:	b508      	push	{r3, lr}
  SpiContext.SpiTransmitContext.pPayloadData = payload_data;
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HW_BNRG_Send+0x34>)
 800108c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit = payload_size;
 8001090:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 8001096:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 800109a:	2201      	movs	r2, #1
 800109c:	b949      	cbnz	r1, 80010b2 <HW_BNRG_Send+0x2a>
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 800109e:	2017      	movs	r0, #23
    SpiContext.SpiPeripheralState = SPI_BUSY;
 80010a0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 80010a4:	f001 faee 	bl	8002684 <HAL_NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80010a8:	b662      	cpsie	i
}
 80010aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WakeupBlueNRG();
 80010ae:	f7ff bfd5 	b.w	800105c <WakeupBlueNRG>
    SpiContext.SpiTransmitContext.RequestPending = TRUE;
 80010b2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80010b6:	b662      	cpsie	i
}
 80010b8:	bd08      	pop	{r3, pc}
 80010ba:	bf00      	nop
 80010bc:	20000058 	.word	0x20000058

080010c0 <ReceiveClosure>:
{
 80010c0:	b510      	push	{r4, lr}
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 80010c2:	4c12      	ldr	r4, [pc, #72]	; (800110c <ReceiveClosure+0x4c>)
 80010c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	6813      	ldr	r3, [r2, #0]
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 80010d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 80010de:	2017      	movs	r0, #23
 80010e0:	f001 fad0 	bl	8002684 <HAL_NVIC_DisableIRQ>
  if(SpiContext.SpiTransmitContext.RequestPending == TRUE)
 80010e4:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 80010e8:	2a01      	cmp	r2, #1
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	d108      	bne.n	8001102 <ReceiveClosure+0x42>
    SpiContext.SpiTransmitContext.RequestPending = FALSE;
 80010f0:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
    SpiContext.SpiPeripheralState = SPI_BUSY;
 80010f4:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
  __ASM volatile ("cpsie i" : : : "memory");
 80010f8:	b662      	cpsie	i
}
 80010fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WakeupBlueNRG();
 80010fe:	f7ff bfad 	b.w	800105c <WakeupBlueNRG>
    SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 8001102:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8001106:	b662      	cpsie	i
}
 8001108:	bd10      	pop	{r4, pc}
 800110a:	bf00      	nop
 800110c:	20000058 	.word	0x20000058

08001110 <ProcessEndOfReceive>:
{
 8001110:	b510      	push	{r4, lr}
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;
 8001112:	4c06      	ldr	r4, [pc, #24]	; (800112c <ProcessEndOfReceive+0x1c>)
 8001114:	2301      	movs	r3, #1
 8001116:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  ReceiveClosure();
 800111a:	f7ff ffd1 	bl	80010c0 <ReceiveClosure>
  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 800111e:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
}
 8001122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 8001126:	f000 bd5b 	b.w	8001be0 <HW_BNRG_Isr>
 800112a:	bf00      	nop
 800112c:	20000058 	.word	0x20000058

08001130 <HW_BNRG_DMARxCb>:
{
 8001130:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmarx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG))
 8001132:	4c53      	ldr	r4, [pc, #332]	; (8001280 <HW_BNRG_DMARxCb+0x150>)
 8001134:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	0795      	lsls	r5, r2, #30
 800113c:	d507      	bpl.n	800114e <HW_BNRG_DMARxCb+0x1e>
 800113e:	4951      	ldr	r1, [pc, #324]	; (8001284 <HW_BNRG_DMARxCb+0x154>)
 8001140:	428b      	cmp	r3, r1
 8001142:	bf8c      	ite	hi
 8001144:	4a50      	ldrhi	r2, [pc, #320]	; (8001288 <HW_BNRG_DMARxCb+0x158>)
 8001146:	4a51      	ldrls	r2, [pc, #324]	; (800128c <HW_BNRG_DMARxCb+0x15c>)
 8001148:	6810      	ldr	r0, [r2, #0]
 800114a:	0780      	lsls	r0, r0, #30
 800114c:	d400      	bmi.n	8001150 <HW_BNRG_DMARxCb+0x20>
}
 800114e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG);
 8001150:	2002      	movs	r0, #2
 8001152:	6050      	str	r0, [r2, #4]
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 8001154:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001156:	6815      	ldr	r5, [r2, #0]
 8001158:	428d      	cmp	r5, r1
 800115a:	bf8c      	ite	hi
 800115c:	484a      	ldrhi	r0, [pc, #296]	; (8001288 <HW_BNRG_DMARxCb+0x158>)
 800115e:	484b      	ldrls	r0, [pc, #300]	; (800128c <HW_BNRG_DMARxCb+0x15c>)
 8001160:	2220      	movs	r2, #32
 8001162:	6042      	str	r2, [r0, #4]
    switch (SpiContext.SpiReceiveContext.SpiReceiveEvent)
 8001164:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8001168:	2a03      	cmp	r2, #3
 800116a:	d8f0      	bhi.n	800114e <HW_BNRG_DMARxCb+0x1e>
 800116c:	e8df f002 	tbb	[pc, r2]
 8001170:	2a243802 	.word	0x2a243802
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8001174:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 8001178:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 800117c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8001180:	d003      	beq.n	800118a <HW_BNRG_DMARxCb+0x5a>
 8001182:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 8001186:	2802      	cmp	r0, #2
 8001188:	d012      	beq.n	80011b0 <HW_BNRG_DMARxCb+0x80>
          if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET)
 800118a:	4841      	ldr	r0, [pc, #260]	; (8001290 <HW_BNRG_DMARxCb+0x160>)
 800118c:	2140      	movs	r1, #64	; 0x40
 800118e:	f001 fbf5 	bl	800297c <HAL_GPIO_ReadPin>
 8001192:	4604      	mov	r4, r0
 8001194:	b948      	cbnz	r0, 80011aa <HW_BNRG_DMARxCb+0x7a>
            Disable_SPI_CS();
 8001196:	f7ff fc67 	bl	8000a68 <Disable_SPI_CS>
            LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 800119a:	4621      	mov	r1, r4
 800119c:	2001      	movs	r0, #1
 800119e:	f000 fdaf 	bl	8001d00 <LPM_SetStopMode>
}
 80011a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ReceiveClosure();
 80011a6:	f7ff bf8b 	b.w	80010c0 <ReceiveClosure>
            DisableEnable_SPI_CS();
 80011aa:	f7ff fc6d 	bl	8000a88 <DisableEnable_SPI_CS>
            SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX); /**< BlueNRG not ready for reading */
 80011ae:	2000      	movs	r0, #0
}
 80011b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 80011b4:	f7ff bcbc 	b.w	8000b30 <SPI_Receive_Manager>
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 80011b8:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
}
 80011bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 80011c0:	f000 bd0e 	b.w	8001be0 <HW_BNRG_Isr>
        Disable_SPI_CS();
 80011c4:	f7ff fc50 	bl	8000a68 <Disable_SPI_CS>
        LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 80011c8:	2100      	movs	r1, #0
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 fd98 	bl	8001d00 <LPM_SetStopMode>
        pTimerTxRxCallback = ProcessEndOfReceive;
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <HW_BNRG_DMARxCb+0x164>)
 80011d2:	6063      	str	r3, [r4, #4]
        TimeoutTicks = SPI_END_RECEIVE_FIX_TIMEOUT;
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        HW_BNRG_TimStartReq();
 80011da:	f7ff ff3d 	bl	8001058 <HW_BNRG_TimStartReq>
        break;
 80011de:	e7b6      	b.n	800114e <HW_BNRG_DMARxCb+0x1e>
        byte_count = (ReceivedHeader[2]<<8)|ReceivedHeader[1];
 80011e0:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
 80011e4:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 80011e8:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
 80011ec:	d003      	beq.n	80011f6 <HW_BNRG_DMARxCb+0xc6>
 80011ee:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 80011f2:	2802      	cmp	r0, #2
 80011f4:	d003      	beq.n	80011fe <HW_BNRG_DMARxCb+0xce>
          DisableEnable_SPI_CS();
 80011f6:	f7ff fc47 	bl	8000a88 <DisableEnable_SPI_CS>
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 80011fa:	2001      	movs	r0, #1
 80011fc:	e7d8      	b.n	80011b0 <HW_BNRG_DMARxCb+0x80>
          if( byte_count < SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit)
 80011fe:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8001202:	4290      	cmp	r0, r2
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = byte_count;
 8001204:	bf83      	ittte	hi
 8001206:	f8a4 2086 	strhhi.w	r2, [r4, #134]	; 0x86
            SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit -= SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 800120a:	1a82      	subhi	r2, r0, r2
 800120c:	f8a4 2084 	strhhi.w	r2, [r4, #132]	; 0x84
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 8001210:	2200      	movls	r2, #0
            SpiContext.SpiTransmitContext.PacketCont = TRUE;
 8001212:	bf88      	it	hi
 8001214:	2201      	movhi	r2, #1
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 8001216:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 800121a:	682a      	ldr	r2, [r5, #0]
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit;
 800121c:	bf98      	it	ls
 800121e:	f8a4 0086 	strhls.w	r0, [r4, #134]	; 0x86
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	602a      	str	r2, [r5, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 8001230:	681a      	ldr	r2, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 8001232:	428d      	cmp	r5, r1
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 8001234:	f022 0202 	bic.w	r2, r2, #2
 8001238:	601a      	str	r2, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 800123a:	bf8c      	ite	hi
 800123c:	4a12      	ldrhi	r2, [pc, #72]	; (8001288 <HW_BNRG_DMARxCb+0x158>)
 800123e:	4a13      	ldrls	r2, [pc, #76]	; (800128c <HW_BNRG_DMARxCb+0x15c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001240:	4d15      	ldr	r5, [pc, #84]	; (8001298 <HW_BNRG_DMARxCb+0x168>)
 8001242:	2320      	movs	r3, #32
 8001244:	6053      	str	r3, [r2, #4]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_DMA_TX_IRQn); /**< Clear DMA pending bit in NVIC */
 8001246:	2039      	movs	r0, #57	; 0x39
 8001248:	f001 fa40 	bl	80026cc <HAL_NVIC_ClearPendingIRQ>
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 800124c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 800124e:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	6813      	ldr	r3, [r2, #0]
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001262:	602b      	str	r3, [r5, #0]
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff fc37 	bl	8000ad8 <LL_DMA_SetDataLength.constprop.0>
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)SpiContext.SpiTransmitContext.pPayloadData);  /**< Set memory address in DMA TX */
 800126a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800126e:	60eb      	str	r3, [r5, #12]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx); /**< Enable DMA TX */
 8001270:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	6813      	ldr	r3, [r2, #0]
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]
  return;
 800127c:	e767      	b.n	800114e <HW_BNRG_DMARxCb+0x1e>
 800127e:	bf00      	nop
 8001280:	20000058 	.word	0x20000058
 8001284:	40020080 	.word	0x40020080
 8001288:	40020400 	.word	0x40020400
 800128c:	40020000 	.word	0x40020000
 8001290:	48001000 	.word	0x48001000
 8001294:	08001111 	.word	0x08001111
 8001298:	4002041c 	.word	0x4002041c

0800129c <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <ReadRtcSsrValue+0x1c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80012a2:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80012a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80012a6:	b280      	uxth	r0, r0
 80012a8:	b29b      	uxth	r3, r3
  second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);

  while(first_read != second_read)
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d100      	bne.n	80012b0 <ReadRtcSsrValue+0x14>
    first_read = second_read;
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
  }

  return second_read;
}
 80012ae:	4770      	bx	lr
 80012b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80012b2:	4618      	mov	r0, r3
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 80012b4:	b28b      	uxth	r3, r1
 80012b6:	e7f8      	b.n	80012aa <ReadRtcSsrValue+0xe>
 80012b8:	20000184 	.word	0x20000184

080012bc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <UnlinkTimer+0x68>)
 80012c0:	791a      	ldrb	r2, [r3, #4]
 80012c2:	4282      	cmp	r2, r0
 80012c4:	f04f 0218 	mov.w	r2, #24
 80012c8:	d115      	bne.n	80012f6 <UnlinkTimer+0x3a>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80012ca:	791c      	ldrb	r4, [r3, #4]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80012cc:	fb02 3200 	mla	r2, r2, r0, r3
    PreviousRunningTimerID = CurrentRunningTimerID;
 80012d0:	b2e4      	uxtb	r4, r4
 80012d2:	715c      	strb	r4, [r3, #5]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80012d4:	7f52      	ldrb	r2, [r2, #29]
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	711a      	strb	r2, [r3, #4]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80012da:	2218      	movs	r2, #24
 80012dc:	fb02 3000 	mla	r0, r2, r0, r3
 80012e0:	2201      	movs	r2, #1
 80012e2:	7502      	strb	r2, [r0, #20]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80012e4:	791a      	ldrb	r2, [r3, #4]
 80012e6:	2a06      	cmp	r2, #6
 80012e8:	d104      	bne.n	80012f4 <UnlinkTimer+0x38>
 80012ea:	b919      	cbnz	r1, 80012f4 <UnlinkTimer+0x38>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  return;
}
 80012f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    previous_id = aTimerContext[TimerID].PreviousID;
 80012f6:	fb02 3400 	mla	r4, r2, r0, r3
 80012fa:	7f26      	ldrb	r6, [r4, #28]
    next_id = aTimerContext[TimerID].NextID;
 80012fc:	f894 c01d 	ldrb.w	ip, [r4, #29]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001300:	7f67      	ldrb	r7, [r4, #29]
 8001302:	fb02 3606 	mla	r6, r2, r6, r3
 8001306:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001308:	f1bc 0f06 	cmp.w	ip, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800130c:	7777      	strb	r7, [r6, #29]
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800130e:	bf18      	it	ne
 8001310:	7f24      	ldrbne	r4, [r4, #28]
    next_id = aTimerContext[TimerID].NextID;
 8001312:	fa5f f58c 	uxtb.w	r5, ip
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001316:	bf1e      	ittt	ne
 8001318:	fb02 3205 	mlane	r2, r2, r5, r3
 800131c:	b2e4      	uxtbne	r4, r4
 800131e:	7714      	strbne	r4, [r2, #28]
 8001320:	e7db      	b.n	80012da <UnlinkTimer+0x1e>
 8001322:	bf00      	nop
 8001324:	20000184 	.word	0x20000184

08001328 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001328:	b510      	push	{r4, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800132a:	4c0e      	ldr	r4, [pc, #56]	; (8001364 <ReturnTimeElapsed+0x3c>)
 800132c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001330:	3301      	adds	r3, #1
 8001332:	d015      	beq.n	8001360 <ReturnTimeElapsed+0x38>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001334:	f7ff ffb2 	bl	800129c <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 8001338:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800133c:	4283      	cmp	r3, r0
    {
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800133e:	bf3b      	ittet	cc
 8001340:	f8b4 309c 	ldrhcc.w	r3, [r4, #156]	; 0x9c
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001344:	f8d4 2098 	ldrcc.w	r2, [r4, #152]	; 0x98
      return_value = SSRValueOnLastSetup - return_value;
 8001348:	f8d4 3098 	ldrcs.w	r3, [r4, #152]	; 0x98
      return_value = SSRValueOnLastSetup + wrap_counter;
 800134c:	189b      	addcc	r3, r3, r2
 800134e:	1a18      	subs	r0, r3, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001350:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8001354:	4358      	muls	r0, r3
    return_value = return_value >> WakeupTimerDivider;
 8001356:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 800135a:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 800135c:	b280      	uxth	r0, r0
 800135e:	bd10      	pop	{r4, pc}
    return_value = 0;
 8001360:	2000      	movs	r0, #0
 8001362:	e7fb      	b.n	800135c <ReturnTimeElapsed+0x34>
 8001364:	20000184 	.word	0x20000184

08001368 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001368:	b538      	push	{r3, r4, r5, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800136a:	4c34      	ldr	r4, [pc, #208]	; (800143c <HW_TS_Init+0xd4>)
 800136c:	6021      	str	r1, [r4, #0]


  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - (LL_RTC_WAKEUP_GetClock(phrtc->Instance)));
 800136e:	6809      	ldr	r1, [r1, #0]
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  */
__STATIC_INLINE uint32_t LL_RTC_WAKEUP_GetClock(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 8001370:	688b      	ldr	r3, [r1, #8]
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 8001372:	690a      	ldr	r2, [r1, #16]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	f1c3 0304 	rsb	r3, r3, #4
 800137c:	b2dd      	uxtb	r5, r3
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_S));
 800137e:	690b      	ldr	r3, [r1, #16]
 8001380:	f884 509f 	strb.w	r5, [r4, #159]	; 0x9f
 8001384:	f3c3 030e 	ubfx	r3, r3, #0, #15
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 8001388:	3301      	adds	r3, #1
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 800138a:	f3c2 4206 	ubfx	r2, r2, #16, #7
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 800138e:	3201      	adds	r2, #1
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 8001390:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 8001394:	3b01      	subs	r3, #1
 8001396:	4353      	muls	r3, r2
 8001398:	412b      	asrs	r3, r5
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 800139a:	f884 209e 	strb.w	r2, [r4, #158]	; 0x9e
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 800139e:	3b10      	subs	r3, #16

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80013a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013a4:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80013a6:	bf8c      	ite	hi
 80013a8:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80013ac:	b29b      	uxthls	r3, r3
 80013ae:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HW_TS_Init+0xd8>)
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013ba:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013c2:	601a      	str	r2, [r3, #0]
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 80013c4:	bb90      	cbnz	r0, 800142c <HW_TS_Init+0xc4>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013c6:	2201      	movs	r2, #1
 80013c8:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80013d4:	2206      	movs	r2, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80013d6:	7520      	strb	r0, [r4, #20]
 80013d8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
 80013dc:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 80013e0:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
 80013e4:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 80013e8:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80013ec:	7122      	strb	r2, [r4, #4]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80013ee:	688a      	ldr	r2, [r1, #8]
 80013f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013f4:	608a      	str	r2, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80013f6:	68ca      	ldr	r2, [r1, #12]
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013fe:	60ca      	str	r2, [r1, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001400:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001404:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001406:	2003      	movs	r0, #3
 8001408:	f001 f960 	bl	80026cc <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	6893      	ldr	r3, [r2, #8]
 8001412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001416:	6093      	str	r3, [r2, #8]
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001418:	2103      	movs	r1, #3
 800141a:	4608      	mov	r0, r1
 800141c:	2200      	movs	r2, #0
 800141e:	f001 f8f1 	bl	8002604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */

  return;
}
 8001422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001426:	2003      	movs	r0, #3
 8001428:	f001 b91e 	b.w	8002668 <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800142c:	68cb      	ldr	r3, [r1, #12]
 800142e:	055b      	lsls	r3, r3, #21
 8001430:	d5f2      	bpl.n	8001418 <HW_TS_Init+0xb0>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001432:	2003      	movs	r0, #3
 8001434:	f001 f93a 	bl	80026ac <HAL_NVIC_SetPendingIRQ>
 8001438:	e7ee      	b.n	8001418 <HW_TS_Init+0xb0>
 800143a:	bf00      	nop
 800143c:	20000184 	.word	0x20000184
 8001440:	40010400 	.word	0x40010400

08001444 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001448:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800144e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001494 <HW_TS_Create+0x50>
 8001452:	2500      	movs	r5, #0
 8001454:	f04f 0a18 	mov.w	sl, #24
 8001458:	fb0a 9405 	mla	r4, sl, r5, r9
 800145c:	fa5f fe85 	uxtb.w	lr, r5
 8001460:	f894 c014 	ldrb.w	ip, [r4, #20]
 8001464:	f00c 06ff 	and.w	r6, ip, #255	; 0xff
 8001468:	f1bc 0f00 	cmp.w	ip, #0
 800146c:	d10b      	bne.n	8001486 <HW_TS_Create+0x42>
    loop++;
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800146e:	2501      	movs	r5, #1
 8001470:	7525      	strb	r5, [r4, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001472:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001476:	61a0      	str	r0, [r4, #24]
    aTimerContext[loop].TimerMode = TimerMode;
 8001478:	7562      	strb	r2, [r4, #21]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800147a:	60a3      	str	r3, [r4, #8]
    *pTimerId = loop;
 800147c:	f881 e000 	strb.w	lr, [r1]

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8001480:	4630      	mov	r0, r6
 8001482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001486:	3501      	adds	r5, #1
 8001488:	2d06      	cmp	r5, #6
 800148a:	d1e5      	bne.n	8001458 <HW_TS_Create+0x14>
 800148c:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 8001490:	2601      	movs	r6, #1
  return(localreturnstatus);
 8001492:	e7f5      	b.n	8001480 <HW_TS_Create+0x3c>
 8001494:	20000184 	.word	0x20000184

08001498 <HW_TS_RTC_CountUpdated_AppNot>:
  }
}

__weak void HW_TS_RTC_CountUpdated_AppNot(void)
{
}
 8001498:	4770      	bx	lr
	...

0800149c <RescheduleTimerList>:
{
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 800149e:	4c3c      	ldr	r4, [pc, #240]	; (8001590 <RescheduleTimerList+0xf4>)
 80014a0:	6827      	ldr	r7, [r4, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80014aa:	d003      	beq.n	80014b4 <RescheduleTimerList+0x18>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	f012 0f04 	tst.w	r2, #4
 80014b2:	e7fa      	b.n	80014aa <RescheduleTimerList+0xe>
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ba:	609a      	str	r2, [r3, #8]
  localTimerID = CurrentRunningTimerID;
 80014bc:	7923      	ldrb	r3, [r4, #4]
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80014be:	2218      	movs	r2, #24
  localTimerID = CurrentRunningTimerID;
 80014c0:	b2de      	uxtb	r6, r3
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80014c2:	fb02 4303 	mla	r3, r2, r3, r4
 80014c6:	691d      	ldr	r5, [r3, #16]
  time_elapsed = ReturnTimeElapsed();
 80014c8:	f7ff ff2e 	bl	8001328 <ReturnTimeElapsed>
  if(timecountleft < time_elapsed )
 80014cc:	42a8      	cmp	r0, r5
 80014ce:	d907      	bls.n	80014e0 <RescheduleTimerList+0x44>
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
    wakeup_timer_value = 0;
 80014d6:	2300      	movs	r3, #0
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80014d8:	2518      	movs	r5, #24
      aTimerContext[localTimerID].CountLeft = 0;
 80014da:	f04f 0c00 	mov.w	ip, #0
 80014de:	e01e      	b.n	800151e <RescheduleTimerList+0x82>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80014e0:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80014e4:	fa10 f383 	uxtah	r3, r0, r3
 80014e8:	42ab      	cmp	r3, r5
      wakeup_timer_value = MaxWakeupTimerSetup;
 80014ea:	bf39      	ittee	cc
 80014ec:	f8b4 30a0 	ldrhcc.w	r3, [r4, #160]	; 0xa0
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80014f0:	2200      	movcc	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 80014f2:	1a2b      	subcs	r3, r5, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014f4:	2201      	movcs	r2, #1
      wakeup_timer_value = MaxWakeupTimerSetup;
 80014f6:	bf34      	ite	cc
 80014f8:	b29b      	uxthcc	r3, r3
      wakeup_timer_value = timecountleft - time_elapsed;
 80014fa:	b29b      	uxthcs	r3, r3
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014fc:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
 8001500:	e7ea      	b.n	80014d8 <RescheduleTimerList+0x3c>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001502:	fb05 4206 	mla	r2, r5, r6, r4
    localTimerID = aTimerContext[localTimerID].NextID;
 8001506:	fb05 4606 	mla	r6, r5, r6, r4
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800150a:	6911      	ldr	r1, [r2, #16]
 800150c:	4288      	cmp	r0, r1
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800150e:	bf97      	itett	ls
 8001510:	6911      	ldrls	r1, [r2, #16]
      aTimerContext[localTimerID].CountLeft = 0;
 8001512:	f8c2 c010 	strhi.w	ip, [r2, #16]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001516:	1a09      	subls	r1, r1, r0
 8001518:	6111      	strls	r1, [r2, #16]
    localTimerID = aTimerContext[localTimerID].NextID;
 800151a:	7f76      	ldrb	r6, [r6, #29]
 800151c:	b2f6      	uxtb	r6, r6
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800151e:	2e06      	cmp	r6, #6
 8001520:	d1ef      	bne.n	8001502 <RescheduleTimerList+0x66>
  if(Value == 0)
 8001522:	b943      	cbnz	r3, 8001536 <RescheduleTimerList+0x9a>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001524:	f7ff feba 	bl	800129c <ReadRtcSsrValue>
 8001528:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
}
 800152c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001530:	2003      	movs	r0, #3
 8001532:	f001 b8bb 	b.w	80026ac <HAL_NVIC_SetPendingIRQ>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001536:	2b01      	cmp	r3, #1
 8001538:	d803      	bhi.n	8001542 <RescheduleTimerList+0xa6>
 800153a:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 800153e:	2a01      	cmp	r2, #1
 8001540:	d024      	beq.n	800158c <RescheduleTimerList+0xf0>
      Value -= 1;
 8001542:	3b01      	subs	r3, #1
 8001544:	b29d      	uxth	r5, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	0752      	lsls	r2, r2, #29
 800154c:	d5fc      	bpl.n	8001548 <RescheduleTimerList+0xac>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800154e:	68d9      	ldr	r1, [r3, #12]
 8001550:	b2c9      	uxtb	r1, r1
 8001552:	f461 6190 	orn	r1, r1, #1152	; 0x480
 8001556:	60d9      	str	r1, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <RescheduleTimerList+0xf8>)
 800155a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800155e:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001560:	2003      	movs	r0, #3
 8001562:	f001 f8b3 	bl	80026cc <HAL_NVIC_ClearPendingIRQ>
    LL_RTC_WAKEUP_SetAutoReload(phrtc->Instance, Value);
 8001566:	6826      	ldr	r6, [r4, #0]
 8001568:	6833      	ldr	r3, [r6, #0]
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	0c12      	lsrs	r2, r2, #16
 800156e:	0412      	lsls	r2, r2, #16
 8001570:	432a      	orrs	r2, r5
 8001572:	615a      	str	r2, [r3, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001574:	f7ff fe92 	bl	800129c <ReadRtcSsrValue>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001578:	6832      	ldr	r2, [r6, #0]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800157a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800157e:	6893      	ldr	r3, [r2, #8]
 8001580:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001584:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001586:	f7ff ff87 	bl	8001498 <HW_TS_RTC_CountUpdated_AppNot>
}
 800158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800158c:	4615      	mov	r5, r2
 800158e:	e7da      	b.n	8001546 <RescheduleTimerList+0xaa>
 8001590:	20000184 	.word	0x20000184
 8001594:	40010400 	.word	0x40010400

08001598 <HW_TS_Stop>:
{
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800159c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015a2:	4c1d      	ldr	r4, [pc, #116]	; (8001618 <HW_TS_Stop+0x80>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80015a4:	2003      	movs	r0, #3
 80015a6:	f001 f86d 	bl	8002684 <HAL_NVIC_DisableIRQ>
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015aa:	2318      	movs	r3, #24
 80015ac:	fb03 4305 	mla	r3, r3, r5, r4
 80015b0:	7d1b      	ldrb	r3, [r3, #20]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d124      	bne.n	8001600 <HW_TS_Stop+0x68>
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80015b6:	2100      	movs	r1, #0
 80015b8:	4628      	mov	r0, r5
 80015ba:	f7ff fe7f 	bl	80012bc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80015be:	7923      	ldrb	r3, [r4, #4]
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015c0:	2b06      	cmp	r3, #6
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80015c2:	b2da      	uxtb	r2, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015c4:	d122      	bne.n	800160c <HW_TS_Stop+0x74>
      if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80015d0:	d003      	beq.n	80015da <HW_TS_Stop+0x42>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	f012 0f04 	tst.w	r2, #4
 80015d8:	e7fa      	b.n	80015d0 <HW_TS_Stop+0x38>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015e0:	609a      	str	r2, [r3, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	0752      	lsls	r2, r2, #29
 80015e6:	d5fc      	bpl.n	80015e2 <HW_TS_Stop+0x4a>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80015f0:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HW_TS_Stop+0x84>)
 80015f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015f8:	615a      	str	r2, [r3, #20]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015fa:	2003      	movs	r0, #3
 80015fc:	f001 f866 	bl	80026cc <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001600:	2003      	movs	r0, #3
 8001602:	f001 f831 	bl	8002668 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001606:	f386 8810 	msr	PRIMASK, r6
}
 800160a:	bd70      	pop	{r4, r5, r6, pc}
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800160c:	7963      	ldrb	r3, [r4, #5]
 800160e:	4293      	cmp	r3, r2
 8001610:	d0f6      	beq.n	8001600 <HW_TS_Stop+0x68>
      RescheduleTimerList();
 8001612:	f7ff ff43 	bl	800149c <RescheduleTimerList>
 8001616:	e7f3      	b.n	8001600 <HW_TS_Stop+0x68>
 8001618:	20000184 	.word	0x20000184
 800161c:	40010400 	.word	0x40010400

08001620 <HW_TS_Delete>:
{
 8001620:	b510      	push	{r4, lr}
 8001622:	4604      	mov	r4, r0
  HW_TS_Stop(timer_id);
 8001624:	f7ff ffb8 	bl	8001598 <HW_TS_Stop>
  aTimerContext[timer_id].TimerIDStatus = TimerID_Free; /**<  release ID */
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <HW_TS_Delete+0x18>)
 800162a:	2318      	movs	r3, #24
 800162c:	fb03 0404 	mla	r4, r3, r4, r0
 8001630:	2300      	movs	r3, #0
 8001632:	7523      	strb	r3, [r4, #20]
}
 8001634:	bd10      	pop	{r4, pc}
 8001636:	bf00      	nop
 8001638:	20000184 	.word	0x20000184

0800163c <HW_TS_Start>:
{
 800163c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001640:	4605      	mov	r5, r0
 8001642:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001644:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800164a:	2003      	movs	r0, #3
 800164c:	f001 f81a 	bl	8002684 <HAL_NVIC_DisableIRQ>
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001650:	483b      	ldr	r0, [pc, #236]	; (8001740 <HW_TS_Start+0x104>)
 8001652:	f04f 0818 	mov.w	r8, #24
 8001656:	fb08 0705 	mla	r7, r8, r5, r0
 800165a:	2302      	movs	r3, #2
 800165c:	753b      	strb	r3, [r7, #20]
  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800165e:	613c      	str	r4, [r7, #16]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001660:	60fc      	str	r4, [r7, #12]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001662:	7903      	ldrb	r3, [r0, #4]
 8001664:	2b06      	cmp	r3, #6
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4604      	mov	r4, r0
 800166a:	d116      	bne.n	800169a <HW_TS_Start+0x5e>
    PreviousRunningTimerID = CurrentRunningTimerID;
 800166c:	7903      	ldrb	r3, [r0, #4]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	7143      	strb	r3, [r0, #5]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
    CurrentRunningTimerID = TimerID;
 8001676:	7105      	strb	r5, [r0, #4]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001678:	777a      	strb	r2, [r7, #29]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800167a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    time_elapsed = 0;
 800167e:	2000      	movs	r0, #0
  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001680:	7923      	ldrb	r3, [r4, #4]
  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001682:	7962      	ldrb	r2, [r4, #5]
 8001684:	429a      	cmp	r2, r3
 8001686:	d053      	beq.n	8001730 <HW_TS_Start+0xf4>
    RescheduleTimerList();
 8001688:	f7ff ff08 	bl	800149c <RescheduleTimerList>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800168c:	2003      	movs	r0, #3
 800168e:	f000 ffeb 	bl	8002668 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001692:	f386 8810 	msr	PRIMASK, r6
}
 8001696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    time_elapsed = ReturnTimeElapsed();
 800169a:	f7ff fe45 	bl	8001328 <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4403      	add	r3, r0
 80016a2:	613b      	str	r3, [r7, #16]
    time_left = aTimerContext[TimerID].CountLeft;
 80016a4:	6939      	ldr	r1, [r7, #16]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80016a6:	7923      	ldrb	r3, [r4, #4]
 80016a8:	fb08 4303 	mla	r3, r8, r3, r4
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	4299      	cmp	r1, r3
 80016b0:	d323      	bcc.n	80016fa <HW_TS_Start+0xbe>
      timer_id_lookup = CurrentRunningTimerID;
 80016b2:	7922      	ldrb	r2, [r4, #4]
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80016b4:	b2d3      	uxtb	r3, r2
        next_id = aTimerContext[timer_id_lookup].NextID;
 80016b6:	fb08 4202 	mla	r2, r8, r2, r4
 80016ba:	7f52      	ldrb	r2, [r2, #29]
 80016bc:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80016be:	2a06      	cmp	r2, #6
 80016c0:	d004      	beq.n	80016cc <HW_TS_Start+0x90>
 80016c2:	fb08 4202 	mla	r2, r8, r2, r4
 80016c6:	6912      	ldr	r2, [r2, #16]
 80016c8:	4291      	cmp	r1, r2
 80016ca:	d212      	bcs.n	80016f2 <HW_TS_Start+0xb6>
  next_id = aTimerContext[RefTimerID].NextID;
 80016cc:	2218      	movs	r2, #24
 80016ce:	fb02 4103 	mla	r1, r2, r3, r4
 80016d2:	7f49      	ldrb	r1, [r1, #29]
 80016d4:	b2cf      	uxtb	r7, r1
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016d6:	2906      	cmp	r1, #6
    aTimerContext[next_id].PreviousID = TimerID;
 80016d8:	bf1c      	itt	ne
 80016da:	fb02 4207 	mlane	r2, r2, r7, r4
 80016de:	7715      	strbne	r5, [r2, #28]
  aTimerContext[TimerID].NextID = next_id;
 80016e0:	2218      	movs	r2, #24
 80016e2:	fb02 4105 	mla	r1, r2, r5, r4
 80016e6:	774f      	strb	r7, [r1, #29]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80016e8:	770b      	strb	r3, [r1, #28]
  aTimerContext[RefTimerID].NextID = TimerID;
 80016ea:	fb02 4303 	mla	r3, r2, r3, r4
 80016ee:	775d      	strb	r5, [r3, #29]
  return;
 80016f0:	e7c6      	b.n	8001680 <HW_TS_Start+0x44>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80016f2:	fb08 4303 	mla	r3, r8, r3, r4
 80016f6:	7f5a      	ldrb	r2, [r3, #29]
 80016f8:	e7dc      	b.n	80016b4 <HW_TS_Start+0x78>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80016fa:	7923      	ldrb	r3, [r4, #4]
  if(RefTimerID != CurrentRunningTimerID)
 80016fc:	7922      	ldrb	r2, [r4, #4]
 80016fe:	4293      	cmp	r3, r2
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001700:	b2d9      	uxtb	r1, r3
  if(RefTimerID != CurrentRunningTimerID)
 8001702:	fb08 f303 	mul.w	r3, r8, r3
 8001706:	d010      	beq.n	800172a <HW_TS_Start+0xee>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001708:	4423      	add	r3, r4
 800170a:	7f1a      	ldrb	r2, [r3, #28]
    aTimerContext[previous_id].NextID = TimerID;
 800170c:	fb08 4802 	mla	r8, r8, r2, r4
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001710:	fa5f fc82 	uxtb.w	ip, r2
    aTimerContext[previous_id].NextID = TimerID;
 8001714:	f888 501d 	strb.w	r5, [r8, #29]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001718:	7779      	strb	r1, [r7, #29]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800171a:	f887 c01c 	strb.w	ip, [r7, #28]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800171e:	771d      	strb	r5, [r3, #28]
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001720:	7923      	ldrb	r3, [r4, #4]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	7163      	strb	r3, [r4, #5]
      CurrentRunningTimerID = TimerID;
 8001726:	7125      	strb	r5, [r4, #4]
 8001728:	e7aa      	b.n	8001680 <HW_TS_Start+0x44>
    aTimerContext[TimerID].NextID = RefTimerID;
 800172a:	7779      	strb	r1, [r7, #29]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800172c:	4423      	add	r3, r4
 800172e:	e7f6      	b.n	800171e <HW_TS_Start+0xe2>
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001730:	2318      	movs	r3, #24
 8001732:	fb03 4405 	mla	r4, r3, r5, r4
 8001736:	6923      	ldr	r3, [r4, #16]
 8001738:	1a18      	subs	r0, r3, r0
 800173a:	6120      	str	r0, [r4, #16]
 800173c:	e7a6      	b.n	800168c <HW_TS_Start+0x50>
 800173e:	bf00      	nop
 8001740:	20000184 	.word	0x20000184

08001744 <HW_TS_RTC_Wakeup_Handler>:
{
 8001744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001748:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800174e:	4920      	ldr	r1, [pc, #128]	; (80017d0 <HW_TS_RTC_Wakeup_Handler+0x8c>)
 8001750:	680b      	ldr	r3, [r1, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 800175c:	790c      	ldrb	r4, [r1, #4]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800175e:	2218      	movs	r2, #24
  local_current_running_timer_id = CurrentRunningTimerID;
 8001760:	b2e6      	uxtb	r6, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001762:	fb02 1404 	mla	r4, r2, r4, r1
 8001766:	7d22      	ldrb	r2, [r4, #20]
 8001768:	2a02      	cmp	r2, #2
 800176a:	d124      	bne.n	80017b6 <HW_TS_RTC_Wakeup_Handler+0x72>
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800176c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001770:	69a7      	ldr	r7, [r4, #24]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001772:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 8001776:	b1cb      	cbz	r3, 80017ac <HW_TS_RTC_Wakeup_Handler+0x68>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001778:	7d63      	ldrb	r3, [r4, #21]
 800177a:	2b01      	cmp	r3, #1
 800177c:	b2d9      	uxtb	r1, r3
 800177e:	d10f      	bne.n	80017a0 <HW_TS_RTC_Wakeup_Handler+0x5c>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001780:	4630      	mov	r0, r6
 8001782:	f7ff fd9b 	bl	80012bc <UnlinkTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001786:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800178a:	68e1      	ldr	r1, [r4, #12]
 800178c:	4630      	mov	r0, r6
 800178e:	f7ff ff55 	bl	800163c <HW_TS_Start>
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001792:	4642      	mov	r2, r8
 8001794:	4631      	mov	r1, r6
 8001796:	4638      	mov	r0, r7
 8001798:	f000 fe16 	bl	80023c8 <HW_TS_RTC_Int_AppNot>
}
 800179c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017a0:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Stop(local_current_running_timer_id);
 80017a4:	4630      	mov	r0, r6
 80017a6:	f7ff fef7 	bl	8001598 <HW_TS_Stop>
 80017aa:	e7f2      	b.n	8001792 <HW_TS_RTC_Wakeup_Handler+0x4e>
      RescheduleTimerList();
 80017ac:	f7ff fe76 	bl	800149c <RescheduleTimerList>
 80017b0:	f385 8810 	msr	PRIMASK, r5
  return;
 80017b4:	e7f2      	b.n	800179c <HW_TS_RTC_Wakeup_Handler+0x58>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	0752      	lsls	r2, r2, #29
 80017ba:	d5fc      	bpl.n	80017b6 <HW_TS_RTC_Wakeup_Handler+0x72>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017c4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80017c6:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HW_TS_RTC_Wakeup_Handler+0x90>)
 80017c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017cc:	615a      	str	r2, [r3, #20]
 80017ce:	e7ef      	b.n	80017b0 <HW_TS_RTC_Wakeup_Handler+0x6c>
 80017d0:	20000184 	.word	0x20000184
 80017d4:	40010400 	.word	0x40010400

080017d8 <hci_timeout_callback>:

  return;
}

void hci_timeout_callback(void)
{
 80017d8:	b508      	push	{r3, lr}
  HciLayerTimeout = TRUE;
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <hci_timeout_callback+0x14>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]

  /**
   * Unlock hci_send_req() that is waiting for an event that will never come
   */
  TL_BLE_HCI_RxCmdResp();
 80017e0:	f000 f8df 	bl	80019a2 <TL_BLE_HCI_RxCmdResp>
   * Notify the application the HCI interface has timed out
   */
  TL_BLE_HCI_ToNot();

  return;
}
 80017e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TL_BLE_HCI_ToNot();
 80017e8:	f000 b8de 	b.w	80019a8 <TL_BLE_HCI_ToNot>
 80017ec:	20000228 	.word	0x20000228

080017f0 <TL_BLE_EvtReceived>:
{
 80017f0:	b508      	push	{r3, lr}
  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 80017f2:	7a43      	ldrb	r3, [r0, #9]
 80017f4:	3b0e      	subs	r3, #14
 80017f6:	2b01      	cmp	r3, #1
{
 80017f8:	4601      	mov	r1, r0
  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 80017fa:	d806      	bhi.n	800180a <TL_BLE_EvtReceived+0x1a>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80017fc:	4807      	ldr	r0, [pc, #28]	; (800181c <TL_BLE_EvtReceived+0x2c>)
 80017fe:	f000 fa40 	bl	8001c82 <LST_insert_tail>
}
 8001802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TL_BLE_HCI_RxCmdResp(); /**< Notify the application a full Cmd Event has been received */
 8001806:	f000 b8cc 	b.w	80019a2 <TL_BLE_HCI_RxCmdResp>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <TL_BLE_EvtReceived+0x30>)
 800180c:	f000 fa39 	bl	8001c82 <LST_insert_tail>
}
 8001810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TL_BLE_HCI_UserEvtProcReq((TL_PacketHeader_t*)&HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TL_BLE_EvtReceived+0x30>)
 8001816:	f000 b8e1 	b.w	80019dc <TL_BLE_HCI_UserEvtProcReq>
 800181a:	bf00      	nop
 800181c:	20000229 	.word	0x20000229
 8001820:	20000231 	.word	0x20000231

08001824 <TL_BLE_HCI_Init>:

void TL_BLE_HCI_Init(TL_BLE_HCI_InitMode_t initmode, TL_CmdPacket_t * p_cmdbuffer, uint8_t *p_evtpool, uint32_t evtpoolsize)
{
 8001824:	b530      	push	{r4, r5, lr}
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8001826:	4c18      	ldr	r4, [pc, #96]	; (8001888 <TL_BLE_HCI_Init+0x64>)
{
 8001828:	b085      	sub	sp, #20
 800182a:	4605      	mov	r5, r0
  LST_init_head (&HciCmdEventQueue);
 800182c:	1c60      	adds	r0, r4, #1
{
 800182e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8001832:	9301      	str	r3, [sp, #4]
  LST_init_head (&HciCmdEventQueue);
 8001834:	f000 fa18 	bl	8001c68 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;

  if(initmode == TL_BLE_HCI_InitFull)
 8001838:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
  pCmdBuffer = p_cmdbuffer;
 800183c:	9903      	ldr	r1, [sp, #12]
 800183e:	6161      	str	r1, [r4, #20]
  if(initmode == TL_BLE_HCI_InitFull)
 8001840:	2d01      	cmp	r5, #1
 8001842:	9303      	str	r3, [sp, #12]
 8001844:	d111      	bne.n	800186a <TL_BLE_HCI_Init+0x46>
  LST_init_head (&HciAsynchEventQueue);
 8001846:	f104 0009 	add.w	r0, r4, #9
 800184a:	9101      	str	r1, [sp, #4]
 800184c:	f000 fa0c 	bl	8001c68 <LST_init_head>
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8001850:	4628      	mov	r0, r5
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 8001852:	7625      	strb	r5, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8001854:	f000 fd9e 	bl	8002394 <TL_BLE_HCI_StatusNot>
  {
    Initialization();

    TL_BLE_Init(TL_BLE_Init_Full, p_cmdbuffer, p_evtpool, evtpoolsize);
 8001858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800185c:	9901      	ldr	r1, [sp, #4]
 800185e:	4628      	mov	r0, r5

    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
  }

  return;
}
 8001860:	b005      	add	sp, #20
 8001862:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 8001866:	f000 b987 	b.w	8001b78 <TL_BLE_Init>
  LST_init_head (&HciAsynchEventQueue);
 800186a:	f104 0009 	add.w	r0, r4, #9
 800186e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001872:	f000 f9f9 	bl	8001c68 <LST_init_head>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 8001876:	2001      	movs	r0, #1
 8001878:	7620      	strb	r0, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 800187a:	f000 fd8b 	bl	8002394 <TL_BLE_HCI_StatusNot>
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 800187e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001882:	9901      	ldr	r1, [sp, #4]
 8001884:	2000      	movs	r0, #0
 8001886:	e7eb      	b.n	8001860 <TL_BLE_HCI_Init+0x3c>
 8001888:	20000228 	.word	0x20000228

0800188c <TL_BLE_HCI_UserEvtProc>:
{
  return HCICmdStatus;
}

void TL_BLE_HCI_UserEvtProc(void)
{
 800188c:	b513      	push	{r0, r1, r4, lr}
  TL_EvtPacket_t *phcievtbuffer;

  while(LST_is_empty(&HciAsynchEventQueue) == FALSE)
 800188e:	4c09      	ldr	r4, [pc, #36]	; (80018b4 <TL_BLE_HCI_UserEvtProc+0x28>)
 8001890:	4808      	ldr	r0, [pc, #32]	; (80018b4 <TL_BLE_HCI_UserEvtProc+0x28>)
 8001892:	f000 f9ec 	bl	8001c6e <LST_is_empty>
 8001896:	b108      	cbz	r0, 800189c <TL_BLE_HCI_UserEvtProc+0x10>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
    TL_BLE_EvtDone( phcievtbuffer);
  }

  return;
}
 8001898:	b002      	add	sp, #8
 800189a:	bd10      	pop	{r4, pc}
    LST_remove_head (&HciAsynchEventQueue, (tListNode **)&phcievtbuffer);
 800189c:	a901      	add	r1, sp, #4
 800189e:	4620      	mov	r0, r4
 80018a0:	f000 fa06 	bl	8001cb0 <LST_remove_head>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
 80018a4:	9801      	ldr	r0, [sp, #4]
 80018a6:	3008      	adds	r0, #8
 80018a8:	f000 f89b 	bl	80019e2 <TL_BLE_HCI_UserEvtRx>
    TL_BLE_EvtDone( phcievtbuffer);
 80018ac:	9801      	ldr	r0, [sp, #4]
 80018ae:	f000 f9d9 	bl	8001c64 <TL_BLE_EvtDone>
 80018b2:	e7ed      	b.n	8001890 <TL_BLE_HCI_UserEvtProc+0x4>
 80018b4:	20000231 	.word	0x20000231

080018b8 <TL_BLE_HCI_SendCmd>:

int32_t TL_BLE_HCI_SendCmd( TL_BLE_HCI_Cmd_t *p_cmd )
{
 80018b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018bc:	4605      	mov	r5, r0
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdBusy);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 fd68 	bl	8002394 <TL_BLE_HCI_StatusNot>
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  int return_value;

  Cmd_SetStatus(TL_BLE_HCI_CmdBusy);
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80018c4:	886b      	ldrh	r3, [r5, #2]
 80018c6:	882a      	ldrh	r2, [r5, #0]
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 80018c8:	4c31      	ldr	r4, [pc, #196]	; (8001990 <TL_BLE_HCI_SendCmd+0xd8>)
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80018ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ce:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80018d2:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  return return_value;
}

void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80018d6:	6960      	ldr	r0, [r4, #20]
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 80018d8:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80018da:	f8a0 3009 	strh.w	r3, [r0, #9]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80018de:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.plen = plen;
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	300c      	adds	r0, #12
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80018e4:	b29f      	uxth	r7, r3
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 80018e6:	7626      	strb	r6, [r4, #24]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80018e8:	f001 fd72 	bl	80033d0 <memcpy>

  TL_BLE_SendCmd();
 80018ec:	f000 f96c 	bl	8001bc8 <TL_BLE_SendCmd>
  HciLayerTimeout = FALSE;
 80018f0:	4622      	mov	r2, r4
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 80018f2:	4928      	ldr	r1, [pc, #160]	; (8001994 <TL_BLE_HCI_SendCmd+0xdc>)
  HciLayerTimeout = FALSE;
 80018f4:	f802 6b19 	strb.w	r6, [r2], #25
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 80018f8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80018fc:	f000 f85a 	bl	80019b4 <TL_BLE_HCI_TimStart>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8001900:	f104 0801 	add.w	r8, r4, #1
  return HCICmdStatus;
 8001904:	7e23      	ldrb	r3, [r4, #24]
  while((CmdGetStatus() == TL_BLE_HCI_CmdBusy) && (HciLayerTimeout == FALSE))
 8001906:	b90b      	cbnz	r3, 800190c <TL_BLE_HCI_SendCmd+0x54>
 8001908:	7823      	ldrb	r3, [r4, #0]
 800190a:	b15b      	cbz	r3, 8001924 <TL_BLE_HCI_SendCmd+0x6c>
  TL_BLE_HCI_TimStop(hci_timer_id);
 800190c:	7e60      	ldrb	r0, [r4, #25]
 800190e:	f000 f84f 	bl	80019b0 <TL_BLE_HCI_TimStop>
  if(HciLayerTimeout == TRUE)
 8001912:	7820      	ldrb	r0, [r4, #0]
}
 8001914:	2801      	cmp	r0, #1
 8001916:	f04f 30ff 	mov.w	r0, #4294967295
 800191a:	bf18      	it	ne
 800191c:	2000      	movne	r0, #0
 800191e:	b003      	add	sp, #12
 8001920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TL_BLE_HCI_WaitCmdResp();
 8001924:	f000 f841 	bl	80019aa <TL_BLE_HCI_WaitCmdResp>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 8001928:	f04f 0901 	mov.w	r9, #1
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800192c:	4640      	mov	r0, r8
 800192e:	f000 f99e 	bl	8001c6e <LST_is_empty>
 8001932:	2800      	cmp	r0, #0
 8001934:	d1e6      	bne.n	8001904 <TL_BLE_HCI_SendCmd+0x4c>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8001936:	a901      	add	r1, sp, #4
 8001938:	4640      	mov	r0, r8
 800193a:	f000 f9b9 	bl	8001cb0 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_EVT_CS_OPCODE)
 800193e:	9e01      	ldr	r6, [sp, #4]
 8001940:	7a73      	ldrb	r3, [r6, #9]
 8001942:	2b0f      	cmp	r3, #15
 8001944:	d111      	bne.n	800196a <TL_BLE_HCI_SendCmd+0xb2>
        if(pcommand_status_event->cmdcode == opcode)
 8001946:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 800194a:	42bb      	cmp	r3, r7
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800194c:	bf02      	ittt	eq
 800194e:	692b      	ldreq	r3, [r5, #16]
 8001950:	7af2      	ldrbeq	r2, [r6, #11]
 8001952:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 8001954:	7b33      	ldrb	r3, [r6, #12]
        if(pcommand_complete_event->numcmd != 0)
 8001956:	b123      	cbz	r3, 8001962 <TL_BLE_HCI_SendCmd+0xaa>
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8001958:	2001      	movs	r0, #1
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 800195a:	f884 9018 	strb.w	r9, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 800195e:	f000 fd19 	bl	8002394 <TL_BLE_HCI_StatusNot>
      TL_BLE_EvtDone( pevtpacket);
 8001962:	9801      	ldr	r0, [sp, #4]
 8001964:	f000 f97e 	bl	8001c64 <TL_BLE_EvtDone>
 8001968:	e7e0      	b.n	800192c <TL_BLE_HCI_SendCmd+0x74>
        if(pcommand_complete_event->cmdcode == opcode)
 800196a:	89b3      	ldrh	r3, [r6, #12]
 800196c:	42bb      	cmp	r3, r7
 800196e:	d10c      	bne.n	800198a <TL_BLE_HCI_SendCmd+0xd2>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 8001970:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8001972:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8001974:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 8001976:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	429a      	cmp	r2, r3
 800197c:	bfa8      	it	ge
 800197e:	461a      	movge	r2, r3
 8001980:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8001982:	f106 010e 	add.w	r1, r6, #14
 8001986:	f001 fd23 	bl	80033d0 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 800198a:	7af3      	ldrb	r3, [r6, #11]
 800198c:	e7e3      	b.n	8001956 <TL_BLE_HCI_SendCmd+0x9e>
 800198e:	bf00      	nop
 8001990:	20000228 	.word	0x20000228
 8001994:	080017d9 	.word	0x080017d9

08001998 <hci_send_req>:


/* This API is imposed by the MW */
int32_t hci_send_req(struct hci_request *r, uint8_t async)
{
  return ( TL_BLE_HCI_SendCmd( (TL_BLE_HCI_Cmd_t *)r ) );
 8001998:	f7ff bf8e 	b.w	80018b8 <TL_BLE_HCI_SendCmd>

0800199c <TL_BLE_R_EvtProcReq>:



void TL_BLE_R_EvtProcReq(void)
{
  SCH_SetTask(CFG_IdleTask_TlEvt);
 800199c:	2000      	movs	r0, #0
 800199e:	f000 ba43 	b.w	8001e28 <SCH_SetTask>

080019a2 <TL_BLE_HCI_RxCmdResp>:
  return;
}

void TL_BLE_HCI_RxCmdResp()
{
  SCH_SetEvt(CFG_IdleEvt_HciCmdEvtResp);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 ba72 	b.w	8001e8c <SCH_SetEvt>

080019a8 <TL_BLE_HCI_ToNot>:
}

void TL_BLE_HCI_ToNot(void)
{
  return;
}
 80019a8:	4770      	bx	lr

080019aa <TL_BLE_HCI_WaitCmdResp>:

void TL_BLE_HCI_WaitCmdResp(void)
{
  SCH_WaitEvt(CFG_IdleEvt_HciCmdEvtResp);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 bab0 	b.w	8001f10 <SCH_WaitEvt>

080019b0 <TL_BLE_HCI_TimStop>:
  return;
}

void TL_BLE_HCI_TimStop(uint8_t timerID)
{
  HW_TS_Delete(timerID);
 80019b0:	f7ff be36 	b.w	8001620 <HW_TS_Delete>

080019b4 <TL_BLE_HCI_TimStart>:

  return;
}

void TL_BLE_HCI_TimStart(uint32_t expiryTime, void(*timercb)(void), uint8_t *timerID)
{
 80019b4:	b538      	push	{r3, r4, r5, lr}
 80019b6:	4614      	mov	r4, r2
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 80019b8:	2200      	movs	r2, #0
{
 80019ba:	460b      	mov	r3, r1
 80019bc:	4605      	mov	r5, r0
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 80019be:	4621      	mov	r1, r4
 80019c0:	4610      	mov	r0, r2
 80019c2:	f7ff fd3f 	bl	8001444 <HW_TS_Create>
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 80019c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ca:	434d      	muls	r5, r1
 80019cc:	7820      	ldrb	r0, [r4, #0]
 80019ce:	213f      	movs	r1, #63	; 0x3f
 80019d0:	fbb5 f1f1 	udiv	r1, r5, r1

  return;
}
 80019d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 80019d8:	f7ff be30 	b.w	800163c <HW_TS_Start>

080019dc <TL_BLE_HCI_UserEvtProcReq>:
 * @param  None
 * @retval None
 */
void TL_BLE_HCI_UserEvtProcReq( TL_PacketHeader_t *p_userevt_queue )
{
  SCH_SetTask(CFG_IdleTask_HciAsynchEvt);
 80019dc:	2005      	movs	r0, #5
 80019de:	f000 ba23 	b.w	8001e28 <SCH_SetTask>

080019e2 <TL_BLE_HCI_UserEvtRx>:
 * @param  pckt: The user event received from the BlueNRG device
 * @retval None
 */
void TL_BLE_HCI_UserEvtRx(void *pckt)
{
  SVCCTL_HCI_UserEvtRx(pckt);
 80019e2:	f7fe bf91 	b.w	8000908 <SVCCTL_HCI_UserEvtRx>
	...

080019e8 <Event_Queue_Process>:
  return;
}

/* Private Functions Definition ------------------------------------------------------*/
static void Event_Queue_Process(TL_BLE_R_EvtPacketType_t tl_event_queue_type)
{
 80019e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80019ec:	4e32      	ldr	r6, [pc, #200]	; (8001ab8 <Event_Queue_Process+0xd0>)
  TL_EvtPacket_t * ptl_evt_buffer;
  TL_EvtPacket_t *plarge_hci_buffer;

  if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 80019ee:	4605      	mov	r5, r0
 80019f0:	2800      	cmp	r0, #0
 80019f2:	d05e      	beq.n	8001ab2 <Event_Queue_Process+0xca>
  {
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
  }
  else
  {
    plarge_hci_buffer = (TL_EvtPacket_t*)pCmdBuffer;
 80019f4:	f8d6 710c 	ldr.w	r7, [r6, #268]	; 0x10c
  }

  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <Event_Queue_Process+0xd4>)
 80019fa:	240e      	movs	r4, #14
 80019fc:	436c      	muls	r4, r5
 80019fe:	eb03 0804 	add.w	r8, r3, r4
  {
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 8001a02:	4434      	add	r4, r6
 8001a04:	e02e      	b.n	8001a64 <Event_Queue_Process+0x7c>
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
 8001a06:	4640      	mov	r0, r8
 8001a08:	a901      	add	r1, sp, #4
 8001a0a:	f000 f951 	bl	8001cb0 <LST_remove_head>
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 8001a0e:	f894 9118 	ldrb.w	r9, [r4, #280]	; 0x118
 8001a12:	9801      	ldr	r0, [sp, #4]
 8001a14:	f1b9 0f00 	cmp.w	r9, #0
 8001a18:	d103      	bne.n	8001a22 <Event_Queue_Process+0x3a>
    {
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl = ptl_evt_buffer->evtserial.evt.plen + TL_EVT_HDR_SIZE;
 8001a1a:	7a83      	ldrb	r3, [r0, #10]
 8001a1c:	3303      	adds	r3, #3
 8001a1e:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
    }

    if(TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl > TL_BLE_EVENT_FRAME_SIZE)
 8001a22:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
 8001a26:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8001a2a:	d928      	bls.n	8001a7e <Event_Queue_Process+0x96>
      /**
       * The packet is not complete
       */
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 8001a2c:	f8b4 c11c 	ldrh.w	ip, [r4, #284]	; 0x11c
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 8001a36:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	f100 0108 	add.w	r1, r0, #8
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 8001a42:	f8a4 211a 	strh.w	r2, [r4, #282]	; 0x11a
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 8001a46:	eb03 000c 	add.w	r0, r3, ip
 8001a4a:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001a4e:	f001 fcbf 	bl	80033d0 <memcpy>
      MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 8001a52:	9801      	ldr	r0, [sp, #4]
 8001a54:	f000 f9c6 	bl	8001de4 <MM_ReleaseBuffer>
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset += TL_BLE_EVENT_FRAME_SIZE;
 8001a58:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8001a5c:	f503 7381 	add.w	r3, r3, #258	; 0x102
      else
      {
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
      }
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset  = 0;
 8001a60:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 8001a64:	4640      	mov	r0, r8
 8001a66:	f000 f902 	bl	8001c6e <LST_is_empty>
 8001a6a:	b928      	cbnz	r0, 8001a78 <Event_Queue_Process+0x90>
 8001a6c:	f896 312c 	ldrb.w	r3, [r6, #300]	; 0x12c
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0c8      	beq.n	8001a06 <Event_Queue_Process+0x1e>
 8001a74:	2d01      	cmp	r5, #1
 8001a76:	d0c6      	beq.n	8001a06 <Event_Queue_Process+0x1e>
    }
  }

  return;
}
 8001a78:	b003      	add	sp, #12
 8001a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_cont)
 8001a7e:	f1b9 0f01 	cmp.w	r9, #1
 8001a82:	d110      	bne.n	8001aa6 <Event_Queue_Process+0xbe>
        memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl);
 8001a84:	f8b4 c11c 	ldrh.w	ip, [r4, #284]	; 0x11c
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	f100 0108 	add.w	r1, r0, #8
 8001a90:	eb03 000c 	add.w	r0, r3, ip
 8001a94:	f001 fc9c 	bl	80033d0 <memcpy>
        MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 8001a98:	9801      	ldr	r0, [sp, #4]
 8001a9a:	f000 f9a3 	bl	8001de4 <MM_ReleaseBuffer>
        if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 8001a9e:	b90d      	cbnz	r5, 8001aa4 <Event_Queue_Process+0xbc>
          HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Busy;
 8001aa0:	f886 912c 	strb.w	r9, [r6, #300]	; 0x12c
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)plarge_hci_buffer );
 8001aa4:	4638      	mov	r0, r7
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
 8001aa6:	f7ff fea3 	bl	80017f0 <TL_BLE_EvtReceived>
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8001ab0:	e7d6      	b.n	8001a60 <Event_Queue_Process+0x78>
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
 8001ab2:	4637      	mov	r7, r6
 8001ab4:	e7a0      	b.n	80019f8 <Event_Queue_Process+0x10>
 8001ab6:	bf00      	nop
 8001ab8:	20000244 	.word	0x20000244
 8001abc:	20000354 	.word	0x20000354

08001ac0 <TL_BLE_R_EvtInput>:
{
 8001ac0:	b508      	push	{r3, lr}
  LST_insert_tail (&TLQueueEvtContext[hci_evt_packet_type].TlBufferQueue, (tListNode *)hci_evt_buffer);
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <TL_BLE_R_EvtInput+0x18>)
 8001ac4:	220e      	movs	r2, #14
 8001ac6:	fb02 3000 	mla	r0, r2, r0, r3
 8001aca:	f000 f8da 	bl	8001c82 <LST_insert_tail>
}
 8001ace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TL_BLE_R_EvtProcReq();
 8001ad2:	f7ff bf63 	b.w	800199c <TL_BLE_R_EvtProcReq>
 8001ad6:	bf00      	nop
 8001ad8:	20000354 	.word	0x20000354

08001adc <TL_BLE_R_EvtProc>:
{
 8001adc:	b508      	push	{r3, lr}
  Event_Queue_Process(TL_BLE_R_HciCmdEvt);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff ff82 	bl	80019e8 <Event_Queue_Process>
}
 8001ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Event_Queue_Process(TL_BLE_R_HciAsynchEvt);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff bf7d 	b.w	80019e8 <Event_Queue_Process>
	...

08001af0 <TL_BLE_R_Init>:
{
 8001af0:	b538      	push	{r3, r4, r5, lr}
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 8001af2:	4c0c      	ldr	r4, [pc, #48]	; (8001b24 <TL_BLE_R_Init+0x34>)
 8001af4:	2300      	movs	r3, #0
{
 8001af6:	4605      	mov	r5, r0
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 8001af8:	f504 7088 	add.w	r0, r4, #272	; 0x110
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 8001afc:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciPacketStatus = hci_packet_start;
 8001b00:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciLargeBufferOffset = 0;
 8001b04:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciLargeBufferOffset = 0;
 8001b08:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
  HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 8001b0c:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 8001b10:	f000 f8aa 	bl	8001c68 <LST_init_head>
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciCmdEvt].TlBufferQueue);
 8001b14:	f504 708f 	add.w	r0, r4, #286	; 0x11e
 8001b18:	f000 f8a6 	bl	8001c68 <LST_init_head>
  pCmdBuffer = cmdbuffer;
 8001b1c:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
}
 8001b20:	bd38      	pop	{r3, r4, r5, pc}
 8001b22:	bf00      	nop
 8001b24:	20000244 	.word	0x20000244

08001b28 <TL_BLE_R_EvtDone>:

void TL_BLE_R_EvtDone(TL_EvtPacket_t * hcievt)
{
  if(hcievt == (TL_EvtPacket_t *)&HciLargeAsynchBuffer)
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <TL_BLE_R_EvtDone+0x20>)
 8001b2a:	4290      	cmp	r0, r2
 8001b2c:	d104      	bne.n	8001b38 <TL_BLE_R_EvtDone+0x10>
  {
    HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c

    /**
     * Check if there are waiting events to be copied in the large buffer
     */
    TL_BLE_R_EvtProcReq();
 8001b34:	f7ff bf32 	b.w	800199c <TL_BLE_R_EvtProcReq>
  }
  else if(hcievt != (TL_EvtPacket_t *)pCmdBuffer)
 8001b38:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8001b3c:	4282      	cmp	r2, r0
 8001b3e:	d001      	beq.n	8001b44 <TL_BLE_R_EvtDone+0x1c>
  {
    MM_ReleaseBuffer((MM_pBufAdd_t)hcievt);
 8001b40:	f000 b950 	b.w	8001de4 <MM_ReleaseBuffer>
  }

  return;
}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000244 	.word	0x20000244

08001b4c <Allocate_New_Buffer_To_TL>:
}


/* Private Functions Definition ------------------------------------------------------*/
static void Allocate_New_Buffer_To_TL(void)
{
 8001b4c:	b508      	push	{r3, lr}
  pHciEventBuffer =  (TL_EvtPacket_t*) MM_GetBuffer(sizeof(TL_PacketHeader_t) + TL_BLE_EVENT_FRAME_SIZE, (MM_pCb_t) Allocate_New_Buffer_To_TL);
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <Allocate_New_Buffer_To_TL+0x24>)
 8001b50:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8001b54:	f000 f92c 	bl	8001db0 <MM_GetBuffer>
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <Allocate_New_Buffer_To_TL+0x28>)
 8001b5a:	6018      	str	r0, [r3, #0]
  if(pHciEventBuffer)
 8001b5c:	b138      	cbz	r0, 8001b6e <Allocate_New_Buffer_To_TL+0x22>
  {
    TlSpiIsrContext.TlSizeLeftInBufferFrame = TL_BLE_EVENT_FRAME_SIZE;
 8001b5e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001b62:	8119      	strh	r1, [r3, #8]
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 8001b64:	3008      	adds	r0, #8
  }

  return;
}
 8001b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 8001b6a:	f7ff b9f5 	b.w	8000f58 <HW_BNRG_EvtReq>
}
 8001b6e:	bd08      	pop	{r3, pc}
 8001b70:	08001b4d 	.word	0x08001b4d
 8001b74:	20000374 	.word	0x20000374

08001b78 <TL_BLE_Init>:
{
 8001b78:	b570      	push	{r4, r5, r6, lr}
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8001b7a:	4e11      	ldr	r6, [pc, #68]	; (8001bc0 <TL_BLE_Init+0x48>)
{
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	4610      	mov	r0, r2
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8001b80:	2200      	movs	r2, #0
{
 8001b82:	460d      	mov	r5, r1
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8001b84:	7132      	strb	r2, [r6, #4]
  MM_Init(evtpool, evtpoolsize, ELT_SIZE);
 8001b86:	4619      	mov	r1, r3
 8001b88:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8001b8c:	f000 f8f0 	bl	8001d70 <MM_Init>
  TL_BLE_R_Init(cmdbuffer);
 8001b90:	4628      	mov	r0, r5
  pCmdBuffer = cmdbuffer;
 8001b92:	60f5      	str	r5, [r6, #12]
  TL_BLE_R_Init(cmdbuffer);
 8001b94:	f7ff ffac 	bl	8001af0 <TL_BLE_R_Init>
  if( initmode == TL_BLE_Init_Limited)
 8001b98:	b934      	cbnz	r4, 8001ba8 <TL_BLE_Init+0x30>
    HW_BNRG_Init(HW_BNRG_Limited);
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f7ff f940 	bl	8000e20 <HW_BNRG_Init>
}
 8001ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Allocate_New_Buffer_To_TL();
 8001ba4:	f7ff bfd2 	b.w	8001b4c <Allocate_New_Buffer_To_TL>
    HW_BNRG_Init(HW_BNRG_Full);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff f939 	bl	8000e20 <HW_BNRG_Init>
    while(HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET);
 8001bae:	4c05      	ldr	r4, [pc, #20]	; (8001bc4 <TL_BLE_Init+0x4c>)
 8001bb0:	2140      	movs	r1, #64	; 0x40
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f000 fee2 	bl	800297c <HAL_GPIO_ReadPin>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d0f9      	beq.n	8001bb0 <TL_BLE_Init+0x38>
 8001bbc:	e7f0      	b.n	8001ba0 <TL_BLE_Init+0x28>
 8001bbe:	bf00      	nop
 8001bc0:	20000374 	.word	0x20000374
 8001bc4:	48001000 	.word	0x48001000

08001bc8 <TL_BLE_SendCmd>:
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <TL_BLE_SendCmd+0x14>)
 8001bca:	68d8      	ldr	r0, [r3, #12]
  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 8001bcc:	7ac1      	ldrb	r1, [r0, #11]
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	7203      	strb	r3, [r0, #8]
  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 8001bd2:	3104      	adds	r1, #4
 8001bd4:	3008      	adds	r0, #8
 8001bd6:	f7ff ba57 	b.w	8001088 <HW_BNRG_Send>
 8001bda:	bf00      	nop
 8001bdc:	20000374 	.word	0x20000374

08001be0 <HW_BNRG_Isr>:
{
 8001be0:	b570      	push	{r4, r5, r6, lr}
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 8001be2:	4c1f      	ldr	r4, [pc, #124]	; (8001c60 <HW_BNRG_Isr+0x80>)
 8001be4:	7923      	ldrb	r3, [r4, #4]
 8001be6:	2b01      	cmp	r3, #1
{
 8001be8:	4605      	mov	r5, r0
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 8001bea:	d114      	bne.n	8001c16 <HW_BNRG_Isr+0x36>
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi -= event_payload_len;
 8001bec:	88e3      	ldrh	r3, [r4, #6]
 8001bee:	1a1b      	subs	r3, r3, r0
 8001bf0:	80e3      	strh	r3, [r4, #6]
  if(TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi != 0)
 8001bf2:	88e6      	ldrh	r6, [r4, #6]
 8001bf4:	6821      	ldr	r1, [r4, #0]
 8001bf6:	b33e      	cbz	r6, 8001c48 <HW_BNRG_Isr+0x68>
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 8001bf8:	8922      	ldrh	r2, [r4, #8]
    TlSpiIsrContext.TlPacketStatus = tl_packet_cont;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	7123      	strb	r3, [r4, #4]
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 8001bfe:	1b53      	subs	r3, r2, r5
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	8123      	strh	r3, [r4, #8]
    if(TlSpiIsrContext.TlSizeLeftInBufferFrame != 0)
 8001c04:	b1cb      	cbz	r3, 8001c3a <HW_BNRG_Isr+0x5a>
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 8001c06:	1ac8      	subs	r0, r1, r3
}
 8001c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f500 7085 	add.w	r0, r0, #266	; 0x10a
 8001c12:	f7ff b9a1 	b.w	8000f58 <HW_BNRG_EvtReq>
 8001c16:	6822      	ldr	r2, [r4, #0]
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi = TL_EVT_HDR_SIZE + pHciEventBuffer->evtserial.evt.plen - event_payload_len;
 8001c18:	7a93      	ldrb	r3, [r2, #10]
 8001c1a:	3303      	adds	r3, #3
 8001c1c:	1a1b      	subs	r3, r3, r0
 8001c1e:	80e3      	strh	r3, [r4, #6]
    if((pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CC_OPCODE) && (pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CS_OPCODE))
 8001c20:	7a53      	ldrb	r3, [r2, #9]
 8001c22:	3b0e      	subs	r3, #14
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d905      	bls.n	8001c34 <HW_BNRG_Isr+0x54>
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 8001c28:	2100      	movs	r1, #0
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 8001c2a:	2003      	movs	r0, #3
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 8001c2c:	7161      	strb	r1, [r4, #5]
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 8001c2e:	f000 f853 	bl	8001cd8 <LPM_SetOffMode>
 8001c32:	e7de      	b.n	8001bf2 <HW_BNRG_Isr+0x12>
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciCmdEvt;
 8001c34:	2301      	movs	r3, #1
 8001c36:	7163      	strb	r3, [r4, #5]
 8001c38:	e7db      	b.n	8001bf2 <HW_BNRG_Isr+0x12>
      TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 8001c3a:	7960      	ldrb	r0, [r4, #5]
 8001c3c:	f7ff ff40 	bl	8001ac0 <TL_BLE_R_EvtInput>
}
 8001c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Allocate_New_Buffer_To_TL();
 8001c44:	f7ff bf82 	b.w	8001b4c <Allocate_New_Buffer_To_TL>
    TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 8001c48:	7960      	ldrb	r0, [r4, #5]
 8001c4a:	f7ff ff39 	bl	8001ac0 <TL_BLE_R_EvtInput>
    TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8001c4e:	7126      	strb	r6, [r4, #4]
    Allocate_New_Buffer_To_TL();
 8001c50:	f7ff ff7c 	bl	8001b4c <Allocate_New_Buffer_To_TL>
}
 8001c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_En);
 8001c58:	2101      	movs	r1, #1
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	f000 b83c 	b.w	8001cd8 <LPM_SetOffMode>
 8001c60:	20000374 	.word	0x20000374

08001c64 <TL_BLE_EvtDone>:
  TL_BLE_R_EvtDone(hcievt);
 8001c64:	f7ff bf60 	b.w	8001b28 <TL_BLE_R_EvtDone>

08001c68 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8001c68:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 8001c6a:	6040      	str	r0, [r0, #4]
}
 8001c6c:	4770      	bx	lr

08001c6e <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c6e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001c72:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8001c74:	6802      	ldr	r2, [r0, #0]
  {
    return_value = TRUE;
 8001c76:	1a82      	subs	r2, r0, r2
 8001c78:	4250      	negs	r0, r2
 8001c7a:	4150      	adcs	r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7c:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8001c80:	4770      	bx	lr

08001c82 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c82:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001c86:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8001c88:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8001c8a:	6842      	ldr	r2, [r0, #4]
 8001c8c:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8001c8e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8001c90:	684a      	ldr	r2, [r1, #4]
 8001c92:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c94:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8001c98:	4770      	bx	lr

08001c9a <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c9a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8001ca0:	6843      	ldr	r3, [r0, #4]
 8001ca2:	6801      	ldr	r1, [r0, #0]
 8001ca4:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 8001ca6:	6801      	ldr	r1, [r0, #0]
 8001ca8:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001caa:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8001cae:	4770      	bx	lr

08001cb0 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8001cb0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cb2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb6:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8001cb8:	6803      	ldr	r3, [r0, #0]
 8001cba:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 8001cbc:	6800      	ldr	r0, [r0, #0]
 8001cbe:	f7ff ffec 	bl	8001c9a <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cc2:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8001cc6:	bd10      	pop	{r4, pc}

08001cc8 <LPM_SetConf>:


/* Functions Definition ------------------------------------------------------*/
void LPM_SetConf(LPM_Conf_t *p_conf)
{
  LowPowerModeConfiguration.Stop_Mode_Config = p_conf->Stop_Mode_Config;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <LPM_SetConf+0xc>)
 8001cca:	6802      	ldr	r2, [r0, #0]
 8001ccc:	601a      	str	r2, [r3, #0]
  LowPowerModeConfiguration.OFF_Mode_Config = p_conf->OFF_Mode_Config;
 8001cce:	6842      	ldr	r2, [r0, #4]
 8001cd0:	605a      	str	r2, [r3, #4]

  return;
}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000384 	.word	0x20000384

08001cd8 <LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cd8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_OffMode_En)
 8001cde:	2301      	movs	r3, #1
 8001ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8001ce4:	4299      	cmp	r1, r3
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <LPM_SetOffMode+0x24>)
  {
    LowPowerModeSel &= (~(1<<id));
 8001ce8:	6899      	ldr	r1, [r3, #8]
 8001cea:	bf0c      	ite	eq
 8001cec:	ea21 0000 	biceq.w	r0, r1, r0
  }
  else
  {
    LowPowerModeSel |= (1<<id);
 8001cf0:	4308      	orrne	r0, r1
 8001cf2:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf4:	f382 8810 	msr	PRIMASK, r2
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000384 	.word	0x20000384

08001d00 <LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d00:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001d04:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_StopMode_Dis)
 8001d06:	2301      	movs	r3, #1
 8001d08:	fa03 f000 	lsl.w	r0, r3, r0
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <LPM_SetStopMode+0x24>)
 8001d0e:	b931      	cbnz	r1, 8001d1e <LPM_SetStopMode+0x1e>
  {
    SysClockReq &= (~(1<<id));
 8001d10:	68d9      	ldr	r1, [r3, #12]
 8001d12:	ea21 0000 	bic.w	r0, r1, r0
 8001d16:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d18:	f382 8810 	msr	PRIMASK, r2
  }

  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/

  return;
}
 8001d1c:	4770      	bx	lr
    SysClockReq |= (1<<id);
 8001d1e:	68d9      	ldr	r1, [r3, #12]
 8001d20:	4308      	orrs	r0, r1
 8001d22:	e7f8      	b.n	8001d16 <LPM_SetStopMode+0x16>
 8001d24:	20000384 	.word	0x20000384

08001d28 <LPM_EnterSleepMode>:
/* __WEAK functions: The application can overload this function  if needed ----*/
/* ----------------------------------------------------------------------------*/

__weak void LPM_EnterSleepMode(void)
{
}
 8001d28:	4770      	bx	lr

08001d2a <LPM_ExitSleepMode>:
 8001d2a:	4770      	bx	lr

08001d2c <LPM_EnterStopMode>:
 8001d2c:	4770      	bx	lr
	...

08001d30 <LPM_EnterModeSelected>:
{
 8001d30:	b510      	push	{r4, lr}
  if(SysClockReq)
 8001d32:	4c0e      	ldr	r4, [pc, #56]	; (8001d6c <LPM_EnterModeSelected+0x3c>)
 8001d34:	68e3      	ldr	r3, [r4, #12]
 8001d36:	b133      	cbz	r3, 8001d46 <LPM_EnterModeSelected+0x16>
    LPM_EnterSleepMode();
 8001d38:	f7ff fff6 	bl	8001d28 <LPM_EnterSleepMode>
    HW_SleepMode();
 8001d3c:	f7fe fe62 	bl	8000a04 <HW_SleepMode>
    LPM_ExitSleepMode();
 8001d40:	f7ff fff3 	bl	8001d2a <LPM_ExitSleepMode>
}
 8001d44:	bd10      	pop	{r4, pc}
    if(LowPowerModeSel)
 8001d46:	68a3      	ldr	r3, [r4, #8]
 8001d48:	b13b      	cbz	r3, 8001d5a <LPM_EnterModeSelected+0x2a>
      LPM_EnterStopMode();
 8001d4a:	f7ff ffef 	bl	8001d2c <LPM_EnterStopMode>
      HW_StopMode(LowPowerModeConfiguration.Stop_Mode_Config);
 8001d4e:	6820      	ldr	r0, [r4, #0]
 8001d50:	f7fe fe62 	bl	8000a18 <HW_StopMode>
      LPM_ExitStopMode();
 8001d54:	f000 fafe 	bl	8002354 <LPM_ExitStopMode>
 8001d58:	e7f4      	b.n	8001d44 <LPM_EnterModeSelected+0x14>
      LPM_EnterOffMode();
 8001d5a:	f000 fafd 	bl	8002358 <LPM_EnterOffMode>
      HW_OffMode(LowPowerModeConfiguration.OFF_Mode_Config);
 8001d5e:	6860      	ldr	r0, [r4, #4]
 8001d60:	f7fe fe6c 	bl	8000a3c <HW_OffMode>
      LPM_ExitOffMode();
 8001d64:	f000 fb04 	bl	8002370 <LPM_ExitOffMode>
  return;
 8001d68:	e7ec      	b.n	8001d44 <LPM_EnterModeSelected+0x14>
 8001d6a:	bf00      	nop
 8001d6c:	20000384 	.word	0x20000384

08001d70 <MM_Init>:
 * @param  pool_size: The size of the pool
 * @param  elt_size: The size of one element in the pool
 * @retval None
 */
void MM_Init(uint8_t *p_pool, uint32_t pool_size,  uint32_t elt_size)
{
 8001d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t elt_size_corrected;

  QueueSize = 0;
 8001d74:	4d0d      	ldr	r5, [pc, #52]	; (8001dac <MM_Init+0x3c>)
{
 8001d76:	4607      	mov	r7, r0
  QueueSize = 0;
 8001d78:	4628      	mov	r0, r5
 8001d7a:	2300      	movs	r3, #0
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 8001d7c:	3203      	adds	r2, #3
  QueueSize = 0;
 8001d7e:	f800 3b01 	strb.w	r3, [r0], #1
{
 8001d82:	460e      	mov	r6, r1
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 8001d84:	f022 0403 	bic.w	r4, r2, #3

  /**
   *  Initialize list
   */
  LST_init_head (&BufferPool);
 8001d88:	f7ff ff6e 	bl	8001c68 <LST_init_head>
  /**
   *  Initialize the queue
   */
  while(pool_size >= elt_size_corrected)
  {
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 8001d8c:	f105 0801 	add.w	r8, r5, #1
  while(pool_size >= elt_size_corrected)
 8001d90:	42a6      	cmp	r6, r4
 8001d92:	d201      	bcs.n	8001d98 <MM_Init+0x28>
    QueueSize++;
    pool_size -= elt_size_corrected;
  }

  return;
}
 8001d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 8001d98:	4639      	mov	r1, r7
 8001d9a:	4640      	mov	r0, r8
 8001d9c:	f7ff ff71 	bl	8001c82 <LST_insert_tail>
    QueueSize++;
 8001da0:	782b      	ldrb	r3, [r5, #0]
 8001da2:	3301      	adds	r3, #1
    p_pool += elt_size_corrected;
 8001da4:	4427      	add	r7, r4
    QueueSize++;
 8001da6:	702b      	strb	r3, [r5, #0]
    pool_size -= elt_size_corrected;
 8001da8:	1b36      	subs	r6, r6, r4
 8001daa:	e7f1      	b.n	8001d90 <MM_Init+0x20>
 8001dac:	20000394 	.word	0x20000394

08001db0 <MM_GetBuffer>:
 * @param  cb: The callback to be called when a buffer is made available later on
 *                   if there is no buffer currently available when this API is called
 * @retval The buffer address when available or NULL when there is no buffer
 */
MM_pBufAdd_t MM_GetBuffer( uint32_t size, MM_pCb_t cb )
{
 8001db0:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001db6:	b672      	cpsid	i
  MM_pBufAdd_t buffer_address;
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if ( QueueSize )
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <MM_GetBuffer+0x30>)
 8001dba:	7803      	ldrb	r3, [r0, #0]
 8001dbc:	b163      	cbz	r3, 8001dd8 <MM_GetBuffer+0x28>
  {
    QueueSize--;
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	7003      	strb	r3, [r0, #0]
    BufferFreeCb = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60c3      	str	r3, [r0, #12]
    LST_remove_head( &BufferPool, ( tListNode ** )&buffer_address );
 8001dc6:	a901      	add	r1, sp, #4
 8001dc8:	3001      	adds	r0, #1
 8001dca:	f7ff ff71 	bl	8001cb0 <LST_remove_head>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dce:	f384 8810 	msr	PRIMASK, r4
    buffer_address = 0;
  }
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/

  return buffer_address;
}
 8001dd2:	9801      	ldr	r0, [sp, #4]
 8001dd4:	b002      	add	sp, #8
 8001dd6:	bd10      	pop	{r4, pc}
    BufferFreeCb = cb;
 8001dd8:	60c1      	str	r1, [r0, #12]
    buffer_address = 0;
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	e7f7      	b.n	8001dce <MM_GetBuffer+0x1e>
 8001dde:	bf00      	nop
 8001de0:	20000394 	.word	0x20000394

08001de4 <MM_ReleaseBuffer>:
 * @brief  Release a buffer
 * @param  p_buffer: The data buffer address
 * @retval None
 */
void MM_ReleaseBuffer( MM_pBufAdd_t p_buffer )
{
 8001de4:	b570      	push	{r4, r5, r6, lr}
 8001de6:	4601      	mov	r1, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001de8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001dec:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  LST_insert_tail( &BufferPool, ( tListNode * )p_buffer );
 8001dee:	4c07      	ldr	r4, [pc, #28]	; (8001e0c <MM_ReleaseBuffer+0x28>)
 8001df0:	1c60      	adds	r0, r4, #1
 8001df2:	f7ff ff46 	bl	8001c82 <LST_insert_tail>
  QueueSize++;
 8001df6:	7823      	ldrb	r3, [r4, #0]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dfc:	f385 8810 	msr	PRIMASK, r5
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/
  if( BufferFreeCb )
 8001e00:	68e3      	ldr	r3, [r4, #12]
 8001e02:	b113      	cbz	r3, 8001e0a <MM_ReleaseBuffer+0x26>
     */
    BufferFreeCb();
  }

  return;
}
 8001e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BufferFreeCb();
 8001e08:	4718      	bx	r3
}
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
 8001e0c:	20000394 	.word	0x20000394

08001e10 <SCH_RegTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e10:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskCb[task_id] = task;
 8001e16:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <SCH_RegTask+0x14>)
 8001e18:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e1c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	200003a4 	.word	0x200003a4

08001e28 <SCH_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskSet |= (1 << task_id);
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <SCH_SetTask+0x1c>)
 8001e30:	2301      	movs	r3, #1
 8001e32:	fa03 f000 	lsl.w	r0, r3, r0
 8001e36:	6993      	ldr	r3, [r2, #24]
 8001e38:	4318      	orrs	r0, r3
 8001e3a:	6190      	str	r0, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e3c:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	200003a4 	.word	0x200003a4

08001e48 <SCH_PauseTask>:

void SCH_PauseTask( uint32_t task_id )
{
 8001e48:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e4a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskMask &= ~ ( 1 << task_id );
 8001e50:	4905      	ldr	r1, [pc, #20]	; (8001e68 <SCH_PauseTask+0x20>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	680b      	ldr	r3, [r1, #0]
 8001e56:	fa02 f000 	lsl.w	r0, r2, r0
 8001e5a:	ea23 0300 	bic.w	r3, r3, r0
 8001e5e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e60:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001e64:	bd10      	pop	{r4, pc}
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000

08001e6c <SCH_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e6c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001e70:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskMask |= ( 1 << task_id );
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <SCH_ResumeTask+0x1c>)
 8001e74:	2301      	movs	r3, #1
 8001e76:	fa03 f000 	lsl.w	r0, r3, r0
 8001e7a:	6813      	ldr	r3, [r2, #0]
 8001e7c:	4318      	orrs	r0, r3
 8001e7e:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e80:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000000 	.word	0x20000000

08001e8c <SCH_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e8c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  EvtSet |= ( 1 << evt_id);
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <SCH_SetEvt+0x1c>)
 8001e94:	2301      	movs	r3, #1
 8001e96:	fa03 f000 	lsl.w	r0, r3, r0
 8001e9a:	69d3      	ldr	r3, [r2, #28]
 8001e9c:	4318      	orrs	r0, r3
 8001e9e:	61d0      	str	r0, [r2, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ea0:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	200003a4 	.word	0x200003a4

08001eac <SCH_Run>:
{
 8001eac:	b570      	push	{r4, r5, r6, lr}
  while( TaskSet &  TaskMask )
 8001eae:	4c15      	ldr	r4, [pc, #84]	; (8001f04 <SCH_Run+0x58>)
 8001eb0:	4d15      	ldr	r5, [pc, #84]	; (8001f08 <SCH_Run+0x5c>)
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 8001eb2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  while( TaskSet &  TaskMask )
 8001eb6:	69a3      	ldr	r3, [r4, #24]
 8001eb8:	682a      	ldr	r2, [r5, #0]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d10f      	bne.n	8001ede <SCH_Run+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ebe:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec2:	b672      	cpsid	i
  if ( !( (TaskSet & TaskMask ) || (EvtSet & EvtWaited) ) )
 8001ec4:	69a3      	ldr	r3, [r4, #24]
 8001ec6:	682a      	ldr	r2, [r5, #0]
 8001ec8:	401a      	ands	r2, r3
 8001eca:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001ece:	400b      	ands	r3, r1
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <SCH_Run+0x2c>
    SCH_Idle();
 8001ed4:	f000 fa5c 	bl	8002390 <SCH_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ed8:	f386 8810 	msr	PRIMASK, r6
}
 8001edc:	bd70      	pop	{r4, r5, r6, pc}
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001ede:	fab3 f383 	clz	r3, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ee2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee6:	b672      	cpsid	i
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 8001ee8:	69a2      	ldr	r2, [r4, #24]
 8001eea:	fa26 f003 	lsr.w	r0, r6, r3
 8001eee:	ea22 0200 	bic.w	r2, r2, r0
 8001ef2:	61a2      	str	r2, [r4, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef4:	f381 8810 	msr	PRIMASK, r1
    TaskCb[31 - bit_nbr]();
 8001ef8:	f1c3 031f 	rsb	r3, r3, #31
 8001efc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001f00:	4798      	blx	r3
 8001f02:	e7d8      	b.n	8001eb6 <SCH_Run+0xa>
 8001f04:	200003a4 	.word	0x200003a4
 8001f08:	20000000 	.word	0x20000000

08001f0c <SCH_EvtIdle>:
__weak void SCH_EvtIdle( void )
{
  /**
   * execute scheduler if not implemented by the application
   */
  SCH_Run();
 8001f0c:	f7ff bfce 	b.w	8001eac <SCH_Run>

08001f10 <SCH_WaitEvt>:
{
 8001f10:	b538      	push	{r3, r4, r5, lr}
  event_waited_id_backup = EvtWaited;
 8001f12:	4c09      	ldr	r4, [pc, #36]	; (8001f38 <SCH_WaitEvt+0x28>)
  EvtWaited = ( 1 << evt_id );
 8001f14:	2301      	movs	r3, #1
 8001f16:	fa03 f000 	lsl.w	r0, r3, r0
  event_waited_id_backup = EvtWaited;
 8001f1a:	6a25      	ldr	r5, [r4, #32]
  EvtWaited = ( 1 << evt_id );
 8001f1c:	6220      	str	r0, [r4, #32]
  while( (EvtSet & EvtWaited) == 0)
 8001f1e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001f22:	4213      	tst	r3, r2
 8001f24:	d004      	beq.n	8001f30 <SCH_WaitEvt+0x20>
  EvtSet &= (~EvtWaited);
 8001f26:	ea23 0302 	bic.w	r3, r3, r2
  EvtWaited = event_waited_id_backup;
 8001f2a:	e9c4 3507 	strd	r3, r5, [r4, #28]
}
 8001f2e:	bd38      	pop	{r3, r4, r5, pc}
    SCH_EvtIdle();
 8001f30:	f7ff ffec 	bl	8001f0c <SCH_EvtIdle>
 8001f34:	e7f3      	b.n	8001f1e <SCH_WaitEvt+0xe>
 8001f36:	bf00      	nop
 8001f38:	200003a4 	.word	0x200003a4

08001f3c <LBR_Init>:


/* Public functions ----------------------------------------------------------*/

void LBR_Init(LBR_InitMode_t InitMode)
{
 8001f3c:	b530      	push	{r4, r5, lr}
 8001f3e:	b085      	sub	sp, #20
  uint8_t index;

  if(InitMode != LBR_Limited )
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d046      	beq.n	8001fd2 <LBR_Init+0x96>
  {
    /**
     * Initialization of all transport layer
     */
    TL_BLE_HCI_Init(TL_BLE_HCI_InitFull, &CmdBuffer, EvtPool, POOL_SIZE);
 8001f44:	4c24      	ldr	r4, [pc, #144]	; (8001fd8 <LBR_Init+0x9c>)
 8001f46:	f240 5332 	movw	r3, #1330	; 0x532
 8001f4a:	18e1      	adds	r1, r4, r3
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff fc68 	bl	8001824 <TL_BLE_HCI_Init>

    /**
     * Initialization of the BLE App Context
     */
   
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 8001f54:	2500      	movs	r5, #0
    TL_Enable();
 8001f56:	f3af 8000 	nop.w
     SVCCTL_Init();
 8001f5a:	f7fe fd09 	bl	8000970 <SVCCTL_Init>
    /**
     * Set TX Power to -2dBm.
     * This avoids undesired disconnection due to instability on 32KHz
     * internal oscillator for high transmission power.
     */
    aci_hal_set_tx_power_level(1,0x18);
 8001f5e:	2118      	movs	r1, #24
 8001f60:	2001      	movs	r0, #1
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 8001f62:	f884 56dc 	strb.w	r5, [r4, #1756]	; 0x6dc
    aci_hal_set_tx_power_level(1,0x18);
 8001f66:	f7fe fb93 	bl	8000690 <aci_hal_set_tx_power_level>

    /**
     * Initialize IO capability
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 8001f6a:	4628      	mov	r0, r5
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
 8001f6c:	f884 5640 	strb.w	r5, [r4, #1600]	; 0x640
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 8001f70:	f7fe f9d6 	bl	8000320 <aci_gap_set_io_capability>
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
    LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
    LBRContext.LBRContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 8001f74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f78:	f8a4 3654 	strh.w	r3, [r4, #1620]	; 0x654
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	f884 3656 	strb.w	r3, [r4, #1622]	; 0x656
    LBRContext.LBRContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <LBR_Init+0xa0>)
 8001f84:	f8c4 3658 	str.w	r3, [r4, #1624]	; 0x658
    LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode = 1;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f8a4 3642 	strh.w	r3, [r4, #1602]	; 0x642
    for (index=0; index<16 ;index++)
 8001f8e:	f204 6344 	addw	r3, r4, #1604	; 0x644
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
 8001f92:	f884 5641 	strb.w	r5, [r4, #1601]	; 0x641
 8001f96:	461a      	mov	r2, r3
    {
      LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t)index;
 8001f98:	f803 5b01 	strb.w	r5, [r3], #1
    for (index=0; index<16 ;index++)
 8001f9c:	3501      	adds	r5, #1
 8001f9e:	2d10      	cmp	r5, #16
 8001fa0:	d1fa      	bne.n	8001f98 <LBR_Init+0x5c>
    }

    aci_gap_set_auth_requirement(LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode,
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <LBR_Init+0xa0>)
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8001faa:	2100      	movs	r1, #0
 8001fac:	2308      	movs	r3, #8
 8001fae:	e9cd 5100 	strd	r5, r1, [sp]
 8001fb2:	4608      	mov	r0, r1
 8001fb4:	f7fe f9d8 	bl	8000368 <aci_gap_set_auth_requirement>
                                 LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode);

    /**
     * Initialize whitelist
     */
    if(LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode)
 8001fb8:	f894 3642 	ldrb.w	r3, [r4, #1602]	; 0x642
 8001fbc:	b10b      	cbz	r3, 8001fc2 <LBR_Init+0x86>
    {
      aci_gap_configure_whitelist();
 8001fbe:	f7fe fa11 	bl	80003e4 <aci_gap_configure_whitelist>
    
    /**
     * Initialize LBS Applciation
     */
#if(LB_SERVER!=0)     
    LBSAPP_Init();
 8001fc2:	f000 f871 	bl	80020a8 <LBSAPP_Init>
   // Start Advertise to be connected by Client
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 8001fc6:	2001      	movs	r0, #1
#endif
  
  }

  return;
}
 8001fc8:	b005      	add	sp, #20
 8001fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 8001fce:	f7ff bf2b 	b.w	8001e28 <SCH_SetTask>
}
 8001fd2:	b005      	add	sp, #20
 8001fd4:	bd30      	pop	{r4, r5, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200003c8 	.word	0x200003c8
 8001fdc:	0001b207 	.word	0x0001b207

08001fe0 <LBR_Adv_Request>:
/*                     DEVICE IS SERVER                         */
/****************************************************************/

#if(LB_SERVER!=0) 
void LBR_Adv_Request(void)
{
 8001fe0:	b500      	push	{lr}
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <LBR_Adv_Request+0x38>)
 8001fe4:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 8001fe8:	2b0a      	cmp	r3, #10
{
 8001fea:	b089      	sub	sp, #36	; 0x24
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 8001fec:	d010      	beq.n	8002010 <LBR_Adv_Request+0x30>
  {
    tBleStatus result=0x00;
    
    result = aci_gap_set_discoverable(ADV_IND,
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <LBR_Adv_Request+0x3c>)
 8001ff0:	9202      	str	r2, [sp, #8]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	220e      	movs	r2, #14
 8001ff6:	e9cd 3200 	strd	r3, r2, [sp]
 8001ffa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001ffe:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002002:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002006:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe f91c 	bl	8000248 <aci_gap_set_discoverable>
    {
      APPL_MESG_DBG("** START ADVERTISING **  Failed \r\n\r");
    }
  }
  return;
}
 8002010:	b009      	add	sp, #36	; 0x24
 8002012:	f85d fb04 	ldr.w	pc, [sp], #4
 8002016:	bf00      	nop
 8002018:	200003c8 	.word	0x200003c8
 800201c:	08003430 	.word	0x08003430

08002020 <SVCCTL_App_Notification>:
  evt_le_meta_event *meta_evt;
  evt_le_connection_complete * connection_complete_event;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
  evt_disconn_complete *cc = (void *)event_pckt->data;
  switch(event_pckt->evt)
 8002020:	7843      	ldrb	r3, [r0, #1]
 8002022:	2b05      	cmp	r3, #5
 8002024:	d002      	beq.n	800202c <SVCCTL_App_Notification+0xc>
 8002026:	2b3e      	cmp	r3, #62	; 0x3e
 8002028:	d011      	beq.n	800204e <SVCCTL_App_Notification+0x2e>
 800202a:	4770      	bx	lr
  {
    case EVT_DISCONN_COMPLETE:
      if(cc->handle == LBRContext.connectionHandleRemote)
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <SVCCTL_App_Notification+0x4c>)
 800202e:	8881      	ldrh	r1, [r0, #4]
 8002030:	f8b3 26de 	ldrh.w	r2, [r3, #1758]	; 0x6de
 8002034:	4291      	cmp	r1, r2
 8002036:	d118      	bne.n	800206a <SVCCTL_App_Notification+0x4a>
      {
        LBRContext.connectionHandleRemote = LBC_IDLE;
        APPL_MESG_DBG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <SVCCTL_App_Notification+0x50>)
        LBRContext.connectionHandleRemote = LBC_IDLE;
 800203a:	2200      	movs	r2, #0
 800203c:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 8002040:	2303      	movs	r3, #3
 8002042:	7003      	strb	r3, [r0, #0]
        handleNotification.ConnectionHandle=connection_handle;
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <SVCCTL_App_Notification+0x54>)
 8002046:	881b      	ldrh	r3, [r3, #0]
      
          //CONNECTION WITH LB ROUTEUR 
           APPL_MESG_DBG("\r\n\r** CONNECTION EVENT WITH CLIENT \n");
          LBRContext.connectionHandleRemote = connection_handle;
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
          handleNotification.ConnectionHandle=connection_handle;
 8002048:	8043      	strh	r3, [r0, #2]
          LBR_Notification(&handleNotification);
 800204a:	f000 b81b 	b.w	8002084 <LBR_Notification>
      switch(meta_evt->subevent)
 800204e:	78c3      	ldrb	r3, [r0, #3]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d10a      	bne.n	800206a <SVCCTL_App_Notification+0x4a>
          connection_handle = connection_complete_event->handle;
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <SVCCTL_App_Notification+0x54>)
 8002056:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800205a:	8013      	strh	r3, [r2, #0]
          LBRContext.connectionHandleRemote = connection_handle;
 800205c:	4a03      	ldr	r2, [pc, #12]	; (800206c <SVCCTL_App_Notification+0x4c>)
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <SVCCTL_App_Notification+0x50>)
          LBRContext.connectionHandleRemote = connection_handle;
 8002060:	f8a2 36de 	strh.w	r3, [r2, #1758]	; 0x6de
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 8002064:	2202      	movs	r2, #2
 8002066:	7002      	strb	r2, [r0, #0]
 8002068:	e7ee      	b.n	8002048 <SVCCTL_App_Notification+0x28>

    default:
      break;
  }
  return;
}
 800206a:	4770      	bx	lr
 800206c:	200003c8 	.word	0x200003c8
 8002070:	20000b4c 	.word	0x20000b4c
 8002074:	20000b50 	.word	0x20000b50

08002078 <LBR_App_Key_Button_Action>:

void LBR_App_Key_Button_Action(void)
{
  SCH_SetTask(CFG_IdleTask_Button);
 8002078:	2004      	movs	r0, #4
 800207a:	f7ff bed5 	b.w	8001e28 <SCH_SetTask>

0800207e <BLESVC_InitCustomSvc>:
#endif 

void BLESVC_InitCustomSvc(void)
{
#if(LB_SERVER!=0) 
  LBS_STM_Init();
 800207e:	f7fe bb31 	b.w	80006e4 <LBS_STM_Init>
	...

08002084 <LBR_Notification>:



void LBR_Notification(LBR_ConnHandle_Not_evt_t *pNotification)
{
  switch(pNotification->LBR_Evt_Opcode)
 8002084:	7803      	ldrb	r3, [r0, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d002      	beq.n	8002090 <LBR_Notification+0xc>
 800208a:	2b03      	cmp	r3, #3
 800208c:	d004      	beq.n	8002098 <LBR_Notification+0x14>
 800208e:	4770      	bx	lr
  {
    case LB_CLIENT_CONN_HANDLE_EVT :
      LB_End_Dev_Context.connHandleWithLbRouteur = pNotification->ConnectionHandle;
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <LBR_Notification+0x20>)
 8002092:	8842      	ldrh	r2, [r0, #2]
 8002094:	809a      	strh	r2, [r3, #4]

    default:
      break;
  }
  return;
}
 8002096:	4770      	bx	lr
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <LBR_Notification+0x20>)
 800209a:	2200      	movs	r2, #0
      SCH_SetTask(CFG_IdleTask_StartAdv);
 800209c:	2001      	movs	r0, #1
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 800209e:	809a      	strh	r2, [r3, #4]
      SCH_SetTask(CFG_IdleTask_StartAdv);
 80020a0:	f7ff bec2 	b.w	8001e28 <SCH_SetTask>
 80020a4:	20000aa8 	.word	0x20000aa8

080020a8 <LBSAPP_Init>:
{
  /**
   * Initialize LedButton Service
   */
  LB_End_Dev_Context.Notification_Button_Status=0; 
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <LBSAPP_Init+0x10>)
 80020aa:	2200      	movs	r2, #0
  LB_End_Dev_Context.Notification_Button_Status=0; 
 80020ac:	f44f 7180 	mov.w	r1, #256	; 0x100
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 80020b0:	809a      	strh	r2, [r3, #4]
  LB_End_Dev_Context.Notification_Button_Status=0; 
 80020b2:	8019      	strh	r1, [r3, #0]
 // LB_End_Dev_Context.LedControlEndDevice1.Device_Led_Selection=0x01; // device1
//  LB_End_Dev_Context.LedControlEndDevice1.Led1Control=0x00; //led OFF
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Device1
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;
 80020b4:	709a      	strb	r2, [r3, #2]

  return;
}
 80020b6:	4770      	bx	lr
 80020b8:	20000aa8 	.word	0x20000aa8

080020bc <LB_App_Button_Trigger_Received>:
void LB_App_Button_Trigger_Received(void)
{
  
  //UPDATE BUTTON CHARACTERISTICS VALUES

  if(LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus==0x01){
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <LB_App_Button_Trigger_Received+0x20>)
 80020be:	788b      	ldrb	r3, [r1, #2]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	bf18      	it	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	708b      	strb	r3, [r1, #2]
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;}
  else {
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x01;  
  }
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Button1 pushed
 80020c8:	2301      	movs	r3, #1
 80020ca:	704b      	strb	r3, [r1, #1]
  APPL_MESG_DBG("\r\n\r ");
  APPL_MESG_DBG("-- APPLICATION : BUTTON PUSHED - CHECK NOTIFICATION \n ");
 
   if(LB_End_Dev_Context.Notification_Button_Status){ 
 80020cc:	780b      	ldrb	r3, [r1, #0]
 80020ce:	b123      	cbz	r3, 80020da <LB_App_Button_Trigger_Received+0x1e>
    APPL_MESG_DBG("-- APPLICATION : INFORM ROUTEUR BUTTON 1 PUSHED \n ");
    BLE_SVC_LedButton_Update_Char(BUTTON_CHAR_UUID, (uint8_t *)&LB_End_Dev_Context.ButtonStatusToClient);
 80020d0:	3101      	adds	r1, #1
 80020d2:	f642 3051 	movw	r0, #11089	; 0x2b51
 80020d6:	f7fe bbcd 	b.w	8000874 <BLE_SVC_LedButton_Update_Char>
   } else {
    APPL_MESG_DBG("-- APPLICATION : CAN'T INFORM ROUTEUR -  NOTIFICATION DISABLED\n "); 
   }

  return;
}
 80020da:	4770      	bx	lr
 80020dc:	20000aa8 	.word	0x20000aa8

080020e0 <whynotwork>:
  * @param  pNotification: LBS notification.
  * @retval None
 */ 

void whynotwork(uint8_t *POTATO, LBS_App_Notification_evt_t *pNotification)
{
 80020e0:	b510      	push	{r4, lr}
	for(uint8_t i = 0; i < pNotification->DataTransfered.Length; i++)
 80020e2:	2200      	movs	r2, #0
 80020e4:	7a0c      	ldrb	r4, [r1, #8]
 80020e6:	b2d3      	uxtb	r3, r2
 80020e8:	429c      	cmp	r4, r3
 80020ea:	d800      	bhi.n	80020ee <whynotwork+0xe>
	{
		POTATO[i] = pNotification->DataTransfered.pPayload[i];
	}
}
 80020ec:	bd10      	pop	{r4, pc}
		POTATO[i] = pNotification->DataTransfered.pPayload[i];
 80020ee:	684c      	ldr	r4, [r1, #4]
 80020f0:	5ce4      	ldrb	r4, [r4, r3]
 80020f2:	54c4      	strb	r4, [r0, r3]
	for(uint8_t i = 0; i < pNotification->DataTransfered.Length; i++)
 80020f4:	3201      	adds	r2, #1
 80020f6:	e7f5      	b.n	80020e4 <whynotwork+0x4>

080020f8 <LBS_App_Notification>:

void LBS_App_Notification(LBS_App_Notification_evt_t *pNotification)
{
	//uint8_t buffer[]
  switch(pNotification->LBS_Evt_Opcode)
 80020f8:	7803      	ldrb	r3, [r0, #0]
 80020fa:	2b04      	cmp	r3, #4
{
 80020fc:	4601      	mov	r1, r0
  switch(pNotification->LBS_Evt_Opcode)
 80020fe:	d102      	bne.n	8002106 <LBS_App_Notification+0xe>
          APPL_MESG_DBG("-- APPLICATION END DEVICE 1 : LED1 OFF\n"); 
        }
        break;
        */
    case POTATO_SSID_EVT:
    	whynotwork(POTATO_Context.POTATO_SSID,pNotification);
 8002100:	4801      	ldr	r0, [pc, #4]	; (8002108 <LBS_App_Notification+0x10>)
 8002102:	f7ff bfed 	b.w	80020e0 <whynotwork>

    default:
      break;
  }
  return;
}
 8002106:	4770      	bx	lr
 8002108:	20000aae 	.word	0x20000aae

0800210c <SystemClock_Config>:
 *
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 800210c:	b510      	push	{r4, lr}
 800210e:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	2100      	movs	r1, #0
 8002114:	a806      	add	r0, sp, #24
 8002116:	f001 f969 	bl	80033ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800211a:	2100      	movs	r1, #0
 800211c:	2214      	movs	r2, #20
 800211e:	4668      	mov	r0, sp
 8002120:	f001 f964 	bl	80033ec <memset>

  /**
   *  Enable MSI oscillator and configure the system at 16MHz
   *  The best power consumption are achieved with 8Mhz on the SPI to access the BlueNRG device
   */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8002124:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 8002126:	2280      	movs	r2, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8002128:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;

  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800212a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800212c:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800212e:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8002130:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 8002132:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;
 8002134:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002136:	f000 fce1 	bl	8002afc <HAL_RCC_OscConfig>

  /**
   *  Configure the HCLK, PCLK1 and PCLK2 clocks dividers  to a maximum of 16Mhz on SPI.
   */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800213a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800213c:	2102      	movs	r1, #2
 800213e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002140:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002144:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002148:	9404      	str	r4, [sp, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800214a:	f000 ff5d 	bl	8003008 <HAL_RCC_ClockConfig>
#else
#error Missing System Clock Configuration
#endif

  return;
}
 800214e:	b016      	add	sp, #88	; 0x58
 8002150:	bd10      	pop	{r4, pc}
	...

08002154 <main>:
{
 8002154:	b500      	push	{lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	4c71      	ldr	r4, [pc, #452]	; (800231c <main+0x1c8>)
{
 8002158:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800215a:	f000 fa01 	bl	8002560 <HAL_Init>
  HAL_DBGMCU_EnableDBGSleepMode();
 800215e:	f000 fa27 	bl	80025b0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002162:	f000 fa2d 	bl	80025c0 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002166:	f000 fa33 	bl	80025d0 <HAL_DBGMCU_EnableDBGStandbyMode>
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	65a3      	str	r3, [r4, #88]	; 0x58
 8002172:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	9b00      	ldr	r3, [sp, #0]
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == RCC_CSR_PINRSTF) ? 1UL : 0UL);
 800217c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002180:	0159      	lsls	r1, r3, #5
 8002182:	d519      	bpl.n	80021b8 <main+0x64>
  * @rmtoll SCR          CSBF          LL_PWR_ClearFlag_SB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_SB(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 8002184:	4b66      	ldr	r3, [pc, #408]	; (8002320 <main+0x1cc>)
 8002186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800218a:	619a      	str	r2, [r3, #24]
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800218c:	f000 fc0e 	bl	80029ac <HAL_PWR_EnableBkUpAccess>
    HAL_PWR_EnableBkUpAccess();
 8002190:	f000 fc0c 	bl	80029ac <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002194:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80021a0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80021a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021a8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80021ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 80021b8:	2600      	movs	r6, #0
  LPM_SetOffMode(CFG_LPM_App, LPM_OffMode_Dis);
 80021ba:	2100      	movs	r1, #0
 80021bc:	2004      	movs	r0, #4
 80021be:	f7ff fd8b 	bl	8001cd8 <LPM_SetOffMode>
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 80021c2:	e9cd 6606 	strd	r6, r6, [sp, #24]
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 80021c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80021c8:	4856      	ldr	r0, [pc, #344]	; (8002324 <main+0x1d0>)
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 80021ca:	f023 0302 	bic.w	r3, r3, #2
 80021ce:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE();
 80021d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80021d2:	f023 0304 	bic.w	r3, r3, #4
 80021d6:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE();
 80021d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80021da:	f023 0308 	bic.w	r3, r3, #8
 80021de:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE();
 80021e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80021e2:	f023 0310 	bic.w	r3, r3, #16
 80021e6:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOF_CLK_SLEEP_DISABLE();
 80021e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80021ea:	f023 0320 	bic.w	r3, r3, #32
 80021ee:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOG_CLK_SLEEP_DISABLE();
 80021f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80021f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021f6:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE();
 80021f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80021fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021fe:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002208:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	64e3      	str	r3, [r4, #76]	; 0x4c
 800221a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8002222:	2503      	movs	r5, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002226:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = GPIO_PIN_All;
 8002228:	f64f 73ff 	movw	r3, #65535	; 0xffff
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800222c:	e9cd 5604 	strd	r5, r6, [sp, #16]
  GPIO_InitStructure.Pin = GPIO_PIN_All;
 8002230:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002232:	f000 fac5 	bl	80027c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002236:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 8002238:	f649 73ff 	movw	r3, #40959	; 0x9fff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800223c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 8002240:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002242:	f000 fabd 	bl	80027c0 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002246:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800224e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002250:	f023 0302 	bic.w	r3, r3, #2
 8002254:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_PWREx_EnableSRAM2ContentRetention();
 8002256:	f000 fbb9 	bl	80029cc <HAL_PWREx_EnableSRAM2ContentRetention>
  LPM_SetConf(&LowPowerModeConfiguration);
 800225a:	a803      	add	r0, sp, #12
  LowPowerModeConfiguration.Stop_Mode_Config = CFG_StopMode2;
 800225c:	2302      	movs	r3, #2
  LowPowerModeConfiguration.OFF_Mode_Config = CFG_Standby;
 800225e:	e9cd 3503 	strd	r3, r5, [sp, #12]
  LPM_SetConf(&LowPowerModeConfiguration);
 8002262:	f7ff fd31 	bl	8001cc8 <LPM_SetConf>
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 8002266:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  hrtc.Instance = RTC;                        /**< Define instance */
 800226a:	4d2f      	ldr	r5, [pc, #188]	; (8002328 <main+0x1d4>)
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002274:	f000 fb9a 	bl	80029ac <HAL_PWR_EnableBkUpAccess>
  HAL_PWR_EnableBkUpAccess();
 8002278:	f000 fb98 	bl	80029ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI); /**< Select LSI as RTC Input */
 800227c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002288:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  __HAL_RCC_RTC_ENABLE();                     /**< Enable RTC */
 800228c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002294:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002298:	4628      	mov	r0, r5
  hrtc.Instance = RTC;                        /**< Define instance */
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <main+0x1d8>)
 800229c:	602b      	str	r3, [r5, #0]
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 800229e:	f000 ffed 	bl	800327c <HAL_RTCEx_EnableBypassShadow>
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80022a2:	2201      	movs	r2, #1
 80022a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  HAL_RTC_Init(&hrtc);
 80022a8:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80022aa:	e9c5 2302 	strd	r2, r3, [r5, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022ae:	612e      	str	r6, [r5, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;             /**< need to be initialized to not corrupt the RTC_CR register */
 80022b0:	606e      	str	r6, [r5, #4]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;  /**< need to be initialized to not corrupt the RTC_CR register */
 80022b2:	61ae      	str	r6, [r5, #24]
  HAL_RTC_Init(&hrtc);
 80022b4:	f000 ff9c 	bl	80031f0 <HAL_RTC_Init>
  __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc) ;  /**< Disable Write Protection */
 80022b8:	682a      	ldr	r2, [r5, #0]
 80022ba:	23ca      	movs	r3, #202	; 0xca
 80022bc:	6253      	str	r3, [r2, #36]	; 0x24
 80022be:	2353      	movs	r3, #83	; 0x53
 80022c0:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80022c2:	6893      	ldr	r3, [r2, #8]
 80022c4:	f023 0307 	bic.w	r3, r3, #7
 80022c8:	f043 0303 	orr.w	r3, r3, #3
 80022cc:	6093      	str	r3, [r2, #8]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0);  /**< Wait for LSI to be stable */
 80022ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80022d2:	079b      	lsls	r3, r3, #30
 80022d4:	d5fb      	bpl.n	80022ce <main+0x17a>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc);  /**< Initialize the TimerServer */
 80022d6:	4914      	ldr	r1, [pc, #80]	; (8002328 <main+0x1d4>)
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff f845 	bl	8001368 <HW_TS_Init>
  SystemClock_Config();         /**< Configure the system clock */
 80022de:	f7ff ff15 	bl	800210c <SystemClock_Config>
  SCH_RegTask( CFG_IdleTask_HciAsynchEvt, TL_BLE_HCI_UserEvtProc );
 80022e2:	4913      	ldr	r1, [pc, #76]	; (8002330 <main+0x1dc>)
 80022e4:	2005      	movs	r0, #5
 80022e6:	f7ff fd93 	bl	8001e10 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_TlEvt, TL_BLE_R_EvtProc );
 80022ea:	4912      	ldr	r1, [pc, #72]	; (8002334 <main+0x1e0>)
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7ff fd8f 	bl	8001e10 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_Button, LB_App_Button_Trigger_Received );
 80022f2:	4911      	ldr	r1, [pc, #68]	; (8002338 <main+0x1e4>)
 80022f4:	2004      	movs	r0, #4
 80022f6:	f7ff fd8b 	bl	8001e10 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_StartAdv, LBR_Adv_Request );
 80022fa:	4910      	ldr	r1, [pc, #64]	; (800233c <main+0x1e8>)
 80022fc:	2001      	movs	r0, #1
 80022fe:	f7ff fd87 	bl	8001e10 <SCH_RegTask>
  LBR_Init(LBR_Full);
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff fe1a 	bl	8001f3c <LBR_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002308:	2000      	movs	r0, #0
 800230a:	2101      	movs	r1, #1
 800230c:	f000 f8c0 	bl	8002490 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8002310:	2000      	movs	r0, #0
 8002312:	f000 f89b 	bl	800244c <BSP_LED_Init>
    SCH_Run();
 8002316:	f7ff fdc9 	bl	8001eac <SCH_Run>
  while(1)
 800231a:	e7fc      	b.n	8002316 <main+0x1c2>
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	48000400 	.word	0x48000400
 8002328:	20000b10 	.word	0x20000b10
 800232c:	40002800 	.word	0x40002800
 8002330:	0800188d 	.word	0x0800188d
 8002334:	08001add 	.word	0x08001add
 8002338:	080020bd 	.word	0x080020bd
 800233c:	08001fe1 	.word	0x08001fe1

08002340 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch(GPIO_Pin)
 8002340:	2840      	cmp	r0, #64	; 0x40
 8002342:	d003      	beq.n	800234c <HAL_GPIO_EXTI_Callback+0xc>
 8002344:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002348:	d002      	beq.n	8002350 <HAL_GPIO_EXTI_Callback+0x10>
 800234a:	4770      	bx	lr
  {
    case BNRG_SPI_EXTI_PIN:
      HW_BNRG_SpiIrqCb();
 800234c:	f7fe be16 	b.w	8000f7c <HW_BNRG_SpiIrqCb>
      break;
    case USER_BUTTON_PIN:
      LBR_App_Key_Button_Action();
 8002350:	f7ff be92 	b.w	8002078 <LBR_App_Key_Button_Action>

08002354 <LPM_ExitStopMode>:
  LL_RCC_SetSysClkSource(RCC_CFGR_SW_PLL);              /**< Select PLL as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL);  /**< Wait till PLL is used as system clock source */
#endif

  return;
}
 8002354:	4770      	bx	lr
	...

08002358 <LPM_EnterOffMode>:
  SET_BIT(PWR->CR3, WakeUpPin);
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <LPM_EnterOffMode+0x14>)
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	f042 0201 	orr.w	r2, r2, #1
 8002360:	609a      	str	r2, [r3, #8]
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002368:	609a      	str	r2, [r3, #8]
  LL_PWR_EnableWakeUpPin(BNRG_SPI_IRQ_WAKEUP_PIN);
  LL_PWR_EnablePUPDCfg();

  return;

}
 800236a:	4770      	bx	lr
 800236c:	40007000 	.word	0x40007000

08002370 <LPM_ExitOffMode>:
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <LPM_ExitOffMode+0x18>)
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002378:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(PWR->CR3, WakeUpPin);
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	609a      	str	r2, [r3, #8]
  * @rmtoll SCR          CWUF1         LL_PWR_ClearFlag_WU1
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU1(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF1);
 8002382:	2201      	movs	r2, #1
 8002384:	619a      	str	r2, [r3, #24]
  LL_PWR_DisablePUPDCfg();
  LL_PWR_DisableWakeUpPin(BNRG_SPI_IRQ_WAKEUP_PIN);
  BNRG_SPI_CLEAR_WAKEUP_FLAG();

  return;
}
 8002386:	4770      	bx	lr
 8002388:	40007000 	.word	0x40007000

0800238c <HAL_InitTick>:
  * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  return (HAL_OK);
}
 800238c:	2000      	movs	r0, #0
 800238e:	4770      	bx	lr

08002390 <SCH_Idle>:
 * @param  None
 * @retval None
 */
void SCH_Idle ( void )
{
  LPM_EnterModeSelected();
 8002390:	f7ff bcce 	b.w	8001d30 <LPM_EnterModeSelected>

08002394 <TL_BLE_HCI_StatusNot>:
 *        At least, TL_BLE_HCI_UserEvtProc shall not be executed while the TL remains busy
 * @param status
 * @retval None
 */
void TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdStatus_t status)
{
 8002394:	b508      	push	{r3, lr}
  switch(status)
 8002396:	b110      	cbz	r0, 800239e <TL_BLE_HCI_StatusNot+0xa>
 8002398:	2801      	cmp	r0, #1
 800239a:	d00b      	beq.n	80023b4 <TL_BLE_HCI_StatusNot+0x20>

    default:
      break;
  }
  return;
}
 800239c:	bd08      	pop	{r3, pc}
      SCH_PauseTask( CFG_IdleTask_StartAdv );
 800239e:	2001      	movs	r0, #1
 80023a0:	f7ff fd52 	bl	8001e48 <SCH_PauseTask>
      SCH_PauseTask( CFG_IdleTask_Button );
 80023a4:	2004      	movs	r0, #4
 80023a6:	f7ff fd4f 	bl	8001e48 <SCH_PauseTask>
}
 80023aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SCH_PauseTask( CFG_IdleTask_HciAsynchEvt );
 80023ae:	2005      	movs	r0, #5
 80023b0:	f7ff bd4a 	b.w	8001e48 <SCH_PauseTask>
      SCH_ResumeTask( CFG_IdleTask_StartAdv );
 80023b4:	f7ff fd5a 	bl	8001e6c <SCH_ResumeTask>
      SCH_ResumeTask( CFG_IdleTask_Button );
 80023b8:	2004      	movs	r0, #4
 80023ba:	f7ff fd57 	bl	8001e6c <SCH_ResumeTask>
}
 80023be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SCH_ResumeTask( CFG_IdleTask_HciAsynchEvt );
 80023c2:	2005      	movs	r0, #5
 80023c4:	f7ff bd52 	b.w	8001e6c <SCH_ResumeTask>

080023c8 <HW_TS_RTC_Int_AppNot>:
  {
    case CFG_TimProcID_isr:
      /**
       * This is expected to be called in the Timer Interrupt Handler to limit latency
       */
      pfTimerCallBack();
 80023c8:	4710      	bx	r2

080023ca <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80023ca:	4770      	bx	lr

080023cc <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <HardFault_Handler>

080023ce <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <MemManage_Handler>

080023d0 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <BusFault_Handler>

080023d2 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <UsageFault_Handler>

080023d4 <SVC_Handler>:
 80023d4:	4770      	bx	lr

080023d6 <DebugMon_Handler>:
 80023d6:	4770      	bx	lr

080023d8 <PendSV_Handler>:
 80023d8:	4770      	bx	lr

080023da <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80023da:	f000 b8d7 	b.w	800258c <HAL_IncTick>

080023de <RTC_WKUP_IRQHandler>:
 * @param  None
 * @retval None
 */
void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 80023de:	f7ff b9b1 	b.w	8001744 <HW_TS_RTC_Wakeup_Handler>

080023e2 <EXTI9_5_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void)           /* BNRG_SPI_EXTI_IRQHandler */
{
  HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
 80023e2:	2040      	movs	r0, #64	; 0x40
 80023e4:	f000 bad6 	b.w	8002994 <HAL_GPIO_EXTI_IRQHandler>

080023e8 <EXTI15_10_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI15_10_IRQHandler(void)  /* PUSH_BUTTON_EXTI_IRQHandler */
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80023e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023ec:	f000 bad2 	b.w	8002994 <HAL_GPIO_EXTI_IRQHandler>

080023f0 <DMA2_Channel1_IRQHandler>:
 * @param  None
 * @retval None
 */
void DMA2_Channel1_IRQHandler(void)     /* BNRG_SPI_RX_DMA_IRQHandler */
  {
    HW_BNRG_DMARxCb();
 80023f0:	f7fe be9e 	b.w	8001130 <HW_BNRG_DMARxCb>

080023f4 <DMA2_Channel2_IRQHandler>:
 * @param  None
 * @retval None
 */
void DMA2_Channel2_IRQHandler(void)    /* BNRG_SPI_TX_DMA_IRQHandler */
  {
    HW_BNRG_DMATxCb();
 80023f4:	f7fe bddc 	b.w	8000fb0 <HW_BNRG_DMATxCb>

080023f8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <SystemInit+0x3c>)
     */

    /**
     * Increase FLASH latency to 3WS
     */
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 80023fa:	490f      	ldr	r1, [pc, #60]	; (8002438 <SystemInit+0x40>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002400:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8002408:	680a      	ldr	r2, [r1, #0]
 800240a:	f042 0203 	orr.w	r2, r2, #3
 800240e:	600a      	str	r2, [r1, #0]

    /**
     * Decrease VCore to Range2.
     * As we are downscaling Vcore, it is not required to wait for the VOSF bit to be ready
     */
    RCC->APB1ENR1 = RCC_APB1ENR1_PWREN;  /**< Switch ON PWR clock */
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <SystemInit+0x44>)
 8002412:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8002416:	6591      	str	r1, [r2, #88]	; 0x58
    PWR->CR1 = PWR_CR1_VOS_1;
 8002418:	4909      	ldr	r1, [pc, #36]	; (8002440 <SystemInit+0x48>)
 800241a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800241e:	6008      	str	r0, [r1, #0]

    /**
     * Increase MSI to 24Mhz
     *
     */
    RCC->CR = (RCC_CR_MSIRANGE_9|RCC_CR_MSIRGSEL|RCC_CR_MSION);   /**< Increase MSI Speed and switch MSI source*/
 8002420:	2199      	movs	r1, #153	; 0x99
 8002422:	6011      	str	r1, [r2, #0]

    SystemCoreClock = 24000000;
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <SystemInit+0x4c>)
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <SystemInit+0x50>)
 8002428:	6011      	str	r1, [r2, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800242a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800242e:	609a      	str	r2, [r3, #8]
#endif

}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00
 8002438:	40022000 	.word	0x40022000
 800243c:	40021000 	.word	0x40021000
 8002440:	40007000 	.word	0x40007000
 8002444:	20000004 	.word	0x20000004
 8002448:	016e3600 	.word	0x016e3600

0800244c <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800244c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800244e:	b948      	cbnz	r0, 8002464 <BSP_LED_Init+0x18>
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <BSP_LED_Init+0x3c>)
 8002452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002454:	f042 0202 	orr.w	r2, r2, #2
 8002458:	64da      	str	r2, [r3, #76]	; 0x4c
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002464:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002468:	2301      	movs	r3, #1
 800246a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800246e:	2100      	movs	r1, #0
 8002470:	2302      	movs	r3, #2
 8002472:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <BSP_LED_Init+0x40>)
 8002478:	a901      	add	r1, sp, #4
 800247a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800247e:	f000 f99f 	bl	80027c0 <HAL_GPIO_Init>
}
 8002482:	b007      	add	sp, #28
 8002484:	f85d fb04 	ldr.w	pc, [sp], #4
 8002488:	40021000 	.word	0x40021000
 800248c:	20000008 	.word	0x20000008

08002490 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002490:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <BSP_PB_Init+0x70>)
 8002494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002496:	f042 0204 	orr.w	r2, r2, #4
 800249a:	64da      	str	r2, [r3, #76]	; 0x4c
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80024a6:	b989      	cbnz	r1, 80024cc <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80024a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80024ac:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b0:	2101      	movs	r1, #1
 80024b2:	2302      	movs	r3, #2
 80024b4:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <BSP_PB_Init+0x74>)
 80024ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024be:	a901      	add	r1, sp, #4
 80024c0:	6840      	ldr	r0, [r0, #4]
 80024c2:	f000 f97d 	bl	80027c0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80024c6:	b007      	add	sp, #28
 80024c8:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 80024cc:	2901      	cmp	r1, #1
 80024ce:	d1fa      	bne.n	80024c6 <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80024d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d4:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d6:	2303      	movs	r3, #3
 80024d8:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <BSP_PB_Init+0x78>)
 80024dc:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 80024e0:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80024e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024e6:	a901      	add	r1, sp, #4
 80024e8:	6840      	ldr	r0, [r0, #4]
 80024ea:	f000 f969 	bl	80027c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80024ee:	2200      	movs	r2, #0
 80024f0:	210f      	movs	r1, #15
 80024f2:	2028      	movs	r0, #40	; 0x28
 80024f4:	f000 f886 	bl	8002604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80024f8:	2028      	movs	r0, #40	; 0x28
 80024fa:	f000 f8b5 	bl	8002668 <HAL_NVIC_EnableIRQ>
}
 80024fe:	e7e2      	b.n	80024c6 <BSP_PB_Init+0x36>
 8002500:	40021000 	.word	0x40021000
 8002504:	20000008 	.word	0x20000008
 8002508:	10110000 	.word	0x10110000

0800250c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800250c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002544 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002510:	f7ff ff72 	bl	80023f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002514:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002516:	e003      	b.n	8002520 <LoopCopyDataInit>

08002518 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800251a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800251c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800251e:	3104      	adds	r1, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002520:	480a      	ldr	r0, [pc, #40]	; (800254c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002524:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002526:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002528:	d3f6      	bcc.n	8002518 <CopyDataInit>
	ldr	r2, =_sbss
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <LoopForever+0x12>)
	b	LoopFillZerobss
 800252c:	e002      	b.n	8002534 <LoopFillZerobss>

0800252e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800252e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002530:	f842 3b04 	str.w	r3, [r2], #4

08002534 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <LoopForever+0x16>)
	cmp	r2, r3
 8002536:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002538:	d3f9      	bcc.n	800252e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800253a:	f000 ff25 	bl	8003388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800253e:	f7ff fe09 	bl	8002154 <main>

08002542 <LoopForever>:

LoopForever:
    b LoopForever
 8002542:	e7fe      	b.n	8002542 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002544:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002548:	080034a0 	.word	0x080034a0
	ldr	r0, =_sdata
 800254c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002550:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 8002554:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 8002558:	20000b58 	.word	0x20000b58

0800255c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800255c:	e7fe      	b.n	800255c <ADC1_2_IRQHandler>

0800255e <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800255e:	4770      	bx	lr

08002560 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002560:	4a09      	ldr	r2, [pc, #36]	; (8002588 <HAL_Init+0x28>)
 8002562:	6813      	ldr	r3, [r2, #0]
 8002564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002568:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256e:	f000 f837 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002572:	200f      	movs	r0, #15
 8002574:	f7ff ff0a 	bl	800238c <HAL_InitTick>
 8002578:	4604      	mov	r4, r0
 800257a:	b918      	cbnz	r0, 8002584 <HAL_Init+0x24>
    HAL_MspInit();
 800257c:	f7ff ffef 	bl	800255e <HAL_MspInit>
}
 8002580:	4620      	mov	r0, r4
 8002582:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002584:	2401      	movs	r4, #1
 8002586:	e7fb      	b.n	8002580 <HAL_Init+0x20>
 8002588:	40022000 	.word	0x40022000

0800258c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800258c:	4a03      	ldr	r2, [pc, #12]	; (800259c <HAL_IncTick+0x10>)
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_IncTick+0x14>)
 8002590:	6811      	ldr	r1, [r2, #0]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	440b      	add	r3, r1
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000b54 	.word	0x20000b54
 80025a0:	2000001c 	.word	0x2000001c

080025a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025a4:	4b01      	ldr	r3, [pc, #4]	; (80025ac <HAL_GetTick+0x8>)
 80025a6:	6818      	ldr	r0, [r3, #0]
}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000b54 	.word	0x20000b54

080025b0 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80025b0:	4a02      	ldr	r2, [pc, #8]	; (80025bc <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80025b2:	6853      	ldr	r3, [r2, #4]
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
}
 80025ba:	4770      	bx	lr
 80025bc:	e0042000 	.word	0xe0042000

080025c0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80025c0:	4a02      	ldr	r2, [pc, #8]	; (80025cc <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80025c2:	6853      	ldr	r3, [r2, #4]
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	6053      	str	r3, [r2, #4]
}
 80025ca:	4770      	bx	lr
 80025cc:	e0042000 	.word	0xe0042000

080025d0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80025d0:	4a02      	ldr	r2, [pc, #8]	; (80025dc <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80025d2:	6853      	ldr	r3, [r2, #4]
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6053      	str	r3, [r2, #4]
}
 80025da:	4770      	bx	lr
 80025dc:	e0042000 	.word	0xe0042000

080025e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4907      	ldr	r1, [pc, #28]	; (8002600 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80025e2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80025fc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002606:	b530      	push	{r4, r5, lr}
 8002608:	68dc      	ldr	r4, [r3, #12]
 800260a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002614:	2d04      	cmp	r5, #4
 8002616:	bf28      	it	cs
 8002618:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002620:	bf8c      	ite	hi
 8002622:	3c03      	subhi	r4, #3
 8002624:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002626:	fa03 f505 	lsl.w	r5, r3, r5
 800262a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262e:	40a3      	lsls	r3, r4
 8002630:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002636:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	bfac      	ite	ge
 800263e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	4a08      	ldrlt	r2, [pc, #32]	; (8002664 <HAL_NVIC_SetPriority+0x60>)
 8002644:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002648:	bfb8      	it	lt
 800264a:	f000 000f 	andlt.w	r0, r0, #15
 800264e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	bfaa      	itet	ge
 8002652:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800265c:	bd30      	pop	{r4, r5, pc}
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	e000ed14 	.word	0xe000ed14

08002668 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002668:	2800      	cmp	r0, #0
 800266a:	db08      	blt.n	800267e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266c:	2301      	movs	r3, #1
 800266e:	0942      	lsrs	r2, r0, #5
 8002670:	f000 001f 	and.w	r0, r0, #31
 8002674:	fa03 f000 	lsl.w	r0, r3, r0
 8002678:	4b01      	ldr	r3, [pc, #4]	; (8002680 <HAL_NVIC_EnableIRQ+0x18>)
 800267a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100

08002684 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002684:	2800      	cmp	r0, #0
 8002686:	db0d      	blt.n	80026a4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002688:	0943      	lsrs	r3, r0, #5
 800268a:	2201      	movs	r2, #1
 800268c:	f000 001f 	and.w	r0, r0, #31
 8002690:	fa02 f000 	lsl.w	r0, r2, r0
 8002694:	3320      	adds	r3, #32
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_NVIC_DisableIRQ+0x24>)
 8002698:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800269c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026a0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000e100 	.word	0xe000e100

080026ac <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026ac:	2800      	cmp	r0, #0
 80026ae:	db09      	blt.n	80026c4 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b0:	0943      	lsrs	r3, r0, #5
 80026b2:	2201      	movs	r2, #1
 80026b4:	f000 001f 	and.w	r0, r0, #31
 80026b8:	fa02 f000 	lsl.w	r0, r2, r0
 80026bc:	3340      	adds	r3, #64	; 0x40
 80026be:	4a02      	ldr	r2, [pc, #8]	; (80026c8 <HAL_NVIC_SetPendingIRQ+0x1c>)
 80026c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000e100 	.word	0xe000e100

080026cc <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026cc:	2800      	cmp	r0, #0
 80026ce:	db09      	blt.n	80026e4 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d0:	0943      	lsrs	r3, r0, #5
 80026d2:	2201      	movs	r2, #1
 80026d4:	f000 001f 	and.w	r0, r0, #31
 80026d8:	fa02 f000 	lsl.w	r0, r2, r0
 80026dc:	3360      	adds	r3, #96	; 0x60
 80026de:	4a02      	ldr	r2, [pc, #8]	; (80026e8 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 80026e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d058      	beq.n	80027a4 <HAL_DMA_Init+0xb8>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026f2:	6801      	ldr	r1, [r0, #0]
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_DMA_Init+0xbc>)
 80026f6:	4299      	cmp	r1, r3
 80026f8:	f04f 0414 	mov.w	r4, #20
 80026fc:	d842      	bhi.n	8002784 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026fe:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <HAL_DMA_Init+0xc0>)
 8002700:	440a      	add	r2, r1
 8002702:	fbb2 f2f4 	udiv	r2, r2, r4
 8002706:	0092      	lsls	r2, r2, #2
 8002708:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800270a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 800270e:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002710:	2302      	movs	r3, #2
 8002712:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002716:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800271c:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 800271e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002720:	432b      	orrs	r3, r5
 8002722:	6945      	ldr	r5, [r0, #20]
 8002724:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002726:	6985      	ldr	r5, [r0, #24]
 8002728:	432b      	orrs	r3, r5
 800272a:	69c5      	ldr	r5, [r0, #28]
 800272c:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800272e:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002730:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002734:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8002738:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800273a:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800273c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8002740:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002742:	d016      	beq.n	8002772 <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002744:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002746:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002748:	f001 021c 	and.w	r2, r1, #28
 800274c:	6841      	ldr	r1, [r0, #4]
 800274e:	230f      	movs	r3, #15
 8002750:	4093      	lsls	r3, r2
 8002752:	4091      	lsls	r1, r2
 8002754:	4a16      	ldr	r2, [pc, #88]	; (80027b0 <HAL_DMA_Init+0xc4>)
 8002756:	4294      	cmp	r4, r2
 8002758:	ea6f 0303 	mvn.w	r3, r3
 800275c:	d11a      	bne.n	8002794 <HAL_DMA_Init+0xa8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800275e:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8002762:	4023      	ands	r3, r4
 8002764:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002768:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 800276c:	4319      	orrs	r1, r3
 800276e:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002772:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002774:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002776:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002778:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 800277c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8002780:	4618      	mov	r0, r3
}
 8002782:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_DMA_Init+0xc8>)
 8002786:	440b      	add	r3, r1
 8002788:	fbb3 f3f4 	udiv	r3, r3, r4
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_DMA_Init+0xcc>)
 8002792:	e7bc      	b.n	800270e <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002794:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_DMA_Init+0xd0>)
 8002796:	6814      	ldr	r4, [r2, #0]
 8002798:	4023      	ands	r3, r4
 800279a:	6013      	str	r3, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800279c:	6813      	ldr	r3, [r2, #0]
 800279e:	4319      	orrs	r1, r3
 80027a0:	6011      	str	r1, [r2, #0]
 80027a2:	e7e6      	b.n	8002772 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80027a4:	2001      	movs	r0, #1
 80027a6:	e7ec      	b.n	8002782 <HAL_DMA_Init+0x96>
 80027a8:	40020407 	.word	0x40020407
 80027ac:	bffdfff8 	.word	0xbffdfff8
 80027b0:	40020000 	.word	0x40020000
 80027b4:	bffdfbf8 	.word	0xbffdfbf8
 80027b8:	40020400 	.word	0x40020400
 80027bc:	400204a8 	.word	0x400204a8

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8002978 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027c8:	4d69      	ldr	r5, [pc, #420]	; (8002970 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80027ca:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027cc:	680a      	ldr	r2, [r1, #0]
 80027ce:	fa32 f403 	lsrs.w	r4, r2, r3
 80027d2:	d102      	bne.n	80027da <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80027d4:	b003      	add	sp, #12
 80027d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027da:	f04f 0a01 	mov.w	sl, #1
 80027de:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 80027e2:	ea1a 0202 	ands.w	r2, sl, r2
 80027e6:	f000 80b4 	beq.w	8002952 <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ea:	684c      	ldr	r4, [r1, #4]
 80027ec:	f024 0e10 	bic.w	lr, r4, #16
 80027f0:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80027f4:	2603      	movs	r6, #3
 80027f6:	f10e 37ff 	add.w	r7, lr, #4294967295
 80027fa:	fa06 f608 	lsl.w	r6, r6, r8
 80027fe:	2f01      	cmp	r7, #1
 8002800:	ea6f 0606 	mvn.w	r6, r6
 8002804:	d811      	bhi.n	800282a <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8002806:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002808:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800280c:	68cf      	ldr	r7, [r1, #12]
 800280e:	fa07 f708 	lsl.w	r7, r7, r8
 8002812:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8002816:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002818:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800281a:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800281e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002822:	409f      	lsls	r7, r3
 8002824:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8002828:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800282a:	f004 0c03 	and.w	ip, r4, #3
 800282e:	f1bc 0f03 	cmp.w	ip, #3
 8002832:	d108      	bne.n	8002846 <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 8002834:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002836:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800283a:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 800283e:	409f      	lsls	r7, r3
 8002840:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8002844:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002846:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002848:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800284c:	688f      	ldr	r7, [r1, #8]
 800284e:	fa07 f708 	lsl.w	r7, r7, r8
 8002852:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002856:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 800285a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800285c:	d116      	bne.n	800288c <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 800285e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002862:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002866:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800286a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800286e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002872:	f04f 0e0f 	mov.w	lr, #15
 8002876:	fa0e fe0b 	lsl.w	lr, lr, fp
 800287a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800287e:	690f      	ldr	r7, [r1, #16]
 8002880:	fa07 f70b 	lsl.w	r7, r7, fp
 8002884:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002888:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800288c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800288e:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002892:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002894:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 8002898:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289a:	00e6      	lsls	r6, r4, #3
 800289c:	d559      	bpl.n	8002952 <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80028a2:	f046 0601 	orr.w	r6, r6, #1
 80028a6:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80028aa:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80028ae:	f023 0703 	bic.w	r7, r3, #3
 80028b2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80028b6:	f006 0601 	and.w	r6, r6, #1
 80028ba:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80028be:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028c0:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80028c6:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028c8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80028cc:	f04f 0c0f 	mov.w	ip, #15
 80028d0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028d4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028d8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028dc:	d03b      	beq.n	8002956 <HAL_GPIO_Init+0x196>
 80028de:	4e25      	ldr	r6, [pc, #148]	; (8002974 <HAL_GPIO_Init+0x1b4>)
 80028e0:	42b0      	cmp	r0, r6
 80028e2:	d03a      	beq.n	800295a <HAL_GPIO_Init+0x19a>
 80028e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028e8:	42b0      	cmp	r0, r6
 80028ea:	d038      	beq.n	800295e <HAL_GPIO_Init+0x19e>
 80028ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028f0:	42b0      	cmp	r0, r6
 80028f2:	d036      	beq.n	8002962 <HAL_GPIO_Init+0x1a2>
 80028f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028f8:	42b0      	cmp	r0, r6
 80028fa:	d034      	beq.n	8002966 <HAL_GPIO_Init+0x1a6>
 80028fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002900:	42b0      	cmp	r0, r6
 8002902:	d032      	beq.n	800296a <HAL_GPIO_Init+0x1aa>
 8002904:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002908:	42b0      	cmp	r0, r6
 800290a:	bf0c      	ite	eq
 800290c:	2606      	moveq	r6, #6
 800290e:	2607      	movne	r6, #7
 8002910:	fa06 f60e 	lsl.w	r6, r6, lr
 8002914:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002918:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800291a:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 800291c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800291e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002922:	bf0c      	ite	eq
 8002924:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002926:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8002928:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 800292a:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800292c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002930:	bf0c      	ite	eq
 8002932:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002934:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8002936:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8002938:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800293e:	bf0c      	ite	eq
 8002940:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002942:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8002944:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8002946:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002948:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800294a:	bf54      	ite	pl
 800294c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800294e:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8002950:	60ee      	str	r6, [r5, #12]
    position++;
 8002952:	3301      	adds	r3, #1
 8002954:	e73a      	b.n	80027cc <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002956:	2600      	movs	r6, #0
 8002958:	e7da      	b.n	8002910 <HAL_GPIO_Init+0x150>
 800295a:	2601      	movs	r6, #1
 800295c:	e7d8      	b.n	8002910 <HAL_GPIO_Init+0x150>
 800295e:	2602      	movs	r6, #2
 8002960:	e7d6      	b.n	8002910 <HAL_GPIO_Init+0x150>
 8002962:	2603      	movs	r6, #3
 8002964:	e7d4      	b.n	8002910 <HAL_GPIO_Init+0x150>
 8002966:	2604      	movs	r6, #4
 8002968:	e7d2      	b.n	8002910 <HAL_GPIO_Init+0x150>
 800296a:	2605      	movs	r6, #5
 800296c:	e7d0      	b.n	8002910 <HAL_GPIO_Init+0x150>
 800296e:	bf00      	nop
 8002970:	40010400 	.word	0x40010400
 8002974:	48000400 	.word	0x48000400
 8002978:	40021000 	.word	0x40021000

0800297c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800297c:	6903      	ldr	r3, [r0, #16]
 800297e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002980:	bf14      	ite	ne
 8002982:	2001      	movne	r0, #1
 8002984:	2000      	moveq	r0, #0
 8002986:	4770      	bx	lr

08002988 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002988:	b10a      	cbz	r2, 800298e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800298a:	6181      	str	r1, [r0, #24]
 800298c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800298e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002990:	4770      	bx	lr
	...

08002994 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002996:	6951      	ldr	r1, [r2, #20]
 8002998:	4201      	tst	r1, r0
{
 800299a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800299c:	d002      	beq.n	80029a4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800299e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029a0:	f7ff fcce 	bl	8002340 <HAL_GPIO_EXTI_Callback>
  }
}
 80029a4:	bd08      	pop	{r3, pc}
 80029a6:	bf00      	nop
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ac:	4a02      	ldr	r2, [pc, #8]	; (80029b8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]
}
 80029b6:	4770      	bx	lr
 80029b8:	40007000 	.word	0x40007000

080029bc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029bc:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <HAL_PWREx_GetVoltageRange+0xc>)
 80029be:	6818      	ldr	r0, [r3, #0]
#endif
}
 80029c0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40007000 	.word	0x40007000

080029cc <HAL_PWREx_EnableSRAM2ContentRetention>:
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 80029cc:	4a02      	ldr	r2, [pc, #8]	; (80029d8 <HAL_PWREx_EnableSRAM2ContentRetention+0xc>)
 80029ce:	6893      	ldr	r3, [r2, #8]
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	6093      	str	r3, [r2, #8]
}
 80029d6:	4770      	bx	lr
 80029d8:	40007000 	.word	0x40007000

080029dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029de:	4d1e      	ldr	r5, [pc, #120]	; (8002a58 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80029e0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029e2:	00da      	lsls	r2, r3, #3
{
 80029e4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029e6:	d518      	bpl.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029e8:	f7ff ffe8 	bl	80029bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80029f0:	d123      	bne.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029f2:	2c80      	cmp	r4, #128	; 0x80
 80029f4:	d929      	bls.n	8002a4a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029f6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029f8:	bf8c      	ite	hi
 80029fa:	2402      	movhi	r4, #2
 80029fc:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029fe:	4917      	ldr	r1, [pc, #92]	; (8002a5c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002a00:	680a      	ldr	r2, [r1, #0]
 8002a02:	f022 0207 	bic.w	r2, r2, #7
 8002a06:	4322      	orrs	r2, r4
 8002a08:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a0a:	6808      	ldr	r0, [r1, #0]
 8002a0c:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002a10:	1b00      	subs	r0, r0, r4
 8002a12:	bf18      	it	ne
 8002a14:	2001      	movne	r0, #1
 8002a16:	b003      	add	sp, #12
 8002a18:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	65ab      	str	r3, [r5, #88]	; 0x58
 8002a22:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002a2c:	f7ff ffc6 	bl	80029bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a30:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a36:	65ab      	str	r3, [r5, #88]	; 0x58
 8002a38:	e7d8      	b.n	80029ec <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002a3a:	2c80      	cmp	r4, #128	; 0x80
 8002a3c:	d807      	bhi.n	8002a4e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002a3e:	d008      	beq.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002a40:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002a44:	425c      	negs	r4, r3
 8002a46:	415c      	adcs	r4, r3
 8002a48:	e7d9      	b.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a4a:	2400      	movs	r4, #0
 8002a4c:	e7d7      	b.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a4e:	2403      	movs	r4, #3
 8002a50:	e7d5      	b.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a52:	2402      	movs	r4, #2
 8002a54:	e7d3      	b.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40022000 	.word	0x40022000

08002a60 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a60:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_RCC_GetSysClockFreq+0x8c>)
 8002a62:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a64:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a66:	f012 020c 	ands.w	r2, r2, #12
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x18>
 8002a6c:	2a0c      	cmp	r2, #12
 8002a6e:	d115      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a70:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a74:	2901      	cmp	r1, #1
 8002a76:	d118      	bne.n	8002aaa <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a78:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002a7a:	481d      	ldr	r0, [pc, #116]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a7c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a7e:	bf55      	itete	pl
 8002a80:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a84:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a86:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a8a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002a8e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a92:	b34a      	cbz	r2, 8002ae8 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a94:	2a0c      	cmp	r2, #12
 8002a96:	d009      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x4c>
 8002a98:	2000      	movs	r0, #0
  return sysclockfreq;
 8002a9a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d022      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002aa0:	2a08      	cmp	r2, #8
 8002aa2:	4814      	ldr	r0, [pc, #80]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aa4:	bf18      	it	ne
 8002aa6:	2000      	movne	r0, #0
 8002aa8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aaa:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002ab2:	2a02      	cmp	r2, #2
 8002ab4:	d015      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x82>
 8002ab6:	490f      	ldr	r1, [pc, #60]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab8:	2a03      	cmp	r2, #3
 8002aba:	bf08      	it	eq
 8002abc:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002abe:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ac0:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ac8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002acc:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ad0:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ad2:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ad4:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ad6:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ad8:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8002adc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ae0:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae4:	e7eb      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002ae6:	4804      	ldr	r0, [pc, #16]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08003440 	.word	0x08003440
 8002af4:	007a1200 	.word	0x007a1200
 8002af8:	00f42400 	.word	0x00f42400

08002afc <HAL_RCC_OscConfig>:
{
 8002afc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002b00:	4605      	mov	r5, r0
 8002b02:	b918      	cbnz	r0, 8002b0c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002b04:	2001      	movs	r0, #1
}
 8002b06:	b003      	add	sp, #12
 8002b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0c:	4ca7      	ldr	r4, [pc, #668]	; (8002dac <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b0e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b10:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b12:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b14:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b16:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b1a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b1e:	d53d      	bpl.n	8002b9c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b20:	b11e      	cbz	r6, 8002b2a <HAL_RCC_OscConfig+0x2e>
 8002b22:	2e0c      	cmp	r6, #12
 8002b24:	d166      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b26:	2f01      	cmp	r7, #1
 8002b28:	d164      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	0799      	lsls	r1, r3, #30
 8002b2e:	d502      	bpl.n	8002b36 <HAL_RCC_OscConfig+0x3a>
 8002b30:	69ab      	ldr	r3, [r5, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0e6      	beq.n	8002b04 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	6a28      	ldr	r0, [r5, #32]
 8002b3a:	071a      	lsls	r2, r3, #28
 8002b3c:	bf56      	itet	pl
 8002b3e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002b42:	6823      	ldrmi	r3, [r4, #0]
 8002b44:	091b      	lsrpl	r3, r3, #4
 8002b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4a:	4298      	cmp	r0, r3
 8002b4c:	d93b      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b4e:	f7ff ff45 	bl	80029dc <RCC_SetFlashLatencyFromMSIRange>
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d1d6      	bne.n	8002b04 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	6023      	str	r3, [r4, #0]
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	6a2a      	ldr	r2, [r5, #32]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b66:	4313      	orrs	r3, r2
 8002b68:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b6a:	6863      	ldr	r3, [r4, #4]
 8002b6c:	69ea      	ldr	r2, [r5, #28]
 8002b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b76:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b78:	f7ff ff72 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002b7c:	68a3      	ldr	r3, [r4, #8]
 8002b7e:	4a8c      	ldr	r2, [pc, #560]	; (8002db0 <HAL_RCC_OscConfig+0x2b4>)
 8002b80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b84:	5cd3      	ldrb	r3, [r2, r3]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	40d8      	lsrs	r0, r3
 8002b8c:	4b89      	ldr	r3, [pc, #548]	; (8002db4 <HAL_RCC_OscConfig+0x2b8>)
 8002b8e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002b90:	4b89      	ldr	r3, [pc, #548]	; (8002db8 <HAL_RCC_OscConfig+0x2bc>)
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	f7ff fbfa 	bl	800238c <HAL_InitTick>
        if(status != HAL_OK)
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d1b4      	bne.n	8002b06 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	07d9      	lsls	r1, r3, #31
 8002ba0:	d45f      	bmi.n	8002c62 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba2:	682b      	ldr	r3, [r5, #0]
 8002ba4:	079a      	lsls	r2, r3, #30
 8002ba6:	f100 809e 	bmi.w	8002ce6 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	682b      	ldr	r3, [r5, #0]
 8002bac:	0719      	lsls	r1, r3, #28
 8002bae:	f100 80d2 	bmi.w	8002d56 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	682b      	ldr	r3, [r5, #0]
 8002bb4:	075a      	lsls	r2, r3, #29
 8002bb6:	f100 8101 	bmi.w	8002dbc <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 816a 	bne.w	8002e96 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	e79f      	b.n	8002b06 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	f043 0308 	orr.w	r3, r3, #8
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd4:	4303      	orrs	r3, r0
 8002bd6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd8:	6863      	ldr	r3, [r4, #4]
 8002bda:	69ea      	ldr	r2, [r5, #28]
 8002bdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002be4:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002be6:	2e00      	cmp	r6, #0
 8002be8:	d1c6      	bne.n	8002b78 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bea:	f7ff fef7 	bl	80029dc <RCC_SetFlashLatencyFromMSIRange>
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d0c2      	beq.n	8002b78 <HAL_RCC_OscConfig+0x7c>
 8002bf2:	e787      	b.n	8002b04 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bf4:	69ab      	ldr	r3, [r5, #24]
 8002bf6:	b31b      	cbz	r3, 8002c40 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c00:	f7ff fcd0 	bl	80025a4 <HAL_GetTick>
 8002c04:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	079b      	lsls	r3, r3, #30
 8002c0a:	d511      	bpl.n	8002c30 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	f043 0308 	orr.w	r3, r3, #8
 8002c12:	6023      	str	r3, [r4, #0]
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	6a2a      	ldr	r2, [r5, #32]
 8002c18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c20:	6863      	ldr	r3, [r4, #4]
 8002c22:	69ea      	ldr	r2, [r5, #28]
 8002c24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c2c:	6063      	str	r3, [r4, #4]
 8002c2e:	e7b5      	b.n	8002b9c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c30:	f7ff fcb8 	bl	80025a4 <HAL_GetTick>
 8002c34:	eba0 0008 	sub.w	r0, r0, r8
 8002c38:	2802      	cmp	r0, #2
 8002c3a:	d9e4      	bls.n	8002c06 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	e762      	b.n	8002b06 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c48:	f7ff fcac 	bl	80025a4 <HAL_GetTick>
 8002c4c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	0798      	lsls	r0, r3, #30
 8002c52:	d5a3      	bpl.n	8002b9c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c54:	f7ff fca6 	bl	80025a4 <HAL_GetTick>
 8002c58:	eba0 0008 	sub.w	r0, r0, r8
 8002c5c:	2802      	cmp	r0, #2
 8002c5e:	d9f6      	bls.n	8002c4e <HAL_RCC_OscConfig+0x152>
 8002c60:	e7ec      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c62:	2e08      	cmp	r6, #8
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_OscConfig+0x172>
 8002c66:	2e0c      	cmp	r6, #12
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c6a:	2f03      	cmp	r7, #3
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	039b      	lsls	r3, r3, #14
 8002c72:	d596      	bpl.n	8002ba2 <HAL_RCC_OscConfig+0xa6>
 8002c74:	686b      	ldr	r3, [r5, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d193      	bne.n	8002ba2 <HAL_RCC_OscConfig+0xa6>
 8002c7a:	e743      	b.n	8002b04 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7c:	686b      	ldr	r3, [r5, #4]
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c82:	d110      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x1aa>
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c8c:	f7ff fc8a 	bl	80025a4 <HAL_GetTick>
 8002c90:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	0398      	lsls	r0, r3, #14
 8002c96:	d484      	bmi.n	8002ba2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff fc84 	bl	80025a4 <HAL_GetTick>
 8002c9c:	eba0 0008 	sub.w	r0, r0, r8
 8002ca0:	2864      	cmp	r0, #100	; 0x64
 8002ca2:	d9f6      	bls.n	8002c92 <HAL_RCC_OscConfig+0x196>
 8002ca4:	e7ca      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002caa:	d104      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x1ba>
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb2:	6023      	str	r3, [r4, #0]
 8002cb4:	e7e6      	b.n	8002c84 <HAL_RCC_OscConfig+0x188>
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cbc:	6022      	str	r2, [r4, #0]
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cc4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002cca:	f7ff fc6b 	bl	80025a4 <HAL_GetTick>
 8002cce:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	0399      	lsls	r1, r3, #14
 8002cd4:	f57f af65 	bpl.w	8002ba2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7ff fc64 	bl	80025a4 <HAL_GetTick>
 8002cdc:	eba0 0008 	sub.w	r0, r0, r8
 8002ce0:	2864      	cmp	r0, #100	; 0x64
 8002ce2:	d9f5      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x1d4>
 8002ce4:	e7aa      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ce6:	2e04      	cmp	r6, #4
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1f6>
 8002cea:	2e0c      	cmp	r6, #12
 8002cec:	d110      	bne.n	8002d10 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cee:	2f02      	cmp	r7, #2
 8002cf0:	d10e      	bne.n	8002d10 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	055a      	lsls	r2, r3, #21
 8002cf6:	d503      	bpl.n	8002d00 <HAL_RCC_OscConfig+0x204>
 8002cf8:	68eb      	ldr	r3, [r5, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f43f af02 	beq.w	8002b04 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	6863      	ldr	r3, [r4, #4]
 8002d02:	692a      	ldr	r2, [r5, #16]
 8002d04:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002d08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d0c:	6063      	str	r3, [r4, #4]
 8002d0e:	e74c      	b.n	8002baa <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d10:	68eb      	ldr	r3, [r5, #12]
 8002d12:	b17b      	cbz	r3, 8002d34 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d1c:	f7ff fc42 	bl	80025a4 <HAL_GetTick>
 8002d20:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	055b      	lsls	r3, r3, #21
 8002d26:	d4eb      	bmi.n	8002d00 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d28:	f7ff fc3c 	bl	80025a4 <HAL_GetTick>
 8002d2c:	1bc0      	subs	r0, r0, r7
 8002d2e:	2802      	cmp	r0, #2
 8002d30:	d9f7      	bls.n	8002d22 <HAL_RCC_OscConfig+0x226>
 8002d32:	e783      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d3c:	f7ff fc32 	bl	80025a4 <HAL_GetTick>
 8002d40:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	0558      	lsls	r0, r3, #21
 8002d46:	f57f af30 	bpl.w	8002baa <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7ff fc2b 	bl	80025a4 <HAL_GetTick>
 8002d4e:	1bc0      	subs	r0, r0, r7
 8002d50:	2802      	cmp	r0, #2
 8002d52:	d9f6      	bls.n	8002d42 <HAL_RCC_OscConfig+0x246>
 8002d54:	e772      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d56:	696b      	ldr	r3, [r5, #20]
 8002d58:	b19b      	cbz	r3, 8002d82 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8002d5a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d66:	f7ff fc1d 	bl	80025a4 <HAL_GetTick>
 8002d6a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d6c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d70:	079b      	lsls	r3, r3, #30
 8002d72:	f53f af1e 	bmi.w	8002bb2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d76:	f7ff fc15 	bl	80025a4 <HAL_GetTick>
 8002d7a:	1bc0      	subs	r0, r0, r7
 8002d7c:	2802      	cmp	r0, #2
 8002d7e:	d9f5      	bls.n	8002d6c <HAL_RCC_OscConfig+0x270>
 8002d80:	e75c      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002d82:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d8e:	f7ff fc09 	bl	80025a4 <HAL_GetTick>
 8002d92:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d94:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d98:	0798      	lsls	r0, r3, #30
 8002d9a:	f57f af0a 	bpl.w	8002bb2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9e:	f7ff fc01 	bl	80025a4 <HAL_GetTick>
 8002da2:	1bc0      	subs	r0, r0, r7
 8002da4:	2802      	cmp	r0, #2
 8002da6:	d9f5      	bls.n	8002d94 <HAL_RCC_OscConfig+0x298>
 8002da8:	e748      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08003470 	.word	0x08003470
 8002db4:	20000004 	.word	0x20000004
 8002db8:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dbe:	00d9      	lsls	r1, r3, #3
 8002dc0:	d429      	bmi.n	8002e16 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	65a3      	str	r3, [r4, #88]	; 0x58
 8002dca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002dd4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd8:	4f89      	ldr	r7, [pc, #548]	; (8003000 <HAL_RCC_OscConfig+0x504>)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	05da      	lsls	r2, r3, #23
 8002dde:	d51d      	bpl.n	8002e1c <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de0:	68ab      	ldr	r3, [r5, #8]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d12b      	bne.n	8002e3e <HAL_RCC_OscConfig+0x342>
 8002de6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002df2:	f7ff fbd7 	bl	80025a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002dfa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e00:	0798      	lsls	r0, r3, #30
 8002e02:	d542      	bpl.n	8002e8a <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002e04:	f1b8 0f00 	cmp.w	r8, #0
 8002e08:	f43f aed7 	beq.w	8002bba <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e12:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e14:	e6d1      	b.n	8002bba <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	f04f 0800 	mov.w	r8, #0
 8002e1a:	e7dd      	b.n	8002dd8 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002e24:	f7ff fbbe 	bl	80025a4 <HAL_GetTick>
 8002e28:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	05db      	lsls	r3, r3, #23
 8002e2e:	d4d7      	bmi.n	8002de0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e30:	f7ff fbb8 	bl	80025a4 <HAL_GetTick>
 8002e34:	eba0 0009 	sub.w	r0, r0, r9
 8002e38:	2802      	cmp	r0, #2
 8002e3a:	d9f6      	bls.n	8002e2a <HAL_RCC_OscConfig+0x32e>
 8002e3c:	e6fe      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x354>
 8002e42:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002e4e:	e7ca      	b.n	8002de6 <HAL_RCC_OscConfig+0x2ea>
 8002e50:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002e5c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002e60:	f022 0204 	bic.w	r2, r2, #4
 8002e64:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1c2      	bne.n	8002df2 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002e6c:	f7ff fb9a 	bl	80025a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e74:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e76:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e7a:	0799      	lsls	r1, r3, #30
 8002e7c:	d5c2      	bpl.n	8002e04 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7ff fb91 	bl	80025a4 <HAL_GetTick>
 8002e82:	1bc0      	subs	r0, r0, r7
 8002e84:	4548      	cmp	r0, r9
 8002e86:	d9f6      	bls.n	8002e76 <HAL_RCC_OscConfig+0x37a>
 8002e88:	e6d8      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7ff fb8b 	bl	80025a4 <HAL_GetTick>
 8002e8e:	1bc0      	subs	r0, r0, r7
 8002e90:	4548      	cmp	r0, r9
 8002e92:	d9b3      	bls.n	8002dfc <HAL_RCC_OscConfig+0x300>
 8002e94:	e6d2      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	f040 808f 	bne.w	8002fba <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002e9c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002ea0:	f003 0103 	and.w	r1, r3, #3
 8002ea4:	4291      	cmp	r1, r2
 8002ea6:	d124      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ea8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002eaa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002eae:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002eb4:	d11d      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002eb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ebc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002ec0:	d117      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ec2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002ec4:	3a07      	subs	r2, #7
 8002ec6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002eca:	bf18      	it	ne
 8002ecc:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ece:	4291      	cmp	r1, r2
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002ed4:	0852      	lsrs	r2, r2, #1
 8002ed6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002eda:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002edc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ee2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ee4:	0852      	lsrs	r2, r2, #1
 8002ee6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002eea:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eec:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002ef0:	d04a      	beq.n	8002f88 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef2:	2e0c      	cmp	r6, #12
 8002ef4:	f43f ae06 	beq.w	8002b04 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	f53f ae02 	bmi.w	8002b04 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	f53f adfe 	bmi.w	8002b04 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002f10:	f7ff fb48 	bl	80025a4 <HAL_GetTick>
 8002f14:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	019f      	lsls	r7, r3, #6
 8002f1a:	d42f      	bmi.n	8002f7c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1c:	68e2      	ldr	r2, [r4, #12]
 8002f1e:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_RCC_OscConfig+0x508>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002f24:	4313      	orrs	r3, r2
 8002f26:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002f28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f2c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002f2e:	3a01      	subs	r2, #1
 8002f30:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002f34:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002f36:	0912      	lsrs	r2, r2, #4
 8002f38:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002f3c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002f3e:	0852      	lsrs	r2, r2, #1
 8002f40:	3a01      	subs	r2, #1
 8002f42:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002f46:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002f48:	0852      	lsrs	r2, r2, #1
 8002f4a:	3a01      	subs	r2, #1
 8002f4c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002f50:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f58:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f5a:	68e3      	ldr	r3, [r4, #12]
 8002f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f60:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002f62:	f7ff fb1f 	bl	80025a4 <HAL_GetTick>
 8002f66:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	0198      	lsls	r0, r3, #6
 8002f6c:	f53f ae29 	bmi.w	8002bc2 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7ff fb18 	bl	80025a4 <HAL_GetTick>
 8002f74:	1b40      	subs	r0, r0, r5
 8002f76:	2802      	cmp	r0, #2
 8002f78:	d9f6      	bls.n	8002f68 <HAL_RCC_OscConfig+0x46c>
 8002f7a:	e65f      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7ff fb12 	bl	80025a4 <HAL_GetTick>
 8002f80:	1b80      	subs	r0, r0, r6
 8002f82:	2802      	cmp	r0, #2
 8002f84:	d9c7      	bls.n	8002f16 <HAL_RCC_OscConfig+0x41a>
 8002f86:	e659      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	0199      	lsls	r1, r3, #6
 8002f8c:	f53f ae19 	bmi.w	8002bc2 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f96:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f98:	68e3      	ldr	r3, [r4, #12]
 8002f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002fa0:	f7ff fb00 	bl	80025a4 <HAL_GetTick>
 8002fa4:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	019a      	lsls	r2, r3, #6
 8002faa:	f53f ae0a 	bmi.w	8002bc2 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fae:	f7ff faf9 	bl	80025a4 <HAL_GetTick>
 8002fb2:	1b40      	subs	r0, r0, r5
 8002fb4:	2802      	cmp	r0, #2
 8002fb6:	d9f6      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x4aa>
 8002fb8:	e640      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fba:	2e0c      	cmp	r6, #12
 8002fbc:	f43f ada2 	beq.w	8002b04 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002fce:	bf02      	ittt	eq
 8002fd0:	68e3      	ldreq	r3, [r4, #12]
 8002fd2:	f023 0303 	biceq.w	r3, r3, #3
 8002fd6:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fd8:	68e3      	ldr	r3, [r4, #12]
 8002fda:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002fe4:	f7ff fade 	bl	80025a4 <HAL_GetTick>
 8002fe8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	f57f ade8 	bpl.w	8002bc2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7ff fad7 	bl	80025a4 <HAL_GetTick>
 8002ff6:	1b40      	subs	r0, r0, r5
 8002ff8:	2802      	cmp	r0, #2
 8002ffa:	d9f6      	bls.n	8002fea <HAL_RCC_OscConfig+0x4ee>
 8002ffc:	e61e      	b.n	8002c3c <HAL_RCC_OscConfig+0x140>
 8002ffe:	bf00      	nop
 8003000:	40007000 	.word	0x40007000
 8003004:	f99d808c 	.word	0xf99d808c

08003008 <HAL_RCC_ClockConfig>:
{
 8003008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800300c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800300e:	4604      	mov	r4, r0
 8003010:	b910      	cbnz	r0, 8003018 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003012:	2001      	movs	r0, #1
}
 8003014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003018:	4a40      	ldr	r2, [pc, #256]	; (800311c <HAL_RCC_ClockConfig+0x114>)
 800301a:	6813      	ldr	r3, [r2, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	428b      	cmp	r3, r1
 8003022:	d32a      	bcc.n	800307a <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	07d9      	lsls	r1, r3, #31
 8003028:	d432      	bmi.n	8003090 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302a:	6821      	ldr	r1, [r4, #0]
 800302c:	078a      	lsls	r2, r1, #30
 800302e:	d45b      	bmi.n	80030e8 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4a3a      	ldr	r2, [pc, #232]	; (800311c <HAL_RCC_ClockConfig+0x114>)
 8003032:	6813      	ldr	r3, [r2, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	42ab      	cmp	r3, r5
 800303a:	d85d      	bhi.n	80030f8 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	f011 0f04 	tst.w	r1, #4
 8003040:	4d37      	ldr	r5, [pc, #220]	; (8003120 <HAL_RCC_ClockConfig+0x118>)
 8003042:	d164      	bne.n	800310e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003044:	070b      	lsls	r3, r1, #28
 8003046:	d506      	bpl.n	8003056 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003048:	68ab      	ldr	r3, [r5, #8]
 800304a:	6922      	ldr	r2, [r4, #16]
 800304c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003050:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003054:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003056:	f7ff fd03 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 800305a:	68ab      	ldr	r3, [r5, #8]
 800305c:	4a31      	ldr	r2, [pc, #196]	; (8003124 <HAL_RCC_ClockConfig+0x11c>)
 800305e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8003062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003066:	5cd3      	ldrb	r3, [r2, r3]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	40d8      	lsrs	r0, r3
 800306e:	4b2e      	ldr	r3, [pc, #184]	; (8003128 <HAL_RCC_ClockConfig+0x120>)
 8003070:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003072:	4b2e      	ldr	r3, [pc, #184]	; (800312c <HAL_RCC_ClockConfig+0x124>)
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	f7ff b989 	b.w	800238c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	6813      	ldr	r3, [r2, #0]
 800307c:	f023 0307 	bic.w	r3, r3, #7
 8003080:	430b      	orrs	r3, r1
 8003082:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003084:	6813      	ldr	r3, [r2, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	428b      	cmp	r3, r1
 800308c:	d1c1      	bne.n	8003012 <HAL_RCC_ClockConfig+0xa>
 800308e:	e7c9      	b.n	8003024 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003090:	6862      	ldr	r2, [r4, #4]
 8003092:	4e23      	ldr	r6, [pc, #140]	; (8003120 <HAL_RCC_ClockConfig+0x118>)
 8003094:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003098:	d11a      	bne.n	80030d0 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309e:	d0b8      	beq.n	8003012 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030a0:	68b3      	ldr	r3, [r6, #8]
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80030aa:	f7ff fa7b 	bl	80025a4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ae:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80030b2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b4:	68b3      	ldr	r3, [r6, #8]
 80030b6:	6862      	ldr	r2, [r4, #4]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80030c0:	d0b3      	beq.n	800302a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c2:	f7ff fa6f 	bl	80025a4 <HAL_GetTick>
 80030c6:	1bc0      	subs	r0, r0, r7
 80030c8:	4540      	cmp	r0, r8
 80030ca:	d9f3      	bls.n	80030b4 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80030cc:	2003      	movs	r0, #3
 80030ce:	e7a1      	b.n	8003014 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d0:	2a02      	cmp	r2, #2
 80030d2:	d102      	bne.n	80030da <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030d8:	e7e1      	b.n	800309e <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030da:	b912      	cbnz	r2, 80030e2 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030dc:	f013 0f02 	tst.w	r3, #2
 80030e0:	e7dd      	b.n	800309e <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030e6:	e7da      	b.n	800309e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <HAL_RCC_ClockConfig+0x118>)
 80030ea:	68a0      	ldr	r0, [r4, #8]
 80030ec:	6893      	ldr	r3, [r2, #8]
 80030ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f2:	4303      	orrs	r3, r0
 80030f4:	6093      	str	r3, [r2, #8]
 80030f6:	e79b      	b.n	8003030 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f8:	6813      	ldr	r3, [r2, #0]
 80030fa:	f023 0307 	bic.w	r3, r3, #7
 80030fe:	432b      	orrs	r3, r5
 8003100:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	42ab      	cmp	r3, r5
 800310a:	d182      	bne.n	8003012 <HAL_RCC_ClockConfig+0xa>
 800310c:	e796      	b.n	800303c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800310e:	68ab      	ldr	r3, [r5, #8]
 8003110:	68e2      	ldr	r2, [r4, #12]
 8003112:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003116:	4313      	orrs	r3, r2
 8003118:	60ab      	str	r3, [r5, #8]
 800311a:	e793      	b.n	8003044 <HAL_RCC_ClockConfig+0x3c>
 800311c:	40022000 	.word	0x40022000
 8003120:	40021000 	.word	0x40021000
 8003124:	08003470 	.word	0x08003470
 8003128:	20000004 	.word	0x20000004
 800312c:	20000020 	.word	0x20000020

08003130 <HAL_RTC_MspInit>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8003130:	4770      	bx	lr

08003132 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003132:	6802      	ldr	r2, [r0, #0]
{
 8003134:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003136:	68d3      	ldr	r3, [r2, #12]
 8003138:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800313c:	60d3      	str	r3, [r2, #12]
{
 800313e:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8003140:	f7ff fa30 	bl	80025a4 <HAL_GetTick>
 8003144:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	069b      	lsls	r3, r3, #26
 800314c:	d501      	bpl.n	8003152 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800314e:	2000      	movs	r0, #0
}
 8003150:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003152:	f7ff fa27 	bl	80025a4 <HAL_GetTick>
 8003156:	1b40      	subs	r0, r0, r5
 8003158:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800315c:	d9f3      	bls.n	8003146 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800315e:	2003      	movs	r0, #3
 8003160:	e7f6      	b.n	8003150 <HAL_RTC_WaitForSynchro+0x1e>

08003162 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003164:	6803      	ldr	r3, [r0, #0]
 8003166:	68dc      	ldr	r4, [r3, #12]
 8003168:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 800316c:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800316e:	d118      	bne.n	80031a2 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003176:	f7ff fa15 	bl	80025a4 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800317a:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 800317c:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800317e:	682b      	ldr	r3, [r5, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	065b      	lsls	r3, r3, #25
 8003184:	d401      	bmi.n	800318a <RTC_EnterInitMode+0x28>
 8003186:	2c03      	cmp	r4, #3
 8003188:	d101      	bne.n	800318e <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 800318a:	4620      	mov	r0, r4
 800318c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800318e:	f7ff fa09 	bl	80025a4 <HAL_GetTick>
 8003192:	1b80      	subs	r0, r0, r6
 8003194:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003198:	bf84      	itt	hi
 800319a:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 800319e:	2403      	movhi	r4, #3
 80031a0:	e7ed      	b.n	800317e <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80031a2:	2400      	movs	r4, #0
 80031a4:	e7f1      	b.n	800318a <RTC_EnterInitMode+0x28>
	...

080031a8 <RTC_ExitInitMode>:
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <RTC_ExitInitMode+0x44>)
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 80031b0:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80031b2:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	0692      	lsls	r2, r2, #26
{
 80031b8:	4604      	mov	r4, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80031ba:	d406      	bmi.n	80031ca <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031bc:	f7ff ffb9 	bl	8003132 <HAL_RTC_WaitForSynchro>
 80031c0:	b110      	cbz	r0, 80031c8 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031c2:	2003      	movs	r0, #3
 80031c4:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 80031c8:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	f022 0220 	bic.w	r2, r2, #32
 80031d0:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031d2:	f7ff ffae 	bl	8003132 <HAL_RTC_WaitForSynchro>
 80031d6:	b110      	cbz	r0, 80031de <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031d8:	2003      	movs	r0, #3
 80031da:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80031de:	4a03      	ldr	r2, [pc, #12]	; (80031ec <RTC_ExitInitMode+0x44>)
 80031e0:	6893      	ldr	r3, [r2, #8]
 80031e2:	f043 0320 	orr.w	r3, r3, #32
 80031e6:	6093      	str	r3, [r2, #8]
  return status;
 80031e8:	e7ee      	b.n	80031c8 <RTC_ExitInitMode+0x20>
 80031ea:	bf00      	nop
 80031ec:	40002800 	.word	0x40002800

080031f0 <HAL_RTC_Init>:
{
 80031f0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 80031f2:	4604      	mov	r4, r0
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d03f      	beq.n	8003278 <HAL_RTC_Init+0x88>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80031f8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80031fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003200:	b91b      	cbnz	r3, 800320a <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8003202:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8003206:	f7ff ff93 	bl	8003130 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800320a:	2302      	movs	r3, #2
 800320c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	22ca      	movs	r2, #202	; 0xca
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
 8003216:	2253      	movs	r2, #83	; 0x53
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800321a:	4620      	mov	r0, r4
 800321c:	f7ff ffa1 	bl	8003162 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8003220:	bb48      	cbnz	r0, 8003276 <HAL_RTC_Init+0x86>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003222:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003224:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800322c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003230:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003232:	6862      	ldr	r2, [r4, #4]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	4302      	orrs	r2, r0
 8003238:	69a0      	ldr	r0, [r4, #24]
 800323a:	4302      	orrs	r2, r0
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003240:	68e2      	ldr	r2, [r4, #12]
 8003242:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	68a1      	ldr	r1, [r4, #8]
 8003248:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800324c:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800324e:	4620      	mov	r0, r4
 8003250:	f7ff ffaa 	bl	80031a8 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8003254:	b978      	cbnz	r0, 8003276 <HAL_RTC_Init+0x86>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003256:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003258:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800325a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800325c:	f022 0203 	bic.w	r2, r2, #3
 8003260:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003262:	69e2      	ldr	r2, [r4, #28]
 8003264:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003266:	432a      	orrs	r2, r5
 8003268:	430a      	orrs	r2, r1
 800326a:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 8003270:	2301      	movs	r3, #1
 8003272:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8003276:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8003278:	2001      	movs	r0, #1
 800327a:	e7fc      	b.n	8003276 <HAL_RTC_Init+0x86>

0800327c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800327c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003280:	2b01      	cmp	r3, #1
 8003282:	f04f 0302 	mov.w	r3, #2
 8003286:	d012      	beq.n	80032ae <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003288:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800328c:	6803      	ldr	r3, [r0, #0]
 800328e:	22ca      	movs	r2, #202	; 0xca
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
 8003292:	2253      	movs	r2, #83	; 0x53
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	f042 0220 	orr.w	r2, r2, #32
 800329c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800329e:	22ff      	movs	r2, #255	; 0xff
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032a8:	2300      	movs	r3, #0
 80032aa:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 80032ae:	4618      	mov	r0, r3

  return HAL_OK;
}
 80032b0:	4770      	bx	lr

080032b2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032b4:	4604      	mov	r4, r0
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d05f      	beq.n	800337a <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d158      	bne.n	8003372 <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032c0:	6842      	ldr	r2, [r0, #4]
 80032c2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80032c6:	d000      	beq.n	80032ca <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032c8:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ce:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80032d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032d6:	b923      	cbnz	r3, 80032e2 <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032d8:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032dc:	4620      	mov	r0, r4
 80032de:	f7fd fcad 	bl	8000c3c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032e2:	6825      	ldr	r5, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032e4:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80032e6:	2302      	movs	r3, #2
 80032e8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80032ec:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80032f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f6:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	d83f      	bhi.n	800337e <HAL_SPI_Init+0xcc>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003302:	d000      	beq.n	8003306 <HAL_SPI_Init+0x54>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003304:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003306:	6863      	ldr	r3, [r4, #4]
 8003308:	68a6      	ldr	r6, [r4, #8]
 800330a:	69a2      	ldr	r2, [r4, #24]
 800330c:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8003310:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003314:	4333      	orrs	r3, r6
 8003316:	6926      	ldr	r6, [r4, #16]
 8003318:	f006 0602 	and.w	r6, r6, #2
 800331c:	4333      	orrs	r3, r6
 800331e:	6966      	ldr	r6, [r4, #20]
 8003320:	f006 0601 	and.w	r6, r6, #1
 8003324:	4333      	orrs	r3, r6
 8003326:	f402 7600 	and.w	r6, r2, #512	; 0x200
 800332a:	4333      	orrs	r3, r6
 800332c:	69e6      	ldr	r6, [r4, #28]
 800332e:	f006 0638 	and.w	r6, r6, #56	; 0x38
 8003332:	4333      	orrs	r3, r6
 8003334:	6a26      	ldr	r6, [r4, #32]
 8003336:	f006 0680 	and.w	r6, r6, #128	; 0x80
 800333a:	4333      	orrs	r3, r6
 800333c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800333e:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 8003342:	4333      	orrs	r3, r6
 8003344:	602b      	str	r3, [r5, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003346:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800334a:	f006 0608 	and.w	r6, r6, #8
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	4333      	orrs	r3, r6
 8003354:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003358:	0c12      	lsrs	r2, r2, #16
 800335a:	4319      	orrs	r1, r3
 800335c:	f002 0204 	and.w	r2, r2, #4
 8003360:	430a      	orrs	r2, r1
 8003362:	4310      	orrs	r0, r2
 8003364:	6068      	str	r0, [r5, #4]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8003366:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003368:	2000      	movs	r0, #0
 800336a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800336c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8003370:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003372:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003374:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003378:	e7a7      	b.n	80032ca <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800337a:	2001      	movs	r0, #1
 800337c:	e7f8      	b.n	8003370 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800337e:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003380:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8003384:	e7bd      	b.n	8003302 <HAL_SPI_Init+0x50>
	...

08003388 <__libc_init_array>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	4d0d      	ldr	r5, [pc, #52]	; (80033c0 <__libc_init_array+0x38>)
 800338c:	4c0d      	ldr	r4, [pc, #52]	; (80033c4 <__libc_init_array+0x3c>)
 800338e:	1b64      	subs	r4, r4, r5
 8003390:	10a4      	asrs	r4, r4, #2
 8003392:	2600      	movs	r6, #0
 8003394:	42a6      	cmp	r6, r4
 8003396:	d109      	bne.n	80033ac <__libc_init_array+0x24>
 8003398:	4d0b      	ldr	r5, [pc, #44]	; (80033c8 <__libc_init_array+0x40>)
 800339a:	4c0c      	ldr	r4, [pc, #48]	; (80033cc <__libc_init_array+0x44>)
 800339c:	f000 f82e 	bl	80033fc <_init>
 80033a0:	1b64      	subs	r4, r4, r5
 80033a2:	10a4      	asrs	r4, r4, #2
 80033a4:	2600      	movs	r6, #0
 80033a6:	42a6      	cmp	r6, r4
 80033a8:	d105      	bne.n	80033b6 <__libc_init_array+0x2e>
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
 80033ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b0:	4798      	blx	r3
 80033b2:	3601      	adds	r6, #1
 80033b4:	e7ee      	b.n	8003394 <__libc_init_array+0xc>
 80033b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ba:	4798      	blx	r3
 80033bc:	3601      	adds	r6, #1
 80033be:	e7f2      	b.n	80033a6 <__libc_init_array+0x1e>
 80033c0:	08003490 	.word	0x08003490
 80033c4:	08003490 	.word	0x08003490
 80033c8:	08003490 	.word	0x08003490
 80033cc:	08003494 	.word	0x08003494

080033d0 <memcpy>:
 80033d0:	440a      	add	r2, r1
 80033d2:	4291      	cmp	r1, r2
 80033d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80033d8:	d100      	bne.n	80033dc <memcpy+0xc>
 80033da:	4770      	bx	lr
 80033dc:	b510      	push	{r4, lr}
 80033de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033e6:	4291      	cmp	r1, r2
 80033e8:	d1f9      	bne.n	80033de <memcpy+0xe>
 80033ea:	bd10      	pop	{r4, pc}

080033ec <memset>:
 80033ec:	4402      	add	r2, r0
 80033ee:	4603      	mov	r3, r0
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d100      	bne.n	80033f6 <memset+0xa>
 80033f4:	4770      	bx	lr
 80033f6:	f803 1b01 	strb.w	r1, [r3], #1
 80033fa:	e7f9      	b.n	80033f0 <memset+0x4>

080033fc <_init>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr

08003408 <_fini>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr
 8003414:	0000      	movs	r0, r0
	...
