
STM32L4_IOT_P2P_ClientServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003888  08003888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003900  08003900  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08003900  08003900  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003900  08003900  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08003910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b30  20000048  08003958  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b78  08003958  00020b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e4c4  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067ca  00000000  00000000  0004e53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000e852  00000000  00000000  00054d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  00063558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b28  00000000  00000000  00064920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ff91  00000000  00000000  00066448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000246b5  00000000  00000000  000963d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010930e  00000000  00000000  000baa8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c3d9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003644  00000000  00000000  001c3df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800386c 	.word	0x0800386c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	0800386c 	.word	0x0800386c

080001c8 <aci_gap_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

#if BLUENRG_MS
tBleStatus aci_gap_init(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80001c8:	b530      	push	{r4, r5, lr}
 80001ca:	b08b      	sub	sp, #44	; 0x2c
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80001cc:	ad02      	add	r5, sp, #8
  cp.role = role;
 80001ce:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 80001d2:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 80001d6:	f88d 2006 	strb.w	r2, [sp, #6]
  Osal_MemSet(&resp, 0, sizeof(resp));
 80001da:	2100      	movs	r1, #0
 80001dc:	2207      	movs	r2, #7
 80001de:	4628      	mov	r0, r5
{
 80001e0:	461c      	mov	r4, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 80001e2:	f000 fa7d 	bl	80006e0 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 80001e6:	2218      	movs	r2, #24
 80001e8:	2100      	movs	r1, #0
 80001ea:	a804      	add	r0, sp, #16
 80001ec:	f000 fa78 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <aci_gap_init+0x7c>)
 80001f2:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
 80001f4:	ab01      	add	r3, sp, #4
 80001f6:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80001f8:	2303      	movs	r3, #3
 80001fa:	f8ad 301c 	strh.w	r3, [sp, #28]
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80001fe:	2100      	movs	r1, #0
  rq.rlen = GAP_INIT_RP_SIZE;
 8000200:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 8000202:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8000204:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8000206:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800020a:	f001 fc0d 	bl	8001a28 <hci_send_req>
 800020e:	2800      	cmp	r0, #0
 8000210:	db15      	blt.n	800023e <aci_gap_init+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8000212:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000216:	b980      	cbnz	r0, 800023a <aci_gap_init+0x72>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8000218:	9b02      	ldr	r3, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800021a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 800021e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8000222:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8000224:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8000228:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800022c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800022e:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8000230:	9b03      	ldr	r3, [sp, #12]
 8000232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000234:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8000238:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800023a:	b00b      	add	sp, #44	; 0x2c
 800023c:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_TIMEOUT;
 800023e:	20ff      	movs	r0, #255	; 0xff
 8000240:	e7fb      	b.n	800023a <aci_gap_init+0x72>
 8000242:	bf00      	nop
 8000244:	008a003f 	.word	0x008a003f

08000248 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8000248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024a:	b095      	sub	sp, #84	; 0x54
 800024c:	461f      	mov	r7, r3
 800024e:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8000252:	f89d 5074 	ldrb.w	r5, [sp, #116]	; 0x74
 8000256:	f8ad 1006 	strh.w	r1, [sp, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800025a:	1963      	adds	r3, r4, r5
 800025c:	2b1a      	cmp	r3, #26
{
 800025e:	f8ad 2004 	strh.w	r2, [sp, #4]
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8000262:	dc57      	bgt.n	8000314 <aci_gap_set_discoverable+0xcc>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8000264:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 8000268:	2202      	movs	r2, #2
 800026a:	f10d 0106 	add.w	r1, sp, #6
 800026e:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8000272:	f000 fa33 	bl	80006dc <Osal_MemCpy>
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  Osal_MemCpy(buffer + indx, &AdvIntervMax, 2);
 8000276:	2202      	movs	r2, #2
 8000278:	a901      	add	r1, sp, #4
 800027a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 800027e:	f000 fa2d 	bl	80006dc <Osal_MemCpy>
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8000282:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 8000286:	991c      	ldr	r1, [sp, #112]	; 0x70
  buffer[indx] = AdvFilterPolicy;
 8000288:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 800028c:	4622      	mov	r2, r4
 800028e:	a80c      	add	r0, sp, #48	; 0x30
  buffer[indx] = LocalNameLen;
 8000290:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
  buffer[indx] = OwnAddrType;
 8000294:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 8000298:	f000 fa20 	bl	80006dc <Osal_MemCpy>
  indx +=  LocalNameLen;
 800029c:	f104 0308 	add.w	r3, r4, #8
  
  buffer[indx] = ServiceUUIDLen;
 80002a0:	aa14      	add	r2, sp, #80	; 0x50
 80002a2:	fa52 f383 	uxtab	r3, r2, r3
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 80002a6:	ae0a      	add	r6, sp, #40	; 0x28
  indx++;
 80002a8:	f104 0009 	add.w	r0, r4, #9
 80002ac:	b2c4      	uxtb	r4, r0

  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80002ae:	991e      	ldr	r1, [sp, #120]	; 0x78
  buffer[indx] = ServiceUUIDLen;
 80002b0:	f803 5c28 	strb.w	r5, [r3, #-40]
  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80002b4:	462a      	mov	r2, r5
 80002b6:	fa56 f080 	uxtab	r0, r6, r0
 80002ba:	f000 fa0f 	bl	80006dc <Osal_MemCpy>
  indx +=  ServiceUUIDLen;  
 80002be:	1928      	adds	r0, r5, r4
 80002c0:	b2c4      	uxtb	r4, r0

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMin, 2);
 80002c2:	2202      	movs	r2, #2
 80002c4:	a91f      	add	r1, sp, #124	; 0x7c
 80002c6:	fa56 f080 	uxtab	r0, r6, r0
 80002ca:	f000 fa07 	bl	80006dc <Osal_MemCpy>
  indx +=  2;
 80002ce:	1ca0      	adds	r0, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMax, 2);
 80002d0:	2202      	movs	r2, #2
 80002d2:	a920      	add	r1, sp, #128	; 0x80
 80002d4:	fa56 f080 	uxtab	r0, r6, r0
 80002d8:	f000 fa00 	bl	80006dc <Osal_MemCpy>
  indx +=  2;    

  Osal_MemSet(&rq, 0, sizeof(rq));
 80002dc:	2218      	movs	r2, #24
 80002de:	2100      	movs	r1, #0
 80002e0:	a804      	add	r0, sp, #16
 80002e2:	f000 f9fd 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <aci_gap_set_discoverable+0xd4>)
 80002e8:	9304      	str	r3, [sp, #16]
  indx +=  2;    
 80002ea:	3404      	adds	r4, #4
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 80002ec:	f10d 030f 	add.w	r3, sp, #15
 80002f0:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 80002f2:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80002f4:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80002f6:	2100      	movs	r1, #0
 80002f8:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 80002fa:	9606      	str	r6, [sp, #24]
  rq.clen = indx;
 80002fc:	f8ad 401c 	strh.w	r4, [sp, #28]
  rq.rlen = 1;
 8000300:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8000304:	f001 fb90 	bl	8001a28 <hci_send_req>
 8000308:	2800      	cmp	r0, #0
 800030a:	db05      	blt.n	8000318 <aci_gap_set_discoverable+0xd0>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800030c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    return status;
  }

  return 0;
}
 8000310:	b015      	add	sp, #84	; 0x54
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8000314:	2042      	movs	r0, #66	; 0x42
 8000316:	e7fb      	b.n	8000310 <aci_gap_set_discoverable+0xc8>
    return BLE_STATUS_TIMEOUT;
 8000318:	20ff      	movs	r0, #255	; 0xff
 800031a:	e7f9      	b.n	8000310 <aci_gap_set_discoverable+0xc8>
 800031c:	0083003f 	.word	0x0083003f

08000320 <aci_gap_set_io_capability>:
    
  return status;
}

tBleStatus aci_gap_set_io_capability(uint8_t io_capability)
{
 8000320:	b500      	push	{lr}
 8000322:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
  gap_set_io_capability_cp cp;
    
  cp.io_capability = io_capability;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000324:	2218      	movs	r2, #24
  cp.io_capability = io_capability;
 8000326:	f88d 0004 	strb.w	r0, [sp, #4]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800032a:	2100      	movs	r1, #0
 800032c:	a802      	add	r0, sp, #8
 800032e:	f000 f9d7 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <aci_gap_set_io_capability+0x44>)
 8000334:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_IO_CAPABILITY;
  rq.cparam = &cp;
 8000336:	ab01      	add	r3, sp, #4
 8000338:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.rparam = &status;
 800033a:	f10d 0207 	add.w	r2, sp, #7
  rq.clen = sizeof(cp);
 800033e:	2301      	movs	r3, #1
  rq.rlen = 1;
    
  if (hci_send_req(&rq, FALSE) < 0)
 8000340:	2100      	movs	r1, #0
 8000342:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 8000344:	f8ad 3014 	strh.w	r3, [sp, #20]
  rq.rparam = &status;
 8000348:	9206      	str	r2, [sp, #24]
  rq.rlen = 1;
 800034a:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800034e:	f001 fb6b 	bl	8001a28 <hci_send_req>
 8000352:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
    
  return status;
 8000354:	bfac      	ite	ge
 8000356:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800035a:	20ff      	movlt	r0, #255	; 0xff
}
 800035c:	b009      	add	sp, #36	; 0x24
 800035e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000362:	bf00      	nop
 8000364:	0085003f 	.word	0x0085003f

08000368 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8000368:	b530      	push	{r4, r5, lr}
 800036a:	b08f      	sub	sp, #60	; 0x3c
 800036c:	460d      	mov	r5, r1
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800036e:	f88d 001c 	strb.w	r0, [sp, #28]
{
 8000372:	4611      	mov	r1, r2
  cp.oob_enable = oob_enable;
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 8000374:	f10d 001e 	add.w	r0, sp, #30
 8000378:	2210      	movs	r2, #16
{
 800037a:	461c      	mov	r4, r3
  cp.oob_enable = oob_enable;
 800037c:	f88d 501d 	strb.w	r5, [sp, #29]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 8000380:	f000 f9ac 	bl	80006dc <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
  cp.max_encryption_key_size = max_encryption_key_size;
 8000384:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8000388:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 800038c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8000390:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8000394:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000396:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  Osal_MemSet(&rq, 0, sizeof(rq));
 800039a:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 800039c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80003a0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  Osal_MemSet(&rq, 0, sizeof(rq));
 80003a4:	2100      	movs	r1, #0
 80003a6:	a801      	add	r0, sp, #4
  cp.min_encryption_key_size = min_encryption_key_size;
 80003a8:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  Osal_MemSet(&rq, 0, sizeof(rq));
 80003ac:	f000 f998 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80003b0:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <aci_gap_set_auth_requirement+0x78>)
 80003b2:	9301      	str	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
  rq.cparam = &cp;
 80003b4:	ab07      	add	r3, sp, #28
 80003b6:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 80003b8:	231a      	movs	r3, #26
 80003ba:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.rparam = &status;
 80003be:	f10d 0303 	add.w	r3, sp, #3
 80003c2:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80003c4:	2100      	movs	r1, #0
  rq.rlen = 1;
 80003c6:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80003c8:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 80003ca:	f8ad 3018 	strh.w	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 80003ce:	f001 fb2b 	bl	8001a28 <hci_send_req>
 80003d2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80003d4:	bfac      	ite	ge
 80003d6:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80003da:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 80003dc:	b00f      	add	sp, #60	; 0x3c
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	0086003f 	.word	0x0086003f

080003e4 <aci_gap_configure_whitelist>:

  return resp.status;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 80003e4:	b500      	push	{lr}
 80003e6:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 80003e8:	2218      	movs	r2, #24
 80003ea:	2100      	movs	r1, #0
 80003ec:	a802      	add	r0, sp, #8
 80003ee:	f000 f977 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <aci_gap_configure_whitelist+0x38>)
 80003f4:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GAP_CONFIGURE_WHITELIST;
  rq.rparam = &status;
 80003f6:	f10d 0307 	add.w	r3, sp, #7
 80003fa:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80003fc:	2100      	movs	r1, #0
  rq.rlen = 1;
 80003fe:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8000400:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8000402:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8000406:	f001 fb0f 	bl	8001a28 <hci_send_req>
 800040a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800040c:	bfac      	ite	ge
 800040e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8000412:	20ff      	movlt	r0, #255	; 0xff
}
 8000414:	b009      	add	sp, #36	; 0x24
 8000416:	f85d fb04 	ldr.w	pc, [sp], #4
 800041a:	bf00      	nop
 800041c:	0092003f 	.word	0x0092003f

08000420 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8000420:	b500      	push	{lr}
 8000422:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000424:	2218      	movs	r2, #24
 8000426:	2100      	movs	r1, #0
 8000428:	a802      	add	r0, sp, #8
 800042a:	f000 f959 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <aci_gatt_init+0x38>)
 8000430:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
  rq.rparam = &status;
 8000432:	f10d 0307 	add.w	r3, sp, #7
 8000436:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8000438:	2100      	movs	r1, #0
  rq.rlen = 1;
 800043a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800043c:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800043e:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8000442:	f001 faf1 	bl	8001a28 <hci_send_req>
 8000446:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8000448:	bfac      	ite	ge
 800044a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800044e:	20ff      	movlt	r0, #255	; 0xff
}
 8000450:	b009      	add	sp, #36	; 0x24
 8000452:	f85d fb04 	ldr.w	pc, [sp], #4
 8000456:	bf00      	nop
 8000458:	0101003f 	.word	0x0101003f

0800045c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800045c:	b570      	push	{r4, r5, r6, lr}
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 800045e:	2801      	cmp	r0, #1
{
 8000460:	b08c      	sub	sp, #48	; 0x30
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8000462:	bf0c      	ite	eq
 8000464:	2402      	moveq	r4, #2
 8000466:	2410      	movne	r4, #16
{
 8000468:	4616      	mov	r6, r2
  buffer[indx] = service_uuid_type;
 800046a:	f88d 0004 	strb.w	r0, [sp, #4]
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 800046e:	4622      	mov	r2, r4
 8000470:	f10d 0005 	add.w	r0, sp, #5
{
 8000474:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 8000476:	f000 f931 	bl	80006dc <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800047a:	ab0c      	add	r3, sp, #48	; 0x30
 800047c:	4423      	add	r3, r4
    
  buffer[indx] = max_attr_records;
  indx++;
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800047e:	2203      	movs	r2, #3
  buffer[indx] = service_type;
 8000480:	f803 6c2b 	strb.w	r6, [r3, #-43]
  buffer[indx] = max_attr_records;
 8000484:	ab0c      	add	r3, sp, #48	; 0x30
 8000486:	4423      	add	r3, r4
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000488:	2100      	movs	r1, #0
 800048a:	4668      	mov	r0, sp
  buffer[indx] = max_attr_records;
 800048c:	f803 5c2a 	strb.w	r5, [r3, #-42]
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000490:	f000 f926 	bl	80006e0 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000494:	2218      	movs	r2, #24
 8000496:	2100      	movs	r1, #0
 8000498:	eb0d 0002 	add.w	r0, sp, r2
 800049c:	f000 f920 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <aci_gatt_add_serv+0x80>)
 80004a2:	9306      	str	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
 80004a4:	ab01      	add	r3, sp, #4
 80004a6:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 80004a8:	3403      	adds	r4, #3
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80004aa:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 80004ac:	2100      	movs	r1, #0
 80004ae:	a806      	add	r0, sp, #24
  rq.clen = indx;
 80004b0:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 80004b4:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80004b8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 80004bc:	f001 fab4 	bl	8001a28 <hci_send_req>
 80004c0:	2800      	cmp	r0, #0
 80004c2:	db09      	blt.n	80004d8 <aci_gatt_add_serv+0x7c>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 80004c4:	f89d 0000 	ldrb.w	r0, [sp]
 80004c8:	b920      	cbnz	r0, 80004d4 <aci_gatt_add_serv+0x78>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 80004ca:	9b00      	ldr	r3, [sp, #0]
 80004cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80004ce:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80004d2:	8013      	strh	r3, [r2, #0]

  return 0;
}
 80004d4:	b00c      	add	sp, #48	; 0x30
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80004d8:	20ff      	movs	r0, #255	; 0xff
 80004da:	e7fb      	b.n	80004d4 <aci_gatt_add_serv+0x78>
 80004dc:	0102003f 	.word	0x0102003f

080004e0 <aci_gatt_add_char>:
           uint8_t secPermissions,
           uint8_t gattEvtMask,
           uint8_t encryKeySize,
           uint8_t isVariable,
           uint16_t* charHandle)                     
{
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	b091      	sub	sp, #68	; 0x44
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 80004e4:	af09      	add	r7, sp, #36	; 0x24
{
 80004e6:	460c      	mov	r4, r1
 80004e8:	4616      	mov	r6, r2
 80004ea:	f8ad 0006 	strh.w	r0, [sp, #6]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 80004ee:	2202      	movs	r2, #2
 80004f0:	f10d 0106 	add.w	r1, sp, #6
 80004f4:	4638      	mov	r0, r7
{
 80004f6:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 80004f8:	f000 f8f0 	bl	80006dc <Osal_MemCpy>
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80004fc:	2c01      	cmp	r4, #1
  buffer[indx] = charUuidType;
 80004fe:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
    uuid_len = 16;
 8000502:	bf0c      	ite	eq
 8000504:	2402      	moveq	r4, #2
 8000506:	2410      	movne	r4, #16
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 8000508:	4622      	mov	r2, r4
 800050a:	4631      	mov	r1, r6
 800050c:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8000510:	f000 f8e4 	bl	80006dc <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8000514:	ab10      	add	r3, sp, #64	; 0x40
 8000516:	4423      	add	r3, r4
  indx+=2;
#else
  indx++;
#endif  
    
  buffer[indx] = charProperties;
 8000518:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  buffer[indx] = charValueLen;
 800051c:	f803 5c19 	strb.w	r5, [r3, #-25]
  buffer[indx] = charProperties;
 8000520:	ab10      	add	r3, sp, #64	; 0x40
 8000522:	4423      	add	r3, r4
  indx++;
    
  buffer[indx] = isVariable;
  indx++;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000524:	ad02      	add	r5, sp, #8
  buffer[indx] = charProperties;
 8000526:	f803 2c18 	strb.w	r2, [r3, #-24]
  buffer[indx] = secPermissions;
 800052a:	ab10      	add	r3, sp, #64	; 0x40
 800052c:	4423      	add	r3, r4
 800052e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8000532:	f803 2c17 	strb.w	r2, [r3, #-23]
  buffer[indx] = gattEvtMask;
 8000536:	ab10      	add	r3, sp, #64	; 0x40
 8000538:	4423      	add	r3, r4
 800053a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800053e:	f803 2c16 	strb.w	r2, [r3, #-22]
  buffer[indx] = encryKeySize;
 8000542:	ab10      	add	r3, sp, #64	; 0x40
 8000544:	4423      	add	r3, r4
 8000546:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800054a:	f803 2c15 	strb.w	r2, [r3, #-21]
  buffer[indx] = isVariable;
 800054e:	ab10      	add	r3, sp, #64	; 0x40
 8000550:	4423      	add	r3, r4
 8000552:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8000556:	f803 2c14 	strb.w	r2, [r3, #-20]
  Osal_MemSet(&resp, 0, sizeof(resp));
 800055a:	2100      	movs	r1, #0
 800055c:	2203      	movs	r2, #3
 800055e:	4628      	mov	r0, r5
 8000560:	f000 f8be 	bl	80006e0 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000564:	2218      	movs	r2, #24
 8000566:	2100      	movs	r1, #0
 8000568:	a803      	add	r0, sp, #12
 800056a:	f000 f8b9 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <aci_gatt_add_char+0xc8>)
 8000570:	9303      	str	r3, [sp, #12]
  rq.ocf = OCF_GATT_ADD_CHAR;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8000572:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8000574:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8000576:	2100      	movs	r1, #0
 8000578:	a803      	add	r0, sp, #12
  rq.cparam = (void *)buffer;
 800057a:	9705      	str	r7, [sp, #20]
  rq.clen = indx;
 800057c:	f8ad 4018 	strh.w	r4, [sp, #24]
  rq.rparam = &resp;
 8000580:	9507      	str	r5, [sp, #28]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8000582:	f8ad 3020 	strh.w	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 8000586:	f001 fa4f 	bl	8001a28 <hci_send_req>
 800058a:	2800      	cmp	r0, #0
 800058c:	db09      	blt.n	80005a2 <aci_gatt_add_char+0xc2>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800058e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000592:	b920      	cbnz	r0, 800059e <aci_gatt_add_char+0xbe>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 8000594:	9b02      	ldr	r3, [sp, #8]
 8000596:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000598:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800059c:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800059e:	b011      	add	sp, #68	; 0x44
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 80005a2:	20ff      	movs	r0, #255	; 0xff
 80005a4:	e7fb      	b.n	800059e <aci_gatt_add_char+0xbe>
 80005a6:	bf00      	nop
 80005a8:	0104003f 	.word	0x0104003f

080005ac <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
              uint16_t charHandle,
              uint8_t charValOffset,
              uint8_t charValueLen,   
                                      const void *charValue)
{
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	b0ca      	sub	sp, #296	; 0x128
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80005b0:	2bf9      	cmp	r3, #249	; 0xf9
{
 80005b2:	4616      	mov	r6, r2
 80005b4:	461c      	mov	r4, r3
 80005b6:	f8ad 0006 	strh.w	r0, [sp, #6]
 80005ba:	f8ad 1004 	strh.w	r1, [sp, #4]
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80005be:	d82f      	bhi.n	8000620 <aci_gatt_update_char_value+0x74>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 80005c0:	ad0a      	add	r5, sp, #40	; 0x28
 80005c2:	2202      	movs	r2, #2
 80005c4:	f10d 0106 	add.w	r1, sp, #6
 80005c8:	4628      	mov	r0, r5
 80005ca:	f000 f887 	bl	80006dc <Osal_MemCpy>
  indx += 2;
    
  charHandle = htobs(charHandle);
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 80005ce:	2202      	movs	r2, #2
 80005d0:	a901      	add	r1, sp, #4
 80005d2:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80005d6:	f000 f881 	bl	80006dc <Osal_MemCpy>
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 80005da:	4622      	mov	r2, r4
 80005dc:	994e      	ldr	r1, [sp, #312]	; 0x138
  buffer[indx] = charValueLen;
 80005de:	716c      	strb	r4, [r5, #5]
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 80005e0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
  buffer[indx] = charValOffset;
 80005e4:	712e      	strb	r6, [r5, #4]
  indx +=  charValueLen;
 80005e6:	3406      	adds	r4, #6
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 80005e8:	f000 f878 	bl	80006dc <Osal_MemCpy>

  Osal_MemSet(&rq, 0, sizeof(rq));
 80005ec:	2218      	movs	r2, #24
 80005ee:	2100      	movs	r1, #0
 80005f0:	a804      	add	r0, sp, #16
 80005f2:	f000 f875 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 80005f6:	b2e4      	uxtb	r4, r4
  rq.ogf = OGF_VENDOR_CMD;
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <aci_gatt_update_char_value+0x7c>)
 80005fa:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
 80005fc:	f8ad 401c 	strh.w	r4, [sp, #28]
  rq.rparam = &status;
  rq.rlen = 1;
 8000600:	2301      	movs	r3, #1
  rq.rparam = &status;
 8000602:	f10d 040f 	add.w	r4, sp, #15

  if (hci_send_req(&rq, FALSE) < 0)
 8000606:	2100      	movs	r1, #0
 8000608:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 800060a:	9506      	str	r5, [sp, #24]
  rq.rparam = &status;
 800060c:	9408      	str	r4, [sp, #32]
  rq.rlen = 1;
 800060e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8000612:	f001 fa09 	bl	8001a28 <hci_send_req>
 8000616:	2800      	cmp	r0, #0
 8000618:	db04      	blt.n	8000624 <aci_gatt_update_char_value+0x78>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800061a:	7820      	ldrb	r0, [r4, #0]
    return status;
  }

  return 0;
}
 800061c:	b04a      	add	sp, #296	; 0x128
 800061e:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8000620:	2042      	movs	r0, #66	; 0x42
 8000622:	e7fb      	b.n	800061c <aci_gatt_update_char_value+0x70>
    return BLE_STATUS_TIMEOUT;
 8000624:	20ff      	movs	r0, #255	; 0xff
 8000626:	e7f9      	b.n	800061c <aci_gatt_update_char_value+0x70>
 8000628:	0106003f 	.word	0x0106003f

0800062c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800062c:	b530      	push	{r4, r5, lr}
 800062e:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8000630:	2cfd      	cmp	r4, #253	; 0xfd
{
 8000632:	b0c9      	sub	sp, #292	; 0x124
 8000634:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8000636:	d824      	bhi.n	8000682 <aci_hal_write_config_data+0x56>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  Osal_MemCpy(buffer + indx, val, len);
 8000638:	4622      	mov	r2, r4
  buffer[indx] = offset;
 800063a:	f88d 0020 	strb.w	r0, [sp, #32]
  Osal_MemCpy(buffer + indx, val, len);
 800063e:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8000642:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  Osal_MemCpy(buffer + indx, val, len);
 8000646:	f000 f849 	bl	80006dc <Osal_MemCpy>
  indx +=  len;
 800064a:	3402      	adds	r4, #2

  Osal_MemSet(&rq, 0, sizeof(rq));
 800064c:	2218      	movs	r2, #24
 800064e:	2100      	movs	r1, #0
 8000650:	a802      	add	r0, sp, #8
 8000652:	f000 f845 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8000656:	b2e4      	uxtb	r4, r4
  rq.ogf = OGF_VENDOR_CMD;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <aci_hal_write_config_data+0x60>)
 800065a:	9302      	str	r3, [sp, #8]
  rq.clen = indx;
 800065c:	f8ad 4014 	strh.w	r4, [sp, #20]
  rq.rparam = &status;
  rq.rlen = 1;
 8000660:	2301      	movs	r3, #1
  buffer[indx] = offset;
 8000662:	ad08      	add	r5, sp, #32
  rq.rparam = &status;
 8000664:	f10d 0407 	add.w	r4, sp, #7

  if (hci_send_req(&rq, FALSE) < 0)
 8000668:	2100      	movs	r1, #0
 800066a:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 800066c:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 800066e:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 8000670:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8000674:	f001 f9d8 	bl	8001a28 <hci_send_req>
 8000678:	2800      	cmp	r0, #0
 800067a:	db04      	blt.n	8000686 <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;

  return status;
 800067c:	7820      	ldrb	r0, [r4, #0]
}
 800067e:	b049      	add	sp, #292	; 0x124
 8000680:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8000682:	2042      	movs	r0, #66	; 0x42
 8000684:	e7fb      	b.n	800067e <aci_hal_write_config_data+0x52>
    return BLE_STATUS_TIMEOUT;
 8000686:	20ff      	movs	r0, #255	; 0xff
 8000688:	e7f9      	b.n	800067e <aci_hal_write_config_data+0x52>
 800068a:	bf00      	nop
 800068c:	000c003f 	.word	0x000c003f

08000690 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8000690:	b500      	push	{lr}
 8000692:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000694:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 8000696:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800069a:	f88d 1005 	strb.w	r1, [sp, #5]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800069e:	a802      	add	r0, sp, #8
 80006a0:	2100      	movs	r1, #0
 80006a2:	f000 f81d 	bl	80006e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <aci_hal_set_tx_power_level+0x48>)
 80006a8:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
  rq.cparam = &cp;
 80006aa:	ab01      	add	r3, sp, #4
 80006ac:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8ad 3014 	strh.w	r3, [sp, #20]
  rq.rparam = &status;
 80006b4:	f10d 0303 	add.w	r3, sp, #3
 80006b8:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80006ba:	2100      	movs	r1, #0
  rq.rlen = 1;
 80006bc:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80006be:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80006c0:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80006c4:	f001 f9b0 	bl	8001a28 <hci_send_req>
 80006c8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80006ca:	bfac      	ite	ge
 80006cc:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80006d0:	20ff      	movlt	r0, #255	; 0xff
}
 80006d2:	b009      	add	sp, #36	; 0x24
 80006d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80006d8:	000f003f 	.word	0x000f003f

080006dc <Osal_MemCpy>:
 *               buffer
 * @retval Pointer to the destination buffer
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
    return(memcpy(dest,src,size)); 
 80006dc:	f003 b8b0 	b.w	8003840 <memcpy>

080006e0 <Osal_MemSet>:
 * @param  size : Number of bytes to be set to "value"
 * @retval Pointer to the filled block of memory
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
    return(memset(ptr,value,size));
 80006e0:	f003 b8bc 	b.w	800385c <memset>

080006e4 <LBS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void LBS_STM_Init(void)
{
 80006e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t uuid;
  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 80006e8:	4860      	ldr	r0, [pc, #384]	; (800086c <LBS_STM_Init+0x188>)

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  	  uuid = testingtest_SVC_UUID;
      aci_gatt_add_serv(UUID_TYPE_16,
 80006ea:	4d61      	ldr	r5, [pc, #388]	; (8000870 <LBS_STM_Init+0x18c>)
{
 80006ec:	b088      	sub	sp, #32
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 80006ee:	f000 f949 	bl	8000984 <SVCCTL_RegisterSvcHandler>
      aci_gatt_add_serv(UUID_TYPE_16,
 80006f2:	2201      	movs	r2, #1
  	  uuid = testingtest_SVC_UUID;
 80006f4:	f641 2331 	movw	r3, #6705	; 0x1a31
 80006f8:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_serv(UUID_TYPE_16,
 80006fc:	f10d 011e 	add.w	r1, sp, #30
 8000700:	9500      	str	r5, [sp, #0]
 8000702:	230e      	movs	r3, #14
 8000704:	4610      	mov	r0, r2
 8000706:	f7ff fea9 	bl	800045c <aci_gatt_add_serv>
                        (const uint8_t *) &uuid,
                        PRIMARY_SERVICE,
                        14,
                        &(testingtestContext.testing_Svc_Hdle));

      uuid = testingtest_SSID_UUID;
 800070a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800070e:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8000712:	462b      	mov	r3, r5
 8000714:	2401      	movs	r4, #1
 8000716:	f833 0b02 	ldrh.w	r0, [r3], #2
 800071a:	9305      	str	r3, [sp, #20]
 800071c:	270a      	movs	r7, #10
 800071e:	2600      	movs	r6, #0
 8000720:	f04f 0806 	mov.w	r8, #6
 8000724:	231e      	movs	r3, #30
 8000726:	eb0d 0203 	add.w	r2, sp, r3
 800072a:	4621      	mov	r1, r4
 800072c:	e9cd 7403 	strd	r7, r4, [sp, #12]
 8000730:	e9cd 8600 	strd	r8, r6, [sp]
 8000734:	9402      	str	r4, [sp, #8]
 8000736:	f7ff fed3 	bl	80004e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_SSID_Hdle));

      uuid = testingtest_PW_UUID;
 800073a:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 800073e:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8000742:	462b      	mov	r3, r5
 8000744:	4621      	mov	r1, r4
 8000746:	f833 0b04 	ldrh.w	r0, [r3], #4
 800074a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800074e:	231e      	movs	r3, #30
 8000750:	eb0d 0203 	add.w	r2, sp, r3
 8000754:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8000758:	e9cd 8600 	strd	r8, r6, [sp]
 800075c:	f7ff fec0 	bl	80004e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_PW_Hdle));

      uuid = testingtest_NAME_UUID;
 8000760:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 8000764:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8000768:	462b      	mov	r3, r5
 800076a:	4621      	mov	r1, r4
 800076c:	f833 0b06 	ldrh.w	r0, [r3], #6
 8000770:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000774:	231e      	movs	r3, #30
 8000776:	eb0d 0203 	add.w	r2, sp, r3
 800077a:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800077e:	e9cd 8600 	strd	r8, r6, [sp]
 8000782:	f7ff fead 	bl	80004e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_NAME_Hdle));

      uuid = testingtest_IP_UUID;
 8000786:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800078a:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 800078e:	462b      	mov	r3, r5
 8000790:	f10d 021e 	add.w	r2, sp, #30
 8000794:	f833 0b08 	ldrh.w	r0, [r3], #8
 8000798:	4621      	mov	r1, r4
 800079a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800079e:	e9cd 4702 	strd	r4, r7, [sp, #8]
 80007a2:	e9cd 8600 	strd	r8, r6, [sp]
 80007a6:	2304      	movs	r3, #4
 80007a8:	f7ff fe9a 	bl	80004e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_IP_Hdle));

      uuid = testingtest_OP_UUID;
 80007ac:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80007b0:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 80007b4:	462b      	mov	r3, r5
 80007b6:	f10d 021e 	add.w	r2, sp, #30
 80007ba:	f833 0b0a 	ldrh.w	r0, [r3], #10
 80007be:	4621      	mov	r1, r4
 80007c0:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80007c4:	e9cd 4702 	strd	r4, r7, [sp, #8]
 80007c8:	e9cd 8600 	strd	r8, r6, [sp]
 80007cc:	2302      	movs	r3, #2
 80007ce:	f7ff fe87 	bl	80004e0 <aci_gatt_add_char>
                            ATTR_PERMISSION_NONE,
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_OP_Hdle));
      uuid = testingtest_OPwDesc_UUID;
 80007d2:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 80007d6:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 80007da:	462b      	mov	r3, r5
 80007dc:	4621      	mov	r1, r4
 80007de:	f833 0b0c 	ldrh.w	r0, [r3], #12
 80007e2:	9601      	str	r6, [sp, #4]
 80007e4:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80007e8:	2312      	movs	r3, #18
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	231e      	movs	r3, #30
 80007ee:	eb0d 0203 	add.w	r2, sp, r3
 80007f2:	e9cd 4702 	strd	r4, r7, [sp, #8]
 80007f6:	f7ff fe73 	bl	80004e0 <aci_gatt_add_char>
      //aci_gatt_write_charac_value(conn_handle, attr_handle, value_len, attr_value)

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    uuid = LED_BUTTON_SERVICE_UUID;
 80007fa:	f641 2330 	movw	r3, #6704	; 0x1a30
 80007fe:	f8ad 301e 	strh.w	r3, [sp, #30]
    aci_gatt_add_serv(UUID_TYPE_16,
 8000802:	f105 030e 	add.w	r3, r5, #14
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	4622      	mov	r2, r4
 800080a:	4643      	mov	r3, r8
 800080c:	f10d 011e 	add.w	r1, sp, #30
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fe23 	bl	800045c <aci_gatt_add_serv>
                      &(aLedButtonContext.LedButtonSvcHdle));

    /**
     *  Add LED Characteristic
     */
    uuid = LED_CHAR_UUID;
 8000816:	f642 3350 	movw	r3, #11088	; 0x2b50
 800081a:	f8ad 301e 	strh.w	r3, [sp, #30]
   
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 800081e:	f105 0310 	add.w	r3, r5, #16
 8000822:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000826:	f10d 021e 	add.w	r2, sp, #30
 800082a:	4621      	mov	r1, r4
 800082c:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8000830:	e9cd 8600 	strd	r8, r6, [sp]
 8000834:	89e8      	ldrh	r0, [r5, #14]
 8000836:	2302      	movs	r3, #2
 8000838:	f7ff fe52 	bl	80004e0 <aci_gatt_add_char>
                      &(aLedButtonContext.LedsCharHdle));

    /**
     *   Add Button Characteristic
     */
    uuid = BUTTON_CHAR_UUID;
 800083c:	f642 3351 	movw	r3, #11089	; 0x2b51
 8000840:	f8ad 301e 	strh.w	r3, [sp, #30]
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 8000844:	f105 0312 	add.w	r3, r5, #18
 8000848:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800084c:	2310      	movs	r3, #16
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8000854:	89e8      	ldrh	r0, [r5, #14]
 8000856:	9601      	str	r6, [sp, #4]
 8000858:	2302      	movs	r3, #2
 800085a:	f10d 021e 	add.w	r2, sp, #30
 800085e:	4621      	mov	r1, r4
 8000860:	f7ff fe3e 	bl	80004e0 <aci_gatt_add_char>
    
    APPL_MESG_DBG("-- Led Button Service (LBS) is added Successfully %04X\n", 
                 aLedButtonContext.LedButtonSvcHdle);

  return;
}
 8000864:	b008      	add	sp, #32
 8000866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800086a:	bf00      	nop
 800086c:	0800089d 	.word	0x0800089d
 8000870:	20000064 	.word	0x20000064

08000874 <BLE_SVC_LedButton_Update_Char>:
 * 
 */
tBleStatus BLE_SVC_LedButton_Update_Char(uint16_t UUID, uint8_t *pPayload) //LED_BUTTON_Data_t *pDataValue)
{
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 8000874:	f642 3351 	movw	r3, #11089	; 0x2b51
 8000878:	4298      	cmp	r0, r3
{
 800087a:	b507      	push	{r0, r1, r2, lr}
  switch(UUID)
 800087c:	d10a      	bne.n	8000894 <BLE_SVC_LedButton_Update_Char+0x20>
  {
    case BUTTON_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aLedButtonContext.LedButtonSvcHdle,
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <BLE_SVC_LedButton_Update_Char+0x24>)
 8000880:	9100      	str	r1, [sp, #0]
 8000882:	8a41      	ldrh	r1, [r0, #18]
 8000884:	89c0      	ldrh	r0, [r0, #14]
 8000886:	2302      	movs	r3, #2
 8000888:	2200      	movs	r2, #0
 800088a:	f7ff fe8f 	bl	80005ac <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}/* end LBS_STM_Init() */
 800088e:	b003      	add	sp, #12
 8000890:	f85d fb04 	ldr.w	pc, [sp], #4
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8000894:	2042      	movs	r0, #66	; 0x42
 8000896:	e7fa      	b.n	800088e <BLE_SVC_LedButton_Update_Char+0x1a>
 8000898:	20000064 	.word	0x20000064

0800089c <LedButton_Event_Handler>:
{
 800089c:	b530      	push	{r4, r5, lr}
  switch(event_pckt->evt)
 800089e:	7843      	ldrb	r3, [r0, #1]
 80008a0:	2bff      	cmp	r3, #255	; 0xff
{
 80008a2:	b085      	sub	sp, #20
 80008a4:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 80008a6:	d160      	bne.n	800096a <LedButton_Event_Handler+0xce>
      switch(blue_evt->ecode)
 80008a8:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 80008ac:	f640 4301 	movw	r3, #3073	; 0xc01
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d15a      	bne.n	800096a <LedButton_Event_Handler+0xce>
            if(attribute_modified->attr_handle == (testingtestContext.testing_SSID_Hdle + 1))
 80008b4:	4d2e      	ldr	r5, [pc, #184]	; (8000970 <LedButton_Event_Handler+0xd4>)
 80008b6:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 80008ba:	886b      	ldrh	r3, [r5, #2]
 80008bc:	3301      	adds	r3, #1
 80008be:	429a      	cmp	r2, r3
 80008c0:	d10b      	bne.n	80008da <LedButton_Event_Handler+0x3e>
                          Notification.LBS_Evt_Opcode = POTATO_SSID_EVT;
 80008c2:	2304      	movs	r3, #4
 80008c4:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 80008c8:	7a43      	ldrb	r3, [r0, #9]
 80008ca:	f88d 3008 	strb.w	r3, [sp, #8]
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 80008ce:	f100 030c 	add.w	r3, r0, #12
                          LBS_App_Notification(&Notification);
 80008d2:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 80008d4:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 80008d6:	f001 fc57 	bl	8002188 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_PW_Hdle + 1))
 80008da:	88ab      	ldrh	r3, [r5, #4]
 80008dc:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 80008e0:	3301      	adds	r3, #1
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d10b      	bne.n	80008fe <LedButton_Event_Handler+0x62>
                          Notification.LBS_Evt_Opcode = POTATO_PW_EVT;
 80008e6:	2305      	movs	r3, #5
 80008e8:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 80008ec:	7a63      	ldrb	r3, [r4, #9]
 80008ee:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 80008f2:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 80008f4:	f104 030c 	add.w	r3, r4, #12
 80008f8:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 80008fa:	f001 fc45 	bl	8002188 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_NAME_Hdle + 1))
 80008fe:	88eb      	ldrh	r3, [r5, #6]
 8000900:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8000904:	3301      	adds	r3, #1
 8000906:	429a      	cmp	r2, r3
 8000908:	d10b      	bne.n	8000922 <LedButton_Event_Handler+0x86>
                          Notification.LBS_Evt_Opcode = POTATO_NAME_EVT;
 800090a:	2306      	movs	r3, #6
 800090c:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 8000910:	7a63      	ldrb	r3, [r4, #9]
 8000912:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 8000916:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8000918:	f104 030c 	add.w	r3, r4, #12
 800091c:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 800091e:	f001 fc33 	bl	8002188 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_IP_Hdle + 1))
 8000922:	892b      	ldrh	r3, [r5, #8]
 8000924:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8000928:	3301      	adds	r3, #1
 800092a:	429a      	cmp	r2, r3
 800092c:	d10b      	bne.n	8000946 <LedButton_Event_Handler+0xaa>
                          Notification.LBS_Evt_Opcode = POTATO_IP_EVT;
 800092e:	2307      	movs	r3, #7
 8000930:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 8000934:	7a63      	ldrb	r3, [r4, #9]
 8000936:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 800093a:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 800093c:	f104 030c 	add.w	r3, r4, #12
 8000940:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 8000942:	f001 fc21 	bl	8002188 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_OP_Hdle + 1))
 8000946:	896b      	ldrh	r3, [r5, #10]
 8000948:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 800094c:	3301      	adds	r3, #1
 800094e:	429a      	cmp	r2, r3
 8000950:	d10b      	bne.n	800096a <LedButton_Event_Handler+0xce>
                          Notification.LBS_Evt_Opcode = POTATO_OP_EVT;
 8000952:	2308      	movs	r3, #8
 8000954:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8000958:	340c      	adds	r4, #12
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 800095a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 800095e:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 8000962:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8000964:	9401      	str	r4, [sp, #4]
                          LBS_App_Notification(&Notification);
 8000966:	f001 fc0f 	bl	8002188 <LBS_App_Notification>
}/* end SVCCTL_EvtAckStatus_t */
 800096a:	2000      	movs	r0, #0
 800096c:	b005      	add	sp, #20
 800096e:	bd30      	pop	{r4, r5, pc}
 8000970:	20000064 	.word	0x20000064

08000974 <DIS_Init>:
/* Fake __Weak functions ------------------------------------------------------*/
/* This is a dirty trick to avoid putting compilation flags to say which service are included */	
/* If the related service is added in the project space its Init function will be used */
/* Otherwise the dummy __Weak function allow to avoid the compilatio error */

__weak void DIS_Init(uint16_t *p_options) {}
 8000974:	4770      	bx	lr

08000976 <HRS_Init>:
__weak void HRS_Init(void) {}
 8000976:	4770      	bx	lr

08000978 <ANS_Init>:
 8000978:	4770      	bx	lr

0800097a <HIDS_Init>:
 800097a:	4770      	bx	lr

0800097c <HPS_Init>:
 800097c:	4770      	bx	lr

0800097e <IPSS_Init>:
 800097e:	4770      	bx	lr

08000980 <LNS_Init>:
 8000980:	4770      	bx	lr

08000982 <SCPS_Init>:
 8000982:	4770      	bx	lr

08000984 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler(SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler)
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8000984:	4a03      	ldr	r2, [pc, #12]	; (8000994 <SVCCTL_RegisterSvcHandler+0x10>)
 8000986:	7a13      	ldrb	r3, [r2, #8]
 8000988:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800098c:	3301      	adds	r3, #1
 800098e:	7213      	strb	r3, [r2, #8]

  return;
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000b00 	.word	0x20000b00

08000998 <SVCCTL_HCI_UserEvtRx>:

  return;
}

void SVCCTL_HCI_UserEvtRx(void *pckt)
{
 8000998:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch(event_pckt->evt)
 800099a:	7843      	ldrb	r3, [r0, #1]
 800099c:	2bff      	cmp	r3, #255	; 0xff
{
 800099e:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 80009a0:	d004      	beq.n	80009ac <SVCCTL_HCI_UserEvtRx+0x14>
  {
    /**
     *  The event has NOT been managed.
     *  It shall be passed to the application for processing
     */
    SVCCTL_App_Notification(pckt);
 80009a2:	4620      	mov	r0, r4

  }

  return;
}
 80009a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SVCCTL_App_Notification(pckt);
 80009a8:	f001 bb82 	b.w	80020b0 <SVCCTL_App_Notification>
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80009ac:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 80009b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80009b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80009b8:	d1f3      	bne.n	80009a2 <SVCCTL_HCI_UserEvtRx+0xa>
          for(index = 0; index <SVCCTL_EvtHandler.NbreOfRegisteredHandler ; index++)
 80009ba:	4e0d      	ldr	r6, [pc, #52]	; (80009f0 <SVCCTL_HCI_UserEvtRx+0x58>)
 80009bc:	2500      	movs	r5, #0
 80009be:	7a32      	ldrb	r2, [r6, #8]
 80009c0:	b2eb      	uxtb	r3, r5
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d906      	bls.n	80009d4 <SVCCTL_HCI_UserEvtRx+0x3c>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80009c6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80009ca:	4620      	mov	r0, r4
 80009cc:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 80009ce:	3501      	adds	r5, #1
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d0f4      	beq.n	80009be <SVCCTL_HCI_UserEvtRx+0x26>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler ; index++)
 80009d4:	4e07      	ldr	r6, [pc, #28]	; (80009f4 <SVCCTL_HCI_UserEvtRx+0x5c>)
 80009d6:	2500      	movs	r5, #0
 80009d8:	7a32      	ldrb	r2, [r6, #8]
 80009da:	b2eb      	uxtb	r3, r5
 80009dc:	429a      	cmp	r2, r3
 80009de:	d9e0      	bls.n	80009a2 <SVCCTL_HCI_UserEvtRx+0xa>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 80009e0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80009e4:	4620      	mov	r0, r4
 80009e6:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 80009e8:	3501      	adds	r5, #1
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d0f4      	beq.n	80009d8 <SVCCTL_HCI_UserEvtRx+0x40>
}
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	20000b00 	.word	0x20000b00
 80009f4:	20000af4 	.word	0x20000af4

080009f8 <SVCCTL_GetBdAddress>:
           instead of using the harcoded value in the config.h
  */
__weak const uint8_t* SVCCTL_GetBdAddress( void )
{
  return M_bd_addr;
}
 80009f8:	4800      	ldr	r0, [pc, #0]	; (80009fc <SVCCTL_GetBdAddress+0x4>)
 80009fa:	4770      	bx	lr
 80009fc:	08003888 	.word	0x08003888

08000a00 <SVCCTL_Init>:
{
 8000a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const uint8_t mode = BLE_CFG_DATA_ROLE_MODE;
 8000a02:	2304      	movs	r3, #4
 8000a04:	f88d 3009 	strb.w	r3, [sp, #9]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <SVCCTL_Init+0x88>)
 8000a0a:	2400      	movs	r4, #0
 8000a0c:	721c      	strb	r4, [r3, #8]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <SVCCTL_Init+0x8c>)
 8000a10:	721c      	strb	r4, [r3, #8]
  bd_addr = SVCCTL_GetBdAddress();
 8000a12:	f7ff fff1 	bl	80009f8 <SVCCTL_GetBdAddress>
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000a16:	2106      	movs	r1, #6
  bd_addr = SVCCTL_GetBdAddress();
 8000a18:	4602      	mov	r2, r0
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f7ff fe06 	bl	800062c <aci_hal_write_config_data>
  aci_hal_write_config_data(CONFIG_DATA_MODE_OFFSET,
 8000a20:	f10d 0209 	add.w	r2, sp, #9
 8000a24:	2101      	movs	r1, #1
 8000a26:	202d      	movs	r0, #45	; 0x2d
 8000a28:	f7ff fe00 	bl	800062c <aci_hal_write_config_data>
  aci_gatt_init();
 8000a2c:	f7ff fcf8 	bl	8000420 <aci_gatt_init>
    aci_gap_init(role,
 8000a30:	f10d 030e 	add.w	r3, sp, #14
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	ab03      	add	r3, sp, #12
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	4621      	mov	r1, r4
 8000a3c:	f10d 030a 	add.w	r3, sp, #10
 8000a40:	2207      	movs	r2, #7
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fbc0 	bl	80001c8 <aci_gap_init>
    if(aci_gatt_update_char_value(gap_service_handle,
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <SVCCTL_Init+0x90>)
 8000a4a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	4622      	mov	r2, r4
 8000a52:	2307      	movs	r3, #7
 8000a54:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8000a58:	f7ff fda8 	bl	80005ac <aci_gatt_update_char_value>
  HRS_Init();
 8000a5c:	f7ff ff8b 	bl	8000976 <HRS_Init>
  DIS_Init(NULL);
 8000a60:	4620      	mov	r0, r4
 8000a62:	f7ff ff87 	bl	8000974 <DIS_Init>
  SCPS_Init();
 8000a66:	f7ff ff8c 	bl	8000982 <SCPS_Init>
  ANS_Init();
 8000a6a:	f7ff ff85 	bl	8000978 <ANS_Init>
HIDS_Init();
 8000a6e:	f7ff ff84 	bl	800097a <HIDS_Init>
LNS_Init();
 8000a72:	f7ff ff85 	bl	8000980 <LNS_Init>
IPSS_Init();
 8000a76:	f7ff ff82 	bl	800097e <IPSS_Init>
HPS_Init();
 8000a7a:	f7ff ff7f 	bl	800097c <HPS_Init>
BLESVC_InitCustomSvc();
 8000a7e:	f001 fb46 	bl	800210e <BLESVC_InitCustomSvc>
}
 8000a82:	b004      	add	sp, #16
 8000a84:	bd10      	pop	{r4, pc}
 8000a86:	bf00      	nop
 8000a88:	20000b00 	.word	0x20000b00
 8000a8c:	20000af4 	.word	0x20000af4
 8000a90:	080038f8 	.word	0x080038f8

08000a94 <HW_SleepMode>:
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a94:	4a03      	ldr	r2, [pc, #12]	; (8000aa4 <HW_SleepMode+0x10>)
 8000a96:	6913      	ldr	r3, [r2, #16]
 8000a98:	f023 0304 	bic.w	r3, r3, #4
 8000a9c:	6113      	str	r3, [r2, #16]
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 8000a9e:	bf30      	wfi

  return;
}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <HW_StopMode>:
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HW_StopMode+0x1c>)
 8000aaa:	6813      	ldr	r3, [r2, #0]
 8000aac:	f023 0307 	bic.w	r3, r3, #7
 8000ab0:	4318      	orrs	r0, r3
 8000ab2:	6010      	str	r0, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HW_StopMode+0x20>)
 8000ab6:	6913      	ldr	r3, [r2, #16]
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6113      	str	r3, [r2, #16]
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 8000abe:	bf30      	wfi

  return;
}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40007000 	.word	0x40007000
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <HW_OffMode>:
 8000acc:	f7ff bfec 	b.w	8000aa8 <HW_StopMode>

08000ad0 <pf_nRFResetTimerCallBack>:
 * @param  None
 * @retval None
 */
static void pf_nRFResetTimerCallBack(void)
{
  RfResetTimerLock = 0;
 8000ad0:	4b01      	ldr	r3, [pc, #4]	; (8000ad8 <pf_nRFResetTimerCallBack+0x8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]

  return;
}
 8000ad6:	4770      	bx	lr
 8000ad8:	20000078 	.word	0x20000078

08000adc <TimerTxRxCallback>:
 * @param  None
 * @retval None
 */
static void TimerTxRxCallback(void)
{
  pTimerTxRxCallback();
 8000adc:	4b01      	ldr	r3, [pc, #4]	; (8000ae4 <TimerTxRxCallback+0x8>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4718      	bx	r3
 8000ae2:	bf00      	nop
 8000ae4:	20000078 	.word	0x20000078

08000ae8 <Enable_SPI_CS>:
 * @retval None
 */
static void Enable_SPI_CS(void)
{
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <Enable_SPI_CS+0xc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af0:	f002 b982 	b.w	8002df8 <HAL_GPIO_WritePin>
 8000af4:	48000c00 	.word	0x48000c00

08000af8 <Disable_SPI_CS>:
 * @param  None
 * @retval None
 */
static void Disable_SPI_CS(void)
{
  while (__HAL_SPI_GET_FLAG(&SpiHandle,SPI_FLAG_BSY) == SET);
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <Disable_SPI_CS+0x18>)
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	6893      	ldr	r3, [r2, #8]
 8000afe:	061b      	lsls	r3, r3, #24
 8000b00:	d4fc      	bmi.n	8000afc <Disable_SPI_CS+0x4>

  /* CS set */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <Disable_SPI_CS+0x1c>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	f002 b975 	b.w	8002df8 <HAL_GPIO_WritePin>
 8000b0e:	bf00      	nop
 8000b10:	20000078 	.word	0x20000078
 8000b14:	48000c00 	.word	0x48000c00

08000b18 <DisableEnable_SPI_CS>:
 * @brief  Disable and Enable SPI CS.
 * @param  None
 * @retval None
 */
static void DisableEnable_SPI_CS(void)
{
 8000b18:	b508      	push	{r3, lr}
  uint8_t localloop;
  Disable_SPI_CS(); /**< CS Set */
 8000b1a:	f7ff ffed 	bl	8000af8 <Disable_SPI_CS>
 8000b1e:	230d      	movs	r3, #13

  /* CS set */
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
  {
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 8000b20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b24:	3b01      	subs	r3, #1
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 8000b26:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 8000b2a:	6811      	ldr	r1, [r2, #0]
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 8000b2c:	d1fa      	bne.n	8000b24 <DisableEnable_SPI_CS+0xc>
  }

  Enable_SPI_CS(); /**< CS Reset */

  return;
}
 8000b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Enable_SPI_CS(); /**< CS Reset */
 8000b32:	f7ff bfd9 	b.w	8000ae8 <Enable_SPI_CS>
	...

08000b38 <Enable_SPI_Receiving_Path>:
{  
 8000b38:	b538      	push	{r3, r4, r5, lr}
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 8000b3a:	4c09      	ldr	r4, [pc, #36]	; (8000b60 <Enable_SPI_Receiving_Path+0x28>)
 8000b3c:	2540      	movs	r5, #64	; 0x40
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 8000b3e:	2017      	movs	r0, #23
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 8000b40:	6165      	str	r5, [r4, #20]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 8000b42:	f001 fe79 	bl	8002838 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
 8000b46:	2017      	movs	r0, #23
 8000b48:	f001 fe44 	bl	80027d4 <HAL_NVIC_EnableIRQ>
  if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_SET)
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <Enable_SPI_Receiving_Path+0x2c>)
 8000b4e:	4629      	mov	r1, r5
 8000b50:	f002 f94c 	bl	8002dec <HAL_GPIO_ReadPin>
 8000b54:	2801      	cmp	r0, #1
    __HAL_GPIO_EXTI_GENERATE_SWIT(BNRG_SPI_IRQ_PIN);
 8000b56:	bf02      	ittt	eq
 8000b58:	6923      	ldreq	r3, [r4, #16]
 8000b5a:	432b      	orreq	r3, r5
 8000b5c:	6123      	streq	r3, [r4, #16]
}
 8000b5e:	bd38      	pop	{r3, r4, r5, pc}
 8000b60:	40010400 	.word	0x40010400
 8000b64:	48001000 	.word	0x48001000

08000b68 <LL_DMA_SetDataLength.constprop.0>:
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <LL_DMA_SetDataLength.constprop.0+0x18>)
 8000b6a:	5c1a      	ldrb	r2, [r3, r0]
 8000b6c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000b70:	f502 3201 	add.w	r2, r2, #132096	; 0x20400
 8000b74:	6853      	ldr	r3, [r2, #4]
 8000b76:	0c1b      	lsrs	r3, r3, #16
 8000b78:	041b      	lsls	r3, r3, #16
 8000b7a:	4319      	orrs	r1, r3
 8000b7c:	6051      	str	r1, [r2, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000b7e:	4770      	bx	lr
 8000b80:	0800388e 	.word	0x0800388e

08000b84 <ReceiveHeader>:
 *               the configuration information for SPI module.
 * @param  DataHeader: buffer holding the header to receive
 * @retval None
 */
static void ReceiveHeader(SPI_RECEIVE_EVENT_t ReceiveEvent, uint8_t * DataHeader)
{
 8000b84:	b570      	push	{r4, r5, r6, lr}
  SpiContext.SpiReceiveContext.SpiReceiveEvent = ReceiveEvent;
 8000b86:	4c0b      	ldr	r4, [pc, #44]	; (8000bb4 <ReceiveHeader+0x30>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000b88:	4d0b      	ldr	r5, [pc, #44]	; (8000bb8 <ReceiveHeader+0x34>)
 8000b8a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	602b      	str	r3, [r5, #0]
{
 8000b96:	460e      	mov	r6, r1
  LL_DMA_SetMemoryIncMode(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, LL_DMA_MEMORY_INCREMENT);  /**< Configure DMA to send Tx packet */

  /*
   *  Set counter in both DMA
   */
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, HEADER_SIZE);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	2105      	movs	r1, #5
 8000b9c:	f7ff ffe4 	bl	8000b68 <LL_DMA_SetDataLength.constprop.0>
  LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, HEADER_SIZE);
 8000ba0:	2105      	movs	r1, #5
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff ffe0 	bl	8000b68 <LL_DMA_SetDataLength.constprop.0>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <ReceiveHeader+0x38>)

  /*
   *  Set memory address in both DMA
   */
  LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)ReceivedHeader);
 8000baa:	348c      	adds	r4, #140	; 0x8c
 8000bac:	60dc      	str	r4, [r3, #12]
 8000bae:	60ee      	str	r6, [r5, #12]
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)DataHeader);

  return;
}
 8000bb0:	bd70      	pop	{r4, r5, r6, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000078 	.word	0x20000078
 8000bb8:	4002041c 	.word	0x4002041c
 8000bbc:	40020408 	.word	0x40020408

08000bc0 <SPI_Receive_Manager>:
{
 8000bc0:	b570      	push	{r4, r5, r6, lr}
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8000bc2:	4c36      	ldr	r4, [pc, #216]	; (8000c9c <SPI_Receive_Manager+0xdc>)
 8000bc4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	6811      	ldr	r1, [r2, #0]
 8000bca:	f021 0101 	bic.w	r1, r1, #1
 8000bce:	6011      	str	r1, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8000bd0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8000bd2:	6809      	ldr	r1, [r1, #0]
 8000bd4:	680d      	ldr	r5, [r1, #0]
 8000bd6:	f025 0501 	bic.w	r5, r5, #1
 8000bda:	600d      	str	r5, [r1, #0]
    *(volatile uint8_t*)LL_SPI_DMA_GetRegAddr(BNRG_SPI_INSTANCE);
 8000bdc:	4d30      	ldr	r5, [pc, #192]	; (8000ca0 <SPI_Receive_Manager+0xe0>)
 8000bde:	7b2e      	ldrb	r6, [r5, #12]
 8000be0:	7b2e      	ldrb	r6, [r5, #12]
 8000be2:	7b2e      	ldrb	r6, [r5, #12]
 8000be4:	7b2d      	ldrb	r5, [r5, #12]
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmarx, DMA_IT_TC);  /**< Enable Receive packet notification */
 8000be6:	680d      	ldr	r5, [r1, #0]
 8000be8:	f045 0502 	orr.w	r5, r5, #2
 8000bec:	600d      	str	r5, [r1, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 8000bee:	6811      	ldr	r1, [r2, #0]
  switch (ReceiveRequest)
 8000bf0:	2801      	cmp	r0, #1
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 8000bf2:	f021 0102 	bic.w	r1, r1, #2
 8000bf6:	6011      	str	r1, [r2, #0]
  switch (ReceiveRequest)
 8000bf8:	d012      	beq.n	8000c20 <SPI_Receive_Manager+0x60>
 8000bfa:	2802      	cmp	r0, #2
 8000bfc:	d012      	beq.n	8000c24 <SPI_Receive_Manager+0x64>
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_RX, (uint8_t *)ReadHeaderCmd);
 8000bfe:	4929      	ldr	r1, [pc, #164]	; (8000ca4 <SPI_Receive_Manager+0xe4>)
 8000c00:	2000      	movs	r0, #0
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 8000c02:	f7ff ffbf 	bl	8000b84 <ReceiveHeader>
  __HAL_DMA_ENABLE(SpiHandle.hdmarx);
 8000c06:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	6813      	ldr	r3, [r2, #0]
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx);
 8000c12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	6813      	ldr	r3, [r2, #0]
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6013      	str	r3, [r2, #0]
}
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 8000c20:	4921      	ldr	r1, [pc, #132]	; (8000ca8 <SPI_Receive_Manager+0xe8>)
 8000c22:	e7ee      	b.n	8000c02 <SPI_Receive_Manager+0x42>
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 8000c24:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 8000c28:	f8b4 5078 	ldrh.w	r5, [r4, #120]	; 0x78
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 8000c2c:	2b01      	cmp	r3, #1
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8000c2e:	bf1b      	ittet	ne
 8000c30:	f894 308f 	ldrbne.w	r3, [r4, #143]	; 0x8f
 8000c34:	f894 2090 	ldrbne.w	r2, [r4, #144]	; 0x90
        byte_count = SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive;
 8000c38:	f8b4 307a 	ldrheq.w	r3, [r4, #122]	; 0x7a
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8000c3c:	ea43 2302 	orrne.w	r3, r3, r2, lsl #8
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive = byte_count;
 8000c40:	bf18      	it	ne
 8000c42:	f8a4 307a 	strhne.w	r3, [r4, #122]	; 0x7a
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 8000c46:	429d      	cmp	r5, r3
 8000c48:	d21f      	bcs.n	8000c8a <SPI_Receive_Manager+0xca>
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive -= byte_count;
 8000c4a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
 8000c4e:	1b5b      	subs	r3, r3, r5
 8000c50:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_PAYLOAD_CONT;
 8000c54:	2302      	movs	r3, #2
 8000c56:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        SpiContext.SpiReceiveContext.PacketCont = TRUE;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000c60:	4e12      	ldr	r6, [pc, #72]	; (8000cac <SPI_Receive_Manager+0xec>)
      SpiContext.SpiReceiveContext.PayloadLength = byte_count;
 8000c62:	f8a4 5072 	strh.w	r5, [r4, #114]	; 0x72
 8000c66:	6833      	ldr	r3, [r6, #0]
 8000c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c6c:	6033      	str	r3, [r6, #0]
      LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, byte_count);
 8000c6e:	4629      	mov	r1, r5
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff ff79 	bl	8000b68 <LL_DMA_SetDataLength.constprop.0>
      LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, byte_count);
 8000c76:	4629      	mov	r1, r5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff ff75 	bl	8000b68 <LL_DMA_SetDataLength.constprop.0>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <SPI_Receive_Manager+0xf0>)
      LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)SpiContext.SpiReceiveContext.pBuffer);
 8000c80:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8000c82:	60da      	str	r2, [r3, #12]
      LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)&DummyBytes);
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <SPI_Receive_Manager+0xf4>)
 8000c86:	60f3      	str	r3, [r6, #12]
}
 8000c88:	e7bd      	b.n	8000c06 <SPI_Receive_Manager+0x46>
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_END;
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8000c90:	2200      	movs	r2, #0
 8000c92:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
 8000c96:	461d      	mov	r5, r3
 8000c98:	e7e2      	b.n	8000c60 <SPI_Receive_Manager+0xa0>
 8000c9a:	bf00      	nop
 8000c9c:	20000078 	.word	0x20000078
 8000ca0:	40003c00 	.word	0x40003c00
 8000ca4:	08003895 	.word	0x08003895
 8000ca8:	0800389a 	.word	0x0800389a
 8000cac:	4002041c 	.word	0x4002041c
 8000cb0:	40020408 	.word	0x40020408
 8000cb4:	0800389f 	.word	0x0800389f

08000cb8 <TimerTransmitCallback>:
{
 8000cb8:	b508      	push	{r3, lr}
  SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff ff80 	bl	8000bc0 <SPI_Receive_Manager>
}
 8000cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_En);
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f001 b862 	b.w	8001d90 <LPM_SetStopMode>

08000ccc <HAL_SPI_MspInit>:
{
 8000ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 8000cd0:	6802      	ldr	r2, [r0, #0]
 8000cd2:	4b6d      	ldr	r3, [pc, #436]	; (8000e88 <HAL_SPI_MspInit+0x1bc>)
 8000cd4:	429a      	cmp	r2, r3
{
 8000cd6:	b08d      	sub	sp, #52	; 0x34
 8000cd8:	4606      	mov	r6, r0
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 8000cda:	f040 80d1 	bne.w	8000e80 <HAL_SPI_MspInit+0x1b4>
    BNRG_SPI_SCLK_CLK_ENABLE();
 8000cde:	4c6b      	ldr	r4, [pc, #428]	; (8000e8c <HAL_SPI_MspInit+0x1c0>)
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 8000ce0:	486b      	ldr	r0, [pc, #428]	; (8000e90 <HAL_SPI_MspInit+0x1c4>)
    BNRG_SPI_SCLK_CLK_ENABLE();
 8000ce2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000cea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	9b00      	ldr	r3, [sp, #0]
    BNRG_SPI_MISO_CLK_ENABLE();
 8000cf4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000cfc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	9b01      	ldr	r3, [sp, #4]
    BNRG_SPI_MOSI_CLK_ENABLE();
 8000d06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000d0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	9b02      	ldr	r3, [sp, #8]
    BNRG_SPI_CS_CLK_ENABLE();
 8000d18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000d20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	9303      	str	r3, [sp, #12]
 8000d28:	9b03      	ldr	r3, [sp, #12]
    BNRG_SPI_IRQ_CLK_ENABLE();
 8000d2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000d32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	9304      	str	r3, [sp, #16]
 8000d3a:	9b04      	ldr	r3, [sp, #16]
    BNRG_SPI_CLK_ENABLE();
 8000d3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d42:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 8000d4c:	2500      	movs	r5, #0
 8000d4e:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 8000d50:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 8000d54:	f04f 0906 	mov.w	r9, #6
    BNRG_SPI_CLK_ENABLE();
 8000d58:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 8000d5a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d60:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 8000d64:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 8000d68:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 8000d6c:	f001 ff60 	bl	8002c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
 8000d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8000d74:	4846      	ldr	r0, [pc, #280]	; (8000e90 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
 8000d76:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8000d7a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
 8000d7c:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
 8000d80:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8000d84:	f001 ff54 	bl	8002c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 8000d8c:	4840      	ldr	r0, [pc, #256]	; (8000e90 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
 8000d8e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 8000d92:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
 8000d94:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
 8000d98:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 8000d9c:	f001 ff48 	bl	8002c30 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	483c      	ldr	r0, [pc, #240]	; (8000e94 <HAL_SPI_MspInit+0x1c8>)
 8000da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da8:	f002 f826 	bl	8002df8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 8000dac:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8000db0:	f04f 0a01 	mov.w	sl, #1
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8000db4:	4837      	ldr	r0, [pc, #220]	; (8000e94 <HAL_SPI_MspInit+0x1c8>)
    GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
 8000db6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8000db8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
 8000dba:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 8000dbe:	e9cd ba07 	strd	fp, sl, [sp, #28]
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8000dc2:	f001 ff35 	bl	8002c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8000dc6:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <HAL_SPI_MspInit+0x1cc>)
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8000dc8:	4834      	ldr	r0, [pc, #208]	; (8000e9c <HAL_SPI_MspInit+0x1d0>)
    GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
 8000dca:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8000dcc:	2240      	movs	r2, #64	; 0x40
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8000dce:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8000dd0:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
 8000dd4:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8000dd8:	f001 ff2a 	bl	8002c30 <HAL_GPIO_Init>
    BNRG_DMA_CLK_ENABLE();   
 8000ddc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8000dde:	4930      	ldr	r1, [pc, #192]	; (8000ea0 <HAL_SPI_MspInit+0x1d4>)
    BNRG_DMA_CLK_ENABLE();   
 8000de0:	ea43 0308 	orr.w	r3, r3, r8
 8000de4:	64a3      	str	r3, [r4, #72]	; 0x48
 8000de6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 8000de8:	4c2e      	ldr	r4, [pc, #184]	; (8000ea4 <HAL_SPI_MspInit+0x1d8>)
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8000dea:	46a1      	mov	r9, r4
    BNRG_DMA_CLK_ENABLE();   
 8000dec:	ea03 0308 	and.w	r3, r3, r8
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8000df0:	f849 1f94 	str.w	r1, [r9, #148]!
    BNRG_DMA_CLK_ENABLE();   
 8000df4:	9306      	str	r3, [sp, #24]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000df6:	2280      	movs	r2, #128	; 0x80
    BNRG_DMA_CLK_ENABLE();   
 8000df8:	9b06      	ldr	r3, [sp, #24]
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 8000dfa:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000dfe:	2310      	movs	r3, #16
    HAL_DMA_Init(&hdma_tx);   
 8000e00:	4648      	mov	r0, r9
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000e02:	e9c4 3527 	strd	r3, r5, [r4, #156]	; 0x9c
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e06:	e9c4 2529 	strd	r2, r5, [r4, #164]	; 0xa4
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8000e0a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
    hdma_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000e0e:	f8c4 b0b4 	str.w	fp, [r4, #180]	; 0xb4
    HAL_DMA_Init(&hdma_tx);   
 8000e12:	f001 fd21 	bl	8002858 <HAL_DMA_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8000e16:	4922      	ldr	r1, [pc, #136]	; (8000ea0 <HAL_SPI_MspInit+0x1d4>)
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
  return (uint32_t) &(SPIx->DR);
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <HAL_SPI_MspInit+0x1dc>)
 8000e1a:	608b      	str	r3, [r1, #8]
    hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000e1c:	e9c4 7538 	strd	r7, r5, [r4, #224]	; 0xe0
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 8000e20:	4627      	mov	r7, r4
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 8000e22:	f8c6 9054 	str.w	r9, [r6, #84]	; 0x54
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 8000e26:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8000eac <HAL_SPI_MspInit+0x1e0>
 8000e2a:	f847 9fdc 	str.w	r9, [r7, #220]!
    hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000e2e:	2280      	movs	r2, #128	; 0x80
    HAL_DMA_Init(&hdma_rx);
 8000e30:	4638      	mov	r0, r7
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e32:	e9c4 253b 	strd	r2, r5, [r4, #236]	; 0xec
    hdma_rx.Init.Mode                = DMA_NORMAL;
 8000e36:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 8000e3a:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
    hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000e3e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000e42:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
    HAL_DMA_Init(&hdma_rx);
 8000e46:	f001 fd07 	bl	8002858 <HAL_DMA_Init>
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_SPI_MspInit+0x1dc>)
 8000e4c:	f8c9 3008 	str.w	r3, [r9, #8]
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 8000e50:	462a      	mov	r2, r5
 8000e52:	4651      	mov	r1, sl
 8000e54:	2039      	movs	r0, #57	; 0x39
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx); 
 8000e56:	65b7      	str	r7, [r6, #88]	; 0x58
 8000e58:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 8000e5c:	f001 fc88 	bl	8002770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_TX_IRQn);
 8000e60:	2039      	movs	r0, #57	; 0x39
 8000e62:	f001 fcb7 	bl	80027d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_RX_IRQn, 
 8000e66:	462a      	mov	r2, r5
 8000e68:	4651      	mov	r1, sl
 8000e6a:	2038      	movs	r0, #56	; 0x38
 8000e6c:	f001 fc80 	bl	8002770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_RX_IRQn);
 8000e70:	2038      	movs	r0, #56	; 0x38
 8000e72:	f001 fcaf 	bl	80027d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BNRG_SPI_EXTI_IRQn, 
 8000e76:	462a      	mov	r2, r5
 8000e78:	4641      	mov	r1, r8
 8000e7a:	2017      	movs	r0, #23
 8000e7c:	f001 fc78 	bl	8002770 <HAL_NVIC_SetPriority>
}
 8000e80:	b00d      	add	sp, #52	; 0x34
 8000e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e86:	bf00      	nop
 8000e88:	40003c00 	.word	0x40003c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	48000800 	.word	0x48000800
 8000e94:	48000c00 	.word	0x48000c00
 8000e98:	10110000 	.word	0x10110000
 8000e9c:	48001000 	.word	0x48001000
 8000ea0:	4002041c 	.word	0x4002041c
 8000ea4:	20000078 	.word	0x20000078
 8000ea8:	40003c0c 	.word	0x40003c0c
 8000eac:	40020408 	.word	0x40020408

08000eb0 <HW_BNRG_Init>:
  return;
}


void HW_BNRG_Init(HW_BNRG_InitMode_t InitMode)
{
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  hspi->Instance = BNRG_SPI_INSTANCE;
 8000eb2:	4c44      	ldr	r4, [pc, #272]	; (8000fc4 <HW_BNRG_Init+0x114>)
  hspi->Init.Mode = BNRG_SPI_MODE;
 8000eb4:	4e44      	ldr	r6, [pc, #272]	; (8000fc8 <HW_BNRG_Init+0x118>)
 8000eb6:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 8000eba:	2500      	movs	r5, #0
  hspi->Init.Mode = BNRG_SPI_MODE;
 8000ebc:	e9c4 6302 	strd	r6, r3, [r4, #8]
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 8000ec0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ec4:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hspi->Init.NSS = BNRG_SPI_NSS;
 8000ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ecc:	6223      	str	r3, [r4, #32]
{
 8000ece:	b089      	sub	sp, #36	; 0x24
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8000ed0:	2307      	movs	r3, #7
{
 8000ed2:	4607      	mov	r7, r0
  HAL_SPI_Init(hspi);
 8000ed4:	f104 0008 	add.w	r0, r4, #8
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8000ed8:	6363      	str	r3, [r4, #52]	; 0x34
  hspi->Init.CLKPhase = BNRG_SPI_CLKPHASE;
 8000eda:	e9c4 5506 	strd	r5, r5, [r4, #24]
  hspi->Init.TIMode = BNRG_SPI_TIMODE;
 8000ede:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hspi->Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 8000ee2:	6265      	str	r5, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 8000ee4:	6325      	str	r5, [r4, #48]	; 0x30
  HAL_SPI_Init(hspi);
 8000ee6:	f002 fc1c 	bl	8003722 <HAL_SPI_Init>
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8000eea:	6873      	ldr	r3, [r6, #4]
  SPI_Init(&SpiHandle);

  LL_SPI_EnableDMAReq_TX(BNRG_SPI_INSTANCE);
  LL_SPI_EnableDMAReq_RX(BNRG_SPI_INSTANCE);

  __HAL_SPI_ENABLE(&SpiHandle);
 8000eec:	68a2      	ldr	r2, [r4, #8]
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000ef4:	6873      	ldr	r3, [r6, #4]
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6073      	str	r3, [r6, #4]
 8000efc:	6813      	ldr	r3, [r2, #0]

  SpiContext.SpiReceiveContext.PacketCont = FALSE;
  SpiContext.SpiTransmitContext.RequestPending = FALSE;
 8000efe:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
  __HAL_SPI_ENABLE(&SpiHandle);
 8000f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8000f06:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_SPI_ENABLE(&SpiHandle);
 8000f0a:	6013      	str	r3, [r2, #0]
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 8000f0c:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8000f10:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;

  if(InitMode != HW_BNRG_Limited)
 8000f14:	2f00      	cmp	r7, #0
 8000f16:	d044      	beq.n	8000fa2 <HW_BNRG_Init+0xf2>
  *         @arg @ref LL_PWR_WAKEUP_PIN5
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityHigh(uint32_t WakeUpPin)
{
  CLEAR_BIT(PWR->CR4, WakeUpPin);
 8000f18:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <HW_BNRG_Init+0x11c>)
 8000f1a:	68d3      	ldr	r3, [r2, #12]
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	60d3      	str	r3, [r2, #12]
  {
    LL_PWR_SetWakeUpPinPolarityHigh(BNRG_SPI_IRQ_WAKEUP_PIN);

    HW_TS_Create(CFG_TimProcID_isr, &TxRxTimerId, hw_ts_SingleShot, TimerTxRxCallback);
 8000f22:	f504 7192 	add.w	r1, r4, #292	; 0x124
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HW_BNRG_Init+0x120>)
 8000f28:	462a      	mov	r2, r5
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	f000 fad2 	bl	80014d4 <HW_TS_Create>
  GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
 8000f30:	2701      	movs	r7, #1
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8000f32:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <HW_BNRG_Init+0x124>)
  GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
 8000f34:	9603      	str	r6, [sp, #12]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8000f36:	462a      	mov	r2, r5
 8000f38:	f10d 0107 	add.w	r1, sp, #7
 8000f3c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
 8000f3e:	e9cd 7504 	strd	r7, r5, [sp, #16]
  GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
 8000f42:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
 8000f44:	9507      	str	r5, [sp, #28]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8000f46:	f000 fac5 	bl	80014d4 <HW_TS_Create>
  BNRG_SPI_RESET_CLK_ENABLE();
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HW_BNRG_Init+0x128>)
 8000f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f4e:	433a      	orrs	r2, r7
 8000f50:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	403b      	ands	r3, r7
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 8000f56:	462a      	mov	r2, r5
  BNRG_SPI_RESET_CLK_ENABLE();
 8000f58:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 8000f5a:	4631      	mov	r1, r6
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  BNRG_SPI_RESET_CLK_ENABLE();
 8000f60:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 8000f62:	f001 ff49 	bl	8002df8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);
 8000f66:	a903      	add	r1, sp, #12
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6c:	f001 fe60 	bl	8002c30 <HAL_GPIO_Init>
  HW_TS_Start(ubnRFResetTimerID, BLUENRG_HOLD_TIME_IN_RESET);
 8000f70:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000f74:	211c      	movs	r1, #28
 8000f76:	f000 fba9 	bl	80016cc <HW_TS_Start>
  RfResetTimerLock = 1;
 8000f7a:	7027      	strb	r7, [r4, #0]
  while(RfResetTimerLock == 1)
 8000f7c:	7823      	ldrb	r3, [r4, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d00c      	beq.n	8000f9c <HW_BNRG_Init+0xec>
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8c:	f001 ff34 	bl	8002df8 <HAL_GPIO_WritePin>
  HW_TS_Delete(ubnRFResetTimerID);
 8000f90:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000f94:	f000 fb8c 	bl	80016b0 <HW_TS_Delete>
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_CS_STDBY_PIN, BNRG_SPI_CS_STDBY_PORT);
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_RESET_STDBY_PIN, BNRG_SPI_RESET_STDBY_PORT);
  }

  return;
}
 8000f98:	b009      	add	sp, #36	; 0x24
 8000f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HW_SleepMode();
 8000f9c:	f7ff fd7a 	bl	8000a94 <HW_SleepMode>
 8000fa0:	e7ec      	b.n	8000f7c <HW_BNRG_Init+0xcc>
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HW_BNRG_Init+0x12c>)
 8000fa4:	6813      	ldr	r3, [r2, #0]
 8000fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000faa:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
 8000fac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HW_BNRG_Init+0x130>)
 8000fb2:	6811      	ldr	r1, [r2, #0]
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	6832      	ldr	r2, [r6, #0]
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HW_BNRG_Init+0x134>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	6033      	str	r3, [r6, #0]
  return;
 8000fc0:	e7ea      	b.n	8000f98 <HW_BNRG_Init+0xe8>
 8000fc2:	bf00      	nop
 8000fc4:	20000078 	.word	0x20000078
 8000fc8:	40003c00 	.word	0x40003c00
 8000fcc:	40007000 	.word	0x40007000
 8000fd0:	08000add 	.word	0x08000add
 8000fd4:	08000ad1 	.word	0x08000ad1
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40007034 	.word	0x40007034
 8000fe0:	bfff8fc7 	.word	0xbfff8fc7
 8000fe4:	bfff8fdf 	.word	0xbfff8fdf

08000fe8 <HW_BNRG_EvtReq>:
}


void HW_BNRG_EvtReq(uint8_t *buffer, uint16_t buff_size)
{
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HW_BNRG_EvtReq+0x20>)
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 8000fea:	2200      	movs	r2, #0
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 8000fec:	6758      	str	r0, [r3, #116]	; 0x74
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
 8000fee:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 8000ff2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  if( SpiContext.SpiReceiveContext.PacketCont == TRUE )
 8000ff6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d102      	bne.n	8001004 <HW_BNRG_EvtReq+0x1c>
  {
    SPI_Receive_Manager(SPI_REQUEST_PAYLOAD);
 8000ffe:	2002      	movs	r0, #2
 8001000:	f7ff bdde 	b.w	8000bc0 <SPI_Receive_Manager>
  }
  else
  {
    Enable_SPI_Receiving_Path();
 8001004:	f7ff bd98 	b.w	8000b38 <Enable_SPI_Receiving_Path>
 8001008:	20000078 	.word	0x20000078

0800100c <HW_BNRG_SpiIrqCb>:
  return;
}


void HW_BNRG_SpiIrqCb(void)
{  
 800100c:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100e:	b672      	cpsid	i
  __disable_irq();
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HW_BNRG_SpiIrqCb+0x30>)
 8001012:	f893 506c 	ldrb.w	r5, [r3, #108]	; 0x6c
 8001016:	b975      	cbnz	r5, 8001036 <HW_BNRG_SpiIrqCb+0x2a>
  {
    SpiContext.SpiPeripheralState = SPI_BUSY;
 8001018:	2401      	movs	r4, #1
 800101a:	f883 406c 	strb.w	r4, [r3, #108]	; 0x6c
  __ASM volatile ("cpsie i" : : : "memory");
 800101e:	b662      	cpsie	i
    __enable_irq();
    Enable_SPI_CS();
 8001020:	f7ff fd62 	bl	8000ae8 <Enable_SPI_CS>
    SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX);
 8001024:	4628      	mov	r0, r5
 8001026:	f7ff fdcb 	bl	8000bc0 <SPI_Receive_Manager>
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 800102a:	4621      	mov	r1, r4
 800102c:	4620      	mov	r0, r4
  }
  else
  {
    __enable_irq();
  }
}
 800102e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 8001032:	f000 bead 	b.w	8001d90 <LPM_SetStopMode>
 8001036:	b662      	cpsie	i
}
 8001038:	bd38      	pop	{r3, r4, r5, pc}
 800103a:	bf00      	nop
 800103c:	20000078 	.word	0x20000078

08001040 <HW_BNRG_DMATxCb>:


void HW_BNRG_DMATxCb(void)
{
 8001040:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmatx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG))
 8001042:	4c20      	ldr	r4, [pc, #128]	; (80010c4 <HW_BNRG_DMATxCb+0x84>)
 8001044:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	0791      	lsls	r1, r2, #30
 800104c:	d507      	bpl.n	800105e <HW_BNRG_DMATxCb+0x1e>
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HW_BNRG_DMATxCb+0x88>)
 8001050:	4293      	cmp	r3, r2
 8001052:	bf8c      	ite	hi
 8001054:	4b1d      	ldrhi	r3, [pc, #116]	; (80010cc <HW_BNRG_DMATxCb+0x8c>)
 8001056:	4b1e      	ldrls	r3, [pc, #120]	; (80010d0 <HW_BNRG_DMATxCb+0x90>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	0692      	lsls	r2, r2, #26
 800105c:	d400      	bmi.n	8001060 <HW_BNRG_DMATxCb+0x20>
      TransmitClosure();
    }
  }

  return;
}
 800105e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 8001060:	2220      	movs	r2, #32
 8001062:	605a      	str	r2, [r3, #4]
    if(SpiContext.SpiTransmitContext.PacketCont == TRUE)
 8001064:	f894 5088 	ldrb.w	r5, [r4, #136]	; 0x88
 8001068:	2d01      	cmp	r5, #1
 800106a:	d10d      	bne.n	8001088 <HW_BNRG_DMATxCb+0x48>
      SpiContext.SpiTransmitContext.pPayloadData += SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 800106c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8001070:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
 8001074:	4413      	add	r3, r2
 8001076:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      DisableEnable_SPI_CS();
 800107a:	f7ff fd4d 	bl	8000b18 <DisableEnable_SPI_CS>
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 800107e:	4628      	mov	r0, r5
}
 8001080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 8001084:	f7ff bd9c 	b.w	8000bc0 <SPI_Receive_Manager>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8001088:	2100      	movs	r1, #0
 800108a:	4608      	mov	r0, r1
 800108c:	f000 fe80 	bl	8001d90 <LPM_SetStopMode>
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  Disable_SPI_CS();
 8001096:	f7ff fd2f 	bl	8000af8 <Disable_SPI_CS>
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 800109a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	6813      	ldr	r3, [r2, #0]
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 80010a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6013      	str	r3, [r2, #0]
  if(SpiContext.SpiReceiveContext.BufferStatus == BUFFER_AVAILABLE)
 80010b2:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1d1      	bne.n	800105e <HW_BNRG_DMATxCb+0x1e>
}
 80010ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Enable_SPI_Receiving_Path();
 80010be:	f7ff bd3b 	b.w	8000b38 <Enable_SPI_Receiving_Path>
 80010c2:	bf00      	nop
 80010c4:	20000078 	.word	0x20000078
 80010c8:	40020080 	.word	0x40020080
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020000 	.word	0x40020000

080010d4 <HW_BNRG_TimStartAllowed>:
}


void HW_BNRG_TimStartAllowed(void)
{
  HW_TS_Start(TxRxTimerId, TimeoutTicks);
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HW_BNRG_TimStartAllowed+0x10>)
 80010d6:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 80010da:	f893 0124 	ldrb.w	r0, [r3, #292]	; 0x124
 80010de:	f000 baf5 	b.w	80016cc <HW_TS_Start>
 80010e2:	bf00      	nop
 80010e4:	20000078 	.word	0x20000078

080010e8 <HW_BNRG_TimStartReq>:
   * the Timer requested can be started immediately because there is no risk that
   * the timer is already in use.
   * If a specific application needs to handle the timer differently,
   * it is suggested to overload the function without change the COMMON one. 
   */
  HW_BNRG_TimStartAllowed();
 80010e8:	f7ff bff4 	b.w	80010d4 <HW_BNRG_TimStartAllowed>

080010ec <WakeupBlueNRG>:
{
 80010ec:	b510      	push	{r4, lr}
  pTimerTxRxCallback = TimerTransmitCallback;
 80010ee:	4c08      	ldr	r4, [pc, #32]	; (8001110 <WakeupBlueNRG+0x24>)
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <WakeupBlueNRG+0x28>)
 80010f2:	6063      	str	r3, [r4, #4]
  Enable_SPI_CS();
 80010f4:	f7ff fcf8 	bl	8000ae8 <Enable_SPI_CS>
  TimeoutTicks = SPI_TX_TIMEOUT;
 80010f8:	2306      	movs	r3, #6
 80010fa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
  HW_BNRG_TimStartReq();
 80010fe:	f7ff fff3 	bl	80010e8 <HW_BNRG_TimStartReq>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8001102:	2100      	movs	r1, #0
}
 8001104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8001108:	4608      	mov	r0, r1
 800110a:	f000 be41 	b.w	8001d90 <LPM_SetStopMode>
 800110e:	bf00      	nop
 8001110:	20000078 	.word	0x20000078
 8001114:	08000cb9 	.word	0x08000cb9

08001118 <HW_BNRG_Send>:
{  
 8001118:	b508      	push	{r3, lr}
  SpiContext.SpiTransmitContext.pPayloadData = payload_data;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HW_BNRG_Send+0x34>)
 800111c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit = payload_size;
 8001120:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 8001126:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 800112a:	2201      	movs	r2, #1
 800112c:	b949      	cbnz	r1, 8001142 <HW_BNRG_Send+0x2a>
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 800112e:	2017      	movs	r0, #23
    SpiContext.SpiPeripheralState = SPI_BUSY;
 8001130:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 8001134:	f001 fb5c 	bl	80027f0 <HAL_NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001138:	b662      	cpsie	i
}
 800113a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WakeupBlueNRG();
 800113e:	f7ff bfd5 	b.w	80010ec <WakeupBlueNRG>
    SpiContext.SpiTransmitContext.RequestPending = TRUE;
 8001142:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8001146:	b662      	cpsie	i
}
 8001148:	bd08      	pop	{r3, pc}
 800114a:	bf00      	nop
 800114c:	20000078 	.word	0x20000078

08001150 <ReceiveClosure>:
{
 8001150:	b510      	push	{r4, lr}
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8001152:	4c12      	ldr	r4, [pc, #72]	; (800119c <ReceiveClosure+0x4c>)
 8001154:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f023 0301 	bic.w	r3, r3, #1
 800115e:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8001160:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 800116e:	2017      	movs	r0, #23
 8001170:	f001 fb3e 	bl	80027f0 <HAL_NVIC_DisableIRQ>
  if(SpiContext.SpiTransmitContext.RequestPending == TRUE)
 8001174:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 8001178:	2a01      	cmp	r2, #1
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	d108      	bne.n	8001192 <ReceiveClosure+0x42>
    SpiContext.SpiTransmitContext.RequestPending = FALSE;
 8001180:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
    SpiContext.SpiPeripheralState = SPI_BUSY;
 8001184:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
  __ASM volatile ("cpsie i" : : : "memory");
 8001188:	b662      	cpsie	i
}
 800118a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WakeupBlueNRG();
 800118e:	f7ff bfad 	b.w	80010ec <WakeupBlueNRG>
    SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 8001192:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8001196:	b662      	cpsie	i
}
 8001198:	bd10      	pop	{r4, pc}
 800119a:	bf00      	nop
 800119c:	20000078 	.word	0x20000078

080011a0 <ProcessEndOfReceive>:
{
 80011a0:	b510      	push	{r4, lr}
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;
 80011a2:	4c06      	ldr	r4, [pc, #24]	; (80011bc <ProcessEndOfReceive+0x1c>)
 80011a4:	2301      	movs	r3, #1
 80011a6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  ReceiveClosure();
 80011aa:	f7ff ffd1 	bl	8001150 <ReceiveClosure>
  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 80011ae:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
}
 80011b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 80011b6:	f000 bd5b 	b.w	8001c70 <HW_BNRG_Isr>
 80011ba:	bf00      	nop
 80011bc:	20000078 	.word	0x20000078

080011c0 <HW_BNRG_DMARxCb>:
{
 80011c0:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmarx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG))
 80011c2:	4c53      	ldr	r4, [pc, #332]	; (8001310 <HW_BNRG_DMARxCb+0x150>)
 80011c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	0795      	lsls	r5, r2, #30
 80011cc:	d507      	bpl.n	80011de <HW_BNRG_DMARxCb+0x1e>
 80011ce:	4951      	ldr	r1, [pc, #324]	; (8001314 <HW_BNRG_DMARxCb+0x154>)
 80011d0:	428b      	cmp	r3, r1
 80011d2:	bf8c      	ite	hi
 80011d4:	4a50      	ldrhi	r2, [pc, #320]	; (8001318 <HW_BNRG_DMARxCb+0x158>)
 80011d6:	4a51      	ldrls	r2, [pc, #324]	; (800131c <HW_BNRG_DMARxCb+0x15c>)
 80011d8:	6810      	ldr	r0, [r2, #0]
 80011da:	0780      	lsls	r0, r0, #30
 80011dc:	d400      	bmi.n	80011e0 <HW_BNRG_DMARxCb+0x20>
}
 80011de:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG);
 80011e0:	2002      	movs	r0, #2
 80011e2:	6050      	str	r0, [r2, #4]
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 80011e4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011e6:	6815      	ldr	r5, [r2, #0]
 80011e8:	428d      	cmp	r5, r1
 80011ea:	bf8c      	ite	hi
 80011ec:	484a      	ldrhi	r0, [pc, #296]	; (8001318 <HW_BNRG_DMARxCb+0x158>)
 80011ee:	484b      	ldrls	r0, [pc, #300]	; (800131c <HW_BNRG_DMARxCb+0x15c>)
 80011f0:	2220      	movs	r2, #32
 80011f2:	6042      	str	r2, [r0, #4]
    switch (SpiContext.SpiReceiveContext.SpiReceiveEvent)
 80011f4:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 80011f8:	2a03      	cmp	r2, #3
 80011fa:	d8f0      	bhi.n	80011de <HW_BNRG_DMARxCb+0x1e>
 80011fc:	e8df f002 	tbb	[pc, r2]
 8001200:	2a243802 	.word	0x2a243802
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8001204:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 8001208:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 800120c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8001210:	d003      	beq.n	800121a <HW_BNRG_DMARxCb+0x5a>
 8001212:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 8001216:	2802      	cmp	r0, #2
 8001218:	d012      	beq.n	8001240 <HW_BNRG_DMARxCb+0x80>
          if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET)
 800121a:	4841      	ldr	r0, [pc, #260]	; (8001320 <HW_BNRG_DMARxCb+0x160>)
 800121c:	2140      	movs	r1, #64	; 0x40
 800121e:	f001 fde5 	bl	8002dec <HAL_GPIO_ReadPin>
 8001222:	4604      	mov	r4, r0
 8001224:	b948      	cbnz	r0, 800123a <HW_BNRG_DMARxCb+0x7a>
            Disable_SPI_CS();
 8001226:	f7ff fc67 	bl	8000af8 <Disable_SPI_CS>
            LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 800122a:	4621      	mov	r1, r4
 800122c:	2001      	movs	r0, #1
 800122e:	f000 fdaf 	bl	8001d90 <LPM_SetStopMode>
}
 8001232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ReceiveClosure();
 8001236:	f7ff bf8b 	b.w	8001150 <ReceiveClosure>
            DisableEnable_SPI_CS();
 800123a:	f7ff fc6d 	bl	8000b18 <DisableEnable_SPI_CS>
            SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX); /**< BlueNRG not ready for reading */
 800123e:	2000      	movs	r0, #0
}
 8001240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 8001244:	f7ff bcbc 	b.w	8000bc0 <SPI_Receive_Manager>
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 8001248:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
}
 800124c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 8001250:	f000 bd0e 	b.w	8001c70 <HW_BNRG_Isr>
        Disable_SPI_CS();
 8001254:	f7ff fc50 	bl	8000af8 <Disable_SPI_CS>
        LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 8001258:	2100      	movs	r1, #0
 800125a:	2001      	movs	r0, #1
 800125c:	f000 fd98 	bl	8001d90 <LPM_SetStopMode>
        pTimerTxRxCallback = ProcessEndOfReceive;
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HW_BNRG_DMARxCb+0x164>)
 8001262:	6063      	str	r3, [r4, #4]
        TimeoutTicks = SPI_END_RECEIVE_FIX_TIMEOUT;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        HW_BNRG_TimStartReq();
 800126a:	f7ff ff3d 	bl	80010e8 <HW_BNRG_TimStartReq>
        break;
 800126e:	e7b6      	b.n	80011de <HW_BNRG_DMARxCb+0x1e>
        byte_count = (ReceivedHeader[2]<<8)|ReceivedHeader[1];
 8001270:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
 8001274:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 8001278:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
 800127c:	d003      	beq.n	8001286 <HW_BNRG_DMARxCb+0xc6>
 800127e:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 8001282:	2802      	cmp	r0, #2
 8001284:	d003      	beq.n	800128e <HW_BNRG_DMARxCb+0xce>
          DisableEnable_SPI_CS();
 8001286:	f7ff fc47 	bl	8000b18 <DisableEnable_SPI_CS>
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 800128a:	2001      	movs	r0, #1
 800128c:	e7d8      	b.n	8001240 <HW_BNRG_DMARxCb+0x80>
          if( byte_count < SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit)
 800128e:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8001292:	4290      	cmp	r0, r2
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = byte_count;
 8001294:	bf83      	ittte	hi
 8001296:	f8a4 2086 	strhhi.w	r2, [r4, #134]	; 0x86
            SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit -= SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 800129a:	1a82      	subhi	r2, r0, r2
 800129c:	f8a4 2084 	strhhi.w	r2, [r4, #132]	; 0x84
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 80012a0:	2200      	movls	r2, #0
            SpiContext.SpiTransmitContext.PacketCont = TRUE;
 80012a2:	bf88      	it	hi
 80012a4:	2201      	movhi	r2, #1
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 80012a6:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 80012aa:	682a      	ldr	r2, [r5, #0]
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit;
 80012ac:	bf98      	it	ls
 80012ae:	f8a4 0086 	strhls.w	r0, [r4, #134]	; 0x86
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	602a      	str	r2, [r5, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 80012c0:	681a      	ldr	r2, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 80012c2:	428d      	cmp	r5, r1
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 80012c4:	f022 0202 	bic.w	r2, r2, #2
 80012c8:	601a      	str	r2, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 80012ca:	bf8c      	ite	hi
 80012cc:	4a12      	ldrhi	r2, [pc, #72]	; (8001318 <HW_BNRG_DMARxCb+0x158>)
 80012ce:	4a13      	ldrls	r2, [pc, #76]	; (800131c <HW_BNRG_DMARxCb+0x15c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80012d0:	4d15      	ldr	r5, [pc, #84]	; (8001328 <HW_BNRG_DMARxCb+0x168>)
 80012d2:	2320      	movs	r3, #32
 80012d4:	6053      	str	r3, [r2, #4]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_DMA_TX_IRQn); /**< Clear DMA pending bit in NVIC */
 80012d6:	2039      	movs	r0, #57	; 0x39
 80012d8:	f001 faae 	bl	8002838 <HAL_NVIC_ClearPendingIRQ>
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 80012dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 80012de:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	6813      	ldr	r3, [r2, #0]
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f2:	602b      	str	r3, [r5, #0]
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff fc37 	bl	8000b68 <LL_DMA_SetDataLength.constprop.0>
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)SpiContext.SpiTransmitContext.pPayloadData);  /**< Set memory address in DMA TX */
 80012fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80012fe:	60eb      	str	r3, [r5, #12]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx); /**< Enable DMA TX */
 8001300:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	6813      	ldr	r3, [r2, #0]
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]
  return;
 800130c:	e767      	b.n	80011de <HW_BNRG_DMARxCb+0x1e>
 800130e:	bf00      	nop
 8001310:	20000078 	.word	0x20000078
 8001314:	40020080 	.word	0x40020080
 8001318:	40020400 	.word	0x40020400
 800131c:	40020000 	.word	0x40020000
 8001320:	48001000 	.word	0x48001000
 8001324:	080011a1 	.word	0x080011a1
 8001328:	4002041c 	.word	0x4002041c

0800132c <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <ReadRtcSsrValue+0x1c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001332:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001334:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001336:	b280      	uxth	r0, r0
 8001338:	b29b      	uxth	r3, r3
  second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);

  while(first_read != second_read)
 800133a:	4298      	cmp	r0, r3
 800133c:	d100      	bne.n	8001340 <ReadRtcSsrValue+0x14>
    first_read = second_read;
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
  }

  return second_read;
}
 800133e:	4770      	bx	lr
 8001340:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001342:	4618      	mov	r0, r3
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 8001344:	b28b      	uxth	r3, r1
 8001346:	e7f8      	b.n	800133a <ReadRtcSsrValue+0xe>
 8001348:	200001a4 	.word	0x200001a4

0800134c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <UnlinkTimer+0x68>)
 8001350:	791a      	ldrb	r2, [r3, #4]
 8001352:	4282      	cmp	r2, r0
 8001354:	f04f 0218 	mov.w	r2, #24
 8001358:	d115      	bne.n	8001386 <UnlinkTimer+0x3a>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800135a:	791c      	ldrb	r4, [r3, #4]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800135c:	fb02 3200 	mla	r2, r2, r0, r3
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001360:	b2e4      	uxtb	r4, r4
 8001362:	715c      	strb	r4, [r3, #5]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001364:	7f52      	ldrb	r2, [r2, #29]
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	711a      	strb	r2, [r3, #4]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800136a:	2218      	movs	r2, #24
 800136c:	fb02 3000 	mla	r0, r2, r0, r3
 8001370:	2201      	movs	r2, #1
 8001372:	7502      	strb	r2, [r0, #20]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001374:	791a      	ldrb	r2, [r3, #4]
 8001376:	2a06      	cmp	r2, #6
 8001378:	d104      	bne.n	8001384 <UnlinkTimer+0x38>
 800137a:	b919      	cbnz	r1, 8001384 <UnlinkTimer+0x38>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  return;
}
 8001384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    previous_id = aTimerContext[TimerID].PreviousID;
 8001386:	fb02 3400 	mla	r4, r2, r0, r3
 800138a:	7f26      	ldrb	r6, [r4, #28]
    next_id = aTimerContext[TimerID].NextID;
 800138c:	f894 c01d 	ldrb.w	ip, [r4, #29]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001390:	7f67      	ldrb	r7, [r4, #29]
 8001392:	fb02 3606 	mla	r6, r2, r6, r3
 8001396:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001398:	f1bc 0f06 	cmp.w	ip, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800139c:	7777      	strb	r7, [r6, #29]
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800139e:	bf18      	it	ne
 80013a0:	7f24      	ldrbne	r4, [r4, #28]
    next_id = aTimerContext[TimerID].NextID;
 80013a2:	fa5f f58c 	uxtb.w	r5, ip
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80013a6:	bf1e      	ittt	ne
 80013a8:	fb02 3205 	mlane	r2, r2, r5, r3
 80013ac:	b2e4      	uxtbne	r4, r4
 80013ae:	7714      	strbne	r4, [r2, #28]
 80013b0:	e7db      	b.n	800136a <UnlinkTimer+0x1e>
 80013b2:	bf00      	nop
 80013b4:	200001a4 	.word	0x200001a4

080013b8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80013b8:	b510      	push	{r4, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80013ba:	4c0e      	ldr	r4, [pc, #56]	; (80013f4 <ReturnTimeElapsed+0x3c>)
 80013bc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80013c0:	3301      	adds	r3, #1
 80013c2:	d015      	beq.n	80013f0 <ReturnTimeElapsed+0x38>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80013c4:	f7ff ffb2 	bl	800132c <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 80013c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80013cc:	4283      	cmp	r3, r0
    {
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80013ce:	bf3b      	ittet	cc
 80013d0:	f8b4 309c 	ldrhcc.w	r3, [r4, #156]	; 0x9c
      return_value = SSRValueOnLastSetup + wrap_counter;
 80013d4:	f8d4 2098 	ldrcc.w	r2, [r4, #152]	; 0x98
      return_value = SSRValueOnLastSetup - return_value;
 80013d8:	f8d4 3098 	ldrcs.w	r3, [r4, #152]	; 0x98
      return_value = SSRValueOnLastSetup + wrap_counter;
 80013dc:	189b      	addcc	r3, r3, r2
 80013de:	1a18      	subs	r0, r3, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80013e0:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 80013e4:	4358      	muls	r0, r3
    return_value = return_value >> WakeupTimerDivider;
 80013e6:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 80013ea:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 80013ec:	b280      	uxth	r0, r0
 80013ee:	bd10      	pop	{r4, pc}
    return_value = 0;
 80013f0:	2000      	movs	r0, #0
 80013f2:	e7fb      	b.n	80013ec <ReturnTimeElapsed+0x34>
 80013f4:	200001a4 	.word	0x200001a4

080013f8 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80013f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80013fa:	4c34      	ldr	r4, [pc, #208]	; (80014cc <HW_TS_Init+0xd4>)
 80013fc:	6021      	str	r1, [r4, #0]


  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - (LL_RTC_WAKEUP_GetClock(phrtc->Instance)));
 80013fe:	6809      	ldr	r1, [r1, #0]
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  */
__STATIC_INLINE uint32_t LL_RTC_WAKEUP_GetClock(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 8001400:	688b      	ldr	r3, [r1, #8]
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 8001402:	690a      	ldr	r2, [r1, #16]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	f1c3 0304 	rsb	r3, r3, #4
 800140c:	b2dd      	uxtb	r5, r3
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_S));
 800140e:	690b      	ldr	r3, [r1, #16]
 8001410:	f884 509f 	strb.w	r5, [r4, #159]	; 0x9f
 8001414:	f3c3 030e 	ubfx	r3, r3, #0, #15
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 8001418:	3301      	adds	r3, #1
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 800141a:	f3c2 4206 	ubfx	r2, r2, #16, #7
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 800141e:	3201      	adds	r2, #1
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 8001420:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 8001424:	3b01      	subs	r3, #1
 8001426:	4353      	muls	r3, r2
 8001428:	412b      	asrs	r3, r5
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 800142a:	f884 209e 	strb.w	r2, [r4, #158]	; 0x9e
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 800142e:	3b10      	subs	r3, #16

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001430:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001434:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001436:	bf8c      	ite	hi
 8001438:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800143c:	b29b      	uxthls	r3, r3
 800143e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <HW_TS_Init+0xd8>)
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800144a:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001452:	601a      	str	r2, [r3, #0]
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001454:	bb90      	cbnz	r0, 80014bc <HW_TS_Init+0xc4>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001456:	2201      	movs	r2, #1
 8001458:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001464:	2206      	movs	r2, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001466:	7520      	strb	r0, [r4, #20]
 8001468:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
 800146c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8001470:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
 8001474:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 8001478:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800147c:	7122      	strb	r2, [r4, #4]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800147e:	688a      	ldr	r2, [r1, #8]
 8001480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001484:	608a      	str	r2, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001486:	68ca      	ldr	r2, [r1, #12]
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800148e:	60ca      	str	r2, [r1, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001490:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001494:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001496:	2003      	movs	r0, #3
 8001498:	f001 f9ce 	bl	8002838 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	6893      	ldr	r3, [r2, #8]
 80014a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a6:	6093      	str	r3, [r2, #8]
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80014a8:	2103      	movs	r1, #3
 80014aa:	4608      	mov	r0, r1
 80014ac:	2200      	movs	r2, #0
 80014ae:	f001 f95f 	bl	8002770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */

  return;
}
 80014b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014b6:	2003      	movs	r0, #3
 80014b8:	f001 b98c 	b.w	80027d4 <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80014bc:	68cb      	ldr	r3, [r1, #12]
 80014be:	055b      	lsls	r3, r3, #21
 80014c0:	d5f2      	bpl.n	80014a8 <HW_TS_Init+0xb0>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80014c2:	2003      	movs	r0, #3
 80014c4:	f001 f9a8 	bl	8002818 <HAL_NVIC_SetPendingIRQ>
 80014c8:	e7ee      	b.n	80014a8 <HW_TS_Init+0xb0>
 80014ca:	bf00      	nop
 80014cc:	200001a4 	.word	0x200001a4
 80014d0:	40010400 	.word	0x40010400

080014d4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80014d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014d8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80014de:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001524 <HW_TS_Create+0x50>
 80014e2:	2500      	movs	r5, #0
 80014e4:	f04f 0a18 	mov.w	sl, #24
 80014e8:	fb0a 9405 	mla	r4, sl, r5, r9
 80014ec:	fa5f fe85 	uxtb.w	lr, r5
 80014f0:	f894 c014 	ldrb.w	ip, [r4, #20]
 80014f4:	f00c 06ff 	and.w	r6, ip, #255	; 0xff
 80014f8:	f1bc 0f00 	cmp.w	ip, #0
 80014fc:	d10b      	bne.n	8001516 <HW_TS_Create+0x42>
    loop++;
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80014fe:	2501      	movs	r5, #1
 8001500:	7525      	strb	r5, [r4, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001502:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001506:	61a0      	str	r0, [r4, #24]
    aTimerContext[loop].TimerMode = TimerMode;
 8001508:	7562      	strb	r2, [r4, #21]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800150a:	60a3      	str	r3, [r4, #8]
    *pTimerId = loop;
 800150c:	f881 e000 	strb.w	lr, [r1]

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8001510:	4630      	mov	r0, r6
 8001512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001516:	3501      	adds	r5, #1
 8001518:	2d06      	cmp	r5, #6
 800151a:	d1e5      	bne.n	80014e8 <HW_TS_Create+0x14>
 800151c:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 8001520:	2601      	movs	r6, #1
  return(localreturnstatus);
 8001522:	e7f5      	b.n	8001510 <HW_TS_Create+0x3c>
 8001524:	200001a4 	.word	0x200001a4

08001528 <HW_TS_RTC_CountUpdated_AppNot>:
  }
}

__weak void HW_TS_RTC_CountUpdated_AppNot(void)
{
}
 8001528:	4770      	bx	lr
	...

0800152c <RescheduleTimerList>:
{
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 800152e:	4c3c      	ldr	r4, [pc, #240]	; (8001620 <RescheduleTimerList+0xf4>)
 8001530:	6827      	ldr	r7, [r4, #0]
 8001532:	683b      	ldr	r3, [r7, #0]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800153a:	d003      	beq.n	8001544 <RescheduleTimerList+0x18>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	f012 0f04 	tst.w	r2, #4
 8001542:	e7fa      	b.n	800153a <RescheduleTimerList+0xe>
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800154a:	609a      	str	r2, [r3, #8]
  localTimerID = CurrentRunningTimerID;
 800154c:	7923      	ldrb	r3, [r4, #4]
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800154e:	2218      	movs	r2, #24
  localTimerID = CurrentRunningTimerID;
 8001550:	b2de      	uxtb	r6, r3
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001552:	fb02 4303 	mla	r3, r2, r3, r4
 8001556:	691d      	ldr	r5, [r3, #16]
  time_elapsed = ReturnTimeElapsed();
 8001558:	f7ff ff2e 	bl	80013b8 <ReturnTimeElapsed>
  if(timecountleft < time_elapsed )
 800155c:	42a8      	cmp	r0, r5
 800155e:	d907      	bls.n	8001570 <RescheduleTimerList+0x44>
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001560:	2301      	movs	r3, #1
 8001562:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
    wakeup_timer_value = 0;
 8001566:	2300      	movs	r3, #0
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001568:	2518      	movs	r5, #24
      aTimerContext[localTimerID].CountLeft = 0;
 800156a:	f04f 0c00 	mov.w	ip, #0
 800156e:	e01e      	b.n	80015ae <RescheduleTimerList+0x82>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001570:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8001574:	fa10 f383 	uxtah	r3, r0, r3
 8001578:	42ab      	cmp	r3, r5
      wakeup_timer_value = MaxWakeupTimerSetup;
 800157a:	bf39      	ittee	cc
 800157c:	f8b4 30a0 	ldrhcc.w	r3, [r4, #160]	; 0xa0
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001580:	2200      	movcc	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 8001582:	1a2b      	subcs	r3, r5, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001584:	2201      	movcs	r2, #1
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001586:	bf34      	ite	cc
 8001588:	b29b      	uxthcc	r3, r3
      wakeup_timer_value = timecountleft - time_elapsed;
 800158a:	b29b      	uxthcs	r3, r3
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800158c:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
 8001590:	e7ea      	b.n	8001568 <RescheduleTimerList+0x3c>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001592:	fb05 4206 	mla	r2, r5, r6, r4
    localTimerID = aTimerContext[localTimerID].NextID;
 8001596:	fb05 4606 	mla	r6, r5, r6, r4
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800159a:	6911      	ldr	r1, [r2, #16]
 800159c:	4288      	cmp	r0, r1
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800159e:	bf97      	itett	ls
 80015a0:	6911      	ldrls	r1, [r2, #16]
      aTimerContext[localTimerID].CountLeft = 0;
 80015a2:	f8c2 c010 	strhi.w	ip, [r2, #16]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80015a6:	1a09      	subls	r1, r1, r0
 80015a8:	6111      	strls	r1, [r2, #16]
    localTimerID = aTimerContext[localTimerID].NextID;
 80015aa:	7f76      	ldrb	r6, [r6, #29]
 80015ac:	b2f6      	uxtb	r6, r6
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015ae:	2e06      	cmp	r6, #6
 80015b0:	d1ef      	bne.n	8001592 <RescheduleTimerList+0x66>
  if(Value == 0)
 80015b2:	b943      	cbnz	r3, 80015c6 <RescheduleTimerList+0x9a>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80015b4:	f7ff feba 	bl	800132c <ReadRtcSsrValue>
 80015b8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
}
 80015bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f001 b929 	b.w	8002818 <HAL_NVIC_SetPendingIRQ>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d803      	bhi.n	80015d2 <RescheduleTimerList+0xa6>
 80015ca:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 80015ce:	2a01      	cmp	r2, #1
 80015d0:	d024      	beq.n	800161c <RescheduleTimerList+0xf0>
      Value -= 1;
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29d      	uxth	r5, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	0752      	lsls	r2, r2, #29
 80015dc:	d5fc      	bpl.n	80015d8 <RescheduleTimerList+0xac>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015de:	68d9      	ldr	r1, [r3, #12]
 80015e0:	b2c9      	uxtb	r1, r1
 80015e2:	f461 6190 	orn	r1, r1, #1152	; 0x480
 80015e6:	60d9      	str	r1, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <RescheduleTimerList+0xf8>)
 80015ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015ee:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015f0:	2003      	movs	r0, #3
 80015f2:	f001 f921 	bl	8002838 <HAL_NVIC_ClearPendingIRQ>
    LL_RTC_WAKEUP_SetAutoReload(phrtc->Instance, Value);
 80015f6:	6826      	ldr	r6, [r4, #0]
 80015f8:	6833      	ldr	r3, [r6, #0]
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	0c12      	lsrs	r2, r2, #16
 80015fe:	0412      	lsls	r2, r2, #16
 8001600:	432a      	orrs	r2, r5
 8001602:	615a      	str	r2, [r3, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001604:	f7ff fe92 	bl	800132c <ReadRtcSsrValue>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001608:	6832      	ldr	r2, [r6, #0]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800160a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800160e:	6893      	ldr	r3, [r2, #8]
 8001610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001614:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001616:	f7ff ff87 	bl	8001528 <HW_TS_RTC_CountUpdated_AppNot>
}
 800161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800161c:	4615      	mov	r5, r2
 800161e:	e7da      	b.n	80015d6 <RescheduleTimerList+0xaa>
 8001620:	200001a4 	.word	0x200001a4
 8001624:	40010400 	.word	0x40010400

08001628 <HW_TS_Stop>:
{
 8001628:	b570      	push	{r4, r5, r6, lr}
 800162a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800162c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001632:	4c1d      	ldr	r4, [pc, #116]	; (80016a8 <HW_TS_Stop+0x80>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001634:	2003      	movs	r0, #3
 8001636:	f001 f8db 	bl	80027f0 <HAL_NVIC_DisableIRQ>
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800163a:	2318      	movs	r3, #24
 800163c:	fb03 4305 	mla	r3, r3, r5, r4
 8001640:	7d1b      	ldrb	r3, [r3, #20]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d124      	bne.n	8001690 <HW_TS_Stop+0x68>
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001646:	2100      	movs	r1, #0
 8001648:	4628      	mov	r0, r5
 800164a:	f7ff fe7f 	bl	800134c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800164e:	7923      	ldrb	r3, [r4, #4]
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001650:	2b06      	cmp	r3, #6
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001652:	b2da      	uxtb	r2, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001654:	d122      	bne.n	800169c <HW_TS_Stop+0x74>
      if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001660:	d003      	beq.n	800166a <HW_TS_Stop+0x42>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	f012 0f04 	tst.w	r2, #4
 8001668:	e7fa      	b.n	8001660 <HW_TS_Stop+0x38>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001670:	609a      	str	r2, [r3, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	0752      	lsls	r2, r2, #29
 8001676:	d5fc      	bpl.n	8001672 <HW_TS_Stop+0x4a>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001680:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HW_TS_Stop+0x84>)
 8001684:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001688:	615a      	str	r2, [r3, #20]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800168a:	2003      	movs	r0, #3
 800168c:	f001 f8d4 	bl	8002838 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001690:	2003      	movs	r0, #3
 8001692:	f001 f89f 	bl	80027d4 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001696:	f386 8810 	msr	PRIMASK, r6
}
 800169a:	bd70      	pop	{r4, r5, r6, pc}
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800169c:	7963      	ldrb	r3, [r4, #5]
 800169e:	4293      	cmp	r3, r2
 80016a0:	d0f6      	beq.n	8001690 <HW_TS_Stop+0x68>
      RescheduleTimerList();
 80016a2:	f7ff ff43 	bl	800152c <RescheduleTimerList>
 80016a6:	e7f3      	b.n	8001690 <HW_TS_Stop+0x68>
 80016a8:	200001a4 	.word	0x200001a4
 80016ac:	40010400 	.word	0x40010400

080016b0 <HW_TS_Delete>:
{
 80016b0:	b510      	push	{r4, lr}
 80016b2:	4604      	mov	r4, r0
  HW_TS_Stop(timer_id);
 80016b4:	f7ff ffb8 	bl	8001628 <HW_TS_Stop>
  aTimerContext[timer_id].TimerIDStatus = TimerID_Free; /**<  release ID */
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <HW_TS_Delete+0x18>)
 80016ba:	2318      	movs	r3, #24
 80016bc:	fb03 0404 	mla	r4, r3, r4, r0
 80016c0:	2300      	movs	r3, #0
 80016c2:	7523      	strb	r3, [r4, #20]
}
 80016c4:	bd10      	pop	{r4, pc}
 80016c6:	bf00      	nop
 80016c8:	200001a4 	.word	0x200001a4

080016cc <HW_TS_Start>:
{
 80016cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016d0:	4605      	mov	r5, r0
 80016d2:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016d4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80016da:	2003      	movs	r0, #3
 80016dc:	f001 f888 	bl	80027f0 <HAL_NVIC_DisableIRQ>
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80016e0:	483b      	ldr	r0, [pc, #236]	; (80017d0 <HW_TS_Start+0x104>)
 80016e2:	f04f 0818 	mov.w	r8, #24
 80016e6:	fb08 0705 	mla	r7, r8, r5, r0
 80016ea:	2302      	movs	r3, #2
 80016ec:	753b      	strb	r3, [r7, #20]
  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80016ee:	613c      	str	r4, [r7, #16]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80016f0:	60fc      	str	r4, [r7, #12]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016f2:	7903      	ldrb	r3, [r0, #4]
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4604      	mov	r4, r0
 80016fa:	d116      	bne.n	800172a <HW_TS_Start+0x5e>
    PreviousRunningTimerID = CurrentRunningTimerID;
 80016fc:	7903      	ldrb	r3, [r0, #4]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	7143      	strb	r3, [r0, #5]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
    CurrentRunningTimerID = TimerID;
 8001706:	7105      	strb	r5, [r0, #4]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001708:	777a      	strb	r2, [r7, #29]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800170a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    time_elapsed = 0;
 800170e:	2000      	movs	r0, #0
  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001710:	7923      	ldrb	r3, [r4, #4]
  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001712:	7962      	ldrb	r2, [r4, #5]
 8001714:	429a      	cmp	r2, r3
 8001716:	d053      	beq.n	80017c0 <HW_TS_Start+0xf4>
    RescheduleTimerList();
 8001718:	f7ff ff08 	bl	800152c <RescheduleTimerList>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800171c:	2003      	movs	r0, #3
 800171e:	f001 f859 	bl	80027d4 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001722:	f386 8810 	msr	PRIMASK, r6
}
 8001726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    time_elapsed = ReturnTimeElapsed();
 800172a:	f7ff fe45 	bl	80013b8 <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4403      	add	r3, r0
 8001732:	613b      	str	r3, [r7, #16]
    time_left = aTimerContext[TimerID].CountLeft;
 8001734:	6939      	ldr	r1, [r7, #16]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001736:	7923      	ldrb	r3, [r4, #4]
 8001738:	fb08 4303 	mla	r3, r8, r3, r4
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	4299      	cmp	r1, r3
 8001740:	d323      	bcc.n	800178a <HW_TS_Start+0xbe>
      timer_id_lookup = CurrentRunningTimerID;
 8001742:	7922      	ldrb	r2, [r4, #4]
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001744:	b2d3      	uxtb	r3, r2
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001746:	fb08 4202 	mla	r2, r8, r2, r4
 800174a:	7f52      	ldrb	r2, [r2, #29]
 800174c:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800174e:	2a06      	cmp	r2, #6
 8001750:	d004      	beq.n	800175c <HW_TS_Start+0x90>
 8001752:	fb08 4202 	mla	r2, r8, r2, r4
 8001756:	6912      	ldr	r2, [r2, #16]
 8001758:	4291      	cmp	r1, r2
 800175a:	d212      	bcs.n	8001782 <HW_TS_Start+0xb6>
  next_id = aTimerContext[RefTimerID].NextID;
 800175c:	2218      	movs	r2, #24
 800175e:	fb02 4103 	mla	r1, r2, r3, r4
 8001762:	7f49      	ldrb	r1, [r1, #29]
 8001764:	b2cf      	uxtb	r7, r1
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001766:	2906      	cmp	r1, #6
    aTimerContext[next_id].PreviousID = TimerID;
 8001768:	bf1c      	itt	ne
 800176a:	fb02 4207 	mlane	r2, r2, r7, r4
 800176e:	7715      	strbne	r5, [r2, #28]
  aTimerContext[TimerID].NextID = next_id;
 8001770:	2218      	movs	r2, #24
 8001772:	fb02 4105 	mla	r1, r2, r5, r4
 8001776:	774f      	strb	r7, [r1, #29]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001778:	770b      	strb	r3, [r1, #28]
  aTimerContext[RefTimerID].NextID = TimerID;
 800177a:	fb02 4303 	mla	r3, r2, r3, r4
 800177e:	775d      	strb	r5, [r3, #29]
  return;
 8001780:	e7c6      	b.n	8001710 <HW_TS_Start+0x44>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001782:	fb08 4303 	mla	r3, r8, r3, r4
 8001786:	7f5a      	ldrb	r2, [r3, #29]
 8001788:	e7dc      	b.n	8001744 <HW_TS_Start+0x78>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800178a:	7923      	ldrb	r3, [r4, #4]
  if(RefTimerID != CurrentRunningTimerID)
 800178c:	7922      	ldrb	r2, [r4, #4]
 800178e:	4293      	cmp	r3, r2
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001790:	b2d9      	uxtb	r1, r3
  if(RefTimerID != CurrentRunningTimerID)
 8001792:	fb08 f303 	mul.w	r3, r8, r3
 8001796:	d010      	beq.n	80017ba <HW_TS_Start+0xee>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001798:	4423      	add	r3, r4
 800179a:	7f1a      	ldrb	r2, [r3, #28]
    aTimerContext[previous_id].NextID = TimerID;
 800179c:	fb08 4802 	mla	r8, r8, r2, r4
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80017a0:	fa5f fc82 	uxtb.w	ip, r2
    aTimerContext[previous_id].NextID = TimerID;
 80017a4:	f888 501d 	strb.w	r5, [r8, #29]
    aTimerContext[TimerID].NextID = RefTimerID;
 80017a8:	7779      	strb	r1, [r7, #29]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80017aa:	f887 c01c 	strb.w	ip, [r7, #28]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80017ae:	771d      	strb	r5, [r3, #28]
      PreviousRunningTimerID = CurrentRunningTimerID;
 80017b0:	7923      	ldrb	r3, [r4, #4]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	7163      	strb	r3, [r4, #5]
      CurrentRunningTimerID = TimerID;
 80017b6:	7125      	strb	r5, [r4, #4]
 80017b8:	e7aa      	b.n	8001710 <HW_TS_Start+0x44>
    aTimerContext[TimerID].NextID = RefTimerID;
 80017ba:	7779      	strb	r1, [r7, #29]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80017bc:	4423      	add	r3, r4
 80017be:	e7f6      	b.n	80017ae <HW_TS_Start+0xe2>
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80017c0:	2318      	movs	r3, #24
 80017c2:	fb03 4405 	mla	r4, r3, r5, r4
 80017c6:	6923      	ldr	r3, [r4, #16]
 80017c8:	1a18      	subs	r0, r3, r0
 80017ca:	6120      	str	r0, [r4, #16]
 80017cc:	e7a6      	b.n	800171c <HW_TS_Start+0x50>
 80017ce:	bf00      	nop
 80017d0:	200001a4 	.word	0x200001a4

080017d4 <HW_TS_RTC_Wakeup_Handler>:
{
 80017d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017d8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80017de:	4920      	ldr	r1, [pc, #128]	; (8001860 <HW_TS_RTC_Wakeup_Handler+0x8c>)
 80017e0:	680b      	ldr	r3, [r1, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ea:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 80017ec:	790c      	ldrb	r4, [r1, #4]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80017ee:	2218      	movs	r2, #24
  local_current_running_timer_id = CurrentRunningTimerID;
 80017f0:	b2e6      	uxtb	r6, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80017f2:	fb02 1404 	mla	r4, r2, r4, r1
 80017f6:	7d22      	ldrb	r2, [r4, #20]
 80017f8:	2a02      	cmp	r2, #2
 80017fa:	d124      	bne.n	8001846 <HW_TS_RTC_Wakeup_Handler+0x72>
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80017fc:	f8d4 8008 	ldr.w	r8, [r4, #8]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001800:	69a7      	ldr	r7, [r4, #24]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001802:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 8001806:	b1cb      	cbz	r3, 800183c <HW_TS_RTC_Wakeup_Handler+0x68>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001808:	7d63      	ldrb	r3, [r4, #21]
 800180a:	2b01      	cmp	r3, #1
 800180c:	b2d9      	uxtb	r1, r3
 800180e:	d10f      	bne.n	8001830 <HW_TS_RTC_Wakeup_Handler+0x5c>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001810:	4630      	mov	r0, r6
 8001812:	f7ff fd9b 	bl	800134c <UnlinkTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001816:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800181a:	68e1      	ldr	r1, [r4, #12]
 800181c:	4630      	mov	r0, r6
 800181e:	f7ff ff55 	bl	80016cc <HW_TS_Start>
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001822:	4642      	mov	r2, r8
 8001824:	4631      	mov	r1, r6
 8001826:	4638      	mov	r0, r7
 8001828:	f000 fe3a 	bl	80024a0 <HW_TS_RTC_Int_AppNot>
}
 800182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001830:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Stop(local_current_running_timer_id);
 8001834:	4630      	mov	r0, r6
 8001836:	f7ff fef7 	bl	8001628 <HW_TS_Stop>
 800183a:	e7f2      	b.n	8001822 <HW_TS_RTC_Wakeup_Handler+0x4e>
      RescheduleTimerList();
 800183c:	f7ff fe76 	bl	800152c <RescheduleTimerList>
 8001840:	f385 8810 	msr	PRIMASK, r5
  return;
 8001844:	e7f2      	b.n	800182c <HW_TS_RTC_Wakeup_Handler+0x58>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	0752      	lsls	r2, r2, #29
 800184a:	d5fc      	bpl.n	8001846 <HW_TS_RTC_Wakeup_Handler+0x72>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001854:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001856:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HW_TS_RTC_Wakeup_Handler+0x90>)
 8001858:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800185c:	615a      	str	r2, [r3, #20]
 800185e:	e7ef      	b.n	8001840 <HW_TS_RTC_Wakeup_Handler+0x6c>
 8001860:	200001a4 	.word	0x200001a4
 8001864:	40010400 	.word	0x40010400

08001868 <hci_timeout_callback>:

  return;
}

void hci_timeout_callback(void)
{
 8001868:	b508      	push	{r3, lr}
  HciLayerTimeout = TRUE;
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <hci_timeout_callback+0x14>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]

  /**
   * Unlock hci_send_req() that is waiting for an event that will never come
   */
  TL_BLE_HCI_RxCmdResp();
 8001870:	f000 f8df 	bl	8001a32 <TL_BLE_HCI_RxCmdResp>
   * Notify the application the HCI interface has timed out
   */
  TL_BLE_HCI_ToNot();

  return;
}
 8001874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TL_BLE_HCI_ToNot();
 8001878:	f000 b8de 	b.w	8001a38 <TL_BLE_HCI_ToNot>
 800187c:	20000248 	.word	0x20000248

08001880 <TL_BLE_EvtReceived>:
{
 8001880:	b508      	push	{r3, lr}
  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 8001882:	7a43      	ldrb	r3, [r0, #9]
 8001884:	3b0e      	subs	r3, #14
 8001886:	2b01      	cmp	r3, #1
{
 8001888:	4601      	mov	r1, r0
  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 800188a:	d806      	bhi.n	800189a <TL_BLE_EvtReceived+0x1a>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800188c:	4807      	ldr	r0, [pc, #28]	; (80018ac <TL_BLE_EvtReceived+0x2c>)
 800188e:	f000 fa40 	bl	8001d12 <LST_insert_tail>
}
 8001892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TL_BLE_HCI_RxCmdResp(); /**< Notify the application a full Cmd Event has been received */
 8001896:	f000 b8cc 	b.w	8001a32 <TL_BLE_HCI_RxCmdResp>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <TL_BLE_EvtReceived+0x30>)
 800189c:	f000 fa39 	bl	8001d12 <LST_insert_tail>
}
 80018a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TL_BLE_HCI_UserEvtProcReq((TL_PacketHeader_t*)&HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <TL_BLE_EvtReceived+0x30>)
 80018a6:	f000 b8e1 	b.w	8001a6c <TL_BLE_HCI_UserEvtProcReq>
 80018aa:	bf00      	nop
 80018ac:	20000249 	.word	0x20000249
 80018b0:	20000251 	.word	0x20000251

080018b4 <TL_BLE_HCI_Init>:

void TL_BLE_HCI_Init(TL_BLE_HCI_InitMode_t initmode, TL_CmdPacket_t * p_cmdbuffer, uint8_t *p_evtpool, uint32_t evtpoolsize)
{
 80018b4:	b530      	push	{r4, r5, lr}
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80018b6:	4c18      	ldr	r4, [pc, #96]	; (8001918 <TL_BLE_HCI_Init+0x64>)
{
 80018b8:	b085      	sub	sp, #20
 80018ba:	4605      	mov	r5, r0
  LST_init_head (&HciCmdEventQueue);
 80018bc:	1c60      	adds	r0, r4, #1
{
 80018be:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80018c2:	9301      	str	r3, [sp, #4]
  LST_init_head (&HciCmdEventQueue);
 80018c4:	f000 fa18 	bl	8001cf8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;

  if(initmode == TL_BLE_HCI_InitFull)
 80018c8:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
  pCmdBuffer = p_cmdbuffer;
 80018cc:	9903      	ldr	r1, [sp, #12]
 80018ce:	6161      	str	r1, [r4, #20]
  if(initmode == TL_BLE_HCI_InitFull)
 80018d0:	2d01      	cmp	r5, #1
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	d111      	bne.n	80018fa <TL_BLE_HCI_Init+0x46>
  LST_init_head (&HciAsynchEventQueue);
 80018d6:	f104 0009 	add.w	r0, r4, #9
 80018da:	9101      	str	r1, [sp, #4]
 80018dc:	f000 fa0c 	bl	8001cf8 <LST_init_head>
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 80018e0:	4628      	mov	r0, r5
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 80018e2:	7625      	strb	r5, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 80018e4:	f000 fdc2 	bl	800246c <TL_BLE_HCI_StatusNot>
  {
    Initialization();

    TL_BLE_Init(TL_BLE_Init_Full, p_cmdbuffer, p_evtpool, evtpoolsize);
 80018e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80018ec:	9901      	ldr	r1, [sp, #4]
 80018ee:	4628      	mov	r0, r5

    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
  }

  return;
}
 80018f0:	b005      	add	sp, #20
 80018f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 80018f6:	f000 b987 	b.w	8001c08 <TL_BLE_Init>
  LST_init_head (&HciAsynchEventQueue);
 80018fa:	f104 0009 	add.w	r0, r4, #9
 80018fe:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001902:	f000 f9f9 	bl	8001cf8 <LST_init_head>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 8001906:	2001      	movs	r0, #1
 8001908:	7620      	strb	r0, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 800190a:	f000 fdaf 	bl	800246c <TL_BLE_HCI_StatusNot>
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 800190e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001912:	9901      	ldr	r1, [sp, #4]
 8001914:	2000      	movs	r0, #0
 8001916:	e7eb      	b.n	80018f0 <TL_BLE_HCI_Init+0x3c>
 8001918:	20000248 	.word	0x20000248

0800191c <TL_BLE_HCI_UserEvtProc>:
{
  return HCICmdStatus;
}

void TL_BLE_HCI_UserEvtProc(void)
{
 800191c:	b513      	push	{r0, r1, r4, lr}
  TL_EvtPacket_t *phcievtbuffer;

  while(LST_is_empty(&HciAsynchEventQueue) == FALSE)
 800191e:	4c09      	ldr	r4, [pc, #36]	; (8001944 <TL_BLE_HCI_UserEvtProc+0x28>)
 8001920:	4808      	ldr	r0, [pc, #32]	; (8001944 <TL_BLE_HCI_UserEvtProc+0x28>)
 8001922:	f000 f9ec 	bl	8001cfe <LST_is_empty>
 8001926:	b108      	cbz	r0, 800192c <TL_BLE_HCI_UserEvtProc+0x10>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
    TL_BLE_EvtDone( phcievtbuffer);
  }

  return;
}
 8001928:	b002      	add	sp, #8
 800192a:	bd10      	pop	{r4, pc}
    LST_remove_head (&HciAsynchEventQueue, (tListNode **)&phcievtbuffer);
 800192c:	a901      	add	r1, sp, #4
 800192e:	4620      	mov	r0, r4
 8001930:	f000 fa06 	bl	8001d40 <LST_remove_head>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
 8001934:	9801      	ldr	r0, [sp, #4]
 8001936:	3008      	adds	r0, #8
 8001938:	f000 f89b 	bl	8001a72 <TL_BLE_HCI_UserEvtRx>
    TL_BLE_EvtDone( phcievtbuffer);
 800193c:	9801      	ldr	r0, [sp, #4]
 800193e:	f000 f9d9 	bl	8001cf4 <TL_BLE_EvtDone>
 8001942:	e7ed      	b.n	8001920 <TL_BLE_HCI_UserEvtProc+0x4>
 8001944:	20000251 	.word	0x20000251

08001948 <TL_BLE_HCI_SendCmd>:

int32_t TL_BLE_HCI_SendCmd( TL_BLE_HCI_Cmd_t *p_cmd )
{
 8001948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800194c:	4605      	mov	r5, r0
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdBusy);
 800194e:	2000      	movs	r0, #0
 8001950:	f000 fd8c 	bl	800246c <TL_BLE_HCI_StatusNot>
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  int return_value;

  Cmd_SetStatus(TL_BLE_HCI_CmdBusy);
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8001954:	886b      	ldrh	r3, [r5, #2]
 8001956:	882a      	ldrh	r2, [r5, #0]
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 8001958:	4c31      	ldr	r4, [pc, #196]	; (8001a20 <TL_BLE_HCI_SendCmd+0xd8>)
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800195a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800195e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8001962:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  return return_value;
}

void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8001966:	6960      	ldr	r0, [r4, #20]
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 8001968:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800196a:	f8a0 3009 	strh.w	r3, [r0, #9]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800196e:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.plen = plen;
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	300c      	adds	r0, #12
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8001974:	b29f      	uxth	r7, r3
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 8001976:	7626      	strb	r6, [r4, #24]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8001978:	f001 ff62 	bl	8003840 <memcpy>

  TL_BLE_SendCmd();
 800197c:	f000 f96c 	bl	8001c58 <TL_BLE_SendCmd>
  HciLayerTimeout = FALSE;
 8001980:	4622      	mov	r2, r4
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 8001982:	4928      	ldr	r1, [pc, #160]	; (8001a24 <TL_BLE_HCI_SendCmd+0xdc>)
  HciLayerTimeout = FALSE;
 8001984:	f802 6b19 	strb.w	r6, [r2], #25
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 8001988:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800198c:	f000 f85a 	bl	8001a44 <TL_BLE_HCI_TimStart>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8001990:	f104 0801 	add.w	r8, r4, #1
  return HCICmdStatus;
 8001994:	7e23      	ldrb	r3, [r4, #24]
  while((CmdGetStatus() == TL_BLE_HCI_CmdBusy) && (HciLayerTimeout == FALSE))
 8001996:	b90b      	cbnz	r3, 800199c <TL_BLE_HCI_SendCmd+0x54>
 8001998:	7823      	ldrb	r3, [r4, #0]
 800199a:	b15b      	cbz	r3, 80019b4 <TL_BLE_HCI_SendCmd+0x6c>
  TL_BLE_HCI_TimStop(hci_timer_id);
 800199c:	7e60      	ldrb	r0, [r4, #25]
 800199e:	f000 f84f 	bl	8001a40 <TL_BLE_HCI_TimStop>
  if(HciLayerTimeout == TRUE)
 80019a2:	7820      	ldrb	r0, [r4, #0]
}
 80019a4:	2801      	cmp	r0, #1
 80019a6:	f04f 30ff 	mov.w	r0, #4294967295
 80019aa:	bf18      	it	ne
 80019ac:	2000      	movne	r0, #0
 80019ae:	b003      	add	sp, #12
 80019b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TL_BLE_HCI_WaitCmdResp();
 80019b4:	f000 f841 	bl	8001a3a <TL_BLE_HCI_WaitCmdResp>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 80019b8:	f04f 0901 	mov.w	r9, #1
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80019bc:	4640      	mov	r0, r8
 80019be:	f000 f99e 	bl	8001cfe <LST_is_empty>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d1e6      	bne.n	8001994 <TL_BLE_HCI_SendCmd+0x4c>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80019c6:	a901      	add	r1, sp, #4
 80019c8:	4640      	mov	r0, r8
 80019ca:	f000 f9b9 	bl	8001d40 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_EVT_CS_OPCODE)
 80019ce:	9e01      	ldr	r6, [sp, #4]
 80019d0:	7a73      	ldrb	r3, [r6, #9]
 80019d2:	2b0f      	cmp	r3, #15
 80019d4:	d111      	bne.n	80019fa <TL_BLE_HCI_SendCmd+0xb2>
        if(pcommand_status_event->cmdcode == opcode)
 80019d6:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 80019da:	42bb      	cmp	r3, r7
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80019dc:	bf02      	ittt	eq
 80019de:	692b      	ldreq	r3, [r5, #16]
 80019e0:	7af2      	ldrbeq	r2, [r6, #11]
 80019e2:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 80019e4:	7b33      	ldrb	r3, [r6, #12]
        if(pcommand_complete_event->numcmd != 0)
 80019e6:	b123      	cbz	r3, 80019f2 <TL_BLE_HCI_SendCmd+0xaa>
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 80019e8:	2001      	movs	r0, #1
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 80019ea:	f884 9018 	strb.w	r9, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 80019ee:	f000 fd3d 	bl	800246c <TL_BLE_HCI_StatusNot>
      TL_BLE_EvtDone( pevtpacket);
 80019f2:	9801      	ldr	r0, [sp, #4]
 80019f4:	f000 f97e 	bl	8001cf4 <TL_BLE_EvtDone>
 80019f8:	e7e0      	b.n	80019bc <TL_BLE_HCI_SendCmd+0x74>
        if(pcommand_complete_event->cmdcode == opcode)
 80019fa:	89b3      	ldrh	r3, [r6, #12]
 80019fc:	42bb      	cmp	r3, r7
 80019fe:	d10c      	bne.n	8001a1a <TL_BLE_HCI_SendCmd+0xd2>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 8001a00:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8001a02:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8001a04:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 8001a06:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	bfa8      	it	ge
 8001a0e:	461a      	movge	r2, r3
 8001a10:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8001a12:	f106 010e 	add.w	r1, r6, #14
 8001a16:	f001 ff13 	bl	8003840 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 8001a1a:	7af3      	ldrb	r3, [r6, #11]
 8001a1c:	e7e3      	b.n	80019e6 <TL_BLE_HCI_SendCmd+0x9e>
 8001a1e:	bf00      	nop
 8001a20:	20000248 	.word	0x20000248
 8001a24:	08001869 	.word	0x08001869

08001a28 <hci_send_req>:


/* This API is imposed by the MW */
int32_t hci_send_req(struct hci_request *r, uint8_t async)
{
  return ( TL_BLE_HCI_SendCmd( (TL_BLE_HCI_Cmd_t *)r ) );
 8001a28:	f7ff bf8e 	b.w	8001948 <TL_BLE_HCI_SendCmd>

08001a2c <TL_BLE_R_EvtProcReq>:



void TL_BLE_R_EvtProcReq(void)
{
  SCH_SetTask(CFG_IdleTask_TlEvt);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f000 ba43 	b.w	8001eb8 <SCH_SetTask>

08001a32 <TL_BLE_HCI_RxCmdResp>:
  return;
}

void TL_BLE_HCI_RxCmdResp()
{
  SCH_SetEvt(CFG_IdleEvt_HciCmdEvtResp);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 ba72 	b.w	8001f1c <SCH_SetEvt>

08001a38 <TL_BLE_HCI_ToNot>:
}

void TL_BLE_HCI_ToNot(void)
{
  return;
}
 8001a38:	4770      	bx	lr

08001a3a <TL_BLE_HCI_WaitCmdResp>:

void TL_BLE_HCI_WaitCmdResp(void)
{
  SCH_WaitEvt(CFG_IdleEvt_HciCmdEvtResp);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 bab0 	b.w	8001fa0 <SCH_WaitEvt>

08001a40 <TL_BLE_HCI_TimStop>:
  return;
}

void TL_BLE_HCI_TimStop(uint8_t timerID)
{
  HW_TS_Delete(timerID);
 8001a40:	f7ff be36 	b.w	80016b0 <HW_TS_Delete>

08001a44 <TL_BLE_HCI_TimStart>:

  return;
}

void TL_BLE_HCI_TimStart(uint32_t expiryTime, void(*timercb)(void), uint8_t *timerID)
{
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	4614      	mov	r4, r2
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 8001a48:	2200      	movs	r2, #0
{
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4605      	mov	r5, r0
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 8001a4e:	4621      	mov	r1, r4
 8001a50:	4610      	mov	r0, r2
 8001a52:	f7ff fd3f 	bl	80014d4 <HW_TS_Create>
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 8001a56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a5a:	434d      	muls	r5, r1
 8001a5c:	7820      	ldrb	r0, [r4, #0]
 8001a5e:	213f      	movs	r1, #63	; 0x3f
 8001a60:	fbb5 f1f1 	udiv	r1, r5, r1

  return;
}
 8001a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 8001a68:	f7ff be30 	b.w	80016cc <HW_TS_Start>

08001a6c <TL_BLE_HCI_UserEvtProcReq>:
 * @param  None
 * @retval None
 */
void TL_BLE_HCI_UserEvtProcReq( TL_PacketHeader_t *p_userevt_queue )
{
  SCH_SetTask(CFG_IdleTask_HciAsynchEvt);
 8001a6c:	2005      	movs	r0, #5
 8001a6e:	f000 ba23 	b.w	8001eb8 <SCH_SetTask>

08001a72 <TL_BLE_HCI_UserEvtRx>:
 * @param  pckt: The user event received from the BlueNRG device
 * @retval None
 */
void TL_BLE_HCI_UserEvtRx(void *pckt)
{
  SVCCTL_HCI_UserEvtRx(pckt);
 8001a72:	f7fe bf91 	b.w	8000998 <SVCCTL_HCI_UserEvtRx>
	...

08001a78 <Event_Queue_Process>:
  return;
}

/* Private Functions Definition ------------------------------------------------------*/
static void Event_Queue_Process(TL_BLE_R_EvtPacketType_t tl_event_queue_type)
{
 8001a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001a7c:	4e32      	ldr	r6, [pc, #200]	; (8001b48 <Event_Queue_Process+0xd0>)
  TL_EvtPacket_t * ptl_evt_buffer;
  TL_EvtPacket_t *plarge_hci_buffer;

  if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 8001a7e:	4605      	mov	r5, r0
 8001a80:	2800      	cmp	r0, #0
 8001a82:	d05e      	beq.n	8001b42 <Event_Queue_Process+0xca>
  {
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
  }
  else
  {
    plarge_hci_buffer = (TL_EvtPacket_t*)pCmdBuffer;
 8001a84:	f8d6 710c 	ldr.w	r7, [r6, #268]	; 0x10c
  }

  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 8001a88:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <Event_Queue_Process+0xd4>)
 8001a8a:	240e      	movs	r4, #14
 8001a8c:	436c      	muls	r4, r5
 8001a8e:	eb03 0804 	add.w	r8, r3, r4
  {
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 8001a92:	4434      	add	r4, r6
 8001a94:	e02e      	b.n	8001af4 <Event_Queue_Process+0x7c>
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
 8001a96:	4640      	mov	r0, r8
 8001a98:	a901      	add	r1, sp, #4
 8001a9a:	f000 f951 	bl	8001d40 <LST_remove_head>
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 8001a9e:	f894 9118 	ldrb.w	r9, [r4, #280]	; 0x118
 8001aa2:	9801      	ldr	r0, [sp, #4]
 8001aa4:	f1b9 0f00 	cmp.w	r9, #0
 8001aa8:	d103      	bne.n	8001ab2 <Event_Queue_Process+0x3a>
    {
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl = ptl_evt_buffer->evtserial.evt.plen + TL_EVT_HDR_SIZE;
 8001aaa:	7a83      	ldrb	r3, [r0, #10]
 8001aac:	3303      	adds	r3, #3
 8001aae:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
    }

    if(TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl > TL_BLE_EVENT_FRAME_SIZE)
 8001ab2:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
 8001ab6:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8001aba:	d928      	bls.n	8001b0e <Event_Queue_Process+0x96>
      /**
       * The packet is not complete
       */
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 8001abc:	f8b4 c11c 	ldrh.w	ip, [r4, #284]	; 0x11c
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 8001ac6:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	f100 0108 	add.w	r1, r0, #8
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 8001ad2:	f8a4 211a 	strh.w	r2, [r4, #282]	; 0x11a
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 8001ad6:	eb03 000c 	add.w	r0, r3, ip
 8001ada:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001ade:	f001 feaf 	bl	8003840 <memcpy>
      MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 8001ae2:	9801      	ldr	r0, [sp, #4]
 8001ae4:	f000 f9c6 	bl	8001e74 <MM_ReleaseBuffer>
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset += TL_BLE_EVENT_FRAME_SIZE;
 8001ae8:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8001aec:	f503 7381 	add.w	r3, r3, #258	; 0x102
      else
      {
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
      }
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset  = 0;
 8001af0:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 8001af4:	4640      	mov	r0, r8
 8001af6:	f000 f902 	bl	8001cfe <LST_is_empty>
 8001afa:	b928      	cbnz	r0, 8001b08 <Event_Queue_Process+0x90>
 8001afc:	f896 312c 	ldrb.w	r3, [r6, #300]	; 0x12c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0c8      	beq.n	8001a96 <Event_Queue_Process+0x1e>
 8001b04:	2d01      	cmp	r5, #1
 8001b06:	d0c6      	beq.n	8001a96 <Event_Queue_Process+0x1e>
    }
  }

  return;
}
 8001b08:	b003      	add	sp, #12
 8001b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_cont)
 8001b0e:	f1b9 0f01 	cmp.w	r9, #1
 8001b12:	d110      	bne.n	8001b36 <Event_Queue_Process+0xbe>
        memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl);
 8001b14:	f8b4 c11c 	ldrh.w	ip, [r4, #284]	; 0x11c
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	f100 0108 	add.w	r1, r0, #8
 8001b20:	eb03 000c 	add.w	r0, r3, ip
 8001b24:	f001 fe8c 	bl	8003840 <memcpy>
        MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 8001b28:	9801      	ldr	r0, [sp, #4]
 8001b2a:	f000 f9a3 	bl	8001e74 <MM_ReleaseBuffer>
        if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 8001b2e:	b90d      	cbnz	r5, 8001b34 <Event_Queue_Process+0xbc>
          HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Busy;
 8001b30:	f886 912c 	strb.w	r9, [r6, #300]	; 0x12c
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)plarge_hci_buffer );
 8001b34:	4638      	mov	r0, r7
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
 8001b36:	f7ff fea3 	bl	8001880 <TL_BLE_EvtReceived>
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8001b40:	e7d6      	b.n	8001af0 <Event_Queue_Process+0x78>
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
 8001b42:	4637      	mov	r7, r6
 8001b44:	e7a0      	b.n	8001a88 <Event_Queue_Process+0x10>
 8001b46:	bf00      	nop
 8001b48:	20000264 	.word	0x20000264
 8001b4c:	20000374 	.word	0x20000374

08001b50 <TL_BLE_R_EvtInput>:
{
 8001b50:	b508      	push	{r3, lr}
  LST_insert_tail (&TLQueueEvtContext[hci_evt_packet_type].TlBufferQueue, (tListNode *)hci_evt_buffer);
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <TL_BLE_R_EvtInput+0x18>)
 8001b54:	220e      	movs	r2, #14
 8001b56:	fb02 3000 	mla	r0, r2, r0, r3
 8001b5a:	f000 f8da 	bl	8001d12 <LST_insert_tail>
}
 8001b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TL_BLE_R_EvtProcReq();
 8001b62:	f7ff bf63 	b.w	8001a2c <TL_BLE_R_EvtProcReq>
 8001b66:	bf00      	nop
 8001b68:	20000374 	.word	0x20000374

08001b6c <TL_BLE_R_EvtProc>:
{
 8001b6c:	b508      	push	{r3, lr}
  Event_Queue_Process(TL_BLE_R_HciCmdEvt);
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7ff ff82 	bl	8001a78 <Event_Queue_Process>
}
 8001b74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Event_Queue_Process(TL_BLE_R_HciAsynchEvt);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff bf7d 	b.w	8001a78 <Event_Queue_Process>
	...

08001b80 <TL_BLE_R_Init>:
{
 8001b80:	b538      	push	{r3, r4, r5, lr}
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 8001b82:	4c0c      	ldr	r4, [pc, #48]	; (8001bb4 <TL_BLE_R_Init+0x34>)
 8001b84:	2300      	movs	r3, #0
{
 8001b86:	4605      	mov	r5, r0
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 8001b88:	f504 7088 	add.w	r0, r4, #272	; 0x110
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 8001b8c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciPacketStatus = hci_packet_start;
 8001b90:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciLargeBufferOffset = 0;
 8001b94:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciLargeBufferOffset = 0;
 8001b98:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
  HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 8001b9c:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 8001ba0:	f000 f8aa 	bl	8001cf8 <LST_init_head>
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciCmdEvt].TlBufferQueue);
 8001ba4:	f504 708f 	add.w	r0, r4, #286	; 0x11e
 8001ba8:	f000 f8a6 	bl	8001cf8 <LST_init_head>
  pCmdBuffer = cmdbuffer;
 8001bac:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
}
 8001bb0:	bd38      	pop	{r3, r4, r5, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000264 	.word	0x20000264

08001bb8 <TL_BLE_R_EvtDone>:

void TL_BLE_R_EvtDone(TL_EvtPacket_t * hcievt)
{
  if(hcievt == (TL_EvtPacket_t *)&HciLargeAsynchBuffer)
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <TL_BLE_R_EvtDone+0x20>)
 8001bba:	4290      	cmp	r0, r2
 8001bbc:	d104      	bne.n	8001bc8 <TL_BLE_R_EvtDone+0x10>
  {
    HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c

    /**
     * Check if there are waiting events to be copied in the large buffer
     */
    TL_BLE_R_EvtProcReq();
 8001bc4:	f7ff bf32 	b.w	8001a2c <TL_BLE_R_EvtProcReq>
  }
  else if(hcievt != (TL_EvtPacket_t *)pCmdBuffer)
 8001bc8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8001bcc:	4282      	cmp	r2, r0
 8001bce:	d001      	beq.n	8001bd4 <TL_BLE_R_EvtDone+0x1c>
  {
    MM_ReleaseBuffer((MM_pBufAdd_t)hcievt);
 8001bd0:	f000 b950 	b.w	8001e74 <MM_ReleaseBuffer>
  }

  return;
}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000264 	.word	0x20000264

08001bdc <Allocate_New_Buffer_To_TL>:
}


/* Private Functions Definition ------------------------------------------------------*/
static void Allocate_New_Buffer_To_TL(void)
{
 8001bdc:	b508      	push	{r3, lr}
  pHciEventBuffer =  (TL_EvtPacket_t*) MM_GetBuffer(sizeof(TL_PacketHeader_t) + TL_BLE_EVENT_FRAME_SIZE, (MM_pCb_t) Allocate_New_Buffer_To_TL);
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <Allocate_New_Buffer_To_TL+0x24>)
 8001be0:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8001be4:	f000 f92c 	bl	8001e40 <MM_GetBuffer>
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <Allocate_New_Buffer_To_TL+0x28>)
 8001bea:	6018      	str	r0, [r3, #0]
  if(pHciEventBuffer)
 8001bec:	b138      	cbz	r0, 8001bfe <Allocate_New_Buffer_To_TL+0x22>
  {
    TlSpiIsrContext.TlSizeLeftInBufferFrame = TL_BLE_EVENT_FRAME_SIZE;
 8001bee:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001bf2:	8119      	strh	r1, [r3, #8]
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 8001bf4:	3008      	adds	r0, #8
  }

  return;
}
 8001bf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 8001bfa:	f7ff b9f5 	b.w	8000fe8 <HW_BNRG_EvtReq>
}
 8001bfe:	bd08      	pop	{r3, pc}
 8001c00:	08001bdd 	.word	0x08001bdd
 8001c04:	20000394 	.word	0x20000394

08001c08 <TL_BLE_Init>:
{
 8001c08:	b570      	push	{r4, r5, r6, lr}
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8001c0a:	4e11      	ldr	r6, [pc, #68]	; (8001c50 <TL_BLE_Init+0x48>)
{
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	4610      	mov	r0, r2
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8001c10:	2200      	movs	r2, #0
{
 8001c12:	460d      	mov	r5, r1
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8001c14:	7132      	strb	r2, [r6, #4]
  MM_Init(evtpool, evtpoolsize, ELT_SIZE);
 8001c16:	4619      	mov	r1, r3
 8001c18:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8001c1c:	f000 f8f0 	bl	8001e00 <MM_Init>
  TL_BLE_R_Init(cmdbuffer);
 8001c20:	4628      	mov	r0, r5
  pCmdBuffer = cmdbuffer;
 8001c22:	60f5      	str	r5, [r6, #12]
  TL_BLE_R_Init(cmdbuffer);
 8001c24:	f7ff ffac 	bl	8001b80 <TL_BLE_R_Init>
  if( initmode == TL_BLE_Init_Limited)
 8001c28:	b934      	cbnz	r4, 8001c38 <TL_BLE_Init+0x30>
    HW_BNRG_Init(HW_BNRG_Limited);
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f7ff f940 	bl	8000eb0 <HW_BNRG_Init>
}
 8001c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Allocate_New_Buffer_To_TL();
 8001c34:	f7ff bfd2 	b.w	8001bdc <Allocate_New_Buffer_To_TL>
    HW_BNRG_Init(HW_BNRG_Full);
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7ff f939 	bl	8000eb0 <HW_BNRG_Init>
    while(HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET);
 8001c3e:	4c05      	ldr	r4, [pc, #20]	; (8001c54 <TL_BLE_Init+0x4c>)
 8001c40:	2140      	movs	r1, #64	; 0x40
 8001c42:	4620      	mov	r0, r4
 8001c44:	f001 f8d2 	bl	8002dec <HAL_GPIO_ReadPin>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d0f9      	beq.n	8001c40 <TL_BLE_Init+0x38>
 8001c4c:	e7f0      	b.n	8001c30 <TL_BLE_Init+0x28>
 8001c4e:	bf00      	nop
 8001c50:	20000394 	.word	0x20000394
 8001c54:	48001000 	.word	0x48001000

08001c58 <TL_BLE_SendCmd>:
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <TL_BLE_SendCmd+0x14>)
 8001c5a:	68d8      	ldr	r0, [r3, #12]
  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 8001c5c:	7ac1      	ldrb	r1, [r0, #11]
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	7203      	strb	r3, [r0, #8]
  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 8001c62:	3104      	adds	r1, #4
 8001c64:	3008      	adds	r0, #8
 8001c66:	f7ff ba57 	b.w	8001118 <HW_BNRG_Send>
 8001c6a:	bf00      	nop
 8001c6c:	20000394 	.word	0x20000394

08001c70 <HW_BNRG_Isr>:
{
 8001c70:	b570      	push	{r4, r5, r6, lr}
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 8001c72:	4c1f      	ldr	r4, [pc, #124]	; (8001cf0 <HW_BNRG_Isr+0x80>)
 8001c74:	7923      	ldrb	r3, [r4, #4]
 8001c76:	2b01      	cmp	r3, #1
{
 8001c78:	4605      	mov	r5, r0
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 8001c7a:	d114      	bne.n	8001ca6 <HW_BNRG_Isr+0x36>
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi -= event_payload_len;
 8001c7c:	88e3      	ldrh	r3, [r4, #6]
 8001c7e:	1a1b      	subs	r3, r3, r0
 8001c80:	80e3      	strh	r3, [r4, #6]
  if(TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi != 0)
 8001c82:	88e6      	ldrh	r6, [r4, #6]
 8001c84:	6821      	ldr	r1, [r4, #0]
 8001c86:	b33e      	cbz	r6, 8001cd8 <HW_BNRG_Isr+0x68>
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 8001c88:	8922      	ldrh	r2, [r4, #8]
    TlSpiIsrContext.TlPacketStatus = tl_packet_cont;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	7123      	strb	r3, [r4, #4]
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 8001c8e:	1b53      	subs	r3, r2, r5
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	8123      	strh	r3, [r4, #8]
    if(TlSpiIsrContext.TlSizeLeftInBufferFrame != 0)
 8001c94:	b1cb      	cbz	r3, 8001cca <HW_BNRG_Isr+0x5a>
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 8001c96:	1ac8      	subs	r0, r1, r3
}
 8001c98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f500 7085 	add.w	r0, r0, #266	; 0x10a
 8001ca2:	f7ff b9a1 	b.w	8000fe8 <HW_BNRG_EvtReq>
 8001ca6:	6822      	ldr	r2, [r4, #0]
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi = TL_EVT_HDR_SIZE + pHciEventBuffer->evtserial.evt.plen - event_payload_len;
 8001ca8:	7a93      	ldrb	r3, [r2, #10]
 8001caa:	3303      	adds	r3, #3
 8001cac:	1a1b      	subs	r3, r3, r0
 8001cae:	80e3      	strh	r3, [r4, #6]
    if((pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CC_OPCODE) && (pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CS_OPCODE))
 8001cb0:	7a53      	ldrb	r3, [r2, #9]
 8001cb2:	3b0e      	subs	r3, #14
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d905      	bls.n	8001cc4 <HW_BNRG_Isr+0x54>
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 8001cb8:	2100      	movs	r1, #0
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 8001cba:	2003      	movs	r0, #3
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 8001cbc:	7161      	strb	r1, [r4, #5]
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 8001cbe:	f000 f853 	bl	8001d68 <LPM_SetOffMode>
 8001cc2:	e7de      	b.n	8001c82 <HW_BNRG_Isr+0x12>
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciCmdEvt;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	7163      	strb	r3, [r4, #5]
 8001cc8:	e7db      	b.n	8001c82 <HW_BNRG_Isr+0x12>
      TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 8001cca:	7960      	ldrb	r0, [r4, #5]
 8001ccc:	f7ff ff40 	bl	8001b50 <TL_BLE_R_EvtInput>
}
 8001cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Allocate_New_Buffer_To_TL();
 8001cd4:	f7ff bf82 	b.w	8001bdc <Allocate_New_Buffer_To_TL>
    TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 8001cd8:	7960      	ldrb	r0, [r4, #5]
 8001cda:	f7ff ff39 	bl	8001b50 <TL_BLE_R_EvtInput>
    TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8001cde:	7126      	strb	r6, [r4, #4]
    Allocate_New_Buffer_To_TL();
 8001ce0:	f7ff ff7c 	bl	8001bdc <Allocate_New_Buffer_To_TL>
}
 8001ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_En);
 8001ce8:	2101      	movs	r1, #1
 8001cea:	2003      	movs	r0, #3
 8001cec:	f000 b83c 	b.w	8001d68 <LPM_SetOffMode>
 8001cf0:	20000394 	.word	0x20000394

08001cf4 <TL_BLE_EvtDone>:
  TL_BLE_R_EvtDone(hcievt);
 8001cf4:	f7ff bf60 	b.w	8001bb8 <TL_BLE_R_EvtDone>

08001cf8 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8001cf8:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 8001cfa:	6040      	str	r0, [r0, #4]
}
 8001cfc:	4770      	bx	lr

08001cfe <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cfe:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001d02:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8001d04:	6802      	ldr	r2, [r0, #0]
  {
    return_value = TRUE;
 8001d06:	1a82      	subs	r2, r0, r2
 8001d08:	4250      	negs	r0, r2
 8001d0a:	4150      	adcs	r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d0c:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8001d10:	4770      	bx	lr

08001d12 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d12:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001d16:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8001d18:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8001d1a:	6842      	ldr	r2, [r0, #4]
 8001d1c:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8001d1e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8001d20:	684a      	ldr	r2, [r1, #4]
 8001d22:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d24:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8001d28:	4770      	bx	lr

08001d2a <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d2a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8001d30:	6843      	ldr	r3, [r0, #4]
 8001d32:	6801      	ldr	r1, [r0, #0]
 8001d34:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 8001d36:	6801      	ldr	r1, [r0, #0]
 8001d38:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d3a:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8001d3e:	4770      	bx	lr

08001d40 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8001d40:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d42:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001d46:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8001d48:	6803      	ldr	r3, [r0, #0]
 8001d4a:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 8001d4c:	6800      	ldr	r0, [r0, #0]
 8001d4e:	f7ff ffec 	bl	8001d2a <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d52:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8001d56:	bd10      	pop	{r4, pc}

08001d58 <LPM_SetConf>:


/* Functions Definition ------------------------------------------------------*/
void LPM_SetConf(LPM_Conf_t *p_conf)
{
  LowPowerModeConfiguration.Stop_Mode_Config = p_conf->Stop_Mode_Config;
 8001d58:	4b02      	ldr	r3, [pc, #8]	; (8001d64 <LPM_SetConf+0xc>)
 8001d5a:	6802      	ldr	r2, [r0, #0]
 8001d5c:	601a      	str	r2, [r3, #0]
  LowPowerModeConfiguration.OFF_Mode_Config = p_conf->OFF_Mode_Config;
 8001d5e:	6842      	ldr	r2, [r0, #4]
 8001d60:	605a      	str	r2, [r3, #4]

  return;
}
 8001d62:	4770      	bx	lr
 8001d64:	200003a4 	.word	0x200003a4

08001d68 <LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d68:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_OffMode_En)
 8001d6e:	2301      	movs	r3, #1
 8001d70:	fa03 f000 	lsl.w	r0, r3, r0
 8001d74:	4299      	cmp	r1, r3
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <LPM_SetOffMode+0x24>)
  {
    LowPowerModeSel &= (~(1<<id));
 8001d78:	6899      	ldr	r1, [r3, #8]
 8001d7a:	bf0c      	ite	eq
 8001d7c:	ea21 0000 	biceq.w	r0, r1, r0
  }
  else
  {
    LowPowerModeSel |= (1<<id);
 8001d80:	4308      	orrne	r0, r1
 8001d82:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d84:	f382 8810 	msr	PRIMASK, r2
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	200003a4 	.word	0x200003a4

08001d90 <LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d90:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_StopMode_Dis)
 8001d96:	2301      	movs	r3, #1
 8001d98:	fa03 f000 	lsl.w	r0, r3, r0
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <LPM_SetStopMode+0x24>)
 8001d9e:	b931      	cbnz	r1, 8001dae <LPM_SetStopMode+0x1e>
  {
    SysClockReq &= (~(1<<id));
 8001da0:	68d9      	ldr	r1, [r3, #12]
 8001da2:	ea21 0000 	bic.w	r0, r1, r0
 8001da6:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da8:	f382 8810 	msr	PRIMASK, r2
  }

  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/

  return;
}
 8001dac:	4770      	bx	lr
    SysClockReq |= (1<<id);
 8001dae:	68d9      	ldr	r1, [r3, #12]
 8001db0:	4308      	orrs	r0, r1
 8001db2:	e7f8      	b.n	8001da6 <LPM_SetStopMode+0x16>
 8001db4:	200003a4 	.word	0x200003a4

08001db8 <LPM_EnterSleepMode>:
/* __WEAK functions: The application can overload this function  if needed ----*/
/* ----------------------------------------------------------------------------*/

__weak void LPM_EnterSleepMode(void)
{
}
 8001db8:	4770      	bx	lr

08001dba <LPM_ExitSleepMode>:
 8001dba:	4770      	bx	lr

08001dbc <LPM_EnterStopMode>:
 8001dbc:	4770      	bx	lr
	...

08001dc0 <LPM_EnterModeSelected>:
{
 8001dc0:	b510      	push	{r4, lr}
  if(SysClockReq)
 8001dc2:	4c0e      	ldr	r4, [pc, #56]	; (8001dfc <LPM_EnterModeSelected+0x3c>)
 8001dc4:	68e3      	ldr	r3, [r4, #12]
 8001dc6:	b133      	cbz	r3, 8001dd6 <LPM_EnterModeSelected+0x16>
    LPM_EnterSleepMode();
 8001dc8:	f7ff fff6 	bl	8001db8 <LPM_EnterSleepMode>
    HW_SleepMode();
 8001dcc:	f7fe fe62 	bl	8000a94 <HW_SleepMode>
    LPM_ExitSleepMode();
 8001dd0:	f7ff fff3 	bl	8001dba <LPM_ExitSleepMode>
}
 8001dd4:	bd10      	pop	{r4, pc}
    if(LowPowerModeSel)
 8001dd6:	68a3      	ldr	r3, [r4, #8]
 8001dd8:	b13b      	cbz	r3, 8001dea <LPM_EnterModeSelected+0x2a>
      LPM_EnterStopMode();
 8001dda:	f7ff ffef 	bl	8001dbc <LPM_EnterStopMode>
      HW_StopMode(LowPowerModeConfiguration.Stop_Mode_Config);
 8001dde:	6820      	ldr	r0, [r4, #0]
 8001de0:	f7fe fe62 	bl	8000aa8 <HW_StopMode>
      LPM_ExitStopMode();
 8001de4:	f000 fb22 	bl	800242c <LPM_ExitStopMode>
 8001de8:	e7f4      	b.n	8001dd4 <LPM_EnterModeSelected+0x14>
      LPM_EnterOffMode();
 8001dea:	f000 fb21 	bl	8002430 <LPM_EnterOffMode>
      HW_OffMode(LowPowerModeConfiguration.OFF_Mode_Config);
 8001dee:	6860      	ldr	r0, [r4, #4]
 8001df0:	f7fe fe6c 	bl	8000acc <HW_OffMode>
      LPM_ExitOffMode();
 8001df4:	f000 fb28 	bl	8002448 <LPM_ExitOffMode>
  return;
 8001df8:	e7ec      	b.n	8001dd4 <LPM_EnterModeSelected+0x14>
 8001dfa:	bf00      	nop
 8001dfc:	200003a4 	.word	0x200003a4

08001e00 <MM_Init>:
 * @param  pool_size: The size of the pool
 * @param  elt_size: The size of one element in the pool
 * @retval None
 */
void MM_Init(uint8_t *p_pool, uint32_t pool_size,  uint32_t elt_size)
{
 8001e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t elt_size_corrected;

  QueueSize = 0;
 8001e04:	4d0d      	ldr	r5, [pc, #52]	; (8001e3c <MM_Init+0x3c>)
{
 8001e06:	4607      	mov	r7, r0
  QueueSize = 0;
 8001e08:	4628      	mov	r0, r5
 8001e0a:	2300      	movs	r3, #0
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 8001e0c:	3203      	adds	r2, #3
  QueueSize = 0;
 8001e0e:	f800 3b01 	strb.w	r3, [r0], #1
{
 8001e12:	460e      	mov	r6, r1
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 8001e14:	f022 0403 	bic.w	r4, r2, #3

  /**
   *  Initialize list
   */
  LST_init_head (&BufferPool);
 8001e18:	f7ff ff6e 	bl	8001cf8 <LST_init_head>
  /**
   *  Initialize the queue
   */
  while(pool_size >= elt_size_corrected)
  {
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 8001e1c:	f105 0801 	add.w	r8, r5, #1
  while(pool_size >= elt_size_corrected)
 8001e20:	42a6      	cmp	r6, r4
 8001e22:	d201      	bcs.n	8001e28 <MM_Init+0x28>
    QueueSize++;
    pool_size -= elt_size_corrected;
  }

  return;
}
 8001e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 8001e28:	4639      	mov	r1, r7
 8001e2a:	4640      	mov	r0, r8
 8001e2c:	f7ff ff71 	bl	8001d12 <LST_insert_tail>
    QueueSize++;
 8001e30:	782b      	ldrb	r3, [r5, #0]
 8001e32:	3301      	adds	r3, #1
    p_pool += elt_size_corrected;
 8001e34:	4427      	add	r7, r4
    QueueSize++;
 8001e36:	702b      	strb	r3, [r5, #0]
    pool_size -= elt_size_corrected;
 8001e38:	1b36      	subs	r6, r6, r4
 8001e3a:	e7f1      	b.n	8001e20 <MM_Init+0x20>
 8001e3c:	200003b4 	.word	0x200003b4

08001e40 <MM_GetBuffer>:
 * @param  cb: The callback to be called when a buffer is made available later on
 *                   if there is no buffer currently available when this API is called
 * @retval The buffer address when available or NULL when there is no buffer
 */
MM_pBufAdd_t MM_GetBuffer( uint32_t size, MM_pCb_t cb )
{
 8001e40:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e42:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001e46:	b672      	cpsid	i
  MM_pBufAdd_t buffer_address;
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if ( QueueSize )
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <MM_GetBuffer+0x30>)
 8001e4a:	7803      	ldrb	r3, [r0, #0]
 8001e4c:	b163      	cbz	r3, 8001e68 <MM_GetBuffer+0x28>
  {
    QueueSize--;
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	7003      	strb	r3, [r0, #0]
    BufferFreeCb = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60c3      	str	r3, [r0, #12]
    LST_remove_head( &BufferPool, ( tListNode ** )&buffer_address );
 8001e56:	a901      	add	r1, sp, #4
 8001e58:	3001      	adds	r0, #1
 8001e5a:	f7ff ff71 	bl	8001d40 <LST_remove_head>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e5e:	f384 8810 	msr	PRIMASK, r4
    buffer_address = 0;
  }
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/

  return buffer_address;
}
 8001e62:	9801      	ldr	r0, [sp, #4]
 8001e64:	b002      	add	sp, #8
 8001e66:	bd10      	pop	{r4, pc}
    BufferFreeCb = cb;
 8001e68:	60c1      	str	r1, [r0, #12]
    buffer_address = 0;
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	e7f7      	b.n	8001e5e <MM_GetBuffer+0x1e>
 8001e6e:	bf00      	nop
 8001e70:	200003b4 	.word	0x200003b4

08001e74 <MM_ReleaseBuffer>:
 * @brief  Release a buffer
 * @param  p_buffer: The data buffer address
 * @retval None
 */
void MM_ReleaseBuffer( MM_pBufAdd_t p_buffer )
{
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	4601      	mov	r1, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e78:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  LST_insert_tail( &BufferPool, ( tListNode * )p_buffer );
 8001e7e:	4c07      	ldr	r4, [pc, #28]	; (8001e9c <MM_ReleaseBuffer+0x28>)
 8001e80:	1c60      	adds	r0, r4, #1
 8001e82:	f7ff ff46 	bl	8001d12 <LST_insert_tail>
  QueueSize++;
 8001e86:	7823      	ldrb	r3, [r4, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e8c:	f385 8810 	msr	PRIMASK, r5
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/
  if( BufferFreeCb )
 8001e90:	68e3      	ldr	r3, [r4, #12]
 8001e92:	b113      	cbz	r3, 8001e9a <MM_ReleaseBuffer+0x26>
     */
    BufferFreeCb();
  }

  return;
}
 8001e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BufferFreeCb();
 8001e98:	4718      	bx	r3
}
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
 8001e9c:	200003b4 	.word	0x200003b4

08001ea0 <SCH_RegTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskCb[task_id] = task;
 8001ea6:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <SCH_RegTask+0x14>)
 8001ea8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eac:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	200003c4 	.word	0x200003c4

08001eb8 <SCH_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eb8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001ebc:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskSet |= (1 << task_id);
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <SCH_SetTask+0x1c>)
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	fa03 f000 	lsl.w	r0, r3, r0
 8001ec6:	6993      	ldr	r3, [r2, #24]
 8001ec8:	4318      	orrs	r0, r3
 8001eca:	6190      	str	r0, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ecc:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	200003c4 	.word	0x200003c4

08001ed8 <SCH_PauseTask>:

void SCH_PauseTask( uint32_t task_id )
{
 8001ed8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eda:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001ede:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskMask &= ~ ( 1 << task_id );
 8001ee0:	4905      	ldr	r1, [pc, #20]	; (8001ef8 <SCH_PauseTask+0x20>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	680b      	ldr	r3, [r1, #0]
 8001ee6:	fa02 f000 	lsl.w	r0, r2, r0
 8001eea:	ea23 0300 	bic.w	r3, r3, r0
 8001eee:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef0:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001ef4:	bd10      	pop	{r4, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000

08001efc <SCH_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001efc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskMask |= ( 1 << task_id );
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SCH_ResumeTask+0x1c>)
 8001f04:	2301      	movs	r3, #1
 8001f06:	fa03 f000 	lsl.w	r0, r3, r0
 8001f0a:	6813      	ldr	r3, [r2, #0]
 8001f0c:	4318      	orrs	r0, r3
 8001f0e:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f10:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000000 	.word	0x20000000

08001f1c <SCH_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f1c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  EvtSet |= ( 1 << evt_id);
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <SCH_SetEvt+0x1c>)
 8001f24:	2301      	movs	r3, #1
 8001f26:	fa03 f000 	lsl.w	r0, r3, r0
 8001f2a:	69d3      	ldr	r3, [r2, #28]
 8001f2c:	4318      	orrs	r0, r3
 8001f2e:	61d0      	str	r0, [r2, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f30:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200003c4 	.word	0x200003c4

08001f3c <SCH_Run>:
{
 8001f3c:	b570      	push	{r4, r5, r6, lr}
  while( TaskSet &  TaskMask )
 8001f3e:	4c15      	ldr	r4, [pc, #84]	; (8001f94 <SCH_Run+0x58>)
 8001f40:	4d15      	ldr	r5, [pc, #84]	; (8001f98 <SCH_Run+0x5c>)
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 8001f42:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  while( TaskSet &  TaskMask )
 8001f46:	69a3      	ldr	r3, [r4, #24]
 8001f48:	682a      	ldr	r2, [r5, #0]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d10f      	bne.n	8001f6e <SCH_Run+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f4e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001f52:	b672      	cpsid	i
  if ( !( (TaskSet & TaskMask ) || (EvtSet & EvtWaited) ) )
 8001f54:	69a3      	ldr	r3, [r4, #24]
 8001f56:	682a      	ldr	r2, [r5, #0]
 8001f58:	401a      	ands	r2, r3
 8001f5a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001f5e:	400b      	ands	r3, r1
 8001f60:	4313      	orrs	r3, r2
 8001f62:	d101      	bne.n	8001f68 <SCH_Run+0x2c>
    SCH_Idle();
 8001f64:	f000 fa80 	bl	8002468 <SCH_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f68:	f386 8810 	msr	PRIMASK, r6
}
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001f6e:	fab3 f383 	clz	r3, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f72:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001f76:	b672      	cpsid	i
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 8001f78:	69a2      	ldr	r2, [r4, #24]
 8001f7a:	fa26 f003 	lsr.w	r0, r6, r3
 8001f7e:	ea22 0200 	bic.w	r2, r2, r0
 8001f82:	61a2      	str	r2, [r4, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f84:	f381 8810 	msr	PRIMASK, r1
    TaskCb[31 - bit_nbr]();
 8001f88:	f1c3 031f 	rsb	r3, r3, #31
 8001f8c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001f90:	4798      	blx	r3
 8001f92:	e7d8      	b.n	8001f46 <SCH_Run+0xa>
 8001f94:	200003c4 	.word	0x200003c4
 8001f98:	20000000 	.word	0x20000000

08001f9c <SCH_EvtIdle>:
__weak void SCH_EvtIdle( void )
{
  /**
   * execute scheduler if not implemented by the application
   */
  SCH_Run();
 8001f9c:	f7ff bfce 	b.w	8001f3c <SCH_Run>

08001fa0 <SCH_WaitEvt>:
{
 8001fa0:	b538      	push	{r3, r4, r5, lr}
  event_waited_id_backup = EvtWaited;
 8001fa2:	4c09      	ldr	r4, [pc, #36]	; (8001fc8 <SCH_WaitEvt+0x28>)
  EvtWaited = ( 1 << evt_id );
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	fa03 f000 	lsl.w	r0, r3, r0
  event_waited_id_backup = EvtWaited;
 8001faa:	6a25      	ldr	r5, [r4, #32]
  EvtWaited = ( 1 << evt_id );
 8001fac:	6220      	str	r0, [r4, #32]
  while( (EvtSet & EvtWaited) == 0)
 8001fae:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001fb2:	4213      	tst	r3, r2
 8001fb4:	d004      	beq.n	8001fc0 <SCH_WaitEvt+0x20>
  EvtSet &= (~EvtWaited);
 8001fb6:	ea23 0302 	bic.w	r3, r3, r2
  EvtWaited = event_waited_id_backup;
 8001fba:	e9c4 3507 	strd	r3, r5, [r4, #28]
}
 8001fbe:	bd38      	pop	{r3, r4, r5, pc}
    SCH_EvtIdle();
 8001fc0:	f7ff ffec 	bl	8001f9c <SCH_EvtIdle>
 8001fc4:	e7f3      	b.n	8001fae <SCH_WaitEvt+0xe>
 8001fc6:	bf00      	nop
 8001fc8:	200003c4 	.word	0x200003c4

08001fcc <LBR_Init>:


/* Public functions ----------------------------------------------------------*/

void LBR_Init(LBR_InitMode_t InitMode)
{
 8001fcc:	b530      	push	{r4, r5, lr}
 8001fce:	b085      	sub	sp, #20
  uint8_t index;

  if(InitMode != LBR_Limited )
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d046      	beq.n	8002062 <LBR_Init+0x96>
  {
    /**
     * Initialization of all transport layer
     */
    TL_BLE_HCI_Init(TL_BLE_HCI_InitFull, &CmdBuffer, EvtPool, POOL_SIZE);
 8001fd4:	4c24      	ldr	r4, [pc, #144]	; (8002068 <LBR_Init+0x9c>)
 8001fd6:	f240 5332 	movw	r3, #1330	; 0x532
 8001fda:	18e1      	adds	r1, r4, r3
 8001fdc:	4622      	mov	r2, r4
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7ff fc68 	bl	80018b4 <TL_BLE_HCI_Init>

    /**
     * Initialization of the BLE App Context
     */
   
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 8001fe4:	2500      	movs	r5, #0
    TL_Enable();
 8001fe6:	f3af 8000 	nop.w
     SVCCTL_Init();
 8001fea:	f7fe fd09 	bl	8000a00 <SVCCTL_Init>
    /**
     * Set TX Power to -2dBm.
     * This avoids undesired disconnection due to instability on 32KHz
     * internal oscillator for high transmission power.
     */
    aci_hal_set_tx_power_level(1,0x18);
 8001fee:	2118      	movs	r1, #24
 8001ff0:	2001      	movs	r0, #1
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 8001ff2:	f884 56dc 	strb.w	r5, [r4, #1756]	; 0x6dc
    aci_hal_set_tx_power_level(1,0x18);
 8001ff6:	f7fe fb4b 	bl	8000690 <aci_hal_set_tx_power_level>

    /**
     * Initialize IO capability
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 8001ffa:	4628      	mov	r0, r5
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
 8001ffc:	f884 5640 	strb.w	r5, [r4, #1600]	; 0x640
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 8002000:	f7fe f98e 	bl	8000320 <aci_gap_set_io_capability>
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
    LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
    LBRContext.LBRContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 8002004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002008:	f8a4 3654 	strh.w	r3, [r4, #1620]	; 0x654
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800200c:	2310      	movs	r3, #16
 800200e:	f884 3656 	strb.w	r3, [r4, #1622]	; 0x656
    LBRContext.LBRContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <LBR_Init+0xa0>)
 8002014:	f8c4 3658 	str.w	r3, [r4, #1624]	; 0x658
    LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode = 1;
 8002018:	2301      	movs	r3, #1
 800201a:	f8a4 3642 	strh.w	r3, [r4, #1602]	; 0x642
    for (index=0; index<16 ;index++)
 800201e:	f204 6344 	addw	r3, r4, #1604	; 0x644
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
 8002022:	f884 5641 	strb.w	r5, [r4, #1601]	; 0x641
 8002026:	461a      	mov	r2, r3
    {
      LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t)index;
 8002028:	f803 5b01 	strb.w	r5, [r3], #1
    for (index=0; index<16 ;index++)
 800202c:	3501      	adds	r5, #1
 800202e:	2d10      	cmp	r5, #16
 8002030:	d1fa      	bne.n	8002028 <LBR_Init+0x5c>
    }

    aci_gap_set_auth_requirement(LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode,
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <LBR_Init+0xa0>)
 8002034:	2101      	movs	r1, #1
 8002036:	e9cd 3102 	strd	r3, r1, [sp, #8]
 800203a:	2100      	movs	r1, #0
 800203c:	2308      	movs	r3, #8
 800203e:	e9cd 5100 	strd	r5, r1, [sp]
 8002042:	4608      	mov	r0, r1
 8002044:	f7fe f990 	bl	8000368 <aci_gap_set_auth_requirement>
                                 LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode);

    /**
     * Initialize whitelist
     */
    if(LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode)
 8002048:	f894 3642 	ldrb.w	r3, [r4, #1602]	; 0x642
 800204c:	b10b      	cbz	r3, 8002052 <LBR_Init+0x86>
    {
      aci_gap_configure_whitelist();
 800204e:	f7fe f9c9 	bl	80003e4 <aci_gap_configure_whitelist>
    
    /**
     * Initialize LBS Applciation
     */
#if(LB_SERVER!=0)     
    LBSAPP_Init();
 8002052:	f000 f871 	bl	8002138 <LBSAPP_Init>
   // Start Advertise to be connected by Client
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 8002056:	2001      	movs	r0, #1
#endif
  
  }

  return;
}
 8002058:	b005      	add	sp, #20
 800205a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 800205e:	f7ff bf2b 	b.w	8001eb8 <SCH_SetTask>
}
 8002062:	b005      	add	sp, #20
 8002064:	bd30      	pop	{r4, r5, pc}
 8002066:	bf00      	nop
 8002068:	200003e8 	.word	0x200003e8
 800206c:	0001b207 	.word	0x0001b207

08002070 <LBR_Adv_Request>:
/*                     DEVICE IS SERVER                         */
/****************************************************************/

#if(LB_SERVER!=0) 
void LBR_Adv_Request(void)
{
 8002070:	b500      	push	{lr}
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <LBR_Adv_Request+0x38>)
 8002074:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 8002078:	2b0a      	cmp	r3, #10
{
 800207a:	b089      	sub	sp, #36	; 0x24
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 800207c:	d010      	beq.n	80020a0 <LBR_Adv_Request+0x30>
  {
    tBleStatus result=0x00;
    
    result = aci_gap_set_discoverable(ADV_IND,
 800207e:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <LBR_Adv_Request+0x3c>)
 8002080:	9202      	str	r2, [sp, #8]
 8002082:	2300      	movs	r3, #0
 8002084:	220e      	movs	r2, #14
 8002086:	e9cd 3200 	strd	r3, r2, [sp]
 800208a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800208e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002092:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002096:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe f8d4 	bl	8000248 <aci_gap_set_discoverable>
    {
      APPL_MESG_DBG("** START ADVERTISING **  Failed \r\n\r");
    }
  }
  return;
}
 80020a0:	b009      	add	sp, #36	; 0x24
 80020a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80020a6:	bf00      	nop
 80020a8:	200003e8 	.word	0x200003e8
 80020ac:	080038a0 	.word	0x080038a0

080020b0 <SVCCTL_App_Notification>:
  evt_le_meta_event *meta_evt;
  evt_le_connection_complete * connection_complete_event;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
  evt_disconn_complete *cc = (void *)event_pckt->data;
  switch(event_pckt->evt)
 80020b0:	7843      	ldrb	r3, [r0, #1]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d002      	beq.n	80020bc <SVCCTL_App_Notification+0xc>
 80020b6:	2b3e      	cmp	r3, #62	; 0x3e
 80020b8:	d011      	beq.n	80020de <SVCCTL_App_Notification+0x2e>
 80020ba:	4770      	bx	lr
  {
    case EVT_DISCONN_COMPLETE:
      if(cc->handle == LBRContext.connectionHandleRemote)
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <SVCCTL_App_Notification+0x4c>)
 80020be:	8881      	ldrh	r1, [r0, #4]
 80020c0:	f8b3 26de 	ldrh.w	r2, [r3, #1758]	; 0x6de
 80020c4:	4291      	cmp	r1, r2
 80020c6:	d118      	bne.n	80020fa <SVCCTL_App_Notification+0x4a>
      {
        LBRContext.connectionHandleRemote = LBC_IDLE;
        APPL_MESG_DBG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <SVCCTL_App_Notification+0x50>)
        LBRContext.connectionHandleRemote = LBC_IDLE;
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	7003      	strb	r3, [r0, #0]
        handleNotification.ConnectionHandle=connection_handle;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <SVCCTL_App_Notification+0x54>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
      
          //CONNECTION WITH LB ROUTEUR 
           APPL_MESG_DBG("\r\n\r** CONNECTION EVENT WITH CLIENT \n");
          LBRContext.connectionHandleRemote = connection_handle;
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
          handleNotification.ConnectionHandle=connection_handle;
 80020d8:	8043      	strh	r3, [r0, #2]
          LBR_Notification(&handleNotification);
 80020da:	f000 b81b 	b.w	8002114 <LBR_Notification>
      switch(meta_evt->subevent)
 80020de:	78c3      	ldrb	r3, [r0, #3]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10a      	bne.n	80020fa <SVCCTL_App_Notification+0x4a>
          connection_handle = connection_complete_event->handle;
 80020e4:	4a07      	ldr	r2, [pc, #28]	; (8002104 <SVCCTL_App_Notification+0x54>)
 80020e6:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 80020ea:	8013      	strh	r3, [r2, #0]
          LBRContext.connectionHandleRemote = connection_handle;
 80020ec:	4a03      	ldr	r2, [pc, #12]	; (80020fc <SVCCTL_App_Notification+0x4c>)
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 80020ee:	4804      	ldr	r0, [pc, #16]	; (8002100 <SVCCTL_App_Notification+0x50>)
          LBRContext.connectionHandleRemote = connection_handle;
 80020f0:	f8a2 36de 	strh.w	r3, [r2, #1758]	; 0x6de
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 80020f4:	2202      	movs	r2, #2
 80020f6:	7002      	strb	r2, [r0, #0]
 80020f8:	e7ee      	b.n	80020d8 <SVCCTL_App_Notification+0x28>

    default:
      break;
  }
  return;
}
 80020fa:	4770      	bx	lr
 80020fc:	200003e8 	.word	0x200003e8
 8002100:	20000b0c 	.word	0x20000b0c
 8002104:	20000b10 	.word	0x20000b10

08002108 <LBR_App_Key_Button_Action>:

void LBR_App_Key_Button_Action(void)
{
  SCH_SetTask(CFG_IdleTask_Button);
 8002108:	2004      	movs	r0, #4
 800210a:	f7ff bed5 	b.w	8001eb8 <SCH_SetTask>

0800210e <BLESVC_InitCustomSvc>:
#endif 

void BLESVC_InitCustomSvc(void)
{
#if(LB_SERVER!=0) 
  LBS_STM_Init();
 800210e:	f7fe bae9 	b.w	80006e4 <LBS_STM_Init>
	...

08002114 <LBR_Notification>:



void LBR_Notification(LBR_ConnHandle_Not_evt_t *pNotification)
{
  switch(pNotification->LBR_Evt_Opcode)
 8002114:	7803      	ldrb	r3, [r0, #0]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d002      	beq.n	8002120 <LBR_Notification+0xc>
 800211a:	2b03      	cmp	r3, #3
 800211c:	d004      	beq.n	8002128 <LBR_Notification+0x14>
 800211e:	4770      	bx	lr
  {
    case LB_CLIENT_CONN_HANDLE_EVT :
      LB_End_Dev_Context.connHandleWithLbRouteur = pNotification->ConnectionHandle;
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <LBR_Notification+0x20>)
 8002122:	8842      	ldrh	r2, [r0, #2]
 8002124:	809a      	strh	r2, [r3, #4]

    default:
      break;
  }
  return;
}
 8002126:	4770      	bx	lr
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <LBR_Notification+0x20>)
 800212a:	2200      	movs	r2, #0
      SCH_SetTask(CFG_IdleTask_StartAdv);
 800212c:	2001      	movs	r0, #1
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 800212e:	809a      	strh	r2, [r3, #4]
      SCH_SetTask(CFG_IdleTask_StartAdv);
 8002130:	f7ff bec2 	b.w	8001eb8 <SCH_SetTask>
 8002134:	20000ac8 	.word	0x20000ac8

08002138 <LBSAPP_Init>:
{
  /**
   * Initialize LedButton Service
   */
  LB_End_Dev_Context.Notification_Button_Status=0; 
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <LBSAPP_Init+0x10>)
 800213a:	2200      	movs	r2, #0
  LB_End_Dev_Context.Notification_Button_Status=0; 
 800213c:	f44f 7180 	mov.w	r1, #256	; 0x100
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8002140:	809a      	strh	r2, [r3, #4]
  LB_End_Dev_Context.Notification_Button_Status=0; 
 8002142:	8019      	strh	r1, [r3, #0]
 // LB_End_Dev_Context.LedControlEndDevice1.Device_Led_Selection=0x01; // device1
//  LB_End_Dev_Context.LedControlEndDevice1.Led1Control=0x00; //led OFF
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Device1
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;
 8002144:	709a      	strb	r2, [r3, #2]

  return;
}
 8002146:	4770      	bx	lr
 8002148:	20000ac8 	.word	0x20000ac8

0800214c <LB_App_Button_Trigger_Received>:
void LB_App_Button_Trigger_Received(void)
{
  
  //UPDATE BUTTON CHARACTERISTICS VALUES

  if(LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus==0x01){
 800214c:	4907      	ldr	r1, [pc, #28]	; (800216c <LB_App_Button_Trigger_Received+0x20>)
 800214e:	788b      	ldrb	r3, [r1, #2]
 8002150:	3b01      	subs	r3, #1
 8002152:	bf18      	it	ne
 8002154:	2301      	movne	r3, #1
 8002156:	708b      	strb	r3, [r1, #2]
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;}
  else {
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x01;  
  }
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Button1 pushed
 8002158:	2301      	movs	r3, #1
 800215a:	704b      	strb	r3, [r1, #1]
  APPL_MESG_DBG("\r\n\r ");
  APPL_MESG_DBG("-- APPLICATION : BUTTON PUSHED - CHECK NOTIFICATION \n ");
 
   if(LB_End_Dev_Context.Notification_Button_Status){ 
 800215c:	780b      	ldrb	r3, [r1, #0]
 800215e:	b123      	cbz	r3, 800216a <LB_App_Button_Trigger_Received+0x1e>
    APPL_MESG_DBG("-- APPLICATION : INFORM ROUTEUR BUTTON 1 PUSHED \n ");
    BLE_SVC_LedButton_Update_Char(BUTTON_CHAR_UUID, (uint8_t *)&LB_End_Dev_Context.ButtonStatusToClient);
 8002160:	3101      	adds	r1, #1
 8002162:	f642 3051 	movw	r0, #11089	; 0x2b51
 8002166:	f7fe bb85 	b.w	8000874 <BLE_SVC_LedButton_Update_Char>
   } else {
    APPL_MESG_DBG("-- APPLICATION : CAN'T INFORM ROUTEUR -  NOTIFICATION DISABLED\n "); 
   }

  return;
}
 800216a:	4770      	bx	lr
 800216c:	20000ac8 	.word	0x20000ac8

08002170 <whynotwork>:
  * @param  pNotification: LBS notification.
  * @retval None
 */ 

void whynotwork(uint8_t *POTATO, LBS_App_Notification_evt_t *pNotification)
{
 8002170:	b510      	push	{r4, lr}
	for(uint8_t i = 0; i < pNotification->DataTransfered.Length; i++)
 8002172:	2200      	movs	r2, #0
 8002174:	7a0c      	ldrb	r4, [r1, #8]
 8002176:	b2d3      	uxtb	r3, r2
 8002178:	429c      	cmp	r4, r3
 800217a:	d800      	bhi.n	800217e <whynotwork+0xe>
	{
		POTATO[i] = pNotification->DataTransfered.pPayload[i];
	}
}
 800217c:	bd10      	pop	{r4, pc}
		POTATO[i] = pNotification->DataTransfered.pPayload[i];
 800217e:	684c      	ldr	r4, [r1, #4]
 8002180:	5ce4      	ldrb	r4, [r4, r3]
 8002182:	54c4      	strb	r4, [r0, r3]
	for(uint8_t i = 0; i < pNotification->DataTransfered.Length; i++)
 8002184:	3201      	adds	r2, #1
 8002186:	e7f5      	b.n	8002174 <whynotwork+0x4>

08002188 <LBS_App_Notification>:

void LBS_App_Notification(LBS_App_Notification_evt_t *pNotification)
{
 8002188:	b508      	push	{r3, lr}
 800218a:	7803      	ldrb	r3, [r0, #0]
 800218c:	3b04      	subs	r3, #4
 800218e:	4601      	mov	r1, r0
 8002190:	2b04      	cmp	r3, #4
 8002192:	d807      	bhi.n	80021a4 <LBS_App_Notification+0x1c>
 8002194:	e8df f003 	tbb	[pc, r3]
 8002198:	100e0c03 	.word	0x100e0c03
 800219c:	12          	.byte	0x12
 800219d:	00          	.byte	0x00
          APPL_MESG_DBG("-- APPLICATION END DEVICE 1 : LED1 OFF\n"); 
        }
        break;
        */
    case POTATO_SSID_EVT:
    	whynotwork(POTATO_Context.POTATO_SSID,pNotification);
 800219e:	4808      	ldr	r0, [pc, #32]	; (80021c0 <LBS_App_Notification+0x38>)
    	break;
    case POTATO_IP_EVT:
    	whynotwork(POTATO_Context.POTATO_IP,pNotification);
    	break;
    case POTATO_OP_EVT:
    	whynotwork(POTATO_Context.POTATO_OP,pNotification);
 80021a0:	f7ff ffe6 	bl	8002170 <whynotwork>
      break;

    default:
      break;
  }
  ret = Potato_Save(&POTATO_Context);
 80021a4:	4806      	ldr	r0, [pc, #24]	; (80021c0 <LBS_App_Notification+0x38>)
 80021a6:	f000 f97d 	bl	80024a4 <Potato_Save>
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <LBS_App_Notification+0x3c>)
 80021ac:	7198      	strb	r0, [r3, #6]
  return;
}
 80021ae:	bd08      	pop	{r3, pc}
    	whynotwork(POTATO_Context.POTATO_PW,pNotification);
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <LBS_App_Notification+0x40>)
 80021b2:	e7f5      	b.n	80021a0 <LBS_App_Notification+0x18>
    	whynotwork(POTATO_Context.POTATO_NAME,pNotification);
 80021b4:	4805      	ldr	r0, [pc, #20]	; (80021cc <LBS_App_Notification+0x44>)
 80021b6:	e7f3      	b.n	80021a0 <LBS_App_Notification+0x18>
    	whynotwork(POTATO_Context.POTATO_IP,pNotification);
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <LBS_App_Notification+0x48>)
 80021ba:	e7f1      	b.n	80021a0 <LBS_App_Notification+0x18>
    	whynotwork(POTATO_Context.POTATO_OP,pNotification);
 80021bc:	4805      	ldr	r0, [pc, #20]	; (80021d4 <LBS_App_Notification+0x4c>)
 80021be:	e7ef      	b.n	80021a0 <LBS_App_Notification+0x18>
 80021c0:	20000b12 	.word	0x20000b12
 80021c4:	20000ac8 	.word	0x20000ac8
 80021c8:	20000b30 	.word	0x20000b30
 80021cc:	20000b4e 	.word	0x20000b4e
 80021d0:	20000b6c 	.word	0x20000b6c
 80021d4:	20000b70 	.word	0x20000b70

080021d8 <SystemClock_Config>:
 *
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 80021d8:	b510      	push	{r4, lr}
 80021da:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	2100      	movs	r1, #0
 80021e0:	a806      	add	r0, sp, #24
 80021e2:	f001 fb3b 	bl	800385c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e6:	2100      	movs	r1, #0
 80021e8:	2214      	movs	r2, #20
 80021ea:	4668      	mov	r0, sp
 80021ec:	f001 fb36 	bl	800385c <memset>

  /**
   *  Enable MSI oscillator and configure the system at 16MHz
   *  The best power consumption are achieved with 8Mhz on the SPI to access the BlueNRG device
   */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 80021f0:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 80021f2:	2280      	movs	r2, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 80021f4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;

  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80021f6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 80021f8:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80021fa:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 80021fc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 80021fe:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;
 8002200:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002202:	f000 feb3 	bl	8002f6c <HAL_RCC_OscConfig>

  /**
   *  Configure the HCLK, PCLK1 and PCLK2 clocks dividers  to a maximum of 16Mhz on SPI.
   */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002206:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8002208:	2102      	movs	r1, #2
 800220a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800220c:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002210:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002214:	9404      	str	r4, [sp, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8002216:	f001 f92f 	bl	8003478 <HAL_RCC_ClockConfig>
#else
#error Missing System Clock Configuration
#endif

  return;
}
 800221a:	b016      	add	sp, #88	; 0x58
 800221c:	bd10      	pop	{r4, pc}
	...

08002220 <main>:
{
 8002220:	b500      	push	{lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4c73      	ldr	r4, [pc, #460]	; (80023f0 <main+0x1d0>)
{
 8002224:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8002226:	f000 fa51 	bl	80026cc <HAL_Init>
  HAL_DBGMCU_EnableDBGSleepMode();
 800222a:	f000 fa77 	bl	800271c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800222e:	f000 fa7d 	bl	800272c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002232:	f000 fa83 	bl	800273c <HAL_DBGMCU_EnableDBGStandbyMode>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	65a3      	str	r3, [r4, #88]	; 0x58
 800223e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	9b00      	ldr	r3, [sp, #0]
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == RCC_CSR_PINRSTF) ? 1UL : 0UL);
 8002248:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800224c:	0159      	lsls	r1, r3, #5
 800224e:	d519      	bpl.n	8002284 <main+0x64>
  * @rmtoll SCR          CSBF          LL_PWR_ClearFlag_SB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_SB(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 8002250:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <main+0x1d4>)
 8002252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002256:	619a      	str	r2, [r3, #24]
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002258:	f000 fde0 	bl	8002e1c <HAL_PWR_EnableBkUpAccess>
    HAL_PWR_EnableBkUpAccess();
 800225c:	f000 fdde 	bl	8002e1c <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002260:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002268:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800226c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002270:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002274:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002278:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800227c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002280:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8002284:	2600      	movs	r6, #0
  LPM_SetOffMode(CFG_LPM_App, LPM_OffMode_Dis);
 8002286:	2100      	movs	r1, #0
 8002288:	2004      	movs	r0, #4
 800228a:	f7ff fd6d 	bl	8001d68 <LPM_SetOffMode>
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 800228e:	e9cd 6606 	strd	r6, r6, [sp, #24]
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 8002292:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002294:	4858      	ldr	r0, [pc, #352]	; (80023f8 <main+0x1d8>)
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 8002296:	f023 0302 	bic.w	r3, r3, #2
 800229a:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE();
 800229c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800229e:	f023 0304 	bic.w	r3, r3, #4
 80022a2:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE();
 80022a4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80022a6:	f023 0308 	bic.w	r3, r3, #8
 80022aa:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE();
 80022ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80022ae:	f023 0310 	bic.w	r3, r3, #16
 80022b2:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOF_CLK_SLEEP_DISABLE();
 80022b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80022b6:	f023 0320 	bic.w	r3, r3, #32
 80022ba:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOG_CLK_SLEEP_DISABLE();
 80022bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80022be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022c2:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE();
 80022c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80022c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ca:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80022d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80022e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80022ee:	2503      	movs	r5, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80022f2:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = GPIO_PIN_All;
 80022f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80022f8:	e9cd 5604 	strd	r5, r6, [sp, #16]
  GPIO_InitStructure.Pin = GPIO_PIN_All;
 80022fc:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80022fe:	f000 fc97 	bl	8002c30 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002302:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 8002304:	f649 73ff 	movw	r3, #40959	; 0x9fff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 800230c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800230e:	f000 fc8f 	bl	8002c30 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002312:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800231a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800231c:	f023 0302 	bic.w	r3, r3, #2
 8002320:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_PWREx_EnableSRAM2ContentRetention();
 8002322:	f000 fd8b 	bl	8002e3c <HAL_PWREx_EnableSRAM2ContentRetention>
  LPM_SetConf(&LowPowerModeConfiguration);
 8002326:	a803      	add	r0, sp, #12
  LowPowerModeConfiguration.Stop_Mode_Config = CFG_StopMode2;
 8002328:	2302      	movs	r3, #2
  LowPowerModeConfiguration.OFF_Mode_Config = CFG_Standby;
 800232a:	e9cd 3503 	strd	r3, r5, [sp, #12]
  LPM_SetConf(&LowPowerModeConfiguration);
 800232e:	f7ff fd13 	bl	8001d58 <LPM_SetConf>
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 8002332:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  hrtc.Instance = RTC;                        /**< Define instance */
 8002336:	4d31      	ldr	r5, [pc, #196]	; (80023fc <main+0x1dc>)
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002340:	f000 fd6c 	bl	8002e1c <HAL_PWR_EnableBkUpAccess>
  HAL_PWR_EnableBkUpAccess();
 8002344:	f000 fd6a 	bl	8002e1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI); /**< Select LSI as RTC Input */
 8002348:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002354:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  __HAL_RCC_RTC_ENABLE();                     /**< Enable RTC */
 8002358:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800235c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002360:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002364:	4628      	mov	r0, r5
  hrtc.Instance = RTC;                        /**< Define instance */
 8002366:	4b26      	ldr	r3, [pc, #152]	; (8002400 <main+0x1e0>)
 8002368:	602b      	str	r3, [r5, #0]
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 800236a:	f001 f9bf 	bl	80036ec <HAL_RTCEx_EnableBypassShadow>
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800236e:	2201      	movs	r2, #1
 8002370:	f647 73ff 	movw	r3, #32767	; 0x7fff
  HAL_RTC_Init(&hrtc);
 8002374:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002376:	e9c5 2302 	strd	r2, r3, [r5, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800237a:	612e      	str	r6, [r5, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;             /**< need to be initialized to not corrupt the RTC_CR register */
 800237c:	606e      	str	r6, [r5, #4]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;  /**< need to be initialized to not corrupt the RTC_CR register */
 800237e:	61ae      	str	r6, [r5, #24]
  HAL_RTC_Init(&hrtc);
 8002380:	f001 f96e 	bl	8003660 <HAL_RTC_Init>
  __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc) ;  /**< Disable Write Protection */
 8002384:	682a      	ldr	r2, [r5, #0]
 8002386:	23ca      	movs	r3, #202	; 0xca
 8002388:	6253      	str	r3, [r2, #36]	; 0x24
 800238a:	2353      	movs	r3, #83	; 0x53
 800238c:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800238e:	6893      	ldr	r3, [r2, #8]
 8002390:	f023 0307 	bic.w	r3, r3, #7
 8002394:	f043 0303 	orr.w	r3, r3, #3
 8002398:	6093      	str	r3, [r2, #8]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0);  /**< Wait for LSI to be stable */
 800239a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800239e:	079b      	lsls	r3, r3, #30
 80023a0:	d5fb      	bpl.n	800239a <main+0x17a>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc);  /**< Initialize the TimerServer */
 80023a2:	4916      	ldr	r1, [pc, #88]	; (80023fc <main+0x1dc>)
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff f827 	bl	80013f8 <HW_TS_Init>
  SystemClock_Config();         /**< Configure the system clock */
 80023aa:	f7ff ff15 	bl	80021d8 <SystemClock_Config>
  SCH_RegTask( CFG_IdleTask_HciAsynchEvt, TL_BLE_HCI_UserEvtProc );
 80023ae:	4915      	ldr	r1, [pc, #84]	; (8002404 <main+0x1e4>)
 80023b0:	2005      	movs	r0, #5
 80023b2:	f7ff fd75 	bl	8001ea0 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_TlEvt, TL_BLE_R_EvtProc );
 80023b6:	4914      	ldr	r1, [pc, #80]	; (8002408 <main+0x1e8>)
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7ff fd71 	bl	8001ea0 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_Button, LB_App_Button_Trigger_Received );
 80023be:	4913      	ldr	r1, [pc, #76]	; (800240c <main+0x1ec>)
 80023c0:	2004      	movs	r0, #4
 80023c2:	f7ff fd6d 	bl	8001ea0 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_StartAdv, LBR_Adv_Request );
 80023c6:	4912      	ldr	r1, [pc, #72]	; (8002410 <main+0x1f0>)
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff fd69 	bl	8001ea0 <SCH_RegTask>
  Potato_Load(&POTATO_Context);
 80023ce:	4811      	ldr	r0, [pc, #68]	; (8002414 <main+0x1f4>)
 80023d0:	f000 f8aa 	bl	8002528 <Potato_Load>
  LBR_Init(LBR_Full);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7ff fdf9 	bl	8001fcc <LBR_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80023da:	2000      	movs	r0, #0
 80023dc:	2101      	movs	r1, #1
 80023de:	f000 f90d 	bl	80025fc <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f000 f8e8 	bl	80025b8 <BSP_LED_Init>
    SCH_Run();
 80023e8:	f7ff fda8 	bl	8001f3c <SCH_Run>
  while(1)
 80023ec:	e7fc      	b.n	80023e8 <main+0x1c8>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
 80023f8:	48000400 	.word	0x48000400
 80023fc:	20000ad0 	.word	0x20000ad0
 8002400:	40002800 	.word	0x40002800
 8002404:	0800191d 	.word	0x0800191d
 8002408:	08001b6d 	.word	0x08001b6d
 800240c:	0800214d 	.word	0x0800214d
 8002410:	08002071 	.word	0x08002071
 8002414:	20000b12 	.word	0x20000b12

08002418 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch(GPIO_Pin)
 8002418:	2840      	cmp	r0, #64	; 0x40
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_EXTI_Callback+0xc>
 800241c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002420:	d002      	beq.n	8002428 <HAL_GPIO_EXTI_Callback+0x10>
 8002422:	4770      	bx	lr
  {
    case BNRG_SPI_EXTI_PIN:
      HW_BNRG_SpiIrqCb();
 8002424:	f7fe bdf2 	b.w	800100c <HW_BNRG_SpiIrqCb>
      break;
    case USER_BUTTON_PIN:
      LBR_App_Key_Button_Action();
 8002428:	f7ff be6e 	b.w	8002108 <LBR_App_Key_Button_Action>

0800242c <LPM_ExitStopMode>:
  LL_RCC_SetSysClkSource(RCC_CFGR_SW_PLL);              /**< Select PLL as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL);  /**< Wait till PLL is used as system clock source */
#endif

  return;
}
 800242c:	4770      	bx	lr
	...

08002430 <LPM_EnterOffMode>:
  SET_BIT(PWR->CR3, WakeUpPin);
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <LPM_EnterOffMode+0x14>)
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	609a      	str	r2, [r3, #8]
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002440:	609a      	str	r2, [r3, #8]
  LL_PWR_EnableWakeUpPin(BNRG_SPI_IRQ_WAKEUP_PIN);
  LL_PWR_EnablePUPDCfg();

  return;

}
 8002442:	4770      	bx	lr
 8002444:	40007000 	.word	0x40007000

08002448 <LPM_ExitOffMode>:
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <LPM_ExitOffMode+0x18>)
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002450:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(PWR->CR3, WakeUpPin);
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	609a      	str	r2, [r3, #8]
  * @rmtoll SCR          CWUF1         LL_PWR_ClearFlag_WU1
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU1(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF1);
 800245a:	2201      	movs	r2, #1
 800245c:	619a      	str	r2, [r3, #24]
  LL_PWR_DisablePUPDCfg();
  LL_PWR_DisableWakeUpPin(BNRG_SPI_IRQ_WAKEUP_PIN);
  BNRG_SPI_CLEAR_WAKEUP_FLAG();

  return;
}
 800245e:	4770      	bx	lr
 8002460:	40007000 	.word	0x40007000

08002464 <HAL_InitTick>:
  * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  return (HAL_OK);
}
 8002464:	2000      	movs	r0, #0
 8002466:	4770      	bx	lr

08002468 <SCH_Idle>:
 * @param  None
 * @retval None
 */
void SCH_Idle ( void )
{
  LPM_EnterModeSelected();
 8002468:	f7ff bcaa 	b.w	8001dc0 <LPM_EnterModeSelected>

0800246c <TL_BLE_HCI_StatusNot>:
 *        At least, TL_BLE_HCI_UserEvtProc shall not be executed while the TL remains busy
 * @param status
 * @retval None
 */
void TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdStatus_t status)
{
 800246c:	b508      	push	{r3, lr}
  switch(status)
 800246e:	b110      	cbz	r0, 8002476 <TL_BLE_HCI_StatusNot+0xa>
 8002470:	2801      	cmp	r0, #1
 8002472:	d00b      	beq.n	800248c <TL_BLE_HCI_StatusNot+0x20>

    default:
      break;
  }
  return;
}
 8002474:	bd08      	pop	{r3, pc}
      SCH_PauseTask( CFG_IdleTask_StartAdv );
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff fd2e 	bl	8001ed8 <SCH_PauseTask>
      SCH_PauseTask( CFG_IdleTask_Button );
 800247c:	2004      	movs	r0, #4
 800247e:	f7ff fd2b 	bl	8001ed8 <SCH_PauseTask>
}
 8002482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SCH_PauseTask( CFG_IdleTask_HciAsynchEvt );
 8002486:	2005      	movs	r0, #5
 8002488:	f7ff bd26 	b.w	8001ed8 <SCH_PauseTask>
      SCH_ResumeTask( CFG_IdleTask_StartAdv );
 800248c:	f7ff fd36 	bl	8001efc <SCH_ResumeTask>
      SCH_ResumeTask( CFG_IdleTask_Button );
 8002490:	2004      	movs	r0, #4
 8002492:	f7ff fd33 	bl	8001efc <SCH_ResumeTask>
}
 8002496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SCH_ResumeTask( CFG_IdleTask_HciAsynchEvt );
 800249a:	2005      	movs	r0, #5
 800249c:	f7ff bd2e 	b.w	8001efc <SCH_ResumeTask>

080024a0 <HW_TS_RTC_Int_AppNot>:
  {
    case CFG_TimProcID_isr:
      /**
       * This is expected to be called in the Timer Interrupt Handler to limit latency
       */
      pfTimerCallBack();
 80024a0:	4710      	bx	r2
	...

080024a4 <Potato_Save>:
	return ret;
}
*/


save_ret Potato_Save(POTATO_Context_t *POTATO){
 80024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t data = 0;
 80024a6:	2200      	movs	r2, #0
save_ret Potato_Save(POTATO_Context_t *POTATO){
 80024a8:	b089      	sub	sp, #36	; 0x24
	uint64_t data = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
	uint8_t i = 0;
	uint64_t * potato_flash_address = Potato_Flash_Address;
	uint64_t *potato_address = (uint64_t *)POTATO;
	uint32_t Page_Error = 0;
 80024b0:	2300      	movs	r3, #0
	uint32_t primask_bit;

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Page;
 80024b2:	2401      	movs	r4, #1
	uint32_t Page_Error = 0;
 80024b4:	9301      	str	r3, [sp, #4]
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 80024b6:	9304      	str	r3, [sp, #16]
	Erase_t.Page = Potato_Flash_Page;
 80024b8:	23fe      	movs	r3, #254	; 0xfe
 80024ba:	e9cd 4305 	strd	r4, r3, [sp, #20]
save_ret Potato_Save(POTATO_Context_t *POTATO){
 80024be:	4605      	mov	r5, r0
	Erase_t.NbPages = 1;
 80024c0:	9407      	str	r4, [sp, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80024c6:	b672      	cpsid	i
	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	//potato_address = (uint64_t*)testfunc();

	if(HAL_FLASH_Unlock() != HAL_OK) return unlock_error;
 80024c8:	f000 fa46 	bl	8002958 <HAL_FLASH_Unlock>
 80024cc:	bb00      	cbnz	r0, 8002510 <Potato_Save+0x6c>

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 80024ce:	a901      	add	r1, sp, #4
 80024d0:	a804      	add	r0, sp, #16
 80024d2:	f000 fb39 	bl	8002b48 <HAL_FLASHEx_Erase>
 80024d6:	b9e8      	cbnz	r0, 8002514 <Potato_Save+0x70>
		/*
		for(j = 0; j < 8; j++){
			data[i] |= (*potato_address)<<(7-j)*8;
			potato_address++;
		}*/
		memcpy(&data, potato_address,8);
 80024d8:	f105 4478 	add.w	r4, r5, #4160749568	; 0xf8000000
	uint64_t * potato_flash_address = Potato_Flash_Address;
 80024dc:	4e10      	ldr	r6, [pc, #64]	; (8002520 <Potato_Save+0x7c>)
	for(i = 0; i < 12; i++){
 80024de:	4d11      	ldr	r5, [pc, #68]	; (8002524 <Potato_Save+0x80>)
		memcpy(&data, potato_address,8);
 80024e0:	f5a4 24fe 	sub.w	r4, r4, #520192	; 0x7f000
 80024e4:	19a2      	adds	r2, r4, r6
 80024e6:	59a0      	ldr	r0, [r4, r6]
 80024e8:	6851      	ldr	r1, [r2, #4]
 80024ea:	ab02      	add	r3, sp, #8
 80024ec:	c303      	stmia	r3!, {r0, r1}
		potato_address++;

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)potato_flash_address, data) != HAL_OK) return write_error;
 80024ee:	4631      	mov	r1, r6
 80024f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80024f4:	2000      	movs	r0, #0
 80024f6:	f000 fa75 	bl	80029e4 <HAL_FLASH_Program>
 80024fa:	b968      	cbnz	r0, 8002518 <Potato_Save+0x74>
		potato_flash_address++;
 80024fc:	3608      	adds	r6, #8
	for(i = 0; i < 12; i++){
 80024fe:	42ae      	cmp	r6, r5
 8002500:	d1f0      	bne.n	80024e4 <Potato_Save+0x40>
	}

	if(HAL_FLASH_Lock() != HAL_OK) return lock_error;
 8002502:	f000 fa3b 	bl	800297c <HAL_FLASH_Lock>
 8002506:	b948      	cbnz	r0, 800251c <Potato_Save+0x78>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002508:	f387 8810 	msr	PRIMASK, r7
	__set_PRIMASK(primask_bit);

	return save_ok;

}
 800250c:	b009      	add	sp, #36	; 0x24
 800250e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(HAL_FLASH_Unlock() != HAL_OK) return unlock_error;
 8002510:	2003      	movs	r0, #3
 8002512:	e7fb      	b.n	800250c <Potato_Save+0x68>
		return erase_error;
 8002514:	4620      	mov	r0, r4
 8002516:	e7f9      	b.n	800250c <Potato_Save+0x68>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)potato_flash_address, data) != HAL_OK) return write_error;
 8002518:	2002      	movs	r0, #2
 800251a:	e7f7      	b.n	800250c <Potato_Save+0x68>
	if(HAL_FLASH_Lock() != HAL_OK) return lock_error;
 800251c:	2004      	movs	r0, #4
 800251e:	e7f5      	b.n	800250c <Potato_Save+0x68>
 8002520:	0807f000 	.word	0x0807f000
 8002524:	0807f060 	.word	0x0807f060

08002528 <Potato_Load>:

void Potato_Load(POTATO_Context_t *POTATO){
	memcpy(POTATO,Potato_Flash_Address,96);
 8002528:	4901      	ldr	r1, [pc, #4]	; (8002530 <Potato_Load+0x8>)
 800252a:	2260      	movs	r2, #96	; 0x60
 800252c:	f001 b988 	b.w	8003840 <memcpy>
 8002530:	0807f000 	.word	0x0807f000

08002534 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8002534:	4770      	bx	lr

08002536 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002536:	e7fe      	b.n	8002536 <HardFault_Handler>

08002538 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002538:	e7fe      	b.n	8002538 <MemManage_Handler>

0800253a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800253a:	e7fe      	b.n	800253a <BusFault_Handler>

0800253c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800253c:	e7fe      	b.n	800253c <UsageFault_Handler>

0800253e <SVC_Handler>:
 800253e:	4770      	bx	lr

08002540 <DebugMon_Handler>:
 8002540:	4770      	bx	lr

08002542 <PendSV_Handler>:
 8002542:	4770      	bx	lr

08002544 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8002544:	f000 b8d8 	b.w	80026f8 <HAL_IncTick>

08002548 <RTC_WKUP_IRQHandler>:
 * @param  None
 * @retval None
 */
void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 8002548:	f7ff b944 	b.w	80017d4 <HW_TS_RTC_Wakeup_Handler>

0800254c <EXTI9_5_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void)           /* BNRG_SPI_EXTI_IRQHandler */
{
  HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
 800254c:	2040      	movs	r0, #64	; 0x40
 800254e:	f000 bc59 	b.w	8002e04 <HAL_GPIO_EXTI_IRQHandler>

08002552 <EXTI15_10_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI15_10_IRQHandler(void)  /* PUSH_BUTTON_EXTI_IRQHandler */
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8002552:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002556:	f000 bc55 	b.w	8002e04 <HAL_GPIO_EXTI_IRQHandler>

0800255a <DMA2_Channel1_IRQHandler>:
 * @param  None
 * @retval None
 */
void DMA2_Channel1_IRQHandler(void)     /* BNRG_SPI_RX_DMA_IRQHandler */
  {
    HW_BNRG_DMARxCb();
 800255a:	f7fe be31 	b.w	80011c0 <HW_BNRG_DMARxCb>

0800255e <DMA2_Channel2_IRQHandler>:
 * @param  None
 * @retval None
 */
void DMA2_Channel2_IRQHandler(void)    /* BNRG_SPI_TX_DMA_IRQHandler */
  {
    HW_BNRG_DMATxCb();
 800255e:	f7fe bd6f 	b.w	8001040 <HW_BNRG_DMATxCb>
	...

08002564 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <SystemInit+0x3c>)
     */

    /**
     * Increase FLASH latency to 3WS
     */
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8002566:	490f      	ldr	r1, [pc, #60]	; (80025a4 <SystemInit+0x40>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002568:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800256c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8002574:	680a      	ldr	r2, [r1, #0]
 8002576:	f042 0203 	orr.w	r2, r2, #3
 800257a:	600a      	str	r2, [r1, #0]

    /**
     * Decrease VCore to Range2.
     * As we are downscaling Vcore, it is not required to wait for the VOSF bit to be ready
     */
    RCC->APB1ENR1 = RCC_APB1ENR1_PWREN;  /**< Switch ON PWR clock */
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <SystemInit+0x44>)
 800257e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8002582:	6591      	str	r1, [r2, #88]	; 0x58
    PWR->CR1 = PWR_CR1_VOS_1;
 8002584:	4909      	ldr	r1, [pc, #36]	; (80025ac <SystemInit+0x48>)
 8002586:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800258a:	6008      	str	r0, [r1, #0]

    /**
     * Increase MSI to 24Mhz
     *
     */
    RCC->CR = (RCC_CR_MSIRANGE_9|RCC_CR_MSIRGSEL|RCC_CR_MSION);   /**< Increase MSI Speed and switch MSI source*/
 800258c:	2199      	movs	r1, #153	; 0x99
 800258e:	6011      	str	r1, [r2, #0]

    SystemCoreClock = 24000000;
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <SystemInit+0x4c>)
 8002592:	4908      	ldr	r1, [pc, #32]	; (80025b4 <SystemInit+0x50>)
 8002594:	6011      	str	r1, [r2, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002596:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800259a:	609a      	str	r2, [r3, #8]
#endif

}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	20000004 	.word	0x20000004
 80025b4:	016e3600 	.word	0x016e3600

080025b8 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80025b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80025ba:	b948      	cbnz	r0, 80025d0 <BSP_LED_Init+0x18>
 80025bc:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <BSP_LED_Init+0x3c>)
 80025be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025c0:	f042 0202 	orr.w	r2, r2, #2
 80025c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80025d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025d4:	2301      	movs	r3, #1
 80025d6:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80025da:	2100      	movs	r1, #0
 80025dc:	2302      	movs	r3, #2
 80025de:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <BSP_LED_Init+0x40>)
 80025e4:	a901      	add	r1, sp, #4
 80025e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80025ea:	f000 fb21 	bl	8002c30 <HAL_GPIO_Init>
}
 80025ee:	b007      	add	sp, #28
 80025f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80025f4:	40021000 	.word	0x40021000
 80025f8:	20000008 	.word	0x20000008

080025fc <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80025fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <BSP_PB_Init+0x70>)
 8002600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002602:	f042 0204 	orr.w	r2, r2, #4
 8002606:	64da      	str	r2, [r3, #76]	; 0x4c
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002612:	b989      	cbnz	r1, 8002638 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002618:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800261c:	2101      	movs	r1, #1
 800261e:	2302      	movs	r3, #2
 8002620:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <BSP_PB_Init+0x74>)
 8002626:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800262a:	a901      	add	r1, sp, #4
 800262c:	6840      	ldr	r0, [r0, #4]
 800262e:	f000 faff 	bl	8002c30 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8002632:	b007      	add	sp, #28
 8002634:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002638:	2901      	cmp	r1, #1
 800263a:	d1fa      	bne.n	8002632 <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800263c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002640:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002642:	2303      	movs	r3, #3
 8002644:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <BSP_PB_Init+0x78>)
 8002648:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 800264c:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800264e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002652:	a901      	add	r1, sp, #4
 8002654:	6840      	ldr	r0, [r0, #4]
 8002656:	f000 faeb 	bl	8002c30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800265a:	2200      	movs	r2, #0
 800265c:	210f      	movs	r1, #15
 800265e:	2028      	movs	r0, #40	; 0x28
 8002660:	f000 f886 	bl	8002770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002664:	2028      	movs	r0, #40	; 0x28
 8002666:	f000 f8b5 	bl	80027d4 <HAL_NVIC_EnableIRQ>
}
 800266a:	e7e2      	b.n	8002632 <BSP_PB_Init+0x36>
 800266c:	40021000 	.word	0x40021000
 8002670:	20000008 	.word	0x20000008
 8002674:	10110000 	.word	0x10110000

08002678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800267c:	f7ff ff72 	bl	8002564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002680:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002682:	e003      	b.n	800268c <LoopCopyDataInit>

08002684 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002686:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002688:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800268a:	3104      	adds	r1, #4

0800268c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800268c:	480a      	ldr	r0, [pc, #40]	; (80026b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002690:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002692:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002694:	d3f6      	bcc.n	8002684 <CopyDataInit>
	ldr	r2, =_sbss
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002698:	e002      	b.n	80026a0 <LoopFillZerobss>

0800269a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800269a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800269c:	f842 3b04 	str.w	r3, [r2], #4

080026a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <LoopForever+0x16>)
	cmp	r2, r3
 80026a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026a4:	d3f9      	bcc.n	800269a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026a6:	f001 f8a7 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026aa:	f7ff fdb9 	bl	8002220 <main>

080026ae <LoopForever>:

LoopForever:
    b LoopForever
 80026ae:	e7fe      	b.n	80026ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026b0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80026b4:	08003910 	.word	0x08003910
	ldr	r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026bc:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 80026c0:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 80026c4:	20000b78 	.word	0x20000b78

080026c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC1_2_IRQHandler>

080026ca <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80026ca:	4770      	bx	lr

080026cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_Init+0x28>)
 80026ce:	6813      	ldr	r3, [r2, #0]
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80026d4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026da:	f000 f837 	bl	800274c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026de:	200f      	movs	r0, #15
 80026e0:	f7ff fec0 	bl	8002464 <HAL_InitTick>
 80026e4:	4604      	mov	r4, r0
 80026e6:	b918      	cbnz	r0, 80026f0 <HAL_Init+0x24>
    HAL_MspInit();
 80026e8:	f7ff ffef 	bl	80026ca <HAL_MspInit>
}
 80026ec:	4620      	mov	r0, r4
 80026ee:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80026f0:	2401      	movs	r4, #1
 80026f2:	e7fb      	b.n	80026ec <HAL_Init+0x20>
 80026f4:	40022000 	.word	0x40022000

080026f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80026f8:	4a03      	ldr	r2, [pc, #12]	; (8002708 <HAL_IncTick+0x10>)
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_IncTick+0x14>)
 80026fc:	6811      	ldr	r1, [r2, #0]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	440b      	add	r3, r1
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000b74 	.word	0x20000b74
 800270c:	2000001c 	.word	0x2000001c

08002710 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <HAL_GetTick+0x8>)
 8002712:	6818      	ldr	r0, [r3, #0]
}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000b74 	.word	0x20000b74

0800271c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800271c:	4a02      	ldr	r2, [pc, #8]	; (8002728 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800271e:	6853      	ldr	r3, [r2, #4]
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6053      	str	r3, [r2, #4]
}
 8002726:	4770      	bx	lr
 8002728:	e0042000 	.word	0xe0042000

0800272c <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800272c:	4a02      	ldr	r2, [pc, #8]	; (8002738 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800272e:	6853      	ldr	r3, [r2, #4]
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6053      	str	r3, [r2, #4]
}
 8002736:	4770      	bx	lr
 8002738:	e0042000 	.word	0xe0042000

0800273c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800273c:	4a02      	ldr	r2, [pc, #8]	; (8002748 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800273e:	6853      	ldr	r3, [r2, #4]
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6053      	str	r3, [r2, #4]
}
 8002746:	4770      	bx	lr
 8002748:	e0042000 	.word	0xe0042000

0800274c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800274e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002750:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002754:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002756:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002758:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002768:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002772:	b530      	push	{r4, r5, lr}
 8002774:	68dc      	ldr	r4, [r3, #12]
 8002776:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	2d04      	cmp	r5, #4
 8002782:	bf28      	it	cs
 8002784:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002786:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278c:	bf8c      	ite	hi
 800278e:	3c03      	subhi	r4, #3
 8002790:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002792:	fa03 f505 	lsl.w	r5, r3, r5
 8002796:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279a:	40a3      	lsls	r3, r4
 800279c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80027a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	bfac      	ite	ge
 80027aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	4a08      	ldrlt	r2, [pc, #32]	; (80027d0 <HAL_NVIC_SetPriority+0x60>)
 80027b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80027b4:	bfb8      	it	lt
 80027b6:	f000 000f 	andlt.w	r0, r0, #15
 80027ba:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	bfaa      	itet	ge
 80027be:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80027c8:	bd30      	pop	{r4, r5, pc}
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	e000ed14 	.word	0xe000ed14

080027d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80027d4:	2800      	cmp	r0, #0
 80027d6:	db08      	blt.n	80027ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d8:	2301      	movs	r3, #1
 80027da:	0942      	lsrs	r2, r0, #5
 80027dc:	f000 001f 	and.w	r0, r0, #31
 80027e0:	fa03 f000 	lsl.w	r0, r3, r0
 80027e4:	4b01      	ldr	r3, [pc, #4]	; (80027ec <HAL_NVIC_EnableIRQ+0x18>)
 80027e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80027f0:	2800      	cmp	r0, #0
 80027f2:	db0d      	blt.n	8002810 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f4:	0943      	lsrs	r3, r0, #5
 80027f6:	2201      	movs	r2, #1
 80027f8:	f000 001f 	and.w	r0, r0, #31
 80027fc:	fa02 f000 	lsl.w	r0, r2, r0
 8002800:	3320      	adds	r3, #32
 8002802:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_NVIC_DisableIRQ+0x24>)
 8002804:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800280c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100

08002818 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002818:	2800      	cmp	r0, #0
 800281a:	db09      	blt.n	8002830 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281c:	0943      	lsrs	r3, r0, #5
 800281e:	2201      	movs	r2, #1
 8002820:	f000 001f 	and.w	r0, r0, #31
 8002824:	fa02 f000 	lsl.w	r0, r2, r0
 8002828:	3340      	adds	r3, #64	; 0x40
 800282a:	4a02      	ldr	r2, [pc, #8]	; (8002834 <HAL_NVIC_SetPendingIRQ+0x1c>)
 800282c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100

08002838 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002838:	2800      	cmp	r0, #0
 800283a:	db09      	blt.n	8002850 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283c:	0943      	lsrs	r3, r0, #5
 800283e:	2201      	movs	r2, #1
 8002840:	f000 001f 	and.w	r0, r0, #31
 8002844:	fa02 f000 	lsl.w	r0, r2, r0
 8002848:	3360      	adds	r3, #96	; 0x60
 800284a:	4a02      	ldr	r2, [pc, #8]	; (8002854 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 800284c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100

08002858 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002858:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800285a:	2800      	cmp	r0, #0
 800285c:	d058      	beq.n	8002910 <HAL_DMA_Init+0xb8>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800285e:	6801      	ldr	r1, [r0, #0]
 8002860:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <HAL_DMA_Init+0xbc>)
 8002862:	4299      	cmp	r1, r3
 8002864:	f04f 0414 	mov.w	r4, #20
 8002868:	d842      	bhi.n	80028f0 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800286a:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <HAL_DMA_Init+0xc0>)
 800286c:	440a      	add	r2, r1
 800286e:	fbb2 f2f4 	udiv	r2, r2, r4
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002876:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 800287a:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800287c:	2302      	movs	r3, #2
 800287e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002882:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002886:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8002888:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 800288a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288c:	432b      	orrs	r3, r5
 800288e:	6945      	ldr	r5, [r0, #20]
 8002890:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002892:	6985      	ldr	r5, [r0, #24]
 8002894:	432b      	orrs	r3, r5
 8002896:	69c5      	ldr	r5, [r0, #28]
 8002898:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800289a:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800289c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80028a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a4:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80028a6:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028a8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80028ac:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028ae:	d016      	beq.n	80028de <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028b0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80028b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80028b4:	f001 021c 	and.w	r2, r1, #28
 80028b8:	6841      	ldr	r1, [r0, #4]
 80028ba:	230f      	movs	r3, #15
 80028bc:	4093      	lsls	r3, r2
 80028be:	4091      	lsls	r1, r2
 80028c0:	4a16      	ldr	r2, [pc, #88]	; (800291c <HAL_DMA_Init+0xc4>)
 80028c2:	4294      	cmp	r4, r2
 80028c4:	ea6f 0303 	mvn.w	r3, r3
 80028c8:	d11a      	bne.n	8002900 <HAL_DMA_Init+0xa8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028ca:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 80028ce:	4023      	ands	r3, r4
 80028d0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028d4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 80028d8:	4319      	orrs	r1, r3
 80028da:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028de:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028e0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e2:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028e4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80028e8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 80028ec:	4618      	mov	r0, r3
}
 80028ee:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_DMA_Init+0xc8>)
 80028f2:	440b      	add	r3, r1
 80028f4:	fbb3 f3f4 	udiv	r3, r3, r4
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_DMA_Init+0xcc>)
 80028fe:	e7bc      	b.n	800287a <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_DMA_Init+0xd0>)
 8002902:	6814      	ldr	r4, [r2, #0]
 8002904:	4023      	ands	r3, r4
 8002906:	6013      	str	r3, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002908:	6813      	ldr	r3, [r2, #0]
 800290a:	4319      	orrs	r1, r3
 800290c:	6011      	str	r1, [r2, #0]
 800290e:	e7e6      	b.n	80028de <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8002910:	2001      	movs	r0, #1
 8002912:	e7ec      	b.n	80028ee <HAL_DMA_Init+0x96>
 8002914:	40020407 	.word	0x40020407
 8002918:	bffdfff8 	.word	0xbffdfff8
 800291c:	40020000 	.word	0x40020000
 8002920:	bffdfbf8 	.word	0xbffdfbf8
 8002924:	40020400 	.word	0x40020400
 8002928:	400204a8 	.word	0x400204a8

0800292c <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800292c:	4a09      	ldr	r2, [pc, #36]	; (8002954 <FLASH_Program_Fast+0x28>)
 800292e:	6953      	ldr	r3, [r2, #20]
 8002930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 8002934:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002936:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002938:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800293c:	b672      	cpsid	i
}
 800293e:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002940:	58cc      	ldr	r4, [r1, r3]
 8002942:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  } while (row_index != 0U);
 8002944:	3304      	adds	r3, #4
 8002946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294a:	d1f9      	bne.n	8002940 <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294c:	f382 8810 	msr	PRIMASK, r2

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002950:	bd10      	pop	{r4, pc}
 8002952:	bf00      	nop
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_FLASH_Unlock+0x1c>)
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800295e:	bfbf      	itttt	lt
 8002960:	4a05      	ldrlt	r2, [pc, #20]	; (8002978 <HAL_FLASH_Unlock+0x20>)
 8002962:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002964:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8002968:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800296a:	bfba      	itte	lt
 800296c:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	0fc0      	lsrlt	r0, r0, #31
 8002970:	2000      	movge	r0, #0
}
 8002972:	4770      	bx	lr
 8002974:	40022000 	.word	0x40022000
 8002978:	45670123 	.word	0x45670123

0800297c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800297c:	4a03      	ldr	r2, [pc, #12]	; (800298c <HAL_FLASH_Lock+0x10>)
 800297e:	6953      	ldr	r3, [r2, #20]
 8002980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002984:	6153      	str	r3, [r2, #20]
}
 8002986:	2000      	movs	r0, #0
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40022000 	.word	0x40022000

08002990 <FLASH_WaitForLastOperation>:
{
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff febc 	bl	8002710 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002998:	4c10      	ldr	r4, [pc, #64]	; (80029dc <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 800299a:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800299c:	6923      	ldr	r3, [r4, #16]
 800299e:	03db      	lsls	r3, r3, #15
 80029a0:	d40b      	bmi.n	80029ba <FLASH_WaitForLastOperation+0x2a>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80029a2:	6920      	ldr	r0, [r4, #16]
 80029a4:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if(error != 0u)
 80029a8:	4002      	ands	r2, r0
 80029aa:	d00f      	beq.n	80029cc <FLASH_WaitForLastOperation+0x3c>
    pFlash.ErrorCode |= error;
 80029ac:	490c      	ldr	r1, [pc, #48]	; (80029e0 <FLASH_WaitForLastOperation+0x50>)
 80029ae:	684b      	ldr	r3, [r1, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 80029b4:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80029b6:	6122      	str	r2, [r4, #16]
}
 80029b8:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80029ba:	1c6a      	adds	r2, r5, #1
 80029bc:	d0ee      	beq.n	800299c <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 80029be:	f7ff fea7 	bl	8002710 <HAL_GetTick>
 80029c2:	1b80      	subs	r0, r0, r6
 80029c4:	42a8      	cmp	r0, r5
 80029c6:	d3e9      	bcc.n	800299c <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80029c8:	2003      	movs	r0, #3
 80029ca:	e7f5      	b.n	80029b8 <FLASH_WaitForLastOperation+0x28>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80029cc:	6920      	ldr	r0, [r4, #16]
 80029ce:	f010 0001 	ands.w	r0, r0, #1
 80029d2:	d0f1      	beq.n	80029b8 <FLASH_WaitForLastOperation+0x28>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80029d4:	2301      	movs	r3, #1
 80029d6:	6123      	str	r3, [r4, #16]
 80029d8:	4610      	mov	r0, r2
 80029da:	e7ed      	b.n	80029b8 <FLASH_WaitForLastOperation+0x28>
 80029dc:	40022000 	.word	0x40022000
 80029e0:	20000024 	.word	0x20000024

080029e4 <HAL_FLASH_Program>:
{
 80029e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80029e8:	4c25      	ldr	r4, [pc, #148]	; (8002a80 <HAL_FLASH_Program+0x9c>)
{
 80029ea:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80029ec:	7823      	ldrb	r3, [r4, #0]
 80029ee:	2b01      	cmp	r3, #1
{
 80029f0:	4606      	mov	r6, r0
 80029f2:	460f      	mov	r7, r1
 80029f4:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80029f6:	d041      	beq.n	8002a7c <HAL_FLASH_Program+0x98>
 80029f8:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029fa:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80029fe:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a00:	f7ff ffc6 	bl	8002990 <FLASH_WaitForLastOperation>
 8002a04:	4605      	mov	r5, r0
  if(status == HAL_OK)
 8002a06:	bb30      	cbnz	r0, 8002a56 <HAL_FLASH_Program+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002a08:	4d1e      	ldr	r5, [pc, #120]	; (8002a84 <HAL_FLASH_Program+0xa0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a0a:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002a0c:	682a      	ldr	r2, [r5, #0]
 8002a0e:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002a12:	bf17      	itett	ne
 8002a14:	682b      	ldrne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002a16:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002a18:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8002a1c:	602b      	strne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002a1e:	bf1c      	itt	ne
 8002a20:	2302      	movne	r3, #2
 8002a22:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002a24:	b9e6      	cbnz	r6, 8002a60 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002a26:	696b      	ldr	r3, [r5, #20]
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	616b      	str	r3, [r5, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002a2e:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 8002a32:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8002a36:	2601      	movs	r6, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002a38:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a40:	f7ff ffa6 	bl	8002990 <FLASH_WaitForLastOperation>
 8002a44:	4605      	mov	r5, r0
    if (prog_bit != 0U)
 8002a46:	b126      	cbz	r6, 8002a52 <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_FLASH_Program+0xa0>)
 8002a4a:	6953      	ldr	r3, [r2, #20]
 8002a4c:	ea23 0606 	bic.w	r6, r3, r6
 8002a50:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 8002a52:	f000 f84d 	bl	8002af0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002a56:	2300      	movs	r3, #0
 8002a58:	7023      	strb	r3, [r4, #0]
}
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002a60:	1e73      	subs	r3, r6, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d901      	bls.n	8002a6a <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 8002a66:	2600      	movs	r6, #0
 8002a68:	e7e8      	b.n	8002a3c <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	4638      	mov	r0, r7
 8002a6e:	f7ff ff5d 	bl	800292c <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002a72:	2e02      	cmp	r6, #2
 8002a74:	d1f7      	bne.n	8002a66 <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 8002a76:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8002a7a:	e7df      	b.n	8002a3c <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 8002a7c:	2502      	movs	r5, #2
 8002a7e:	e7ec      	b.n	8002a5a <HAL_FLASH_Program+0x76>
 8002a80:	20000024 	.word	0x20000024
 8002a84:	40022000 	.word	0x40022000

08002a88 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <FLASH_MassErase+0x28>)
 8002a8a:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002a8e:	bf1e      	ittt	ne
 8002a90:	695a      	ldrne	r2, [r3, #20]
 8002a92:	f042 0204 	orrne.w	r2, r2, #4
 8002a96:	615a      	strne	r2, [r3, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002a98:	0782      	lsls	r2, r0, #30
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002a9a:	bf42      	ittt	mi
 8002a9c:	695a      	ldrmi	r2, [r3, #20]
 8002a9e:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
 8002aa2:	615a      	strmi	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002aa4:	4a02      	ldr	r2, [pc, #8]	; (8002ab0 <FLASH_MassErase+0x28>)
 8002aa6:	6953      	ldr	r3, [r2, #20]
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aac:	6153      	str	r3, [r2, #20]
}
 8002aae:	4770      	bx	lr
 8002ab0:	40022000 	.word	0x40022000

08002ab4 <FLASH_PageErase>:
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <FLASH_PageErase+0x38>)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002ab6:	695a      	ldr	r2, [r3, #20]
    if((Banks & FLASH_BANK_1) != 0U)
 8002ab8:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002abc:	bf14      	ite	ne
 8002abe:	f422 6200 	bicne.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002ac2:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8002ac6:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	00c0      	lsls	r0, r0, #3
 8002acc:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8002ad0:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8002ad4:	4310      	orrs	r0, r2
 8002ad6:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	f042 0202 	orr.w	r2, r2, #2
 8002ade:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ae6:	615a      	str	r2, [r3, #20]
}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40022000 	.word	0x40022000

08002af0 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <FLASH_FlushCaches+0x50>)
 8002af2:	7f13      	ldrb	r3, [r2, #28]
 8002af4:	b2d9      	uxtb	r1, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002af6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10c      	bne.n	8002b18 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <FLASH_FlushCaches+0x54>)
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8002b06:	6018      	str	r0, [r3, #0]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8002b0e:	6018      	str	r0, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8002b16:	6018      	str	r0, [r3, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002b18:	1e8b      	subs	r3, r1, #2
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d80c      	bhi.n	8002b38 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <FLASH_FlushCaches+0x54>)
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8002b26:	6019      	str	r1, [r3, #0]
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002b2e:	6019      	str	r1, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002b36:	6019      	str	r1, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	7713      	strb	r3, [r2, #28]
}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000024 	.word	0x20000024
 8002b44:	40022000 	.word	0x40022000

08002b48 <HAL_FLASHEx_Erase>:
{
 8002b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8002b4c:	4d35      	ldr	r5, [pc, #212]	; (8002c24 <HAL_FLASHEx_Erase+0xdc>)
 8002b4e:	782b      	ldrb	r3, [r5, #0]
 8002b50:	2b01      	cmp	r3, #1
{
 8002b52:	4606      	mov	r6, r0
 8002b54:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002b56:	d062      	beq.n	8002c1e <HAL_FLASHEx_Erase+0xd6>
 8002b58:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b5a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002b5e:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b60:	f7ff ff16 	bl	8002990 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8002b64:	4604      	mov	r4, r0
 8002b66:	bb40      	cbnz	r0, 8002bba <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002b68:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b6a:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002b72:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002b74:	d026      	beq.n	8002bc4 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002b76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	0551      	lsls	r1, r2, #21
 8002b80:	d506      	bpl.n	8002b90 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b88:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002b8a:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002b8c:	772b      	strb	r3, [r5, #28]
 8002b8e:	e000      	b.n	8002b92 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002b90:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b92:	6833      	ldr	r3, [r6, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d11f      	bne.n	8002bd8 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 8002b98:	6870      	ldr	r0, [r6, #4]
 8002b9a:	f7ff ff75 	bl	8002a88 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ba2:	f7ff fef5 	bl	8002990 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002ba6:	4a20      	ldr	r2, [pc, #128]	; (8002c28 <HAL_FLASHEx_Erase+0xe0>)
 8002ba8:	6953      	ldr	r3, [r2, #20]
 8002baa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002bae:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bb2:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002bb4:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 8002bb6:	f7ff ff9b 	bl	8002af0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	702b      	strb	r3, [r5, #0]
}
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002bc4:	0552      	lsls	r2, r2, #21
 8002bc6:	d505      	bpl.n	8002bd4 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bce:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e7db      	b.n	8002b8c <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002bd4:	7728      	strb	r0, [r5, #28]
 8002bd6:	e7dc      	b.n	8002b92 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bdc:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002be0:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002be2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002c28 <HAL_FLASHEx_Erase+0xe0>
 8002be6:	f8df a044 	ldr.w	sl, [pc, #68]	; 8002c2c <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002bea:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8002bee:	4413      	add	r3, r2
 8002bf0:	42bb      	cmp	r3, r7
 8002bf2:	d9e0      	bls.n	8002bb6 <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002bf4:	6871      	ldr	r1, [r6, #4]
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	f7ff ff5c 	bl	8002ab4 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c00:	f7ff fec6 	bl	8002990 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002c04:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8002c08:	ea03 030a 	and.w	r3, r3, sl
 8002c0c:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8002c10:	b118      	cbz	r0, 8002c1a <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 8002c12:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c16:	4604      	mov	r4, r0
          break;
 8002c18:	e7cd      	b.n	8002bb6 <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002c1a:	3701      	adds	r7, #1
 8002c1c:	e7e5      	b.n	8002bea <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 8002c1e:	2402      	movs	r4, #2
 8002c20:	e7cd      	b.n	8002bbe <HAL_FLASHEx_Erase+0x76>
 8002c22:	bf00      	nop
 8002c24:	20000024 	.word	0x20000024
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	fffff805 	.word	0xfffff805

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c34:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8002de8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c38:	4d69      	ldr	r5, [pc, #420]	; (8002de0 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8002c3a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3c:	680a      	ldr	r2, [r1, #0]
 8002c3e:	fa32 f403 	lsrs.w	r4, r2, r3
 8002c42:	d102      	bne.n	8002c4a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002c44:	b003      	add	sp, #12
 8002c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c4a:	f04f 0a01 	mov.w	sl, #1
 8002c4e:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 8002c52:	ea1a 0202 	ands.w	r2, sl, r2
 8002c56:	f000 80b4 	beq.w	8002dc2 <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c5a:	684c      	ldr	r4, [r1, #4]
 8002c5c:	f024 0e10 	bic.w	lr, r4, #16
 8002c60:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002c64:	2603      	movs	r6, #3
 8002c66:	f10e 37ff 	add.w	r7, lr, #4294967295
 8002c6a:	fa06 f608 	lsl.w	r6, r6, r8
 8002c6e:	2f01      	cmp	r7, #1
 8002c70:	ea6f 0606 	mvn.w	r6, r6
 8002c74:	d811      	bhi.n	8002c9a <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8002c76:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c78:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c7c:	68cf      	ldr	r7, [r1, #12]
 8002c7e:	fa07 f708 	lsl.w	r7, r7, r8
 8002c82:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8002c86:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002c88:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c8a:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c8e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002c92:	409f      	lsls	r7, r3
 8002c94:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8002c98:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c9a:	f004 0c03 	and.w	ip, r4, #3
 8002c9e:	f1bc 0f03 	cmp.w	ip, #3
 8002ca2:	d108      	bne.n	8002cb6 <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 8002ca4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ca6:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002caa:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8002cae:	409f      	lsls	r7, r3
 8002cb0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8002cb4:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002cb6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002cb8:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cbc:	688f      	ldr	r7, [r1, #8]
 8002cbe:	fa07 f708 	lsl.w	r7, r7, r8
 8002cc2:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc6:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8002cca:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ccc:	d116      	bne.n	8002cfc <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 8002cce:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002cd2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cd6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002cda:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cde:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002ce2:	f04f 0e0f 	mov.w	lr, #15
 8002ce6:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002cea:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cee:	690f      	ldr	r7, [r1, #16]
 8002cf0:	fa07 f70b 	lsl.w	r7, r7, fp
 8002cf4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002cf8:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8002cfc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cfe:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d02:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d04:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 8002d08:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d0a:	00e6      	lsls	r6, r4, #3
 8002d0c:	d559      	bpl.n	8002dc2 <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8002d12:	f046 0601 	orr.w	r6, r6, #1
 8002d16:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8002d1a:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8002d1e:	f023 0703 	bic.w	r7, r3, #3
 8002d22:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002d26:	f006 0601 	and.w	r6, r6, #1
 8002d2a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002d2e:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d30:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d34:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002d36:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d38:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002d3c:	f04f 0c0f 	mov.w	ip, #15
 8002d40:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d44:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d48:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d4c:	d03b      	beq.n	8002dc6 <HAL_GPIO_Init+0x196>
 8002d4e:	4e25      	ldr	r6, [pc, #148]	; (8002de4 <HAL_GPIO_Init+0x1b4>)
 8002d50:	42b0      	cmp	r0, r6
 8002d52:	d03a      	beq.n	8002dca <HAL_GPIO_Init+0x19a>
 8002d54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002d58:	42b0      	cmp	r0, r6
 8002d5a:	d038      	beq.n	8002dce <HAL_GPIO_Init+0x19e>
 8002d5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002d60:	42b0      	cmp	r0, r6
 8002d62:	d036      	beq.n	8002dd2 <HAL_GPIO_Init+0x1a2>
 8002d64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002d68:	42b0      	cmp	r0, r6
 8002d6a:	d034      	beq.n	8002dd6 <HAL_GPIO_Init+0x1a6>
 8002d6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002d70:	42b0      	cmp	r0, r6
 8002d72:	d032      	beq.n	8002dda <HAL_GPIO_Init+0x1aa>
 8002d74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002d78:	42b0      	cmp	r0, r6
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2606      	moveq	r6, #6
 8002d7e:	2607      	movne	r6, #7
 8002d80:	fa06 f60e 	lsl.w	r6, r6, lr
 8002d84:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d88:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8002d8a:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8002d8c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d8e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002d92:	bf0c      	ite	eq
 8002d94:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002d96:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8002d98:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8002d9a:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d9c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002da0:	bf0c      	ite	eq
 8002da2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002da4:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8002da6:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8002da8:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002daa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002dae:	bf0c      	ite	eq
 8002db0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002db2:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8002db4:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8002db6:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db8:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002dba:	bf54      	ite	pl
 8002dbc:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002dbe:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8002dc0:	60ee      	str	r6, [r5, #12]
    position++;
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	e73a      	b.n	8002c3c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dc6:	2600      	movs	r6, #0
 8002dc8:	e7da      	b.n	8002d80 <HAL_GPIO_Init+0x150>
 8002dca:	2601      	movs	r6, #1
 8002dcc:	e7d8      	b.n	8002d80 <HAL_GPIO_Init+0x150>
 8002dce:	2602      	movs	r6, #2
 8002dd0:	e7d6      	b.n	8002d80 <HAL_GPIO_Init+0x150>
 8002dd2:	2603      	movs	r6, #3
 8002dd4:	e7d4      	b.n	8002d80 <HAL_GPIO_Init+0x150>
 8002dd6:	2604      	movs	r6, #4
 8002dd8:	e7d2      	b.n	8002d80 <HAL_GPIO_Init+0x150>
 8002dda:	2605      	movs	r6, #5
 8002ddc:	e7d0      	b.n	8002d80 <HAL_GPIO_Init+0x150>
 8002dde:	bf00      	nop
 8002de0:	40010400 	.word	0x40010400
 8002de4:	48000400 	.word	0x48000400
 8002de8:	40021000 	.word	0x40021000

08002dec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002dec:	6903      	ldr	r3, [r0, #16]
 8002dee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002df0:	bf14      	ite	ne
 8002df2:	2001      	movne	r0, #1
 8002df4:	2000      	moveq	r0, #0
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df8:	b10a      	cbz	r2, 8002dfe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dfa:	6181      	str	r1, [r0, #24]
 8002dfc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dfe:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002e06:	6951      	ldr	r1, [r2, #20]
 8002e08:	4201      	tst	r1, r0
{
 8002e0a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e0c:	d002      	beq.n	8002e14 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e0e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e10:	f7ff fb02 	bl	8002418 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e14:	bd08      	pop	{r3, pc}
 8002e16:	bf00      	nop
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e1c:	4a02      	ldr	r2, [pc, #8]	; (8002e28 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002e1e:	6813      	ldr	r3, [r2, #0]
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]
}
 8002e26:	4770      	bx	lr
 8002e28:	40007000 	.word	0x40007000

08002e2c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e2c:	4b02      	ldr	r3, [pc, #8]	; (8002e38 <HAL_PWREx_GetVoltageRange+0xc>)
 8002e2e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002e30:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40007000 	.word	0x40007000

08002e3c <HAL_PWREx_EnableSRAM2ContentRetention>:
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 8002e3c:	4a02      	ldr	r2, [pc, #8]	; (8002e48 <HAL_PWREx_EnableSRAM2ContentRetention+0xc>)
 8002e3e:	6893      	ldr	r3, [r2, #8]
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6093      	str	r3, [r2, #8]
}
 8002e46:	4770      	bx	lr
 8002e48:	40007000 	.word	0x40007000

08002e4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e4e:	4d1e      	ldr	r5, [pc, #120]	; (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002e50:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002e52:	00da      	lsls	r2, r3, #3
{
 8002e54:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e56:	d518      	bpl.n	8002e8a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e58:	f7ff ffe8 	bl	8002e2c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e5c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002e60:	d123      	bne.n	8002eaa <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e62:	2c80      	cmp	r4, #128	; 0x80
 8002e64:	d929      	bls.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e66:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e68:	bf8c      	ite	hi
 8002e6a:	2402      	movhi	r4, #2
 8002e6c:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e6e:	4917      	ldr	r1, [pc, #92]	; (8002ecc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002e70:	680a      	ldr	r2, [r1, #0]
 8002e72:	f022 0207 	bic.w	r2, r2, #7
 8002e76:	4322      	orrs	r2, r4
 8002e78:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e7a:	6808      	ldr	r0, [r1, #0]
 8002e7c:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002e80:	1b00      	subs	r0, r0, r4
 8002e82:	bf18      	it	ne
 8002e84:	2001      	movne	r0, #1
 8002e86:	b003      	add	sp, #12
 8002e88:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	65ab      	str	r3, [r5, #88]	; 0x58
 8002e92:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002e9c:	f7ff ffc6 	bl	8002e2c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ea0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	65ab      	str	r3, [r5, #88]	; 0x58
 8002ea8:	e7d8      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002eaa:	2c80      	cmp	r4, #128	; 0x80
 8002eac:	d807      	bhi.n	8002ebe <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002eae:	d008      	beq.n	8002ec2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002eb0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002eb4:	425c      	negs	r4, r3
 8002eb6:	415c      	adcs	r4, r3
 8002eb8:	e7d9      	b.n	8002e6e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002eba:	2400      	movs	r4, #0
 8002ebc:	e7d7      	b.n	8002e6e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ebe:	2403      	movs	r4, #3
 8002ec0:	e7d5      	b.n	8002e6e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ec2:	2402      	movs	r4, #2
 8002ec4:	e7d3      	b.n	8002e6e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40022000 	.word	0x40022000

08002ed0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed0:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x8c>)
 8002ed2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ed6:	f012 020c 	ands.w	r2, r2, #12
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x18>
 8002edc:	2a0c      	cmp	r2, #12
 8002ede:	d115      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ee4:	2901      	cmp	r1, #1
 8002ee6:	d118      	bne.n	8002f1a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ee8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002eea:	481d      	ldr	r0, [pc, #116]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eec:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eee:	bf55      	itete	pl
 8002ef0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ef4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ef6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002efa:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002efe:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f02:	b34a      	cbz	r2, 8002f58 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f04:	2a0c      	cmp	r2, #12
 8002f06:	d009      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x4c>
 8002f08:	2000      	movs	r0, #0
  return sysclockfreq;
 8002f0a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f0c:	2a04      	cmp	r2, #4
 8002f0e:	d022      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f10:	2a08      	cmp	r2, #8
 8002f12:	4814      	ldr	r0, [pc, #80]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f14:	bf18      	it	ne
 8002f16:	2000      	movne	r0, #0
 8002f18:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f1a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002f22:	2a02      	cmp	r2, #2
 8002f24:	d015      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x82>
 8002f26:	490f      	ldr	r1, [pc, #60]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f28:	2a03      	cmp	r2, #3
 8002f2a:	bf08      	it	eq
 8002f2c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f2e:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f30:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f38:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f3c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f40:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f42:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f44:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f46:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f48:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8002f4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f50:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002f52:	4805      	ldr	r0, [pc, #20]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f54:	e7eb      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002f56:	4804      	ldr	r0, [pc, #16]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	080038b0 	.word	0x080038b0
 8002f64:	007a1200 	.word	0x007a1200
 8002f68:	00f42400 	.word	0x00f42400

08002f6c <HAL_RCC_OscConfig>:
{
 8002f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002f70:	4605      	mov	r5, r0
 8002f72:	b918      	cbnz	r0, 8002f7c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002f74:	2001      	movs	r0, #1
}
 8002f76:	b003      	add	sp, #12
 8002f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7c:	4ca7      	ldr	r4, [pc, #668]	; (800321c <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f7e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f80:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f82:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f84:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f86:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f8a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f8e:	d53d      	bpl.n	800300c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f90:	b11e      	cbz	r6, 8002f9a <HAL_RCC_OscConfig+0x2e>
 8002f92:	2e0c      	cmp	r6, #12
 8002f94:	d166      	bne.n	8003064 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f96:	2f01      	cmp	r7, #1
 8002f98:	d164      	bne.n	8003064 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	0799      	lsls	r1, r3, #30
 8002f9e:	d502      	bpl.n	8002fa6 <HAL_RCC_OscConfig+0x3a>
 8002fa0:	69ab      	ldr	r3, [r5, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0e6      	beq.n	8002f74 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	6a28      	ldr	r0, [r5, #32]
 8002faa:	071a      	lsls	r2, r3, #28
 8002fac:	bf56      	itet	pl
 8002fae:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002fb2:	6823      	ldrmi	r3, [r4, #0]
 8002fb4:	091b      	lsrpl	r3, r3, #4
 8002fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fba:	4298      	cmp	r0, r3
 8002fbc:	d93b      	bls.n	8003036 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fbe:	f7ff ff45 	bl	8002e4c <RCC_SetFlashLatencyFromMSIRange>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d1d6      	bne.n	8002f74 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	f043 0308 	orr.w	r3, r3, #8
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	6a2a      	ldr	r2, [r5, #32]
 8002fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fda:	6863      	ldr	r3, [r4, #4]
 8002fdc:	69ea      	ldr	r2, [r5, #28]
 8002fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002fe6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fe8:	f7ff ff72 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002fec:	68a3      	ldr	r3, [r4, #8]
 8002fee:	4a8c      	ldr	r2, [pc, #560]	; (8003220 <HAL_RCC_OscConfig+0x2b4>)
 8002ff0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ff4:	5cd3      	ldrb	r3, [r2, r3]
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	40d8      	lsrs	r0, r3
 8002ffc:	4b89      	ldr	r3, [pc, #548]	; (8003224 <HAL_RCC_OscConfig+0x2b8>)
 8002ffe:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003000:	4b89      	ldr	r3, [pc, #548]	; (8003228 <HAL_RCC_OscConfig+0x2bc>)
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	f7ff fa2e 	bl	8002464 <HAL_InitTick>
        if(status != HAL_OK)
 8003008:	2800      	cmp	r0, #0
 800300a:	d1b4      	bne.n	8002f76 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	07d9      	lsls	r1, r3, #31
 8003010:	d45f      	bmi.n	80030d2 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	079a      	lsls	r2, r3, #30
 8003016:	f100 809e 	bmi.w	8003156 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301a:	682b      	ldr	r3, [r5, #0]
 800301c:	0719      	lsls	r1, r3, #28
 800301e:	f100 80d2 	bmi.w	80031c6 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003022:	682b      	ldr	r3, [r5, #0]
 8003024:	075a      	lsls	r2, r3, #29
 8003026:	f100 8101 	bmi.w	800322c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800302a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	f040 816a 	bne.w	8003306 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003032:	2000      	movs	r0, #0
 8003034:	e79f      	b.n	8002f76 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	f043 0308 	orr.w	r3, r3, #8
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003044:	4303      	orrs	r3, r0
 8003046:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003048:	6863      	ldr	r3, [r4, #4]
 800304a:	69ea      	ldr	r2, [r5, #28]
 800304c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003050:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003054:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003056:	2e00      	cmp	r6, #0
 8003058:	d1c6      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800305a:	f7ff fef7 	bl	8002e4c <RCC_SetFlashLatencyFromMSIRange>
 800305e:	2800      	cmp	r0, #0
 8003060:	d0c2      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x7c>
 8003062:	e787      	b.n	8002f74 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003064:	69ab      	ldr	r3, [r5, #24]
 8003066:	b31b      	cbz	r3, 80030b0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003070:	f7ff fb4e 	bl	8002710 <HAL_GetTick>
 8003074:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	079b      	lsls	r3, r3, #30
 800307a:	d511      	bpl.n	80030a0 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	6023      	str	r3, [r4, #0]
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	6a2a      	ldr	r2, [r5, #32]
 8003088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800308c:	4313      	orrs	r3, r2
 800308e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003090:	6863      	ldr	r3, [r4, #4]
 8003092:	69ea      	ldr	r2, [r5, #28]
 8003094:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003098:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800309c:	6063      	str	r3, [r4, #4]
 800309e:	e7b5      	b.n	800300c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a0:	f7ff fb36 	bl	8002710 <HAL_GetTick>
 80030a4:	eba0 0008 	sub.w	r0, r0, r8
 80030a8:	2802      	cmp	r0, #2
 80030aa:	d9e4      	bls.n	8003076 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80030ac:	2003      	movs	r0, #3
 80030ae:	e762      	b.n	8002f76 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80030b8:	f7ff fb2a 	bl	8002710 <HAL_GetTick>
 80030bc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	0798      	lsls	r0, r3, #30
 80030c2:	d5a3      	bpl.n	800300c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c4:	f7ff fb24 	bl	8002710 <HAL_GetTick>
 80030c8:	eba0 0008 	sub.w	r0, r0, r8
 80030cc:	2802      	cmp	r0, #2
 80030ce:	d9f6      	bls.n	80030be <HAL_RCC_OscConfig+0x152>
 80030d0:	e7ec      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030d2:	2e08      	cmp	r6, #8
 80030d4:	d003      	beq.n	80030de <HAL_RCC_OscConfig+0x172>
 80030d6:	2e0c      	cmp	r6, #12
 80030d8:	d108      	bne.n	80030ec <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030da:	2f03      	cmp	r7, #3
 80030dc:	d106      	bne.n	80030ec <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	039b      	lsls	r3, r3, #14
 80030e2:	d596      	bpl.n	8003012 <HAL_RCC_OscConfig+0xa6>
 80030e4:	686b      	ldr	r3, [r5, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d193      	bne.n	8003012 <HAL_RCC_OscConfig+0xa6>
 80030ea:	e743      	b.n	8002f74 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ec:	686b      	ldr	r3, [r5, #4]
 80030ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f2:	d110      	bne.n	8003116 <HAL_RCC_OscConfig+0x1aa>
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80030fc:	f7ff fb08 	bl	8002710 <HAL_GetTick>
 8003100:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	0398      	lsls	r0, r3, #14
 8003106:	d484      	bmi.n	8003012 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7ff fb02 	bl	8002710 <HAL_GetTick>
 800310c:	eba0 0008 	sub.w	r0, r0, r8
 8003110:	2864      	cmp	r0, #100	; 0x64
 8003112:	d9f6      	bls.n	8003102 <HAL_RCC_OscConfig+0x196>
 8003114:	e7ca      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311a:	d104      	bne.n	8003126 <HAL_RCC_OscConfig+0x1ba>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003122:	6023      	str	r3, [r4, #0]
 8003124:	e7e6      	b.n	80030f4 <HAL_RCC_OscConfig+0x188>
 8003126:	6822      	ldr	r2, [r4, #0]
 8003128:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800312c:	6022      	str	r2, [r4, #0]
 800312e:	6822      	ldr	r2, [r4, #0]
 8003130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003134:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e0      	bne.n	80030fc <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 800313a:	f7ff fae9 	bl	8002710 <HAL_GetTick>
 800313e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	0399      	lsls	r1, r3, #14
 8003144:	f57f af65 	bpl.w	8003012 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7ff fae2 	bl	8002710 <HAL_GetTick>
 800314c:	eba0 0008 	sub.w	r0, r0, r8
 8003150:	2864      	cmp	r0, #100	; 0x64
 8003152:	d9f5      	bls.n	8003140 <HAL_RCC_OscConfig+0x1d4>
 8003154:	e7aa      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003156:	2e04      	cmp	r6, #4
 8003158:	d003      	beq.n	8003162 <HAL_RCC_OscConfig+0x1f6>
 800315a:	2e0c      	cmp	r6, #12
 800315c:	d110      	bne.n	8003180 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800315e:	2f02      	cmp	r7, #2
 8003160:	d10e      	bne.n	8003180 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	055a      	lsls	r2, r3, #21
 8003166:	d503      	bpl.n	8003170 <HAL_RCC_OscConfig+0x204>
 8003168:	68eb      	ldr	r3, [r5, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f43f af02 	beq.w	8002f74 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003170:	6863      	ldr	r3, [r4, #4]
 8003172:	692a      	ldr	r2, [r5, #16]
 8003174:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003178:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800317c:	6063      	str	r3, [r4, #4]
 800317e:	e74c      	b.n	800301a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003180:	68eb      	ldr	r3, [r5, #12]
 8003182:	b17b      	cbz	r3, 80031a4 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800318c:	f7ff fac0 	bl	8002710 <HAL_GetTick>
 8003190:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	055b      	lsls	r3, r3, #21
 8003196:	d4eb      	bmi.n	8003170 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003198:	f7ff faba 	bl	8002710 <HAL_GetTick>
 800319c:	1bc0      	subs	r0, r0, r7
 800319e:	2802      	cmp	r0, #2
 80031a0:	d9f7      	bls.n	8003192 <HAL_RCC_OscConfig+0x226>
 80031a2:	e783      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80031ac:	f7ff fab0 	bl	8002710 <HAL_GetTick>
 80031b0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	0558      	lsls	r0, r3, #21
 80031b6:	f57f af30 	bpl.w	800301a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ba:	f7ff faa9 	bl	8002710 <HAL_GetTick>
 80031be:	1bc0      	subs	r0, r0, r7
 80031c0:	2802      	cmp	r0, #2
 80031c2:	d9f6      	bls.n	80031b2 <HAL_RCC_OscConfig+0x246>
 80031c4:	e772      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c6:	696b      	ldr	r3, [r5, #20]
 80031c8:	b19b      	cbz	r3, 80031f2 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 80031ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80031d6:	f7ff fa9b 	bl	8002710 <HAL_GetTick>
 80031da:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031dc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80031e0:	079b      	lsls	r3, r3, #30
 80031e2:	f53f af1e 	bmi.w	8003022 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e6:	f7ff fa93 	bl	8002710 <HAL_GetTick>
 80031ea:	1bc0      	subs	r0, r0, r7
 80031ec:	2802      	cmp	r0, #2
 80031ee:	d9f5      	bls.n	80031dc <HAL_RCC_OscConfig+0x270>
 80031f0:	e75c      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 80031f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80031fe:	f7ff fa87 	bl	8002710 <HAL_GetTick>
 8003202:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003204:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003208:	0798      	lsls	r0, r3, #30
 800320a:	f57f af0a 	bpl.w	8003022 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320e:	f7ff fa7f 	bl	8002710 <HAL_GetTick>
 8003212:	1bc0      	subs	r0, r0, r7
 8003214:	2802      	cmp	r0, #2
 8003216:	d9f5      	bls.n	8003204 <HAL_RCC_OscConfig+0x298>
 8003218:	e748      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	080038e0 	.word	0x080038e0
 8003224:	20000004 	.word	0x20000004
 8003228:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800322c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800322e:	00d9      	lsls	r1, r3, #3
 8003230:	d429      	bmi.n	8003286 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	65a3      	str	r3, [r4, #88]	; 0x58
 800323a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003244:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003248:	4f89      	ldr	r7, [pc, #548]	; (8003470 <HAL_RCC_OscConfig+0x504>)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	05da      	lsls	r2, r3, #23
 800324e:	d51d      	bpl.n	800328c <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003250:	68ab      	ldr	r3, [r5, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d12b      	bne.n	80032ae <HAL_RCC_OscConfig+0x342>
 8003256:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003262:	f7ff fa55 	bl	8002710 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800326a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003270:	0798      	lsls	r0, r3, #30
 8003272:	d542      	bpl.n	80032fa <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8003274:	f1b8 0f00 	cmp.w	r8, #0
 8003278:	f43f aed7 	beq.w	800302a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 800327c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003282:	65a3      	str	r3, [r4, #88]	; 0x58
 8003284:	e6d1      	b.n	800302a <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8003286:	f04f 0800 	mov.w	r8, #0
 800328a:	e7dd      	b.n	8003248 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003292:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003294:	f7ff fa3c 	bl	8002710 <HAL_GetTick>
 8003298:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	05db      	lsls	r3, r3, #23
 800329e:	d4d7      	bmi.n	8003250 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7ff fa36 	bl	8002710 <HAL_GetTick>
 80032a4:	eba0 0009 	sub.w	r0, r0, r9
 80032a8:	2802      	cmp	r0, #2
 80032aa:	d9f6      	bls.n	800329a <HAL_RCC_OscConfig+0x32e>
 80032ac:	e6fe      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d106      	bne.n	80032c0 <HAL_RCC_OscConfig+0x354>
 80032b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80032b6:	f043 0304 	orr.w	r3, r3, #4
 80032ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80032be:	e7ca      	b.n	8003256 <HAL_RCC_OscConfig+0x2ea>
 80032c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80032c4:	f022 0201 	bic.w	r2, r2, #1
 80032c8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80032cc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80032d0:	f022 0204 	bic.w	r2, r2, #4
 80032d4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1c2      	bne.n	8003262 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 80032dc:	f7ff fa18 	bl	8002710 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80032e4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80032ea:	0799      	lsls	r1, r3, #30
 80032ec:	d5c2      	bpl.n	8003274 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7ff fa0f 	bl	8002710 <HAL_GetTick>
 80032f2:	1bc0      	subs	r0, r0, r7
 80032f4:	4548      	cmp	r0, r9
 80032f6:	d9f6      	bls.n	80032e6 <HAL_RCC_OscConfig+0x37a>
 80032f8:	e6d8      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7ff fa09 	bl	8002710 <HAL_GetTick>
 80032fe:	1bc0      	subs	r0, r0, r7
 8003300:	4548      	cmp	r0, r9
 8003302:	d9b3      	bls.n	800326c <HAL_RCC_OscConfig+0x300>
 8003304:	e6d2      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003306:	2b02      	cmp	r3, #2
 8003308:	f040 808f 	bne.w	800342a <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 800330c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003310:	f003 0103 	and.w	r1, r3, #3
 8003314:	4291      	cmp	r1, r2
 8003316:	d124      	bne.n	8003362 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003318:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800331a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800331e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003320:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003324:	d11d      	bne.n	8003362 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003326:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003328:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800332c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003330:	d117      	bne.n	8003362 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003332:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003334:	3a07      	subs	r2, #7
 8003336:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800333a:	bf18      	it	ne
 800333c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800333e:	4291      	cmp	r1, r2
 8003340:	d10f      	bne.n	8003362 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003342:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003344:	0852      	lsrs	r2, r2, #1
 8003346:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800334a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800334c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003350:	d107      	bne.n	8003362 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003352:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003354:	0852      	lsrs	r2, r2, #1
 8003356:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800335a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003360:	d04a      	beq.n	80033f8 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003362:	2e0c      	cmp	r6, #12
 8003364:	f43f ae06 	beq.w	8002f74 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	f53f ae02 	bmi.w	8002f74 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	f53f adfe 	bmi.w	8002f74 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800337e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8003380:	f7ff f9c6 	bl	8002710 <HAL_GetTick>
 8003384:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	019f      	lsls	r7, r3, #6
 800338a:	d42f      	bmi.n	80033ec <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338c:	68e2      	ldr	r2, [r4, #12]
 800338e:	4b39      	ldr	r3, [pc, #228]	; (8003474 <HAL_RCC_OscConfig+0x508>)
 8003390:	4013      	ands	r3, r2
 8003392:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003394:	4313      	orrs	r3, r2
 8003396:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003398:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800339c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800339e:	3a01      	subs	r2, #1
 80033a0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80033a4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80033a6:	0912      	lsrs	r2, r2, #4
 80033a8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80033ac:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80033ae:	0852      	lsrs	r2, r2, #1
 80033b0:	3a01      	subs	r2, #1
 80033b2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80033b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80033b8:	0852      	lsrs	r2, r2, #1
 80033ba:	3a01      	subs	r2, #1
 80033bc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80033c0:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c8:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033ca:	68e3      	ldr	r3, [r4, #12]
 80033cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d0:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80033d2:	f7ff f99d 	bl	8002710 <HAL_GetTick>
 80033d6:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	0198      	lsls	r0, r3, #6
 80033dc:	f53f ae29 	bmi.w	8003032 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7ff f996 	bl	8002710 <HAL_GetTick>
 80033e4:	1b40      	subs	r0, r0, r5
 80033e6:	2802      	cmp	r0, #2
 80033e8:	d9f6      	bls.n	80033d8 <HAL_RCC_OscConfig+0x46c>
 80033ea:	e65f      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7ff f990 	bl	8002710 <HAL_GetTick>
 80033f0:	1b80      	subs	r0, r0, r6
 80033f2:	2802      	cmp	r0, #2
 80033f4:	d9c7      	bls.n	8003386 <HAL_RCC_OscConfig+0x41a>
 80033f6:	e659      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	0199      	lsls	r1, r3, #6
 80033fc:	f53f ae19 	bmi.w	8003032 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003406:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003408:	68e3      	ldr	r3, [r4, #12]
 800340a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8003410:	f7ff f97e 	bl	8002710 <HAL_GetTick>
 8003414:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	019a      	lsls	r2, r3, #6
 800341a:	f53f ae0a 	bmi.w	8003032 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341e:	f7ff f977 	bl	8002710 <HAL_GetTick>
 8003422:	1b40      	subs	r0, r0, r5
 8003424:	2802      	cmp	r0, #2
 8003426:	d9f6      	bls.n	8003416 <HAL_RCC_OscConfig+0x4aa>
 8003428:	e640      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800342a:	2e0c      	cmp	r6, #12
 800342c:	f43f ada2 	beq.w	8002f74 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003436:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800343e:	bf02      	ittt	eq
 8003440:	68e3      	ldreq	r3, [r4, #12]
 8003442:	f023 0303 	biceq.w	r3, r3, #3
 8003446:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003448:	68e3      	ldr	r3, [r4, #12]
 800344a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800344e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003452:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003454:	f7ff f95c 	bl	8002710 <HAL_GetTick>
 8003458:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	019b      	lsls	r3, r3, #6
 800345e:	f57f ade8 	bpl.w	8003032 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003462:	f7ff f955 	bl	8002710 <HAL_GetTick>
 8003466:	1b40      	subs	r0, r0, r5
 8003468:	2802      	cmp	r0, #2
 800346a:	d9f6      	bls.n	800345a <HAL_RCC_OscConfig+0x4ee>
 800346c:	e61e      	b.n	80030ac <HAL_RCC_OscConfig+0x140>
 800346e:	bf00      	nop
 8003470:	40007000 	.word	0x40007000
 8003474:	f99d808c 	.word	0xf99d808c

08003478 <HAL_RCC_ClockConfig>:
{
 8003478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800347c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800347e:	4604      	mov	r4, r0
 8003480:	b910      	cbnz	r0, 8003488 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003482:	2001      	movs	r0, #1
}
 8003484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4a40      	ldr	r2, [pc, #256]	; (800358c <HAL_RCC_ClockConfig+0x114>)
 800348a:	6813      	ldr	r3, [r2, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	428b      	cmp	r3, r1
 8003492:	d32a      	bcc.n	80034ea <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	07d9      	lsls	r1, r3, #31
 8003498:	d432      	bmi.n	8003500 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349a:	6821      	ldr	r1, [r4, #0]
 800349c:	078a      	lsls	r2, r1, #30
 800349e:	d45b      	bmi.n	8003558 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a0:	4a3a      	ldr	r2, [pc, #232]	; (800358c <HAL_RCC_ClockConfig+0x114>)
 80034a2:	6813      	ldr	r3, [r2, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	42ab      	cmp	r3, r5
 80034aa:	d85d      	bhi.n	8003568 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	f011 0f04 	tst.w	r1, #4
 80034b0:	4d37      	ldr	r5, [pc, #220]	; (8003590 <HAL_RCC_ClockConfig+0x118>)
 80034b2:	d164      	bne.n	800357e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b4:	070b      	lsls	r3, r1, #28
 80034b6:	d506      	bpl.n	80034c6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b8:	68ab      	ldr	r3, [r5, #8]
 80034ba:	6922      	ldr	r2, [r4, #16]
 80034bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80034c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80034c4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c6:	f7ff fd03 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 80034ca:	68ab      	ldr	r3, [r5, #8]
 80034cc:	4a31      	ldr	r2, [pc, #196]	; (8003594 <HAL_RCC_ClockConfig+0x11c>)
 80034ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80034d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034d6:	5cd3      	ldrb	r3, [r2, r3]
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	40d8      	lsrs	r0, r3
 80034de:	4b2e      	ldr	r3, [pc, #184]	; (8003598 <HAL_RCC_ClockConfig+0x120>)
 80034e0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80034e2:	4b2e      	ldr	r3, [pc, #184]	; (800359c <HAL_RCC_ClockConfig+0x124>)
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	f7fe bfbd 	b.w	8002464 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	6813      	ldr	r3, [r2, #0]
 80034ec:	f023 0307 	bic.w	r3, r3, #7
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f4:	6813      	ldr	r3, [r2, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	428b      	cmp	r3, r1
 80034fc:	d1c1      	bne.n	8003482 <HAL_RCC_ClockConfig+0xa>
 80034fe:	e7c9      	b.n	8003494 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003500:	6862      	ldr	r2, [r4, #4]
 8003502:	4e23      	ldr	r6, [pc, #140]	; (8003590 <HAL_RCC_ClockConfig+0x118>)
 8003504:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003506:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003508:	d11a      	bne.n	8003540 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350e:	d0b8      	beq.n	8003482 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003510:	68b3      	ldr	r3, [r6, #8]
 8003512:	f023 0303 	bic.w	r3, r3, #3
 8003516:	4313      	orrs	r3, r2
 8003518:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800351a:	f7ff f8f9 	bl	8002710 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003522:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003524:	68b3      	ldr	r3, [r6, #8]
 8003526:	6862      	ldr	r2, [r4, #4]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003530:	d0b3      	beq.n	800349a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003532:	f7ff f8ed 	bl	8002710 <HAL_GetTick>
 8003536:	1bc0      	subs	r0, r0, r7
 8003538:	4540      	cmp	r0, r8
 800353a:	d9f3      	bls.n	8003524 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 800353c:	2003      	movs	r0, #3
 800353e:	e7a1      	b.n	8003484 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003540:	2a02      	cmp	r2, #2
 8003542:	d102      	bne.n	800354a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003544:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003548:	e7e1      	b.n	800350e <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800354a:	b912      	cbnz	r2, 8003552 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800354c:	f013 0f02 	tst.w	r3, #2
 8003550:	e7dd      	b.n	800350e <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003552:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003556:	e7da      	b.n	800350e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4a0d      	ldr	r2, [pc, #52]	; (8003590 <HAL_RCC_ClockConfig+0x118>)
 800355a:	68a0      	ldr	r0, [r4, #8]
 800355c:	6893      	ldr	r3, [r2, #8]
 800355e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003562:	4303      	orrs	r3, r0
 8003564:	6093      	str	r3, [r2, #8]
 8003566:	e79b      	b.n	80034a0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003568:	6813      	ldr	r3, [r2, #0]
 800356a:	f023 0307 	bic.w	r3, r3, #7
 800356e:	432b      	orrs	r3, r5
 8003570:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	42ab      	cmp	r3, r5
 800357a:	d182      	bne.n	8003482 <HAL_RCC_ClockConfig+0xa>
 800357c:	e796      	b.n	80034ac <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357e:	68ab      	ldr	r3, [r5, #8]
 8003580:	68e2      	ldr	r2, [r4, #12]
 8003582:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003586:	4313      	orrs	r3, r2
 8003588:	60ab      	str	r3, [r5, #8]
 800358a:	e793      	b.n	80034b4 <HAL_RCC_ClockConfig+0x3c>
 800358c:	40022000 	.word	0x40022000
 8003590:	40021000 	.word	0x40021000
 8003594:	080038e0 	.word	0x080038e0
 8003598:	20000004 	.word	0x20000004
 800359c:	20000020 	.word	0x20000020

080035a0 <HAL_RTC_MspInit>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 80035a0:	4770      	bx	lr

080035a2 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80035a2:	6802      	ldr	r2, [r0, #0]
{
 80035a4:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80035a6:	68d3      	ldr	r3, [r2, #12]
 80035a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035ac:	60d3      	str	r3, [r2, #12]
{
 80035ae:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 80035b0:	f7ff f8ae 	bl	8002710 <HAL_GetTick>
 80035b4:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	069b      	lsls	r3, r3, #26
 80035bc:	d501      	bpl.n	80035c2 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80035be:	2000      	movs	r0, #0
}
 80035c0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035c2:	f7ff f8a5 	bl	8002710 <HAL_GetTick>
 80035c6:	1b40      	subs	r0, r0, r5
 80035c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80035cc:	d9f3      	bls.n	80035b6 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80035ce:	2003      	movs	r0, #3
 80035d0:	e7f6      	b.n	80035c0 <HAL_RTC_WaitForSynchro+0x1e>

080035d2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80035d4:	6803      	ldr	r3, [r0, #0]
 80035d6:	68dc      	ldr	r4, [r3, #12]
 80035d8:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 80035dc:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80035de:	d118      	bne.n	8003612 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80035e6:	f7ff f893 	bl	8002710 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035ea:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 80035ec:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80035ee:	682b      	ldr	r3, [r5, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	065b      	lsls	r3, r3, #25
 80035f4:	d401      	bmi.n	80035fa <RTC_EnterInitMode+0x28>
 80035f6:	2c03      	cmp	r4, #3
 80035f8:	d101      	bne.n	80035fe <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 80035fa:	4620      	mov	r0, r4
 80035fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80035fe:	f7ff f887 	bl	8002710 <HAL_GetTick>
 8003602:	1b80      	subs	r0, r0, r6
 8003604:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003608:	bf84      	itt	hi
 800360a:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 800360e:	2403      	movhi	r4, #3
 8003610:	e7ed      	b.n	80035ee <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8003612:	2400      	movs	r4, #0
 8003614:	e7f1      	b.n	80035fa <RTC_EnterInitMode+0x28>
	...

08003618 <RTC_ExitInitMode>:
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <RTC_ExitInitMode+0x44>)
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 8003620:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003622:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	0692      	lsls	r2, r2, #26
{
 8003628:	4604      	mov	r4, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800362a:	d406      	bmi.n	800363a <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800362c:	f7ff ffb9 	bl	80035a2 <HAL_RTC_WaitForSynchro>
 8003630:	b110      	cbz	r0, 8003638 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003632:	2003      	movs	r0, #3
 8003634:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8003638:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	f022 0220 	bic.w	r2, r2, #32
 8003640:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003642:	f7ff ffae 	bl	80035a2 <HAL_RTC_WaitForSynchro>
 8003646:	b110      	cbz	r0, 800364e <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003648:	2003      	movs	r0, #3
 800364a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800364e:	4a03      	ldr	r2, [pc, #12]	; (800365c <RTC_ExitInitMode+0x44>)
 8003650:	6893      	ldr	r3, [r2, #8]
 8003652:	f043 0320 	orr.w	r3, r3, #32
 8003656:	6093      	str	r3, [r2, #8]
  return status;
 8003658:	e7ee      	b.n	8003638 <RTC_ExitInitMode+0x20>
 800365a:	bf00      	nop
 800365c:	40002800 	.word	0x40002800

08003660 <HAL_RTC_Init>:
{
 8003660:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8003662:	4604      	mov	r4, r0
 8003664:	2800      	cmp	r0, #0
 8003666:	d03f      	beq.n	80036e8 <HAL_RTC_Init+0x88>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003668:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800366c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003670:	b91b      	cbnz	r3, 800367a <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8003672:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8003676:	f7ff ff93 	bl	80035a0 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800367a:	2302      	movs	r3, #2
 800367c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	22ca      	movs	r2, #202	; 0xca
 8003684:	625a      	str	r2, [r3, #36]	; 0x24
 8003686:	2253      	movs	r2, #83	; 0x53
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800368a:	4620      	mov	r0, r4
 800368c:	f7ff ffa1 	bl	80035d2 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8003690:	bb48      	cbnz	r0, 80036e6 <HAL_RTC_Init+0x86>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003692:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003694:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800369c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a0:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	6899      	ldr	r1, [r3, #8]
 80036a6:	4302      	orrs	r2, r0
 80036a8:	69a0      	ldr	r0, [r4, #24]
 80036aa:	4302      	orrs	r2, r0
 80036ac:	430a      	orrs	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80036b0:	68e2      	ldr	r2, [r4, #12]
 80036b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68a1      	ldr	r1, [r4, #8]
 80036b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036bc:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80036be:	4620      	mov	r0, r4
 80036c0:	f7ff ffaa 	bl	8003618 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80036c4:	b978      	cbnz	r0, 80036e6 <HAL_RTC_Init+0x86>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80036c6:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80036c8:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80036ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036cc:	f022 0203 	bic.w	r2, r2, #3
 80036d0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80036d2:	69e2      	ldr	r2, [r4, #28]
 80036d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80036d6:	432a      	orrs	r2, r5
 80036d8:	430a      	orrs	r2, r1
 80036da:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 80036e8:	2001      	movs	r0, #1
 80036ea:	e7fc      	b.n	80036e6 <HAL_RTC_Init+0x86>

080036ec <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036ec:	f890 3020 	ldrb.w	r3, [r0, #32]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f04f 0302 	mov.w	r3, #2
 80036f6:	d012      	beq.n	800371e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036f8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036fc:	6803      	ldr	r3, [r0, #0]
 80036fe:	22ca      	movs	r2, #202	; 0xca
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
 8003702:	2253      	movs	r2, #83	; 0x53
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	f042 0220 	orr.w	r2, r2, #32
 800370c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800370e:	22ff      	movs	r2, #255	; 0xff
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003712:	2301      	movs	r3, #1
 8003714:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003718:	2300      	movs	r3, #0
 800371a:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 800371e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003720:	4770      	bx	lr

08003722 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003722:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003724:	4604      	mov	r4, r0
 8003726:	2800      	cmp	r0, #0
 8003728:	d05f      	beq.n	80037ea <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800372a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	d158      	bne.n	80037e2 <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003730:	6842      	ldr	r2, [r0, #4]
 8003732:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003736:	d000      	beq.n	800373a <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003738:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373a:	2300      	movs	r3, #0
 800373c:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800373e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003742:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003746:	b923      	cbnz	r3, 8003752 <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003748:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800374c:	4620      	mov	r0, r4
 800374e:	f7fd fabd 	bl	8000ccc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003752:	6825      	ldr	r5, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003754:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003756:	2302      	movs	r3, #2
 8003758:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800375c:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800375e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003766:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	d83f      	bhi.n	80037ee <HAL_SPI_Init+0xcc>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800376e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003772:	d000      	beq.n	8003776 <HAL_SPI_Init+0x54>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003774:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003776:	6863      	ldr	r3, [r4, #4]
 8003778:	68a6      	ldr	r6, [r4, #8]
 800377a:	69a2      	ldr	r2, [r4, #24]
 800377c:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8003780:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003784:	4333      	orrs	r3, r6
 8003786:	6926      	ldr	r6, [r4, #16]
 8003788:	f006 0602 	and.w	r6, r6, #2
 800378c:	4333      	orrs	r3, r6
 800378e:	6966      	ldr	r6, [r4, #20]
 8003790:	f006 0601 	and.w	r6, r6, #1
 8003794:	4333      	orrs	r3, r6
 8003796:	f402 7600 	and.w	r6, r2, #512	; 0x200
 800379a:	4333      	orrs	r3, r6
 800379c:	69e6      	ldr	r6, [r4, #28]
 800379e:	f006 0638 	and.w	r6, r6, #56	; 0x38
 80037a2:	4333      	orrs	r3, r6
 80037a4:	6a26      	ldr	r6, [r4, #32]
 80037a6:	f006 0680 	and.w	r6, r6, #128	; 0x80
 80037aa:	4333      	orrs	r3, r6
 80037ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037ae:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 80037b2:	4333      	orrs	r3, r6
 80037b4:	602b      	str	r3, [r5, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037b6:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80037b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037ba:	f006 0608 	and.w	r6, r6, #8
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	4333      	orrs	r3, r6
 80037c4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80037c8:	0c12      	lsrs	r2, r2, #16
 80037ca:	4319      	orrs	r1, r3
 80037cc:	f002 0204 	and.w	r2, r2, #4
 80037d0:	430a      	orrs	r2, r1
 80037d2:	4310      	orrs	r0, r2
 80037d4:	6068      	str	r0, [r5, #4]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80037d6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037d8:	2000      	movs	r0, #0
 80037da:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037dc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037e8:	e7a7      	b.n	800373a <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80037ea:	2001      	movs	r0, #1
 80037ec:	e7f8      	b.n	80037e0 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037ee:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037f0:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 80037f4:	e7bd      	b.n	8003772 <HAL_SPI_Init+0x50>
	...

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	4d0d      	ldr	r5, [pc, #52]	; (8003830 <__libc_init_array+0x38>)
 80037fc:	4c0d      	ldr	r4, [pc, #52]	; (8003834 <__libc_init_array+0x3c>)
 80037fe:	1b64      	subs	r4, r4, r5
 8003800:	10a4      	asrs	r4, r4, #2
 8003802:	2600      	movs	r6, #0
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	4d0b      	ldr	r5, [pc, #44]	; (8003838 <__libc_init_array+0x40>)
 800380a:	4c0c      	ldr	r4, [pc, #48]	; (800383c <__libc_init_array+0x44>)
 800380c:	f000 f82e 	bl	800386c <_init>
 8003810:	1b64      	subs	r4, r4, r5
 8003812:	10a4      	asrs	r4, r4, #2
 8003814:	2600      	movs	r6, #0
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	f855 3b04 	ldr.w	r3, [r5], #4
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	08003900 	.word	0x08003900
 8003834:	08003900 	.word	0x08003900
 8003838:	08003900 	.word	0x08003900
 800383c:	08003904 	.word	0x08003904

08003840 <memcpy>:
 8003840:	440a      	add	r2, r1
 8003842:	4291      	cmp	r1, r2
 8003844:	f100 33ff 	add.w	r3, r0, #4294967295
 8003848:	d100      	bne.n	800384c <memcpy+0xc>
 800384a:	4770      	bx	lr
 800384c:	b510      	push	{r4, lr}
 800384e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003856:	4291      	cmp	r1, r2
 8003858:	d1f9      	bne.n	800384e <memcpy+0xe>
 800385a:	bd10      	pop	{r4, pc}

0800385c <memset>:
 800385c:	4402      	add	r2, r0
 800385e:	4603      	mov	r3, r0
 8003860:	4293      	cmp	r3, r2
 8003862:	d100      	bne.n	8003866 <memset+0xa>
 8003864:	4770      	bx	lr
 8003866:	f803 1b01 	strb.w	r1, [r3], #1
 800386a:	e7f9      	b.n	8003860 <memset+0x4>

0800386c <_init>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	bf00      	nop
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr

08003878 <_fini>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr
 8003884:	0000      	movs	r0, r0
	...
