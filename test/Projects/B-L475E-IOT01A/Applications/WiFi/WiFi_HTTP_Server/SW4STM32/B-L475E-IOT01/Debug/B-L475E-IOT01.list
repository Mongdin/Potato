
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b80  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af0  08006af0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af8  08006af8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001294  200000a0  08006ba8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00016804  20001334  08006ba8  00021334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020fcc  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf6  00000000  00000000  0004109c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000feeb  00000000  00000000  00044c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00054b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015b8  00000000  00000000  00055bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab48  00000000  00000000  00057190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a272  00000000  00000000  00081cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001047c1  00000000  00000000  0009bf4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a070b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f18  00000000  00000000  001a0760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f54 	.word	0x08005f54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08005f54 	.word	0x08005f54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
{
 8000578:	b510      	push	{r4, lr}
 800057a:	b092      	sub	sp, #72	; 0x48
 800057c:	4604      	mov	r4, r0
 800057e:	9103      	str	r1, [sp, #12]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8000580:	4829      	ldr	r0, [pc, #164]	; (8000628 <SendWebPage+0xb0>)
 8000582:	492a      	ldr	r1, [pc, #168]	; (800062c <SendWebPage+0xb4>)
 8000584:	f004 fadf 	bl	8004b46 <strcpy>
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 8000588:	4929      	ldr	r1, [pc, #164]	; (8000630 <SendWebPage+0xb8>)
 800058a:	4827      	ldr	r0, [pc, #156]	; (8000628 <SendWebPage+0xb0>)
 800058c:	f004 facc 	bl	8004b28 <strcat>
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 8000590:	4928      	ldr	r1, [pc, #160]	; (8000634 <SendWebPage+0xbc>)
 8000592:	4825      	ldr	r0, [pc, #148]	; (8000628 <SendWebPage+0xb0>)
 8000594:	f004 fac8 	bl	8004b28 <strcat>
  strcat((char *)http, (char *)"<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
 8000598:	4927      	ldr	r1, [pc, #156]	; (8000638 <SendWebPage+0xc0>)
 800059a:	4823      	ldr	r0, [pc, #140]	; (8000628 <SendWebPage+0xb0>)
 800059c:	f004 fac4 	bl	8004b28 <strcat>
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 80005a0:	4926      	ldr	r1, [pc, #152]	; (800063c <SendWebPage+0xc4>)
 80005a2:	4821      	ldr	r0, [pc, #132]	; (8000628 <SendWebPage+0xb0>)
 80005a4:	f004 fac0 	bl	8004b28 <strcat>
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 80005a8:	4925      	ldr	r1, [pc, #148]	; (8000640 <SendWebPage+0xc8>)
 80005aa:	481f      	ldr	r0, [pc, #124]	; (8000628 <SendWebPage+0xb0>)
 80005ac:	f004 fabc 	bl	8004b28 <strcat>
  sprintf((char *)temp, "%d", temperature);
 80005b0:	9a03      	ldr	r2, [sp, #12]
 80005b2:	4924      	ldr	r1, [pc, #144]	; (8000644 <SendWebPage+0xcc>)
 80005b4:	a805      	add	r0, sp, #20
 80005b6:	f004 fa97 	bl	8004ae8 <siprintf>
  strcat((char *)http, (char *)temp);
 80005ba:	a905      	add	r1, sp, #20
 80005bc:	481a      	ldr	r0, [pc, #104]	; (8000628 <SendWebPage+0xb0>)
 80005be:	f004 fab3 	bl	8004b28 <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 80005c2:	4921      	ldr	r1, [pc, #132]	; (8000648 <SendWebPage+0xd0>)
 80005c4:	4818      	ldr	r0, [pc, #96]	; (8000628 <SendWebPage+0xb0>)
 80005c6:	f004 faaf 	bl	8004b28 <strcat>

  if (ledIsOn)
 80005ca:	b33c      	cbz	r4, 800061c <SendWebPage+0xa4>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 80005cc:	491f      	ldr	r1, [pc, #124]	; (800064c <SendWebPage+0xd4>)
 80005ce:	4816      	ldr	r0, [pc, #88]	; (8000628 <SendWebPage+0xb0>)
 80005d0:	f004 faaa 	bl	8004b28 <strcat>
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 80005d4:	491e      	ldr	r1, [pc, #120]	; (8000650 <SendWebPage+0xd8>)
  }
  else
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 80005d6:	4814      	ldr	r0, [pc, #80]	; (8000628 <SendWebPage+0xb0>)
 80005d8:	f004 faa6 	bl	8004b28 <strcat>
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 80005dc:	491d      	ldr	r1, [pc, #116]	; (8000654 <SendWebPage+0xdc>)
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <SendWebPage+0xb0>)
 80005e0:	f004 faa2 	bl	8004b28 <strcat>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 80005e4:	491c      	ldr	r1, [pc, #112]	; (8000658 <SendWebPage+0xe0>)
 80005e6:	4810      	ldr	r0, [pc, #64]	; (8000628 <SendWebPage+0xb0>)
 80005e8:	f004 fa9e 	bl	8004b28 <strcat>

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 80005ec:	480e      	ldr	r0, [pc, #56]	; (8000628 <SendWebPage+0xb0>)
 80005ee:	f7ff fdef 	bl	80001d0 <strlen>
 80005f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	b282      	uxth	r2, r0
 80005fa:	490b      	ldr	r1, [pc, #44]	; (8000628 <SendWebPage+0xb0>)
 80005fc:	f10d 0312 	add.w	r3, sp, #18
 8000600:	2000      	movs	r0, #0
 8000602:	f001 fa71 	bl	8001ae8 <WIFI_SendData>

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8000606:	b938      	cbnz	r0, 8000618 <SendWebPage+0xa0>
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <SendWebPage+0xb0>)
 800060a:	f7ff fde1 	bl	80001d0 <strlen>
 800060e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  {
    ret = WIFI_STATUS_ERROR;
 8000612:	1a18      	subs	r0, r3, r0
 8000614:	bf18      	it	ne
 8000616:	2001      	movne	r0, #1
  }

  return ret;
}
 8000618:	b012      	add	sp, #72	; 0x48
 800061a:	bd10      	pop	{r4, pc}
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 800061c:	490f      	ldr	r1, [pc, #60]	; (800065c <SendWebPage+0xe4>)
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <SendWebPage+0xb0>)
 8000620:	f004 fa82 	bl	8004b28 <strcat>
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 8000624:	490e      	ldr	r1, [pc, #56]	; (8000660 <SendWebPage+0xe8>)
 8000626:	e7d6      	b.n	80005d6 <SendWebPage+0x5e>
 8000628:	200000bc 	.word	0x200000bc
 800062c:	08005fc8 	.word	0x08005fc8
 8000630:	08006007 	.word	0x08006007
 8000634:	08006018 	.word	0x08006018
 8000638:	0800603a 	.word	0x0800603a
 800063c:	08006077 	.word	0x08006077
 8000640:	08006084 	.word	0x08006084
 8000644:	080060c4 	.word	0x080060c4
 8000648:	080060c7 	.word	0x080060c7
 800064c:	080060d8 	.word	0x080060d8
 8000650:	0800610f 	.word	0x0800610f
 8000654:	080061c2 	.word	0x080061c2
 8000658:	080061f2 	.word	0x080061f2
 800065c:	0800614d 	.word	0x0800614d
 8000660:	0800618b 	.word	0x0800618b

08000664 <main>:
{
 8000664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000668:	b09e      	sub	sp, #120	; 0x78
  HAL_Init();
 800066a:	f001 fce7 	bl	800203c <HAL_Init>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800066e:	2460      	movs	r4, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000670:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000672:	2200      	movs	r2, #0
 8000674:	e9cd 2414 	strd	r2, r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000678:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800067c:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800067e:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000682:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000684:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000686:	2328      	movs	r3, #40	; 0x28
 8000688:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068a:	2404      	movs	r4, #4
 800068c:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	a80d      	add	r0, sp, #52	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000690:	e9cd 341b 	strd	r3, r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000694:	921d      	str	r2, [sp, #116]	; 0x74
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f002 fa69 	bl	8002b6c <HAL_RCC_OscConfig>
 800069a:	b100      	cbz	r0, 800069e <main+0x3a>
  {
    /* Initialization Error */
    while(1);
 800069c:	e7fe      	b.n	800069c <main+0x38>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	210f      	movs	r1, #15
 80006a0:	2303      	movs	r3, #3
 80006a2:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a6:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	900c      	str	r0, [sp, #48]	; 0x30
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ac:	4621      	mov	r1, r4
 80006ae:	a808      	add	r0, sp, #32
 80006b0:	f002 fce2 	bl	8003078 <HAL_RCC_ClockConfig>
 80006b4:	4604      	mov	r4, r0
 80006b6:	b100      	cbz	r0, 80006ba <main+0x56>
  {
    /* Initialization Error */
    while(1);
 80006b8:	e7fe      	b.n	80006b8 <main+0x54>
  BSP_LED_Init(LED2);
 80006ba:	f001 faa3 	bl	8001c04 <BSP_LED_Init>
  hDiscoUart.Instance = DISCOVERY_COM1;
 80006be:	499f      	ldr	r1, [pc, #636]	; (800093c <main+0x2d8>)
  hDiscoUart.Init.BaudRate = 115200;
 80006c0:	4a9f      	ldr	r2, [pc, #636]	; (8000940 <main+0x2dc>)
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80006c2:	610c      	str	r4, [r1, #16]
  hDiscoUart.Init.BaudRate = 115200;
 80006c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006c8:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 80006cc:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80006ce:	230c      	movs	r3, #12
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80006d0:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d4:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d8:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 80006de:	f001 fac7 	bl	8001c70 <BSP_COM_Init>
  BSP_TSENSOR_Init();
 80006e2:	f001 fb55 	bl	8001d90 <BSP_TSENSOR_Init>
  printf("****** WIFI Web Server demonstration****** \n\n");
 80006e6:	4897      	ldr	r0, [pc, #604]	; (8000944 <main+0x2e0>)
 80006e8:	f004 f9f6 	bl	8004ad8 <puts>
  LOG(("\nRunning HTML Server test\n"));
 80006ec:	4896      	ldr	r0, [pc, #600]	; (8000948 <main+0x2e4>)
 80006ee:	f004 f9f3 	bl	8004ad8 <puts>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80006f2:	f001 f94f 	bl	8001994 <WIFI_Init>
 80006f6:	b9d0      	cbnz	r0, 800072e <main+0xca>
    LOG(("ES-WIFI Initialized.\n"));
 80006f8:	4894      	ldr	r0, [pc, #592]	; (800094c <main+0x2e8>)
 80006fa:	f004 f9ed 	bl	8004ad8 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80006fe:	a80d      	add	r0, sp, #52	; 0x34
 8000700:	f001 f980 	bl	8001a04 <WIFI_GetMAC_Address>
 8000704:	2800      	cmp	r0, #0
 8000706:	f040 80a0 	bne.w	800084a <main+0x1e6>
      LOG(("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
 800070a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8000720:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8000724:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8000728:	4889      	ldr	r0, [pc, #548]	; (8000950 <main+0x2ec>)
 800072a:	f004 f94f 	bl	80049cc <iprintf>
  LOG(("\nConnecting to %s , %s\n",SSID,PASSWORD));
 800072e:	4a89      	ldr	r2, [pc, #548]	; (8000954 <main+0x2f0>)
 8000730:	4989      	ldr	r1, [pc, #548]	; (8000958 <main+0x2f4>)
 8000732:	488a      	ldr	r0, [pc, #552]	; (800095c <main+0x2f8>)
 8000734:	f004 f94a 	bl	80049cc <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8000738:	4986      	ldr	r1, [pc, #536]	; (8000954 <main+0x2f0>)
 800073a:	4887      	ldr	r0, [pc, #540]	; (8000958 <main+0x2f4>)
 800073c:	2203      	movs	r2, #3
 800073e:	f001 f94d 	bl	80019dc <WIFI_Connect>
 8000742:	2800      	cmp	r0, #0
 8000744:	f040 808c 	bne.w	8000860 <main+0x1fc>
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8000748:	4e85      	ldr	r6, [pc, #532]	; (8000960 <main+0x2fc>)
 800074a:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800074e:	f001 f965 	bl	8001a1c <WIFI_GetIP_Address>
 8000752:	4604      	mov	r4, r0
 8000754:	2800      	cmp	r0, #0
 8000756:	d17c      	bne.n	8000852 <main+0x1ee>
      LOG(("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8000758:	f896 3403 	ldrb.w	r3, [r6, #1027]	; 0x403
 800075c:	f896 2401 	ldrb.w	r2, [r6, #1025]	; 0x401
 8000760:	f896 1400 	ldrb.w	r1, [r6, #1024]	; 0x400
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	487f      	ldr	r0, [pc, #508]	; (8000964 <main+0x300>)
 8000768:	f896 3402 	ldrb.w	r3, [r6, #1026]	; 0x402
 800076c:	f004 f92e 	bl	80049cc <iprintf>
  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8000770:	2350      	movs	r3, #80	; 0x50
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2201      	movs	r2, #1
 8000776:	4b7c      	ldr	r3, [pc, #496]	; (8000968 <main+0x304>)
 8000778:	4621      	mov	r1, r4
 800077a:	4620      	mov	r0, r4
 800077c:	f001 f95e 	bl	8001a3c <WIFI_StartServer>
 8000780:	b110      	cbz	r0, 8000788 <main+0x124>
    LOG(("ERROR: Cannot start server.\n"));
 8000782:	487a      	ldr	r0, [pc, #488]	; (800096c <main+0x308>)
 8000784:	f004 f9a8 	bl	8004ad8 <puts>
  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000788:	f896 3403 	ldrb.w	r3, [r6, #1027]	; 0x403
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	f896 2401 	ldrb.w	r2, [r6, #1025]	; 0x401
 8000792:	f896 3402 	ldrb.w	r3, [r6, #1026]	; 0x402
 8000796:	f896 1400 	ldrb.w	r1, [r6, #1024]	; 0x400
 800079a:	4875      	ldr	r0, [pc, #468]	; (8000970 <main+0x30c>)
    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 800079c:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80009c8 <main+0x364>
  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 80007a0:	4f74      	ldr	r7, [pc, #464]	; (8000974 <main+0x310>)
    LOG(("Client close connection\n"));
 80007a2:	f8df 9228 	ldr.w	r9, [pc, #552]	; 80009cc <main+0x368>
  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 80007a6:	f004 f911 	bl	80049cc <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 80007aa:	f10d 031e 	add.w	r3, sp, #30
 80007ae:	aa0d      	add	r2, sp, #52	; 0x34
 80007b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b4:	2000      	movs	r0, #0
 80007b6:	f001 f95b 	bl	8001a70 <WIFI_WaitServerConnection>
 80007ba:	4604      	mov	r4, r0
 80007bc:	2800      	cmp	r0, #0
 80007be:	d151      	bne.n	8000864 <main+0x200>
    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 80007c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80007ca:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 80007ce:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	4640      	mov	r0, r8
 80007d6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80007da:	f004 f8f7 	bl	80049cc <iprintf>
  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 80007de:	f242 7310 	movw	r3, #10000	; 0x2710
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e8:	ab08      	add	r3, sp, #32
 80007ea:	4639      	mov	r1, r7
 80007ec:	4620      	mov	r0, r4
 80007ee:	f001 f98d 	bl	8001b0c <WIFI_ReceiveData>
 80007f2:	4682      	mov	sl, r0
 80007f4:	2800      	cmp	r0, #0
 80007f6:	f040 8093 	bne.w	8000920 <main+0x2bc>
   LOG(("get %d byte from server\n",respLen));
 80007fa:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80007fe:	485e      	ldr	r0, [pc, #376]	; (8000978 <main+0x314>)
 8000800:	f004 f8e4 	bl	80049cc <iprintf>
   if( respLen > 0)
 8000804:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8000808:	b1c4      	cbz	r4, 800083c <main+0x1d8>
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 800080a:	495c      	ldr	r1, [pc, #368]	; (800097c <main+0x318>)
 800080c:	4638      	mov	r0, r7
 800080e:	f004 f9c7 	bl	8004ba0 <strstr>
 8000812:	4605      	mov	r5, r0
 8000814:	2800      	cmp	r0, #0
 8000816:	d036      	beq.n	8000886 <main+0x222>
        temp = (int) BSP_TSENSOR_ReadTemp();
 8000818:	f001 facc 	bl	8001db4 <BSP_TSENSOR_ReadTemp>
 800081c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8000820:	f896 0804 	ldrb.w	r0, [r6, #2052]	; 0x804
        temp = (int) BSP_TSENSOR_ReadTemp();
 8000824:	edcd 7a05 	vstr	s15, [sp, #20]
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8000828:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800082c:	f7ff fea4 	bl	8000578 <SendWebPage>
 8000830:	4604      	mov	r4, r0
 8000832:	b320      	cbz	r0, 800087e <main+0x21a>
          LOG(("> ERROR : Cannot send web page\n"));
 8000834:	4852      	ldr	r0, [pc, #328]	; (8000980 <main+0x31c>)
 8000836:	f004 f94f 	bl	8004ad8 <puts>
  bool    stopserver=false;
 800083a:	4654      	mov	r4, sl
    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 800083c:	2000      	movs	r0, #0
 800083e:	f001 f93b 	bl	8001ab8 <WIFI_CloseServerConnection>
 8000842:	2800      	cmp	r0, #0
 8000844:	d06e      	beq.n	8000924 <main+0x2c0>
      LOG(("ERROR: failed to close current Server connection\n"));
 8000846:	484f      	ldr	r0, [pc, #316]	; (8000984 <main+0x320>)
 8000848:	e004      	b.n	8000854 <main+0x1f0>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 800084a:	484f      	ldr	r0, [pc, #316]	; (8000988 <main+0x324>)
 800084c:	f004 f944 	bl	8004ad8 <puts>
      return -1;
 8000850:	e76d      	b.n	800072e <main+0xca>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 8000852:	484e      	ldr	r0, [pc, #312]	; (800098c <main+0x328>)
  LOG(("Server is stop\n"));
 8000854:	f004 f940 	bl	8004ad8 <puts>
}
 8000858:	2000      	movs	r0, #0
 800085a:	b01e      	add	sp, #120	; 0x78
 800085c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 LOG(("ERROR : es-wifi module NOT connected\n"));
 8000860:	484b      	ldr	r0, [pc, #300]	; (8000990 <main+0x32c>)
 8000862:	e7f7      	b.n	8000854 <main+0x1f0>
        LOG(("Waiting connection to  %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000864:	f896 3403 	ldrb.w	r3, [r6, #1027]	; 0x403
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f896 2401 	ldrb.w	r2, [r6, #1025]	; 0x401
 800086e:	f896 3402 	ldrb.w	r3, [r6, #1026]	; 0x402
 8000872:	f896 1400 	ldrb.w	r1, [r6, #1024]	; 0x400
 8000876:	4847      	ldr	r0, [pc, #284]	; (8000994 <main+0x330>)
 8000878:	f004 f8a8 	bl	80049cc <iprintf>
 800087c:	e795      	b.n	80007aa <main+0x146>
          LOG(("Send page after  GET command\n"));
 800087e:	4846      	ldr	r0, [pc, #280]	; (8000998 <main+0x334>)
    LOG(("Client close connection\n"));
 8000880:	f004 f92a 	bl	8004ad8 <puts>
 8000884:	e7da      	b.n	800083c <main+0x1d8>
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 8000886:	4945      	ldr	r1, [pc, #276]	; (800099c <main+0x338>)
 8000888:	4638      	mov	r0, r7
 800088a:	f004 f989 	bl	8004ba0 <strstr>
 800088e:	4604      	mov	r4, r0
 8000890:	2800      	cmp	r0, #0
 8000892:	d0d3      	beq.n	800083c <main+0x1d8>
         LOG(("Post request\n"));
 8000894:	4842      	ldr	r0, [pc, #264]	; (80009a0 <main+0x33c>)
 8000896:	f004 f91f 	bl	8004ad8 <puts>
         if(strstr((char *)resp, "radio"))
 800089a:	4942      	ldr	r1, [pc, #264]	; (80009a4 <main+0x340>)
 800089c:	4638      	mov	r0, r7
 800089e:	f004 f97f 	bl	8004ba0 <strstr>
 80008a2:	b160      	cbz	r0, 80008be <main+0x25a>
           if(strstr((char *)resp, "radio=0"))
 80008a4:	4940      	ldr	r1, [pc, #256]	; (80009a8 <main+0x344>)
 80008a6:	4638      	mov	r0, r7
 80008a8:	f004 f97a 	bl	8004ba0 <strstr>
 80008ac:	4604      	mov	r4, r0
 80008ae:	b330      	cbz	r0, 80008fe <main+0x29a>
             BSP_LED_Off(LED2);
 80008b0:	4628      	mov	r0, r5
             LedState = 0;
 80008b2:	f8c6 5804 	str.w	r5, [r6, #2052]	; 0x804
             BSP_LED_Off(LED2);
 80008b6:	f001 f9d1 	bl	8001c5c <BSP_LED_Off>
           temp = (int) BSP_TSENSOR_ReadTemp();
 80008ba:	f001 fa7b 	bl	8001db4 <BSP_TSENSOR_ReadTemp>
         if(strstr((char *)resp, "stop_server"))
 80008be:	493b      	ldr	r1, [pc, #236]	; (80009ac <main+0x348>)
 80008c0:	4638      	mov	r0, r7
 80008c2:	f004 f96d 	bl	8004ba0 <strstr>
 80008c6:	b338      	cbz	r0, 8000918 <main+0x2b4>
           if(strstr((char *)resp, "stop_server=0"))
 80008c8:	4939      	ldr	r1, [pc, #228]	; (80009b0 <main+0x34c>)
 80008ca:	4638      	mov	r0, r7
 80008cc:	f004 f968 	bl	8004ba0 <strstr>
 80008d0:	bb10      	cbnz	r0, 8000918 <main+0x2b4>
           else if(strstr((char *)resp, "stop_server=1"))
 80008d2:	4938      	ldr	r1, [pc, #224]	; (80009b4 <main+0x350>)
 80008d4:	4638      	mov	r0, r7
 80008d6:	f004 f963 	bl	8004ba0 <strstr>
 80008da:	1e04      	subs	r4, r0, #0
 80008dc:	bf18      	it	ne
 80008de:	2401      	movne	r4, #1
         temp = (int) BSP_TSENSOR_ReadTemp();
 80008e0:	f001 fa68 	bl	8001db4 <BSP_TSENSOR_ReadTemp>
 80008e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 80008e8:	f896 0804 	ldrb.w	r0, [r6, #2052]	; 0x804
         temp = (int) BSP_TSENSOR_ReadTemp();
 80008ec:	edcd 7a05 	vstr	s15, [sp, #20]
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 80008f0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80008f4:	f7ff fe40 	bl	8000578 <SendWebPage>
 80008f8:	b180      	cbz	r0, 800091c <main+0x2b8>
           LOG(("> ERROR : Cannot send web page\n"));
 80008fa:	4821      	ldr	r0, [pc, #132]	; (8000980 <main+0x31c>)
 80008fc:	e7c0      	b.n	8000880 <main+0x21c>
           else if(strstr((char *)resp, "radio=1"))
 80008fe:	492e      	ldr	r1, [pc, #184]	; (80009b8 <main+0x354>)
 8000900:	4638      	mov	r0, r7
 8000902:	f004 f94d 	bl	8004ba0 <strstr>
 8000906:	2800      	cmp	r0, #0
 8000908:	d0d7      	beq.n	80008ba <main+0x256>
             LedState = 1;
 800090a:	2301      	movs	r3, #1
             BSP_LED_On(LED2);
 800090c:	4620      	mov	r0, r4
             LedState = 1;
 800090e:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
             BSP_LED_On(LED2);
 8000912:	f001 f999 	bl	8001c48 <BSP_LED_On>
 8000916:	e7d0      	b.n	80008ba <main+0x256>
  bool    stopserver=false;
 8000918:	2400      	movs	r4, #0
 800091a:	e7e1      	b.n	80008e0 <main+0x27c>
           LOG(("Send Page after POST command\n"));
 800091c:	4827      	ldr	r0, [pc, #156]	; (80009bc <main+0x358>)
 800091e:	e7af      	b.n	8000880 <main+0x21c>
    LOG(("Client close connection\n"));
 8000920:	4648      	mov	r0, r9
 8000922:	e7ad      	b.n	8000880 <main+0x21c>
  while(StopServer == false);
 8000924:	2c00      	cmp	r4, #0
 8000926:	f43f af40 	beq.w	80007aa <main+0x146>
  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 800092a:	f001 f8d1 	bl	8001ad0 <WIFI_StopServer>
 800092e:	b110      	cbz	r0, 8000936 <main+0x2d2>
    LOG(("ERROR: Cannot stop server.\n"));
 8000930:	4823      	ldr	r0, [pc, #140]	; (80009c0 <main+0x35c>)
 8000932:	f004 f8d1 	bl	8004ad8 <puts>
  LOG(("Server is stop\n"));
 8000936:	4823      	ldr	r0, [pc, #140]	; (80009c4 <main+0x360>)
 8000938:	e78c      	b.n	8000854 <main+0x1f0>
 800093a:	bf00      	nop
 800093c:	20001250 	.word	0x20001250
 8000940:	40013800 	.word	0x40013800
 8000944:	08006205 	.word	0x08006205
 8000948:	08006232 	.word	0x08006232
 800094c:	0800624c 	.word	0x0800624c
 8000950:	08006261 	.word	0x08006261
 8000954:	080062c0 	.word	0x080062c0
 8000958:	080062c9 	.word	0x080062c9
 800095c:	080062d0 	.word	0x080062d0
 8000960:	200000bc 	.word	0x200000bc
 8000964:	080062e8 	.word	0x080062e8
 8000968:	08006006 	.word	0x08006006
 800096c:	08006375 	.word	0x08006375
 8000970:	08006391 	.word	0x08006391
 8000974:	200004c0 	.word	0x200004c0
 8000978:	08006423 	.word	0x08006423
 800097c:	0800643c 	.word	0x0800643c
 8000980:	08006440 	.word	0x08006440
 8000984:	08006501 	.word	0x08006501
 8000988:	0800629f 	.word	0x0800629f
 800098c:	08006322 	.word	0x08006322
 8000990:	08006350 	.word	0x08006350
 8000994:	080063de 	.word	0x080063de
 8000998:	0800645f 	.word	0x0800645f
 800099c:	0800647c 	.word	0x0800647c
 80009a0:	08006481 	.word	0x08006481
 80009a4:	0800648e 	.word	0x0800648e
 80009a8:	08006494 	.word	0x08006494
 80009ac:	080064a4 	.word	0x080064a4
 80009b0:	080064b0 	.word	0x080064b0
 80009b4:	080064be 	.word	0x080064be
 80009b8:	0800649c 	.word	0x0800649c
 80009bc:	080064cc 	.word	0x080064cc
 80009c0:	08006532 	.word	0x08006532
 80009c4:	0800654d 	.word	0x0800654d
 80009c8:	08006402 	.word	0x08006402
 80009cc:	080064e9 	.word	0x080064e9

080009d0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80009d0:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 80009d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80009d6:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 80009d8:	2201      	movs	r2, #1
 80009da:	a901      	add	r1, sp, #4
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <__io_putchar+0x1c>)
 80009de:	f003 fe85 	bl	80046ec <HAL_UART_Transmit>

  return ch;
}
 80009e2:	9801      	ldr	r0, [sp, #4]
 80009e4:	b003      	add	sp, #12
 80009e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009ea:	bf00      	nop
 80009ec:	20001250 	.word	0x20001250

080009f0 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 80009f0:	2802      	cmp	r0, #2
 80009f2:	d101      	bne.n	80009f8 <HAL_GPIO_EXTI_Callback+0x8>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 80009f4:	f000 bfc4 	b.w	8001980 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 80009f8:	4770      	bx	lr
	...

080009fc <SPI3_IRQHandler>:
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 80009fc:	4801      	ldr	r0, [pc, #4]	; (8000a04 <SPI3_IRQHandler+0x8>)
 80009fe:	f003 bc03 	b.w	8004208 <HAL_SPI_IRQHandler>
 8000a02:	bf00      	nop
 8000a04:	200008ec 	.word	0x200008ec

08000a08 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000a08:	4770      	bx	lr

08000a0a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler>

08000a0c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler>

08000a0e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler>

08000a10 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler>

08000a12 <SVC_Handler>:
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:
 8000a14:	4770      	bx	lr

08000a16 <PendSV_Handler>:
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000a18:	f001 bb20 	b.w	800205c <HAL_IncTick>

08000a1c <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f001 bcbb 	b.w	8002398 <HAL_GPIO_EXTI_IRQHandler>

08000a22 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000a22:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8000a24:	7803      	ldrb	r3, [r0, #0]
 8000a26:	2b2d      	cmp	r3, #45	; 0x2d
 8000a28:	d115      	bne.n	8000a56 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 8000a2a:	3001      	adds	r0, #1
        minus = 1;
 8000a2c:	2501      	movs	r5, #1
 8000a2e:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 8000a30:	462a      	mov	r2, r5
 8000a32:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000a34:	270a      	movs	r7, #10
 8000a36:	e003      	b.n	8000a40 <ParseNumber+0x1e>
        ptr++;
        i++;
 8000a38:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000a3a:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8000a3e:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000a40:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8000a44:	3c30      	subs	r4, #48	; 0x30
 8000a46:	b2e6      	uxtb	r6, r4
 8000a48:	2e09      	cmp	r6, #9
 8000a4a:	d9f5      	bls.n	8000a38 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000a4c:	b101      	cbz	r1, 8000a50 <ParseNumber+0x2e>
        *cnt = i;
 8000a4e:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000a50:	b105      	cbz	r5, 8000a54 <ParseNumber+0x32>
        return 0 - sum;
 8000a52:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8000a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 8000a56:	2500      	movs	r5, #0
 8000a58:	e7e9      	b.n	8000a2e <ParseNumber+0xc>

08000a5a <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8000a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8000a5c:	2600      	movs	r6, #0

  while(* ptr) {
 8000a5e:	7803      	ldrb	r3, [r0, #0]
 8000a60:	b903      	cbnz	r3, 8000a64 <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8000a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 8000a64:	2b3a      	cmp	r3, #58	; 0x3a
 8000a66:	d128      	bne.n	8000aba <ParseMAC+0x60>
    hexcnt = 1;
 8000a68:	f04f 0c01 	mov.w	ip, #1
    ptr = ptr + hexcnt;
 8000a6c:	4460      	add	r0, ip
 8000a6e:	e7f6      	b.n	8000a5e <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000a70:	2a09      	cmp	r2, #9
        sum <<= 4;
 8000a72:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000a76:	d905      	bls.n	8000a84 <ParseMAC+0x2a>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000a78:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000a7c:	2a05      	cmp	r2, #5
 8000a7e:	d814      	bhi.n	8000aaa <ParseMAC+0x50>
        return (a - 'a') + 10;
 8000a80:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 8000a82:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 8000a84:	4414      	add	r4, r2
        i++;
 8000a86:	3501      	adds	r5, #1
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000a88:	5d43      	ldrb	r3, [r0, r5]
 8000a8a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	2a09      	cmp	r2, #9
 8000a92:	fa5f fc85 	uxtb.w	ip, r5
 8000a96:	d9eb      	bls.n	8000a70 <ParseMAC+0x16>
 8000a98:	f023 0720 	bic.w	r7, r3, #32
 8000a9c:	3f41      	subs	r7, #65	; 0x41
 8000a9e:	2f05      	cmp	r7, #5
 8000aa0:	d9e6      	bls.n	8000a70 <ParseMAC+0x16>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8000aa2:	1c73      	adds	r3, r6, #1
 8000aa4:	558c      	strb	r4, [r1, r6]
 8000aa6:	b2de      	uxtb	r6, r3
 8000aa8:	e7e0      	b.n	8000a6c <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000aaa:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000aae:	2a05      	cmp	r2, #5
 8000ab0:	d801      	bhi.n	8000ab6 <ParseMAC+0x5c>
        return (a - 'A') + 10;
 8000ab2:	3b37      	subs	r3, #55	; 0x37
 8000ab4:	e7e5      	b.n	8000a82 <ParseMAC+0x28>
    return 0;
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	e7e4      	b.n	8000a84 <ParseMAC+0x2a>
 8000aba:	2500      	movs	r5, #0
    uint32_t sum = 0;
 8000abc:	462c      	mov	r4, r5
 8000abe:	e7e3      	b.n	8000a88 <ParseMAC+0x2e>

08000ac0 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8000ac6:	2500      	movs	r5, #0

  while(* ptr) {
    hexcnt = 1;
 8000ac8:	2701      	movs	r7, #1
  while(* ptr) {
 8000aca:	7823      	ldrb	r3, [r4, #0]
 8000acc:	b90b      	cbnz	r3, 8000ad2 <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8000ace:	b003      	add	sp, #12
 8000ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 8000ad2:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8000ad4:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 8000ad8:	d007      	beq.n	8000aea <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000ada:	f10d 0107 	add.w	r1, sp, #7
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f7ff ff9f 	bl	8000a22 <ParseNumber>
 8000ae4:	1c6b      	adds	r3, r5, #1
 8000ae6:	5570      	strb	r0, [r6, r5]
 8000ae8:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 8000aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000aee:	441c      	add	r4, r3
 8000af0:	e7eb      	b.n	8000aca <ParseIP+0xa>
	...

08000af4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	4604      	mov	r4, r0
  int ret = 0;
  int16_t recv_len = 0;
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8000af8:	4608      	mov	r0, r1
{
 8000afa:	460e      	mov	r6, r1
 8000afc:	4615      	mov	r5, r2
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8000afe:	f7ff fb67 	bl	80001d0 <strlen>
 8000b02:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000b06:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8000b0a:	b281      	uxth	r1, r0
 8000b0c:	4630      	mov	r0, r6
 8000b0e:	4798      	blx	r3

  if( ret > 0)
 8000b10:	2800      	cmp	r0, #0
 8000b12:	dd24      	ble.n	8000b5e <AT_ExecuteCommand+0x6a>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000b14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000b18:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8000b1c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000b20:	4628      	mov	r0, r5
 8000b22:	4798      	blx	r3
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000b24:	1e43      	subs	r3, r0, #1
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b2c:	d211      	bcs.n	8000b52 <AT_ExecuteCommand+0x5e>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000b2e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8000b32:	bf08      	it	eq
 8000b34:	b218      	sxtheq	r0, r3
      }
      *(pdata + recv_len) = 0;
 8000b36:	2400      	movs	r4, #0
 8000b38:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8000b3a:	490a      	ldr	r1, [pc, #40]	; (8000b64 <AT_ExecuteCommand+0x70>)
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	f004 f82f 	bl	8004ba0 <strstr>
 8000b42:	b950      	cbnz	r0, 8000b5a <AT_ExecuteCommand+0x66>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000b44:	4908      	ldr	r1, [pc, #32]	; (8000b68 <AT_ExecuteCommand+0x74>)
 8000b46:	4628      	mov	r0, r5
 8000b48:	f004 f82a 	bl	8004ba0 <strstr>
 8000b4c:	b138      	cbz	r0, 8000b5e <AT_ExecuteCommand+0x6a>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000b4e:	2005      	movs	r0, #5
 8000b50:	e002      	b.n	8000b58 <AT_ExecuteCommand+0x64>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000b52:	3004      	adds	r0, #4
 8000b54:	d103      	bne.n	8000b5e <AT_ExecuteCommand+0x6a>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000b56:	2006      	movs	r0, #6
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
}
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	e7fc      	b.n	8000b58 <AT_ExecuteCommand+0x64>
  return ES_WIFI_STATUS_IO_ERROR;
 8000b5e:	2004      	movs	r0, #4
 8000b60:	e7fa      	b.n	8000b58 <AT_ExecuteCommand+0x64>
 8000b62:	bf00      	nop
 8000b64:	0800655c 	.word	0x0800655c
 8000b68:	08006565 	.word	0x08006565

08000b6c <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8000b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b70:	4680      	mov	r8, r0
  int len;
  uint8_t *p=Obj->CmdData;

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000b72:	4608      	mov	r0, r1
{
 8000b74:	4689      	mov	r9, r1
 8000b76:	4615      	mov	r5, r2
 8000b78:	461f      	mov	r7, r3
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000b7a:	f7ff fb29 	bl	80001d0 <strlen>
 8000b7e:	f8d8 3120 	ldr.w	r3, [r8, #288]	; 0x120
 8000b82:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
{
 8000b86:	9e08      	ldr	r6, [sp, #32]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000b88:	b281      	uxth	r1, r0
 8000b8a:	4648      	mov	r0, r9
 8000b8c:	4798      	blx	r3
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	dc02      	bgt.n	8000b98 <AT_RequestReceiveData+0x2c>
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8000b92:	2004      	movs	r0, #4
}
 8000b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8000b98:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
 8000b9c:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f508 7094 	add.w	r0, r8, #296	; 0x128
 8000ba6:	4798      	blx	r3
    if ((p[0]!='\r') || (p[1]!='\n'))
 8000ba8:	f898 3128 	ldrb.w	r3, [r8, #296]	; 0x128
 8000bac:	2b0d      	cmp	r3, #13
 8000bae:	d1f0      	bne.n	8000b92 <AT_RequestReceiveData+0x26>
 8000bb0:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 8000bb4:	2b0a      	cmp	r3, #10
 8000bb6:	d1ec      	bne.n	8000b92 <AT_RequestReceiveData+0x26>
    len-=2;
 8000bb8:	1e81      	subs	r1, r0, #2
    if (len >= AT_OK_STRING_LEN)
 8000bba:	2907      	cmp	r1, #7
 8000bbc:	d9e9      	bls.n	8000b92 <AT_RequestReceiveData+0x26>
    p+=2;
 8000bbe:	f508 7995 	add.w	r9, r8, #298	; 0x12a
     while(len && (p[len-1]==0x15)) len--;
 8000bc2:	f208 1829 	addw	r8, r8, #297	; 0x129
 8000bc6:	b119      	cbz	r1, 8000bd0 <AT_RequestReceiveData+0x64>
 8000bc8:	f818 3001 	ldrb.w	r3, [r8, r1]
 8000bcc:	2b15      	cmp	r3, #21
 8000bce:	d017      	beq.n	8000c00 <AT_RequestReceiveData+0x94>
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8000bd0:	f1a1 0408 	sub.w	r4, r1, #8
     p[len] = '\0';
 8000bd4:	f04f 0800 	mov.w	r8, #0
 8000bd8:	f809 8001 	strb.w	r8, [r9, r1]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8000bdc:	eb09 0004 	add.w	r0, r9, r4
 8000be0:	490a      	ldr	r1, [pc, #40]	; (8000c0c <AT_RequestReceiveData+0xa0>)
 8000be2:	f003 ffdd 	bl	8004ba0 <strstr>
 8000be6:	b168      	cbz	r0, 8000c04 <AT_RequestReceiveData+0x98>
	   if (*ReadData > Reqlen)
 8000be8:	b2a4      	uxth	r4, r4
 8000bea:	42bc      	cmp	r4, r7
 8000bec:	4622      	mov	r2, r4
 8000bee:	bf28      	it	cs
 8000bf0:	463a      	movcs	r2, r7
 8000bf2:	8032      	strh	r2, [r6, #0]
       memcpy(pdata, p, *ReadData);
 8000bf4:	4649      	mov	r1, r9
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	f003 fed2 	bl	80049a0 <memcpy>
       return ES_WIFI_STATUS_OK;
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7c9      	b.n	8000b94 <AT_RequestReceiveData+0x28>
     while(len && (p[len-1]==0x15)) len--;
 8000c00:	3901      	subs	r1, #1
 8000c02:	e7e0      	b.n	8000bc6 <AT_RequestReceiveData+0x5a>
       *ReadData = 0;
 8000c04:	8030      	strh	r0, [r6, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000c06:	2005      	movs	r0, #5
 8000c08:	e7c4      	b.n	8000b94 <AT_RequestReceiveData+0x28>
 8000c0a:	bf00      	nop
 8000c0c:	0800655c 	.word	0x0800655c

08000c10 <AT_RequestSendData>:
{
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	4605      	mov	r5, r0
  cmd_len = strlen((char*)cmd);
 8000c16:	4608      	mov	r0, r1
{
 8000c18:	4688      	mov	r8, r1
 8000c1a:	4691      	mov	r9, r2
 8000c1c:	461f      	mov	r7, r3
  cmd_len = strlen((char*)cmd);
 8000c1e:	f7ff fad7 	bl	80001d0 <strlen>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000c22:	f010 0401 	ands.w	r4, r0, #1
{
 8000c26:	9e08      	ldr	r6, [sp, #32]
  cmd_len = strlen((char*)cmd);
 8000c28:	fa1f fa80 	uxth.w	sl, r0
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000c2c:	d126      	bne.n	8000c7c <AT_RequestSendData+0x6c>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000c2e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8000c32:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000c36:	4651      	mov	r1, sl
 8000c38:	4640      	mov	r0, r8
 8000c3a:	4798      	blx	r3
  if (n == cmd_len)
 8000c3c:	b280      	uxth	r0, r0
 8000c3e:	4582      	cmp	sl, r0
 8000c40:	d123      	bne.n	8000c8a <AT_RequestSendData+0x7a>
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000c42:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8000c46:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000c4a:	4639      	mov	r1, r7
 8000c4c:	4648      	mov	r0, r9
 8000c4e:	4798      	blx	r3
    if (send_len == len)
 8000c50:	42b8      	cmp	r0, r7
 8000c52:	d113      	bne.n	8000c7c <AT_RequestSendData+0x6c>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000c54:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8000c58:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4798      	blx	r3
      if (recv_len > 0)
 8000c62:	2800      	cmp	r0, #0
 8000c64:	dd0d      	ble.n	8000c82 <AT_RequestSendData+0x72>
        *(pdata+recv_len) = 0;
 8000c66:	5434      	strb	r4, [r6, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000c68:	490b      	ldr	r1, [pc, #44]	; (8000c98 <AT_RequestSendData+0x88>)
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	f003 ff98 	bl	8004ba0 <strstr>
 8000c70:	b968      	cbnz	r0, 8000c8e <AT_RequestSendData+0x7e>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000c72:	490a      	ldr	r1, [pc, #40]	; (8000c9c <AT_RequestSendData+0x8c>)
 8000c74:	4630      	mov	r0, r6
 8000c76:	f003 ff93 	bl	8004ba0 <strstr>
 8000c7a:	b950      	cbnz	r0, 8000c92 <AT_RequestSendData+0x82>
          return ES_WIFI_STATUS_ERROR;
 8000c7c:	2002      	movs	r0, #2
}
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000c82:	3004      	adds	r0, #4
 8000c84:	d1fa      	bne.n	8000c7c <AT_RequestSendData+0x6c>
        return ES_WIFI_STATUS_MODULE_CRASH;
 8000c86:	2006      	movs	r0, #6
 8000c88:	e7f9      	b.n	8000c7e <AT_RequestSendData+0x6e>
  return ES_WIFI_STATUS_IO_ERROR;
 8000c8a:	2004      	movs	r0, #4
 8000c8c:	e7f7      	b.n	8000c7e <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 8000c8e:	4620      	mov	r0, r4
 8000c90:	e7f5      	b.n	8000c7e <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000c92:	2005      	movs	r0, #5
 8000c94:	e7f3      	b.n	8000c7e <AT_RequestSendData+0x6e>
 8000c96:	bf00      	nop
 8000c98:	0800655c 	.word	0x0800655c
 8000c9c:	08006565 	.word	0x08006565

08000ca0 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000ca4:	f247 5330 	movw	r3, #30000	; 0x7530
 8000ca8:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8
{
 8000cac:	4604      	mov	r4, r0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8000cae:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	4798      	blx	r3
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	d14b      	bne.n	8000d52 <ES_WIFI_Init+0xb2>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8000cba:	4927      	ldr	r1, [pc, #156]	; (8000d58 <ES_WIFI_Init+0xb8>)
 8000cbc:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f7ff ff17 	bl	8000af4 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8000cc6:	4605      	mov	r5, r0
 8000cc8:	b960      	cbnz	r0, 8000ce4 <ES_WIFI_Init+0x44>
  ptr = strtok((char *)pdata + 2, ",");
 8000cca:	4924      	ldr	r1, [pc, #144]	; (8000d5c <ES_WIFI_Init+0xbc>)
      ptr = strtok(ptr, "\r");
 8000ccc:	4f24      	ldr	r7, [pc, #144]	; (8000d60 <ES_WIFI_Init+0xc0>)
    ptr = strtok(NULL, ",");
 8000cce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8000d5c <ES_WIFI_Init+0xbc>
  ptr = strtok((char *)pdata + 2, ",");
 8000cd2:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000cd6:	f003 ff7b 	bl	8004bd0 <strtok>
  while (ptr != NULL){
 8000cda:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000cdc:	f104 0868 	add.w	r8, r4, #104	; 0x68
 8000ce0:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8000ce2:	b910      	cbnz	r0, 8000cea <ES_WIFI_Init+0x4a>
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d824      	bhi.n	8000d38 <ES_WIFI_Init+0x98>
 8000cee:	e8df f003 	tbb	[pc, r3]
 8000cf2:	0a04      	.short	0x0a04
 8000cf4:	1e19140f 	.word	0x1e19140f
 8000cf8:	29          	.byte	0x29
 8000cf9:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000d00:	f003 ff3b 	bl	8004b7a <strncpy>
      break;
 8000d04:	e018      	b.n	8000d38 <ES_WIFI_Init+0x98>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8000d06:	4601      	mov	r1, r0
 8000d08:	2218      	movs	r2, #24
 8000d0a:	f104 0020 	add.w	r0, r4, #32
 8000d0e:	e7f7      	b.n	8000d00 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8000d10:	4601      	mov	r1, r0
 8000d12:	2210      	movs	r2, #16
 8000d14:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8000d18:	e7f2      	b.n	8000d00 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8000d22:	e7ed      	b.n	8000d00 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8000d24:	4601      	mov	r1, r0
 8000d26:	2210      	movs	r2, #16
 8000d28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d2c:	e7e8      	b.n	8000d00 <ES_WIFI_Init+0x60>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f7ff fe77 	bl	8000a22 <ParseNumber>
 8000d34:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ptr = strtok(NULL, ",");
 8000d38:	4649      	mov	r1, r9
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f003 ff48 	bl	8004bd0 <strtok>
 8000d40:	3601      	adds	r6, #1
 8000d42:	e7cd      	b.n	8000ce0 <ES_WIFI_Init+0x40>
      ptr = strtok(ptr, "\r");
 8000d44:	4639      	mov	r1, r7
 8000d46:	f003 ff43 	bl	8004bd0 <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000d4a:	2220      	movs	r2, #32
      ptr = strtok(ptr, "\r");
 8000d4c:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000d4e:	4640      	mov	r0, r8
 8000d50:	e7d6      	b.n	8000d00 <ES_WIFI_Init+0x60>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000d52:	2502      	movs	r5, #2
 8000d54:	e7c6      	b.n	8000ce4 <ES_WIFI_Init+0x44>
 8000d56:	bf00      	nop
 8000d58:	0800658d 	.word	0x0800658d
 8000d5c:	0800676a 	.word	0x0800676a
 8000d60:	08006658 	.word	0x08006658

08000d64 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8000d64:	b530      	push	{r4, r5, lr}
 8000d66:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000d6a:	b158      	cbz	r0, 8000d84 <ES_WIFI_RegisterBusIO+0x20>
 8000d6c:	b151      	cbz	r1, 8000d84 <ES_WIFI_RegisterBusIO+0x20>
 8000d6e:	b14a      	cbz	r2, 8000d84 <ES_WIFI_RegisterBusIO+0x20>
 8000d70:	b145      	cbz	r5, 8000d84 <ES_WIFI_RegisterBusIO+0x20>
 8000d72:	b13c      	cbz	r4, 8000d84 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 8000d74:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 8000d78:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8000d7c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8000d80:	2000      	movs	r0, #0
}
 8000d82:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8000d84:	2002      	movs	r0, #2
 8000d86:	e7fc      	b.n	8000d82 <ES_WIFI_RegisterBusIO+0x1e>

08000d88 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000d8a:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 8000d8e:	4605      	mov	r5, r0
 8000d90:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000d92:	4620      	mov	r0, r4
 8000d94:	460a      	mov	r2, r1
 8000d96:	4918      	ldr	r1, [pc, #96]	; (8000df8 <ES_WIFI_Connect+0x70>)
{
 8000d98:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000d9a:	f003 fea5 	bl	8004ae8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000d9e:	4622      	mov	r2, r4
 8000da0:	4621      	mov	r1, r4
 8000da2:	4628      	mov	r0, r5
 8000da4:	f7ff fea6 	bl	8000af4 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000da8:	bb20      	cbnz	r0, 8000df4 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8000daa:	4914      	ldr	r1, [pc, #80]	; (8000dfc <ES_WIFI_Connect+0x74>)
 8000dac:	463a      	mov	r2, r7
 8000dae:	4620      	mov	r0, r4
 8000db0:	f003 fe9a 	bl	8004ae8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000db4:	4622      	mov	r2, r4
 8000db6:	4621      	mov	r1, r4
 8000db8:	4628      	mov	r0, r5
 8000dba:	f7ff fe9b 	bl	8000af4 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8000dbe:	b9c8      	cbnz	r0, 8000df4 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000dc0:	490f      	ldr	r1, [pc, #60]	; (8000e00 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8000dc2:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000dc6:	4632      	mov	r2, r6
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f003 fe8d 	bl	8004ae8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000dce:	4622      	mov	r2, r4
 8000dd0:	4621      	mov	r1, r4
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	f7ff fe8e 	bl	8000af4 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 8000dd8:	b960      	cbnz	r0, 8000df4 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8000dda:	490a      	ldr	r1, [pc, #40]	; (8000e04 <ES_WIFI_Connect+0x7c>)
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f003 feb2 	bl	8004b46 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000de2:	4622      	mov	r2, r4
 8000de4:	4621      	mov	r1, r4
 8000de6:	4628      	mov	r0, r5
 8000de8:	f7ff fe84 	bl	8000af4 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8000dec:	b910      	cbnz	r0, 8000df4 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8000df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000df6:	bf00      	nop
 8000df8:	080065a0 	.word	0x080065a0
 8000dfc:	080065a7 	.word	0x080065a7
 8000e00:	080065ae 	.word	0x080065ae
 8000e04:	080065b5 	.word	0x080065b5

08000e08 <ES_WIFI_IsConnected>:
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8000e08:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000e0c:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"CS\r");
 8000e0e:	490b      	ldr	r1, [pc, #44]	; (8000e3c <ES_WIFI_IsConnected+0x34>)
{
 8000e10:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"CS\r");
 8000e12:	4610      	mov	r0, r2
 8000e14:	f003 fe97 	bl	8004b46 <strcpy>
 8000e18:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e1a:	4601      	mov	r1, r0
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff fe69 	bl	8000af4 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000e22:	b938      	cbnz	r0, 8000e34 <ES_WIFI_IsConnected+0x2c>
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8000e24:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8000e28:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000e2c:	4253      	negs	r3, r2
 8000e2e:	4153      	adcs	r3, r2
 8000e30:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8000e34:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8000e38:	bd10      	pop	{r4, pc}
 8000e3a:	bf00      	nop
 8000e3c:	080065b9 	.word	0x080065b9

08000e40 <ES_WIFI_GetNetworkSettings>:
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8000e40:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8000e48:	4935      	ldr	r1, [pc, #212]	; (8000f20 <ES_WIFI_GetNetworkSettings+0xe0>)
{
 8000e4a:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f003 fe7a 	bl	8004b46 <strcpy>
 8000e52:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e54:	4601      	mov	r1, r0
 8000e56:	4620      	mov	r0, r4
 8000e58:	f7ff fe4c 	bl	8000af4 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8000e5c:	4606      	mov	r6, r0
 8000e5e:	b960      	cbnz	r0, 8000e7a <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8000e60:	4930      	ldr	r1, [pc, #192]	; (8000f24 <ES_WIFI_GetNetworkSettings+0xe4>)
    ptr = strtok(NULL, ",");
 8000e62:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8000f24 <ES_WIFI_GetNetworkSettings+0xe4>
  ptr = strtok(pdata + 2, ",");
 8000e66:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000e6a:	f003 feb1 	bl	8004bd0 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8000e6e:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 8000e72:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2);
 8000e74:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 8000e78:	b910      	cbnz	r0, 8000e80 <ES_WIFI_GetNetworkSettings+0x40>
  }

  UNLOCK_WIFI();
  return ret;
}
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8000e80:	2d0b      	cmp	r5, #11
 8000e82:	d80c      	bhi.n	8000e9e <ES_WIFI_GetNetworkSettings+0x5e>
 8000e84:	e8df f005 	tbb	[pc, r5]
 8000e88:	241e1906 	.word	0x241e1906
 8000e8c:	3835302a 	.word	0x3835302a
 8000e90:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8000e94:	4601      	mov	r1, r0
 8000e96:	2221      	movs	r2, #33	; 0x21
 8000e98:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8000e9a:	f003 fe6e 	bl	8004b7a <strncpy>
    ptr = strtok(NULL, ",");
 8000e9e:	4649      	mov	r1, r9
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f003 fe95 	bl	8004bd0 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	d0e7      	beq.n	8000e7a <ES_WIFI_GetNetworkSettings+0x3a>
 8000eaa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8000eae:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8000eb0:	bf14      	ite	ne
 8000eb2:	3501      	addne	r5, #1
      num++;
 8000eb4:	3502      	addeq	r5, #2
 8000eb6:	b2ed      	uxtb	r5, r5
 8000eb8:	e7de      	b.n	8000e78 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8000eba:	4601      	mov	r1, r0
 8000ebc:	2221      	movs	r2, #33	; 0x21
 8000ebe:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 8000ec2:	e7ea      	b.n	8000e9a <ES_WIFI_GetNetworkSettings+0x5a>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f7ff fdac 	bl	8000a22 <ParseNumber>
 8000eca:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 8000ece:	e7e6      	b.n	8000e9e <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f7ff fda6 	bl	8000a22 <ParseNumber>
 8000ed6:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 8000eda:	e7e0      	b.n	8000e9e <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000edc:	2100      	movs	r1, #0
 8000ede:	f7ff fda0 	bl	8000a22 <ParseNumber>
 8000ee2:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 8000ee6:	e7da      	b.n	8000e9e <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Addr);
 8000ee8:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask);
 8000eec:	f7ff fde8 	bl	8000ac0 <ParseIP>
      break;
 8000ef0:	e7d5      	b.n	8000e9e <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Mask);
 8000ef2:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8000ef6:	e7f9      	b.n	8000eec <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8000ef8:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 8000efc:	e7f6      	b.n	8000eec <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS1);
 8000efe:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 8000f02:	e7f3      	b.n	8000eec <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS2);
 8000f04:	4641      	mov	r1, r8
 8000f06:	e7f1      	b.n	8000eec <ES_WIFI_GetNetworkSettings+0xac>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f7ff fd8a 	bl	8000a22 <ParseNumber>
 8000f0e:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 8000f12:	e7c4      	b.n	8000e9e <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000f14:	2100      	movs	r1, #0
 8000f16:	f7ff fd84 	bl	8000a22 <ParseNumber>
 8000f1a:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 8000f1e:	e7be      	b.n	8000e9e <ES_WIFI_GetNetworkSettings+0x5e>
 8000f20:	080065c1 	.word	0x080065c1
 8000f24:	0800676a 	.word	0x0800676a

08000f28 <ES_WIFI_GetMACAddress>:
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8000f28:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	4604      	mov	r4, r0
 8000f30:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 8000f32:	4610      	mov	r0, r2
 8000f34:	4909      	ldr	r1, [pc, #36]	; (8000f5c <ES_WIFI_GetMACAddress+0x34>)
 8000f36:	f003 fe06 	bl	8004b46 <strcpy>
 8000f3a:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f3c:	4601      	mov	r1, r0
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f7ff fdd8 	bl	8000af4 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000f44:	4605      	mov	r5, r0
 8000f46:	b938      	cbnz	r0, 8000f58 <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8000f48:	4905      	ldr	r1, [pc, #20]	; (8000f60 <ES_WIFI_GetMACAddress+0x38>)
 8000f4a:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000f4e:	f003 fe3f 	bl	8004bd0 <strtok>
    ParseMAC(ptr, mac) ;
 8000f52:	4631      	mov	r1, r6
 8000f54:	f7ff fd81 	bl	8000a5a <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
}
 8000f58:	4628      	mov	r0, r5
 8000f5a:	bd70      	pop	{r4, r5, r6, pc}
 8000f5c:	08006602 	.word	0x08006602
 8000f60:	08006004 	.word	0x08006004

08000f64 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8000f64:	b570      	push	{r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000f66:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8000f6a:	784a      	ldrb	r2, [r1, #1]
{
 8000f6c:	4605      	mov	r5, r0
 8000f6e:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000f70:	4620      	mov	r0, r4
 8000f72:	4923      	ldr	r1, [pc, #140]	; (8001000 <ES_WIFI_StartServerSingleConn+0x9c>)
 8000f74:	f003 fdb8 	bl	8004ae8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f78:	4622      	mov	r2, r4
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	f7ff fdb9 	bl	8000af4 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d13a      	bne.n	8000ffc <ES_WIFI_StartServerSingleConn+0x98>
  {
    UNLOCK_WIFI();
    return ret;
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8000f86:	7833      	ldrb	r3, [r6, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d82b      	bhi.n	8000fe6 <ES_WIFI_StartServerSingleConn+0x82>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8000f8e:	7832      	ldrb	r2, [r6, #0]
 8000f90:	491c      	ldr	r1, [pc, #112]	; (8001004 <ES_WIFI_StartServerSingleConn+0xa0>)
 8000f92:	4620      	mov	r0, r4
 8000f94:	f003 fda8 	bl	8004ae8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f98:	4622      	mov	r2, r4
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	f7ff fda9 	bl	8000af4 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8000fa2:	bb58      	cbnz	r0, 8000ffc <ES_WIFI_StartServerSingleConn+0x98>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8000fa4:	7c32      	ldrb	r2, [r6, #16]
 8000fa6:	4918      	ldr	r1, [pc, #96]	; (8001008 <ES_WIFI_StartServerSingleConn+0xa4>)
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f003 fd9d 	bl	8004ae8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fae:	4622      	mov	r2, r4
 8000fb0:	4621      	mov	r1, r4
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	f7ff fd9e 	bl	8000af4 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8000fb8:	bb00      	cbnz	r0, 8000ffc <ES_WIFI_StartServerSingleConn+0x98>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8000fba:	88b2      	ldrh	r2, [r6, #4]
 8000fbc:	4913      	ldr	r1, [pc, #76]	; (800100c <ES_WIFI_StartServerSingleConn+0xa8>)
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f003 fd92 	bl	8004ae8 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fc4:	4622      	mov	r2, r4
 8000fc6:	4621      	mov	r1, r4
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f7ff fd93 	bl	8000af4 <AT_ExecuteCommand>
          if (ret == ES_WIFI_STATUS_OK)
 8000fce:	b9a8      	cbnz	r0, 8000ffc <ES_WIFI_StartServerSingleConn+0x98>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 8000fd0:	490f      	ldr	r1, [pc, #60]	; (8001010 <ES_WIFI_StartServerSingleConn+0xac>)
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f003 fdb7 	bl	8004b46 <strcpy>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fd8:	4622      	mov	r2, r4
 8000fda:	4621      	mov	r1, r4
 8000fdc:	4628      	mov	r0, r5
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
}
 8000fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fe2:	f7ff bd87 	b.w	8000af4 <AT_ExecuteCommand>
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8000fe6:	490b      	ldr	r1, [pc, #44]	; (8001014 <ES_WIFI_StartServerSingleConn+0xb0>)
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f003 fdac 	bl	8004b46 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fee:	4622      	mov	r2, r4
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	f7ff fd7e 	bl	8000af4 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d0c8      	beq.n	8000f8e <ES_WIFI_StartServerSingleConn+0x2a>
}
 8000ffc:	bd70      	pop	{r4, r5, r6, pc}
 8000ffe:	bf00      	nop
 8001000:	08006661 	.word	0x08006661
 8001004:	08006668 	.word	0x08006668
 8001008:	080066aa 	.word	0x080066aa
 800100c:	0800666f 	.word	0x0800666f
 8001010:	080066b1 	.word	0x080066b1
 8001014:	0800669f 	.word	0x0800669f

08001018 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 8001018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800101c:	4689      	mov	r9, r1
 800101e:	4606      	mov	r6, r0
 8001020:	4690      	mov	r8, r2
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 8001022:	f001 f827 	bl	8002074 <HAL_GetTick>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
    sprintf((char*)Obj->CmdData,"MR\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
    if(ret == ES_WIFI_STATUS_OK)
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8001026:	f8df a168 	ldr.w	sl, [pc, #360]	; 8001190 <ES_WIFI_WaitServerConnection+0x178>
 800102a:	f8df b168 	ldr.w	fp, [pc, #360]	; 8001194 <ES_WIFI_WaitServerConnection+0x17c>
 800102e:	eb10 0309 	adds.w	r3, r0, r9
  tstart=HAL_GetTick();
 8001032:	4605      	mov	r5, r0
  tlast=tstart+timeout;
 8001034:	9301      	str	r3, [sp, #4]
	   tstart=0;
 8001036:	bf28      	it	cs
 8001038:	2500      	movcs	r5, #0
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800103a:	f506 7494 	add.w	r4, r6, #296	; 0x128
 800103e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001042:	2100      	movs	r1, #0
 8001044:	4620      	mov	r0, r4
 8001046:	f003 fcb9 	bl	80049bc <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 800104a:	4946      	ldr	r1, [pc, #280]	; (8001164 <ES_WIFI_WaitServerConnection+0x14c>)
 800104c:	4620      	mov	r0, r4
 800104e:	f003 fd7a 	bl	8004b46 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001052:	4622      	mov	r2, r4
 8001054:	4621      	mov	r1, r4
 8001056:	4630      	mov	r0, r6
 8001058:	f7ff fd4c 	bl	8000af4 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800105c:	bb10      	cbnz	r0, 80010a4 <ES_WIFI_WaitServerConnection+0x8c>
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 800105e:	4651      	mov	r1, sl
 8001060:	4620      	mov	r0, r4
 8001062:	f003 fd9d 	bl	8004ba0 <strstr>
 8001066:	b330      	cbz	r0, 80010b6 <ES_WIFI_WaitServerConnection+0x9e>
 8001068:	4659      	mov	r1, fp
 800106a:	4620      	mov	r0, r4
 800106c:	f003 fd98 	bl	8004ba0 <strstr>
 8001070:	b308      	cbz	r0, 80010b6 <ES_WIFI_WaitServerConnection+0x9e>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8001072:	493d      	ldr	r1, [pc, #244]	; (8001168 <ES_WIFI_WaitServerConnection+0x150>)
 8001074:	4620      	mov	r0, r4
 8001076:	f003 fd93 	bl	8004ba0 <strstr>
 800107a:	b9e0      	cbnz	r0, 80010b6 <ES_WIFI_WaitServerConnection+0x9e>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 800107c:	493b      	ldr	r1, [pc, #236]	; (800116c <ES_WIFI_WaitServerConnection+0x154>)
 800107e:	4620      	mov	r0, r4
 8001080:	f003 fd8e 	bl	8004ba0 <strstr>
 8001084:	b9b8      	cbnz	r0, 80010b6 <ES_WIFI_WaitServerConnection+0x9e>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 8001086:	493a      	ldr	r1, [pc, #232]	; (8001170 <ES_WIFI_WaitServerConnection+0x158>)
 8001088:	483a      	ldr	r0, [pc, #232]	; (8001174 <ES_WIFI_WaitServerConnection+0x15c>)
 800108a:	f240 724c 	movw	r2, #1868	; 0x74c
 800108e:	f003 fc9d 	bl	80049cc <iprintf>
 8001092:	4839      	ldr	r0, [pc, #228]	; (8001178 <ES_WIFI_WaitServerConnection+0x160>)
 8001094:	4621      	mov	r1, r4
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 8001096:	f003 fc99 	bl	80049cc <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 800109a:	2702      	movs	r7, #2
    LOCK_WIFI();
    t = HAL_GetTick();
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
  return ES_WIFI_STATUS_TIMEOUT;
}
 800109c:	4638      	mov	r0, r7
 800109e:	b003      	add	sp, #12
 80010a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DEBUG("MR command failed %s\n", Obj->CmdData);
 80010a4:	4932      	ldr	r1, [pc, #200]	; (8001170 <ES_WIFI_WaitServerConnection+0x158>)
 80010a6:	4833      	ldr	r0, [pc, #204]	; (8001174 <ES_WIFI_WaitServerConnection+0x15c>)
 80010a8:	f240 7254 	movw	r2, #1876	; 0x754
 80010ac:	f003 fc8e 	bl	80049cc <iprintf>
 80010b0:	4832      	ldr	r0, [pc, #200]	; (800117c <ES_WIFI_WaitServerConnection+0x164>)
 80010b2:	4621      	mov	r1, r4
 80010b4:	e7ef      	b.n	8001096 <ES_WIFI_WaitServerConnection+0x7e>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80010b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010ba:	2100      	movs	r1, #0
 80010bc:	4620      	mov	r0, r4
 80010be:	f003 fc7d 	bl	80049bc <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 80010c2:	492f      	ldr	r1, [pc, #188]	; (8001180 <ES_WIFI_WaitServerConnection+0x168>)
 80010c4:	4620      	mov	r0, r4
 80010c6:	f003 fd3e 	bl	8004b46 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80010ca:	4622      	mov	r2, r4
 80010cc:	4621      	mov	r1, r4
 80010ce:	4630      	mov	r0, r6
 80010d0:	f7ff fd10 	bl	8000af4 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80010d4:	4607      	mov	r7, r0
 80010d6:	bb48      	cbnz	r0, 800112c <ES_WIFI_WaitServerConnection+0x114>
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 80010d8:	492a      	ldr	r1, [pc, #168]	; (8001184 <ES_WIFI_WaitServerConnection+0x16c>)
 80010da:	220c      	movs	r2, #12
 80010dc:	4620      	mov	r0, r4
 80010de:	f003 fd3a 	bl	8004b56 <strncmp>
 80010e2:	b360      	cbz	r0, 800113e <ES_WIFI_WaitServerConnection+0x126>
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 80010e4:	4928      	ldr	r1, [pc, #160]	; (8001188 <ES_WIFI_WaitServerConnection+0x170>)
 80010e6:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 80010ea:	f003 fd71 	bl	8004bd0 <strtok>
        ptr = strtok(0, ","); //port
 80010ee:	4926      	ldr	r1, [pc, #152]	; (8001188 <ES_WIFI_WaitServerConnection+0x170>)
 80010f0:	4638      	mov	r0, r7
 80010f2:	f003 fd6d 	bl	8004bd0 <strtok>
        ParseIP((char *)ptr, conn->RemoteIP);
 80010f6:	f108 0106 	add.w	r1, r8, #6
 80010fa:	f7ff fce1 	bl	8000ac0 <ParseIP>
        ptr = strtok(0, ","); //port
 80010fe:	4922      	ldr	r1, [pc, #136]	; (8001188 <ES_WIFI_WaitServerConnection+0x170>)
 8001100:	4638      	mov	r0, r7
 8001102:	f003 fd65 	bl	8004bd0 <strtok>
        conn->LocalPort=ParseNumber(ptr,0);
 8001106:	4639      	mov	r1, r7
 8001108:	f7ff fc8b 	bl	8000a22 <ParseNumber>
        ptr = strtok(0, ","); //ip
 800110c:	491e      	ldr	r1, [pc, #120]	; (8001188 <ES_WIFI_WaitServerConnection+0x170>)
        conn->LocalPort=ParseNumber(ptr,0);
 800110e:	f8a8 0004 	strh.w	r0, [r8, #4]
        ptr = strtok(0, ","); //ip
 8001112:	4638      	mov	r0, r7
 8001114:	f003 fd5c 	bl	8004bd0 <strtok>
        ptr = strtok(0, ","); //remote port
 8001118:	491b      	ldr	r1, [pc, #108]	; (8001188 <ES_WIFI_WaitServerConnection+0x170>)
 800111a:	4638      	mov	r0, r7
 800111c:	f003 fd58 	bl	8004bd0 <strtok>
        conn->RemotePort=ParseNumber(ptr,0);
 8001120:	4639      	mov	r1, r7
 8001122:	f7ff fc7e 	bl	8000a22 <ParseNumber>
 8001126:	f8a8 0002 	strh.w	r0, [r8, #2]
        return ES_WIFI_STATUS_OK;
 800112a:	e7b7      	b.n	800109c <ES_WIFI_WaitServerConnection+0x84>
      DEBUG("P? command failed %s\n", Obj->CmdData);
 800112c:	4910      	ldr	r1, [pc, #64]	; (8001170 <ES_WIFI_WaitServerConnection+0x158>)
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <ES_WIFI_WaitServerConnection+0x15c>)
 8001130:	f240 726f 	movw	r2, #1903	; 0x76f
 8001134:	f003 fc4a 	bl	80049cc <iprintf>
 8001138:	4814      	ldr	r0, [pc, #80]	; (800118c <ES_WIFI_WaitServerConnection+0x174>)
 800113a:	4621      	mov	r1, r4
 800113c:	e7ab      	b.n	8001096 <ES_WIFI_WaitServerConnection+0x7e>
    Obj->fops.IO_Delay(100);
 800113e:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
 8001142:	2064      	movs	r0, #100	; 0x64
 8001144:	4798      	blx	r3
    t = HAL_GetTick();
 8001146:	f000 ff95 	bl	8002074 <HAL_GetTick>
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 800114a:	f1b9 0f00 	cmp.w	r9, #0
 800114e:	f43f af74 	beq.w	800103a <ES_WIFI_WaitServerConnection+0x22>
 8001152:	9b01      	ldr	r3, [sp, #4]
 8001154:	4283      	cmp	r3, r0
 8001156:	f63f af70 	bhi.w	800103a <ES_WIFI_WaitServerConnection+0x22>
 800115a:	42a8      	cmp	r0, r5
 800115c:	f4ff af6d 	bcc.w	800103a <ES_WIFI_WaitServerConnection+0x22>
  return ES_WIFI_STATUS_TIMEOUT;
 8001160:	2703      	movs	r7, #3
 8001162:	e79b      	b.n	800109c <ES_WIFI_WaitServerConnection+0x84>
 8001164:	08006598 	.word	0x08006598
 8001168:	080066bf 	.word	0x080066bf
 800116c:	080066c8 	.word	0x080066c8
 8001170:	080066d5 	.word	0x080066d5
 8001174:	08006727 	.word	0x08006727
 8001178:	0800672f 	.word	0x0800672f
 800117c:	08006745 	.word	0x08006745
 8001180:	0800675b 	.word	0x0800675b
 8001184:	0800675f 	.word	0x0800675f
 8001188:	0800676a 	.word	0x0800676a
 800118c:	0800676c 	.word	0x0800676c
 8001190:	080066b8 	.word	0x080066b8
 8001194:	080066ce 	.word	0x080066ce

08001198 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8001198:	b570      	push	{r4, r5, r6, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800119a:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 800119e:	460a      	mov	r2, r1
 80011a0:	4606      	mov	r6, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80011a2:	4916      	ldr	r1, [pc, #88]	; (80011fc <ES_WIFI_CloseServerConnection+0x64>)
 80011a4:	4628      	mov	r0, r5
 80011a6:	f003 fc9f 	bl	8004ae8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011aa:	462a      	mov	r2, r5
 80011ac:	4629      	mov	r1, r5
 80011ae:	4630      	mov	r0, r6
 80011b0:	f7ff fca0 	bl	8000af4 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 80011b4:	4604      	mov	r4, r0
 80011b6:	b158      	cbz	r0, 80011d0 <ES_WIFI_CloseServerConnection+0x38>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 80011b8:	4911      	ldr	r1, [pc, #68]	; (8001200 <ES_WIFI_CloseServerConnection+0x68>)
 80011ba:	4812      	ldr	r0, [pc, #72]	; (8001204 <ES_WIFI_CloseServerConnection+0x6c>)
 80011bc:	f240 728b 	movw	r2, #1931	; 0x78b
 80011c0:	f003 fc04 	bl	80049cc <iprintf>
 80011c4:	4810      	ldr	r0, [pc, #64]	; (8001208 <ES_WIFI_CloseServerConnection+0x70>)
 80011c6:	4629      	mov	r1, r5

  sprintf((char*)Obj->CmdData,"P5=10\r");
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  if(ret != ES_WIFI_STATUS_OK)
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 80011c8:	f003 fc00 	bl	80049cc <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
}
 80011cc:	4620      	mov	r0, r4
 80011ce:	bd70      	pop	{r4, r5, r6, pc}
  sprintf((char*)Obj->CmdData,"P5=10\r");
 80011d0:	490e      	ldr	r1, [pc, #56]	; (800120c <ES_WIFI_CloseServerConnection+0x74>)
 80011d2:	4628      	mov	r0, r5
 80011d4:	f003 fcb7 	bl	8004b46 <strcpy>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80011d8:	462a      	mov	r2, r5
 80011da:	4629      	mov	r1, r5
 80011dc:	4630      	mov	r0, r6
 80011de:	f7ff fc89 	bl	8000af4 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 80011e2:	4604      	mov	r4, r0
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d0f1      	beq.n	80011cc <ES_WIFI_CloseServerConnection+0x34>
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 80011e8:	4905      	ldr	r1, [pc, #20]	; (8001200 <ES_WIFI_CloseServerConnection+0x68>)
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <ES_WIFI_CloseServerConnection+0x6c>)
 80011ec:	f240 7294 	movw	r2, #1940	; 0x794
 80011f0:	f003 fbec 	bl	80049cc <iprintf>
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <ES_WIFI_CloseServerConnection+0x78>)
 80011f6:	4629      	mov	r1, r5
 80011f8:	e7e6      	b.n	80011c8 <ES_WIFI_CloseServerConnection+0x30>
 80011fa:	bf00      	nop
 80011fc:	08006661 	.word	0x08006661
 8001200:	080066d5 	.word	0x080066d5
 8001204:	08006727 	.word	0x08006727
 8001208:	08006782 	.word	0x08006782
 800120c:	0800679d 	.word	0x0800679d
 8001210:	080067a4 	.word	0x080067a4

08001214 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8001214:	b570      	push	{r4, r5, r6, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8001216:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 800121a:	460a      	mov	r2, r1
 800121c:	4606      	mov	r6, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800121e:	4916      	ldr	r1, [pc, #88]	; (8001278 <ES_WIFI_StopServerSingleConn+0x64>)
 8001220:	4628      	mov	r0, r5
 8001222:	f003 fc61 	bl	8004ae8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001226:	462a      	mov	r2, r5
 8001228:	4629      	mov	r1, r5
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff fc62 	bl	8000af4 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8001230:	4604      	mov	r4, r0
 8001232:	b158      	cbz	r0, 800124c <ES_WIFI_StopServerSingleConn+0x38>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 8001234:	4911      	ldr	r1, [pc, #68]	; (800127c <ES_WIFI_StopServerSingleConn+0x68>)
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <ES_WIFI_StopServerSingleConn+0x6c>)
 8001238:	f240 72aa 	movw	r2, #1962	; 0x7aa
 800123c:	f003 fbc6 	bl	80049cc <iprintf>
 8001240:	4810      	ldr	r0, [pc, #64]	; (8001284 <ES_WIFI_StopServerSingleConn+0x70>)
 8001242:	4629      	mov	r1, r5

  sprintf((char*)Obj->CmdData,"P5=0\r");
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  if(ret != ES_WIFI_STATUS_OK)
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8001244:	f003 fbc2 	bl	80049cc <iprintf>
    return ret;
  }

  UNLOCK_WIFI();
  return ret;
}
 8001248:	4620      	mov	r0, r4
 800124a:	bd70      	pop	{r4, r5, r6, pc}
  sprintf((char*)Obj->CmdData,"P5=0\r");
 800124c:	490e      	ldr	r1, [pc, #56]	; (8001288 <ES_WIFI_StopServerSingleConn+0x74>)
 800124e:	4628      	mov	r0, r5
 8001250:	f003 fc79 	bl	8004b46 <strcpy>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001254:	462a      	mov	r2, r5
 8001256:	4629      	mov	r1, r5
 8001258:	4630      	mov	r0, r6
 800125a:	f7ff fc4b 	bl	8000af4 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 800125e:	4604      	mov	r4, r0
 8001260:	2800      	cmp	r0, #0
 8001262:	d0f1      	beq.n	8001248 <ES_WIFI_StopServerSingleConn+0x34>
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8001264:	4905      	ldr	r1, [pc, #20]	; (800127c <ES_WIFI_StopServerSingleConn+0x68>)
 8001266:	4806      	ldr	r0, [pc, #24]	; (8001280 <ES_WIFI_StopServerSingleConn+0x6c>)
 8001268:	f240 72b3 	movw	r2, #1971	; 0x7b3
 800126c:	f003 fbae 	bl	80049cc <iprintf>
 8001270:	4806      	ldr	r0, [pc, #24]	; (800128c <ES_WIFI_StopServerSingleConn+0x78>)
 8001272:	4629      	mov	r1, r5
 8001274:	e7e6      	b.n	8001244 <ES_WIFI_StopServerSingleConn+0x30>
 8001276:	bf00      	nop
 8001278:	08006661 	.word	0x08006661
 800127c:	080066d5 	.word	0x080066d5
 8001280:	08006727 	.word	0x08006727
 8001284:	080067ba 	.word	0x080067ba
 8001288:	080067d7 	.word	0x080067d7
 800128c:	080067dd 	.word	0x080067dd

08001290 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001294:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8001298:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800129c:	bf28      	it	cs
 800129e:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80012a2:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 80012a6:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 80012a8:	f8a8 3000 	strh.w	r3, [r8]
{
 80012ac:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80012ae:	4628      	mov	r0, r5
 80012b0:	460a      	mov	r2, r1
 80012b2:	492e      	ldr	r1, [pc, #184]	; (800136c <ES_WIFI_SendData+0xdc>)
 80012b4:	461f      	mov	r7, r3
 80012b6:	f003 fc17 	bl	8004ae8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012ba:	462a      	mov	r2, r5
 80012bc:	4629      	mov	r1, r5
 80012be:	4630      	mov	r0, r6
 80012c0:	f7ff fc18 	bl	8000af4 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80012c4:	4604      	mov	r4, r0
 80012c6:	2800      	cmp	r0, #0
 80012c8:	d147      	bne.n	800135a <ES_WIFI_SendData+0xca>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80012ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80012cc:	4928      	ldr	r1, [pc, #160]	; (8001370 <ES_WIFI_SendData+0xe0>)
 80012ce:	2a01      	cmp	r2, #1
 80012d0:	bf38      	it	cc
 80012d2:	2201      	movcc	r2, #1
 80012d4:	4628      	mov	r0, r5
 80012d6:	f003 fc07 	bl	8004ae8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80012da:	462a      	mov	r2, r5
 80012dc:	4629      	mov	r1, r5
 80012de:	4630      	mov	r0, r6
 80012e0:	f7ff fc08 	bl	8000af4 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 80012e4:	4604      	mov	r4, r0
 80012e6:	bb80      	cbnz	r0, 800134a <ES_WIFI_SendData+0xba>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 80012e8:	4922      	ldr	r1, [pc, #136]	; (8001374 <ES_WIFI_SendData+0xe4>)
 80012ea:	463a      	mov	r2, r7
 80012ec:	4628      	mov	r0, r5
 80012ee:	f003 fbfb 	bl	8004ae8 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80012f2:	9500      	str	r5, [sp, #0]
 80012f4:	463b      	mov	r3, r7
 80012f6:	464a      	mov	r2, r9
 80012f8:	4629      	mov	r1, r5
 80012fa:	4630      	mov	r0, r6
 80012fc:	f7ff fc88 	bl	8000c10 <AT_RequestSendData>

      if(ret == ES_WIFI_STATUS_OK)
 8001300:	4604      	mov	r4, r0
 8001302:	b998      	cbnz	r0, 800132c <ES_WIFI_SendData+0x9c>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001304:	491c      	ldr	r1, [pc, #112]	; (8001378 <ES_WIFI_SendData+0xe8>)
 8001306:	4628      	mov	r0, r5
 8001308:	f003 fc4a 	bl	8004ba0 <strstr>
 800130c:	b1c8      	cbz	r0, 8001342 <ES_WIFI_SendData+0xb2>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800130e:	491b      	ldr	r1, [pc, #108]	; (800137c <ES_WIFI_SendData+0xec>)
 8001310:	481b      	ldr	r0, [pc, #108]	; (8001380 <ES_WIFI_SendData+0xf0>)
 8001312:	f640 0267 	movw	r2, #2151	; 0x867
 8001316:	f003 fb59 	bl	80049cc <iprintf>
 800131a:	481a      	ldr	r0, [pc, #104]	; (8001384 <ES_WIFI_SendData+0xf4>)
 800131c:	4629      	mov	r1, r5
 800131e:	f003 fb55 	bl	80049cc <iprintf>
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	f8a8 3000 	strh.w	r3, [r8]
 8001328:	2402      	movs	r4, #2
 800132a:	e00a      	b.n	8001342 <ES_WIFI_SendData+0xb2>
        DEBUG("Send Data command failed\n");
 800132c:	4913      	ldr	r1, [pc, #76]	; (800137c <ES_WIFI_SendData+0xec>)
 800132e:	4814      	ldr	r0, [pc, #80]	; (8001380 <ES_WIFI_SendData+0xf0>)
 8001330:	f640 026d 	movw	r2, #2157	; 0x86d
 8001334:	f003 fb4a 	bl	80049cc <iprintf>
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <ES_WIFI_SendData+0xf8>)
   DEBUG("P0 command failed\n");
 800133a:	f003 fbcd 	bl	8004ad8 <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 800133e:	2c02      	cmp	r4, #2
 8001340:	d0ef      	beq.n	8001322 <ES_WIFI_SendData+0x92>
  }
  UNLOCK_WIFI();
  return ret;
}
 8001342:	4620      	mov	r0, r4
 8001344:	b003      	add	sp, #12
 8001346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n");
 800134a:	490c      	ldr	r1, [pc, #48]	; (800137c <ES_WIFI_SendData+0xec>)
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <ES_WIFI_SendData+0xf0>)
 800134e:	f640 0272 	movw	r2, #2162	; 0x872
 8001352:	f003 fb3b 	bl	80049cc <iprintf>
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <ES_WIFI_SendData+0xfc>)
 8001358:	e7ef      	b.n	800133a <ES_WIFI_SendData+0xaa>
   DEBUG("P0 command failed\n");
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <ES_WIFI_SendData+0xec>)
 800135c:	4808      	ldr	r0, [pc, #32]	; (8001380 <ES_WIFI_SendData+0xf0>)
 800135e:	f640 0277 	movw	r2, #2167	; 0x877
 8001362:	f003 fb33 	bl	80049cc <iprintf>
 8001366:	480a      	ldr	r0, [pc, #40]	; (8001390 <ES_WIFI_SendData+0x100>)
 8001368:	e7e7      	b.n	800133a <ES_WIFI_SendData+0xaa>
 800136a:	bf00      	nop
 800136c:	08006661 	.word	0x08006661
 8001370:	08006816 	.word	0x08006816
 8001374:	0800681e 	.word	0x0800681e
 8001378:	08006827 	.word	0x08006827
 800137c:	080066d5 	.word	0x080066d5
 8001380:	08006727 	.word	0x08006727
 8001384:	0800682c 	.word	0x0800682c
 8001388:	08006847 	.word	0x08006847
 800138c:	08006860 	.word	0x08006860
 8001390:	08006872 	.word	0x08006872

08001394 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8001394:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001398:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 800139c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80013a0:	4606      	mov	r6, r0
 80013a2:	4690      	mov	r8, r2
 80013a4:	461f      	mov	r7, r3
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80013a6:	d867      	bhi.n	8001478 <ES_WIFI_ReceiveData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80013a8:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80013ac:	460a      	mov	r2, r1
 80013ae:	4628      	mov	r0, r5
 80013b0:	4932      	ldr	r1, [pc, #200]	; (800147c <ES_WIFI_ReceiveData+0xe8>)
 80013b2:	f003 fb99 	bl	8004ae8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013b6:	462a      	mov	r2, r5
 80013b8:	4629      	mov	r1, r5
 80013ba:	4630      	mov	r0, r6
 80013bc:	f7ff fb9a 	bl	8000af4 <AT_ExecuteCommand>
 80013c0:	4604      	mov	r4, r0
 80013c2:	4682      	mov	sl, r0

    if(ret == ES_WIFI_STATUS_OK)
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d149      	bne.n	800145c <ES_WIFI_ReceiveData+0xc8>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80013c8:	492d      	ldr	r1, [pc, #180]	; (8001480 <ES_WIFI_ReceiveData+0xec>)
 80013ca:	463a      	mov	r2, r7
 80013cc:	4628      	mov	r0, r5
 80013ce:	f003 fb8b 	bl	8004ae8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013d2:	462a      	mov	r2, r5
 80013d4:	4629      	mov	r1, r5
 80013d6:	4630      	mov	r0, r6
 80013d8:	f7ff fb8c 	bl	8000af4 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80013dc:	4604      	mov	r4, r0
 80013de:	bb88      	cbnz	r0, 8001444 <ES_WIFI_ReceiveData+0xb0>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80013e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80013e2:	4928      	ldr	r1, [pc, #160]	; (8001484 <ES_WIFI_ReceiveData+0xf0>)
 80013e4:	2a01      	cmp	r2, #1
 80013e6:	bf38      	it	cc
 80013e8:	2201      	movcc	r2, #1
 80013ea:	4628      	mov	r0, r5
 80013ec:	f003 fb7c 	bl	8004ae8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80013f0:	462a      	mov	r2, r5
 80013f2:	4629      	mov	r1, r5
 80013f4:	4630      	mov	r0, r6
 80013f6:	f7ff fb7d 	bl	8000af4 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80013fa:	4604      	mov	r4, r0
 80013fc:	b9d0      	cbnz	r0, 8001434 <ES_WIFI_ReceiveData+0xa0>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80013fe:	4922      	ldr	r1, [pc, #136]	; (8001488 <ES_WIFI_ReceiveData+0xf4>)
 8001400:	4628      	mov	r0, r5
 8001402:	f003 fba0 	bl	8004b46 <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001406:	f8cd 9000 	str.w	r9, [sp]
 800140a:	463b      	mov	r3, r7
 800140c:	4642      	mov	r2, r8
 800140e:	4629      	mov	r1, r5
 8001410:	4630      	mov	r0, r6
 8001412:	f7ff fbab 	bl	8000b6c <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 8001416:	4604      	mov	r4, r0
 8001418:	b140      	cbz	r0, 800142c <ES_WIFI_ReceiveData+0x98>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800141a:	491c      	ldr	r1, [pc, #112]	; (800148c <ES_WIFI_ReceiveData+0xf8>)
 800141c:	481c      	ldr	r0, [pc, #112]	; (8001490 <ES_WIFI_ReceiveData+0xfc>)
 800141e:	f640 1208 	movw	r2, #2312	; 0x908
 8001422:	f003 fad3 	bl	80049cc <iprintf>
 8001426:	481b      	ldr	r0, [pc, #108]	; (8001494 <ES_WIFI_ReceiveData+0x100>)
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 8001428:	f003 fb56 	bl	8004ad8 <puts>
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 800142c:	4620      	mov	r0, r4
 800142e:	b002      	add	sp, #8
 8001430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("setting timeout failed\n");
 8001434:	4915      	ldr	r1, [pc, #84]	; (800148c <ES_WIFI_ReceiveData+0xf8>)
 8001436:	4816      	ldr	r0, [pc, #88]	; (8001490 <ES_WIFI_ReceiveData+0xfc>)
 8001438:	f640 120d 	movw	r2, #2317	; 0x90d
 800143c:	f003 fac6 	bl	80049cc <iprintf>
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <ES_WIFI_ReceiveData+0x104>)
 8001442:	e7f1      	b.n	8001428 <ES_WIFI_ReceiveData+0x94>
        DEBUG("setting requested len failed\n");
 8001444:	4911      	ldr	r1, [pc, #68]	; (800148c <ES_WIFI_ReceiveData+0xf8>)
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <ES_WIFI_ReceiveData+0xfc>)
 8001448:	f640 1212 	movw	r2, #2322	; 0x912
 800144c:	f003 fabe 	bl	80049cc <iprintf>
 8001450:	4812      	ldr	r0, [pc, #72]	; (800149c <ES_WIFI_ReceiveData+0x108>)
 8001452:	f003 fb41 	bl	8004ad8 <puts>
        *Receivedlen = 0;
 8001456:	f8a9 a000 	strh.w	sl, [r9]
 800145a:	e7e7      	b.n	800142c <ES_WIFI_ReceiveData+0x98>
      DEBUG("setting socket for read failed\n");
 800145c:	f640 1218 	movw	r2, #2328	; 0x918
 8001460:	490a      	ldr	r1, [pc, #40]	; (800148c <ES_WIFI_ReceiveData+0xf8>)
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <ES_WIFI_ReceiveData+0xfc>)
 8001464:	f003 fab2 	bl	80049cc <iprintf>
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <ES_WIFI_ReceiveData+0x10c>)
 800146a:	f003 fb35 	bl	8004ad8 <puts>
      issue15++;
 800146e:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <ES_WIFI_ReceiveData+0x110>)
 8001470:	6813      	ldr	r3, [r2, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e7d9      	b.n	800142c <ES_WIFI_ReceiveData+0x98>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001478:	2402      	movs	r4, #2
 800147a:	e7d7      	b.n	800142c <ES_WIFI_ReceiveData+0x98>
 800147c:	08006661 	.word	0x08006661
 8001480:	08006894 	.word	0x08006894
 8001484:	0800689b 	.word	0x0800689b
 8001488:	080068a3 	.word	0x080068a3
 800148c:	080066d5 	.word	0x080066d5
 8001490:	08006727 	.word	0x08006727
 8001494:	080068a7 	.word	0x080068a7
 8001498:	080068c5 	.word	0x080068c5
 800149c:	080068dc 	.word	0x080068dc
 80014a0:	080068f9 	.word	0x080068f9
 80014a4:	200008c4 	.word	0x200008c4

080014a8 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80014a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t        loop_per_us = 0;
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 80014aa:	4c17      	ldr	r4, [pc, #92]	; (8001508 <SPI_WIFI_DelayUs+0x60>)
 80014ac:	4f17      	ldr	r7, [pc, #92]	; (800150c <SPI_WIFI_DelayUs+0x64>)
  volatile        uint32_t ct = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	9301      	str	r3, [sp, #4]
  if (cycle_per_loop == 0 ) 
 80014b2:	6823      	ldr	r3, [r4, #0]
{
 80014b4:	4605      	mov	r5, r0
  if (cycle_per_loop == 0 ) 
 80014b6:	b98b      	cbnz	r3, 80014dc <SPI_WIFI_DelayUs+0x34>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014be:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t t = 0;
     ct = cycle_per_ms;
 80014c2:	9301      	str	r3, [sp, #4]
     t = HAL_GetTick();
 80014c4:	f000 fdd6 	bl	8002074 <HAL_GetTick>
 80014c8:	4606      	mov	r6, r0
     while(ct) ct--;
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	b99b      	cbnz	r3, 80014f6 <SPI_WIFI_DelayUs+0x4e>
     cycle_per_loop = HAL_GetTick()-t;
 80014ce:	f000 fdd1 	bl	8002074 <HAL_GetTick>
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80014d2:	1b80      	subs	r0, r0, r6
 80014d4:	bf0a      	itet	eq
 80014d6:	2301      	moveq	r3, #1
     cycle_per_loop = HAL_GetTick()-t;
 80014d8:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80014da:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <SPI_WIFI_DelayUs+0x68>)
 80014de:	6838      	ldr	r0, [r7, #0]
 80014e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	fbb0 f0f3 	udiv	r0, r0, r3
  ct = n * loop_per_us;
 80014ea:	4368      	muls	r0, r5
 80014ec:	9001      	str	r0, [sp, #4]
  while(ct) ct--;
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	b92b      	cbnz	r3, 80014fe <SPI_WIFI_DelayUs+0x56>
  return;
}
 80014f2:	b003      	add	sp, #12
 80014f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 80014f6:	9b01      	ldr	r3, [sp, #4]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	e7e5      	b.n	80014ca <SPI_WIFI_DelayUs+0x22>
  while(ct) ct--;
 80014fe:	9b01      	ldr	r3, [sp, #4]
 8001500:	3b01      	subs	r3, #1
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	e7f3      	b.n	80014ee <SPI_WIFI_DelayUs+0x46>
 8001506:	bf00      	nop
 8001508:	200008c8 	.word	0x200008c8
 800150c:	20000030 	.word	0x20000030
 8001510:	000f4240 	.word	0x000f4240

08001514 <wait_spi_tx_event>:
{
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 8001518:	f000 fdac 	bl	8002074 <HAL_GetTick>
  while (spi_tx_event==1)
 800151c:	4e07      	ldr	r6, [pc, #28]	; (800153c <wait_spi_tx_event+0x28>)
  int tickstart = HAL_GetTick();
 800151e:	4604      	mov	r4, r0
  while (spi_tx_event==1)
 8001520:	6873      	ldr	r3, [r6, #4]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d001      	beq.n	800152a <wait_spi_tx_event+0x16>
  return 0;
 8001526:	2000      	movs	r0, #0
}
 8001528:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 800152a:	f000 fda3 	bl	8002074 <HAL_GetTick>
 800152e:	1b00      	subs	r0, r0, r4
 8001530:	42a8      	cmp	r0, r5
 8001532:	d9f5      	bls.n	8001520 <wait_spi_tx_event+0xc>
      return -1;
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	e7f6      	b.n	8001528 <wait_spi_tx_event+0x14>
 800153a:	bf00      	nop
 800153c:	200008c8 	.word	0x200008c8

08001540 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001542:	4840      	ldr	r0, [pc, #256]	; (8001644 <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001544:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001546:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001548:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800154c:	659a      	str	r2, [r3, #88]	; 0x58
 800154e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001550:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001552:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001556:	9201      	str	r2, [sp, #4]
 8001558:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800155c:	f042 0202 	orr.w	r2, r2, #2
 8001560:	64da      	str	r2, [r3, #76]	; 0x4c
 8001562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001564:	f002 0202 	and.w	r2, r2, #2
 8001568:	9202      	str	r2, [sp, #8]
 800156a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800156e:	f042 0204 	orr.w	r2, r2, #4
 8001572:	64da      	str	r2, [r3, #76]	; 0x4c
 8001574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001576:	f002 0204 	and.w	r2, r2, #4
 800157a:	9203      	str	r2, [sp, #12]
 800157c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800157e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001580:	f042 0210 	orr.w	r2, r2, #16
 8001584:	64da      	str	r2, [r3, #76]	; 0x4c
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800158c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001594:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001596:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001598:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800159a:	f000 fef7 	bl	800238c <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800159e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80015a2:	a905      	add	r1, sp, #20
 80015a4:	4827      	ldr	r0, [pc, #156]	; (8001644 <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80015a6:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80015aa:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80015ae:	f000 fe09 	bl	80021c4 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <SPI_WIFI_MspInit+0x108>)
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80015b4:	4825      	ldr	r0, [pc, #148]	; (800164c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80015b6:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80015b8:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80015ba:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80015be:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80015c2:	f000 fdff 	bl	80021c4 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 80015c6:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80015ca:	a905      	add	r1, sp, #20
 80015cc:	481f      	ldr	r0, [pc, #124]	; (800164c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = 0;
 80015ce:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80015d0:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80015d4:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80015d8:	f000 fdf4 	bl	80021c4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80015dc:	4622      	mov	r2, r4
 80015de:	4621      	mov	r1, r4
 80015e0:	481a      	ldr	r0, [pc, #104]	; (800164c <SPI_WIFI_MspInit+0x10c>)
 80015e2:	f000 fed3 	bl	800238c <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80015e6:	a905      	add	r1, sp, #20
 80015e8:	4818      	ldr	r0, [pc, #96]	; (800164c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80015ea:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80015ec:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80015f0:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80015f4:	f000 fde6 	bl	80021c4 <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80015f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80015fc:	a905      	add	r1, sp, #20
 80015fe:	4814      	ldr	r0, [pc, #80]	; (8001650 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001600:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001602:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001606:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800160a:	f000 fddb 	bl	80021c4 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 800160e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001612:	a905      	add	r1, sp, #20
 8001614:	480e      	ldr	r0, [pc, #56]	; (8001650 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001616:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001618:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800161c:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001620:	f000 fdd0 	bl	80021c4 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001624:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800162a:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800162c:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800162e:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001632:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001636:	f000 fdc5 	bl	80021c4 <HAL_GPIO_Init>
}
 800163a:	b00b      	add	sp, #44	; 0x2c
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400
 8001648:	10110000 	.word	0x10110000
 800164c:	48001000 	.word	0x48001000
 8001650:	48000800 	.word	0x48000800

08001654 <SPI_WIFI_ResetModule>:
{
 8001654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8001656:	f000 fd0d 	bl	8002074 <HAL_GetTick>
  WIFI_RESET_MODULE();
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 8001660:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 8001662:	482e      	ldr	r0, [pc, #184]	; (800171c <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001664:	4f2e      	ldr	r7, [pc, #184]	; (8001720 <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 8001666:	f000 fe91 	bl	800238c <HAL_GPIO_WritePin>
 800166a:	200a      	movs	r0, #10
 800166c:	f000 fd08 	bl	8002080 <HAL_Delay>
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	4829      	ldr	r0, [pc, #164]	; (800171c <SPI_WIFI_ResetModule+0xc8>)
 8001678:	f000 fe88 	bl	800238c <HAL_GPIO_WritePin>
 800167c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001680:	f000 fcfe 	bl	8002080 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001684:	4825      	ldr	r0, [pc, #148]	; (800171c <SPI_WIFI_ResetModule+0xc8>)
 8001686:	2200      	movs	r2, #0
 8001688:	2101      	movs	r1, #1
 800168a:	f000 fe7f 	bl	800238c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800168e:	200f      	movs	r0, #15
 8001690:	f7ff ff0a 	bl	80014a8 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 8001694:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 8001696:	4821      	ldr	r0, [pc, #132]	; (800171c <SPI_WIFI_ResetModule+0xc8>)
 8001698:	2102      	movs	r1, #2
 800169a:	f000 fe71 	bl	8002380 <HAL_GPIO_ReadPin>
 800169e:	2801      	cmp	r0, #1
 80016a0:	4602      	mov	r2, r0
 80016a2:	d020      	beq.n	80016e6 <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS();
 80016a4:	2201      	movs	r2, #1
 80016a6:	481d      	ldr	r0, [pc, #116]	; (800171c <SPI_WIFI_ResetModule+0xc8>)
 80016a8:	4611      	mov	r1, r2
 80016aa:	f000 fe6f 	bl	800238c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80016ae:	f89d 3000 	ldrb.w	r3, [sp]
 80016b2:	2b15      	cmp	r3, #21
 80016b4:	d12e      	bne.n	8001714 <SPI_WIFI_ResetModule+0xc0>
 80016b6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80016ba:	2b15      	cmp	r3, #21
 80016bc:	d12a      	bne.n	8001714 <SPI_WIFI_ResetModule+0xc0>
 80016be:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80016c2:	2b0d      	cmp	r3, #13
 80016c4:	d126      	bne.n	8001714 <SPI_WIFI_ResetModule+0xc0>
 80016c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d122      	bne.n	8001714 <SPI_WIFI_ResetModule+0xc0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80016ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80016d2:	2b3e      	cmp	r3, #62	; 0x3e
 80016d4:	d11e      	bne.n	8001714 <SPI_WIFI_ResetModule+0xc0>
 80016d6:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80016da:	3820      	subs	r0, #32
 80016dc:	bf18      	it	ne
 80016de:	f04f 30ff 	movne.w	r0, #4294967295
}
 80016e2:	b003      	add	sp, #12
 80016e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80016e6:	eb0d 0104 	add.w	r1, sp, r4
 80016ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ee:	4638      	mov	r0, r7
 80016f0:	f002 f8f5 	bl	80038de <HAL_SPI_Receive>
 80016f4:	4606      	mov	r6, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80016f6:	f000 fcbd 	bl	8002074 <HAL_GetTick>
 80016fa:	1b40      	subs	r0, r0, r5
    count += 2;
 80016fc:	3402      	adds	r4, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80016fe:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8001702:	b2e4      	uxtb	r4, r4
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001704:	d201      	bcs.n	800170a <SPI_WIFI_ResetModule+0xb6>
 8001706:	2e00      	cmp	r6, #0
 8001708:	d0c5      	beq.n	8001696 <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS();
 800170a:	2201      	movs	r2, #1
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <SPI_WIFI_ResetModule+0xc8>)
 800170e:	4611      	mov	r1, r2
 8001710:	f000 fe3c 	bl	800238c <HAL_GPIO_WritePin>
    return -1;
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	e7e3      	b.n	80016e2 <SPI_WIFI_ResetModule+0x8e>
 800171a:	bf00      	nop
 800171c:	48001000 	.word	0x48001000
 8001720:	200008ec 	.word	0x200008ec

08001724 <SPI_WIFI_Init>:
{
 8001724:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8001726:	4605      	mov	r5, r0
 8001728:	bb78      	cbnz	r0, 800178a <SPI_WIFI_Init+0x66>
    hspi.Instance               = SPI3;
 800172a:	4c1c      	ldr	r4, [pc, #112]	; (800179c <SPI_WIFI_Init+0x78>)
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <SPI_WIFI_Init+0x7c>)
 800172e:	6023      	str	r3, [r4, #0]
    SPI_WIFI_MspInit(&hspi);
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff ff05 	bl	8001540 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001736:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800173a:	e9c4 3501 	strd	r3, r5, [r4, #4]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800173e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001742:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001746:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800174a:	4620      	mov	r0, r4
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800174c:	2310      	movs	r3, #16
 800174e:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001752:	e9c4 5508 	strd	r5, r5, [r4, #32]
    hspi.Init.CRCPolynomial     = 0;
 8001756:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800175a:	6165      	str	r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800175c:	f001 fe69 	bl	8003432 <HAL_SPI_Init>
 8001760:	4602      	mov	r2, r0
 8001762:	b9b8      	cbnz	r0, 8001794 <SPI_WIFI_Init+0x70>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001764:	4601      	mov	r1, r0
 8001766:	9001      	str	r0, [sp, #4]
 8001768:	2007      	movs	r0, #7
 800176a:	f000 fcaf 	bl	80020cc <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800176e:	2007      	movs	r0, #7
 8001770:	f000 fcde 	bl	8002130 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001774:	9a01      	ldr	r2, [sp, #4]
 8001776:	2033      	movs	r0, #51	; 0x33
 8001778:	4611      	mov	r1, r2
 800177a:	f000 fca7 	bl	80020cc <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800177e:	2033      	movs	r0, #51	; 0x33
 8001780:	f000 fcd6 	bl	8002130 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8001784:	200a      	movs	r0, #10
 8001786:	f7ff fe8f 	bl	80014a8 <SPI_WIFI_DelayUs>
}
 800178a:	b003      	add	sp, #12
 800178c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc= SPI_WIFI_ResetModule();
 8001790:	f7ff bf60 	b.w	8001654 <SPI_WIFI_ResetModule>
}
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	b003      	add	sp, #12
 800179a:	bd30      	pop	{r4, r5, pc}
 800179c:	200008ec 	.word	0x200008ec
 80017a0:	40003c00 	.word	0x40003c00

080017a4 <SPI_WIFI_DeInit>:
{
 80017a4:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 80017a6:	4802      	ldr	r0, [pc, #8]	; (80017b0 <SPI_WIFI_DeInit+0xc>)
 80017a8:	f001 fec8 	bl	800353c <HAL_SPI_DeInit>
}
 80017ac:	2000      	movs	r0, #0
 80017ae:	bd08      	pop	{r3, pc}
 80017b0:	200008ec 	.word	0x200008ec

080017b4 <SPI_WIFI_ReceiveData>:
{
 80017b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b8:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS();
 80017ba:	2201      	movs	r2, #1
{
 80017bc:	4604      	mov	r4, r0
 80017be:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS();
 80017c0:	4836      	ldr	r0, [pc, #216]	; (800189c <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event==1)
 80017c2:	4e37      	ldr	r6, [pc, #220]	; (80018a0 <SPI_WIFI_ReceiveData+0xec>)
  WIFI_DISABLE_NSS();
 80017c4:	4611      	mov	r1, r2
 80017c6:	f000 fde1 	bl	800238c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 80017ca:	2003      	movs	r0, #3
 80017cc:	f7ff fe6c 	bl	80014a8 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 80017d0:	f000 fc50 	bl	8002074 <HAL_GetTick>
 80017d4:	46b1      	mov	r9, r6
 80017d6:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event==1)
 80017d8:	68b3      	ldr	r3, [r6, #8]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d01a      	beq.n	8001814 <SPI_WIFI_ReceiveData+0x60>
  WIFI_ENABLE_NSS();
 80017de:	482f      	ldr	r0, [pc, #188]	; (800189c <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 80017e0:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800189c <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80017e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80018a4 <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS();
 80017e8:	2200      	movs	r2, #0
 80017ea:	2101      	movs	r1, #1
 80017ec:	f000 fdce 	bl	800238c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80017f0:	200f      	movs	r0, #15
 80017f2:	f7ff fe59 	bl	80014a8 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80017f6:	3402      	adds	r4, #2
 80017f8:	2500      	movs	r5, #0
 80017fa:	2102      	movs	r1, #2
 80017fc:	4658      	mov	r0, fp
 80017fe:	f000 fdbf 	bl	8002380 <HAL_GPIO_ReadPin>
 8001802:	2801      	cmp	r0, #1
 8001804:	b22e      	sxth	r6, r5
 8001806:	d00d      	beq.n	8001824 <SPI_WIFI_ReceiveData+0x70>
  WIFI_DISABLE_NSS();
 8001808:	2201      	movs	r2, #1
 800180a:	4824      	ldr	r0, [pc, #144]	; (800189c <SPI_WIFI_ReceiveData+0xe8>)
 800180c:	4611      	mov	r1, r2
 800180e:	f000 fdbd 	bl	800238c <HAL_GPIO_WritePin>
  return length;
 8001812:	e01a      	b.n	800184a <SPI_WIFI_ReceiveData+0x96>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001814:	f000 fc2e 	bl	8002074 <HAL_GetTick>
 8001818:	1b40      	subs	r0, r0, r5
 800181a:	4580      	cmp	r8, r0
 800181c:	d2dc      	bcs.n	80017d8 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800181e:	f06f 0602 	mvn.w	r6, #2
 8001822:	e012      	b.n	800184a <SPI_WIFI_ReceiveData+0x96>
    if((length < len) || (!len))
 8001824:	42af      	cmp	r7, r5
 8001826:	dc01      	bgt.n	800182c <SPI_WIFI_ReceiveData+0x78>
 8001828:	2f00      	cmp	r7, #0
 800182a:	d1ed      	bne.n	8001808 <SPI_WIFI_ReceiveData+0x54>
      spi_rx_event=1;
 800182c:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800182e:	a901      	add	r1, sp, #4
 8001830:	4650      	mov	r0, sl
      spi_rx_event=1;
 8001832:	f8c9 200c 	str.w	r2, [r9, #12]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001836:	f002 fa43 	bl	8003cc0 <HAL_SPI_Receive_IT>
 800183a:	2201      	movs	r2, #1
 800183c:	b148      	cbz	r0, 8001852 <SPI_WIFI_ReceiveData+0x9e>
        WIFI_DISABLE_NSS();
 800183e:	4817      	ldr	r0, [pc, #92]	; (800189c <SPI_WIFI_ReceiveData+0xe8>)
 8001840:	4611      	mov	r1, r2
 8001842:	f000 fda3 	bl	800238c <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8001846:	f04f 36ff 	mov.w	r6, #4294967295
}
 800184a:	4630      	mov	r0, r6
 800184c:	b003      	add	sp, #12
 800184e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8001852:	f000 fc0f 	bl	8002074 <HAL_GetTick>
 8001856:	4606      	mov	r6, r0
  while (spi_rx_event==1)
 8001858:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d104      	bne.n	800186a <SPI_WIFI_ReceiveData+0xb6>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001860:	f000 fc08 	bl	8002074 <HAL_GetTick>
 8001864:	1b80      	subs	r0, r0, r6
 8001866:	4580      	cmp	r8, r0
 8001868:	d2f6      	bcs.n	8001858 <SPI_WIFI_ReceiveData+0xa4>
      pData[0] = tmp[0];
 800186a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800186e:	f804 3c02 	strb.w	r3, [r4, #-2]
      pData[1] = tmp[1];
 8001872:	3502      	adds	r5, #2
 8001874:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001878:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 800187c:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8001880:	f104 0402 	add.w	r4, r4, #2
 8001884:	d1b9      	bne.n	80017fa <SPI_WIFI_ReceiveData+0x46>
        WIFI_DISABLE_NSS();
 8001886:	2201      	movs	r2, #1
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <SPI_WIFI_ReceiveData+0xe8>)
 800188a:	4611      	mov	r1, r2
 800188c:	f000 fd7e 	bl	800238c <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001890:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();
 8001894:	f7ff fede 	bl	8001654 <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001898:	e7d7      	b.n	800184a <SPI_WIFI_ReceiveData+0x96>
 800189a:	bf00      	nop
 800189c:	48001000 	.word	0x48001000
 80018a0:	200008c8 	.word	0x200008c8
 80018a4:	200008ec 	.word	0x200008ec

080018a8 <SPI_WIFI_SendData>:
{
 80018a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018ac:	4605      	mov	r5, r0
 80018ae:	460c      	mov	r4, r1
 80018b0:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 80018b2:	f000 fbdf 	bl	8002074 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY()==0)
 80018b6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001950 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 80018ba:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY()==0)
 80018bc:	2102      	movs	r1, #2
 80018be:	4648      	mov	r0, r9
 80018c0:	f000 fd5e 	bl	8002380 <HAL_GPIO_ReadPin>
 80018c4:	2801      	cmp	r0, #1
 80018c6:	4606      	mov	r6, r0
 80018c8:	d11b      	bne.n	8001902 <SPI_WIFI_SendData+0x5a>
  cmddata_rdy_rising_event=1;
 80018ca:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001958 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 80018ce:	4601      	mov	r1, r0
  cmddata_rdy_rising_event=1;
 80018d0:	f8c8 0008 	str.w	r0, [r8, #8]
  WIFI_ENABLE_NSS();
 80018d4:	2200      	movs	r2, #0
 80018d6:	481e      	ldr	r0, [pc, #120]	; (8001950 <SPI_WIFI_SendData+0xa8>)
 80018d8:	f000 fd58 	bl	800238c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80018dc:	200f      	movs	r0, #15
 80018de:	f7ff fde3 	bl	80014a8 <SPI_WIFI_DelayUs>
  if (len > 1)
 80018e2:	2c01      	cmp	r4, #1
 80018e4:	d919      	bls.n	800191a <SPI_WIFI_SendData+0x72>
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 80018e8:	f8c8 6004 	str.w	r6, [r8, #4]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80018ec:	0862      	lsrs	r2, r4, #1
 80018ee:	4629      	mov	r1, r5
 80018f0:	f002 f90c 	bl	8003b0c <HAL_SPI_Transmit_IT>
 80018f4:	b170      	cbz	r0, 8001914 <SPI_WIFI_SendData+0x6c>
      WIFI_DISABLE_NSS();
 80018f6:	2201      	movs	r2, #1
 80018f8:	4815      	ldr	r0, [pc, #84]	; (8001950 <SPI_WIFI_SendData+0xa8>)
 80018fa:	4611      	mov	r1, r2
 80018fc:	f000 fd46 	bl	800238c <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 8001900:	e005      	b.n	800190e <SPI_WIFI_SendData+0x66>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001902:	f000 fbb7 	bl	8002074 <HAL_GetTick>
 8001906:	eba0 0008 	sub.w	r0, r0, r8
 800190a:	4287      	cmp	r7, r0
 800190c:	d2d6      	bcs.n	80018bc <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 800190e:	f04f 30ff 	mov.w	r0, #4294967295
 8001912:	e019      	b.n	8001948 <SPI_WIFI_SendData+0xa0>
    wait_spi_tx_event(timeout);
 8001914:	4638      	mov	r0, r7
 8001916:	f7ff fdfd 	bl	8001514 <wait_spi_tx_event>
  if ( len & 1)
 800191a:	07e3      	lsls	r3, r4, #31
 800191c:	d513      	bpl.n	8001946 <SPI_WIFI_SendData+0x9e>
    Padding[0] = pdata[len-1];
 800191e:	4425      	add	r5, r4
    spi_tx_event=1;
 8001920:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 8001922:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8001926:	f88d 3004 	strb.w	r3, [sp, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800192a:	480a      	ldr	r0, [pc, #40]	; (8001954 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 800192c:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8001930:	230a      	movs	r3, #10
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001932:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8001934:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001938:	f002 f8e8 	bl	8003b0c <HAL_SPI_Transmit_IT>
 800193c:	2800      	cmp	r0, #0
 800193e:	d1da      	bne.n	80018f6 <SPI_WIFI_SendData+0x4e>
    wait_spi_tx_event(timeout);
 8001940:	4638      	mov	r0, r7
 8001942:	f7ff fde7 	bl	8001514 <wait_spi_tx_event>
  return len;
 8001946:	b220      	sxth	r0, r4
}
 8001948:	b003      	add	sp, #12
 800194a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800194e:	bf00      	nop
 8001950:	48001000 	.word	0x48001000
 8001954:	200008ec 	.word	0x200008ec
 8001958:	200008c8 	.word	0x200008c8

0800195c <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 800195c:	f000 bb90 	b.w	8002080 <HAL_Delay>

08001960 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <HAL_SPI_RxCpltCallback+0xc>)
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	b10a      	cbz	r2, 800196a <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  }
}
 800196a:	4770      	bx	lr
 800196c:	200008c8 	.word	0x200008c8

08001970 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_SPI_TxCpltCallback+0xc>)
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	b10a      	cbz	r2, 800197a <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
  }
}
 800197a:	4770      	bx	lr
 800197c:	200008c8 	.word	0x200008c8

08001980 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event==1)  
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <SPI_WIFI_ISR+0x10>)
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001986:	bf04      	itt	eq
 8001988:	2200      	moveq	r2, #0
 800198a:	609a      	streq	r2, [r3, #8]
   }
}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200008c8 	.word	0x200008c8

08001994 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8001994:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <WIFI_Init+0x30>)
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <WIFI_Init+0x34>)
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <WIFI_Init+0x38>)
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <WIFI_Init+0x3c>)
 80019a2:	490c      	ldr	r1, [pc, #48]	; (80019d4 <WIFI_Init+0x40>)
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <WIFI_Init+0x44>)
 80019a6:	f7ff f9dd 	bl	8000d64 <ES_WIFI_RegisterBusIO>
 80019aa:	b940      	cbnz	r0, 80019be <WIFI_Init+0x2a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80019ac:	480a      	ldr	r0, [pc, #40]	; (80019d8 <WIFI_Init+0x44>)
 80019ae:	f7ff f977 	bl	8000ca0 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80019b2:	3800      	subs	r0, #0
 80019b4:	bf18      	it	ne
 80019b6:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80019b8:	b003      	add	sp, #12
 80019ba:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80019be:	2001      	movs	r0, #1
 80019c0:	e7fa      	b.n	80019b8 <WIFI_Init+0x24>
 80019c2:	bf00      	nop
 80019c4:	080017b5 	.word	0x080017b5
 80019c8:	080018a9 	.word	0x080018a9
 80019cc:	080017a5 	.word	0x080017a5
 80019d0:	0800195d 	.word	0x0800195d
 80019d4:	08001725 	.word	0x08001725
 80019d8:	20000950 	.word	0x20000950

080019dc <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80019dc:	b508      	push	{r3, lr}
 80019de:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80019e0:	460a      	mov	r2, r1
 80019e2:	4601      	mov	r1, r0
 80019e4:	4806      	ldr	r0, [pc, #24]	; (8001a00 <WIFI_Connect+0x24>)
 80019e6:	f7ff f9cf 	bl	8000d88 <ES_WIFI_Connect>
 80019ea:	b930      	cbnz	r0, 80019fa <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <WIFI_Connect+0x24>)
 80019ee:	f7ff fa27 	bl	8000e40 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80019f2:	3800      	subs	r0, #0
 80019f4:	bf18      	it	ne
 80019f6:	2001      	movne	r0, #1
    {
       ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80019f8:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80019fa:	2001      	movs	r0, #1
 80019fc:	e7fc      	b.n	80019f8 <WIFI_Connect+0x1c>
 80019fe:	bf00      	nop
 8001a00:	20000950 	.word	0x20000950

08001a04 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8001a04:	4601      	mov	r1, r0
 8001a06:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <WIFI_GetMAC_Address+0x14>)
 8001a0a:	f7ff fa8d 	bl	8000f28 <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001a0e:	3800      	subs	r0, #0
 8001a10:	bf18      	it	ne
 8001a12:	2001      	movne	r0, #1
 8001a14:	bd08      	pop	{r3, pc}
 8001a16:	bf00      	nop
 8001a18:	20000950 	.word	0x20000950

08001a1c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8001a1c:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8001a1e:	4d06      	ldr	r5, [pc, #24]	; (8001a38 <WIFI_GetIP_Address+0x1c>)
{
 8001a20:	4604      	mov	r4, r0
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8001a22:	4628      	mov	r0, r5
 8001a24:	f7ff f9f0 	bl	8000e08 <ES_WIFI_IsConnected>
 8001a28:	2801      	cmp	r0, #1
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8001a2a:	bf03      	ittte	eq
 8001a2c:	f8d5 30d5 	ldreq.w	r3, [r5, #213]	; 0xd5
 8001a30:	6023      	streq	r3, [r4, #0]
    ret = WIFI_STATUS_OK;
 8001a32:	2000      	moveq	r0, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001a34:	2001      	movne	r0, #1
  }
  return ret;
}
 8001a36:	bd38      	pop	{r3, r4, r5, pc}
 8001a38:	20000950 	.word	0x20000950

08001a3c <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 8001a3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
  conn.LocalPort = port;
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001a3e:	3900      	subs	r1, #0
 8001a40:	bf18      	it	ne
 8001a42:	2101      	movne	r1, #1
  conn.LocalPort = port;
 8001a44:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  conn.Number = socket;
 8001a48:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001a4c:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.Backlog = backlog;
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001a50:	4806      	ldr	r0, [pc, #24]	; (8001a6c <WIFI_StartServer+0x30>)
  conn.LocalPort = port;
 8001a52:	f8ad 3008 	strh.w	r3, [sp, #8]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001a56:	a901      	add	r1, sp, #4
  conn.Backlog = backlog;
 8001a58:	f88d 2014 	strb.w	r2, [sp, #20]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001a5c:	f7ff fa82 	bl	8000f64 <ES_WIFI_StartServerSingleConn>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001a60:	3800      	subs	r0, #0
 8001a62:	bf18      	it	ne
 8001a64:	2001      	movne	r0, #1
 8001a66:	b007      	add	sp, #28
 8001a68:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a6c:	20000950 	.word	0x20000950

08001a70 <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 8001a70:	b530      	push	{r4, r5, lr}
 8001a72:	b087      	sub	sp, #28
 8001a74:	4614      	mov	r4, r2
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 8001a76:	f88d 0005 	strb.w	r0, [sp, #5]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8001a7a:	aa01      	add	r2, sp, #4
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <WIFI_WaitServerConnection+0x44>)
{
 8001a7e:	461d      	mov	r5, r3
  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8001a80:	f7ff faca 	bl	8001018 <ES_WIFI_WaitServerConnection>

  if (ES_WIFI_STATUS_OK == ret)
 8001a84:	b948      	cbnz	r0, 8001a9a <WIFI_WaitServerConnection+0x2a>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 8001a86:	b115      	cbz	r5, 8001a8e <WIFI_WaitServerConnection+0x1e>
 8001a88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001a8c:	802b      	strh	r3, [r5, #0]
    if (RemoteIp)
 8001a8e:	b114      	cbz	r4, 8001a96 <WIFI_WaitServerConnection+0x26>
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 8001a90:	f8dd 300a 	ldr.w	r3, [sp, #10]
 8001a94:	6023      	str	r3, [r4, #0]
    }
    return  WIFI_STATUS_TIMEOUT;
  }

  return WIFI_STATUS_ERROR;
}
 8001a96:	b007      	add	sp, #28
 8001a98:	bd30      	pop	{r4, r5, pc}
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 8001a9a:	2803      	cmp	r0, #3
 8001a9c:	d107      	bne.n	8001aae <WIFI_WaitServerConnection+0x3e>
    if (RemotePort) *RemotePort=0;
 8001a9e:	b10d      	cbz	r5, 8001aa4 <WIFI_WaitServerConnection+0x34>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	802b      	strh	r3, [r5, #0]
    if (RemoteIp)
 8001aa4:	b10c      	cbz	r4, 8001aaa <WIFI_WaitServerConnection+0x3a>
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	6023      	str	r3, [r4, #0]
    return  WIFI_STATUS_TIMEOUT;
 8001aaa:	2005      	movs	r0, #5
 8001aac:	e7f3      	b.n	8001a96 <WIFI_WaitServerConnection+0x26>
  return WIFI_STATUS_ERROR;
 8001aae:	2001      	movs	r0, #1
 8001ab0:	e7f1      	b.n	8001a96 <WIFI_WaitServerConnection+0x26>
 8001ab2:	bf00      	nop
 8001ab4:	20000950 	.word	0x20000950

08001ab8 <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 8001ab8:	4601      	mov	r1, r0
 8001aba:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 8001abc:	4803      	ldr	r0, [pc, #12]	; (8001acc <WIFI_CloseServerConnection+0x14>)
 8001abe:	f7ff fb6b 	bl	8001198 <ES_WIFI_CloseServerConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001ac2:	3800      	subs	r0, #0
 8001ac4:	bf18      	it	ne
 8001ac6:	2001      	movne	r0, #1
 8001ac8:	bd08      	pop	{r3, pc}
 8001aca:	bf00      	nop
 8001acc:	20000950 	.word	0x20000950

08001ad0 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <WIFI_StopServer+0x14>)
 8001ad6:	f7ff fb9d 	bl	8001214 <ES_WIFI_StopServerSingleConn>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001ada:	3800      	subs	r0, #0
 8001adc:	bf18      	it	ne
 8001ade:	2001      	movne	r0, #1
 8001ae0:	bd08      	pop	{r3, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000950 	.word	0x20000950

08001ae8 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8001ae8:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8001aea:	9c04      	ldr	r4, [sp, #16]
 8001aec:	e9cd 3400 	strd	r3, r4, [sp]
 8001af0:	4613      	mov	r3, r2
 8001af2:	460a      	mov	r2, r1
 8001af4:	4601      	mov	r1, r0
 8001af6:	4804      	ldr	r0, [pc, #16]	; (8001b08 <WIFI_SendData+0x20>)
 8001af8:	f7ff fbca 	bl	8001290 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8001afc:	3800      	subs	r0, #0
 8001afe:	bf18      	it	ne
 8001b00:	2001      	movne	r0, #1
 8001b02:	b002      	add	sp, #8
 8001b04:	bd10      	pop	{r4, pc}
 8001b06:	bf00      	nop
 8001b08:	20000950 	.word	0x20000950

08001b0c <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8001b0c:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8001b0e:	9c04      	ldr	r4, [sp, #16]
 8001b10:	e9cd 3400 	strd	r3, r4, [sp]
 8001b14:	4613      	mov	r3, r2
 8001b16:	460a      	mov	r2, r1
 8001b18:	4601      	mov	r1, r0
 8001b1a:	4804      	ldr	r0, [pc, #16]	; (8001b2c <WIFI_ReceiveData+0x20>)
 8001b1c:	f7ff fc3a 	bl	8001394 <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001b20:	3800      	subs	r0, #0
 8001b22:	bf18      	it	ne
 8001b24:	2001      	movne	r0, #1
 8001b26:	b002      	add	sp, #8
 8001b28:	bd10      	pop	{r4, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000950 	.word	0x20000950

08001b30 <I2Cx_Init.constprop.0>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8001b30:	b570      	push	{r4, r5, r6, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001b32:	4a2a      	ldr	r2, [pc, #168]	; (8001bdc <I2Cx_Init.constprop.0+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001b34:	4c2a      	ldr	r4, [pc, #168]	; (8001be0 <I2Cx_Init.constprop.0+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <I2Cx_Init.constprop.0+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b38:	4d2b      	ldr	r5, [pc, #172]	; (8001be8 <I2Cx_Init.constprop.0+0xb8>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001b3a:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001b3c:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001b40:	2201      	movs	r2, #1
 8001b42:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 8001b46:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001b4a:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b4e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001b56:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8001b58:	b088      	sub	sp, #32
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b62:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b64:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001b68:	2312      	movs	r3, #18
 8001b6a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b6e:	2003      	movs	r0, #3
 8001b70:	2304      	movs	r3, #4
 8001b72:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b76:	a903      	add	r1, sp, #12
 8001b78:	481c      	ldr	r0, [pc, #112]	; (8001bec <I2Cx_Init.constprop.0+0xbc>)
 8001b7a:	f000 fb23 	bl	80021c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b7e:	a903      	add	r1, sp, #12
 8001b80:	481a      	ldr	r0, [pc, #104]	; (8001bec <I2Cx_Init.constprop.0+0xbc>)
 8001b82:	f000 fb1f 	bl	80021c4 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001b86:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b8c:	65ab      	str	r3, [r5, #88]	; 0x58
 8001b8e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8001b98:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001b9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b9e:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001ba0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001ba2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ba6:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001ba8:	4632      	mov	r2, r6
 8001baa:	210f      	movs	r1, #15
 8001bac:	2021      	movs	r0, #33	; 0x21
 8001bae:	f000 fa8d 	bl	80020cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001bb2:	2021      	movs	r0, #33	; 0x21
 8001bb4:	f000 fabc 	bl	8002130 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001bb8:	4632      	mov	r2, r6
 8001bba:	210f      	movs	r1, #15
 8001bbc:	2022      	movs	r0, #34	; 0x22
 8001bbe:	f000 fa85 	bl	80020cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001bc2:	2022      	movs	r0, #34	; 0x22
 8001bc4:	f000 fab4 	bl	8002130 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f000 fd34 	bl	8002636 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001bce:	4631      	mov	r1, r6
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f000 ff0d 	bl	80029f0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001bd6:	b008      	add	sp, #32
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
 8001bda:	bf00      	nop
 8001bdc:	40005800 	.word	0x40005800
 8001be0:	200012d4 	.word	0x200012d4
 8001be4:	00702681 	.word	0x00702681
 8001be8:	40021000 	.word	0x40021000
 8001bec:	48000400 	.word	0x48000400

08001bf0 <I2Cx_Error.isra.0.constprop.0>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
 8001bf0:	b508      	push	{r3, lr}
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001bf2:	4803      	ldr	r0, [pc, #12]	; (8001c00 <I2Cx_Error.isra.0.constprop.0+0x10>)
 8001bf4:	f000 fd71 	bl	80026da <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
}
 8001bf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init(i2c_handler);
 8001bfc:	f7ff bf98 	b.w	8001b30 <I2Cx_Init.constprop.0>
 8001c00:	200012d4 	.word	0x200012d4

08001c04 <BSP_LED_Init>:
{
 8001c04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001c06:	b948      	cbnz	r0, 8001c1c <BSP_LED_Init+0x18>
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <BSP_LED_Init+0x3c>)
 8001c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c0c:	f042 0202 	orr.w	r2, r2, #2
 8001c10:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c20:	2301      	movs	r3, #1
 8001c22:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c26:	2100      	movs	r1, #0
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <BSP_LED_Init+0x40>)
 8001c30:	a901      	add	r1, sp, #4
 8001c32:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c36:	f000 fac5 	bl	80021c4 <HAL_GPIO_Init>
}
 8001c3a:	b007      	add	sp, #28
 8001c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c40:	40021000 	.word	0x40021000
 8001c44:	20000000 	.word	0x20000000

08001c48 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <BSP_LED_On+0x10>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c54:	f000 bb9a 	b.w	800238c <HAL_GPIO_WritePin>
 8001c58:	20000000 	.word	0x20000000

08001c5c <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <BSP_LED_Off+0x10>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c68:	f000 bb90 	b.w	800238c <HAL_GPIO_WritePin>
 8001c6c:	20000000 	.word	0x20000000

08001c70 <BSP_COM_Init>:
{
 8001c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c72:	460d      	mov	r5, r1
 8001c74:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8001c76:	b9d8      	cbnz	r0, 8001cb0 <BSP_COM_Init+0x40>
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <BSP_COM_Init+0x80>)
 8001c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c7c:	f042 0202 	orr.w	r2, r2, #2
 8001c80:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c84:	f002 0202 	and.w	r2, r2, #2
 8001c88:	9200      	str	r2, [sp, #0]
 8001c8a:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8001c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c8e:	f042 0202 	orr.w	r2, r2, #2
 8001c92:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c96:	f002 0202 	and.w	r2, r2, #2
 8001c9a:	9201      	str	r2, [sp, #4]
 8001c9c:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8001c9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ca4:	661a      	str	r2, [r3, #96]	; 0x60
 8001ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cac:	9302      	str	r3, [sp, #8]
 8001cae:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001cb0:	4c10      	ldr	r4, [pc, #64]	; (8001cf4 <BSP_COM_Init+0x84>)
 8001cb2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2602      	movs	r6, #2
 8001cb8:	2340      	movs	r3, #64	; 0x40
 8001cba:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001cbe:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc0:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001cc4:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001cc6:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001cc8:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001cca:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001ccc:	f000 fa7a 	bl	80021c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001cd0:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8001cd2:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8001cd4:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001cd6:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001cd8:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001cdc:	f000 fa72 	bl	80021c4 <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 8001ce0:	6923      	ldr	r3, [r4, #16]
 8001ce2:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	f002 fd8e 	bl	8004806 <HAL_UART_Init>
}
 8001cea:	b009      	add	sp, #36	; 0x24
 8001cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8001cf8:	f7ff bf1a 	b.w	8001b30 <I2Cx_Init.constprop.0>

08001cfc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001cfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cfe:	2301      	movs	r3, #1
{
 8001d00:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d08:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001d0c:	f10d 0217 	add.w	r2, sp, #23
 8001d10:	9200      	str	r2, [sp, #0]
 8001d12:	460a      	mov	r2, r1
 8001d14:	4601      	mov	r1, r0
 8001d16:	4804      	ldr	r0, [pc, #16]	; (8001d28 <SENSOR_IO_Write+0x2c>)
 8001d18:	f000 fcf8 	bl	800270c <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001d1c:	b108      	cbz	r0, 8001d22 <SENSOR_IO_Write+0x26>
    I2Cx_Error(i2c_handler, Addr);
 8001d1e:	f7ff ff67 	bl	8001bf0 <I2Cx_Error.isra.0.constprop.0>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8001d22:	b007      	add	sp, #28
 8001d24:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d28:	200012d4 	.word	0x200012d4

08001d2c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 8001d2e:	2300      	movs	r3, #0
{
 8001d30:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 8001d32:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001d40:	f10d 0117 	add.w	r1, sp, #23
 8001d44:	9100      	str	r1, [sp, #0]
 8001d46:	4601      	mov	r1, r0
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <SENSOR_IO_Read+0x34>)
 8001d4a:	f000 fd95 	bl	8002878 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001d4e:	b108      	cbz	r0, 8001d54 <SENSOR_IO_Read+0x28>
    I2Cx_Error(i2c_handler, Addr);
 8001d50:	f7ff ff4e 	bl	8001bf0 <I2Cx_Error.isra.0.constprop.0>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8001d54:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001d58:	b007      	add	sp, #28
 8001d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d5e:	bf00      	nop
 8001d60:	200012d4 	.word	0x200012d4

08001d64 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d66:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001d6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	2301      	movs	r3, #1
 8001d72:	460a      	mov	r2, r1
 8001d74:	4601      	mov	r1, r0
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <SENSOR_IO_ReadMultiple+0x28>)
 8001d78:	f000 fd7e 	bl	8002878 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	b108      	cbz	r0, 8001d84 <SENSOR_IO_ReadMultiple+0x20>
    I2Cx_Error(i2c_handler, Addr);
 8001d80:	f7ff ff36 	bl	8001bf0 <I2Cx_Error.isra.0.constprop.0>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8001d84:	b2a0      	uxth	r0, r4
 8001d86:	b004      	add	sp, #16
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200012d4 	.word	0x200012d4

08001d90 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001d90:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001d92:	4c06      	ldr	r4, [pc, #24]	; (8001dac <BSP_TSENSOR_Init+0x1c>)
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <BSP_TSENSOR_Init+0x20>)
 8001d96:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001d98:	f7ff ffae 	bl	8001cf8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	2100      	movs	r1, #0
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	20be      	movs	r0, #190	; 0xbe
 8001da4:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8001da6:	2000      	movs	r0, #0
 8001da8:	bd10      	pop	{r4, pc}
 8001daa:	bf00      	nop
 8001dac:	200008d8 	.word	0x200008d8
 8001db0:	20000014 	.word	0x20000014

08001db4 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <BSP_TSENSOR_ReadTemp+0xc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	20be      	movs	r0, #190	; 0xbe
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4718      	bx	r3
 8001dbe:	bf00      	nop
 8001dc0:	200008d8 	.word	0x200008d8

08001dc4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001dc4:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001dc6:	b2c4      	uxtb	r4, r0
 8001dc8:	2120      	movs	r1, #32
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff ffae 	bl	8001d2c <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001dd0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001dd4:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 8001dd8:	2120      	movs	r1, #32
 8001dda:	4620      	mov	r0, r4
}
 8001ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001de0:	f7ff bf8c 	b.w	8001cfc <SENSOR_IO_Write>

08001de4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001de4:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001de6:	b2c4      	uxtb	r4, r0
 8001de8:	2120      	movs	r1, #32
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7ff ff9e 	bl	8001d2c <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001df0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001df4:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 8001df8:	2120      	movs	r1, #32
 8001dfa:	4620      	mov	r0, r4
}
 8001dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e00:	f7ff bf7c 	b.w	8001cfc <SENSOR_IO_Write>

08001e04 <HTS221_H_ReadID>:
{  
 8001e04:	b510      	push	{r4, lr}
 8001e06:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8001e08:	f7ff ff76 	bl	8001cf8 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001e0c:	b2e0      	uxtb	r0, r4
 8001e0e:	210f      	movs	r1, #15
}
 8001e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001e14:	f7ff bf8a 	b.w	8001d2c <SENSOR_IO_Read>

08001e18 <HTS221_H_ReadHumidity>:
{
 8001e18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001e1c:	fa5f f880 	uxtb.w	r8, r0
 8001e20:	2302      	movs	r3, #2
 8001e22:	aa01      	add	r2, sp, #4
 8001e24:	21b0      	movs	r1, #176	; 0xb0
 8001e26:	4640      	mov	r0, r8
 8001e28:	f7ff ff9c 	bl	8001d64 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	aa01      	add	r2, sp, #4
 8001e30:	21b6      	movs	r1, #182	; 0xb6
 8001e32:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 8001e34:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 8001e38:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001e3c:	f7ff ff92 	bl	8001d64 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e40:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001e44:	f89d 7004 	ldrb.w	r7, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001e48:	2302      	movs	r3, #2
 8001e4a:	aa01      	add	r2, sp, #4
 8001e4c:	21ba      	movs	r1, #186	; 0xba
 8001e4e:	4640      	mov	r0, r8
 8001e50:	f7ff ff88 	bl	8001d64 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e54:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e58:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001e5c:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001e60:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e62:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001e66:	21a8      	movs	r1, #168	; 0xa8
 8001e68:	2302      	movs	r3, #2
 8001e6a:	4640      	mov	r0, r8
 8001e6c:	f7ff ff7a 	bl	8001d64 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001e74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e7c:	b23f      	sxth	r7, r7
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	1bdb      	subs	r3, r3, r7
 8001e82:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 8001e86:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 8001e88:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001e8a:	1bab      	subs	r3, r5, r6
 8001e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e90:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e94:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9a:	1be4      	subs	r4, r4, r7
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea0:	ee07 4a10 	vmov	s14, r4
 8001ea4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ea8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8001eac:	ee07 6a90 	vmov	s15, r6
 8001eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 8001eb4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001eec <HTS221_H_ReadHumidity+0xd4>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001eb8:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8001ebc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001ec0:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8001ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	dc07      	bgt.n	8001ede <HTS221_H_ReadHumidity+0xc6>
        : tmp_f;
 8001ece:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed6:	d504      	bpl.n	8001ee2 <HTS221_H_ReadHumidity+0xca>
 8001ed8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001ef0 <HTS221_H_ReadHumidity+0xd8>
 8001edc:	e001      	b.n	8001ee2 <HTS221_H_ReadHumidity+0xca>
        : ( tmp_f <    0.0f ) ?    0.0f
 8001ede:	eef0 7a47 	vmov.f32	s15, s14
}
 8001ee2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001ee6:	b002      	add	sp, #8
 8001ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eec:	447a0000 	.word	0x447a0000
 8001ef0:	00000000 	.word	0x00000000

08001ef4 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001ef4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001ef8:	fa5f f880 	uxtb.w	r8, r0
 8001efc:	aa01      	add	r2, sp, #4
 8001efe:	2302      	movs	r3, #2
 8001f00:	21b2      	movs	r1, #178	; 0xb2
 8001f02:	4640      	mov	r0, r8
 8001f04:	f7ff ff2e 	bl	8001d64 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001f08:	2135      	movs	r1, #53	; 0x35
 8001f0a:	4640      	mov	r0, r8
 8001f0c:	f7ff ff0e 	bl	8001d2c <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f10:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f12:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f16:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f1a:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f1c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f20:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8001f24:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8001f26:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001f28:	2304      	movs	r3, #4
 8001f2a:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8001f2e:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001f30:	21bc      	movs	r1, #188	; 0xbc
 8001f32:	4640      	mov	r0, r8
 8001f34:	f7ff ff16 	bl	8001d64 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f38:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001f3c:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001f40:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f44:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001f48:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001f4c:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001f4e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001f52:	21aa      	movs	r1, #170	; 0xaa
 8001f54:	2302      	movs	r3, #2
 8001f56:	4640      	mov	r0, r8
 8001f58:	f7ff ff04 	bl	8001d64 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f5c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001f60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f68:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	1bdb      	subs	r3, r3, r7
 8001f6e:	ee07 3a90 	vmov	s15, r3
  T0_degC = T0_degC_x8_u16 >> 3;
 8001f72:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001f74:	1bab      	subs	r3, r5, r6
 8001f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f7a:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001f7e:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f84:	1be4      	subs	r4, r4, r7
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	ee07 4a10 	vmov	s14, r4
 8001f8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f96:	ee07 6a90 	vmov	s15, r6
 8001f9a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8001f9e:	ee36 0a80 	vadd.f32	s0, s13, s0
 8001fa2:	b002      	add	sp, #8
 8001fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001fa8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa8:	490f      	ldr	r1, [pc, #60]	; (8001fe8 <SystemInit+0x40>)
 8001faa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001fae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <SystemInit+0x44>)
 8001fb8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fba:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001fc2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001fca:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001fce:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001fd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fd4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fde:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001fe4:	608b      	str	r3, [r1, #8]
#endif
}
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001ff0:	4770      	bx	lr
	...

08001ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ff6:	4e0f      	ldr	r6, [pc, #60]	; (8002034 <HAL_InitTick+0x40>)
{
 8001ff8:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001ffa:	7830      	ldrb	r0, [r6, #0]
 8001ffc:	b908      	cbnz	r0, 8002002 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ffe:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002000:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002002:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <HAL_InitTick+0x44>)
 8002004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002008:	fbb3 f3f0 	udiv	r3, r3, r0
 800200c:	6810      	ldr	r0, [r2, #0]
 800200e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002012:	f000 f89b 	bl	800214c <HAL_SYSTICK_Config>
 8002016:	4604      	mov	r4, r0
 8002018:	2800      	cmp	r0, #0
 800201a:	d1f0      	bne.n	8001ffe <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201c:	2d0f      	cmp	r5, #15
 800201e:	d8ee      	bhi.n	8001ffe <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	4602      	mov	r2, r0
 8002022:	4629      	mov	r1, r5
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 f850 	bl	80020cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202c:	6075      	str	r5, [r6, #4]
 800202e:	4620      	mov	r0, r4
 8002030:	e7e6      	b.n	8002000 <HAL_InitTick+0xc>
 8002032:	bf00      	nop
 8002034:	20000034 	.word	0x20000034
 8002038:	20000030 	.word	0x20000030

0800203c <HAL_Init>:
{
 800203c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800203e:	2003      	movs	r0, #3
 8002040:	f000 f832 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002044:	200f      	movs	r0, #15
 8002046:	f7ff ffd5 	bl	8001ff4 <HAL_InitTick>
 800204a:	4604      	mov	r4, r0
 800204c:	b918      	cbnz	r0, 8002056 <HAL_Init+0x1a>
    HAL_MspInit();
 800204e:	f7ff ffcf 	bl	8001ff0 <HAL_MspInit>
}
 8002052:	4620      	mov	r0, r4
 8002054:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002056:	2401      	movs	r4, #1
 8002058:	e7fb      	b.n	8002052 <HAL_Init+0x16>
	...

0800205c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800205c:	4a03      	ldr	r2, [pc, #12]	; (800206c <HAL_IncTick+0x10>)
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_IncTick+0x14>)
 8002060:	6811      	ldr	r1, [r2, #0]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	440b      	add	r3, r1
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20001320 	.word	0x20001320
 8002070:	20000034 	.word	0x20000034

08002074 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002074:	4b01      	ldr	r3, [pc, #4]	; (800207c <HAL_GetTick+0x8>)
 8002076:	6818      	ldr	r0, [r3, #0]
}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20001320 	.word	0x20001320

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff fff6 	bl	8002074 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002088:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 800208a:	bf1c      	itt	ne
 800208c:	4b05      	ldrne	r3, [pc, #20]	; (80020a4 <HAL_Delay+0x24>)
 800208e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002090:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8002092:	bf18      	it	ne
 8002094:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002096:	f7ff ffed 	bl	8002074 <HAL_GetTick>
 800209a:	1b43      	subs	r3, r0, r5
 800209c:	42a3      	cmp	r3, r4
 800209e:	d3fa      	bcc.n	8002096 <HAL_Delay+0x16>
  {
  }
}
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
 80020a2:	bf00      	nop
 80020a4:	20000034 	.word	0x20000034

080020a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80020aa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80020c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ce:	b530      	push	{r4, r5, lr}
 80020d0:	68dc      	ldr	r4, [r3, #12]
 80020d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	2d04      	cmp	r5, #4
 80020de:	bf28      	it	cs
 80020e0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e8:	bf8c      	ite	hi
 80020ea:	3c03      	subhi	r4, #3
 80020ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ee:	fa03 f505 	lsl.w	r5, r3, r5
 80020f2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f6:	40a3      	lsls	r3, r4
 80020f8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80020fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	bfac      	ite	ge
 8002106:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	4a08      	ldrlt	r2, [pc, #32]	; (800212c <HAL_NVIC_SetPriority+0x60>)
 800210c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002110:	bfb8      	it	lt
 8002112:	f000 000f 	andlt.w	r0, r0, #15
 8002116:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	bfaa      	itet	ge
 800211a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002124:	bd30      	pop	{r4, r5, pc}
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00
 800212c:	e000ed14 	.word	0xe000ed14

08002130 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002130:	2800      	cmp	r0, #0
 8002132:	db08      	blt.n	8002146 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002134:	2301      	movs	r3, #1
 8002136:	0942      	lsrs	r2, r0, #5
 8002138:	f000 001f 	and.w	r0, r0, #31
 800213c:	fa03 f000 	lsl.w	r0, r3, r0
 8002140:	4b01      	ldr	r3, [pc, #4]	; (8002148 <HAL_NVIC_EnableIRQ+0x18>)
 8002142:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100

0800214c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	3801      	subs	r0, #1
 800214e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002152:	d20a      	bcs.n	800216a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	4a07      	ldr	r2, [pc, #28]	; (8002174 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002158:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	21f0      	movs	r1, #240	; 0xf0
 800215c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002160:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002164:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002168:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002178:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800217a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800217e:	2a02      	cmp	r2, #2
 8002180:	d003      	beq.n	800218a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002182:	2204      	movs	r2, #4
 8002184:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8002186:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8002188:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218a:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 800218c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218e:	6811      	ldr	r1, [r2, #0]
 8002190:	f021 010e 	bic.w	r1, r1, #14
 8002194:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002196:	6811      	ldr	r1, [r2, #0]
 8002198:	f021 0101 	bic.w	r1, r1, #1
 800219c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800219e:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 80021a2:	2101      	movs	r1, #1
 80021a4:	f002 021c 	and.w	r2, r2, #28
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80021ae:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80021b0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80021b4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80021b8:	b113      	cbz	r3, 80021c0 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80021ba:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	4620      	mov	r0, r4
 80021be:	e7e3      	b.n	8002188 <HAL_DMA_Abort_IT+0x10>
 80021c0:	4618      	mov	r0, r3
 80021c2:	e7e1      	b.n	8002188 <HAL_DMA_Abort_IT+0x10>

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c8:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 800237c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021cc:	4d69      	ldr	r5, [pc, #420]	; (8002374 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80021ce:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d0:	680a      	ldr	r2, [r1, #0]
 80021d2:	fa32 f403 	lsrs.w	r4, r2, r3
 80021d6:	d102      	bne.n	80021de <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80021d8:	b003      	add	sp, #12
 80021da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021de:	f04f 0a01 	mov.w	sl, #1
 80021e2:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 80021e6:	ea1a 0202 	ands.w	r2, sl, r2
 80021ea:	f000 80b4 	beq.w	8002356 <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ee:	684c      	ldr	r4, [r1, #4]
 80021f0:	f024 0e10 	bic.w	lr, r4, #16
 80021f4:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80021f8:	2603      	movs	r6, #3
 80021fa:	f10e 37ff 	add.w	r7, lr, #4294967295
 80021fe:	fa06 f608 	lsl.w	r6, r6, r8
 8002202:	2f01      	cmp	r7, #1
 8002204:	ea6f 0606 	mvn.w	r6, r6
 8002208:	d811      	bhi.n	800222e <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 800220a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800220c:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002210:	68cf      	ldr	r7, [r1, #12]
 8002212:	fa07 f708 	lsl.w	r7, r7, r8
 8002216:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 800221a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800221c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800221e:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002222:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002226:	409f      	lsls	r7, r3
 8002228:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800222c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800222e:	f004 0c03 	and.w	ip, r4, #3
 8002232:	f1bc 0f03 	cmp.w	ip, #3
 8002236:	d108      	bne.n	800224a <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 8002238:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800223a:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800223e:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8002242:	409f      	lsls	r7, r3
 8002244:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8002248:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800224a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800224c:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002250:	688f      	ldr	r7, [r1, #8]
 8002252:	fa07 f708 	lsl.w	r7, r7, r8
 8002256:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800225a:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 800225e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002260:	d116      	bne.n	8002290 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 8002262:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002266:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800226a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800226e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002272:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002276:	f04f 0e0f 	mov.w	lr, #15
 800227a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800227e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002282:	690f      	ldr	r7, [r1, #16]
 8002284:	fa07 f70b 	lsl.w	r7, r7, fp
 8002288:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 800228c:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8002290:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002292:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002296:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002298:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 800229c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229e:	00e6      	lsls	r6, r4, #3
 80022a0:	d559      	bpl.n	8002356 <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80022a6:	f046 0601 	orr.w	r6, r6, #1
 80022aa:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80022ae:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80022b2:	f023 0703 	bic.w	r7, r3, #3
 80022b6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80022ba:	f006 0601 	and.w	r6, r6, #1
 80022be:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80022c2:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022c4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80022ca:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022cc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80022d0:	f04f 0c0f 	mov.w	ip, #15
 80022d4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022d8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022dc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022e0:	d03b      	beq.n	800235a <HAL_GPIO_Init+0x196>
 80022e2:	4e25      	ldr	r6, [pc, #148]	; (8002378 <HAL_GPIO_Init+0x1b4>)
 80022e4:	42b0      	cmp	r0, r6
 80022e6:	d03a      	beq.n	800235e <HAL_GPIO_Init+0x19a>
 80022e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80022ec:	42b0      	cmp	r0, r6
 80022ee:	d038      	beq.n	8002362 <HAL_GPIO_Init+0x19e>
 80022f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80022f4:	42b0      	cmp	r0, r6
 80022f6:	d036      	beq.n	8002366 <HAL_GPIO_Init+0x1a2>
 80022f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80022fc:	42b0      	cmp	r0, r6
 80022fe:	d034      	beq.n	800236a <HAL_GPIO_Init+0x1a6>
 8002300:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002304:	42b0      	cmp	r0, r6
 8002306:	d032      	beq.n	800236e <HAL_GPIO_Init+0x1aa>
 8002308:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800230c:	42b0      	cmp	r0, r6
 800230e:	bf0c      	ite	eq
 8002310:	2606      	moveq	r6, #6
 8002312:	2607      	movne	r6, #7
 8002314:	fa06 f60e 	lsl.w	r6, r6, lr
 8002318:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800231c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800231e:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8002320:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002322:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002326:	bf0c      	ite	eq
 8002328:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800232a:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 800232c:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 800232e:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002330:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002334:	bf0c      	ite	eq
 8002336:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002338:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 800233a:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 800233c:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002342:	bf0c      	ite	eq
 8002344:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002346:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8002348:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 800234a:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800234c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800234e:	bf54      	ite	pl
 8002350:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002352:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8002354:	60ee      	str	r6, [r5, #12]
    position++;
 8002356:	3301      	adds	r3, #1
 8002358:	e73a      	b.n	80021d0 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800235a:	2600      	movs	r6, #0
 800235c:	e7da      	b.n	8002314 <HAL_GPIO_Init+0x150>
 800235e:	2601      	movs	r6, #1
 8002360:	e7d8      	b.n	8002314 <HAL_GPIO_Init+0x150>
 8002362:	2602      	movs	r6, #2
 8002364:	e7d6      	b.n	8002314 <HAL_GPIO_Init+0x150>
 8002366:	2603      	movs	r6, #3
 8002368:	e7d4      	b.n	8002314 <HAL_GPIO_Init+0x150>
 800236a:	2604      	movs	r6, #4
 800236c:	e7d2      	b.n	8002314 <HAL_GPIO_Init+0x150>
 800236e:	2605      	movs	r6, #5
 8002370:	e7d0      	b.n	8002314 <HAL_GPIO_Init+0x150>
 8002372:	bf00      	nop
 8002374:	40010400 	.word	0x40010400
 8002378:	48000400 	.word	0x48000400
 800237c:	40021000 	.word	0x40021000

08002380 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002380:	6903      	ldr	r3, [r0, #16]
 8002382:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002384:	bf14      	ite	ne
 8002386:	2001      	movne	r0, #1
 8002388:	2000      	moveq	r0, #0
 800238a:	4770      	bx	lr

0800238c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800238c:	b10a      	cbz	r2, 8002392 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238e:	6181      	str	r1, [r0, #24]
 8002390:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002392:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002394:	4770      	bx	lr
	...

08002398 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800239a:	6951      	ldr	r1, [r2, #20]
 800239c:	4201      	tst	r1, r0
{
 800239e:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023a0:	d002      	beq.n	80023a8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023a4:	f7fe fb24 	bl	80009f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023a8:	bd08      	pop	{r3, pc}
 80023aa:	bf00      	nop
 80023ac:	40010400 	.word	0x40010400

080023b0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023b0:	6803      	ldr	r3, [r0, #0]
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80023b6:	bf44      	itt	mi
 80023b8:	2200      	movmi	r2, #0
 80023ba:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023c0:	bf5e      	ittt	pl
 80023c2:	699a      	ldrpl	r2, [r3, #24]
 80023c4:	f042 0201 	orrpl.w	r2, r2, #1
 80023c8:	619a      	strpl	r2, [r3, #24]
  }
}
 80023ca:	4770      	bx	lr

080023cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023cc:	b530      	push	{r4, r5, lr}
 80023ce:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80023d0:	6804      	ldr	r4, [r0, #0]
 80023d2:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80023d6:	431a      	orrs	r2, r3
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <I2C_TransferConfig+0x24>)
 80023da:	6860      	ldr	r0, [r4, #4]
 80023dc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80023e0:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80023e4:	430a      	orrs	r2, r1
 80023e6:	ea20 0003 	bic.w	r0, r0, r3
 80023ea:	4302      	orrs	r2, r0
 80023ec:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80023ee:	bd30      	pop	{r4, r5, pc}
 80023f0:	03ff63ff 	.word	0x03ff63ff

080023f4 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f4:	6803      	ldr	r3, [r0, #0]
{
 80023f6:	b570      	push	{r4, r5, r6, lr}
 80023f8:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023fa:	6998      	ldr	r0, [r3, #24]
 80023fc:	f010 0010 	ands.w	r0, r0, #16
{
 8002400:	460d      	mov	r5, r1
 8002402:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002404:	d116      	bne.n	8002434 <I2C_IsAcknowledgeFailed+0x40>
}
 8002406:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002408:	1c69      	adds	r1, r5, #1
 800240a:	d014      	beq.n	8002436 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240c:	f7ff fe32 	bl	8002074 <HAL_GetTick>
 8002410:	1b80      	subs	r0, r0, r6
 8002412:	42a8      	cmp	r0, r5
 8002414:	d800      	bhi.n	8002418 <I2C_IsAcknowledgeFailed+0x24>
 8002416:	b96d      	cbnz	r5, 8002434 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002418:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800241a:	f043 0320 	orr.w	r3, r3, #32
 800241e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002420:	2320      	movs	r3, #32
 8002422:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002426:	2300      	movs	r3, #0
 8002428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800242c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
 8002432:	e7e8      	b.n	8002406 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	0692      	lsls	r2, r2, #26
 800243a:	d5e5      	bpl.n	8002408 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800243e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002440:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002442:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002444:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002446:	f7ff ffb3 	bl	80023b0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	6853      	ldr	r3, [r2, #4]
 800244e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002452:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002456:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002460:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002468:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 800246c:	e7db      	b.n	8002426 <I2C_IsAcknowledgeFailed+0x32>

0800246e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800246e:	b570      	push	{r4, r5, r6, lr}
 8002470:	4604      	mov	r4, r0
 8002472:	460d      	mov	r5, r1
 8002474:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	069b      	lsls	r3, r3, #26
 800247c:	d501      	bpl.n	8002482 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800247e:	2000      	movs	r0, #0
}
 8002480:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002482:	4632      	mov	r2, r6
 8002484:	4629      	mov	r1, r5
 8002486:	4620      	mov	r0, r4
 8002488:	f7ff ffb4 	bl	80023f4 <I2C_IsAcknowledgeFailed>
 800248c:	b990      	cbnz	r0, 80024b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7ff fdf1 	bl	8002074 <HAL_GetTick>
 8002492:	1b80      	subs	r0, r0, r6
 8002494:	42a8      	cmp	r0, r5
 8002496:	d801      	bhi.n	800249c <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002498:	2d00      	cmp	r5, #0
 800249a:	d1ec      	bne.n	8002476 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800249c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800249e:	f043 0320 	orr.w	r3, r3, #32
 80024a2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	2320      	movs	r3, #32
 80024a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80024b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80024b4:	2001      	movs	r0, #1
 80024b6:	e7e3      	b.n	8002480 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080024b8 <I2C_WaitOnFlagUntilTimeout>:
{
 80024b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024bc:	9f06      	ldr	r7, [sp, #24]
 80024be:	4604      	mov	r4, r0
 80024c0:	4688      	mov	r8, r1
 80024c2:	4616      	mov	r6, r2
 80024c4:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c6:	6822      	ldr	r2, [r4, #0]
 80024c8:	6993      	ldr	r3, [r2, #24]
 80024ca:	ea38 0303 	bics.w	r3, r8, r3
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	42b3      	cmp	r3, r6
 80024d6:	d001      	beq.n	80024dc <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80024d8:	2000      	movs	r0, #0
 80024da:	e015      	b.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80024dc:	1c6b      	adds	r3, r5, #1
 80024de:	d0f3      	beq.n	80024c8 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e0:	f7ff fdc8 	bl	8002074 <HAL_GetTick>
 80024e4:	1bc0      	subs	r0, r0, r7
 80024e6:	42a8      	cmp	r0, r5
 80024e8:	d801      	bhi.n	80024ee <I2C_WaitOnFlagUntilTimeout+0x36>
 80024ea:	2d00      	cmp	r5, #0
 80024ec:	d1eb      	bne.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024f0:	f043 0320 	orr.w	r3, r3, #32
 80024f4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024f6:	2320      	movs	r3, #32
 80024f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002502:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002506:	2001      	movs	r0, #1
}
 8002508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800250c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800250c:	b570      	push	{r4, r5, r6, lr}
 800250e:	4604      	mov	r4, r0
 8002510:	460d      	mov	r5, r1
 8002512:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	079b      	lsls	r3, r3, #30
 800251a:	d501      	bpl.n	8002520 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800251c:	2000      	movs	r0, #0
}
 800251e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002520:	4632      	mov	r2, r6
 8002522:	4629      	mov	r1, r5
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff ff65 	bl	80023f4 <I2C_IsAcknowledgeFailed>
 800252a:	b9a0      	cbnz	r0, 8002556 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800252c:	1c6a      	adds	r2, r5, #1
 800252e:	d0f1      	beq.n	8002514 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002530:	f7ff fda0 	bl	8002074 <HAL_GetTick>
 8002534:	1b80      	subs	r0, r0, r6
 8002536:	42a8      	cmp	r0, r5
 8002538:	d801      	bhi.n	800253e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800253a:	2d00      	cmp	r5, #0
 800253c:	d1ea      	bne.n	8002514 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002540:	f043 0320 	orr.w	r3, r3, #32
 8002544:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002546:	2320      	movs	r3, #32
 8002548:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800254c:	2300      	movs	r3, #0
 800254e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002552:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002556:	2001      	movs	r0, #1
 8002558:	e7e1      	b.n	800251e <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

0800255c <I2C_RequestMemoryWrite>:
{
 800255c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002560:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 8002564:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <I2C_RequestMemoryWrite+0x68>)
 8002568:	9300      	str	r3, [sp, #0]
{
 800256a:	4605      	mov	r5, r0
 800256c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800256e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002572:	b2f2      	uxtb	r2, r6
 8002574:	f7ff ff2a 	bl	80023cc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002578:	4642      	mov	r2, r8
 800257a:	4639      	mov	r1, r7
 800257c:	4628      	mov	r0, r5
 800257e:	f7ff ffc5 	bl	800250c <I2C_WaitOnTXISFlagUntilTimeout>
 8002582:	b118      	cbz	r0, 800258c <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8002584:	2001      	movs	r0, #1
}
 8002586:	b002      	add	sp, #8
 8002588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800258c:	2e01      	cmp	r6, #1
 800258e:	682b      	ldr	r3, [r5, #0]
 8002590:	d10d      	bne.n	80025ae <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002592:	b2e4      	uxtb	r4, r4
 8002594:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002596:	2200      	movs	r2, #0
 8002598:	f8cd 8000 	str.w	r8, [sp]
 800259c:	463b      	mov	r3, r7
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	4628      	mov	r0, r5
 80025a2:	f7ff ff89 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80025a6:	3800      	subs	r0, #0
 80025a8:	bf18      	it	ne
 80025aa:	2001      	movne	r0, #1
 80025ac:	e7eb      	b.n	8002586 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025ae:	0a22      	lsrs	r2, r4, #8
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b2:	4639      	mov	r1, r7
 80025b4:	4642      	mov	r2, r8
 80025b6:	4628      	mov	r0, r5
 80025b8:	f7ff ffa8 	bl	800250c <I2C_WaitOnTXISFlagUntilTimeout>
 80025bc:	2800      	cmp	r0, #0
 80025be:	d1e1      	bne.n	8002584 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	e7e6      	b.n	8002592 <I2C_RequestMemoryWrite+0x36>
 80025c4:	80002000 	.word	0x80002000

080025c8 <I2C_RequestMemoryRead>:
{
 80025c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80025cc:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 80025d0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <I2C_RequestMemoryRead+0x68>)
 80025d4:	9300      	str	r3, [sp, #0]
{
 80025d6:	4605      	mov	r5, r0
 80025d8:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025da:	2300      	movs	r3, #0
 80025dc:	b2f2      	uxtb	r2, r6
 80025de:	f7ff fef5 	bl	80023cc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e2:	4642      	mov	r2, r8
 80025e4:	4639      	mov	r1, r7
 80025e6:	4628      	mov	r0, r5
 80025e8:	f7ff ff90 	bl	800250c <I2C_WaitOnTXISFlagUntilTimeout>
 80025ec:	b118      	cbz	r0, 80025f6 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 80025ee:	2001      	movs	r0, #1
}
 80025f0:	b002      	add	sp, #8
 80025f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f6:	2e01      	cmp	r6, #1
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	d10d      	bne.n	8002618 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025fc:	b2e4      	uxtb	r4, r4
 80025fe:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002600:	2200      	movs	r2, #0
 8002602:	f8cd 8000 	str.w	r8, [sp]
 8002606:	463b      	mov	r3, r7
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	4628      	mov	r0, r5
 800260c:	f7ff ff54 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002610:	3800      	subs	r0, #0
 8002612:	bf18      	it	ne
 8002614:	2001      	movne	r0, #1
 8002616:	e7eb      	b.n	80025f0 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002618:	0a22      	lsrs	r2, r4, #8
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800261c:	4639      	mov	r1, r7
 800261e:	4642      	mov	r2, r8
 8002620:	4628      	mov	r0, r5
 8002622:	f7ff ff73 	bl	800250c <I2C_WaitOnTXISFlagUntilTimeout>
 8002626:	2800      	cmp	r0, #0
 8002628:	d1e1      	bne.n	80025ee <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800262a:	682b      	ldr	r3, [r5, #0]
 800262c:	e7e6      	b.n	80025fc <I2C_RequestMemoryRead+0x34>
 800262e:	bf00      	nop
 8002630:	80002000 	.word	0x80002000

08002634 <HAL_I2C_MspInit>:
}
 8002634:	4770      	bx	lr

08002636 <HAL_I2C_Init>:
{
 8002636:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002638:	4604      	mov	r4, r0
 800263a:	2800      	cmp	r0, #0
 800263c:	d04a      	beq.n	80026d4 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800263e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002642:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002646:	b91b      	cbnz	r3, 8002650 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002648:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800264c:	f7ff fff2 	bl	8002634 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002650:	2324      	movs	r3, #36	; 0x24
 8002652:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002660:	6862      	ldr	r2, [r4, #4]
 8002662:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002666:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800266e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002670:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8002674:	2901      	cmp	r1, #1
 8002676:	d124      	bne.n	80026c2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002678:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800267c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002688:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002690:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002692:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8002696:	430a      	orrs	r2, r1
 8002698:	69a1      	ldr	r1, [r4, #24]
 800269a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800269e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026a0:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80026c0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026c6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026c8:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026ca:	bf04      	itt	eq
 80026cc:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80026d0:	605a      	streq	r2, [r3, #4]
 80026d2:	e7d4      	b.n	800267e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80026d4:	2001      	movs	r0, #1
 80026d6:	e7f3      	b.n	80026c0 <HAL_I2C_Init+0x8a>

080026d8 <HAL_I2C_MspDeInit>:
 80026d8:	4770      	bx	lr

080026da <HAL_I2C_DeInit>:
{
 80026da:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80026dc:	4604      	mov	r4, r0
 80026de:	b198      	cbz	r0, 8002708 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80026e0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e2:	2324      	movs	r3, #36	; 0x24
 80026e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	6813      	ldr	r3, [r2, #0]
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80026f0:	f7ff fff2 	bl	80026d8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f4:	2000      	movs	r0, #0
 80026f6:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80026f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80026fc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002700:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002702:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002706:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002708:	2001      	movs	r0, #1
 800270a:	e7fc      	b.n	8002706 <HAL_I2C_DeInit+0x2c>

0800270c <HAL_I2C_Mem_Write>:
{
 800270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002710:	b085      	sub	sp, #20
 8002712:	469b      	mov	fp, r3
 8002714:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8002718:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800271a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800271e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002722:	2b20      	cmp	r3, #32
{
 8002724:	4604      	mov	r4, r0
 8002726:	460f      	mov	r7, r1
 8002728:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800272a:	f040 80a3 	bne.w	8002874 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800272e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002730:	b10b      	cbz	r3, 8002736 <HAL_I2C_Mem_Write+0x2a>
 8002732:	9b03      	ldr	r3, [sp, #12]
 8002734:	b933      	cbnz	r3, 8002744 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800273a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800273c:	2001      	movs	r0, #1
}
 800273e:	b005      	add	sp, #20
 8002740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002744:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002748:	2b01      	cmp	r3, #1
 800274a:	f000 8093 	beq.w	8002874 <HAL_I2C_Mem_Write+0x168>
 800274e:	2501      	movs	r5, #1
 8002750:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002754:	f7ff fc8e 	bl	8002074 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002758:	2319      	movs	r3, #25
 800275a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800275c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800275e:	462a      	mov	r2, r5
 8002760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002764:	4620      	mov	r0, r4
 8002766:	f7ff fea7 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 800276a:	4680      	mov	r8, r0
 800276c:	2800      	cmp	r0, #0
 800276e:	d1e5      	bne.n	800273c <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002770:	2321      	movs	r3, #33	; 0x21
 8002772:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002776:	2340      	movs	r3, #64	; 0x40
 8002778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800277c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800277e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002780:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002782:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8002784:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002786:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002788:	e9cd 9600 	strd	r9, r6, [sp]
 800278c:	465b      	mov	r3, fp
 800278e:	4652      	mov	r2, sl
 8002790:	4639      	mov	r1, r7
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff fee2 	bl	800255c <I2C_RequestMemoryWrite>
 8002798:	b110      	cbz	r0, 80027a0 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 800279a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800279e:	e7cd      	b.n	800273c <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2bff      	cmp	r3, #255	; 0xff
 80027a6:	d955      	bls.n	8002854 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a8:	22ff      	movs	r2, #255	; 0xff
 80027aa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027ac:	9000      	str	r0, [sp, #0]
 80027ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027b2:	4639      	mov	r1, r7
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff fe09 	bl	80023cc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ba:	4632      	mov	r2, r6
 80027bc:	4649      	mov	r1, r9
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff fea4 	bl	800250c <I2C_WaitOnTXISFlagUntilTimeout>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d1b9      	bne.n	800273c <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80027d0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80027d2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80027d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29b      	uxth	r3, r3
 80027dc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027e0:	3a01      	subs	r2, #1
 80027e2:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80027e6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e8:	b1ab      	cbz	r3, 8002816 <HAL_I2C_Mem_Write+0x10a>
 80027ea:	b9a2      	cbnz	r2, 8002816 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ec:	9600      	str	r6, [sp, #0]
 80027ee:	464b      	mov	r3, r9
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fe60 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d19f      	bne.n	800273c <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2bff      	cmp	r3, #255	; 0xff
 8002802:	d92f      	bls.n	8002864 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002804:	22ff      	movs	r2, #255	; 0xff
 8002806:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002808:	9000      	str	r0, [sp, #0]
 800280a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800280e:	4639      	mov	r1, r7
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff fddb 	bl	80023cc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002816:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1cd      	bne.n	80027ba <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281e:	4632      	mov	r2, r6
 8002820:	4649      	mov	r1, r9
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff fe23 	bl	800246e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002828:	2800      	cmp	r0, #0
 800282a:	d187      	bne.n	800273c <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	2120      	movs	r1, #32
 8002830:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002838:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800283c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002846:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800284a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800284e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002852:	e774      	b.n	800273e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002854:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002856:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002858:	b292      	uxth	r2, r2
 800285a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800285c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	e7a6      	b.n	80027b2 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8002864:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002866:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002868:	b292      	uxth	r2, r2
 800286a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800286c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	e7cc      	b.n	800280e <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8002874:	2002      	movs	r0, #2
 8002876:	e762      	b.n	800273e <HAL_I2C_Mem_Write+0x32>

08002878 <HAL_I2C_Mem_Read>:
{
 8002878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287c:	b085      	sub	sp, #20
 800287e:	469b      	mov	fp, r3
 8002880:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8002884:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002886:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800288a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800288e:	2b20      	cmp	r3, #32
{
 8002890:	4604      	mov	r4, r0
 8002892:	460f      	mov	r7, r1
 8002894:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002896:	f040 80a7 	bne.w	80029e8 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800289a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800289c:	b10b      	cbz	r3, 80028a2 <HAL_I2C_Mem_Read+0x2a>
 800289e:	9b03      	ldr	r3, [sp, #12]
 80028a0:	b933      	cbnz	r3, 80028b0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80028a8:	2001      	movs	r0, #1
}
 80028aa:	b005      	add	sp, #20
 80028ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80028b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	f000 8097 	beq.w	80029e8 <HAL_I2C_Mem_Read+0x170>
 80028ba:	2501      	movs	r5, #1
 80028bc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80028c0:	f7ff fbd8 	bl	8002074 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028c4:	2319      	movs	r3, #25
 80028c6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80028c8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ca:	462a      	mov	r2, r5
 80028cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff fdf1 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4680      	mov	r8, r0
 80028d8:	2800      	cmp	r0, #0
 80028da:	d1e5      	bne.n	80028a8 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028dc:	2322      	movs	r3, #34	; 0x22
 80028de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028e2:	2340      	movs	r3, #64	; 0x40
 80028e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80028e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028ea:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80028ec:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ee:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 80028f0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80028f2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f4:	e9cd 9600 	strd	r9, r6, [sp]
 80028f8:	465b      	mov	r3, fp
 80028fa:	4652      	mov	r2, sl
 80028fc:	4639      	mov	r1, r7
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff fe62 	bl	80025c8 <I2C_RequestMemoryRead>
 8002904:	b110      	cbz	r0, 800290c <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8002906:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800290a:	e7cd      	b.n	80028a8 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800290c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	2bff      	cmp	r3, #255	; 0xff
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <HAL_I2C_Mem_Read+0x174>)
 8002914:	d958      	bls.n	80029c8 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002916:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002918:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800291a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800291c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002920:	4639      	mov	r1, r7
 8002922:	4620      	mov	r0, r4
 8002924:	f7ff fd52 	bl	80023cc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002928:	9600      	str	r6, [sp, #0]
 800292a:	464b      	mov	r3, r9
 800292c:	2200      	movs	r2, #0
 800292e:	2104      	movs	r1, #4
 8002930:	4620      	mov	r0, r4
 8002932:	f7ff fdc1 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 8002936:	2800      	cmp	r0, #0
 8002938:	d1b6      	bne.n	80028a8 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002940:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002942:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002944:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002946:	3301      	adds	r3, #1
 8002948:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800294a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800294c:	3b01      	subs	r3, #1
 800294e:	b29b      	uxth	r3, r3
 8002950:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002952:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002954:	3a01      	subs	r2, #1
 8002956:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002958:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800295a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800295c:	b1ab      	cbz	r3, 800298a <HAL_I2C_Mem_Read+0x112>
 800295e:	b9a2      	cbnz	r2, 800298a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002960:	9600      	str	r6, [sp, #0]
 8002962:	464b      	mov	r3, r9
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff fda6 	bl	80024b8 <I2C_WaitOnFlagUntilTimeout>
 800296c:	2800      	cmp	r0, #0
 800296e:	d19b      	bne.n	80028a8 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002970:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	2bff      	cmp	r3, #255	; 0xff
 8002976:	d92f      	bls.n	80029d8 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002978:	22ff      	movs	r2, #255	; 0xff
 800297a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800297c:	9000      	str	r0, [sp, #0]
 800297e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002982:	4639      	mov	r1, r7
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff fd21 	bl	80023cc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800298a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ca      	bne.n	8002928 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002992:	4632      	mov	r2, r6
 8002994:	4649      	mov	r1, r9
 8002996:	4620      	mov	r0, r4
 8002998:	f7ff fd69 	bl	800246e <I2C_WaitOnSTOPFlagUntilTimeout>
 800299c:	2800      	cmp	r0, #0
 800299e:	d183      	bne.n	80028a8 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	2120      	movs	r1, #32
 80029a4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80029ac:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80029b0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029be:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029c2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80029c6:	e770      	b.n	80028aa <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80029c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80029ca:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80029cc:	b292      	uxth	r2, r2
 80029ce:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80029d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	e7a3      	b.n	8002920 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80029d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029da:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80029dc:	b292      	uxth	r2, r2
 80029de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	e7cc      	b.n	8002982 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80029e8:	2002      	movs	r0, #2
 80029ea:	e75e      	b.n	80028aa <HAL_I2C_Mem_Read+0x32>
 80029ec:	80002400 	.word	0x80002400

080029f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029f0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	b2dc      	uxtb	r4, r3
 80029fa:	d11d      	bne.n	8002a38 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d019      	beq.n	8002a38 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a04:	2324      	movs	r3, #36	; 0x24
 8002a06:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a0a:	6803      	ldr	r3, [r0, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002a30:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002a34:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002a36:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002a38:	2002      	movs	r0, #2
 8002a3a:	e7fc      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08002a3c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a3c:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <HAL_PWREx_GetVoltageRange+0xc>)
 8002a3e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002a40:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40007000 	.word	0x40007000

08002a4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a4e:	4d1e      	ldr	r5, [pc, #120]	; (8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002a50:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a52:	00da      	lsls	r2, r3, #3
{
 8002a54:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a56:	d518      	bpl.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a58:	f7ff fff0 	bl	8002a3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a5c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002a60:	d123      	bne.n	8002aaa <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a62:	2c80      	cmp	r4, #128	; 0x80
 8002a64:	d929      	bls.n	8002aba <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a66:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a68:	bf8c      	ite	hi
 8002a6a:	2402      	movhi	r4, #2
 8002a6c:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a6e:	4917      	ldr	r1, [pc, #92]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002a70:	680a      	ldr	r2, [r1, #0]
 8002a72:	f022 0207 	bic.w	r2, r2, #7
 8002a76:	4322      	orrs	r2, r4
 8002a78:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a7a:	6808      	ldr	r0, [r1, #0]
 8002a7c:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002a80:	1b00      	subs	r0, r0, r4
 8002a82:	bf18      	it	ne
 8002a84:	2001      	movne	r0, #1
 8002a86:	b003      	add	sp, #12
 8002a88:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a90:	65ab      	str	r3, [r5, #88]	; 0x58
 8002a92:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002a9c:	f7ff ffce 	bl	8002a3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002aa0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	65ab      	str	r3, [r5, #88]	; 0x58
 8002aa8:	e7d8      	b.n	8002a5c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002aaa:	2c80      	cmp	r4, #128	; 0x80
 8002aac:	d807      	bhi.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002aae:	d008      	beq.n	8002ac2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002ab0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002ab4:	425c      	negs	r4, r3
 8002ab6:	415c      	adcs	r4, r3
 8002ab8:	e7d9      	b.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002aba:	2400      	movs	r4, #0
 8002abc:	e7d7      	b.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002abe:	2403      	movs	r4, #3
 8002ac0:	e7d5      	b.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ac2:	2402      	movs	r4, #2
 8002ac4:	e7d3      	b.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40022000 	.word	0x40022000

08002ad0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad0:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x8c>)
 8002ad2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ad4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ad6:	f012 020c 	ands.w	r2, r2, #12
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x18>
 8002adc:	2a0c      	cmp	r2, #12
 8002ade:	d115      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ae4:	2901      	cmp	r1, #1
 8002ae6:	d118      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ae8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002aea:	481d      	ldr	r0, [pc, #116]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002aec:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002aee:	bf55      	itete	pl
 8002af0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002af4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002af6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002afa:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002afe:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b02:	b34a      	cbz	r2, 8002b58 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b04:	2a0c      	cmp	r2, #12
 8002b06:	d009      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x4c>
 8002b08:	2000      	movs	r0, #0
  return sysclockfreq;
 8002b0a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b0c:	2a04      	cmp	r2, #4
 8002b0e:	d022      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b10:	2a08      	cmp	r2, #8
 8002b12:	4814      	ldr	r0, [pc, #80]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b14:	bf18      	it	ne
 8002b16:	2000      	movne	r0, #0
 8002b18:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b1a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002b22:	2a02      	cmp	r2, #2
 8002b24:	d015      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x82>
 8002b26:	490f      	ldr	r1, [pc, #60]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b28:	2a03      	cmp	r2, #3
 8002b2a:	bf08      	it	eq
 8002b2c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b2e:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b30:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b38:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b3c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b40:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b42:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b44:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b46:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b48:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8002b4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b50:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002b52:	4805      	ldr	r0, [pc, #20]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b54:	e7eb      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002b56:	4804      	ldr	r0, [pc, #16]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	08005f70 	.word	0x08005f70
 8002b64:	007a1200 	.word	0x007a1200
 8002b68:	00f42400 	.word	0x00f42400

08002b6c <HAL_RCC_OscConfig>:
{
 8002b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002b70:	4605      	mov	r5, r0
 8002b72:	b918      	cbnz	r0, 8002b7c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002b74:	2001      	movs	r0, #1
}
 8002b76:	b003      	add	sp, #12
 8002b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7c:	4ca7      	ldr	r4, [pc, #668]	; (8002e1c <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b7e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b80:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b82:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b84:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b8e:	d53d      	bpl.n	8002c0c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b90:	b11e      	cbz	r6, 8002b9a <HAL_RCC_OscConfig+0x2e>
 8002b92:	2e0c      	cmp	r6, #12
 8002b94:	d166      	bne.n	8002c64 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b96:	2f01      	cmp	r7, #1
 8002b98:	d164      	bne.n	8002c64 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	0799      	lsls	r1, r3, #30
 8002b9e:	d502      	bpl.n	8002ba6 <HAL_RCC_OscConfig+0x3a>
 8002ba0:	69ab      	ldr	r3, [r5, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0e6      	beq.n	8002b74 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	6a28      	ldr	r0, [r5, #32]
 8002baa:	071a      	lsls	r2, r3, #28
 8002bac:	bf56      	itet	pl
 8002bae:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002bb2:	6823      	ldrmi	r3, [r4, #0]
 8002bb4:	091b      	lsrpl	r3, r3, #4
 8002bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bba:	4298      	cmp	r0, r3
 8002bbc:	d93b      	bls.n	8002c36 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bbe:	f7ff ff45 	bl	8002a4c <RCC_SetFlashLatencyFromMSIRange>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d1d6      	bne.n	8002b74 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	f043 0308 	orr.w	r3, r3, #8
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	6a2a      	ldr	r2, [r5, #32]
 8002bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bda:	6863      	ldr	r3, [r4, #4]
 8002bdc:	69ea      	ldr	r2, [r5, #28]
 8002bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002be6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be8:	f7ff ff72 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002bec:	68a3      	ldr	r3, [r4, #8]
 8002bee:	4a8c      	ldr	r2, [pc, #560]	; (8002e20 <HAL_RCC_OscConfig+0x2b4>)
 8002bf0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bf4:	5cd3      	ldrb	r3, [r2, r3]
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	40d8      	lsrs	r0, r3
 8002bfc:	4b89      	ldr	r3, [pc, #548]	; (8002e24 <HAL_RCC_OscConfig+0x2b8>)
 8002bfe:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002c00:	4b89      	ldr	r3, [pc, #548]	; (8002e28 <HAL_RCC_OscConfig+0x2bc>)
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	f7ff f9f6 	bl	8001ff4 <HAL_InitTick>
        if(status != HAL_OK)
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d1b4      	bne.n	8002b76 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	07d9      	lsls	r1, r3, #31
 8002c10:	d45f      	bmi.n	8002cd2 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c12:	682b      	ldr	r3, [r5, #0]
 8002c14:	079a      	lsls	r2, r3, #30
 8002c16:	f100 809e 	bmi.w	8002d56 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1a:	682b      	ldr	r3, [r5, #0]
 8002c1c:	0719      	lsls	r1, r3, #28
 8002c1e:	f100 80d2 	bmi.w	8002dc6 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c22:	682b      	ldr	r3, [r5, #0]
 8002c24:	075a      	lsls	r2, r3, #29
 8002c26:	f100 8101 	bmi.w	8002e2c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c2a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 816a 	bne.w	8002f06 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002c32:	2000      	movs	r0, #0
 8002c34:	e79f      	b.n	8002b76 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c44:	4303      	orrs	r3, r0
 8002c46:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c48:	6863      	ldr	r3, [r4, #4]
 8002c4a:	69ea      	ldr	r2, [r5, #28]
 8002c4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c54:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c56:	2e00      	cmp	r6, #0
 8002c58:	d1c6      	bne.n	8002be8 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c5a:	f7ff fef7 	bl	8002a4c <RCC_SetFlashLatencyFromMSIRange>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d0c2      	beq.n	8002be8 <HAL_RCC_OscConfig+0x7c>
 8002c62:	e787      	b.n	8002b74 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c64:	69ab      	ldr	r3, [r5, #24]
 8002c66:	b31b      	cbz	r3, 8002cb0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c70:	f7ff fa00 	bl	8002074 <HAL_GetTick>
 8002c74:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	079b      	lsls	r3, r3, #30
 8002c7a:	d511      	bpl.n	8002ca0 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	f043 0308 	orr.w	r3, r3, #8
 8002c82:	6023      	str	r3, [r4, #0]
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	6a2a      	ldr	r2, [r5, #32]
 8002c88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	69ea      	ldr	r2, [r5, #28]
 8002c94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c9c:	6063      	str	r3, [r4, #4]
 8002c9e:	e7b5      	b.n	8002c0c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca0:	f7ff f9e8 	bl	8002074 <HAL_GetTick>
 8002ca4:	eba0 0008 	sub.w	r0, r0, r8
 8002ca8:	2802      	cmp	r0, #2
 8002caa:	d9e4      	bls.n	8002c76 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002cac:	2003      	movs	r0, #3
 8002cae:	e762      	b.n	8002b76 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cb8:	f7ff f9dc 	bl	8002074 <HAL_GetTick>
 8002cbc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	0798      	lsls	r0, r3, #30
 8002cc2:	d5a3      	bpl.n	8002c0c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc4:	f7ff f9d6 	bl	8002074 <HAL_GetTick>
 8002cc8:	eba0 0008 	sub.w	r0, r0, r8
 8002ccc:	2802      	cmp	r0, #2
 8002cce:	d9f6      	bls.n	8002cbe <HAL_RCC_OscConfig+0x152>
 8002cd0:	e7ec      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cd2:	2e08      	cmp	r6, #8
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_OscConfig+0x172>
 8002cd6:	2e0c      	cmp	r6, #12
 8002cd8:	d108      	bne.n	8002cec <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cda:	2f03      	cmp	r7, #3
 8002cdc:	d106      	bne.n	8002cec <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	039b      	lsls	r3, r3, #14
 8002ce2:	d596      	bpl.n	8002c12 <HAL_RCC_OscConfig+0xa6>
 8002ce4:	686b      	ldr	r3, [r5, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d193      	bne.n	8002c12 <HAL_RCC_OscConfig+0xa6>
 8002cea:	e743      	b.n	8002b74 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cec:	686b      	ldr	r3, [r5, #4]
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf2:	d110      	bne.n	8002d16 <HAL_RCC_OscConfig+0x1aa>
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f9ba 	bl	8002074 <HAL_GetTick>
 8002d00:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	0398      	lsls	r0, r3, #14
 8002d06:	d484      	bmi.n	8002c12 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7ff f9b4 	bl	8002074 <HAL_GetTick>
 8002d0c:	eba0 0008 	sub.w	r0, r0, r8
 8002d10:	2864      	cmp	r0, #100	; 0x64
 8002d12:	d9f6      	bls.n	8002d02 <HAL_RCC_OscConfig+0x196>
 8002d14:	e7ca      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1a:	d104      	bne.n	8002d26 <HAL_RCC_OscConfig+0x1ba>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d22:	6023      	str	r3, [r4, #0]
 8002d24:	e7e6      	b.n	8002cf4 <HAL_RCC_OscConfig+0x188>
 8002d26:	6822      	ldr	r2, [r4, #0]
 8002d28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d2c:	6022      	str	r2, [r4, #0]
 8002d2e:	6822      	ldr	r2, [r4, #0]
 8002d30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d34:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002d3a:	f7ff f99b 	bl	8002074 <HAL_GetTick>
 8002d3e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	0399      	lsls	r1, r3, #14
 8002d44:	f57f af65 	bpl.w	8002c12 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d48:	f7ff f994 	bl	8002074 <HAL_GetTick>
 8002d4c:	eba0 0008 	sub.w	r0, r0, r8
 8002d50:	2864      	cmp	r0, #100	; 0x64
 8002d52:	d9f5      	bls.n	8002d40 <HAL_RCC_OscConfig+0x1d4>
 8002d54:	e7aa      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d56:	2e04      	cmp	r6, #4
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1f6>
 8002d5a:	2e0c      	cmp	r6, #12
 8002d5c:	d110      	bne.n	8002d80 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d5e:	2f02      	cmp	r7, #2
 8002d60:	d10e      	bne.n	8002d80 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	055a      	lsls	r2, r3, #21
 8002d66:	d503      	bpl.n	8002d70 <HAL_RCC_OscConfig+0x204>
 8002d68:	68eb      	ldr	r3, [r5, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f43f af02 	beq.w	8002b74 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	6863      	ldr	r3, [r4, #4]
 8002d72:	692a      	ldr	r2, [r5, #16]
 8002d74:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002d78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d7c:	6063      	str	r3, [r4, #4]
 8002d7e:	e74c      	b.n	8002c1a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d80:	68eb      	ldr	r3, [r5, #12]
 8002d82:	b17b      	cbz	r3, 8002da4 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d8c:	f7ff f972 	bl	8002074 <HAL_GetTick>
 8002d90:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	055b      	lsls	r3, r3, #21
 8002d96:	d4eb      	bmi.n	8002d70 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d98:	f7ff f96c 	bl	8002074 <HAL_GetTick>
 8002d9c:	1bc0      	subs	r0, r0, r7
 8002d9e:	2802      	cmp	r0, #2
 8002da0:	d9f7      	bls.n	8002d92 <HAL_RCC_OscConfig+0x226>
 8002da2:	e783      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002daa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002dac:	f7ff f962 	bl	8002074 <HAL_GetTick>
 8002db0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	0558      	lsls	r0, r3, #21
 8002db6:	f57f af30 	bpl.w	8002c1a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7ff f95b 	bl	8002074 <HAL_GetTick>
 8002dbe:	1bc0      	subs	r0, r0, r7
 8002dc0:	2802      	cmp	r0, #2
 8002dc2:	d9f6      	bls.n	8002db2 <HAL_RCC_OscConfig+0x246>
 8002dc4:	e772      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc6:	696b      	ldr	r3, [r5, #20]
 8002dc8:	b19b      	cbz	r3, 8002df2 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8002dca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002dd6:	f7ff f94d 	bl	8002074 <HAL_GetTick>
 8002dda:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ddc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002de0:	079b      	lsls	r3, r3, #30
 8002de2:	f53f af1e 	bmi.w	8002c22 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de6:	f7ff f945 	bl	8002074 <HAL_GetTick>
 8002dea:	1bc0      	subs	r0, r0, r7
 8002dec:	2802      	cmp	r0, #2
 8002dee:	d9f5      	bls.n	8002ddc <HAL_RCC_OscConfig+0x270>
 8002df0:	e75c      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002df2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002dfe:	f7ff f939 	bl	8002074 <HAL_GetTick>
 8002e02:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002e08:	0798      	lsls	r0, r3, #30
 8002e0a:	f57f af0a 	bpl.w	8002c22 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7ff f931 	bl	8002074 <HAL_GetTick>
 8002e12:	1bc0      	subs	r0, r0, r7
 8002e14:	2802      	cmp	r0, #2
 8002e16:	d9f5      	bls.n	8002e04 <HAL_RCC_OscConfig+0x298>
 8002e18:	e748      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	08005fa0 	.word	0x08005fa0
 8002e24:	20000030 	.word	0x20000030
 8002e28:	20000038 	.word	0x20000038
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e2e:	00d9      	lsls	r1, r3, #3
 8002e30:	d429      	bmi.n	8002e86 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e44:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e48:	4f89      	ldr	r7, [pc, #548]	; (8003070 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	05da      	lsls	r2, r3, #23
 8002e4e:	d51d      	bpl.n	8002e8c <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	68ab      	ldr	r3, [r5, #8]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d12b      	bne.n	8002eae <HAL_RCC_OscConfig+0x342>
 8002e56:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002e62:	f7ff f907 	bl	8002074 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e6a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e70:	0798      	lsls	r0, r3, #30
 8002e72:	d542      	bpl.n	8002efa <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002e74:	f1b8 0f00 	cmp.w	r8, #0
 8002e78:	f43f aed7 	beq.w	8002c2a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e82:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e84:	e6d1      	b.n	8002c2a <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	f04f 0800 	mov.w	r8, #0
 8002e8a:	e7dd      	b.n	8002e48 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002e94:	f7ff f8ee 	bl	8002074 <HAL_GetTick>
 8002e98:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	05db      	lsls	r3, r3, #23
 8002e9e:	d4d7      	bmi.n	8002e50 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea0:	f7ff f8e8 	bl	8002074 <HAL_GetTick>
 8002ea4:	eba0 0009 	sub.w	r0, r0, r9
 8002ea8:	2802      	cmp	r0, #2
 8002eaa:	d9f6      	bls.n	8002e9a <HAL_RCC_OscConfig+0x32e>
 8002eac:	e6fe      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x354>
 8002eb2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002ebe:	e7ca      	b.n	8002e56 <HAL_RCC_OscConfig+0x2ea>
 8002ec0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002ecc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002ed0:	f022 0204 	bic.w	r2, r2, #4
 8002ed4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1c2      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002edc:	f7ff f8ca 	bl	8002074 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ee4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ee6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002eea:	0799      	lsls	r1, r3, #30
 8002eec:	d5c2      	bpl.n	8002e74 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7ff f8c1 	bl	8002074 <HAL_GetTick>
 8002ef2:	1bc0      	subs	r0, r0, r7
 8002ef4:	4548      	cmp	r0, r9
 8002ef6:	d9f6      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x37a>
 8002ef8:	e6d8      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7ff f8bb 	bl	8002074 <HAL_GetTick>
 8002efe:	1bc0      	subs	r0, r0, r7
 8002f00:	4548      	cmp	r0, r9
 8002f02:	d9b3      	bls.n	8002e6c <HAL_RCC_OscConfig+0x300>
 8002f04:	e6d2      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	f040 808f 	bne.w	800302a <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002f0c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002f10:	f003 0103 	and.w	r1, r3, #3
 8002f14:	4291      	cmp	r1, r2
 8002f16:	d124      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f18:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002f1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f1e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f20:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002f24:	d11d      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f26:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002f28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f2c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002f30:	d117      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f32:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002f34:	3a07      	subs	r2, #7
 8002f36:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002f3a:	bf18      	it	ne
 8002f3c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3e:	4291      	cmp	r1, r2
 8002f40:	d10f      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f42:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002f44:	0852      	lsrs	r2, r2, #1
 8002f46:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002f4a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f4c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f52:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002f54:	0852      	lsrs	r2, r2, #1
 8002f56:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002f5a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f5c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002f60:	d04a      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f62:	2e0c      	cmp	r6, #12
 8002f64:	f43f ae06 	beq.w	8002b74 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	f53f ae02 	bmi.w	8002b74 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	f53f adfe 	bmi.w	8002b74 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002f80:	f7ff f878 	bl	8002074 <HAL_GetTick>
 8002f84:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	019f      	lsls	r7, r3, #6
 8002f8a:	d42f      	bmi.n	8002fec <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8c:	68e2      	ldr	r2, [r4, #12]
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x508>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002f94:	4313      	orrs	r3, r2
 8002f96:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002f98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f9c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002f9e:	3a01      	subs	r2, #1
 8002fa0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002fa4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002fa6:	0912      	lsrs	r2, r2, #4
 8002fa8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002fac:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002fb6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002fb8:	0852      	lsrs	r2, r2, #1
 8002fba:	3a01      	subs	r2, #1
 8002fbc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002fc0:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fca:	68e3      	ldr	r3, [r4, #12]
 8002fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd0:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002fd2:	f7ff f84f 	bl	8002074 <HAL_GetTick>
 8002fd6:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	0198      	lsls	r0, r3, #6
 8002fdc:	f53f ae29 	bmi.w	8002c32 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7ff f848 	bl	8002074 <HAL_GetTick>
 8002fe4:	1b40      	subs	r0, r0, r5
 8002fe6:	2802      	cmp	r0, #2
 8002fe8:	d9f6      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x46c>
 8002fea:	e65f      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fec:	f7ff f842 	bl	8002074 <HAL_GetTick>
 8002ff0:	1b80      	subs	r0, r0, r6
 8002ff2:	2802      	cmp	r0, #2
 8002ff4:	d9c7      	bls.n	8002f86 <HAL_RCC_OscConfig+0x41a>
 8002ff6:	e659      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	0199      	lsls	r1, r3, #6
 8002ffc:	f53f ae19 	bmi.w	8002c32 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003006:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003008:	68e3      	ldr	r3, [r4, #12]
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8003010:	f7ff f830 	bl	8002074 <HAL_GetTick>
 8003014:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	019a      	lsls	r2, r3, #6
 800301a:	f53f ae0a 	bmi.w	8002c32 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301e:	f7ff f829 	bl	8002074 <HAL_GetTick>
 8003022:	1b40      	subs	r0, r0, r5
 8003024:	2802      	cmp	r0, #2
 8003026:	d9f6      	bls.n	8003016 <HAL_RCC_OscConfig+0x4aa>
 8003028:	e640      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800302a:	2e0c      	cmp	r6, #12
 800302c:	f43f ada2 	beq.w	8002b74 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003036:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800303e:	bf02      	ittt	eq
 8003040:	68e3      	ldreq	r3, [r4, #12]
 8003042:	f023 0303 	biceq.w	r3, r3, #3
 8003046:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003048:	68e3      	ldr	r3, [r4, #12]
 800304a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800304e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003052:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003054:	f7ff f80e 	bl	8002074 <HAL_GetTick>
 8003058:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	019b      	lsls	r3, r3, #6
 800305e:	f57f ade8 	bpl.w	8002c32 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7ff f807 	bl	8002074 <HAL_GetTick>
 8003066:	1b40      	subs	r0, r0, r5
 8003068:	2802      	cmp	r0, #2
 800306a:	d9f6      	bls.n	800305a <HAL_RCC_OscConfig+0x4ee>
 800306c:	e61e      	b.n	8002cac <HAL_RCC_OscConfig+0x140>
 800306e:	bf00      	nop
 8003070:	40007000 	.word	0x40007000
 8003074:	f99d808c 	.word	0xf99d808c

08003078 <HAL_RCC_ClockConfig>:
{
 8003078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800307c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800307e:	4604      	mov	r4, r0
 8003080:	b910      	cbnz	r0, 8003088 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003082:	2001      	movs	r0, #1
}
 8003084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4a40      	ldr	r2, [pc, #256]	; (800318c <HAL_RCC_ClockConfig+0x114>)
 800308a:	6813      	ldr	r3, [r2, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	428b      	cmp	r3, r1
 8003092:	d32a      	bcc.n	80030ea <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	07d9      	lsls	r1, r3, #31
 8003098:	d432      	bmi.n	8003100 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309a:	6821      	ldr	r1, [r4, #0]
 800309c:	078a      	lsls	r2, r1, #30
 800309e:	d45b      	bmi.n	8003158 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a0:	4a3a      	ldr	r2, [pc, #232]	; (800318c <HAL_RCC_ClockConfig+0x114>)
 80030a2:	6813      	ldr	r3, [r2, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	42ab      	cmp	r3, r5
 80030aa:	d85d      	bhi.n	8003168 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	f011 0f04 	tst.w	r1, #4
 80030b0:	4d37      	ldr	r5, [pc, #220]	; (8003190 <HAL_RCC_ClockConfig+0x118>)
 80030b2:	d164      	bne.n	800317e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	070b      	lsls	r3, r1, #28
 80030b6:	d506      	bpl.n	80030c6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b8:	68ab      	ldr	r3, [r5, #8]
 80030ba:	6922      	ldr	r2, [r4, #16]
 80030bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80030c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80030c4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030c6:	f7ff fd03 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 80030ca:	68ab      	ldr	r3, [r5, #8]
 80030cc:	4a31      	ldr	r2, [pc, #196]	; (8003194 <HAL_RCC_ClockConfig+0x11c>)
 80030ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80030d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	40d8      	lsrs	r0, r3
 80030de:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <HAL_RCC_ClockConfig+0x120>)
 80030e0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80030e2:	4b2e      	ldr	r3, [pc, #184]	; (800319c <HAL_RCC_ClockConfig+0x124>)
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	f7fe bf85 	b.w	8001ff4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	f023 0307 	bic.w	r3, r3, #7
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f4:	6813      	ldr	r3, [r2, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	428b      	cmp	r3, r1
 80030fc:	d1c1      	bne.n	8003082 <HAL_RCC_ClockConfig+0xa>
 80030fe:	e7c9      	b.n	8003094 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003100:	6862      	ldr	r2, [r4, #4]
 8003102:	4e23      	ldr	r6, [pc, #140]	; (8003190 <HAL_RCC_ClockConfig+0x118>)
 8003104:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003108:	d11a      	bne.n	8003140 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310e:	d0b8      	beq.n	8003082 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003110:	68b3      	ldr	r3, [r6, #8]
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	4313      	orrs	r3, r2
 8003118:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800311a:	f7fe ffab 	bl	8002074 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003122:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003124:	68b3      	ldr	r3, [r6, #8]
 8003126:	6862      	ldr	r2, [r4, #4]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003130:	d0b3      	beq.n	800309a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003132:	f7fe ff9f 	bl	8002074 <HAL_GetTick>
 8003136:	1bc0      	subs	r0, r0, r7
 8003138:	4540      	cmp	r0, r8
 800313a:	d9f3      	bls.n	8003124 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 800313c:	2003      	movs	r0, #3
 800313e:	e7a1      	b.n	8003084 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003140:	2a02      	cmp	r2, #2
 8003142:	d102      	bne.n	800314a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003144:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003148:	e7e1      	b.n	800310e <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800314a:	b912      	cbnz	r2, 8003152 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800314c:	f013 0f02 	tst.w	r3, #2
 8003150:	e7dd      	b.n	800310e <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003152:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003156:	e7da      	b.n	800310e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003158:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <HAL_RCC_ClockConfig+0x118>)
 800315a:	68a0      	ldr	r0, [r4, #8]
 800315c:	6893      	ldr	r3, [r2, #8]
 800315e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003162:	4303      	orrs	r3, r0
 8003164:	6093      	str	r3, [r2, #8]
 8003166:	e79b      	b.n	80030a0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003168:	6813      	ldr	r3, [r2, #0]
 800316a:	f023 0307 	bic.w	r3, r3, #7
 800316e:	432b      	orrs	r3, r5
 8003170:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	6813      	ldr	r3, [r2, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	42ab      	cmp	r3, r5
 800317a:	d182      	bne.n	8003082 <HAL_RCC_ClockConfig+0xa>
 800317c:	e796      	b.n	80030ac <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317e:	68ab      	ldr	r3, [r5, #8]
 8003180:	68e2      	ldr	r2, [r4, #12]
 8003182:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003186:	4313      	orrs	r3, r2
 8003188:	60ab      	str	r3, [r5, #8]
 800318a:	e793      	b.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
 800318c:	40022000 	.word	0x40022000
 8003190:	40021000 	.word	0x40021000
 8003194:	08005fa0 	.word	0x08005fa0
 8003198:	20000030 	.word	0x20000030
 800319c:	20000038 	.word	0x20000038

080031a0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80031a2:	4a06      	ldr	r2, [pc, #24]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ae:	6810      	ldr	r0, [r2, #0]
 80031b0:	f003 031f 	and.w	r3, r3, #31
}
 80031b4:	40d8      	lsrs	r0, r3
 80031b6:	4770      	bx	lr
 80031b8:	40021000 	.word	0x40021000
 80031bc:	08005fb0 	.word	0x08005fb0
 80031c0:	20000030 	.word	0x20000030

080031c4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80031c6:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80031ce:	5cd3      	ldrb	r3, [r2, r3]
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d2:	6810      	ldr	r0, [r2, #0]
 80031d4:	f003 031f 	and.w	r3, r3, #31
}
 80031d8:	40d8      	lsrs	r0, r3
 80031da:	4770      	bx	lr
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08005fb0 	.word	0x08005fb0
 80031e4:	20000030 	.word	0x20000030

080031e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80031ec:	4699      	mov	r9, r3
 80031ee:	4688      	mov	r8, r1
 80031f0:	4617      	mov	r7, r2
 80031f2:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031f4:	f7fe ff3e 	bl	8002074 <HAL_GetTick>
 80031f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031fa:	444b      	add	r3, r9
 80031fc:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 80031fe:	f7fe ff39 	bl	8002074 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003202:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <SPI_WaitFifoStateUntilTimeout+0xc4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2623      	movs	r6, #35	; 0x23
 8003208:	435e      	muls	r6, r3
 800320a:	0d36      	lsrs	r6, r6, #20
 800320c:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 800320e:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003210:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003212:	6822      	ldr	r2, [r4, #0]
 8003214:	6893      	ldr	r3, [r2, #8]
 8003216:	ea03 0308 	and.w	r3, r3, r8
 800321a:	42bb      	cmp	r3, r7
 800321c:	d101      	bne.n	8003222 <SPI_WaitFifoStateUntilTimeout+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 800321e:	2000      	movs	r0, #0
 8003220:	e037      	b.n	8003292 <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003222:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 8003226:	d104      	bne.n	8003232 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003228:	b91f      	cbnz	r7, 8003232 <SPI_WaitFifoStateUntilTimeout+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800322a:	7b13      	ldrb	r3, [r2, #12]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8003230:	9b00      	ldr	r3, [sp, #0]
    if (Timeout != HAL_MAX_DELAY)
 8003232:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003236:	d0ed      	beq.n	8003214 <SPI_WaitFifoStateUntilTimeout+0x2c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003238:	f7fe ff1c 	bl	8002074 <HAL_GetTick>
 800323c:	eba0 000a 	sub.w	r0, r0, sl
 8003240:	4285      	cmp	r5, r0
 8003242:	d829      	bhi.n	8003298 <SPI_WaitFifoStateUntilTimeout+0xb0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800324c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324e:	6862      	ldr	r2, [r4, #4]
 8003250:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003254:	d10a      	bne.n	800326c <SPI_WaitFifoStateUntilTimeout+0x84>
 8003256:	68a2      	ldr	r2, [r4, #8]
 8003258:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800325c:	d002      	beq.n	8003264 <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800325e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003262:	d103      	bne.n	800326c <SPI_WaitFifoStateUntilTimeout+0x84>
          __HAL_SPI_DISABLE(hspi);
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800326c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800326e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003272:	d107      	bne.n	8003284 <SPI_WaitFifoStateUntilTimeout+0x9c>
          SPI_RESET_CRC(hspi);
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003282:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003284:	2301      	movs	r3, #1
 8003286:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800328a:	2300      	movs	r3, #0
 800328c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003290:	2003      	movs	r0, #3
}
 8003292:	b002      	add	sp, #8
 8003294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8003298:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800329a:	2b00      	cmp	r3, #0
      count--;
 800329c:	9b01      	ldr	r3, [sp, #4]
 800329e:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80032a2:	bf08      	it	eq
 80032a4:	2500      	moveq	r5, #0
      count--;
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	e7b3      	b.n	8003212 <SPI_WaitFifoStateUntilTimeout+0x2a>
 80032aa:	bf00      	nop
 80032ac:	20000030 	.word	0x20000030

080032b0 <SPI_WaitFlagStateUntilTimeout>:
{
 80032b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	461f      	mov	r7, r3
 80032b6:	4689      	mov	r9, r1
 80032b8:	4690      	mov	r8, r2
 80032ba:	4604      	mov	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032bc:	f7fe feda 	bl	8002074 <HAL_GetTick>
 80032c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032c2:	443b      	add	r3, r7
 80032c4:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 80032c6:	f7fe fed5 	bl	8002074 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ca:	4b26      	ldr	r3, [pc, #152]	; (8003364 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 80032cc:	681e      	ldr	r6, [r3, #0]
 80032ce:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 80032d2:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 80032d4:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032d6:	9601      	str	r6, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d8:	6822      	ldr	r2, [r4, #0]
 80032da:	6893      	ldr	r3, [r2, #8]
 80032dc:	ea39 0303 	bics.w	r3, r9, r3
 80032e0:	bf0c      	ite	eq
 80032e2:	2301      	moveq	r3, #1
 80032e4:	2300      	movne	r3, #0
 80032e6:	4543      	cmp	r3, r8
 80032e8:	d101      	bne.n	80032ee <SPI_WaitFlagStateUntilTimeout+0x3e>
  return HAL_OK;
 80032ea:	2000      	movs	r0, #0
 80032ec:	e02e      	b.n	800334c <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	1c7b      	adds	r3, r7, #1
 80032f0:	d0f3      	beq.n	80032da <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f2:	f7fe febf 	bl	8002074 <HAL_GetTick>
 80032f6:	eba0 000a 	sub.w	r0, r0, sl
 80032fa:	42a8      	cmp	r0, r5
 80032fc:	d329      	bcc.n	8003352 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003306:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003308:	6862      	ldr	r2, [r4, #4]
 800330a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800330e:	d10a      	bne.n	8003326 <SPI_WaitFlagStateUntilTimeout+0x76>
 8003310:	68a2      	ldr	r2, [r4, #8]
 8003312:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003316:	d002      	beq.n	800331e <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003318:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800331c:	d103      	bne.n	8003326 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003324:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003326:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003328:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800332c:	d107      	bne.n	800333e <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800333c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800333e:	2301      	movs	r3, #1
 8003340:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003344:	2300      	movs	r3, #0
 8003346:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800334a:	2003      	movs	r0, #3
}
 800334c:	b002      	add	sp, #8
 800334e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8003352:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003354:	2b00      	cmp	r3, #0
      count--;
 8003356:	9b01      	ldr	r3, [sp, #4]
 8003358:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800335c:	bf08      	it	eq
 800335e:	2500      	moveq	r5, #0
      count--;
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	e7b9      	b.n	80032d8 <SPI_WaitFlagStateUntilTimeout+0x28>
 8003364:	20000030 	.word	0x20000030

08003368 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800336a:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800336c:	6842      	ldr	r2, [r0, #4]
 800336e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8003372:	4604      	mov	r4, r0
 8003374:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003376:	d10b      	bne.n	8003390 <SPI_EndRxTransaction+0x28>
 8003378:	6882      	ldr	r2, [r0, #8]
 800337a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800337e:	d002      	beq.n	8003386 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003380:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003384:	d104      	bne.n	8003390 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003386:	6821      	ldr	r1, [r4, #0]
 8003388:	680a      	ldr	r2, [r1, #0]
 800338a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338e:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003390:	9600      	str	r6, [sp, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	4620      	mov	r0, r4
 8003398:	9303      	str	r3, [sp, #12]
 800339a:	f7ff ff89 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 800339e:	9b03      	ldr	r3, [sp, #12]
 80033a0:	4605      	mov	r5, r0
 80033a2:	b128      	cbz	r0, 80033b0 <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033a6:	f043 0320 	orr.w	r3, r3, #32
 80033aa:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80033ac:	2503      	movs	r5, #3
 80033ae:	e013      	b.n	80033d8 <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b0:	6862      	ldr	r2, [r4, #4]
 80033b2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80033b6:	d10f      	bne.n	80033d8 <SPI_EndRxTransaction+0x70>
 80033b8:	68a2      	ldr	r2, [r4, #8]
 80033ba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80033be:	d002      	beq.n	80033c6 <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033c0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80033c4:	d108      	bne.n	80033d8 <SPI_EndRxTransaction+0x70>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033c6:	9600      	str	r6, [sp, #0]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7ff ff0a 	bl	80031e8 <SPI_WaitFifoStateUntilTimeout>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d1e5      	bne.n	80033a4 <SPI_EndRxTransaction+0x3c>
}
 80033d8:	4628      	mov	r0, r5
 80033da:	b004      	add	sp, #16
 80033dc:	bd70      	pop	{r4, r5, r6, pc}

080033de <SPI_EndRxTxTransaction>:
{
 80033de:	b530      	push	{r4, r5, lr}
 80033e0:	b085      	sub	sp, #20
 80033e2:	460b      	mov	r3, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033e4:	9200      	str	r2, [sp, #0]
 80033e6:	9103      	str	r1, [sp, #12]
{
 80033e8:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033ea:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80033ee:	2200      	movs	r2, #0
{
 80033f0:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033f2:	f7ff fef9 	bl	80031e8 <SPI_WaitFifoStateUntilTimeout>
 80033f6:	9b03      	ldr	r3, [sp, #12]
 80033f8:	4602      	mov	r2, r0
 80033fa:	b128      	cbz	r0, 8003408 <SPI_EndRxTxTransaction+0x2a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033fe:	f043 0320 	orr.w	r3, r3, #32
 8003402:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003404:	2003      	movs	r0, #3
 8003406:	e011      	b.n	800342c <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003408:	9500      	str	r5, [sp, #0]
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	4620      	mov	r0, r4
 800340e:	9303      	str	r3, [sp, #12]
 8003410:	f7ff ff4e 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 8003414:	9b03      	ldr	r3, [sp, #12]
 8003416:	4602      	mov	r2, r0
 8003418:	2800      	cmp	r0, #0
 800341a:	d1ef      	bne.n	80033fc <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800341c:	9500      	str	r5, [sp, #0]
 800341e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003422:	4620      	mov	r0, r4
 8003424:	f7ff fee0 	bl	80031e8 <SPI_WaitFifoStateUntilTimeout>
 8003428:	2800      	cmp	r0, #0
 800342a:	d1e7      	bne.n	80033fc <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 800342c:	b005      	add	sp, #20
 800342e:	bd30      	pop	{r4, r5, pc}

08003430 <HAL_SPI_MspInit>:
}
 8003430:	4770      	bx	lr

08003432 <HAL_SPI_Init>:
{
 8003432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 8003434:	4604      	mov	r4, r0
 8003436:	2800      	cmp	r0, #0
 8003438:	d079      	beq.n	800352e <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800343a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	d14f      	bne.n	80034e0 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003440:	6842      	ldr	r2, [r0, #4]
 8003442:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003446:	d000      	beq.n	800344a <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003448:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800344a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800344e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003452:	b923      	cbnz	r3, 800345e <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8003454:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff ffe9 	bl	8003430 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800345e:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003460:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003462:	2302      	movs	r3, #2
 8003464:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003468:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800346a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800346e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003472:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	d85b      	bhi.n	8003532 <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800347a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800347e:	d000      	beq.n	8003482 <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003480:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	68a7      	ldr	r7, [r4, #8]
 8003486:	69a0      	ldr	r0, [r4, #24]
 8003488:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800348a:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 800348e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003492:	433b      	orrs	r3, r7
 8003494:	6927      	ldr	r7, [r4, #16]
 8003496:	f007 0702 	and.w	r7, r7, #2
 800349a:	433b      	orrs	r3, r7
 800349c:	6967      	ldr	r7, [r4, #20]
 800349e:	f007 0701 	and.w	r7, r7, #1
 80034a2:	433b      	orrs	r3, r7
 80034a4:	f400 7700 	and.w	r7, r0, #512	; 0x200
 80034a8:	433b      	orrs	r3, r7
 80034aa:	69e7      	ldr	r7, [r4, #28]
 80034ac:	f007 0738 	and.w	r7, r7, #56	; 0x38
 80034b0:	433b      	orrs	r3, r7
 80034b2:	6a27      	ldr	r7, [r4, #32]
 80034b4:	f007 0780 	and.w	r7, r7, #128	; 0x80
 80034b8:	433b      	orrs	r3, r7
 80034ba:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 80034be:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c6:	d111      	bne.n	80034ec <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80034c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034ca:	bb6b      	cbnz	r3, 8003528 <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80034d0:	d90a      	bls.n	80034e8 <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80034d2:	2302      	movs	r3, #2
 80034d4:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e005      	b.n	80034ec <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034e0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034e6:	e7b0      	b.n	800344a <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80034e8:	2301      	movs	r3, #1
 80034ea:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034ee:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	f007 0708 	and.w	r7, r7, #8
 80034f8:	433b      	orrs	r3, r7
 80034fa:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80034fe:	0c00      	lsrs	r0, r0, #16
 8003500:	4319      	orrs	r1, r3
 8003502:	f000 0004 	and.w	r0, r0, #4
 8003506:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003508:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800350c:	bf08      	it	eq
 800350e:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003510:	ea45 0501 	orr.w	r5, r5, r1
 8003514:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003516:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800351a:	bf08      	it	eq
 800351c:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 800351e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003520:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003522:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003528:	2b02      	cmp	r3, #2
 800352a:	d1df      	bne.n	80034ec <HAL_SPI_Init+0xba>
 800352c:	e7d3      	b.n	80034d6 <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 800352e:	2001      	movs	r0, #1
 8003530:	e7f9      	b.n	8003526 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003532:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003534:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8003538:	e7a1      	b.n	800347e <HAL_SPI_Init+0x4c>

0800353a <HAL_SPI_MspDeInit>:
 800353a:	4770      	bx	lr

0800353c <HAL_SPI_DeInit>:
{
 800353c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800353e:	4604      	mov	r4, r0
 8003540:	b180      	cbz	r0, 8003564 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8003542:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003544:	2302      	movs	r3, #2
 8003546:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800354a:	6813      	ldr	r3, [r2, #0]
 800354c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003550:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003552:	f7ff fff2 	bl	800353a <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003556:	2000      	movs	r0, #0
 8003558:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 800355a:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800355e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 8003562:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003564:	2001      	movs	r0, #1
 8003566:	e7fc      	b.n	8003562 <HAL_SPI_DeInit+0x26>

08003568 <HAL_SPI_TransmitReceive>:
{
 8003568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800356c:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hspi);
 8003572:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8003576:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8003578:	2b01      	cmp	r3, #1
{
 800357a:	4604      	mov	r4, r0
 800357c:	460e      	mov	r6, r1
 800357e:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 8003580:	f000 81ab 	beq.w	80038da <HAL_SPI_TransmitReceive+0x372>
 8003584:	2301      	movs	r3, #1
 8003586:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800358a:	f7fe fd73 	bl	8002074 <HAL_GetTick>
  tmp_state           = hspi->State;
 800358e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8003592:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003596:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8003598:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 800359a:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800359c:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80035a0:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035a2:	d00b      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x54>
 80035a4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80035a8:	f040 8195 	bne.w	80038d6 <HAL_SPI_TransmitReceive+0x36e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035ac:	68a3      	ldr	r3, [r4, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 8191 	bne.w	80038d6 <HAL_SPI_TransmitReceive+0x36e>
 80035b4:	f1bc 0f04 	cmp.w	ip, #4
 80035b8:	f040 818d 	bne.w	80038d6 <HAL_SPI_TransmitReceive+0x36e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035bc:	2e00      	cmp	r6, #0
 80035be:	f000 8172 	beq.w	80038a6 <HAL_SPI_TransmitReceive+0x33e>
 80035c2:	f1ba 0f00 	cmp.w	sl, #0
 80035c6:	f000 816e 	beq.w	80038a6 <HAL_SPI_TransmitReceive+0x33e>
 80035ca:	f1b9 0f00 	cmp.w	r9, #0
 80035ce:	f000 816a 	beq.w	80038a6 <HAL_SPI_TransmitReceive+0x33e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035d2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035d6:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035da:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035dc:	bf1c      	itt	ne
 80035de:	2305      	movne	r3, #5
 80035e0:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80035e8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 80035ee:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 80035f6:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035fa:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80035fc:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003600:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003604:	d107      	bne.n	8003616 <HAL_SPI_TransmitReceive+0xae>
    SPI_RESET_CRC(hspi);
 8003606:	682b      	ldr	r3, [r5, #0]
 8003608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800360c:	602b      	str	r3, [r5, #0]
 800360e:	682b      	ldr	r3, [r5, #0]
 8003610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003614:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003616:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800361a:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800361c:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8003620:	d802      	bhi.n	8003628 <HAL_SPI_TransmitReceive+0xc0>
 8003622:	f1b9 0f01 	cmp.w	r9, #1
 8003626:	d93a      	bls.n	800369e <HAL_SPI_TransmitReceive+0x136>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800362c:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003632:	bf5e      	ittt	pl
 8003634:	682b      	ldrpl	r3, [r5, #0]
 8003636:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800363a:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800363c:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8003640:	d97f      	bls.n	8003742 <HAL_SPI_TransmitReceive+0x1da>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003642:	b112      	cbz	r2, 800364a <HAL_SPI_TransmitReceive+0xe2>
 8003644:	f1b9 0f01 	cmp.w	r9, #1
 8003648:	d107      	bne.n	800365a <HAL_SPI_TransmitReceive+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800364a:	f836 3b02 	ldrh.w	r3, [r6], #2
 800364e:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 8003650:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003652:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003654:	3b01      	subs	r3, #1
 8003656:	b29b      	uxth	r3, r3
 8003658:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800365a:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800365e:	f001 0604 	and.w	r6, r1, #4
 8003662:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003666:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003668:	b29b      	uxth	r3, r3
 800366a:	b9db      	cbnz	r3, 80036a4 <HAL_SPI_TransmitReceive+0x13c>
 800366c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003670:	b29b      	uxth	r3, r3
 8003672:	b9bb      	cbnz	r3, 80036a4 <HAL_SPI_TransmitReceive+0x13c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003674:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367a:	f040 80fd 	bne.w	8003878 <HAL_SPI_TransmitReceive+0x310>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800367e:	2201      	movs	r2, #1
 8003680:	f8cd 8000 	str.w	r8, [sp]
 8003684:	463b      	mov	r3, r7
 8003686:	4611      	mov	r1, r2
 8003688:	4620      	mov	r0, r4
 800368a:	f7ff fe11 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 800368e:	2800      	cmp	r0, #0
 8003690:	f000 80ea 	beq.w	8003868 <HAL_SPI_TransmitReceive+0x300>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003694:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	6623      	str	r3, [r4, #96]	; 0x60
 800369c:	e02a      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x18c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800369e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a2:	e7c3      	b.n	800362c <HAL_SPI_TransmitReceive+0xc4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	0790      	lsls	r0, r2, #30
 80036aa:	d507      	bpl.n	80036bc <HAL_SPI_TransmitReceive+0x154>
 80036ac:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80036ae:	b292      	uxth	r2, r2
 80036b0:	b122      	cbz	r2, 80036bc <HAL_SPI_TransmitReceive+0x154>
 80036b2:	f1b9 0f00 	cmp.w	r9, #0
 80036b6:	d128      	bne.n	800370a <HAL_SPI_TransmitReceive+0x1a2>
        txallowed = 0U;
 80036b8:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	f011 0101 	ands.w	r1, r1, #1
 80036c2:	d00f      	beq.n	80036e4 <HAL_SPI_TransmitReceive+0x17c>
 80036c4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80036c8:	b292      	uxth	r2, r2
 80036ca:	b15a      	cbz	r2, 80036e4 <HAL_SPI_TransmitReceive+0x17c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036d0:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036d4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80036d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80036e2:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036e4:	f7fe fcc6 	bl	8002074 <HAL_GetTick>
 80036e8:	eba0 0008 	sub.w	r0, r0, r8
 80036ec:	42b8      	cmp	r0, r7
 80036ee:	d3ba      	bcc.n	8003666 <HAL_SPI_TransmitReceive+0xfe>
 80036f0:	1c79      	adds	r1, r7, #1
 80036f2:	d0b8      	beq.n	8003666 <HAL_SPI_TransmitReceive+0xfe>
          errorcode = HAL_TIMEOUT;
 80036f4:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036fc:	2300      	movs	r3, #0
 80036fe:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003702:	4628      	mov	r0, r5
 8003704:	b004      	add	sp, #16
 8003706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800370a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800370c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003710:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003712:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003714:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003716:	3a01      	subs	r2, #1
 8003718:	b292      	uxth	r2, r2
 800371a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800371c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800371e:	b292      	uxth	r2, r2
 8003720:	2a00      	cmp	r2, #0
 8003722:	d1c9      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x150>
 8003724:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003726:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800372a:	d1c5      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x150>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800372c:	b926      	cbnz	r6, 8003738 <HAL_SPI_TransmitReceive+0x1d0>
 800372e:	b11d      	cbz	r5, 8003738 <HAL_SPI_TransmitReceive+0x1d0>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003736:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	e7ba      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x150>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003742:	b112      	cbz	r2, 800374a <HAL_SPI_TransmitReceive+0x1e2>
 8003744:	f1b9 0f01 	cmp.w	r9, #1
 8003748:	d10b      	bne.n	8003762 <HAL_SPI_TransmitReceive+0x1fa>
      if (hspi->TxXferCount > 1U)
 800374a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d94b      	bls.n	80037ea <HAL_SPI_TransmitReceive+0x282>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003752:	f836 3b02 	ldrh.w	r3, [r6], #2
 8003756:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 8003758:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800375a:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800375c:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 800375e:	b29b      	uxth	r3, r3
 8003760:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003762:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003764:	f001 0604 	and.w	r6, r1, #4
 8003768:	f000 0908 	and.w	r9, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800376c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800376e:	b29b      	uxth	r3, r3
 8003770:	b92b      	cbnz	r3, 800377e <HAL_SPI_TransmitReceive+0x216>
 8003772:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	f43f af7b 	beq.w	8003674 <HAL_SPI_TransmitReceive+0x10c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800377e:	6821      	ldr	r1, [r4, #0]
 8003780:	688b      	ldr	r3, [r1, #8]
 8003782:	079a      	lsls	r2, r3, #30
 8003784:	d505      	bpl.n	8003792 <HAL_SPI_TransmitReceive+0x22a>
 8003786:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003788:	b29b      	uxth	r3, r3
 800378a:	b113      	cbz	r3, 8003792 <HAL_SPI_TransmitReceive+0x22a>
 800378c:	2d00      	cmp	r5, #0
 800378e:	d134      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x292>
        txallowed = 0U;
 8003790:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003792:	6821      	ldr	r1, [r4, #0]
 8003794:	688b      	ldr	r3, [r1, #8]
 8003796:	f013 0301 	ands.w	r3, r3, #1
 800379a:	d01d      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x270>
 800379c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80037a0:	b292      	uxth	r2, r2
 80037a2:	b1ca      	cbz	r2, 80037d8 <HAL_SPI_TransmitReceive+0x270>
        if (hspi->RxXferCount > 1U)
 80037a4:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 80037a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037aa:	b280      	uxth	r0, r0
 80037ac:	2801      	cmp	r0, #1
 80037ae:	d94f      	bls.n	8003850 <HAL_SPI_TransmitReceive+0x2e8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037b0:	68c8      	ldr	r0, [r1, #12]
 80037b2:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80037b6:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80037b8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80037bc:	3a02      	subs	r2, #2
 80037be:	b292      	uxth	r2, r2
 80037c0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80037c4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80037c8:	b292      	uxth	r2, r2
 80037ca:	2a01      	cmp	r2, #1
 80037cc:	d803      	bhi.n	80037d6 <HAL_SPI_TransmitReceive+0x26e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ce:	684a      	ldr	r2, [r1, #4]
 80037d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037d4:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 80037d6:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037d8:	f7fe fc4c 	bl	8002074 <HAL_GetTick>
 80037dc:	eba0 0008 	sub.w	r0, r0, r8
 80037e0:	42b8      	cmp	r0, r7
 80037e2:	d3c3      	bcc.n	800376c <HAL_SPI_TransmitReceive+0x204>
 80037e4:	1c7b      	adds	r3, r7, #1
 80037e6:	d0c1      	beq.n	800376c <HAL_SPI_TransmitReceive+0x204>
 80037e8:	e784      	b.n	80036f4 <HAL_SPI_TransmitReceive+0x18c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037ea:	7833      	ldrb	r3, [r6, #0]
 80037ec:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 80037ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037f0:	3301      	adds	r3, #1
 80037f2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80037f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037f6:	3b01      	subs	r3, #1
 80037f8:	e7b1      	b.n	800375e <HAL_SPI_TransmitReceive+0x1f6>
        if (hspi->TxXferCount > 1U)
 80037fa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80037fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037fe:	b292      	uxth	r2, r2
 8003800:	2a01      	cmp	r2, #1
 8003802:	d91d      	bls.n	8003840 <HAL_SPI_TransmitReceive+0x2d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003804:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003808:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800380a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800380c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800380e:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8003810:	b29b      	uxth	r3, r3
 8003812:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003814:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1b9      	bne.n	8003790 <HAL_SPI_TransmitReceive+0x228>
 800381c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003822:	d1b5      	bne.n	8003790 <HAL_SPI_TransmitReceive+0x228>
 8003824:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003826:	b936      	cbnz	r6, 8003836 <HAL_SPI_TransmitReceive+0x2ce>
 8003828:	f1b9 0f00 	cmp.w	r9, #0
 800382c:	d003      	beq.n	8003836 <HAL_SPI_TransmitReceive+0x2ce>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003834:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e7a7      	b.n	8003790 <HAL_SPI_TransmitReceive+0x228>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 8003844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003846:	3301      	adds	r3, #1
 8003848:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800384a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800384c:	3b01      	subs	r3, #1
 800384e:	e7df      	b.n	8003810 <HAL_SPI_TransmitReceive+0x2a8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003850:	7b09      	ldrb	r1, [r1, #12]
 8003852:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8003854:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003856:	3201      	adds	r2, #1
 8003858:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800385a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800385e:	3a01      	subs	r2, #1
 8003860:	b292      	uxth	r2, r2
 8003862:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8003866:	e7b6      	b.n	80037d6 <HAL_SPI_TransmitReceive+0x26e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003868:	68e2      	ldr	r2, [r4, #12]
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8003870:	d11b      	bne.n	80038aa <HAL_SPI_TransmitReceive+0x342>
      tmpreg = READ_REG(hspi->Instance->DR);
 8003872:	68db      	ldr	r3, [r3, #12]
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8003874:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8003876:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003878:	6822      	ldr	r2, [r4, #0]
 800387a:	6895      	ldr	r5, [r2, #8]
 800387c:	f015 0510 	ands.w	r5, r5, #16
 8003880:	d007      	beq.n	8003892 <HAL_SPI_TransmitReceive+0x32a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003882:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800388a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800388e:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8003890:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003892:	4642      	mov	r2, r8
 8003894:	4639      	mov	r1, r7
 8003896:	4620      	mov	r0, r4
 8003898:	f7ff fda1 	bl	80033de <SPI_EndRxTxTransaction>
 800389c:	2800      	cmp	r0, #0
 800389e:	f43f af2a 	beq.w	80036f6 <HAL_SPI_TransmitReceive+0x18e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038a2:	2320      	movs	r3, #32
 80038a4:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80038a6:	2501      	movs	r5, #1
 80038a8:	e725      	b.n	80036f6 <HAL_SPI_TransmitReceive+0x18e>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80038aa:	7b1b      	ldrb	r3, [r3, #12]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80038b0:	9b03      	ldr	r3, [sp, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80038b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d1df      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x310>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80038b8:	2201      	movs	r2, #1
 80038ba:	f8cd 8000 	str.w	r8, [sp]
 80038be:	463b      	mov	r3, r7
 80038c0:	4611      	mov	r1, r2
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7ff fcf4 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 80038c8:	2800      	cmp	r0, #0
 80038ca:	f47f aee3 	bne.w	8003694 <HAL_SPI_TransmitReceive+0x12c>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	7b1b      	ldrb	r3, [r3, #12]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e7ce      	b.n	8003874 <HAL_SPI_TransmitReceive+0x30c>
    errorcode = HAL_BUSY;
 80038d6:	2502      	movs	r5, #2
 80038d8:	e70d      	b.n	80036f6 <HAL_SPI_TransmitReceive+0x18e>
  __HAL_LOCK(hspi);
 80038da:	2502      	movs	r5, #2
 80038dc:	e711      	b.n	8003702 <HAL_SPI_TransmitReceive+0x19a>

080038de <HAL_SPI_Receive>:
{
 80038de:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80038e2:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	9303      	str	r3, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038e8:	6843      	ldr	r3, [r0, #4]
 80038ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80038ee:	4604      	mov	r4, r0
 80038f0:	4688      	mov	r8, r1
 80038f2:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80038f4:	d10c      	bne.n	8003910 <HAL_SPI_Receive+0x32>
 80038f6:	6883      	ldr	r3, [r0, #8]
 80038f8:	b953      	cbnz	r3, 8003910 <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038fa:	2304      	movs	r3, #4
 80038fc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003900:	4613      	mov	r3, r2
 8003902:	9500      	str	r5, [sp, #0]
 8003904:	460a      	mov	r2, r1
 8003906:	f7ff fe2f 	bl	8003568 <HAL_SPI_TransmitReceive>
}
 800390a:	b004      	add	sp, #16
 800390c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8003910:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003914:	2b01      	cmp	r3, #1
 8003916:	f000 80f7 	beq.w	8003b08 <HAL_SPI_Receive+0x22a>
 800391a:	2301      	movs	r3, #1
 800391c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003920:	f7fe fba8 	bl	8002074 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003924:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003928:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800392a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800392c:	b2d8      	uxtb	r0, r3
 800392e:	f040 80e9 	bne.w	8003b04 <HAL_SPI_Receive+0x226>
  if ((pData == NULL) || (Size == 0U))
 8003932:	f1b8 0f00 	cmp.w	r8, #0
 8003936:	f000 809f 	beq.w	8003a78 <HAL_SPI_Receive+0x19a>
 800393a:	2f00      	cmp	r7, #0
 800393c:	f000 809c 	beq.w	8003a78 <HAL_SPI_Receive+0x19a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003940:	2304      	movs	r3, #4
 8003942:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003946:	2300      	movs	r3, #0
 8003948:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800394a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800394e:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003952:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003954:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003956:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003958:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800395a:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800395c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8003964:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003968:	d10d      	bne.n	8003986 <HAL_SPI_Receive+0xa8>
    SPI_RESET_CRC(hspi);
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	6813      	ldr	r3, [r2, #0]
 8003974:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003978:	6013      	str	r3, [r2, #0]
    hspi->RxXferCount--;
 800397a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800397e:	3b01      	subs	r3, #1
 8003980:	b29b      	uxth	r3, r3
 8003982:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003986:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003988:	6853      	ldr	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800398a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800398e:	bf8c      	ite	hi
 8003990:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003994:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8003998:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800399a:	68a3      	ldr	r3, [r4, #8]
 800399c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a0:	d107      	bne.n	80039b2 <HAL_SPI_Receive+0xd4>
    __HAL_SPI_DISABLE(hspi);
 80039a2:	6813      	ldr	r3, [r2, #0]
 80039a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80039aa:	6813      	ldr	r3, [r2, #0]
 80039ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b0:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b2:	6813      	ldr	r3, [r2, #0]
 80039b4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80039b6:	bf5e      	ittt	pl
 80039b8:	6813      	ldrpl	r3, [r2, #0]
 80039ba:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80039be:	6013      	strpl	r3, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80039c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80039c4:	d923      	bls.n	8003a0e <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0U)
 80039c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	b323      	cbz	r3, 8003a18 <HAL_SPI_Receive+0x13a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	07d1      	lsls	r1, r2, #31
 80039d4:	d557      	bpl.n	8003a86 <HAL_SPI_Receive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039da:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039de:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80039e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80039ec:	e7eb      	b.n	80039c6 <HAL_SPI_Receive+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	07d7      	lsls	r7, r2, #31
 80039f4:	d538      	bpl.n	8003a68 <HAL_SPI_Receive+0x18a>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039f8:	7b1b      	ldrb	r3, [r3, #12]
 80039fa:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039fe:	3301      	adds	r3, #1
 8003a00:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003a02:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8003a0e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1ea      	bne.n	80039ee <HAL_SPI_Receive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1e:	d142      	bne.n	8003aa6 <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003a20:	6822      	ldr	r2, [r4, #0]
 8003a22:	6813      	ldr	r3, [r2, #0]
 8003a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a28:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	9600      	str	r6, [sp, #0]
 8003a2e:	462b      	mov	r3, r5
 8003a30:	4611      	mov	r1, r2
 8003a32:	4620      	mov	r0, r4
 8003a34:	f7ff fc3c 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 8003a38:	b9e8      	cbnz	r0, 8003a76 <HAL_SPI_Receive+0x198>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a3a:	68e1      	ldr	r1, [r4, #12]
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a44:	bf8b      	itete	hi
 8003a46:	68d2      	ldrhi	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a48:	7b12      	ldrbls	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a4a:	801a      	strhhi	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a4c:	701a      	strbls	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	9600      	str	r6, [sp, #0]
 8003a52:	462b      	mov	r3, r5
 8003a54:	4611      	mov	r1, r2
 8003a56:	4620      	mov	r0, r4
 8003a58:	f7ff fc2a 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 8003a5c:	b1d8      	cbz	r0, 8003a96 <HAL_SPI_Receive+0x1b8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003a5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	6623      	str	r3, [r4, #96]	; 0x60
 8003a66:	e006      	b.n	8003a76 <HAL_SPI_Receive+0x198>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a68:	f7fe fb04 	bl	8002074 <HAL_GetTick>
 8003a6c:	1b80      	subs	r0, r0, r6
 8003a6e:	42a8      	cmp	r0, r5
 8003a70:	d3cd      	bcc.n	8003a0e <HAL_SPI_Receive+0x130>
 8003a72:	1c68      	adds	r0, r5, #1
 8003a74:	d0cb      	beq.n	8003a0e <HAL_SPI_Receive+0x130>
          errorcode = HAL_TIMEOUT;
 8003a76:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8003a84:	e741      	b.n	800390a <HAL_SPI_Receive+0x2c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a86:	f7fe faf5 	bl	8002074 <HAL_GetTick>
 8003a8a:	1b80      	subs	r0, r0, r6
 8003a8c:	42a8      	cmp	r0, r5
 8003a8e:	d39a      	bcc.n	80039c6 <HAL_SPI_Receive+0xe8>
 8003a90:	1c6a      	adds	r2, r5, #1
 8003a92:	d098      	beq.n	80039c6 <HAL_SPI_Receive+0xe8>
 8003a94:	e7ef      	b.n	8003a76 <HAL_SPI_Receive+0x198>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a96:	68e2      	ldr	r2, [r4, #12]
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8003a9e:	d11a      	bne.n	8003ad6 <HAL_SPI_Receive+0x1f8>
      tmpreg = READ_REG(hspi->Instance->DR);
 8003aa0:	68db      	ldr	r3, [r3, #12]
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8003aa2:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8003aa4:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7ff fc5c 	bl	8003368 <SPI_EndRxTransaction>
 8003ab0:	b108      	cbz	r0, 8003ab6 <HAL_SPI_Receive+0x1d8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab2:	2320      	movs	r3, #32
 8003ab4:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	6893      	ldr	r3, [r2, #8]
 8003aba:	06db      	lsls	r3, r3, #27
 8003abc:	d506      	bpl.n	8003acc <HAL_SPI_Receive+0x1ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003abe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ac0:	f043 0302 	orr.w	r3, r3, #2
 8003ac4:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003ac6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003aca:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003acc:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8003ace:	3800      	subs	r0, #0
 8003ad0:	bf18      	it	ne
 8003ad2:	2001      	movne	r0, #1
error :
 8003ad4:	e7d0      	b.n	8003a78 <HAL_SPI_Receive+0x19a>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8003ad6:	7b1b      	ldrb	r3, [r3, #12]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	9303      	str	r3, [sp, #12]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003adc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg);
 8003ae0:	9b03      	ldr	r3, [sp, #12]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003ae2:	d1e0      	bne.n	8003aa6 <HAL_SPI_Receive+0x1c8>
 8003ae4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d1dd      	bne.n	8003aa6 <HAL_SPI_Receive+0x1c8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003aea:	2201      	movs	r2, #1
 8003aec:	9600      	str	r6, [sp, #0]
 8003aee:	462b      	mov	r3, r5
 8003af0:	4611      	mov	r1, r2
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7ff fbdc 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d1b0      	bne.n	8003a5e <HAL_SPI_Receive+0x180>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	7b1b      	ldrb	r3, [r3, #12]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e7ce      	b.n	8003aa2 <HAL_SPI_Receive+0x1c4>
    errorcode = HAL_BUSY;
 8003b04:	2002      	movs	r0, #2
 8003b06:	e7b7      	b.n	8003a78 <HAL_SPI_Receive+0x19a>
  __HAL_LOCK(hspi);
 8003b08:	2002      	movs	r0, #2
 8003b0a:	e6fe      	b.n	800390a <HAL_SPI_Receive+0x2c>

08003b0c <HAL_SPI_Transmit_IT>:
{
 8003b0c:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8003b0e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8003b12:	2801      	cmp	r0, #1
 8003b14:	d04d      	beq.n	8003bb2 <HAL_SPI_Transmit_IT+0xa6>
 8003b16:	2001      	movs	r0, #1
 8003b18:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 8003b1c:	2900      	cmp	r1, #0
 8003b1e:	d040      	beq.n	8003ba2 <HAL_SPI_Transmit_IT+0x96>
 8003b20:	2a00      	cmp	r2, #0
 8003b22:	d03e      	beq.n	8003ba2 <HAL_SPI_Transmit_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003b24:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8003b28:	2801      	cmp	r0, #1
 8003b2a:	d13e      	bne.n	8003baa <HAL_SPI_Transmit_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b2c:	2003      	movs	r0, #3
 8003b2e:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b32:	2000      	movs	r0, #0
 8003b34:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b36:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b38:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 8003b3a:	491f      	ldr	r1, [pc, #124]	; (8003bb8 <HAL_SPI_Transmit_IT+0xac>)
  hspi->TxXferSize  = Size;
 8003b3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b3e:	6418      	str	r0, [r3, #64]	; 0x40
    hspi->TxISR = SPI_TxISR_8BIT;
 8003b40:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <HAL_SPI_Transmit_IT+0xb0>)
  hspi->RxXferSize  = 0U;
 8003b42:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b46:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8003b4a:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b4c:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 8003b4e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003b52:	bf98      	it	ls
 8003b54:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b56:	6899      	ldr	r1, [r3, #8]
 8003b58:	651a      	str	r2, [r3, #80]	; 0x50
 8003b5a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	d107      	bne.n	8003b72 <HAL_SPI_Transmit_IT+0x66>
    __HAL_SPI_DISABLE(hspi);
 8003b62:	6811      	ldr	r1, [r2, #0]
 8003b64:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003b68:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003b6a:	6811      	ldr	r1, [r2, #0]
 8003b6c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003b70:	6011      	str	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003b74:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003b78:	d107      	bne.n	8003b8a <HAL_SPI_Transmit_IT+0x7e>
    SPI_RESET_CRC(hspi);
 8003b7a:	6811      	ldr	r1, [r2, #0]
 8003b7c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003b80:	6011      	str	r1, [r2, #0]
 8003b82:	6811      	ldr	r1, [r2, #0]
 8003b84:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8003b88:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003b8a:	6851      	ldr	r1, [r2, #4]
 8003b8c:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8003b90:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b92:	6810      	ldr	r0, [r2, #0]
 8003b94:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003b98:	d109      	bne.n	8003bae <HAL_SPI_Transmit_IT+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8003b9a:	6811      	ldr	r1, [r2, #0]
 8003b9c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003ba0:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ba8:	4770      	bx	lr
    errorcode = HAL_BUSY;
 8003baa:	2002      	movs	r0, #2
 8003bac:	e7f9      	b.n	8003ba2 <HAL_SPI_Transmit_IT+0x96>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bae:	2000      	movs	r0, #0
 8003bb0:	e7f7      	b.n	8003ba2 <HAL_SPI_Transmit_IT+0x96>
  __HAL_LOCK(hspi);
 8003bb2:	2002      	movs	r0, #2
}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	08003e13 	.word	0x08003e13
 8003bbc:	08003e47 	.word	0x08003e47

08003bc0 <HAL_SPI_TransmitReceive_IT>:
{
 8003bc0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 8003bc2:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8003bc6:	2c01      	cmp	r4, #1
 8003bc8:	d070      	beq.n	8003cac <HAL_SPI_TransmitReceive_IT+0xec>
 8003bca:	2401      	movs	r4, #1
 8003bcc:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 8003bd0:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bd4:	2c01      	cmp	r4, #1
  tmp_state           = hspi->State;
 8003bd6:	b2e5      	uxtb	r5, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bd8:	d008      	beq.n	8003bec <HAL_SPI_TransmitReceive_IT+0x2c>
 8003bda:	6844      	ldr	r4, [r0, #4]
 8003bdc:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8003be0:	d15e      	bne.n	8003ca0 <HAL_SPI_TransmitReceive_IT+0xe0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003be2:	6884      	ldr	r4, [r0, #8]
 8003be4:	2c00      	cmp	r4, #0
 8003be6:	d15b      	bne.n	8003ca0 <HAL_SPI_TransmitReceive_IT+0xe0>
 8003be8:	2d04      	cmp	r5, #4
 8003bea:	d159      	bne.n	8003ca0 <HAL_SPI_TransmitReceive_IT+0xe0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bec:	2900      	cmp	r1, #0
 8003bee:	d059      	beq.n	8003ca4 <HAL_SPI_TransmitReceive_IT+0xe4>
 8003bf0:	2a00      	cmp	r2, #0
 8003bf2:	d057      	beq.n	8003ca4 <HAL_SPI_TransmitReceive_IT+0xe4>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d055      	beq.n	8003ca4 <HAL_SPI_TransmitReceive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bf8:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bfc:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bfe:	2c04      	cmp	r4, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c00:	68c1      	ldr	r1, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c02:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c04:	bf1c      	itt	ne
 8003c06:	2405      	movne	r4, #5
 8003c08:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003c10:	bf8b      	itete	hi
 8003c12:	4a27      	ldrhi	r2, [pc, #156]	; (8003cb0 <HAL_SPI_TransmitReceive_IT+0xf0>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003c14:	4a27      	ldrls	r2, [pc, #156]	; (8003cb4 <HAL_SPI_TransmitReceive_IT+0xf4>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003c16:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003c18:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003c1a:	bf8c      	ite	hi
 8003c1c:	4a26      	ldrhi	r2, [pc, #152]	; (8003cb8 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003c1e:	4a27      	ldrls	r2, [pc, #156]	; (8003cbc <HAL_SPI_TransmitReceive_IT+0xfc>)
 8003c20:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c22:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->TxXferSize  = Size;
 8003c24:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c26:	2400      	movs	r4, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c28:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c2c:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 8003c2e:	6802      	ldr	r2, [r0, #0]
 8003c30:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c32:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003c36:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c3a:	d12a      	bne.n	8003c92 <HAL_SPI_TransmitReceive_IT+0xd2>
    hspi->CRCSize = 1U;
 8003c3c:	2401      	movs	r4, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003c3e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8003c42:	6484      	str	r4, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003c44:	d803      	bhi.n	8003c4e <HAL_SPI_TransmitReceive_IT+0x8e>
 8003c46:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003c48:	2c02      	cmp	r4, #2
      hspi->CRCSize = 2U;
 8003c4a:	bf08      	it	eq
 8003c4c:	6484      	streq	r4, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8003c4e:	6814      	ldr	r4, [r2, #0]
 8003c50:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8003c54:	6014      	str	r4, [r2, #0]
 8003c56:	6814      	ldr	r4, [r2, #0]
 8003c58:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8003c5c:	6014      	str	r4, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003c5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c62:	d801      	bhi.n	8003c68 <HAL_SPI_TransmitReceive_IT+0xa8>
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d917      	bls.n	8003c98 <HAL_SPI_TransmitReceive_IT+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c68:	6853      	ldr	r3, [r2, #4]
 8003c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c6e:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c70:	6853      	ldr	r3, [r2, #4]
 8003c72:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003c76:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c78:	6813      	ldr	r3, [r2, #0]
 8003c7a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003c7e:	d113      	bne.n	8003ca8 <HAL_SPI_TransmitReceive_IT+0xe8>
    __HAL_SPI_ENABLE(hspi);
 8003c80:	6811      	ldr	r1, [r2, #0]
 8003c82:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003c86:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 8003c92:	2400      	movs	r4, #0
 8003c94:	6484      	str	r4, [r0, #72]	; 0x48
 8003c96:	e7e2      	b.n	8003c5e <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c98:	6853      	ldr	r3, [r2, #4]
 8003c9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c9e:	e7e6      	b.n	8003c6e <HAL_SPI_TransmitReceive_IT+0xae>
    errorcode = HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e7f1      	b.n	8003c88 <HAL_SPI_TransmitReceive_IT+0xc8>
    errorcode = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e7ef      	b.n	8003c88 <HAL_SPI_TransmitReceive_IT+0xc8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e7ed      	b.n	8003c88 <HAL_SPI_TransmitReceive_IT+0xc8>
  __HAL_LOCK(hspi);
 8003cac:	2302      	movs	r3, #2
 8003cae:	e7ee      	b.n	8003c8e <HAL_SPI_TransmitReceive_IT+0xce>
 8003cb0:	0800419d 	.word	0x0800419d
 8003cb4:	08004095 	.word	0x08004095
 8003cb8:	08004149 	.word	0x08004149
 8003cbc:	0800402f 	.word	0x0800402f

08003cc0 <HAL_SPI_Receive_IT>:
{
 8003cc0:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003cc2:	6886      	ldr	r6, [r0, #8]
{
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003cc8:	b95e      	cbnz	r6, 8003ce2 <HAL_SPI_Receive_IT+0x22>
 8003cca:	6843      	ldr	r3, [r0, #4]
 8003ccc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd0:	d107      	bne.n	8003ce2 <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 8003cd8:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003cda:	4613      	mov	r3, r2
 8003cdc:	460a      	mov	r2, r1
 8003cde:	f7ff bf6f 	b.w	8003bc0 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 8003ce2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d061      	beq.n	8003dae <HAL_SPI_Receive_IT+0xee>
 8003cea:	2301      	movs	r3, #1
 8003cec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8003cf0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	b2d8      	uxtb	r0, r3
 8003cf8:	d155      	bne.n	8003da6 <HAL_SPI_Receive_IT+0xe6>
  if ((pData == NULL) || (Size == 0U))
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	d04b      	beq.n	8003d96 <HAL_SPI_Receive_IT+0xd6>
 8003cfe:	2a00      	cmp	r2, #0
 8003d00:	d049      	beq.n	8003d96 <HAL_SPI_Receive_IT+0xd6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d02:	2304      	movs	r3, #4
 8003d04:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d0c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d0e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 8003d12:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003d14:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d16:	6523      	str	r3, [r4, #80]	; 0x50
 8003d18:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d1a:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 8003d1c:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d20:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d22:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d24:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d28:	bf8b      	itete	hi
 8003d2a:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d2e:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d32:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d34:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003d36:	bf8c      	ite	hi
 8003d38:	4a1e      	ldrhi	r2, [pc, #120]	; (8003db4 <HAL_SPI_Receive_IT+0xf4>)
    hspi->RxISR = SPI_RxISR_8BIT;
 8003d3a:	4a1f      	ldrls	r2, [pc, #124]	; (8003db8 <HAL_SPI_Receive_IT+0xf8>)
 8003d3c:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d3e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8003d42:	d107      	bne.n	8003d54 <HAL_SPI_Receive_IT+0x94>
    __HAL_SPI_DISABLE(hspi);
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d52:	601a      	str	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d56:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003d5a:	d121      	bne.n	8003da0 <HAL_SPI_Receive_IT+0xe0>
    hspi->CRCSize = 1U;
 8003d5c:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003d5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8003d62:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003d64:	d803      	bhi.n	8003d6e <HAL_SPI_Receive_IT+0xae>
 8003d66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d68:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 8003d6a:	bf08      	it	eq
 8003d6c:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d7c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003d84:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003d8c:	d10d      	bne.n	8003daa <HAL_SPI_Receive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d94:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8003d96:	2300      	movs	r3, #0
 8003d98:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003d9c:	bc70      	pop	{r4, r5, r6}
 8003d9e:	4770      	bx	lr
    hspi->CRCSize = 0U;
 8003da0:	2200      	movs	r2, #0
 8003da2:	64a2      	str	r2, [r4, #72]	; 0x48
 8003da4:	e7eb      	b.n	8003d7e <HAL_SPI_Receive_IT+0xbe>
    errorcode = HAL_BUSY;
 8003da6:	2002      	movs	r0, #2
 8003da8:	e7f5      	b.n	8003d96 <HAL_SPI_Receive_IT+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003daa:	2000      	movs	r0, #0
 8003dac:	e7f3      	b.n	8003d96 <HAL_SPI_Receive_IT+0xd6>
  __HAL_LOCK(hspi);
 8003dae:	2002      	movs	r0, #2
 8003db0:	e7f4      	b.n	8003d9c <HAL_SPI_Receive_IT+0xdc>
 8003db2:	bf00      	nop
 8003db4:	08003f4d 	.word	0x08003f4d
 8003db8:	08003ed1 	.word	0x08003ed1

08003dbc <HAL_SPI_TxRxCpltCallback>:
 8003dbc:	4770      	bx	lr

08003dbe <HAL_SPI_ErrorCallback>:
 8003dbe:	4770      	bx	lr

08003dc0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003dc0:	b513      	push	{r0, r1, r4, lr}
 8003dc2:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dc4:	f7fe f956 	bl	8002074 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003dc8:	6821      	ldr	r1, [r4, #0]
 8003dca:	684b      	ldr	r3, [r1, #4]
 8003dcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 8003dd0:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003dd2:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	2164      	movs	r1, #100	; 0x64
 8003dd8:	f7ff fb01 	bl	80033de <SPI_EndRxTxTransaction>
 8003ddc:	b118      	cbz	r0, 8003de6 <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dde:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003de0:	f043 0320 	orr.w	r3, r3, #32
 8003de4:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003de6:	68a3      	ldr	r3, [r4, #8]
 8003de8:	b933      	cbnz	r3, 8003df8 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	9201      	str	r2, [sp, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dfe:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003e00:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e02:	b11b      	cbz	r3, 8003e0c <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 8003e04:	f7ff ffdb 	bl	8003dbe <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 8003e0c:	f7fd fdb0 	bl	8001970 <HAL_SPI_TxCpltCallback>
}
 8003e10:	e7fa      	b.n	8003e08 <SPI_CloseTx_ISR+0x48>

08003e12 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e12:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003e14:	6803      	ldr	r3, [r0, #0]
 8003e16:	7812      	ldrb	r2, [r2, #0]
 8003e18:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8003e1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8003e20:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003e28:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	b953      	cbnz	r3, 8003e44 <SPI_TxISR_8BIT+0x32>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003e34:	bf01      	itttt	eq
 8003e36:	6802      	ldreq	r2, [r0, #0]
 8003e38:	6813      	ldreq	r3, [r2, #0]
 8003e3a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003e3e:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8003e40:	f7ff bfbe 	b.w	8003dc0 <SPI_CloseTx_ISR>
}
 8003e44:	4770      	bx	lr

08003e46 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e46:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e48:	6802      	ldr	r2, [r0, #0]
 8003e4a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003e4e:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e50:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8003e52:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003e5a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	b94b      	cbnz	r3, 8003e74 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003e66:	bf02      	ittt	eq
 8003e68:	6813      	ldreq	r3, [r2, #0]
 8003e6a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003e6e:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8003e70:	f7ff bfa6 	b.w	8003dc0 <SPI_CloseTx_ISR>
}
 8003e74:	4770      	bx	lr

08003e76 <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003e76:	6802      	ldr	r2, [r0, #0]
 8003e78:	6853      	ldr	r3, [r2, #4]
 8003e7a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 8003e7e:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003e80:	6053      	str	r3, [r2, #4]
{
 8003e82:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003e84:	f7fe f8f6 	bl	8002074 <HAL_GetTick>
 8003e88:	2164      	movs	r1, #100	; 0x64
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7ff fa6b 	bl	8003368 <SPI_EndRxTransaction>
 8003e92:	b118      	cbz	r0, 8003e9c <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e96:	f043 0320 	orr.w	r3, r3, #32
 8003e9a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003e9c:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003e9e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 8003ea0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003ea4:	6893      	ldr	r3, [r2, #8]
 8003ea6:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003eaa:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003eac:	d009      	beq.n	8003ec2 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003eae:	f043 0302 	orr.w	r3, r3, #2
 8003eb2:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003eb4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003eb8:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 8003eba:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 8003ebc:	f7ff ff7f 	bl	8003dbe <HAL_SPI_ErrorCallback>
}
 8003ec0:	e004      	b.n	8003ecc <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 8003ec2:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f9      	bne.n	8003ebc <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 8003ec8:	f7fd fd4a 	bl	8001960 <HAL_SPI_RxCpltCallback>
}
 8003ecc:	bd10      	pop	{r4, pc}
	...

08003ed0 <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003ed0:	6802      	ldr	r2, [r0, #0]
 8003ed2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003ed4:	7b12      	ldrb	r2, [r2, #12]
 8003ed6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003ed8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003eda:	3301      	adds	r3, #1
 8003edc:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003ede:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003eea:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d108      	bne.n	8003f06 <SPI_RxISR_8BIT+0x36>
 8003ef4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003efa:	bf01      	itttt	eq
 8003efc:	6802      	ldreq	r2, [r0, #0]
 8003efe:	6813      	ldreq	r3, [r2, #0]
 8003f00:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003f04:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8003f06:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	b943      	cbnz	r3, 8003f20 <SPI_RxISR_8BIT+0x50>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f14:	d102      	bne.n	8003f1c <SPI_RxISR_8BIT+0x4c>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8003f16:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <SPI_RxISR_8BIT+0x54>)
 8003f18:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8003f1a:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8003f1c:	f7ff bfab 	b.w	8003e76 <SPI_CloseRx_ISR>
}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	08003f29 	.word	0x08003f29

08003f28 <SPI_RxISR_8BITCRC>:
{
 8003f28:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	9201      	str	r2, [sp, #4]
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8003f2e:	6802      	ldr	r2, [r0, #0]
 8003f30:	7b12      	ldrb	r2, [r2, #12]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8003f36:	9a01      	ldr	r2, [sp, #4]
  hspi->CRCSize--;
 8003f38:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003f3a:	3a01      	subs	r2, #1
 8003f3c:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8003f3e:	b912      	cbnz	r2, 8003f46 <SPI_RxISR_8BITCRC+0x1e>
}
 8003f40:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 8003f42:	f7ff bf98 	b.w	8003e76 <SPI_CloseRx_ISR>
}
 8003f46:	b002      	add	sp, #8
 8003f48:	4770      	bx	lr
	...

08003f4c <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003f4c:	6802      	ldr	r2, [r0, #0]
 8003f4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f50:	68d1      	ldr	r1, [r2, #12]
 8003f52:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f56:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003f58:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003f64:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d107      	bne.n	8003f7e <SPI_RxISR_16BIT+0x32>
 8003f6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003f74:	bf02      	ittt	eq
 8003f76:	6813      	ldreq	r3, [r2, #0]
 8003f78:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003f7c:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8003f7e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	b943      	cbnz	r3, 8003f98 <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8c:	d102      	bne.n	8003f94 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8003f8e:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <SPI_RxISR_16BIT+0x50>)
 8003f90:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8003f92:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8003f94:	f7ff bf6f 	b.w	8003e76 <SPI_CloseRx_ISR>
}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	08003fa1 	.word	0x08003fa1

08003fa0 <SPI_RxISR_16BITCRC>:
{
 8003fa0:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8003fa6:	6803      	ldr	r3, [r0, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8003fac:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb4:	605a      	str	r2, [r3, #4]
}
 8003fb6:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 8003fb8:	f7ff bf5d 	b.w	8003e76 <SPI_CloseRx_ISR>

08003fbc <SPI_CloseRxTx_ISR>:
{
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8003fc0:	f7fe f858 	bl	8002074 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003fc4:	6821      	ldr	r1, [r4, #0]
 8003fc6:	684b      	ldr	r3, [r1, #4]
 8003fc8:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 8003fcc:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003fce:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	2164      	movs	r1, #100	; 0x64
 8003fd4:	f7ff fa03 	bl	80033de <SPI_EndRxTxTransaction>
 8003fd8:	b118      	cbz	r0, 8003fe2 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003fdc:	f043 0320 	orr.w	r3, r3, #32
 8003fe0:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	6893      	ldr	r3, [r2, #8]
 8003fe6:	f013 0f10 	tst.w	r3, #16
 8003fea:	f04f 0301 	mov.w	r3, #1
 8003fee:	d00c      	beq.n	800400a <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 8003ff0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003ff4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ff6:	f043 0302 	orr.w	r3, r3, #2
 8003ffa:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003ffc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004000:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 8004002:	4620      	mov	r0, r4
 8004004:	f7ff fedb 	bl	8003dbe <HAL_SPI_ErrorCallback>
}
 8004008:	e00a      	b.n	8004020 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800400a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800400c:	b962      	cbnz	r2, 8004028 <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800400e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 8004012:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004016:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 8004018:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800401a:	d102      	bne.n	8004022 <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 800401c:	f7fd fca0 	bl	8001960 <HAL_SPI_RxCpltCallback>
}
 8004020:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 8004022:	f7ff fecb 	bl	8003dbc <HAL_SPI_TxRxCpltCallback>
 8004026:	e7fb      	b.n	8004020 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 8004028:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800402c:	e7e9      	b.n	8004002 <SPI_CloseRxTx_ISR+0x46>

0800402e <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 800402e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8004030:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004032:	6801      	ldr	r1, [r0, #0]
 8004034:	b292      	uxth	r2, r2
 8004036:	2a01      	cmp	r2, #1
 8004038:	d918      	bls.n	800406c <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800403a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800403e:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004040:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004042:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004044:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 8004046:	b29b      	uxth	r3, r3
 8004048:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800404a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	b9fb      	cbnz	r3, 8004090 <SPI_2linesTxISR_8BIT+0x62>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004050:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004052:	6803      	ldr	r3, [r0, #0]
 8004054:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004058:	d110      	bne.n	800407c <SPI_2linesTxISR_8BIT+0x4e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004060:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004068:	605a      	str	r2, [r3, #4]
      return;
 800406a:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	730b      	strb	r3, [r1, #12]
    hspi->pTxBuffPtr++;
 8004070:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004072:	3301      	adds	r3, #1
 8004074:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8004076:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004078:	3b01      	subs	r3, #1
 800407a:	e7e4      	b.n	8004046 <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004082:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 8004084:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004088:	b29b      	uxth	r3, r3
 800408a:	b90b      	cbnz	r3, 8004090 <SPI_2linesTxISR_8BIT+0x62>
      SPI_CloseRxTx_ISR(hspi);
 800408c:	f7ff bf96 	b.w	8003fbc <SPI_CloseRxTx_ISR>
}
 8004090:	4770      	bx	lr
	...

08004094 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 8004094:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
 8004098:	6802      	ldr	r2, [r0, #0]
 800409a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800409c:	b289      	uxth	r1, r1
 800409e:	2901      	cmp	r1, #1
 80040a0:	d922      	bls.n	80040e8 <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80040a2:	68d1      	ldr	r1, [r2, #12]
 80040a4:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80040a8:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80040aa:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80040ae:	3b02      	subs	r3, #2
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80040b6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d103      	bne.n	80040c8 <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040c0:	6853      	ldr	r3, [r2, #4]
 80040c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040c6:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 80040c8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	b9fb      	cbnz	r3, 8004110 <SPI_2linesRxISR_8BIT+0x7c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80040d2:	6803      	ldr	r3, [r0, #0]
 80040d4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040d8:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040da:	d111      	bne.n	8004100 <SPI_2linesRxISR_8BIT+0x6c>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040e0:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <SPI_2linesRxISR_8BIT+0x80>)
 80040e4:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 80040e6:	4770      	bx	lr
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80040e8:	7b12      	ldrb	r2, [r2, #12]
 80040ea:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80040ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80040ee:	3301      	adds	r3, #1
 80040f0:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 80040f2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 80040fe:	e7e3      	b.n	80040c8 <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004100:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004104:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 8004106:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	b90b      	cbnz	r3, 8004110 <SPI_2linesRxISR_8BIT+0x7c>
      SPI_CloseRxTx_ISR(hspi);
 800410c:	f7ff bf56 	b.w	8003fbc <SPI_CloseRxTx_ISR>
}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	08004119 	.word	0x08004119

08004118 <SPI_2linesRxISR_8BITCRC>:
{
 8004118:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 800411a:	2200      	movs	r2, #0
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800411c:	6801      	ldr	r1, [r0, #0]
  __IO uint32_t tmpreg = 0U;
 800411e:	9201      	str	r2, [sp, #4]
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8004120:	7b0a      	ldrb	r2, [r1, #12]
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8004126:	9a01      	ldr	r2, [sp, #4]
  hspi->CRCSize--;
 8004128:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800412a:	3a01      	subs	r2, #1
 800412c:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 800412e:	b94a      	cbnz	r2, 8004144 <SPI_2linesRxISR_8BITCRC+0x2c>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004130:	684a      	ldr	r2, [r1, #4]
 8004132:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004136:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8004138:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	b913      	cbnz	r3, 8004144 <SPI_2linesRxISR_8BITCRC+0x2c>
}
 800413e:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 8004140:	f7ff bf3c 	b.w	8003fbc <SPI_CloseRxTx_ISR>
}
 8004144:	b002      	add	sp, #8
 8004146:	4770      	bx	lr

08004148 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004148:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800414a:	6802      	ldr	r2, [r0, #0]
{
 800414c:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414e:	f831 4b02 	ldrh.w	r4, [r1], #2
 8004152:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004154:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8004156:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8004158:	3901      	subs	r1, #1
 800415a:	b289      	uxth	r1, r1
 800415c:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800415e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8004160:	b289      	uxth	r1, r1
 8004162:	b959      	cbnz	r1, 800417c <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004164:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004166:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800416a:	d10a      	bne.n	8004182 <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800416c:	6813      	ldr	r3, [r2, #0]
 800416e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004172:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004174:	6853      	ldr	r3, [r2, #4]
 8004176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417a:	6053      	str	r3, [r2, #4]
}
 800417c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004180:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004182:	6851      	ldr	r1, [r2, #4]
 8004184:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004188:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800418a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f3      	bne.n	800417c <SPI_2linesTxISR_16BIT+0x34>
}
 8004194:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8004198:	f7ff bf10 	b.w	8003fbc <SPI_CloseRxTx_ISR>

0800419c <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800419c:	6801      	ldr	r1, [r0, #0]
 800419e:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80041a0:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80041a2:	68cc      	ldr	r4, [r1, #12]
 80041a4:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a8:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 80041aa:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 80041ae:	3a01      	subs	r2, #1
 80041b0:	b292      	uxth	r2, r2
 80041b2:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80041b6:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 80041ba:	b292      	uxth	r2, r2
 80041bc:	b92a      	cbnz	r2, 80041ca <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041be:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80041c0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80041c4:	d104      	bne.n	80041d0 <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <SPI_2linesRxISR_16BIT+0x4c>)
 80041c8:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 80041ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041ce:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80041d0:	684a      	ldr	r2, [r1, #4]
 80041d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d6:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 80041d8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f4      	bne.n	80041ca <SPI_2linesRxISR_16BIT+0x2e>
}
 80041e0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 80041e4:	f7ff beea 	b.w	8003fbc <SPI_CloseRxTx_ISR>
 80041e8:	080041ed 	.word	0x080041ed

080041ec <SPI_2linesRxISR_16BITCRC>:
{
 80041ec:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 80041f2:	6803      	ldr	r3, [r0, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);  
 80041f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004200:	605a      	str	r2, [r3, #4]
}
 8004202:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 8004204:	f7ff beda 	b.w	8003fbc <SPI_CloseRxTx_ISR>

08004208 <HAL_SPI_IRQHandler>:
{
 8004208:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800420a:	6803      	ldr	r3, [r0, #0]
 800420c:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800420e:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004210:	0656      	lsls	r6, r2, #25
{
 8004212:	b085      	sub	sp, #20
 8004214:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004216:	ea4f 1192 	mov.w	r1, r2, lsr #6
 800421a:	f3c2 1780 	ubfx	r7, r2, #6, #1
 800421e:	d408      	bmi.n	8004232 <HAL_SPI_IRQHandler+0x2a>
 8004220:	07d6      	lsls	r6, r2, #31
 8004222:	d506      	bpl.n	8004232 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004224:	066e      	lsls	r6, r5, #25
 8004226:	d504      	bpl.n	8004232 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8004228:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 800422a:	b005      	add	sp, #20
 800422c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8004230:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004232:	0796      	lsls	r6, r2, #30
 8004234:	d504      	bpl.n	8004240 <HAL_SPI_IRQHandler+0x38>
 8004236:	0628      	lsls	r0, r5, #24
 8004238:	d502      	bpl.n	8004240 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 800423a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800423c:	4620      	mov	r0, r4
 800423e:	e7f4      	b.n	800422a <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004240:	f3c2 2000 	ubfx	r0, r2, #8, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004244:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004246:	ea41 1252 	orr.w	r2, r1, r2, lsr #5
 800424a:	f002 0201 	and.w	r2, r2, #1
 800424e:	4302      	orrs	r2, r0
 8004250:	d057      	beq.n	8004302 <HAL_SPI_IRQHandler+0xfa>
 8004252:	06aa      	lsls	r2, r5, #26
 8004254:	d555      	bpl.n	8004302 <HAL_SPI_IRQHandler+0xfa>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004256:	b17f      	cbz	r7, 8004278 <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004258:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800425c:	2a03      	cmp	r2, #3
 800425e:	f04f 0100 	mov.w	r1, #0
 8004262:	d048      	beq.n	80042f6 <HAL_SPI_IRQHandler+0xee>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004264:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004266:	f042 0204 	orr.w	r2, r2, #4
 800426a:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800426c:	9100      	str	r1, [sp, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	9200      	str	r2, [sp, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	9200      	str	r2, [sp, #0]
 8004276:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004278:	07f1      	lsls	r1, r6, #31
 800427a:	d50c      	bpl.n	8004296 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800427c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004284:	2200      	movs	r2, #0
 8004286:	9202      	str	r2, [sp, #8]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	9202      	str	r2, [sp, #8]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004296:	b140      	cbz	r0, 80042aa <HAL_SPI_IRQHandler+0xa2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004298:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800429a:	f042 0208 	orr.w	r2, r2, #8
 800429e:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80042a0:	2200      	movs	r2, #0
 80042a2:	9203      	str	r2, [sp, #12]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	9203      	str	r2, [sp, #12]
 80042a8:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042aa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80042ac:	b34a      	cbz	r2, 8004302 <HAL_SPI_IRQHandler+0xfa>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042b4:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80042b6:	2201      	movs	r2, #1
 80042b8:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80042bc:	07aa      	lsls	r2, r5, #30
 80042be:	d022      	beq.n	8004306 <HAL_SPI_IRQHandler+0xfe>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042c0:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80042c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042c4:	f022 0203 	bic.w	r2, r2, #3
 80042c8:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80042ca:	b140      	cbz	r0, 80042de <HAL_SPI_IRQHandler+0xd6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_SPI_IRQHandler+0x108>)
 80042ce:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042d0:	f7fd ff52 	bl	8002178 <HAL_DMA_Abort_IT>
 80042d4:	b118      	cbz	r0, 80042de <HAL_SPI_IRQHandler+0xd6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80042d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042dc:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80042de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042e0:	b178      	cbz	r0, 8004302 <HAL_SPI_IRQHandler+0xfa>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_SPI_IRQHandler+0x108>)
 80042e4:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80042e6:	f7fd ff47 	bl	8002178 <HAL_DMA_Abort_IT>
 80042ea:	b150      	cbz	r0, 8004302 <HAL_SPI_IRQHandler+0xfa>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80042ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f2:	6623      	str	r3, [r4, #96]	; 0x60
 80042f4:	e005      	b.n	8004302 <HAL_SPI_IRQHandler+0xfa>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042f6:	9101      	str	r1, [sp, #4]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	9201      	str	r2, [sp, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	9b01      	ldr	r3, [sp, #4]
}
 8004302:	b005      	add	sp, #20
 8004304:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8004306:	4620      	mov	r0, r4
 8004308:	f7ff fd59 	bl	8003dbe <HAL_SPI_ErrorCallback>
 800430c:	e7f9      	b.n	8004302 <HAL_SPI_IRQHandler+0xfa>
 800430e:	bf00      	nop
 8004310:	08004315 	.word	0x08004315

08004314 <SPI_DMAAbortOnError>:
{
 8004314:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004316:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800431e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8004320:	f7ff fd4d 	bl	8003dbe <HAL_SPI_ErrorCallback>
}
 8004324:	bd08      	pop	{r3, pc}

08004326 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004326:	4770      	bx	lr

08004328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800432c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800432e:	6921      	ldr	r1, [r4, #16]
 8004330:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004332:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004334:	69c0      	ldr	r0, [r0, #28]
 8004336:	430a      	orrs	r2, r1
 8004338:	6961      	ldr	r1, [r4, #20]
 800433a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800433c:	4993      	ldr	r1, [pc, #588]	; (800458c <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800433e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004340:	4029      	ands	r1, r5
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	68e1      	ldr	r1, [r4, #12]
 800434a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004352:	4a8f      	ldr	r2, [pc, #572]	; (8004590 <UART_SetConfig+0x268>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004354:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004356:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004358:	bf1c      	itt	ne
 800435a:	6a22      	ldrne	r2, [r4, #32]
 800435c:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004364:	430a      	orrs	r2, r1
 8004366:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004368:	4a8a      	ldr	r2, [pc, #552]	; (8004594 <UART_SetConfig+0x26c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d11b      	bne.n	80043a6 <UART_SetConfig+0x7e>
 800436e:	4b8a      	ldr	r3, [pc, #552]	; (8004598 <UART_SetConfig+0x270>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	3b01      	subs	r3, #1
 800437a:	2b02      	cmp	r3, #2
 800437c:	f200 80d6 	bhi.w	800452c <UART_SetConfig+0x204>
 8004380:	4a86      	ldr	r2, [pc, #536]	; (800459c <UART_SetConfig+0x274>)
 8004382:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004384:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004388:	f040 809e 	bne.w	80044c8 <UART_SetConfig+0x1a0>
  {
    switch (clocksource)
 800438c:	2b08      	cmp	r3, #8
 800438e:	d828      	bhi.n	80043e2 <UART_SetConfig+0xba>
 8004390:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004394:	00cf00e0 	.word	0x00cf00e0
 8004398:	00270098 	.word	0x00270098
 800439c:	002700d5 	.word	0x002700d5
 80043a0:	00270027 	.word	0x00270027
 80043a4:	00e4      	.short	0x00e4
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043a6:	4a7e      	ldr	r2, [pc, #504]	; (80045a0 <UART_SetConfig+0x278>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d108      	bne.n	80043be <UART_SetConfig+0x96>
 80043ac:	4b7a      	ldr	r3, [pc, #488]	; (8004598 <UART_SetConfig+0x270>)
 80043ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043b2:	4b7a      	ldr	r3, [pc, #488]	; (800459c <UART_SetConfig+0x274>)
 80043b4:	f002 020c 	and.w	r2, r2, #12
 80043b8:	4413      	add	r3, r2
 80043ba:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80043bc:	e7e2      	b.n	8004384 <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043be:	4a79      	ldr	r2, [pc, #484]	; (80045a4 <UART_SetConfig+0x27c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d119      	bne.n	80043f8 <UART_SetConfig+0xd0>
 80043c4:	4b74      	ldr	r3, [pc, #464]	; (8004598 <UART_SetConfig+0x270>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	f000 80b8 	beq.w	8004544 <UART_SetConfig+0x21c>
 80043d4:	d807      	bhi.n	80043e6 <UART_SetConfig+0xbe>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 80b9 	beq.w	800454e <UART_SetConfig+0x226>
 80043dc:	2b10      	cmp	r3, #16
 80043de:	f000 80ab 	beq.w	8004538 <UART_SetConfig+0x210>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e2:	2001      	movs	r0, #1
 80043e4:	e04e      	b.n	8004484 <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e6:	2b30      	cmp	r3, #48	; 0x30
 80043e8:	d1fb      	bne.n	80043e2 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80043ee:	f000 80b5 	beq.w	800455c <UART_SetConfig+0x234>
 80043f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043f6:	e083      	b.n	8004500 <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043f8:	4a6b      	ldr	r2, [pc, #428]	; (80045a8 <UART_SetConfig+0x280>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d10f      	bne.n	800441e <UART_SetConfig+0xf6>
 80043fe:	4b66      	ldr	r3, [pc, #408]	; (8004598 <UART_SetConfig+0x270>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	f000 809b 	beq.w	8004544 <UART_SetConfig+0x21c>
 800440e:	d804      	bhi.n	800441a <UART_SetConfig+0xf2>
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 809c 	beq.w	800454e <UART_SetConfig+0x226>
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	e7e1      	b.n	80043de <UART_SetConfig+0xb6>
 800441a:	2bc0      	cmp	r3, #192	; 0xc0
 800441c:	e7e4      	b.n	80043e8 <UART_SetConfig+0xc0>
 800441e:	4a63      	ldr	r2, [pc, #396]	; (80045ac <UART_SetConfig+0x284>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d112      	bne.n	800444a <UART_SetConfig+0x122>
 8004424:	4b5c      	ldr	r3, [pc, #368]	; (8004598 <UART_SetConfig+0x270>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004432:	f000 8087 	beq.w	8004544 <UART_SetConfig+0x21c>
 8004436:	d805      	bhi.n	8004444 <UART_SetConfig+0x11c>
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8088 	beq.w	800454e <UART_SetConfig+0x226>
 800443e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004442:	e7cc      	b.n	80043de <UART_SetConfig+0xb6>
 8004444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004448:	e7ce      	b.n	80043e8 <UART_SetConfig+0xc0>
 800444a:	4a51      	ldr	r2, [pc, #324]	; (8004590 <UART_SetConfig+0x268>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d1c8      	bne.n	80043e2 <UART_SetConfig+0xba>
 8004450:	4b51      	ldr	r3, [pc, #324]	; (8004598 <UART_SetConfig+0x270>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800445a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445e:	d015      	beq.n	800448c <UART_SetConfig+0x164>
 8004460:	d806      	bhi.n	8004470 <UART_SetConfig+0x148>
 8004462:	b15b      	cbz	r3, 800447c <UART_SetConfig+0x154>
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d1bb      	bne.n	80043e2 <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 800446a:	f7fe fb31 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
        break;
 800446e:	e007      	b.n	8004480 <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004470:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004474:	d1b5      	bne.n	80043e2 <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 8004476:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800447a:	e008      	b.n	800448e <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 800447c:	f7fe fe90 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004480:	b928      	cbnz	r0, 800448e <UART_SetConfig+0x166>
 8004482:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004484:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004486:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 800448a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = (uint32_t) HSI_VALUE;
 800448c:	4848      	ldr	r0, [pc, #288]	; (80045b0 <UART_SetConfig+0x288>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800448e:	6862      	ldr	r2, [r4, #4]
 8004490:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004494:	4298      	cmp	r0, r3
 8004496:	d3a4      	bcc.n	80043e2 <UART_SetConfig+0xba>
 8004498:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800449c:	d8a1      	bhi.n	80043e2 <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800449e:	0856      	lsrs	r6, r2, #1
 80044a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044a4:	2700      	movs	r7, #0
 80044a6:	fbe1 6700 	umlal	r6, r7, r1, r0
 80044aa:	2300      	movs	r3, #0
 80044ac:	4630      	mov	r0, r6
 80044ae:	4639      	mov	r1, r7
 80044b0:	f7fb fee6 	bl	8000280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044b4:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <UART_SetConfig+0x28c>)
 80044b6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d891      	bhi.n	80043e2 <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	60d8      	str	r0, [r3, #12]
 80044c2:	e7de      	b.n	8004482 <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 80044c4:	483a      	ldr	r0, [pc, #232]	; (80045b0 <UART_SetConfig+0x288>)
 80044c6:	e049      	b.n	800455c <UART_SetConfig+0x234>
    switch (clocksource)
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d88a      	bhi.n	80043e2 <UART_SetConfig+0xba>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0x1ac>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	08004521 	.word	0x08004521
 80044dc:	0800454b 	.word	0x0800454b
 80044e0:	080043e3 	.word	0x080043e3
 80044e4:	08004527 	.word	0x08004527
 80044e8:	080043e3 	.word	0x080043e3
 80044ec:	080043e3 	.word	0x080043e3
 80044f0:	080043e3 	.word	0x080043e3
 80044f4:	080043f3 	.word	0x080043f3
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7fe fe52 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d0c0      	beq.n	8004482 <UART_SetConfig+0x15a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004500:	6862      	ldr	r2, [r4, #4]
 8004502:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004506:	fbb3 f3f2 	udiv	r3, r3, r2
 800450a:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800450c:	f1a3 0110 	sub.w	r1, r3, #16
 8004510:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004514:	4291      	cmp	r1, r2
 8004516:	f63f af64 	bhi.w	80043e2 <UART_SetConfig+0xba>
        huart->Instance->BRR = usartdiv;
 800451a:	6822      	ldr	r2, [r4, #0]
 800451c:	60d3      	str	r3, [r2, #12]
 800451e:	e7b0      	b.n	8004482 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7fe fe50 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
        break;
 8004524:	e7ea      	b.n	80044fc <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8004526:	f7fe fad3 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
        break;
 800452a:	e7e7      	b.n	80044fc <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004530:	d1f6      	bne.n	8004520 <UART_SetConfig+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004532:	f7fe fe47 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
        break;
 8004536:	e00f      	b.n	8004558 <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004538:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800453c:	d1f3      	bne.n	8004526 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetSysClockFreq();
 800453e:	f7fe fac7 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
        break;
 8004542:	e009      	b.n	8004558 <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004544:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004548:	d0bc      	beq.n	80044c4 <UART_SetConfig+0x19c>
        pclk = (uint32_t) HSI_VALUE;
 800454a:	4819      	ldr	r0, [pc, #100]	; (80045b0 <UART_SetConfig+0x288>)
 800454c:	e7d8      	b.n	8004500 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004552:	d1d1      	bne.n	80044f8 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fe fe24 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004558:	2800      	cmp	r0, #0
 800455a:	d092      	beq.n	8004482 <UART_SetConfig+0x15a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800455c:	6862      	ldr	r2, [r4, #4]
 800455e:	0853      	lsrs	r3, r2, #1
 8004560:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004564:	fbb0 f0f2 	udiv	r0, r0, r2
 8004568:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800456a:	f1a3 0110 	sub.w	r1, r3, #16
 800456e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004572:	4291      	cmp	r1, r2
 8004574:	f63f af35 	bhi.w	80043e2 <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004578:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 800457c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800457e:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004580:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004584:	4318      	orrs	r0, r3
 8004586:	60d0      	str	r0, [r2, #12]
 8004588:	e77b      	b.n	8004482 <UART_SetConfig+0x15a>
 800458a:	bf00      	nop
 800458c:	efff69f3 	.word	0xefff69f3
 8004590:	40008000 	.word	0x40008000
 8004594:	40013800 	.word	0x40013800
 8004598:	40021000 	.word	0x40021000
 800459c:	08005fb8 	.word	0x08005fb8
 80045a0:	40004400 	.word	0x40004400
 80045a4:	40004800 	.word	0x40004800
 80045a8:	40004c00 	.word	0x40004c00
 80045ac:	40005000 	.word	0x40005000
 80045b0:	00f42400 	.word	0x00f42400
 80045b4:	000ffcff 	.word	0x000ffcff

080045b8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045ba:	07da      	lsls	r2, r3, #31
{
 80045bc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045be:	d506      	bpl.n	80045ce <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045c0:	6801      	ldr	r1, [r0, #0]
 80045c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80045c4:	684a      	ldr	r2, [r1, #4]
 80045c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80045ca:	4322      	orrs	r2, r4
 80045cc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ce:	079c      	lsls	r4, r3, #30
 80045d0:	d506      	bpl.n	80045e0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045d2:	6801      	ldr	r1, [r0, #0]
 80045d4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80045d6:	684a      	ldr	r2, [r1, #4]
 80045d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045dc:	4322      	orrs	r2, r4
 80045de:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045e0:	0759      	lsls	r1, r3, #29
 80045e2:	d506      	bpl.n	80045f2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045e4:	6801      	ldr	r1, [r0, #0]
 80045e6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80045e8:	684a      	ldr	r2, [r1, #4]
 80045ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045ee:	4322      	orrs	r2, r4
 80045f0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045f2:	071a      	lsls	r2, r3, #28
 80045f4:	d506      	bpl.n	8004604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045f6:	6801      	ldr	r1, [r0, #0]
 80045f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80045fa:	684a      	ldr	r2, [r1, #4]
 80045fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004600:	4322      	orrs	r2, r4
 8004602:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004604:	06dc      	lsls	r4, r3, #27
 8004606:	d506      	bpl.n	8004616 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004608:	6801      	ldr	r1, [r0, #0]
 800460a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800460c:	688a      	ldr	r2, [r1, #8]
 800460e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004612:	4322      	orrs	r2, r4
 8004614:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004616:	0699      	lsls	r1, r3, #26
 8004618:	d506      	bpl.n	8004628 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800461a:	6801      	ldr	r1, [r0, #0]
 800461c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800461e:	688a      	ldr	r2, [r1, #8]
 8004620:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004624:	4322      	orrs	r2, r4
 8004626:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004628:	065a      	lsls	r2, r3, #25
 800462a:	d50f      	bpl.n	800464c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800462c:	6801      	ldr	r1, [r0, #0]
 800462e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004630:	684a      	ldr	r2, [r1, #4]
 8004632:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004636:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004638:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800463c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800463e:	d105      	bne.n	800464c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004640:	684a      	ldr	r2, [r1, #4]
 8004642:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004644:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004648:	4322      	orrs	r2, r4
 800464a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800464c:	061b      	lsls	r3, r3, #24
 800464e:	d506      	bpl.n	800465e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004650:	6802      	ldr	r2, [r0, #0]
 8004652:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004654:	6853      	ldr	r3, [r2, #4]
 8004656:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800465a:	430b      	orrs	r3, r1
 800465c:	6053      	str	r3, [r2, #4]
  }
}
 800465e:	bd10      	pop	{r4, pc}

08004660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004664:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004668:	4604      	mov	r4, r0
 800466a:	460e      	mov	r6, r1
 800466c:	4615      	mov	r5, r2
 800466e:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004670:	6822      	ldr	r2, [r4, #0]
 8004672:	69d3      	ldr	r3, [r2, #28]
 8004674:	ea36 0303 	bics.w	r3, r6, r3
 8004678:	bf0c      	ite	eq
 800467a:	2301      	moveq	r3, #1
 800467c:	2300      	movne	r3, #0
 800467e:	42ab      	cmp	r3, r5
 8004680:	d001      	beq.n	8004686 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004682:	2000      	movs	r0, #0
 8004684:	e01a      	b.n	80046bc <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8004686:	f1b8 3fff 	cmp.w	r8, #4294967295
 800468a:	d0f2      	beq.n	8004672 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468c:	f7fd fcf2 	bl	8002074 <HAL_GetTick>
 8004690:	1bc0      	subs	r0, r0, r7
 8004692:	4540      	cmp	r0, r8
 8004694:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004696:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004698:	d802      	bhi.n	80046a0 <UART_WaitOnFlagUntilTimeout+0x40>
 800469a:	f1b8 0f00 	cmp.w	r8, #0
 800469e:	d10f      	bne.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046a4:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a6:	6883      	ldr	r3, [r0, #8]
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80046ae:	2320      	movs	r3, #32
 80046b0:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046b2:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80046b4:	2300      	movs	r3, #0
 80046b6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 80046ba:	2003      	movs	r0, #3
}
 80046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046c0:	075a      	lsls	r2, r3, #29
 80046c2:	d5d5      	bpl.n	8004670 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046c4:	69c3      	ldr	r3, [r0, #28]
 80046c6:	051b      	lsls	r3, r3, #20
 80046c8:	d5d2      	bpl.n	8004670 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046ce:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046d0:	6803      	ldr	r3, [r0, #0]
 80046d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d6:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	6883      	ldr	r3, [r0, #8]
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80046e0:	2320      	movs	r3, #32
 80046e2:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046e4:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046e6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80046ea:	e7e3      	b.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x54>

080046ec <HAL_UART_Transmit>:
{
 80046ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80046f0:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80046f2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80046f4:	2b20      	cmp	r3, #32
{
 80046f6:	4604      	mov	r4, r0
 80046f8:	460e      	mov	r6, r1
 80046fa:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80046fc:	d14e      	bne.n	800479c <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80046fe:	2900      	cmp	r1, #0
 8004700:	d04a      	beq.n	8004798 <HAL_UART_Transmit+0xac>
 8004702:	2a00      	cmp	r2, #0
 8004704:	d048      	beq.n	8004798 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8004706:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800470a:	2b01      	cmp	r3, #1
 800470c:	d046      	beq.n	800479c <HAL_UART_Transmit+0xb0>
 800470e:	2301      	movs	r3, #1
 8004710:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004716:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800471c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800471e:	f7fd fca9 	bl	8002074 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004722:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8004724:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004728:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800472c:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 800472e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004732:	d103      	bne.n	800473c <HAL_UART_Transmit+0x50>
 8004734:	6922      	ldr	r2, [r4, #16]
 8004736:	b90a      	cbnz	r2, 800473c <HAL_UART_Transmit+0x50>
 8004738:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800473a:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 800473c:	2200      	movs	r2, #0
 800473e:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8004742:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004746:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800474a:	b292      	uxth	r2, r2
 800474c:	b93a      	cbnz	r2, 800475e <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800474e:	2140      	movs	r1, #64	; 0x40
 8004750:	4620      	mov	r0, r4
 8004752:	f7ff ff85 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 8004756:	b950      	cbnz	r0, 800476e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8004758:	2320      	movs	r3, #32
 800475a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 800475c:	e008      	b.n	8004770 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800475e:	2200      	movs	r2, #0
 8004760:	2180      	movs	r1, #128	; 0x80
 8004762:	4620      	mov	r0, r4
 8004764:	9303      	str	r3, [sp, #12]
 8004766:	f7ff ff7b 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 800476a:	9b03      	ldr	r3, [sp, #12]
 800476c:	b118      	cbz	r0, 8004776 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 800476e:	2003      	movs	r0, #3
}
 8004770:	b004      	add	sp, #16
 8004772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 8004776:	6821      	ldr	r1, [r4, #0]
 8004778:	b95e      	cbnz	r6, 8004792 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800477a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800477e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004782:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8004784:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8004788:	3a01      	subs	r2, #1
 800478a:	b292      	uxth	r2, r2
 800478c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8004790:	e7d7      	b.n	8004742 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004792:	f816 2b01 	ldrb.w	r2, [r6], #1
 8004796:	e7f4      	b.n	8004782 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8004798:	2001      	movs	r0, #1
 800479a:	e7e9      	b.n	8004770 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800479c:	2002      	movs	r0, #2
 800479e:	e7e7      	b.n	8004770 <HAL_UART_Transmit+0x84>

080047a0 <UART_CheckIdleState>:
{
 80047a0:	b530      	push	{r4, r5, lr}
 80047a2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a4:	2500      	movs	r5, #0
{
 80047a6:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80047ac:	f7fd fc62 	bl	8002074 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047b0:	6822      	ldr	r2, [r4, #0]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80047b6:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047b8:	d415      	bmi.n	80047e6 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	0752      	lsls	r2, r2, #29
 80047c0:	d509      	bpl.n	80047d6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80047c6:	9200      	str	r2, [sp, #0]
 80047c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047cc:	2200      	movs	r2, #0
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7ff ff46 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 80047d4:	b9a0      	cbnz	r0, 8004800 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80047d6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80047da:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80047dc:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80047e0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e2:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 80047e4:	e00d      	b.n	8004802 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80047ea:	9200      	str	r2, [sp, #0]
 80047ec:	9003      	str	r0, [sp, #12]
 80047ee:	462a      	mov	r2, r5
 80047f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047f4:	4620      	mov	r0, r4
 80047f6:	f7ff ff33 	bl	8004660 <UART_WaitOnFlagUntilTimeout>
 80047fa:	9b03      	ldr	r3, [sp, #12]
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d0dc      	beq.n	80047ba <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004800:	2003      	movs	r0, #3
}
 8004802:	b005      	add	sp, #20
 8004804:	bd30      	pop	{r4, r5, pc}

08004806 <HAL_UART_Init>:
{
 8004806:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004808:	4604      	mov	r4, r0
 800480a:	b340      	cbz	r0, 800485e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800480c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800480e:	b91b      	cbnz	r3, 8004818 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004810:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004814:	f7ff fd87 	bl	8004326 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004818:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800481a:	2324      	movs	r3, #36	; 0x24
 800481c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800481e:	6813      	ldr	r3, [r2, #0]
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff fd7e 	bl	8004328 <UART_SetConfig>
 800482c:	2801      	cmp	r0, #1
 800482e:	d016      	beq.n	800485e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004832:	b113      	cbz	r3, 800483a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004834:	4620      	mov	r0, r4
 8004836:	f7ff febf 	bl	80045b8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800484a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004852:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004854:	601a      	str	r2, [r3, #0]
}
 8004856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800485a:	f7ff bfa1 	b.w	80047a0 <UART_CheckIdleState>
}
 800485e:	2001      	movs	r0, #1
 8004860:	bd10      	pop	{r4, pc}
	...

08004864 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800489c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004868:	f7fd fb9e 	bl	8001fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800486c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800486e:	e003      	b.n	8004878 <LoopCopyDataInit>

08004870 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004872:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004874:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004876:	3104      	adds	r1, #4

08004878 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004878:	480a      	ldr	r0, [pc, #40]	; (80048a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800487c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800487e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004880:	d3f6      	bcc.n	8004870 <CopyDataInit>
	ldr	r2, =_sbss
 8004882:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8004884:	e002      	b.n	800488c <LoopFillZerobss>

08004886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004886:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004888:	f842 3b04 	str.w	r3, [r2], #4

0800488c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <LoopForever+0x16>)
	cmp	r2, r3
 800488e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004890:	d3f9      	bcc.n	8004886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004892:	f000 f861 	bl	8004958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004896:	f7fb fee5 	bl	8000664 <main>

0800489a <LoopForever>:

LoopForever:
    b LoopForever
 800489a:	e7fe      	b.n	800489a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800489c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80048a0:	08006b08 	.word	0x08006b08
	ldr	r0, =_sdata
 80048a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80048a8:	200000a0 	.word	0x200000a0
	ldr	r2, =_sbss
 80048ac:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 80048b0:	20001334 	.word	0x20001334

080048b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048b4:	e7fe      	b.n	80048b4 <ADC1_2_IRQHandler>

080048b6 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80048b6:	2001      	movs	r0, #1
 80048b8:	4770      	bx	lr

080048ba <_kill>:

int _kill(int pid, int sig)
{
 80048ba:	b508      	push	{r3, lr}
	errno = EINVAL;
 80048bc:	f000 f846 	bl	800494c <__errno>
 80048c0:	2316      	movs	r3, #22
 80048c2:	6003      	str	r3, [r0, #0]
	return -1;
}
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	bd08      	pop	{r3, pc}

080048ca <_exit>:

void _exit (int status)
{
 80048ca:	b508      	push	{r3, lr}
	errno = EINVAL;
 80048cc:	f000 f83e 	bl	800494c <__errno>
 80048d0:	2316      	movs	r3, #22
 80048d2:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80048d4:	e7fe      	b.n	80048d4 <_exit+0xa>

080048d6 <_read>:
}

int _read (int file, char *ptr, int len)
{
 80048d6:	b510      	push	{r4, lr}
 80048d8:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 80048da:	f3af 8000 	nop.w
 80048de:	7020      	strb	r0, [r4, #0]

	return 1;
}
 80048e0:	2001      	movs	r0, #1
 80048e2:	bd10      	pop	{r4, pc}

080048e4 <_write>:

int _write(int file, char *ptr, int len)
{
 80048e4:	b570      	push	{r4, r5, r6, lr}
 80048e6:	460e      	mov	r6, r1
 80048e8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ea:	2500      	movs	r5, #0
 80048ec:	42a5      	cmp	r5, r4
 80048ee:	db01      	blt.n	80048f4 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80048f0:	4620      	mov	r0, r4
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80048f4:	5d70      	ldrb	r0, [r6, r5]
 80048f6:	f7fc f86b 	bl	80009d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048fa:	3501      	adds	r5, #1
 80048fc:	e7f6      	b.n	80048ec <_write+0x8>
	...

08004900 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004900:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <_sbrk+0x2c>)
 8004904:	6819      	ldr	r1, [r3, #0]
{
 8004906:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004908:	b909      	cbnz	r1, 800490e <_sbrk+0xe>
		heap_end = &end;
 800490a:	4909      	ldr	r1, [pc, #36]	; (8004930 <_sbrk+0x30>)
 800490c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800490e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004910:	4669      	mov	r1, sp
 8004912:	4402      	add	r2, r0
 8004914:	428a      	cmp	r2, r1
 8004916:	d906      	bls.n	8004926 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004918:	f000 f818 	bl	800494c <__errno>
 800491c:	230c      	movs	r3, #12
 800491e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004924:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8004926:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8004928:	e7fc      	b.n	8004924 <_sbrk+0x24>
 800492a:	bf00      	nop
 800492c:	200008dc 	.word	0x200008dc
 8004930:	20001338 	.word	0x20001338

08004934 <_close>:

int _close(int file)
{
	return -1;
}
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	4770      	bx	lr

0800493a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800493a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800493e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004940:	2000      	movs	r0, #0
 8004942:	4770      	bx	lr

08004944 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004944:	2001      	movs	r0, #1
 8004946:	4770      	bx	lr

08004948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004948:	2000      	movs	r0, #0
 800494a:	4770      	bx	lr

0800494c <__errno>:
 800494c:	4b01      	ldr	r3, [pc, #4]	; (8004954 <__errno+0x8>)
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	2000003c 	.word	0x2000003c

08004958 <__libc_init_array>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4d0d      	ldr	r5, [pc, #52]	; (8004990 <__libc_init_array+0x38>)
 800495c:	4c0d      	ldr	r4, [pc, #52]	; (8004994 <__libc_init_array+0x3c>)
 800495e:	1b64      	subs	r4, r4, r5
 8004960:	10a4      	asrs	r4, r4, #2
 8004962:	2600      	movs	r6, #0
 8004964:	42a6      	cmp	r6, r4
 8004966:	d109      	bne.n	800497c <__libc_init_array+0x24>
 8004968:	4d0b      	ldr	r5, [pc, #44]	; (8004998 <__libc_init_array+0x40>)
 800496a:	4c0c      	ldr	r4, [pc, #48]	; (800499c <__libc_init_array+0x44>)
 800496c:	f001 faf2 	bl	8005f54 <_init>
 8004970:	1b64      	subs	r4, r4, r5
 8004972:	10a4      	asrs	r4, r4, #2
 8004974:	2600      	movs	r6, #0
 8004976:	42a6      	cmp	r6, r4
 8004978:	d105      	bne.n	8004986 <__libc_init_array+0x2e>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004980:	4798      	blx	r3
 8004982:	3601      	adds	r6, #1
 8004984:	e7ee      	b.n	8004964 <__libc_init_array+0xc>
 8004986:	f855 3b04 	ldr.w	r3, [r5], #4
 800498a:	4798      	blx	r3
 800498c:	3601      	adds	r6, #1
 800498e:	e7f2      	b.n	8004976 <__libc_init_array+0x1e>
 8004990:	08006af8 	.word	0x08006af8
 8004994:	08006af8 	.word	0x08006af8
 8004998:	08006af8 	.word	0x08006af8
 800499c:	08006afc 	.word	0x08006afc

080049a0 <memcpy>:
 80049a0:	440a      	add	r2, r1
 80049a2:	4291      	cmp	r1, r2
 80049a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049a8:	d100      	bne.n	80049ac <memcpy+0xc>
 80049aa:	4770      	bx	lr
 80049ac:	b510      	push	{r4, lr}
 80049ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049b6:	4291      	cmp	r1, r2
 80049b8:	d1f9      	bne.n	80049ae <memcpy+0xe>
 80049ba:	bd10      	pop	{r4, pc}

080049bc <memset>:
 80049bc:	4402      	add	r2, r0
 80049be:	4603      	mov	r3, r0
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d100      	bne.n	80049c6 <memset+0xa>
 80049c4:	4770      	bx	lr
 80049c6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ca:	e7f9      	b.n	80049c0 <memset+0x4>

080049cc <iprintf>:
 80049cc:	b40f      	push	{r0, r1, r2, r3}
 80049ce:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <iprintf+0x2c>)
 80049d0:	b513      	push	{r0, r1, r4, lr}
 80049d2:	681c      	ldr	r4, [r3, #0]
 80049d4:	b124      	cbz	r4, 80049e0 <iprintf+0x14>
 80049d6:	69a3      	ldr	r3, [r4, #24]
 80049d8:	b913      	cbnz	r3, 80049e0 <iprintf+0x14>
 80049da:	4620      	mov	r0, r4
 80049dc:	f000 fb4c 	bl	8005078 <__sinit>
 80049e0:	ab05      	add	r3, sp, #20
 80049e2:	9a04      	ldr	r2, [sp, #16]
 80049e4:	68a1      	ldr	r1, [r4, #8]
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	4620      	mov	r0, r4
 80049ea:	f000 fe93 	bl	8005714 <_vfiprintf_r>
 80049ee:	b002      	add	sp, #8
 80049f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049f4:	b004      	add	sp, #16
 80049f6:	4770      	bx	lr
 80049f8:	2000003c 	.word	0x2000003c

080049fc <_puts_r>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	460e      	mov	r6, r1
 8004a00:	4605      	mov	r5, r0
 8004a02:	b118      	cbz	r0, 8004a0c <_puts_r+0x10>
 8004a04:	6983      	ldr	r3, [r0, #24]
 8004a06:	b90b      	cbnz	r3, 8004a0c <_puts_r+0x10>
 8004a08:	f000 fb36 	bl	8005078 <__sinit>
 8004a0c:	69ab      	ldr	r3, [r5, #24]
 8004a0e:	68ac      	ldr	r4, [r5, #8]
 8004a10:	b913      	cbnz	r3, 8004a18 <_puts_r+0x1c>
 8004a12:	4628      	mov	r0, r5
 8004a14:	f000 fb30 	bl	8005078 <__sinit>
 8004a18:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <_puts_r+0xd0>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	d120      	bne.n	8004a60 <_puts_r+0x64>
 8004a1e:	686c      	ldr	r4, [r5, #4]
 8004a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a22:	07db      	lsls	r3, r3, #31
 8004a24:	d405      	bmi.n	8004a32 <_puts_r+0x36>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	0598      	lsls	r0, r3, #22
 8004a2a:	d402      	bmi.n	8004a32 <_puts_r+0x36>
 8004a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a2e:	f000 fbd3 	bl	80051d8 <__retarget_lock_acquire_recursive>
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	0719      	lsls	r1, r3, #28
 8004a36:	d51d      	bpl.n	8004a74 <_puts_r+0x78>
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	b1db      	cbz	r3, 8004a74 <_puts_r+0x78>
 8004a3c:	3e01      	subs	r6, #1
 8004a3e:	68a3      	ldr	r3, [r4, #8]
 8004a40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a44:	3b01      	subs	r3, #1
 8004a46:	60a3      	str	r3, [r4, #8]
 8004a48:	bb39      	cbnz	r1, 8004a9a <_puts_r+0x9e>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da38      	bge.n	8004ac0 <_puts_r+0xc4>
 8004a4e:	4622      	mov	r2, r4
 8004a50:	210a      	movs	r1, #10
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f918 	bl	8004c88 <__swbuf_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d011      	beq.n	8004a80 <_puts_r+0x84>
 8004a5c:	250a      	movs	r5, #10
 8004a5e:	e011      	b.n	8004a84 <_puts_r+0x88>
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <_puts_r+0xd4>)
 8004a62:	429c      	cmp	r4, r3
 8004a64:	d101      	bne.n	8004a6a <_puts_r+0x6e>
 8004a66:	68ac      	ldr	r4, [r5, #8]
 8004a68:	e7da      	b.n	8004a20 <_puts_r+0x24>
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <_puts_r+0xd8>)
 8004a6c:	429c      	cmp	r4, r3
 8004a6e:	bf08      	it	eq
 8004a70:	68ec      	ldreq	r4, [r5, #12]
 8004a72:	e7d5      	b.n	8004a20 <_puts_r+0x24>
 8004a74:	4621      	mov	r1, r4
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 f958 	bl	8004d2c <__swsetup_r>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d0dd      	beq.n	8004a3c <_puts_r+0x40>
 8004a80:	f04f 35ff 	mov.w	r5, #4294967295
 8004a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a86:	07da      	lsls	r2, r3, #31
 8004a88:	d405      	bmi.n	8004a96 <_puts_r+0x9a>
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	059b      	lsls	r3, r3, #22
 8004a8e:	d402      	bmi.n	8004a96 <_puts_r+0x9a>
 8004a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a92:	f000 fba2 	bl	80051da <__retarget_lock_release_recursive>
 8004a96:	4628      	mov	r0, r5
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da04      	bge.n	8004aa8 <_puts_r+0xac>
 8004a9e:	69a2      	ldr	r2, [r4, #24]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	dc06      	bgt.n	8004ab2 <_puts_r+0xb6>
 8004aa4:	290a      	cmp	r1, #10
 8004aa6:	d004      	beq.n	8004ab2 <_puts_r+0xb6>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	6022      	str	r2, [r4, #0]
 8004aae:	7019      	strb	r1, [r3, #0]
 8004ab0:	e7c5      	b.n	8004a3e <_puts_r+0x42>
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f8e7 	bl	8004c88 <__swbuf_r>
 8004aba:	3001      	adds	r0, #1
 8004abc:	d1bf      	bne.n	8004a3e <_puts_r+0x42>
 8004abe:	e7df      	b.n	8004a80 <_puts_r+0x84>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	250a      	movs	r5, #10
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	6022      	str	r2, [r4, #0]
 8004ac8:	701d      	strb	r5, [r3, #0]
 8004aca:	e7db      	b.n	8004a84 <_puts_r+0x88>
 8004acc:	08006a78 	.word	0x08006a78
 8004ad0:	08006a98 	.word	0x08006a98
 8004ad4:	08006a58 	.word	0x08006a58

08004ad8 <puts>:
 8004ad8:	4b02      	ldr	r3, [pc, #8]	; (8004ae4 <puts+0xc>)
 8004ada:	4601      	mov	r1, r0
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	f7ff bf8d 	b.w	80049fc <_puts_r>
 8004ae2:	bf00      	nop
 8004ae4:	2000003c 	.word	0x2000003c

08004ae8 <siprintf>:
 8004ae8:	b40e      	push	{r1, r2, r3}
 8004aea:	b500      	push	{lr}
 8004aec:	b09c      	sub	sp, #112	; 0x70
 8004aee:	ab1d      	add	r3, sp, #116	; 0x74
 8004af0:	9002      	str	r0, [sp, #8]
 8004af2:	9006      	str	r0, [sp, #24]
 8004af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004af8:	4809      	ldr	r0, [pc, #36]	; (8004b20 <siprintf+0x38>)
 8004afa:	9107      	str	r1, [sp, #28]
 8004afc:	9104      	str	r1, [sp, #16]
 8004afe:	4909      	ldr	r1, [pc, #36]	; (8004b24 <siprintf+0x3c>)
 8004b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b04:	9105      	str	r1, [sp, #20]
 8004b06:	6800      	ldr	r0, [r0, #0]
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	a902      	add	r1, sp, #8
 8004b0c:	f000 fcd8 	bl	80054c0 <_svfiprintf_r>
 8004b10:	9b02      	ldr	r3, [sp, #8]
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	b01c      	add	sp, #112	; 0x70
 8004b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b1c:	b003      	add	sp, #12
 8004b1e:	4770      	bx	lr
 8004b20:	2000003c 	.word	0x2000003c
 8004b24:	ffff0208 	.word	0xffff0208

08004b28 <strcat>:
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	7814      	ldrb	r4, [r2, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	3201      	adds	r2, #1
 8004b32:	2c00      	cmp	r4, #0
 8004b34:	d1fa      	bne.n	8004b2c <strcat+0x4>
 8004b36:	3b01      	subs	r3, #1
 8004b38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	d1f9      	bne.n	8004b38 <strcat+0x10>
 8004b44:	bd10      	pop	{r4, pc}

08004b46 <strcpy>:
 8004b46:	4603      	mov	r3, r0
 8004b48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b4c:	f803 2b01 	strb.w	r2, [r3], #1
 8004b50:	2a00      	cmp	r2, #0
 8004b52:	d1f9      	bne.n	8004b48 <strcpy+0x2>
 8004b54:	4770      	bx	lr

08004b56 <strncmp>:
 8004b56:	b510      	push	{r4, lr}
 8004b58:	b16a      	cbz	r2, 8004b76 <strncmp+0x20>
 8004b5a:	3901      	subs	r1, #1
 8004b5c:	1884      	adds	r4, r0, r2
 8004b5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004b62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d103      	bne.n	8004b72 <strncmp+0x1c>
 8004b6a:	42a0      	cmp	r0, r4
 8004b6c:	d001      	beq.n	8004b72 <strncmp+0x1c>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f5      	bne.n	8004b5e <strncmp+0x8>
 8004b72:	1a98      	subs	r0, r3, r2
 8004b74:	bd10      	pop	{r4, pc}
 8004b76:	4610      	mov	r0, r2
 8004b78:	e7fc      	b.n	8004b74 <strncmp+0x1e>

08004b7a <strncpy>:
 8004b7a:	b510      	push	{r4, lr}
 8004b7c:	3901      	subs	r1, #1
 8004b7e:	4603      	mov	r3, r0
 8004b80:	b132      	cbz	r2, 8004b90 <strncpy+0x16>
 8004b82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004b86:	f803 4b01 	strb.w	r4, [r3], #1
 8004b8a:	3a01      	subs	r2, #1
 8004b8c:	2c00      	cmp	r4, #0
 8004b8e:	d1f7      	bne.n	8004b80 <strncpy+0x6>
 8004b90:	441a      	add	r2, r3
 8004b92:	2100      	movs	r1, #0
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d100      	bne.n	8004b9a <strncpy+0x20>
 8004b98:	bd10      	pop	{r4, pc}
 8004b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b9e:	e7f9      	b.n	8004b94 <strncpy+0x1a>

08004ba0 <strstr>:
 8004ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba2:	780c      	ldrb	r4, [r1, #0]
 8004ba4:	b164      	cbz	r4, 8004bc0 <strstr+0x20>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	1c5e      	adds	r6, r3, #1
 8004bae:	b90a      	cbnz	r2, 8004bb4 <strstr+0x14>
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	e005      	b.n	8004bc0 <strstr+0x20>
 8004bb4:	4294      	cmp	r4, r2
 8004bb6:	d108      	bne.n	8004bca <strstr+0x2a>
 8004bb8:	460d      	mov	r5, r1
 8004bba:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004bbe:	b902      	cbnz	r2, 8004bc2 <strstr+0x22>
 8004bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004bc6:	4297      	cmp	r7, r2
 8004bc8:	d0f7      	beq.n	8004bba <strstr+0x1a>
 8004bca:	4633      	mov	r3, r6
 8004bcc:	e7ec      	b.n	8004ba8 <strstr+0x8>
	...

08004bd0 <strtok>:
 8004bd0:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <strtok+0x5c>)
 8004bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bd4:	681e      	ldr	r6, [r3, #0]
 8004bd6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004bd8:	4605      	mov	r5, r0
 8004bda:	b9fc      	cbnz	r4, 8004c1c <strtok+0x4c>
 8004bdc:	2050      	movs	r0, #80	; 0x50
 8004bde:	9101      	str	r1, [sp, #4]
 8004be0:	f000 fb60 	bl	80052a4 <malloc>
 8004be4:	9901      	ldr	r1, [sp, #4]
 8004be6:	65b0      	str	r0, [r6, #88]	; 0x58
 8004be8:	4602      	mov	r2, r0
 8004bea:	b920      	cbnz	r0, 8004bf6 <strtok+0x26>
 8004bec:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <strtok+0x60>)
 8004bee:	4811      	ldr	r0, [pc, #68]	; (8004c34 <strtok+0x64>)
 8004bf0:	2157      	movs	r1, #87	; 0x57
 8004bf2:	f000 f909 	bl	8004e08 <__assert_func>
 8004bf6:	e9c0 4400 	strd	r4, r4, [r0]
 8004bfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004bfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004c02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004c06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004c0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004c0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004c12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004c16:	6184      	str	r4, [r0, #24]
 8004c18:	7704      	strb	r4, [r0, #28]
 8004c1a:	6244      	str	r4, [r0, #36]	; 0x24
 8004c1c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004c1e:	2301      	movs	r3, #1
 8004c20:	4628      	mov	r0, r5
 8004c22:	b002      	add	sp, #8
 8004c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c28:	f000 b806 	b.w	8004c38 <__strtok_r>
 8004c2c:	2000003c 	.word	0x2000003c
 8004c30:	080069a4 	.word	0x080069a4
 8004c34:	080069bb 	.word	0x080069bb

08004c38 <__strtok_r>:
 8004c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c3a:	b908      	cbnz	r0, 8004c40 <__strtok_r+0x8>
 8004c3c:	6810      	ldr	r0, [r2, #0]
 8004c3e:	b188      	cbz	r0, 8004c64 <__strtok_r+0x2c>
 8004c40:	4604      	mov	r4, r0
 8004c42:	4620      	mov	r0, r4
 8004c44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004c48:	460f      	mov	r7, r1
 8004c4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004c4e:	b91e      	cbnz	r6, 8004c58 <__strtok_r+0x20>
 8004c50:	b965      	cbnz	r5, 8004c6c <__strtok_r+0x34>
 8004c52:	6015      	str	r5, [r2, #0]
 8004c54:	4628      	mov	r0, r5
 8004c56:	e005      	b.n	8004c64 <__strtok_r+0x2c>
 8004c58:	42b5      	cmp	r5, r6
 8004c5a:	d1f6      	bne.n	8004c4a <__strtok_r+0x12>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <__strtok_r+0xa>
 8004c60:	6014      	str	r4, [r2, #0]
 8004c62:	7003      	strb	r3, [r0, #0]
 8004c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c66:	461c      	mov	r4, r3
 8004c68:	e00c      	b.n	8004c84 <__strtok_r+0x4c>
 8004c6a:	b915      	cbnz	r5, 8004c72 <__strtok_r+0x3a>
 8004c6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004c70:	460e      	mov	r6, r1
 8004c72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004c76:	42ab      	cmp	r3, r5
 8004c78:	d1f7      	bne.n	8004c6a <__strtok_r+0x32>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f3      	beq.n	8004c66 <__strtok_r+0x2e>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004c84:	6014      	str	r4, [r2, #0]
 8004c86:	e7ed      	b.n	8004c64 <__strtok_r+0x2c>

08004c88 <__swbuf_r>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	460e      	mov	r6, r1
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	4605      	mov	r5, r0
 8004c90:	b118      	cbz	r0, 8004c9a <__swbuf_r+0x12>
 8004c92:	6983      	ldr	r3, [r0, #24]
 8004c94:	b90b      	cbnz	r3, 8004c9a <__swbuf_r+0x12>
 8004c96:	f000 f9ef 	bl	8005078 <__sinit>
 8004c9a:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <__swbuf_r+0x98>)
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	d12b      	bne.n	8004cf8 <__swbuf_r+0x70>
 8004ca0:	686c      	ldr	r4, [r5, #4]
 8004ca2:	69a3      	ldr	r3, [r4, #24]
 8004ca4:	60a3      	str	r3, [r4, #8]
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	071a      	lsls	r2, r3, #28
 8004caa:	d52f      	bpl.n	8004d0c <__swbuf_r+0x84>
 8004cac:	6923      	ldr	r3, [r4, #16]
 8004cae:	b36b      	cbz	r3, 8004d0c <__swbuf_r+0x84>
 8004cb0:	6923      	ldr	r3, [r4, #16]
 8004cb2:	6820      	ldr	r0, [r4, #0]
 8004cb4:	1ac0      	subs	r0, r0, r3
 8004cb6:	6963      	ldr	r3, [r4, #20]
 8004cb8:	b2f6      	uxtb	r6, r6
 8004cba:	4283      	cmp	r3, r0
 8004cbc:	4637      	mov	r7, r6
 8004cbe:	dc04      	bgt.n	8004cca <__swbuf_r+0x42>
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 f944 	bl	8004f50 <_fflush_r>
 8004cc8:	bb30      	cbnz	r0, 8004d18 <__swbuf_r+0x90>
 8004cca:	68a3      	ldr	r3, [r4, #8]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	60a3      	str	r3, [r4, #8]
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	6022      	str	r2, [r4, #0]
 8004cd6:	701e      	strb	r6, [r3, #0]
 8004cd8:	6963      	ldr	r3, [r4, #20]
 8004cda:	3001      	adds	r0, #1
 8004cdc:	4283      	cmp	r3, r0
 8004cde:	d004      	beq.n	8004cea <__swbuf_r+0x62>
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	07db      	lsls	r3, r3, #31
 8004ce4:	d506      	bpl.n	8004cf4 <__swbuf_r+0x6c>
 8004ce6:	2e0a      	cmp	r6, #10
 8004ce8:	d104      	bne.n	8004cf4 <__swbuf_r+0x6c>
 8004cea:	4621      	mov	r1, r4
 8004cec:	4628      	mov	r0, r5
 8004cee:	f000 f92f 	bl	8004f50 <_fflush_r>
 8004cf2:	b988      	cbnz	r0, 8004d18 <__swbuf_r+0x90>
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <__swbuf_r+0x9c>)
 8004cfa:	429c      	cmp	r4, r3
 8004cfc:	d101      	bne.n	8004d02 <__swbuf_r+0x7a>
 8004cfe:	68ac      	ldr	r4, [r5, #8]
 8004d00:	e7cf      	b.n	8004ca2 <__swbuf_r+0x1a>
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <__swbuf_r+0xa0>)
 8004d04:	429c      	cmp	r4, r3
 8004d06:	bf08      	it	eq
 8004d08:	68ec      	ldreq	r4, [r5, #12]
 8004d0a:	e7ca      	b.n	8004ca2 <__swbuf_r+0x1a>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 f80c 	bl	8004d2c <__swsetup_r>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d0cb      	beq.n	8004cb0 <__swbuf_r+0x28>
 8004d18:	f04f 37ff 	mov.w	r7, #4294967295
 8004d1c:	e7ea      	b.n	8004cf4 <__swbuf_r+0x6c>
 8004d1e:	bf00      	nop
 8004d20:	08006a78 	.word	0x08006a78
 8004d24:	08006a98 	.word	0x08006a98
 8004d28:	08006a58 	.word	0x08006a58

08004d2c <__swsetup_r>:
 8004d2c:	4b32      	ldr	r3, [pc, #200]	; (8004df8 <__swsetup_r+0xcc>)
 8004d2e:	b570      	push	{r4, r5, r6, lr}
 8004d30:	681d      	ldr	r5, [r3, #0]
 8004d32:	4606      	mov	r6, r0
 8004d34:	460c      	mov	r4, r1
 8004d36:	b125      	cbz	r5, 8004d42 <__swsetup_r+0x16>
 8004d38:	69ab      	ldr	r3, [r5, #24]
 8004d3a:	b913      	cbnz	r3, 8004d42 <__swsetup_r+0x16>
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f000 f99b 	bl	8005078 <__sinit>
 8004d42:	4b2e      	ldr	r3, [pc, #184]	; (8004dfc <__swsetup_r+0xd0>)
 8004d44:	429c      	cmp	r4, r3
 8004d46:	d10f      	bne.n	8004d68 <__swsetup_r+0x3c>
 8004d48:	686c      	ldr	r4, [r5, #4]
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d50:	0719      	lsls	r1, r3, #28
 8004d52:	d42c      	bmi.n	8004dae <__swsetup_r+0x82>
 8004d54:	06dd      	lsls	r5, r3, #27
 8004d56:	d411      	bmi.n	8004d7c <__swsetup_r+0x50>
 8004d58:	2309      	movs	r3, #9
 8004d5a:	6033      	str	r3, [r6, #0]
 8004d5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	f04f 30ff 	mov.w	r0, #4294967295
 8004d66:	e03e      	b.n	8004de6 <__swsetup_r+0xba>
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <__swsetup_r+0xd4>)
 8004d6a:	429c      	cmp	r4, r3
 8004d6c:	d101      	bne.n	8004d72 <__swsetup_r+0x46>
 8004d6e:	68ac      	ldr	r4, [r5, #8]
 8004d70:	e7eb      	b.n	8004d4a <__swsetup_r+0x1e>
 8004d72:	4b24      	ldr	r3, [pc, #144]	; (8004e04 <__swsetup_r+0xd8>)
 8004d74:	429c      	cmp	r4, r3
 8004d76:	bf08      	it	eq
 8004d78:	68ec      	ldreq	r4, [r5, #12]
 8004d7a:	e7e6      	b.n	8004d4a <__swsetup_r+0x1e>
 8004d7c:	0758      	lsls	r0, r3, #29
 8004d7e:	d512      	bpl.n	8004da6 <__swsetup_r+0x7a>
 8004d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d82:	b141      	cbz	r1, 8004d96 <__swsetup_r+0x6a>
 8004d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d88:	4299      	cmp	r1, r3
 8004d8a:	d002      	beq.n	8004d92 <__swsetup_r+0x66>
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f000 fa91 	bl	80052b4 <_free_r>
 8004d92:	2300      	movs	r3, #0
 8004d94:	6363      	str	r3, [r4, #52]	; 0x34
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d9c:	81a3      	strh	r3, [r4, #12]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	6063      	str	r3, [r4, #4]
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	f043 0308 	orr.w	r3, r3, #8
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	6923      	ldr	r3, [r4, #16]
 8004db0:	b94b      	cbnz	r3, 8004dc6 <__swsetup_r+0x9a>
 8004db2:	89a3      	ldrh	r3, [r4, #12]
 8004db4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dbc:	d003      	beq.n	8004dc6 <__swsetup_r+0x9a>
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 fa2f 	bl	8005224 <__smakebuf_r>
 8004dc6:	89a0      	ldrh	r0, [r4, #12]
 8004dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dcc:	f010 0301 	ands.w	r3, r0, #1
 8004dd0:	d00a      	beq.n	8004de8 <__swsetup_r+0xbc>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60a3      	str	r3, [r4, #8]
 8004dd6:	6963      	ldr	r3, [r4, #20]
 8004dd8:	425b      	negs	r3, r3
 8004dda:	61a3      	str	r3, [r4, #24]
 8004ddc:	6923      	ldr	r3, [r4, #16]
 8004dde:	b943      	cbnz	r3, 8004df2 <__swsetup_r+0xc6>
 8004de0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004de4:	d1ba      	bne.n	8004d5c <__swsetup_r+0x30>
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	0781      	lsls	r1, r0, #30
 8004dea:	bf58      	it	pl
 8004dec:	6963      	ldrpl	r3, [r4, #20]
 8004dee:	60a3      	str	r3, [r4, #8]
 8004df0:	e7f4      	b.n	8004ddc <__swsetup_r+0xb0>
 8004df2:	2000      	movs	r0, #0
 8004df4:	e7f7      	b.n	8004de6 <__swsetup_r+0xba>
 8004df6:	bf00      	nop
 8004df8:	2000003c 	.word	0x2000003c
 8004dfc:	08006a78 	.word	0x08006a78
 8004e00:	08006a98 	.word	0x08006a98
 8004e04:	08006a58 	.word	0x08006a58

08004e08 <__assert_func>:
 8004e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e0a:	4614      	mov	r4, r2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <__assert_func+0x2c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4605      	mov	r5, r0
 8004e14:	68d8      	ldr	r0, [r3, #12]
 8004e16:	b14c      	cbz	r4, 8004e2c <__assert_func+0x24>
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <__assert_func+0x30>)
 8004e1a:	9100      	str	r1, [sp, #0]
 8004e1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e20:	4906      	ldr	r1, [pc, #24]	; (8004e3c <__assert_func+0x34>)
 8004e22:	462b      	mov	r3, r5
 8004e24:	f000 f9a6 	bl	8005174 <fiprintf>
 8004e28:	f000 ff9e 	bl	8005d68 <abort>
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <__assert_func+0x38>)
 8004e2e:	461c      	mov	r4, r3
 8004e30:	e7f3      	b.n	8004e1a <__assert_func+0x12>
 8004e32:	bf00      	nop
 8004e34:	2000003c 	.word	0x2000003c
 8004e38:	08006a1c 	.word	0x08006a1c
 8004e3c:	08006a29 	.word	0x08006a29
 8004e40:	08006006 	.word	0x08006006

08004e44 <__sflush_r>:
 8004e44:	898a      	ldrh	r2, [r1, #12]
 8004e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	0710      	lsls	r0, r2, #28
 8004e4e:	460c      	mov	r4, r1
 8004e50:	d458      	bmi.n	8004f04 <__sflush_r+0xc0>
 8004e52:	684b      	ldr	r3, [r1, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	dc05      	bgt.n	8004e64 <__sflush_r+0x20>
 8004e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	dc02      	bgt.n	8004e64 <__sflush_r+0x20>
 8004e5e:	2000      	movs	r0, #0
 8004e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e66:	2e00      	cmp	r6, #0
 8004e68:	d0f9      	beq.n	8004e5e <__sflush_r+0x1a>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e70:	682f      	ldr	r7, [r5, #0]
 8004e72:	602b      	str	r3, [r5, #0]
 8004e74:	d032      	beq.n	8004edc <__sflush_r+0x98>
 8004e76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e78:	89a3      	ldrh	r3, [r4, #12]
 8004e7a:	075a      	lsls	r2, r3, #29
 8004e7c:	d505      	bpl.n	8004e8a <__sflush_r+0x46>
 8004e7e:	6863      	ldr	r3, [r4, #4]
 8004e80:	1ac0      	subs	r0, r0, r3
 8004e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e84:	b10b      	cbz	r3, 8004e8a <__sflush_r+0x46>
 8004e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e88:	1ac0      	subs	r0, r0, r3
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e90:	6a21      	ldr	r1, [r4, #32]
 8004e92:	4628      	mov	r0, r5
 8004e94:	47b0      	blx	r6
 8004e96:	1c43      	adds	r3, r0, #1
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	d106      	bne.n	8004eaa <__sflush_r+0x66>
 8004e9c:	6829      	ldr	r1, [r5, #0]
 8004e9e:	291d      	cmp	r1, #29
 8004ea0:	d82c      	bhi.n	8004efc <__sflush_r+0xb8>
 8004ea2:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <__sflush_r+0x108>)
 8004ea4:	40ca      	lsrs	r2, r1
 8004ea6:	07d6      	lsls	r6, r2, #31
 8004ea8:	d528      	bpl.n	8004efc <__sflush_r+0xb8>
 8004eaa:	2200      	movs	r2, #0
 8004eac:	6062      	str	r2, [r4, #4]
 8004eae:	04d9      	lsls	r1, r3, #19
 8004eb0:	6922      	ldr	r2, [r4, #16]
 8004eb2:	6022      	str	r2, [r4, #0]
 8004eb4:	d504      	bpl.n	8004ec0 <__sflush_r+0x7c>
 8004eb6:	1c42      	adds	r2, r0, #1
 8004eb8:	d101      	bne.n	8004ebe <__sflush_r+0x7a>
 8004eba:	682b      	ldr	r3, [r5, #0]
 8004ebc:	b903      	cbnz	r3, 8004ec0 <__sflush_r+0x7c>
 8004ebe:	6560      	str	r0, [r4, #84]	; 0x54
 8004ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ec2:	602f      	str	r7, [r5, #0]
 8004ec4:	2900      	cmp	r1, #0
 8004ec6:	d0ca      	beq.n	8004e5e <__sflush_r+0x1a>
 8004ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ecc:	4299      	cmp	r1, r3
 8004ece:	d002      	beq.n	8004ed6 <__sflush_r+0x92>
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 f9ef 	bl	80052b4 <_free_r>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8004eda:	e7c1      	b.n	8004e60 <__sflush_r+0x1c>
 8004edc:	6a21      	ldr	r1, [r4, #32]
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	47b0      	blx	r6
 8004ee4:	1c41      	adds	r1, r0, #1
 8004ee6:	d1c7      	bne.n	8004e78 <__sflush_r+0x34>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0c4      	beq.n	8004e78 <__sflush_r+0x34>
 8004eee:	2b1d      	cmp	r3, #29
 8004ef0:	d001      	beq.n	8004ef6 <__sflush_r+0xb2>
 8004ef2:	2b16      	cmp	r3, #22
 8004ef4:	d101      	bne.n	8004efa <__sflush_r+0xb6>
 8004ef6:	602f      	str	r7, [r5, #0]
 8004ef8:	e7b1      	b.n	8004e5e <__sflush_r+0x1a>
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f00:	81a3      	strh	r3, [r4, #12]
 8004f02:	e7ad      	b.n	8004e60 <__sflush_r+0x1c>
 8004f04:	690f      	ldr	r7, [r1, #16]
 8004f06:	2f00      	cmp	r7, #0
 8004f08:	d0a9      	beq.n	8004e5e <__sflush_r+0x1a>
 8004f0a:	0793      	lsls	r3, r2, #30
 8004f0c:	680e      	ldr	r6, [r1, #0]
 8004f0e:	bf08      	it	eq
 8004f10:	694b      	ldreq	r3, [r1, #20]
 8004f12:	600f      	str	r7, [r1, #0]
 8004f14:	bf18      	it	ne
 8004f16:	2300      	movne	r3, #0
 8004f18:	eba6 0807 	sub.w	r8, r6, r7
 8004f1c:	608b      	str	r3, [r1, #8]
 8004f1e:	f1b8 0f00 	cmp.w	r8, #0
 8004f22:	dd9c      	ble.n	8004e5e <__sflush_r+0x1a>
 8004f24:	6a21      	ldr	r1, [r4, #32]
 8004f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f28:	4643      	mov	r3, r8
 8004f2a:	463a      	mov	r2, r7
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	47b0      	blx	r6
 8004f30:	2800      	cmp	r0, #0
 8004f32:	dc06      	bgt.n	8004f42 <__sflush_r+0xfe>
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f3a:	81a3      	strh	r3, [r4, #12]
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	e78e      	b.n	8004e60 <__sflush_r+0x1c>
 8004f42:	4407      	add	r7, r0
 8004f44:	eba8 0800 	sub.w	r8, r8, r0
 8004f48:	e7e9      	b.n	8004f1e <__sflush_r+0xda>
 8004f4a:	bf00      	nop
 8004f4c:	20400001 	.word	0x20400001

08004f50 <_fflush_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	690b      	ldr	r3, [r1, #16]
 8004f54:	4605      	mov	r5, r0
 8004f56:	460c      	mov	r4, r1
 8004f58:	b913      	cbnz	r3, 8004f60 <_fflush_r+0x10>
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	b118      	cbz	r0, 8004f6a <_fflush_r+0x1a>
 8004f62:	6983      	ldr	r3, [r0, #24]
 8004f64:	b90b      	cbnz	r3, 8004f6a <_fflush_r+0x1a>
 8004f66:	f000 f887 	bl	8005078 <__sinit>
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <_fflush_r+0x6c>)
 8004f6c:	429c      	cmp	r4, r3
 8004f6e:	d11b      	bne.n	8004fa8 <_fflush_r+0x58>
 8004f70:	686c      	ldr	r4, [r5, #4]
 8004f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0ef      	beq.n	8004f5a <_fflush_r+0xa>
 8004f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f7c:	07d0      	lsls	r0, r2, #31
 8004f7e:	d404      	bmi.n	8004f8a <_fflush_r+0x3a>
 8004f80:	0599      	lsls	r1, r3, #22
 8004f82:	d402      	bmi.n	8004f8a <_fflush_r+0x3a>
 8004f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f86:	f000 f927 	bl	80051d8 <__retarget_lock_acquire_recursive>
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	f7ff ff59 	bl	8004e44 <__sflush_r>
 8004f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f94:	07da      	lsls	r2, r3, #31
 8004f96:	4605      	mov	r5, r0
 8004f98:	d4e0      	bmi.n	8004f5c <_fflush_r+0xc>
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	059b      	lsls	r3, r3, #22
 8004f9e:	d4dd      	bmi.n	8004f5c <_fflush_r+0xc>
 8004fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fa2:	f000 f91a 	bl	80051da <__retarget_lock_release_recursive>
 8004fa6:	e7d9      	b.n	8004f5c <_fflush_r+0xc>
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <_fflush_r+0x70>)
 8004faa:	429c      	cmp	r4, r3
 8004fac:	d101      	bne.n	8004fb2 <_fflush_r+0x62>
 8004fae:	68ac      	ldr	r4, [r5, #8]
 8004fb0:	e7df      	b.n	8004f72 <_fflush_r+0x22>
 8004fb2:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <_fflush_r+0x74>)
 8004fb4:	429c      	cmp	r4, r3
 8004fb6:	bf08      	it	eq
 8004fb8:	68ec      	ldreq	r4, [r5, #12]
 8004fba:	e7da      	b.n	8004f72 <_fflush_r+0x22>
 8004fbc:	08006a78 	.word	0x08006a78
 8004fc0:	08006a98 	.word	0x08006a98
 8004fc4:	08006a58 	.word	0x08006a58

08004fc8 <std>:
 8004fc8:	2300      	movs	r3, #0
 8004fca:	b510      	push	{r4, lr}
 8004fcc:	4604      	mov	r4, r0
 8004fce:	e9c0 3300 	strd	r3, r3, [r0]
 8004fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fd6:	6083      	str	r3, [r0, #8]
 8004fd8:	8181      	strh	r1, [r0, #12]
 8004fda:	6643      	str	r3, [r0, #100]	; 0x64
 8004fdc:	81c2      	strh	r2, [r0, #14]
 8004fde:	6183      	str	r3, [r0, #24]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	305c      	adds	r0, #92	; 0x5c
 8004fe6:	f7ff fce9 	bl	80049bc <memset>
 8004fea:	4b05      	ldr	r3, [pc, #20]	; (8005000 <std+0x38>)
 8004fec:	6263      	str	r3, [r4, #36]	; 0x24
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <std+0x3c>)
 8004ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <std+0x40>)
 8004ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <std+0x44>)
 8004ff8:	6224      	str	r4, [r4, #32]
 8004ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8004ffc:	bd10      	pop	{r4, pc}
 8004ffe:	bf00      	nop
 8005000:	08005cbd 	.word	0x08005cbd
 8005004:	08005cdf 	.word	0x08005cdf
 8005008:	08005d17 	.word	0x08005d17
 800500c:	08005d3b 	.word	0x08005d3b

08005010 <_cleanup_r>:
 8005010:	4901      	ldr	r1, [pc, #4]	; (8005018 <_cleanup_r+0x8>)
 8005012:	f000 b8c1 	b.w	8005198 <_fwalk_reent>
 8005016:	bf00      	nop
 8005018:	08004f51 	.word	0x08004f51

0800501c <__sfmoreglue>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	1e4a      	subs	r2, r1, #1
 8005020:	2568      	movs	r5, #104	; 0x68
 8005022:	4355      	muls	r5, r2
 8005024:	460e      	mov	r6, r1
 8005026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800502a:	f000 f993 	bl	8005354 <_malloc_r>
 800502e:	4604      	mov	r4, r0
 8005030:	b140      	cbz	r0, 8005044 <__sfmoreglue+0x28>
 8005032:	2100      	movs	r1, #0
 8005034:	e9c0 1600 	strd	r1, r6, [r0]
 8005038:	300c      	adds	r0, #12
 800503a:	60a0      	str	r0, [r4, #8]
 800503c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005040:	f7ff fcbc 	bl	80049bc <memset>
 8005044:	4620      	mov	r0, r4
 8005046:	bd70      	pop	{r4, r5, r6, pc}

08005048 <__sfp_lock_acquire>:
 8005048:	4801      	ldr	r0, [pc, #4]	; (8005050 <__sfp_lock_acquire+0x8>)
 800504a:	f000 b8c5 	b.w	80051d8 <__retarget_lock_acquire_recursive>
 800504e:	bf00      	nop
 8005050:	2000132c 	.word	0x2000132c

08005054 <__sfp_lock_release>:
 8005054:	4801      	ldr	r0, [pc, #4]	; (800505c <__sfp_lock_release+0x8>)
 8005056:	f000 b8c0 	b.w	80051da <__retarget_lock_release_recursive>
 800505a:	bf00      	nop
 800505c:	2000132c 	.word	0x2000132c

08005060 <__sinit_lock_acquire>:
 8005060:	4801      	ldr	r0, [pc, #4]	; (8005068 <__sinit_lock_acquire+0x8>)
 8005062:	f000 b8b9 	b.w	80051d8 <__retarget_lock_acquire_recursive>
 8005066:	bf00      	nop
 8005068:	20001327 	.word	0x20001327

0800506c <__sinit_lock_release>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__sinit_lock_release+0x8>)
 800506e:	f000 b8b4 	b.w	80051da <__retarget_lock_release_recursive>
 8005072:	bf00      	nop
 8005074:	20001327 	.word	0x20001327

08005078 <__sinit>:
 8005078:	b510      	push	{r4, lr}
 800507a:	4604      	mov	r4, r0
 800507c:	f7ff fff0 	bl	8005060 <__sinit_lock_acquire>
 8005080:	69a3      	ldr	r3, [r4, #24]
 8005082:	b11b      	cbz	r3, 800508c <__sinit+0x14>
 8005084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005088:	f7ff bff0 	b.w	800506c <__sinit_lock_release>
 800508c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005090:	6523      	str	r3, [r4, #80]	; 0x50
 8005092:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <__sinit+0x68>)
 8005094:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <__sinit+0x6c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	62a2      	str	r2, [r4, #40]	; 0x28
 800509a:	42a3      	cmp	r3, r4
 800509c:	bf04      	itt	eq
 800509e:	2301      	moveq	r3, #1
 80050a0:	61a3      	streq	r3, [r4, #24]
 80050a2:	4620      	mov	r0, r4
 80050a4:	f000 f820 	bl	80050e8 <__sfp>
 80050a8:	6060      	str	r0, [r4, #4]
 80050aa:	4620      	mov	r0, r4
 80050ac:	f000 f81c 	bl	80050e8 <__sfp>
 80050b0:	60a0      	str	r0, [r4, #8]
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f818 	bl	80050e8 <__sfp>
 80050b8:	2200      	movs	r2, #0
 80050ba:	60e0      	str	r0, [r4, #12]
 80050bc:	2104      	movs	r1, #4
 80050be:	6860      	ldr	r0, [r4, #4]
 80050c0:	f7ff ff82 	bl	8004fc8 <std>
 80050c4:	68a0      	ldr	r0, [r4, #8]
 80050c6:	2201      	movs	r2, #1
 80050c8:	2109      	movs	r1, #9
 80050ca:	f7ff ff7d 	bl	8004fc8 <std>
 80050ce:	68e0      	ldr	r0, [r4, #12]
 80050d0:	2202      	movs	r2, #2
 80050d2:	2112      	movs	r1, #18
 80050d4:	f7ff ff78 	bl	8004fc8 <std>
 80050d8:	2301      	movs	r3, #1
 80050da:	61a3      	str	r3, [r4, #24]
 80050dc:	e7d2      	b.n	8005084 <__sinit+0xc>
 80050de:	bf00      	nop
 80050e0:	080069a0 	.word	0x080069a0
 80050e4:	08005011 	.word	0x08005011

080050e8 <__sfp>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	4607      	mov	r7, r0
 80050ec:	f7ff ffac 	bl	8005048 <__sfp_lock_acquire>
 80050f0:	4b1e      	ldr	r3, [pc, #120]	; (800516c <__sfp+0x84>)
 80050f2:	681e      	ldr	r6, [r3, #0]
 80050f4:	69b3      	ldr	r3, [r6, #24]
 80050f6:	b913      	cbnz	r3, 80050fe <__sfp+0x16>
 80050f8:	4630      	mov	r0, r6
 80050fa:	f7ff ffbd 	bl	8005078 <__sinit>
 80050fe:	3648      	adds	r6, #72	; 0x48
 8005100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005104:	3b01      	subs	r3, #1
 8005106:	d503      	bpl.n	8005110 <__sfp+0x28>
 8005108:	6833      	ldr	r3, [r6, #0]
 800510a:	b30b      	cbz	r3, 8005150 <__sfp+0x68>
 800510c:	6836      	ldr	r6, [r6, #0]
 800510e:	e7f7      	b.n	8005100 <__sfp+0x18>
 8005110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005114:	b9d5      	cbnz	r5, 800514c <__sfp+0x64>
 8005116:	4b16      	ldr	r3, [pc, #88]	; (8005170 <__sfp+0x88>)
 8005118:	60e3      	str	r3, [r4, #12]
 800511a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800511e:	6665      	str	r5, [r4, #100]	; 0x64
 8005120:	f000 f859 	bl	80051d6 <__retarget_lock_init_recursive>
 8005124:	f7ff ff96 	bl	8005054 <__sfp_lock_release>
 8005128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800512c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005130:	6025      	str	r5, [r4, #0]
 8005132:	61a5      	str	r5, [r4, #24]
 8005134:	2208      	movs	r2, #8
 8005136:	4629      	mov	r1, r5
 8005138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800513c:	f7ff fc3e 	bl	80049bc <memset>
 8005140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005148:	4620      	mov	r0, r4
 800514a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800514c:	3468      	adds	r4, #104	; 0x68
 800514e:	e7d9      	b.n	8005104 <__sfp+0x1c>
 8005150:	2104      	movs	r1, #4
 8005152:	4638      	mov	r0, r7
 8005154:	f7ff ff62 	bl	800501c <__sfmoreglue>
 8005158:	4604      	mov	r4, r0
 800515a:	6030      	str	r0, [r6, #0]
 800515c:	2800      	cmp	r0, #0
 800515e:	d1d5      	bne.n	800510c <__sfp+0x24>
 8005160:	f7ff ff78 	bl	8005054 <__sfp_lock_release>
 8005164:	230c      	movs	r3, #12
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	e7ee      	b.n	8005148 <__sfp+0x60>
 800516a:	bf00      	nop
 800516c:	080069a0 	.word	0x080069a0
 8005170:	ffff0001 	.word	0xffff0001

08005174 <fiprintf>:
 8005174:	b40e      	push	{r1, r2, r3}
 8005176:	b503      	push	{r0, r1, lr}
 8005178:	4601      	mov	r1, r0
 800517a:	ab03      	add	r3, sp, #12
 800517c:	4805      	ldr	r0, [pc, #20]	; (8005194 <fiprintf+0x20>)
 800517e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005182:	6800      	ldr	r0, [r0, #0]
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	f000 fac5 	bl	8005714 <_vfiprintf_r>
 800518a:	b002      	add	sp, #8
 800518c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005190:	b003      	add	sp, #12
 8005192:	4770      	bx	lr
 8005194:	2000003c 	.word	0x2000003c

08005198 <_fwalk_reent>:
 8005198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800519c:	4606      	mov	r6, r0
 800519e:	4688      	mov	r8, r1
 80051a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051a4:	2700      	movs	r7, #0
 80051a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051aa:	f1b9 0901 	subs.w	r9, r9, #1
 80051ae:	d505      	bpl.n	80051bc <_fwalk_reent+0x24>
 80051b0:	6824      	ldr	r4, [r4, #0]
 80051b2:	2c00      	cmp	r4, #0
 80051b4:	d1f7      	bne.n	80051a6 <_fwalk_reent+0xe>
 80051b6:	4638      	mov	r0, r7
 80051b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051bc:	89ab      	ldrh	r3, [r5, #12]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d907      	bls.n	80051d2 <_fwalk_reent+0x3a>
 80051c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051c6:	3301      	adds	r3, #1
 80051c8:	d003      	beq.n	80051d2 <_fwalk_reent+0x3a>
 80051ca:	4629      	mov	r1, r5
 80051cc:	4630      	mov	r0, r6
 80051ce:	47c0      	blx	r8
 80051d0:	4307      	orrs	r7, r0
 80051d2:	3568      	adds	r5, #104	; 0x68
 80051d4:	e7e9      	b.n	80051aa <_fwalk_reent+0x12>

080051d6 <__retarget_lock_init_recursive>:
 80051d6:	4770      	bx	lr

080051d8 <__retarget_lock_acquire_recursive>:
 80051d8:	4770      	bx	lr

080051da <__retarget_lock_release_recursive>:
 80051da:	4770      	bx	lr

080051dc <__swhatbuf_r>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	460e      	mov	r6, r1
 80051e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e4:	2900      	cmp	r1, #0
 80051e6:	b096      	sub	sp, #88	; 0x58
 80051e8:	4614      	mov	r4, r2
 80051ea:	461d      	mov	r5, r3
 80051ec:	da07      	bge.n	80051fe <__swhatbuf_r+0x22>
 80051ee:	2300      	movs	r3, #0
 80051f0:	602b      	str	r3, [r5, #0]
 80051f2:	89b3      	ldrh	r3, [r6, #12]
 80051f4:	061a      	lsls	r2, r3, #24
 80051f6:	d410      	bmi.n	800521a <__swhatbuf_r+0x3e>
 80051f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051fc:	e00e      	b.n	800521c <__swhatbuf_r+0x40>
 80051fe:	466a      	mov	r2, sp
 8005200:	f000 fdca 	bl	8005d98 <_fstat_r>
 8005204:	2800      	cmp	r0, #0
 8005206:	dbf2      	blt.n	80051ee <__swhatbuf_r+0x12>
 8005208:	9a01      	ldr	r2, [sp, #4]
 800520a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800520e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005212:	425a      	negs	r2, r3
 8005214:	415a      	adcs	r2, r3
 8005216:	602a      	str	r2, [r5, #0]
 8005218:	e7ee      	b.n	80051f8 <__swhatbuf_r+0x1c>
 800521a:	2340      	movs	r3, #64	; 0x40
 800521c:	2000      	movs	r0, #0
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	b016      	add	sp, #88	; 0x58
 8005222:	bd70      	pop	{r4, r5, r6, pc}

08005224 <__smakebuf_r>:
 8005224:	898b      	ldrh	r3, [r1, #12]
 8005226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005228:	079d      	lsls	r5, r3, #30
 800522a:	4606      	mov	r6, r0
 800522c:	460c      	mov	r4, r1
 800522e:	d507      	bpl.n	8005240 <__smakebuf_r+0x1c>
 8005230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	6123      	str	r3, [r4, #16]
 8005238:	2301      	movs	r3, #1
 800523a:	6163      	str	r3, [r4, #20]
 800523c:	b002      	add	sp, #8
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	ab01      	add	r3, sp, #4
 8005242:	466a      	mov	r2, sp
 8005244:	f7ff ffca 	bl	80051dc <__swhatbuf_r>
 8005248:	9900      	ldr	r1, [sp, #0]
 800524a:	4605      	mov	r5, r0
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f881 	bl	8005354 <_malloc_r>
 8005252:	b948      	cbnz	r0, 8005268 <__smakebuf_r+0x44>
 8005254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005258:	059a      	lsls	r2, r3, #22
 800525a:	d4ef      	bmi.n	800523c <__smakebuf_r+0x18>
 800525c:	f023 0303 	bic.w	r3, r3, #3
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	e7e3      	b.n	8005230 <__smakebuf_r+0xc>
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <__smakebuf_r+0x7c>)
 800526a:	62b3      	str	r3, [r6, #40]	; 0x28
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	6020      	str	r0, [r4, #0]
 8005270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005274:	81a3      	strh	r3, [r4, #12]
 8005276:	9b00      	ldr	r3, [sp, #0]
 8005278:	6163      	str	r3, [r4, #20]
 800527a:	9b01      	ldr	r3, [sp, #4]
 800527c:	6120      	str	r0, [r4, #16]
 800527e:	b15b      	cbz	r3, 8005298 <__smakebuf_r+0x74>
 8005280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005284:	4630      	mov	r0, r6
 8005286:	f000 fd99 	bl	8005dbc <_isatty_r>
 800528a:	b128      	cbz	r0, 8005298 <__smakebuf_r+0x74>
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	89a0      	ldrh	r0, [r4, #12]
 800529a:	4305      	orrs	r5, r0
 800529c:	81a5      	strh	r5, [r4, #12]
 800529e:	e7cd      	b.n	800523c <__smakebuf_r+0x18>
 80052a0:	08005011 	.word	0x08005011

080052a4 <malloc>:
 80052a4:	4b02      	ldr	r3, [pc, #8]	; (80052b0 <malloc+0xc>)
 80052a6:	4601      	mov	r1, r0
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	f000 b853 	b.w	8005354 <_malloc_r>
 80052ae:	bf00      	nop
 80052b0:	2000003c 	.word	0x2000003c

080052b4 <_free_r>:
 80052b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052b6:	2900      	cmp	r1, #0
 80052b8:	d048      	beq.n	800534c <_free_r+0x98>
 80052ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052be:	9001      	str	r0, [sp, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f1a1 0404 	sub.w	r4, r1, #4
 80052c6:	bfb8      	it	lt
 80052c8:	18e4      	addlt	r4, r4, r3
 80052ca:	f000 fdb3 	bl	8005e34 <__malloc_lock>
 80052ce:	4a20      	ldr	r2, [pc, #128]	; (8005350 <_free_r+0x9c>)
 80052d0:	9801      	ldr	r0, [sp, #4]
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	4615      	mov	r5, r2
 80052d6:	b933      	cbnz	r3, 80052e6 <_free_r+0x32>
 80052d8:	6063      	str	r3, [r4, #4]
 80052da:	6014      	str	r4, [r2, #0]
 80052dc:	b003      	add	sp, #12
 80052de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052e2:	f000 bdad 	b.w	8005e40 <__malloc_unlock>
 80052e6:	42a3      	cmp	r3, r4
 80052e8:	d90b      	bls.n	8005302 <_free_r+0x4e>
 80052ea:	6821      	ldr	r1, [r4, #0]
 80052ec:	1862      	adds	r2, r4, r1
 80052ee:	4293      	cmp	r3, r2
 80052f0:	bf04      	itt	eq
 80052f2:	681a      	ldreq	r2, [r3, #0]
 80052f4:	685b      	ldreq	r3, [r3, #4]
 80052f6:	6063      	str	r3, [r4, #4]
 80052f8:	bf04      	itt	eq
 80052fa:	1852      	addeq	r2, r2, r1
 80052fc:	6022      	streq	r2, [r4, #0]
 80052fe:	602c      	str	r4, [r5, #0]
 8005300:	e7ec      	b.n	80052dc <_free_r+0x28>
 8005302:	461a      	mov	r2, r3
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	b10b      	cbz	r3, 800530c <_free_r+0x58>
 8005308:	42a3      	cmp	r3, r4
 800530a:	d9fa      	bls.n	8005302 <_free_r+0x4e>
 800530c:	6811      	ldr	r1, [r2, #0]
 800530e:	1855      	adds	r5, r2, r1
 8005310:	42a5      	cmp	r5, r4
 8005312:	d10b      	bne.n	800532c <_free_r+0x78>
 8005314:	6824      	ldr	r4, [r4, #0]
 8005316:	4421      	add	r1, r4
 8005318:	1854      	adds	r4, r2, r1
 800531a:	42a3      	cmp	r3, r4
 800531c:	6011      	str	r1, [r2, #0]
 800531e:	d1dd      	bne.n	80052dc <_free_r+0x28>
 8005320:	681c      	ldr	r4, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	6053      	str	r3, [r2, #4]
 8005326:	4421      	add	r1, r4
 8005328:	6011      	str	r1, [r2, #0]
 800532a:	e7d7      	b.n	80052dc <_free_r+0x28>
 800532c:	d902      	bls.n	8005334 <_free_r+0x80>
 800532e:	230c      	movs	r3, #12
 8005330:	6003      	str	r3, [r0, #0]
 8005332:	e7d3      	b.n	80052dc <_free_r+0x28>
 8005334:	6825      	ldr	r5, [r4, #0]
 8005336:	1961      	adds	r1, r4, r5
 8005338:	428b      	cmp	r3, r1
 800533a:	bf04      	itt	eq
 800533c:	6819      	ldreq	r1, [r3, #0]
 800533e:	685b      	ldreq	r3, [r3, #4]
 8005340:	6063      	str	r3, [r4, #4]
 8005342:	bf04      	itt	eq
 8005344:	1949      	addeq	r1, r1, r5
 8005346:	6021      	streq	r1, [r4, #0]
 8005348:	6054      	str	r4, [r2, #4]
 800534a:	e7c7      	b.n	80052dc <_free_r+0x28>
 800534c:	b003      	add	sp, #12
 800534e:	bd30      	pop	{r4, r5, pc}
 8005350:	200008e4 	.word	0x200008e4

08005354 <_malloc_r>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	1ccd      	adds	r5, r1, #3
 8005358:	f025 0503 	bic.w	r5, r5, #3
 800535c:	3508      	adds	r5, #8
 800535e:	2d0c      	cmp	r5, #12
 8005360:	bf38      	it	cc
 8005362:	250c      	movcc	r5, #12
 8005364:	2d00      	cmp	r5, #0
 8005366:	4606      	mov	r6, r0
 8005368:	db01      	blt.n	800536e <_malloc_r+0x1a>
 800536a:	42a9      	cmp	r1, r5
 800536c:	d903      	bls.n	8005376 <_malloc_r+0x22>
 800536e:	230c      	movs	r3, #12
 8005370:	6033      	str	r3, [r6, #0]
 8005372:	2000      	movs	r0, #0
 8005374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005376:	f000 fd5d 	bl	8005e34 <__malloc_lock>
 800537a:	4921      	ldr	r1, [pc, #132]	; (8005400 <_malloc_r+0xac>)
 800537c:	680a      	ldr	r2, [r1, #0]
 800537e:	4614      	mov	r4, r2
 8005380:	b99c      	cbnz	r4, 80053aa <_malloc_r+0x56>
 8005382:	4f20      	ldr	r7, [pc, #128]	; (8005404 <_malloc_r+0xb0>)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	b923      	cbnz	r3, 8005392 <_malloc_r+0x3e>
 8005388:	4621      	mov	r1, r4
 800538a:	4630      	mov	r0, r6
 800538c:	f000 fc86 	bl	8005c9c <_sbrk_r>
 8005390:	6038      	str	r0, [r7, #0]
 8005392:	4629      	mov	r1, r5
 8005394:	4630      	mov	r0, r6
 8005396:	f000 fc81 	bl	8005c9c <_sbrk_r>
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	d123      	bne.n	80053e6 <_malloc_r+0x92>
 800539e:	230c      	movs	r3, #12
 80053a0:	6033      	str	r3, [r6, #0]
 80053a2:	4630      	mov	r0, r6
 80053a4:	f000 fd4c 	bl	8005e40 <__malloc_unlock>
 80053a8:	e7e3      	b.n	8005372 <_malloc_r+0x1e>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	1b5b      	subs	r3, r3, r5
 80053ae:	d417      	bmi.n	80053e0 <_malloc_r+0x8c>
 80053b0:	2b0b      	cmp	r3, #11
 80053b2:	d903      	bls.n	80053bc <_malloc_r+0x68>
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	441c      	add	r4, r3
 80053b8:	6025      	str	r5, [r4, #0]
 80053ba:	e004      	b.n	80053c6 <_malloc_r+0x72>
 80053bc:	6863      	ldr	r3, [r4, #4]
 80053be:	42a2      	cmp	r2, r4
 80053c0:	bf0c      	ite	eq
 80053c2:	600b      	streq	r3, [r1, #0]
 80053c4:	6053      	strne	r3, [r2, #4]
 80053c6:	4630      	mov	r0, r6
 80053c8:	f000 fd3a 	bl	8005e40 <__malloc_unlock>
 80053cc:	f104 000b 	add.w	r0, r4, #11
 80053d0:	1d23      	adds	r3, r4, #4
 80053d2:	f020 0007 	bic.w	r0, r0, #7
 80053d6:	1ac2      	subs	r2, r0, r3
 80053d8:	d0cc      	beq.n	8005374 <_malloc_r+0x20>
 80053da:	1a1b      	subs	r3, r3, r0
 80053dc:	50a3      	str	r3, [r4, r2]
 80053de:	e7c9      	b.n	8005374 <_malloc_r+0x20>
 80053e0:	4622      	mov	r2, r4
 80053e2:	6864      	ldr	r4, [r4, #4]
 80053e4:	e7cc      	b.n	8005380 <_malloc_r+0x2c>
 80053e6:	1cc4      	adds	r4, r0, #3
 80053e8:	f024 0403 	bic.w	r4, r4, #3
 80053ec:	42a0      	cmp	r0, r4
 80053ee:	d0e3      	beq.n	80053b8 <_malloc_r+0x64>
 80053f0:	1a21      	subs	r1, r4, r0
 80053f2:	4630      	mov	r0, r6
 80053f4:	f000 fc52 	bl	8005c9c <_sbrk_r>
 80053f8:	3001      	adds	r0, #1
 80053fa:	d1dd      	bne.n	80053b8 <_malloc_r+0x64>
 80053fc:	e7cf      	b.n	800539e <_malloc_r+0x4a>
 80053fe:	bf00      	nop
 8005400:	200008e4 	.word	0x200008e4
 8005404:	200008e8 	.word	0x200008e8

08005408 <__ssputs_r>:
 8005408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	688e      	ldr	r6, [r1, #8]
 800540e:	429e      	cmp	r6, r3
 8005410:	4682      	mov	sl, r0
 8005412:	460c      	mov	r4, r1
 8005414:	4690      	mov	r8, r2
 8005416:	461f      	mov	r7, r3
 8005418:	d838      	bhi.n	800548c <__ssputs_r+0x84>
 800541a:	898a      	ldrh	r2, [r1, #12]
 800541c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005420:	d032      	beq.n	8005488 <__ssputs_r+0x80>
 8005422:	6825      	ldr	r5, [r4, #0]
 8005424:	6909      	ldr	r1, [r1, #16]
 8005426:	eba5 0901 	sub.w	r9, r5, r1
 800542a:	6965      	ldr	r5, [r4, #20]
 800542c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005430:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005434:	3301      	adds	r3, #1
 8005436:	444b      	add	r3, r9
 8005438:	106d      	asrs	r5, r5, #1
 800543a:	429d      	cmp	r5, r3
 800543c:	bf38      	it	cc
 800543e:	461d      	movcc	r5, r3
 8005440:	0553      	lsls	r3, r2, #21
 8005442:	d531      	bpl.n	80054a8 <__ssputs_r+0xa0>
 8005444:	4629      	mov	r1, r5
 8005446:	f7ff ff85 	bl	8005354 <_malloc_r>
 800544a:	4606      	mov	r6, r0
 800544c:	b950      	cbnz	r0, 8005464 <__ssputs_r+0x5c>
 800544e:	230c      	movs	r3, #12
 8005450:	f8ca 3000 	str.w	r3, [sl]
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800545a:	81a3      	strh	r3, [r4, #12]
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005464:	6921      	ldr	r1, [r4, #16]
 8005466:	464a      	mov	r2, r9
 8005468:	f7ff fa9a 	bl	80049a0 <memcpy>
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005476:	81a3      	strh	r3, [r4, #12]
 8005478:	6126      	str	r6, [r4, #16]
 800547a:	6165      	str	r5, [r4, #20]
 800547c:	444e      	add	r6, r9
 800547e:	eba5 0509 	sub.w	r5, r5, r9
 8005482:	6026      	str	r6, [r4, #0]
 8005484:	60a5      	str	r5, [r4, #8]
 8005486:	463e      	mov	r6, r7
 8005488:	42be      	cmp	r6, r7
 800548a:	d900      	bls.n	800548e <__ssputs_r+0x86>
 800548c:	463e      	mov	r6, r7
 800548e:	4632      	mov	r2, r6
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	4641      	mov	r1, r8
 8005494:	f000 fcb4 	bl	8005e00 <memmove>
 8005498:	68a3      	ldr	r3, [r4, #8]
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	1b9b      	subs	r3, r3, r6
 800549e:	4432      	add	r2, r6
 80054a0:	60a3      	str	r3, [r4, #8]
 80054a2:	6022      	str	r2, [r4, #0]
 80054a4:	2000      	movs	r0, #0
 80054a6:	e7db      	b.n	8005460 <__ssputs_r+0x58>
 80054a8:	462a      	mov	r2, r5
 80054aa:	f000 fccf 	bl	8005e4c <_realloc_r>
 80054ae:	4606      	mov	r6, r0
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d1e1      	bne.n	8005478 <__ssputs_r+0x70>
 80054b4:	6921      	ldr	r1, [r4, #16]
 80054b6:	4650      	mov	r0, sl
 80054b8:	f7ff fefc 	bl	80052b4 <_free_r>
 80054bc:	e7c7      	b.n	800544e <__ssputs_r+0x46>
	...

080054c0 <_svfiprintf_r>:
 80054c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	4698      	mov	r8, r3
 80054c6:	898b      	ldrh	r3, [r1, #12]
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	b09d      	sub	sp, #116	; 0x74
 80054cc:	4607      	mov	r7, r0
 80054ce:	460d      	mov	r5, r1
 80054d0:	4614      	mov	r4, r2
 80054d2:	d50e      	bpl.n	80054f2 <_svfiprintf_r+0x32>
 80054d4:	690b      	ldr	r3, [r1, #16]
 80054d6:	b963      	cbnz	r3, 80054f2 <_svfiprintf_r+0x32>
 80054d8:	2140      	movs	r1, #64	; 0x40
 80054da:	f7ff ff3b 	bl	8005354 <_malloc_r>
 80054de:	6028      	str	r0, [r5, #0]
 80054e0:	6128      	str	r0, [r5, #16]
 80054e2:	b920      	cbnz	r0, 80054ee <_svfiprintf_r+0x2e>
 80054e4:	230c      	movs	r3, #12
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	e0d1      	b.n	8005692 <_svfiprintf_r+0x1d2>
 80054ee:	2340      	movs	r3, #64	; 0x40
 80054f0:	616b      	str	r3, [r5, #20]
 80054f2:	2300      	movs	r3, #0
 80054f4:	9309      	str	r3, [sp, #36]	; 0x24
 80054f6:	2320      	movs	r3, #32
 80054f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005500:	2330      	movs	r3, #48	; 0x30
 8005502:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056ac <_svfiprintf_r+0x1ec>
 8005506:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800550a:	f04f 0901 	mov.w	r9, #1
 800550e:	4623      	mov	r3, r4
 8005510:	469a      	mov	sl, r3
 8005512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005516:	b10a      	cbz	r2, 800551c <_svfiprintf_r+0x5c>
 8005518:	2a25      	cmp	r2, #37	; 0x25
 800551a:	d1f9      	bne.n	8005510 <_svfiprintf_r+0x50>
 800551c:	ebba 0b04 	subs.w	fp, sl, r4
 8005520:	d00b      	beq.n	800553a <_svfiprintf_r+0x7a>
 8005522:	465b      	mov	r3, fp
 8005524:	4622      	mov	r2, r4
 8005526:	4629      	mov	r1, r5
 8005528:	4638      	mov	r0, r7
 800552a:	f7ff ff6d 	bl	8005408 <__ssputs_r>
 800552e:	3001      	adds	r0, #1
 8005530:	f000 80aa 	beq.w	8005688 <_svfiprintf_r+0x1c8>
 8005534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005536:	445a      	add	r2, fp
 8005538:	9209      	str	r2, [sp, #36]	; 0x24
 800553a:	f89a 3000 	ldrb.w	r3, [sl]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80a2 	beq.w	8005688 <_svfiprintf_r+0x1c8>
 8005544:	2300      	movs	r3, #0
 8005546:	f04f 32ff 	mov.w	r2, #4294967295
 800554a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800554e:	f10a 0a01 	add.w	sl, sl, #1
 8005552:	9304      	str	r3, [sp, #16]
 8005554:	9307      	str	r3, [sp, #28]
 8005556:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800555a:	931a      	str	r3, [sp, #104]	; 0x68
 800555c:	4654      	mov	r4, sl
 800555e:	2205      	movs	r2, #5
 8005560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005564:	4851      	ldr	r0, [pc, #324]	; (80056ac <_svfiprintf_r+0x1ec>)
 8005566:	f7fa fe3b 	bl	80001e0 <memchr>
 800556a:	9a04      	ldr	r2, [sp, #16]
 800556c:	b9d8      	cbnz	r0, 80055a6 <_svfiprintf_r+0xe6>
 800556e:	06d0      	lsls	r0, r2, #27
 8005570:	bf44      	itt	mi
 8005572:	2320      	movmi	r3, #32
 8005574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005578:	0711      	lsls	r1, r2, #28
 800557a:	bf44      	itt	mi
 800557c:	232b      	movmi	r3, #43	; 0x2b
 800557e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005582:	f89a 3000 	ldrb.w	r3, [sl]
 8005586:	2b2a      	cmp	r3, #42	; 0x2a
 8005588:	d015      	beq.n	80055b6 <_svfiprintf_r+0xf6>
 800558a:	9a07      	ldr	r2, [sp, #28]
 800558c:	4654      	mov	r4, sl
 800558e:	2000      	movs	r0, #0
 8005590:	f04f 0c0a 	mov.w	ip, #10
 8005594:	4621      	mov	r1, r4
 8005596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800559a:	3b30      	subs	r3, #48	; 0x30
 800559c:	2b09      	cmp	r3, #9
 800559e:	d94e      	bls.n	800563e <_svfiprintf_r+0x17e>
 80055a0:	b1b0      	cbz	r0, 80055d0 <_svfiprintf_r+0x110>
 80055a2:	9207      	str	r2, [sp, #28]
 80055a4:	e014      	b.n	80055d0 <_svfiprintf_r+0x110>
 80055a6:	eba0 0308 	sub.w	r3, r0, r8
 80055aa:	fa09 f303 	lsl.w	r3, r9, r3
 80055ae:	4313      	orrs	r3, r2
 80055b0:	9304      	str	r3, [sp, #16]
 80055b2:	46a2      	mov	sl, r4
 80055b4:	e7d2      	b.n	800555c <_svfiprintf_r+0x9c>
 80055b6:	9b03      	ldr	r3, [sp, #12]
 80055b8:	1d19      	adds	r1, r3, #4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	9103      	str	r1, [sp, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bfbb      	ittet	lt
 80055c2:	425b      	neglt	r3, r3
 80055c4:	f042 0202 	orrlt.w	r2, r2, #2
 80055c8:	9307      	strge	r3, [sp, #28]
 80055ca:	9307      	strlt	r3, [sp, #28]
 80055cc:	bfb8      	it	lt
 80055ce:	9204      	strlt	r2, [sp, #16]
 80055d0:	7823      	ldrb	r3, [r4, #0]
 80055d2:	2b2e      	cmp	r3, #46	; 0x2e
 80055d4:	d10c      	bne.n	80055f0 <_svfiprintf_r+0x130>
 80055d6:	7863      	ldrb	r3, [r4, #1]
 80055d8:	2b2a      	cmp	r3, #42	; 0x2a
 80055da:	d135      	bne.n	8005648 <_svfiprintf_r+0x188>
 80055dc:	9b03      	ldr	r3, [sp, #12]
 80055de:	1d1a      	adds	r2, r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	9203      	str	r2, [sp, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bfb8      	it	lt
 80055e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80055ec:	3402      	adds	r4, #2
 80055ee:	9305      	str	r3, [sp, #20]
 80055f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056bc <_svfiprintf_r+0x1fc>
 80055f4:	7821      	ldrb	r1, [r4, #0]
 80055f6:	2203      	movs	r2, #3
 80055f8:	4650      	mov	r0, sl
 80055fa:	f7fa fdf1 	bl	80001e0 <memchr>
 80055fe:	b140      	cbz	r0, 8005612 <_svfiprintf_r+0x152>
 8005600:	2340      	movs	r3, #64	; 0x40
 8005602:	eba0 000a 	sub.w	r0, r0, sl
 8005606:	fa03 f000 	lsl.w	r0, r3, r0
 800560a:	9b04      	ldr	r3, [sp, #16]
 800560c:	4303      	orrs	r3, r0
 800560e:	3401      	adds	r4, #1
 8005610:	9304      	str	r3, [sp, #16]
 8005612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005616:	4826      	ldr	r0, [pc, #152]	; (80056b0 <_svfiprintf_r+0x1f0>)
 8005618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800561c:	2206      	movs	r2, #6
 800561e:	f7fa fddf 	bl	80001e0 <memchr>
 8005622:	2800      	cmp	r0, #0
 8005624:	d038      	beq.n	8005698 <_svfiprintf_r+0x1d8>
 8005626:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <_svfiprintf_r+0x1f4>)
 8005628:	bb1b      	cbnz	r3, 8005672 <_svfiprintf_r+0x1b2>
 800562a:	9b03      	ldr	r3, [sp, #12]
 800562c:	3307      	adds	r3, #7
 800562e:	f023 0307 	bic.w	r3, r3, #7
 8005632:	3308      	adds	r3, #8
 8005634:	9303      	str	r3, [sp, #12]
 8005636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005638:	4433      	add	r3, r6
 800563a:	9309      	str	r3, [sp, #36]	; 0x24
 800563c:	e767      	b.n	800550e <_svfiprintf_r+0x4e>
 800563e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005642:	460c      	mov	r4, r1
 8005644:	2001      	movs	r0, #1
 8005646:	e7a5      	b.n	8005594 <_svfiprintf_r+0xd4>
 8005648:	2300      	movs	r3, #0
 800564a:	3401      	adds	r4, #1
 800564c:	9305      	str	r3, [sp, #20]
 800564e:	4619      	mov	r1, r3
 8005650:	f04f 0c0a 	mov.w	ip, #10
 8005654:	4620      	mov	r0, r4
 8005656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800565a:	3a30      	subs	r2, #48	; 0x30
 800565c:	2a09      	cmp	r2, #9
 800565e:	d903      	bls.n	8005668 <_svfiprintf_r+0x1a8>
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0c5      	beq.n	80055f0 <_svfiprintf_r+0x130>
 8005664:	9105      	str	r1, [sp, #20]
 8005666:	e7c3      	b.n	80055f0 <_svfiprintf_r+0x130>
 8005668:	fb0c 2101 	mla	r1, ip, r1, r2
 800566c:	4604      	mov	r4, r0
 800566e:	2301      	movs	r3, #1
 8005670:	e7f0      	b.n	8005654 <_svfiprintf_r+0x194>
 8005672:	ab03      	add	r3, sp, #12
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	462a      	mov	r2, r5
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <_svfiprintf_r+0x1f8>)
 800567a:	a904      	add	r1, sp, #16
 800567c:	4638      	mov	r0, r7
 800567e:	f3af 8000 	nop.w
 8005682:	1c42      	adds	r2, r0, #1
 8005684:	4606      	mov	r6, r0
 8005686:	d1d6      	bne.n	8005636 <_svfiprintf_r+0x176>
 8005688:	89ab      	ldrh	r3, [r5, #12]
 800568a:	065b      	lsls	r3, r3, #25
 800568c:	f53f af2c 	bmi.w	80054e8 <_svfiprintf_r+0x28>
 8005690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005692:	b01d      	add	sp, #116	; 0x74
 8005694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005698:	ab03      	add	r3, sp, #12
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	462a      	mov	r2, r5
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <_svfiprintf_r+0x1f8>)
 80056a0:	a904      	add	r1, sp, #16
 80056a2:	4638      	mov	r0, r7
 80056a4:	f000 f9d4 	bl	8005a50 <_printf_i>
 80056a8:	e7eb      	b.n	8005682 <_svfiprintf_r+0x1c2>
 80056aa:	bf00      	nop
 80056ac:	08006ab8 	.word	0x08006ab8
 80056b0:	08006ac2 	.word	0x08006ac2
 80056b4:	00000000 	.word	0x00000000
 80056b8:	08005409 	.word	0x08005409
 80056bc:	08006abe 	.word	0x08006abe

080056c0 <__sfputc_r>:
 80056c0:	6893      	ldr	r3, [r2, #8]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	b410      	push	{r4}
 80056c8:	6093      	str	r3, [r2, #8]
 80056ca:	da08      	bge.n	80056de <__sfputc_r+0x1e>
 80056cc:	6994      	ldr	r4, [r2, #24]
 80056ce:	42a3      	cmp	r3, r4
 80056d0:	db01      	blt.n	80056d6 <__sfputc_r+0x16>
 80056d2:	290a      	cmp	r1, #10
 80056d4:	d103      	bne.n	80056de <__sfputc_r+0x1e>
 80056d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056da:	f7ff bad5 	b.w	8004c88 <__swbuf_r>
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	1c58      	adds	r0, r3, #1
 80056e2:	6010      	str	r0, [r2, #0]
 80056e4:	7019      	strb	r1, [r3, #0]
 80056e6:	4608      	mov	r0, r1
 80056e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <__sfputs_r>:
 80056ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f0:	4606      	mov	r6, r0
 80056f2:	460f      	mov	r7, r1
 80056f4:	4614      	mov	r4, r2
 80056f6:	18d5      	adds	r5, r2, r3
 80056f8:	42ac      	cmp	r4, r5
 80056fa:	d101      	bne.n	8005700 <__sfputs_r+0x12>
 80056fc:	2000      	movs	r0, #0
 80056fe:	e007      	b.n	8005710 <__sfputs_r+0x22>
 8005700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005704:	463a      	mov	r2, r7
 8005706:	4630      	mov	r0, r6
 8005708:	f7ff ffda 	bl	80056c0 <__sfputc_r>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d1f3      	bne.n	80056f8 <__sfputs_r+0xa>
 8005710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005714 <_vfiprintf_r>:
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	460d      	mov	r5, r1
 800571a:	b09d      	sub	sp, #116	; 0x74
 800571c:	4614      	mov	r4, r2
 800571e:	4698      	mov	r8, r3
 8005720:	4606      	mov	r6, r0
 8005722:	b118      	cbz	r0, 800572c <_vfiprintf_r+0x18>
 8005724:	6983      	ldr	r3, [r0, #24]
 8005726:	b90b      	cbnz	r3, 800572c <_vfiprintf_r+0x18>
 8005728:	f7ff fca6 	bl	8005078 <__sinit>
 800572c:	4b89      	ldr	r3, [pc, #548]	; (8005954 <_vfiprintf_r+0x240>)
 800572e:	429d      	cmp	r5, r3
 8005730:	d11b      	bne.n	800576a <_vfiprintf_r+0x56>
 8005732:	6875      	ldr	r5, [r6, #4]
 8005734:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005736:	07d9      	lsls	r1, r3, #31
 8005738:	d405      	bmi.n	8005746 <_vfiprintf_r+0x32>
 800573a:	89ab      	ldrh	r3, [r5, #12]
 800573c:	059a      	lsls	r2, r3, #22
 800573e:	d402      	bmi.n	8005746 <_vfiprintf_r+0x32>
 8005740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005742:	f7ff fd49 	bl	80051d8 <__retarget_lock_acquire_recursive>
 8005746:	89ab      	ldrh	r3, [r5, #12]
 8005748:	071b      	lsls	r3, r3, #28
 800574a:	d501      	bpl.n	8005750 <_vfiprintf_r+0x3c>
 800574c:	692b      	ldr	r3, [r5, #16]
 800574e:	b9eb      	cbnz	r3, 800578c <_vfiprintf_r+0x78>
 8005750:	4629      	mov	r1, r5
 8005752:	4630      	mov	r0, r6
 8005754:	f7ff faea 	bl	8004d2c <__swsetup_r>
 8005758:	b1c0      	cbz	r0, 800578c <_vfiprintf_r+0x78>
 800575a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800575c:	07dc      	lsls	r4, r3, #31
 800575e:	d50e      	bpl.n	800577e <_vfiprintf_r+0x6a>
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	b01d      	add	sp, #116	; 0x74
 8005766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576a:	4b7b      	ldr	r3, [pc, #492]	; (8005958 <_vfiprintf_r+0x244>)
 800576c:	429d      	cmp	r5, r3
 800576e:	d101      	bne.n	8005774 <_vfiprintf_r+0x60>
 8005770:	68b5      	ldr	r5, [r6, #8]
 8005772:	e7df      	b.n	8005734 <_vfiprintf_r+0x20>
 8005774:	4b79      	ldr	r3, [pc, #484]	; (800595c <_vfiprintf_r+0x248>)
 8005776:	429d      	cmp	r5, r3
 8005778:	bf08      	it	eq
 800577a:	68f5      	ldreq	r5, [r6, #12]
 800577c:	e7da      	b.n	8005734 <_vfiprintf_r+0x20>
 800577e:	89ab      	ldrh	r3, [r5, #12]
 8005780:	0598      	lsls	r0, r3, #22
 8005782:	d4ed      	bmi.n	8005760 <_vfiprintf_r+0x4c>
 8005784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005786:	f7ff fd28 	bl	80051da <__retarget_lock_release_recursive>
 800578a:	e7e9      	b.n	8005760 <_vfiprintf_r+0x4c>
 800578c:	2300      	movs	r3, #0
 800578e:	9309      	str	r3, [sp, #36]	; 0x24
 8005790:	2320      	movs	r3, #32
 8005792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005796:	f8cd 800c 	str.w	r8, [sp, #12]
 800579a:	2330      	movs	r3, #48	; 0x30
 800579c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005960 <_vfiprintf_r+0x24c>
 80057a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057a4:	f04f 0901 	mov.w	r9, #1
 80057a8:	4623      	mov	r3, r4
 80057aa:	469a      	mov	sl, r3
 80057ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057b0:	b10a      	cbz	r2, 80057b6 <_vfiprintf_r+0xa2>
 80057b2:	2a25      	cmp	r2, #37	; 0x25
 80057b4:	d1f9      	bne.n	80057aa <_vfiprintf_r+0x96>
 80057b6:	ebba 0b04 	subs.w	fp, sl, r4
 80057ba:	d00b      	beq.n	80057d4 <_vfiprintf_r+0xc0>
 80057bc:	465b      	mov	r3, fp
 80057be:	4622      	mov	r2, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7ff ff93 	bl	80056ee <__sfputs_r>
 80057c8:	3001      	adds	r0, #1
 80057ca:	f000 80aa 	beq.w	8005922 <_vfiprintf_r+0x20e>
 80057ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057d0:	445a      	add	r2, fp
 80057d2:	9209      	str	r2, [sp, #36]	; 0x24
 80057d4:	f89a 3000 	ldrb.w	r3, [sl]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 80a2 	beq.w	8005922 <_vfiprintf_r+0x20e>
 80057de:	2300      	movs	r3, #0
 80057e0:	f04f 32ff 	mov.w	r2, #4294967295
 80057e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057e8:	f10a 0a01 	add.w	sl, sl, #1
 80057ec:	9304      	str	r3, [sp, #16]
 80057ee:	9307      	str	r3, [sp, #28]
 80057f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057f4:	931a      	str	r3, [sp, #104]	; 0x68
 80057f6:	4654      	mov	r4, sl
 80057f8:	2205      	movs	r2, #5
 80057fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fe:	4858      	ldr	r0, [pc, #352]	; (8005960 <_vfiprintf_r+0x24c>)
 8005800:	f7fa fcee 	bl	80001e0 <memchr>
 8005804:	9a04      	ldr	r2, [sp, #16]
 8005806:	b9d8      	cbnz	r0, 8005840 <_vfiprintf_r+0x12c>
 8005808:	06d1      	lsls	r1, r2, #27
 800580a:	bf44      	itt	mi
 800580c:	2320      	movmi	r3, #32
 800580e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005812:	0713      	lsls	r3, r2, #28
 8005814:	bf44      	itt	mi
 8005816:	232b      	movmi	r3, #43	; 0x2b
 8005818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800581c:	f89a 3000 	ldrb.w	r3, [sl]
 8005820:	2b2a      	cmp	r3, #42	; 0x2a
 8005822:	d015      	beq.n	8005850 <_vfiprintf_r+0x13c>
 8005824:	9a07      	ldr	r2, [sp, #28]
 8005826:	4654      	mov	r4, sl
 8005828:	2000      	movs	r0, #0
 800582a:	f04f 0c0a 	mov.w	ip, #10
 800582e:	4621      	mov	r1, r4
 8005830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005834:	3b30      	subs	r3, #48	; 0x30
 8005836:	2b09      	cmp	r3, #9
 8005838:	d94e      	bls.n	80058d8 <_vfiprintf_r+0x1c4>
 800583a:	b1b0      	cbz	r0, 800586a <_vfiprintf_r+0x156>
 800583c:	9207      	str	r2, [sp, #28]
 800583e:	e014      	b.n	800586a <_vfiprintf_r+0x156>
 8005840:	eba0 0308 	sub.w	r3, r0, r8
 8005844:	fa09 f303 	lsl.w	r3, r9, r3
 8005848:	4313      	orrs	r3, r2
 800584a:	9304      	str	r3, [sp, #16]
 800584c:	46a2      	mov	sl, r4
 800584e:	e7d2      	b.n	80057f6 <_vfiprintf_r+0xe2>
 8005850:	9b03      	ldr	r3, [sp, #12]
 8005852:	1d19      	adds	r1, r3, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	9103      	str	r1, [sp, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	bfbb      	ittet	lt
 800585c:	425b      	neglt	r3, r3
 800585e:	f042 0202 	orrlt.w	r2, r2, #2
 8005862:	9307      	strge	r3, [sp, #28]
 8005864:	9307      	strlt	r3, [sp, #28]
 8005866:	bfb8      	it	lt
 8005868:	9204      	strlt	r2, [sp, #16]
 800586a:	7823      	ldrb	r3, [r4, #0]
 800586c:	2b2e      	cmp	r3, #46	; 0x2e
 800586e:	d10c      	bne.n	800588a <_vfiprintf_r+0x176>
 8005870:	7863      	ldrb	r3, [r4, #1]
 8005872:	2b2a      	cmp	r3, #42	; 0x2a
 8005874:	d135      	bne.n	80058e2 <_vfiprintf_r+0x1ce>
 8005876:	9b03      	ldr	r3, [sp, #12]
 8005878:	1d1a      	adds	r2, r3, #4
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	9203      	str	r2, [sp, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	bfb8      	it	lt
 8005882:	f04f 33ff 	movlt.w	r3, #4294967295
 8005886:	3402      	adds	r4, #2
 8005888:	9305      	str	r3, [sp, #20]
 800588a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005970 <_vfiprintf_r+0x25c>
 800588e:	7821      	ldrb	r1, [r4, #0]
 8005890:	2203      	movs	r2, #3
 8005892:	4650      	mov	r0, sl
 8005894:	f7fa fca4 	bl	80001e0 <memchr>
 8005898:	b140      	cbz	r0, 80058ac <_vfiprintf_r+0x198>
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	eba0 000a 	sub.w	r0, r0, sl
 80058a0:	fa03 f000 	lsl.w	r0, r3, r0
 80058a4:	9b04      	ldr	r3, [sp, #16]
 80058a6:	4303      	orrs	r3, r0
 80058a8:	3401      	adds	r4, #1
 80058aa:	9304      	str	r3, [sp, #16]
 80058ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b0:	482c      	ldr	r0, [pc, #176]	; (8005964 <_vfiprintf_r+0x250>)
 80058b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058b6:	2206      	movs	r2, #6
 80058b8:	f7fa fc92 	bl	80001e0 <memchr>
 80058bc:	2800      	cmp	r0, #0
 80058be:	d03f      	beq.n	8005940 <_vfiprintf_r+0x22c>
 80058c0:	4b29      	ldr	r3, [pc, #164]	; (8005968 <_vfiprintf_r+0x254>)
 80058c2:	bb1b      	cbnz	r3, 800590c <_vfiprintf_r+0x1f8>
 80058c4:	9b03      	ldr	r3, [sp, #12]
 80058c6:	3307      	adds	r3, #7
 80058c8:	f023 0307 	bic.w	r3, r3, #7
 80058cc:	3308      	adds	r3, #8
 80058ce:	9303      	str	r3, [sp, #12]
 80058d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d2:	443b      	add	r3, r7
 80058d4:	9309      	str	r3, [sp, #36]	; 0x24
 80058d6:	e767      	b.n	80057a8 <_vfiprintf_r+0x94>
 80058d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80058dc:	460c      	mov	r4, r1
 80058de:	2001      	movs	r0, #1
 80058e0:	e7a5      	b.n	800582e <_vfiprintf_r+0x11a>
 80058e2:	2300      	movs	r3, #0
 80058e4:	3401      	adds	r4, #1
 80058e6:	9305      	str	r3, [sp, #20]
 80058e8:	4619      	mov	r1, r3
 80058ea:	f04f 0c0a 	mov.w	ip, #10
 80058ee:	4620      	mov	r0, r4
 80058f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058f4:	3a30      	subs	r2, #48	; 0x30
 80058f6:	2a09      	cmp	r2, #9
 80058f8:	d903      	bls.n	8005902 <_vfiprintf_r+0x1ee>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0c5      	beq.n	800588a <_vfiprintf_r+0x176>
 80058fe:	9105      	str	r1, [sp, #20]
 8005900:	e7c3      	b.n	800588a <_vfiprintf_r+0x176>
 8005902:	fb0c 2101 	mla	r1, ip, r1, r2
 8005906:	4604      	mov	r4, r0
 8005908:	2301      	movs	r3, #1
 800590a:	e7f0      	b.n	80058ee <_vfiprintf_r+0x1da>
 800590c:	ab03      	add	r3, sp, #12
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	462a      	mov	r2, r5
 8005912:	4b16      	ldr	r3, [pc, #88]	; (800596c <_vfiprintf_r+0x258>)
 8005914:	a904      	add	r1, sp, #16
 8005916:	4630      	mov	r0, r6
 8005918:	f3af 8000 	nop.w
 800591c:	4607      	mov	r7, r0
 800591e:	1c78      	adds	r0, r7, #1
 8005920:	d1d6      	bne.n	80058d0 <_vfiprintf_r+0x1bc>
 8005922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005924:	07d9      	lsls	r1, r3, #31
 8005926:	d405      	bmi.n	8005934 <_vfiprintf_r+0x220>
 8005928:	89ab      	ldrh	r3, [r5, #12]
 800592a:	059a      	lsls	r2, r3, #22
 800592c:	d402      	bmi.n	8005934 <_vfiprintf_r+0x220>
 800592e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005930:	f7ff fc53 	bl	80051da <__retarget_lock_release_recursive>
 8005934:	89ab      	ldrh	r3, [r5, #12]
 8005936:	065b      	lsls	r3, r3, #25
 8005938:	f53f af12 	bmi.w	8005760 <_vfiprintf_r+0x4c>
 800593c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800593e:	e711      	b.n	8005764 <_vfiprintf_r+0x50>
 8005940:	ab03      	add	r3, sp, #12
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	462a      	mov	r2, r5
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <_vfiprintf_r+0x258>)
 8005948:	a904      	add	r1, sp, #16
 800594a:	4630      	mov	r0, r6
 800594c:	f000 f880 	bl	8005a50 <_printf_i>
 8005950:	e7e4      	b.n	800591c <_vfiprintf_r+0x208>
 8005952:	bf00      	nop
 8005954:	08006a78 	.word	0x08006a78
 8005958:	08006a98 	.word	0x08006a98
 800595c:	08006a58 	.word	0x08006a58
 8005960:	08006ab8 	.word	0x08006ab8
 8005964:	08006ac2 	.word	0x08006ac2
 8005968:	00000000 	.word	0x00000000
 800596c:	080056ef 	.word	0x080056ef
 8005970:	08006abe 	.word	0x08006abe

08005974 <_printf_common>:
 8005974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005978:	4616      	mov	r6, r2
 800597a:	4699      	mov	r9, r3
 800597c:	688a      	ldr	r2, [r1, #8]
 800597e:	690b      	ldr	r3, [r1, #16]
 8005980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005984:	4293      	cmp	r3, r2
 8005986:	bfb8      	it	lt
 8005988:	4613      	movlt	r3, r2
 800598a:	6033      	str	r3, [r6, #0]
 800598c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005990:	4607      	mov	r7, r0
 8005992:	460c      	mov	r4, r1
 8005994:	b10a      	cbz	r2, 800599a <_printf_common+0x26>
 8005996:	3301      	adds	r3, #1
 8005998:	6033      	str	r3, [r6, #0]
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	0699      	lsls	r1, r3, #26
 800599e:	bf42      	ittt	mi
 80059a0:	6833      	ldrmi	r3, [r6, #0]
 80059a2:	3302      	addmi	r3, #2
 80059a4:	6033      	strmi	r3, [r6, #0]
 80059a6:	6825      	ldr	r5, [r4, #0]
 80059a8:	f015 0506 	ands.w	r5, r5, #6
 80059ac:	d106      	bne.n	80059bc <_printf_common+0x48>
 80059ae:	f104 0a19 	add.w	sl, r4, #25
 80059b2:	68e3      	ldr	r3, [r4, #12]
 80059b4:	6832      	ldr	r2, [r6, #0]
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	42ab      	cmp	r3, r5
 80059ba:	dc26      	bgt.n	8005a0a <_printf_common+0x96>
 80059bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059c0:	1e13      	subs	r3, r2, #0
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	bf18      	it	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	0692      	lsls	r2, r2, #26
 80059ca:	d42b      	bmi.n	8005a24 <_printf_common+0xb0>
 80059cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059d0:	4649      	mov	r1, r9
 80059d2:	4638      	mov	r0, r7
 80059d4:	47c0      	blx	r8
 80059d6:	3001      	adds	r0, #1
 80059d8:	d01e      	beq.n	8005a18 <_printf_common+0xa4>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	68e5      	ldr	r5, [r4, #12]
 80059de:	6832      	ldr	r2, [r6, #0]
 80059e0:	f003 0306 	and.w	r3, r3, #6
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	bf08      	it	eq
 80059e8:	1aad      	subeq	r5, r5, r2
 80059ea:	68a3      	ldr	r3, [r4, #8]
 80059ec:	6922      	ldr	r2, [r4, #16]
 80059ee:	bf0c      	ite	eq
 80059f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059f4:	2500      	movne	r5, #0
 80059f6:	4293      	cmp	r3, r2
 80059f8:	bfc4      	itt	gt
 80059fa:	1a9b      	subgt	r3, r3, r2
 80059fc:	18ed      	addgt	r5, r5, r3
 80059fe:	2600      	movs	r6, #0
 8005a00:	341a      	adds	r4, #26
 8005a02:	42b5      	cmp	r5, r6
 8005a04:	d11a      	bne.n	8005a3c <_printf_common+0xc8>
 8005a06:	2000      	movs	r0, #0
 8005a08:	e008      	b.n	8005a1c <_printf_common+0xa8>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4652      	mov	r2, sl
 8005a0e:	4649      	mov	r1, r9
 8005a10:	4638      	mov	r0, r7
 8005a12:	47c0      	blx	r8
 8005a14:	3001      	adds	r0, #1
 8005a16:	d103      	bne.n	8005a20 <_printf_common+0xac>
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a20:	3501      	adds	r5, #1
 8005a22:	e7c6      	b.n	80059b2 <_printf_common+0x3e>
 8005a24:	18e1      	adds	r1, r4, r3
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	2030      	movs	r0, #48	; 0x30
 8005a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a2e:	4422      	add	r2, r4
 8005a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a38:	3302      	adds	r3, #2
 8005a3a:	e7c7      	b.n	80059cc <_printf_common+0x58>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	4622      	mov	r2, r4
 8005a40:	4649      	mov	r1, r9
 8005a42:	4638      	mov	r0, r7
 8005a44:	47c0      	blx	r8
 8005a46:	3001      	adds	r0, #1
 8005a48:	d0e6      	beq.n	8005a18 <_printf_common+0xa4>
 8005a4a:	3601      	adds	r6, #1
 8005a4c:	e7d9      	b.n	8005a02 <_printf_common+0x8e>
	...

08005a50 <_printf_i>:
 8005a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	460c      	mov	r4, r1
 8005a56:	4691      	mov	r9, r2
 8005a58:	7e27      	ldrb	r7, [r4, #24]
 8005a5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a5c:	2f78      	cmp	r7, #120	; 0x78
 8005a5e:	4680      	mov	r8, r0
 8005a60:	469a      	mov	sl, r3
 8005a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a66:	d807      	bhi.n	8005a78 <_printf_i+0x28>
 8005a68:	2f62      	cmp	r7, #98	; 0x62
 8005a6a:	d80a      	bhi.n	8005a82 <_printf_i+0x32>
 8005a6c:	2f00      	cmp	r7, #0
 8005a6e:	f000 80d8 	beq.w	8005c22 <_printf_i+0x1d2>
 8005a72:	2f58      	cmp	r7, #88	; 0x58
 8005a74:	f000 80a3 	beq.w	8005bbe <_printf_i+0x16e>
 8005a78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a80:	e03a      	b.n	8005af8 <_printf_i+0xa8>
 8005a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a86:	2b15      	cmp	r3, #21
 8005a88:	d8f6      	bhi.n	8005a78 <_printf_i+0x28>
 8005a8a:	a001      	add	r0, pc, #4	; (adr r0, 8005a90 <_printf_i+0x40>)
 8005a8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a90:	08005ae9 	.word	0x08005ae9
 8005a94:	08005afd 	.word	0x08005afd
 8005a98:	08005a79 	.word	0x08005a79
 8005a9c:	08005a79 	.word	0x08005a79
 8005aa0:	08005a79 	.word	0x08005a79
 8005aa4:	08005a79 	.word	0x08005a79
 8005aa8:	08005afd 	.word	0x08005afd
 8005aac:	08005a79 	.word	0x08005a79
 8005ab0:	08005a79 	.word	0x08005a79
 8005ab4:	08005a79 	.word	0x08005a79
 8005ab8:	08005a79 	.word	0x08005a79
 8005abc:	08005c09 	.word	0x08005c09
 8005ac0:	08005b2d 	.word	0x08005b2d
 8005ac4:	08005beb 	.word	0x08005beb
 8005ac8:	08005a79 	.word	0x08005a79
 8005acc:	08005a79 	.word	0x08005a79
 8005ad0:	08005c2b 	.word	0x08005c2b
 8005ad4:	08005a79 	.word	0x08005a79
 8005ad8:	08005b2d 	.word	0x08005b2d
 8005adc:	08005a79 	.word	0x08005a79
 8005ae0:	08005a79 	.word	0x08005a79
 8005ae4:	08005bf3 	.word	0x08005bf3
 8005ae8:	680b      	ldr	r3, [r1, #0]
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	600a      	str	r2, [r1, #0]
 8005af0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0a3      	b.n	8005c44 <_printf_i+0x1f4>
 8005afc:	6825      	ldr	r5, [r4, #0]
 8005afe:	6808      	ldr	r0, [r1, #0]
 8005b00:	062e      	lsls	r6, r5, #24
 8005b02:	f100 0304 	add.w	r3, r0, #4
 8005b06:	d50a      	bpl.n	8005b1e <_printf_i+0xce>
 8005b08:	6805      	ldr	r5, [r0, #0]
 8005b0a:	600b      	str	r3, [r1, #0]
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	da03      	bge.n	8005b18 <_printf_i+0xc8>
 8005b10:	232d      	movs	r3, #45	; 0x2d
 8005b12:	426d      	negs	r5, r5
 8005b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b18:	485e      	ldr	r0, [pc, #376]	; (8005c94 <_printf_i+0x244>)
 8005b1a:	230a      	movs	r3, #10
 8005b1c:	e019      	b.n	8005b52 <_printf_i+0x102>
 8005b1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b22:	6805      	ldr	r5, [r0, #0]
 8005b24:	600b      	str	r3, [r1, #0]
 8005b26:	bf18      	it	ne
 8005b28:	b22d      	sxthne	r5, r5
 8005b2a:	e7ef      	b.n	8005b0c <_printf_i+0xbc>
 8005b2c:	680b      	ldr	r3, [r1, #0]
 8005b2e:	6825      	ldr	r5, [r4, #0]
 8005b30:	1d18      	adds	r0, r3, #4
 8005b32:	6008      	str	r0, [r1, #0]
 8005b34:	0628      	lsls	r0, r5, #24
 8005b36:	d501      	bpl.n	8005b3c <_printf_i+0xec>
 8005b38:	681d      	ldr	r5, [r3, #0]
 8005b3a:	e002      	b.n	8005b42 <_printf_i+0xf2>
 8005b3c:	0669      	lsls	r1, r5, #25
 8005b3e:	d5fb      	bpl.n	8005b38 <_printf_i+0xe8>
 8005b40:	881d      	ldrh	r5, [r3, #0]
 8005b42:	4854      	ldr	r0, [pc, #336]	; (8005c94 <_printf_i+0x244>)
 8005b44:	2f6f      	cmp	r7, #111	; 0x6f
 8005b46:	bf0c      	ite	eq
 8005b48:	2308      	moveq	r3, #8
 8005b4a:	230a      	movne	r3, #10
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b52:	6866      	ldr	r6, [r4, #4]
 8005b54:	60a6      	str	r6, [r4, #8]
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	bfa2      	ittt	ge
 8005b5a:	6821      	ldrge	r1, [r4, #0]
 8005b5c:	f021 0104 	bicge.w	r1, r1, #4
 8005b60:	6021      	strge	r1, [r4, #0]
 8005b62:	b90d      	cbnz	r5, 8005b68 <_printf_i+0x118>
 8005b64:	2e00      	cmp	r6, #0
 8005b66:	d04d      	beq.n	8005c04 <_printf_i+0x1b4>
 8005b68:	4616      	mov	r6, r2
 8005b6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b6e:	fb03 5711 	mls	r7, r3, r1, r5
 8005b72:	5dc7      	ldrb	r7, [r0, r7]
 8005b74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b78:	462f      	mov	r7, r5
 8005b7a:	42bb      	cmp	r3, r7
 8005b7c:	460d      	mov	r5, r1
 8005b7e:	d9f4      	bls.n	8005b6a <_printf_i+0x11a>
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d10b      	bne.n	8005b9c <_printf_i+0x14c>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	07df      	lsls	r7, r3, #31
 8005b88:	d508      	bpl.n	8005b9c <_printf_i+0x14c>
 8005b8a:	6923      	ldr	r3, [r4, #16]
 8005b8c:	6861      	ldr	r1, [r4, #4]
 8005b8e:	4299      	cmp	r1, r3
 8005b90:	bfde      	ittt	le
 8005b92:	2330      	movle	r3, #48	; 0x30
 8005b94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b9c:	1b92      	subs	r2, r2, r6
 8005b9e:	6122      	str	r2, [r4, #16]
 8005ba0:	f8cd a000 	str.w	sl, [sp]
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	aa03      	add	r2, sp, #12
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4640      	mov	r0, r8
 8005bac:	f7ff fee2 	bl	8005974 <_printf_common>
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d14c      	bne.n	8005c4e <_printf_i+0x1fe>
 8005bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb8:	b004      	add	sp, #16
 8005bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bbe:	4835      	ldr	r0, [pc, #212]	; (8005c94 <_printf_i+0x244>)
 8005bc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	680e      	ldr	r6, [r1, #0]
 8005bc8:	061f      	lsls	r7, r3, #24
 8005bca:	f856 5b04 	ldr.w	r5, [r6], #4
 8005bce:	600e      	str	r6, [r1, #0]
 8005bd0:	d514      	bpl.n	8005bfc <_printf_i+0x1ac>
 8005bd2:	07d9      	lsls	r1, r3, #31
 8005bd4:	bf44      	itt	mi
 8005bd6:	f043 0320 	orrmi.w	r3, r3, #32
 8005bda:	6023      	strmi	r3, [r4, #0]
 8005bdc:	b91d      	cbnz	r5, 8005be6 <_printf_i+0x196>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	f023 0320 	bic.w	r3, r3, #32
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	2310      	movs	r3, #16
 8005be8:	e7b0      	b.n	8005b4c <_printf_i+0xfc>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	f043 0320 	orr.w	r3, r3, #32
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	2378      	movs	r3, #120	; 0x78
 8005bf4:	4828      	ldr	r0, [pc, #160]	; (8005c98 <_printf_i+0x248>)
 8005bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bfa:	e7e3      	b.n	8005bc4 <_printf_i+0x174>
 8005bfc:	065e      	lsls	r6, r3, #25
 8005bfe:	bf48      	it	mi
 8005c00:	b2ad      	uxthmi	r5, r5
 8005c02:	e7e6      	b.n	8005bd2 <_printf_i+0x182>
 8005c04:	4616      	mov	r6, r2
 8005c06:	e7bb      	b.n	8005b80 <_printf_i+0x130>
 8005c08:	680b      	ldr	r3, [r1, #0]
 8005c0a:	6826      	ldr	r6, [r4, #0]
 8005c0c:	6960      	ldr	r0, [r4, #20]
 8005c0e:	1d1d      	adds	r5, r3, #4
 8005c10:	600d      	str	r5, [r1, #0]
 8005c12:	0635      	lsls	r5, r6, #24
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	d501      	bpl.n	8005c1c <_printf_i+0x1cc>
 8005c18:	6018      	str	r0, [r3, #0]
 8005c1a:	e002      	b.n	8005c22 <_printf_i+0x1d2>
 8005c1c:	0671      	lsls	r1, r6, #25
 8005c1e:	d5fb      	bpl.n	8005c18 <_printf_i+0x1c8>
 8005c20:	8018      	strh	r0, [r3, #0]
 8005c22:	2300      	movs	r3, #0
 8005c24:	6123      	str	r3, [r4, #16]
 8005c26:	4616      	mov	r6, r2
 8005c28:	e7ba      	b.n	8005ba0 <_printf_i+0x150>
 8005c2a:	680b      	ldr	r3, [r1, #0]
 8005c2c:	1d1a      	adds	r2, r3, #4
 8005c2e:	600a      	str	r2, [r1, #0]
 8005c30:	681e      	ldr	r6, [r3, #0]
 8005c32:	6862      	ldr	r2, [r4, #4]
 8005c34:	2100      	movs	r1, #0
 8005c36:	4630      	mov	r0, r6
 8005c38:	f7fa fad2 	bl	80001e0 <memchr>
 8005c3c:	b108      	cbz	r0, 8005c42 <_printf_i+0x1f2>
 8005c3e:	1b80      	subs	r0, r0, r6
 8005c40:	6060      	str	r0, [r4, #4]
 8005c42:	6863      	ldr	r3, [r4, #4]
 8005c44:	6123      	str	r3, [r4, #16]
 8005c46:	2300      	movs	r3, #0
 8005c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c4c:	e7a8      	b.n	8005ba0 <_printf_i+0x150>
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	4632      	mov	r2, r6
 8005c52:	4649      	mov	r1, r9
 8005c54:	4640      	mov	r0, r8
 8005c56:	47d0      	blx	sl
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d0ab      	beq.n	8005bb4 <_printf_i+0x164>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	079b      	lsls	r3, r3, #30
 8005c60:	d413      	bmi.n	8005c8a <_printf_i+0x23a>
 8005c62:	68e0      	ldr	r0, [r4, #12]
 8005c64:	9b03      	ldr	r3, [sp, #12]
 8005c66:	4298      	cmp	r0, r3
 8005c68:	bfb8      	it	lt
 8005c6a:	4618      	movlt	r0, r3
 8005c6c:	e7a4      	b.n	8005bb8 <_printf_i+0x168>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4632      	mov	r2, r6
 8005c72:	4649      	mov	r1, r9
 8005c74:	4640      	mov	r0, r8
 8005c76:	47d0      	blx	sl
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d09b      	beq.n	8005bb4 <_printf_i+0x164>
 8005c7c:	3501      	adds	r5, #1
 8005c7e:	68e3      	ldr	r3, [r4, #12]
 8005c80:	9903      	ldr	r1, [sp, #12]
 8005c82:	1a5b      	subs	r3, r3, r1
 8005c84:	42ab      	cmp	r3, r5
 8005c86:	dcf2      	bgt.n	8005c6e <_printf_i+0x21e>
 8005c88:	e7eb      	b.n	8005c62 <_printf_i+0x212>
 8005c8a:	2500      	movs	r5, #0
 8005c8c:	f104 0619 	add.w	r6, r4, #25
 8005c90:	e7f5      	b.n	8005c7e <_printf_i+0x22e>
 8005c92:	bf00      	nop
 8005c94:	08006ac9 	.word	0x08006ac9
 8005c98:	08006ada 	.word	0x08006ada

08005c9c <_sbrk_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4d06      	ldr	r5, [pc, #24]	; (8005cb8 <_sbrk_r+0x1c>)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	f7fe fe2a 	bl	8004900 <_sbrk>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_sbrk_r+0x1a>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_sbrk_r+0x1a>
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	20001330 	.word	0x20001330

08005cbc <__sread>:
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc4:	f000 f8e8 	bl	8005e98 <_read_r>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	bfab      	itete	ge
 8005ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cce:	89a3      	ldrhlt	r3, [r4, #12]
 8005cd0:	181b      	addge	r3, r3, r0
 8005cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cd6:	bfac      	ite	ge
 8005cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cda:	81a3      	strhlt	r3, [r4, #12]
 8005cdc:	bd10      	pop	{r4, pc}

08005cde <__swrite>:
 8005cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce2:	461f      	mov	r7, r3
 8005ce4:	898b      	ldrh	r3, [r1, #12]
 8005ce6:	05db      	lsls	r3, r3, #23
 8005ce8:	4605      	mov	r5, r0
 8005cea:	460c      	mov	r4, r1
 8005cec:	4616      	mov	r6, r2
 8005cee:	d505      	bpl.n	8005cfc <__swrite+0x1e>
 8005cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f000 f870 	bl	8005ddc <_lseek_r>
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d06:	81a3      	strh	r3, [r4, #12]
 8005d08:	4632      	mov	r2, r6
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d12:	f000 b817 	b.w	8005d44 <_write_r>

08005d16 <__sseek>:
 8005d16:	b510      	push	{r4, lr}
 8005d18:	460c      	mov	r4, r1
 8005d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d1e:	f000 f85d 	bl	8005ddc <_lseek_r>
 8005d22:	1c43      	adds	r3, r0, #1
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	bf15      	itete	ne
 8005d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d32:	81a3      	strheq	r3, [r4, #12]
 8005d34:	bf18      	it	ne
 8005d36:	81a3      	strhne	r3, [r4, #12]
 8005d38:	bd10      	pop	{r4, pc}

08005d3a <__sclose>:
 8005d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3e:	f000 b81b 	b.w	8005d78 <_close_r>
	...

08005d44 <_write_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d07      	ldr	r5, [pc, #28]	; (8005d64 <_write_r+0x20>)
 8005d48:	4604      	mov	r4, r0
 8005d4a:	4608      	mov	r0, r1
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	2200      	movs	r2, #0
 8005d50:	602a      	str	r2, [r5, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f7fe fdc6 	bl	80048e4 <_write>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_write_r+0x1e>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_write_r+0x1e>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20001330 	.word	0x20001330

08005d68 <abort>:
 8005d68:	b508      	push	{r3, lr}
 8005d6a:	2006      	movs	r0, #6
 8005d6c:	f000 f8ce 	bl	8005f0c <raise>
 8005d70:	2001      	movs	r0, #1
 8005d72:	f7fe fdaa 	bl	80048ca <_exit>
	...

08005d78 <_close_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d06      	ldr	r5, [pc, #24]	; (8005d94 <_close_r+0x1c>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fe fdd6 	bl	8004934 <_close>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_close_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_close_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20001330 	.word	0x20001330

08005d98 <_fstat_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d07      	ldr	r5, [pc, #28]	; (8005db8 <_fstat_r+0x20>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	4611      	mov	r1, r2
 8005da4:	602b      	str	r3, [r5, #0]
 8005da6:	f7fe fdc8 	bl	800493a <_fstat>
 8005daa:	1c43      	adds	r3, r0, #1
 8005dac:	d102      	bne.n	8005db4 <_fstat_r+0x1c>
 8005dae:	682b      	ldr	r3, [r5, #0]
 8005db0:	b103      	cbz	r3, 8005db4 <_fstat_r+0x1c>
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	bd38      	pop	{r3, r4, r5, pc}
 8005db6:	bf00      	nop
 8005db8:	20001330 	.word	0x20001330

08005dbc <_isatty_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d06      	ldr	r5, [pc, #24]	; (8005dd8 <_isatty_r+0x1c>)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	602b      	str	r3, [r5, #0]
 8005dc8:	f7fe fdbc 	bl	8004944 <_isatty>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_isatty_r+0x1a>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_isatty_r+0x1a>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	20001330 	.word	0x20001330

08005ddc <_lseek_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d07      	ldr	r5, [pc, #28]	; (8005dfc <_lseek_r+0x20>)
 8005de0:	4604      	mov	r4, r0
 8005de2:	4608      	mov	r0, r1
 8005de4:	4611      	mov	r1, r2
 8005de6:	2200      	movs	r2, #0
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f7fe fdac 	bl	8004948 <_lseek>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_lseek_r+0x1e>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_lseek_r+0x1e>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20001330 	.word	0x20001330

08005e00 <memmove>:
 8005e00:	4288      	cmp	r0, r1
 8005e02:	b510      	push	{r4, lr}
 8005e04:	eb01 0402 	add.w	r4, r1, r2
 8005e08:	d902      	bls.n	8005e10 <memmove+0x10>
 8005e0a:	4284      	cmp	r4, r0
 8005e0c:	4623      	mov	r3, r4
 8005e0e:	d807      	bhi.n	8005e20 <memmove+0x20>
 8005e10:	1e43      	subs	r3, r0, #1
 8005e12:	42a1      	cmp	r1, r4
 8005e14:	d008      	beq.n	8005e28 <memmove+0x28>
 8005e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e1e:	e7f8      	b.n	8005e12 <memmove+0x12>
 8005e20:	4402      	add	r2, r0
 8005e22:	4601      	mov	r1, r0
 8005e24:	428a      	cmp	r2, r1
 8005e26:	d100      	bne.n	8005e2a <memmove+0x2a>
 8005e28:	bd10      	pop	{r4, pc}
 8005e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e32:	e7f7      	b.n	8005e24 <memmove+0x24>

08005e34 <__malloc_lock>:
 8005e34:	4801      	ldr	r0, [pc, #4]	; (8005e3c <__malloc_lock+0x8>)
 8005e36:	f7ff b9cf 	b.w	80051d8 <__retarget_lock_acquire_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	20001328 	.word	0x20001328

08005e40 <__malloc_unlock>:
 8005e40:	4801      	ldr	r0, [pc, #4]	; (8005e48 <__malloc_unlock+0x8>)
 8005e42:	f7ff b9ca 	b.w	80051da <__retarget_lock_release_recursive>
 8005e46:	bf00      	nop
 8005e48:	20001328 	.word	0x20001328

08005e4c <_realloc_r>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	4607      	mov	r7, r0
 8005e50:	4614      	mov	r4, r2
 8005e52:	460e      	mov	r6, r1
 8005e54:	b921      	cbnz	r1, 8005e60 <_realloc_r+0x14>
 8005e56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	f7ff ba7a 	b.w	8005354 <_malloc_r>
 8005e60:	b922      	cbnz	r2, 8005e6c <_realloc_r+0x20>
 8005e62:	f7ff fa27 	bl	80052b4 <_free_r>
 8005e66:	4625      	mov	r5, r4
 8005e68:	4628      	mov	r0, r5
 8005e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6c:	f000 f86a 	bl	8005f44 <_malloc_usable_size_r>
 8005e70:	42a0      	cmp	r0, r4
 8005e72:	d20f      	bcs.n	8005e94 <_realloc_r+0x48>
 8005e74:	4621      	mov	r1, r4
 8005e76:	4638      	mov	r0, r7
 8005e78:	f7ff fa6c 	bl	8005354 <_malloc_r>
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d0f2      	beq.n	8005e68 <_realloc_r+0x1c>
 8005e82:	4631      	mov	r1, r6
 8005e84:	4622      	mov	r2, r4
 8005e86:	f7fe fd8b 	bl	80049a0 <memcpy>
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	f7ff fa11 	bl	80052b4 <_free_r>
 8005e92:	e7e9      	b.n	8005e68 <_realloc_r+0x1c>
 8005e94:	4635      	mov	r5, r6
 8005e96:	e7e7      	b.n	8005e68 <_realloc_r+0x1c>

08005e98 <_read_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d07      	ldr	r5, [pc, #28]	; (8005eb8 <_read_r+0x20>)
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	4608      	mov	r0, r1
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	602a      	str	r2, [r5, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f7fe fd15 	bl	80048d6 <_read>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d102      	bne.n	8005eb6 <_read_r+0x1e>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	b103      	cbz	r3, 8005eb6 <_read_r+0x1e>
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
 8005eb8:	20001330 	.word	0x20001330

08005ebc <_raise_r>:
 8005ebc:	291f      	cmp	r1, #31
 8005ebe:	b538      	push	{r3, r4, r5, lr}
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	d904      	bls.n	8005ed0 <_raise_r+0x14>
 8005ec6:	2316      	movs	r3, #22
 8005ec8:	6003      	str	r3, [r0, #0]
 8005eca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ed2:	b112      	cbz	r2, 8005eda <_raise_r+0x1e>
 8005ed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ed8:	b94b      	cbnz	r3, 8005eee <_raise_r+0x32>
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 f830 	bl	8005f40 <_getpid_r>
 8005ee0:	462a      	mov	r2, r5
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eea:	f000 b817 	b.w	8005f1c <_kill_r>
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d00a      	beq.n	8005f08 <_raise_r+0x4c>
 8005ef2:	1c59      	adds	r1, r3, #1
 8005ef4:	d103      	bne.n	8005efe <_raise_r+0x42>
 8005ef6:	2316      	movs	r3, #22
 8005ef8:	6003      	str	r3, [r0, #0]
 8005efa:	2001      	movs	r0, #1
 8005efc:	e7e7      	b.n	8005ece <_raise_r+0x12>
 8005efe:	2400      	movs	r4, #0
 8005f00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f04:	4628      	mov	r0, r5
 8005f06:	4798      	blx	r3
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e7e0      	b.n	8005ece <_raise_r+0x12>

08005f0c <raise>:
 8005f0c:	4b02      	ldr	r3, [pc, #8]	; (8005f18 <raise+0xc>)
 8005f0e:	4601      	mov	r1, r0
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	f7ff bfd3 	b.w	8005ebc <_raise_r>
 8005f16:	bf00      	nop
 8005f18:	2000003c 	.word	0x2000003c

08005f1c <_kill_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d07      	ldr	r5, [pc, #28]	; (8005f3c <_kill_r+0x20>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	602b      	str	r3, [r5, #0]
 8005f2a:	f7fe fcc6 	bl	80048ba <_kill>
 8005f2e:	1c43      	adds	r3, r0, #1
 8005f30:	d102      	bne.n	8005f38 <_kill_r+0x1c>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	b103      	cbz	r3, 8005f38 <_kill_r+0x1c>
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	bd38      	pop	{r3, r4, r5, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20001330 	.word	0x20001330

08005f40 <_getpid_r>:
 8005f40:	f7fe bcb9 	b.w	80048b6 <_getpid>

08005f44 <_malloc_usable_size_r>:
 8005f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f48:	1f18      	subs	r0, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bfbc      	itt	lt
 8005f4e:	580b      	ldrlt	r3, [r1, r0]
 8005f50:	18c0      	addlt	r0, r0, r3
 8005f52:	4770      	bx	lr

08005f54 <_init>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr

08005f60 <_fini>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr
 8005f6c:	0000      	movs	r0, r0
	...
