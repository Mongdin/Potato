
STM32L4_IOT_P2P_ClientServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b00  08010188  08010188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08013c88  08013c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d08  08013d08  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08013d08  08013d08  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013d08  08013d08  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013d08  08013d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013d10  08013d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08013d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bbc  20000048  08013d60  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c04  08013d60  00020c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   000317f9  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006cb4  00000000  00000000  00051871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00010a24  00000000  00000000  00058525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  00068f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d60  00000000  00000000  0006a530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003041f  00000000  00000000  0006c290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027766  00000000  00000000  0009c6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a030  00000000  00000000  000c3e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001cde45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d14  00000000  00000000  001cde98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010188 <__do_global_dtors_aux>:
 8010188:	b510      	push	{r4, lr}
 801018a:	4c05      	ldr	r4, [pc, #20]	; (80101a0 <__do_global_dtors_aux+0x18>)
 801018c:	7823      	ldrb	r3, [r4, #0]
 801018e:	b933      	cbnz	r3, 801019e <__do_global_dtors_aux+0x16>
 8010190:	4b04      	ldr	r3, [pc, #16]	; (80101a4 <__do_global_dtors_aux+0x1c>)
 8010192:	b113      	cbz	r3, 801019a <__do_global_dtors_aux+0x12>
 8010194:	4804      	ldr	r0, [pc, #16]	; (80101a8 <__do_global_dtors_aux+0x20>)
 8010196:	f3af 8000 	nop.w
 801019a:	2301      	movs	r3, #1
 801019c:	7023      	strb	r3, [r4, #0]
 801019e:	bd10      	pop	{r4, pc}
 80101a0:	20000048 	.word	0x20000048
 80101a4:	00000000 	.word	0x00000000
 80101a8:	08013c6c 	.word	0x08013c6c

080101ac <frame_dummy>:
 80101ac:	b508      	push	{r3, lr}
 80101ae:	4b03      	ldr	r3, [pc, #12]	; (80101bc <frame_dummy+0x10>)
 80101b0:	b11b      	cbz	r3, 80101ba <frame_dummy+0xe>
 80101b2:	4903      	ldr	r1, [pc, #12]	; (80101c0 <frame_dummy+0x14>)
 80101b4:	4803      	ldr	r0, [pc, #12]	; (80101c4 <frame_dummy+0x18>)
 80101b6:	f3af 8000 	nop.w
 80101ba:	bd08      	pop	{r3, pc}
 80101bc:	00000000 	.word	0x00000000
 80101c0:	2000004c 	.word	0x2000004c
 80101c4:	08013c6c 	.word	0x08013c6c

080101c8 <aci_gap_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

#if BLUENRG_MS
tBleStatus aci_gap_init(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80101c8:	b530      	push	{r4, r5, lr}
 80101ca:	b08b      	sub	sp, #44	; 0x2c
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80101cc:	ad02      	add	r5, sp, #8
  cp.role = role;
 80101ce:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 80101d2:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 80101d6:	f88d 2006 	strb.w	r2, [sp, #6]
  Osal_MemSet(&resp, 0, sizeof(resp));
 80101da:	2100      	movs	r1, #0
 80101dc:	2207      	movs	r2, #7
 80101de:	4628      	mov	r0, r5
{
 80101e0:	461c      	mov	r4, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 80101e2:	f000 fa7d 	bl	80106e0 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 80101e6:	2218      	movs	r2, #24
 80101e8:	2100      	movs	r1, #0
 80101ea:	a804      	add	r0, sp, #16
 80101ec:	f000 fa78 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80101f0:	4b14      	ldr	r3, [pc, #80]	; (8010244 <aci_gap_init+0x7c>)
 80101f2:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
 80101f4:	ab01      	add	r3, sp, #4
 80101f6:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80101f8:	2303      	movs	r3, #3
 80101fa:	f8ad 301c 	strh.w	r3, [sp, #28]
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80101fe:	2100      	movs	r1, #0
  rq.rlen = GAP_INIT_RP_SIZE;
 8010200:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 8010202:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8010204:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8010206:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 801020a:	f001 fc1d 	bl	8011a48 <hci_send_req>
 801020e:	2800      	cmp	r0, #0
 8010210:	db15      	blt.n	801023e <aci_gap_init+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8010212:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8010216:	b980      	cbnz	r0, 801023a <aci_gap_init+0x72>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8010218:	9b02      	ldr	r3, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 801021a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 801021e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8010222:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8010224:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010228:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801022c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801022e:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8010230:	9b03      	ldr	r3, [sp, #12]
 8010232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010234:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8010238:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 801023a:	b00b      	add	sp, #44	; 0x2c
 801023c:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_TIMEOUT;
 801023e:	20ff      	movs	r0, #255	; 0xff
 8010240:	e7fb      	b.n	801023a <aci_gap_init+0x72>
 8010242:	bf00      	nop
 8010244:	008a003f 	.word	0x008a003f

08010248 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8010248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801024a:	b095      	sub	sp, #84	; 0x54
 801024c:	461f      	mov	r7, r3
 801024e:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8010252:	f89d 5074 	ldrb.w	r5, [sp, #116]	; 0x74
 8010256:	f8ad 1006 	strh.w	r1, [sp, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 801025a:	1963      	adds	r3, r4, r5
 801025c:	2b1a      	cmp	r3, #26
{
 801025e:	f8ad 2004 	strh.w	r2, [sp, #4]
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8010262:	dc57      	bgt.n	8010314 <aci_gap_set_discoverable+0xcc>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8010264:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 8010268:	2202      	movs	r2, #2
 801026a:	f10d 0106 	add.w	r1, sp, #6
 801026e:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8010272:	f000 fa33 	bl	80106dc <Osal_MemCpy>
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  Osal_MemCpy(buffer + indx, &AdvIntervMax, 2);
 8010276:	2202      	movs	r2, #2
 8010278:	a901      	add	r1, sp, #4
 801027a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 801027e:	f000 fa2d 	bl	80106dc <Osal_MemCpy>
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8010282:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 8010286:	991c      	ldr	r1, [sp, #112]	; 0x70
  buffer[indx] = AdvFilterPolicy;
 8010288:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 801028c:	4622      	mov	r2, r4
 801028e:	a80c      	add	r0, sp, #48	; 0x30
  buffer[indx] = LocalNameLen;
 8010290:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
  buffer[indx] = OwnAddrType;
 8010294:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 8010298:	f000 fa20 	bl	80106dc <Osal_MemCpy>
  indx +=  LocalNameLen;
 801029c:	f104 0308 	add.w	r3, r4, #8
  
  buffer[indx] = ServiceUUIDLen;
 80102a0:	aa14      	add	r2, sp, #80	; 0x50
 80102a2:	fa52 f383 	uxtab	r3, r2, r3
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 80102a6:	ae0a      	add	r6, sp, #40	; 0x28
  indx++;
 80102a8:	f104 0009 	add.w	r0, r4, #9
 80102ac:	b2c4      	uxtb	r4, r0

  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80102ae:	991e      	ldr	r1, [sp, #120]	; 0x78
  buffer[indx] = ServiceUUIDLen;
 80102b0:	f803 5c28 	strb.w	r5, [r3, #-40]
  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80102b4:	462a      	mov	r2, r5
 80102b6:	fa56 f080 	uxtab	r0, r6, r0
 80102ba:	f000 fa0f 	bl	80106dc <Osal_MemCpy>
  indx +=  ServiceUUIDLen;  
 80102be:	1928      	adds	r0, r5, r4
 80102c0:	b2c4      	uxtb	r4, r0

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMin, 2);
 80102c2:	2202      	movs	r2, #2
 80102c4:	a91f      	add	r1, sp, #124	; 0x7c
 80102c6:	fa56 f080 	uxtab	r0, r6, r0
 80102ca:	f000 fa07 	bl	80106dc <Osal_MemCpy>
  indx +=  2;
 80102ce:	1ca0      	adds	r0, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMax, 2);
 80102d0:	2202      	movs	r2, #2
 80102d2:	a920      	add	r1, sp, #128	; 0x80
 80102d4:	fa56 f080 	uxtab	r0, r6, r0
 80102d8:	f000 fa00 	bl	80106dc <Osal_MemCpy>
  indx +=  2;    

  Osal_MemSet(&rq, 0, sizeof(rq));
 80102dc:	2218      	movs	r2, #24
 80102de:	2100      	movs	r1, #0
 80102e0:	a804      	add	r0, sp, #16
 80102e2:	f000 f9fd 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80102e6:	4b0d      	ldr	r3, [pc, #52]	; (801031c <aci_gap_set_discoverable+0xd4>)
 80102e8:	9304      	str	r3, [sp, #16]
  indx +=  2;    
 80102ea:	3404      	adds	r4, #4
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 80102ec:	f10d 030f 	add.w	r3, sp, #15
 80102f0:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 80102f2:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80102f4:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80102f6:	2100      	movs	r1, #0
 80102f8:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 80102fa:	9606      	str	r6, [sp, #24]
  rq.clen = indx;
 80102fc:	f8ad 401c 	strh.w	r4, [sp, #28]
  rq.rlen = 1;
 8010300:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8010304:	f001 fba0 	bl	8011a48 <hci_send_req>
 8010308:	2800      	cmp	r0, #0
 801030a:	db05      	blt.n	8010318 <aci_gap_set_discoverable+0xd0>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 801030c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    return status;
  }

  return 0;
}
 8010310:	b015      	add	sp, #84	; 0x54
 8010312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8010314:	2042      	movs	r0, #66	; 0x42
 8010316:	e7fb      	b.n	8010310 <aci_gap_set_discoverable+0xc8>
    return BLE_STATUS_TIMEOUT;
 8010318:	20ff      	movs	r0, #255	; 0xff
 801031a:	e7f9      	b.n	8010310 <aci_gap_set_discoverable+0xc8>
 801031c:	0083003f 	.word	0x0083003f

08010320 <aci_gap_set_io_capability>:
    
  return status;
}

tBleStatus aci_gap_set_io_capability(uint8_t io_capability)
{
 8010320:	b500      	push	{lr}
 8010322:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
  gap_set_io_capability_cp cp;
    
  cp.io_capability = io_capability;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010324:	2218      	movs	r2, #24
  cp.io_capability = io_capability;
 8010326:	f88d 0004 	strb.w	r0, [sp, #4]
  Osal_MemSet(&rq, 0, sizeof(rq));
 801032a:	2100      	movs	r1, #0
 801032c:	a802      	add	r0, sp, #8
 801032e:	f000 f9d7 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8010332:	4b0c      	ldr	r3, [pc, #48]	; (8010364 <aci_gap_set_io_capability+0x44>)
 8010334:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_IO_CAPABILITY;
  rq.cparam = &cp;
 8010336:	ab01      	add	r3, sp, #4
 8010338:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.rparam = &status;
 801033a:	f10d 0207 	add.w	r2, sp, #7
  rq.clen = sizeof(cp);
 801033e:	2301      	movs	r3, #1
  rq.rlen = 1;
    
  if (hci_send_req(&rq, FALSE) < 0)
 8010340:	2100      	movs	r1, #0
 8010342:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 8010344:	f8ad 3014 	strh.w	r3, [sp, #20]
  rq.rparam = &status;
 8010348:	9206      	str	r2, [sp, #24]
  rq.rlen = 1;
 801034a:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 801034e:	f001 fb7b 	bl	8011a48 <hci_send_req>
 8010352:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
    
  return status;
 8010354:	bfac      	ite	ge
 8010356:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 801035a:	20ff      	movlt	r0, #255	; 0xff
}
 801035c:	b009      	add	sp, #36	; 0x24
 801035e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010362:	bf00      	nop
 8010364:	0085003f 	.word	0x0085003f

08010368 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8010368:	b530      	push	{r4, r5, lr}
 801036a:	b08f      	sub	sp, #60	; 0x3c
 801036c:	460d      	mov	r5, r1
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 801036e:	f88d 001c 	strb.w	r0, [sp, #28]
{
 8010372:	4611      	mov	r1, r2
  cp.oob_enable = oob_enable;
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 8010374:	f10d 001e 	add.w	r0, sp, #30
 8010378:	2210      	movs	r2, #16
{
 801037a:	461c      	mov	r4, r3
  cp.oob_enable = oob_enable;
 801037c:	f88d 501d 	strb.w	r5, [sp, #29]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 8010380:	f000 f9ac 	bl	80106dc <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
  cp.max_encryption_key_size = max_encryption_key_size;
 8010384:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8010388:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 801038c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010390:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8010394:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010396:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  Osal_MemSet(&rq, 0, sizeof(rq));
 801039a:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 801039c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80103a0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  Osal_MemSet(&rq, 0, sizeof(rq));
 80103a4:	2100      	movs	r1, #0
 80103a6:	a801      	add	r0, sp, #4
  cp.min_encryption_key_size = min_encryption_key_size;
 80103a8:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  Osal_MemSet(&rq, 0, sizeof(rq));
 80103ac:	f000 f998 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80103b0:	4b0b      	ldr	r3, [pc, #44]	; (80103e0 <aci_gap_set_auth_requirement+0x78>)
 80103b2:	9301      	str	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
  rq.cparam = &cp;
 80103b4:	ab07      	add	r3, sp, #28
 80103b6:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 80103b8:	231a      	movs	r3, #26
 80103ba:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.rparam = &status;
 80103be:	f10d 0303 	add.w	r3, sp, #3
 80103c2:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80103c4:	2100      	movs	r1, #0
  rq.rlen = 1;
 80103c6:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80103c8:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 80103ca:	f8ad 3018 	strh.w	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 80103ce:	f001 fb3b 	bl	8011a48 <hci_send_req>
 80103d2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80103d4:	bfac      	ite	ge
 80103d6:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80103da:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 80103dc:	b00f      	add	sp, #60	; 0x3c
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	0086003f 	.word	0x0086003f

080103e4 <aci_gap_configure_whitelist>:

  return resp.status;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 80103e4:	b500      	push	{lr}
 80103e6:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 80103e8:	2218      	movs	r2, #24
 80103ea:	2100      	movs	r1, #0
 80103ec:	a802      	add	r0, sp, #8
 80103ee:	f000 f977 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80103f2:	4b0a      	ldr	r3, [pc, #40]	; (801041c <aci_gap_configure_whitelist+0x38>)
 80103f4:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GAP_CONFIGURE_WHITELIST;
  rq.rparam = &status;
 80103f6:	f10d 0307 	add.w	r3, sp, #7
 80103fa:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80103fc:	2100      	movs	r1, #0
  rq.rlen = 1;
 80103fe:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8010400:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8010402:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8010406:	f001 fb1f 	bl	8011a48 <hci_send_req>
 801040a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 801040c:	bfac      	ite	ge
 801040e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8010412:	20ff      	movlt	r0, #255	; 0xff
}
 8010414:	b009      	add	sp, #36	; 0x24
 8010416:	f85d fb04 	ldr.w	pc, [sp], #4
 801041a:	bf00      	nop
 801041c:	0092003f 	.word	0x0092003f

08010420 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8010420:	b500      	push	{lr}
 8010422:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010424:	2218      	movs	r2, #24
 8010426:	2100      	movs	r1, #0
 8010428:	a802      	add	r0, sp, #8
 801042a:	f000 f959 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 801042e:	4b0a      	ldr	r3, [pc, #40]	; (8010458 <aci_gatt_init+0x38>)
 8010430:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
  rq.rparam = &status;
 8010432:	f10d 0307 	add.w	r3, sp, #7
 8010436:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8010438:	2100      	movs	r1, #0
  rq.rlen = 1;
 801043a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 801043c:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 801043e:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8010442:	f001 fb01 	bl	8011a48 <hci_send_req>
 8010446:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8010448:	bfac      	ite	ge
 801044a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 801044e:	20ff      	movlt	r0, #255	; 0xff
}
 8010450:	b009      	add	sp, #36	; 0x24
 8010452:	f85d fb04 	ldr.w	pc, [sp], #4
 8010456:	bf00      	nop
 8010458:	0101003f 	.word	0x0101003f

0801045c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 801045c:	b570      	push	{r4, r5, r6, lr}
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 801045e:	2801      	cmp	r0, #1
{
 8010460:	b08c      	sub	sp, #48	; 0x30
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8010462:	bf0c      	ite	eq
 8010464:	2402      	moveq	r4, #2
 8010466:	2410      	movne	r4, #16
{
 8010468:	4616      	mov	r6, r2
  buffer[indx] = service_uuid_type;
 801046a:	f88d 0004 	strb.w	r0, [sp, #4]
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 801046e:	4622      	mov	r2, r4
 8010470:	f10d 0005 	add.w	r0, sp, #5
{
 8010474:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 8010476:	f000 f931 	bl	80106dc <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 801047a:	ab0c      	add	r3, sp, #48	; 0x30
 801047c:	4423      	add	r3, r4
    
  buffer[indx] = max_attr_records;
  indx++;
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 801047e:	2203      	movs	r2, #3
  buffer[indx] = service_type;
 8010480:	f803 6c2b 	strb.w	r6, [r3, #-43]
  buffer[indx] = max_attr_records;
 8010484:	ab0c      	add	r3, sp, #48	; 0x30
 8010486:	4423      	add	r3, r4
  Osal_MemSet(&resp, 0, sizeof(resp));
 8010488:	2100      	movs	r1, #0
 801048a:	4668      	mov	r0, sp
  buffer[indx] = max_attr_records;
 801048c:	f803 5c2a 	strb.w	r5, [r3, #-42]
  Osal_MemSet(&resp, 0, sizeof(resp));
 8010490:	f000 f926 	bl	80106e0 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010494:	2218      	movs	r2, #24
 8010496:	2100      	movs	r1, #0
 8010498:	eb0d 0002 	add.w	r0, sp, r2
 801049c:	f000 f920 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80104a0:	4b0e      	ldr	r3, [pc, #56]	; (80104dc <aci_gatt_add_serv+0x80>)
 80104a2:	9306      	str	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
 80104a4:	ab01      	add	r3, sp, #4
 80104a6:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 80104a8:	3403      	adds	r4, #3
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80104aa:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 80104ac:	2100      	movs	r1, #0
 80104ae:	a806      	add	r0, sp, #24
  rq.clen = indx;
 80104b0:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 80104b4:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80104b8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 80104bc:	f001 fac4 	bl	8011a48 <hci_send_req>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	db09      	blt.n	80104d8 <aci_gatt_add_serv+0x7c>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 80104c4:	f89d 0000 	ldrb.w	r0, [sp]
 80104c8:	b920      	cbnz	r0, 80104d4 <aci_gatt_add_serv+0x78>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 80104ca:	9b00      	ldr	r3, [sp, #0]
 80104cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80104ce:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80104d2:	8013      	strh	r3, [r2, #0]

  return 0;
}
 80104d4:	b00c      	add	sp, #48	; 0x30
 80104d6:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80104d8:	20ff      	movs	r0, #255	; 0xff
 80104da:	e7fb      	b.n	80104d4 <aci_gatt_add_serv+0x78>
 80104dc:	0102003f 	.word	0x0102003f

080104e0 <aci_gatt_add_char>:
           uint8_t secPermissions,
           uint8_t gattEvtMask,
           uint8_t encryKeySize,
           uint8_t isVariable,
           uint16_t* charHandle)                     
{
 80104e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104e2:	b091      	sub	sp, #68	; 0x44
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 80104e4:	af09      	add	r7, sp, #36	; 0x24
{
 80104e6:	460c      	mov	r4, r1
 80104e8:	4616      	mov	r6, r2
 80104ea:	f8ad 0006 	strh.w	r0, [sp, #6]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 80104ee:	2202      	movs	r2, #2
 80104f0:	f10d 0106 	add.w	r1, sp, #6
 80104f4:	4638      	mov	r0, r7
{
 80104f6:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 80104f8:	f000 f8f0 	bl	80106dc <Osal_MemCpy>
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80104fc:	2c01      	cmp	r4, #1
  buffer[indx] = charUuidType;
 80104fe:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
    uuid_len = 16;
 8010502:	bf0c      	ite	eq
 8010504:	2402      	moveq	r4, #2
 8010506:	2410      	movne	r4, #16
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 8010508:	4622      	mov	r2, r4
 801050a:	4631      	mov	r1, r6
 801050c:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8010510:	f000 f8e4 	bl	80106dc <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8010514:	ab10      	add	r3, sp, #64	; 0x40
 8010516:	4423      	add	r3, r4
  indx+=2;
#else
  indx++;
#endif  
    
  buffer[indx] = charProperties;
 8010518:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  buffer[indx] = charValueLen;
 801051c:	f803 5c19 	strb.w	r5, [r3, #-25]
  buffer[indx] = charProperties;
 8010520:	ab10      	add	r3, sp, #64	; 0x40
 8010522:	4423      	add	r3, r4
  indx++;
    
  buffer[indx] = isVariable;
  indx++;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 8010524:	ad02      	add	r5, sp, #8
  buffer[indx] = charProperties;
 8010526:	f803 2c18 	strb.w	r2, [r3, #-24]
  buffer[indx] = secPermissions;
 801052a:	ab10      	add	r3, sp, #64	; 0x40
 801052c:	4423      	add	r3, r4
 801052e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010532:	f803 2c17 	strb.w	r2, [r3, #-23]
  buffer[indx] = gattEvtMask;
 8010536:	ab10      	add	r3, sp, #64	; 0x40
 8010538:	4423      	add	r3, r4
 801053a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 801053e:	f803 2c16 	strb.w	r2, [r3, #-22]
  buffer[indx] = encryKeySize;
 8010542:	ab10      	add	r3, sp, #64	; 0x40
 8010544:	4423      	add	r3, r4
 8010546:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801054a:	f803 2c15 	strb.w	r2, [r3, #-21]
  buffer[indx] = isVariable;
 801054e:	ab10      	add	r3, sp, #64	; 0x40
 8010550:	4423      	add	r3, r4
 8010552:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8010556:	f803 2c14 	strb.w	r2, [r3, #-20]
  Osal_MemSet(&resp, 0, sizeof(resp));
 801055a:	2100      	movs	r1, #0
 801055c:	2203      	movs	r2, #3
 801055e:	4628      	mov	r0, r5
 8010560:	f000 f8be 	bl	80106e0 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010564:	2218      	movs	r2, #24
 8010566:	2100      	movs	r1, #0
 8010568:	a803      	add	r0, sp, #12
 801056a:	f000 f8b9 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 801056e:	4b0e      	ldr	r3, [pc, #56]	; (80105a8 <aci_gatt_add_char+0xc8>)
 8010570:	9303      	str	r3, [sp, #12]
  rq.ocf = OCF_GATT_ADD_CHAR;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8010572:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8010574:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8010576:	2100      	movs	r1, #0
 8010578:	a803      	add	r0, sp, #12
  rq.cparam = (void *)buffer;
 801057a:	9705      	str	r7, [sp, #20]
  rq.clen = indx;
 801057c:	f8ad 4018 	strh.w	r4, [sp, #24]
  rq.rparam = &resp;
 8010580:	9507      	str	r5, [sp, #28]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8010582:	f8ad 3020 	strh.w	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 8010586:	f001 fa5f 	bl	8011a48 <hci_send_req>
 801058a:	2800      	cmp	r0, #0
 801058c:	db09      	blt.n	80105a2 <aci_gatt_add_char+0xc2>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 801058e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8010592:	b920      	cbnz	r0, 801059e <aci_gatt_add_char+0xbe>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 8010594:	9b02      	ldr	r3, [sp, #8]
 8010596:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010598:	f3c3 230f 	ubfx	r3, r3, #8, #16
 801059c:	8013      	strh	r3, [r2, #0]

  return 0;
}
 801059e:	b011      	add	sp, #68	; 0x44
 80105a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 80105a2:	20ff      	movs	r0, #255	; 0xff
 80105a4:	e7fb      	b.n	801059e <aci_gatt_add_char+0xbe>
 80105a6:	bf00      	nop
 80105a8:	0104003f 	.word	0x0104003f

080105ac <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
              uint16_t charHandle,
              uint8_t charValOffset,
              uint8_t charValueLen,   
                                      const void *charValue)
{
 80105ac:	b570      	push	{r4, r5, r6, lr}
 80105ae:	b0ca      	sub	sp, #296	; 0x128
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80105b0:	2bf9      	cmp	r3, #249	; 0xf9
{
 80105b2:	4616      	mov	r6, r2
 80105b4:	461c      	mov	r4, r3
 80105b6:	f8ad 0006 	strh.w	r0, [sp, #6]
 80105ba:	f8ad 1004 	strh.w	r1, [sp, #4]
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80105be:	d82f      	bhi.n	8010620 <aci_gatt_update_char_value+0x74>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 80105c0:	ad0a      	add	r5, sp, #40	; 0x28
 80105c2:	2202      	movs	r2, #2
 80105c4:	f10d 0106 	add.w	r1, sp, #6
 80105c8:	4628      	mov	r0, r5
 80105ca:	f000 f887 	bl	80106dc <Osal_MemCpy>
  indx += 2;
    
  charHandle = htobs(charHandle);
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 80105ce:	2202      	movs	r2, #2
 80105d0:	a901      	add	r1, sp, #4
 80105d2:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80105d6:	f000 f881 	bl	80106dc <Osal_MemCpy>
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 80105da:	4622      	mov	r2, r4
 80105dc:	994e      	ldr	r1, [sp, #312]	; 0x138
  buffer[indx] = charValueLen;
 80105de:	716c      	strb	r4, [r5, #5]
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 80105e0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
  buffer[indx] = charValOffset;
 80105e4:	712e      	strb	r6, [r5, #4]
  indx +=  charValueLen;
 80105e6:	3406      	adds	r4, #6
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 80105e8:	f000 f878 	bl	80106dc <Osal_MemCpy>

  Osal_MemSet(&rq, 0, sizeof(rq));
 80105ec:	2218      	movs	r2, #24
 80105ee:	2100      	movs	r1, #0
 80105f0:	a804      	add	r0, sp, #16
 80105f2:	f000 f875 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 80105f6:	b2e4      	uxtb	r4, r4
  rq.ogf = OGF_VENDOR_CMD;
 80105f8:	4b0b      	ldr	r3, [pc, #44]	; (8010628 <aci_gatt_update_char_value+0x7c>)
 80105fa:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
 80105fc:	f8ad 401c 	strh.w	r4, [sp, #28]
  rq.rparam = &status;
  rq.rlen = 1;
 8010600:	2301      	movs	r3, #1
  rq.rparam = &status;
 8010602:	f10d 040f 	add.w	r4, sp, #15

  if (hci_send_req(&rq, FALSE) < 0)
 8010606:	2100      	movs	r1, #0
 8010608:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 801060a:	9506      	str	r5, [sp, #24]
  rq.rparam = &status;
 801060c:	9408      	str	r4, [sp, #32]
  rq.rlen = 1;
 801060e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8010612:	f001 fa19 	bl	8011a48 <hci_send_req>
 8010616:	2800      	cmp	r0, #0
 8010618:	db04      	blt.n	8010624 <aci_gatt_update_char_value+0x78>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 801061a:	7820      	ldrb	r0, [r4, #0]
    return status;
  }

  return 0;
}
 801061c:	b04a      	add	sp, #296	; 0x128
 801061e:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8010620:	2042      	movs	r0, #66	; 0x42
 8010622:	e7fb      	b.n	801061c <aci_gatt_update_char_value+0x70>
    return BLE_STATUS_TIMEOUT;
 8010624:	20ff      	movs	r0, #255	; 0xff
 8010626:	e7f9      	b.n	801061c <aci_gatt_update_char_value+0x70>
 8010628:	0106003f 	.word	0x0106003f

0801062c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 801062c:	b530      	push	{r4, r5, lr}
 801062e:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8010630:	2cfd      	cmp	r4, #253	; 0xfd
{
 8010632:	b0c9      	sub	sp, #292	; 0x124
 8010634:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8010636:	d824      	bhi.n	8010682 <aci_hal_write_config_data+0x56>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  Osal_MemCpy(buffer + indx, val, len);
 8010638:	4622      	mov	r2, r4
  buffer[indx] = offset;
 801063a:	f88d 0020 	strb.w	r0, [sp, #32]
  Osal_MemCpy(buffer + indx, val, len);
 801063e:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8010642:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  Osal_MemCpy(buffer + indx, val, len);
 8010646:	f000 f849 	bl	80106dc <Osal_MemCpy>
  indx +=  len;
 801064a:	3402      	adds	r4, #2

  Osal_MemSet(&rq, 0, sizeof(rq));
 801064c:	2218      	movs	r2, #24
 801064e:	2100      	movs	r1, #0
 8010650:	a802      	add	r0, sp, #8
 8010652:	f000 f845 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8010656:	b2e4      	uxtb	r4, r4
  rq.ogf = OGF_VENDOR_CMD;
 8010658:	4b0c      	ldr	r3, [pc, #48]	; (801068c <aci_hal_write_config_data+0x60>)
 801065a:	9302      	str	r3, [sp, #8]
  rq.clen = indx;
 801065c:	f8ad 4014 	strh.w	r4, [sp, #20]
  rq.rparam = &status;
  rq.rlen = 1;
 8010660:	2301      	movs	r3, #1
  buffer[indx] = offset;
 8010662:	ad08      	add	r5, sp, #32
  rq.rparam = &status;
 8010664:	f10d 0407 	add.w	r4, sp, #7

  if (hci_send_req(&rq, FALSE) < 0)
 8010668:	2100      	movs	r1, #0
 801066a:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 801066c:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 801066e:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 8010670:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8010674:	f001 f9e8 	bl	8011a48 <hci_send_req>
 8010678:	2800      	cmp	r0, #0
 801067a:	db04      	blt.n	8010686 <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;

  return status;
 801067c:	7820      	ldrb	r0, [r4, #0]
}
 801067e:	b049      	add	sp, #292	; 0x124
 8010680:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8010682:	2042      	movs	r0, #66	; 0x42
 8010684:	e7fb      	b.n	801067e <aci_hal_write_config_data+0x52>
    return BLE_STATUS_TIMEOUT;
 8010686:	20ff      	movs	r0, #255	; 0xff
 8010688:	e7f9      	b.n	801067e <aci_hal_write_config_data+0x52>
 801068a:	bf00      	nop
 801068c:	000c003f 	.word	0x000c003f

08010690 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8010690:	b500      	push	{lr}
 8010692:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010694:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 8010696:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 801069a:	f88d 1005 	strb.w	r1, [sp, #5]
  Osal_MemSet(&rq, 0, sizeof(rq));
 801069e:	a802      	add	r0, sp, #8
 80106a0:	2100      	movs	r1, #0
 80106a2:	f000 f81d 	bl	80106e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80106a6:	4b0c      	ldr	r3, [pc, #48]	; (80106d8 <aci_hal_set_tx_power_level+0x48>)
 80106a8:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
  rq.cparam = &cp;
 80106aa:	ab01      	add	r3, sp, #4
 80106ac:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80106ae:	2302      	movs	r3, #2
 80106b0:	f8ad 3014 	strh.w	r3, [sp, #20]
  rq.rparam = &status;
 80106b4:	f10d 0303 	add.w	r3, sp, #3
 80106b8:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80106ba:	2100      	movs	r1, #0
  rq.rlen = 1;
 80106bc:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80106be:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80106c0:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80106c4:	f001 f9c0 	bl	8011a48 <hci_send_req>
 80106c8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80106ca:	bfac      	ite	ge
 80106cc:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80106d0:	20ff      	movlt	r0, #255	; 0xff
}
 80106d2:	b009      	add	sp, #36	; 0x24
 80106d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80106d8:	000f003f 	.word	0x000f003f

080106dc <Osal_MemCpy>:
 *               buffer
 * @retval Pointer to the destination buffer
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
    return(memcpy(dest,src,size)); 
 80106dc:	f003 bab0 	b.w	8013c40 <memcpy>

080106e0 <Osal_MemSet>:
 * @param  size : Number of bytes to be set to "value"
 * @retval Pointer to the filled block of memory
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
    return(memset(ptr,value,size));
 80106e0:	f003 babc 	b.w	8013c5c <memset>

080106e4 <LBS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void LBS_STM_Init(void)
{
 80106e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t uuid;
  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 80106e8:	485f      	ldr	r0, [pc, #380]	; (8010868 <LBS_STM_Init+0x184>)

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  	  uuid = testingtest_SVC_UUID;
      aci_gatt_add_serv(UUID_TYPE_16,
 80106ea:	4d60      	ldr	r5, [pc, #384]	; (801086c <LBS_STM_Init+0x188>)
{
 80106ec:	b088      	sub	sp, #32
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 80106ee:	f000 f959 	bl	80109a4 <SVCCTL_RegisterSvcHandler>
      aci_gatt_add_serv(UUID_TYPE_16,
 80106f2:	2201      	movs	r2, #1
  	  uuid = testingtest_SVC_UUID;
 80106f4:	f641 2331 	movw	r3, #6705	; 0x1a31
 80106f8:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_serv(UUID_TYPE_16,
 80106fc:	f10d 011e 	add.w	r1, sp, #30
 8010700:	9500      	str	r5, [sp, #0]
 8010702:	230e      	movs	r3, #14
 8010704:	4610      	mov	r0, r2
 8010706:	f7ff fea9 	bl	801045c <aci_gatt_add_serv>
                        (const uint8_t *) &uuid,
                        PRIMARY_SERVICE,
                        14,
                        &(testingtestContext.testing_Svc_Hdle));

      uuid = testingtest_SSID_UUID;
 801070a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 801070e:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8010712:	462b      	mov	r3, r5
 8010714:	2401      	movs	r4, #1
 8010716:	f833 0b02 	ldrh.w	r0, [r3], #2
 801071a:	9305      	str	r3, [sp, #20]
 801071c:	270a      	movs	r7, #10
 801071e:	f04f 0806 	mov.w	r8, #6
 8010722:	2600      	movs	r6, #0
 8010724:	231e      	movs	r3, #30
 8010726:	eb0d 0203 	add.w	r2, sp, r3
 801072a:	4621      	mov	r1, r4
 801072c:	e9cd 7403 	strd	r7, r4, [sp, #12]
 8010730:	e9cd 8600 	strd	r8, r6, [sp]
 8010734:	9402      	str	r4, [sp, #8]
 8010736:	f7ff fed3 	bl	80104e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_SSID_Hdle));

      uuid = testingtest_PW_UUID;
 801073a:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 801073e:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8010742:	462b      	mov	r3, r5
 8010744:	4621      	mov	r1, r4
 8010746:	f833 0b04 	ldrh.w	r0, [r3], #4
 801074a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 801074e:	231e      	movs	r3, #30
 8010750:	eb0d 0203 	add.w	r2, sp, r3
 8010754:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8010758:	e9cd 8600 	strd	r8, r6, [sp]
 801075c:	f7ff fec0 	bl	80104e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_PW_Hdle));

      uuid = testingtest_NAME_UUID;
 8010760:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 8010764:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8010768:	462b      	mov	r3, r5
 801076a:	4621      	mov	r1, r4
 801076c:	f833 0b06 	ldrh.w	r0, [r3], #6
 8010770:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8010774:	231e      	movs	r3, #30
 8010776:	eb0d 0203 	add.w	r2, sp, r3
 801077a:	e9cd 4702 	strd	r4, r7, [sp, #8]
 801077e:	e9cd 8600 	strd	r8, r6, [sp]
 8010782:	f7ff fead 	bl	80104e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_NAME_Hdle));

      uuid = testingtest_IP_UUID;
 8010786:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 801078a:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 801078e:	462b      	mov	r3, r5
 8010790:	f10d 021e 	add.w	r2, sp, #30
 8010794:	f833 0b08 	ldrh.w	r0, [r3], #8
 8010798:	4621      	mov	r1, r4
 801079a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 801079e:	e9cd 4702 	strd	r4, r7, [sp, #8]
 80107a2:	e9cd 8600 	strd	r8, r6, [sp]
 80107a6:	2304      	movs	r3, #4
 80107a8:	f7ff fe9a 	bl	80104e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_IP_Hdle));

      uuid = testingtest_OP_UUID;
 80107ac:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80107b0:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 80107b4:	462b      	mov	r3, r5
 80107b6:	f10d 021e 	add.w	r2, sp, #30
 80107ba:	f833 0b0a 	ldrh.w	r0, [r3], #10
 80107be:	4621      	mov	r1, r4
 80107c0:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80107c4:	e9cd 4702 	strd	r4, r7, [sp, #8]
 80107c8:	e9cd 8600 	strd	r8, r6, [sp]
 80107cc:	2303      	movs	r3, #3
 80107ce:	f7ff fe87 	bl	80104e0 <aci_gatt_add_char>
                            ATTR_PERMISSION_NONE,
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_OP_Hdle));
      uuid = testingtest_Save_UUID;
 80107d2:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 80107d6:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 80107da:	462b      	mov	r3, r5
 80107dc:	f10d 021e 	add.w	r2, sp, #30
 80107e0:	f833 0b0c 	ldrh.w	r0, [r3], #12
 80107e4:	4621      	mov	r1, r4
 80107e6:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80107ea:	e9cd 4702 	strd	r4, r7, [sp, #8]
 80107ee:	4623      	mov	r3, r4
 80107f0:	e9cd 8600 	strd	r8, r6, [sp]
 80107f4:	f7ff fe74 	bl	80104e0 <aci_gatt_add_char>
      //aci_gatt_write_charac_value(conn_handle, attr_handle, value_len, attr_value)

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    uuid = LED_BUTTON_SERVICE_UUID;
 80107f8:	f641 2330 	movw	r3, #6704	; 0x1a30
 80107fc:	f8ad 301e 	strh.w	r3, [sp, #30]
    aci_gatt_add_serv(UUID_TYPE_16,
 8010800:	f105 030e 	add.w	r3, r5, #14
 8010804:	9300      	str	r3, [sp, #0]
 8010806:	4622      	mov	r2, r4
 8010808:	4643      	mov	r3, r8
 801080a:	f10d 011e 	add.w	r1, sp, #30
 801080e:	4620      	mov	r0, r4
 8010810:	f7ff fe24 	bl	801045c <aci_gatt_add_serv>
                      &(aLedButtonContext.LedButtonSvcHdle));

    /**
     *  Add LED Characteristic
     */
    uuid = LED_CHAR_UUID;
 8010814:	f642 3350 	movw	r3, #11088	; 0x2b50
 8010818:	f8ad 301e 	strh.w	r3, [sp, #30]
   
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 801081c:	f105 0310 	add.w	r3, r5, #16
 8010820:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8010824:	f10d 021e 	add.w	r2, sp, #30
 8010828:	4621      	mov	r1, r4
 801082a:	e9cd 4702 	strd	r4, r7, [sp, #8]
 801082e:	e9cd 8600 	strd	r8, r6, [sp]
 8010832:	89e8      	ldrh	r0, [r5, #14]
 8010834:	2302      	movs	r3, #2
 8010836:	f7ff fe53 	bl	80104e0 <aci_gatt_add_char>
                      &(aLedButtonContext.LedsCharHdle));

    /**
     *   Add Button Characteristic
     */
    uuid = BUTTON_CHAR_UUID;
 801083a:	f642 3351 	movw	r3, #11089	; 0x2b51
 801083e:	f8ad 301e 	strh.w	r3, [sp, #30]
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 8010842:	f105 0312 	add.w	r3, r5, #18
 8010846:	e9cd 4304 	strd	r4, r3, [sp, #16]
 801084a:	2310      	movs	r3, #16
 801084c:	9300      	str	r3, [sp, #0]
 801084e:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8010852:	89e8      	ldrh	r0, [r5, #14]
 8010854:	9601      	str	r6, [sp, #4]
 8010856:	2302      	movs	r3, #2
 8010858:	f10d 021e 	add.w	r2, sp, #30
 801085c:	4621      	mov	r1, r4
 801085e:	f7ff fe3f 	bl	80104e0 <aci_gatt_add_char>
    
    APPL_MESG_DBG("-- Led Button Service (LBS) is added Successfully %04X\n", 
                 aLedButtonContext.LedButtonSvcHdle);

  return;
}
 8010862:	b008      	add	sp, #32
 8010864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010868:	08010899 	.word	0x08010899
 801086c:	20000064 	.word	0x20000064

08010870 <BLE_SVC_LedButton_Update_Char>:
 * 
 */
tBleStatus BLE_SVC_LedButton_Update_Char(uint16_t UUID, uint8_t *pPayload) //LED_BUTTON_Data_t *pDataValue)
{
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 8010870:	f642 3351 	movw	r3, #11089	; 0x2b51
 8010874:	4298      	cmp	r0, r3
{
 8010876:	b507      	push	{r0, r1, r2, lr}
  switch(UUID)
 8010878:	d10a      	bne.n	8010890 <BLE_SVC_LedButton_Update_Char+0x20>
  {
    case BUTTON_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aLedButtonContext.LedButtonSvcHdle,
 801087a:	4806      	ldr	r0, [pc, #24]	; (8010894 <BLE_SVC_LedButton_Update_Char+0x24>)
 801087c:	9100      	str	r1, [sp, #0]
 801087e:	8a41      	ldrh	r1, [r0, #18]
 8010880:	89c0      	ldrh	r0, [r0, #14]
 8010882:	2302      	movs	r3, #2
 8010884:	2200      	movs	r2, #0
 8010886:	f7ff fe91 	bl	80105ac <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}/* end LBS_STM_Init() */
 801088a:	b003      	add	sp, #12
 801088c:	f85d fb04 	ldr.w	pc, [sp], #4
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8010890:	2042      	movs	r0, #66	; 0x42
 8010892:	e7fa      	b.n	801088a <BLE_SVC_LedButton_Update_Char+0x1a>
 8010894:	20000064 	.word	0x20000064

08010898 <LedButton_Event_Handler>:
{
 8010898:	b530      	push	{r4, r5, lr}
  switch(event_pckt->evt)
 801089a:	7843      	ldrb	r3, [r0, #1]
 801089c:	2bff      	cmp	r3, #255	; 0xff
{
 801089e:	b085      	sub	sp, #20
 80108a0:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 80108a2:	d172      	bne.n	801098a <LedButton_Event_Handler+0xf2>
      switch(blue_evt->ecode)
 80108a4:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 80108a8:	f640 4301 	movw	r3, #3073	; 0xc01
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d16c      	bne.n	801098a <LedButton_Event_Handler+0xf2>
            if(attribute_modified->attr_handle == (testingtestContext.testing_SSID_Hdle + 1))
 80108b0:	4d37      	ldr	r5, [pc, #220]	; (8010990 <LedButton_Event_Handler+0xf8>)
 80108b2:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 80108b6:	886b      	ldrh	r3, [r5, #2]
 80108b8:	3301      	adds	r3, #1
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d10b      	bne.n	80108d6 <LedButton_Event_Handler+0x3e>
                          Notification.LBS_Evt_Opcode = POTATO_SSID_EVT;
 80108be:	2304      	movs	r3, #4
 80108c0:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 80108c4:	7a43      	ldrb	r3, [r0, #9]
 80108c6:	f88d 3008 	strb.w	r3, [sp, #8]
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 80108ca:	f100 030c 	add.w	r3, r0, #12
                          LBS_App_Notification(&Notification);
 80108ce:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 80108d0:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 80108d2:	f001 fc89 	bl	80121e8 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_PW_Hdle + 1))
 80108d6:	88ab      	ldrh	r3, [r5, #4]
 80108d8:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 80108dc:	3301      	adds	r3, #1
 80108de:	429a      	cmp	r2, r3
 80108e0:	d10b      	bne.n	80108fa <LedButton_Event_Handler+0x62>
                          Notification.LBS_Evt_Opcode = POTATO_PW_EVT;
 80108e2:	2305      	movs	r3, #5
 80108e4:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 80108e8:	7a63      	ldrb	r3, [r4, #9]
 80108ea:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 80108ee:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 80108f0:	f104 030c 	add.w	r3, r4, #12
 80108f4:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 80108f6:	f001 fc77 	bl	80121e8 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_NAME_Hdle + 1))
 80108fa:	88eb      	ldrh	r3, [r5, #6]
 80108fc:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8010900:	3301      	adds	r3, #1
 8010902:	429a      	cmp	r2, r3
 8010904:	d10b      	bne.n	801091e <LedButton_Event_Handler+0x86>
                          Notification.LBS_Evt_Opcode = POTATO_NAME_EVT;
 8010906:	2306      	movs	r3, #6
 8010908:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 801090c:	7a63      	ldrb	r3, [r4, #9]
 801090e:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 8010912:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8010914:	f104 030c 	add.w	r3, r4, #12
 8010918:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 801091a:	f001 fc65 	bl	80121e8 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_IP_Hdle + 1))
 801091e:	892b      	ldrh	r3, [r5, #8]
 8010920:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8010924:	3301      	adds	r3, #1
 8010926:	429a      	cmp	r2, r3
 8010928:	d10b      	bne.n	8010942 <LedButton_Event_Handler+0xaa>
                          Notification.LBS_Evt_Opcode = POTATO_IP_EVT;
 801092a:	2307      	movs	r3, #7
 801092c:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 8010930:	7a63      	ldrb	r3, [r4, #9]
 8010932:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 8010936:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8010938:	f104 030c 	add.w	r3, r4, #12
 801093c:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 801093e:	f001 fc53 	bl	80121e8 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_OP_Hdle + 1))
 8010942:	896b      	ldrh	r3, [r5, #10]
 8010944:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8010948:	3301      	adds	r3, #1
 801094a:	429a      	cmp	r2, r3
 801094c:	d10b      	bne.n	8010966 <LedButton_Event_Handler+0xce>
                          Notification.LBS_Evt_Opcode = POTATO_OP_EVT;
 801094e:	2308      	movs	r3, #8
 8010950:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 8010954:	7a63      	ldrb	r3, [r4, #9]
 8010956:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 801095a:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 801095c:	f104 030c 	add.w	r3, r4, #12
 8010960:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 8010962:	f001 fc41 	bl	80121e8 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_Save_Hdle + 1))
 8010966:	89ab      	ldrh	r3, [r5, #12]
 8010968:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 801096c:	3301      	adds	r3, #1
 801096e:	429a      	cmp	r2, r3
 8010970:	d10b      	bne.n	801098a <LedButton_Event_Handler+0xf2>
                          Notification.LBS_Evt_Opcode = POTATO_SAVE_EVT;
 8010972:	2309      	movs	r3, #9
 8010974:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8010978:	340c      	adds	r4, #12
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 801097a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 801097e:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 8010982:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8010984:	9401      	str	r4, [sp, #4]
                          LBS_App_Notification(&Notification);
 8010986:	f001 fc2f 	bl	80121e8 <LBS_App_Notification>
}/* end SVCCTL_EvtAckStatus_t */
 801098a:	2000      	movs	r0, #0
 801098c:	b005      	add	sp, #20
 801098e:	bd30      	pop	{r4, r5, pc}
 8010990:	20000064 	.word	0x20000064

08010994 <DIS_Init>:
/* Fake __Weak functions ------------------------------------------------------*/
/* This is a dirty trick to avoid putting compilation flags to say which service are included */	
/* If the related service is added in the project space its Init function will be used */
/* Otherwise the dummy __Weak function allow to avoid the compilatio error */

__weak void DIS_Init(uint16_t *p_options) {}
 8010994:	4770      	bx	lr

08010996 <HRS_Init>:
__weak void HRS_Init(void) {}
 8010996:	4770      	bx	lr

08010998 <ANS_Init>:
 8010998:	4770      	bx	lr

0801099a <HIDS_Init>:
 801099a:	4770      	bx	lr

0801099c <HPS_Init>:
 801099c:	4770      	bx	lr

0801099e <IPSS_Init>:
 801099e:	4770      	bx	lr

080109a0 <LNS_Init>:
 80109a0:	4770      	bx	lr

080109a2 <SCPS_Init>:
 80109a2:	4770      	bx	lr

080109a4 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler(SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler)
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80109a4:	4a03      	ldr	r2, [pc, #12]	; (80109b4 <SVCCTL_RegisterSvcHandler+0x10>)
 80109a6:	7a13      	ldrb	r3, [r2, #8]
 80109a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80109ac:	3301      	adds	r3, #1
 80109ae:	7213      	strb	r3, [r2, #8]

  return;
}
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	20000b00 	.word	0x20000b00

080109b8 <SVCCTL_HCI_UserEvtRx>:

  return;
}

void SVCCTL_HCI_UserEvtRx(void *pckt)
{
 80109b8:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch(event_pckt->evt)
 80109ba:	7843      	ldrb	r3, [r0, #1]
 80109bc:	2bff      	cmp	r3, #255	; 0xff
{
 80109be:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 80109c0:	d004      	beq.n	80109cc <SVCCTL_HCI_UserEvtRx+0x14>
  {
    /**
     *  The event has NOT been managed.
     *  It shall be passed to the application for processing
     */
    SVCCTL_App_Notification(pckt);
 80109c2:	4620      	mov	r0, r4

  }

  return;
}
 80109c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SVCCTL_App_Notification(pckt);
 80109c8:	f001 bb9e 	b.w	8012108 <SVCCTL_App_Notification>
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80109cc:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 80109d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80109d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80109d8:	d1f3      	bne.n	80109c2 <SVCCTL_HCI_UserEvtRx+0xa>
          for(index = 0; index <SVCCTL_EvtHandler.NbreOfRegisteredHandler ; index++)
 80109da:	4e0d      	ldr	r6, [pc, #52]	; (8010a10 <SVCCTL_HCI_UserEvtRx+0x58>)
 80109dc:	2500      	movs	r5, #0
 80109de:	7a32      	ldrb	r2, [r6, #8]
 80109e0:	b2eb      	uxtb	r3, r5
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d906      	bls.n	80109f4 <SVCCTL_HCI_UserEvtRx+0x3c>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80109e6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80109ea:	4620      	mov	r0, r4
 80109ec:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 80109ee:	3501      	adds	r5, #1
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d0f4      	beq.n	80109de <SVCCTL_HCI_UserEvtRx+0x26>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler ; index++)
 80109f4:	4e07      	ldr	r6, [pc, #28]	; (8010a14 <SVCCTL_HCI_UserEvtRx+0x5c>)
 80109f6:	2500      	movs	r5, #0
 80109f8:	7a32      	ldrb	r2, [r6, #8]
 80109fa:	b2eb      	uxtb	r3, r5
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d9e0      	bls.n	80109c2 <SVCCTL_HCI_UserEvtRx+0xa>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8010a00:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8010a04:	4620      	mov	r0, r4
 8010a06:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 8010a08:	3501      	adds	r5, #1
 8010a0a:	2800      	cmp	r0, #0
 8010a0c:	d0f4      	beq.n	80109f8 <SVCCTL_HCI_UserEvtRx+0x40>
}
 8010a0e:	bd70      	pop	{r4, r5, r6, pc}
 8010a10:	20000b00 	.word	0x20000b00
 8010a14:	20000af4 	.word	0x20000af4

08010a18 <SVCCTL_GetBdAddress>:
           instead of using the harcoded value in the config.h
  */
__weak const uint8_t* SVCCTL_GetBdAddress( void )
{
  return M_bd_addr;
}
 8010a18:	4800      	ldr	r0, [pc, #0]	; (8010a1c <SVCCTL_GetBdAddress+0x4>)
 8010a1a:	4770      	bx	lr
 8010a1c:	08013c88 	.word	0x08013c88

08010a20 <SVCCTL_Init>:
{
 8010a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const uint8_t mode = BLE_CFG_DATA_ROLE_MODE;
 8010a22:	2304      	movs	r3, #4
 8010a24:	f88d 3009 	strb.w	r3, [sp, #9]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8010a28:	4b1f      	ldr	r3, [pc, #124]	; (8010aa8 <SVCCTL_Init+0x88>)
 8010a2a:	2400      	movs	r4, #0
 8010a2c:	721c      	strb	r4, [r3, #8]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8010a2e:	4b1f      	ldr	r3, [pc, #124]	; (8010aac <SVCCTL_Init+0x8c>)
 8010a30:	721c      	strb	r4, [r3, #8]
  bd_addr = SVCCTL_GetBdAddress();
 8010a32:	f7ff fff1 	bl	8010a18 <SVCCTL_GetBdAddress>
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8010a36:	2106      	movs	r1, #6
  bd_addr = SVCCTL_GetBdAddress();
 8010a38:	4602      	mov	r2, r0
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	f7ff fdf6 	bl	801062c <aci_hal_write_config_data>
  aci_hal_write_config_data(CONFIG_DATA_MODE_OFFSET,
 8010a40:	f10d 0209 	add.w	r2, sp, #9
 8010a44:	2101      	movs	r1, #1
 8010a46:	202d      	movs	r0, #45	; 0x2d
 8010a48:	f7ff fdf0 	bl	801062c <aci_hal_write_config_data>
  aci_gatt_init();
 8010a4c:	f7ff fce8 	bl	8010420 <aci_gatt_init>
    aci_gap_init(role,
 8010a50:	f10d 030e 	add.w	r3, sp, #14
 8010a54:	9301      	str	r3, [sp, #4]
 8010a56:	ab03      	add	r3, sp, #12
 8010a58:	9300      	str	r3, [sp, #0]
 8010a5a:	4621      	mov	r1, r4
 8010a5c:	f10d 030a 	add.w	r3, sp, #10
 8010a60:	2207      	movs	r2, #7
 8010a62:	2001      	movs	r0, #1
 8010a64:	f7ff fbb0 	bl	80101c8 <aci_gap_init>
    if(aci_gatt_update_char_value(gap_service_handle,
 8010a68:	4b11      	ldr	r3, [pc, #68]	; (8010ab0 <SVCCTL_Init+0x90>)
 8010a6a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8010a6e:	9300      	str	r3, [sp, #0]
 8010a70:	4622      	mov	r2, r4
 8010a72:	2307      	movs	r3, #7
 8010a74:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8010a78:	f7ff fd98 	bl	80105ac <aci_gatt_update_char_value>
  HRS_Init();
 8010a7c:	f7ff ff8b 	bl	8010996 <HRS_Init>
  DIS_Init(NULL);
 8010a80:	4620      	mov	r0, r4
 8010a82:	f7ff ff87 	bl	8010994 <DIS_Init>
  SCPS_Init();
 8010a86:	f7ff ff8c 	bl	80109a2 <SCPS_Init>
  ANS_Init();
 8010a8a:	f7ff ff85 	bl	8010998 <ANS_Init>
HIDS_Init();
 8010a8e:	f7ff ff84 	bl	801099a <HIDS_Init>
LNS_Init();
 8010a92:	f7ff ff85 	bl	80109a0 <LNS_Init>
IPSS_Init();
 8010a96:	f7ff ff82 	bl	801099e <IPSS_Init>
HPS_Init();
 8010a9a:	f7ff ff7f 	bl	801099c <HPS_Init>
BLESVC_InitCustomSvc();
 8010a9e:	f001 fb62 	bl	8012166 <BLESVC_InitCustomSvc>
}
 8010aa2:	b004      	add	sp, #16
 8010aa4:	bd10      	pop	{r4, pc}
 8010aa6:	bf00      	nop
 8010aa8:	20000b00 	.word	0x20000b00
 8010aac:	20000af4 	.word	0x20000af4
 8010ab0:	08013cf8 	.word	0x08013cf8

08010ab4 <HW_SleepMode>:
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8010ab4:	4a03      	ldr	r2, [pc, #12]	; (8010ac4 <HW_SleepMode+0x10>)
 8010ab6:	6913      	ldr	r3, [r2, #16]
 8010ab8:	f023 0304 	bic.w	r3, r3, #4
 8010abc:	6113      	str	r3, [r2, #16]
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 8010abe:	bf30      	wfi

  return;
}
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	e000ed00 	.word	0xe000ed00

08010ac8 <HW_StopMode>:
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8010ac8:	4a06      	ldr	r2, [pc, #24]	; (8010ae4 <HW_StopMode+0x1c>)
 8010aca:	6813      	ldr	r3, [r2, #0]
 8010acc:	f023 0307 	bic.w	r3, r3, #7
 8010ad0:	4318      	orrs	r0, r3
 8010ad2:	6010      	str	r0, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8010ad4:	4a04      	ldr	r2, [pc, #16]	; (8010ae8 <HW_StopMode+0x20>)
 8010ad6:	6913      	ldr	r3, [r2, #16]
 8010ad8:	f043 0304 	orr.w	r3, r3, #4
 8010adc:	6113      	str	r3, [r2, #16]
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 8010ade:	bf30      	wfi

  return;
}
 8010ae0:	4770      	bx	lr
 8010ae2:	bf00      	nop
 8010ae4:	40007000 	.word	0x40007000
 8010ae8:	e000ed00 	.word	0xe000ed00

08010aec <HW_OffMode>:
 8010aec:	f7ff bfec 	b.w	8010ac8 <HW_StopMode>

08010af0 <pf_nRFResetTimerCallBack>:
 * @param  None
 * @retval None
 */
static void pf_nRFResetTimerCallBack(void)
{
  RfResetTimerLock = 0;
 8010af0:	4b01      	ldr	r3, [pc, #4]	; (8010af8 <pf_nRFResetTimerCallBack+0x8>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	701a      	strb	r2, [r3, #0]

  return;
}
 8010af6:	4770      	bx	lr
 8010af8:	20000078 	.word	0x20000078

08010afc <TimerTxRxCallback>:
 * @param  None
 * @retval None
 */
static void TimerTxRxCallback(void)
{
  pTimerTxRxCallback();
 8010afc:	4b01      	ldr	r3, [pc, #4]	; (8010b04 <TimerTxRxCallback+0x8>)
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	4718      	bx	r3
 8010b02:	bf00      	nop
 8010b04:	20000078 	.word	0x20000078

08010b08 <Enable_SPI_CS>:
 * @retval None
 */
static void Enable_SPI_CS(void)
{
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8010b08:	4802      	ldr	r0, [pc, #8]	; (8010b14 <Enable_SPI_CS+0xc>)
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010b10:	f002 bad2 	b.w	80130b8 <HAL_GPIO_WritePin>
 8010b14:	48000c00 	.word	0x48000c00

08010b18 <Disable_SPI_CS>:
 * @param  None
 * @retval None
 */
static void Disable_SPI_CS(void)
{
  while (__HAL_SPI_GET_FLAG(&SpiHandle,SPI_FLAG_BSY) == SET);
 8010b18:	4b05      	ldr	r3, [pc, #20]	; (8010b30 <Disable_SPI_CS+0x18>)
 8010b1a:	689a      	ldr	r2, [r3, #8]
 8010b1c:	6893      	ldr	r3, [r2, #8]
 8010b1e:	061b      	lsls	r3, r3, #24
 8010b20:	d4fc      	bmi.n	8010b1c <Disable_SPI_CS+0x4>

  /* CS set */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8010b22:	4804      	ldr	r0, [pc, #16]	; (8010b34 <Disable_SPI_CS+0x1c>)
 8010b24:	2201      	movs	r2, #1
 8010b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010b2a:	f002 bac5 	b.w	80130b8 <HAL_GPIO_WritePin>
 8010b2e:	bf00      	nop
 8010b30:	20000078 	.word	0x20000078
 8010b34:	48000c00 	.word	0x48000c00

08010b38 <DisableEnable_SPI_CS>:
 * @brief  Disable and Enable SPI CS.
 * @param  None
 * @retval None
 */
static void DisableEnable_SPI_CS(void)
{
 8010b38:	b508      	push	{r3, lr}
  uint8_t localloop;
  Disable_SPI_CS(); /**< CS Set */
 8010b3a:	f7ff ffed 	bl	8010b18 <Disable_SPI_CS>
 8010b3e:	230d      	movs	r3, #13

  /* CS set */
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
  {
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 8010b40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010b44:	3b01      	subs	r3, #1
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 8010b46:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 8010b4a:	6811      	ldr	r1, [r2, #0]
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 8010b4c:	d1fa      	bne.n	8010b44 <DisableEnable_SPI_CS+0xc>
  }

  Enable_SPI_CS(); /**< CS Reset */

  return;
}
 8010b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Enable_SPI_CS(); /**< CS Reset */
 8010b52:	f7ff bfd9 	b.w	8010b08 <Enable_SPI_CS>
	...

08010b58 <Enable_SPI_Receiving_Path>:
{  
 8010b58:	b538      	push	{r3, r4, r5, lr}
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 8010b5a:	4c09      	ldr	r4, [pc, #36]	; (8010b80 <Enable_SPI_Receiving_Path+0x28>)
 8010b5c:	2540      	movs	r5, #64	; 0x40
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 8010b5e:	2017      	movs	r0, #23
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 8010b60:	6165      	str	r5, [r4, #20]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 8010b62:	f001 ffc9 	bl	8012af8 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
 8010b66:	2017      	movs	r0, #23
 8010b68:	f001 ff94 	bl	8012a94 <HAL_NVIC_EnableIRQ>
  if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_SET)
 8010b6c:	4805      	ldr	r0, [pc, #20]	; (8010b84 <Enable_SPI_Receiving_Path+0x2c>)
 8010b6e:	4629      	mov	r1, r5
 8010b70:	f002 fa9c 	bl	80130ac <HAL_GPIO_ReadPin>
 8010b74:	2801      	cmp	r0, #1
    __HAL_GPIO_EXTI_GENERATE_SWIT(BNRG_SPI_IRQ_PIN);
 8010b76:	bf02      	ittt	eq
 8010b78:	6923      	ldreq	r3, [r4, #16]
 8010b7a:	432b      	orreq	r3, r5
 8010b7c:	6123      	streq	r3, [r4, #16]
}
 8010b7e:	bd38      	pop	{r3, r4, r5, pc}
 8010b80:	40010400 	.word	0x40010400
 8010b84:	48001000 	.word	0x48001000

08010b88 <LL_DMA_SetDataLength.constprop.0>:
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8010b88:	4b05      	ldr	r3, [pc, #20]	; (8010ba0 <LL_DMA_SetDataLength.constprop.0+0x18>)
 8010b8a:	5c1a      	ldrb	r2, [r3, r0]
 8010b8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8010b90:	f502 3201 	add.w	r2, r2, #132096	; 0x20400
 8010b94:	6853      	ldr	r3, [r2, #4]
 8010b96:	0c1b      	lsrs	r3, r3, #16
 8010b98:	041b      	lsls	r3, r3, #16
 8010b9a:	4319      	orrs	r1, r3
 8010b9c:	6051      	str	r1, [r2, #4]
             DMA_CNDTR_NDT, NbData);
}
 8010b9e:	4770      	bx	lr
 8010ba0:	08013c8e 	.word	0x08013c8e

08010ba4 <ReceiveHeader>:
 *               the configuration information for SPI module.
 * @param  DataHeader: buffer holding the header to receive
 * @retval None
 */
static void ReceiveHeader(SPI_RECEIVE_EVENT_t ReceiveEvent, uint8_t * DataHeader)
{
 8010ba4:	b570      	push	{r4, r5, r6, lr}
  SpiContext.SpiReceiveContext.SpiReceiveEvent = ReceiveEvent;
 8010ba6:	4c0b      	ldr	r4, [pc, #44]	; (8010bd4 <ReceiveHeader+0x30>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8010ba8:	4d0b      	ldr	r5, [pc, #44]	; (8010bd8 <ReceiveHeader+0x34>)
 8010baa:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
 8010bae:	682b      	ldr	r3, [r5, #0]
 8010bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bb4:	602b      	str	r3, [r5, #0]
{
 8010bb6:	460e      	mov	r6, r1
  LL_DMA_SetMemoryIncMode(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, LL_DMA_MEMORY_INCREMENT);  /**< Configure DMA to send Tx packet */

  /*
   *  Set counter in both DMA
   */
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, HEADER_SIZE);
 8010bb8:	2001      	movs	r0, #1
 8010bba:	2105      	movs	r1, #5
 8010bbc:	f7ff ffe4 	bl	8010b88 <LL_DMA_SetDataLength.constprop.0>
  LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, HEADER_SIZE);
 8010bc0:	2105      	movs	r1, #5
 8010bc2:	2000      	movs	r0, #0
 8010bc4:	f7ff ffe0 	bl	8010b88 <LL_DMA_SetDataLength.constprop.0>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8010bc8:	4b04      	ldr	r3, [pc, #16]	; (8010bdc <ReceiveHeader+0x38>)

  /*
   *  Set memory address in both DMA
   */
  LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)ReceivedHeader);
 8010bca:	348c      	adds	r4, #140	; 0x8c
 8010bcc:	60dc      	str	r4, [r3, #12]
 8010bce:	60ee      	str	r6, [r5, #12]
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)DataHeader);

  return;
}
 8010bd0:	bd70      	pop	{r4, r5, r6, pc}
 8010bd2:	bf00      	nop
 8010bd4:	20000078 	.word	0x20000078
 8010bd8:	4002041c 	.word	0x4002041c
 8010bdc:	40020408 	.word	0x40020408

08010be0 <SPI_Receive_Manager>:
{
 8010be0:	b570      	push	{r4, r5, r6, lr}
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8010be2:	4c36      	ldr	r4, [pc, #216]	; (8010cbc <SPI_Receive_Manager+0xdc>)
 8010be4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010be6:	6812      	ldr	r2, [r2, #0]
 8010be8:	6811      	ldr	r1, [r2, #0]
 8010bea:	f021 0101 	bic.w	r1, r1, #1
 8010bee:	6011      	str	r1, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8010bf0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8010bf2:	6809      	ldr	r1, [r1, #0]
 8010bf4:	680d      	ldr	r5, [r1, #0]
 8010bf6:	f025 0501 	bic.w	r5, r5, #1
 8010bfa:	600d      	str	r5, [r1, #0]
    *(volatile uint8_t*)LL_SPI_DMA_GetRegAddr(BNRG_SPI_INSTANCE);
 8010bfc:	4d30      	ldr	r5, [pc, #192]	; (8010cc0 <SPI_Receive_Manager+0xe0>)
 8010bfe:	7b2e      	ldrb	r6, [r5, #12]
 8010c00:	7b2e      	ldrb	r6, [r5, #12]
 8010c02:	7b2e      	ldrb	r6, [r5, #12]
 8010c04:	7b2d      	ldrb	r5, [r5, #12]
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmarx, DMA_IT_TC);  /**< Enable Receive packet notification */
 8010c06:	680d      	ldr	r5, [r1, #0]
 8010c08:	f045 0502 	orr.w	r5, r5, #2
 8010c0c:	600d      	str	r5, [r1, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 8010c0e:	6811      	ldr	r1, [r2, #0]
  switch (ReceiveRequest)
 8010c10:	2801      	cmp	r0, #1
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 8010c12:	f021 0102 	bic.w	r1, r1, #2
 8010c16:	6011      	str	r1, [r2, #0]
  switch (ReceiveRequest)
 8010c18:	d012      	beq.n	8010c40 <SPI_Receive_Manager+0x60>
 8010c1a:	2802      	cmp	r0, #2
 8010c1c:	d012      	beq.n	8010c44 <SPI_Receive_Manager+0x64>
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_RX, (uint8_t *)ReadHeaderCmd);
 8010c1e:	4929      	ldr	r1, [pc, #164]	; (8010cc4 <SPI_Receive_Manager+0xe4>)
 8010c20:	2000      	movs	r0, #0
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 8010c22:	f7ff ffbf 	bl	8010ba4 <ReceiveHeader>
  __HAL_DMA_ENABLE(SpiHandle.hdmarx);
 8010c26:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	6813      	ldr	r3, [r2, #0]
 8010c2c:	f043 0301 	orr.w	r3, r3, #1
 8010c30:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx);
 8010c32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	6813      	ldr	r3, [r2, #0]
 8010c38:	f043 0301 	orr.w	r3, r3, #1
 8010c3c:	6013      	str	r3, [r2, #0]
}
 8010c3e:	bd70      	pop	{r4, r5, r6, pc}
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 8010c40:	4921      	ldr	r1, [pc, #132]	; (8010cc8 <SPI_Receive_Manager+0xe8>)
 8010c42:	e7ee      	b.n	8010c22 <SPI_Receive_Manager+0x42>
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 8010c44:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 8010c48:	f8b4 5078 	ldrh.w	r5, [r4, #120]	; 0x78
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 8010c4c:	2b01      	cmp	r3, #1
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8010c4e:	bf1b      	ittet	ne
 8010c50:	f894 308f 	ldrbne.w	r3, [r4, #143]	; 0x8f
 8010c54:	f894 2090 	ldrbne.w	r2, [r4, #144]	; 0x90
        byte_count = SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive;
 8010c58:	f8b4 307a 	ldrheq.w	r3, [r4, #122]	; 0x7a
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8010c5c:	ea43 2302 	orrne.w	r3, r3, r2, lsl #8
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive = byte_count;
 8010c60:	bf18      	it	ne
 8010c62:	f8a4 307a 	strhne.w	r3, [r4, #122]	; 0x7a
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 8010c66:	429d      	cmp	r5, r3
 8010c68:	d21f      	bcs.n	8010caa <SPI_Receive_Manager+0xca>
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive -= byte_count;
 8010c6a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
 8010c6e:	1b5b      	subs	r3, r3, r5
 8010c70:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_PAYLOAD_CONT;
 8010c74:	2302      	movs	r3, #2
 8010c76:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        SpiContext.SpiReceiveContext.PacketCont = TRUE;
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8010c80:	4e12      	ldr	r6, [pc, #72]	; (8010ccc <SPI_Receive_Manager+0xec>)
      SpiContext.SpiReceiveContext.PayloadLength = byte_count;
 8010c82:	f8a4 5072 	strh.w	r5, [r4, #114]	; 0x72
 8010c86:	6833      	ldr	r3, [r6, #0]
 8010c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c8c:	6033      	str	r3, [r6, #0]
      LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, byte_count);
 8010c8e:	4629      	mov	r1, r5
 8010c90:	2000      	movs	r0, #0
 8010c92:	f7ff ff79 	bl	8010b88 <LL_DMA_SetDataLength.constprop.0>
      LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, byte_count);
 8010c96:	4629      	mov	r1, r5
 8010c98:	2001      	movs	r0, #1
 8010c9a:	f7ff ff75 	bl	8010b88 <LL_DMA_SetDataLength.constprop.0>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8010c9e:	4b0c      	ldr	r3, [pc, #48]	; (8010cd0 <SPI_Receive_Manager+0xf0>)
      LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)SpiContext.SpiReceiveContext.pBuffer);
 8010ca0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8010ca2:	60da      	str	r2, [r3, #12]
      LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)&DummyBytes);
 8010ca4:	4b0b      	ldr	r3, [pc, #44]	; (8010cd4 <SPI_Receive_Manager+0xf4>)
 8010ca6:	60f3      	str	r3, [r6, #12]
}
 8010ca8:	e7bd      	b.n	8010c26 <SPI_Receive_Manager+0x46>
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_END;
 8010caa:	2203      	movs	r2, #3
 8010cac:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
 8010cb6:	461d      	mov	r5, r3
 8010cb8:	e7e2      	b.n	8010c80 <SPI_Receive_Manager+0xa0>
 8010cba:	bf00      	nop
 8010cbc:	20000078 	.word	0x20000078
 8010cc0:	40003c00 	.word	0x40003c00
 8010cc4:	08013c95 	.word	0x08013c95
 8010cc8:	08013c9a 	.word	0x08013c9a
 8010ccc:	4002041c 	.word	0x4002041c
 8010cd0:	40020408 	.word	0x40020408
 8010cd4:	08013c9f 	.word	0x08013c9f

08010cd8 <TimerTransmitCallback>:
{
 8010cd8:	b508      	push	{r3, lr}
  SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 8010cda:	2001      	movs	r0, #1
 8010cdc:	f7ff ff80 	bl	8010be0 <SPI_Receive_Manager>
}
 8010ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_En);
 8010ce4:	2101      	movs	r1, #1
 8010ce6:	2000      	movs	r0, #0
 8010ce8:	f001 b862 	b.w	8011db0 <LPM_SetStopMode>

08010cec <HAL_SPI_MspInit>:
{
 8010cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 8010cf0:	6802      	ldr	r2, [r0, #0]
 8010cf2:	4b6d      	ldr	r3, [pc, #436]	; (8010ea8 <HAL_SPI_MspInit+0x1bc>)
 8010cf4:	429a      	cmp	r2, r3
{
 8010cf6:	b08d      	sub	sp, #52	; 0x34
 8010cf8:	4606      	mov	r6, r0
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 8010cfa:	f040 80d1 	bne.w	8010ea0 <HAL_SPI_MspInit+0x1b4>
    BNRG_SPI_SCLK_CLK_ENABLE();
 8010cfe:	4c6b      	ldr	r4, [pc, #428]	; (8010eac <HAL_SPI_MspInit+0x1c0>)
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 8010d00:	486b      	ldr	r0, [pc, #428]	; (8010eb0 <HAL_SPI_MspInit+0x1c4>)
    BNRG_SPI_SCLK_CLK_ENABLE();
 8010d02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010d04:	f043 0304 	orr.w	r3, r3, #4
 8010d08:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010d0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010d0c:	f003 0304 	and.w	r3, r3, #4
 8010d10:	9300      	str	r3, [sp, #0]
 8010d12:	9b00      	ldr	r3, [sp, #0]
    BNRG_SPI_MISO_CLK_ENABLE();
 8010d14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010d16:	f043 0304 	orr.w	r3, r3, #4
 8010d1a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010d1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010d1e:	f003 0304 	and.w	r3, r3, #4
 8010d22:	9301      	str	r3, [sp, #4]
 8010d24:	9b01      	ldr	r3, [sp, #4]
    BNRG_SPI_MOSI_CLK_ENABLE();
 8010d26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010d28:	f043 0304 	orr.w	r3, r3, #4
 8010d2c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010d2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010d30:	f003 0304 	and.w	r3, r3, #4
 8010d34:	9302      	str	r3, [sp, #8]
 8010d36:	9b02      	ldr	r3, [sp, #8]
    BNRG_SPI_CS_CLK_ENABLE();
 8010d38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010d3a:	f043 0308 	orr.w	r3, r3, #8
 8010d3e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010d40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010d42:	f003 0308 	and.w	r3, r3, #8
 8010d46:	9303      	str	r3, [sp, #12]
 8010d48:	9b03      	ldr	r3, [sp, #12]
    BNRG_SPI_IRQ_CLK_ENABLE();
 8010d4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010d4c:	f043 0310 	orr.w	r3, r3, #16
 8010d50:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010d52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010d54:	f003 0310 	and.w	r3, r3, #16
 8010d58:	9304      	str	r3, [sp, #16]
 8010d5a:	9b04      	ldr	r3, [sp, #16]
    BNRG_SPI_CLK_ENABLE();
 8010d5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d62:	65a3      	str	r3, [r4, #88]	; 0x58
 8010d64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 8010d6c:	2500      	movs	r5, #0
 8010d6e:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 8010d70:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 8010d74:	f04f 0906 	mov.w	r9, #6
    BNRG_SPI_CLK_ENABLE();
 8010d78:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 8010d7a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 8010d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d80:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 8010d84:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 8010d88:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 8010d8c:	f002 f8b0 	bl	8012ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
 8010d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8010d94:	4846      	ldr	r0, [pc, #280]	; (8010eb0 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
 8010d96:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8010d9a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
 8010d9c:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
 8010da0:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8010da4:	f002 f8a4 	bl	8012ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
 8010da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 8010dac:	4840      	ldr	r0, [pc, #256]	; (8010eb0 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
 8010dae:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 8010db2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
 8010db4:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
 8010db8:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 8010dbc:	f002 f898 	bl	8012ef0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	483c      	ldr	r0, [pc, #240]	; (8010eb4 <HAL_SPI_MspInit+0x1c8>)
 8010dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010dc8:	f002 f976 	bl	80130b8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 8010dcc:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8010dd0:	f04f 0a01 	mov.w	sl, #1
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8010dd4:	4837      	ldr	r0, [pc, #220]	; (8010eb4 <HAL_SPI_MspInit+0x1c8>)
    GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
 8010dd6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8010dd8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
 8010dda:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 8010dde:	e9cd ba07 	strd	fp, sl, [sp, #28]
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8010de2:	f002 f885 	bl	8012ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8010de6:	4b34      	ldr	r3, [pc, #208]	; (8010eb8 <HAL_SPI_MspInit+0x1cc>)
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8010de8:	4834      	ldr	r0, [pc, #208]	; (8010ebc <HAL_SPI_MspInit+0x1d0>)
    GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
 8010dea:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8010dec:	2240      	movs	r2, #64	; 0x40
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8010dee:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8010df0:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
 8010df4:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8010df8:	f002 f87a 	bl	8012ef0 <HAL_GPIO_Init>
    BNRG_DMA_CLK_ENABLE();   
 8010dfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8010dfe:	4930      	ldr	r1, [pc, #192]	; (8010ec0 <HAL_SPI_MspInit+0x1d4>)
    BNRG_DMA_CLK_ENABLE();   
 8010e00:	ea43 0308 	orr.w	r3, r3, r8
 8010e04:	64a3      	str	r3, [r4, #72]	; 0x48
 8010e06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 8010e08:	4c2e      	ldr	r4, [pc, #184]	; (8010ec4 <HAL_SPI_MspInit+0x1d8>)
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8010e0a:	46a1      	mov	r9, r4
    BNRG_DMA_CLK_ENABLE();   
 8010e0c:	ea03 0308 	and.w	r3, r3, r8
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8010e10:	f849 1f94 	str.w	r1, [r9, #148]!
    BNRG_DMA_CLK_ENABLE();   
 8010e14:	9306      	str	r3, [sp, #24]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8010e16:	2280      	movs	r2, #128	; 0x80
    BNRG_DMA_CLK_ENABLE();   
 8010e18:	9b06      	ldr	r3, [sp, #24]
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 8010e1a:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8010e1e:	2310      	movs	r3, #16
    HAL_DMA_Init(&hdma_tx);   
 8010e20:	4648      	mov	r0, r9
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8010e22:	e9c4 3527 	strd	r3, r5, [r4, #156]	; 0x9c
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010e26:	e9c4 2529 	strd	r2, r5, [r4, #164]	; 0xa4
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8010e2a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
    hdma_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8010e2e:	f8c4 b0b4 	str.w	fp, [r4, #180]	; 0xb4
    HAL_DMA_Init(&hdma_tx);   
 8010e32:	f001 fe71 	bl	8012b18 <HAL_DMA_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8010e36:	4922      	ldr	r1, [pc, #136]	; (8010ec0 <HAL_SPI_MspInit+0x1d4>)
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
  return (uint32_t) &(SPIx->DR);
 8010e38:	4b23      	ldr	r3, [pc, #140]	; (8010ec8 <HAL_SPI_MspInit+0x1dc>)
 8010e3a:	608b      	str	r3, [r1, #8]
    hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8010e3c:	e9c4 7538 	strd	r7, r5, [r4, #224]	; 0xe0
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 8010e40:	4627      	mov	r7, r4
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 8010e42:	f8c6 9054 	str.w	r9, [r6, #84]	; 0x54
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 8010e46:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8010ecc <HAL_SPI_MspInit+0x1e0>
 8010e4a:	f847 9fdc 	str.w	r9, [r7, #220]!
    hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8010e4e:	2280      	movs	r2, #128	; 0x80
    HAL_DMA_Init(&hdma_rx);
 8010e50:	4638      	mov	r0, r7
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010e52:	e9c4 253b 	strd	r2, r5, [r4, #236]	; 0xec
    hdma_rx.Init.Mode                = DMA_NORMAL;
 8010e56:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 8010e5a:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
    hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8010e5e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8010e62:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
    HAL_DMA_Init(&hdma_rx);
 8010e66:	f001 fe57 	bl	8012b18 <HAL_DMA_Init>
 8010e6a:	4b17      	ldr	r3, [pc, #92]	; (8010ec8 <HAL_SPI_MspInit+0x1dc>)
 8010e6c:	f8c9 3008 	str.w	r3, [r9, #8]
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 8010e70:	462a      	mov	r2, r5
 8010e72:	4651      	mov	r1, sl
 8010e74:	2039      	movs	r0, #57	; 0x39
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx); 
 8010e76:	65b7      	str	r7, [r6, #88]	; 0x58
 8010e78:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 8010e7c:	f001 fdd8 	bl	8012a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_TX_IRQn);
 8010e80:	2039      	movs	r0, #57	; 0x39
 8010e82:	f001 fe07 	bl	8012a94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_RX_IRQn, 
 8010e86:	462a      	mov	r2, r5
 8010e88:	4651      	mov	r1, sl
 8010e8a:	2038      	movs	r0, #56	; 0x38
 8010e8c:	f001 fdd0 	bl	8012a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_RX_IRQn);
 8010e90:	2038      	movs	r0, #56	; 0x38
 8010e92:	f001 fdff 	bl	8012a94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BNRG_SPI_EXTI_IRQn, 
 8010e96:	462a      	mov	r2, r5
 8010e98:	4641      	mov	r1, r8
 8010e9a:	2017      	movs	r0, #23
 8010e9c:	f001 fdc8 	bl	8012a30 <HAL_NVIC_SetPriority>
}
 8010ea0:	b00d      	add	sp, #52	; 0x34
 8010ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea6:	bf00      	nop
 8010ea8:	40003c00 	.word	0x40003c00
 8010eac:	40021000 	.word	0x40021000
 8010eb0:	48000800 	.word	0x48000800
 8010eb4:	48000c00 	.word	0x48000c00
 8010eb8:	10110000 	.word	0x10110000
 8010ebc:	48001000 	.word	0x48001000
 8010ec0:	4002041c 	.word	0x4002041c
 8010ec4:	20000078 	.word	0x20000078
 8010ec8:	40003c0c 	.word	0x40003c0c
 8010ecc:	40020408 	.word	0x40020408

08010ed0 <HW_BNRG_Init>:
  return;
}


void HW_BNRG_Init(HW_BNRG_InitMode_t InitMode)
{
 8010ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
  hspi->Instance = BNRG_SPI_INSTANCE;
 8010ed2:	4c44      	ldr	r4, [pc, #272]	; (8010fe4 <HW_BNRG_Init+0x114>)
  hspi->Init.Mode = BNRG_SPI_MODE;
 8010ed4:	4e44      	ldr	r6, [pc, #272]	; (8010fe8 <HW_BNRG_Init+0x118>)
 8010ed6:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 8010eda:	2500      	movs	r5, #0
  hspi->Init.Mode = BNRG_SPI_MODE;
 8010edc:	e9c4 6302 	strd	r6, r3, [r4, #8]
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 8010ee0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8010ee4:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hspi->Init.NSS = BNRG_SPI_NSS;
 8010ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010eec:	6223      	str	r3, [r4, #32]
{
 8010eee:	b089      	sub	sp, #36	; 0x24
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8010ef0:	2307      	movs	r3, #7
{
 8010ef2:	4607      	mov	r7, r0
  HAL_SPI_Init(hspi);
 8010ef4:	f104 0008 	add.w	r0, r4, #8
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8010ef8:	6363      	str	r3, [r4, #52]	; 0x34
  hspi->Init.CLKPhase = BNRG_SPI_CLKPHASE;
 8010efa:	e9c4 5506 	strd	r5, r5, [r4, #24]
  hspi->Init.TIMode = BNRG_SPI_TIMODE;
 8010efe:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hspi->Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 8010f02:	6265      	str	r5, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 8010f04:	6325      	str	r5, [r4, #48]	; 0x30
  HAL_SPI_Init(hspi);
 8010f06:	f002 fd6c 	bl	80139e2 <HAL_SPI_Init>
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8010f0a:	6873      	ldr	r3, [r6, #4]
  SPI_Init(&SpiHandle);

  LL_SPI_EnableDMAReq_TX(BNRG_SPI_INSTANCE);
  LL_SPI_EnableDMAReq_RX(BNRG_SPI_INSTANCE);

  __HAL_SPI_ENABLE(&SpiHandle);
 8010f0c:	68a2      	ldr	r2, [r4, #8]
 8010f0e:	f043 0302 	orr.w	r3, r3, #2
 8010f12:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8010f14:	6873      	ldr	r3, [r6, #4]
 8010f16:	f043 0301 	orr.w	r3, r3, #1
 8010f1a:	6073      	str	r3, [r6, #4]
 8010f1c:	6813      	ldr	r3, [r2, #0]

  SpiContext.SpiReceiveContext.PacketCont = FALSE;
  SpiContext.SpiTransmitContext.RequestPending = FALSE;
 8010f1e:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
  __HAL_SPI_ENABLE(&SpiHandle);
 8010f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8010f26:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_SPI_ENABLE(&SpiHandle);
 8010f2a:	6013      	str	r3, [r2, #0]
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 8010f2c:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8010f30:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;

  if(InitMode != HW_BNRG_Limited)
 8010f34:	2f00      	cmp	r7, #0
 8010f36:	d044      	beq.n	8010fc2 <HW_BNRG_Init+0xf2>
  *         @arg @ref LL_PWR_WAKEUP_PIN5
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityHigh(uint32_t WakeUpPin)
{
  CLEAR_BIT(PWR->CR4, WakeUpPin);
 8010f38:	4a2c      	ldr	r2, [pc, #176]	; (8010fec <HW_BNRG_Init+0x11c>)
 8010f3a:	68d3      	ldr	r3, [r2, #12]
 8010f3c:	f023 0301 	bic.w	r3, r3, #1
 8010f40:	60d3      	str	r3, [r2, #12]
  {
    LL_PWR_SetWakeUpPinPolarityHigh(BNRG_SPI_IRQ_WAKEUP_PIN);

    HW_TS_Create(CFG_TimProcID_isr, &TxRxTimerId, hw_ts_SingleShot, TimerTxRxCallback);
 8010f42:	f504 7192 	add.w	r1, r4, #292	; 0x124
 8010f46:	4b2a      	ldr	r3, [pc, #168]	; (8010ff0 <HW_BNRG_Init+0x120>)
 8010f48:	462a      	mov	r2, r5
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	f000 fad2 	bl	80114f4 <HW_TS_Create>
  GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
 8010f50:	2701      	movs	r7, #1
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8010f52:	4b28      	ldr	r3, [pc, #160]	; (8010ff4 <HW_BNRG_Init+0x124>)
  GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
 8010f54:	9603      	str	r6, [sp, #12]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8010f56:	462a      	mov	r2, r5
 8010f58:	f10d 0107 	add.w	r1, sp, #7
 8010f5c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
 8010f5e:	e9cd 7504 	strd	r7, r5, [sp, #16]
  GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
 8010f62:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
 8010f64:	9507      	str	r5, [sp, #28]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8010f66:	f000 fac5 	bl	80114f4 <HW_TS_Create>
  BNRG_SPI_RESET_CLK_ENABLE();
 8010f6a:	4b23      	ldr	r3, [pc, #140]	; (8010ff8 <HW_BNRG_Init+0x128>)
 8010f6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f6e:	433a      	orrs	r2, r7
 8010f70:	64da      	str	r2, [r3, #76]	; 0x4c
 8010f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f74:	403b      	ands	r3, r7
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 8010f76:	462a      	mov	r2, r5
  BNRG_SPI_RESET_CLK_ENABLE();
 8010f78:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 8010f7a:	4631      	mov	r1, r6
 8010f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  BNRG_SPI_RESET_CLK_ENABLE();
 8010f80:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 8010f82:	f002 f899 	bl	80130b8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);
 8010f86:	a903      	add	r1, sp, #12
 8010f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010f8c:	f001 ffb0 	bl	8012ef0 <HAL_GPIO_Init>
  HW_TS_Start(ubnRFResetTimerID, BLUENRG_HOLD_TIME_IN_RESET);
 8010f90:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010f94:	211c      	movs	r1, #28
 8010f96:	f000 fba9 	bl	80116ec <HW_TS_Start>
  RfResetTimerLock = 1;
 8010f9a:	7027      	strb	r7, [r4, #0]
  while(RfResetTimerLock == 1)
 8010f9c:	7823      	ldrb	r3, [r4, #0]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d00c      	beq.n	8010fbc <HW_BNRG_Init+0xec>
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 8010fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010fac:	f002 f884 	bl	80130b8 <HAL_GPIO_WritePin>
  HW_TS_Delete(ubnRFResetTimerID);
 8010fb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010fb4:	f000 fb8c 	bl	80116d0 <HW_TS_Delete>
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_CS_STDBY_PIN, BNRG_SPI_CS_STDBY_PORT);
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_RESET_STDBY_PIN, BNRG_SPI_RESET_STDBY_PORT);
  }

  return;
}
 8010fb8:	b009      	add	sp, #36	; 0x24
 8010fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HW_SleepMode();
 8010fbc:	f7ff fd7a 	bl	8010ab4 <HW_SleepMode>
 8010fc0:	e7ec      	b.n	8010f9c <HW_BNRG_Init+0xcc>
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
 8010fc2:	4a0e      	ldr	r2, [pc, #56]	; (8010ffc <HW_BNRG_Init+0x12c>)
 8010fc4:	6813      	ldr	r3, [r2, #0]
 8010fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010fca:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
 8010fcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010fd0:	4b0b      	ldr	r3, [pc, #44]	; (8011000 <HW_BNRG_Init+0x130>)
 8010fd2:	6811      	ldr	r1, [r2, #0]
 8010fd4:	400b      	ands	r3, r1
 8010fd6:	6013      	str	r3, [r2, #0]
 8010fd8:	6832      	ldr	r2, [r6, #0]
 8010fda:	4b0a      	ldr	r3, [pc, #40]	; (8011004 <HW_BNRG_Init+0x134>)
 8010fdc:	4013      	ands	r3, r2
 8010fde:	6033      	str	r3, [r6, #0]
  return;
 8010fe0:	e7ea      	b.n	8010fb8 <HW_BNRG_Init+0xe8>
 8010fe2:	bf00      	nop
 8010fe4:	20000078 	.word	0x20000078
 8010fe8:	40003c00 	.word	0x40003c00
 8010fec:	40007000 	.word	0x40007000
 8010ff0:	08010afd 	.word	0x08010afd
 8010ff4:	08010af1 	.word	0x08010af1
 8010ff8:	40021000 	.word	0x40021000
 8010ffc:	40007034 	.word	0x40007034
 8011000:	bfff8fc7 	.word	0xbfff8fc7
 8011004:	bfff8fdf 	.word	0xbfff8fdf

08011008 <HW_BNRG_EvtReq>:
}


void HW_BNRG_EvtReq(uint8_t *buffer, uint16_t buff_size)
{
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 8011008:	4b07      	ldr	r3, [pc, #28]	; (8011028 <HW_BNRG_EvtReq+0x20>)
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 801100a:	2200      	movs	r2, #0
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 801100c:	6758      	str	r0, [r3, #116]	; 0x74
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
 801100e:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 8011012:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  if( SpiContext.SpiReceiveContext.PacketCont == TRUE )
 8011016:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801101a:	2b01      	cmp	r3, #1
 801101c:	d102      	bne.n	8011024 <HW_BNRG_EvtReq+0x1c>
  {
    SPI_Receive_Manager(SPI_REQUEST_PAYLOAD);
 801101e:	2002      	movs	r0, #2
 8011020:	f7ff bdde 	b.w	8010be0 <SPI_Receive_Manager>
  }
  else
  {
    Enable_SPI_Receiving_Path();
 8011024:	f7ff bd98 	b.w	8010b58 <Enable_SPI_Receiving_Path>
 8011028:	20000078 	.word	0x20000078

0801102c <HW_BNRG_SpiIrqCb>:
  return;
}


void HW_BNRG_SpiIrqCb(void)
{  
 801102c:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801102e:	b672      	cpsid	i
  __disable_irq();
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 8011030:	4b0a      	ldr	r3, [pc, #40]	; (801105c <HW_BNRG_SpiIrqCb+0x30>)
 8011032:	f893 506c 	ldrb.w	r5, [r3, #108]	; 0x6c
 8011036:	b975      	cbnz	r5, 8011056 <HW_BNRG_SpiIrqCb+0x2a>
  {
    SpiContext.SpiPeripheralState = SPI_BUSY;
 8011038:	2401      	movs	r4, #1
 801103a:	f883 406c 	strb.w	r4, [r3, #108]	; 0x6c
  __ASM volatile ("cpsie i" : : : "memory");
 801103e:	b662      	cpsie	i
    __enable_irq();
    Enable_SPI_CS();
 8011040:	f7ff fd62 	bl	8010b08 <Enable_SPI_CS>
    SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX);
 8011044:	4628      	mov	r0, r5
 8011046:	f7ff fdcb 	bl	8010be0 <SPI_Receive_Manager>
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 801104a:	4621      	mov	r1, r4
 801104c:	4620      	mov	r0, r4
  }
  else
  {
    __enable_irq();
  }
}
 801104e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 8011052:	f000 bead 	b.w	8011db0 <LPM_SetStopMode>
 8011056:	b662      	cpsie	i
}
 8011058:	bd38      	pop	{r3, r4, r5, pc}
 801105a:	bf00      	nop
 801105c:	20000078 	.word	0x20000078

08011060 <HW_BNRG_DMATxCb>:


void HW_BNRG_DMATxCb(void)
{
 8011060:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmatx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG))
 8011062:	4c20      	ldr	r4, [pc, #128]	; (80110e4 <HW_BNRG_DMATxCb+0x84>)
 8011064:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	681a      	ldr	r2, [r3, #0]
 801106a:	0791      	lsls	r1, r2, #30
 801106c:	d507      	bpl.n	801107e <HW_BNRG_DMATxCb+0x1e>
 801106e:	4a1e      	ldr	r2, [pc, #120]	; (80110e8 <HW_BNRG_DMATxCb+0x88>)
 8011070:	4293      	cmp	r3, r2
 8011072:	bf8c      	ite	hi
 8011074:	4b1d      	ldrhi	r3, [pc, #116]	; (80110ec <HW_BNRG_DMATxCb+0x8c>)
 8011076:	4b1e      	ldrls	r3, [pc, #120]	; (80110f0 <HW_BNRG_DMATxCb+0x90>)
 8011078:	681a      	ldr	r2, [r3, #0]
 801107a:	0692      	lsls	r2, r2, #26
 801107c:	d400      	bmi.n	8011080 <HW_BNRG_DMATxCb+0x20>
      TransmitClosure();
    }
  }

  return;
}
 801107e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 8011080:	2220      	movs	r2, #32
 8011082:	605a      	str	r2, [r3, #4]
    if(SpiContext.SpiTransmitContext.PacketCont == TRUE)
 8011084:	f894 5088 	ldrb.w	r5, [r4, #136]	; 0x88
 8011088:	2d01      	cmp	r5, #1
 801108a:	d10d      	bne.n	80110a8 <HW_BNRG_DMATxCb+0x48>
      SpiContext.SpiTransmitContext.pPayloadData += SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 801108c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8011090:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
 8011094:	4413      	add	r3, r2
 8011096:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      DisableEnable_SPI_CS();
 801109a:	f7ff fd4d 	bl	8010b38 <DisableEnable_SPI_CS>
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 801109e:	4628      	mov	r0, r5
}
 80110a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 80110a4:	f7ff bd9c 	b.w	8010be0 <SPI_Receive_Manager>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 80110a8:	2100      	movs	r1, #0
 80110aa:	4608      	mov	r0, r1
 80110ac:	f000 fe80 	bl	8011db0 <LPM_SetStopMode>
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 80110b0:	2300      	movs	r3, #0
 80110b2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  Disable_SPI_CS();
 80110b6:	f7ff fd2f 	bl	8010b18 <Disable_SPI_CS>
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 80110ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	6813      	ldr	r3, [r2, #0]
 80110c0:	f023 0301 	bic.w	r3, r3, #1
 80110c4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 80110c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80110c8:	681a      	ldr	r2, [r3, #0]
 80110ca:	6813      	ldr	r3, [r2, #0]
 80110cc:	f023 0301 	bic.w	r3, r3, #1
 80110d0:	6013      	str	r3, [r2, #0]
  if(SpiContext.SpiReceiveContext.BufferStatus == BUFFER_AVAILABLE)
 80110d2:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d1d1      	bne.n	801107e <HW_BNRG_DMATxCb+0x1e>
}
 80110da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Enable_SPI_Receiving_Path();
 80110de:	f7ff bd3b 	b.w	8010b58 <Enable_SPI_Receiving_Path>
 80110e2:	bf00      	nop
 80110e4:	20000078 	.word	0x20000078
 80110e8:	40020080 	.word	0x40020080
 80110ec:	40020400 	.word	0x40020400
 80110f0:	40020000 	.word	0x40020000

080110f4 <HW_BNRG_TimStartAllowed>:
}


void HW_BNRG_TimStartAllowed(void)
{
  HW_TS_Start(TxRxTimerId, TimeoutTicks);
 80110f4:	4b03      	ldr	r3, [pc, #12]	; (8011104 <HW_BNRG_TimStartAllowed+0x10>)
 80110f6:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 80110fa:	f893 0124 	ldrb.w	r0, [r3, #292]	; 0x124
 80110fe:	f000 baf5 	b.w	80116ec <HW_TS_Start>
 8011102:	bf00      	nop
 8011104:	20000078 	.word	0x20000078

08011108 <HW_BNRG_TimStartReq>:
   * the Timer requested can be started immediately because there is no risk that
   * the timer is already in use.
   * If a specific application needs to handle the timer differently,
   * it is suggested to overload the function without change the COMMON one. 
   */
  HW_BNRG_TimStartAllowed();
 8011108:	f7ff bff4 	b.w	80110f4 <HW_BNRG_TimStartAllowed>

0801110c <WakeupBlueNRG>:
{
 801110c:	b510      	push	{r4, lr}
  pTimerTxRxCallback = TimerTransmitCallback;
 801110e:	4c08      	ldr	r4, [pc, #32]	; (8011130 <WakeupBlueNRG+0x24>)
 8011110:	4b08      	ldr	r3, [pc, #32]	; (8011134 <WakeupBlueNRG+0x28>)
 8011112:	6063      	str	r3, [r4, #4]
  Enable_SPI_CS();
 8011114:	f7ff fcf8 	bl	8010b08 <Enable_SPI_CS>
  TimeoutTicks = SPI_TX_TIMEOUT;
 8011118:	2306      	movs	r3, #6
 801111a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
  HW_BNRG_TimStartReq();
 801111e:	f7ff fff3 	bl	8011108 <HW_BNRG_TimStartReq>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8011122:	2100      	movs	r1, #0
}
 8011124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8011128:	4608      	mov	r0, r1
 801112a:	f000 be41 	b.w	8011db0 <LPM_SetStopMode>
 801112e:	bf00      	nop
 8011130:	20000078 	.word	0x20000078
 8011134:	08010cd9 	.word	0x08010cd9

08011138 <HW_BNRG_Send>:
{  
 8011138:	b508      	push	{r3, lr}
  SpiContext.SpiTransmitContext.pPayloadData = payload_data;
 801113a:	4b0c      	ldr	r3, [pc, #48]	; (801116c <HW_BNRG_Send+0x34>)
 801113c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit = payload_size;
 8011140:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("cpsid i" : : : "memory");
 8011144:	b672      	cpsid	i
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 8011146:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 801114a:	2201      	movs	r2, #1
 801114c:	b949      	cbnz	r1, 8011162 <HW_BNRG_Send+0x2a>
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 801114e:	2017      	movs	r0, #23
    SpiContext.SpiPeripheralState = SPI_BUSY;
 8011150:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 8011154:	f001 fcac 	bl	8012ab0 <HAL_NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8011158:	b662      	cpsie	i
}
 801115a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WakeupBlueNRG();
 801115e:	f7ff bfd5 	b.w	801110c <WakeupBlueNRG>
    SpiContext.SpiTransmitContext.RequestPending = TRUE;
 8011162:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8011166:	b662      	cpsie	i
}
 8011168:	bd08      	pop	{r3, pc}
 801116a:	bf00      	nop
 801116c:	20000078 	.word	0x20000078

08011170 <ReceiveClosure>:
{
 8011170:	b510      	push	{r4, lr}
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8011172:	4c12      	ldr	r4, [pc, #72]	; (80111bc <ReceiveClosure+0x4c>)
 8011174:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	6813      	ldr	r3, [r2, #0]
 801117a:	f023 0301 	bic.w	r3, r3, #1
 801117e:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8011180:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	6813      	ldr	r3, [r2, #0]
 8011186:	f023 0301 	bic.w	r3, r3, #1
 801118a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801118c:	b672      	cpsid	i
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 801118e:	2017      	movs	r0, #23
 8011190:	f001 fc8e 	bl	8012ab0 <HAL_NVIC_DisableIRQ>
  if(SpiContext.SpiTransmitContext.RequestPending == TRUE)
 8011194:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 8011198:	2a01      	cmp	r2, #1
 801119a:	f04f 0300 	mov.w	r3, #0
 801119e:	d108      	bne.n	80111b2 <ReceiveClosure+0x42>
    SpiContext.SpiTransmitContext.RequestPending = FALSE;
 80111a0:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
    SpiContext.SpiPeripheralState = SPI_BUSY;
 80111a4:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
  __ASM volatile ("cpsie i" : : : "memory");
 80111a8:	b662      	cpsie	i
}
 80111aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WakeupBlueNRG();
 80111ae:	f7ff bfad 	b.w	801110c <WakeupBlueNRG>
    SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 80111b2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 80111b6:	b662      	cpsie	i
}
 80111b8:	bd10      	pop	{r4, pc}
 80111ba:	bf00      	nop
 80111bc:	20000078 	.word	0x20000078

080111c0 <ProcessEndOfReceive>:
{
 80111c0:	b510      	push	{r4, lr}
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;
 80111c2:	4c06      	ldr	r4, [pc, #24]	; (80111dc <ProcessEndOfReceive+0x1c>)
 80111c4:	2301      	movs	r3, #1
 80111c6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  ReceiveClosure();
 80111ca:	f7ff ffd1 	bl	8011170 <ReceiveClosure>
  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 80111ce:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
}
 80111d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 80111d6:	f000 bd5b 	b.w	8011c90 <HW_BNRG_Isr>
 80111da:	bf00      	nop
 80111dc:	20000078 	.word	0x20000078

080111e0 <HW_BNRG_DMARxCb>:
{
 80111e0:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmarx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG))
 80111e2:	4c53      	ldr	r4, [pc, #332]	; (8011330 <HW_BNRG_DMARxCb+0x150>)
 80111e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	0795      	lsls	r5, r2, #30
 80111ec:	d507      	bpl.n	80111fe <HW_BNRG_DMARxCb+0x1e>
 80111ee:	4951      	ldr	r1, [pc, #324]	; (8011334 <HW_BNRG_DMARxCb+0x154>)
 80111f0:	428b      	cmp	r3, r1
 80111f2:	bf8c      	ite	hi
 80111f4:	4a50      	ldrhi	r2, [pc, #320]	; (8011338 <HW_BNRG_DMARxCb+0x158>)
 80111f6:	4a51      	ldrls	r2, [pc, #324]	; (801133c <HW_BNRG_DMARxCb+0x15c>)
 80111f8:	6810      	ldr	r0, [r2, #0]
 80111fa:	0780      	lsls	r0, r0, #30
 80111fc:	d400      	bmi.n	8011200 <HW_BNRG_DMARxCb+0x20>
}
 80111fe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG);
 8011200:	2002      	movs	r0, #2
 8011202:	6050      	str	r0, [r2, #4]
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 8011204:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011206:	6815      	ldr	r5, [r2, #0]
 8011208:	428d      	cmp	r5, r1
 801120a:	bf8c      	ite	hi
 801120c:	484a      	ldrhi	r0, [pc, #296]	; (8011338 <HW_BNRG_DMARxCb+0x158>)
 801120e:	484b      	ldrls	r0, [pc, #300]	; (801133c <HW_BNRG_DMARxCb+0x15c>)
 8011210:	2220      	movs	r2, #32
 8011212:	6042      	str	r2, [r0, #4]
    switch (SpiContext.SpiReceiveContext.SpiReceiveEvent)
 8011214:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8011218:	2a03      	cmp	r2, #3
 801121a:	d8f0      	bhi.n	80111fe <HW_BNRG_DMARxCb+0x1e>
 801121c:	e8df f002 	tbb	[pc, r2]
 8011220:	2a243802 	.word	0x2a243802
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8011224:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 8011228:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 801122c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8011230:	d003      	beq.n	801123a <HW_BNRG_DMARxCb+0x5a>
 8011232:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 8011236:	2802      	cmp	r0, #2
 8011238:	d012      	beq.n	8011260 <HW_BNRG_DMARxCb+0x80>
          if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET)
 801123a:	4841      	ldr	r0, [pc, #260]	; (8011340 <HW_BNRG_DMARxCb+0x160>)
 801123c:	2140      	movs	r1, #64	; 0x40
 801123e:	f001 ff35 	bl	80130ac <HAL_GPIO_ReadPin>
 8011242:	4604      	mov	r4, r0
 8011244:	b948      	cbnz	r0, 801125a <HW_BNRG_DMARxCb+0x7a>
            Disable_SPI_CS();
 8011246:	f7ff fc67 	bl	8010b18 <Disable_SPI_CS>
            LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 801124a:	4621      	mov	r1, r4
 801124c:	2001      	movs	r0, #1
 801124e:	f000 fdaf 	bl	8011db0 <LPM_SetStopMode>
}
 8011252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ReceiveClosure();
 8011256:	f7ff bf8b 	b.w	8011170 <ReceiveClosure>
            DisableEnable_SPI_CS();
 801125a:	f7ff fc6d 	bl	8010b38 <DisableEnable_SPI_CS>
            SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX); /**< BlueNRG not ready for reading */
 801125e:	2000      	movs	r0, #0
}
 8011260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 8011264:	f7ff bcbc 	b.w	8010be0 <SPI_Receive_Manager>
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 8011268:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
}
 801126c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 8011270:	f000 bd0e 	b.w	8011c90 <HW_BNRG_Isr>
        Disable_SPI_CS();
 8011274:	f7ff fc50 	bl	8010b18 <Disable_SPI_CS>
        LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 8011278:	2100      	movs	r1, #0
 801127a:	2001      	movs	r0, #1
 801127c:	f000 fd98 	bl	8011db0 <LPM_SetStopMode>
        pTimerTxRxCallback = ProcessEndOfReceive;
 8011280:	4b30      	ldr	r3, [pc, #192]	; (8011344 <HW_BNRG_DMARxCb+0x164>)
 8011282:	6063      	str	r3, [r4, #4]
        TimeoutTicks = SPI_END_RECEIVE_FIX_TIMEOUT;
 8011284:	2302      	movs	r3, #2
 8011286:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        HW_BNRG_TimStartReq();
 801128a:	f7ff ff3d 	bl	8011108 <HW_BNRG_TimStartReq>
        break;
 801128e:	e7b6      	b.n	80111fe <HW_BNRG_DMARxCb+0x1e>
        byte_count = (ReceivedHeader[2]<<8)|ReceivedHeader[1];
 8011290:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
 8011294:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 8011298:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
 801129c:	d003      	beq.n	80112a6 <HW_BNRG_DMARxCb+0xc6>
 801129e:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 80112a2:	2802      	cmp	r0, #2
 80112a4:	d003      	beq.n	80112ae <HW_BNRG_DMARxCb+0xce>
          DisableEnable_SPI_CS();
 80112a6:	f7ff fc47 	bl	8010b38 <DisableEnable_SPI_CS>
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 80112aa:	2001      	movs	r0, #1
 80112ac:	e7d8      	b.n	8011260 <HW_BNRG_DMARxCb+0x80>
          if( byte_count < SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit)
 80112ae:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80112b2:	4290      	cmp	r0, r2
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = byte_count;
 80112b4:	bf83      	ittte	hi
 80112b6:	f8a4 2086 	strhhi.w	r2, [r4, #134]	; 0x86
            SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit -= SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 80112ba:	1a82      	subhi	r2, r0, r2
 80112bc:	f8a4 2084 	strhhi.w	r2, [r4, #132]	; 0x84
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 80112c0:	2200      	movls	r2, #0
            SpiContext.SpiTransmitContext.PacketCont = TRUE;
 80112c2:	bf88      	it	hi
 80112c4:	2201      	movhi	r2, #1
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 80112c6:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 80112ca:	682a      	ldr	r2, [r5, #0]
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit;
 80112cc:	bf98      	it	ls
 80112ce:	f8a4 0086 	strhls.w	r0, [r4, #134]	; 0x86
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 80112d2:	f022 0201 	bic.w	r2, r2, #1
 80112d6:	602a      	str	r2, [r5, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	f022 0201 	bic.w	r2, r2, #1
 80112de:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 80112e0:	681a      	ldr	r2, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 80112e2:	428d      	cmp	r5, r1
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 80112e4:	f022 0202 	bic.w	r2, r2, #2
 80112e8:	601a      	str	r2, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 80112ea:	bf8c      	ite	hi
 80112ec:	4a12      	ldrhi	r2, [pc, #72]	; (8011338 <HW_BNRG_DMARxCb+0x158>)
 80112ee:	4a13      	ldrls	r2, [pc, #76]	; (801133c <HW_BNRG_DMARxCb+0x15c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80112f0:	4d15      	ldr	r5, [pc, #84]	; (8011348 <HW_BNRG_DMARxCb+0x168>)
 80112f2:	2320      	movs	r3, #32
 80112f4:	6053      	str	r3, [r2, #4]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_DMA_TX_IRQn); /**< Clear DMA pending bit in NVIC */
 80112f6:	2039      	movs	r0, #57	; 0x39
 80112f8:	f001 fbfe 	bl	8012af8 <HAL_NVIC_ClearPendingIRQ>
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 80112fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 80112fe:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	6813      	ldr	r3, [r2, #0]
 8011306:	f043 0302 	orr.w	r3, r3, #2
 801130a:	6013      	str	r3, [r2, #0]
 801130c:	682b      	ldr	r3, [r5, #0]
 801130e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011312:	602b      	str	r3, [r5, #0]
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 8011314:	2001      	movs	r0, #1
 8011316:	f7ff fc37 	bl	8010b88 <LL_DMA_SetDataLength.constprop.0>
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)SpiContext.SpiTransmitContext.pPayloadData);  /**< Set memory address in DMA TX */
 801131a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 801131e:	60eb      	str	r3, [r5, #12]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx); /**< Enable DMA TX */
 8011320:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	6813      	ldr	r3, [r2, #0]
 8011326:	f043 0301 	orr.w	r3, r3, #1
 801132a:	6013      	str	r3, [r2, #0]
  return;
 801132c:	e767      	b.n	80111fe <HW_BNRG_DMARxCb+0x1e>
 801132e:	bf00      	nop
 8011330:	20000078 	.word	0x20000078
 8011334:	40020080 	.word	0x40020080
 8011338:	40020400 	.word	0x40020400
 801133c:	40020000 	.word	0x40020000
 8011340:	48001000 	.word	0x48001000
 8011344:	080111c1 	.word	0x080111c1
 8011348:	4002041c 	.word	0x4002041c

0801134c <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 801134c:	4b06      	ldr	r3, [pc, #24]	; (8011368 <ReadRtcSsrValue+0x1c>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	681a      	ldr	r2, [r3, #0]
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8011352:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8011354:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8011356:	b280      	uxth	r0, r0
 8011358:	b29b      	uxth	r3, r3
  second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);

  while(first_read != second_read)
 801135a:	4298      	cmp	r0, r3
 801135c:	d100      	bne.n	8011360 <ReadRtcSsrValue+0x14>
    first_read = second_read;
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
  }

  return second_read;
}
 801135e:	4770      	bx	lr
 8011360:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8011362:	4618      	mov	r0, r3
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 8011364:	b28b      	uxth	r3, r1
 8011366:	e7f8      	b.n	801135a <ReadRtcSsrValue+0xe>
 8011368:	200001a4 	.word	0x200001a4

0801136c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 801136c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 801136e:	4b19      	ldr	r3, [pc, #100]	; (80113d4 <UnlinkTimer+0x68>)
 8011370:	791a      	ldrb	r2, [r3, #4]
 8011372:	4282      	cmp	r2, r0
 8011374:	f04f 0218 	mov.w	r2, #24
 8011378:	d115      	bne.n	80113a6 <UnlinkTimer+0x3a>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 801137a:	791c      	ldrb	r4, [r3, #4]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 801137c:	fb02 3200 	mla	r2, r2, r0, r3
    PreviousRunningTimerID = CurrentRunningTimerID;
 8011380:	b2e4      	uxtb	r4, r4
 8011382:	715c      	strb	r4, [r3, #5]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8011384:	7f52      	ldrb	r2, [r2, #29]
 8011386:	b2d2      	uxtb	r2, r2
 8011388:	711a      	strb	r2, [r3, #4]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 801138a:	2218      	movs	r2, #24
 801138c:	fb02 3000 	mla	r0, r2, r0, r3
 8011390:	2201      	movs	r2, #1
 8011392:	7502      	strb	r2, [r0, #20]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8011394:	791a      	ldrb	r2, [r3, #4]
 8011396:	2a06      	cmp	r2, #6
 8011398:	d104      	bne.n	80113a4 <UnlinkTimer+0x38>
 801139a:	b919      	cbnz	r1, 80113a4 <UnlinkTimer+0x38>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 801139c:	f04f 32ff 	mov.w	r2, #4294967295
 80113a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  return;
}
 80113a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    previous_id = aTimerContext[TimerID].PreviousID;
 80113a6:	fb02 3400 	mla	r4, r2, r0, r3
 80113aa:	7f26      	ldrb	r6, [r4, #28]
    next_id = aTimerContext[TimerID].NextID;
 80113ac:	f894 c01d 	ldrb.w	ip, [r4, #29]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80113b0:	7f67      	ldrb	r7, [r4, #29]
 80113b2:	fb02 3606 	mla	r6, r2, r6, r3
 80113b6:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80113b8:	f1bc 0f06 	cmp.w	ip, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80113bc:	7777      	strb	r7, [r6, #29]
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80113be:	bf18      	it	ne
 80113c0:	7f24      	ldrbne	r4, [r4, #28]
    next_id = aTimerContext[TimerID].NextID;
 80113c2:	fa5f f58c 	uxtb.w	r5, ip
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80113c6:	bf1e      	ittt	ne
 80113c8:	fb02 3205 	mlane	r2, r2, r5, r3
 80113cc:	b2e4      	uxtbne	r4, r4
 80113ce:	7714      	strbne	r4, [r2, #28]
 80113d0:	e7db      	b.n	801138a <UnlinkTimer+0x1e>
 80113d2:	bf00      	nop
 80113d4:	200001a4 	.word	0x200001a4

080113d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80113d8:	b510      	push	{r4, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80113da:	4c0e      	ldr	r4, [pc, #56]	; (8011414 <ReturnTimeElapsed+0x3c>)
 80113dc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80113e0:	3301      	adds	r3, #1
 80113e2:	d015      	beq.n	8011410 <ReturnTimeElapsed+0x38>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80113e4:	f7ff ffb2 	bl	801134c <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 80113e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80113ec:	4283      	cmp	r3, r0
    {
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80113ee:	bf3b      	ittet	cc
 80113f0:	f8b4 309c 	ldrhcc.w	r3, [r4, #156]	; 0x9c
      return_value = SSRValueOnLastSetup + wrap_counter;
 80113f4:	f8d4 2098 	ldrcc.w	r2, [r4, #152]	; 0x98
      return_value = SSRValueOnLastSetup - return_value;
 80113f8:	f8d4 3098 	ldrcs.w	r3, [r4, #152]	; 0x98
      return_value = SSRValueOnLastSetup + wrap_counter;
 80113fc:	189b      	addcc	r3, r3, r2
 80113fe:	1a18      	subs	r0, r3, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8011400:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8011404:	4358      	muls	r0, r3
    return_value = return_value >> WakeupTimerDivider;
 8011406:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 801140a:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 801140c:	b280      	uxth	r0, r0
 801140e:	bd10      	pop	{r4, pc}
    return_value = 0;
 8011410:	2000      	movs	r0, #0
 8011412:	e7fb      	b.n	801140c <ReturnTimeElapsed+0x34>
 8011414:	200001a4 	.word	0x200001a4

08011418 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8011418:	b538      	push	{r3, r4, r5, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 801141a:	4c34      	ldr	r4, [pc, #208]	; (80114ec <HW_TS_Init+0xd4>)
 801141c:	6021      	str	r1, [r4, #0]


  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - (LL_RTC_WAKEUP_GetClock(phrtc->Instance)));
 801141e:	6809      	ldr	r1, [r1, #0]
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  */
__STATIC_INLINE uint32_t LL_RTC_WAKEUP_GetClock(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 8011420:	688b      	ldr	r3, [r1, #8]
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 8011422:	690a      	ldr	r2, [r1, #16]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 8011424:	f003 0307 	and.w	r3, r3, #7
 8011428:	f1c3 0304 	rsb	r3, r3, #4
 801142c:	b2dd      	uxtb	r5, r3
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_S));
 801142e:	690b      	ldr	r3, [r1, #16]
 8011430:	f884 509f 	strb.w	r5, [r4, #159]	; 0x9f
 8011434:	f3c3 030e 	ubfx	r3, r3, #0, #15
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 8011438:	3301      	adds	r3, #1
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 801143a:	f3c2 4206 	ubfx	r2, r2, #16, #7
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 801143e:	3201      	adds	r2, #1
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 8011440:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 8011444:	3b01      	subs	r3, #1
 8011446:	4353      	muls	r3, r2
 8011448:	412b      	asrs	r3, r5
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 801144a:	f884 209e 	strb.w	r2, [r4, #158]	; 0x9e
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 801144e:	3b10      	subs	r3, #16

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8011450:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011454:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8011456:	bf8c      	ite	hi
 8011458:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 801145c:	b29b      	uxthls	r3, r3
 801145e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8011462:	4b23      	ldr	r3, [pc, #140]	; (80114f0 <HW_TS_Init+0xd8>)
 8011464:	689a      	ldr	r2, [r3, #8]
 8011466:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801146a:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->IMR1, ExtiLine);
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011472:	601a      	str	r2, [r3, #0]
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8011474:	bb90      	cbnz	r0, 80114dc <HW_TS_Init+0xc4>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8011476:	2201      	movs	r2, #1
 8011478:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 801147c:	f04f 32ff 	mov.w	r2, #4294967295
 8011480:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8011484:	2206      	movs	r2, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8011486:	7520      	strb	r0, [r4, #20]
 8011488:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
 801148c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8011490:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
 8011494:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 8011498:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 801149c:	7122      	strb	r2, [r4, #4]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 801149e:	688a      	ldr	r2, [r1, #8]
 80114a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114a4:	608a      	str	r2, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80114a6:	68ca      	ldr	r2, [r1, #12]
 80114a8:	b2d2      	uxtb	r2, r2
 80114aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80114ae:	60ca      	str	r2, [r1, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80114b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80114b4:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80114b6:	2003      	movs	r0, #3
 80114b8:	f001 fb1e 	bl	8012af8 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80114bc:	6823      	ldr	r3, [r4, #0]
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	6893      	ldr	r3, [r2, #8]
 80114c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80114c6:	6093      	str	r3, [r2, #8]
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80114c8:	2103      	movs	r1, #3
 80114ca:	4608      	mov	r0, r1
 80114cc:	2200      	movs	r2, #0
 80114ce:	f001 faaf 	bl	8012a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */

  return;
}
 80114d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80114d6:	2003      	movs	r0, #3
 80114d8:	f001 badc 	b.w	8012a94 <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80114dc:	68cb      	ldr	r3, [r1, #12]
 80114de:	055b      	lsls	r3, r3, #21
 80114e0:	d5f2      	bpl.n	80114c8 <HW_TS_Init+0xb0>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80114e2:	2003      	movs	r0, #3
 80114e4:	f001 faf8 	bl	8012ad8 <HAL_NVIC_SetPendingIRQ>
 80114e8:	e7ee      	b.n	80114c8 <HW_TS_Init+0xb0>
 80114ea:	bf00      	nop
 80114ec:	200001a4 	.word	0x200001a4
 80114f0:	40010400 	.word	0x40010400

080114f4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80114f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114f8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80114fc:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80114fe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8011544 <HW_TS_Create+0x50>
 8011502:	2500      	movs	r5, #0
 8011504:	f04f 0a18 	mov.w	sl, #24
 8011508:	fb0a 9405 	mla	r4, sl, r5, r9
 801150c:	fa5f fe85 	uxtb.w	lr, r5
 8011510:	f894 c014 	ldrb.w	ip, [r4, #20]
 8011514:	f00c 06ff 	and.w	r6, ip, #255	; 0xff
 8011518:	f1bc 0f00 	cmp.w	ip, #0
 801151c:	d10b      	bne.n	8011536 <HW_TS_Create+0x42>
    loop++;
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 801151e:	2501      	movs	r5, #1
 8011520:	7525      	strb	r5, [r4, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011522:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8011526:	61a0      	str	r0, [r4, #24]
    aTimerContext[loop].TimerMode = TimerMode;
 8011528:	7562      	strb	r2, [r4, #21]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 801152a:	60a3      	str	r3, [r4, #8]
    *pTimerId = loop;
 801152c:	f881 e000 	strb.w	lr, [r1]

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8011530:	4630      	mov	r0, r6
 8011532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8011536:	3501      	adds	r5, #1
 8011538:	2d06      	cmp	r5, #6
 801153a:	d1e5      	bne.n	8011508 <HW_TS_Create+0x14>
 801153c:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 8011540:	2601      	movs	r6, #1
  return(localreturnstatus);
 8011542:	e7f5      	b.n	8011530 <HW_TS_Create+0x3c>
 8011544:	200001a4 	.word	0x200001a4

08011548 <HW_TS_RTC_CountUpdated_AppNot>:
  }
}

__weak void HW_TS_RTC_CountUpdated_AppNot(void)
{
}
 8011548:	4770      	bx	lr
	...

0801154c <RescheduleTimerList>:
{
 801154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 801154e:	4c3c      	ldr	r4, [pc, #240]	; (8011640 <RescheduleTimerList+0xf4>)
 8011550:	6827      	ldr	r7, [r4, #0]
 8011552:	683b      	ldr	r3, [r7, #0]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 8011554:	689a      	ldr	r2, [r3, #8]
 8011556:	f412 6f80 	tst.w	r2, #1024	; 0x400
 801155a:	d003      	beq.n	8011564 <RescheduleTimerList+0x18>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 801155c:	68da      	ldr	r2, [r3, #12]
 801155e:	f012 0f04 	tst.w	r2, #4
 8011562:	e7fa      	b.n	801155a <RescheduleTimerList+0xe>
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8011564:	689a      	ldr	r2, [r3, #8]
 8011566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801156a:	609a      	str	r2, [r3, #8]
  localTimerID = CurrentRunningTimerID;
 801156c:	7923      	ldrb	r3, [r4, #4]
  timecountleft = aTimerContext[localTimerID].CountLeft;
 801156e:	2218      	movs	r2, #24
  localTimerID = CurrentRunningTimerID;
 8011570:	b2de      	uxtb	r6, r3
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8011572:	fb02 4303 	mla	r3, r2, r3, r4
 8011576:	691d      	ldr	r5, [r3, #16]
  time_elapsed = ReturnTimeElapsed();
 8011578:	f7ff ff2e 	bl	80113d8 <ReturnTimeElapsed>
  if(timecountleft < time_elapsed )
 801157c:	42a8      	cmp	r0, r5
 801157e:	d907      	bls.n	8011590 <RescheduleTimerList+0x44>
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8011580:	2301      	movs	r3, #1
 8011582:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
    wakeup_timer_value = 0;
 8011586:	2300      	movs	r3, #0
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8011588:	2518      	movs	r5, #24
      aTimerContext[localTimerID].CountLeft = 0;
 801158a:	f04f 0c00 	mov.w	ip, #0
 801158e:	e01e      	b.n	80115ce <RescheduleTimerList+0x82>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8011590:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8011594:	fa10 f383 	uxtah	r3, r0, r3
 8011598:	42ab      	cmp	r3, r5
      wakeup_timer_value = MaxWakeupTimerSetup;
 801159a:	bf39      	ittee	cc
 801159c:	f8b4 30a0 	ldrhcc.w	r3, [r4, #160]	; 0xa0
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80115a0:	2200      	movcc	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 80115a2:	1a2b      	subcs	r3, r5, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80115a4:	2201      	movcs	r2, #1
      wakeup_timer_value = MaxWakeupTimerSetup;
 80115a6:	bf34      	ite	cc
 80115a8:	b29b      	uxthcc	r3, r3
      wakeup_timer_value = timecountleft - time_elapsed;
 80115aa:	b29b      	uxthcs	r3, r3
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80115ac:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
 80115b0:	e7ea      	b.n	8011588 <RescheduleTimerList+0x3c>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80115b2:	fb05 4206 	mla	r2, r5, r6, r4
    localTimerID = aTimerContext[localTimerID].NextID;
 80115b6:	fb05 4606 	mla	r6, r5, r6, r4
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80115ba:	6911      	ldr	r1, [r2, #16]
 80115bc:	4288      	cmp	r0, r1
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80115be:	bf97      	itett	ls
 80115c0:	6911      	ldrls	r1, [r2, #16]
      aTimerContext[localTimerID].CountLeft = 0;
 80115c2:	f8c2 c010 	strhi.w	ip, [r2, #16]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80115c6:	1a09      	subls	r1, r1, r0
 80115c8:	6111      	strls	r1, [r2, #16]
    localTimerID = aTimerContext[localTimerID].NextID;
 80115ca:	7f76      	ldrb	r6, [r6, #29]
 80115cc:	b2f6      	uxtb	r6, r6
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80115ce:	2e06      	cmp	r6, #6
 80115d0:	d1ef      	bne.n	80115b2 <RescheduleTimerList+0x66>
  if(Value == 0)
 80115d2:	b943      	cbnz	r3, 80115e6 <RescheduleTimerList+0x9a>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80115d4:	f7ff feba 	bl	801134c <ReadRtcSsrValue>
 80115d8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
}
 80115dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80115e0:	2003      	movs	r0, #3
 80115e2:	f001 ba79 	b.w	8012ad8 <HAL_NVIC_SetPendingIRQ>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d803      	bhi.n	80115f2 <RescheduleTimerList+0xa6>
 80115ea:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 80115ee:	2a01      	cmp	r2, #1
 80115f0:	d024      	beq.n	801163c <RescheduleTimerList+0xf0>
      Value -= 1;
 80115f2:	3b01      	subs	r3, #1
 80115f4:	b29d      	uxth	r5, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	68da      	ldr	r2, [r3, #12]
 80115fa:	0752      	lsls	r2, r2, #29
 80115fc:	d5fc      	bpl.n	80115f8 <RescheduleTimerList+0xac>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80115fe:	68d9      	ldr	r1, [r3, #12]
 8011600:	b2c9      	uxtb	r1, r1
 8011602:	f461 6190 	orn	r1, r1, #1152	; 0x480
 8011606:	60d9      	str	r1, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8011608:	4b0e      	ldr	r3, [pc, #56]	; (8011644 <RescheduleTimerList+0xf8>)
 801160a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801160e:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8011610:	2003      	movs	r0, #3
 8011612:	f001 fa71 	bl	8012af8 <HAL_NVIC_ClearPendingIRQ>
    LL_RTC_WAKEUP_SetAutoReload(phrtc->Instance, Value);
 8011616:	6826      	ldr	r6, [r4, #0]
 8011618:	6833      	ldr	r3, [r6, #0]
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 801161a:	695a      	ldr	r2, [r3, #20]
 801161c:	0c12      	lsrs	r2, r2, #16
 801161e:	0412      	lsls	r2, r2, #16
 8011620:	432a      	orrs	r2, r5
 8011622:	615a      	str	r2, [r3, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8011624:	f7ff fe92 	bl	801134c <ReadRtcSsrValue>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8011628:	6832      	ldr	r2, [r6, #0]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 801162a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 801162e:	6893      	ldr	r3, [r2, #8]
 8011630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011634:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8011636:	f7ff ff87 	bl	8011548 <HW_TS_RTC_CountUpdated_AppNot>
}
 801163a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801163c:	4615      	mov	r5, r2
 801163e:	e7da      	b.n	80115f6 <RescheduleTimerList+0xaa>
 8011640:	200001a4 	.word	0x200001a4
 8011644:	40010400 	.word	0x40010400

08011648 <HW_TS_Stop>:
{
 8011648:	b570      	push	{r4, r5, r6, lr}
 801164a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801164c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011650:	b672      	cpsid	i
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8011652:	4c1d      	ldr	r4, [pc, #116]	; (80116c8 <HW_TS_Stop+0x80>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8011654:	2003      	movs	r0, #3
 8011656:	f001 fa2b 	bl	8012ab0 <HAL_NVIC_DisableIRQ>
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 801165a:	2318      	movs	r3, #24
 801165c:	fb03 4305 	mla	r3, r3, r5, r4
 8011660:	7d1b      	ldrb	r3, [r3, #20]
 8011662:	2b02      	cmp	r3, #2
 8011664:	d124      	bne.n	80116b0 <HW_TS_Stop+0x68>
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8011666:	2100      	movs	r1, #0
 8011668:	4628      	mov	r0, r5
 801166a:	f7ff fe7f 	bl	801136c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 801166e:	7923      	ldrb	r3, [r4, #4]
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8011670:	2b06      	cmp	r3, #6
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8011672:	b2da      	uxtb	r2, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8011674:	d122      	bne.n	80116bc <HW_TS_Stop+0x74>
      if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 8011676:	6823      	ldr	r3, [r4, #0]
 8011678:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 801167a:	689a      	ldr	r2, [r3, #8]
 801167c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8011680:	d003      	beq.n	801168a <HW_TS_Stop+0x42>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8011682:	68da      	ldr	r2, [r3, #12]
 8011684:	f012 0f04 	tst.w	r2, #4
 8011688:	e7fa      	b.n	8011680 <HW_TS_Stop+0x38>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 801168a:	689a      	ldr	r2, [r3, #8]
 801168c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011690:	609a      	str	r2, [r3, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8011692:	68da      	ldr	r2, [r3, #12]
 8011694:	0752      	lsls	r2, r2, #29
 8011696:	d5fc      	bpl.n	8011692 <HW_TS_Stop+0x4a>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8011698:	68da      	ldr	r2, [r3, #12]
 801169a:	b2d2      	uxtb	r2, r2
 801169c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80116a0:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80116a2:	4b0a      	ldr	r3, [pc, #40]	; (80116cc <HW_TS_Stop+0x84>)
 80116a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80116a8:	615a      	str	r2, [r3, #20]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80116aa:	2003      	movs	r0, #3
 80116ac:	f001 fa24 	bl	8012af8 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80116b0:	2003      	movs	r0, #3
 80116b2:	f001 f9ef 	bl	8012a94 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116b6:	f386 8810 	msr	PRIMASK, r6
}
 80116ba:	bd70      	pop	{r4, r5, r6, pc}
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80116bc:	7963      	ldrb	r3, [r4, #5]
 80116be:	4293      	cmp	r3, r2
 80116c0:	d0f6      	beq.n	80116b0 <HW_TS_Stop+0x68>
      RescheduleTimerList();
 80116c2:	f7ff ff43 	bl	801154c <RescheduleTimerList>
 80116c6:	e7f3      	b.n	80116b0 <HW_TS_Stop+0x68>
 80116c8:	200001a4 	.word	0x200001a4
 80116cc:	40010400 	.word	0x40010400

080116d0 <HW_TS_Delete>:
{
 80116d0:	b510      	push	{r4, lr}
 80116d2:	4604      	mov	r4, r0
  HW_TS_Stop(timer_id);
 80116d4:	f7ff ffb8 	bl	8011648 <HW_TS_Stop>
  aTimerContext[timer_id].TimerIDStatus = TimerID_Free; /**<  release ID */
 80116d8:	4803      	ldr	r0, [pc, #12]	; (80116e8 <HW_TS_Delete+0x18>)
 80116da:	2318      	movs	r3, #24
 80116dc:	fb03 0404 	mla	r4, r3, r4, r0
 80116e0:	2300      	movs	r3, #0
 80116e2:	7523      	strb	r3, [r4, #20]
}
 80116e4:	bd10      	pop	{r4, pc}
 80116e6:	bf00      	nop
 80116e8:	200001a4 	.word	0x200001a4

080116ec <HW_TS_Start>:
{
 80116ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116f0:	4605      	mov	r5, r0
 80116f2:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116f4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80116f8:	b672      	cpsid	i
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80116fa:	2003      	movs	r0, #3
 80116fc:	f001 f9d8 	bl	8012ab0 <HAL_NVIC_DisableIRQ>
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8011700:	483b      	ldr	r0, [pc, #236]	; (80117f0 <HW_TS_Start+0x104>)
 8011702:	f04f 0818 	mov.w	r8, #24
 8011706:	fb08 0705 	mla	r7, r8, r5, r0
 801170a:	2302      	movs	r3, #2
 801170c:	753b      	strb	r3, [r7, #20]
  aTimerContext[timer_id].CountLeft = timeout_ticks;
 801170e:	613c      	str	r4, [r7, #16]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8011710:	60fc      	str	r4, [r7, #12]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8011712:	7903      	ldrb	r3, [r0, #4]
 8011714:	2b06      	cmp	r3, #6
 8011716:	b2da      	uxtb	r2, r3
 8011718:	4604      	mov	r4, r0
 801171a:	d116      	bne.n	801174a <HW_TS_Start+0x5e>
    PreviousRunningTimerID = CurrentRunningTimerID;
 801171c:	7903      	ldrb	r3, [r0, #4]
 801171e:	b2db      	uxtb	r3, r3
 8011720:	7143      	strb	r3, [r0, #5]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8011722:	f04f 33ff 	mov.w	r3, #4294967295
    CurrentRunningTimerID = TimerID;
 8011726:	7105      	strb	r5, [r0, #4]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8011728:	777a      	strb	r2, [r7, #29]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 801172a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    time_elapsed = 0;
 801172e:	2000      	movs	r0, #0
  localcurrentrunningtimerid = CurrentRunningTimerID;
 8011730:	7923      	ldrb	r3, [r4, #4]
  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8011732:	7962      	ldrb	r2, [r4, #5]
 8011734:	429a      	cmp	r2, r3
 8011736:	d053      	beq.n	80117e0 <HW_TS_Start+0xf4>
    RescheduleTimerList();
 8011738:	f7ff ff08 	bl	801154c <RescheduleTimerList>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 801173c:	2003      	movs	r0, #3
 801173e:	f001 f9a9 	bl	8012a94 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011742:	f386 8810 	msr	PRIMASK, r6
}
 8011746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    time_elapsed = ReturnTimeElapsed();
 801174a:	f7ff fe45 	bl	80113d8 <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	4403      	add	r3, r0
 8011752:	613b      	str	r3, [r7, #16]
    time_left = aTimerContext[TimerID].CountLeft;
 8011754:	6939      	ldr	r1, [r7, #16]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8011756:	7923      	ldrb	r3, [r4, #4]
 8011758:	fb08 4303 	mla	r3, r8, r3, r4
 801175c:	691b      	ldr	r3, [r3, #16]
 801175e:	4299      	cmp	r1, r3
 8011760:	d323      	bcc.n	80117aa <HW_TS_Start+0xbe>
      timer_id_lookup = CurrentRunningTimerID;
 8011762:	7922      	ldrb	r2, [r4, #4]
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8011764:	b2d3      	uxtb	r3, r2
        next_id = aTimerContext[timer_id_lookup].NextID;
 8011766:	fb08 4202 	mla	r2, r8, r2, r4
 801176a:	7f52      	ldrb	r2, [r2, #29]
 801176c:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 801176e:	2a06      	cmp	r2, #6
 8011770:	d004      	beq.n	801177c <HW_TS_Start+0x90>
 8011772:	fb08 4202 	mla	r2, r8, r2, r4
 8011776:	6912      	ldr	r2, [r2, #16]
 8011778:	4291      	cmp	r1, r2
 801177a:	d212      	bcs.n	80117a2 <HW_TS_Start+0xb6>
  next_id = aTimerContext[RefTimerID].NextID;
 801177c:	2218      	movs	r2, #24
 801177e:	fb02 4103 	mla	r1, r2, r3, r4
 8011782:	7f49      	ldrb	r1, [r1, #29]
 8011784:	b2cf      	uxtb	r7, r1
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8011786:	2906      	cmp	r1, #6
    aTimerContext[next_id].PreviousID = TimerID;
 8011788:	bf1c      	itt	ne
 801178a:	fb02 4207 	mlane	r2, r2, r7, r4
 801178e:	7715      	strbne	r5, [r2, #28]
  aTimerContext[TimerID].NextID = next_id;
 8011790:	2218      	movs	r2, #24
 8011792:	fb02 4105 	mla	r1, r2, r5, r4
 8011796:	774f      	strb	r7, [r1, #29]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8011798:	770b      	strb	r3, [r1, #28]
  aTimerContext[RefTimerID].NextID = TimerID;
 801179a:	fb02 4303 	mla	r3, r2, r3, r4
 801179e:	775d      	strb	r5, [r3, #29]
  return;
 80117a0:	e7c6      	b.n	8011730 <HW_TS_Start+0x44>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80117a2:	fb08 4303 	mla	r3, r8, r3, r4
 80117a6:	7f5a      	ldrb	r2, [r3, #29]
 80117a8:	e7dc      	b.n	8011764 <HW_TS_Start+0x78>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80117aa:	7923      	ldrb	r3, [r4, #4]
  if(RefTimerID != CurrentRunningTimerID)
 80117ac:	7922      	ldrb	r2, [r4, #4]
 80117ae:	4293      	cmp	r3, r2
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80117b0:	b2d9      	uxtb	r1, r3
  if(RefTimerID != CurrentRunningTimerID)
 80117b2:	fb08 f303 	mul.w	r3, r8, r3
 80117b6:	d010      	beq.n	80117da <HW_TS_Start+0xee>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80117b8:	4423      	add	r3, r4
 80117ba:	7f1a      	ldrb	r2, [r3, #28]
    aTimerContext[previous_id].NextID = TimerID;
 80117bc:	fb08 4802 	mla	r8, r8, r2, r4
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80117c0:	fa5f fc82 	uxtb.w	ip, r2
    aTimerContext[previous_id].NextID = TimerID;
 80117c4:	f888 501d 	strb.w	r5, [r8, #29]
    aTimerContext[TimerID].NextID = RefTimerID;
 80117c8:	7779      	strb	r1, [r7, #29]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80117ca:	f887 c01c 	strb.w	ip, [r7, #28]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80117ce:	771d      	strb	r5, [r3, #28]
      PreviousRunningTimerID = CurrentRunningTimerID;
 80117d0:	7923      	ldrb	r3, [r4, #4]
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	7163      	strb	r3, [r4, #5]
      CurrentRunningTimerID = TimerID;
 80117d6:	7125      	strb	r5, [r4, #4]
 80117d8:	e7aa      	b.n	8011730 <HW_TS_Start+0x44>
    aTimerContext[TimerID].NextID = RefTimerID;
 80117da:	7779      	strb	r1, [r7, #29]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80117dc:	4423      	add	r3, r4
 80117de:	e7f6      	b.n	80117ce <HW_TS_Start+0xe2>
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80117e0:	2318      	movs	r3, #24
 80117e2:	fb03 4405 	mla	r4, r3, r5, r4
 80117e6:	6923      	ldr	r3, [r4, #16]
 80117e8:	1a18      	subs	r0, r3, r0
 80117ea:	6120      	str	r0, [r4, #16]
 80117ec:	e7a6      	b.n	801173c <HW_TS_Start+0x50>
 80117ee:	bf00      	nop
 80117f0:	200001a4 	.word	0x200001a4

080117f4 <HW_TS_RTC_Wakeup_Handler>:
{
 80117f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117f8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80117fc:	b672      	cpsid	i
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80117fe:	4920      	ldr	r1, [pc, #128]	; (8011880 <HW_TS_RTC_Wakeup_Handler+0x8c>)
 8011800:	680b      	ldr	r3, [r1, #0]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	689a      	ldr	r2, [r3, #8]
 8011806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801180a:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 801180c:	790c      	ldrb	r4, [r1, #4]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 801180e:	2218      	movs	r2, #24
  local_current_running_timer_id = CurrentRunningTimerID;
 8011810:	b2e6      	uxtb	r6, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8011812:	fb02 1404 	mla	r4, r2, r4, r1
 8011816:	7d22      	ldrb	r2, [r4, #20]
 8011818:	2a02      	cmp	r2, #2
 801181a:	d124      	bne.n	8011866 <HW_TS_RTC_Wakeup_Handler+0x72>
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 801181c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8011820:	69a7      	ldr	r7, [r4, #24]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8011822:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 8011826:	b1cb      	cbz	r3, 801185c <HW_TS_RTC_Wakeup_Handler+0x68>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8011828:	7d63      	ldrb	r3, [r4, #21]
 801182a:	2b01      	cmp	r3, #1
 801182c:	b2d9      	uxtb	r1, r3
 801182e:	d10f      	bne.n	8011850 <HW_TS_RTC_Wakeup_Handler+0x5c>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8011830:	4630      	mov	r0, r6
 8011832:	f7ff fd9b 	bl	801136c <UnlinkTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011836:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 801183a:	68e1      	ldr	r1, [r4, #12]
 801183c:	4630      	mov	r0, r6
 801183e:	f7ff ff55 	bl	80116ec <HW_TS_Start>
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8011842:	4642      	mov	r2, r8
 8011844:	4631      	mov	r1, r6
 8011846:	4638      	mov	r0, r7
 8011848:	f000 fe9c 	bl	8012584 <HW_TS_RTC_Int_AppNot>
}
 801184c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011850:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Stop(local_current_running_timer_id);
 8011854:	4630      	mov	r0, r6
 8011856:	f7ff fef7 	bl	8011648 <HW_TS_Stop>
 801185a:	e7f2      	b.n	8011842 <HW_TS_RTC_Wakeup_Handler+0x4e>
      RescheduleTimerList();
 801185c:	f7ff fe76 	bl	801154c <RescheduleTimerList>
 8011860:	f385 8810 	msr	PRIMASK, r5
  return;
 8011864:	e7f2      	b.n	801184c <HW_TS_RTC_Wakeup_Handler+0x58>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8011866:	68da      	ldr	r2, [r3, #12]
 8011868:	0752      	lsls	r2, r2, #29
 801186a:	d5fc      	bpl.n	8011866 <HW_TS_RTC_Wakeup_Handler+0x72>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 801186c:	68da      	ldr	r2, [r3, #12]
 801186e:	b2d2      	uxtb	r2, r2
 8011870:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8011874:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8011876:	4b03      	ldr	r3, [pc, #12]	; (8011884 <HW_TS_RTC_Wakeup_Handler+0x90>)
 8011878:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801187c:	615a      	str	r2, [r3, #20]
 801187e:	e7ef      	b.n	8011860 <HW_TS_RTC_Wakeup_Handler+0x6c>
 8011880:	200001a4 	.word	0x200001a4
 8011884:	40010400 	.word	0x40010400

08011888 <hci_timeout_callback>:

  return;
}

void hci_timeout_callback(void)
{
 8011888:	b508      	push	{r3, lr}
  HciLayerTimeout = TRUE;
 801188a:	4b04      	ldr	r3, [pc, #16]	; (801189c <hci_timeout_callback+0x14>)
 801188c:	2201      	movs	r2, #1
 801188e:	701a      	strb	r2, [r3, #0]

  /**
   * Unlock hci_send_req() that is waiting for an event that will never come
   */
  TL_BLE_HCI_RxCmdResp();
 8011890:	f000 f8df 	bl	8011a52 <TL_BLE_HCI_RxCmdResp>
   * Notify the application the HCI interface has timed out
   */
  TL_BLE_HCI_ToNot();

  return;
}
 8011894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TL_BLE_HCI_ToNot();
 8011898:	f000 b8de 	b.w	8011a58 <TL_BLE_HCI_ToNot>
 801189c:	20000248 	.word	0x20000248

080118a0 <TL_BLE_EvtReceived>:
{
 80118a0:	b508      	push	{r3, lr}
  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 80118a2:	7a43      	ldrb	r3, [r0, #9]
 80118a4:	3b0e      	subs	r3, #14
 80118a6:	2b01      	cmp	r3, #1
{
 80118a8:	4601      	mov	r1, r0
  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 80118aa:	d806      	bhi.n	80118ba <TL_BLE_EvtReceived+0x1a>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80118ac:	4807      	ldr	r0, [pc, #28]	; (80118cc <TL_BLE_EvtReceived+0x2c>)
 80118ae:	f000 fa40 	bl	8011d32 <LST_insert_tail>
}
 80118b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TL_BLE_HCI_RxCmdResp(); /**< Notify the application a full Cmd Event has been received */
 80118b6:	f000 b8cc 	b.w	8011a52 <TL_BLE_HCI_RxCmdResp>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80118ba:	4805      	ldr	r0, [pc, #20]	; (80118d0 <TL_BLE_EvtReceived+0x30>)
 80118bc:	f000 fa39 	bl	8011d32 <LST_insert_tail>
}
 80118c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TL_BLE_HCI_UserEvtProcReq((TL_PacketHeader_t*)&HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80118c4:	4802      	ldr	r0, [pc, #8]	; (80118d0 <TL_BLE_EvtReceived+0x30>)
 80118c6:	f000 b8e1 	b.w	8011a8c <TL_BLE_HCI_UserEvtProcReq>
 80118ca:	bf00      	nop
 80118cc:	20000249 	.word	0x20000249
 80118d0:	20000251 	.word	0x20000251

080118d4 <TL_BLE_HCI_Init>:

void TL_BLE_HCI_Init(TL_BLE_HCI_InitMode_t initmode, TL_CmdPacket_t * p_cmdbuffer, uint8_t *p_evtpool, uint32_t evtpoolsize)
{
 80118d4:	b530      	push	{r4, r5, lr}
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80118d6:	4c18      	ldr	r4, [pc, #96]	; (8011938 <TL_BLE_HCI_Init+0x64>)
{
 80118d8:	b085      	sub	sp, #20
 80118da:	4605      	mov	r5, r0
  LST_init_head (&HciCmdEventQueue);
 80118dc:	1c60      	adds	r0, r4, #1
{
 80118de:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80118e2:	9301      	str	r3, [sp, #4]
  LST_init_head (&HciCmdEventQueue);
 80118e4:	f000 fa18 	bl	8011d18 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;

  if(initmode == TL_BLE_HCI_InitFull)
 80118e8:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
  pCmdBuffer = p_cmdbuffer;
 80118ec:	9903      	ldr	r1, [sp, #12]
 80118ee:	6161      	str	r1, [r4, #20]
  if(initmode == TL_BLE_HCI_InitFull)
 80118f0:	2d01      	cmp	r5, #1
 80118f2:	9303      	str	r3, [sp, #12]
 80118f4:	d111      	bne.n	801191a <TL_BLE_HCI_Init+0x46>
  LST_init_head (&HciAsynchEventQueue);
 80118f6:	f104 0009 	add.w	r0, r4, #9
 80118fa:	9101      	str	r1, [sp, #4]
 80118fc:	f000 fa0c 	bl	8011d18 <LST_init_head>
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8011900:	4628      	mov	r0, r5
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 8011902:	7625      	strb	r5, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8011904:	f000 fe24 	bl	8012550 <TL_BLE_HCI_StatusNot>
  {
    Initialization();

    TL_BLE_Init(TL_BLE_Init_Full, p_cmdbuffer, p_evtpool, evtpoolsize);
 8011908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801190c:	9901      	ldr	r1, [sp, #4]
 801190e:	4628      	mov	r0, r5

    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
  }

  return;
}
 8011910:	b005      	add	sp, #20
 8011912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 8011916:	f000 b987 	b.w	8011c28 <TL_BLE_Init>
  LST_init_head (&HciAsynchEventQueue);
 801191a:	f104 0009 	add.w	r0, r4, #9
 801191e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011922:	f000 f9f9 	bl	8011d18 <LST_init_head>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 8011926:	2001      	movs	r0, #1
 8011928:	7620      	strb	r0, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 801192a:	f000 fe11 	bl	8012550 <TL_BLE_HCI_StatusNot>
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 801192e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011932:	9901      	ldr	r1, [sp, #4]
 8011934:	2000      	movs	r0, #0
 8011936:	e7eb      	b.n	8011910 <TL_BLE_HCI_Init+0x3c>
 8011938:	20000248 	.word	0x20000248

0801193c <TL_BLE_HCI_UserEvtProc>:
{
  return HCICmdStatus;
}

void TL_BLE_HCI_UserEvtProc(void)
{
 801193c:	b513      	push	{r0, r1, r4, lr}
  TL_EvtPacket_t *phcievtbuffer;

  while(LST_is_empty(&HciAsynchEventQueue) == FALSE)
 801193e:	4c09      	ldr	r4, [pc, #36]	; (8011964 <TL_BLE_HCI_UserEvtProc+0x28>)
 8011940:	4808      	ldr	r0, [pc, #32]	; (8011964 <TL_BLE_HCI_UserEvtProc+0x28>)
 8011942:	f000 f9ec 	bl	8011d1e <LST_is_empty>
 8011946:	b108      	cbz	r0, 801194c <TL_BLE_HCI_UserEvtProc+0x10>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
    TL_BLE_EvtDone( phcievtbuffer);
  }

  return;
}
 8011948:	b002      	add	sp, #8
 801194a:	bd10      	pop	{r4, pc}
    LST_remove_head (&HciAsynchEventQueue, (tListNode **)&phcievtbuffer);
 801194c:	a901      	add	r1, sp, #4
 801194e:	4620      	mov	r0, r4
 8011950:	f000 fa06 	bl	8011d60 <LST_remove_head>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
 8011954:	9801      	ldr	r0, [sp, #4]
 8011956:	3008      	adds	r0, #8
 8011958:	f000 f89b 	bl	8011a92 <TL_BLE_HCI_UserEvtRx>
    TL_BLE_EvtDone( phcievtbuffer);
 801195c:	9801      	ldr	r0, [sp, #4]
 801195e:	f000 f9d9 	bl	8011d14 <TL_BLE_EvtDone>
 8011962:	e7ed      	b.n	8011940 <TL_BLE_HCI_UserEvtProc+0x4>
 8011964:	20000251 	.word	0x20000251

08011968 <TL_BLE_HCI_SendCmd>:

int32_t TL_BLE_HCI_SendCmd( TL_BLE_HCI_Cmd_t *p_cmd )
{
 8011968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801196c:	4605      	mov	r5, r0
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdBusy);
 801196e:	2000      	movs	r0, #0
 8011970:	f000 fdee 	bl	8012550 <TL_BLE_HCI_StatusNot>
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  int return_value;

  Cmd_SetStatus(TL_BLE_HCI_CmdBusy);
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8011974:	886b      	ldrh	r3, [r5, #2]
 8011976:	882a      	ldrh	r2, [r5, #0]
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 8011978:	4c31      	ldr	r4, [pc, #196]	; (8011a40 <TL_BLE_HCI_SendCmd+0xd8>)
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801197a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801197e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011982:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  return return_value;
}

void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011986:	6960      	ldr	r0, [r4, #20]
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 8011988:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 801198a:	f8a0 3009 	strh.w	r3, [r0, #9]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 801198e:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.plen = plen;
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8011990:	b2d2      	uxtb	r2, r2
 8011992:	300c      	adds	r0, #12
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8011994:	b29f      	uxth	r7, r3
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 8011996:	7626      	strb	r6, [r4, #24]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8011998:	f002 f952 	bl	8013c40 <memcpy>

  TL_BLE_SendCmd();
 801199c:	f000 f96c 	bl	8011c78 <TL_BLE_SendCmd>
  HciLayerTimeout = FALSE;
 80119a0:	4622      	mov	r2, r4
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 80119a2:	4928      	ldr	r1, [pc, #160]	; (8011a44 <TL_BLE_HCI_SendCmd+0xdc>)
  HciLayerTimeout = FALSE;
 80119a4:	f802 6b19 	strb.w	r6, [r2], #25
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 80119a8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80119ac:	f000 f85a 	bl	8011a64 <TL_BLE_HCI_TimStart>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80119b0:	f104 0801 	add.w	r8, r4, #1
  return HCICmdStatus;
 80119b4:	7e23      	ldrb	r3, [r4, #24]
  while((CmdGetStatus() == TL_BLE_HCI_CmdBusy) && (HciLayerTimeout == FALSE))
 80119b6:	b90b      	cbnz	r3, 80119bc <TL_BLE_HCI_SendCmd+0x54>
 80119b8:	7823      	ldrb	r3, [r4, #0]
 80119ba:	b15b      	cbz	r3, 80119d4 <TL_BLE_HCI_SendCmd+0x6c>
  TL_BLE_HCI_TimStop(hci_timer_id);
 80119bc:	7e60      	ldrb	r0, [r4, #25]
 80119be:	f000 f84f 	bl	8011a60 <TL_BLE_HCI_TimStop>
  if(HciLayerTimeout == TRUE)
 80119c2:	7820      	ldrb	r0, [r4, #0]
}
 80119c4:	2801      	cmp	r0, #1
 80119c6:	f04f 30ff 	mov.w	r0, #4294967295
 80119ca:	bf18      	it	ne
 80119cc:	2000      	movne	r0, #0
 80119ce:	b003      	add	sp, #12
 80119d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TL_BLE_HCI_WaitCmdResp();
 80119d4:	f000 f841 	bl	8011a5a <TL_BLE_HCI_WaitCmdResp>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 80119d8:	f04f 0901 	mov.w	r9, #1
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80119dc:	4640      	mov	r0, r8
 80119de:	f000 f99e 	bl	8011d1e <LST_is_empty>
 80119e2:	2800      	cmp	r0, #0
 80119e4:	d1e6      	bne.n	80119b4 <TL_BLE_HCI_SendCmd+0x4c>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80119e6:	a901      	add	r1, sp, #4
 80119e8:	4640      	mov	r0, r8
 80119ea:	f000 f9b9 	bl	8011d60 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_EVT_CS_OPCODE)
 80119ee:	9e01      	ldr	r6, [sp, #4]
 80119f0:	7a73      	ldrb	r3, [r6, #9]
 80119f2:	2b0f      	cmp	r3, #15
 80119f4:	d111      	bne.n	8011a1a <TL_BLE_HCI_SendCmd+0xb2>
        if(pcommand_status_event->cmdcode == opcode)
 80119f6:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 80119fa:	42bb      	cmp	r3, r7
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80119fc:	bf02      	ittt	eq
 80119fe:	692b      	ldreq	r3, [r5, #16]
 8011a00:	7af2      	ldrbeq	r2, [r6, #11]
 8011a02:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 8011a04:	7b33      	ldrb	r3, [r6, #12]
        if(pcommand_complete_event->numcmd != 0)
 8011a06:	b123      	cbz	r3, 8011a12 <TL_BLE_HCI_SendCmd+0xaa>
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8011a08:	2001      	movs	r0, #1
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 8011a0a:	f884 9018 	strb.w	r9, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8011a0e:	f000 fd9f 	bl	8012550 <TL_BLE_HCI_StatusNot>
      TL_BLE_EvtDone( pevtpacket);
 8011a12:	9801      	ldr	r0, [sp, #4]
 8011a14:	f000 f97e 	bl	8011d14 <TL_BLE_EvtDone>
 8011a18:	e7e0      	b.n	80119dc <TL_BLE_HCI_SendCmd+0x74>
        if(pcommand_complete_event->cmdcode == opcode)
 8011a1a:	89b3      	ldrh	r3, [r6, #12]
 8011a1c:	42bb      	cmp	r3, r7
 8011a1e:	d10c      	bne.n	8011a3a <TL_BLE_HCI_SendCmd+0xd2>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 8011a20:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8011a22:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8011a24:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 8011a26:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8011a28:	b2d2      	uxtb	r2, r2
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	bfa8      	it	ge
 8011a2e:	461a      	movge	r2, r3
 8011a30:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8011a32:	f106 010e 	add.w	r1, r6, #14
 8011a36:	f002 f903 	bl	8013c40 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 8011a3a:	7af3      	ldrb	r3, [r6, #11]
 8011a3c:	e7e3      	b.n	8011a06 <TL_BLE_HCI_SendCmd+0x9e>
 8011a3e:	bf00      	nop
 8011a40:	20000248 	.word	0x20000248
 8011a44:	08011889 	.word	0x08011889

08011a48 <hci_send_req>:


/* This API is imposed by the MW */
int32_t hci_send_req(struct hci_request *r, uint8_t async)
{
  return ( TL_BLE_HCI_SendCmd( (TL_BLE_HCI_Cmd_t *)r ) );
 8011a48:	f7ff bf8e 	b.w	8011968 <TL_BLE_HCI_SendCmd>

08011a4c <TL_BLE_R_EvtProcReq>:



void TL_BLE_R_EvtProcReq(void)
{
  SCH_SetTask(CFG_IdleTask_TlEvt);
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	f000 ba43 	b.w	8011ed8 <SCH_SetTask>

08011a52 <TL_BLE_HCI_RxCmdResp>:
  return;
}

void TL_BLE_HCI_RxCmdResp()
{
  SCH_SetEvt(CFG_IdleEvt_HciCmdEvtResp);
 8011a52:	2000      	movs	r0, #0
 8011a54:	f000 ba72 	b.w	8011f3c <SCH_SetEvt>

08011a58 <TL_BLE_HCI_ToNot>:
}

void TL_BLE_HCI_ToNot(void)
{
  return;
}
 8011a58:	4770      	bx	lr

08011a5a <TL_BLE_HCI_WaitCmdResp>:

void TL_BLE_HCI_WaitCmdResp(void)
{
  SCH_WaitEvt(CFG_IdleEvt_HciCmdEvtResp);
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	f000 bab0 	b.w	8011fc0 <SCH_WaitEvt>

08011a60 <TL_BLE_HCI_TimStop>:
  return;
}

void TL_BLE_HCI_TimStop(uint8_t timerID)
{
  HW_TS_Delete(timerID);
 8011a60:	f7ff be36 	b.w	80116d0 <HW_TS_Delete>

08011a64 <TL_BLE_HCI_TimStart>:

  return;
}

void TL_BLE_HCI_TimStart(uint32_t expiryTime, void(*timercb)(void), uint8_t *timerID)
{
 8011a64:	b538      	push	{r3, r4, r5, lr}
 8011a66:	4614      	mov	r4, r2
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 8011a68:	2200      	movs	r2, #0
{
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	4605      	mov	r5, r0
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 8011a6e:	4621      	mov	r1, r4
 8011a70:	4610      	mov	r0, r2
 8011a72:	f7ff fd3f 	bl	80114f4 <HW_TS_Create>
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 8011a76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011a7a:	434d      	muls	r5, r1
 8011a7c:	7820      	ldrb	r0, [r4, #0]
 8011a7e:	213f      	movs	r1, #63	; 0x3f
 8011a80:	fbb5 f1f1 	udiv	r1, r5, r1

  return;
}
 8011a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 8011a88:	f7ff be30 	b.w	80116ec <HW_TS_Start>

08011a8c <TL_BLE_HCI_UserEvtProcReq>:
 * @param  None
 * @retval None
 */
void TL_BLE_HCI_UserEvtProcReq( TL_PacketHeader_t *p_userevt_queue )
{
  SCH_SetTask(CFG_IdleTask_HciAsynchEvt);
 8011a8c:	2005      	movs	r0, #5
 8011a8e:	f000 ba23 	b.w	8011ed8 <SCH_SetTask>

08011a92 <TL_BLE_HCI_UserEvtRx>:
 * @param  pckt: The user event received from the BlueNRG device
 * @retval None
 */
void TL_BLE_HCI_UserEvtRx(void *pckt)
{
  SVCCTL_HCI_UserEvtRx(pckt);
 8011a92:	f7fe bf91 	b.w	80109b8 <SVCCTL_HCI_UserEvtRx>
	...

08011a98 <Event_Queue_Process>:
  return;
}

/* Private Functions Definition ------------------------------------------------------*/
static void Event_Queue_Process(TL_BLE_R_EvtPacketType_t tl_event_queue_type)
{
 8011a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a9c:	4e32      	ldr	r6, [pc, #200]	; (8011b68 <Event_Queue_Process+0xd0>)
  TL_EvtPacket_t * ptl_evt_buffer;
  TL_EvtPacket_t *plarge_hci_buffer;

  if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d05e      	beq.n	8011b62 <Event_Queue_Process+0xca>
  {
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
  }
  else
  {
    plarge_hci_buffer = (TL_EvtPacket_t*)pCmdBuffer;
 8011aa4:	f8d6 710c 	ldr.w	r7, [r6, #268]	; 0x10c
  }

  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 8011aa8:	4b30      	ldr	r3, [pc, #192]	; (8011b6c <Event_Queue_Process+0xd4>)
 8011aaa:	240e      	movs	r4, #14
 8011aac:	436c      	muls	r4, r5
 8011aae:	eb03 0804 	add.w	r8, r3, r4
  {
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 8011ab2:	4434      	add	r4, r6
 8011ab4:	e02e      	b.n	8011b14 <Event_Queue_Process+0x7c>
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
 8011ab6:	4640      	mov	r0, r8
 8011ab8:	a901      	add	r1, sp, #4
 8011aba:	f000 f951 	bl	8011d60 <LST_remove_head>
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 8011abe:	f894 9118 	ldrb.w	r9, [r4, #280]	; 0x118
 8011ac2:	9801      	ldr	r0, [sp, #4]
 8011ac4:	f1b9 0f00 	cmp.w	r9, #0
 8011ac8:	d103      	bne.n	8011ad2 <Event_Queue_Process+0x3a>
    {
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl = ptl_evt_buffer->evtserial.evt.plen + TL_EVT_HDR_SIZE;
 8011aca:	7a83      	ldrb	r3, [r0, #10]
 8011acc:	3303      	adds	r3, #3
 8011ace:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
    }

    if(TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl > TL_BLE_EVENT_FRAME_SIZE)
 8011ad2:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
 8011ad6:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8011ada:	d928      	bls.n	8011b2e <Event_Queue_Process+0x96>
      /**
       * The packet is not complete
       */
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 8011adc:	f8b4 c11c 	ldrh.w	ip, [r4, #284]	; 0x11c
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 8011ae6:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 8011aea:	f107 0308 	add.w	r3, r7, #8
 8011aee:	f100 0108 	add.w	r1, r0, #8
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 8011af2:	f8a4 211a 	strh.w	r2, [r4, #282]	; 0x11a
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 8011af6:	eb03 000c 	add.w	r0, r3, ip
 8011afa:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011afe:	f002 f89f 	bl	8013c40 <memcpy>
      MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 8011b02:	9801      	ldr	r0, [sp, #4]
 8011b04:	f000 f9c6 	bl	8011e94 <MM_ReleaseBuffer>
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset += TL_BLE_EVENT_FRAME_SIZE;
 8011b08:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8011b0c:	f503 7381 	add.w	r3, r3, #258	; 0x102
      else
      {
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
      }
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset  = 0;
 8011b10:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 8011b14:	4640      	mov	r0, r8
 8011b16:	f000 f902 	bl	8011d1e <LST_is_empty>
 8011b1a:	b928      	cbnz	r0, 8011b28 <Event_Queue_Process+0x90>
 8011b1c:	f896 312c 	ldrb.w	r3, [r6, #300]	; 0x12c
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d0c8      	beq.n	8011ab6 <Event_Queue_Process+0x1e>
 8011b24:	2d01      	cmp	r5, #1
 8011b26:	d0c6      	beq.n	8011ab6 <Event_Queue_Process+0x1e>
    }
  }

  return;
}
 8011b28:	b003      	add	sp, #12
 8011b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_cont)
 8011b2e:	f1b9 0f01 	cmp.w	r9, #1
 8011b32:	d110      	bne.n	8011b56 <Event_Queue_Process+0xbe>
        memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl);
 8011b34:	f8b4 c11c 	ldrh.w	ip, [r4, #284]	; 0x11c
 8011b38:	f107 0308 	add.w	r3, r7, #8
 8011b3c:	f100 0108 	add.w	r1, r0, #8
 8011b40:	eb03 000c 	add.w	r0, r3, ip
 8011b44:	f002 f87c 	bl	8013c40 <memcpy>
        MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 8011b48:	9801      	ldr	r0, [sp, #4]
 8011b4a:	f000 f9a3 	bl	8011e94 <MM_ReleaseBuffer>
        if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 8011b4e:	b90d      	cbnz	r5, 8011b54 <Event_Queue_Process+0xbc>
          HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Busy;
 8011b50:	f886 912c 	strb.w	r9, [r6, #300]	; 0x12c
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)plarge_hci_buffer );
 8011b54:	4638      	mov	r0, r7
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
 8011b56:	f7ff fea3 	bl	80118a0 <TL_BLE_EvtReceived>
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8011b60:	e7d6      	b.n	8011b10 <Event_Queue_Process+0x78>
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
 8011b62:	4637      	mov	r7, r6
 8011b64:	e7a0      	b.n	8011aa8 <Event_Queue_Process+0x10>
 8011b66:	bf00      	nop
 8011b68:	20000264 	.word	0x20000264
 8011b6c:	20000374 	.word	0x20000374

08011b70 <TL_BLE_R_EvtInput>:
{
 8011b70:	b508      	push	{r3, lr}
  LST_insert_tail (&TLQueueEvtContext[hci_evt_packet_type].TlBufferQueue, (tListNode *)hci_evt_buffer);
 8011b72:	4b05      	ldr	r3, [pc, #20]	; (8011b88 <TL_BLE_R_EvtInput+0x18>)
 8011b74:	220e      	movs	r2, #14
 8011b76:	fb02 3000 	mla	r0, r2, r0, r3
 8011b7a:	f000 f8da 	bl	8011d32 <LST_insert_tail>
}
 8011b7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TL_BLE_R_EvtProcReq();
 8011b82:	f7ff bf63 	b.w	8011a4c <TL_BLE_R_EvtProcReq>
 8011b86:	bf00      	nop
 8011b88:	20000374 	.word	0x20000374

08011b8c <TL_BLE_R_EvtProc>:
{
 8011b8c:	b508      	push	{r3, lr}
  Event_Queue_Process(TL_BLE_R_HciCmdEvt);
 8011b8e:	2001      	movs	r0, #1
 8011b90:	f7ff ff82 	bl	8011a98 <Event_Queue_Process>
}
 8011b94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Event_Queue_Process(TL_BLE_R_HciAsynchEvt);
 8011b98:	2000      	movs	r0, #0
 8011b9a:	f7ff bf7d 	b.w	8011a98 <Event_Queue_Process>
	...

08011ba0 <TL_BLE_R_Init>:
{
 8011ba0:	b538      	push	{r3, r4, r5, lr}
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 8011ba2:	4c0c      	ldr	r4, [pc, #48]	; (8011bd4 <TL_BLE_R_Init+0x34>)
 8011ba4:	2300      	movs	r3, #0
{
 8011ba6:	4605      	mov	r5, r0
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 8011ba8:	f504 7088 	add.w	r0, r4, #272	; 0x110
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 8011bac:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciPacketStatus = hci_packet_start;
 8011bb0:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciLargeBufferOffset = 0;
 8011bb4:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciLargeBufferOffset = 0;
 8011bb8:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
  HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 8011bbc:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 8011bc0:	f000 f8aa 	bl	8011d18 <LST_init_head>
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciCmdEvt].TlBufferQueue);
 8011bc4:	f504 708f 	add.w	r0, r4, #286	; 0x11e
 8011bc8:	f000 f8a6 	bl	8011d18 <LST_init_head>
  pCmdBuffer = cmdbuffer;
 8011bcc:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
}
 8011bd0:	bd38      	pop	{r3, r4, r5, pc}
 8011bd2:	bf00      	nop
 8011bd4:	20000264 	.word	0x20000264

08011bd8 <TL_BLE_R_EvtDone>:

void TL_BLE_R_EvtDone(TL_EvtPacket_t * hcievt)
{
  if(hcievt == (TL_EvtPacket_t *)&HciLargeAsynchBuffer)
 8011bd8:	4a07      	ldr	r2, [pc, #28]	; (8011bf8 <TL_BLE_R_EvtDone+0x20>)
 8011bda:	4290      	cmp	r0, r2
 8011bdc:	d104      	bne.n	8011be8 <TL_BLE_R_EvtDone+0x10>
  {
    HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 8011bde:	2200      	movs	r2, #0
 8011be0:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c

    /**
     * Check if there are waiting events to be copied in the large buffer
     */
    TL_BLE_R_EvtProcReq();
 8011be4:	f7ff bf32 	b.w	8011a4c <TL_BLE_R_EvtProcReq>
  }
  else if(hcievt != (TL_EvtPacket_t *)pCmdBuffer)
 8011be8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8011bec:	4282      	cmp	r2, r0
 8011bee:	d001      	beq.n	8011bf4 <TL_BLE_R_EvtDone+0x1c>
  {
    MM_ReleaseBuffer((MM_pBufAdd_t)hcievt);
 8011bf0:	f000 b950 	b.w	8011e94 <MM_ReleaseBuffer>
  }

  return;
}
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop
 8011bf8:	20000264 	.word	0x20000264

08011bfc <Allocate_New_Buffer_To_TL>:
}


/* Private Functions Definition ------------------------------------------------------*/
static void Allocate_New_Buffer_To_TL(void)
{
 8011bfc:	b508      	push	{r3, lr}
  pHciEventBuffer =  (TL_EvtPacket_t*) MM_GetBuffer(sizeof(TL_PacketHeader_t) + TL_BLE_EVENT_FRAME_SIZE, (MM_pCb_t) Allocate_New_Buffer_To_TL);
 8011bfe:	4908      	ldr	r1, [pc, #32]	; (8011c20 <Allocate_New_Buffer_To_TL+0x24>)
 8011c00:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8011c04:	f000 f92c 	bl	8011e60 <MM_GetBuffer>
 8011c08:	4b06      	ldr	r3, [pc, #24]	; (8011c24 <Allocate_New_Buffer_To_TL+0x28>)
 8011c0a:	6018      	str	r0, [r3, #0]
  if(pHciEventBuffer)
 8011c0c:	b138      	cbz	r0, 8011c1e <Allocate_New_Buffer_To_TL+0x22>
  {
    TlSpiIsrContext.TlSizeLeftInBufferFrame = TL_BLE_EVENT_FRAME_SIZE;
 8011c0e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8011c12:	8119      	strh	r1, [r3, #8]
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 8011c14:	3008      	adds	r0, #8
  }

  return;
}
 8011c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 8011c1a:	f7ff b9f5 	b.w	8011008 <HW_BNRG_EvtReq>
}
 8011c1e:	bd08      	pop	{r3, pc}
 8011c20:	08011bfd 	.word	0x08011bfd
 8011c24:	20000394 	.word	0x20000394

08011c28 <TL_BLE_Init>:
{
 8011c28:	b570      	push	{r4, r5, r6, lr}
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8011c2a:	4e11      	ldr	r6, [pc, #68]	; (8011c70 <TL_BLE_Init+0x48>)
{
 8011c2c:	4604      	mov	r4, r0
 8011c2e:	4610      	mov	r0, r2
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8011c30:	2200      	movs	r2, #0
{
 8011c32:	460d      	mov	r5, r1
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8011c34:	7132      	strb	r2, [r6, #4]
  MM_Init(evtpool, evtpoolsize, ELT_SIZE);
 8011c36:	4619      	mov	r1, r3
 8011c38:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8011c3c:	f000 f8f0 	bl	8011e20 <MM_Init>
  TL_BLE_R_Init(cmdbuffer);
 8011c40:	4628      	mov	r0, r5
  pCmdBuffer = cmdbuffer;
 8011c42:	60f5      	str	r5, [r6, #12]
  TL_BLE_R_Init(cmdbuffer);
 8011c44:	f7ff ffac 	bl	8011ba0 <TL_BLE_R_Init>
  if( initmode == TL_BLE_Init_Limited)
 8011c48:	b934      	cbnz	r4, 8011c58 <TL_BLE_Init+0x30>
    HW_BNRG_Init(HW_BNRG_Limited);
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f7ff f940 	bl	8010ed0 <HW_BNRG_Init>
}
 8011c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Allocate_New_Buffer_To_TL();
 8011c54:	f7ff bfd2 	b.w	8011bfc <Allocate_New_Buffer_To_TL>
    HW_BNRG_Init(HW_BNRG_Full);
 8011c58:	2001      	movs	r0, #1
 8011c5a:	f7ff f939 	bl	8010ed0 <HW_BNRG_Init>
    while(HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET);
 8011c5e:	4c05      	ldr	r4, [pc, #20]	; (8011c74 <TL_BLE_Init+0x4c>)
 8011c60:	2140      	movs	r1, #64	; 0x40
 8011c62:	4620      	mov	r0, r4
 8011c64:	f001 fa22 	bl	80130ac <HAL_GPIO_ReadPin>
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	d0f9      	beq.n	8011c60 <TL_BLE_Init+0x38>
 8011c6c:	e7f0      	b.n	8011c50 <TL_BLE_Init+0x28>
 8011c6e:	bf00      	nop
 8011c70:	20000394 	.word	0x20000394
 8011c74:	48001000 	.word	0x48001000

08011c78 <TL_BLE_SendCmd>:
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8011c78:	4b04      	ldr	r3, [pc, #16]	; (8011c8c <TL_BLE_SendCmd+0x14>)
 8011c7a:	68d8      	ldr	r0, [r3, #12]
  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 8011c7c:	7ac1      	ldrb	r1, [r0, #11]
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8011c7e:	2301      	movs	r3, #1
 8011c80:	7203      	strb	r3, [r0, #8]
  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 8011c82:	3104      	adds	r1, #4
 8011c84:	3008      	adds	r0, #8
 8011c86:	f7ff ba57 	b.w	8011138 <HW_BNRG_Send>
 8011c8a:	bf00      	nop
 8011c8c:	20000394 	.word	0x20000394

08011c90 <HW_BNRG_Isr>:
{
 8011c90:	b570      	push	{r4, r5, r6, lr}
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 8011c92:	4c1f      	ldr	r4, [pc, #124]	; (8011d10 <HW_BNRG_Isr+0x80>)
 8011c94:	7923      	ldrb	r3, [r4, #4]
 8011c96:	2b01      	cmp	r3, #1
{
 8011c98:	4605      	mov	r5, r0
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 8011c9a:	d114      	bne.n	8011cc6 <HW_BNRG_Isr+0x36>
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi -= event_payload_len;
 8011c9c:	88e3      	ldrh	r3, [r4, #6]
 8011c9e:	1a1b      	subs	r3, r3, r0
 8011ca0:	80e3      	strh	r3, [r4, #6]
  if(TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi != 0)
 8011ca2:	88e6      	ldrh	r6, [r4, #6]
 8011ca4:	6821      	ldr	r1, [r4, #0]
 8011ca6:	b33e      	cbz	r6, 8011cf8 <HW_BNRG_Isr+0x68>
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 8011ca8:	8922      	ldrh	r2, [r4, #8]
    TlSpiIsrContext.TlPacketStatus = tl_packet_cont;
 8011caa:	2301      	movs	r3, #1
 8011cac:	7123      	strb	r3, [r4, #4]
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 8011cae:	1b53      	subs	r3, r2, r5
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	8123      	strh	r3, [r4, #8]
    if(TlSpiIsrContext.TlSizeLeftInBufferFrame != 0)
 8011cb4:	b1cb      	cbz	r3, 8011cea <HW_BNRG_Isr+0x5a>
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 8011cb6:	1ac8      	subs	r0, r1, r3
}
 8011cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	f500 7085 	add.w	r0, r0, #266	; 0x10a
 8011cc2:	f7ff b9a1 	b.w	8011008 <HW_BNRG_EvtReq>
 8011cc6:	6822      	ldr	r2, [r4, #0]
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi = TL_EVT_HDR_SIZE + pHciEventBuffer->evtserial.evt.plen - event_payload_len;
 8011cc8:	7a93      	ldrb	r3, [r2, #10]
 8011cca:	3303      	adds	r3, #3
 8011ccc:	1a1b      	subs	r3, r3, r0
 8011cce:	80e3      	strh	r3, [r4, #6]
    if((pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CC_OPCODE) && (pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CS_OPCODE))
 8011cd0:	7a53      	ldrb	r3, [r2, #9]
 8011cd2:	3b0e      	subs	r3, #14
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d905      	bls.n	8011ce4 <HW_BNRG_Isr+0x54>
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 8011cd8:	2100      	movs	r1, #0
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 8011cda:	2003      	movs	r0, #3
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 8011cdc:	7161      	strb	r1, [r4, #5]
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 8011cde:	f000 f853 	bl	8011d88 <LPM_SetOffMode>
 8011ce2:	e7de      	b.n	8011ca2 <HW_BNRG_Isr+0x12>
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciCmdEvt;
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	7163      	strb	r3, [r4, #5]
 8011ce8:	e7db      	b.n	8011ca2 <HW_BNRG_Isr+0x12>
      TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 8011cea:	7960      	ldrb	r0, [r4, #5]
 8011cec:	f7ff ff40 	bl	8011b70 <TL_BLE_R_EvtInput>
}
 8011cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Allocate_New_Buffer_To_TL();
 8011cf4:	f7ff bf82 	b.w	8011bfc <Allocate_New_Buffer_To_TL>
    TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 8011cf8:	7960      	ldrb	r0, [r4, #5]
 8011cfa:	f7ff ff39 	bl	8011b70 <TL_BLE_R_EvtInput>
    TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8011cfe:	7126      	strb	r6, [r4, #4]
    Allocate_New_Buffer_To_TL();
 8011d00:	f7ff ff7c 	bl	8011bfc <Allocate_New_Buffer_To_TL>
}
 8011d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_En);
 8011d08:	2101      	movs	r1, #1
 8011d0a:	2003      	movs	r0, #3
 8011d0c:	f000 b83c 	b.w	8011d88 <LPM_SetOffMode>
 8011d10:	20000394 	.word	0x20000394

08011d14 <TL_BLE_EvtDone>:
  TL_BLE_R_EvtDone(hcievt);
 8011d14:	f7ff bf60 	b.w	8011bd8 <TL_BLE_R_EvtDone>

08011d18 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8011d18:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 8011d1a:	6040      	str	r0, [r0, #4]
}
 8011d1c:	4770      	bx	lr

08011d1e <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d1e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d22:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8011d24:	6802      	ldr	r2, [r0, #0]
  {
    return_value = TRUE;
 8011d26:	1a82      	subs	r2, r0, r2
 8011d28:	4250      	negs	r0, r2
 8011d2a:	4150      	adcs	r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d2c:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8011d30:	4770      	bx	lr

08011d32 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d32:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d36:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8011d38:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 8011d3a:	6842      	ldr	r2, [r0, #4]
 8011d3c:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8011d3e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8011d40:	684a      	ldr	r2, [r1, #4]
 8011d42:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d44:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011d48:	4770      	bx	lr

08011d4a <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d4a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d4e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8011d50:	6843      	ldr	r3, [r0, #4]
 8011d52:	6801      	ldr	r1, [r0, #0]
 8011d54:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 8011d56:	6801      	ldr	r1, [r0, #0]
 8011d58:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d5a:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011d5e:	4770      	bx	lr

08011d60 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8011d60:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d62:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d66:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8011d68:	6803      	ldr	r3, [r0, #0]
 8011d6a:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 8011d6c:	6800      	ldr	r0, [r0, #0]
 8011d6e:	f7ff ffec 	bl	8011d4a <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d72:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011d76:	bd10      	pop	{r4, pc}

08011d78 <LPM_SetConf>:


/* Functions Definition ------------------------------------------------------*/
void LPM_SetConf(LPM_Conf_t *p_conf)
{
  LowPowerModeConfiguration.Stop_Mode_Config = p_conf->Stop_Mode_Config;
 8011d78:	4b02      	ldr	r3, [pc, #8]	; (8011d84 <LPM_SetConf+0xc>)
 8011d7a:	6802      	ldr	r2, [r0, #0]
 8011d7c:	601a      	str	r2, [r3, #0]
  LowPowerModeConfiguration.OFF_Mode_Config = p_conf->OFF_Mode_Config;
 8011d7e:	6842      	ldr	r2, [r0, #4]
 8011d80:	605a      	str	r2, [r3, #4]

  return;
}
 8011d82:	4770      	bx	lr
 8011d84:	200003a4 	.word	0x200003a4

08011d88 <LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d88:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d8c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_OffMode_En)
 8011d8e:	2301      	movs	r3, #1
 8011d90:	fa03 f000 	lsl.w	r0, r3, r0
 8011d94:	4299      	cmp	r1, r3
 8011d96:	4b05      	ldr	r3, [pc, #20]	; (8011dac <LPM_SetOffMode+0x24>)
  {
    LowPowerModeSel &= (~(1<<id));
 8011d98:	6899      	ldr	r1, [r3, #8]
 8011d9a:	bf0c      	ite	eq
 8011d9c:	ea21 0000 	biceq.w	r0, r1, r0
  }
  else
  {
    LowPowerModeSel |= (1<<id);
 8011da0:	4308      	orrne	r0, r1
 8011da2:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011da4:	f382 8810 	msr	PRIMASK, r2
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8011da8:	4770      	bx	lr
 8011daa:	bf00      	nop
 8011dac:	200003a4 	.word	0x200003a4

08011db0 <LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011db0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011db4:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_StopMode_Dis)
 8011db6:	2301      	movs	r3, #1
 8011db8:	fa03 f000 	lsl.w	r0, r3, r0
 8011dbc:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <LPM_SetStopMode+0x24>)
 8011dbe:	b931      	cbnz	r1, 8011dce <LPM_SetStopMode+0x1e>
  {
    SysClockReq &= (~(1<<id));
 8011dc0:	68d9      	ldr	r1, [r3, #12]
 8011dc2:	ea21 0000 	bic.w	r0, r1, r0
 8011dc6:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dc8:	f382 8810 	msr	PRIMASK, r2
  }

  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/

  return;
}
 8011dcc:	4770      	bx	lr
    SysClockReq |= (1<<id);
 8011dce:	68d9      	ldr	r1, [r3, #12]
 8011dd0:	4308      	orrs	r0, r1
 8011dd2:	e7f8      	b.n	8011dc6 <LPM_SetStopMode+0x16>
 8011dd4:	200003a4 	.word	0x200003a4

08011dd8 <LPM_EnterSleepMode>:
/* __WEAK functions: The application can overload this function  if needed ----*/
/* ----------------------------------------------------------------------------*/

__weak void LPM_EnterSleepMode(void)
{
}
 8011dd8:	4770      	bx	lr

08011dda <LPM_ExitSleepMode>:
 8011dda:	4770      	bx	lr

08011ddc <LPM_EnterStopMode>:
 8011ddc:	4770      	bx	lr
	...

08011de0 <LPM_EnterModeSelected>:
{
 8011de0:	b510      	push	{r4, lr}
  if(SysClockReq)
 8011de2:	4c0e      	ldr	r4, [pc, #56]	; (8011e1c <LPM_EnterModeSelected+0x3c>)
 8011de4:	68e3      	ldr	r3, [r4, #12]
 8011de6:	b133      	cbz	r3, 8011df6 <LPM_EnterModeSelected+0x16>
    LPM_EnterSleepMode();
 8011de8:	f7ff fff6 	bl	8011dd8 <LPM_EnterSleepMode>
    HW_SleepMode();
 8011dec:	f7fe fe62 	bl	8010ab4 <HW_SleepMode>
    LPM_ExitSleepMode();
 8011df0:	f7ff fff3 	bl	8011dda <LPM_ExitSleepMode>
}
 8011df4:	bd10      	pop	{r4, pc}
    if(LowPowerModeSel)
 8011df6:	68a3      	ldr	r3, [r4, #8]
 8011df8:	b13b      	cbz	r3, 8011e0a <LPM_EnterModeSelected+0x2a>
      LPM_EnterStopMode();
 8011dfa:	f7ff ffef 	bl	8011ddc <LPM_EnterStopMode>
      HW_StopMode(LowPowerModeConfiguration.Stop_Mode_Config);
 8011dfe:	6820      	ldr	r0, [r4, #0]
 8011e00:	f7fe fe62 	bl	8010ac8 <HW_StopMode>
      LPM_ExitStopMode();
 8011e04:	f000 fb84 	bl	8012510 <LPM_ExitStopMode>
 8011e08:	e7f4      	b.n	8011df4 <LPM_EnterModeSelected+0x14>
      LPM_EnterOffMode();
 8011e0a:	f000 fb83 	bl	8012514 <LPM_EnterOffMode>
      HW_OffMode(LowPowerModeConfiguration.OFF_Mode_Config);
 8011e0e:	6860      	ldr	r0, [r4, #4]
 8011e10:	f7fe fe6c 	bl	8010aec <HW_OffMode>
      LPM_ExitOffMode();
 8011e14:	f000 fb8a 	bl	801252c <LPM_ExitOffMode>
  return;
 8011e18:	e7ec      	b.n	8011df4 <LPM_EnterModeSelected+0x14>
 8011e1a:	bf00      	nop
 8011e1c:	200003a4 	.word	0x200003a4

08011e20 <MM_Init>:
 * @param  pool_size: The size of the pool
 * @param  elt_size: The size of one element in the pool
 * @retval None
 */
void MM_Init(uint8_t *p_pool, uint32_t pool_size,  uint32_t elt_size)
{
 8011e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t elt_size_corrected;

  QueueSize = 0;
 8011e24:	4d0d      	ldr	r5, [pc, #52]	; (8011e5c <MM_Init+0x3c>)
{
 8011e26:	4607      	mov	r7, r0
  QueueSize = 0;
 8011e28:	4628      	mov	r0, r5
 8011e2a:	2300      	movs	r3, #0
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 8011e2c:	3203      	adds	r2, #3
  QueueSize = 0;
 8011e2e:	f800 3b01 	strb.w	r3, [r0], #1
{
 8011e32:	460e      	mov	r6, r1
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 8011e34:	f022 0403 	bic.w	r4, r2, #3

  /**
   *  Initialize list
   */
  LST_init_head (&BufferPool);
 8011e38:	f7ff ff6e 	bl	8011d18 <LST_init_head>
  /**
   *  Initialize the queue
   */
  while(pool_size >= elt_size_corrected)
  {
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 8011e3c:	f105 0801 	add.w	r8, r5, #1
  while(pool_size >= elt_size_corrected)
 8011e40:	42a6      	cmp	r6, r4
 8011e42:	d201      	bcs.n	8011e48 <MM_Init+0x28>
    QueueSize++;
    pool_size -= elt_size_corrected;
  }

  return;
}
 8011e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 8011e48:	4639      	mov	r1, r7
 8011e4a:	4640      	mov	r0, r8
 8011e4c:	f7ff ff71 	bl	8011d32 <LST_insert_tail>
    QueueSize++;
 8011e50:	782b      	ldrb	r3, [r5, #0]
 8011e52:	3301      	adds	r3, #1
    p_pool += elt_size_corrected;
 8011e54:	4427      	add	r7, r4
    QueueSize++;
 8011e56:	702b      	strb	r3, [r5, #0]
    pool_size -= elt_size_corrected;
 8011e58:	1b36      	subs	r6, r6, r4
 8011e5a:	e7f1      	b.n	8011e40 <MM_Init+0x20>
 8011e5c:	200003b4 	.word	0x200003b4

08011e60 <MM_GetBuffer>:
 * @param  cb: The callback to be called when a buffer is made available later on
 *                   if there is no buffer currently available when this API is called
 * @retval The buffer address when available or NULL when there is no buffer
 */
MM_pBufAdd_t MM_GetBuffer( uint32_t size, MM_pCb_t cb )
{
 8011e60:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e62:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011e66:	b672      	cpsid	i
  MM_pBufAdd_t buffer_address;
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if ( QueueSize )
 8011e68:	4809      	ldr	r0, [pc, #36]	; (8011e90 <MM_GetBuffer+0x30>)
 8011e6a:	7803      	ldrb	r3, [r0, #0]
 8011e6c:	b163      	cbz	r3, 8011e88 <MM_GetBuffer+0x28>
  {
    QueueSize--;
 8011e6e:	3b01      	subs	r3, #1
 8011e70:	7003      	strb	r3, [r0, #0]
    BufferFreeCb = 0;
 8011e72:	2300      	movs	r3, #0
 8011e74:	60c3      	str	r3, [r0, #12]
    LST_remove_head( &BufferPool, ( tListNode ** )&buffer_address );
 8011e76:	a901      	add	r1, sp, #4
 8011e78:	3001      	adds	r0, #1
 8011e7a:	f7ff ff71 	bl	8011d60 <LST_remove_head>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e7e:	f384 8810 	msr	PRIMASK, r4
    buffer_address = 0;
  }
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/

  return buffer_address;
}
 8011e82:	9801      	ldr	r0, [sp, #4]
 8011e84:	b002      	add	sp, #8
 8011e86:	bd10      	pop	{r4, pc}
    BufferFreeCb = cb;
 8011e88:	60c1      	str	r1, [r0, #12]
    buffer_address = 0;
 8011e8a:	9301      	str	r3, [sp, #4]
 8011e8c:	e7f7      	b.n	8011e7e <MM_GetBuffer+0x1e>
 8011e8e:	bf00      	nop
 8011e90:	200003b4 	.word	0x200003b4

08011e94 <MM_ReleaseBuffer>:
 * @brief  Release a buffer
 * @param  p_buffer: The data buffer address
 * @retval None
 */
void MM_ReleaseBuffer( MM_pBufAdd_t p_buffer )
{
 8011e94:	b570      	push	{r4, r5, r6, lr}
 8011e96:	4601      	mov	r1, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e98:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011e9c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  LST_insert_tail( &BufferPool, ( tListNode * )p_buffer );
 8011e9e:	4c07      	ldr	r4, [pc, #28]	; (8011ebc <MM_ReleaseBuffer+0x28>)
 8011ea0:	1c60      	adds	r0, r4, #1
 8011ea2:	f7ff ff46 	bl	8011d32 <LST_insert_tail>
  QueueSize++;
 8011ea6:	7823      	ldrb	r3, [r4, #0]
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011eac:	f385 8810 	msr	PRIMASK, r5
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/
  if( BufferFreeCb )
 8011eb0:	68e3      	ldr	r3, [r4, #12]
 8011eb2:	b113      	cbz	r3, 8011eba <MM_ReleaseBuffer+0x26>
     */
    BufferFreeCb();
  }

  return;
}
 8011eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BufferFreeCb();
 8011eb8:	4718      	bx	r3
}
 8011eba:	bd70      	pop	{r4, r5, r6, pc}
 8011ebc:	200003b4 	.word	0x200003b4

08011ec0 <SCH_RegTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ec0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011ec4:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskCb[task_id] = task;
 8011ec6:	4a03      	ldr	r2, [pc, #12]	; (8011ed4 <SCH_RegTask+0x14>)
 8011ec8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ecc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8011ed0:	4770      	bx	lr
 8011ed2:	bf00      	nop
 8011ed4:	200003c4 	.word	0x200003c4

08011ed8 <SCH_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ed8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011edc:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskSet |= (1 << task_id);
 8011ede:	4a05      	ldr	r2, [pc, #20]	; (8011ef4 <SCH_SetTask+0x1c>)
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8011ee6:	6993      	ldr	r3, [r2, #24]
 8011ee8:	4318      	orrs	r0, r3
 8011eea:	6190      	str	r0, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011eec:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8011ef0:	4770      	bx	lr
 8011ef2:	bf00      	nop
 8011ef4:	200003c4 	.word	0x200003c4

08011ef8 <SCH_PauseTask>:

void SCH_PauseTask( uint32_t task_id )
{
 8011ef8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011efa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011efe:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskMask &= ~ ( 1 << task_id );
 8011f00:	4905      	ldr	r1, [pc, #20]	; (8011f18 <SCH_PauseTask+0x20>)
 8011f02:	2201      	movs	r2, #1
 8011f04:	680b      	ldr	r3, [r1, #0]
 8011f06:	fa02 f000 	lsl.w	r0, r2, r0
 8011f0a:	ea23 0300 	bic.w	r3, r3, r0
 8011f0e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f10:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8011f14:	bd10      	pop	{r4, pc}
 8011f16:	bf00      	nop
 8011f18:	20000000 	.word	0x20000000

08011f1c <SCH_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f1c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f20:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskMask |= ( 1 << task_id );
 8011f22:	4a05      	ldr	r2, [pc, #20]	; (8011f38 <SCH_ResumeTask+0x1c>)
 8011f24:	2301      	movs	r3, #1
 8011f26:	fa03 f000 	lsl.w	r0, r3, r0
 8011f2a:	6813      	ldr	r3, [r2, #0]
 8011f2c:	4318      	orrs	r0, r3
 8011f2e:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f30:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8011f34:	4770      	bx	lr
 8011f36:	bf00      	nop
 8011f38:	20000000 	.word	0x20000000

08011f3c <SCH_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f3c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f40:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  EvtSet |= ( 1 << evt_id);
 8011f42:	4a05      	ldr	r2, [pc, #20]	; (8011f58 <SCH_SetEvt+0x1c>)
 8011f44:	2301      	movs	r3, #1
 8011f46:	fa03 f000 	lsl.w	r0, r3, r0
 8011f4a:	69d3      	ldr	r3, [r2, #28]
 8011f4c:	4318      	orrs	r0, r3
 8011f4e:	61d0      	str	r0, [r2, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f50:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8011f54:	4770      	bx	lr
 8011f56:	bf00      	nop
 8011f58:	200003c4 	.word	0x200003c4

08011f5c <SCH_Run>:
{
 8011f5c:	b570      	push	{r4, r5, r6, lr}
  while( TaskSet &  TaskMask )
 8011f5e:	4c15      	ldr	r4, [pc, #84]	; (8011fb4 <SCH_Run+0x58>)
 8011f60:	4d15      	ldr	r5, [pc, #84]	; (8011fb8 <SCH_Run+0x5c>)
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 8011f62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  while( TaskSet &  TaskMask )
 8011f66:	69a3      	ldr	r3, [r4, #24]
 8011f68:	682a      	ldr	r2, [r5, #0]
 8011f6a:	4013      	ands	r3, r2
 8011f6c:	d10f      	bne.n	8011f8e <SCH_Run+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f6e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f72:	b672      	cpsid	i
  if ( !( (TaskSet & TaskMask ) || (EvtSet & EvtWaited) ) )
 8011f74:	69a3      	ldr	r3, [r4, #24]
 8011f76:	682a      	ldr	r2, [r5, #0]
 8011f78:	401a      	ands	r2, r3
 8011f7a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8011f7e:	400b      	ands	r3, r1
 8011f80:	4313      	orrs	r3, r2
 8011f82:	d101      	bne.n	8011f88 <SCH_Run+0x2c>
    SCH_Idle();
 8011f84:	f000 fae2 	bl	801254c <SCH_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f88:	f386 8810 	msr	PRIMASK, r6
}
 8011f8c:	bd70      	pop	{r4, r5, r6, pc}
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8011f8e:	fab3 f383 	clz	r3, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f92:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f96:	b672      	cpsid	i
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 8011f98:	69a2      	ldr	r2, [r4, #24]
 8011f9a:	fa26 f003 	lsr.w	r0, r6, r3
 8011f9e:	ea22 0200 	bic.w	r2, r2, r0
 8011fa2:	61a2      	str	r2, [r4, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fa4:	f381 8810 	msr	PRIMASK, r1
    TaskCb[31 - bit_nbr]();
 8011fa8:	f1c3 031f 	rsb	r3, r3, #31
 8011fac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011fb0:	4798      	blx	r3
 8011fb2:	e7d8      	b.n	8011f66 <SCH_Run+0xa>
 8011fb4:	200003c4 	.word	0x200003c4
 8011fb8:	20000000 	.word	0x20000000

08011fbc <SCH_EvtIdle>:
__weak void SCH_EvtIdle( void )
{
  /**
   * execute scheduler if not implemented by the application
   */
  SCH_Run();
 8011fbc:	f7ff bfce 	b.w	8011f5c <SCH_Run>

08011fc0 <SCH_WaitEvt>:
{
 8011fc0:	b538      	push	{r3, r4, r5, lr}
  event_waited_id_backup = EvtWaited;
 8011fc2:	4c09      	ldr	r4, [pc, #36]	; (8011fe8 <SCH_WaitEvt+0x28>)
  EvtWaited = ( 1 << evt_id );
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	fa03 f000 	lsl.w	r0, r3, r0
  event_waited_id_backup = EvtWaited;
 8011fca:	6a25      	ldr	r5, [r4, #32]
  EvtWaited = ( 1 << evt_id );
 8011fcc:	6220      	str	r0, [r4, #32]
  while( (EvtSet & EvtWaited) == 0)
 8011fce:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8011fd2:	4213      	tst	r3, r2
 8011fd4:	d004      	beq.n	8011fe0 <SCH_WaitEvt+0x20>
  EvtSet &= (~EvtWaited);
 8011fd6:	ea23 0302 	bic.w	r3, r3, r2
  EvtWaited = event_waited_id_backup;
 8011fda:	e9c4 3507 	strd	r3, r5, [r4, #28]
}
 8011fde:	bd38      	pop	{r3, r4, r5, pc}
    SCH_EvtIdle();
 8011fe0:	f7ff ffec 	bl	8011fbc <SCH_EvtIdle>
 8011fe4:	e7f3      	b.n	8011fce <SCH_WaitEvt+0xe>
 8011fe6:	bf00      	nop
 8011fe8:	200003c4 	.word	0x200003c4

08011fec <crcSlow>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
 8011fec:	b570      	push	{r4, r5, r6, lr}
 8011fee:	4605      	mov	r5, r0


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 8011ff0:	2400      	movs	r4, #0
    crc            remainder = INITIAL_REMAINDER;
 8011ff2:	f64f 70ff 	movw	r0, #65535	; 0xffff
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8011ff6:	f241 0621 	movw	r6, #4129	; 0x1021
    for (byte = 0; byte < nBytes; ++byte)
 8011ffa:	428c      	cmp	r4, r1
 8011ffc:	db00      	blt.n	8012000 <crcSlow+0x14>
    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);

}   /* crcSlow() */
 8011ffe:	bd70      	pop	{r4, r5, r6, pc}
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
 8012000:	5d2b      	ldrb	r3, [r5, r4]
 8012002:	2208      	movs	r2, #8
 8012004:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
            if (remainder & TOPBIT)
 8012008:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 801200c:	ea4f 0340 	mov.w	r3, r0, lsl #1
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8012010:	bf18      	it	ne
 8012012:	4073      	eorne	r3, r6
                remainder = (remainder << 1);
 8012014:	b298      	uxth	r0, r3
        for (bit = 8; bit > 0; --bit)
 8012016:	1e53      	subs	r3, r2, #1
 8012018:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 801201c:	d1f4      	bne.n	8012008 <crcSlow+0x1c>
    for (byte = 0; byte < nBytes; ++byte)
 801201e:	3401      	adds	r4, #1
 8012020:	e7eb      	b.n	8011ffa <crcSlow+0xe>
	...

08012024 <LBR_Init>:


/* Public functions ----------------------------------------------------------*/

void LBR_Init(LBR_InitMode_t InitMode)
{
 8012024:	b530      	push	{r4, r5, lr}
 8012026:	b085      	sub	sp, #20
  uint8_t index;

  if(InitMode != LBR_Limited )
 8012028:	2800      	cmp	r0, #0
 801202a:	d046      	beq.n	80120ba <LBR_Init+0x96>
  {
    /**
     * Initialization of all transport layer
     */
    TL_BLE_HCI_Init(TL_BLE_HCI_InitFull, &CmdBuffer, EvtPool, POOL_SIZE);
 801202c:	4c24      	ldr	r4, [pc, #144]	; (80120c0 <LBR_Init+0x9c>)
 801202e:	f240 5332 	movw	r3, #1330	; 0x532
 8012032:	18e1      	adds	r1, r4, r3
 8012034:	4622      	mov	r2, r4
 8012036:	2001      	movs	r0, #1
 8012038:	f7ff fc4c 	bl	80118d4 <TL_BLE_HCI_Init>

    /**
     * Initialization of the BLE App Context
     */
   
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 801203c:	2500      	movs	r5, #0
    TL_Enable();
 801203e:	f3af 8000 	nop.w
     SVCCTL_Init();
 8012042:	f7fe fced 	bl	8010a20 <SVCCTL_Init>
    /**
     * Set TX Power to -2dBm.
     * This avoids undesired disconnection due to instability on 32KHz
     * internal oscillator for high transmission power.
     */
    aci_hal_set_tx_power_level(1,0x18);
 8012046:	2118      	movs	r1, #24
 8012048:	2001      	movs	r0, #1
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 801204a:	f884 56dc 	strb.w	r5, [r4, #1756]	; 0x6dc
    aci_hal_set_tx_power_level(1,0x18);
 801204e:	f7fe fb1f 	bl	8010690 <aci_hal_set_tx_power_level>

    /**
     * Initialize IO capability
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 8012052:	4628      	mov	r0, r5
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
 8012054:	f884 5640 	strb.w	r5, [r4, #1600]	; 0x640
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 8012058:	f7fe f962 	bl	8010320 <aci_gap_set_io_capability>
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
    LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
    LBRContext.LBRContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 801205c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012060:	f8a4 3654 	strh.w	r3, [r4, #1620]	; 0x654
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8012064:	2310      	movs	r3, #16
 8012066:	f884 3656 	strb.w	r3, [r4, #1622]	; 0x656
    LBRContext.LBRContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 801206a:	4b16      	ldr	r3, [pc, #88]	; (80120c4 <LBR_Init+0xa0>)
 801206c:	f8c4 3658 	str.w	r3, [r4, #1624]	; 0x658
    LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode = 1;
 8012070:	2301      	movs	r3, #1
 8012072:	f8a4 3642 	strh.w	r3, [r4, #1602]	; 0x642
    for (index=0; index<16 ;index++)
 8012076:	f204 6344 	addw	r3, r4, #1604	; 0x644
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
 801207a:	f884 5641 	strb.w	r5, [r4, #1601]	; 0x641
 801207e:	461a      	mov	r2, r3
    {
      LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t)index;
 8012080:	f803 5b01 	strb.w	r5, [r3], #1
    for (index=0; index<16 ;index++)
 8012084:	3501      	adds	r5, #1
 8012086:	2d10      	cmp	r5, #16
 8012088:	d1fa      	bne.n	8012080 <LBR_Init+0x5c>
    }

    aci_gap_set_auth_requirement(LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode,
 801208a:	4b0e      	ldr	r3, [pc, #56]	; (80120c4 <LBR_Init+0xa0>)
 801208c:	2101      	movs	r1, #1
 801208e:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8012092:	2100      	movs	r1, #0
 8012094:	2308      	movs	r3, #8
 8012096:	e9cd 5100 	strd	r5, r1, [sp]
 801209a:	4608      	mov	r0, r1
 801209c:	f7fe f964 	bl	8010368 <aci_gap_set_auth_requirement>
                                 LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode);

    /**
     * Initialize whitelist
     */
    if(LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode)
 80120a0:	f894 3642 	ldrb.w	r3, [r4, #1602]	; 0x642
 80120a4:	b10b      	cbz	r3, 80120aa <LBR_Init+0x86>
    {
      aci_gap_configure_whitelist();
 80120a6:	f7fe f99d 	bl	80103e4 <aci_gap_configure_whitelist>
    
    /**
     * Initialize LBS Applciation
     */
#if(LB_SERVER!=0)     
    LBSAPP_Init();
 80120aa:	f000 f871 	bl	8012190 <LBSAPP_Init>
   // Start Advertise to be connected by Client
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 80120ae:	2001      	movs	r0, #1
#endif
  
  }

  return;
}
 80120b0:	b005      	add	sp, #20
 80120b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 80120b6:	f7ff bf0f 	b.w	8011ed8 <SCH_SetTask>
}
 80120ba:	b005      	add	sp, #20
 80120bc:	bd30      	pop	{r4, r5, pc}
 80120be:	bf00      	nop
 80120c0:	200003e8 	.word	0x200003e8
 80120c4:	0001b207 	.word	0x0001b207

080120c8 <LBR_Adv_Request>:
/*                     DEVICE IS SERVER                         */
/****************************************************************/

#if(LB_SERVER!=0) 
void LBR_Adv_Request(void)
{
 80120c8:	b500      	push	{lr}
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 80120ca:	4b0d      	ldr	r3, [pc, #52]	; (8012100 <LBR_Adv_Request+0x38>)
 80120cc:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 80120d0:	2b0a      	cmp	r3, #10
{
 80120d2:	b089      	sub	sp, #36	; 0x24
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 80120d4:	d010      	beq.n	80120f8 <LBR_Adv_Request+0x30>
  {
    tBleStatus result=0x00;
    
    result = aci_gap_set_discoverable(ADV_IND,
 80120d6:	4a0b      	ldr	r2, [pc, #44]	; (8012104 <LBR_Adv_Request+0x3c>)
 80120d8:	9202      	str	r2, [sp, #8]
 80120da:	2300      	movs	r3, #0
 80120dc:	220e      	movs	r2, #14
 80120de:	e9cd 3200 	strd	r3, r2, [sp]
 80120e2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80120e6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80120ea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80120ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fe f8a8 	bl	8010248 <aci_gap_set_discoverable>
    {
      APPL_MESG_DBG("** START ADVERTISING **  Failed \r\n\r");
    }
  }
  return;
}
 80120f8:	b009      	add	sp, #36	; 0x24
 80120fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80120fe:	bf00      	nop
 8012100:	200003e8 	.word	0x200003e8
 8012104:	08013ca0 	.word	0x08013ca0

08012108 <SVCCTL_App_Notification>:
  evt_le_meta_event *meta_evt;
  evt_le_connection_complete * connection_complete_event;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
  evt_disconn_complete *cc = (void *)event_pckt->data;
  switch(event_pckt->evt)
 8012108:	7843      	ldrb	r3, [r0, #1]
 801210a:	2b05      	cmp	r3, #5
 801210c:	d002      	beq.n	8012114 <SVCCTL_App_Notification+0xc>
 801210e:	2b3e      	cmp	r3, #62	; 0x3e
 8012110:	d011      	beq.n	8012136 <SVCCTL_App_Notification+0x2e>
 8012112:	4770      	bx	lr
  {
    case EVT_DISCONN_COMPLETE:
      if(cc->handle == LBRContext.connectionHandleRemote)
 8012114:	4b0f      	ldr	r3, [pc, #60]	; (8012154 <SVCCTL_App_Notification+0x4c>)
 8012116:	8881      	ldrh	r1, [r0, #4]
 8012118:	f8b3 26de 	ldrh.w	r2, [r3, #1758]	; 0x6de
 801211c:	4291      	cmp	r1, r2
 801211e:	d118      	bne.n	8012152 <SVCCTL_App_Notification+0x4a>
      {
        LBRContext.connectionHandleRemote = LBC_IDLE;
        APPL_MESG_DBG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 8012120:	480d      	ldr	r0, [pc, #52]	; (8012158 <SVCCTL_App_Notification+0x50>)
        LBRContext.connectionHandleRemote = LBC_IDLE;
 8012122:	2200      	movs	r2, #0
 8012124:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 8012128:	2303      	movs	r3, #3
 801212a:	7003      	strb	r3, [r0, #0]
        handleNotification.ConnectionHandle=connection_handle;
 801212c:	4b0b      	ldr	r3, [pc, #44]	; (801215c <SVCCTL_App_Notification+0x54>)
 801212e:	881b      	ldrh	r3, [r3, #0]
      
          //CONNECTION WITH LB ROUTEUR 
           APPL_MESG_DBG("\r\n\r** CONNECTION EVENT WITH CLIENT \n");
          LBRContext.connectionHandleRemote = connection_handle;
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
          handleNotification.ConnectionHandle=connection_handle;
 8012130:	8043      	strh	r3, [r0, #2]
          LBR_Notification(&handleNotification);
 8012132:	f000 b81b 	b.w	801216c <LBR_Notification>
      switch(meta_evt->subevent)
 8012136:	78c3      	ldrb	r3, [r0, #3]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d10a      	bne.n	8012152 <SVCCTL_App_Notification+0x4a>
          connection_handle = connection_complete_event->handle;
 801213c:	4a07      	ldr	r2, [pc, #28]	; (801215c <SVCCTL_App_Notification+0x54>)
 801213e:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 8012142:	8013      	strh	r3, [r2, #0]
          LBRContext.connectionHandleRemote = connection_handle;
 8012144:	4a03      	ldr	r2, [pc, #12]	; (8012154 <SVCCTL_App_Notification+0x4c>)
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 8012146:	4804      	ldr	r0, [pc, #16]	; (8012158 <SVCCTL_App_Notification+0x50>)
          LBRContext.connectionHandleRemote = connection_handle;
 8012148:	f8a2 36de 	strh.w	r3, [r2, #1758]	; 0x6de
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 801214c:	2202      	movs	r2, #2
 801214e:	7002      	strb	r2, [r0, #0]
 8012150:	e7ee      	b.n	8012130 <SVCCTL_App_Notification+0x28>

    default:
      break;
  }
  return;
}
 8012152:	4770      	bx	lr
 8012154:	200003e8 	.word	0x200003e8
 8012158:	20000b0c 	.word	0x20000b0c
 801215c:	20000b10 	.word	0x20000b10

08012160 <LBR_App_Key_Button_Action>:

void LBR_App_Key_Button_Action(void)
{
  SCH_SetTask(CFG_IdleTask_Button);
 8012160:	2004      	movs	r0, #4
 8012162:	f7ff beb9 	b.w	8011ed8 <SCH_SetTask>

08012166 <BLESVC_InitCustomSvc>:
#endif 

void BLESVC_InitCustomSvc(void)
{
#if(LB_SERVER!=0) 
  LBS_STM_Init();
 8012166:	f7fe babd 	b.w	80106e4 <LBS_STM_Init>
	...

0801216c <LBR_Notification>:



void LBR_Notification(LBR_ConnHandle_Not_evt_t *pNotification)
{
  switch(pNotification->LBR_Evt_Opcode)
 801216c:	7803      	ldrb	r3, [r0, #0]
 801216e:	2b02      	cmp	r3, #2
 8012170:	d002      	beq.n	8012178 <LBR_Notification+0xc>
 8012172:	2b03      	cmp	r3, #3
 8012174:	d004      	beq.n	8012180 <LBR_Notification+0x14>
 8012176:	4770      	bx	lr
  {
    case LB_CLIENT_CONN_HANDLE_EVT :
      LB_End_Dev_Context.connHandleWithLbRouteur = pNotification->ConnectionHandle;
 8012178:	4b04      	ldr	r3, [pc, #16]	; (801218c <LBR_Notification+0x20>)
 801217a:	8842      	ldrh	r2, [r0, #2]
 801217c:	809a      	strh	r2, [r3, #4]

    default:
      break;
  }
  return;
}
 801217e:	4770      	bx	lr
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8012180:	4b02      	ldr	r3, [pc, #8]	; (801218c <LBR_Notification+0x20>)
 8012182:	2200      	movs	r2, #0
      SCH_SetTask(CFG_IdleTask_StartAdv);
 8012184:	2001      	movs	r0, #1
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8012186:	809a      	strh	r2, [r3, #4]
      SCH_SetTask(CFG_IdleTask_StartAdv);
 8012188:	f7ff bea6 	b.w	8011ed8 <SCH_SetTask>
 801218c:	20000ac8 	.word	0x20000ac8

08012190 <LBSAPP_Init>:
{
  /**
   * Initialize LedButton Service
   */
  LB_End_Dev_Context.Notification_Button_Status=0; 
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8012190:	4b03      	ldr	r3, [pc, #12]	; (80121a0 <LBSAPP_Init+0x10>)
 8012192:	2200      	movs	r2, #0
  LB_End_Dev_Context.Notification_Button_Status=0; 
 8012194:	f44f 7180 	mov.w	r1, #256	; 0x100
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8012198:	809a      	strh	r2, [r3, #4]
  LB_End_Dev_Context.Notification_Button_Status=0; 
 801219a:	8019      	strh	r1, [r3, #0]
 // LB_End_Dev_Context.LedControlEndDevice1.Device_Led_Selection=0x01; // device1
//  LB_End_Dev_Context.LedControlEndDevice1.Led1Control=0x00; //led OFF
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Device1
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;
 801219c:	709a      	strb	r2, [r3, #2]

  return;
}
 801219e:	4770      	bx	lr
 80121a0:	20000ac8 	.word	0x20000ac8

080121a4 <LB_App_Button_Trigger_Received>:
void LB_App_Button_Trigger_Received(void)
{
  
  //UPDATE BUTTON CHARACTERISTICS VALUES

  if(LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus==0x01){
 80121a4:	4907      	ldr	r1, [pc, #28]	; (80121c4 <LB_App_Button_Trigger_Received+0x20>)
 80121a6:	788b      	ldrb	r3, [r1, #2]
 80121a8:	3b01      	subs	r3, #1
 80121aa:	bf18      	it	ne
 80121ac:	2301      	movne	r3, #1
 80121ae:	708b      	strb	r3, [r1, #2]
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;}
  else {
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x01;  
  }
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Button1 pushed
 80121b0:	2301      	movs	r3, #1
 80121b2:	704b      	strb	r3, [r1, #1]
  APPL_MESG_DBG("\r\n\r ");
  APPL_MESG_DBG("-- APPLICATION : BUTTON PUSHED - CHECK NOTIFICATION \n ");
 
   if(LB_End_Dev_Context.Notification_Button_Status){ 
 80121b4:	780b      	ldrb	r3, [r1, #0]
 80121b6:	b123      	cbz	r3, 80121c2 <LB_App_Button_Trigger_Received+0x1e>
    APPL_MESG_DBG("-- APPLICATION : INFORM ROUTEUR BUTTON 1 PUSHED \n ");
    BLE_SVC_LedButton_Update_Char(BUTTON_CHAR_UUID, (uint8_t *)&LB_End_Dev_Context.ButtonStatusToClient);
 80121b8:	3101      	adds	r1, #1
 80121ba:	f642 3051 	movw	r0, #11089	; 0x2b51
 80121be:	f7fe bb57 	b.w	8010870 <BLE_SVC_LedButton_Update_Char>
   } else {
    APPL_MESG_DBG("-- APPLICATION : CAN'T INFORM ROUTEUR -  NOTIFICATION DISABLED\n "); 
   }

  return;
}
 80121c2:	4770      	bx	lr
 80121c4:	20000ac8 	.word	0x20000ac8

080121c8 <whynotwork>:
  * @param  pNotification: LBS notification.
  * @retval None
 */ 

void whynotwork(uint8_t *POTATO, LBS_App_Notification_evt_t *pNotification, uint8_t is_string)
{
 80121c8:	b510      	push	{r4, lr}
	uint8_t i = 0;
 80121ca:	2300      	movs	r3, #0
	for(; i < pNotification->DataTransfered.Length; i++)
 80121cc:	7a0c      	ldrb	r4, [r1, #8]
 80121ce:	429c      	cmp	r4, r3
 80121d0:	d803      	bhi.n	80121da <whynotwork+0x12>
	{
		POTATO[i] = pNotification->DataTransfered.pPayload[i];
	}
	if(is_string) POTATO[i] = '\0';
 80121d2:	b10a      	cbz	r2, 80121d8 <whynotwork+0x10>
 80121d4:	2200      	movs	r2, #0
 80121d6:	54c2      	strb	r2, [r0, r3]
}
 80121d8:	bd10      	pop	{r4, pc}
		POTATO[i] = pNotification->DataTransfered.pPayload[i];
 80121da:	684c      	ldr	r4, [r1, #4]
 80121dc:	5ce4      	ldrb	r4, [r4, r3]
 80121de:	54c4      	strb	r4, [r0, r3]
	for(; i < pNotification->DataTransfered.Length; i++)
 80121e0:	3301      	adds	r3, #1
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	e7f2      	b.n	80121cc <whynotwork+0x4>
	...

080121e8 <LBS_App_Notification>:

void LBS_App_Notification(LBS_App_Notification_evt_t *pNotification)
{
 80121e8:	b508      	push	{r3, lr}
 80121ea:	7803      	ldrb	r3, [r0, #0]
 80121ec:	3b04      	subs	r3, #4
 80121ee:	4601      	mov	r1, r0
 80121f0:	2b05      	cmp	r3, #5
 80121f2:	d824      	bhi.n	801223e <LBS_App_Notification+0x56>
 80121f4:	e8df f003 	tbb	[pc, r3]
 80121f8:	0f0c0903 	.word	0x0f0c0903
 80121fc:	1512      	.short	0x1512
          APPL_MESG_DBG("-- APPLICATION END DEVICE 1 : LED1 OFF\n"); 
        }
        break;
        */
    case POTATO_SSID_EVT:
    	whynotwork(POTATO_Context.POTATO_SSID,pNotification,1);
 80121fe:	4818      	ldr	r0, [pc, #96]	; (8012260 <LBS_App_Notification+0x78>)
 8012200:	2201      	movs	r2, #1
    default:
      break;
  }
  //ret = Potato_Save(&POTATO_Context);
  return;
}
 8012202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	whynotwork(POTATO_Context.POTATO_OP,pNotification,0);
 8012206:	f7ff bfdf 	b.w	80121c8 <whynotwork>
    	whynotwork(POTATO_Context.POTATO_PW,pNotification,1);
 801220a:	4816      	ldr	r0, [pc, #88]	; (8012264 <LBS_App_Notification+0x7c>)
 801220c:	2201      	movs	r2, #1
 801220e:	e7f8      	b.n	8012202 <LBS_App_Notification+0x1a>
    	whynotwork(POTATO_Context.POTATO_NAME,pNotification,1);
 8012210:	4815      	ldr	r0, [pc, #84]	; (8012268 <LBS_App_Notification+0x80>)
 8012212:	2201      	movs	r2, #1
 8012214:	e7f5      	b.n	8012202 <LBS_App_Notification+0x1a>
    	whynotwork(POTATO_Context.POTATO_IP,pNotification,0);
 8012216:	4815      	ldr	r0, [pc, #84]	; (801226c <LBS_App_Notification+0x84>)
 8012218:	2200      	movs	r2, #0
 801221a:	e7f2      	b.n	8012202 <LBS_App_Notification+0x1a>
    	whynotwork(POTATO_Context.POTATO_OP,pNotification,0);
 801221c:	4814      	ldr	r0, [pc, #80]	; (8012270 <LBS_App_Notification+0x88>)
 801221e:	2200      	movs	r2, #0
 8012220:	e7ef      	b.n	8012202 <LBS_App_Notification+0x1a>
    	switch(pNotification->DataTransfered.pPayload[0]) {
 8012222:	6843      	ldr	r3, [r0, #4]
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	2b05      	cmp	r3, #5
 8012228:	d809      	bhi.n	801223e <LBS_App_Notification+0x56>
 801222a:	e8df f003 	tbb	[pc, r3]
 801222e:	0903      	.short	0x0903
 8012230:	1614100d 	.word	0x1614100d
    		ret = Potato_Save(&POTATO_Context);
 8012234:	480a      	ldr	r0, [pc, #40]	; (8012260 <LBS_App_Notification+0x78>)
 8012236:	f000 f9a7 	bl	8012588 <Potato_Save>
    		ret = Potato_Dummy_Backup();
 801223a:	4b0e      	ldr	r3, [pc, #56]	; (8012274 <LBS_App_Notification+0x8c>)
 801223c:	7198      	strb	r0, [r3, #6]
}
 801223e:	bd08      	pop	{r3, pc}
    		ret = Potato_Load(&POTATO_Context);
 8012240:	4807      	ldr	r0, [pc, #28]	; (8012260 <LBS_App_Notification+0x78>)
 8012242:	f000 f9f9 	bl	8012638 <Potato_Load>
 8012246:	e7f8      	b.n	801223a <LBS_App_Notification+0x52>
    		ret = Potato_Backup_Load();
 8012248:	f000 fa48 	bl	80126dc <Potato_Backup_Load>
 801224c:	e7f5      	b.n	801223a <LBS_App_Notification+0x52>
    		ret = Potato_Erase(normal);
 801224e:	2001      	movs	r0, #1
    		ret = Potato_Erase(both);
 8012250:	f000 fa22 	bl	8012698 <Potato_Erase>
 8012254:	e7f1      	b.n	801223a <LBS_App_Notification+0x52>
 8012256:	2002      	movs	r0, #2
 8012258:	e7fa      	b.n	8012250 <LBS_App_Notification+0x68>
    		ret = Potato_Dummy_Backup();
 801225a:	f000 fa75 	bl	8012748 <Potato_Dummy_Backup>
 801225e:	e7ec      	b.n	801223a <LBS_App_Notification+0x52>
 8012260:	20000b98 	.word	0x20000b98
 8012264:	20000bb7 	.word	0x20000bb7
 8012268:	20000bd6 	.word	0x20000bd6
 801226c:	20000bf5 	.word	0x20000bf5
 8012270:	20000bf9 	.word	0x20000bf9
 8012274:	20000ac8 	.word	0x20000ac8

08012278 <SystemClock_Config>:
 * @param  None
 * @retval None
 */

void SystemClock_Config(void)
{
 8012278:	b510      	push	{r4, lr}
 801227a:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801227c:	2240      	movs	r2, #64	; 0x40
 801227e:	2100      	movs	r1, #0
 8012280:	a806      	add	r0, sp, #24
 8012282:	f001 fceb 	bl	8013c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012286:	2100      	movs	r1, #0
 8012288:	2214      	movs	r2, #20
 801228a:	4668      	mov	r0, sp
 801228c:	f001 fce6 	bl	8013c5c <memset>

  /**
   *  Enable MSI oscillator and configure the system at 16MHz
   *  The best power consumption are achieved with 8Mhz on the SPI to access the BlueNRG device
   */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8012290:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 8012292:	2280      	movs	r2, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8012294:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;

  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8012296:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8012298:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 801229a:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 801229c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 801229e:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;
 80122a0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80122a2:	f000 ffc3 	bl	801322c <HAL_RCC_OscConfig>

  /**
   *  Configure the HCLK, PCLK1 and PCLK2 clocks dividers  to a maximum of 16Mhz on SPI.
   */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80122a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80122a8:	2102      	movs	r1, #2
 80122aa:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80122ac:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80122b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80122b4:	9404      	str	r4, [sp, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80122b6:	f001 fa3f 	bl	8013738 <HAL_RCC_ClockConfig>
#else
#error Missing System Clock Configuration
#endif

  return;
}
 80122ba:	b016      	add	sp, #88	; 0x58
 80122bc:	bd10      	pop	{r4, pc}
	...

080122c0 <main>:
{
 80122c0:	b500      	push	{lr}
  HAL_UART_Transmit(&huart1, "done\n", 5, 10);
 80122c2:	4c80      	ldr	r4, [pc, #512]	; (80124c4 <main+0x204>)
  SCB->VTOR = 0x08010000;
 80122c4:	4b80      	ldr	r3, [pc, #512]	; (80124c8 <main+0x208>)
 80122c6:	4a81      	ldr	r2, [pc, #516]	; (80124cc <main+0x20c>)
  HAL_UART_Transmit(&huart1, "done\n", 5, 10);
 80122c8:	4981      	ldr	r1, [pc, #516]	; (80124d0 <main+0x210>)
  SCB->VTOR = 0x08010000;
 80122ca:	609a      	str	r2, [r3, #8]
{
 80122cc:	b089      	sub	sp, #36	; 0x24
  HAL_UART_Transmit(&huart1, "done\n", 5, 10);
 80122ce:	230a      	movs	r3, #10
 80122d0:	2205      	movs	r2, #5
 80122d2:	4620      	mov	r0, r4
 80122d4:	f001 fc35 	bl	8013b42 <HAL_UART_Transmit>
  HAL_DeInit();
 80122d8:	f000 fb40 	bl	801295c <HAL_DeInit>
  HAL_Init();
 80122dc:	f000 fb56 	bl	801298c <HAL_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80122e0:	497c      	ldr	r1, [pc, #496]	; (80124d4 <main+0x214>)
 80122e2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80122e6:	e9c4 1300 	strd	r1, r3, [r4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80122ea:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80122ec:	2300      	movs	r3, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80122ee:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80122f2:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80122f6:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart1.Init.Parity = UART_PARITY_NONE;
 80122fa:	6123      	str	r3, [r4, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80122fc:	6263      	str	r3, [r4, #36]	; 0x24
  HAL_UART_Transmit(&huart1, "done\n", 5, 10);
 80122fe:	4620      	mov	r0, r4
  __HAL_RCC_PWR_CLK_ENABLE();
 8012300:	4c75      	ldr	r4, [pc, #468]	; (80124d8 <main+0x218>)
  HAL_UART_Transmit(&huart1, "done\n", 5, 10);
 8012302:	4973      	ldr	r1, [pc, #460]	; (80124d0 <main+0x210>)
 8012304:	230a      	movs	r3, #10
 8012306:	2205      	movs	r2, #5
 8012308:	f001 fc1b 	bl	8013b42 <HAL_UART_Transmit>
  HAL_DBGMCU_EnableDBGSleepMode();
 801230c:	f000 fb66 	bl	80129dc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8012310:	f000 fb6c 	bl	80129ec <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8012314:	f000 fb72 	bl	80129fc <HAL_DBGMCU_EnableDBGStandbyMode>
  __HAL_RCC_PWR_CLK_ENABLE();
 8012318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801231e:	65a3      	str	r3, [r4, #88]	; 0x58
 8012320:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012326:	9300      	str	r3, [sp, #0]
 8012328:	9b00      	ldr	r3, [sp, #0]
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == RCC_CSR_PINRSTF) ? 1UL : 0UL);
 801232a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801232e:	0158      	lsls	r0, r3, #5
 8012330:	d519      	bpl.n	8012366 <main+0xa6>
  * @rmtoll SCR          CSBF          LL_PWR_ClearFlag_SB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_SB(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 8012332:	4b6a      	ldr	r3, [pc, #424]	; (80124dc <main+0x21c>)
 8012334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012338:	619a      	str	r2, [r3, #24]
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 801233a:	f000 fecf 	bl	80130dc <HAL_PWR_EnableBkUpAccess>
    HAL_PWR_EnableBkUpAccess();
 801233e:	f000 fecd 	bl	80130dc <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8012342:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8012346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801234a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    __HAL_RCC_CLEAR_RESET_FLAGS();
 801234e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8012352:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012356:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801235a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012362:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8012366:	2600      	movs	r6, #0
  LPM_SetOffMode(CFG_LPM_App, LPM_OffMode_Dis);
 8012368:	2100      	movs	r1, #0
 801236a:	2004      	movs	r0, #4
 801236c:	f7ff fd0c 	bl	8011d88 <LPM_SetOffMode>
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8012370:	e9cd 6606 	strd	r6, r6, [sp, #24]
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 8012374:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8012376:	485a      	ldr	r0, [pc, #360]	; (80124e0 <main+0x220>)
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 8012378:	f023 0302 	bic.w	r3, r3, #2
 801237c:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE();
 801237e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012380:	f023 0304 	bic.w	r3, r3, #4
 8012384:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE();
 8012386:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012388:	f023 0308 	bic.w	r3, r3, #8
 801238c:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE();
 801238e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012390:	f023 0310 	bic.w	r3, r3, #16
 8012394:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOF_CLK_SLEEP_DISABLE();
 8012396:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012398:	f023 0320 	bic.w	r3, r3, #32
 801239c:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOG_CLK_SLEEP_DISABLE();
 801239e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80123a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80123a4:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE();
 80123a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80123a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80123ac:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80123ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80123b0:	f043 0301 	orr.w	r3, r3, #1
 80123b4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80123b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80123b8:	f003 0301 	and.w	r3, r3, #1
 80123bc:	9301      	str	r3, [sp, #4]
 80123be:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80123c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80123c2:	f043 0302 	orr.w	r3, r3, #2
 80123c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80123c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80123ca:	f003 0302 	and.w	r3, r3, #2
 80123ce:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80123d0:	2503      	movs	r5, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80123d2:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80123d4:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = (GPIO_PIN_All^ (GPIO_PIN_6 | GPIO_PIN_7));
 80123d6:	f64f 733f 	movw	r3, #65343	; 0xff3f
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80123da:	e9cd 5604 	strd	r5, r6, [sp, #16]
  GPIO_InitStructure.Pin = (GPIO_PIN_All^ (GPIO_PIN_6 | GPIO_PIN_7));
 80123de:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80123e0:	f000 fd86 	bl	8012ef0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80123e4:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 80123e6:	f649 73ff 	movw	r3, #40959	; 0x9fff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80123ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 80123ee:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80123f0:	f000 fd7e 	bl	8012ef0 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80123f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80123f6:	f023 0302 	bic.w	r3, r3, #2
 80123fa:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_PWREx_EnableSRAM2ContentRetention();
 80123fc:	f000 fe7e 	bl	80130fc <HAL_PWREx_EnableSRAM2ContentRetention>
  LPM_SetConf(&LowPowerModeConfiguration);
 8012400:	a803      	add	r0, sp, #12
  LowPowerModeConfiguration.Stop_Mode_Config = CFG_StopMode2;
 8012402:	2302      	movs	r3, #2
  LowPowerModeConfiguration.OFF_Mode_Config = CFG_Standby;
 8012404:	e9cd 3503 	strd	r3, r5, [sp, #12]
  LPM_SetConf(&LowPowerModeConfiguration);
 8012408:	f7ff fcb6 	bl	8011d78 <LPM_SetConf>
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 801240c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  hrtc.Instance = RTC;                        /**< Define instance */
 8012410:	4d34      	ldr	r5, [pc, #208]	; (80124e4 <main+0x224>)
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 8012412:	f043 0301 	orr.w	r3, r3, #1
 8012416:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 801241a:	f000 fe5f 	bl	80130dc <HAL_PWR_EnableBkUpAccess>
  HAL_PWR_EnableBkUpAccess();
 801241e:	f000 fe5d 	bl	80130dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI); /**< Select LSI as RTC Input */
 8012422:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8012426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801242a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801242e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  __HAL_RCC_RTC_ENABLE();                     /**< Enable RTC */
 8012432:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8012436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801243a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 801243e:	4628      	mov	r0, r5
  hrtc.Instance = RTC;                        /**< Define instance */
 8012440:	4b29      	ldr	r3, [pc, #164]	; (80124e8 <main+0x228>)
 8012442:	602b      	str	r3, [r5, #0]
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 8012444:	f001 fab2 	bl	80139ac <HAL_RTCEx_EnableBypassShadow>
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8012448:	2201      	movs	r2, #1
 801244a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  HAL_RTC_Init(&hrtc);
 801244e:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8012450:	e9c5 2302 	strd	r2, r3, [r5, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8012454:	612e      	str	r6, [r5, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;             /**< need to be initialized to not corrupt the RTC_CR register */
 8012456:	606e      	str	r6, [r5, #4]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;  /**< need to be initialized to not corrupt the RTC_CR register */
 8012458:	61ae      	str	r6, [r5, #24]
  HAL_RTC_Init(&hrtc);
 801245a:	f001 fa61 	bl	8013920 <HAL_RTC_Init>
  __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc) ;  /**< Disable Write Protection */
 801245e:	682a      	ldr	r2, [r5, #0]
 8012460:	23ca      	movs	r3, #202	; 0xca
 8012462:	6253      	str	r3, [r2, #36]	; 0x24
 8012464:	2353      	movs	r3, #83	; 0x53
 8012466:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8012468:	6893      	ldr	r3, [r2, #8]
 801246a:	f023 0307 	bic.w	r3, r3, #7
 801246e:	f043 0303 	orr.w	r3, r3, #3
 8012472:	6093      	str	r3, [r2, #8]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0);  /**< Wait for LSI to be stable */
 8012474:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8012478:	079b      	lsls	r3, r3, #30
 801247a:	d5fb      	bpl.n	8012474 <main+0x1b4>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc);  /**< Initialize the TimerServer */
 801247c:	4919      	ldr	r1, [pc, #100]	; (80124e4 <main+0x224>)
 801247e:	2000      	movs	r0, #0
 8012480:	f7fe ffca 	bl	8011418 <HW_TS_Init>
  SystemClock_Config();         /**< Configure the system clock */
 8012484:	f7ff fef8 	bl	8012278 <SystemClock_Config>
  SCH_RegTask( CFG_IdleTask_HciAsynchEvt, TL_BLE_HCI_UserEvtProc );
 8012488:	4918      	ldr	r1, [pc, #96]	; (80124ec <main+0x22c>)
 801248a:	2005      	movs	r0, #5
 801248c:	f7ff fd18 	bl	8011ec0 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_TlEvt, TL_BLE_R_EvtProc );
 8012490:	4917      	ldr	r1, [pc, #92]	; (80124f0 <main+0x230>)
 8012492:	2000      	movs	r0, #0
 8012494:	f7ff fd14 	bl	8011ec0 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_Button, LB_App_Button_Trigger_Received );
 8012498:	4916      	ldr	r1, [pc, #88]	; (80124f4 <main+0x234>)
 801249a:	2004      	movs	r0, #4
 801249c:	f7ff fd10 	bl	8011ec0 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_StartAdv, LBR_Adv_Request );
 80124a0:	4915      	ldr	r1, [pc, #84]	; (80124f8 <main+0x238>)
 80124a2:	2001      	movs	r0, #1
 80124a4:	f7ff fd0c 	bl	8011ec0 <SCH_RegTask>
  LBR_Init(LBR_Full);
 80124a8:	2001      	movs	r0, #1
 80124aa:	f7ff fdbb 	bl	8012024 <LBR_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80124ae:	2000      	movs	r0, #0
 80124b0:	2101      	movs	r1, #1
 80124b2:	f000 f9e9 	bl	8012888 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80124b6:	2000      	movs	r0, #0
 80124b8:	f000 f9c4 	bl	8012844 <BSP_LED_Init>
    SCH_Run();
 80124bc:	f7ff fd4e 	bl	8011f5c <SCH_Run>
  while(1)
 80124c0:	e7fc      	b.n	80124bc <main+0x1fc>
 80124c2:	bf00      	nop
 80124c4:	20000b14 	.word	0x20000b14
 80124c8:	e000ed00 	.word	0xe000ed00
 80124cc:	08010000 	.word	0x08010000
 80124d0:	08013d00 	.word	0x08013d00
 80124d4:	40013800 	.word	0x40013800
 80124d8:	40021000 	.word	0x40021000
 80124dc:	40007000 	.word	0x40007000
 80124e0:	48000400 	.word	0x48000400
 80124e4:	20000ad0 	.word	0x20000ad0
 80124e8:	40002800 	.word	0x40002800
 80124ec:	0801193d 	.word	0x0801193d
 80124f0:	08011b8d 	.word	0x08011b8d
 80124f4:	080121a5 	.word	0x080121a5
 80124f8:	080120c9 	.word	0x080120c9

080124fc <HAL_GPIO_EXTI_Callback>:
  switch(GPIO_Pin)
 80124fc:	2840      	cmp	r0, #64	; 0x40
 80124fe:	d003      	beq.n	8012508 <HAL_GPIO_EXTI_Callback+0xc>
 8012500:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8012504:	d002      	beq.n	801250c <HAL_GPIO_EXTI_Callback+0x10>
 8012506:	4770      	bx	lr
      HW_BNRG_SpiIrqCb();
 8012508:	f7fe bd90 	b.w	801102c <HW_BNRG_SpiIrqCb>
      LBR_App_Key_Button_Action();
 801250c:	f7ff be28 	b.w	8012160 <LBR_App_Key_Button_Action>

08012510 <LPM_ExitStopMode>:
}
 8012510:	4770      	bx	lr
	...

08012514 <LPM_EnterOffMode>:
  SET_BIT(PWR->CR3, WakeUpPin);
 8012514:	4b04      	ldr	r3, [pc, #16]	; (8012528 <LPM_EnterOffMode+0x14>)
 8012516:	689a      	ldr	r2, [r3, #8]
 8012518:	f042 0201 	orr.w	r2, r2, #1
 801251c:	609a      	str	r2, [r3, #8]
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 801251e:	689a      	ldr	r2, [r3, #8]
 8012520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012524:	609a      	str	r2, [r3, #8]
}
 8012526:	4770      	bx	lr
 8012528:	40007000 	.word	0x40007000

0801252c <LPM_ExitOffMode>:
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 801252c:	4b05      	ldr	r3, [pc, #20]	; (8012544 <LPM_ExitOffMode+0x18>)
 801252e:	689a      	ldr	r2, [r3, #8]
 8012530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012534:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(PWR->CR3, WakeUpPin);
 8012536:	689a      	ldr	r2, [r3, #8]
 8012538:	f022 0201 	bic.w	r2, r2, #1
 801253c:	609a      	str	r2, [r3, #8]
  * @rmtoll SCR          CWUF1         LL_PWR_ClearFlag_WU1
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU1(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF1);
 801253e:	2201      	movs	r2, #1
 8012540:	619a      	str	r2, [r3, #24]
}
 8012542:	4770      	bx	lr
 8012544:	40007000 	.word	0x40007000

08012548 <HAL_InitTick>:
}
 8012548:	2000      	movs	r0, #0
 801254a:	4770      	bx	lr

0801254c <SCH_Idle>:
  LPM_EnterModeSelected();
 801254c:	f7ff bc48 	b.w	8011de0 <LPM_EnterModeSelected>

08012550 <TL_BLE_HCI_StatusNot>:
{
 8012550:	b508      	push	{r3, lr}
  switch(status)
 8012552:	b110      	cbz	r0, 801255a <TL_BLE_HCI_StatusNot+0xa>
 8012554:	2801      	cmp	r0, #1
 8012556:	d00b      	beq.n	8012570 <TL_BLE_HCI_StatusNot+0x20>
}
 8012558:	bd08      	pop	{r3, pc}
      SCH_PauseTask( CFG_IdleTask_StartAdv );
 801255a:	2001      	movs	r0, #1
 801255c:	f7ff fccc 	bl	8011ef8 <SCH_PauseTask>
      SCH_PauseTask( CFG_IdleTask_Button );
 8012560:	2004      	movs	r0, #4
 8012562:	f7ff fcc9 	bl	8011ef8 <SCH_PauseTask>
}
 8012566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SCH_PauseTask( CFG_IdleTask_HciAsynchEvt );
 801256a:	2005      	movs	r0, #5
 801256c:	f7ff bcc4 	b.w	8011ef8 <SCH_PauseTask>
      SCH_ResumeTask( CFG_IdleTask_StartAdv );
 8012570:	f7ff fcd4 	bl	8011f1c <SCH_ResumeTask>
      SCH_ResumeTask( CFG_IdleTask_Button );
 8012574:	2004      	movs	r0, #4
 8012576:	f7ff fcd1 	bl	8011f1c <SCH_ResumeTask>
}
 801257a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SCH_ResumeTask( CFG_IdleTask_HciAsynchEvt );
 801257e:	2005      	movs	r0, #5
 8012580:	f7ff bccc 	b.w	8011f1c <SCH_ResumeTask>

08012584 <HW_TS_RTC_Int_AppNot>:
      pfTimerCallBack();
 8012584:	4710      	bx	r2
	...

08012588 <Potato_Save>:
	return ret;
}
*/


save_ret_t Potato_Save(POTATO_Context_t *POTATO){
 8012588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t data = 0;
 801258c:	2200      	movs	r2, #0
save_ret_t Potato_Save(POTATO_Context_t *POTATO){
 801258e:	b089      	sub	sp, #36	; 0x24
	uint64_t data = 0;
 8012590:	2300      	movs	r3, #0
 8012592:	e9cd 2302 	strd	r2, r3, [sp, #8]
	//uint64_t *potato_address = (uint64_t *)POTATO;
	uint64_t *dest_address = (uint64_t *)Potato_Flash_Address;
	uint64_t *dest_Backup_address = (uint64_t *)Potato_Flash_Backup_Address;
	uint64_t *source_address = (uint64_t *)POTATO;

	uint32_t Page_Error = 0;
 8012596:	2300      	movs	r3, #0
 8012598:	9301      	str	r3, [sp, #4]
	uint32_t primask_bit;
	save_ret_t ret = 0;

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 801259a:	9304      	str	r3, [sp, #16]
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Page;
 801259c:	2401      	movs	r4, #1
 801259e:	23fe      	movs	r3, #254	; 0xfe
 80125a0:	e9cd 4305 	strd	r4, r3, [sp, #20]
	Erase_t.NbPages = 2;
 80125a4:	2302      	movs	r3, #2
save_ret_t Potato_Save(POTATO_Context_t *POTATO){
 80125a6:	4605      	mov	r5, r0
	Erase_t.NbPages = 2;
 80125a8:	9307      	str	r3, [sp, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125aa:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80125ae:	b672      	cpsid	i
	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	//CRC ///////////////////////////////////////////////////////////////////

	crcval = crcSlow((uint8_t*)POTATO, Potato_Data_Length_Bytes_without_CRC);
 80125b0:	2164      	movs	r1, #100	; 0x64
 80125b2:	f7ff fd1b 	bl	8011fec <crcSlow>
	POTATO->POTATO_CRC[0] = (crcval&0xFF00)>>8;
 80125b6:	0a03      	lsrs	r3, r0, #8
 80125b8:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	POTATO->POTATO_CRC[1] = crcval&0xFF;
 80125bc:	f885 0065 	strb.w	r0, [r5, #101]	; 0x65

	/////////////////////////////////////////////////////////////////////////

	if(HAL_FLASH_Unlock() != HAL_OK) {
 80125c0:	f000 fb2a 	bl	8012c18 <HAL_FLASH_Unlock>
 80125c4:	bb68      	cbnz	r0, 8012622 <Potato_Save+0x9a>
		ret = unlock_error;
		return ret;
	}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 80125c6:	a901      	add	r1, sp, #4
 80125c8:	a804      	add	r0, sp, #16
 80125ca:	f000 fc1d 	bl	8012e08 <HAL_FLASHEx_Erase>
 80125ce:	bb50      	cbnz	r0, 8012626 <Potato_Save+0x9e>
		/*
		for(j = 0; j < 8; j++){
			data[i] |= (*potato_address)<<(7-j)*8;
			potato_address++;
		}*/
		memcpy(&data, (source_address + i),8);
 80125d0:	f105 4478 	add.w	r4, r5, #4160749568	; 0xf8000000
 80125d4:	4e16      	ldr	r6, [pc, #88]	; (8012630 <Potato_Save+0xa8>)
	for(i = 0; i < 13; i++){
 80125d6:	4d17      	ldr	r5, [pc, #92]	; (8012634 <Potato_Save+0xac>)
		memcpy(&data, (source_address + i),8);
 80125d8:	f5a4 24fe 	sub.w	r4, r4, #520192	; 0x7f000
 80125dc:	19a2      	adds	r2, r4, r6
 80125de:	59a0      	ldr	r0, [r4, r6]
 80125e0:	6851      	ldr	r1, [r2, #4]
 80125e2:	ab02      	add	r3, sp, #8
 80125e4:	c303      	stmia	r3!, {r0, r1}

		//data = 0x1010101010101010;

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), data) != HAL_OK) {
 80125e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80125ea:	4631      	mov	r1, r6
 80125ec:	4642      	mov	r2, r8
 80125ee:	464b      	mov	r3, r9
 80125f0:	2000      	movs	r0, #0
 80125f2:	f000 fb57 	bl	8012ca4 <HAL_FLASH_Program>
 80125f6:	b118      	cbz	r0, 8012600 <Potato_Save+0x78>
			ret = write_error;
			return ret;
 80125f8:	2002      	movs	r0, #2
	}
	__set_PRIMASK(primask_bit);

	return save_ok;

}
 80125fa:	b009      	add	sp, #36	; 0x24
 80125fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_Backup_address + i), data) != HAL_OK) {
 8012600:	4642      	mov	r2, r8
 8012602:	464b      	mov	r3, r9
 8012604:	f506 6100 	add.w	r1, r6, #2048	; 0x800
 8012608:	f000 fb4c 	bl	8012ca4 <HAL_FLASH_Program>
 801260c:	2800      	cmp	r0, #0
 801260e:	d1f3      	bne.n	80125f8 <Potato_Save+0x70>
	for(i = 0; i < 13; i++){
 8012610:	3608      	adds	r6, #8
 8012612:	42ae      	cmp	r6, r5
 8012614:	d1e2      	bne.n	80125dc <Potato_Save+0x54>
	if(HAL_FLASH_Lock() != HAL_OK){
 8012616:	f000 fb11 	bl	8012c3c <HAL_FLASH_Lock>
 801261a:	b930      	cbnz	r0, 801262a <Potato_Save+0xa2>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801261c:	f387 8810 	msr	PRIMASK, r7
	return save_ok;
 8012620:	e7eb      	b.n	80125fa <Potato_Save+0x72>
		return ret;
 8012622:	2003      	movs	r0, #3
 8012624:	e7e9      	b.n	80125fa <Potato_Save+0x72>
		return ret;
 8012626:	4620      	mov	r0, r4
 8012628:	e7e7      	b.n	80125fa <Potato_Save+0x72>
		return ret;
 801262a:	2004      	movs	r0, #4
 801262c:	e7e5      	b.n	80125fa <Potato_Save+0x72>
 801262e:	bf00      	nop
 8012630:	0807f000 	.word	0x0807f000
 8012634:	0807f068 	.word	0x0807f068

08012638 <Potato_Load>:

save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 8012638:	b530      	push	{r4, r5, lr}
 801263a:	b09b      	sub	sp, #108	; 0x6c

	save_ret_t ret = 0;
	uint16_t crcval = 0;
	uint8_t temp[102] = {0,};
 801263c:	2100      	movs	r1, #0
 801263e:	2262      	movs	r2, #98	; 0x62
save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 8012640:	4605      	mov	r5, r0
	uint8_t temp[102] = {0,};
 8012642:	a801      	add	r0, sp, #4
 8012644:	9100      	str	r1, [sp, #0]
 8012646:	f001 fb09 	bl	8013c5c <memset>
	//uint16_t saved_crcval = 0;
	//uint8_t *normal_crc_address = Potato_Flash_CRC_Address;
	//uint8_t *backup_crc_address = Potato_Flash_Backup_CRC_Address;

	memcpy(temp, Potato_Flash_Address,Potato_Data_Length_Bytes);
 801264a:	2266      	movs	r2, #102	; 0x66
 801264c:	4910      	ldr	r1, [pc, #64]	; (8012690 <Potato_Load+0x58>)
 801264e:	4668      	mov	r0, sp
 8012650:	f001 faf6 	bl	8013c40 <memcpy>


	//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
	crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 8012654:	2166      	movs	r1, #102	; 0x66
 8012656:	4668      	mov	r0, sp
 8012658:	f7ff fcc8 	bl	8011fec <crcSlow>
	if(crcval == 0){
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 801265c:	2266      	movs	r2, #102	; 0x66
	if(crcval == 0){
 801265e:	4604      	mov	r4, r0
 8012660:	b930      	cbnz	r0, 8012670 <Potato_Load+0x38>
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 8012662:	490b      	ldr	r1, [pc, #44]	; (8012690 <Potato_Load+0x58>)

		//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);

		if(crcval == 0){
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 8012664:	4628      	mov	r0, r5
 8012666:	f001 faeb 	bl	8013c40 <memcpy>
			ret = save_ok;
			return ret;
 801266a:	4620      	mov	r0, r4
			ret = crc_error;
			return ret;
		}
	}

}
 801266c:	b01b      	add	sp, #108	; 0x6c
 801266e:	bd30      	pop	{r4, r5, pc}
		memcpy(temp, Potato_Flash_Backup_Address, Potato_Data_Length_Bytes);
 8012670:	4908      	ldr	r1, [pc, #32]	; (8012694 <Potato_Load+0x5c>)
 8012672:	4668      	mov	r0, sp
 8012674:	f001 fae4 	bl	8013c40 <memcpy>
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 8012678:	2166      	movs	r1, #102	; 0x66
 801267a:	4668      	mov	r0, sp
 801267c:	f7ff fcb6 	bl	8011fec <crcSlow>
		if(crcval == 0){
 8012680:	4604      	mov	r4, r0
 8012682:	b910      	cbnz	r0, 801268a <Potato_Load+0x52>
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 8012684:	4903      	ldr	r1, [pc, #12]	; (8012694 <Potato_Load+0x5c>)
 8012686:	2266      	movs	r2, #102	; 0x66
 8012688:	e7ec      	b.n	8012664 <Potato_Load+0x2c>
			return ret;
 801268a:	2006      	movs	r0, #6
 801268c:	e7ee      	b.n	801266c <Potato_Load+0x34>
 801268e:	bf00      	nop
 8012690:	0807f000 	.word	0x0807f000
 8012694:	0807f800 	.word	0x0807f800

08012698 <Potato_Erase>:

save_ret_t Potato_Erase(erase_page_t pages){
 8012698:	b530      	push	{r4, r5, lr}
	uint32_t Page_Error = 0;
 801269a:	2300      	movs	r3, #0
save_ret_t Potato_Erase(erase_page_t pages){
 801269c:	b087      	sub	sp, #28
	uint32_t primask_bit;
	save_ret_t ret = 0;

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 801269e:	e9cd 3301 	strd	r3, r3, [sp, #4]
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Page;
 80126a2:	2401      	movs	r4, #1
 80126a4:	23fe      	movs	r3, #254	; 0xfe
 80126a6:	e9cd 4303 	strd	r4, r3, [sp, #12]
	Erase_t.NbPages = pages;
 80126aa:	9005      	str	r0, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126ac:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80126b0:	b672      	cpsid	i

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 80126b2:	f000 fab1 	bl	8012c18 <HAL_FLASH_Unlock>
 80126b6:	b958      	cbnz	r0, 80126d0 <Potato_Erase+0x38>
			ret = unlock_error;
			return ret;
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 80126b8:	a901      	add	r1, sp, #4
 80126ba:	a802      	add	r0, sp, #8
 80126bc:	f000 fba4 	bl	8012e08 <HAL_FLASHEx_Erase>
 80126c0:	b940      	cbnz	r0, 80126d4 <Potato_Erase+0x3c>
			ret = erase_error;
			return ret;
		}


	if(HAL_FLASH_Lock() != HAL_OK){
 80126c2:	f000 fabb 	bl	8012c3c <HAL_FLASH_Lock>
 80126c6:	b938      	cbnz	r0, 80126d8 <Potato_Erase+0x40>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126c8:	f385 8810 	msr	PRIMASK, r5
			return ret;
		}

	__set_PRIMASK(primask_bit);
	return ret;
}
 80126cc:	b007      	add	sp, #28
 80126ce:	bd30      	pop	{r4, r5, pc}
			return ret;
 80126d0:	2003      	movs	r0, #3
 80126d2:	e7fb      	b.n	80126cc <Potato_Erase+0x34>
			return ret;
 80126d4:	4620      	mov	r0, r4
 80126d6:	e7f9      	b.n	80126cc <Potato_Erase+0x34>
			return ret;
 80126d8:	2004      	movs	r0, #4
 80126da:	e7f7      	b.n	80126cc <Potato_Erase+0x34>

080126dc <Potato_Backup_Load>:

save_ret_t Potato_Backup_Load(void){
 80126dc:	b570      	push	{r4, r5, r6, lr}
	uint64_t * dest_address = (uint64_t *)Potato_Flash_Address;
	uint64_t *source_address = (uint64_t *)Potato_Flash_Backup_Address;
	//uint64_t data;
	save_ret_t ret = 0;
	uint32_t primask_bit;
	uint32_t Page_Error = 0;
 80126de:	2300      	movs	r3, #0
save_ret_t Potato_Backup_Load(void){
 80126e0:	b086      	sub	sp, #24

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Page;
 80126e2:	2401      	movs	r4, #1
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 80126e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
	Erase_t.Page = Potato_Flash_Page;
 80126e8:	23fe      	movs	r3, #254	; 0xfe
 80126ea:	e9cd 4303 	strd	r4, r3, [sp, #12]
	Erase_t.NbPages = 1;
 80126ee:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126f0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80126f4:	b672      	cpsid	i

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 80126f6:	f000 fa8f 	bl	8012c18 <HAL_FLASH_Unlock>
 80126fa:	b9c0      	cbnz	r0, 801272e <Potato_Backup_Load+0x52>
			ret = unlock_error;
			return ret;
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 80126fc:	a901      	add	r1, sp, #4
 80126fe:	a802      	add	r0, sp, #8
 8012700:	f000 fb82 	bl	8012e08 <HAL_FLASHEx_Erase>
 8012704:	b9a8      	cbnz	r0, 8012732 <Potato_Backup_Load+0x56>
 8012706:	4c0e      	ldr	r4, [pc, #56]	; (8012740 <Potato_Backup_Load+0x64>)
			ret = erase_error;
			return ret;
		}

	for(uint8_t i = 0; i<13; i++){
 8012708:	4e0e      	ldr	r6, [pc, #56]	; (8012744 <Potato_Backup_Load+0x68>)
		//memcpy(&data, source_address + i, 8);
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), *(source_address + i)) != HAL_OK) {
 801270a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801270e:	f5a4 6100 	sub.w	r1, r4, #2048	; 0x800
 8012712:	2000      	movs	r0, #0
 8012714:	f000 fac6 	bl	8012ca4 <HAL_FLASH_Program>
 8012718:	b968      	cbnz	r0, 8012736 <Potato_Backup_Load+0x5a>
	for(uint8_t i = 0; i<13; i++){
 801271a:	3408      	adds	r4, #8
 801271c:	42b4      	cmp	r4, r6
 801271e:	d1f4      	bne.n	801270a <Potato_Backup_Load+0x2e>
			ret = write_error;
			return ret;
		}
	}

	if(HAL_FLASH_Lock() != HAL_OK){
 8012720:	f000 fa8c 	bl	8012c3c <HAL_FLASH_Lock>
 8012724:	b948      	cbnz	r0, 801273a <Potato_Backup_Load+0x5e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012726:	f385 8810 	msr	PRIMASK, r5
		}

	__set_PRIMASK(primask_bit);

	return ret;
}
 801272a:	b006      	add	sp, #24
 801272c:	bd70      	pop	{r4, r5, r6, pc}
			return ret;
 801272e:	2003      	movs	r0, #3
 8012730:	e7fb      	b.n	801272a <Potato_Backup_Load+0x4e>
			return ret;
 8012732:	4620      	mov	r0, r4
 8012734:	e7f9      	b.n	801272a <Potato_Backup_Load+0x4e>
			return ret;
 8012736:	2002      	movs	r0, #2
 8012738:	e7f7      	b.n	801272a <Potato_Backup_Load+0x4e>
			return ret;
 801273a:	2004      	movs	r0, #4
 801273c:	e7f5      	b.n	801272a <Potato_Backup_Load+0x4e>
 801273e:	bf00      	nop
 8012740:	0807f800 	.word	0x0807f800
 8012744:	0807f868 	.word	0x0807f868

08012748 <Potato_Dummy_Backup>:

save_ret_t Potato_Dummy_Backup(void){
 8012748:	b570      	push	{r4, r5, r6, lr}
	uint64_t * dest_address = (uint64_t *)Potato_Flash_Backup_Address;
	save_ret_t ret = 0;
	uint32_t primask_bit;
	uint32_t Page_Error = 0;
 801274a:	2300      	movs	r3, #0
save_ret_t Potato_Dummy_Backup(void){
 801274c:	b086      	sub	sp, #24
	uint64_t data = 0x1010101010101010;

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Backup_Page;
 801274e:	2401      	movs	r4, #1
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 8012750:	e9cd 3301 	strd	r3, r3, [sp, #4]
	Erase_t.Page = Potato_Flash_Backup_Page;
 8012754:	23ff      	movs	r3, #255	; 0xff
 8012756:	e9cd 4303 	strd	r4, r3, [sp, #12]
	Erase_t.NbPages = 1;
 801275a:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801275c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012760:	b672      	cpsid	i

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 8012762:	f000 fa59 	bl	8012c18 <HAL_FLASH_Unlock>
 8012766:	b9c8      	cbnz	r0, 801279c <Potato_Dummy_Backup+0x54>
			ret = unlock_error;
			return ret;
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 8012768:	a901      	add	r1, sp, #4
 801276a:	a802      	add	r0, sp, #8
 801276c:	f000 fb4c 	bl	8012e08 <HAL_FLASHEx_Erase>
 8012770:	b9b0      	cbnz	r0, 80127a0 <Potato_Dummy_Backup+0x58>
 8012772:	4c0e      	ldr	r4, [pc, #56]	; (80127ac <Potato_Dummy_Backup+0x64>)
			ret = erase_error;
			return ret;
		}

	for(uint8_t i = 0; i<13; i++){
 8012774:	4e0e      	ldr	r6, [pc, #56]	; (80127b0 <Potato_Dummy_Backup+0x68>)
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), data)) {
 8012776:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 801277a:	f04f 3310 	mov.w	r3, #269488144	; 0x10101010
 801277e:	4621      	mov	r1, r4
 8012780:	2000      	movs	r0, #0
 8012782:	f000 fa8f 	bl	8012ca4 <HAL_FLASH_Program>
 8012786:	b968      	cbnz	r0, 80127a4 <Potato_Dummy_Backup+0x5c>
	for(uint8_t i = 0; i<13; i++){
 8012788:	3408      	adds	r4, #8
 801278a:	42b4      	cmp	r4, r6
 801278c:	d1f3      	bne.n	8012776 <Potato_Dummy_Backup+0x2e>
			ret = write_error;
			return ret;
		}
	}

	if(HAL_FLASH_Lock() != HAL_OK){
 801278e:	f000 fa55 	bl	8012c3c <HAL_FLASH_Lock>
 8012792:	b948      	cbnz	r0, 80127a8 <Potato_Dummy_Backup+0x60>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012794:	f385 8810 	msr	PRIMASK, r5
		}

	__set_PRIMASK(primask_bit);

	return ret;
}
 8012798:	b006      	add	sp, #24
 801279a:	bd70      	pop	{r4, r5, r6, pc}
			return ret;
 801279c:	2003      	movs	r0, #3
 801279e:	e7fb      	b.n	8012798 <Potato_Dummy_Backup+0x50>
			return ret;
 80127a0:	4620      	mov	r0, r4
 80127a2:	e7f9      	b.n	8012798 <Potato_Dummy_Backup+0x50>
			return ret;
 80127a4:	2002      	movs	r0, #2
 80127a6:	e7f7      	b.n	8012798 <Potato_Dummy_Backup+0x50>
			return ret;
 80127a8:	2004      	movs	r0, #4
 80127aa:	e7f5      	b.n	8012798 <Potato_Dummy_Backup+0x50>
 80127ac:	0807f800 	.word	0x0807f800
 80127b0:	0807f868 	.word	0x0807f868

080127b4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80127b4:	4770      	bx	lr

080127b6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80127b6:	e7fe      	b.n	80127b6 <HardFault_Handler>

080127b8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80127b8:	e7fe      	b.n	80127b8 <MemManage_Handler>

080127ba <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80127ba:	e7fe      	b.n	80127ba <BusFault_Handler>

080127bc <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80127bc:	e7fe      	b.n	80127bc <UsageFault_Handler>

080127be <SVC_Handler>:
 80127be:	4770      	bx	lr

080127c0 <DebugMon_Handler>:
 80127c0:	4770      	bx	lr

080127c2 <PendSV_Handler>:
 80127c2:	4770      	bx	lr

080127c4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80127c4:	f000 b8f8 	b.w	80129b8 <HAL_IncTick>

080127c8 <RTC_WKUP_IRQHandler>:
 * @param  None
 * @retval None
 */
void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 80127c8:	f7ff b814 	b.w	80117f4 <HW_TS_RTC_Wakeup_Handler>

080127cc <EXTI9_5_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void)           /* BNRG_SPI_EXTI_IRQHandler */
{
  HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
 80127cc:	2040      	movs	r0, #64	; 0x40
 80127ce:	f000 bc79 	b.w	80130c4 <HAL_GPIO_EXTI_IRQHandler>

080127d2 <EXTI15_10_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI15_10_IRQHandler(void)  /* PUSH_BUTTON_EXTI_IRQHandler */
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80127d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80127d6:	f000 bc75 	b.w	80130c4 <HAL_GPIO_EXTI_IRQHandler>

080127da <DMA2_Channel1_IRQHandler>:
 * @param  None
 * @retval None
 */
void DMA2_Channel1_IRQHandler(void)     /* BNRG_SPI_RX_DMA_IRQHandler */
  {
    HW_BNRG_DMARxCb();
 80127da:	f7fe bd01 	b.w	80111e0 <HW_BNRG_DMARxCb>

080127de <DMA2_Channel2_IRQHandler>:
 * @param  None
 * @retval None
 */
void DMA2_Channel2_IRQHandler(void)    /* BNRG_SPI_TX_DMA_IRQHandler */
  {
    HW_BNRG_DMATxCb();
 80127de:	f7fe bc3f 	b.w	8011060 <HW_BNRG_DMATxCb>
	...

080127e4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80127e4:	4a10      	ldr	r2, [pc, #64]	; (8012828 <SystemInit+0x44>)
     */

    /**
     * Increase FLASH latency to 3WS
     */
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 80127e6:	4811      	ldr	r0, [pc, #68]	; (801282c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80127e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80127ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80127f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    RCC->CR |= RCC_CR_MSION;
 80127f4:	4b0e      	ldr	r3, [pc, #56]	; (8012830 <SystemInit+0x4c>)
 80127f6:	6819      	ldr	r1, [r3, #0]
 80127f8:	f041 0101 	orr.w	r1, r1, #1
 80127fc:	6019      	str	r1, [r3, #0]
      RCC->CFGR = 0x00000000;
 80127fe:	2100      	movs	r1, #0
 8012800:	6099      	str	r1, [r3, #8]
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8012802:	6801      	ldr	r1, [r0, #0]
 8012804:	f041 0103 	orr.w	r1, r1, #3
 8012808:	6001      	str	r1, [r0, #0]

    /**
     * Decrease VCore to Range2.
     * As we are downscaling Vcore, it is not required to wait for the VOSF bit to be ready
     */
    RCC->APB1ENR1 = RCC_APB1ENR1_PWREN;  /**< Switch ON PWR clock */
 801280a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 801280e:	6599      	str	r1, [r3, #88]	; 0x58
    PWR->CR1 = PWR_CR1_VOS_1;
 8012810:	4908      	ldr	r1, [pc, #32]	; (8012834 <SystemInit+0x50>)
 8012812:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012816:	6008      	str	r0, [r1, #0]

    /**
     * Increase MSI to 24Mhz
     *
     */
    RCC->CR = (RCC_CR_MSIRANGE_9|RCC_CR_MSIRGSEL|RCC_CR_MSION);   /**< Increase MSI Speed and switch MSI source*/
 8012818:	2199      	movs	r1, #153	; 0x99
 801281a:	6019      	str	r1, [r3, #0]

    SystemCoreClock = 24000000;
 801281c:	4b06      	ldr	r3, [pc, #24]	; (8012838 <SystemInit+0x54>)
 801281e:	4907      	ldr	r1, [pc, #28]	; (801283c <SystemInit+0x58>)
 8012820:	6019      	str	r1, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012822:	4b07      	ldr	r3, [pc, #28]	; (8012840 <SystemInit+0x5c>)
 8012824:	6093      	str	r3, [r2, #8]
#endif

}
 8012826:	4770      	bx	lr
 8012828:	e000ed00 	.word	0xe000ed00
 801282c:	40022000 	.word	0x40022000
 8012830:	40021000 	.word	0x40021000
 8012834:	40007000 	.word	0x40007000
 8012838:	20000004 	.word	0x20000004
 801283c:	016e3600 	.word	0x016e3600
 8012840:	08010000 	.word	0x08010000

08012844 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8012844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8012846:	b948      	cbnz	r0, 801285c <BSP_LED_Init+0x18>
 8012848:	4b0d      	ldr	r3, [pc, #52]	; (8012880 <BSP_LED_Init+0x3c>)
 801284a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801284c:	f042 0202 	orr.w	r2, r2, #2
 8012850:	64da      	str	r2, [r3, #76]	; 0x4c
 8012852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012854:	f003 0302 	and.w	r3, r3, #2
 8012858:	9300      	str	r3, [sp, #0]
 801285a:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 801285c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012860:	2301      	movs	r3, #1
 8012862:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8012866:	2100      	movs	r1, #0
 8012868:	2302      	movs	r3, #2
 801286a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 801286e:	4b05      	ldr	r3, [pc, #20]	; (8012884 <BSP_LED_Init+0x40>)
 8012870:	a901      	add	r1, sp, #4
 8012872:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012876:	f000 fb3b 	bl	8012ef0 <HAL_GPIO_Init>
}
 801287a:	b007      	add	sp, #28
 801287c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012880:	40021000 	.word	0x40021000
 8012884:	20000008 	.word	0x20000008

08012888 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8012888:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 801288a:	4b1b      	ldr	r3, [pc, #108]	; (80128f8 <BSP_PB_Init+0x70>)
 801288c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801288e:	f042 0204 	orr.w	r2, r2, #4
 8012892:	64da      	str	r2, [r3, #76]	; 0x4c
 8012894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012896:	f003 0304 	and.w	r3, r3, #4
 801289a:	9300      	str	r3, [sp, #0]
 801289c:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 801289e:	b989      	cbnz	r1, 80128c4 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80128a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80128a4:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80128a8:	2101      	movs	r1, #1
 80128aa:	2302      	movs	r3, #2
 80128ac:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80128b0:	4b12      	ldr	r3, [pc, #72]	; (80128fc <BSP_PB_Init+0x74>)
 80128b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80128b6:	a901      	add	r1, sp, #4
 80128b8:	6840      	ldr	r0, [r0, #4]
 80128ba:	f000 fb19 	bl	8012ef0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 80128be:	b007      	add	sp, #28
 80128c0:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 80128c4:	2901      	cmp	r1, #1
 80128c6:	d1fa      	bne.n	80128be <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80128c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80128cc:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128ce:	2303      	movs	r3, #3
 80128d0:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80128d2:	4b0b      	ldr	r3, [pc, #44]	; (8012900 <BSP_PB_Init+0x78>)
 80128d4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80128d6:	4b09      	ldr	r3, [pc, #36]	; (80128fc <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 80128d8:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80128da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80128de:	a901      	add	r1, sp, #4
 80128e0:	6840      	ldr	r0, [r0, #4]
 80128e2:	f000 fb05 	bl	8012ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80128e6:	2200      	movs	r2, #0
 80128e8:	210f      	movs	r1, #15
 80128ea:	2028      	movs	r0, #40	; 0x28
 80128ec:	f000 f8a0 	bl	8012a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80128f0:	2028      	movs	r0, #40	; 0x28
 80128f2:	f000 f8cf 	bl	8012a94 <HAL_NVIC_EnableIRQ>
}
 80128f6:	e7e2      	b.n	80128be <BSP_PB_Init+0x36>
 80128f8:	40021000 	.word	0x40021000
 80128fc:	20000008 	.word	0x20000008
 8012900:	10110000 	.word	0x10110000

08012904 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8012904:	f8df d034 	ldr.w	sp, [pc, #52]	; 801293c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8012908:	f7ff ff6c 	bl	80127e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801290c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801290e:	e003      	b.n	8012918 <LoopCopyDataInit>

08012910 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8012910:	4b0b      	ldr	r3, [pc, #44]	; (8012940 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8012912:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8012914:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8012916:	3104      	adds	r1, #4

08012918 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8012918:	480a      	ldr	r0, [pc, #40]	; (8012944 <LoopForever+0xa>)
	ldr	r3, =_edata
 801291a:	4b0b      	ldr	r3, [pc, #44]	; (8012948 <LoopForever+0xe>)
	adds	r2, r0, r1
 801291c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801291e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8012920:	d3f6      	bcc.n	8012910 <CopyDataInit>
	ldr	r2, =_sbss
 8012922:	4a0a      	ldr	r2, [pc, #40]	; (801294c <LoopForever+0x12>)
	b	LoopFillZerobss
 8012924:	e002      	b.n	801292c <LoopFillZerobss>

08012926 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8012926:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8012928:	f842 3b04 	str.w	r3, [r2], #4

0801292c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801292c:	4b08      	ldr	r3, [pc, #32]	; (8012950 <LoopForever+0x16>)
	cmp	r2, r3
 801292e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8012930:	d3f9      	bcc.n	8012926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012932:	f001 f961 	bl	8013bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8012936:	f7ff fcc3 	bl	80122c0 <main>

0801293a <LoopForever>:

LoopForever:
    b LoopForever
 801293a:	e7fe      	b.n	801293a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 801293c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8012940:	08013d18 	.word	0x08013d18
	ldr	r0, =_sdata
 8012944:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8012948:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 801294c:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 8012950:	20000c04 	.word	0x20000c04

08012954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8012954:	e7fe      	b.n	8012954 <ADC1_2_IRQHandler>

08012956 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8012956:	4770      	bx	lr

08012958 <HAL_MspDeInit>:
 8012958:	4770      	bx	lr
	...

0801295c <HAL_DeInit>:
{
 801295c:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 801295e:	4b0a      	ldr	r3, [pc, #40]	; (8012988 <HAL_DeInit+0x2c>)
 8012960:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 8012964:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8012966:	639a      	str	r2, [r3, #56]	; 0x38
 8012968:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 801296a:	639c      	str	r4, [r3, #56]	; 0x38
 801296c:	63dc      	str	r4, [r3, #60]	; 0x3c
  __HAL_RCC_APB2_FORCE_RESET();
 801296e:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8012970:	641c      	str	r4, [r3, #64]	; 0x40
  __HAL_RCC_AHB1_FORCE_RESET();
 8012972:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8012974:	629c      	str	r4, [r3, #40]	; 0x28
  __HAL_RCC_AHB2_FORCE_RESET();
 8012976:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8012978:	62dc      	str	r4, [r3, #44]	; 0x2c
  __HAL_RCC_AHB3_FORCE_RESET();
 801297a:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 801297c:	631c      	str	r4, [r3, #48]	; 0x30
  HAL_MspDeInit();
 801297e:	f7ff ffeb 	bl	8012958 <HAL_MspDeInit>
}
 8012982:	4620      	mov	r0, r4
 8012984:	bd10      	pop	{r4, pc}
 8012986:	bf00      	nop
 8012988:	40021000 	.word	0x40021000

0801298c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801298c:	4a09      	ldr	r2, [pc, #36]	; (80129b4 <HAL_Init+0x28>)
 801298e:	6813      	ldr	r3, [r2, #0]
 8012990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8012994:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012996:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8012998:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801299a:	f000 f837 	bl	8012a0c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801299e:	200f      	movs	r0, #15
 80129a0:	f7ff fdd2 	bl	8012548 <HAL_InitTick>
 80129a4:	4604      	mov	r4, r0
 80129a6:	b918      	cbnz	r0, 80129b0 <HAL_Init+0x24>
    HAL_MspInit();
 80129a8:	f7ff ffd5 	bl	8012956 <HAL_MspInit>
}
 80129ac:	4620      	mov	r0, r4
 80129ae:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80129b0:	2401      	movs	r4, #1
 80129b2:	e7fb      	b.n	80129ac <HAL_Init+0x20>
 80129b4:	40022000 	.word	0x40022000

080129b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80129b8:	4a03      	ldr	r2, [pc, #12]	; (80129c8 <HAL_IncTick+0x10>)
 80129ba:	4b04      	ldr	r3, [pc, #16]	; (80129cc <HAL_IncTick+0x14>)
 80129bc:	6811      	ldr	r1, [r2, #0]
 80129be:	781b      	ldrb	r3, [r3, #0]
 80129c0:	440b      	add	r3, r1
 80129c2:	6013      	str	r3, [r2, #0]
}
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop
 80129c8:	20000c00 	.word	0x20000c00
 80129cc:	2000001c 	.word	0x2000001c

080129d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80129d0:	4b01      	ldr	r3, [pc, #4]	; (80129d8 <HAL_GetTick+0x8>)
 80129d2:	6818      	ldr	r0, [r3, #0]
}
 80129d4:	4770      	bx	lr
 80129d6:	bf00      	nop
 80129d8:	20000c00 	.word	0x20000c00

080129dc <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80129dc:	4a02      	ldr	r2, [pc, #8]	; (80129e8 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80129de:	6853      	ldr	r3, [r2, #4]
 80129e0:	f043 0301 	orr.w	r3, r3, #1
 80129e4:	6053      	str	r3, [r2, #4]
}
 80129e6:	4770      	bx	lr
 80129e8:	e0042000 	.word	0xe0042000

080129ec <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80129ec:	4a02      	ldr	r2, [pc, #8]	; (80129f8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80129ee:	6853      	ldr	r3, [r2, #4]
 80129f0:	f043 0302 	orr.w	r3, r3, #2
 80129f4:	6053      	str	r3, [r2, #4]
}
 80129f6:	4770      	bx	lr
 80129f8:	e0042000 	.word	0xe0042000

080129fc <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80129fc:	4a02      	ldr	r2, [pc, #8]	; (8012a08 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80129fe:	6853      	ldr	r3, [r2, #4]
 8012a00:	f043 0304 	orr.w	r3, r3, #4
 8012a04:	6053      	str	r3, [r2, #4]
}
 8012a06:	4770      	bx	lr
 8012a08:	e0042000 	.word	0xe0042000

08012a0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012a0c:	4907      	ldr	r1, [pc, #28]	; (8012a2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8012a0e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012a10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012a14:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012a16:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012a18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012a1c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8012a28:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8012a2a:	4770      	bx	lr
 8012a2c:	e000ed00 	.word	0xe000ed00

08012a30 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012a30:	4b16      	ldr	r3, [pc, #88]	; (8012a8c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012a32:	b530      	push	{r4, r5, lr}
 8012a34:	68dc      	ldr	r4, [r3, #12]
 8012a36:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012a3a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012a3e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012a40:	2d04      	cmp	r5, #4
 8012a42:	bf28      	it	cs
 8012a44:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012a46:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012a48:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012a4c:	bf8c      	ite	hi
 8012a4e:	3c03      	subhi	r4, #3
 8012a50:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012a52:	fa03 f505 	lsl.w	r5, r3, r5
 8012a56:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012a5a:	40a3      	lsls	r3, r4
 8012a5c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012a60:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8012a62:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012a64:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a68:	bfac      	ite	ge
 8012a6a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a6e:	4a08      	ldrlt	r2, [pc, #32]	; (8012a90 <HAL_NVIC_SetPriority+0x60>)
 8012a70:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8012a74:	bfb8      	it	lt
 8012a76:	f000 000f 	andlt.w	r0, r0, #15
 8012a7a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a7c:	bfaa      	itet	ge
 8012a7e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a82:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a84:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8012a88:	bd30      	pop	{r4, r5, pc}
 8012a8a:	bf00      	nop
 8012a8c:	e000ed00 	.word	0xe000ed00
 8012a90:	e000ed14 	.word	0xe000ed14

08012a94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8012a94:	2800      	cmp	r0, #0
 8012a96:	db08      	blt.n	8012aaa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012a98:	2301      	movs	r3, #1
 8012a9a:	0942      	lsrs	r2, r0, #5
 8012a9c:	f000 001f 	and.w	r0, r0, #31
 8012aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8012aa4:	4b01      	ldr	r3, [pc, #4]	; (8012aac <HAL_NVIC_EnableIRQ+0x18>)
 8012aa6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8012aaa:	4770      	bx	lr
 8012aac:	e000e100 	.word	0xe000e100

08012ab0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	db0d      	blt.n	8012ad0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012ab4:	0943      	lsrs	r3, r0, #5
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	f000 001f 	and.w	r0, r0, #31
 8012abc:	fa02 f000 	lsl.w	r0, r2, r0
 8012ac0:	3320      	adds	r3, #32
 8012ac2:	4a04      	ldr	r2, [pc, #16]	; (8012ad4 <HAL_NVIC_DisableIRQ+0x24>)
 8012ac4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012ac8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012acc:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	e000e100 	.word	0xe000e100

08012ad8 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	db09      	blt.n	8012af0 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012adc:	0943      	lsrs	r3, r0, #5
 8012ade:	2201      	movs	r2, #1
 8012ae0:	f000 001f 	and.w	r0, r0, #31
 8012ae4:	fa02 f000 	lsl.w	r0, r2, r0
 8012ae8:	3340      	adds	r3, #64	; 0x40
 8012aea:	4a02      	ldr	r2, [pc, #8]	; (8012af4 <HAL_NVIC_SetPendingIRQ+0x1c>)
 8012aec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8012af0:	4770      	bx	lr
 8012af2:	bf00      	nop
 8012af4:	e000e100 	.word	0xe000e100

08012af8 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8012af8:	2800      	cmp	r0, #0
 8012afa:	db09      	blt.n	8012b10 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012afc:	0943      	lsrs	r3, r0, #5
 8012afe:	2201      	movs	r2, #1
 8012b00:	f000 001f 	and.w	r0, r0, #31
 8012b04:	fa02 f000 	lsl.w	r0, r2, r0
 8012b08:	3360      	adds	r3, #96	; 0x60
 8012b0a:	4a02      	ldr	r2, [pc, #8]	; (8012b14 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8012b0c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8012b10:	4770      	bx	lr
 8012b12:	bf00      	nop
 8012b14:	e000e100 	.word	0xe000e100

08012b18 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012b18:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8012b1a:	2800      	cmp	r0, #0
 8012b1c:	d058      	beq.n	8012bd0 <HAL_DMA_Init+0xb8>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8012b1e:	6801      	ldr	r1, [r0, #0]
 8012b20:	4b2c      	ldr	r3, [pc, #176]	; (8012bd4 <HAL_DMA_Init+0xbc>)
 8012b22:	4299      	cmp	r1, r3
 8012b24:	f04f 0414 	mov.w	r4, #20
 8012b28:	d842      	bhi.n	8012bb0 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8012b2a:	4a2b      	ldr	r2, [pc, #172]	; (8012bd8 <HAL_DMA_Init+0xc0>)
 8012b2c:	440a      	add	r2, r1
 8012b2e:	fbb2 f2f4 	udiv	r2, r2, r4
 8012b32:	0092      	lsls	r2, r2, #2
 8012b34:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8012b36:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8012b3a:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012b3c:	2302      	movs	r3, #2
 8012b3e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8012b42:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b46:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8012b48:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8012b4a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b4c:	432b      	orrs	r3, r5
 8012b4e:	6945      	ldr	r5, [r0, #20]
 8012b50:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b52:	6985      	ldr	r5, [r0, #24]
 8012b54:	432b      	orrs	r3, r5
 8012b56:	69c5      	ldr	r5, [r0, #28]
 8012b58:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b5a:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8012b5c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8012b60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b64:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8012b66:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8012b68:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8012b6c:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8012b6e:	d016      	beq.n	8012b9e <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8012b70:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012b72:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8012b74:	f001 021c 	and.w	r2, r1, #28
 8012b78:	6841      	ldr	r1, [r0, #4]
 8012b7a:	230f      	movs	r3, #15
 8012b7c:	4093      	lsls	r3, r2
 8012b7e:	4091      	lsls	r1, r2
 8012b80:	4a16      	ldr	r2, [pc, #88]	; (8012bdc <HAL_DMA_Init+0xc4>)
 8012b82:	4294      	cmp	r4, r2
 8012b84:	ea6f 0303 	mvn.w	r3, r3
 8012b88:	d11a      	bne.n	8012bc0 <HAL_DMA_Init+0xa8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8012b8a:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8012b8e:	4023      	ands	r3, r4
 8012b90:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8012b94:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 8012b98:	4319      	orrs	r1, r3
 8012b9a:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012b9e:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8012ba0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012ba2:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8012ba4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8012ba8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8012bac:	4618      	mov	r0, r3
}
 8012bae:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8012bb0:	4b0b      	ldr	r3, [pc, #44]	; (8012be0 <HAL_DMA_Init+0xc8>)
 8012bb2:	440b      	add	r3, r1
 8012bb4:	fbb3 f3f4 	udiv	r3, r3, r4
 8012bb8:	009b      	lsls	r3, r3, #2
 8012bba:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8012bbc:	4b09      	ldr	r3, [pc, #36]	; (8012be4 <HAL_DMA_Init+0xcc>)
 8012bbe:	e7bc      	b.n	8012b3a <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8012bc0:	4a09      	ldr	r2, [pc, #36]	; (8012be8 <HAL_DMA_Init+0xd0>)
 8012bc2:	6814      	ldr	r4, [r2, #0]
 8012bc4:	4023      	ands	r3, r4
 8012bc6:	6013      	str	r3, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8012bc8:	6813      	ldr	r3, [r2, #0]
 8012bca:	4319      	orrs	r1, r3
 8012bcc:	6011      	str	r1, [r2, #0]
 8012bce:	e7e6      	b.n	8012b9e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8012bd0:	2001      	movs	r0, #1
 8012bd2:	e7ec      	b.n	8012bae <HAL_DMA_Init+0x96>
 8012bd4:	40020407 	.word	0x40020407
 8012bd8:	bffdfff8 	.word	0xbffdfff8
 8012bdc:	40020000 	.word	0x40020000
 8012be0:	bffdfbf8 	.word	0xbffdfbf8
 8012be4:	40020400 	.word	0x40020400
 8012be8:	400204a8 	.word	0x400204a8

08012bec <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8012bec:	4a09      	ldr	r2, [pc, #36]	; (8012c14 <FLASH_Program_Fast+0x28>)
 8012bee:	6953      	ldr	r3, [r2, #20]
 8012bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 8012bf4:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8012bf6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bf8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012bfc:	b672      	cpsid	i
}
 8012bfe:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8012c00:	58cc      	ldr	r4, [r1, r3]
 8012c02:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  } while (row_index != 0U);
 8012c04:	3304      	adds	r3, #4
 8012c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c0a:	d1f9      	bne.n	8012c00 <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c0c:	f382 8810 	msr	PRIMASK, r2

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8012c10:	bd10      	pop	{r4, pc}
 8012c12:	bf00      	nop
 8012c14:	40022000 	.word	0x40022000

08012c18 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8012c18:	4b06      	ldr	r3, [pc, #24]	; (8012c34 <HAL_FLASH_Unlock+0x1c>)
 8012c1a:	695a      	ldr	r2, [r3, #20]
 8012c1c:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012c1e:	bfbf      	itttt	lt
 8012c20:	4a05      	ldrlt	r2, [pc, #20]	; (8012c38 <HAL_FLASH_Unlock+0x20>)
 8012c22:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012c24:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8012c28:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8012c2a:	bfba      	itte	lt
 8012c2c:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8012c2e:	0fc0      	lsrlt	r0, r0, #31
 8012c30:	2000      	movge	r0, #0
}
 8012c32:	4770      	bx	lr
 8012c34:	40022000 	.word	0x40022000
 8012c38:	45670123 	.word	0x45670123

08012c3c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8012c3c:	4a03      	ldr	r2, [pc, #12]	; (8012c4c <HAL_FLASH_Lock+0x10>)
 8012c3e:	6953      	ldr	r3, [r2, #20]
 8012c40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012c44:	6153      	str	r3, [r2, #20]
}
 8012c46:	2000      	movs	r0, #0
 8012c48:	4770      	bx	lr
 8012c4a:	bf00      	nop
 8012c4c:	40022000 	.word	0x40022000

08012c50 <FLASH_WaitForLastOperation>:
{
 8012c50:	b570      	push	{r4, r5, r6, lr}
 8012c52:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8012c54:	f7ff febc 	bl	80129d0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8012c58:	4c10      	ldr	r4, [pc, #64]	; (8012c9c <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8012c5a:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8012c5c:	6923      	ldr	r3, [r4, #16]
 8012c5e:	03db      	lsls	r3, r3, #15
 8012c60:	d40b      	bmi.n	8012c7a <FLASH_WaitForLastOperation+0x2a>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8012c62:	6920      	ldr	r0, [r4, #16]
 8012c64:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if(error != 0u)
 8012c68:	4002      	ands	r2, r0
 8012c6a:	d00f      	beq.n	8012c8c <FLASH_WaitForLastOperation+0x3c>
    pFlash.ErrorCode |= error;
 8012c6c:	490c      	ldr	r1, [pc, #48]	; (8012ca0 <FLASH_WaitForLastOperation+0x50>)
 8012c6e:	684b      	ldr	r3, [r1, #4]
 8012c70:	4313      	orrs	r3, r2
 8012c72:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 8012c74:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8012c76:	6122      	str	r2, [r4, #16]
}
 8012c78:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8012c7a:	1c6a      	adds	r2, r5, #1
 8012c7c:	d0ee      	beq.n	8012c5c <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8012c7e:	f7ff fea7 	bl	80129d0 <HAL_GetTick>
 8012c82:	1b80      	subs	r0, r0, r6
 8012c84:	42a8      	cmp	r0, r5
 8012c86:	d3e9      	bcc.n	8012c5c <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8012c88:	2003      	movs	r0, #3
 8012c8a:	e7f5      	b.n	8012c78 <FLASH_WaitForLastOperation+0x28>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8012c8c:	6920      	ldr	r0, [r4, #16]
 8012c8e:	f010 0001 	ands.w	r0, r0, #1
 8012c92:	d0f1      	beq.n	8012c78 <FLASH_WaitForLastOperation+0x28>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012c94:	2301      	movs	r3, #1
 8012c96:	6123      	str	r3, [r4, #16]
 8012c98:	4610      	mov	r0, r2
 8012c9a:	e7ed      	b.n	8012c78 <FLASH_WaitForLastOperation+0x28>
 8012c9c:	40022000 	.word	0x40022000
 8012ca0:	20000024 	.word	0x20000024

08012ca4 <HAL_FLASH_Program>:
{
 8012ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8012ca8:	4c25      	ldr	r4, [pc, #148]	; (8012d40 <HAL_FLASH_Program+0x9c>)
{
 8012caa:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8012cac:	7823      	ldrb	r3, [r4, #0]
 8012cae:	2b01      	cmp	r3, #1
{
 8012cb0:	4606      	mov	r6, r0
 8012cb2:	460f      	mov	r7, r1
 8012cb4:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8012cb6:	d041      	beq.n	8012d3c <HAL_FLASH_Program+0x98>
 8012cb8:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012cba:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8012cbe:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012cc0:	f7ff ffc6 	bl	8012c50 <FLASH_WaitForLastOperation>
 8012cc4:	4605      	mov	r5, r0
  if(status == HAL_OK)
 8012cc6:	bb30      	cbnz	r0, 8012d16 <HAL_FLASH_Program+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8012cc8:	4d1e      	ldr	r5, [pc, #120]	; (8012d44 <HAL_FLASH_Program+0xa0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012cca:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8012ccc:	682a      	ldr	r2, [r5, #0]
 8012cce:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8012cd2:	bf17      	itett	ne
 8012cd4:	682b      	ldrne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8012cd6:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8012cd8:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8012cdc:	602b      	strne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8012cde:	bf1c      	itt	ne
 8012ce0:	2302      	movne	r3, #2
 8012ce2:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8012ce4:	b9e6      	cbnz	r6, 8012d20 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8012ce6:	696b      	ldr	r3, [r5, #20]
 8012ce8:	f043 0301 	orr.w	r3, r3, #1
 8012cec:	616b      	str	r3, [r5, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8012cee:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 8012cf2:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8012cf6:	2601      	movs	r6, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8012cf8:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012cfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012d00:	f7ff ffa6 	bl	8012c50 <FLASH_WaitForLastOperation>
 8012d04:	4605      	mov	r5, r0
    if (prog_bit != 0U)
 8012d06:	b126      	cbz	r6, 8012d12 <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8012d08:	4a0e      	ldr	r2, [pc, #56]	; (8012d44 <HAL_FLASH_Program+0xa0>)
 8012d0a:	6953      	ldr	r3, [r2, #20]
 8012d0c:	ea23 0606 	bic.w	r6, r3, r6
 8012d10:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 8012d12:	f000 f84d 	bl	8012db0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8012d16:	2300      	movs	r3, #0
 8012d18:	7023      	strb	r3, [r4, #0]
}
 8012d1a:	4628      	mov	r0, r5
 8012d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8012d20:	1e73      	subs	r3, r6, #1
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d901      	bls.n	8012d2a <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 8012d26:	2600      	movs	r6, #0
 8012d28:	e7e8      	b.n	8012cfc <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8012d2a:	4641      	mov	r1, r8
 8012d2c:	4638      	mov	r0, r7
 8012d2e:	f7ff ff5d 	bl	8012bec <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8012d32:	2e02      	cmp	r6, #2
 8012d34:	d1f7      	bne.n	8012d26 <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 8012d36:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8012d3a:	e7df      	b.n	8012cfc <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 8012d3c:	2502      	movs	r5, #2
 8012d3e:	e7ec      	b.n	8012d1a <HAL_FLASH_Program+0x76>
 8012d40:	20000024 	.word	0x20000024
 8012d44:	40022000 	.word	0x40022000

08012d48 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8012d48:	4b09      	ldr	r3, [pc, #36]	; (8012d70 <FLASH_MassErase+0x28>)
 8012d4a:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8012d4e:	bf1e      	ittt	ne
 8012d50:	695a      	ldrne	r2, [r3, #20]
 8012d52:	f042 0204 	orrne.w	r2, r2, #4
 8012d56:	615a      	strne	r2, [r3, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8012d58:	0782      	lsls	r2, r0, #30
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8012d5a:	bf42      	ittt	mi
 8012d5c:	695a      	ldrmi	r2, [r3, #20]
 8012d5e:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
 8012d62:	615a      	strmi	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012d64:	4a02      	ldr	r2, [pc, #8]	; (8012d70 <FLASH_MassErase+0x28>)
 8012d66:	6953      	ldr	r3, [r2, #20]
 8012d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012d6c:	6153      	str	r3, [r2, #20]
}
 8012d6e:	4770      	bx	lr
 8012d70:	40022000 	.word	0x40022000

08012d74 <FLASH_PageErase>:
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8012d74:	4b0d      	ldr	r3, [pc, #52]	; (8012dac <FLASH_PageErase+0x38>)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8012d76:	695a      	ldr	r2, [r3, #20]
    if((Banks & FLASH_BANK_1) != 0U)
 8012d78:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8012d7c:	bf14      	ite	ne
 8012d7e:	f422 6200 	bicne.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8012d82:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8012d86:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8012d88:	695a      	ldr	r2, [r3, #20]
 8012d8a:	00c0      	lsls	r0, r0, #3
 8012d8c:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8012d90:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8012d94:	4310      	orrs	r0, r2
 8012d96:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8012d98:	695a      	ldr	r2, [r3, #20]
 8012d9a:	f042 0202 	orr.w	r2, r2, #2
 8012d9e:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012da0:	695a      	ldr	r2, [r3, #20]
 8012da2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8012da6:	615a      	str	r2, [r3, #20]
}
 8012da8:	4770      	bx	lr
 8012daa:	bf00      	nop
 8012dac:	40022000 	.word	0x40022000

08012db0 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8012db0:	4a13      	ldr	r2, [pc, #76]	; (8012e00 <FLASH_FlushCaches+0x50>)
 8012db2:	7f13      	ldrb	r3, [r2, #28]
 8012db4:	b2d9      	uxtb	r1, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8012db6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	d10c      	bne.n	8012dd8 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012dbe:	4b11      	ldr	r3, [pc, #68]	; (8012e04 <FLASH_FlushCaches+0x54>)
 8012dc0:	6818      	ldr	r0, [r3, #0]
 8012dc2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8012dc6:	6018      	str	r0, [r3, #0]
 8012dc8:	6818      	ldr	r0, [r3, #0]
 8012dca:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8012dce:	6018      	str	r0, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012dd0:	6818      	ldr	r0, [r3, #0]
 8012dd2:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8012dd6:	6018      	str	r0, [r3, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8012dd8:	1e8b      	subs	r3, r1, #2
 8012dda:	2b01      	cmp	r3, #1
 8012ddc:	d80c      	bhi.n	8012df8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8012dde:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <FLASH_FlushCaches+0x54>)
 8012de0:	6819      	ldr	r1, [r3, #0]
 8012de2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8012de6:	6019      	str	r1, [r3, #0]
 8012de8:	6819      	ldr	r1, [r3, #0]
 8012dea:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8012dee:	6019      	str	r1, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8012df0:	6819      	ldr	r1, [r3, #0]
 8012df2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8012df6:	6019      	str	r1, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	7713      	strb	r3, [r2, #28]
}
 8012dfc:	4770      	bx	lr
 8012dfe:	bf00      	nop
 8012e00:	20000024 	.word	0x20000024
 8012e04:	40022000 	.word	0x40022000

08012e08 <HAL_FLASHEx_Erase>:
{
 8012e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8012e0c:	4d35      	ldr	r5, [pc, #212]	; (8012ee4 <HAL_FLASHEx_Erase+0xdc>)
 8012e0e:	782b      	ldrb	r3, [r5, #0]
 8012e10:	2b01      	cmp	r3, #1
{
 8012e12:	4606      	mov	r6, r0
 8012e14:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8012e16:	d062      	beq.n	8012ede <HAL_FLASHEx_Erase+0xd6>
 8012e18:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012e1a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8012e1e:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012e20:	f7ff ff16 	bl	8012c50 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8012e24:	4604      	mov	r4, r0
 8012e26:	bb40      	cbnz	r0, 8012e7a <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8012e28:	4b2f      	ldr	r3, [pc, #188]	; (8012ee8 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012e2a:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8012e2c:	681a      	ldr	r2, [r3, #0]
 8012e2e:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012e32:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8012e34:	d026      	beq.n	8012e84 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012e36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012e3a:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8012e3c:	681a      	ldr	r2, [r3, #0]
 8012e3e:	0551      	lsls	r1, r2, #21
 8012e40:	d506      	bpl.n	8012e50 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e48:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8012e4a:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8012e4c:	772b      	strb	r3, [r5, #28]
 8012e4e:	e000      	b.n	8012e52 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8012e50:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012e52:	6833      	ldr	r3, [r6, #0]
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d11f      	bne.n	8012e98 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 8012e58:	6870      	ldr	r0, [r6, #4]
 8012e5a:	f7ff ff75 	bl	8012d48 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012e5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012e62:	f7ff fef5 	bl	8012c50 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8012e66:	4a20      	ldr	r2, [pc, #128]	; (8012ee8 <HAL_FLASHEx_Erase+0xe0>)
 8012e68:	6953      	ldr	r3, [r2, #20]
 8012e6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012e6e:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012e72:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8012e74:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 8012e76:	f7ff ff9b 	bl	8012db0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	702b      	strb	r3, [r5, #0]
}
 8012e7e:	4620      	mov	r0, r4
 8012e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8012e84:	0552      	lsls	r2, r2, #21
 8012e86:	d505      	bpl.n	8012e94 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e8e:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8012e90:	2302      	movs	r3, #2
 8012e92:	e7db      	b.n	8012e4c <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8012e94:	7728      	strb	r0, [r5, #28]
 8012e96:	e7dc      	b.n	8012e52 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 8012e98:	f04f 33ff 	mov.w	r3, #4294967295
 8012e9c:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8012ea0:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8012ea2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8012ee8 <HAL_FLASHEx_Erase+0xe0>
 8012ea6:	f8df a044 	ldr.w	sl, [pc, #68]	; 8012eec <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8012eaa:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8012eae:	4413      	add	r3, r2
 8012eb0:	42bb      	cmp	r3, r7
 8012eb2:	d9e0      	bls.n	8012e76 <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8012eb4:	6871      	ldr	r1, [r6, #4]
 8012eb6:	4638      	mov	r0, r7
 8012eb8:	f7ff ff5c 	bl	8012d74 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012ebc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012ec0:	f7ff fec6 	bl	8012c50 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8012ec4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012ec8:	ea03 030a 	and.w	r3, r3, sl
 8012ecc:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8012ed0:	b118      	cbz	r0, 8012eda <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 8012ed2:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012ed6:	4604      	mov	r4, r0
          break;
 8012ed8:	e7cd      	b.n	8012e76 <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8012eda:	3701      	adds	r7, #1
 8012edc:	e7e5      	b.n	8012eaa <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 8012ede:	2402      	movs	r4, #2
 8012ee0:	e7cd      	b.n	8012e7e <HAL_FLASHEx_Erase+0x76>
 8012ee2:	bf00      	nop
 8012ee4:	20000024 	.word	0x20000024
 8012ee8:	40022000 	.word	0x40022000
 8012eec:	fffff805 	.word	0xfffff805

08012ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012ef4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80130a8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8012ef8:	4d69      	ldr	r5, [pc, #420]	; (80130a0 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8012efa:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012efc:	680a      	ldr	r2, [r1, #0]
 8012efe:	fa32 f403 	lsrs.w	r4, r2, r3
 8012f02:	d102      	bne.n	8012f0a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8012f04:	b003      	add	sp, #12
 8012f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8012f0a:	f04f 0a01 	mov.w	sl, #1
 8012f0e:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 8012f12:	ea1a 0202 	ands.w	r2, sl, r2
 8012f16:	f000 80b4 	beq.w	8013082 <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012f1a:	684c      	ldr	r4, [r1, #4]
 8012f1c:	f024 0e10 	bic.w	lr, r4, #16
 8012f20:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8012f24:	2603      	movs	r6, #3
 8012f26:	f10e 37ff 	add.w	r7, lr, #4294967295
 8012f2a:	fa06 f608 	lsl.w	r6, r6, r8
 8012f2e:	2f01      	cmp	r7, #1
 8012f30:	ea6f 0606 	mvn.w	r6, r6
 8012f34:	d811      	bhi.n	8012f5a <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8012f36:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8012f38:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8012f3c:	68cf      	ldr	r7, [r1, #12]
 8012f3e:	fa07 f708 	lsl.w	r7, r7, r8
 8012f42:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8012f46:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8012f48:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8012f4a:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8012f4e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8012f52:	409f      	lsls	r7, r3
 8012f54:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8012f58:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8012f5a:	f004 0c03 	and.w	ip, r4, #3
 8012f5e:	f1bc 0f03 	cmp.w	ip, #3
 8012f62:	d108      	bne.n	8012f76 <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 8012f64:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8012f66:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8012f6a:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8012f6e:	409f      	lsls	r7, r3
 8012f70:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8012f74:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8012f76:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8012f78:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8012f7c:	688f      	ldr	r7, [r1, #8]
 8012f7e:	fa07 f708 	lsl.w	r7, r7, r8
 8012f82:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012f86:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8012f8a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012f8c:	d116      	bne.n	8012fbc <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 8012f8e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8012f92:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8012f96:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8012f9a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8012f9e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8012fa2:	f04f 0e0f 	mov.w	lr, #15
 8012fa6:	fa0e fe0b 	lsl.w	lr, lr, fp
 8012faa:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8012fae:	690f      	ldr	r7, [r1, #16]
 8012fb0:	fa07 f70b 	lsl.w	r7, r7, fp
 8012fb4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8012fb8:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8012fbc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8012fbe:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8012fc2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8012fc4:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 8012fc8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012fca:	00e6      	lsls	r6, r4, #3
 8012fcc:	d559      	bpl.n	8013082 <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012fce:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8012fd2:	f046 0601 	orr.w	r6, r6, #1
 8012fd6:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8012fda:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8012fde:	f023 0703 	bic.w	r7, r3, #3
 8012fe2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8012fe6:	f006 0601 	and.w	r6, r6, #1
 8012fea:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8012fee:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8012ff0:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012ff4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8012ff6:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8012ff8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8012ffc:	f04f 0c0f 	mov.w	ip, #15
 8013000:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8013004:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8013008:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801300c:	d03b      	beq.n	8013086 <HAL_GPIO_Init+0x196>
 801300e:	4e25      	ldr	r6, [pc, #148]	; (80130a4 <HAL_GPIO_Init+0x1b4>)
 8013010:	42b0      	cmp	r0, r6
 8013012:	d03a      	beq.n	801308a <HAL_GPIO_Init+0x19a>
 8013014:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8013018:	42b0      	cmp	r0, r6
 801301a:	d038      	beq.n	801308e <HAL_GPIO_Init+0x19e>
 801301c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8013020:	42b0      	cmp	r0, r6
 8013022:	d036      	beq.n	8013092 <HAL_GPIO_Init+0x1a2>
 8013024:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8013028:	42b0      	cmp	r0, r6
 801302a:	d034      	beq.n	8013096 <HAL_GPIO_Init+0x1a6>
 801302c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8013030:	42b0      	cmp	r0, r6
 8013032:	d032      	beq.n	801309a <HAL_GPIO_Init+0x1aa>
 8013034:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8013038:	42b0      	cmp	r0, r6
 801303a:	bf0c      	ite	eq
 801303c:	2606      	moveq	r6, #6
 801303e:	2607      	movne	r6, #7
 8013040:	fa06 f60e 	lsl.w	r6, r6, lr
 8013044:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8013048:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 801304a:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 801304c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801304e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8013052:	bf0c      	ite	eq
 8013054:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8013056:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8013058:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 801305a:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801305c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8013060:	bf0c      	ite	eq
 8013062:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8013064:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8013066:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8013068:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801306a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 801306e:	bf0c      	ite	eq
 8013070:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8013072:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8013074:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8013076:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8013078:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 801307a:	bf54      	ite	pl
 801307c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 801307e:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8013080:	60ee      	str	r6, [r5, #12]
    position++;
 8013082:	3301      	adds	r3, #1
 8013084:	e73a      	b.n	8012efc <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8013086:	2600      	movs	r6, #0
 8013088:	e7da      	b.n	8013040 <HAL_GPIO_Init+0x150>
 801308a:	2601      	movs	r6, #1
 801308c:	e7d8      	b.n	8013040 <HAL_GPIO_Init+0x150>
 801308e:	2602      	movs	r6, #2
 8013090:	e7d6      	b.n	8013040 <HAL_GPIO_Init+0x150>
 8013092:	2603      	movs	r6, #3
 8013094:	e7d4      	b.n	8013040 <HAL_GPIO_Init+0x150>
 8013096:	2604      	movs	r6, #4
 8013098:	e7d2      	b.n	8013040 <HAL_GPIO_Init+0x150>
 801309a:	2605      	movs	r6, #5
 801309c:	e7d0      	b.n	8013040 <HAL_GPIO_Init+0x150>
 801309e:	bf00      	nop
 80130a0:	40010400 	.word	0x40010400
 80130a4:	48000400 	.word	0x48000400
 80130a8:	40021000 	.word	0x40021000

080130ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80130ac:	6903      	ldr	r3, [r0, #16]
 80130ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80130b0:	bf14      	ite	ne
 80130b2:	2001      	movne	r0, #1
 80130b4:	2000      	moveq	r0, #0
 80130b6:	4770      	bx	lr

080130b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80130b8:	b10a      	cbz	r2, 80130be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80130ba:	6181      	str	r1, [r0, #24]
 80130bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80130be:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80130c0:	4770      	bx	lr
	...

080130c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80130c4:	4a04      	ldr	r2, [pc, #16]	; (80130d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80130c6:	6951      	ldr	r1, [r2, #20]
 80130c8:	4201      	tst	r1, r0
{
 80130ca:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80130cc:	d002      	beq.n	80130d4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80130ce:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80130d0:	f7ff fa14 	bl	80124fc <HAL_GPIO_EXTI_Callback>
  }
}
 80130d4:	bd08      	pop	{r3, pc}
 80130d6:	bf00      	nop
 80130d8:	40010400 	.word	0x40010400

080130dc <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80130dc:	4a02      	ldr	r2, [pc, #8]	; (80130e8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80130de:	6813      	ldr	r3, [r2, #0]
 80130e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130e4:	6013      	str	r3, [r2, #0]
}
 80130e6:	4770      	bx	lr
 80130e8:	40007000 	.word	0x40007000

080130ec <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80130ec:	4b02      	ldr	r3, [pc, #8]	; (80130f8 <HAL_PWREx_GetVoltageRange+0xc>)
 80130ee:	6818      	ldr	r0, [r3, #0]
#endif
}
 80130f0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80130f4:	4770      	bx	lr
 80130f6:	bf00      	nop
 80130f8:	40007000 	.word	0x40007000

080130fc <HAL_PWREx_EnableSRAM2ContentRetention>:
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 80130fc:	4a02      	ldr	r2, [pc, #8]	; (8013108 <HAL_PWREx_EnableSRAM2ContentRetention+0xc>)
 80130fe:	6893      	ldr	r3, [r2, #8]
 8013100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013104:	6093      	str	r3, [r2, #8]
}
 8013106:	4770      	bx	lr
 8013108:	40007000 	.word	0x40007000

0801310c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801310c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801310e:	4d1e      	ldr	r5, [pc, #120]	; (8013188 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8013110:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8013112:	00da      	lsls	r2, r3, #3
{
 8013114:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8013116:	d518      	bpl.n	801314a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8013118:	f7ff ffe8 	bl	80130ec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801311c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8013120:	d123      	bne.n	801316a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8013122:	2c80      	cmp	r4, #128	; 0x80
 8013124:	d929      	bls.n	801317a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8013126:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8013128:	bf8c      	ite	hi
 801312a:	2402      	movhi	r4, #2
 801312c:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801312e:	4917      	ldr	r1, [pc, #92]	; (801318c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8013130:	680a      	ldr	r2, [r1, #0]
 8013132:	f022 0207 	bic.w	r2, r2, #7
 8013136:	4322      	orrs	r2, r4
 8013138:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801313a:	6808      	ldr	r0, [r1, #0]
 801313c:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8013140:	1b00      	subs	r0, r0, r4
 8013142:	bf18      	it	ne
 8013144:	2001      	movne	r0, #1
 8013146:	b003      	add	sp, #12
 8013148:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 801314a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801314c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013150:	65ab      	str	r3, [r5, #88]	; 0x58
 8013152:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8013154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013158:	9301      	str	r3, [sp, #4]
 801315a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 801315c:	f7ff ffc6 	bl	80130ec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8013160:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8013162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013166:	65ab      	str	r3, [r5, #88]	; 0x58
 8013168:	e7d8      	b.n	801311c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 801316a:	2c80      	cmp	r4, #128	; 0x80
 801316c:	d807      	bhi.n	801317e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 801316e:	d008      	beq.n	8013182 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8013170:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8013174:	425c      	negs	r4, r3
 8013176:	415c      	adcs	r4, r3
 8013178:	e7d9      	b.n	801312e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801317a:	2400      	movs	r4, #0
 801317c:	e7d7      	b.n	801312e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 801317e:	2403      	movs	r4, #3
 8013180:	e7d5      	b.n	801312e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8013182:	2402      	movs	r4, #2
 8013184:	e7d3      	b.n	801312e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8013186:	bf00      	nop
 8013188:	40021000 	.word	0x40021000
 801318c:	40022000 	.word	0x40022000

08013190 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013190:	4b22      	ldr	r3, [pc, #136]	; (801321c <HAL_RCC_GetSysClockFreq+0x8c>)
 8013192:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013194:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8013196:	f012 020c 	ands.w	r2, r2, #12
 801319a:	d005      	beq.n	80131a8 <HAL_RCC_GetSysClockFreq+0x18>
 801319c:	2a0c      	cmp	r2, #12
 801319e:	d115      	bne.n	80131cc <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80131a0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80131a4:	2901      	cmp	r1, #1
 80131a6:	d118      	bne.n	80131da <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80131a8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80131aa:	481d      	ldr	r0, [pc, #116]	; (8013220 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80131ac:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80131ae:	bf55      	itete	pl
 80131b0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80131b4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80131b6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80131ba:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80131be:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80131c2:	b34a      	cbz	r2, 8013218 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80131c4:	2a0c      	cmp	r2, #12
 80131c6:	d009      	beq.n	80131dc <HAL_RCC_GetSysClockFreq+0x4c>
 80131c8:	2000      	movs	r0, #0
  return sysclockfreq;
 80131ca:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80131cc:	2a04      	cmp	r2, #4
 80131ce:	d022      	beq.n	8013216 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80131d0:	2a08      	cmp	r2, #8
 80131d2:	4814      	ldr	r0, [pc, #80]	; (8013224 <HAL_RCC_GetSysClockFreq+0x94>)
 80131d4:	bf18      	it	ne
 80131d6:	2000      	movne	r0, #0
 80131d8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80131da:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80131dc:	68da      	ldr	r2, [r3, #12]
 80131de:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80131e2:	2a02      	cmp	r2, #2
 80131e4:	d015      	beq.n	8013212 <HAL_RCC_GetSysClockFreq+0x82>
 80131e6:	490f      	ldr	r1, [pc, #60]	; (8013224 <HAL_RCC_GetSysClockFreq+0x94>)
 80131e8:	2a03      	cmp	r2, #3
 80131ea:	bf08      	it	eq
 80131ec:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80131ee:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80131f0:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80131f8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80131fc:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8013200:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8013202:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8013204:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8013206:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8013208:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 801320c:	fbb0 f0f3 	udiv	r0, r0, r3
 8013210:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8013212:	4805      	ldr	r0, [pc, #20]	; (8013228 <HAL_RCC_GetSysClockFreq+0x98>)
 8013214:	e7eb      	b.n	80131ee <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8013216:	4804      	ldr	r0, [pc, #16]	; (8013228 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8013218:	4770      	bx	lr
 801321a:	bf00      	nop
 801321c:	40021000 	.word	0x40021000
 8013220:	08013cb0 	.word	0x08013cb0
 8013224:	007a1200 	.word	0x007a1200
 8013228:	00f42400 	.word	0x00f42400

0801322c <HAL_RCC_OscConfig>:
{
 801322c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8013230:	4605      	mov	r5, r0
 8013232:	b918      	cbnz	r0, 801323c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8013234:	2001      	movs	r0, #1
}
 8013236:	b003      	add	sp, #12
 8013238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801323c:	4ca7      	ldr	r4, [pc, #668]	; (80134dc <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801323e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013240:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013242:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8013244:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013246:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801324a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801324e:	d53d      	bpl.n	80132cc <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8013250:	b11e      	cbz	r6, 801325a <HAL_RCC_OscConfig+0x2e>
 8013252:	2e0c      	cmp	r6, #12
 8013254:	d166      	bne.n	8013324 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8013256:	2f01      	cmp	r7, #1
 8013258:	d164      	bne.n	8013324 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801325a:	6823      	ldr	r3, [r4, #0]
 801325c:	0799      	lsls	r1, r3, #30
 801325e:	d502      	bpl.n	8013266 <HAL_RCC_OscConfig+0x3a>
 8013260:	69ab      	ldr	r3, [r5, #24]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d0e6      	beq.n	8013234 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8013266:	6823      	ldr	r3, [r4, #0]
 8013268:	6a28      	ldr	r0, [r5, #32]
 801326a:	071a      	lsls	r2, r3, #28
 801326c:	bf56      	itet	pl
 801326e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8013272:	6823      	ldrmi	r3, [r4, #0]
 8013274:	091b      	lsrpl	r3, r3, #4
 8013276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801327a:	4298      	cmp	r0, r3
 801327c:	d93b      	bls.n	80132f6 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801327e:	f7ff ff45 	bl	801310c <RCC_SetFlashLatencyFromMSIRange>
 8013282:	2800      	cmp	r0, #0
 8013284:	d1d6      	bne.n	8013234 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013286:	6823      	ldr	r3, [r4, #0]
 8013288:	f043 0308 	orr.w	r3, r3, #8
 801328c:	6023      	str	r3, [r4, #0]
 801328e:	6823      	ldr	r3, [r4, #0]
 8013290:	6a2a      	ldr	r2, [r5, #32]
 8013292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013296:	4313      	orrs	r3, r2
 8013298:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801329a:	6863      	ldr	r3, [r4, #4]
 801329c:	69ea      	ldr	r2, [r5, #28]
 801329e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80132a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80132a6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80132a8:	f7ff ff72 	bl	8013190 <HAL_RCC_GetSysClockFreq>
 80132ac:	68a3      	ldr	r3, [r4, #8]
 80132ae:	4a8c      	ldr	r2, [pc, #560]	; (80134e0 <HAL_RCC_OscConfig+0x2b4>)
 80132b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80132b4:	5cd3      	ldrb	r3, [r2, r3]
 80132b6:	f003 031f 	and.w	r3, r3, #31
 80132ba:	40d8      	lsrs	r0, r3
 80132bc:	4b89      	ldr	r3, [pc, #548]	; (80134e4 <HAL_RCC_OscConfig+0x2b8>)
 80132be:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80132c0:	4b89      	ldr	r3, [pc, #548]	; (80134e8 <HAL_RCC_OscConfig+0x2bc>)
 80132c2:	6818      	ldr	r0, [r3, #0]
 80132c4:	f7ff f940 	bl	8012548 <HAL_InitTick>
        if(status != HAL_OK)
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d1b4      	bne.n	8013236 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80132cc:	682b      	ldr	r3, [r5, #0]
 80132ce:	07d9      	lsls	r1, r3, #31
 80132d0:	d45f      	bmi.n	8013392 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80132d2:	682b      	ldr	r3, [r5, #0]
 80132d4:	079a      	lsls	r2, r3, #30
 80132d6:	f100 809e 	bmi.w	8013416 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80132da:	682b      	ldr	r3, [r5, #0]
 80132dc:	0719      	lsls	r1, r3, #28
 80132de:	f100 80d2 	bmi.w	8013486 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80132e2:	682b      	ldr	r3, [r5, #0]
 80132e4:	075a      	lsls	r2, r3, #29
 80132e6:	f100 8101 	bmi.w	80134ec <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80132ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f040 816a 	bne.w	80135c6 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80132f2:	2000      	movs	r0, #0
 80132f4:	e79f      	b.n	8013236 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80132f6:	6823      	ldr	r3, [r4, #0]
 80132f8:	f043 0308 	orr.w	r3, r3, #8
 80132fc:	6023      	str	r3, [r4, #0]
 80132fe:	6823      	ldr	r3, [r4, #0]
 8013300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013304:	4303      	orrs	r3, r0
 8013306:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013308:	6863      	ldr	r3, [r4, #4]
 801330a:	69ea      	ldr	r2, [r5, #28]
 801330c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013310:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013314:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8013316:	2e00      	cmp	r6, #0
 8013318:	d1c6      	bne.n	80132a8 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801331a:	f7ff fef7 	bl	801310c <RCC_SetFlashLatencyFromMSIRange>
 801331e:	2800      	cmp	r0, #0
 8013320:	d0c2      	beq.n	80132a8 <HAL_RCC_OscConfig+0x7c>
 8013322:	e787      	b.n	8013234 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8013324:	69ab      	ldr	r3, [r5, #24]
 8013326:	b31b      	cbz	r3, 8013370 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8013328:	6823      	ldr	r3, [r4, #0]
 801332a:	f043 0301 	orr.w	r3, r3, #1
 801332e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8013330:	f7ff fb4e 	bl	80129d0 <HAL_GetTick>
 8013334:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013336:	6823      	ldr	r3, [r4, #0]
 8013338:	079b      	lsls	r3, r3, #30
 801333a:	d511      	bpl.n	8013360 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801333c:	6823      	ldr	r3, [r4, #0]
 801333e:	f043 0308 	orr.w	r3, r3, #8
 8013342:	6023      	str	r3, [r4, #0]
 8013344:	6823      	ldr	r3, [r4, #0]
 8013346:	6a2a      	ldr	r2, [r5, #32]
 8013348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801334c:	4313      	orrs	r3, r2
 801334e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013350:	6863      	ldr	r3, [r4, #4]
 8013352:	69ea      	ldr	r2, [r5, #28]
 8013354:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801335c:	6063      	str	r3, [r4, #4]
 801335e:	e7b5      	b.n	80132cc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013360:	f7ff fb36 	bl	80129d0 <HAL_GetTick>
 8013364:	eba0 0008 	sub.w	r0, r0, r8
 8013368:	2802      	cmp	r0, #2
 801336a:	d9e4      	bls.n	8013336 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 801336c:	2003      	movs	r0, #3
 801336e:	e762      	b.n	8013236 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8013370:	6823      	ldr	r3, [r4, #0]
 8013372:	f023 0301 	bic.w	r3, r3, #1
 8013376:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8013378:	f7ff fb2a 	bl	80129d0 <HAL_GetTick>
 801337c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801337e:	6823      	ldr	r3, [r4, #0]
 8013380:	0798      	lsls	r0, r3, #30
 8013382:	d5a3      	bpl.n	80132cc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013384:	f7ff fb24 	bl	80129d0 <HAL_GetTick>
 8013388:	eba0 0008 	sub.w	r0, r0, r8
 801338c:	2802      	cmp	r0, #2
 801338e:	d9f6      	bls.n	801337e <HAL_RCC_OscConfig+0x152>
 8013390:	e7ec      	b.n	801336c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8013392:	2e08      	cmp	r6, #8
 8013394:	d003      	beq.n	801339e <HAL_RCC_OscConfig+0x172>
 8013396:	2e0c      	cmp	r6, #12
 8013398:	d108      	bne.n	80133ac <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801339a:	2f03      	cmp	r7, #3
 801339c:	d106      	bne.n	80133ac <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801339e:	6823      	ldr	r3, [r4, #0]
 80133a0:	039b      	lsls	r3, r3, #14
 80133a2:	d596      	bpl.n	80132d2 <HAL_RCC_OscConfig+0xa6>
 80133a4:	686b      	ldr	r3, [r5, #4]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d193      	bne.n	80132d2 <HAL_RCC_OscConfig+0xa6>
 80133aa:	e743      	b.n	8013234 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80133ac:	686b      	ldr	r3, [r5, #4]
 80133ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133b2:	d110      	bne.n	80133d6 <HAL_RCC_OscConfig+0x1aa>
 80133b4:	6823      	ldr	r3, [r4, #0]
 80133b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80133ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80133bc:	f7ff fb08 	bl	80129d0 <HAL_GetTick>
 80133c0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80133c2:	6823      	ldr	r3, [r4, #0]
 80133c4:	0398      	lsls	r0, r3, #14
 80133c6:	d484      	bmi.n	80132d2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80133c8:	f7ff fb02 	bl	80129d0 <HAL_GetTick>
 80133cc:	eba0 0008 	sub.w	r0, r0, r8
 80133d0:	2864      	cmp	r0, #100	; 0x64
 80133d2:	d9f6      	bls.n	80133c2 <HAL_RCC_OscConfig+0x196>
 80133d4:	e7ca      	b.n	801336c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80133d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80133da:	d104      	bne.n	80133e6 <HAL_RCC_OscConfig+0x1ba>
 80133dc:	6823      	ldr	r3, [r4, #0]
 80133de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80133e2:	6023      	str	r3, [r4, #0]
 80133e4:	e7e6      	b.n	80133b4 <HAL_RCC_OscConfig+0x188>
 80133e6:	6822      	ldr	r2, [r4, #0]
 80133e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80133ec:	6022      	str	r2, [r4, #0]
 80133ee:	6822      	ldr	r2, [r4, #0]
 80133f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80133f4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d1e0      	bne.n	80133bc <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 80133fa:	f7ff fae9 	bl	80129d0 <HAL_GetTick>
 80133fe:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013400:	6823      	ldr	r3, [r4, #0]
 8013402:	0399      	lsls	r1, r3, #14
 8013404:	f57f af65 	bpl.w	80132d2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013408:	f7ff fae2 	bl	80129d0 <HAL_GetTick>
 801340c:	eba0 0008 	sub.w	r0, r0, r8
 8013410:	2864      	cmp	r0, #100	; 0x64
 8013412:	d9f5      	bls.n	8013400 <HAL_RCC_OscConfig+0x1d4>
 8013414:	e7aa      	b.n	801336c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8013416:	2e04      	cmp	r6, #4
 8013418:	d003      	beq.n	8013422 <HAL_RCC_OscConfig+0x1f6>
 801341a:	2e0c      	cmp	r6, #12
 801341c:	d110      	bne.n	8013440 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801341e:	2f02      	cmp	r7, #2
 8013420:	d10e      	bne.n	8013440 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013422:	6823      	ldr	r3, [r4, #0]
 8013424:	055a      	lsls	r2, r3, #21
 8013426:	d503      	bpl.n	8013430 <HAL_RCC_OscConfig+0x204>
 8013428:	68eb      	ldr	r3, [r5, #12]
 801342a:	2b00      	cmp	r3, #0
 801342c:	f43f af02 	beq.w	8013234 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013430:	6863      	ldr	r3, [r4, #4]
 8013432:	692a      	ldr	r2, [r5, #16]
 8013434:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8013438:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801343c:	6063      	str	r3, [r4, #4]
 801343e:	e74c      	b.n	80132da <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013440:	68eb      	ldr	r3, [r5, #12]
 8013442:	b17b      	cbz	r3, 8013464 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8013444:	6823      	ldr	r3, [r4, #0]
 8013446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801344a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801344c:	f7ff fac0 	bl	80129d0 <HAL_GetTick>
 8013450:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013452:	6823      	ldr	r3, [r4, #0]
 8013454:	055b      	lsls	r3, r3, #21
 8013456:	d4eb      	bmi.n	8013430 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013458:	f7ff faba 	bl	80129d0 <HAL_GetTick>
 801345c:	1bc0      	subs	r0, r0, r7
 801345e:	2802      	cmp	r0, #2
 8013460:	d9f7      	bls.n	8013452 <HAL_RCC_OscConfig+0x226>
 8013462:	e783      	b.n	801336c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8013464:	6823      	ldr	r3, [r4, #0]
 8013466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801346a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801346c:	f7ff fab0 	bl	80129d0 <HAL_GetTick>
 8013470:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8013472:	6823      	ldr	r3, [r4, #0]
 8013474:	0558      	lsls	r0, r3, #21
 8013476:	f57f af30 	bpl.w	80132da <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801347a:	f7ff faa9 	bl	80129d0 <HAL_GetTick>
 801347e:	1bc0      	subs	r0, r0, r7
 8013480:	2802      	cmp	r0, #2
 8013482:	d9f6      	bls.n	8013472 <HAL_RCC_OscConfig+0x246>
 8013484:	e772      	b.n	801336c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013486:	696b      	ldr	r3, [r5, #20]
 8013488:	b19b      	cbz	r3, 80134b2 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 801348a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801348e:	f043 0301 	orr.w	r3, r3, #1
 8013492:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8013496:	f7ff fa9b 	bl	80129d0 <HAL_GetTick>
 801349a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801349c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80134a0:	079b      	lsls	r3, r3, #30
 80134a2:	f53f af1e 	bmi.w	80132e2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80134a6:	f7ff fa93 	bl	80129d0 <HAL_GetTick>
 80134aa:	1bc0      	subs	r0, r0, r7
 80134ac:	2802      	cmp	r0, #2
 80134ae:	d9f5      	bls.n	801349c <HAL_RCC_OscConfig+0x270>
 80134b0:	e75c      	b.n	801336c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 80134b2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80134b6:	f023 0301 	bic.w	r3, r3, #1
 80134ba:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80134be:	f7ff fa87 	bl	80129d0 <HAL_GetTick>
 80134c2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80134c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80134c8:	0798      	lsls	r0, r3, #30
 80134ca:	f57f af0a 	bpl.w	80132e2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80134ce:	f7ff fa7f 	bl	80129d0 <HAL_GetTick>
 80134d2:	1bc0      	subs	r0, r0, r7
 80134d4:	2802      	cmp	r0, #2
 80134d6:	d9f5      	bls.n	80134c4 <HAL_RCC_OscConfig+0x298>
 80134d8:	e748      	b.n	801336c <HAL_RCC_OscConfig+0x140>
 80134da:	bf00      	nop
 80134dc:	40021000 	.word	0x40021000
 80134e0:	08013ce0 	.word	0x08013ce0
 80134e4:	20000004 	.word	0x20000004
 80134e8:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80134ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80134ee:	00d9      	lsls	r1, r3, #3
 80134f0:	d429      	bmi.n	8013546 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80134f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80134f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80134f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80134fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80134fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013500:	9301      	str	r3, [sp, #4]
 8013502:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8013504:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013508:	4f89      	ldr	r7, [pc, #548]	; (8013730 <HAL_RCC_OscConfig+0x504>)
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	05da      	lsls	r2, r3, #23
 801350e:	d51d      	bpl.n	801354c <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013510:	68ab      	ldr	r3, [r5, #8]
 8013512:	2b01      	cmp	r3, #1
 8013514:	d12b      	bne.n	801356e <HAL_RCC_OscConfig+0x342>
 8013516:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801351a:	f043 0301 	orr.w	r3, r3, #1
 801351e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8013522:	f7ff fa55 	bl	80129d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013526:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 801352a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801352c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8013530:	0798      	lsls	r0, r3, #30
 8013532:	d542      	bpl.n	80135ba <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8013534:	f1b8 0f00 	cmp.w	r8, #0
 8013538:	f43f aed7 	beq.w	80132ea <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 801353c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801353e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013542:	65a3      	str	r3, [r4, #88]	; 0x58
 8013544:	e6d1      	b.n	80132ea <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8013546:	f04f 0800 	mov.w	r8, #0
 801354a:	e7dd      	b.n	8013508 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013552:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8013554:	f7ff fa3c 	bl	80129d0 <HAL_GetTick>
 8013558:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	05db      	lsls	r3, r3, #23
 801355e:	d4d7      	bmi.n	8013510 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013560:	f7ff fa36 	bl	80129d0 <HAL_GetTick>
 8013564:	eba0 0009 	sub.w	r0, r0, r9
 8013568:	2802      	cmp	r0, #2
 801356a:	d9f6      	bls.n	801355a <HAL_RCC_OscConfig+0x32e>
 801356c:	e6fe      	b.n	801336c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801356e:	2b05      	cmp	r3, #5
 8013570:	d106      	bne.n	8013580 <HAL_RCC_OscConfig+0x354>
 8013572:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8013576:	f043 0304 	orr.w	r3, r3, #4
 801357a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801357e:	e7ca      	b.n	8013516 <HAL_RCC_OscConfig+0x2ea>
 8013580:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8013584:	f022 0201 	bic.w	r2, r2, #1
 8013588:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801358c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8013590:	f022 0204 	bic.w	r2, r2, #4
 8013594:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1c2      	bne.n	8013522 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 801359c:	f7ff fa18 	bl	80129d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80135a0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80135a4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80135a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80135aa:	0799      	lsls	r1, r3, #30
 80135ac:	d5c2      	bpl.n	8013534 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80135ae:	f7ff fa0f 	bl	80129d0 <HAL_GetTick>
 80135b2:	1bc0      	subs	r0, r0, r7
 80135b4:	4548      	cmp	r0, r9
 80135b6:	d9f6      	bls.n	80135a6 <HAL_RCC_OscConfig+0x37a>
 80135b8:	e6d8      	b.n	801336c <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80135ba:	f7ff fa09 	bl	80129d0 <HAL_GetTick>
 80135be:	1bc0      	subs	r0, r0, r7
 80135c0:	4548      	cmp	r0, r9
 80135c2:	d9b3      	bls.n	801352c <HAL_RCC_OscConfig+0x300>
 80135c4:	e6d2      	b.n	801336c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80135c6:	2b02      	cmp	r3, #2
 80135c8:	f040 808f 	bne.w	80136ea <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 80135cc:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80135ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80135d0:	f003 0103 	and.w	r1, r3, #3
 80135d4:	4291      	cmp	r1, r2
 80135d6:	d124      	bne.n	8013622 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80135d8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80135da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80135de:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80135e0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80135e4:	d11d      	bne.n	8013622 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80135e6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80135e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80135ec:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80135f0:	d117      	bne.n	8013622 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80135f2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80135f4:	3a07      	subs	r2, #7
 80135f6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80135fa:	bf18      	it	ne
 80135fc:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80135fe:	4291      	cmp	r1, r2
 8013600:	d10f      	bne.n	8013622 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013602:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8013604:	0852      	lsrs	r2, r2, #1
 8013606:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 801360a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 801360c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8013610:	d107      	bne.n	8013622 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8013612:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8013614:	0852      	lsrs	r2, r2, #1
 8013616:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 801361a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801361c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8013620:	d04a      	beq.n	80136b8 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8013622:	2e0c      	cmp	r6, #12
 8013624:	f43f ae06 	beq.w	8013234 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8013628:	6823      	ldr	r3, [r4, #0]
 801362a:	015a      	lsls	r2, r3, #5
 801362c:	f53f ae02 	bmi.w	8013234 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8013630:	6823      	ldr	r3, [r4, #0]
 8013632:	00db      	lsls	r3, r3, #3
 8013634:	f53f adfe 	bmi.w	8013234 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8013638:	6823      	ldr	r3, [r4, #0]
 801363a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801363e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8013640:	f7ff f9c6 	bl	80129d0 <HAL_GetTick>
 8013644:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013646:	6823      	ldr	r3, [r4, #0]
 8013648:	019f      	lsls	r7, r3, #6
 801364a:	d42f      	bmi.n	80136ac <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801364c:	68e2      	ldr	r2, [r4, #12]
 801364e:	4b39      	ldr	r3, [pc, #228]	; (8013734 <HAL_RCC_OscConfig+0x508>)
 8013650:	4013      	ands	r3, r2
 8013652:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8013654:	4313      	orrs	r3, r2
 8013656:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8013658:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801365c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801365e:	3a01      	subs	r2, #1
 8013660:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8013664:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8013666:	0912      	lsrs	r2, r2, #4
 8013668:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 801366c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801366e:	0852      	lsrs	r2, r2, #1
 8013670:	3a01      	subs	r2, #1
 8013672:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8013676:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8013678:	0852      	lsrs	r2, r2, #1
 801367a:	3a01      	subs	r2, #1
 801367c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8013680:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8013682:	6823      	ldr	r3, [r4, #0]
 8013684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013688:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801368a:	68e3      	ldr	r3, [r4, #12]
 801368c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013690:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8013692:	f7ff f99d 	bl	80129d0 <HAL_GetTick>
 8013696:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013698:	6823      	ldr	r3, [r4, #0]
 801369a:	0198      	lsls	r0, r3, #6
 801369c:	f53f ae29 	bmi.w	80132f2 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80136a0:	f7ff f996 	bl	80129d0 <HAL_GetTick>
 80136a4:	1b40      	subs	r0, r0, r5
 80136a6:	2802      	cmp	r0, #2
 80136a8:	d9f6      	bls.n	8013698 <HAL_RCC_OscConfig+0x46c>
 80136aa:	e65f      	b.n	801336c <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80136ac:	f7ff f990 	bl	80129d0 <HAL_GetTick>
 80136b0:	1b80      	subs	r0, r0, r6
 80136b2:	2802      	cmp	r0, #2
 80136b4:	d9c7      	bls.n	8013646 <HAL_RCC_OscConfig+0x41a>
 80136b6:	e659      	b.n	801336c <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80136b8:	6823      	ldr	r3, [r4, #0]
 80136ba:	0199      	lsls	r1, r3, #6
 80136bc:	f53f ae19 	bmi.w	80132f2 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 80136c0:	6823      	ldr	r3, [r4, #0]
 80136c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80136c6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80136c8:	68e3      	ldr	r3, [r4, #12]
 80136ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80136ce:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80136d0:	f7ff f97e 	bl	80129d0 <HAL_GetTick>
 80136d4:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	019a      	lsls	r2, r3, #6
 80136da:	f53f ae0a 	bmi.w	80132f2 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80136de:	f7ff f977 	bl	80129d0 <HAL_GetTick>
 80136e2:	1b40      	subs	r0, r0, r5
 80136e4:	2802      	cmp	r0, #2
 80136e6:	d9f6      	bls.n	80136d6 <HAL_RCC_OscConfig+0x4aa>
 80136e8:	e640      	b.n	801336c <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80136ea:	2e0c      	cmp	r6, #12
 80136ec:	f43f ada2 	beq.w	8013234 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80136f0:	6823      	ldr	r3, [r4, #0]
 80136f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80136f6:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80136f8:	6823      	ldr	r3, [r4, #0]
 80136fa:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80136fe:	bf02      	ittt	eq
 8013700:	68e3      	ldreq	r3, [r4, #12]
 8013702:	f023 0303 	biceq.w	r3, r3, #3
 8013706:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8013708:	68e3      	ldr	r3, [r4, #12]
 801370a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013712:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8013714:	f7ff f95c 	bl	80129d0 <HAL_GetTick>
 8013718:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801371a:	6823      	ldr	r3, [r4, #0]
 801371c:	019b      	lsls	r3, r3, #6
 801371e:	f57f ade8 	bpl.w	80132f2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013722:	f7ff f955 	bl	80129d0 <HAL_GetTick>
 8013726:	1b40      	subs	r0, r0, r5
 8013728:	2802      	cmp	r0, #2
 801372a:	d9f6      	bls.n	801371a <HAL_RCC_OscConfig+0x4ee>
 801372c:	e61e      	b.n	801336c <HAL_RCC_OscConfig+0x140>
 801372e:	bf00      	nop
 8013730:	40007000 	.word	0x40007000
 8013734:	f99d808c 	.word	0xf99d808c

08013738 <HAL_RCC_ClockConfig>:
{
 8013738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801373c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 801373e:	4604      	mov	r4, r0
 8013740:	b910      	cbnz	r0, 8013748 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8013742:	2001      	movs	r0, #1
}
 8013744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013748:	4a40      	ldr	r2, [pc, #256]	; (801384c <HAL_RCC_ClockConfig+0x114>)
 801374a:	6813      	ldr	r3, [r2, #0]
 801374c:	f003 0307 	and.w	r3, r3, #7
 8013750:	428b      	cmp	r3, r1
 8013752:	d32a      	bcc.n	80137aa <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013754:	6823      	ldr	r3, [r4, #0]
 8013756:	07d9      	lsls	r1, r3, #31
 8013758:	d432      	bmi.n	80137c0 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801375a:	6821      	ldr	r1, [r4, #0]
 801375c:	078a      	lsls	r2, r1, #30
 801375e:	d45b      	bmi.n	8013818 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013760:	4a3a      	ldr	r2, [pc, #232]	; (801384c <HAL_RCC_ClockConfig+0x114>)
 8013762:	6813      	ldr	r3, [r2, #0]
 8013764:	f003 0307 	and.w	r3, r3, #7
 8013768:	42ab      	cmp	r3, r5
 801376a:	d85d      	bhi.n	8013828 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801376c:	f011 0f04 	tst.w	r1, #4
 8013770:	4d37      	ldr	r5, [pc, #220]	; (8013850 <HAL_RCC_ClockConfig+0x118>)
 8013772:	d164      	bne.n	801383e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013774:	070b      	lsls	r3, r1, #28
 8013776:	d506      	bpl.n	8013786 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013778:	68ab      	ldr	r3, [r5, #8]
 801377a:	6922      	ldr	r2, [r4, #16]
 801377c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8013780:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8013784:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013786:	f7ff fd03 	bl	8013190 <HAL_RCC_GetSysClockFreq>
 801378a:	68ab      	ldr	r3, [r5, #8]
 801378c:	4a31      	ldr	r2, [pc, #196]	; (8013854 <HAL_RCC_ClockConfig+0x11c>)
 801378e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8013792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013796:	5cd3      	ldrb	r3, [r2, r3]
 8013798:	f003 031f 	and.w	r3, r3, #31
 801379c:	40d8      	lsrs	r0, r3
 801379e:	4b2e      	ldr	r3, [pc, #184]	; (8013858 <HAL_RCC_ClockConfig+0x120>)
 80137a0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80137a2:	4b2e      	ldr	r3, [pc, #184]	; (801385c <HAL_RCC_ClockConfig+0x124>)
 80137a4:	6818      	ldr	r0, [r3, #0]
 80137a6:	f7fe becf 	b.w	8012548 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80137aa:	6813      	ldr	r3, [r2, #0]
 80137ac:	f023 0307 	bic.w	r3, r3, #7
 80137b0:	430b      	orrs	r3, r1
 80137b2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80137b4:	6813      	ldr	r3, [r2, #0]
 80137b6:	f003 0307 	and.w	r3, r3, #7
 80137ba:	428b      	cmp	r3, r1
 80137bc:	d1c1      	bne.n	8013742 <HAL_RCC_ClockConfig+0xa>
 80137be:	e7c9      	b.n	8013754 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80137c0:	6862      	ldr	r2, [r4, #4]
 80137c2:	4e23      	ldr	r6, [pc, #140]	; (8013850 <HAL_RCC_ClockConfig+0x118>)
 80137c4:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80137c6:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80137c8:	d11a      	bne.n	8013800 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80137ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80137ce:	d0b8      	beq.n	8013742 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80137d0:	68b3      	ldr	r3, [r6, #8]
 80137d2:	f023 0303 	bic.w	r3, r3, #3
 80137d6:	4313      	orrs	r3, r2
 80137d8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80137da:	f7ff f8f9 	bl	80129d0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80137de:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80137e2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80137e4:	68b3      	ldr	r3, [r6, #8]
 80137e6:	6862      	ldr	r2, [r4, #4]
 80137e8:	f003 030c 	and.w	r3, r3, #12
 80137ec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80137f0:	d0b3      	beq.n	801375a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80137f2:	f7ff f8ed 	bl	80129d0 <HAL_GetTick>
 80137f6:	1bc0      	subs	r0, r0, r7
 80137f8:	4540      	cmp	r0, r8
 80137fa:	d9f3      	bls.n	80137e4 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80137fc:	2003      	movs	r0, #3
 80137fe:	e7a1      	b.n	8013744 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013800:	2a02      	cmp	r2, #2
 8013802:	d102      	bne.n	801380a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013804:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8013808:	e7e1      	b.n	80137ce <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801380a:	b912      	cbnz	r2, 8013812 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801380c:	f013 0f02 	tst.w	r3, #2
 8013810:	e7dd      	b.n	80137ce <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8013812:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8013816:	e7da      	b.n	80137ce <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013818:	4a0d      	ldr	r2, [pc, #52]	; (8013850 <HAL_RCC_ClockConfig+0x118>)
 801381a:	68a0      	ldr	r0, [r4, #8]
 801381c:	6893      	ldr	r3, [r2, #8]
 801381e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013822:	4303      	orrs	r3, r0
 8013824:	6093      	str	r3, [r2, #8]
 8013826:	e79b      	b.n	8013760 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013828:	6813      	ldr	r3, [r2, #0]
 801382a:	f023 0307 	bic.w	r3, r3, #7
 801382e:	432b      	orrs	r3, r5
 8013830:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013832:	6813      	ldr	r3, [r2, #0]
 8013834:	f003 0307 	and.w	r3, r3, #7
 8013838:	42ab      	cmp	r3, r5
 801383a:	d182      	bne.n	8013742 <HAL_RCC_ClockConfig+0xa>
 801383c:	e796      	b.n	801376c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801383e:	68ab      	ldr	r3, [r5, #8]
 8013840:	68e2      	ldr	r2, [r4, #12]
 8013842:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8013846:	4313      	orrs	r3, r2
 8013848:	60ab      	str	r3, [r5, #8]
 801384a:	e793      	b.n	8013774 <HAL_RCC_ClockConfig+0x3c>
 801384c:	40022000 	.word	0x40022000
 8013850:	40021000 	.word	0x40021000
 8013854:	08013ce0 	.word	0x08013ce0
 8013858:	20000004 	.word	0x20000004
 801385c:	20000020 	.word	0x20000020

08013860 <HAL_RTC_MspInit>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8013860:	4770      	bx	lr

08013862 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013862:	6802      	ldr	r2, [r0, #0]
{
 8013864:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013866:	68d3      	ldr	r3, [r2, #12]
 8013868:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801386c:	60d3      	str	r3, [r2, #12]
{
 801386e:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8013870:	f7ff f8ae 	bl	80129d0 <HAL_GetTick>
 8013874:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013876:	6823      	ldr	r3, [r4, #0]
 8013878:	68db      	ldr	r3, [r3, #12]
 801387a:	069b      	lsls	r3, r3, #26
 801387c:	d501      	bpl.n	8013882 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 801387e:	2000      	movs	r0, #0
}
 8013880:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013882:	f7ff f8a5 	bl	80129d0 <HAL_GetTick>
 8013886:	1b40      	subs	r0, r0, r5
 8013888:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801388c:	d9f3      	bls.n	8013876 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 801388e:	2003      	movs	r0, #3
 8013890:	e7f6      	b.n	8013880 <HAL_RTC_WaitForSynchro+0x1e>

08013892 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8013892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8013894:	6803      	ldr	r3, [r0, #0]
 8013896:	68dc      	ldr	r4, [r3, #12]
 8013898:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 801389c:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801389e:	d118      	bne.n	80138d2 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80138a0:	f04f 32ff 	mov.w	r2, #4294967295
 80138a4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80138a6:	f7ff f893 	bl	80129d0 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80138aa:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 80138ac:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80138ae:	682b      	ldr	r3, [r5, #0]
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	065b      	lsls	r3, r3, #25
 80138b4:	d401      	bmi.n	80138ba <RTC_EnterInitMode+0x28>
 80138b6:	2c03      	cmp	r4, #3
 80138b8:	d101      	bne.n	80138be <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 80138ba:	4620      	mov	r0, r4
 80138bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80138be:	f7ff f887 	bl	80129d0 <HAL_GetTick>
 80138c2:	1b80      	subs	r0, r0, r6
 80138c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80138c8:	bf84      	itt	hi
 80138ca:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 80138ce:	2403      	movhi	r4, #3
 80138d0:	e7ed      	b.n	80138ae <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80138d2:	2400      	movs	r4, #0
 80138d4:	e7f1      	b.n	80138ba <RTC_EnterInitMode+0x28>
	...

080138d8 <RTC_ExitInitMode>:
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80138d8:	4b10      	ldr	r3, [pc, #64]	; (801391c <RTC_ExitInitMode+0x44>)
 80138da:	68da      	ldr	r2, [r3, #12]
 80138dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 80138e0:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80138e2:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80138e4:	689a      	ldr	r2, [r3, #8]
 80138e6:	0692      	lsls	r2, r2, #26
{
 80138e8:	4604      	mov	r4, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80138ea:	d406      	bmi.n	80138fa <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80138ec:	f7ff ffb9 	bl	8013862 <HAL_RTC_WaitForSynchro>
 80138f0:	b110      	cbz	r0, 80138f8 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80138f2:	2003      	movs	r0, #3
 80138f4:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 80138f8:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80138fa:	689a      	ldr	r2, [r3, #8]
 80138fc:	f022 0220 	bic.w	r2, r2, #32
 8013900:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013902:	f7ff ffae 	bl	8013862 <HAL_RTC_WaitForSynchro>
 8013906:	b110      	cbz	r0, 801390e <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013908:	2003      	movs	r0, #3
 801390a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801390e:	4a03      	ldr	r2, [pc, #12]	; (801391c <RTC_ExitInitMode+0x44>)
 8013910:	6893      	ldr	r3, [r2, #8]
 8013912:	f043 0320 	orr.w	r3, r3, #32
 8013916:	6093      	str	r3, [r2, #8]
  return status;
 8013918:	e7ee      	b.n	80138f8 <RTC_ExitInitMode+0x20>
 801391a:	bf00      	nop
 801391c:	40002800 	.word	0x40002800

08013920 <HAL_RTC_Init>:
{
 8013920:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 8013922:	4604      	mov	r4, r0
 8013924:	2800      	cmp	r0, #0
 8013926:	d03f      	beq.n	80139a8 <HAL_RTC_Init+0x88>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8013928:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 801392c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013930:	b91b      	cbnz	r3, 801393a <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 8013932:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8013936:	f7ff ff93 	bl	8013860 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 801393a:	2302      	movs	r3, #2
 801393c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013940:	6823      	ldr	r3, [r4, #0]
 8013942:	22ca      	movs	r2, #202	; 0xca
 8013944:	625a      	str	r2, [r3, #36]	; 0x24
 8013946:	2253      	movs	r2, #83	; 0x53
 8013948:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 801394a:	4620      	mov	r0, r4
 801394c:	f7ff ffa1 	bl	8013892 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8013950:	bb48      	cbnz	r0, 80139a6 <HAL_RTC_Init+0x86>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8013952:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013954:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8013956:	689a      	ldr	r2, [r3, #8]
 8013958:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 801395c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013960:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013962:	6862      	ldr	r2, [r4, #4]
 8013964:	6899      	ldr	r1, [r3, #8]
 8013966:	4302      	orrs	r2, r0
 8013968:	69a0      	ldr	r0, [r4, #24]
 801396a:	4302      	orrs	r2, r0
 801396c:	430a      	orrs	r2, r1
 801396e:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8013970:	68e2      	ldr	r2, [r4, #12]
 8013972:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8013974:	691a      	ldr	r2, [r3, #16]
 8013976:	68a1      	ldr	r1, [r4, #8]
 8013978:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801397c:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 801397e:	4620      	mov	r0, r4
 8013980:	f7ff ffaa 	bl	80138d8 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8013984:	b978      	cbnz	r0, 80139a6 <HAL_RTC_Init+0x86>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8013986:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8013988:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801398a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801398c:	f022 0203 	bic.w	r2, r2, #3
 8013990:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8013992:	69e2      	ldr	r2, [r4, #28]
 8013994:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013996:	432a      	orrs	r2, r5
 8013998:	430a      	orrs	r2, r1
 801399a:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801399c:	22ff      	movs	r2, #255	; 0xff
 801399e:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 80139a0:	2301      	movs	r3, #1
 80139a2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80139a6:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 80139a8:	2001      	movs	r0, #1
 80139aa:	e7fc      	b.n	80139a6 <HAL_RTC_Init+0x86>

080139ac <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80139ac:	f890 3020 	ldrb.w	r3, [r0, #32]
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	f04f 0302 	mov.w	r3, #2
 80139b6:	d012      	beq.n	80139de <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80139b8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80139bc:	6803      	ldr	r3, [r0, #0]
 80139be:	22ca      	movs	r2, #202	; 0xca
 80139c0:	625a      	str	r2, [r3, #36]	; 0x24
 80139c2:	2253      	movs	r2, #83	; 0x53
 80139c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80139c6:	689a      	ldr	r2, [r3, #8]
 80139c8:	f042 0220 	orr.w	r2, r2, #32
 80139cc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80139ce:	22ff      	movs	r2, #255	; 0xff
 80139d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80139d2:	2301      	movs	r3, #1
 80139d4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80139d8:	2300      	movs	r3, #0
 80139da:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 80139de:	4618      	mov	r0, r3

  return HAL_OK;
}
 80139e0:	4770      	bx	lr

080139e2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80139e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80139e4:	4604      	mov	r4, r0
 80139e6:	2800      	cmp	r0, #0
 80139e8:	d05f      	beq.n	8013aaa <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80139ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d158      	bne.n	8013aa2 <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80139f0:	6842      	ldr	r2, [r0, #4]
 80139f2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80139f6:	d000      	beq.n	80139fa <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80139f8:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80139fa:	2300      	movs	r3, #0
 80139fc:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80139fe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8013a02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013a06:	b923      	cbnz	r3, 8013a12 <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013a08:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f7fd f96d 	bl	8010cec <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013a12:	6825      	ldr	r5, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013a14:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8013a16:	2302      	movs	r3, #2
 8013a18:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8013a1c:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013a1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8013a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a26:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013a28:	f04f 0300 	mov.w	r3, #0
 8013a2c:	d83f      	bhi.n	8013aae <HAL_SPI_Init+0xcc>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013a2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013a32:	d000      	beq.n	8013a36 <HAL_SPI_Init+0x54>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013a34:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013a36:	6863      	ldr	r3, [r4, #4]
 8013a38:	68a6      	ldr	r6, [r4, #8]
 8013a3a:	69a2      	ldr	r2, [r4, #24]
 8013a3c:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8013a40:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8013a44:	4333      	orrs	r3, r6
 8013a46:	6926      	ldr	r6, [r4, #16]
 8013a48:	f006 0602 	and.w	r6, r6, #2
 8013a4c:	4333      	orrs	r3, r6
 8013a4e:	6966      	ldr	r6, [r4, #20]
 8013a50:	f006 0601 	and.w	r6, r6, #1
 8013a54:	4333      	orrs	r3, r6
 8013a56:	f402 7600 	and.w	r6, r2, #512	; 0x200
 8013a5a:	4333      	orrs	r3, r6
 8013a5c:	69e6      	ldr	r6, [r4, #28]
 8013a5e:	f006 0638 	and.w	r6, r6, #56	; 0x38
 8013a62:	4333      	orrs	r3, r6
 8013a64:	6a26      	ldr	r6, [r4, #32]
 8013a66:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8013a6a:	4333      	orrs	r3, r6
 8013a6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a6e:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 8013a72:	4333      	orrs	r3, r6
 8013a74:	602b      	str	r3, [r5, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013a76:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8013a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a7a:	f006 0608 	and.w	r6, r6, #8
 8013a7e:	f003 0310 	and.w	r3, r3, #16
 8013a82:	4333      	orrs	r3, r6
 8013a84:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8013a88:	0c12      	lsrs	r2, r2, #16
 8013a8a:	4319      	orrs	r1, r3
 8013a8c:	f002 0204 	and.w	r2, r2, #4
 8013a90:	430a      	orrs	r2, r1
 8013a92:	4310      	orrs	r0, r2
 8013a94:	6068      	str	r0, [r5, #4]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8013a96:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013a98:	2000      	movs	r0, #0
 8013a9a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013a9c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8013aa0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013aa2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013aa4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013aa8:	e7a7      	b.n	80139fa <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8013aaa:	2001      	movs	r0, #1
 8013aac:	e7f8      	b.n	8013aa0 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013aae:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013ab0:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8013ab4:	e7bd      	b.n	8013a32 <HAL_SPI_Init+0x50>

08013ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aba:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013abe:	4604      	mov	r4, r0
 8013ac0:	460e      	mov	r6, r1
 8013ac2:	4615      	mov	r5, r2
 8013ac4:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013ac6:	6822      	ldr	r2, [r4, #0]
 8013ac8:	69d3      	ldr	r3, [r2, #28]
 8013aca:	ea36 0303 	bics.w	r3, r6, r3
 8013ace:	bf0c      	ite	eq
 8013ad0:	2301      	moveq	r3, #1
 8013ad2:	2300      	movne	r3, #0
 8013ad4:	42ab      	cmp	r3, r5
 8013ad6:	d001      	beq.n	8013adc <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8013ad8:	2000      	movs	r0, #0
 8013ada:	e01a      	b.n	8013b12 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8013adc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8013ae0:	d0f2      	beq.n	8013ac8 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013ae2:	f7fe ff75 	bl	80129d0 <HAL_GetTick>
 8013ae6:	1bc0      	subs	r0, r0, r7
 8013ae8:	4540      	cmp	r0, r8
 8013aea:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013aec:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013aee:	d802      	bhi.n	8013af6 <UART_WaitOnFlagUntilTimeout+0x40>
 8013af0:	f1b8 0f00 	cmp.w	r8, #0
 8013af4:	d10f      	bne.n	8013b16 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013af6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013afa:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013afc:	6883      	ldr	r3, [r0, #8]
 8013afe:	f023 0301 	bic.w	r3, r3, #1
 8013b02:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8013b04:	2320      	movs	r3, #32
 8013b06:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8013b08:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8013b10:	2003      	movs	r0, #3
}
 8013b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013b16:	075a      	lsls	r2, r3, #29
 8013b18:	d5d5      	bpl.n	8013ac6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013b1a:	69c3      	ldr	r3, [r0, #28]
 8013b1c:	051b      	lsls	r3, r3, #20
 8013b1e:	d5d2      	bpl.n	8013ac6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013b20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013b24:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013b26:	6803      	ldr	r3, [r0, #0]
 8013b28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013b2c:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b2e:	6883      	ldr	r3, [r0, #8]
 8013b30:	f023 0301 	bic.w	r3, r3, #1
 8013b34:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8013b36:	2320      	movs	r3, #32
 8013b38:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8013b3a:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013b3c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8013b40:	e7e3      	b.n	8013b0a <UART_WaitOnFlagUntilTimeout+0x54>

08013b42 <HAL_UART_Transmit>:
{
 8013b42:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013b46:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8013b48:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8013b4a:	2b20      	cmp	r3, #32
{
 8013b4c:	4604      	mov	r4, r0
 8013b4e:	460e      	mov	r6, r1
 8013b50:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8013b52:	d14e      	bne.n	8013bf2 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8013b54:	2900      	cmp	r1, #0
 8013b56:	d04a      	beq.n	8013bee <HAL_UART_Transmit+0xac>
 8013b58:	2a00      	cmp	r2, #0
 8013b5a:	d048      	beq.n	8013bee <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8013b5c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8013b60:	2b01      	cmp	r3, #1
 8013b62:	d046      	beq.n	8013bf2 <HAL_UART_Transmit+0xb0>
 8013b64:	2301      	movs	r3, #1
 8013b66:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b6a:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013b6c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b6e:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013b72:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8013b74:	f7fe ff2c 	bl	80129d0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b78:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8013b7a:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b7e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8013b82:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8013b84:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b88:	d103      	bne.n	8013b92 <HAL_UART_Transmit+0x50>
 8013b8a:	6922      	ldr	r2, [r4, #16]
 8013b8c:	b90a      	cbnz	r2, 8013b92 <HAL_UART_Transmit+0x50>
 8013b8e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8013b90:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8013b92:	2200      	movs	r2, #0
 8013b94:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8013b98:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013b9c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8013ba0:	b292      	uxth	r2, r2
 8013ba2:	b93a      	cbnz	r2, 8013bb4 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013ba4:	2140      	movs	r1, #64	; 0x40
 8013ba6:	4620      	mov	r0, r4
 8013ba8:	f7ff ff85 	bl	8013ab6 <UART_WaitOnFlagUntilTimeout>
 8013bac:	b950      	cbnz	r0, 8013bc4 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8013bae:	2320      	movs	r3, #32
 8013bb0:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8013bb2:	e008      	b.n	8013bc6 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	2180      	movs	r1, #128	; 0x80
 8013bb8:	4620      	mov	r0, r4
 8013bba:	9303      	str	r3, [sp, #12]
 8013bbc:	f7ff ff7b 	bl	8013ab6 <UART_WaitOnFlagUntilTimeout>
 8013bc0:	9b03      	ldr	r3, [sp, #12]
 8013bc2:	b118      	cbz	r0, 8013bcc <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8013bc4:	2003      	movs	r0, #3
}
 8013bc6:	b004      	add	sp, #16
 8013bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 8013bcc:	6821      	ldr	r1, [r4, #0]
 8013bce:	b95e      	cbnz	r6, 8013be8 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013bd0:	f835 2b02 	ldrh.w	r2, [r5], #2
 8013bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013bd8:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8013bda:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8013bde:	3a01      	subs	r2, #1
 8013be0:	b292      	uxth	r2, r2
 8013be2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8013be6:	e7d7      	b.n	8013b98 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013be8:	f816 2b01 	ldrb.w	r2, [r6], #1
 8013bec:	e7f4      	b.n	8013bd8 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8013bee:	2001      	movs	r0, #1
 8013bf0:	e7e9      	b.n	8013bc6 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8013bf2:	2002      	movs	r0, #2
 8013bf4:	e7e7      	b.n	8013bc6 <HAL_UART_Transmit+0x84>
	...

08013bf8 <__libc_init_array>:
 8013bf8:	b570      	push	{r4, r5, r6, lr}
 8013bfa:	4d0d      	ldr	r5, [pc, #52]	; (8013c30 <__libc_init_array+0x38>)
 8013bfc:	4c0d      	ldr	r4, [pc, #52]	; (8013c34 <__libc_init_array+0x3c>)
 8013bfe:	1b64      	subs	r4, r4, r5
 8013c00:	10a4      	asrs	r4, r4, #2
 8013c02:	2600      	movs	r6, #0
 8013c04:	42a6      	cmp	r6, r4
 8013c06:	d109      	bne.n	8013c1c <__libc_init_array+0x24>
 8013c08:	4d0b      	ldr	r5, [pc, #44]	; (8013c38 <__libc_init_array+0x40>)
 8013c0a:	4c0c      	ldr	r4, [pc, #48]	; (8013c3c <__libc_init_array+0x44>)
 8013c0c:	f000 f82e 	bl	8013c6c <_init>
 8013c10:	1b64      	subs	r4, r4, r5
 8013c12:	10a4      	asrs	r4, r4, #2
 8013c14:	2600      	movs	r6, #0
 8013c16:	42a6      	cmp	r6, r4
 8013c18:	d105      	bne.n	8013c26 <__libc_init_array+0x2e>
 8013c1a:	bd70      	pop	{r4, r5, r6, pc}
 8013c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c20:	4798      	blx	r3
 8013c22:	3601      	adds	r6, #1
 8013c24:	e7ee      	b.n	8013c04 <__libc_init_array+0xc>
 8013c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c2a:	4798      	blx	r3
 8013c2c:	3601      	adds	r6, #1
 8013c2e:	e7f2      	b.n	8013c16 <__libc_init_array+0x1e>
 8013c30:	08013d08 	.word	0x08013d08
 8013c34:	08013d08 	.word	0x08013d08
 8013c38:	08013d08 	.word	0x08013d08
 8013c3c:	08013d0c 	.word	0x08013d0c

08013c40 <memcpy>:
 8013c40:	440a      	add	r2, r1
 8013c42:	4291      	cmp	r1, r2
 8013c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c48:	d100      	bne.n	8013c4c <memcpy+0xc>
 8013c4a:	4770      	bx	lr
 8013c4c:	b510      	push	{r4, lr}
 8013c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c56:	4291      	cmp	r1, r2
 8013c58:	d1f9      	bne.n	8013c4e <memcpy+0xe>
 8013c5a:	bd10      	pop	{r4, pc}

08013c5c <memset>:
 8013c5c:	4402      	add	r2, r0
 8013c5e:	4603      	mov	r3, r0
 8013c60:	4293      	cmp	r3, r2
 8013c62:	d100      	bne.n	8013c66 <memset+0xa>
 8013c64:	4770      	bx	lr
 8013c66:	f803 1b01 	strb.w	r1, [r3], #1
 8013c6a:	e7f9      	b.n	8013c60 <memset+0x4>

08013c6c <_init>:
 8013c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c6e:	bf00      	nop
 8013c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c72:	bc08      	pop	{r3}
 8013c74:	469e      	mov	lr, r3
 8013c76:	4770      	bx	lr

08013c78 <_fini>:
 8013c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c7a:	bf00      	nop
 8013c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c7e:	bc08      	pop	{r3}
 8013c80:	469e      	mov	lr, r3
 8013c82:	4770      	bx	lr
 8013c84:	0000      	movs	r0, r0
	...
