
STM32L4_IOT_P2P_ClientServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  0800a000  0800a000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003928  0800a188  0800a188  0000a188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800dab0  0800dab0  0000dab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db28  0800db28  00010048  2**0
                  CONTENTS
  4 .ARM          00000000  0800db28  0800db28  00010048  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db28  0800db28  00010048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800db28  0800db28  0000db28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800db30  0800db30  0000db30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800db38  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b34  20000048  0800db80  00010048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  0800db80  00010b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ec8a  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006905  00000000  00000000  0003ed02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000ecd4  00000000  00000000  00045607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  000542e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b70  00000000  00000000  000556f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000301d3  00000000  00000000  00057260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024d6e  00000000  00000000  00087433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109782  00000000  00000000  000ac1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b5923  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003730  00000000  00000000  001b5978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800a188 <__do_global_dtors_aux>:
 800a188:	b510      	push	{r4, lr}
 800a18a:	4c05      	ldr	r4, [pc, #20]	; (800a1a0 <__do_global_dtors_aux+0x18>)
 800a18c:	7823      	ldrb	r3, [r4, #0]
 800a18e:	b933      	cbnz	r3, 800a19e <__do_global_dtors_aux+0x16>
 800a190:	4b04      	ldr	r3, [pc, #16]	; (800a1a4 <__do_global_dtors_aux+0x1c>)
 800a192:	b113      	cbz	r3, 800a19a <__do_global_dtors_aux+0x12>
 800a194:	4804      	ldr	r0, [pc, #16]	; (800a1a8 <__do_global_dtors_aux+0x20>)
 800a196:	f3af 8000 	nop.w
 800a19a:	2301      	movs	r3, #1
 800a19c:	7023      	strb	r3, [r4, #0]
 800a19e:	bd10      	pop	{r4, pc}
 800a1a0:	20000048 	.word	0x20000048
 800a1a4:	00000000 	.word	0x00000000
 800a1a8:	0800da94 	.word	0x0800da94

0800a1ac <frame_dummy>:
 800a1ac:	b508      	push	{r3, lr}
 800a1ae:	4b03      	ldr	r3, [pc, #12]	; (800a1bc <frame_dummy+0x10>)
 800a1b0:	b11b      	cbz	r3, 800a1ba <frame_dummy+0xe>
 800a1b2:	4903      	ldr	r1, [pc, #12]	; (800a1c0 <frame_dummy+0x14>)
 800a1b4:	4803      	ldr	r0, [pc, #12]	; (800a1c4 <frame_dummy+0x18>)
 800a1b6:	f3af 8000 	nop.w
 800a1ba:	bd08      	pop	{r3, pc}
 800a1bc:	00000000 	.word	0x00000000
 800a1c0:	2000004c 	.word	0x2000004c
 800a1c4:	0800da94 	.word	0x0800da94

0800a1c8 <aci_gap_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

#if BLUENRG_MS
tBleStatus aci_gap_init(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800a1c8:	b530      	push	{r4, r5, lr}
 800a1ca:	b08b      	sub	sp, #44	; 0x2c
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a1cc:	ad02      	add	r5, sp, #8
  cp.role = role;
 800a1ce:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 800a1d2:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 800a1d6:	f88d 2006 	strb.w	r2, [sp, #6]
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a1da:	2100      	movs	r1, #0
 800a1dc:	2207      	movs	r2, #7
 800a1de:	4628      	mov	r0, r5
{
 800a1e0:	461c      	mov	r4, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a1e2:	f000 fa7d 	bl	800a6e0 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a1e6:	2218      	movs	r2, #24
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	a804      	add	r0, sp, #16
 800a1ec:	f000 fa78 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800a1f0:	4b14      	ldr	r3, [pc, #80]	; (800a244 <aci_gap_init+0x7c>)
 800a1f2:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
 800a1f4:	ab01      	add	r3, sp, #4
 800a1f6:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	f8ad 301c 	strh.w	r3, [sp, #28]
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a1fe:	2100      	movs	r1, #0
  rq.rlen = GAP_INIT_RP_SIZE;
 800a200:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 800a202:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 800a204:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 800a206:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800a20a:	f001 fc1d 	bl	800ba48 <hci_send_req>
 800a20e:	2800      	cmp	r0, #0
 800a210:	db15      	blt.n	800a23e <aci_gap_init+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800a212:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800a216:	b980      	cbnz	r0, 800a23a <aci_gap_init+0x72>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800a218:	9b02      	ldr	r3, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800a21a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 800a21e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800a222:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800a224:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800a228:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a22c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a22e:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a234:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800a238:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800a23a:	b00b      	add	sp, #44	; 0x2c
 800a23c:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_TIMEOUT;
 800a23e:	20ff      	movs	r0, #255	; 0xff
 800a240:	e7fb      	b.n	800a23a <aci_gap_init+0x72>
 800a242:	bf00      	nop
 800a244:	008a003f 	.word	0x008a003f

0800a248 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800a248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a24a:	b095      	sub	sp, #84	; 0x54
 800a24c:	461f      	mov	r7, r3
 800a24e:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 800a252:	f89d 5074 	ldrb.w	r5, [sp, #116]	; 0x74
 800a256:	f8ad 1006 	strh.w	r1, [sp, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800a25a:	1963      	adds	r3, r4, r5
 800a25c:	2b1a      	cmp	r3, #26
{
 800a25e:	f8ad 2004 	strh.w	r2, [sp, #4]
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800a262:	dc57      	bgt.n	800a314 <aci_gap_set_discoverable+0xcc>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 800a264:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 800a268:	2202      	movs	r2, #2
 800a26a:	f10d 0106 	add.w	r1, sp, #6
 800a26e:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800a272:	f000 fa33 	bl	800a6dc <Osal_MemCpy>
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  Osal_MemCpy(buffer + indx, &AdvIntervMax, 2);
 800a276:	2202      	movs	r2, #2
 800a278:	a901      	add	r1, sp, #4
 800a27a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 800a27e:	f000 fa2d 	bl	800a6dc <Osal_MemCpy>
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 800a282:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 800a286:	991c      	ldr	r1, [sp, #112]	; 0x70
  buffer[indx] = AdvFilterPolicy;
 800a288:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 800a28c:	4622      	mov	r2, r4
 800a28e:	a80c      	add	r0, sp, #48	; 0x30
  buffer[indx] = LocalNameLen;
 800a290:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
  buffer[indx] = OwnAddrType;
 800a294:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 800a298:	f000 fa20 	bl	800a6dc <Osal_MemCpy>
  indx +=  LocalNameLen;
 800a29c:	f104 0308 	add.w	r3, r4, #8
  
  buffer[indx] = ServiceUUIDLen;
 800a2a0:	aa14      	add	r2, sp, #80	; 0x50
 800a2a2:	fa52 f383 	uxtab	r3, r2, r3
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 800a2a6:	ae0a      	add	r6, sp, #40	; 0x28
  indx++;
 800a2a8:	f104 0009 	add.w	r0, r4, #9
 800a2ac:	b2c4      	uxtb	r4, r0

  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800a2ae:	991e      	ldr	r1, [sp, #120]	; 0x78
  buffer[indx] = ServiceUUIDLen;
 800a2b0:	f803 5c28 	strb.w	r5, [r3, #-40]
  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800a2b4:	462a      	mov	r2, r5
 800a2b6:	fa56 f080 	uxtab	r0, r6, r0
 800a2ba:	f000 fa0f 	bl	800a6dc <Osal_MemCpy>
  indx +=  ServiceUUIDLen;  
 800a2be:	1928      	adds	r0, r5, r4
 800a2c0:	b2c4      	uxtb	r4, r0

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMin, 2);
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	a91f      	add	r1, sp, #124	; 0x7c
 800a2c6:	fa56 f080 	uxtab	r0, r6, r0
 800a2ca:	f000 fa07 	bl	800a6dc <Osal_MemCpy>
  indx +=  2;
 800a2ce:	1ca0      	adds	r0, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMax, 2);
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	a920      	add	r1, sp, #128	; 0x80
 800a2d4:	fa56 f080 	uxtab	r0, r6, r0
 800a2d8:	f000 fa00 	bl	800a6dc <Osal_MemCpy>
  indx +=  2;    

  Osal_MemSet(&rq, 0, sizeof(rq));
 800a2dc:	2218      	movs	r2, #24
 800a2de:	2100      	movs	r1, #0
 800a2e0:	a804      	add	r0, sp, #16
 800a2e2:	f000 f9fd 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800a2e6:	4b0d      	ldr	r3, [pc, #52]	; (800a31c <aci_gap_set_discoverable+0xd4>)
 800a2e8:	9304      	str	r3, [sp, #16]
  indx +=  2;    
 800a2ea:	3404      	adds	r4, #4
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 800a2ec:	f10d 030f 	add.w	r3, sp, #15
 800a2f0:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 800a2f2:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800a2f4:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 800a2fa:	9606      	str	r6, [sp, #24]
  rq.clen = indx;
 800a2fc:	f8ad 401c 	strh.w	r4, [sp, #28]
  rq.rlen = 1;
 800a300:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800a304:	f001 fba0 	bl	800ba48 <hci_send_req>
 800a308:	2800      	cmp	r0, #0
 800a30a:	db05      	blt.n	800a318 <aci_gap_set_discoverable+0xd0>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800a30c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    return status;
  }

  return 0;
}
 800a310:	b015      	add	sp, #84	; 0x54
 800a312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800a314:	2042      	movs	r0, #66	; 0x42
 800a316:	e7fb      	b.n	800a310 <aci_gap_set_discoverable+0xc8>
    return BLE_STATUS_TIMEOUT;
 800a318:	20ff      	movs	r0, #255	; 0xff
 800a31a:	e7f9      	b.n	800a310 <aci_gap_set_discoverable+0xc8>
 800a31c:	0083003f 	.word	0x0083003f

0800a320 <aci_gap_set_io_capability>:
    
  return status;
}

tBleStatus aci_gap_set_io_capability(uint8_t io_capability)
{
 800a320:	b500      	push	{lr}
 800a322:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
  gap_set_io_capability_cp cp;
    
  cp.io_capability = io_capability;

  Osal_MemSet(&rq, 0, sizeof(rq));
 800a324:	2218      	movs	r2, #24
  cp.io_capability = io_capability;
 800a326:	f88d 0004 	strb.w	r0, [sp, #4]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a32a:	2100      	movs	r1, #0
 800a32c:	a802      	add	r0, sp, #8
 800a32e:	f000 f9d7 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800a332:	4b0c      	ldr	r3, [pc, #48]	; (800a364 <aci_gap_set_io_capability+0x44>)
 800a334:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_IO_CAPABILITY;
  rq.cparam = &cp;
 800a336:	ab01      	add	r3, sp, #4
 800a338:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.rparam = &status;
 800a33a:	f10d 0207 	add.w	r2, sp, #7
  rq.clen = sizeof(cp);
 800a33e:	2301      	movs	r3, #1
  rq.rlen = 1;
    
  if (hci_send_req(&rq, FALSE) < 0)
 800a340:	2100      	movs	r1, #0
 800a342:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 800a344:	f8ad 3014 	strh.w	r3, [sp, #20]
  rq.rparam = &status;
 800a348:	9206      	str	r2, [sp, #24]
  rq.rlen = 1;
 800a34a:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a34e:	f001 fb7b 	bl	800ba48 <hci_send_req>
 800a352:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
    
  return status;
 800a354:	bfac      	ite	ge
 800a356:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800a35a:	20ff      	movlt	r0, #255	; 0xff
}
 800a35c:	b009      	add	sp, #36	; 0x24
 800a35e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a362:	bf00      	nop
 800a364:	0085003f 	.word	0x0085003f

0800a368 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800a368:	b530      	push	{r4, r5, lr}
 800a36a:	b08f      	sub	sp, #60	; 0x3c
 800a36c:	460d      	mov	r5, r1
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800a36e:	f88d 001c 	strb.w	r0, [sp, #28]
{
 800a372:	4611      	mov	r1, r2
  cp.oob_enable = oob_enable;
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 800a374:	f10d 001e 	add.w	r0, sp, #30
 800a378:	2210      	movs	r2, #16
{
 800a37a:	461c      	mov	r4, r3
  cp.oob_enable = oob_enable;
 800a37c:	f88d 501d 	strb.w	r5, [sp, #29]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 800a380:	f000 f9ac 	bl	800a6dc <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
  cp.max_encryption_key_size = max_encryption_key_size;
 800a384:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800a388:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 800a38c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800a390:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 800a394:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a396:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  Osal_MemSet(&rq, 0, sizeof(rq));
 800a39a:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 800a39c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a3a0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	a801      	add	r0, sp, #4
  cp.min_encryption_key_size = min_encryption_key_size;
 800a3a8:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a3ac:	f000 f998 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800a3b0:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <aci_gap_set_auth_requirement+0x78>)
 800a3b2:	9301      	str	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
  rq.cparam = &cp;
 800a3b4:	ab07      	add	r3, sp, #28
 800a3b6:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 800a3b8:	231a      	movs	r3, #26
 800a3ba:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.rparam = &status;
 800a3be:	f10d 0303 	add.w	r3, sp, #3
 800a3c2:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800a3c4:	2100      	movs	r1, #0
  rq.rlen = 1;
 800a3c6:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800a3c8:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800a3ca:	f8ad 3018 	strh.w	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800a3ce:	f001 fb3b 	bl	800ba48 <hci_send_req>
 800a3d2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800a3d4:	bfac      	ite	ge
 800a3d6:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800a3da:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 800a3dc:	b00f      	add	sp, #60	; 0x3c
 800a3de:	bd30      	pop	{r4, r5, pc}
 800a3e0:	0086003f 	.word	0x0086003f

0800a3e4 <aci_gap_configure_whitelist>:

  return resp.status;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800a3e4:	b500      	push	{lr}
 800a3e6:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a3e8:	2218      	movs	r2, #24
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	a802      	add	r0, sp, #8
 800a3ee:	f000 f977 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800a3f2:	4b0a      	ldr	r3, [pc, #40]	; (800a41c <aci_gap_configure_whitelist+0x38>)
 800a3f4:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GAP_CONFIGURE_WHITELIST;
  rq.rparam = &status;
 800a3f6:	f10d 0307 	add.w	r3, sp, #7
 800a3fa:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a3fc:	2100      	movs	r1, #0
  rq.rlen = 1;
 800a3fe:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800a400:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800a402:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a406:	f001 fb1f 	bl	800ba48 <hci_send_req>
 800a40a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800a40c:	bfac      	ite	ge
 800a40e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800a412:	20ff      	movlt	r0, #255	; 0xff
}
 800a414:	b009      	add	sp, #36	; 0x24
 800a416:	f85d fb04 	ldr.w	pc, [sp], #4
 800a41a:	bf00      	nop
 800a41c:	0092003f 	.word	0x0092003f

0800a420 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800a420:	b500      	push	{lr}
 800a422:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 800a424:	2218      	movs	r2, #24
 800a426:	2100      	movs	r1, #0
 800a428:	a802      	add	r0, sp, #8
 800a42a:	f000 f959 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800a42e:	4b0a      	ldr	r3, [pc, #40]	; (800a458 <aci_gatt_init+0x38>)
 800a430:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
  rq.rparam = &status;
 800a432:	f10d 0307 	add.w	r3, sp, #7
 800a436:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800a438:	2100      	movs	r1, #0
  rq.rlen = 1;
 800a43a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800a43c:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800a43e:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a442:	f001 fb01 	bl	800ba48 <hci_send_req>
 800a446:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800a448:	bfac      	ite	ge
 800a44a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800a44e:	20ff      	movlt	r0, #255	; 0xff
}
 800a450:	b009      	add	sp, #36	; 0x24
 800a452:	f85d fb04 	ldr.w	pc, [sp], #4
 800a456:	bf00      	nop
 800a458:	0101003f 	.word	0x0101003f

0800a45c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800a45c:	b570      	push	{r4, r5, r6, lr}
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 800a45e:	2801      	cmp	r0, #1
{
 800a460:	b08c      	sub	sp, #48	; 0x30
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800a462:	bf0c      	ite	eq
 800a464:	2402      	moveq	r4, #2
 800a466:	2410      	movne	r4, #16
{
 800a468:	4616      	mov	r6, r2
  buffer[indx] = service_uuid_type;
 800a46a:	f88d 0004 	strb.w	r0, [sp, #4]
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 800a46e:	4622      	mov	r2, r4
 800a470:	f10d 0005 	add.w	r0, sp, #5
{
 800a474:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 800a476:	f000 f931 	bl	800a6dc <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800a47a:	ab0c      	add	r3, sp, #48	; 0x30
 800a47c:	4423      	add	r3, r4
    
  buffer[indx] = max_attr_records;
  indx++;
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a47e:	2203      	movs	r2, #3
  buffer[indx] = service_type;
 800a480:	f803 6c2b 	strb.w	r6, [r3, #-43]
  buffer[indx] = max_attr_records;
 800a484:	ab0c      	add	r3, sp, #48	; 0x30
 800a486:	4423      	add	r3, r4
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a488:	2100      	movs	r1, #0
 800a48a:	4668      	mov	r0, sp
  buffer[indx] = max_attr_records;
 800a48c:	f803 5c2a 	strb.w	r5, [r3, #-42]
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a490:	f000 f926 	bl	800a6e0 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 800a494:	2218      	movs	r2, #24
 800a496:	2100      	movs	r1, #0
 800a498:	eb0d 0002 	add.w	r0, sp, r2
 800a49c:	f000 f920 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800a4a0:	4b0e      	ldr	r3, [pc, #56]	; (800a4dc <aci_gatt_add_serv+0x80>)
 800a4a2:	9306      	str	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
 800a4a4:	ab01      	add	r3, sp, #4
 800a4a6:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 800a4a8:	3403      	adds	r4, #3
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800a4aa:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	a806      	add	r0, sp, #24
  rq.clen = indx;
 800a4b0:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800a4b4:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800a4b8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 800a4bc:	f001 fac4 	bl	800ba48 <hci_send_req>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	db09      	blt.n	800a4d8 <aci_gatt_add_serv+0x7c>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800a4c4:	f89d 0000 	ldrb.w	r0, [sp]
 800a4c8:	b920      	cbnz	r0, 800a4d4 <aci_gatt_add_serv+0x78>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 800a4ca:	9b00      	ldr	r3, [sp, #0]
 800a4cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4ce:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800a4d2:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800a4d4:	b00c      	add	sp, #48	; 0x30
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800a4d8:	20ff      	movs	r0, #255	; 0xff
 800a4da:	e7fb      	b.n	800a4d4 <aci_gatt_add_serv+0x78>
 800a4dc:	0102003f 	.word	0x0102003f

0800a4e0 <aci_gatt_add_char>:
           uint8_t secPermissions,
           uint8_t gattEvtMask,
           uint8_t encryKeySize,
           uint8_t isVariable,
           uint16_t* charHandle)                     
{
 800a4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4e2:	b091      	sub	sp, #68	; 0x44
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 800a4e4:	af09      	add	r7, sp, #36	; 0x24
{
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	f8ad 0006 	strh.w	r0, [sp, #6]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	f10d 0106 	add.w	r1, sp, #6
 800a4f4:	4638      	mov	r0, r7
{
 800a4f6:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 800a4f8:	f000 f8f0 	bl	800a6dc <Osal_MemCpy>
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800a4fc:	2c01      	cmp	r4, #1
  buffer[indx] = charUuidType;
 800a4fe:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
    uuid_len = 16;
 800a502:	bf0c      	ite	eq
 800a504:	2402      	moveq	r4, #2
 800a506:	2410      	movne	r4, #16
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 800a508:	4622      	mov	r2, r4
 800a50a:	4631      	mov	r1, r6
 800a50c:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800a510:	f000 f8e4 	bl	800a6dc <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 800a514:	ab10      	add	r3, sp, #64	; 0x40
 800a516:	4423      	add	r3, r4
  indx+=2;
#else
  indx++;
#endif  
    
  buffer[indx] = charProperties;
 800a518:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  buffer[indx] = charValueLen;
 800a51c:	f803 5c19 	strb.w	r5, [r3, #-25]
  buffer[indx] = charProperties;
 800a520:	ab10      	add	r3, sp, #64	; 0x40
 800a522:	4423      	add	r3, r4
  indx++;
    
  buffer[indx] = isVariable;
  indx++;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a524:	ad02      	add	r5, sp, #8
  buffer[indx] = charProperties;
 800a526:	f803 2c18 	strb.w	r2, [r3, #-24]
  buffer[indx] = secPermissions;
 800a52a:	ab10      	add	r3, sp, #64	; 0x40
 800a52c:	4423      	add	r3, r4
 800a52e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 800a532:	f803 2c17 	strb.w	r2, [r3, #-23]
  buffer[indx] = gattEvtMask;
 800a536:	ab10      	add	r3, sp, #64	; 0x40
 800a538:	4423      	add	r3, r4
 800a53a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800a53e:	f803 2c16 	strb.w	r2, [r3, #-22]
  buffer[indx] = encryKeySize;
 800a542:	ab10      	add	r3, sp, #64	; 0x40
 800a544:	4423      	add	r3, r4
 800a546:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800a54a:	f803 2c15 	strb.w	r2, [r3, #-21]
  buffer[indx] = isVariable;
 800a54e:	ab10      	add	r3, sp, #64	; 0x40
 800a550:	4423      	add	r3, r4
 800a552:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800a556:	f803 2c14 	strb.w	r2, [r3, #-20]
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a55a:	2100      	movs	r1, #0
 800a55c:	2203      	movs	r2, #3
 800a55e:	4628      	mov	r0, r5
 800a560:	f000 f8be 	bl	800a6e0 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 800a564:	2218      	movs	r2, #24
 800a566:	2100      	movs	r1, #0
 800a568:	a803      	add	r0, sp, #12
 800a56a:	f000 f8b9 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800a56e:	4b0e      	ldr	r3, [pc, #56]	; (800a5a8 <aci_gatt_add_char+0xc8>)
 800a570:	9303      	str	r3, [sp, #12]
  rq.ocf = OCF_GATT_ADD_CHAR;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800a572:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800a574:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 800a576:	2100      	movs	r1, #0
 800a578:	a803      	add	r0, sp, #12
  rq.cparam = (void *)buffer;
 800a57a:	9705      	str	r7, [sp, #20]
  rq.clen = indx;
 800a57c:	f8ad 4018 	strh.w	r4, [sp, #24]
  rq.rparam = &resp;
 800a580:	9507      	str	r5, [sp, #28]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800a582:	f8ad 3020 	strh.w	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 800a586:	f001 fa5f 	bl	800ba48 <hci_send_req>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	db09      	blt.n	800a5a2 <aci_gatt_add_char+0xc2>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800a58e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800a592:	b920      	cbnz	r0, 800a59e <aci_gatt_add_char+0xbe>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800a594:	9b02      	ldr	r3, [sp, #8]
 800a596:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a598:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800a59c:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800a59e:	b011      	add	sp, #68	; 0x44
 800a5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800a5a2:	20ff      	movs	r0, #255	; 0xff
 800a5a4:	e7fb      	b.n	800a59e <aci_gatt_add_char+0xbe>
 800a5a6:	bf00      	nop
 800a5a8:	0104003f 	.word	0x0104003f

0800a5ac <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
              uint16_t charHandle,
              uint8_t charValOffset,
              uint8_t charValueLen,   
                                      const void *charValue)
{
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	b0ca      	sub	sp, #296	; 0x128
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800a5b0:	2bf9      	cmp	r3, #249	; 0xf9
{
 800a5b2:	4616      	mov	r6, r2
 800a5b4:	461c      	mov	r4, r3
 800a5b6:	f8ad 0006 	strh.w	r0, [sp, #6]
 800a5ba:	f8ad 1004 	strh.w	r1, [sp, #4]
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800a5be:	d82f      	bhi.n	800a620 <aci_gatt_update_char_value+0x74>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 800a5c0:	ad0a      	add	r5, sp, #40	; 0x28
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f10d 0106 	add.w	r1, sp, #6
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	f000 f887 	bl	800a6dc <Osal_MemCpy>
  indx += 2;
    
  charHandle = htobs(charHandle);
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	a901      	add	r1, sp, #4
 800a5d2:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 800a5d6:	f000 f881 	bl	800a6dc <Osal_MemCpy>
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 800a5da:	4622      	mov	r2, r4
 800a5dc:	994e      	ldr	r1, [sp, #312]	; 0x138
  buffer[indx] = charValueLen;
 800a5de:	716c      	strb	r4, [r5, #5]
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 800a5e0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
  buffer[indx] = charValOffset;
 800a5e4:	712e      	strb	r6, [r5, #4]
  indx +=  charValueLen;
 800a5e6:	3406      	adds	r4, #6
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 800a5e8:	f000 f878 	bl	800a6dc <Osal_MemCpy>

  Osal_MemSet(&rq, 0, sizeof(rq));
 800a5ec:	2218      	movs	r2, #24
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	a804      	add	r0, sp, #16
 800a5f2:	f000 f875 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800a5f6:	b2e4      	uxtb	r4, r4
  rq.ogf = OGF_VENDOR_CMD;
 800a5f8:	4b0b      	ldr	r3, [pc, #44]	; (800a628 <aci_gatt_update_char_value+0x7c>)
 800a5fa:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
 800a5fc:	f8ad 401c 	strh.w	r4, [sp, #28]
  rq.rparam = &status;
  rq.rlen = 1;
 800a600:	2301      	movs	r3, #1
  rq.rparam = &status;
 800a602:	f10d 040f 	add.w	r4, sp, #15

  if (hci_send_req(&rq, FALSE) < 0)
 800a606:	2100      	movs	r1, #0
 800a608:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 800a60a:	9506      	str	r5, [sp, #24]
  rq.rparam = &status;
 800a60c:	9408      	str	r4, [sp, #32]
  rq.rlen = 1;
 800a60e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800a612:	f001 fa19 	bl	800ba48 <hci_send_req>
 800a616:	2800      	cmp	r0, #0
 800a618:	db04      	blt.n	800a624 <aci_gatt_update_char_value+0x78>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800a61a:	7820      	ldrb	r0, [r4, #0]
    return status;
  }

  return 0;
}
 800a61c:	b04a      	add	sp, #296	; 0x128
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800a620:	2042      	movs	r0, #66	; 0x42
 800a622:	e7fb      	b.n	800a61c <aci_gatt_update_char_value+0x70>
    return BLE_STATUS_TIMEOUT;
 800a624:	20ff      	movs	r0, #255	; 0xff
 800a626:	e7f9      	b.n	800a61c <aci_gatt_update_char_value+0x70>
 800a628:	0106003f 	.word	0x0106003f

0800a62c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800a62c:	b530      	push	{r4, r5, lr}
 800a62e:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800a630:	2cfd      	cmp	r4, #253	; 0xfd
{
 800a632:	b0c9      	sub	sp, #292	; 0x124
 800a634:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800a636:	d824      	bhi.n	800a682 <aci_hal_write_config_data+0x56>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  Osal_MemCpy(buffer + indx, val, len);
 800a638:	4622      	mov	r2, r4
  buffer[indx] = offset;
 800a63a:	f88d 0020 	strb.w	r0, [sp, #32]
  Osal_MemCpy(buffer + indx, val, len);
 800a63e:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 800a642:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  Osal_MemCpy(buffer + indx, val, len);
 800a646:	f000 f849 	bl	800a6dc <Osal_MemCpy>
  indx +=  len;
 800a64a:	3402      	adds	r4, #2

  Osal_MemSet(&rq, 0, sizeof(rq));
 800a64c:	2218      	movs	r2, #24
 800a64e:	2100      	movs	r1, #0
 800a650:	a802      	add	r0, sp, #8
 800a652:	f000 f845 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800a656:	b2e4      	uxtb	r4, r4
  rq.ogf = OGF_VENDOR_CMD;
 800a658:	4b0c      	ldr	r3, [pc, #48]	; (800a68c <aci_hal_write_config_data+0x60>)
 800a65a:	9302      	str	r3, [sp, #8]
  rq.clen = indx;
 800a65c:	f8ad 4014 	strh.w	r4, [sp, #20]
  rq.rparam = &status;
  rq.rlen = 1;
 800a660:	2301      	movs	r3, #1
  buffer[indx] = offset;
 800a662:	ad08      	add	r5, sp, #32
  rq.rparam = &status;
 800a664:	f10d 0407 	add.w	r4, sp, #7

  if (hci_send_req(&rq, FALSE) < 0)
 800a668:	2100      	movs	r1, #0
 800a66a:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 800a66c:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 800a66e:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 800a670:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a674:	f001 f9e8 	bl	800ba48 <hci_send_req>
 800a678:	2800      	cmp	r0, #0
 800a67a:	db04      	blt.n	800a686 <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;

  return status;
 800a67c:	7820      	ldrb	r0, [r4, #0]
}
 800a67e:	b049      	add	sp, #292	; 0x124
 800a680:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800a682:	2042      	movs	r0, #66	; 0x42
 800a684:	e7fb      	b.n	800a67e <aci_hal_write_config_data+0x52>
    return BLE_STATUS_TIMEOUT;
 800a686:	20ff      	movs	r0, #255	; 0xff
 800a688:	e7f9      	b.n	800a67e <aci_hal_write_config_data+0x52>
 800a68a:	bf00      	nop
 800a68c:	000c003f 	.word	0x000c003f

0800a690 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800a690:	b500      	push	{lr}
 800a692:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  Osal_MemSet(&rq, 0, sizeof(rq));
 800a694:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 800a696:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800a69a:	f88d 1005 	strb.w	r1, [sp, #5]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a69e:	a802      	add	r0, sp, #8
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	f000 f81d 	bl	800a6e0 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800a6a6:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <aci_hal_set_tx_power_level+0x48>)
 800a6a8:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
  rq.cparam = &cp;
 800a6aa:	ab01      	add	r3, sp, #4
 800a6ac:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	f8ad 3014 	strh.w	r3, [sp, #20]
  rq.rparam = &status;
 800a6b4:	f10d 0303 	add.w	r3, sp, #3
 800a6b8:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800a6ba:	2100      	movs	r1, #0
  rq.rlen = 1;
 800a6bc:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800a6be:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800a6c0:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a6c4:	f001 f9c0 	bl	800ba48 <hci_send_req>
 800a6c8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800a6ca:	bfac      	ite	ge
 800a6cc:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800a6d0:	20ff      	movlt	r0, #255	; 0xff
}
 800a6d2:	b009      	add	sp, #36	; 0x24
 800a6d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6d8:	000f003f 	.word	0x000f003f

0800a6dc <Osal_MemCpy>:
 *               buffer
 * @retval Pointer to the destination buffer
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
    return(memcpy(dest,src,size)); 
 800a6dc:	f003 b9c4 	b.w	800da68 <memcpy>

0800a6e0 <Osal_MemSet>:
 * @param  size : Number of bytes to be set to "value"
 * @retval Pointer to the filled block of memory
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
    return(memset(ptr,value,size));
 800a6e0:	f003 b9d0 	b.w	800da84 <memset>

0800a6e4 <LBS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void LBS_STM_Init(void)
{
 800a6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t uuid;
  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 800a6e8:	485f      	ldr	r0, [pc, #380]	; (800a868 <LBS_STM_Init+0x184>)

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  	  uuid = testingtest_SVC_UUID;
      aci_gatt_add_serv(UUID_TYPE_16,
 800a6ea:	4d60      	ldr	r5, [pc, #384]	; (800a86c <LBS_STM_Init+0x188>)
{
 800a6ec:	b088      	sub	sp, #32
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 800a6ee:	f000 f959 	bl	800a9a4 <SVCCTL_RegisterSvcHandler>
      aci_gatt_add_serv(UUID_TYPE_16,
 800a6f2:	2201      	movs	r2, #1
  	  uuid = testingtest_SVC_UUID;
 800a6f4:	f641 2331 	movw	r3, #6705	; 0x1a31
 800a6f8:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_serv(UUID_TYPE_16,
 800a6fc:	f10d 011e 	add.w	r1, sp, #30
 800a700:	9500      	str	r5, [sp, #0]
 800a702:	230e      	movs	r3, #14
 800a704:	4610      	mov	r0, r2
 800a706:	f7ff fea9 	bl	800a45c <aci_gatt_add_serv>
                        (const uint8_t *) &uuid,
                        PRIMARY_SERVICE,
                        14,
                        &(testingtestContext.testing_Svc_Hdle));

      uuid = testingtest_SSID_UUID;
 800a70a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800a70e:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 800a712:	462b      	mov	r3, r5
 800a714:	2401      	movs	r4, #1
 800a716:	f833 0b02 	ldrh.w	r0, [r3], #2
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	270a      	movs	r7, #10
 800a71e:	f04f 0806 	mov.w	r8, #6
 800a722:	2600      	movs	r6, #0
 800a724:	231e      	movs	r3, #30
 800a726:	eb0d 0203 	add.w	r2, sp, r3
 800a72a:	4621      	mov	r1, r4
 800a72c:	e9cd 7403 	strd	r7, r4, [sp, #12]
 800a730:	e9cd 8600 	strd	r8, r6, [sp]
 800a734:	9402      	str	r4, [sp, #8]
 800a736:	f7ff fed3 	bl	800a4e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_SSID_Hdle));

      uuid = testingtest_PW_UUID;
 800a73a:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 800a73e:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 800a742:	462b      	mov	r3, r5
 800a744:	4621      	mov	r1, r4
 800a746:	f833 0b04 	ldrh.w	r0, [r3], #4
 800a74a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800a74e:	231e      	movs	r3, #30
 800a750:	eb0d 0203 	add.w	r2, sp, r3
 800a754:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800a758:	e9cd 8600 	strd	r8, r6, [sp]
 800a75c:	f7ff fec0 	bl	800a4e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_PW_Hdle));

      uuid = testingtest_NAME_UUID;
 800a760:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 800a764:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 800a768:	462b      	mov	r3, r5
 800a76a:	4621      	mov	r1, r4
 800a76c:	f833 0b06 	ldrh.w	r0, [r3], #6
 800a770:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800a774:	231e      	movs	r3, #30
 800a776:	eb0d 0203 	add.w	r2, sp, r3
 800a77a:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800a77e:	e9cd 8600 	strd	r8, r6, [sp]
 800a782:	f7ff fead 	bl	800a4e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_NAME_Hdle));

      uuid = testingtest_IP_UUID;
 800a786:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800a78a:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 800a78e:	462b      	mov	r3, r5
 800a790:	f10d 021e 	add.w	r2, sp, #30
 800a794:	f833 0b08 	ldrh.w	r0, [r3], #8
 800a798:	4621      	mov	r1, r4
 800a79a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800a79e:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800a7a2:	e9cd 8600 	strd	r8, r6, [sp]
 800a7a6:	2304      	movs	r3, #4
 800a7a8:	f7ff fe9a 	bl	800a4e0 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_IP_Hdle));

      uuid = testingtest_OP_UUID;
 800a7ac:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800a7b0:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	f10d 021e 	add.w	r2, sp, #30
 800a7ba:	f833 0b0a 	ldrh.w	r0, [r3], #10
 800a7be:	4621      	mov	r1, r4
 800a7c0:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800a7c4:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800a7c8:	e9cd 8600 	strd	r8, r6, [sp]
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	f7ff fe87 	bl	800a4e0 <aci_gatt_add_char>
                            ATTR_PERMISSION_NONE,
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_OP_Hdle));
      uuid = testingtest_Save_UUID;
 800a7d2:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 800a7d6:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 800a7da:	462b      	mov	r3, r5
 800a7dc:	f10d 021e 	add.w	r2, sp, #30
 800a7e0:	f833 0b0c 	ldrh.w	r0, [r3], #12
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800a7ea:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800a7ee:	4623      	mov	r3, r4
 800a7f0:	e9cd 8600 	strd	r8, r6, [sp]
 800a7f4:	f7ff fe74 	bl	800a4e0 <aci_gatt_add_char>
      //aci_gatt_write_charac_value(conn_handle, attr_handle, value_len, attr_value)

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    uuid = LED_BUTTON_SERVICE_UUID;
 800a7f8:	f641 2330 	movw	r3, #6704	; 0x1a30
 800a7fc:	f8ad 301e 	strh.w	r3, [sp, #30]
    aci_gatt_add_serv(UUID_TYPE_16,
 800a800:	f105 030e 	add.w	r3, r5, #14
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	4622      	mov	r2, r4
 800a808:	4643      	mov	r3, r8
 800a80a:	f10d 011e 	add.w	r1, sp, #30
 800a80e:	4620      	mov	r0, r4
 800a810:	f7ff fe24 	bl	800a45c <aci_gatt_add_serv>
                      &(aLedButtonContext.LedButtonSvcHdle));

    /**
     *  Add LED Characteristic
     */
    uuid = LED_CHAR_UUID;
 800a814:	f642 3350 	movw	r3, #11088	; 0x2b50
 800a818:	f8ad 301e 	strh.w	r3, [sp, #30]
   
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 800a81c:	f105 0310 	add.w	r3, r5, #16
 800a820:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800a824:	f10d 021e 	add.w	r2, sp, #30
 800a828:	4621      	mov	r1, r4
 800a82a:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800a82e:	e9cd 8600 	strd	r8, r6, [sp]
 800a832:	89e8      	ldrh	r0, [r5, #14]
 800a834:	2302      	movs	r3, #2
 800a836:	f7ff fe53 	bl	800a4e0 <aci_gatt_add_char>
                      &(aLedButtonContext.LedsCharHdle));

    /**
     *   Add Button Characteristic
     */
    uuid = BUTTON_CHAR_UUID;
 800a83a:	f642 3351 	movw	r3, #11089	; 0x2b51
 800a83e:	f8ad 301e 	strh.w	r3, [sp, #30]
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 800a842:	f105 0312 	add.w	r3, r5, #18
 800a846:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800a84a:	2310      	movs	r3, #16
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	e9cd 4702 	strd	r4, r7, [sp, #8]
 800a852:	89e8      	ldrh	r0, [r5, #14]
 800a854:	9601      	str	r6, [sp, #4]
 800a856:	2302      	movs	r3, #2
 800a858:	f10d 021e 	add.w	r2, sp, #30
 800a85c:	4621      	mov	r1, r4
 800a85e:	f7ff fe3f 	bl	800a4e0 <aci_gatt_add_char>
    
    APPL_MESG_DBG("-- Led Button Service (LBS) is added Successfully %04X\n", 
                 aLedButtonContext.LedButtonSvcHdle);

  return;
}
 800a862:	b008      	add	sp, #32
 800a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a868:	0800a899 	.word	0x0800a899
 800a86c:	20000064 	.word	0x20000064

0800a870 <BLE_SVC_LedButton_Update_Char>:
 * 
 */
tBleStatus BLE_SVC_LedButton_Update_Char(uint16_t UUID, uint8_t *pPayload) //LED_BUTTON_Data_t *pDataValue)
{
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 800a870:	f642 3351 	movw	r3, #11089	; 0x2b51
 800a874:	4298      	cmp	r0, r3
{
 800a876:	b507      	push	{r0, r1, r2, lr}
  switch(UUID)
 800a878:	d10a      	bne.n	800a890 <BLE_SVC_LedButton_Update_Char+0x20>
  {
    case BUTTON_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aLedButtonContext.LedButtonSvcHdle,
 800a87a:	4806      	ldr	r0, [pc, #24]	; (800a894 <BLE_SVC_LedButton_Update_Char+0x24>)
 800a87c:	9100      	str	r1, [sp, #0]
 800a87e:	8a41      	ldrh	r1, [r0, #18]
 800a880:	89c0      	ldrh	r0, [r0, #14]
 800a882:	2302      	movs	r3, #2
 800a884:	2200      	movs	r2, #0
 800a886:	f7ff fe91 	bl	800a5ac <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}/* end LBS_STM_Init() */
 800a88a:	b003      	add	sp, #12
 800a88c:	f85d fb04 	ldr.w	pc, [sp], #4
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800a890:	2042      	movs	r0, #66	; 0x42
 800a892:	e7fa      	b.n	800a88a <BLE_SVC_LedButton_Update_Char+0x1a>
 800a894:	20000064 	.word	0x20000064

0800a898 <LedButton_Event_Handler>:
{
 800a898:	b530      	push	{r4, r5, lr}
  switch(event_pckt->evt)
 800a89a:	7843      	ldrb	r3, [r0, #1]
 800a89c:	2bff      	cmp	r3, #255	; 0xff
{
 800a89e:	b085      	sub	sp, #20
 800a8a0:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 800a8a2:	d172      	bne.n	800a98a <LedButton_Event_Handler+0xf2>
      switch(blue_evt->ecode)
 800a8a4:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800a8a8:	f640 4301 	movw	r3, #3073	; 0xc01
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d16c      	bne.n	800a98a <LedButton_Event_Handler+0xf2>
            if(attribute_modified->attr_handle == (testingtestContext.testing_SSID_Hdle + 1))
 800a8b0:	4d37      	ldr	r5, [pc, #220]	; (800a990 <LedButton_Event_Handler+0xf8>)
 800a8b2:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 800a8b6:	886b      	ldrh	r3, [r5, #2]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d10b      	bne.n	800a8d6 <LedButton_Event_Handler+0x3e>
                          Notification.LBS_Evt_Opcode = POTATO_SSID_EVT;
 800a8be:	2304      	movs	r3, #4
 800a8c0:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 800a8c4:	7a43      	ldrb	r3, [r0, #9]
 800a8c6:	f88d 3008 	strb.w	r3, [sp, #8]
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 800a8ca:	f100 030c 	add.w	r3, r0, #12
                          LBS_App_Notification(&Notification);
 800a8ce:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 800a8d0:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 800a8d2:	f001 fc89 	bl	800c1e8 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_PW_Hdle + 1))
 800a8d6:	88ab      	ldrh	r3, [r5, #4]
 800a8d8:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d10b      	bne.n	800a8fa <LedButton_Event_Handler+0x62>
                          Notification.LBS_Evt_Opcode = POTATO_PW_EVT;
 800a8e2:	2305      	movs	r3, #5
 800a8e4:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 800a8e8:	7a63      	ldrb	r3, [r4, #9]
 800a8ea:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 800a8ee:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 800a8f0:	f104 030c 	add.w	r3, r4, #12
 800a8f4:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 800a8f6:	f001 fc77 	bl	800c1e8 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_NAME_Hdle + 1))
 800a8fa:	88eb      	ldrh	r3, [r5, #6]
 800a8fc:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 800a900:	3301      	adds	r3, #1
 800a902:	429a      	cmp	r2, r3
 800a904:	d10b      	bne.n	800a91e <LedButton_Event_Handler+0x86>
                          Notification.LBS_Evt_Opcode = POTATO_NAME_EVT;
 800a906:	2306      	movs	r3, #6
 800a908:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 800a90c:	7a63      	ldrb	r3, [r4, #9]
 800a90e:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 800a912:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 800a914:	f104 030c 	add.w	r3, r4, #12
 800a918:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 800a91a:	f001 fc65 	bl	800c1e8 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_IP_Hdle + 1))
 800a91e:	892b      	ldrh	r3, [r5, #8]
 800a920:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 800a924:	3301      	adds	r3, #1
 800a926:	429a      	cmp	r2, r3
 800a928:	d10b      	bne.n	800a942 <LedButton_Event_Handler+0xaa>
                          Notification.LBS_Evt_Opcode = POTATO_IP_EVT;
 800a92a:	2307      	movs	r3, #7
 800a92c:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 800a930:	7a63      	ldrb	r3, [r4, #9]
 800a932:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 800a936:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 800a938:	f104 030c 	add.w	r3, r4, #12
 800a93c:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 800a93e:	f001 fc53 	bl	800c1e8 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_OP_Hdle + 1))
 800a942:	896b      	ldrh	r3, [r5, #10]
 800a944:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 800a948:	3301      	adds	r3, #1
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d10b      	bne.n	800a966 <LedButton_Event_Handler+0xce>
                          Notification.LBS_Evt_Opcode = POTATO_OP_EVT;
 800a94e:	2308      	movs	r3, #8
 800a950:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 800a954:	7a63      	ldrb	r3, [r4, #9]
 800a956:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 800a95a:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 800a95c:	f104 030c 	add.w	r3, r4, #12
 800a960:	9301      	str	r3, [sp, #4]
                          LBS_App_Notification(&Notification);
 800a962:	f001 fc41 	bl	800c1e8 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_Save_Hdle + 1))
 800a966:	89ab      	ldrh	r3, [r5, #12]
 800a968:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 800a96c:	3301      	adds	r3, #1
 800a96e:	429a      	cmp	r2, r3
 800a970:	d10b      	bne.n	800a98a <LedButton_Event_Handler+0xf2>
                          Notification.LBS_Evt_Opcode = POTATO_SAVE_EVT;
 800a972:	2309      	movs	r3, #9
 800a974:	f88d 3000 	strb.w	r3, [sp]
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 800a978:	340c      	adds	r4, #12
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 800a97a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 800a97e:	f88d 3008 	strb.w	r3, [sp, #8]
                          LBS_App_Notification(&Notification);
 800a982:	4668      	mov	r0, sp
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 800a984:	9401      	str	r4, [sp, #4]
                          LBS_App_Notification(&Notification);
 800a986:	f001 fc2f 	bl	800c1e8 <LBS_App_Notification>
}/* end SVCCTL_EvtAckStatus_t */
 800a98a:	2000      	movs	r0, #0
 800a98c:	b005      	add	sp, #20
 800a98e:	bd30      	pop	{r4, r5, pc}
 800a990:	20000064 	.word	0x20000064

0800a994 <DIS_Init>:
/* Fake __Weak functions ------------------------------------------------------*/
/* This is a dirty trick to avoid putting compilation flags to say which service are included */	
/* If the related service is added in the project space its Init function will be used */
/* Otherwise the dummy __Weak function allow to avoid the compilatio error */

__weak void DIS_Init(uint16_t *p_options) {}
 800a994:	4770      	bx	lr

0800a996 <HRS_Init>:
__weak void HRS_Init(void) {}
 800a996:	4770      	bx	lr

0800a998 <ANS_Init>:
 800a998:	4770      	bx	lr

0800a99a <HIDS_Init>:
 800a99a:	4770      	bx	lr

0800a99c <HPS_Init>:
 800a99c:	4770      	bx	lr

0800a99e <IPSS_Init>:
 800a99e:	4770      	bx	lr

0800a9a0 <LNS_Init>:
 800a9a0:	4770      	bx	lr

0800a9a2 <SCPS_Init>:
 800a9a2:	4770      	bx	lr

0800a9a4 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler(SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler)
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a9a4:	4a03      	ldr	r2, [pc, #12]	; (800a9b4 <SVCCTL_RegisterSvcHandler+0x10>)
 800a9a6:	7a13      	ldrb	r3, [r2, #8]
 800a9a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	7213      	strb	r3, [r2, #8]

  return;
}
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	20000b00 	.word	0x20000b00

0800a9b8 <SVCCTL_HCI_UserEvtRx>:

  return;
}

void SVCCTL_HCI_UserEvtRx(void *pckt)
{
 800a9b8:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch(event_pckt->evt)
 800a9ba:	7843      	ldrb	r3, [r0, #1]
 800a9bc:	2bff      	cmp	r3, #255	; 0xff
{
 800a9be:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 800a9c0:	d004      	beq.n	800a9cc <SVCCTL_HCI_UserEvtRx+0x14>
  {
    /**
     *  The event has NOT been managed.
     *  It shall be passed to the application for processing
     */
    SVCCTL_App_Notification(pckt);
 800a9c2:	4620      	mov	r0, r4

  }

  return;
}
 800a9c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SVCCTL_App_Notification(pckt);
 800a9c8:	f001 bb9e 	b.w	800c108 <SVCCTL_App_Notification>
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a9cc:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800a9d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a9d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9d8:	d1f3      	bne.n	800a9c2 <SVCCTL_HCI_UserEvtRx+0xa>
          for(index = 0; index <SVCCTL_EvtHandler.NbreOfRegisteredHandler ; index++)
 800a9da:	4e0d      	ldr	r6, [pc, #52]	; (800aa10 <SVCCTL_HCI_UserEvtRx+0x58>)
 800a9dc:	2500      	movs	r5, #0
 800a9de:	7a32      	ldrb	r2, [r6, #8]
 800a9e0:	b2eb      	uxtb	r3, r5
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d906      	bls.n	800a9f4 <SVCCTL_HCI_UserEvtRx+0x3c>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a9e6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a9ee:	3501      	adds	r5, #1
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d0f4      	beq.n	800a9de <SVCCTL_HCI_UserEvtRx+0x26>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler ; index++)
 800a9f4:	4e07      	ldr	r6, [pc, #28]	; (800aa14 <SVCCTL_HCI_UserEvtRx+0x5c>)
 800a9f6:	2500      	movs	r5, #0
 800a9f8:	7a32      	ldrb	r2, [r6, #8]
 800a9fa:	b2eb      	uxtb	r3, r5
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d9e0      	bls.n	800a9c2 <SVCCTL_HCI_UserEvtRx+0xa>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800aa00:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800aa04:	4620      	mov	r0, r4
 800aa06:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 800aa08:	3501      	adds	r5, #1
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d0f4      	beq.n	800a9f8 <SVCCTL_HCI_UserEvtRx+0x40>
}
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
 800aa10:	20000b00 	.word	0x20000b00
 800aa14:	20000af4 	.word	0x20000af4

0800aa18 <SVCCTL_GetBdAddress>:
           instead of using the harcoded value in the config.h
  */
__weak const uint8_t* SVCCTL_GetBdAddress( void )
{
  return M_bd_addr;
}
 800aa18:	4800      	ldr	r0, [pc, #0]	; (800aa1c <SVCCTL_GetBdAddress+0x4>)
 800aa1a:	4770      	bx	lr
 800aa1c:	0800dab0 	.word	0x0800dab0

0800aa20 <SVCCTL_Init>:
{
 800aa20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const uint8_t mode = BLE_CFG_DATA_ROLE_MODE;
 800aa22:	2304      	movs	r3, #4
 800aa24:	f88d 3009 	strb.w	r3, [sp, #9]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800aa28:	4b1f      	ldr	r3, [pc, #124]	; (800aaa8 <SVCCTL_Init+0x88>)
 800aa2a:	2400      	movs	r4, #0
 800aa2c:	721c      	strb	r4, [r3, #8]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800aa2e:	4b1f      	ldr	r3, [pc, #124]	; (800aaac <SVCCTL_Init+0x8c>)
 800aa30:	721c      	strb	r4, [r3, #8]
  bd_addr = SVCCTL_GetBdAddress();
 800aa32:	f7ff fff1 	bl	800aa18 <SVCCTL_GetBdAddress>
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800aa36:	2106      	movs	r1, #6
  bd_addr = SVCCTL_GetBdAddress();
 800aa38:	4602      	mov	r2, r0
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f7ff fdf6 	bl	800a62c <aci_hal_write_config_data>
  aci_hal_write_config_data(CONFIG_DATA_MODE_OFFSET,
 800aa40:	f10d 0209 	add.w	r2, sp, #9
 800aa44:	2101      	movs	r1, #1
 800aa46:	202d      	movs	r0, #45	; 0x2d
 800aa48:	f7ff fdf0 	bl	800a62c <aci_hal_write_config_data>
  aci_gatt_init();
 800aa4c:	f7ff fce8 	bl	800a420 <aci_gatt_init>
    aci_gap_init(role,
 800aa50:	f10d 030e 	add.w	r3, sp, #14
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	ab03      	add	r3, sp, #12
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	f10d 030a 	add.w	r3, sp, #10
 800aa60:	2207      	movs	r2, #7
 800aa62:	2001      	movs	r0, #1
 800aa64:	f7ff fbb0 	bl	800a1c8 <aci_gap_init>
    if(aci_gatt_update_char_value(gap_service_handle,
 800aa68:	4b11      	ldr	r3, [pc, #68]	; (800aab0 <SVCCTL_Init+0x90>)
 800aa6a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	4622      	mov	r2, r4
 800aa72:	2307      	movs	r3, #7
 800aa74:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800aa78:	f7ff fd98 	bl	800a5ac <aci_gatt_update_char_value>
  HRS_Init();
 800aa7c:	f7ff ff8b 	bl	800a996 <HRS_Init>
  DIS_Init(NULL);
 800aa80:	4620      	mov	r0, r4
 800aa82:	f7ff ff87 	bl	800a994 <DIS_Init>
  SCPS_Init();
 800aa86:	f7ff ff8c 	bl	800a9a2 <SCPS_Init>
  ANS_Init();
 800aa8a:	f7ff ff85 	bl	800a998 <ANS_Init>
HIDS_Init();
 800aa8e:	f7ff ff84 	bl	800a99a <HIDS_Init>
LNS_Init();
 800aa92:	f7ff ff85 	bl	800a9a0 <LNS_Init>
IPSS_Init();
 800aa96:	f7ff ff82 	bl	800a99e <IPSS_Init>
HPS_Init();
 800aa9a:	f7ff ff7f 	bl	800a99c <HPS_Init>
BLESVC_InitCustomSvc();
 800aa9e:	f001 fb62 	bl	800c166 <BLESVC_InitCustomSvc>
}
 800aaa2:	b004      	add	sp, #16
 800aaa4:	bd10      	pop	{r4, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000b00 	.word	0x20000b00
 800aaac:	20000af4 	.word	0x20000af4
 800aab0:	0800db20 	.word	0x0800db20

0800aab4 <HW_SleepMode>:
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800aab4:	4a03      	ldr	r2, [pc, #12]	; (800aac4 <HW_SleepMode+0x10>)
 800aab6:	6913      	ldr	r3, [r2, #16]
 800aab8:	f023 0304 	bic.w	r3, r3, #4
 800aabc:	6113      	str	r3, [r2, #16]
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 800aabe:	bf30      	wfi

  return;
}
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	e000ed00 	.word	0xe000ed00

0800aac8 <HW_StopMode>:
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800aac8:	4a06      	ldr	r2, [pc, #24]	; (800aae4 <HW_StopMode+0x1c>)
 800aaca:	6813      	ldr	r3, [r2, #0]
 800aacc:	f023 0307 	bic.w	r3, r3, #7
 800aad0:	4318      	orrs	r0, r3
 800aad2:	6010      	str	r0, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800aad4:	4a04      	ldr	r2, [pc, #16]	; (800aae8 <HW_StopMode+0x20>)
 800aad6:	6913      	ldr	r3, [r2, #16]
 800aad8:	f043 0304 	orr.w	r3, r3, #4
 800aadc:	6113      	str	r3, [r2, #16]
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 800aade:	bf30      	wfi

  return;
}
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	40007000 	.word	0x40007000
 800aae8:	e000ed00 	.word	0xe000ed00

0800aaec <HW_OffMode>:
 800aaec:	f7ff bfec 	b.w	800aac8 <HW_StopMode>

0800aaf0 <pf_nRFResetTimerCallBack>:
 * @param  None
 * @retval None
 */
static void pf_nRFResetTimerCallBack(void)
{
  RfResetTimerLock = 0;
 800aaf0:	4b01      	ldr	r3, [pc, #4]	; (800aaf8 <pf_nRFResetTimerCallBack+0x8>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	701a      	strb	r2, [r3, #0]

  return;
}
 800aaf6:	4770      	bx	lr
 800aaf8:	20000078 	.word	0x20000078

0800aafc <TimerTxRxCallback>:
 * @param  None
 * @retval None
 */
static void TimerTxRxCallback(void)
{
  pTimerTxRxCallback();
 800aafc:	4b01      	ldr	r3, [pc, #4]	; (800ab04 <TimerTxRxCallback+0x8>)
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	4718      	bx	r3
 800ab02:	bf00      	nop
 800ab04:	20000078 	.word	0x20000078

0800ab08 <Enable_SPI_CS>:
 * @retval None
 */
static void Enable_SPI_CS(void)
{
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 800ab08:	4802      	ldr	r0, [pc, #8]	; (800ab14 <Enable_SPI_CS+0xc>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ab10:	f002 ba86 	b.w	800d020 <HAL_GPIO_WritePin>
 800ab14:	48000c00 	.word	0x48000c00

0800ab18 <Disable_SPI_CS>:
 * @param  None
 * @retval None
 */
static void Disable_SPI_CS(void)
{
  while (__HAL_SPI_GET_FLAG(&SpiHandle,SPI_FLAG_BSY) == SET);
 800ab18:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <Disable_SPI_CS+0x18>)
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	6893      	ldr	r3, [r2, #8]
 800ab1e:	061b      	lsls	r3, r3, #24
 800ab20:	d4fc      	bmi.n	800ab1c <Disable_SPI_CS+0x4>

  /* CS set */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 800ab22:	4804      	ldr	r0, [pc, #16]	; (800ab34 <Disable_SPI_CS+0x1c>)
 800ab24:	2201      	movs	r2, #1
 800ab26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ab2a:	f002 ba79 	b.w	800d020 <HAL_GPIO_WritePin>
 800ab2e:	bf00      	nop
 800ab30:	20000078 	.word	0x20000078
 800ab34:	48000c00 	.word	0x48000c00

0800ab38 <DisableEnable_SPI_CS>:
 * @brief  Disable and Enable SPI CS.
 * @param  None
 * @retval None
 */
static void DisableEnable_SPI_CS(void)
{
 800ab38:	b508      	push	{r3, lr}
  uint8_t localloop;
  Disable_SPI_CS(); /**< CS Set */
 800ab3a:	f7ff ffed 	bl	800ab18 <Disable_SPI_CS>
 800ab3e:	230d      	movs	r3, #13

  /* CS set */
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
  {
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 800ab40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ab44:	3b01      	subs	r3, #1
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 800ab46:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 800ab4a:	6811      	ldr	r1, [r2, #0]
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 800ab4c:	d1fa      	bne.n	800ab44 <DisableEnable_SPI_CS+0xc>
  }

  Enable_SPI_CS(); /**< CS Reset */

  return;
}
 800ab4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Enable_SPI_CS(); /**< CS Reset */
 800ab52:	f7ff bfd9 	b.w	800ab08 <Enable_SPI_CS>
	...

0800ab58 <Enable_SPI_Receiving_Path>:
{  
 800ab58:	b538      	push	{r3, r4, r5, lr}
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 800ab5a:	4c09      	ldr	r4, [pc, #36]	; (800ab80 <Enable_SPI_Receiving_Path+0x28>)
 800ab5c:	2540      	movs	r5, #64	; 0x40
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 800ab5e:	2017      	movs	r0, #23
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 800ab60:	6165      	str	r5, [r4, #20]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 800ab62:	f001 ff7d 	bl	800ca60 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
 800ab66:	2017      	movs	r0, #23
 800ab68:	f001 ff48 	bl	800c9fc <HAL_NVIC_EnableIRQ>
  if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_SET)
 800ab6c:	4805      	ldr	r0, [pc, #20]	; (800ab84 <Enable_SPI_Receiving_Path+0x2c>)
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f002 fa50 	bl	800d014 <HAL_GPIO_ReadPin>
 800ab74:	2801      	cmp	r0, #1
    __HAL_GPIO_EXTI_GENERATE_SWIT(BNRG_SPI_IRQ_PIN);
 800ab76:	bf02      	ittt	eq
 800ab78:	6923      	ldreq	r3, [r4, #16]
 800ab7a:	432b      	orreq	r3, r5
 800ab7c:	6123      	streq	r3, [r4, #16]
}
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	40010400 	.word	0x40010400
 800ab84:	48001000 	.word	0x48001000

0800ab88 <LL_DMA_SetDataLength.constprop.0>:
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800ab88:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <LL_DMA_SetDataLength.constprop.0+0x18>)
 800ab8a:	5c1a      	ldrb	r2, [r3, r0]
 800ab8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ab90:	f502 3201 	add.w	r2, r2, #132096	; 0x20400
 800ab94:	6853      	ldr	r3, [r2, #4]
 800ab96:	0c1b      	lsrs	r3, r3, #16
 800ab98:	041b      	lsls	r3, r3, #16
 800ab9a:	4319      	orrs	r1, r3
 800ab9c:	6051      	str	r1, [r2, #4]
             DMA_CNDTR_NDT, NbData);
}
 800ab9e:	4770      	bx	lr
 800aba0:	0800dab6 	.word	0x0800dab6

0800aba4 <ReceiveHeader>:
 *               the configuration information for SPI module.
 * @param  DataHeader: buffer holding the header to receive
 * @retval None
 */
static void ReceiveHeader(SPI_RECEIVE_EVENT_t ReceiveEvent, uint8_t * DataHeader)
{
 800aba4:	b570      	push	{r4, r5, r6, lr}
  SpiContext.SpiReceiveContext.SpiReceiveEvent = ReceiveEvent;
 800aba6:	4c0b      	ldr	r4, [pc, #44]	; (800abd4 <ReceiveHeader+0x30>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800aba8:	4d0b      	ldr	r5, [pc, #44]	; (800abd8 <ReceiveHeader+0x34>)
 800abaa:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb4:	602b      	str	r3, [r5, #0]
{
 800abb6:	460e      	mov	r6, r1
  LL_DMA_SetMemoryIncMode(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, LL_DMA_MEMORY_INCREMENT);  /**< Configure DMA to send Tx packet */

  /*
   *  Set counter in both DMA
   */
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, HEADER_SIZE);
 800abb8:	2001      	movs	r0, #1
 800abba:	2105      	movs	r1, #5
 800abbc:	f7ff ffe4 	bl	800ab88 <LL_DMA_SetDataLength.constprop.0>
  LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, HEADER_SIZE);
 800abc0:	2105      	movs	r1, #5
 800abc2:	2000      	movs	r0, #0
 800abc4:	f7ff ffe0 	bl	800ab88 <LL_DMA_SetDataLength.constprop.0>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800abc8:	4b04      	ldr	r3, [pc, #16]	; (800abdc <ReceiveHeader+0x38>)

  /*
   *  Set memory address in both DMA
   */
  LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)ReceivedHeader);
 800abca:	348c      	adds	r4, #140	; 0x8c
 800abcc:	60dc      	str	r4, [r3, #12]
 800abce:	60ee      	str	r6, [r5, #12]
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)DataHeader);

  return;
}
 800abd0:	bd70      	pop	{r4, r5, r6, pc}
 800abd2:	bf00      	nop
 800abd4:	20000078 	.word	0x20000078
 800abd8:	4002041c 	.word	0x4002041c
 800abdc:	40020408 	.word	0x40020408

0800abe0 <SPI_Receive_Manager>:
{
 800abe0:	b570      	push	{r4, r5, r6, lr}
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 800abe2:	4c36      	ldr	r4, [pc, #216]	; (800acbc <SPI_Receive_Manager+0xdc>)
 800abe4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800abe6:	6812      	ldr	r2, [r2, #0]
 800abe8:	6811      	ldr	r1, [r2, #0]
 800abea:	f021 0101 	bic.w	r1, r1, #1
 800abee:	6011      	str	r1, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 800abf0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800abf2:	6809      	ldr	r1, [r1, #0]
 800abf4:	680d      	ldr	r5, [r1, #0]
 800abf6:	f025 0501 	bic.w	r5, r5, #1
 800abfa:	600d      	str	r5, [r1, #0]
    *(volatile uint8_t*)LL_SPI_DMA_GetRegAddr(BNRG_SPI_INSTANCE);
 800abfc:	4d30      	ldr	r5, [pc, #192]	; (800acc0 <SPI_Receive_Manager+0xe0>)
 800abfe:	7b2e      	ldrb	r6, [r5, #12]
 800ac00:	7b2e      	ldrb	r6, [r5, #12]
 800ac02:	7b2e      	ldrb	r6, [r5, #12]
 800ac04:	7b2d      	ldrb	r5, [r5, #12]
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmarx, DMA_IT_TC);  /**< Enable Receive packet notification */
 800ac06:	680d      	ldr	r5, [r1, #0]
 800ac08:	f045 0502 	orr.w	r5, r5, #2
 800ac0c:	600d      	str	r5, [r1, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 800ac0e:	6811      	ldr	r1, [r2, #0]
  switch (ReceiveRequest)
 800ac10:	2801      	cmp	r0, #1
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 800ac12:	f021 0102 	bic.w	r1, r1, #2
 800ac16:	6011      	str	r1, [r2, #0]
  switch (ReceiveRequest)
 800ac18:	d012      	beq.n	800ac40 <SPI_Receive_Manager+0x60>
 800ac1a:	2802      	cmp	r0, #2
 800ac1c:	d012      	beq.n	800ac44 <SPI_Receive_Manager+0x64>
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_RX, (uint8_t *)ReadHeaderCmd);
 800ac1e:	4929      	ldr	r1, [pc, #164]	; (800acc4 <SPI_Receive_Manager+0xe4>)
 800ac20:	2000      	movs	r0, #0
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 800ac22:	f7ff ffbf 	bl	800aba4 <ReceiveHeader>
  __HAL_DMA_ENABLE(SpiHandle.hdmarx);
 800ac26:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	6813      	ldr	r3, [r2, #0]
 800ac2c:	f043 0301 	orr.w	r3, r3, #1
 800ac30:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx);
 800ac32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	6813      	ldr	r3, [r2, #0]
 800ac38:	f043 0301 	orr.w	r3, r3, #1
 800ac3c:	6013      	str	r3, [r2, #0]
}
 800ac3e:	bd70      	pop	{r4, r5, r6, pc}
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 800ac40:	4921      	ldr	r1, [pc, #132]	; (800acc8 <SPI_Receive_Manager+0xe8>)
 800ac42:	e7ee      	b.n	800ac22 <SPI_Receive_Manager+0x42>
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 800ac44:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 800ac48:	f8b4 5078 	ldrh.w	r5, [r4, #120]	; 0x78
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 800ac4c:	2b01      	cmp	r3, #1
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 800ac4e:	bf1b      	ittet	ne
 800ac50:	f894 308f 	ldrbne.w	r3, [r4, #143]	; 0x8f
 800ac54:	f894 2090 	ldrbne.w	r2, [r4, #144]	; 0x90
        byte_count = SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive;
 800ac58:	f8b4 307a 	ldrheq.w	r3, [r4, #122]	; 0x7a
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 800ac5c:	ea43 2302 	orrne.w	r3, r3, r2, lsl #8
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive = byte_count;
 800ac60:	bf18      	it	ne
 800ac62:	f8a4 307a 	strhne.w	r3, [r4, #122]	; 0x7a
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 800ac66:	429d      	cmp	r5, r3
 800ac68:	d21f      	bcs.n	800acaa <SPI_Receive_Manager+0xca>
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive -= byte_count;
 800ac6a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
 800ac6e:	1b5b      	subs	r3, r3, r5
 800ac70:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_PAYLOAD_CONT;
 800ac74:	2302      	movs	r3, #2
 800ac76:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        SpiContext.SpiReceiveContext.PacketCont = TRUE;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800ac80:	4e12      	ldr	r6, [pc, #72]	; (800accc <SPI_Receive_Manager+0xec>)
      SpiContext.SpiReceiveContext.PayloadLength = byte_count;
 800ac82:	f8a4 5072 	strh.w	r5, [r4, #114]	; 0x72
 800ac86:	6833      	ldr	r3, [r6, #0]
 800ac88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac8c:	6033      	str	r3, [r6, #0]
      LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, byte_count);
 800ac8e:	4629      	mov	r1, r5
 800ac90:	2000      	movs	r0, #0
 800ac92:	f7ff ff79 	bl	800ab88 <LL_DMA_SetDataLength.constprop.0>
      LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, byte_count);
 800ac96:	4629      	mov	r1, r5
 800ac98:	2001      	movs	r0, #1
 800ac9a:	f7ff ff75 	bl	800ab88 <LL_DMA_SetDataLength.constprop.0>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800ac9e:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <SPI_Receive_Manager+0xf0>)
      LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)SpiContext.SpiReceiveContext.pBuffer);
 800aca0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800aca2:	60da      	str	r2, [r3, #12]
      LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)&DummyBytes);
 800aca4:	4b0b      	ldr	r3, [pc, #44]	; (800acd4 <SPI_Receive_Manager+0xf4>)
 800aca6:	60f3      	str	r3, [r6, #12]
}
 800aca8:	e7bd      	b.n	800ac26 <SPI_Receive_Manager+0x46>
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_END;
 800acaa:	2203      	movs	r2, #3
 800acac:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        SpiContext.SpiReceiveContext.PacketCont = FALSE;
 800acb0:	2200      	movs	r2, #0
 800acb2:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
 800acb6:	461d      	mov	r5, r3
 800acb8:	e7e2      	b.n	800ac80 <SPI_Receive_Manager+0xa0>
 800acba:	bf00      	nop
 800acbc:	20000078 	.word	0x20000078
 800acc0:	40003c00 	.word	0x40003c00
 800acc4:	0800dabd 	.word	0x0800dabd
 800acc8:	0800dac2 	.word	0x0800dac2
 800accc:	4002041c 	.word	0x4002041c
 800acd0:	40020408 	.word	0x40020408
 800acd4:	0800dac7 	.word	0x0800dac7

0800acd8 <TimerTransmitCallback>:
{
 800acd8:	b508      	push	{r3, lr}
  SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 800acda:	2001      	movs	r0, #1
 800acdc:	f7ff ff80 	bl	800abe0 <SPI_Receive_Manager>
}
 800ace0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_En);
 800ace4:	2101      	movs	r1, #1
 800ace6:	2000      	movs	r0, #0
 800ace8:	f001 b862 	b.w	800bdb0 <LPM_SetStopMode>

0800acec <HAL_SPI_MspInit>:
{
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 800acf0:	6802      	ldr	r2, [r0, #0]
 800acf2:	4b6d      	ldr	r3, [pc, #436]	; (800aea8 <HAL_SPI_MspInit+0x1bc>)
 800acf4:	429a      	cmp	r2, r3
{
 800acf6:	b08d      	sub	sp, #52	; 0x34
 800acf8:	4606      	mov	r6, r0
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 800acfa:	f040 80d1 	bne.w	800aea0 <HAL_SPI_MspInit+0x1b4>
    BNRG_SPI_SCLK_CLK_ENABLE();
 800acfe:	4c6b      	ldr	r4, [pc, #428]	; (800aeac <HAL_SPI_MspInit+0x1c0>)
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 800ad00:	486b      	ldr	r0, [pc, #428]	; (800aeb0 <HAL_SPI_MspInit+0x1c4>)
    BNRG_SPI_SCLK_CLK_ENABLE();
 800ad02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad04:	f043 0304 	orr.w	r3, r3, #4
 800ad08:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ad0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	9b00      	ldr	r3, [sp, #0]
    BNRG_SPI_MISO_CLK_ENABLE();
 800ad14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad16:	f043 0304 	orr.w	r3, r3, #4
 800ad1a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ad1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad1e:	f003 0304 	and.w	r3, r3, #4
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	9b01      	ldr	r3, [sp, #4]
    BNRG_SPI_MOSI_CLK_ENABLE();
 800ad26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad28:	f043 0304 	orr.w	r3, r3, #4
 800ad2c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ad2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad30:	f003 0304 	and.w	r3, r3, #4
 800ad34:	9302      	str	r3, [sp, #8]
 800ad36:	9b02      	ldr	r3, [sp, #8]
    BNRG_SPI_CS_CLK_ENABLE();
 800ad38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad3a:	f043 0308 	orr.w	r3, r3, #8
 800ad3e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ad40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad42:	f003 0308 	and.w	r3, r3, #8
 800ad46:	9303      	str	r3, [sp, #12]
 800ad48:	9b03      	ldr	r3, [sp, #12]
    BNRG_SPI_IRQ_CLK_ENABLE();
 800ad4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad4c:	f043 0310 	orr.w	r3, r3, #16
 800ad50:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ad52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad54:	f003 0310 	and.w	r3, r3, #16
 800ad58:	9304      	str	r3, [sp, #16]
 800ad5a:	9b04      	ldr	r3, [sp, #16]
    BNRG_SPI_CLK_ENABLE();
 800ad5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad62:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 800ad6c:	2500      	movs	r5, #0
 800ad6e:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 800ad70:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 800ad74:	f04f 0906 	mov.w	r9, #6
    BNRG_SPI_CLK_ENABLE();
 800ad78:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 800ad7a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 800ad7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad80:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 800ad84:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 800ad88:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 800ad8c:	f002 f864 	bl	800ce58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
 800ad90:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 800ad94:	4846      	ldr	r0, [pc, #280]	; (800aeb0 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
 800ad96:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 800ad9a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
 800ad9c:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
 800ada0:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 800ada4:	f002 f858 	bl	800ce58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
 800ada8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 800adac:	4840      	ldr	r0, [pc, #256]	; (800aeb0 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
 800adae:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 800adb2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
 800adb4:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
 800adb8:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 800adbc:	f002 f84c 	bl	800ce58 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 800adc0:	2201      	movs	r2, #1
 800adc2:	483c      	ldr	r0, [pc, #240]	; (800aeb4 <HAL_SPI_MspInit+0x1c8>)
 800adc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800adc8:	f002 f92a 	bl	800d020 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 800adcc:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 800add0:	f04f 0a01 	mov.w	sl, #1
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 800add4:	4837      	ldr	r0, [pc, #220]	; (800aeb4 <HAL_SPI_MspInit+0x1c8>)
    GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
 800add6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 800add8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
 800adda:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 800adde:	e9cd ba07 	strd	fp, sl, [sp, #28]
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 800ade2:	f002 f839 	bl	800ce58 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 800ade6:	4b34      	ldr	r3, [pc, #208]	; (800aeb8 <HAL_SPI_MspInit+0x1cc>)
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 800ade8:	4834      	ldr	r0, [pc, #208]	; (800aebc <HAL_SPI_MspInit+0x1d0>)
    GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
 800adea:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 800adec:	2240      	movs	r2, #64	; 0x40
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 800adee:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 800adf0:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
 800adf4:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 800adf8:	f002 f82e 	bl	800ce58 <HAL_GPIO_Init>
    BNRG_DMA_CLK_ENABLE();   
 800adfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 800adfe:	4930      	ldr	r1, [pc, #192]	; (800aec0 <HAL_SPI_MspInit+0x1d4>)
    BNRG_DMA_CLK_ENABLE();   
 800ae00:	ea43 0308 	orr.w	r3, r3, r8
 800ae04:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 800ae08:	4c2e      	ldr	r4, [pc, #184]	; (800aec4 <HAL_SPI_MspInit+0x1d8>)
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 800ae0a:	46a1      	mov	r9, r4
    BNRG_DMA_CLK_ENABLE();   
 800ae0c:	ea03 0308 	and.w	r3, r3, r8
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 800ae10:	f849 1f94 	str.w	r1, [r9, #148]!
    BNRG_DMA_CLK_ENABLE();   
 800ae14:	9306      	str	r3, [sp, #24]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800ae16:	2280      	movs	r2, #128	; 0x80
    BNRG_DMA_CLK_ENABLE();   
 800ae18:	9b06      	ldr	r3, [sp, #24]
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 800ae1a:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800ae1e:	2310      	movs	r3, #16
    HAL_DMA_Init(&hdma_tx);   
 800ae20:	4648      	mov	r0, r9
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800ae22:	e9c4 3527 	strd	r3, r5, [r4, #156]	; 0x9c
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae26:	e9c4 2529 	strd	r2, r5, [r4, #164]	; 0xa4
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800ae2a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
    hdma_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800ae2e:	f8c4 b0b4 	str.w	fp, [r4, #180]	; 0xb4
    HAL_DMA_Init(&hdma_tx);   
 800ae32:	f001 fe25 	bl	800ca80 <HAL_DMA_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800ae36:	4922      	ldr	r1, [pc, #136]	; (800aec0 <HAL_SPI_MspInit+0x1d4>)
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
  return (uint32_t) &(SPIx->DR);
 800ae38:	4b23      	ldr	r3, [pc, #140]	; (800aec8 <HAL_SPI_MspInit+0x1dc>)
 800ae3a:	608b      	str	r3, [r1, #8]
    hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800ae3c:	e9c4 7538 	strd	r7, r5, [r4, #224]	; 0xe0
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 800ae40:	4627      	mov	r7, r4
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 800ae42:	f8c6 9054 	str.w	r9, [r6, #84]	; 0x54
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 800ae46:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800aecc <HAL_SPI_MspInit+0x1e0>
 800ae4a:	f847 9fdc 	str.w	r9, [r7, #220]!
    hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800ae4e:	2280      	movs	r2, #128	; 0x80
    HAL_DMA_Init(&hdma_rx);
 800ae50:	4638      	mov	r0, r7
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae52:	e9c4 253b 	strd	r2, r5, [r4, #236]	; 0xec
    hdma_rx.Init.Mode                = DMA_NORMAL;
 800ae56:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 800ae5a:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
    hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800ae5e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800ae62:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
    HAL_DMA_Init(&hdma_rx);
 800ae66:	f001 fe0b 	bl	800ca80 <HAL_DMA_Init>
 800ae6a:	4b17      	ldr	r3, [pc, #92]	; (800aec8 <HAL_SPI_MspInit+0x1dc>)
 800ae6c:	f8c9 3008 	str.w	r3, [r9, #8]
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 800ae70:	462a      	mov	r2, r5
 800ae72:	4651      	mov	r1, sl
 800ae74:	2039      	movs	r0, #57	; 0x39
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx); 
 800ae76:	65b7      	str	r7, [r6, #88]	; 0x58
 800ae78:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 800ae7c:	f001 fd8c 	bl	800c998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_TX_IRQn);
 800ae80:	2039      	movs	r0, #57	; 0x39
 800ae82:	f001 fdbb 	bl	800c9fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_RX_IRQn, 
 800ae86:	462a      	mov	r2, r5
 800ae88:	4651      	mov	r1, sl
 800ae8a:	2038      	movs	r0, #56	; 0x38
 800ae8c:	f001 fd84 	bl	800c998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_RX_IRQn);
 800ae90:	2038      	movs	r0, #56	; 0x38
 800ae92:	f001 fdb3 	bl	800c9fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BNRG_SPI_EXTI_IRQn, 
 800ae96:	462a      	mov	r2, r5
 800ae98:	4641      	mov	r1, r8
 800ae9a:	2017      	movs	r0, #23
 800ae9c:	f001 fd7c 	bl	800c998 <HAL_NVIC_SetPriority>
}
 800aea0:	b00d      	add	sp, #52	; 0x34
 800aea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea6:	bf00      	nop
 800aea8:	40003c00 	.word	0x40003c00
 800aeac:	40021000 	.word	0x40021000
 800aeb0:	48000800 	.word	0x48000800
 800aeb4:	48000c00 	.word	0x48000c00
 800aeb8:	10110000 	.word	0x10110000
 800aebc:	48001000 	.word	0x48001000
 800aec0:	4002041c 	.word	0x4002041c
 800aec4:	20000078 	.word	0x20000078
 800aec8:	40003c0c 	.word	0x40003c0c
 800aecc:	40020408 	.word	0x40020408

0800aed0 <HW_BNRG_Init>:
  return;
}


void HW_BNRG_Init(HW_BNRG_InitMode_t InitMode)
{
 800aed0:	b5f0      	push	{r4, r5, r6, r7, lr}
  hspi->Instance = BNRG_SPI_INSTANCE;
 800aed2:	4c44      	ldr	r4, [pc, #272]	; (800afe4 <HW_BNRG_Init+0x114>)
  hspi->Init.Mode = BNRG_SPI_MODE;
 800aed4:	4e44      	ldr	r6, [pc, #272]	; (800afe8 <HW_BNRG_Init+0x118>)
 800aed6:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 800aeda:	2500      	movs	r5, #0
  hspi->Init.Mode = BNRG_SPI_MODE;
 800aedc:	e9c4 6302 	strd	r6, r3, [r4, #8]
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 800aee0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800aee4:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hspi->Init.NSS = BNRG_SPI_NSS;
 800aee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aeec:	6223      	str	r3, [r4, #32]
{
 800aeee:	b089      	sub	sp, #36	; 0x24
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 800aef0:	2307      	movs	r3, #7
{
 800aef2:	4607      	mov	r7, r0
  HAL_SPI_Init(hspi);
 800aef4:	f104 0008 	add.w	r0, r4, #8
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 800aef8:	6363      	str	r3, [r4, #52]	; 0x34
  hspi->Init.CLKPhase = BNRG_SPI_CLKPHASE;
 800aefa:	e9c4 5506 	strd	r5, r5, [r4, #24]
  hspi->Init.TIMode = BNRG_SPI_TIMODE;
 800aefe:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hspi->Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 800af02:	6265      	str	r5, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 800af04:	6325      	str	r5, [r4, #48]	; 0x30
  HAL_SPI_Init(hspi);
 800af06:	f002 fd20 	bl	800d94a <HAL_SPI_Init>
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800af0a:	6873      	ldr	r3, [r6, #4]
  SPI_Init(&SpiHandle);

  LL_SPI_EnableDMAReq_TX(BNRG_SPI_INSTANCE);
  LL_SPI_EnableDMAReq_RX(BNRG_SPI_INSTANCE);

  __HAL_SPI_ENABLE(&SpiHandle);
 800af0c:	68a2      	ldr	r2, [r4, #8]
 800af0e:	f043 0302 	orr.w	r3, r3, #2
 800af12:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800af14:	6873      	ldr	r3, [r6, #4]
 800af16:	f043 0301 	orr.w	r3, r3, #1
 800af1a:	6073      	str	r3, [r6, #4]
 800af1c:	6813      	ldr	r3, [r2, #0]

  SpiContext.SpiReceiveContext.PacketCont = FALSE;
  SpiContext.SpiTransmitContext.RequestPending = FALSE;
 800af1e:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
  __HAL_SPI_ENABLE(&SpiHandle);
 800af22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 800af26:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_SPI_ENABLE(&SpiHandle);
 800af2a:	6013      	str	r3, [r2, #0]
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 800af2c:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 800af30:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;

  if(InitMode != HW_BNRG_Limited)
 800af34:	2f00      	cmp	r7, #0
 800af36:	d044      	beq.n	800afc2 <HW_BNRG_Init+0xf2>
  *         @arg @ref LL_PWR_WAKEUP_PIN5
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityHigh(uint32_t WakeUpPin)
{
  CLEAR_BIT(PWR->CR4, WakeUpPin);
 800af38:	4a2c      	ldr	r2, [pc, #176]	; (800afec <HW_BNRG_Init+0x11c>)
 800af3a:	68d3      	ldr	r3, [r2, #12]
 800af3c:	f023 0301 	bic.w	r3, r3, #1
 800af40:	60d3      	str	r3, [r2, #12]
  {
    LL_PWR_SetWakeUpPinPolarityHigh(BNRG_SPI_IRQ_WAKEUP_PIN);

    HW_TS_Create(CFG_TimProcID_isr, &TxRxTimerId, hw_ts_SingleShot, TimerTxRxCallback);
 800af42:	f504 7192 	add.w	r1, r4, #292	; 0x124
 800af46:	4b2a      	ldr	r3, [pc, #168]	; (800aff0 <HW_BNRG_Init+0x120>)
 800af48:	462a      	mov	r2, r5
 800af4a:	4628      	mov	r0, r5
 800af4c:	f000 fad2 	bl	800b4f4 <HW_TS_Create>
  GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
 800af50:	2701      	movs	r7, #1
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 800af52:	4b28      	ldr	r3, [pc, #160]	; (800aff4 <HW_BNRG_Init+0x124>)
  GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
 800af54:	9603      	str	r6, [sp, #12]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 800af56:	462a      	mov	r2, r5
 800af58:	f10d 0107 	add.w	r1, sp, #7
 800af5c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
 800af5e:	e9cd 7504 	strd	r7, r5, [sp, #16]
  GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
 800af62:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
 800af64:	9507      	str	r5, [sp, #28]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 800af66:	f000 fac5 	bl	800b4f4 <HW_TS_Create>
  BNRG_SPI_RESET_CLK_ENABLE();
 800af6a:	4b23      	ldr	r3, [pc, #140]	; (800aff8 <HW_BNRG_Init+0x128>)
 800af6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af6e:	433a      	orrs	r2, r7
 800af70:	64da      	str	r2, [r3, #76]	; 0x4c
 800af72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af74:	403b      	ands	r3, r7
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 800af76:	462a      	mov	r2, r5
  BNRG_SPI_RESET_CLK_ENABLE();
 800af78:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 800af7a:	4631      	mov	r1, r6
 800af7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  BNRG_SPI_RESET_CLK_ENABLE();
 800af80:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 800af82:	f002 f84d 	bl	800d020 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);
 800af86:	a903      	add	r1, sp, #12
 800af88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af8c:	f001 ff64 	bl	800ce58 <HAL_GPIO_Init>
  HW_TS_Start(ubnRFResetTimerID, BLUENRG_HOLD_TIME_IN_RESET);
 800af90:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800af94:	211c      	movs	r1, #28
 800af96:	f000 fba9 	bl	800b6ec <HW_TS_Start>
  RfResetTimerLock = 1;
 800af9a:	7027      	strb	r7, [r4, #0]
  while(RfResetTimerLock == 1)
 800af9c:	7823      	ldrb	r3, [r4, #0]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d00c      	beq.n	800afbc <HW_BNRG_Init+0xec>
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 800afa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800afa6:	2201      	movs	r2, #1
 800afa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800afac:	f002 f838 	bl	800d020 <HAL_GPIO_WritePin>
  HW_TS_Delete(ubnRFResetTimerID);
 800afb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800afb4:	f000 fb8c 	bl	800b6d0 <HW_TS_Delete>
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_CS_STDBY_PIN, BNRG_SPI_CS_STDBY_PORT);
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_RESET_STDBY_PIN, BNRG_SPI_RESET_STDBY_PORT);
  }

  return;
}
 800afb8:	b009      	add	sp, #36	; 0x24
 800afba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HW_SleepMode();
 800afbc:	f7ff fd7a 	bl	800aab4 <HW_SleepMode>
 800afc0:	e7ec      	b.n	800af9c <HW_BNRG_Init+0xcc>
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
 800afc2:	4a0e      	ldr	r2, [pc, #56]	; (800affc <HW_BNRG_Init+0x12c>)
 800afc4:	6813      	ldr	r3, [r2, #0]
 800afc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afca:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
 800afcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800afd0:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <HW_BNRG_Init+0x130>)
 800afd2:	6811      	ldr	r1, [r2, #0]
 800afd4:	400b      	ands	r3, r1
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	6832      	ldr	r2, [r6, #0]
 800afda:	4b0a      	ldr	r3, [pc, #40]	; (800b004 <HW_BNRG_Init+0x134>)
 800afdc:	4013      	ands	r3, r2
 800afde:	6033      	str	r3, [r6, #0]
  return;
 800afe0:	e7ea      	b.n	800afb8 <HW_BNRG_Init+0xe8>
 800afe2:	bf00      	nop
 800afe4:	20000078 	.word	0x20000078
 800afe8:	40003c00 	.word	0x40003c00
 800afec:	40007000 	.word	0x40007000
 800aff0:	0800aafd 	.word	0x0800aafd
 800aff4:	0800aaf1 	.word	0x0800aaf1
 800aff8:	40021000 	.word	0x40021000
 800affc:	40007034 	.word	0x40007034
 800b000:	bfff8fc7 	.word	0xbfff8fc7
 800b004:	bfff8fdf 	.word	0xbfff8fdf

0800b008 <HW_BNRG_EvtReq>:
}


void HW_BNRG_EvtReq(uint8_t *buffer, uint16_t buff_size)
{
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 800b008:	4b07      	ldr	r3, [pc, #28]	; (800b028 <HW_BNRG_EvtReq+0x20>)
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 800b00a:	2200      	movs	r2, #0
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 800b00c:	6758      	str	r0, [r3, #116]	; 0x74
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
 800b00e:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 800b012:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  if( SpiContext.SpiReceiveContext.PacketCont == TRUE )
 800b016:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d102      	bne.n	800b024 <HW_BNRG_EvtReq+0x1c>
  {
    SPI_Receive_Manager(SPI_REQUEST_PAYLOAD);
 800b01e:	2002      	movs	r0, #2
 800b020:	f7ff bdde 	b.w	800abe0 <SPI_Receive_Manager>
  }
  else
  {
    Enable_SPI_Receiving_Path();
 800b024:	f7ff bd98 	b.w	800ab58 <Enable_SPI_Receiving_Path>
 800b028:	20000078 	.word	0x20000078

0800b02c <HW_BNRG_SpiIrqCb>:
  return;
}


void HW_BNRG_SpiIrqCb(void)
{  
 800b02c:	b538      	push	{r3, r4, r5, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b02e:	b672      	cpsid	i
  __disable_irq();
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 800b030:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <HW_BNRG_SpiIrqCb+0x30>)
 800b032:	f893 506c 	ldrb.w	r5, [r3, #108]	; 0x6c
 800b036:	b975      	cbnz	r5, 800b056 <HW_BNRG_SpiIrqCb+0x2a>
  {
    SpiContext.SpiPeripheralState = SPI_BUSY;
 800b038:	2401      	movs	r4, #1
 800b03a:	f883 406c 	strb.w	r4, [r3, #108]	; 0x6c
  __ASM volatile ("cpsie i" : : : "memory");
 800b03e:	b662      	cpsie	i
    __enable_irq();
    Enable_SPI_CS();
 800b040:	f7ff fd62 	bl	800ab08 <Enable_SPI_CS>
    SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX);
 800b044:	4628      	mov	r0, r5
 800b046:	f7ff fdcb 	bl	800abe0 <SPI_Receive_Manager>
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 800b04a:	4621      	mov	r1, r4
 800b04c:	4620      	mov	r0, r4
  }
  else
  {
    __enable_irq();
  }
}
 800b04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 800b052:	f000 bead 	b.w	800bdb0 <LPM_SetStopMode>
 800b056:	b662      	cpsie	i
}
 800b058:	bd38      	pop	{r3, r4, r5, pc}
 800b05a:	bf00      	nop
 800b05c:	20000078 	.word	0x20000078

0800b060 <HW_BNRG_DMATxCb>:


void HW_BNRG_DMATxCb(void)
{
 800b060:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmatx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG))
 800b062:	4c20      	ldr	r4, [pc, #128]	; (800b0e4 <HW_BNRG_DMATxCb+0x84>)
 800b064:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	0791      	lsls	r1, r2, #30
 800b06c:	d507      	bpl.n	800b07e <HW_BNRG_DMATxCb+0x1e>
 800b06e:	4a1e      	ldr	r2, [pc, #120]	; (800b0e8 <HW_BNRG_DMATxCb+0x88>)
 800b070:	4293      	cmp	r3, r2
 800b072:	bf8c      	ite	hi
 800b074:	4b1d      	ldrhi	r3, [pc, #116]	; (800b0ec <HW_BNRG_DMATxCb+0x8c>)
 800b076:	4b1e      	ldrls	r3, [pc, #120]	; (800b0f0 <HW_BNRG_DMATxCb+0x90>)
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	0692      	lsls	r2, r2, #26
 800b07c:	d400      	bmi.n	800b080 <HW_BNRG_DMATxCb+0x20>
      TransmitClosure();
    }
  }

  return;
}
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 800b080:	2220      	movs	r2, #32
 800b082:	605a      	str	r2, [r3, #4]
    if(SpiContext.SpiTransmitContext.PacketCont == TRUE)
 800b084:	f894 5088 	ldrb.w	r5, [r4, #136]	; 0x88
 800b088:	2d01      	cmp	r5, #1
 800b08a:	d10d      	bne.n	800b0a8 <HW_BNRG_DMATxCb+0x48>
      SpiContext.SpiTransmitContext.pPayloadData += SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 800b08c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b090:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
 800b094:	4413      	add	r3, r2
 800b096:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      DisableEnable_SPI_CS();
 800b09a:	f7ff fd4d 	bl	800ab38 <DisableEnable_SPI_CS>
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 800b09e:	4628      	mov	r0, r5
}
 800b0a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 800b0a4:	f7ff bd9c 	b.w	800abe0 <SPI_Receive_Manager>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	4608      	mov	r0, r1
 800b0ac:	f000 fe80 	bl	800bdb0 <LPM_SetStopMode>
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  Disable_SPI_CS();
 800b0b6:	f7ff fd2f 	bl	800ab18 <Disable_SPI_CS>
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 800b0ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	6813      	ldr	r3, [r2, #0]
 800b0c0:	f023 0301 	bic.w	r3, r3, #1
 800b0c4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 800b0c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	6813      	ldr	r3, [r2, #0]
 800b0cc:	f023 0301 	bic.w	r3, r3, #1
 800b0d0:	6013      	str	r3, [r2, #0]
  if(SpiContext.SpiReceiveContext.BufferStatus == BUFFER_AVAILABLE)
 800b0d2:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1d1      	bne.n	800b07e <HW_BNRG_DMATxCb+0x1e>
}
 800b0da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Enable_SPI_Receiving_Path();
 800b0de:	f7ff bd3b 	b.w	800ab58 <Enable_SPI_Receiving_Path>
 800b0e2:	bf00      	nop
 800b0e4:	20000078 	.word	0x20000078
 800b0e8:	40020080 	.word	0x40020080
 800b0ec:	40020400 	.word	0x40020400
 800b0f0:	40020000 	.word	0x40020000

0800b0f4 <HW_BNRG_TimStartAllowed>:
}


void HW_BNRG_TimStartAllowed(void)
{
  HW_TS_Start(TxRxTimerId, TimeoutTicks);
 800b0f4:	4b03      	ldr	r3, [pc, #12]	; (800b104 <HW_BNRG_TimStartAllowed+0x10>)
 800b0f6:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800b0fa:	f893 0124 	ldrb.w	r0, [r3, #292]	; 0x124
 800b0fe:	f000 baf5 	b.w	800b6ec <HW_TS_Start>
 800b102:	bf00      	nop
 800b104:	20000078 	.word	0x20000078

0800b108 <HW_BNRG_TimStartReq>:
   * the Timer requested can be started immediately because there is no risk that
   * the timer is already in use.
   * If a specific application needs to handle the timer differently,
   * it is suggested to overload the function without change the COMMON one. 
   */
  HW_BNRG_TimStartAllowed();
 800b108:	f7ff bff4 	b.w	800b0f4 <HW_BNRG_TimStartAllowed>

0800b10c <WakeupBlueNRG>:
{
 800b10c:	b510      	push	{r4, lr}
  pTimerTxRxCallback = TimerTransmitCallback;
 800b10e:	4c08      	ldr	r4, [pc, #32]	; (800b130 <WakeupBlueNRG+0x24>)
 800b110:	4b08      	ldr	r3, [pc, #32]	; (800b134 <WakeupBlueNRG+0x28>)
 800b112:	6063      	str	r3, [r4, #4]
  Enable_SPI_CS();
 800b114:	f7ff fcf8 	bl	800ab08 <Enable_SPI_CS>
  TimeoutTicks = SPI_TX_TIMEOUT;
 800b118:	2306      	movs	r3, #6
 800b11a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
  HW_BNRG_TimStartReq();
 800b11e:	f7ff fff3 	bl	800b108 <HW_BNRG_TimStartReq>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 800b122:	2100      	movs	r1, #0
}
 800b124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 800b128:	4608      	mov	r0, r1
 800b12a:	f000 be41 	b.w	800bdb0 <LPM_SetStopMode>
 800b12e:	bf00      	nop
 800b130:	20000078 	.word	0x20000078
 800b134:	0800acd9 	.word	0x0800acd9

0800b138 <HW_BNRG_Send>:
{  
 800b138:	b508      	push	{r3, lr}
  SpiContext.SpiTransmitContext.pPayloadData = payload_data;
 800b13a:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <HW_BNRG_Send+0x34>)
 800b13c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit = payload_size;
 800b140:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("cpsid i" : : : "memory");
 800b144:	b672      	cpsid	i
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 800b146:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 800b14a:	2201      	movs	r2, #1
 800b14c:	b949      	cbnz	r1, 800b162 <HW_BNRG_Send+0x2a>
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 800b14e:	2017      	movs	r0, #23
    SpiContext.SpiPeripheralState = SPI_BUSY;
 800b150:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 800b154:	f001 fc60 	bl	800ca18 <HAL_NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800b158:	b662      	cpsie	i
}
 800b15a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WakeupBlueNRG();
 800b15e:	f7ff bfd5 	b.w	800b10c <WakeupBlueNRG>
    SpiContext.SpiTransmitContext.RequestPending = TRUE;
 800b162:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 800b166:	b662      	cpsie	i
}
 800b168:	bd08      	pop	{r3, pc}
 800b16a:	bf00      	nop
 800b16c:	20000078 	.word	0x20000078

0800b170 <ReceiveClosure>:
{
 800b170:	b510      	push	{r4, lr}
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 800b172:	4c12      	ldr	r4, [pc, #72]	; (800b1bc <ReceiveClosure+0x4c>)
 800b174:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	6813      	ldr	r3, [r2, #0]
 800b17a:	f023 0301 	bic.w	r3, r3, #1
 800b17e:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 800b180:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	6813      	ldr	r3, [r2, #0]
 800b186:	f023 0301 	bic.w	r3, r3, #1
 800b18a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b18c:	b672      	cpsid	i
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 800b18e:	2017      	movs	r0, #23
 800b190:	f001 fc42 	bl	800ca18 <HAL_NVIC_DisableIRQ>
  if(SpiContext.SpiTransmitContext.RequestPending == TRUE)
 800b194:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 800b198:	2a01      	cmp	r2, #1
 800b19a:	f04f 0300 	mov.w	r3, #0
 800b19e:	d108      	bne.n	800b1b2 <ReceiveClosure+0x42>
    SpiContext.SpiTransmitContext.RequestPending = FALSE;
 800b1a0:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
    SpiContext.SpiPeripheralState = SPI_BUSY;
 800b1a4:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
  __ASM volatile ("cpsie i" : : : "memory");
 800b1a8:	b662      	cpsie	i
}
 800b1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WakeupBlueNRG();
 800b1ae:	f7ff bfad 	b.w	800b10c <WakeupBlueNRG>
    SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 800b1b2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 800b1b6:	b662      	cpsie	i
}
 800b1b8:	bd10      	pop	{r4, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20000078 	.word	0x20000078

0800b1c0 <ProcessEndOfReceive>:
{
 800b1c0:	b510      	push	{r4, lr}
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;
 800b1c2:	4c06      	ldr	r4, [pc, #24]	; (800b1dc <ProcessEndOfReceive+0x1c>)
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  ReceiveClosure();
 800b1ca:	f7ff ffd1 	bl	800b170 <ReceiveClosure>
  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 800b1ce:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
}
 800b1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 800b1d6:	f000 bd5b 	b.w	800bc90 <HW_BNRG_Isr>
 800b1da:	bf00      	nop
 800b1dc:	20000078 	.word	0x20000078

0800b1e0 <HW_BNRG_DMARxCb>:
{
 800b1e0:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmarx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG))
 800b1e2:	4c53      	ldr	r4, [pc, #332]	; (800b330 <HW_BNRG_DMARxCb+0x150>)
 800b1e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	0795      	lsls	r5, r2, #30
 800b1ec:	d507      	bpl.n	800b1fe <HW_BNRG_DMARxCb+0x1e>
 800b1ee:	4951      	ldr	r1, [pc, #324]	; (800b334 <HW_BNRG_DMARxCb+0x154>)
 800b1f0:	428b      	cmp	r3, r1
 800b1f2:	bf8c      	ite	hi
 800b1f4:	4a50      	ldrhi	r2, [pc, #320]	; (800b338 <HW_BNRG_DMARxCb+0x158>)
 800b1f6:	4a51      	ldrls	r2, [pc, #324]	; (800b33c <HW_BNRG_DMARxCb+0x15c>)
 800b1f8:	6810      	ldr	r0, [r2, #0]
 800b1fa:	0780      	lsls	r0, r0, #30
 800b1fc:	d400      	bmi.n	800b200 <HW_BNRG_DMARxCb+0x20>
}
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG);
 800b200:	2002      	movs	r0, #2
 800b202:	6050      	str	r0, [r2, #4]
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 800b204:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b206:	6815      	ldr	r5, [r2, #0]
 800b208:	428d      	cmp	r5, r1
 800b20a:	bf8c      	ite	hi
 800b20c:	484a      	ldrhi	r0, [pc, #296]	; (800b338 <HW_BNRG_DMARxCb+0x158>)
 800b20e:	484b      	ldrls	r0, [pc, #300]	; (800b33c <HW_BNRG_DMARxCb+0x15c>)
 800b210:	2220      	movs	r2, #32
 800b212:	6042      	str	r2, [r0, #4]
    switch (SpiContext.SpiReceiveContext.SpiReceiveEvent)
 800b214:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 800b218:	2a03      	cmp	r2, #3
 800b21a:	d8f0      	bhi.n	800b1fe <HW_BNRG_DMARxCb+0x1e>
 800b21c:	e8df f002 	tbb	[pc, r2]
 800b220:	2a243802 	.word	0x2a243802
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 800b224:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 800b228:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 800b22c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800b230:	d003      	beq.n	800b23a <HW_BNRG_DMARxCb+0x5a>
 800b232:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 800b236:	2802      	cmp	r0, #2
 800b238:	d012      	beq.n	800b260 <HW_BNRG_DMARxCb+0x80>
          if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET)
 800b23a:	4841      	ldr	r0, [pc, #260]	; (800b340 <HW_BNRG_DMARxCb+0x160>)
 800b23c:	2140      	movs	r1, #64	; 0x40
 800b23e:	f001 fee9 	bl	800d014 <HAL_GPIO_ReadPin>
 800b242:	4604      	mov	r4, r0
 800b244:	b948      	cbnz	r0, 800b25a <HW_BNRG_DMARxCb+0x7a>
            Disable_SPI_CS();
 800b246:	f7ff fc67 	bl	800ab18 <Disable_SPI_CS>
            LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 800b24a:	4621      	mov	r1, r4
 800b24c:	2001      	movs	r0, #1
 800b24e:	f000 fdaf 	bl	800bdb0 <LPM_SetStopMode>
}
 800b252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ReceiveClosure();
 800b256:	f7ff bf8b 	b.w	800b170 <ReceiveClosure>
            DisableEnable_SPI_CS();
 800b25a:	f7ff fc6d 	bl	800ab38 <DisableEnable_SPI_CS>
            SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX); /**< BlueNRG not ready for reading */
 800b25e:	2000      	movs	r0, #0
}
 800b260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 800b264:	f7ff bcbc 	b.w	800abe0 <SPI_Receive_Manager>
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 800b268:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
}
 800b26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 800b270:	f000 bd0e 	b.w	800bc90 <HW_BNRG_Isr>
        Disable_SPI_CS();
 800b274:	f7ff fc50 	bl	800ab18 <Disable_SPI_CS>
        LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 800b278:	2100      	movs	r1, #0
 800b27a:	2001      	movs	r0, #1
 800b27c:	f000 fd98 	bl	800bdb0 <LPM_SetStopMode>
        pTimerTxRxCallback = ProcessEndOfReceive;
 800b280:	4b30      	ldr	r3, [pc, #192]	; (800b344 <HW_BNRG_DMARxCb+0x164>)
 800b282:	6063      	str	r3, [r4, #4]
        TimeoutTicks = SPI_END_RECEIVE_FIX_TIMEOUT;
 800b284:	2302      	movs	r3, #2
 800b286:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        HW_BNRG_TimStartReq();
 800b28a:	f7ff ff3d 	bl	800b108 <HW_BNRG_TimStartReq>
        break;
 800b28e:	e7b6      	b.n	800b1fe <HW_BNRG_DMARxCb+0x1e>
        byte_count = (ReceivedHeader[2]<<8)|ReceivedHeader[1];
 800b290:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
 800b294:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 800b298:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
 800b29c:	d003      	beq.n	800b2a6 <HW_BNRG_DMARxCb+0xc6>
 800b29e:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 800b2a2:	2802      	cmp	r0, #2
 800b2a4:	d003      	beq.n	800b2ae <HW_BNRG_DMARxCb+0xce>
          DisableEnable_SPI_CS();
 800b2a6:	f7ff fc47 	bl	800ab38 <DisableEnable_SPI_CS>
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	e7d8      	b.n	800b260 <HW_BNRG_DMARxCb+0x80>
          if( byte_count < SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit)
 800b2ae:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800b2b2:	4290      	cmp	r0, r2
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = byte_count;
 800b2b4:	bf83      	ittte	hi
 800b2b6:	f8a4 2086 	strhhi.w	r2, [r4, #134]	; 0x86
            SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit -= SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 800b2ba:	1a82      	subhi	r2, r0, r2
 800b2bc:	f8a4 2084 	strhhi.w	r2, [r4, #132]	; 0x84
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 800b2c0:	2200      	movls	r2, #0
            SpiContext.SpiTransmitContext.PacketCont = TRUE;
 800b2c2:	bf88      	it	hi
 800b2c4:	2201      	movhi	r2, #1
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 800b2c6:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 800b2ca:	682a      	ldr	r2, [r5, #0]
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit;
 800b2cc:	bf98      	it	ls
 800b2ce:	f8a4 0086 	strhls.w	r0, [r4, #134]	; 0x86
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 800b2d2:	f022 0201 	bic.w	r2, r2, #1
 800b2d6:	602a      	str	r2, [r5, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	f022 0201 	bic.w	r2, r2, #1
 800b2de:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 800b2e0:	681a      	ldr	r2, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 800b2e2:	428d      	cmp	r5, r1
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 800b2e4:	f022 0202 	bic.w	r2, r2, #2
 800b2e8:	601a      	str	r2, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 800b2ea:	bf8c      	ite	hi
 800b2ec:	4a12      	ldrhi	r2, [pc, #72]	; (800b338 <HW_BNRG_DMARxCb+0x158>)
 800b2ee:	4a13      	ldrls	r2, [pc, #76]	; (800b33c <HW_BNRG_DMARxCb+0x15c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800b2f0:	4d15      	ldr	r5, [pc, #84]	; (800b348 <HW_BNRG_DMARxCb+0x168>)
 800b2f2:	2320      	movs	r3, #32
 800b2f4:	6053      	str	r3, [r2, #4]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_DMA_TX_IRQn); /**< Clear DMA pending bit in NVIC */
 800b2f6:	2039      	movs	r0, #57	; 0x39
 800b2f8:	f001 fbb2 	bl	800ca60 <HAL_NVIC_ClearPendingIRQ>
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 800b2fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 800b2fe:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	6813      	ldr	r3, [r2, #0]
 800b306:	f043 0302 	orr.w	r3, r3, #2
 800b30a:	6013      	str	r3, [r2, #0]
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b312:	602b      	str	r3, [r5, #0]
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 800b314:	2001      	movs	r0, #1
 800b316:	f7ff fc37 	bl	800ab88 <LL_DMA_SetDataLength.constprop.0>
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)SpiContext.SpiTransmitContext.pPayloadData);  /**< Set memory address in DMA TX */
 800b31a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800b31e:	60eb      	str	r3, [r5, #12]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx); /**< Enable DMA TX */
 800b320:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	6813      	ldr	r3, [r2, #0]
 800b326:	f043 0301 	orr.w	r3, r3, #1
 800b32a:	6013      	str	r3, [r2, #0]
  return;
 800b32c:	e767      	b.n	800b1fe <HW_BNRG_DMARxCb+0x1e>
 800b32e:	bf00      	nop
 800b330:	20000078 	.word	0x20000078
 800b334:	40020080 	.word	0x40020080
 800b338:	40020400 	.word	0x40020400
 800b33c:	40020000 	.word	0x40020000
 800b340:	48001000 	.word	0x48001000
 800b344:	0800b1c1 	.word	0x0800b1c1
 800b348:	4002041c 	.word	0x4002041c

0800b34c <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 800b34c:	4b06      	ldr	r3, [pc, #24]	; (800b368 <ReadRtcSsrValue+0x1c>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681a      	ldr	r2, [r3, #0]
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800b352:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800b354:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b356:	b280      	uxth	r0, r0
 800b358:	b29b      	uxth	r3, r3
  second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);

  while(first_read != second_read)
 800b35a:	4298      	cmp	r0, r3
 800b35c:	d100      	bne.n	800b360 <ReadRtcSsrValue+0x14>
    first_read = second_read;
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
  }

  return second_read;
}
 800b35e:	4770      	bx	lr
 800b360:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b362:	4618      	mov	r0, r3
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 800b364:	b28b      	uxth	r3, r1
 800b366:	e7f8      	b.n	800b35a <ReadRtcSsrValue+0xe>
 800b368:	200001a4 	.word	0x200001a4

0800b36c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800b36c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800b36e:	4b19      	ldr	r3, [pc, #100]	; (800b3d4 <UnlinkTimer+0x68>)
 800b370:	791a      	ldrb	r2, [r3, #4]
 800b372:	4282      	cmp	r2, r0
 800b374:	f04f 0218 	mov.w	r2, #24
 800b378:	d115      	bne.n	800b3a6 <UnlinkTimer+0x3a>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800b37a:	791c      	ldrb	r4, [r3, #4]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800b37c:	fb02 3200 	mla	r2, r2, r0, r3
    PreviousRunningTimerID = CurrentRunningTimerID;
 800b380:	b2e4      	uxtb	r4, r4
 800b382:	715c      	strb	r4, [r3, #5]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800b384:	7f52      	ldrb	r2, [r2, #29]
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	711a      	strb	r2, [r3, #4]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800b38a:	2218      	movs	r2, #24
 800b38c:	fb02 3000 	mla	r0, r2, r0, r3
 800b390:	2201      	movs	r2, #1
 800b392:	7502      	strb	r2, [r0, #20]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800b394:	791a      	ldrb	r2, [r3, #4]
 800b396:	2a06      	cmp	r2, #6
 800b398:	d104      	bne.n	800b3a4 <UnlinkTimer+0x38>
 800b39a:	b919      	cbnz	r1, 800b3a4 <UnlinkTimer+0x38>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800b39c:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  return;
}
 800b3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    previous_id = aTimerContext[TimerID].PreviousID;
 800b3a6:	fb02 3400 	mla	r4, r2, r0, r3
 800b3aa:	7f26      	ldrb	r6, [r4, #28]
    next_id = aTimerContext[TimerID].NextID;
 800b3ac:	f894 c01d 	ldrb.w	ip, [r4, #29]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800b3b0:	7f67      	ldrb	r7, [r4, #29]
 800b3b2:	fb02 3606 	mla	r6, r2, r6, r3
 800b3b6:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b3b8:	f1bc 0f06 	cmp.w	ip, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800b3bc:	7777      	strb	r7, [r6, #29]
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800b3be:	bf18      	it	ne
 800b3c0:	7f24      	ldrbne	r4, [r4, #28]
    next_id = aTimerContext[TimerID].NextID;
 800b3c2:	fa5f f58c 	uxtb.w	r5, ip
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800b3c6:	bf1e      	ittt	ne
 800b3c8:	fb02 3205 	mlane	r2, r2, r5, r3
 800b3cc:	b2e4      	uxtbne	r4, r4
 800b3ce:	7714      	strbne	r4, [r2, #28]
 800b3d0:	e7db      	b.n	800b38a <UnlinkTimer+0x1e>
 800b3d2:	bf00      	nop
 800b3d4:	200001a4 	.word	0x200001a4

0800b3d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800b3d8:	b510      	push	{r4, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800b3da:	4c0e      	ldr	r4, [pc, #56]	; (800b414 <ReturnTimeElapsed+0x3c>)
 800b3dc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	d015      	beq.n	800b410 <ReturnTimeElapsed+0x38>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800b3e4:	f7ff ffb2 	bl	800b34c <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 800b3e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b3ec:	4283      	cmp	r3, r0
    {
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800b3ee:	bf3b      	ittet	cc
 800b3f0:	f8b4 309c 	ldrhcc.w	r3, [r4, #156]	; 0x9c
      return_value = SSRValueOnLastSetup + wrap_counter;
 800b3f4:	f8d4 2098 	ldrcc.w	r2, [r4, #152]	; 0x98
      return_value = SSRValueOnLastSetup - return_value;
 800b3f8:	f8d4 3098 	ldrcs.w	r3, [r4, #152]	; 0x98
      return_value = SSRValueOnLastSetup + wrap_counter;
 800b3fc:	189b      	addcc	r3, r3, r2
 800b3fe:	1a18      	subs	r0, r3, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800b400:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 800b404:	4358      	muls	r0, r3
    return_value = return_value >> WakeupTimerDivider;
 800b406:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 800b40a:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 800b40c:	b280      	uxth	r0, r0
 800b40e:	bd10      	pop	{r4, pc}
    return_value = 0;
 800b410:	2000      	movs	r0, #0
 800b412:	e7fb      	b.n	800b40c <ReturnTimeElapsed+0x34>
 800b414:	200001a4 	.word	0x200001a4

0800b418 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800b418:	b538      	push	{r3, r4, r5, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800b41a:	4c34      	ldr	r4, [pc, #208]	; (800b4ec <HW_TS_Init+0xd4>)
 800b41c:	6021      	str	r1, [r4, #0]


  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - (LL_RTC_WAKEUP_GetClock(phrtc->Instance)));
 800b41e:	6809      	ldr	r1, [r1, #0]
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  */
__STATIC_INLINE uint32_t LL_RTC_WAKEUP_GetClock(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 800b420:	688b      	ldr	r3, [r1, #8]
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 800b422:	690a      	ldr	r2, [r1, #16]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 800b424:	f003 0307 	and.w	r3, r3, #7
 800b428:	f1c3 0304 	rsb	r3, r3, #4
 800b42c:	b2dd      	uxtb	r5, r3
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_S));
 800b42e:	690b      	ldr	r3, [r1, #16]
 800b430:	f884 509f 	strb.w	r5, [r4, #159]	; 0x9f
 800b434:	f3c3 030e 	ubfx	r3, r3, #0, #15
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 800b438:	3301      	adds	r3, #1
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 800b43a:	f3c2 4206 	ubfx	r2, r2, #16, #7
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 800b43e:	3201      	adds	r2, #1
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 800b440:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 800b444:	3b01      	subs	r3, #1
 800b446:	4353      	muls	r3, r2
 800b448:	412b      	asrs	r3, r5
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 800b44a:	f884 209e 	strb.w	r2, [r4, #158]	; 0x9e
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 800b44e:	3b10      	subs	r3, #16

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800b450:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b454:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800b456:	bf8c      	ite	hi
 800b458:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800b45c:	b29b      	uxthls	r3, r3
 800b45e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800b462:	4b23      	ldr	r3, [pc, #140]	; (800b4f0 <HW_TS_Init+0xd8>)
 800b464:	689a      	ldr	r2, [r3, #8]
 800b466:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b46a:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b472:	601a      	str	r2, [r3, #0]
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 800b474:	bb90      	cbnz	r0, 800b4dc <HW_TS_Init+0xc4>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800b476:	2201      	movs	r2, #1
 800b478:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800b47c:	f04f 32ff 	mov.w	r2, #4294967295
 800b480:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800b484:	2206      	movs	r2, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800b486:	7520      	strb	r0, [r4, #20]
 800b488:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
 800b48c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 800b490:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
 800b494:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 800b498:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800b49c:	7122      	strb	r2, [r4, #4]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800b49e:	688a      	ldr	r2, [r1, #8]
 800b4a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4a4:	608a      	str	r2, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800b4a6:	68ca      	ldr	r2, [r1, #12]
 800b4a8:	b2d2      	uxtb	r2, r2
 800b4aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b4ae:	60ca      	str	r2, [r1, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800b4b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b4b4:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800b4b6:	2003      	movs	r0, #3
 800b4b8:	f001 fad2 	bl	800ca60 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	6893      	ldr	r3, [r2, #8]
 800b4c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b4c6:	6093      	str	r3, [r2, #8]
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800b4c8:	2103      	movs	r1, #3
 800b4ca:	4608      	mov	r0, r1
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f001 fa63 	bl	800c998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */

  return;
}
 800b4d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800b4d6:	2003      	movs	r0, #3
 800b4d8:	f001 ba90 	b.w	800c9fc <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800b4dc:	68cb      	ldr	r3, [r1, #12]
 800b4de:	055b      	lsls	r3, r3, #21
 800b4e0:	d5f2      	bpl.n	800b4c8 <HW_TS_Init+0xb0>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800b4e2:	2003      	movs	r0, #3
 800b4e4:	f001 faac 	bl	800ca40 <HAL_NVIC_SetPendingIRQ>
 800b4e8:	e7ee      	b.n	800b4c8 <HW_TS_Init+0xb0>
 800b4ea:	bf00      	nop
 800b4ec:	200001a4 	.word	0x200001a4
 800b4f0:	40010400 	.word	0x40010400

0800b4f4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800b4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4f8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b4fc:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800b4fe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800b544 <HW_TS_Create+0x50>
 800b502:	2500      	movs	r5, #0
 800b504:	f04f 0a18 	mov.w	sl, #24
 800b508:	fb0a 9405 	mla	r4, sl, r5, r9
 800b50c:	fa5f fe85 	uxtb.w	lr, r5
 800b510:	f894 c014 	ldrb.w	ip, [r4, #20]
 800b514:	f00c 06ff 	and.w	r6, ip, #255	; 0xff
 800b518:	f1bc 0f00 	cmp.w	ip, #0
 800b51c:	d10b      	bne.n	800b536 <HW_TS_Create+0x42>
    loop++;
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800b51e:	2501      	movs	r5, #1
 800b520:	7525      	strb	r5, [r4, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b522:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800b526:	61a0      	str	r0, [r4, #24]
    aTimerContext[loop].TimerMode = TimerMode;
 800b528:	7562      	strb	r2, [r4, #21]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800b52a:	60a3      	str	r3, [r4, #8]
    *pTimerId = loop;
 800b52c:	f881 e000 	strb.w	lr, [r1]

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 800b530:	4630      	mov	r0, r6
 800b532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800b536:	3501      	adds	r5, #1
 800b538:	2d06      	cmp	r5, #6
 800b53a:	d1e5      	bne.n	800b508 <HW_TS_Create+0x14>
 800b53c:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 800b540:	2601      	movs	r6, #1
  return(localreturnstatus);
 800b542:	e7f5      	b.n	800b530 <HW_TS_Create+0x3c>
 800b544:	200001a4 	.word	0x200001a4

0800b548 <HW_TS_RTC_CountUpdated_AppNot>:
  }
}

__weak void HW_TS_RTC_CountUpdated_AppNot(void)
{
}
 800b548:	4770      	bx	lr
	...

0800b54c <RescheduleTimerList>:
{
 800b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 800b54e:	4c3c      	ldr	r4, [pc, #240]	; (800b640 <RescheduleTimerList+0xf4>)
 800b550:	6827      	ldr	r7, [r4, #0]
 800b552:	683b      	ldr	r3, [r7, #0]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 800b554:	689a      	ldr	r2, [r3, #8]
 800b556:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800b55a:	d003      	beq.n	800b564 <RescheduleTimerList+0x18>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800b55c:	68da      	ldr	r2, [r3, #12]
 800b55e:	f012 0f04 	tst.w	r2, #4
 800b562:	e7fa      	b.n	800b55a <RescheduleTimerList+0xe>
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800b564:	689a      	ldr	r2, [r3, #8]
 800b566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b56a:	609a      	str	r2, [r3, #8]
  localTimerID = CurrentRunningTimerID;
 800b56c:	7923      	ldrb	r3, [r4, #4]
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800b56e:	2218      	movs	r2, #24
  localTimerID = CurrentRunningTimerID;
 800b570:	b2de      	uxtb	r6, r3
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800b572:	fb02 4303 	mla	r3, r2, r3, r4
 800b576:	691d      	ldr	r5, [r3, #16]
  time_elapsed = ReturnTimeElapsed();
 800b578:	f7ff ff2e 	bl	800b3d8 <ReturnTimeElapsed>
  if(timecountleft < time_elapsed )
 800b57c:	42a8      	cmp	r0, r5
 800b57e:	d907      	bls.n	800b590 <RescheduleTimerList+0x44>
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800b580:	2301      	movs	r3, #1
 800b582:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
    wakeup_timer_value = 0;
 800b586:	2300      	movs	r3, #0
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800b588:	2518      	movs	r5, #24
      aTimerContext[localTimerID].CountLeft = 0;
 800b58a:	f04f 0c00 	mov.w	ip, #0
 800b58e:	e01e      	b.n	800b5ce <RescheduleTimerList+0x82>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800b590:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 800b594:	fa10 f383 	uxtah	r3, r0, r3
 800b598:	42ab      	cmp	r3, r5
      wakeup_timer_value = MaxWakeupTimerSetup;
 800b59a:	bf39      	ittee	cc
 800b59c:	f8b4 30a0 	ldrhcc.w	r3, [r4, #160]	; 0xa0
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800b5a0:	2200      	movcc	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 800b5a2:	1a2b      	subcs	r3, r5, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800b5a4:	2201      	movcs	r2, #1
      wakeup_timer_value = MaxWakeupTimerSetup;
 800b5a6:	bf34      	ite	cc
 800b5a8:	b29b      	uxthcc	r3, r3
      wakeup_timer_value = timecountleft - time_elapsed;
 800b5aa:	b29b      	uxthcs	r3, r3
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800b5ac:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
 800b5b0:	e7ea      	b.n	800b588 <RescheduleTimerList+0x3c>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800b5b2:	fb05 4206 	mla	r2, r5, r6, r4
    localTimerID = aTimerContext[localTimerID].NextID;
 800b5b6:	fb05 4606 	mla	r6, r5, r6, r4
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800b5ba:	6911      	ldr	r1, [r2, #16]
 800b5bc:	4288      	cmp	r0, r1
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800b5be:	bf97      	itett	ls
 800b5c0:	6911      	ldrls	r1, [r2, #16]
      aTimerContext[localTimerID].CountLeft = 0;
 800b5c2:	f8c2 c010 	strhi.w	ip, [r2, #16]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800b5c6:	1a09      	subls	r1, r1, r0
 800b5c8:	6111      	strls	r1, [r2, #16]
    localTimerID = aTimerContext[localTimerID].NextID;
 800b5ca:	7f76      	ldrb	r6, [r6, #29]
 800b5cc:	b2f6      	uxtb	r6, r6
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b5ce:	2e06      	cmp	r6, #6
 800b5d0:	d1ef      	bne.n	800b5b2 <RescheduleTimerList+0x66>
  if(Value == 0)
 800b5d2:	b943      	cbnz	r3, 800b5e6 <RescheduleTimerList+0x9a>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800b5d4:	f7ff feba 	bl	800b34c <ReadRtcSsrValue>
 800b5d8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
}
 800b5dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800b5e0:	2003      	movs	r0, #3
 800b5e2:	f001 ba2d 	b.w	800ca40 <HAL_NVIC_SetPendingIRQ>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d803      	bhi.n	800b5f2 <RescheduleTimerList+0xa6>
 800b5ea:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 800b5ee:	2a01      	cmp	r2, #1
 800b5f0:	d024      	beq.n	800b63c <RescheduleTimerList+0xf0>
      Value -= 1;
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	b29d      	uxth	r5, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	68da      	ldr	r2, [r3, #12]
 800b5fa:	0752      	lsls	r2, r2, #29
 800b5fc:	d5fc      	bpl.n	800b5f8 <RescheduleTimerList+0xac>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800b5fe:	68d9      	ldr	r1, [r3, #12]
 800b600:	b2c9      	uxtb	r1, r1
 800b602:	f461 6190 	orn	r1, r1, #1152	; 0x480
 800b606:	60d9      	str	r1, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800b608:	4b0e      	ldr	r3, [pc, #56]	; (800b644 <RescheduleTimerList+0xf8>)
 800b60a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b60e:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800b610:	2003      	movs	r0, #3
 800b612:	f001 fa25 	bl	800ca60 <HAL_NVIC_ClearPendingIRQ>
    LL_RTC_WAKEUP_SetAutoReload(phrtc->Instance, Value);
 800b616:	6826      	ldr	r6, [r4, #0]
 800b618:	6833      	ldr	r3, [r6, #0]
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 800b61a:	695a      	ldr	r2, [r3, #20]
 800b61c:	0c12      	lsrs	r2, r2, #16
 800b61e:	0412      	lsls	r2, r2, #16
 800b620:	432a      	orrs	r2, r5
 800b622:	615a      	str	r2, [r3, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800b624:	f7ff fe92 	bl	800b34c <ReadRtcSsrValue>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800b628:	6832      	ldr	r2, [r6, #0]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800b62a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800b62e:	6893      	ldr	r3, [r2, #8]
 800b630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b634:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800b636:	f7ff ff87 	bl	800b548 <HW_TS_RTC_CountUpdated_AppNot>
}
 800b63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b63c:	4615      	mov	r5, r2
 800b63e:	e7da      	b.n	800b5f6 <RescheduleTimerList+0xaa>
 800b640:	200001a4 	.word	0x200001a4
 800b644:	40010400 	.word	0x40010400

0800b648 <HW_TS_Stop>:
{
 800b648:	b570      	push	{r4, r5, r6, lr}
 800b64a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b64c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b650:	b672      	cpsid	i
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800b652:	4c1d      	ldr	r4, [pc, #116]	; (800b6c8 <HW_TS_Stop+0x80>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800b654:	2003      	movs	r0, #3
 800b656:	f001 f9df 	bl	800ca18 <HAL_NVIC_DisableIRQ>
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800b65a:	2318      	movs	r3, #24
 800b65c:	fb03 4305 	mla	r3, r3, r5, r4
 800b660:	7d1b      	ldrb	r3, [r3, #20]
 800b662:	2b02      	cmp	r3, #2
 800b664:	d124      	bne.n	800b6b0 <HW_TS_Stop+0x68>
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800b666:	2100      	movs	r1, #0
 800b668:	4628      	mov	r0, r5
 800b66a:	f7ff fe7f 	bl	800b36c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800b66e:	7923      	ldrb	r3, [r4, #4]
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b670:	2b06      	cmp	r3, #6
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800b672:	b2da      	uxtb	r2, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b674:	d122      	bne.n	800b6bc <HW_TS_Stop+0x74>
      if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 800b67a:	689a      	ldr	r2, [r3, #8]
 800b67c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800b680:	d003      	beq.n	800b68a <HW_TS_Stop+0x42>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800b682:	68da      	ldr	r2, [r3, #12]
 800b684:	f012 0f04 	tst.w	r2, #4
 800b688:	e7fa      	b.n	800b680 <HW_TS_Stop+0x38>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800b68a:	689a      	ldr	r2, [r3, #8]
 800b68c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b690:	609a      	str	r2, [r3, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	0752      	lsls	r2, r2, #29
 800b696:	d5fc      	bpl.n	800b692 <HW_TS_Stop+0x4a>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800b698:	68da      	ldr	r2, [r3, #12]
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b6a0:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800b6a2:	4b0a      	ldr	r3, [pc, #40]	; (800b6cc <HW_TS_Stop+0x84>)
 800b6a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b6a8:	615a      	str	r2, [r3, #20]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800b6aa:	2003      	movs	r0, #3
 800b6ac:	f001 f9d8 	bl	800ca60 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800b6b0:	2003      	movs	r0, #3
 800b6b2:	f001 f9a3 	bl	800c9fc <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6b6:	f386 8810 	msr	PRIMASK, r6
}
 800b6ba:	bd70      	pop	{r4, r5, r6, pc}
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800b6bc:	7963      	ldrb	r3, [r4, #5]
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d0f6      	beq.n	800b6b0 <HW_TS_Stop+0x68>
      RescheduleTimerList();
 800b6c2:	f7ff ff43 	bl	800b54c <RescheduleTimerList>
 800b6c6:	e7f3      	b.n	800b6b0 <HW_TS_Stop+0x68>
 800b6c8:	200001a4 	.word	0x200001a4
 800b6cc:	40010400 	.word	0x40010400

0800b6d0 <HW_TS_Delete>:
{
 800b6d0:	b510      	push	{r4, lr}
 800b6d2:	4604      	mov	r4, r0
  HW_TS_Stop(timer_id);
 800b6d4:	f7ff ffb8 	bl	800b648 <HW_TS_Stop>
  aTimerContext[timer_id].TimerIDStatus = TimerID_Free; /**<  release ID */
 800b6d8:	4803      	ldr	r0, [pc, #12]	; (800b6e8 <HW_TS_Delete+0x18>)
 800b6da:	2318      	movs	r3, #24
 800b6dc:	fb03 0404 	mla	r4, r3, r4, r0
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	7523      	strb	r3, [r4, #20]
}
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	bf00      	nop
 800b6e8:	200001a4 	.word	0x200001a4

0800b6ec <HW_TS_Start>:
{
 800b6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6f4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b6f8:	b672      	cpsid	i
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800b6fa:	2003      	movs	r0, #3
 800b6fc:	f001 f98c 	bl	800ca18 <HAL_NVIC_DisableIRQ>
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800b700:	483b      	ldr	r0, [pc, #236]	; (800b7f0 <HW_TS_Start+0x104>)
 800b702:	f04f 0818 	mov.w	r8, #24
 800b706:	fb08 0705 	mla	r7, r8, r5, r0
 800b70a:	2302      	movs	r3, #2
 800b70c:	753b      	strb	r3, [r7, #20]
  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800b70e:	613c      	str	r4, [r7, #16]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800b710:	60fc      	str	r4, [r7, #12]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b712:	7903      	ldrb	r3, [r0, #4]
 800b714:	2b06      	cmp	r3, #6
 800b716:	b2da      	uxtb	r2, r3
 800b718:	4604      	mov	r4, r0
 800b71a:	d116      	bne.n	800b74a <HW_TS_Start+0x5e>
    PreviousRunningTimerID = CurrentRunningTimerID;
 800b71c:	7903      	ldrb	r3, [r0, #4]
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	7143      	strb	r3, [r0, #5]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800b722:	f04f 33ff 	mov.w	r3, #4294967295
    CurrentRunningTimerID = TimerID;
 800b726:	7105      	strb	r5, [r0, #4]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800b728:	777a      	strb	r2, [r7, #29]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800b72a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    time_elapsed = 0;
 800b72e:	2000      	movs	r0, #0
  localcurrentrunningtimerid = CurrentRunningTimerID;
 800b730:	7923      	ldrb	r3, [r4, #4]
  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800b732:	7962      	ldrb	r2, [r4, #5]
 800b734:	429a      	cmp	r2, r3
 800b736:	d053      	beq.n	800b7e0 <HW_TS_Start+0xf4>
    RescheduleTimerList();
 800b738:	f7ff ff08 	bl	800b54c <RescheduleTimerList>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800b73c:	2003      	movs	r0, #3
 800b73e:	f001 f95d 	bl	800c9fc <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b742:	f386 8810 	msr	PRIMASK, r6
}
 800b746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    time_elapsed = ReturnTimeElapsed();
 800b74a:	f7ff fe45 	bl	800b3d8 <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	4403      	add	r3, r0
 800b752:	613b      	str	r3, [r7, #16]
    time_left = aTimerContext[TimerID].CountLeft;
 800b754:	6939      	ldr	r1, [r7, #16]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800b756:	7923      	ldrb	r3, [r4, #4]
 800b758:	fb08 4303 	mla	r3, r8, r3, r4
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	4299      	cmp	r1, r3
 800b760:	d323      	bcc.n	800b7aa <HW_TS_Start+0xbe>
      timer_id_lookup = CurrentRunningTimerID;
 800b762:	7922      	ldrb	r2, [r4, #4]
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800b764:	b2d3      	uxtb	r3, r2
        next_id = aTimerContext[timer_id_lookup].NextID;
 800b766:	fb08 4202 	mla	r2, r8, r2, r4
 800b76a:	7f52      	ldrb	r2, [r2, #29]
 800b76c:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800b76e:	2a06      	cmp	r2, #6
 800b770:	d004      	beq.n	800b77c <HW_TS_Start+0x90>
 800b772:	fb08 4202 	mla	r2, r8, r2, r4
 800b776:	6912      	ldr	r2, [r2, #16]
 800b778:	4291      	cmp	r1, r2
 800b77a:	d212      	bcs.n	800b7a2 <HW_TS_Start+0xb6>
  next_id = aTimerContext[RefTimerID].NextID;
 800b77c:	2218      	movs	r2, #24
 800b77e:	fb02 4103 	mla	r1, r2, r3, r4
 800b782:	7f49      	ldrb	r1, [r1, #29]
 800b784:	b2cf      	uxtb	r7, r1
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800b786:	2906      	cmp	r1, #6
    aTimerContext[next_id].PreviousID = TimerID;
 800b788:	bf1c      	itt	ne
 800b78a:	fb02 4207 	mlane	r2, r2, r7, r4
 800b78e:	7715      	strbne	r5, [r2, #28]
  aTimerContext[TimerID].NextID = next_id;
 800b790:	2218      	movs	r2, #24
 800b792:	fb02 4105 	mla	r1, r2, r5, r4
 800b796:	774f      	strb	r7, [r1, #29]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800b798:	770b      	strb	r3, [r1, #28]
  aTimerContext[RefTimerID].NextID = TimerID;
 800b79a:	fb02 4303 	mla	r3, r2, r3, r4
 800b79e:	775d      	strb	r5, [r3, #29]
  return;
 800b7a0:	e7c6      	b.n	800b730 <HW_TS_Start+0x44>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800b7a2:	fb08 4303 	mla	r3, r8, r3, r4
 800b7a6:	7f5a      	ldrb	r2, [r3, #29]
 800b7a8:	e7dc      	b.n	800b764 <HW_TS_Start+0x78>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800b7aa:	7923      	ldrb	r3, [r4, #4]
  if(RefTimerID != CurrentRunningTimerID)
 800b7ac:	7922      	ldrb	r2, [r4, #4]
 800b7ae:	4293      	cmp	r3, r2
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800b7b0:	b2d9      	uxtb	r1, r3
  if(RefTimerID != CurrentRunningTimerID)
 800b7b2:	fb08 f303 	mul.w	r3, r8, r3
 800b7b6:	d010      	beq.n	800b7da <HW_TS_Start+0xee>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800b7b8:	4423      	add	r3, r4
 800b7ba:	7f1a      	ldrb	r2, [r3, #28]
    aTimerContext[previous_id].NextID = TimerID;
 800b7bc:	fb08 4802 	mla	r8, r8, r2, r4
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800b7c0:	fa5f fc82 	uxtb.w	ip, r2
    aTimerContext[previous_id].NextID = TimerID;
 800b7c4:	f888 501d 	strb.w	r5, [r8, #29]
    aTimerContext[TimerID].NextID = RefTimerID;
 800b7c8:	7779      	strb	r1, [r7, #29]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800b7ca:	f887 c01c 	strb.w	ip, [r7, #28]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800b7ce:	771d      	strb	r5, [r3, #28]
      PreviousRunningTimerID = CurrentRunningTimerID;
 800b7d0:	7923      	ldrb	r3, [r4, #4]
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	7163      	strb	r3, [r4, #5]
      CurrentRunningTimerID = TimerID;
 800b7d6:	7125      	strb	r5, [r4, #4]
 800b7d8:	e7aa      	b.n	800b730 <HW_TS_Start+0x44>
    aTimerContext[TimerID].NextID = RefTimerID;
 800b7da:	7779      	strb	r1, [r7, #29]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800b7dc:	4423      	add	r3, r4
 800b7de:	e7f6      	b.n	800b7ce <HW_TS_Start+0xe2>
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800b7e0:	2318      	movs	r3, #24
 800b7e2:	fb03 4405 	mla	r4, r3, r5, r4
 800b7e6:	6923      	ldr	r3, [r4, #16]
 800b7e8:	1a18      	subs	r0, r3, r0
 800b7ea:	6120      	str	r0, [r4, #16]
 800b7ec:	e7a6      	b.n	800b73c <HW_TS_Start+0x50>
 800b7ee:	bf00      	nop
 800b7f0:	200001a4 	.word	0x200001a4

0800b7f4 <HW_TS_RTC_Wakeup_Handler>:
{
 800b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7f8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b7fc:	b672      	cpsid	i
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800b7fe:	4920      	ldr	r1, [pc, #128]	; (800b880 <HW_TS_RTC_Wakeup_Handler+0x8c>)
 800b800:	680b      	ldr	r3, [r1, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	689a      	ldr	r2, [r3, #8]
 800b806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b80a:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 800b80c:	790c      	ldrb	r4, [r1, #4]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800b80e:	2218      	movs	r2, #24
  local_current_running_timer_id = CurrentRunningTimerID;
 800b810:	b2e6      	uxtb	r6, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800b812:	fb02 1404 	mla	r4, r2, r4, r1
 800b816:	7d22      	ldrb	r2, [r4, #20]
 800b818:	2a02      	cmp	r2, #2
 800b81a:	d124      	bne.n	800b866 <HW_TS_RTC_Wakeup_Handler+0x72>
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800b81c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800b820:	69a7      	ldr	r7, [r4, #24]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800b822:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 800b826:	b1cb      	cbz	r3, 800b85c <HW_TS_RTC_Wakeup_Handler+0x68>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800b828:	7d63      	ldrb	r3, [r4, #21]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	b2d9      	uxtb	r1, r3
 800b82e:	d10f      	bne.n	800b850 <HW_TS_RTC_Wakeup_Handler+0x5c>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800b830:	4630      	mov	r0, r6
 800b832:	f7ff fd9b 	bl	800b36c <UnlinkTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b836:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800b83a:	68e1      	ldr	r1, [r4, #12]
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7ff ff55 	bl	800b6ec <HW_TS_Start>
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800b842:	4642      	mov	r2, r8
 800b844:	4631      	mov	r1, r6
 800b846:	4638      	mov	r0, r7
 800b848:	f000 fe70 	bl	800c52c <HW_TS_RTC_Int_AppNot>
}
 800b84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b850:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Stop(local_current_running_timer_id);
 800b854:	4630      	mov	r0, r6
 800b856:	f7ff fef7 	bl	800b648 <HW_TS_Stop>
 800b85a:	e7f2      	b.n	800b842 <HW_TS_RTC_Wakeup_Handler+0x4e>
      RescheduleTimerList();
 800b85c:	f7ff fe76 	bl	800b54c <RescheduleTimerList>
 800b860:	f385 8810 	msr	PRIMASK, r5
  return;
 800b864:	e7f2      	b.n	800b84c <HW_TS_RTC_Wakeup_Handler+0x58>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800b866:	68da      	ldr	r2, [r3, #12]
 800b868:	0752      	lsls	r2, r2, #29
 800b86a:	d5fc      	bpl.n	800b866 <HW_TS_RTC_Wakeup_Handler+0x72>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800b86c:	68da      	ldr	r2, [r3, #12]
 800b86e:	b2d2      	uxtb	r2, r2
 800b870:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b874:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800b876:	4b03      	ldr	r3, [pc, #12]	; (800b884 <HW_TS_RTC_Wakeup_Handler+0x90>)
 800b878:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b87c:	615a      	str	r2, [r3, #20]
 800b87e:	e7ef      	b.n	800b860 <HW_TS_RTC_Wakeup_Handler+0x6c>
 800b880:	200001a4 	.word	0x200001a4
 800b884:	40010400 	.word	0x40010400

0800b888 <hci_timeout_callback>:

  return;
}

void hci_timeout_callback(void)
{
 800b888:	b508      	push	{r3, lr}
  HciLayerTimeout = TRUE;
 800b88a:	4b04      	ldr	r3, [pc, #16]	; (800b89c <hci_timeout_callback+0x14>)
 800b88c:	2201      	movs	r2, #1
 800b88e:	701a      	strb	r2, [r3, #0]

  /**
   * Unlock hci_send_req() that is waiting for an event that will never come
   */
  TL_BLE_HCI_RxCmdResp();
 800b890:	f000 f8df 	bl	800ba52 <TL_BLE_HCI_RxCmdResp>
   * Notify the application the HCI interface has timed out
   */
  TL_BLE_HCI_ToNot();

  return;
}
 800b894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TL_BLE_HCI_ToNot();
 800b898:	f000 b8de 	b.w	800ba58 <TL_BLE_HCI_ToNot>
 800b89c:	20000248 	.word	0x20000248

0800b8a0 <TL_BLE_EvtReceived>:
{
 800b8a0:	b508      	push	{r3, lr}
  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 800b8a2:	7a43      	ldrb	r3, [r0, #9]
 800b8a4:	3b0e      	subs	r3, #14
 800b8a6:	2b01      	cmp	r3, #1
{
 800b8a8:	4601      	mov	r1, r0
  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 800b8aa:	d806      	bhi.n	800b8ba <TL_BLE_EvtReceived+0x1a>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b8ac:	4807      	ldr	r0, [pc, #28]	; (800b8cc <TL_BLE_EvtReceived+0x2c>)
 800b8ae:	f000 fa40 	bl	800bd32 <LST_insert_tail>
}
 800b8b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TL_BLE_HCI_RxCmdResp(); /**< Notify the application a full Cmd Event has been received */
 800b8b6:	f000 b8cc 	b.w	800ba52 <TL_BLE_HCI_RxCmdResp>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b8ba:	4805      	ldr	r0, [pc, #20]	; (800b8d0 <TL_BLE_EvtReceived+0x30>)
 800b8bc:	f000 fa39 	bl	800bd32 <LST_insert_tail>
}
 800b8c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TL_BLE_HCI_UserEvtProcReq((TL_PacketHeader_t*)&HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b8c4:	4802      	ldr	r0, [pc, #8]	; (800b8d0 <TL_BLE_EvtReceived+0x30>)
 800b8c6:	f000 b8e1 	b.w	800ba8c <TL_BLE_HCI_UserEvtProcReq>
 800b8ca:	bf00      	nop
 800b8cc:	20000249 	.word	0x20000249
 800b8d0:	20000251 	.word	0x20000251

0800b8d4 <TL_BLE_HCI_Init>:

void TL_BLE_HCI_Init(TL_BLE_HCI_InitMode_t initmode, TL_CmdPacket_t * p_cmdbuffer, uint8_t *p_evtpool, uint32_t evtpoolsize)
{
 800b8d4:	b530      	push	{r4, r5, lr}
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800b8d6:	4c18      	ldr	r4, [pc, #96]	; (800b938 <TL_BLE_HCI_Init+0x64>)
{
 800b8d8:	b085      	sub	sp, #20
 800b8da:	4605      	mov	r5, r0
  LST_init_head (&HciCmdEventQueue);
 800b8dc:	1c60      	adds	r0, r4, #1
{
 800b8de:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b8e2:	9301      	str	r3, [sp, #4]
  LST_init_head (&HciCmdEventQueue);
 800b8e4:	f000 fa18 	bl	800bd18 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;

  if(initmode == TL_BLE_HCI_InitFull)
 800b8e8:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
  pCmdBuffer = p_cmdbuffer;
 800b8ec:	9903      	ldr	r1, [sp, #12]
 800b8ee:	6161      	str	r1, [r4, #20]
  if(initmode == TL_BLE_HCI_InitFull)
 800b8f0:	2d01      	cmp	r5, #1
 800b8f2:	9303      	str	r3, [sp, #12]
 800b8f4:	d111      	bne.n	800b91a <TL_BLE_HCI_Init+0x46>
  LST_init_head (&HciAsynchEventQueue);
 800b8f6:	f104 0009 	add.w	r0, r4, #9
 800b8fa:	9101      	str	r1, [sp, #4]
 800b8fc:	f000 fa0c 	bl	800bd18 <LST_init_head>
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 800b900:	4628      	mov	r0, r5
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 800b902:	7625      	strb	r5, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 800b904:	f000 fdf8 	bl	800c4f8 <TL_BLE_HCI_StatusNot>
  {
    Initialization();

    TL_BLE_Init(TL_BLE_Init_Full, p_cmdbuffer, p_evtpool, evtpoolsize);
 800b908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b90c:	9901      	ldr	r1, [sp, #4]
 800b90e:	4628      	mov	r0, r5

    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
  }

  return;
}
 800b910:	b005      	add	sp, #20
 800b912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 800b916:	f000 b987 	b.w	800bc28 <TL_BLE_Init>
  LST_init_head (&HciAsynchEventQueue);
 800b91a:	f104 0009 	add.w	r0, r4, #9
 800b91e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800b922:	f000 f9f9 	bl	800bd18 <LST_init_head>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 800b926:	2001      	movs	r0, #1
 800b928:	7620      	strb	r0, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 800b92a:	f000 fde5 	bl	800c4f8 <TL_BLE_HCI_StatusNot>
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 800b92e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b932:	9901      	ldr	r1, [sp, #4]
 800b934:	2000      	movs	r0, #0
 800b936:	e7eb      	b.n	800b910 <TL_BLE_HCI_Init+0x3c>
 800b938:	20000248 	.word	0x20000248

0800b93c <TL_BLE_HCI_UserEvtProc>:
{
  return HCICmdStatus;
}

void TL_BLE_HCI_UserEvtProc(void)
{
 800b93c:	b513      	push	{r0, r1, r4, lr}
  TL_EvtPacket_t *phcievtbuffer;

  while(LST_is_empty(&HciAsynchEventQueue) == FALSE)
 800b93e:	4c09      	ldr	r4, [pc, #36]	; (800b964 <TL_BLE_HCI_UserEvtProc+0x28>)
 800b940:	4808      	ldr	r0, [pc, #32]	; (800b964 <TL_BLE_HCI_UserEvtProc+0x28>)
 800b942:	f000 f9ec 	bl	800bd1e <LST_is_empty>
 800b946:	b108      	cbz	r0, 800b94c <TL_BLE_HCI_UserEvtProc+0x10>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
    TL_BLE_EvtDone( phcievtbuffer);
  }

  return;
}
 800b948:	b002      	add	sp, #8
 800b94a:	bd10      	pop	{r4, pc}
    LST_remove_head (&HciAsynchEventQueue, (tListNode **)&phcievtbuffer);
 800b94c:	a901      	add	r1, sp, #4
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 fa06 	bl	800bd60 <LST_remove_head>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
 800b954:	9801      	ldr	r0, [sp, #4]
 800b956:	3008      	adds	r0, #8
 800b958:	f000 f89b 	bl	800ba92 <TL_BLE_HCI_UserEvtRx>
    TL_BLE_EvtDone( phcievtbuffer);
 800b95c:	9801      	ldr	r0, [sp, #4]
 800b95e:	f000 f9d9 	bl	800bd14 <TL_BLE_EvtDone>
 800b962:	e7ed      	b.n	800b940 <TL_BLE_HCI_UserEvtProc+0x4>
 800b964:	20000251 	.word	0x20000251

0800b968 <TL_BLE_HCI_SendCmd>:

int32_t TL_BLE_HCI_SendCmd( TL_BLE_HCI_Cmd_t *p_cmd )
{
 800b968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b96c:	4605      	mov	r5, r0
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdBusy);
 800b96e:	2000      	movs	r0, #0
 800b970:	f000 fdc2 	bl	800c4f8 <TL_BLE_HCI_StatusNot>
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  int return_value;

  Cmd_SetStatus(TL_BLE_HCI_CmdBusy);
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b974:	886b      	ldrh	r3, [r5, #2]
 800b976:	882a      	ldrh	r2, [r5, #0]
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 800b978:	4c31      	ldr	r4, [pc, #196]	; (800ba40 <TL_BLE_HCI_SendCmd+0xd8>)
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b97a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b97e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b982:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  return return_value;
}

void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b986:	6960      	ldr	r0, [r4, #20]
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 800b988:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b98a:	f8a0 3009 	strh.w	r3, [r0, #9]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b98e:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.plen = plen;
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b990:	b2d2      	uxtb	r2, r2
 800b992:	300c      	adds	r0, #12
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b994:	b29f      	uxth	r7, r3
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 800b996:	7626      	strb	r6, [r4, #24]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b998:	f002 f866 	bl	800da68 <memcpy>

  TL_BLE_SendCmd();
 800b99c:	f000 f96c 	bl	800bc78 <TL_BLE_SendCmd>
  HciLayerTimeout = FALSE;
 800b9a0:	4622      	mov	r2, r4
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 800b9a2:	4928      	ldr	r1, [pc, #160]	; (800ba44 <TL_BLE_HCI_SendCmd+0xdc>)
  HciLayerTimeout = FALSE;
 800b9a4:	f802 6b19 	strb.w	r6, [r2], #25
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 800b9a8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b9ac:	f000 f85a 	bl	800ba64 <TL_BLE_HCI_TimStart>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b9b0:	f104 0801 	add.w	r8, r4, #1
  return HCICmdStatus;
 800b9b4:	7e23      	ldrb	r3, [r4, #24]
  while((CmdGetStatus() == TL_BLE_HCI_CmdBusy) && (HciLayerTimeout == FALSE))
 800b9b6:	b90b      	cbnz	r3, 800b9bc <TL_BLE_HCI_SendCmd+0x54>
 800b9b8:	7823      	ldrb	r3, [r4, #0]
 800b9ba:	b15b      	cbz	r3, 800b9d4 <TL_BLE_HCI_SendCmd+0x6c>
  TL_BLE_HCI_TimStop(hci_timer_id);
 800b9bc:	7e60      	ldrb	r0, [r4, #25]
 800b9be:	f000 f84f 	bl	800ba60 <TL_BLE_HCI_TimStop>
  if(HciLayerTimeout == TRUE)
 800b9c2:	7820      	ldrb	r0, [r4, #0]
}
 800b9c4:	2801      	cmp	r0, #1
 800b9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ca:	bf18      	it	ne
 800b9cc:	2000      	movne	r0, #0
 800b9ce:	b003      	add	sp, #12
 800b9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TL_BLE_HCI_WaitCmdResp();
 800b9d4:	f000 f841 	bl	800ba5a <TL_BLE_HCI_WaitCmdResp>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 800b9d8:	f04f 0901 	mov.w	r9, #1
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b9dc:	4640      	mov	r0, r8
 800b9de:	f000 f99e 	bl	800bd1e <LST_is_empty>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d1e6      	bne.n	800b9b4 <TL_BLE_HCI_SendCmd+0x4c>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800b9e6:	a901      	add	r1, sp, #4
 800b9e8:	4640      	mov	r0, r8
 800b9ea:	f000 f9b9 	bl	800bd60 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_EVT_CS_OPCODE)
 800b9ee:	9e01      	ldr	r6, [sp, #4]
 800b9f0:	7a73      	ldrb	r3, [r6, #9]
 800b9f2:	2b0f      	cmp	r3, #15
 800b9f4:	d111      	bne.n	800ba1a <TL_BLE_HCI_SendCmd+0xb2>
        if(pcommand_status_event->cmdcode == opcode)
 800b9f6:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 800b9fa:	42bb      	cmp	r3, r7
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800b9fc:	bf02      	ittt	eq
 800b9fe:	692b      	ldreq	r3, [r5, #16]
 800ba00:	7af2      	ldrbeq	r2, [r6, #11]
 800ba02:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 800ba04:	7b33      	ldrb	r3, [r6, #12]
        if(pcommand_complete_event->numcmd != 0)
 800ba06:	b123      	cbz	r3, 800ba12 <TL_BLE_HCI_SendCmd+0xaa>
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 800ba08:	2001      	movs	r0, #1
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 800ba0a:	f884 9018 	strb.w	r9, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 800ba0e:	f000 fd73 	bl	800c4f8 <TL_BLE_HCI_StatusNot>
      TL_BLE_EvtDone( pevtpacket);
 800ba12:	9801      	ldr	r0, [sp, #4]
 800ba14:	f000 f97e 	bl	800bd14 <TL_BLE_EvtDone>
 800ba18:	e7e0      	b.n	800b9dc <TL_BLE_HCI_SendCmd+0x74>
        if(pcommand_complete_event->cmdcode == opcode)
 800ba1a:	89b3      	ldrh	r3, [r6, #12]
 800ba1c:	42bb      	cmp	r3, r7
 800ba1e:	d10c      	bne.n	800ba3a <TL_BLE_HCI_SendCmd+0xd2>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 800ba20:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800ba22:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800ba24:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 800ba26:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800ba28:	b2d2      	uxtb	r2, r2
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	bfa8      	it	ge
 800ba2e:	461a      	movge	r2, r3
 800ba30:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800ba32:	f106 010e 	add.w	r1, r6, #14
 800ba36:	f002 f817 	bl	800da68 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 800ba3a:	7af3      	ldrb	r3, [r6, #11]
 800ba3c:	e7e3      	b.n	800ba06 <TL_BLE_HCI_SendCmd+0x9e>
 800ba3e:	bf00      	nop
 800ba40:	20000248 	.word	0x20000248
 800ba44:	0800b889 	.word	0x0800b889

0800ba48 <hci_send_req>:


/* This API is imposed by the MW */
int32_t hci_send_req(struct hci_request *r, uint8_t async)
{
  return ( TL_BLE_HCI_SendCmd( (TL_BLE_HCI_Cmd_t *)r ) );
 800ba48:	f7ff bf8e 	b.w	800b968 <TL_BLE_HCI_SendCmd>

0800ba4c <TL_BLE_R_EvtProcReq>:



void TL_BLE_R_EvtProcReq(void)
{
  SCH_SetTask(CFG_IdleTask_TlEvt);
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	f000 ba43 	b.w	800bed8 <SCH_SetTask>

0800ba52 <TL_BLE_HCI_RxCmdResp>:
  return;
}

void TL_BLE_HCI_RxCmdResp()
{
  SCH_SetEvt(CFG_IdleEvt_HciCmdEvtResp);
 800ba52:	2000      	movs	r0, #0
 800ba54:	f000 ba72 	b.w	800bf3c <SCH_SetEvt>

0800ba58 <TL_BLE_HCI_ToNot>:
}

void TL_BLE_HCI_ToNot(void)
{
  return;
}
 800ba58:	4770      	bx	lr

0800ba5a <TL_BLE_HCI_WaitCmdResp>:

void TL_BLE_HCI_WaitCmdResp(void)
{
  SCH_WaitEvt(CFG_IdleEvt_HciCmdEvtResp);
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	f000 bab0 	b.w	800bfc0 <SCH_WaitEvt>

0800ba60 <TL_BLE_HCI_TimStop>:
  return;
}

void TL_BLE_HCI_TimStop(uint8_t timerID)
{
  HW_TS_Delete(timerID);
 800ba60:	f7ff be36 	b.w	800b6d0 <HW_TS_Delete>

0800ba64 <TL_BLE_HCI_TimStart>:

  return;
}

void TL_BLE_HCI_TimStart(uint32_t expiryTime, void(*timercb)(void), uint8_t *timerID)
{
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4614      	mov	r4, r2
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 800ba68:	2200      	movs	r2, #0
{
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	4605      	mov	r5, r0
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 800ba6e:	4621      	mov	r1, r4
 800ba70:	4610      	mov	r0, r2
 800ba72:	f7ff fd3f 	bl	800b4f4 <HW_TS_Create>
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 800ba76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ba7a:	434d      	muls	r5, r1
 800ba7c:	7820      	ldrb	r0, [r4, #0]
 800ba7e:	213f      	movs	r1, #63	; 0x3f
 800ba80:	fbb5 f1f1 	udiv	r1, r5, r1

  return;
}
 800ba84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 800ba88:	f7ff be30 	b.w	800b6ec <HW_TS_Start>

0800ba8c <TL_BLE_HCI_UserEvtProcReq>:
 * @param  None
 * @retval None
 */
void TL_BLE_HCI_UserEvtProcReq( TL_PacketHeader_t *p_userevt_queue )
{
  SCH_SetTask(CFG_IdleTask_HciAsynchEvt);
 800ba8c:	2005      	movs	r0, #5
 800ba8e:	f000 ba23 	b.w	800bed8 <SCH_SetTask>

0800ba92 <TL_BLE_HCI_UserEvtRx>:
 * @param  pckt: The user event received from the BlueNRG device
 * @retval None
 */
void TL_BLE_HCI_UserEvtRx(void *pckt)
{
  SVCCTL_HCI_UserEvtRx(pckt);
 800ba92:	f7fe bf91 	b.w	800a9b8 <SVCCTL_HCI_UserEvtRx>
	...

0800ba98 <Event_Queue_Process>:
  return;
}

/* Private Functions Definition ------------------------------------------------------*/
static void Event_Queue_Process(TL_BLE_R_EvtPacketType_t tl_event_queue_type)
{
 800ba98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba9c:	4e32      	ldr	r6, [pc, #200]	; (800bb68 <Event_Queue_Process+0xd0>)
  TL_EvtPacket_t * ptl_evt_buffer;
  TL_EvtPacket_t *plarge_hci_buffer;

  if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 800ba9e:	4605      	mov	r5, r0
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d05e      	beq.n	800bb62 <Event_Queue_Process+0xca>
  {
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
  }
  else
  {
    plarge_hci_buffer = (TL_EvtPacket_t*)pCmdBuffer;
 800baa4:	f8d6 710c 	ldr.w	r7, [r6, #268]	; 0x10c
  }

  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 800baa8:	4b30      	ldr	r3, [pc, #192]	; (800bb6c <Event_Queue_Process+0xd4>)
 800baaa:	240e      	movs	r4, #14
 800baac:	436c      	muls	r4, r5
 800baae:	eb03 0804 	add.w	r8, r3, r4
  {
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 800bab2:	4434      	add	r4, r6
 800bab4:	e02e      	b.n	800bb14 <Event_Queue_Process+0x7c>
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
 800bab6:	4640      	mov	r0, r8
 800bab8:	a901      	add	r1, sp, #4
 800baba:	f000 f951 	bl	800bd60 <LST_remove_head>
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 800babe:	f894 9118 	ldrb.w	r9, [r4, #280]	; 0x118
 800bac2:	9801      	ldr	r0, [sp, #4]
 800bac4:	f1b9 0f00 	cmp.w	r9, #0
 800bac8:	d103      	bne.n	800bad2 <Event_Queue_Process+0x3a>
    {
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl = ptl_evt_buffer->evtserial.evt.plen + TL_EVT_HDR_SIZE;
 800baca:	7a83      	ldrb	r3, [r0, #10]
 800bacc:	3303      	adds	r3, #3
 800bace:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
    }

    if(TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl > TL_BLE_EVENT_FRAME_SIZE)
 800bad2:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
 800bad6:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800bada:	d928      	bls.n	800bb2e <Event_Queue_Process+0x96>
      /**
       * The packet is not complete
       */
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 800badc:	f8b4 c11c 	ldrh.w	ip, [r4, #284]	; 0x11c
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
 800bae0:	2301      	movs	r3, #1
 800bae2:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 800bae6:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 800baea:	f107 0308 	add.w	r3, r7, #8
 800baee:	f100 0108 	add.w	r1, r0, #8
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 800baf2:	f8a4 211a 	strh.w	r2, [r4, #282]	; 0x11a
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 800baf6:	eb03 000c 	add.w	r0, r3, ip
 800bafa:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bafe:	f001 ffb3 	bl	800da68 <memcpy>
      MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 800bb02:	9801      	ldr	r0, [sp, #4]
 800bb04:	f000 f9c6 	bl	800be94 <MM_ReleaseBuffer>
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset += TL_BLE_EVENT_FRAME_SIZE;
 800bb08:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 800bb0c:	f503 7381 	add.w	r3, r3, #258	; 0x102
      else
      {
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
      }
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset  = 0;
 800bb10:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 800bb14:	4640      	mov	r0, r8
 800bb16:	f000 f902 	bl	800bd1e <LST_is_empty>
 800bb1a:	b928      	cbnz	r0, 800bb28 <Event_Queue_Process+0x90>
 800bb1c:	f896 312c 	ldrb.w	r3, [r6, #300]	; 0x12c
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d0c8      	beq.n	800bab6 <Event_Queue_Process+0x1e>
 800bb24:	2d01      	cmp	r5, #1
 800bb26:	d0c6      	beq.n	800bab6 <Event_Queue_Process+0x1e>
    }
  }

  return;
}
 800bb28:	b003      	add	sp, #12
 800bb2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_cont)
 800bb2e:	f1b9 0f01 	cmp.w	r9, #1
 800bb32:	d110      	bne.n	800bb56 <Event_Queue_Process+0xbe>
        memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl);
 800bb34:	f8b4 c11c 	ldrh.w	ip, [r4, #284]	; 0x11c
 800bb38:	f107 0308 	add.w	r3, r7, #8
 800bb3c:	f100 0108 	add.w	r1, r0, #8
 800bb40:	eb03 000c 	add.w	r0, r3, ip
 800bb44:	f001 ff90 	bl	800da68 <memcpy>
        MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 800bb48:	9801      	ldr	r0, [sp, #4]
 800bb4a:	f000 f9a3 	bl	800be94 <MM_ReleaseBuffer>
        if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 800bb4e:	b90d      	cbnz	r5, 800bb54 <Event_Queue_Process+0xbc>
          HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Busy;
 800bb50:	f886 912c 	strb.w	r9, [r6, #300]	; 0x12c
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)plarge_hci_buffer );
 800bb54:	4638      	mov	r0, r7
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
 800bb56:	f7ff fea3 	bl	800b8a0 <TL_BLE_EvtReceived>
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 800bb60:	e7d6      	b.n	800bb10 <Event_Queue_Process+0x78>
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
 800bb62:	4637      	mov	r7, r6
 800bb64:	e7a0      	b.n	800baa8 <Event_Queue_Process+0x10>
 800bb66:	bf00      	nop
 800bb68:	20000264 	.word	0x20000264
 800bb6c:	20000374 	.word	0x20000374

0800bb70 <TL_BLE_R_EvtInput>:
{
 800bb70:	b508      	push	{r3, lr}
  LST_insert_tail (&TLQueueEvtContext[hci_evt_packet_type].TlBufferQueue, (tListNode *)hci_evt_buffer);
 800bb72:	4b05      	ldr	r3, [pc, #20]	; (800bb88 <TL_BLE_R_EvtInput+0x18>)
 800bb74:	220e      	movs	r2, #14
 800bb76:	fb02 3000 	mla	r0, r2, r0, r3
 800bb7a:	f000 f8da 	bl	800bd32 <LST_insert_tail>
}
 800bb7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TL_BLE_R_EvtProcReq();
 800bb82:	f7ff bf63 	b.w	800ba4c <TL_BLE_R_EvtProcReq>
 800bb86:	bf00      	nop
 800bb88:	20000374 	.word	0x20000374

0800bb8c <TL_BLE_R_EvtProc>:
{
 800bb8c:	b508      	push	{r3, lr}
  Event_Queue_Process(TL_BLE_R_HciCmdEvt);
 800bb8e:	2001      	movs	r0, #1
 800bb90:	f7ff ff82 	bl	800ba98 <Event_Queue_Process>
}
 800bb94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Event_Queue_Process(TL_BLE_R_HciAsynchEvt);
 800bb98:	2000      	movs	r0, #0
 800bb9a:	f7ff bf7d 	b.w	800ba98 <Event_Queue_Process>
	...

0800bba0 <TL_BLE_R_Init>:
{
 800bba0:	b538      	push	{r3, r4, r5, lr}
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 800bba2:	4c0c      	ldr	r4, [pc, #48]	; (800bbd4 <TL_BLE_R_Init+0x34>)
 800bba4:	2300      	movs	r3, #0
{
 800bba6:	4605      	mov	r5, r0
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 800bba8:	f504 7088 	add.w	r0, r4, #272	; 0x110
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 800bbac:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciPacketStatus = hci_packet_start;
 800bbb0:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciLargeBufferOffset = 0;
 800bbb4:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciLargeBufferOffset = 0;
 800bbb8:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
  HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 800bbbc:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 800bbc0:	f000 f8aa 	bl	800bd18 <LST_init_head>
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciCmdEvt].TlBufferQueue);
 800bbc4:	f504 708f 	add.w	r0, r4, #286	; 0x11e
 800bbc8:	f000 f8a6 	bl	800bd18 <LST_init_head>
  pCmdBuffer = cmdbuffer;
 800bbcc:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
}
 800bbd0:	bd38      	pop	{r3, r4, r5, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20000264 	.word	0x20000264

0800bbd8 <TL_BLE_R_EvtDone>:

void TL_BLE_R_EvtDone(TL_EvtPacket_t * hcievt)
{
  if(hcievt == (TL_EvtPacket_t *)&HciLargeAsynchBuffer)
 800bbd8:	4a07      	ldr	r2, [pc, #28]	; (800bbf8 <TL_BLE_R_EvtDone+0x20>)
 800bbda:	4290      	cmp	r0, r2
 800bbdc:	d104      	bne.n	800bbe8 <TL_BLE_R_EvtDone+0x10>
  {
    HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c

    /**
     * Check if there are waiting events to be copied in the large buffer
     */
    TL_BLE_R_EvtProcReq();
 800bbe4:	f7ff bf32 	b.w	800ba4c <TL_BLE_R_EvtProcReq>
  }
  else if(hcievt != (TL_EvtPacket_t *)pCmdBuffer)
 800bbe8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 800bbec:	4282      	cmp	r2, r0
 800bbee:	d001      	beq.n	800bbf4 <TL_BLE_R_EvtDone+0x1c>
  {
    MM_ReleaseBuffer((MM_pBufAdd_t)hcievt);
 800bbf0:	f000 b950 	b.w	800be94 <MM_ReleaseBuffer>
  }

  return;
}
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	20000264 	.word	0x20000264

0800bbfc <Allocate_New_Buffer_To_TL>:
}


/* Private Functions Definition ------------------------------------------------------*/
static void Allocate_New_Buffer_To_TL(void)
{
 800bbfc:	b508      	push	{r3, lr}
  pHciEventBuffer =  (TL_EvtPacket_t*) MM_GetBuffer(sizeof(TL_PacketHeader_t) + TL_BLE_EVENT_FRAME_SIZE, (MM_pCb_t) Allocate_New_Buffer_To_TL);
 800bbfe:	4908      	ldr	r1, [pc, #32]	; (800bc20 <Allocate_New_Buffer_To_TL+0x24>)
 800bc00:	f44f 7085 	mov.w	r0, #266	; 0x10a
 800bc04:	f000 f92c 	bl	800be60 <MM_GetBuffer>
 800bc08:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <Allocate_New_Buffer_To_TL+0x28>)
 800bc0a:	6018      	str	r0, [r3, #0]
  if(pHciEventBuffer)
 800bc0c:	b138      	cbz	r0, 800bc1e <Allocate_New_Buffer_To_TL+0x22>
  {
    TlSpiIsrContext.TlSizeLeftInBufferFrame = TL_BLE_EVENT_FRAME_SIZE;
 800bc0e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800bc12:	8119      	strh	r1, [r3, #8]
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 800bc14:	3008      	adds	r0, #8
  }

  return;
}
 800bc16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 800bc1a:	f7ff b9f5 	b.w	800b008 <HW_BNRG_EvtReq>
}
 800bc1e:	bd08      	pop	{r3, pc}
 800bc20:	0800bbfd 	.word	0x0800bbfd
 800bc24:	20000394 	.word	0x20000394

0800bc28 <TL_BLE_Init>:
{
 800bc28:	b570      	push	{r4, r5, r6, lr}
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 800bc2a:	4e11      	ldr	r6, [pc, #68]	; (800bc70 <TL_BLE_Init+0x48>)
{
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	4610      	mov	r0, r2
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 800bc30:	2200      	movs	r2, #0
{
 800bc32:	460d      	mov	r5, r1
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 800bc34:	7132      	strb	r2, [r6, #4]
  MM_Init(evtpool, evtpoolsize, ELT_SIZE);
 800bc36:	4619      	mov	r1, r3
 800bc38:	f44f 7285 	mov.w	r2, #266	; 0x10a
 800bc3c:	f000 f8f0 	bl	800be20 <MM_Init>
  TL_BLE_R_Init(cmdbuffer);
 800bc40:	4628      	mov	r0, r5
  pCmdBuffer = cmdbuffer;
 800bc42:	60f5      	str	r5, [r6, #12]
  TL_BLE_R_Init(cmdbuffer);
 800bc44:	f7ff ffac 	bl	800bba0 <TL_BLE_R_Init>
  if( initmode == TL_BLE_Init_Limited)
 800bc48:	b934      	cbnz	r4, 800bc58 <TL_BLE_Init+0x30>
    HW_BNRG_Init(HW_BNRG_Limited);
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f7ff f940 	bl	800aed0 <HW_BNRG_Init>
}
 800bc50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Allocate_New_Buffer_To_TL();
 800bc54:	f7ff bfd2 	b.w	800bbfc <Allocate_New_Buffer_To_TL>
    HW_BNRG_Init(HW_BNRG_Full);
 800bc58:	2001      	movs	r0, #1
 800bc5a:	f7ff f939 	bl	800aed0 <HW_BNRG_Init>
    while(HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET);
 800bc5e:	4c05      	ldr	r4, [pc, #20]	; (800bc74 <TL_BLE_Init+0x4c>)
 800bc60:	2140      	movs	r1, #64	; 0x40
 800bc62:	4620      	mov	r0, r4
 800bc64:	f001 f9d6 	bl	800d014 <HAL_GPIO_ReadPin>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d0f9      	beq.n	800bc60 <TL_BLE_Init+0x38>
 800bc6c:	e7f0      	b.n	800bc50 <TL_BLE_Init+0x28>
 800bc6e:	bf00      	nop
 800bc70:	20000394 	.word	0x20000394
 800bc74:	48001000 	.word	0x48001000

0800bc78 <TL_BLE_SendCmd>:
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800bc78:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <TL_BLE_SendCmd+0x14>)
 800bc7a:	68d8      	ldr	r0, [r3, #12]
  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 800bc7c:	7ac1      	ldrb	r1, [r0, #11]
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	7203      	strb	r3, [r0, #8]
  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 800bc82:	3104      	adds	r1, #4
 800bc84:	3008      	adds	r0, #8
 800bc86:	f7ff ba57 	b.w	800b138 <HW_BNRG_Send>
 800bc8a:	bf00      	nop
 800bc8c:	20000394 	.word	0x20000394

0800bc90 <HW_BNRG_Isr>:
{
 800bc90:	b570      	push	{r4, r5, r6, lr}
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 800bc92:	4c1f      	ldr	r4, [pc, #124]	; (800bd10 <HW_BNRG_Isr+0x80>)
 800bc94:	7923      	ldrb	r3, [r4, #4]
 800bc96:	2b01      	cmp	r3, #1
{
 800bc98:	4605      	mov	r5, r0
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 800bc9a:	d114      	bne.n	800bcc6 <HW_BNRG_Isr+0x36>
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi -= event_payload_len;
 800bc9c:	88e3      	ldrh	r3, [r4, #6]
 800bc9e:	1a1b      	subs	r3, r3, r0
 800bca0:	80e3      	strh	r3, [r4, #6]
  if(TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi != 0)
 800bca2:	88e6      	ldrh	r6, [r4, #6]
 800bca4:	6821      	ldr	r1, [r4, #0]
 800bca6:	b33e      	cbz	r6, 800bcf8 <HW_BNRG_Isr+0x68>
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 800bca8:	8922      	ldrh	r2, [r4, #8]
    TlSpiIsrContext.TlPacketStatus = tl_packet_cont;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	7123      	strb	r3, [r4, #4]
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 800bcae:	1b53      	subs	r3, r2, r5
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	8123      	strh	r3, [r4, #8]
    if(TlSpiIsrContext.TlSizeLeftInBufferFrame != 0)
 800bcb4:	b1cb      	cbz	r3, 800bcea <HW_BNRG_Isr+0x5a>
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 800bcb6:	1ac8      	subs	r0, r1, r3
}
 800bcb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	f500 7085 	add.w	r0, r0, #266	; 0x10a
 800bcc2:	f7ff b9a1 	b.w	800b008 <HW_BNRG_EvtReq>
 800bcc6:	6822      	ldr	r2, [r4, #0]
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi = TL_EVT_HDR_SIZE + pHciEventBuffer->evtserial.evt.plen - event_payload_len;
 800bcc8:	7a93      	ldrb	r3, [r2, #10]
 800bcca:	3303      	adds	r3, #3
 800bccc:	1a1b      	subs	r3, r3, r0
 800bcce:	80e3      	strh	r3, [r4, #6]
    if((pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CC_OPCODE) && (pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CS_OPCODE))
 800bcd0:	7a53      	ldrb	r3, [r2, #9]
 800bcd2:	3b0e      	subs	r3, #14
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d905      	bls.n	800bce4 <HW_BNRG_Isr+0x54>
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 800bcd8:	2100      	movs	r1, #0
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 800bcda:	2003      	movs	r0, #3
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 800bcdc:	7161      	strb	r1, [r4, #5]
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 800bcde:	f000 f853 	bl	800bd88 <LPM_SetOffMode>
 800bce2:	e7de      	b.n	800bca2 <HW_BNRG_Isr+0x12>
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciCmdEvt;
 800bce4:	2301      	movs	r3, #1
 800bce6:	7163      	strb	r3, [r4, #5]
 800bce8:	e7db      	b.n	800bca2 <HW_BNRG_Isr+0x12>
      TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 800bcea:	7960      	ldrb	r0, [r4, #5]
 800bcec:	f7ff ff40 	bl	800bb70 <TL_BLE_R_EvtInput>
}
 800bcf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Allocate_New_Buffer_To_TL();
 800bcf4:	f7ff bf82 	b.w	800bbfc <Allocate_New_Buffer_To_TL>
    TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 800bcf8:	7960      	ldrb	r0, [r4, #5]
 800bcfa:	f7ff ff39 	bl	800bb70 <TL_BLE_R_EvtInput>
    TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 800bcfe:	7126      	strb	r6, [r4, #4]
    Allocate_New_Buffer_To_TL();
 800bd00:	f7ff ff7c 	bl	800bbfc <Allocate_New_Buffer_To_TL>
}
 800bd04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_En);
 800bd08:	2101      	movs	r1, #1
 800bd0a:	2003      	movs	r0, #3
 800bd0c:	f000 b83c 	b.w	800bd88 <LPM_SetOffMode>
 800bd10:	20000394 	.word	0x20000394

0800bd14 <TL_BLE_EvtDone>:
  TL_BLE_R_EvtDone(hcievt);
 800bd14:	f7ff bf60 	b.w	800bbd8 <TL_BLE_R_EvtDone>

0800bd18 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800bd18:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 800bd1a:	6040      	str	r0, [r0, #4]
}
 800bd1c:	4770      	bx	lr

0800bd1e <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd1e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bd22:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800bd24:	6802      	ldr	r2, [r0, #0]
  {
    return_value = TRUE;
 800bd26:	1a82      	subs	r2, r0, r2
 800bd28:	4250      	negs	r0, r2
 800bd2a:	4150      	adcs	r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd2c:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 800bd30:	4770      	bx	lr

0800bd32 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd32:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bd36:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800bd38:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800bd3a:	6842      	ldr	r2, [r0, #4]
 800bd3c:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800bd3e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800bd40:	684a      	ldr	r2, [r1, #4]
 800bd42:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd44:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd48:	4770      	bx	lr

0800bd4a <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd4a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bd4e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800bd50:	6843      	ldr	r3, [r0, #4]
 800bd52:	6801      	ldr	r1, [r0, #0]
 800bd54:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 800bd56:	6801      	ldr	r1, [r0, #0]
 800bd58:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd5a:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd5e:	4770      	bx	lr

0800bd60 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800bd60:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd62:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bd66:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bd68:	6803      	ldr	r3, [r0, #0]
 800bd6a:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 800bd6c:	6800      	ldr	r0, [r0, #0]
 800bd6e:	f7ff ffec 	bl	800bd4a <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd72:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd76:	bd10      	pop	{r4, pc}

0800bd78 <LPM_SetConf>:


/* Functions Definition ------------------------------------------------------*/
void LPM_SetConf(LPM_Conf_t *p_conf)
{
  LowPowerModeConfiguration.Stop_Mode_Config = p_conf->Stop_Mode_Config;
 800bd78:	4b02      	ldr	r3, [pc, #8]	; (800bd84 <LPM_SetConf+0xc>)
 800bd7a:	6802      	ldr	r2, [r0, #0]
 800bd7c:	601a      	str	r2, [r3, #0]
  LowPowerModeConfiguration.OFF_Mode_Config = p_conf->OFF_Mode_Config;
 800bd7e:	6842      	ldr	r2, [r0, #4]
 800bd80:	605a      	str	r2, [r3, #4]

  return;
}
 800bd82:	4770      	bx	lr
 800bd84:	200003a4 	.word	0x200003a4

0800bd88 <LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd88:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bd8c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_OffMode_En)
 800bd8e:	2301      	movs	r3, #1
 800bd90:	fa03 f000 	lsl.w	r0, r3, r0
 800bd94:	4299      	cmp	r1, r3
 800bd96:	4b05      	ldr	r3, [pc, #20]	; (800bdac <LPM_SetOffMode+0x24>)
  {
    LowPowerModeSel &= (~(1<<id));
 800bd98:	6899      	ldr	r1, [r3, #8]
 800bd9a:	bf0c      	ite	eq
 800bd9c:	ea21 0000 	biceq.w	r0, r1, r0
  }
  else
  {
    LowPowerModeSel |= (1<<id);
 800bda0:	4308      	orrne	r0, r1
 800bda2:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bda4:	f382 8810 	msr	PRIMASK, r2
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	200003a4 	.word	0x200003a4

0800bdb0 <LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdb0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bdb4:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_StopMode_Dis)
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	fa03 f000 	lsl.w	r0, r3, r0
 800bdbc:	4b05      	ldr	r3, [pc, #20]	; (800bdd4 <LPM_SetStopMode+0x24>)
 800bdbe:	b931      	cbnz	r1, 800bdce <LPM_SetStopMode+0x1e>
  {
    SysClockReq &= (~(1<<id));
 800bdc0:	68d9      	ldr	r1, [r3, #12]
 800bdc2:	ea21 0000 	bic.w	r0, r1, r0
 800bdc6:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdc8:	f382 8810 	msr	PRIMASK, r2
  }

  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/

  return;
}
 800bdcc:	4770      	bx	lr
    SysClockReq |= (1<<id);
 800bdce:	68d9      	ldr	r1, [r3, #12]
 800bdd0:	4308      	orrs	r0, r1
 800bdd2:	e7f8      	b.n	800bdc6 <LPM_SetStopMode+0x16>
 800bdd4:	200003a4 	.word	0x200003a4

0800bdd8 <LPM_EnterSleepMode>:
/* __WEAK functions: The application can overload this function  if needed ----*/
/* ----------------------------------------------------------------------------*/

__weak void LPM_EnterSleepMode(void)
{
}
 800bdd8:	4770      	bx	lr

0800bdda <LPM_ExitSleepMode>:
 800bdda:	4770      	bx	lr

0800bddc <LPM_EnterStopMode>:
 800bddc:	4770      	bx	lr
	...

0800bde0 <LPM_EnterModeSelected>:
{
 800bde0:	b510      	push	{r4, lr}
  if(SysClockReq)
 800bde2:	4c0e      	ldr	r4, [pc, #56]	; (800be1c <LPM_EnterModeSelected+0x3c>)
 800bde4:	68e3      	ldr	r3, [r4, #12]
 800bde6:	b133      	cbz	r3, 800bdf6 <LPM_EnterModeSelected+0x16>
    LPM_EnterSleepMode();
 800bde8:	f7ff fff6 	bl	800bdd8 <LPM_EnterSleepMode>
    HW_SleepMode();
 800bdec:	f7fe fe62 	bl	800aab4 <HW_SleepMode>
    LPM_ExitSleepMode();
 800bdf0:	f7ff fff3 	bl	800bdda <LPM_ExitSleepMode>
}
 800bdf4:	bd10      	pop	{r4, pc}
    if(LowPowerModeSel)
 800bdf6:	68a3      	ldr	r3, [r4, #8]
 800bdf8:	b13b      	cbz	r3, 800be0a <LPM_EnterModeSelected+0x2a>
      LPM_EnterStopMode();
 800bdfa:	f7ff ffef 	bl	800bddc <LPM_EnterStopMode>
      HW_StopMode(LowPowerModeConfiguration.Stop_Mode_Config);
 800bdfe:	6820      	ldr	r0, [r4, #0]
 800be00:	f7fe fe62 	bl	800aac8 <HW_StopMode>
      LPM_ExitStopMode();
 800be04:	f000 fb58 	bl	800c4b8 <LPM_ExitStopMode>
 800be08:	e7f4      	b.n	800bdf4 <LPM_EnterModeSelected+0x14>
      LPM_EnterOffMode();
 800be0a:	f000 fb57 	bl	800c4bc <LPM_EnterOffMode>
      HW_OffMode(LowPowerModeConfiguration.OFF_Mode_Config);
 800be0e:	6860      	ldr	r0, [r4, #4]
 800be10:	f7fe fe6c 	bl	800aaec <HW_OffMode>
      LPM_ExitOffMode();
 800be14:	f000 fb5e 	bl	800c4d4 <LPM_ExitOffMode>
  return;
 800be18:	e7ec      	b.n	800bdf4 <LPM_EnterModeSelected+0x14>
 800be1a:	bf00      	nop
 800be1c:	200003a4 	.word	0x200003a4

0800be20 <MM_Init>:
 * @param  pool_size: The size of the pool
 * @param  elt_size: The size of one element in the pool
 * @retval None
 */
void MM_Init(uint8_t *p_pool, uint32_t pool_size,  uint32_t elt_size)
{
 800be20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t elt_size_corrected;

  QueueSize = 0;
 800be24:	4d0d      	ldr	r5, [pc, #52]	; (800be5c <MM_Init+0x3c>)
{
 800be26:	4607      	mov	r7, r0
  QueueSize = 0;
 800be28:	4628      	mov	r0, r5
 800be2a:	2300      	movs	r3, #0
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 800be2c:	3203      	adds	r2, #3
  QueueSize = 0;
 800be2e:	f800 3b01 	strb.w	r3, [r0], #1
{
 800be32:	460e      	mov	r6, r1
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 800be34:	f022 0403 	bic.w	r4, r2, #3

  /**
   *  Initialize list
   */
  LST_init_head (&BufferPool);
 800be38:	f7ff ff6e 	bl	800bd18 <LST_init_head>
  /**
   *  Initialize the queue
   */
  while(pool_size >= elt_size_corrected)
  {
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 800be3c:	f105 0801 	add.w	r8, r5, #1
  while(pool_size >= elt_size_corrected)
 800be40:	42a6      	cmp	r6, r4
 800be42:	d201      	bcs.n	800be48 <MM_Init+0x28>
    QueueSize++;
    pool_size -= elt_size_corrected;
  }

  return;
}
 800be44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 800be48:	4639      	mov	r1, r7
 800be4a:	4640      	mov	r0, r8
 800be4c:	f7ff ff71 	bl	800bd32 <LST_insert_tail>
    QueueSize++;
 800be50:	782b      	ldrb	r3, [r5, #0]
 800be52:	3301      	adds	r3, #1
    p_pool += elt_size_corrected;
 800be54:	4427      	add	r7, r4
    QueueSize++;
 800be56:	702b      	strb	r3, [r5, #0]
    pool_size -= elt_size_corrected;
 800be58:	1b36      	subs	r6, r6, r4
 800be5a:	e7f1      	b.n	800be40 <MM_Init+0x20>
 800be5c:	200003b4 	.word	0x200003b4

0800be60 <MM_GetBuffer>:
 * @param  cb: The callback to be called when a buffer is made available later on
 *                   if there is no buffer currently available when this API is called
 * @retval The buffer address when available or NULL when there is no buffer
 */
MM_pBufAdd_t MM_GetBuffer( uint32_t size, MM_pCb_t cb )
{
 800be60:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be62:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800be66:	b672      	cpsid	i
  MM_pBufAdd_t buffer_address;
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if ( QueueSize )
 800be68:	4809      	ldr	r0, [pc, #36]	; (800be90 <MM_GetBuffer+0x30>)
 800be6a:	7803      	ldrb	r3, [r0, #0]
 800be6c:	b163      	cbz	r3, 800be88 <MM_GetBuffer+0x28>
  {
    QueueSize--;
 800be6e:	3b01      	subs	r3, #1
 800be70:	7003      	strb	r3, [r0, #0]
    BufferFreeCb = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	60c3      	str	r3, [r0, #12]
    LST_remove_head( &BufferPool, ( tListNode ** )&buffer_address );
 800be76:	a901      	add	r1, sp, #4
 800be78:	3001      	adds	r0, #1
 800be7a:	f7ff ff71 	bl	800bd60 <LST_remove_head>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be7e:	f384 8810 	msr	PRIMASK, r4
    buffer_address = 0;
  }
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/

  return buffer_address;
}
 800be82:	9801      	ldr	r0, [sp, #4]
 800be84:	b002      	add	sp, #8
 800be86:	bd10      	pop	{r4, pc}
    BufferFreeCb = cb;
 800be88:	60c1      	str	r1, [r0, #12]
    buffer_address = 0;
 800be8a:	9301      	str	r3, [sp, #4]
 800be8c:	e7f7      	b.n	800be7e <MM_GetBuffer+0x1e>
 800be8e:	bf00      	nop
 800be90:	200003b4 	.word	0x200003b4

0800be94 <MM_ReleaseBuffer>:
 * @brief  Release a buffer
 * @param  p_buffer: The data buffer address
 * @retval None
 */
void MM_ReleaseBuffer( MM_pBufAdd_t p_buffer )
{
 800be94:	b570      	push	{r4, r5, r6, lr}
 800be96:	4601      	mov	r1, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be98:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800be9c:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  LST_insert_tail( &BufferPool, ( tListNode * )p_buffer );
 800be9e:	4c07      	ldr	r4, [pc, #28]	; (800bebc <MM_ReleaseBuffer+0x28>)
 800bea0:	1c60      	adds	r0, r4, #1
 800bea2:	f7ff ff46 	bl	800bd32 <LST_insert_tail>
  QueueSize++;
 800bea6:	7823      	ldrb	r3, [r4, #0]
 800bea8:	3301      	adds	r3, #1
 800beaa:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beac:	f385 8810 	msr	PRIMASK, r5
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/
  if( BufferFreeCb )
 800beb0:	68e3      	ldr	r3, [r4, #12]
 800beb2:	b113      	cbz	r3, 800beba <MM_ReleaseBuffer+0x26>
     */
    BufferFreeCb();
  }

  return;
}
 800beb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BufferFreeCb();
 800beb8:	4718      	bx	r3
}
 800beba:	bd70      	pop	{r4, r5, r6, pc}
 800bebc:	200003b4 	.word	0x200003b4

0800bec0 <SCH_RegTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bec0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bec4:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskCb[task_id] = task;
 800bec6:	4a03      	ldr	r2, [pc, #12]	; (800bed4 <SCH_RegTask+0x14>)
 800bec8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800becc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	200003c4 	.word	0x200003c4

0800bed8 <SCH_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bed8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bedc:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskSet |= (1 << task_id);
 800bede:	4a05      	ldr	r2, [pc, #20]	; (800bef4 <SCH_SetTask+0x1c>)
 800bee0:	2301      	movs	r3, #1
 800bee2:	fa03 f000 	lsl.w	r0, r3, r0
 800bee6:	6993      	ldr	r3, [r2, #24]
 800bee8:	4318      	orrs	r0, r3
 800beea:	6190      	str	r0, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beec:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	200003c4 	.word	0x200003c4

0800bef8 <SCH_PauseTask>:

void SCH_PauseTask( uint32_t task_id )
{
 800bef8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800befa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800befe:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskMask &= ~ ( 1 << task_id );
 800bf00:	4905      	ldr	r1, [pc, #20]	; (800bf18 <SCH_PauseTask+0x20>)
 800bf02:	2201      	movs	r2, #1
 800bf04:	680b      	ldr	r3, [r1, #0]
 800bf06:	fa02 f000 	lsl.w	r0, r2, r0
 800bf0a:	ea23 0300 	bic.w	r3, r3, r0
 800bf0e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf10:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 800bf14:	bd10      	pop	{r4, pc}
 800bf16:	bf00      	nop
 800bf18:	20000000 	.word	0x20000000

0800bf1c <SCH_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf1c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf20:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskMask |= ( 1 << task_id );
 800bf22:	4a05      	ldr	r2, [pc, #20]	; (800bf38 <SCH_ResumeTask+0x1c>)
 800bf24:	2301      	movs	r3, #1
 800bf26:	fa03 f000 	lsl.w	r0, r3, r0
 800bf2a:	6813      	ldr	r3, [r2, #0]
 800bf2c:	4318      	orrs	r0, r3
 800bf2e:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf30:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	20000000 	.word	0x20000000

0800bf3c <SCH_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf3c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf40:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  EvtSet |= ( 1 << evt_id);
 800bf42:	4a05      	ldr	r2, [pc, #20]	; (800bf58 <SCH_SetEvt+0x1c>)
 800bf44:	2301      	movs	r3, #1
 800bf46:	fa03 f000 	lsl.w	r0, r3, r0
 800bf4a:	69d3      	ldr	r3, [r2, #28]
 800bf4c:	4318      	orrs	r0, r3
 800bf4e:	61d0      	str	r0, [r2, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf50:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	200003c4 	.word	0x200003c4

0800bf5c <SCH_Run>:
{
 800bf5c:	b570      	push	{r4, r5, r6, lr}
  while( TaskSet &  TaskMask )
 800bf5e:	4c15      	ldr	r4, [pc, #84]	; (800bfb4 <SCH_Run+0x58>)
 800bf60:	4d15      	ldr	r5, [pc, #84]	; (800bfb8 <SCH_Run+0x5c>)
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 800bf62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  while( TaskSet &  TaskMask )
 800bf66:	69a3      	ldr	r3, [r4, #24]
 800bf68:	682a      	ldr	r2, [r5, #0]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	d10f      	bne.n	800bf8e <SCH_Run+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf6e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf72:	b672      	cpsid	i
  if ( !( (TaskSet & TaskMask ) || (EvtSet & EvtWaited) ) )
 800bf74:	69a3      	ldr	r3, [r4, #24]
 800bf76:	682a      	ldr	r2, [r5, #0]
 800bf78:	401a      	ands	r2, r3
 800bf7a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800bf7e:	400b      	ands	r3, r1
 800bf80:	4313      	orrs	r3, r2
 800bf82:	d101      	bne.n	800bf88 <SCH_Run+0x2c>
    SCH_Idle();
 800bf84:	f000 fab6 	bl	800c4f4 <SCH_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf88:	f386 8810 	msr	PRIMASK, r6
}
 800bf8c:	bd70      	pop	{r4, r5, r6, pc}
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800bf8e:	fab3 f383 	clz	r3, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf92:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf96:	b672      	cpsid	i
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 800bf98:	69a2      	ldr	r2, [r4, #24]
 800bf9a:	fa26 f003 	lsr.w	r0, r6, r3
 800bf9e:	ea22 0200 	bic.w	r2, r2, r0
 800bfa2:	61a2      	str	r2, [r4, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfa4:	f381 8810 	msr	PRIMASK, r1
    TaskCb[31 - bit_nbr]();
 800bfa8:	f1c3 031f 	rsb	r3, r3, #31
 800bfac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800bfb0:	4798      	blx	r3
 800bfb2:	e7d8      	b.n	800bf66 <SCH_Run+0xa>
 800bfb4:	200003c4 	.word	0x200003c4
 800bfb8:	20000000 	.word	0x20000000

0800bfbc <SCH_EvtIdle>:
__weak void SCH_EvtIdle( void )
{
  /**
   * execute scheduler if not implemented by the application
   */
  SCH_Run();
 800bfbc:	f7ff bfce 	b.w	800bf5c <SCH_Run>

0800bfc0 <SCH_WaitEvt>:
{
 800bfc0:	b538      	push	{r3, r4, r5, lr}
  event_waited_id_backup = EvtWaited;
 800bfc2:	4c09      	ldr	r4, [pc, #36]	; (800bfe8 <SCH_WaitEvt+0x28>)
  EvtWaited = ( 1 << evt_id );
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	fa03 f000 	lsl.w	r0, r3, r0
  event_waited_id_backup = EvtWaited;
 800bfca:	6a25      	ldr	r5, [r4, #32]
  EvtWaited = ( 1 << evt_id );
 800bfcc:	6220      	str	r0, [r4, #32]
  while( (EvtSet & EvtWaited) == 0)
 800bfce:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800bfd2:	4213      	tst	r3, r2
 800bfd4:	d004      	beq.n	800bfe0 <SCH_WaitEvt+0x20>
  EvtSet &= (~EvtWaited);
 800bfd6:	ea23 0302 	bic.w	r3, r3, r2
  EvtWaited = event_waited_id_backup;
 800bfda:	e9c4 3507 	strd	r3, r5, [r4, #28]
}
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
    SCH_EvtIdle();
 800bfe0:	f7ff ffec 	bl	800bfbc <SCH_EvtIdle>
 800bfe4:	e7f3      	b.n	800bfce <SCH_WaitEvt+0xe>
 800bfe6:	bf00      	nop
 800bfe8:	200003c4 	.word	0x200003c4

0800bfec <crcSlow>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
 800bfec:	b570      	push	{r4, r5, r6, lr}
 800bfee:	4605      	mov	r5, r0


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 800bff0:	2400      	movs	r4, #0
    crc            remainder = INITIAL_REMAINDER;
 800bff2:	f64f 70ff 	movw	r0, #65535	; 0xffff
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 800bff6:	f241 0621 	movw	r6, #4129	; 0x1021
    for (byte = 0; byte < nBytes; ++byte)
 800bffa:	428c      	cmp	r4, r1
 800bffc:	db00      	blt.n	800c000 <crcSlow+0x14>
    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);

}   /* crcSlow() */
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
 800c000:	5d2b      	ldrb	r3, [r5, r4]
 800c002:	2208      	movs	r2, #8
 800c004:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
            if (remainder & TOPBIT)
 800c008:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800c00c:	ea4f 0340 	mov.w	r3, r0, lsl #1
                remainder = (remainder << 1) ^ POLYNOMIAL;
 800c010:	bf18      	it	ne
 800c012:	4073      	eorne	r3, r6
                remainder = (remainder << 1);
 800c014:	b298      	uxth	r0, r3
        for (bit = 8; bit > 0; --bit)
 800c016:	1e53      	subs	r3, r2, #1
 800c018:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 800c01c:	d1f4      	bne.n	800c008 <crcSlow+0x1c>
    for (byte = 0; byte < nBytes; ++byte)
 800c01e:	3401      	adds	r4, #1
 800c020:	e7eb      	b.n	800bffa <crcSlow+0xe>
	...

0800c024 <LBR_Init>:


/* Public functions ----------------------------------------------------------*/

void LBR_Init(LBR_InitMode_t InitMode)
{
 800c024:	b530      	push	{r4, r5, lr}
 800c026:	b085      	sub	sp, #20
  uint8_t index;

  if(InitMode != LBR_Limited )
 800c028:	2800      	cmp	r0, #0
 800c02a:	d046      	beq.n	800c0ba <LBR_Init+0x96>
  {
    /**
     * Initialization of all transport layer
     */
    TL_BLE_HCI_Init(TL_BLE_HCI_InitFull, &CmdBuffer, EvtPool, POOL_SIZE);
 800c02c:	4c24      	ldr	r4, [pc, #144]	; (800c0c0 <LBR_Init+0x9c>)
 800c02e:	f240 5332 	movw	r3, #1330	; 0x532
 800c032:	18e1      	adds	r1, r4, r3
 800c034:	4622      	mov	r2, r4
 800c036:	2001      	movs	r0, #1
 800c038:	f7ff fc4c 	bl	800b8d4 <TL_BLE_HCI_Init>

    /**
     * Initialization of the BLE App Context
     */
   
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 800c03c:	2500      	movs	r5, #0
    TL_Enable();
 800c03e:	f3af 8000 	nop.w
     SVCCTL_Init();
 800c042:	f7fe fced 	bl	800aa20 <SVCCTL_Init>
    /**
     * Set TX Power to -2dBm.
     * This avoids undesired disconnection due to instability on 32KHz
     * internal oscillator for high transmission power.
     */
    aci_hal_set_tx_power_level(1,0x18);
 800c046:	2118      	movs	r1, #24
 800c048:	2001      	movs	r0, #1
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 800c04a:	f884 56dc 	strb.w	r5, [r4, #1756]	; 0x6dc
    aci_hal_set_tx_power_level(1,0x18);
 800c04e:	f7fe fb1f 	bl	800a690 <aci_hal_set_tx_power_level>

    /**
     * Initialize IO capability
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 800c052:	4628      	mov	r0, r5
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
 800c054:	f884 5640 	strb.w	r5, [r4, #1600]	; 0x640
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 800c058:	f7fe f962 	bl	800a320 <aci_gap_set_io_capability>
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
    LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
    LBRContext.LBRContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 800c05c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c060:	f8a4 3654 	strh.w	r3, [r4, #1620]	; 0x654
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800c064:	2310      	movs	r3, #16
 800c066:	f884 3656 	strb.w	r3, [r4, #1622]	; 0x656
    LBRContext.LBRContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800c06a:	4b16      	ldr	r3, [pc, #88]	; (800c0c4 <LBR_Init+0xa0>)
 800c06c:	f8c4 3658 	str.w	r3, [r4, #1624]	; 0x658
    LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode = 1;
 800c070:	2301      	movs	r3, #1
 800c072:	f8a4 3642 	strh.w	r3, [r4, #1602]	; 0x642
    for (index=0; index<16 ;index++)
 800c076:	f204 6344 	addw	r3, r4, #1604	; 0x644
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
 800c07a:	f884 5641 	strb.w	r5, [r4, #1601]	; 0x641
 800c07e:	461a      	mov	r2, r3
    {
      LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t)index;
 800c080:	f803 5b01 	strb.w	r5, [r3], #1
    for (index=0; index<16 ;index++)
 800c084:	3501      	adds	r5, #1
 800c086:	2d10      	cmp	r5, #16
 800c088:	d1fa      	bne.n	800c080 <LBR_Init+0x5c>
    }

    aci_gap_set_auth_requirement(LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode,
 800c08a:	4b0e      	ldr	r3, [pc, #56]	; (800c0c4 <LBR_Init+0xa0>)
 800c08c:	2101      	movs	r1, #1
 800c08e:	e9cd 3102 	strd	r3, r1, [sp, #8]
 800c092:	2100      	movs	r1, #0
 800c094:	2308      	movs	r3, #8
 800c096:	e9cd 5100 	strd	r5, r1, [sp]
 800c09a:	4608      	mov	r0, r1
 800c09c:	f7fe f964 	bl	800a368 <aci_gap_set_auth_requirement>
                                 LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode);

    /**
     * Initialize whitelist
     */
    if(LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode)
 800c0a0:	f894 3642 	ldrb.w	r3, [r4, #1602]	; 0x642
 800c0a4:	b10b      	cbz	r3, 800c0aa <LBR_Init+0x86>
    {
      aci_gap_configure_whitelist();
 800c0a6:	f7fe f99d 	bl	800a3e4 <aci_gap_configure_whitelist>
    
    /**
     * Initialize LBS Applciation
     */
#if(LB_SERVER!=0)     
    LBSAPP_Init();
 800c0aa:	f000 f871 	bl	800c190 <LBSAPP_Init>
   // Start Advertise to be connected by Client
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 800c0ae:	2001      	movs	r0, #1
#endif
  
  }

  return;
}
 800c0b0:	b005      	add	sp, #20
 800c0b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 800c0b6:	f7ff bf0f 	b.w	800bed8 <SCH_SetTask>
}
 800c0ba:	b005      	add	sp, #20
 800c0bc:	bd30      	pop	{r4, r5, pc}
 800c0be:	bf00      	nop
 800c0c0:	200003e8 	.word	0x200003e8
 800c0c4:	0001b207 	.word	0x0001b207

0800c0c8 <LBR_Adv_Request>:
/*                     DEVICE IS SERVER                         */
/****************************************************************/

#if(LB_SERVER!=0) 
void LBR_Adv_Request(void)
{
 800c0c8:	b500      	push	{lr}
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 800c0ca:	4b0d      	ldr	r3, [pc, #52]	; (800c100 <LBR_Adv_Request+0x38>)
 800c0cc:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 800c0d0:	2b0a      	cmp	r3, #10
{
 800c0d2:	b089      	sub	sp, #36	; 0x24
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 800c0d4:	d010      	beq.n	800c0f8 <LBR_Adv_Request+0x30>
  {
    tBleStatus result=0x00;
    
    result = aci_gap_set_discoverable(ADV_IND,
 800c0d6:	4a0b      	ldr	r2, [pc, #44]	; (800c104 <LBR_Adv_Request+0x3c>)
 800c0d8:	9202      	str	r2, [sp, #8]
 800c0da:	2300      	movs	r3, #0
 800c0dc:	220e      	movs	r2, #14
 800c0de:	e9cd 3200 	strd	r3, r2, [sp]
 800c0e2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c0e6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c0ea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c0ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe f8a8 	bl	800a248 <aci_gap_set_discoverable>
    {
      APPL_MESG_DBG("** START ADVERTISING **  Failed \r\n\r");
    }
  }
  return;
}
 800c0f8:	b009      	add	sp, #36	; 0x24
 800c0fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0fe:	bf00      	nop
 800c100:	200003e8 	.word	0x200003e8
 800c104:	0800dac8 	.word	0x0800dac8

0800c108 <SVCCTL_App_Notification>:
  evt_le_meta_event *meta_evt;
  evt_le_connection_complete * connection_complete_event;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
  evt_disconn_complete *cc = (void *)event_pckt->data;
  switch(event_pckt->evt)
 800c108:	7843      	ldrb	r3, [r0, #1]
 800c10a:	2b05      	cmp	r3, #5
 800c10c:	d002      	beq.n	800c114 <SVCCTL_App_Notification+0xc>
 800c10e:	2b3e      	cmp	r3, #62	; 0x3e
 800c110:	d011      	beq.n	800c136 <SVCCTL_App_Notification+0x2e>
 800c112:	4770      	bx	lr
  {
    case EVT_DISCONN_COMPLETE:
      if(cc->handle == LBRContext.connectionHandleRemote)
 800c114:	4b0f      	ldr	r3, [pc, #60]	; (800c154 <SVCCTL_App_Notification+0x4c>)
 800c116:	8881      	ldrh	r1, [r0, #4]
 800c118:	f8b3 26de 	ldrh.w	r2, [r3, #1758]	; 0x6de
 800c11c:	4291      	cmp	r1, r2
 800c11e:	d118      	bne.n	800c152 <SVCCTL_App_Notification+0x4a>
      {
        LBRContext.connectionHandleRemote = LBC_IDLE;
        APPL_MESG_DBG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 800c120:	480d      	ldr	r0, [pc, #52]	; (800c158 <SVCCTL_App_Notification+0x50>)
        LBRContext.connectionHandleRemote = LBC_IDLE;
 800c122:	2200      	movs	r2, #0
 800c124:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 800c128:	2303      	movs	r3, #3
 800c12a:	7003      	strb	r3, [r0, #0]
        handleNotification.ConnectionHandle=connection_handle;
 800c12c:	4b0b      	ldr	r3, [pc, #44]	; (800c15c <SVCCTL_App_Notification+0x54>)
 800c12e:	881b      	ldrh	r3, [r3, #0]
      
          //CONNECTION WITH LB ROUTEUR 
           APPL_MESG_DBG("\r\n\r** CONNECTION EVENT WITH CLIENT \n");
          LBRContext.connectionHandleRemote = connection_handle;
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
          handleNotification.ConnectionHandle=connection_handle;
 800c130:	8043      	strh	r3, [r0, #2]
          LBR_Notification(&handleNotification);
 800c132:	f000 b81b 	b.w	800c16c <LBR_Notification>
      switch(meta_evt->subevent)
 800c136:	78c3      	ldrb	r3, [r0, #3]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d10a      	bne.n	800c152 <SVCCTL_App_Notification+0x4a>
          connection_handle = connection_complete_event->handle;
 800c13c:	4a07      	ldr	r2, [pc, #28]	; (800c15c <SVCCTL_App_Notification+0x54>)
 800c13e:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800c142:	8013      	strh	r3, [r2, #0]
          LBRContext.connectionHandleRemote = connection_handle;
 800c144:	4a03      	ldr	r2, [pc, #12]	; (800c154 <SVCCTL_App_Notification+0x4c>)
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 800c146:	4804      	ldr	r0, [pc, #16]	; (800c158 <SVCCTL_App_Notification+0x50>)
          LBRContext.connectionHandleRemote = connection_handle;
 800c148:	f8a2 36de 	strh.w	r3, [r2, #1758]	; 0x6de
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 800c14c:	2202      	movs	r2, #2
 800c14e:	7002      	strb	r2, [r0, #0]
 800c150:	e7ee      	b.n	800c130 <SVCCTL_App_Notification+0x28>

    default:
      break;
  }
  return;
}
 800c152:	4770      	bx	lr
 800c154:	200003e8 	.word	0x200003e8
 800c158:	20000b0c 	.word	0x20000b0c
 800c15c:	20000b10 	.word	0x20000b10

0800c160 <LBR_App_Key_Button_Action>:

void LBR_App_Key_Button_Action(void)
{
  SCH_SetTask(CFG_IdleTask_Button);
 800c160:	2004      	movs	r0, #4
 800c162:	f7ff beb9 	b.w	800bed8 <SCH_SetTask>

0800c166 <BLESVC_InitCustomSvc>:
#endif 

void BLESVC_InitCustomSvc(void)
{
#if(LB_SERVER!=0) 
  LBS_STM_Init();
 800c166:	f7fe babd 	b.w	800a6e4 <LBS_STM_Init>
	...

0800c16c <LBR_Notification>:



void LBR_Notification(LBR_ConnHandle_Not_evt_t *pNotification)
{
  switch(pNotification->LBR_Evt_Opcode)
 800c16c:	7803      	ldrb	r3, [r0, #0]
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d002      	beq.n	800c178 <LBR_Notification+0xc>
 800c172:	2b03      	cmp	r3, #3
 800c174:	d004      	beq.n	800c180 <LBR_Notification+0x14>
 800c176:	4770      	bx	lr
  {
    case LB_CLIENT_CONN_HANDLE_EVT :
      LB_End_Dev_Context.connHandleWithLbRouteur = pNotification->ConnectionHandle;
 800c178:	4b04      	ldr	r3, [pc, #16]	; (800c18c <LBR_Notification+0x20>)
 800c17a:	8842      	ldrh	r2, [r0, #2]
 800c17c:	809a      	strh	r2, [r3, #4]

    default:
      break;
  }
  return;
}
 800c17e:	4770      	bx	lr
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 800c180:	4b02      	ldr	r3, [pc, #8]	; (800c18c <LBR_Notification+0x20>)
 800c182:	2200      	movs	r2, #0
      SCH_SetTask(CFG_IdleTask_StartAdv);
 800c184:	2001      	movs	r0, #1
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 800c186:	809a      	strh	r2, [r3, #4]
      SCH_SetTask(CFG_IdleTask_StartAdv);
 800c188:	f7ff bea6 	b.w	800bed8 <SCH_SetTask>
 800c18c:	20000ac8 	.word	0x20000ac8

0800c190 <LBSAPP_Init>:
{
  /**
   * Initialize LedButton Service
   */
  LB_End_Dev_Context.Notification_Button_Status=0; 
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 800c190:	4b03      	ldr	r3, [pc, #12]	; (800c1a0 <LBSAPP_Init+0x10>)
 800c192:	2200      	movs	r2, #0
  LB_End_Dev_Context.Notification_Button_Status=0; 
 800c194:	f44f 7180 	mov.w	r1, #256	; 0x100
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 800c198:	809a      	strh	r2, [r3, #4]
  LB_End_Dev_Context.Notification_Button_Status=0; 
 800c19a:	8019      	strh	r1, [r3, #0]
 // LB_End_Dev_Context.LedControlEndDevice1.Device_Led_Selection=0x01; // device1
//  LB_End_Dev_Context.LedControlEndDevice1.Led1Control=0x00; //led OFF
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Device1
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;
 800c19c:	709a      	strb	r2, [r3, #2]

  return;
}
 800c19e:	4770      	bx	lr
 800c1a0:	20000ac8 	.word	0x20000ac8

0800c1a4 <LB_App_Button_Trigger_Received>:
void LB_App_Button_Trigger_Received(void)
{
  
  //UPDATE BUTTON CHARACTERISTICS VALUES

  if(LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus==0x01){
 800c1a4:	4907      	ldr	r1, [pc, #28]	; (800c1c4 <LB_App_Button_Trigger_Received+0x20>)
 800c1a6:	788b      	ldrb	r3, [r1, #2]
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	bf18      	it	ne
 800c1ac:	2301      	movne	r3, #1
 800c1ae:	708b      	strb	r3, [r1, #2]
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;}
  else {
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x01;  
  }
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Button1 pushed
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	704b      	strb	r3, [r1, #1]
  APPL_MESG_DBG("\r\n\r ");
  APPL_MESG_DBG("-- APPLICATION : BUTTON PUSHED - CHECK NOTIFICATION \n ");
 
   if(LB_End_Dev_Context.Notification_Button_Status){ 
 800c1b4:	780b      	ldrb	r3, [r1, #0]
 800c1b6:	b123      	cbz	r3, 800c1c2 <LB_App_Button_Trigger_Received+0x1e>
    APPL_MESG_DBG("-- APPLICATION : INFORM ROUTEUR BUTTON 1 PUSHED \n ");
    BLE_SVC_LedButton_Update_Char(BUTTON_CHAR_UUID, (uint8_t *)&LB_End_Dev_Context.ButtonStatusToClient);
 800c1b8:	3101      	adds	r1, #1
 800c1ba:	f642 3051 	movw	r0, #11089	; 0x2b51
 800c1be:	f7fe bb57 	b.w	800a870 <BLE_SVC_LedButton_Update_Char>
   } else {
    APPL_MESG_DBG("-- APPLICATION : CAN'T INFORM ROUTEUR -  NOTIFICATION DISABLED\n "); 
   }

  return;
}
 800c1c2:	4770      	bx	lr
 800c1c4:	20000ac8 	.word	0x20000ac8

0800c1c8 <whynotwork>:
  * @param  pNotification: LBS notification.
  * @retval None
 */ 

void whynotwork(uint8_t *POTATO, LBS_App_Notification_evt_t *pNotification, uint8_t is_string)
{
 800c1c8:	b510      	push	{r4, lr}
	uint8_t i = 0;
 800c1ca:	2300      	movs	r3, #0
	for(; i < pNotification->DataTransfered.Length; i++)
 800c1cc:	7a0c      	ldrb	r4, [r1, #8]
 800c1ce:	429c      	cmp	r4, r3
 800c1d0:	d803      	bhi.n	800c1da <whynotwork+0x12>
	{
		POTATO[i] = pNotification->DataTransfered.pPayload[i];
	}
	if(is_string) POTATO[i] = '\0';
 800c1d2:	b10a      	cbz	r2, 800c1d8 <whynotwork+0x10>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	54c2      	strb	r2, [r0, r3]
}
 800c1d8:	bd10      	pop	{r4, pc}
		POTATO[i] = pNotification->DataTransfered.pPayload[i];
 800c1da:	684c      	ldr	r4, [r1, #4]
 800c1dc:	5ce4      	ldrb	r4, [r4, r3]
 800c1de:	54c4      	strb	r4, [r0, r3]
	for(; i < pNotification->DataTransfered.Length; i++)
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	e7f2      	b.n	800c1cc <whynotwork+0x4>
	...

0800c1e8 <LBS_App_Notification>:

void LBS_App_Notification(LBS_App_Notification_evt_t *pNotification)
{
 800c1e8:	b508      	push	{r3, lr}
 800c1ea:	7803      	ldrb	r3, [r0, #0]
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	2b05      	cmp	r3, #5
 800c1f2:	d824      	bhi.n	800c23e <LBS_App_Notification+0x56>
 800c1f4:	e8df f003 	tbb	[pc, r3]
 800c1f8:	0f0c0903 	.word	0x0f0c0903
 800c1fc:	1512      	.short	0x1512
          APPL_MESG_DBG("-- APPLICATION END DEVICE 1 : LED1 OFF\n"); 
        }
        break;
        */
    case POTATO_SSID_EVT:
    	whynotwork(POTATO_Context.POTATO_SSID,pNotification,1);
 800c1fe:	4818      	ldr	r0, [pc, #96]	; (800c260 <LBS_App_Notification+0x78>)
 800c200:	2201      	movs	r2, #1
    default:
      break;
  }
  //ret = Potato_Save(&POTATO_Context);
  return;
}
 800c202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	whynotwork(POTATO_Context.POTATO_OP,pNotification,0);
 800c206:	f7ff bfdf 	b.w	800c1c8 <whynotwork>
    	whynotwork(POTATO_Context.POTATO_PW,pNotification,1);
 800c20a:	4816      	ldr	r0, [pc, #88]	; (800c264 <LBS_App_Notification+0x7c>)
 800c20c:	2201      	movs	r2, #1
 800c20e:	e7f8      	b.n	800c202 <LBS_App_Notification+0x1a>
    	whynotwork(POTATO_Context.POTATO_NAME,pNotification,1);
 800c210:	4815      	ldr	r0, [pc, #84]	; (800c268 <LBS_App_Notification+0x80>)
 800c212:	2201      	movs	r2, #1
 800c214:	e7f5      	b.n	800c202 <LBS_App_Notification+0x1a>
    	whynotwork(POTATO_Context.POTATO_IP,pNotification,0);
 800c216:	4815      	ldr	r0, [pc, #84]	; (800c26c <LBS_App_Notification+0x84>)
 800c218:	2200      	movs	r2, #0
 800c21a:	e7f2      	b.n	800c202 <LBS_App_Notification+0x1a>
    	whynotwork(POTATO_Context.POTATO_OP,pNotification,0);
 800c21c:	4814      	ldr	r0, [pc, #80]	; (800c270 <LBS_App_Notification+0x88>)
 800c21e:	2200      	movs	r2, #0
 800c220:	e7ef      	b.n	800c202 <LBS_App_Notification+0x1a>
    	switch(pNotification->DataTransfered.pPayload[0]) {
 800c222:	6843      	ldr	r3, [r0, #4]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2b05      	cmp	r3, #5
 800c228:	d809      	bhi.n	800c23e <LBS_App_Notification+0x56>
 800c22a:	e8df f003 	tbb	[pc, r3]
 800c22e:	0903      	.short	0x0903
 800c230:	1614100d 	.word	0x1614100d
    		ret = Potato_Save(&POTATO_Context);
 800c234:	480a      	ldr	r0, [pc, #40]	; (800c260 <LBS_App_Notification+0x78>)
 800c236:	f000 f97b 	bl	800c530 <Potato_Save>
    		ret = Potato_Dummy_Backup();
 800c23a:	4b0e      	ldr	r3, [pc, #56]	; (800c274 <LBS_App_Notification+0x8c>)
 800c23c:	7198      	strb	r0, [r3, #6]
}
 800c23e:	bd08      	pop	{r3, pc}
    		ret = Potato_Load(&POTATO_Context);
 800c240:	4807      	ldr	r0, [pc, #28]	; (800c260 <LBS_App_Notification+0x78>)
 800c242:	f000 f9cd 	bl	800c5e0 <Potato_Load>
 800c246:	e7f8      	b.n	800c23a <LBS_App_Notification+0x52>
    		ret = Potato_Backup_Load();
 800c248:	f000 fa1c 	bl	800c684 <Potato_Backup_Load>
 800c24c:	e7f5      	b.n	800c23a <LBS_App_Notification+0x52>
    		ret = Potato_Erase(normal);
 800c24e:	2001      	movs	r0, #1
    		ret = Potato_Erase(both);
 800c250:	f000 f9f6 	bl	800c640 <Potato_Erase>
 800c254:	e7f1      	b.n	800c23a <LBS_App_Notification+0x52>
 800c256:	2002      	movs	r0, #2
 800c258:	e7fa      	b.n	800c250 <LBS_App_Notification+0x68>
    		ret = Potato_Dummy_Backup();
 800c25a:	f000 fa49 	bl	800c6f0 <Potato_Dummy_Backup>
 800c25e:	e7ec      	b.n	800c23a <LBS_App_Notification+0x52>
 800c260:	20000b12 	.word	0x20000b12
 800c264:	20000b31 	.word	0x20000b31
 800c268:	20000b50 	.word	0x20000b50
 800c26c:	20000b6f 	.word	0x20000b6f
 800c270:	20000b73 	.word	0x20000b73
 800c274:	20000ac8 	.word	0x20000ac8

0800c278 <SystemClock_Config>:
 *
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 800c278:	b510      	push	{r4, lr}
 800c27a:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c27c:	2240      	movs	r2, #64	; 0x40
 800c27e:	2100      	movs	r1, #0
 800c280:	a806      	add	r0, sp, #24
 800c282:	f001 fbff 	bl	800da84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c286:	2100      	movs	r1, #0
 800c288:	2214      	movs	r2, #20
 800c28a:	4668      	mov	r0, sp
 800c28c:	f001 fbfa 	bl	800da84 <memset>

  /**
   *  Enable MSI oscillator and configure the system at 16MHz
   *  The best power consumption are achieved with 8Mhz on the SPI to access the BlueNRG device
   */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 800c290:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 800c292:	2280      	movs	r2, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 800c294:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;

  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c296:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800c298:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800c29a:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800c29c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 800c29e:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;
 800c2a0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c2a2:	f000 ff77 	bl	800d194 <HAL_RCC_OscConfig>

  /**
   *  Configure the HCLK, PCLK1 and PCLK2 clocks dividers  to a maximum of 16Mhz on SPI.
   */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800c2a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800c2a8:	2102      	movs	r1, #2
 800c2aa:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800c2ac:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c2b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c2b4:	9404      	str	r4, [sp, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800c2b6:	f001 f9f3 	bl	800d6a0 <HAL_RCC_ClockConfig>
#else
#error Missing System Clock Configuration
#endif

  return;
}
 800c2ba:	b016      	add	sp, #88	; 0x58
 800c2bc:	bd10      	pop	{r4, pc}
	...

0800c2c0 <main>:
{
 800c2c0:	b500      	push	{lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800c2c2:	4c6f      	ldr	r4, [pc, #444]	; (800c480 <main+0x1c0>)
{
 800c2c4:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800c2c6:	f000 fb15 	bl	800c8f4 <HAL_Init>
  HAL_DBGMCU_EnableDBGSleepMode();
 800c2ca:	f000 fb3b 	bl	800c944 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800c2ce:	f000 fb41 	bl	800c954 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800c2d2:	f000 fb47 	bl	800c964 <HAL_DBGMCU_EnableDBGStandbyMode>
  __HAL_RCC_PWR_CLK_ENABLE();
 800c2d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2dc:	65a3      	str	r3, [r4, #88]	; 0x58
 800c2de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	9b00      	ldr	r3, [sp, #0]
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == RCC_CSR_PINRSTF) ? 1UL : 0UL);
 800c2e8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c2ec:	0159      	lsls	r1, r3, #5
 800c2ee:	d519      	bpl.n	800c324 <main+0x64>
  * @rmtoll SCR          CSBF          LL_PWR_ClearFlag_SB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_SB(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 800c2f0:	4b64      	ldr	r3, [pc, #400]	; (800c484 <main+0x1c4>)
 800c2f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c2f6:	619a      	str	r2, [r3, #24]
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800c2f8:	f000 fea4 	bl	800d044 <HAL_PWR_EnableBkUpAccess>
    HAL_PWR_EnableBkUpAccess();
 800c2fc:	f000 fea2 	bl	800d044 <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c300:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c308:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800c30c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c310:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c314:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c318:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c31c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c320:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 800c324:	2600      	movs	r6, #0
  LPM_SetOffMode(CFG_LPM_App, LPM_OffMode_Dis);
 800c326:	2100      	movs	r1, #0
 800c328:	2004      	movs	r0, #4
 800c32a:	f7ff fd2d 	bl	800bd88 <LPM_SetOffMode>
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 800c32e:	e9cd 6606 	strd	r6, r6, [sp, #24]
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 800c332:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800c334:	4854      	ldr	r0, [pc, #336]	; (800c488 <main+0x1c8>)
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 800c336:	f023 0302 	bic.w	r3, r3, #2
 800c33a:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE();
 800c33c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c33e:	f023 0304 	bic.w	r3, r3, #4
 800c342:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE();
 800c344:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c346:	f023 0308 	bic.w	r3, r3, #8
 800c34a:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE();
 800c34c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c34e:	f023 0310 	bic.w	r3, r3, #16
 800c352:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOF_CLK_SLEEP_DISABLE();
 800c354:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c356:	f023 0320 	bic.w	r3, r3, #32
 800c35a:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOG_CLK_SLEEP_DISABLE();
 800c35c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c35e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c362:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE();
 800c364:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c36a:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c36c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c36e:	f043 0301 	orr.w	r3, r3, #1
 800c372:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c374:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	9301      	str	r3, [sp, #4]
 800c37c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c37e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c380:	f043 0302 	orr.w	r3, r3, #2
 800c384:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c386:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c388:	f003 0302 	and.w	r3, r3, #2
 800c38c:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800c38e:	2503      	movs	r5, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c390:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800c392:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = (GPIO_PIN_All^ (GPIO_PIN_6 | GPIO_PIN_7));
 800c394:	f64f 733f 	movw	r3, #65343	; 0xff3f
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800c398:	e9cd 5604 	strd	r5, r6, [sp, #16]
  GPIO_InitStructure.Pin = (GPIO_PIN_All^ (GPIO_PIN_6 | GPIO_PIN_7));
 800c39c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800c39e:	f000 fd5b 	bl	800ce58 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800c3a2:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 800c3a4:	f649 73ff 	movw	r3, #40959	; 0x9fff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800c3a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 800c3ac:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800c3ae:	f000 fd53 	bl	800ce58 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800c3b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c3b4:	f023 0302 	bic.w	r3, r3, #2
 800c3b8:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_PWREx_EnableSRAM2ContentRetention();
 800c3ba:	f000 fe53 	bl	800d064 <HAL_PWREx_EnableSRAM2ContentRetention>
  LPM_SetConf(&LowPowerModeConfiguration);
 800c3be:	a803      	add	r0, sp, #12
  LowPowerModeConfiguration.Stop_Mode_Config = CFG_StopMode2;
 800c3c0:	2302      	movs	r3, #2
  LowPowerModeConfiguration.OFF_Mode_Config = CFG_Standby;
 800c3c2:	e9cd 3503 	strd	r3, r5, [sp, #12]
  LPM_SetConf(&LowPowerModeConfiguration);
 800c3c6:	f7ff fcd7 	bl	800bd78 <LPM_SetConf>
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 800c3ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  hrtc.Instance = RTC;                        /**< Define instance */
 800c3ce:	4d2f      	ldr	r5, [pc, #188]	; (800c48c <main+0x1cc>)
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 800c3d0:	f043 0301 	orr.w	r3, r3, #1
 800c3d4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800c3d8:	f000 fe34 	bl	800d044 <HAL_PWR_EnableBkUpAccess>
  HAL_PWR_EnableBkUpAccess();
 800c3dc:	f000 fe32 	bl	800d044 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI); /**< Select LSI as RTC Input */
 800c3e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c3e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c3ec:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  __HAL_RCC_RTC_ENABLE();                     /**< Enable RTC */
 800c3f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c3f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3f8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 800c3fc:	4628      	mov	r0, r5
  hrtc.Instance = RTC;                        /**< Define instance */
 800c3fe:	4b24      	ldr	r3, [pc, #144]	; (800c490 <main+0x1d0>)
 800c400:	602b      	str	r3, [r5, #0]
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 800c402:	f001 fa87 	bl	800d914 <HAL_RTCEx_EnableBypassShadow>
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800c406:	2201      	movs	r2, #1
 800c408:	f647 73ff 	movw	r3, #32767	; 0x7fff
  HAL_RTC_Init(&hrtc);
 800c40c:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800c40e:	e9c5 2302 	strd	r2, r3, [r5, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c412:	612e      	str	r6, [r5, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;             /**< need to be initialized to not corrupt the RTC_CR register */
 800c414:	606e      	str	r6, [r5, #4]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;  /**< need to be initialized to not corrupt the RTC_CR register */
 800c416:	61ae      	str	r6, [r5, #24]
  HAL_RTC_Init(&hrtc);
 800c418:	f001 fa36 	bl	800d888 <HAL_RTC_Init>
  __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc) ;  /**< Disable Write Protection */
 800c41c:	682a      	ldr	r2, [r5, #0]
 800c41e:	23ca      	movs	r3, #202	; 0xca
 800c420:	6253      	str	r3, [r2, #36]	; 0x24
 800c422:	2353      	movs	r3, #83	; 0x53
 800c424:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800c426:	6893      	ldr	r3, [r2, #8]
 800c428:	f023 0307 	bic.w	r3, r3, #7
 800c42c:	f043 0303 	orr.w	r3, r3, #3
 800c430:	6093      	str	r3, [r2, #8]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0);  /**< Wait for LSI to be stable */
 800c432:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c436:	079b      	lsls	r3, r3, #30
 800c438:	d5fb      	bpl.n	800c432 <main+0x172>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc);  /**< Initialize the TimerServer */
 800c43a:	4914      	ldr	r1, [pc, #80]	; (800c48c <main+0x1cc>)
 800c43c:	2000      	movs	r0, #0
 800c43e:	f7fe ffeb 	bl	800b418 <HW_TS_Init>
  SystemClock_Config();         /**< Configure the system clock */
 800c442:	f7ff ff19 	bl	800c278 <SystemClock_Config>
  SCH_RegTask( CFG_IdleTask_HciAsynchEvt, TL_BLE_HCI_UserEvtProc );
 800c446:	4913      	ldr	r1, [pc, #76]	; (800c494 <main+0x1d4>)
 800c448:	2005      	movs	r0, #5
 800c44a:	f7ff fd39 	bl	800bec0 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_TlEvt, TL_BLE_R_EvtProc );
 800c44e:	4912      	ldr	r1, [pc, #72]	; (800c498 <main+0x1d8>)
 800c450:	2000      	movs	r0, #0
 800c452:	f7ff fd35 	bl	800bec0 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_Button, LB_App_Button_Trigger_Received );
 800c456:	4911      	ldr	r1, [pc, #68]	; (800c49c <main+0x1dc>)
 800c458:	2004      	movs	r0, #4
 800c45a:	f7ff fd31 	bl	800bec0 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_StartAdv, LBR_Adv_Request );
 800c45e:	4910      	ldr	r1, [pc, #64]	; (800c4a0 <main+0x1e0>)
 800c460:	2001      	movs	r0, #1
 800c462:	f7ff fd2d 	bl	800bec0 <SCH_RegTask>
  LBR_Init(LBR_Full);
 800c466:	2001      	movs	r0, #1
 800c468:	f7ff fddc 	bl	800c024 <LBR_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800c46c:	2000      	movs	r0, #0
 800c46e:	2101      	movs	r1, #1
 800c470:	f000 f9d8 	bl	800c824 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 800c474:	2000      	movs	r0, #0
 800c476:	f000 f9b3 	bl	800c7e0 <BSP_LED_Init>
    SCH_Run();
 800c47a:	f7ff fd6f 	bl	800bf5c <SCH_Run>
  while(1)
 800c47e:	e7fc      	b.n	800c47a <main+0x1ba>
 800c480:	40021000 	.word	0x40021000
 800c484:	40007000 	.word	0x40007000
 800c488:	48000400 	.word	0x48000400
 800c48c:	20000ad0 	.word	0x20000ad0
 800c490:	40002800 	.word	0x40002800
 800c494:	0800b93d 	.word	0x0800b93d
 800c498:	0800bb8d 	.word	0x0800bb8d
 800c49c:	0800c1a5 	.word	0x0800c1a5
 800c4a0:	0800c0c9 	.word	0x0800c0c9

0800c4a4 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch(GPIO_Pin)
 800c4a4:	2840      	cmp	r0, #64	; 0x40
 800c4a6:	d003      	beq.n	800c4b0 <HAL_GPIO_EXTI_Callback+0xc>
 800c4a8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800c4ac:	d002      	beq.n	800c4b4 <HAL_GPIO_EXTI_Callback+0x10>
 800c4ae:	4770      	bx	lr
  {
    case BNRG_SPI_EXTI_PIN:
      HW_BNRG_SpiIrqCb();
 800c4b0:	f7fe bdbc 	b.w	800b02c <HW_BNRG_SpiIrqCb>
      break;
    case USER_BUTTON_PIN:
      LBR_App_Key_Button_Action();
 800c4b4:	f7ff be54 	b.w	800c160 <LBR_App_Key_Button_Action>

0800c4b8 <LPM_ExitStopMode>:
  LL_RCC_SetSysClkSource(RCC_CFGR_SW_PLL);              /**< Select PLL as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL);  /**< Wait till PLL is used as system clock source */
#endif

  return;
}
 800c4b8:	4770      	bx	lr
	...

0800c4bc <LPM_EnterOffMode>:
  SET_BIT(PWR->CR3, WakeUpPin);
 800c4bc:	4b04      	ldr	r3, [pc, #16]	; (800c4d0 <LPM_EnterOffMode+0x14>)
 800c4be:	689a      	ldr	r2, [r3, #8]
 800c4c0:	f042 0201 	orr.w	r2, r2, #1
 800c4c4:	609a      	str	r2, [r3, #8]
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 800c4c6:	689a      	ldr	r2, [r3, #8]
 800c4c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c4cc:	609a      	str	r2, [r3, #8]
  LL_PWR_EnableWakeUpPin(BNRG_SPI_IRQ_WAKEUP_PIN);
  LL_PWR_EnablePUPDCfg();

  return;

}
 800c4ce:	4770      	bx	lr
 800c4d0:	40007000 	.word	0x40007000

0800c4d4 <LPM_ExitOffMode>:
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 800c4d4:	4b05      	ldr	r3, [pc, #20]	; (800c4ec <LPM_ExitOffMode+0x18>)
 800c4d6:	689a      	ldr	r2, [r3, #8]
 800c4d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4dc:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(PWR->CR3, WakeUpPin);
 800c4de:	689a      	ldr	r2, [r3, #8]
 800c4e0:	f022 0201 	bic.w	r2, r2, #1
 800c4e4:	609a      	str	r2, [r3, #8]
  * @rmtoll SCR          CWUF1         LL_PWR_ClearFlag_WU1
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU1(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF1);
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	619a      	str	r2, [r3, #24]
  LL_PWR_DisablePUPDCfg();
  LL_PWR_DisableWakeUpPin(BNRG_SPI_IRQ_WAKEUP_PIN);
  BNRG_SPI_CLEAR_WAKEUP_FLAG();

  return;
}
 800c4ea:	4770      	bx	lr
 800c4ec:	40007000 	.word	0x40007000

0800c4f0 <HAL_InitTick>:
  * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  return (HAL_OK);
}
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	4770      	bx	lr

0800c4f4 <SCH_Idle>:
 * @param  None
 * @retval None
 */
void SCH_Idle ( void )
{
  LPM_EnterModeSelected();
 800c4f4:	f7ff bc74 	b.w	800bde0 <LPM_EnterModeSelected>

0800c4f8 <TL_BLE_HCI_StatusNot>:
 *        At least, TL_BLE_HCI_UserEvtProc shall not be executed while the TL remains busy
 * @param status
 * @retval None
 */
void TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdStatus_t status)
{
 800c4f8:	b508      	push	{r3, lr}
  switch(status)
 800c4fa:	b110      	cbz	r0, 800c502 <TL_BLE_HCI_StatusNot+0xa>
 800c4fc:	2801      	cmp	r0, #1
 800c4fe:	d00b      	beq.n	800c518 <TL_BLE_HCI_StatusNot+0x20>

    default:
      break;
  }
  return;
}
 800c500:	bd08      	pop	{r3, pc}
      SCH_PauseTask( CFG_IdleTask_StartAdv );
 800c502:	2001      	movs	r0, #1
 800c504:	f7ff fcf8 	bl	800bef8 <SCH_PauseTask>
      SCH_PauseTask( CFG_IdleTask_Button );
 800c508:	2004      	movs	r0, #4
 800c50a:	f7ff fcf5 	bl	800bef8 <SCH_PauseTask>
}
 800c50e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SCH_PauseTask( CFG_IdleTask_HciAsynchEvt );
 800c512:	2005      	movs	r0, #5
 800c514:	f7ff bcf0 	b.w	800bef8 <SCH_PauseTask>
      SCH_ResumeTask( CFG_IdleTask_StartAdv );
 800c518:	f7ff fd00 	bl	800bf1c <SCH_ResumeTask>
      SCH_ResumeTask( CFG_IdleTask_Button );
 800c51c:	2004      	movs	r0, #4
 800c51e:	f7ff fcfd 	bl	800bf1c <SCH_ResumeTask>
}
 800c522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SCH_ResumeTask( CFG_IdleTask_HciAsynchEvt );
 800c526:	2005      	movs	r0, #5
 800c528:	f7ff bcf8 	b.w	800bf1c <SCH_ResumeTask>

0800c52c <HW_TS_RTC_Int_AppNot>:
  {
    case CFG_TimProcID_isr:
      /**
       * This is expected to be called in the Timer Interrupt Handler to limit latency
       */
      pfTimerCallBack();
 800c52c:	4710      	bx	r2
	...

0800c530 <Potato_Save>:
	return ret;
}
*/


save_ret_t Potato_Save(POTATO_Context_t *POTATO){
 800c530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t data = 0;
 800c534:	2200      	movs	r2, #0
save_ret_t Potato_Save(POTATO_Context_t *POTATO){
 800c536:	b089      	sub	sp, #36	; 0x24
	uint64_t data = 0;
 800c538:	2300      	movs	r3, #0
 800c53a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	//uint64_t *potato_address = (uint64_t *)POTATO;
	uint64_t *dest_address = (uint64_t *)Potato_Flash_Address;
	uint64_t *dest_Backup_address = (uint64_t *)Potato_Flash_Backup_Address;
	uint64_t *source_address = (uint64_t *)POTATO;

	uint32_t Page_Error = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	9301      	str	r3, [sp, #4]
	uint32_t primask_bit;
	save_ret_t ret = 0;

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 800c542:	9304      	str	r3, [sp, #16]
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Page;
 800c544:	2401      	movs	r4, #1
 800c546:	23fe      	movs	r3, #254	; 0xfe
 800c548:	e9cd 4305 	strd	r4, r3, [sp, #20]
	Erase_t.NbPages = 2;
 800c54c:	2302      	movs	r3, #2
save_ret_t Potato_Save(POTATO_Context_t *POTATO){
 800c54e:	4605      	mov	r5, r0
	Erase_t.NbPages = 2;
 800c550:	9307      	str	r3, [sp, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c552:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c556:	b672      	cpsid	i
	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	//CRC ///////////////////////////////////////////////////////////////////

	crcval = crcSlow((uint8_t*)POTATO, Potato_Data_Length_Bytes_without_CRC);
 800c558:	2164      	movs	r1, #100	; 0x64
 800c55a:	f7ff fd47 	bl	800bfec <crcSlow>
	POTATO->POTATO_CRC[0] = (crcval&0xFF00)>>8;
 800c55e:	0a03      	lsrs	r3, r0, #8
 800c560:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	POTATO->POTATO_CRC[1] = crcval&0xFF;
 800c564:	f885 0065 	strb.w	r0, [r5, #101]	; 0x65

	/////////////////////////////////////////////////////////////////////////

	if(HAL_FLASH_Unlock() != HAL_OK) {
 800c568:	f000 fb0a 	bl	800cb80 <HAL_FLASH_Unlock>
 800c56c:	bb68      	cbnz	r0, 800c5ca <Potato_Save+0x9a>
		ret = unlock_error;
		return ret;
	}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 800c56e:	a901      	add	r1, sp, #4
 800c570:	a804      	add	r0, sp, #16
 800c572:	f000 fbfd 	bl	800cd70 <HAL_FLASHEx_Erase>
 800c576:	bb50      	cbnz	r0, 800c5ce <Potato_Save+0x9e>
		/*
		for(j = 0; j < 8; j++){
			data[i] |= (*potato_address)<<(7-j)*8;
			potato_address++;
		}*/
		memcpy(&data, (source_address + i),8);
 800c578:	f105 4478 	add.w	r4, r5, #4160749568	; 0xf8000000
 800c57c:	4e16      	ldr	r6, [pc, #88]	; (800c5d8 <Potato_Save+0xa8>)
	for(i = 0; i < 13; i++){
 800c57e:	4d17      	ldr	r5, [pc, #92]	; (800c5dc <Potato_Save+0xac>)
		memcpy(&data, (source_address + i),8);
 800c580:	f5a4 24fe 	sub.w	r4, r4, #520192	; 0x7f000
 800c584:	19a2      	adds	r2, r4, r6
 800c586:	59a0      	ldr	r0, [r4, r6]
 800c588:	6851      	ldr	r1, [r2, #4]
 800c58a:	ab02      	add	r3, sp, #8
 800c58c:	c303      	stmia	r3!, {r0, r1}

		//data = 0x1010101010101010;

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), data) != HAL_OK) {
 800c58e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c592:	4631      	mov	r1, r6
 800c594:	4642      	mov	r2, r8
 800c596:	464b      	mov	r3, r9
 800c598:	2000      	movs	r0, #0
 800c59a:	f000 fb37 	bl	800cc0c <HAL_FLASH_Program>
 800c59e:	b118      	cbz	r0, 800c5a8 <Potato_Save+0x78>
			ret = write_error;
			return ret;
 800c5a0:	2002      	movs	r0, #2
	}
	__set_PRIMASK(primask_bit);

	return save_ok;

}
 800c5a2:	b009      	add	sp, #36	; 0x24
 800c5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_Backup_address + i), data) != HAL_OK) {
 800c5a8:	4642      	mov	r2, r8
 800c5aa:	464b      	mov	r3, r9
 800c5ac:	f506 6100 	add.w	r1, r6, #2048	; 0x800
 800c5b0:	f000 fb2c 	bl	800cc0c <HAL_FLASH_Program>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d1f3      	bne.n	800c5a0 <Potato_Save+0x70>
	for(i = 0; i < 13; i++){
 800c5b8:	3608      	adds	r6, #8
 800c5ba:	42ae      	cmp	r6, r5
 800c5bc:	d1e2      	bne.n	800c584 <Potato_Save+0x54>
	if(HAL_FLASH_Lock() != HAL_OK){
 800c5be:	f000 faf1 	bl	800cba4 <HAL_FLASH_Lock>
 800c5c2:	b930      	cbnz	r0, 800c5d2 <Potato_Save+0xa2>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5c4:	f387 8810 	msr	PRIMASK, r7
	return save_ok;
 800c5c8:	e7eb      	b.n	800c5a2 <Potato_Save+0x72>
		return ret;
 800c5ca:	2003      	movs	r0, #3
 800c5cc:	e7e9      	b.n	800c5a2 <Potato_Save+0x72>
		return ret;
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	e7e7      	b.n	800c5a2 <Potato_Save+0x72>
		return ret;
 800c5d2:	2004      	movs	r0, #4
 800c5d4:	e7e5      	b.n	800c5a2 <Potato_Save+0x72>
 800c5d6:	bf00      	nop
 800c5d8:	0807f000 	.word	0x0807f000
 800c5dc:	0807f068 	.word	0x0807f068

0800c5e0 <Potato_Load>:

save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 800c5e0:	b530      	push	{r4, r5, lr}
 800c5e2:	b09b      	sub	sp, #108	; 0x6c

	save_ret_t ret = 0;
	uint16_t crcval = 0;
	uint8_t temp[102] = {0,};
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	2262      	movs	r2, #98	; 0x62
save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 800c5e8:	4605      	mov	r5, r0
	uint8_t temp[102] = {0,};
 800c5ea:	a801      	add	r0, sp, #4
 800c5ec:	9100      	str	r1, [sp, #0]
 800c5ee:	f001 fa49 	bl	800da84 <memset>
	//uint16_t saved_crcval = 0;
	//uint8_t *normal_crc_address = Potato_Flash_CRC_Address;
	//uint8_t *backup_crc_address = Potato_Flash_Backup_CRC_Address;

	memcpy(temp, Potato_Flash_Address,Potato_Data_Length_Bytes);
 800c5f2:	2266      	movs	r2, #102	; 0x66
 800c5f4:	4910      	ldr	r1, [pc, #64]	; (800c638 <Potato_Load+0x58>)
 800c5f6:	4668      	mov	r0, sp
 800c5f8:	f001 fa36 	bl	800da68 <memcpy>


	//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
	crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 800c5fc:	2166      	movs	r1, #102	; 0x66
 800c5fe:	4668      	mov	r0, sp
 800c600:	f7ff fcf4 	bl	800bfec <crcSlow>
	if(crcval == 0){
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 800c604:	2266      	movs	r2, #102	; 0x66
	if(crcval == 0){
 800c606:	4604      	mov	r4, r0
 800c608:	b930      	cbnz	r0, 800c618 <Potato_Load+0x38>
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 800c60a:	490b      	ldr	r1, [pc, #44]	; (800c638 <Potato_Load+0x58>)

		//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);

		if(crcval == 0){
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 800c60c:	4628      	mov	r0, r5
 800c60e:	f001 fa2b 	bl	800da68 <memcpy>
			ret = save_ok;
			return ret;
 800c612:	4620      	mov	r0, r4
			ret = crc_error;
			return ret;
		}
	}

}
 800c614:	b01b      	add	sp, #108	; 0x6c
 800c616:	bd30      	pop	{r4, r5, pc}
		memcpy(temp, Potato_Flash_Backup_Address, Potato_Data_Length_Bytes);
 800c618:	4908      	ldr	r1, [pc, #32]	; (800c63c <Potato_Load+0x5c>)
 800c61a:	4668      	mov	r0, sp
 800c61c:	f001 fa24 	bl	800da68 <memcpy>
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 800c620:	2166      	movs	r1, #102	; 0x66
 800c622:	4668      	mov	r0, sp
 800c624:	f7ff fce2 	bl	800bfec <crcSlow>
		if(crcval == 0){
 800c628:	4604      	mov	r4, r0
 800c62a:	b910      	cbnz	r0, 800c632 <Potato_Load+0x52>
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 800c62c:	4903      	ldr	r1, [pc, #12]	; (800c63c <Potato_Load+0x5c>)
 800c62e:	2266      	movs	r2, #102	; 0x66
 800c630:	e7ec      	b.n	800c60c <Potato_Load+0x2c>
			return ret;
 800c632:	2006      	movs	r0, #6
 800c634:	e7ee      	b.n	800c614 <Potato_Load+0x34>
 800c636:	bf00      	nop
 800c638:	0807f000 	.word	0x0807f000
 800c63c:	0807f800 	.word	0x0807f800

0800c640 <Potato_Erase>:

save_ret_t Potato_Erase(erase_page_t pages){
 800c640:	b530      	push	{r4, r5, lr}
	uint32_t Page_Error = 0;
 800c642:	2300      	movs	r3, #0
save_ret_t Potato_Erase(erase_page_t pages){
 800c644:	b087      	sub	sp, #28
	uint32_t primask_bit;
	save_ret_t ret = 0;

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 800c646:	e9cd 3301 	strd	r3, r3, [sp, #4]
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Page;
 800c64a:	2401      	movs	r4, #1
 800c64c:	23fe      	movs	r3, #254	; 0xfe
 800c64e:	e9cd 4303 	strd	r4, r3, [sp, #12]
	Erase_t.NbPages = pages;
 800c652:	9005      	str	r0, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c654:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c658:	b672      	cpsid	i

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 800c65a:	f000 fa91 	bl	800cb80 <HAL_FLASH_Unlock>
 800c65e:	b958      	cbnz	r0, 800c678 <Potato_Erase+0x38>
			ret = unlock_error;
			return ret;
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 800c660:	a901      	add	r1, sp, #4
 800c662:	a802      	add	r0, sp, #8
 800c664:	f000 fb84 	bl	800cd70 <HAL_FLASHEx_Erase>
 800c668:	b940      	cbnz	r0, 800c67c <Potato_Erase+0x3c>
			ret = erase_error;
			return ret;
		}


	if(HAL_FLASH_Lock() != HAL_OK){
 800c66a:	f000 fa9b 	bl	800cba4 <HAL_FLASH_Lock>
 800c66e:	b938      	cbnz	r0, 800c680 <Potato_Erase+0x40>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c670:	f385 8810 	msr	PRIMASK, r5
			return ret;
		}

	__set_PRIMASK(primask_bit);
	return ret;
}
 800c674:	b007      	add	sp, #28
 800c676:	bd30      	pop	{r4, r5, pc}
			return ret;
 800c678:	2003      	movs	r0, #3
 800c67a:	e7fb      	b.n	800c674 <Potato_Erase+0x34>
			return ret;
 800c67c:	4620      	mov	r0, r4
 800c67e:	e7f9      	b.n	800c674 <Potato_Erase+0x34>
			return ret;
 800c680:	2004      	movs	r0, #4
 800c682:	e7f7      	b.n	800c674 <Potato_Erase+0x34>

0800c684 <Potato_Backup_Load>:

save_ret_t Potato_Backup_Load(void){
 800c684:	b570      	push	{r4, r5, r6, lr}
	uint64_t * dest_address = (uint64_t *)Potato_Flash_Address;
	uint64_t *source_address = (uint64_t *)Potato_Flash_Backup_Address;
	//uint64_t data;
	save_ret_t ret = 0;
	uint32_t primask_bit;
	uint32_t Page_Error = 0;
 800c686:	2300      	movs	r3, #0
save_ret_t Potato_Backup_Load(void){
 800c688:	b086      	sub	sp, #24

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Page;
 800c68a:	2401      	movs	r4, #1
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 800c68c:	e9cd 3301 	strd	r3, r3, [sp, #4]
	Erase_t.Page = Potato_Flash_Page;
 800c690:	23fe      	movs	r3, #254	; 0xfe
 800c692:	e9cd 4303 	strd	r4, r3, [sp, #12]
	Erase_t.NbPages = 1;
 800c696:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c698:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c69c:	b672      	cpsid	i

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 800c69e:	f000 fa6f 	bl	800cb80 <HAL_FLASH_Unlock>
 800c6a2:	b9c0      	cbnz	r0, 800c6d6 <Potato_Backup_Load+0x52>
			ret = unlock_error;
			return ret;
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 800c6a4:	a901      	add	r1, sp, #4
 800c6a6:	a802      	add	r0, sp, #8
 800c6a8:	f000 fb62 	bl	800cd70 <HAL_FLASHEx_Erase>
 800c6ac:	b9a8      	cbnz	r0, 800c6da <Potato_Backup_Load+0x56>
 800c6ae:	4c0e      	ldr	r4, [pc, #56]	; (800c6e8 <Potato_Backup_Load+0x64>)
			ret = erase_error;
			return ret;
		}

	for(uint8_t i = 0; i<13; i++){
 800c6b0:	4e0e      	ldr	r6, [pc, #56]	; (800c6ec <Potato_Backup_Load+0x68>)
		//memcpy(&data, source_address + i, 8);
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), *(source_address + i)) != HAL_OK) {
 800c6b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c6b6:	f5a4 6100 	sub.w	r1, r4, #2048	; 0x800
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	f000 faa6 	bl	800cc0c <HAL_FLASH_Program>
 800c6c0:	b968      	cbnz	r0, 800c6de <Potato_Backup_Load+0x5a>
	for(uint8_t i = 0; i<13; i++){
 800c6c2:	3408      	adds	r4, #8
 800c6c4:	42b4      	cmp	r4, r6
 800c6c6:	d1f4      	bne.n	800c6b2 <Potato_Backup_Load+0x2e>
			ret = write_error;
			return ret;
		}
	}

	if(HAL_FLASH_Lock() != HAL_OK){
 800c6c8:	f000 fa6c 	bl	800cba4 <HAL_FLASH_Lock>
 800c6cc:	b948      	cbnz	r0, 800c6e2 <Potato_Backup_Load+0x5e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6ce:	f385 8810 	msr	PRIMASK, r5
		}

	__set_PRIMASK(primask_bit);

	return ret;
}
 800c6d2:	b006      	add	sp, #24
 800c6d4:	bd70      	pop	{r4, r5, r6, pc}
			return ret;
 800c6d6:	2003      	movs	r0, #3
 800c6d8:	e7fb      	b.n	800c6d2 <Potato_Backup_Load+0x4e>
			return ret;
 800c6da:	4620      	mov	r0, r4
 800c6dc:	e7f9      	b.n	800c6d2 <Potato_Backup_Load+0x4e>
			return ret;
 800c6de:	2002      	movs	r0, #2
 800c6e0:	e7f7      	b.n	800c6d2 <Potato_Backup_Load+0x4e>
			return ret;
 800c6e2:	2004      	movs	r0, #4
 800c6e4:	e7f5      	b.n	800c6d2 <Potato_Backup_Load+0x4e>
 800c6e6:	bf00      	nop
 800c6e8:	0807f800 	.word	0x0807f800
 800c6ec:	0807f868 	.word	0x0807f868

0800c6f0 <Potato_Dummy_Backup>:

save_ret_t Potato_Dummy_Backup(void){
 800c6f0:	b570      	push	{r4, r5, r6, lr}
	uint64_t * dest_address = (uint64_t *)Potato_Flash_Backup_Address;
	save_ret_t ret = 0;
	uint32_t primask_bit;
	uint32_t Page_Error = 0;
 800c6f2:	2300      	movs	r3, #0
save_ret_t Potato_Dummy_Backup(void){
 800c6f4:	b086      	sub	sp, #24
	uint64_t data = 0x1010101010101010;

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Backup_Page;
 800c6f6:	2401      	movs	r4, #1
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 800c6f8:	e9cd 3301 	strd	r3, r3, [sp, #4]
	Erase_t.Page = Potato_Flash_Backup_Page;
 800c6fc:	23ff      	movs	r3, #255	; 0xff
 800c6fe:	e9cd 4303 	strd	r4, r3, [sp, #12]
	Erase_t.NbPages = 1;
 800c702:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c704:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c708:	b672      	cpsid	i

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 800c70a:	f000 fa39 	bl	800cb80 <HAL_FLASH_Unlock>
 800c70e:	b9c8      	cbnz	r0, 800c744 <Potato_Dummy_Backup+0x54>
			ret = unlock_error;
			return ret;
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 800c710:	a901      	add	r1, sp, #4
 800c712:	a802      	add	r0, sp, #8
 800c714:	f000 fb2c 	bl	800cd70 <HAL_FLASHEx_Erase>
 800c718:	b9b0      	cbnz	r0, 800c748 <Potato_Dummy_Backup+0x58>
 800c71a:	4c0e      	ldr	r4, [pc, #56]	; (800c754 <Potato_Dummy_Backup+0x64>)
			ret = erase_error;
			return ret;
		}

	for(uint8_t i = 0; i<13; i++){
 800c71c:	4e0e      	ldr	r6, [pc, #56]	; (800c758 <Potato_Dummy_Backup+0x68>)
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), data)) {
 800c71e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800c722:	f04f 3310 	mov.w	r3, #269488144	; 0x10101010
 800c726:	4621      	mov	r1, r4
 800c728:	2000      	movs	r0, #0
 800c72a:	f000 fa6f 	bl	800cc0c <HAL_FLASH_Program>
 800c72e:	b968      	cbnz	r0, 800c74c <Potato_Dummy_Backup+0x5c>
	for(uint8_t i = 0; i<13; i++){
 800c730:	3408      	adds	r4, #8
 800c732:	42b4      	cmp	r4, r6
 800c734:	d1f3      	bne.n	800c71e <Potato_Dummy_Backup+0x2e>
			ret = write_error;
			return ret;
		}
	}

	if(HAL_FLASH_Lock() != HAL_OK){
 800c736:	f000 fa35 	bl	800cba4 <HAL_FLASH_Lock>
 800c73a:	b948      	cbnz	r0, 800c750 <Potato_Dummy_Backup+0x60>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c73c:	f385 8810 	msr	PRIMASK, r5
		}

	__set_PRIMASK(primask_bit);

	return ret;
}
 800c740:	b006      	add	sp, #24
 800c742:	bd70      	pop	{r4, r5, r6, pc}
			return ret;
 800c744:	2003      	movs	r0, #3
 800c746:	e7fb      	b.n	800c740 <Potato_Dummy_Backup+0x50>
			return ret;
 800c748:	4620      	mov	r0, r4
 800c74a:	e7f9      	b.n	800c740 <Potato_Dummy_Backup+0x50>
			return ret;
 800c74c:	2002      	movs	r0, #2
 800c74e:	e7f7      	b.n	800c740 <Potato_Dummy_Backup+0x50>
			return ret;
 800c750:	2004      	movs	r0, #4
 800c752:	e7f5      	b.n	800c740 <Potato_Dummy_Backup+0x50>
 800c754:	0807f800 	.word	0x0807f800
 800c758:	0807f868 	.word	0x0807f868

0800c75c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800c75c:	4770      	bx	lr

0800c75e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800c75e:	e7fe      	b.n	800c75e <HardFault_Handler>

0800c760 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800c760:	e7fe      	b.n	800c760 <MemManage_Handler>

0800c762 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800c762:	e7fe      	b.n	800c762 <BusFault_Handler>

0800c764 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800c764:	e7fe      	b.n	800c764 <UsageFault_Handler>

0800c766 <SVC_Handler>:
 800c766:	4770      	bx	lr

0800c768 <DebugMon_Handler>:
 800c768:	4770      	bx	lr

0800c76a <PendSV_Handler>:
 800c76a:	4770      	bx	lr

0800c76c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800c76c:	f000 b8d8 	b.w	800c920 <HAL_IncTick>

0800c770 <RTC_WKUP_IRQHandler>:
 * @param  None
 * @retval None
 */
void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 800c770:	f7ff b840 	b.w	800b7f4 <HW_TS_RTC_Wakeup_Handler>

0800c774 <EXTI9_5_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void)           /* BNRG_SPI_EXTI_IRQHandler */
{
  HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
 800c774:	2040      	movs	r0, #64	; 0x40
 800c776:	f000 bc59 	b.w	800d02c <HAL_GPIO_EXTI_IRQHandler>

0800c77a <EXTI15_10_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI15_10_IRQHandler(void)  /* PUSH_BUTTON_EXTI_IRQHandler */
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 800c77a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c77e:	f000 bc55 	b.w	800d02c <HAL_GPIO_EXTI_IRQHandler>

0800c782 <DMA2_Channel1_IRQHandler>:
 * @param  None
 * @retval None
 */
void DMA2_Channel1_IRQHandler(void)     /* BNRG_SPI_RX_DMA_IRQHandler */
  {
    HW_BNRG_DMARxCb();
 800c782:	f7fe bd2d 	b.w	800b1e0 <HW_BNRG_DMARxCb>

0800c786 <DMA2_Channel2_IRQHandler>:
 * @param  None
 * @retval None
 */
void DMA2_Channel2_IRQHandler(void)    /* BNRG_SPI_TX_DMA_IRQHandler */
  {
    HW_BNRG_DMATxCb();
 800c786:	f7fe bc6b 	b.w	800b060 <HW_BNRG_DMATxCb>
	...

0800c78c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c78c:	4b0d      	ldr	r3, [pc, #52]	; (800c7c4 <SystemInit+0x38>)
     */

    /**
     * Increase FLASH latency to 3WS
     */
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 800c78e:	490e      	ldr	r1, [pc, #56]	; (800c7c8 <SystemInit+0x3c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c790:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c794:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800c798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 800c79c:	680a      	ldr	r2, [r1, #0]
 800c79e:	f042 0203 	orr.w	r2, r2, #3
 800c7a2:	600a      	str	r2, [r1, #0]

    /**
     * Decrease VCore to Range2.
     * As we are downscaling Vcore, it is not required to wait for the VOSF bit to be ready
     */
    RCC->APB1ENR1 = RCC_APB1ENR1_PWREN;  /**< Switch ON PWR clock */
 800c7a4:	4a09      	ldr	r2, [pc, #36]	; (800c7cc <SystemInit+0x40>)
 800c7a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800c7aa:	6591      	str	r1, [r2, #88]	; 0x58
    PWR->CR1 = PWR_CR1_VOS_1;
 800c7ac:	4908      	ldr	r1, [pc, #32]	; (800c7d0 <SystemInit+0x44>)
 800c7ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c7b2:	6008      	str	r0, [r1, #0]

    /**
     * Increase MSI to 24Mhz
     *
     */
    RCC->CR = (RCC_CR_MSIRANGE_9|RCC_CR_MSIRGSEL|RCC_CR_MSION);   /**< Increase MSI Speed and switch MSI source*/
 800c7b4:	2199      	movs	r1, #153	; 0x99
 800c7b6:	6011      	str	r1, [r2, #0]

    SystemCoreClock = 24000000;
 800c7b8:	4a06      	ldr	r2, [pc, #24]	; (800c7d4 <SystemInit+0x48>)
 800c7ba:	4907      	ldr	r1, [pc, #28]	; (800c7d8 <SystemInit+0x4c>)
 800c7bc:	6011      	str	r1, [r2, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c7be:	4a07      	ldr	r2, [pc, #28]	; (800c7dc <SystemInit+0x50>)
 800c7c0:	609a      	str	r2, [r3, #8]
#endif

}
 800c7c2:	4770      	bx	lr
 800c7c4:	e000ed00 	.word	0xe000ed00
 800c7c8:	40022000 	.word	0x40022000
 800c7cc:	40021000 	.word	0x40021000
 800c7d0:	40007000 	.word	0x40007000
 800c7d4:	20000004 	.word	0x20000004
 800c7d8:	016e3600 	.word	0x016e3600
 800c7dc:	0800a000 	.word	0x0800a000

0800c7e0 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800c7e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800c7e2:	b948      	cbnz	r0, 800c7f8 <BSP_LED_Init+0x18>
 800c7e4:	4b0d      	ldr	r3, [pc, #52]	; (800c81c <BSP_LED_Init+0x3c>)
 800c7e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c7e8:	f042 0202 	orr.w	r2, r2, #2
 800c7ec:	64da      	str	r2, [r3, #76]	; 0x4c
 800c7ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7f0:	f003 0302 	and.w	r3, r3, #2
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800c7f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800c802:	2100      	movs	r1, #0
 800c804:	2302      	movs	r3, #2
 800c806:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800c80a:	4b05      	ldr	r3, [pc, #20]	; (800c820 <BSP_LED_Init+0x40>)
 800c80c:	a901      	add	r1, sp, #4
 800c80e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c812:	f000 fb21 	bl	800ce58 <HAL_GPIO_Init>
}
 800c816:	b007      	add	sp, #28
 800c818:	f85d fb04 	ldr.w	pc, [sp], #4
 800c81c:	40021000 	.word	0x40021000
 800c820:	20000008 	.word	0x20000008

0800c824 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800c824:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 800c826:	4b1b      	ldr	r3, [pc, #108]	; (800c894 <BSP_PB_Init+0x70>)
 800c828:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c82a:	f042 0204 	orr.w	r2, r2, #4
 800c82e:	64da      	str	r2, [r3, #76]	; 0x4c
 800c830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c832:	f003 0304 	and.w	r3, r3, #4
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800c83a:	b989      	cbnz	r1, 800c860 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800c83c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800c840:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800c844:	2101      	movs	r1, #1
 800c846:	2302      	movs	r3, #2
 800c848:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800c84c:	4b12      	ldr	r3, [pc, #72]	; (800c898 <BSP_PB_Init+0x74>)
 800c84e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c852:	a901      	add	r1, sp, #4
 800c854:	6840      	ldr	r0, [r0, #4]
 800c856:	f000 faff 	bl	800ce58 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 800c85a:	b007      	add	sp, #28
 800c85c:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 800c860:	2901      	cmp	r1, #1
 800c862:	d1fa      	bne.n	800c85a <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800c864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c868:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c86a:	2303      	movs	r3, #3
 800c86c:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800c86e:	4b0b      	ldr	r3, [pc, #44]	; (800c89c <BSP_PB_Init+0x78>)
 800c870:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800c872:	4b09      	ldr	r3, [pc, #36]	; (800c898 <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 800c874:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800c876:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c87a:	a901      	add	r1, sp, #4
 800c87c:	6840      	ldr	r0, [r0, #4]
 800c87e:	f000 faeb 	bl	800ce58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800c882:	2200      	movs	r2, #0
 800c884:	210f      	movs	r1, #15
 800c886:	2028      	movs	r0, #40	; 0x28
 800c888:	f000 f886 	bl	800c998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800c88c:	2028      	movs	r0, #40	; 0x28
 800c88e:	f000 f8b5 	bl	800c9fc <HAL_NVIC_EnableIRQ>
}
 800c892:	e7e2      	b.n	800c85a <BSP_PB_Init+0x36>
 800c894:	40021000 	.word	0x40021000
 800c898:	20000008 	.word	0x20000008
 800c89c:	10110000 	.word	0x10110000

0800c8a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800c8a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c8d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800c8a4:	f7ff ff72 	bl	800c78c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c8a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c8aa:	e003      	b.n	800c8b4 <LoopCopyDataInit>

0800c8ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c8ac:	4b0b      	ldr	r3, [pc, #44]	; (800c8dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c8ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c8b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c8b2:	3104      	adds	r1, #4

0800c8b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c8b4:	480a      	ldr	r0, [pc, #40]	; (800c8e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 800c8b6:	4b0b      	ldr	r3, [pc, #44]	; (800c8e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 800c8b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c8ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c8bc:	d3f6      	bcc.n	800c8ac <CopyDataInit>
	ldr	r2, =_sbss
 800c8be:	4a0a      	ldr	r2, [pc, #40]	; (800c8e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800c8c0:	e002      	b.n	800c8c8 <LoopFillZerobss>

0800c8c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c8c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c8c4:	f842 3b04 	str.w	r3, [r2], #4

0800c8c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c8c8:	4b08      	ldr	r3, [pc, #32]	; (800c8ec <LoopForever+0x16>)
	cmp	r2, r3
 800c8ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c8cc:	d3f9      	bcc.n	800c8c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c8ce:	f001 f8a7 	bl	800da20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c8d2:	f7ff fcf5 	bl	800c2c0 <main>

0800c8d6 <LoopForever>:

LoopForever:
    b LoopForever
 800c8d6:	e7fe      	b.n	800c8d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800c8d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800c8dc:	0800db38 	.word	0x0800db38
	ldr	r0, =_sdata
 800c8e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c8e4:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 800c8e8:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 800c8ec:	20000b7c 	.word	0x20000b7c

0800c8f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c8f0:	e7fe      	b.n	800c8f0 <ADC1_2_IRQHandler>

0800c8f2 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800c8f2:	4770      	bx	lr

0800c8f4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c8f4:	4a09      	ldr	r2, [pc, #36]	; (800c91c <HAL_Init+0x28>)
 800c8f6:	6813      	ldr	r3, [r2, #0]
 800c8f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800c8fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c8fe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c900:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c902:	f000 f837 	bl	800c974 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c906:	200f      	movs	r0, #15
 800c908:	f7ff fdf2 	bl	800c4f0 <HAL_InitTick>
 800c90c:	4604      	mov	r4, r0
 800c90e:	b918      	cbnz	r0, 800c918 <HAL_Init+0x24>
    HAL_MspInit();
 800c910:	f7ff ffef 	bl	800c8f2 <HAL_MspInit>
}
 800c914:	4620      	mov	r0, r4
 800c916:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800c918:	2401      	movs	r4, #1
 800c91a:	e7fb      	b.n	800c914 <HAL_Init+0x20>
 800c91c:	40022000 	.word	0x40022000

0800c920 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800c920:	4a03      	ldr	r2, [pc, #12]	; (800c930 <HAL_IncTick+0x10>)
 800c922:	4b04      	ldr	r3, [pc, #16]	; (800c934 <HAL_IncTick+0x14>)
 800c924:	6811      	ldr	r1, [r2, #0]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	440b      	add	r3, r1
 800c92a:	6013      	str	r3, [r2, #0]
}
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	20000b78 	.word	0x20000b78
 800c934:	2000001c 	.word	0x2000001c

0800c938 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800c938:	4b01      	ldr	r3, [pc, #4]	; (800c940 <HAL_GetTick+0x8>)
 800c93a:	6818      	ldr	r0, [r3, #0]
}
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	20000b78 	.word	0x20000b78

0800c944 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800c944:	4a02      	ldr	r2, [pc, #8]	; (800c950 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800c946:	6853      	ldr	r3, [r2, #4]
 800c948:	f043 0301 	orr.w	r3, r3, #1
 800c94c:	6053      	str	r3, [r2, #4]
}
 800c94e:	4770      	bx	lr
 800c950:	e0042000 	.word	0xe0042000

0800c954 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800c954:	4a02      	ldr	r2, [pc, #8]	; (800c960 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800c956:	6853      	ldr	r3, [r2, #4]
 800c958:	f043 0302 	orr.w	r3, r3, #2
 800c95c:	6053      	str	r3, [r2, #4]
}
 800c95e:	4770      	bx	lr
 800c960:	e0042000 	.word	0xe0042000

0800c964 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800c964:	4a02      	ldr	r2, [pc, #8]	; (800c970 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800c966:	6853      	ldr	r3, [r2, #4]
 800c968:	f043 0304 	orr.w	r3, r3, #4
 800c96c:	6053      	str	r3, [r2, #4]
}
 800c96e:	4770      	bx	lr
 800c970:	e0042000 	.word	0xe0042000

0800c974 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c974:	4907      	ldr	r1, [pc, #28]	; (800c994 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800c976:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c978:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c97c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c97e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c980:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c984:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c98c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800c990:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800c992:	4770      	bx	lr
 800c994:	e000ed00 	.word	0xe000ed00

0800c998 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c998:	4b16      	ldr	r3, [pc, #88]	; (800c9f4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c99a:	b530      	push	{r4, r5, lr}
 800c99c:	68dc      	ldr	r4, [r3, #12]
 800c99e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c9a2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c9a6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c9a8:	2d04      	cmp	r5, #4
 800c9aa:	bf28      	it	cs
 800c9ac:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c9ae:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9b0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c9b4:	bf8c      	ite	hi
 800c9b6:	3c03      	subhi	r4, #3
 800c9b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9ba:	fa03 f505 	lsl.w	r5, r3, r5
 800c9be:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c9c2:	40a3      	lsls	r3, r4
 800c9c4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9c8:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800c9ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9cc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9d0:	bfac      	ite	ge
 800c9d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9d6:	4a08      	ldrlt	r2, [pc, #32]	; (800c9f8 <HAL_NVIC_SetPriority+0x60>)
 800c9d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c9dc:	bfb8      	it	lt
 800c9de:	f000 000f 	andlt.w	r0, r0, #15
 800c9e2:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9e4:	bfaa      	itet	ge
 800c9e6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9ea:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9ec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800c9f0:	bd30      	pop	{r4, r5, pc}
 800c9f2:	bf00      	nop
 800c9f4:	e000ed00 	.word	0xe000ed00
 800c9f8:	e000ed14 	.word	0xe000ed14

0800c9fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	db08      	blt.n	800ca12 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ca00:	2301      	movs	r3, #1
 800ca02:	0942      	lsrs	r2, r0, #5
 800ca04:	f000 001f 	and.w	r0, r0, #31
 800ca08:	fa03 f000 	lsl.w	r0, r3, r0
 800ca0c:	4b01      	ldr	r3, [pc, #4]	; (800ca14 <HAL_NVIC_EnableIRQ+0x18>)
 800ca0e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ca12:	4770      	bx	lr
 800ca14:	e000e100 	.word	0xe000e100

0800ca18 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	db0d      	blt.n	800ca38 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ca1c:	0943      	lsrs	r3, r0, #5
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f000 001f 	and.w	r0, r0, #31
 800ca24:	fa02 f000 	lsl.w	r0, r2, r0
 800ca28:	3320      	adds	r3, #32
 800ca2a:	4a04      	ldr	r2, [pc, #16]	; (800ca3c <HAL_NVIC_DisableIRQ+0x24>)
 800ca2c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ca30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ca34:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	e000e100 	.word	0xe000e100

0800ca40 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ca40:	2800      	cmp	r0, #0
 800ca42:	db09      	blt.n	800ca58 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ca44:	0943      	lsrs	r3, r0, #5
 800ca46:	2201      	movs	r2, #1
 800ca48:	f000 001f 	and.w	r0, r0, #31
 800ca4c:	fa02 f000 	lsl.w	r0, r2, r0
 800ca50:	3340      	adds	r3, #64	; 0x40
 800ca52:	4a02      	ldr	r2, [pc, #8]	; (800ca5c <HAL_NVIC_SetPendingIRQ+0x1c>)
 800ca54:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	e000e100 	.word	0xe000e100

0800ca60 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ca60:	2800      	cmp	r0, #0
 800ca62:	db09      	blt.n	800ca78 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ca64:	0943      	lsrs	r3, r0, #5
 800ca66:	2201      	movs	r2, #1
 800ca68:	f000 001f 	and.w	r0, r0, #31
 800ca6c:	fa02 f000 	lsl.w	r0, r2, r0
 800ca70:	3360      	adds	r3, #96	; 0x60
 800ca72:	4a02      	ldr	r2, [pc, #8]	; (800ca7c <HAL_NVIC_ClearPendingIRQ+0x1c>)
 800ca74:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	e000e100 	.word	0xe000e100

0800ca80 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ca80:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d058      	beq.n	800cb38 <HAL_DMA_Init+0xb8>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ca86:	6801      	ldr	r1, [r0, #0]
 800ca88:	4b2c      	ldr	r3, [pc, #176]	; (800cb3c <HAL_DMA_Init+0xbc>)
 800ca8a:	4299      	cmp	r1, r3
 800ca8c:	f04f 0414 	mov.w	r4, #20
 800ca90:	d842      	bhi.n	800cb18 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ca92:	4a2b      	ldr	r2, [pc, #172]	; (800cb40 <HAL_DMA_Init+0xc0>)
 800ca94:	440a      	add	r2, r1
 800ca96:	fbb2 f2f4 	udiv	r2, r2, r4
 800ca9a:	0092      	lsls	r2, r2, #2
 800ca9c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800ca9e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 800caa2:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800caa4:	2302      	movs	r3, #2
 800caa6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800caaa:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800caae:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800cab0:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 800cab2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cab4:	432b      	orrs	r3, r5
 800cab6:	6945      	ldr	r5, [r0, #20]
 800cab8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800caba:	6985      	ldr	r5, [r0, #24]
 800cabc:	432b      	orrs	r3, r5
 800cabe:	69c5      	ldr	r5, [r0, #28]
 800cac0:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800cac2:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800cac4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800cac8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800cacc:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800cace:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800cad0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 800cad4:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800cad6:	d016      	beq.n	800cb06 <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800cad8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800cada:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800cadc:	f001 021c 	and.w	r2, r1, #28
 800cae0:	6841      	ldr	r1, [r0, #4]
 800cae2:	230f      	movs	r3, #15
 800cae4:	4093      	lsls	r3, r2
 800cae6:	4091      	lsls	r1, r2
 800cae8:	4a16      	ldr	r2, [pc, #88]	; (800cb44 <HAL_DMA_Init+0xc4>)
 800caea:	4294      	cmp	r4, r2
 800caec:	ea6f 0303 	mvn.w	r3, r3
 800caf0:	d11a      	bne.n	800cb28 <HAL_DMA_Init+0xa8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800caf2:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 800caf6:	4023      	ands	r3, r4
 800caf8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cafc:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 800cb00:	4319      	orrs	r1, r3
 800cb02:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb06:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800cb08:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb0a:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cb0c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 800cb10:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 800cb14:	4618      	mov	r0, r3
}
 800cb16:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800cb18:	4b0b      	ldr	r3, [pc, #44]	; (800cb48 <HAL_DMA_Init+0xc8>)
 800cb1a:	440b      	add	r3, r1
 800cb1c:	fbb3 f3f4 	udiv	r3, r3, r4
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800cb24:	4b09      	ldr	r3, [pc, #36]	; (800cb4c <HAL_DMA_Init+0xcc>)
 800cb26:	e7bc      	b.n	800caa2 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cb28:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <HAL_DMA_Init+0xd0>)
 800cb2a:	6814      	ldr	r4, [r2, #0]
 800cb2c:	4023      	ands	r3, r4
 800cb2e:	6013      	str	r3, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cb30:	6813      	ldr	r3, [r2, #0]
 800cb32:	4319      	orrs	r1, r3
 800cb34:	6011      	str	r1, [r2, #0]
 800cb36:	e7e6      	b.n	800cb06 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800cb38:	2001      	movs	r0, #1
 800cb3a:	e7ec      	b.n	800cb16 <HAL_DMA_Init+0x96>
 800cb3c:	40020407 	.word	0x40020407
 800cb40:	bffdfff8 	.word	0xbffdfff8
 800cb44:	40020000 	.word	0x40020000
 800cb48:	bffdfbf8 	.word	0xbffdfbf8
 800cb4c:	40020400 	.word	0x40020400
 800cb50:	400204a8 	.word	0x400204a8

0800cb54 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800cb54:	4a09      	ldr	r2, [pc, #36]	; (800cb7c <FLASH_Program_Fast+0x28>)
 800cb56:	6953      	ldr	r3, [r2, #20]
 800cb58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 800cb5c:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800cb5e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb60:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cb64:	b672      	cpsid	i
}
 800cb66:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800cb68:	58cc      	ldr	r4, [r1, r3]
 800cb6a:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  } while (row_index != 0U);
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb72:	d1f9      	bne.n	800cb68 <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb74:	f382 8810 	msr	PRIMASK, r2

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800cb78:	bd10      	pop	{r4, pc}
 800cb7a:	bf00      	nop
 800cb7c:	40022000 	.word	0x40022000

0800cb80 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800cb80:	4b06      	ldr	r3, [pc, #24]	; (800cb9c <HAL_FLASH_Unlock+0x1c>)
 800cb82:	695a      	ldr	r2, [r3, #20]
 800cb84:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800cb86:	bfbf      	itttt	lt
 800cb88:	4a05      	ldrlt	r2, [pc, #20]	; (800cba0 <HAL_FLASH_Unlock+0x20>)
 800cb8a:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cb8c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 800cb90:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800cb92:	bfba      	itte	lt
 800cb94:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800cb96:	0fc0      	lsrlt	r0, r0, #31
 800cb98:	2000      	movge	r0, #0
}
 800cb9a:	4770      	bx	lr
 800cb9c:	40022000 	.word	0x40022000
 800cba0:	45670123 	.word	0x45670123

0800cba4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800cba4:	4a03      	ldr	r2, [pc, #12]	; (800cbb4 <HAL_FLASH_Lock+0x10>)
 800cba6:	6953      	ldr	r3, [r2, #20]
 800cba8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbac:	6153      	str	r3, [r2, #20]
}
 800cbae:	2000      	movs	r0, #0
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	40022000 	.word	0x40022000

0800cbb8 <FLASH_WaitForLastOperation>:
{
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800cbbc:	f7ff febc 	bl	800c938 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800cbc0:	4c10      	ldr	r4, [pc, #64]	; (800cc04 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 800cbc2:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800cbc4:	6923      	ldr	r3, [r4, #16]
 800cbc6:	03db      	lsls	r3, r3, #15
 800cbc8:	d40b      	bmi.n	800cbe2 <FLASH_WaitForLastOperation+0x2a>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800cbca:	6920      	ldr	r0, [r4, #16]
 800cbcc:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if(error != 0u)
 800cbd0:	4002      	ands	r2, r0
 800cbd2:	d00f      	beq.n	800cbf4 <FLASH_WaitForLastOperation+0x3c>
    pFlash.ErrorCode |= error;
 800cbd4:	490c      	ldr	r1, [pc, #48]	; (800cc08 <FLASH_WaitForLastOperation+0x50>)
 800cbd6:	684b      	ldr	r3, [r1, #4]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 800cbdc:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 800cbde:	6122      	str	r2, [r4, #16]
}
 800cbe0:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 800cbe2:	1c6a      	adds	r2, r5, #1
 800cbe4:	d0ee      	beq.n	800cbc4 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 800cbe6:	f7ff fea7 	bl	800c938 <HAL_GetTick>
 800cbea:	1b80      	subs	r0, r0, r6
 800cbec:	42a8      	cmp	r0, r5
 800cbee:	d3e9      	bcc.n	800cbc4 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 800cbf0:	2003      	movs	r0, #3
 800cbf2:	e7f5      	b.n	800cbe0 <FLASH_WaitForLastOperation+0x28>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cbf4:	6920      	ldr	r0, [r4, #16]
 800cbf6:	f010 0001 	ands.w	r0, r0, #1
 800cbfa:	d0f1      	beq.n	800cbe0 <FLASH_WaitForLastOperation+0x28>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	6123      	str	r3, [r4, #16]
 800cc00:	4610      	mov	r0, r2
 800cc02:	e7ed      	b.n	800cbe0 <FLASH_WaitForLastOperation+0x28>
 800cc04:	40022000 	.word	0x40022000
 800cc08:	20000024 	.word	0x20000024

0800cc0c <HAL_FLASH_Program>:
{
 800cc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800cc10:	4c25      	ldr	r4, [pc, #148]	; (800cca8 <HAL_FLASH_Program+0x9c>)
{
 800cc12:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800cc14:	7823      	ldrb	r3, [r4, #0]
 800cc16:	2b01      	cmp	r3, #1
{
 800cc18:	4606      	mov	r6, r0
 800cc1a:	460f      	mov	r7, r1
 800cc1c:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 800cc1e:	d041      	beq.n	800cca4 <HAL_FLASH_Program+0x98>
 800cc20:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cc22:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800cc26:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cc28:	f7ff ffc6 	bl	800cbb8 <FLASH_WaitForLastOperation>
 800cc2c:	4605      	mov	r5, r0
  if(status == HAL_OK)
 800cc2e:	bb30      	cbnz	r0, 800cc7e <HAL_FLASH_Program+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800cc30:	4d1e      	ldr	r5, [pc, #120]	; (800ccac <HAL_FLASH_Program+0xa0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cc32:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800cc34:	682a      	ldr	r2, [r5, #0]
 800cc36:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800cc3a:	bf17      	itett	ne
 800cc3c:	682b      	ldrne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800cc3e:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800cc40:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 800cc44:	602b      	strne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800cc46:	bf1c      	itt	ne
 800cc48:	2302      	movne	r3, #2
 800cc4a:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800cc4c:	b9e6      	cbnz	r6, 800cc88 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800cc4e:	696b      	ldr	r3, [r5, #20]
 800cc50:	f043 0301 	orr.w	r3, r3, #1
 800cc54:	616b      	str	r3, [r5, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800cc56:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 800cc5a:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 800cc5e:	2601      	movs	r6, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800cc60:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cc64:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cc68:	f7ff ffa6 	bl	800cbb8 <FLASH_WaitForLastOperation>
 800cc6c:	4605      	mov	r5, r0
    if (prog_bit != 0U)
 800cc6e:	b126      	cbz	r6, 800cc7a <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 800cc70:	4a0e      	ldr	r2, [pc, #56]	; (800ccac <HAL_FLASH_Program+0xa0>)
 800cc72:	6953      	ldr	r3, [r2, #20]
 800cc74:	ea23 0606 	bic.w	r6, r3, r6
 800cc78:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 800cc7a:	f000 f84d 	bl	800cd18 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800cc7e:	2300      	movs	r3, #0
 800cc80:	7023      	strb	r3, [r4, #0]
}
 800cc82:	4628      	mov	r0, r5
 800cc84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800cc88:	1e73      	subs	r3, r6, #1
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d901      	bls.n	800cc92 <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 800cc8e:	2600      	movs	r6, #0
 800cc90:	e7e8      	b.n	800cc64 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800cc92:	4641      	mov	r1, r8
 800cc94:	4638      	mov	r0, r7
 800cc96:	f7ff ff5d 	bl	800cb54 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800cc9a:	2e02      	cmp	r6, #2
 800cc9c:	d1f7      	bne.n	800cc8e <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 800cc9e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800cca2:	e7df      	b.n	800cc64 <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 800cca4:	2502      	movs	r5, #2
 800cca6:	e7ec      	b.n	800cc82 <HAL_FLASH_Program+0x76>
 800cca8:	20000024 	.word	0x20000024
 800ccac:	40022000 	.word	0x40022000

0800ccb0 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800ccb0:	4b09      	ldr	r3, [pc, #36]	; (800ccd8 <FLASH_MassErase+0x28>)
 800ccb2:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800ccb6:	bf1e      	ittt	ne
 800ccb8:	695a      	ldrne	r2, [r3, #20]
 800ccba:	f042 0204 	orrne.w	r2, r2, #4
 800ccbe:	615a      	strne	r2, [r3, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800ccc0:	0782      	lsls	r2, r0, #30
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800ccc2:	bf42      	ittt	mi
 800ccc4:	695a      	ldrmi	r2, [r3, #20]
 800ccc6:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
 800ccca:	615a      	strmi	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800cccc:	4a02      	ldr	r2, [pc, #8]	; (800ccd8 <FLASH_MassErase+0x28>)
 800ccce:	6953      	ldr	r3, [r2, #20]
 800ccd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccd4:	6153      	str	r3, [r2, #20]
}
 800ccd6:	4770      	bx	lr
 800ccd8:	40022000 	.word	0x40022000

0800ccdc <FLASH_PageErase>:
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800ccdc:	4b0d      	ldr	r3, [pc, #52]	; (800cd14 <FLASH_PageErase+0x38>)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800ccde:	695a      	ldr	r2, [r3, #20]
    if((Banks & FLASH_BANK_1) != 0U)
 800cce0:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800cce4:	bf14      	ite	ne
 800cce6:	f422 6200 	bicne.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800ccea:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 800ccee:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800ccf0:	695a      	ldr	r2, [r3, #20]
 800ccf2:	00c0      	lsls	r0, r0, #3
 800ccf4:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800ccf8:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 800ccfc:	4310      	orrs	r0, r2
 800ccfe:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800cd00:	695a      	ldr	r2, [r3, #20]
 800cd02:	f042 0202 	orr.w	r2, r2, #2
 800cd06:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800cd08:	695a      	ldr	r2, [r3, #20]
 800cd0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cd0e:	615a      	str	r2, [r3, #20]
}
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	40022000 	.word	0x40022000

0800cd18 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800cd18:	4a13      	ldr	r2, [pc, #76]	; (800cd68 <FLASH_FlushCaches+0x50>)
 800cd1a:	7f13      	ldrb	r3, [r2, #28]
 800cd1c:	b2d9      	uxtb	r1, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800cd1e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d10c      	bne.n	800cd40 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800cd26:	4b11      	ldr	r3, [pc, #68]	; (800cd6c <FLASH_FlushCaches+0x54>)
 800cd28:	6818      	ldr	r0, [r3, #0]
 800cd2a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800cd2e:	6018      	str	r0, [r3, #0]
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 800cd36:	6018      	str	r0, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cd38:	6818      	ldr	r0, [r3, #0]
 800cd3a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800cd3e:	6018      	str	r0, [r3, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800cd40:	1e8b      	subs	r3, r1, #2
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d80c      	bhi.n	800cd60 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800cd46:	4b09      	ldr	r3, [pc, #36]	; (800cd6c <FLASH_FlushCaches+0x54>)
 800cd48:	6819      	ldr	r1, [r3, #0]
 800cd4a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800cd4e:	6019      	str	r1, [r3, #0]
 800cd50:	6819      	ldr	r1, [r3, #0]
 800cd52:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800cd56:	6019      	str	r1, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800cd58:	6819      	ldr	r1, [r3, #0]
 800cd5a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800cd5e:	6019      	str	r1, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800cd60:	2300      	movs	r3, #0
 800cd62:	7713      	strb	r3, [r2, #28]
}
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	20000024 	.word	0x20000024
 800cd6c:	40022000 	.word	0x40022000

0800cd70 <HAL_FLASHEx_Erase>:
{
 800cd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 800cd74:	4d35      	ldr	r5, [pc, #212]	; (800ce4c <HAL_FLASHEx_Erase+0xdc>)
 800cd76:	782b      	ldrb	r3, [r5, #0]
 800cd78:	2b01      	cmp	r3, #1
{
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800cd7e:	d062      	beq.n	800ce46 <HAL_FLASHEx_Erase+0xd6>
 800cd80:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cd82:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800cd86:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cd88:	f7ff ff16 	bl	800cbb8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	bb40      	cbnz	r0, 800cde2 <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800cd90:	4b2f      	ldr	r3, [pc, #188]	; (800ce50 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cd92:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800cd9a:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800cd9c:	d026      	beq.n	800cdec <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800cd9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cda2:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	0551      	lsls	r1, r2, #21
 800cda8:	d506      	bpl.n	800cdb8 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdb0:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800cdb2:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800cdb4:	772b      	strb	r3, [r5, #28]
 800cdb6:	e000      	b.n	800cdba <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800cdb8:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800cdba:	6833      	ldr	r3, [r6, #0]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d11f      	bne.n	800ce00 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 800cdc0:	6870      	ldr	r0, [r6, #4]
 800cdc2:	f7ff ff75 	bl	800ccb0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cdc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cdca:	f7ff fef5 	bl	800cbb8 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800cdce:	4a20      	ldr	r2, [pc, #128]	; (800ce50 <HAL_FLASHEx_Erase+0xe0>)
 800cdd0:	6953      	ldr	r3, [r2, #20]
 800cdd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cdd6:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cdda:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800cddc:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800cdde:	f7ff ff9b 	bl	800cd18 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800cde2:	2300      	movs	r3, #0
 800cde4:	702b      	strb	r3, [r5, #0]
}
 800cde6:	4620      	mov	r0, r4
 800cde8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800cdec:	0552      	lsls	r2, r2, #21
 800cdee:	d505      	bpl.n	800cdfc <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdf6:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	e7db      	b.n	800cdb4 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800cdfc:	7728      	strb	r0, [r5, #28]
 800cdfe:	e7dc      	b.n	800cdba <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 800ce00:	f04f 33ff 	mov.w	r3, #4294967295
 800ce04:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800ce08:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800ce0a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800ce50 <HAL_FLASHEx_Erase+0xe0>
 800ce0e:	f8df a044 	ldr.w	sl, [pc, #68]	; 800ce54 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800ce12:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800ce16:	4413      	add	r3, r2
 800ce18:	42bb      	cmp	r3, r7
 800ce1a:	d9e0      	bls.n	800cdde <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800ce1c:	6871      	ldr	r1, [r6, #4]
 800ce1e:	4638      	mov	r0, r7
 800ce20:	f7ff ff5c 	bl	800ccdc <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ce24:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ce28:	f7ff fec6 	bl	800cbb8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800ce2c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ce30:	ea03 030a 	and.w	r3, r3, sl
 800ce34:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 800ce38:	b118      	cbz	r0, 800ce42 <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 800ce3a:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ce3e:	4604      	mov	r4, r0
          break;
 800ce40:	e7cd      	b.n	800cdde <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800ce42:	3701      	adds	r7, #1
 800ce44:	e7e5      	b.n	800ce12 <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 800ce46:	2402      	movs	r4, #2
 800ce48:	e7cd      	b.n	800cde6 <HAL_FLASHEx_Erase+0x76>
 800ce4a:	bf00      	nop
 800ce4c:	20000024 	.word	0x20000024
 800ce50:	40022000 	.word	0x40022000
 800ce54:	fffff805 	.word	0xfffff805

0800ce58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ce58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ce5c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 800d010 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ce60:	4d69      	ldr	r5, [pc, #420]	; (800d008 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 800ce62:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ce64:	680a      	ldr	r2, [r1, #0]
 800ce66:	fa32 f403 	lsrs.w	r4, r2, r3
 800ce6a:	d102      	bne.n	800ce72 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 800ce6c:	b003      	add	sp, #12
 800ce6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ce72:	f04f 0a01 	mov.w	sl, #1
 800ce76:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 800ce7a:	ea1a 0202 	ands.w	r2, sl, r2
 800ce7e:	f000 80b4 	beq.w	800cfea <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ce82:	684c      	ldr	r4, [r1, #4]
 800ce84:	f024 0e10 	bic.w	lr, r4, #16
 800ce88:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800ce8c:	2603      	movs	r6, #3
 800ce8e:	f10e 37ff 	add.w	r7, lr, #4294967295
 800ce92:	fa06 f608 	lsl.w	r6, r6, r8
 800ce96:	2f01      	cmp	r7, #1
 800ce98:	ea6f 0606 	mvn.w	r6, r6
 800ce9c:	d811      	bhi.n	800cec2 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 800ce9e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800cea0:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800cea4:	68cf      	ldr	r7, [r1, #12]
 800cea6:	fa07 f708 	lsl.w	r7, r7, r8
 800ceaa:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 800ceae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800ceb0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ceb2:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800ceb6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800ceba:	409f      	lsls	r7, r3
 800cebc:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800cec0:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800cec2:	f004 0c03 	and.w	ip, r4, #3
 800cec6:	f1bc 0f03 	cmp.w	ip, #3
 800ceca:	d108      	bne.n	800cede <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 800cecc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800cece:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800ced2:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 800ced6:	409f      	lsls	r7, r3
 800ced8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 800cedc:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800cede:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800cee0:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800cee4:	688f      	ldr	r7, [r1, #8]
 800cee6:	fa07 f708 	lsl.w	r7, r7, r8
 800ceea:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ceee:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 800cef2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cef4:	d116      	bne.n	800cf24 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 800cef6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800cefa:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800cefe:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800cf02:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800cf06:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800cf0a:	f04f 0e0f 	mov.w	lr, #15
 800cf0e:	fa0e fe0b 	lsl.w	lr, lr, fp
 800cf12:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800cf16:	690f      	ldr	r7, [r1, #16]
 800cf18:	fa07 f70b 	lsl.w	r7, r7, fp
 800cf1c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 800cf20:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800cf24:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800cf26:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800cf2a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800cf2c:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 800cf30:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cf32:	00e6      	lsls	r6, r4, #3
 800cf34:	d559      	bpl.n	800cfea <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cf36:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800cf3a:	f046 0601 	orr.w	r6, r6, #1
 800cf3e:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 800cf42:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800cf46:	f023 0703 	bic.w	r7, r3, #3
 800cf4a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800cf4e:	f006 0601 	and.w	r6, r6, #1
 800cf52:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800cf56:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800cf58:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cf5c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800cf5e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800cf60:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800cf64:	f04f 0c0f 	mov.w	ip, #15
 800cf68:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800cf6c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800cf70:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800cf74:	d03b      	beq.n	800cfee <HAL_GPIO_Init+0x196>
 800cf76:	4e25      	ldr	r6, [pc, #148]	; (800d00c <HAL_GPIO_Init+0x1b4>)
 800cf78:	42b0      	cmp	r0, r6
 800cf7a:	d03a      	beq.n	800cff2 <HAL_GPIO_Init+0x19a>
 800cf7c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cf80:	42b0      	cmp	r0, r6
 800cf82:	d038      	beq.n	800cff6 <HAL_GPIO_Init+0x19e>
 800cf84:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cf88:	42b0      	cmp	r0, r6
 800cf8a:	d036      	beq.n	800cffa <HAL_GPIO_Init+0x1a2>
 800cf8c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cf90:	42b0      	cmp	r0, r6
 800cf92:	d034      	beq.n	800cffe <HAL_GPIO_Init+0x1a6>
 800cf94:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cf98:	42b0      	cmp	r0, r6
 800cf9a:	d032      	beq.n	800d002 <HAL_GPIO_Init+0x1aa>
 800cf9c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800cfa0:	42b0      	cmp	r0, r6
 800cfa2:	bf0c      	ite	eq
 800cfa4:	2606      	moveq	r6, #6
 800cfa6:	2607      	movne	r6, #7
 800cfa8:	fa06 f60e 	lsl.w	r6, r6, lr
 800cfac:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800cfb0:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800cfb2:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 800cfb4:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cfb6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800cfba:	bf0c      	ite	eq
 800cfbc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800cfbe:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 800cfc0:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 800cfc2:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800cfc4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800cfc8:	bf0c      	ite	eq
 800cfca:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800cfcc:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 800cfce:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 800cfd0:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800cfd2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800cfd6:	bf0c      	ite	eq
 800cfd8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800cfda:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 800cfdc:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 800cfde:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800cfe0:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800cfe2:	bf54      	ite	pl
 800cfe4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800cfe6:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 800cfe8:	60ee      	str	r6, [r5, #12]
    position++;
 800cfea:	3301      	adds	r3, #1
 800cfec:	e73a      	b.n	800ce64 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800cfee:	2600      	movs	r6, #0
 800cff0:	e7da      	b.n	800cfa8 <HAL_GPIO_Init+0x150>
 800cff2:	2601      	movs	r6, #1
 800cff4:	e7d8      	b.n	800cfa8 <HAL_GPIO_Init+0x150>
 800cff6:	2602      	movs	r6, #2
 800cff8:	e7d6      	b.n	800cfa8 <HAL_GPIO_Init+0x150>
 800cffa:	2603      	movs	r6, #3
 800cffc:	e7d4      	b.n	800cfa8 <HAL_GPIO_Init+0x150>
 800cffe:	2604      	movs	r6, #4
 800d000:	e7d2      	b.n	800cfa8 <HAL_GPIO_Init+0x150>
 800d002:	2605      	movs	r6, #5
 800d004:	e7d0      	b.n	800cfa8 <HAL_GPIO_Init+0x150>
 800d006:	bf00      	nop
 800d008:	40010400 	.word	0x40010400
 800d00c:	48000400 	.word	0x48000400
 800d010:	40021000 	.word	0x40021000

0800d014 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800d014:	6903      	ldr	r3, [r0, #16]
 800d016:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800d018:	bf14      	ite	ne
 800d01a:	2001      	movne	r0, #1
 800d01c:	2000      	moveq	r0, #0
 800d01e:	4770      	bx	lr

0800d020 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d020:	b10a      	cbz	r2, 800d026 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d022:	6181      	str	r1, [r0, #24]
 800d024:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d026:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800d028:	4770      	bx	lr
	...

0800d02c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d02c:	4a04      	ldr	r2, [pc, #16]	; (800d040 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800d02e:	6951      	ldr	r1, [r2, #20]
 800d030:	4201      	tst	r1, r0
{
 800d032:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d034:	d002      	beq.n	800d03c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d036:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d038:	f7ff fa34 	bl	800c4a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800d03c:	bd08      	pop	{r3, pc}
 800d03e:	bf00      	nop
 800d040:	40010400 	.word	0x40010400

0800d044 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d044:	4a02      	ldr	r2, [pc, #8]	; (800d050 <HAL_PWR_EnableBkUpAccess+0xc>)
 800d046:	6813      	ldr	r3, [r2, #0]
 800d048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d04c:	6013      	str	r3, [r2, #0]
}
 800d04e:	4770      	bx	lr
 800d050:	40007000 	.word	0x40007000

0800d054 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800d054:	4b02      	ldr	r3, [pc, #8]	; (800d060 <HAL_PWREx_GetVoltageRange+0xc>)
 800d056:	6818      	ldr	r0, [r3, #0]
#endif
}
 800d058:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	40007000 	.word	0x40007000

0800d064 <HAL_PWREx_EnableSRAM2ContentRetention>:
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 800d064:	4a02      	ldr	r2, [pc, #8]	; (800d070 <HAL_PWREx_EnableSRAM2ContentRetention+0xc>)
 800d066:	6893      	ldr	r3, [r2, #8]
 800d068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d06c:	6093      	str	r3, [r2, #8]
}
 800d06e:	4770      	bx	lr
 800d070:	40007000 	.word	0x40007000

0800d074 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d074:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d076:	4d1e      	ldr	r5, [pc, #120]	; (800d0f0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800d078:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800d07a:	00da      	lsls	r2, r3, #3
{
 800d07c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d07e:	d518      	bpl.n	800d0b2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d080:	f7ff ffe8 	bl	800d054 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d084:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800d088:	d123      	bne.n	800d0d2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d08a:	2c80      	cmp	r4, #128	; 0x80
 800d08c:	d929      	bls.n	800d0e2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d08e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d090:	bf8c      	ite	hi
 800d092:	2402      	movhi	r4, #2
 800d094:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d096:	4917      	ldr	r1, [pc, #92]	; (800d0f4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800d098:	680a      	ldr	r2, [r1, #0]
 800d09a:	f022 0207 	bic.w	r2, r2, #7
 800d09e:	4322      	orrs	r2, r4
 800d0a0:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d0a2:	6808      	ldr	r0, [r1, #0]
 800d0a4:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800d0a8:	1b00      	subs	r0, r0, r4
 800d0aa:	bf18      	it	ne
 800d0ac:	2001      	movne	r0, #1
 800d0ae:	b003      	add	sp, #12
 800d0b0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800d0b2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800d0b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0b8:	65ab      	str	r3, [r5, #88]	; 0x58
 800d0ba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800d0bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0c0:	9301      	str	r3, [sp, #4]
 800d0c2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800d0c4:	f7ff ffc6 	bl	800d054 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800d0c8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800d0ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0ce:	65ab      	str	r3, [r5, #88]	; 0x58
 800d0d0:	e7d8      	b.n	800d084 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800d0d2:	2c80      	cmp	r4, #128	; 0x80
 800d0d4:	d807      	bhi.n	800d0e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800d0d6:	d008      	beq.n	800d0ea <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800d0d8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800d0dc:	425c      	negs	r4, r3
 800d0de:	415c      	adcs	r4, r3
 800d0e0:	e7d9      	b.n	800d096 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d0e2:	2400      	movs	r4, #0
 800d0e4:	e7d7      	b.n	800d096 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800d0e6:	2403      	movs	r4, #3
 800d0e8:	e7d5      	b.n	800d096 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800d0ea:	2402      	movs	r4, #2
 800d0ec:	e7d3      	b.n	800d096 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800d0ee:	bf00      	nop
 800d0f0:	40021000 	.word	0x40021000
 800d0f4:	40022000 	.word	0x40022000

0800d0f8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d0f8:	4b22      	ldr	r3, [pc, #136]	; (800d184 <HAL_RCC_GetSysClockFreq+0x8c>)
 800d0fa:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d0fc:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d0fe:	f012 020c 	ands.w	r2, r2, #12
 800d102:	d005      	beq.n	800d110 <HAL_RCC_GetSysClockFreq+0x18>
 800d104:	2a0c      	cmp	r2, #12
 800d106:	d115      	bne.n	800d134 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d108:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d10c:	2901      	cmp	r1, #1
 800d10e:	d118      	bne.n	800d142 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d110:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800d112:	481d      	ldr	r0, [pc, #116]	; (800d188 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d114:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d116:	bf55      	itete	pl
 800d118:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d11c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d11e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d122:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800d126:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d12a:	b34a      	cbz	r2, 800d180 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d12c:	2a0c      	cmp	r2, #12
 800d12e:	d009      	beq.n	800d144 <HAL_RCC_GetSysClockFreq+0x4c>
 800d130:	2000      	movs	r0, #0
  return sysclockfreq;
 800d132:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d134:	2a04      	cmp	r2, #4
 800d136:	d022      	beq.n	800d17e <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d138:	2a08      	cmp	r2, #8
 800d13a:	4814      	ldr	r0, [pc, #80]	; (800d18c <HAL_RCC_GetSysClockFreq+0x94>)
 800d13c:	bf18      	it	ne
 800d13e:	2000      	movne	r0, #0
 800d140:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d142:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d144:	68da      	ldr	r2, [r3, #12]
 800d146:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800d14a:	2a02      	cmp	r2, #2
 800d14c:	d015      	beq.n	800d17a <HAL_RCC_GetSysClockFreq+0x82>
 800d14e:	490f      	ldr	r1, [pc, #60]	; (800d18c <HAL_RCC_GetSysClockFreq+0x94>)
 800d150:	2a03      	cmp	r2, #3
 800d152:	bf08      	it	eq
 800d154:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d156:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d158:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d160:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d164:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d168:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d16a:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d16c:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d16e:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d170:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 800d174:	fbb0 f0f3 	udiv	r0, r0, r3
 800d178:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800d17a:	4805      	ldr	r0, [pc, #20]	; (800d190 <HAL_RCC_GetSysClockFreq+0x98>)
 800d17c:	e7eb      	b.n	800d156 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800d17e:	4804      	ldr	r0, [pc, #16]	; (800d190 <HAL_RCC_GetSysClockFreq+0x98>)
}
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	40021000 	.word	0x40021000
 800d188:	0800dad8 	.word	0x0800dad8
 800d18c:	007a1200 	.word	0x007a1200
 800d190:	00f42400 	.word	0x00f42400

0800d194 <HAL_RCC_OscConfig>:
{
 800d194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800d198:	4605      	mov	r5, r0
 800d19a:	b918      	cbnz	r0, 800d1a4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800d19c:	2001      	movs	r0, #1
}
 800d19e:	b003      	add	sp, #12
 800d1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1a4:	4ca7      	ldr	r4, [pc, #668]	; (800d444 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d1a6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1a8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d1aa:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d1ac:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1ae:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d1b2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d1b6:	d53d      	bpl.n	800d234 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d1b8:	b11e      	cbz	r6, 800d1c2 <HAL_RCC_OscConfig+0x2e>
 800d1ba:	2e0c      	cmp	r6, #12
 800d1bc:	d166      	bne.n	800d28c <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800d1be:	2f01      	cmp	r7, #1
 800d1c0:	d164      	bne.n	800d28c <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	0799      	lsls	r1, r3, #30
 800d1c6:	d502      	bpl.n	800d1ce <HAL_RCC_OscConfig+0x3a>
 800d1c8:	69ab      	ldr	r3, [r5, #24]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d0e6      	beq.n	800d19c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	6a28      	ldr	r0, [r5, #32]
 800d1d2:	071a      	lsls	r2, r3, #28
 800d1d4:	bf56      	itet	pl
 800d1d6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800d1da:	6823      	ldrmi	r3, [r4, #0]
 800d1dc:	091b      	lsrpl	r3, r3, #4
 800d1de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1e2:	4298      	cmp	r0, r3
 800d1e4:	d93b      	bls.n	800d25e <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d1e6:	f7ff ff45 	bl	800d074 <RCC_SetFlashLatencyFromMSIRange>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d1d6      	bne.n	800d19c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d1ee:	6823      	ldr	r3, [r4, #0]
 800d1f0:	f043 0308 	orr.w	r3, r3, #8
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	6823      	ldr	r3, [r4, #0]
 800d1f8:	6a2a      	ldr	r2, [r5, #32]
 800d1fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d1fe:	4313      	orrs	r3, r2
 800d200:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d202:	6863      	ldr	r3, [r4, #4]
 800d204:	69ea      	ldr	r2, [r5, #28]
 800d206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d20a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d20e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d210:	f7ff ff72 	bl	800d0f8 <HAL_RCC_GetSysClockFreq>
 800d214:	68a3      	ldr	r3, [r4, #8]
 800d216:	4a8c      	ldr	r2, [pc, #560]	; (800d448 <HAL_RCC_OscConfig+0x2b4>)
 800d218:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d21c:	5cd3      	ldrb	r3, [r2, r3]
 800d21e:	f003 031f 	and.w	r3, r3, #31
 800d222:	40d8      	lsrs	r0, r3
 800d224:	4b89      	ldr	r3, [pc, #548]	; (800d44c <HAL_RCC_OscConfig+0x2b8>)
 800d226:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800d228:	4b89      	ldr	r3, [pc, #548]	; (800d450 <HAL_RCC_OscConfig+0x2bc>)
 800d22a:	6818      	ldr	r0, [r3, #0]
 800d22c:	f7ff f960 	bl	800c4f0 <HAL_InitTick>
        if(status != HAL_OK)
 800d230:	2800      	cmp	r0, #0
 800d232:	d1b4      	bne.n	800d19e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d234:	682b      	ldr	r3, [r5, #0]
 800d236:	07d9      	lsls	r1, r3, #31
 800d238:	d45f      	bmi.n	800d2fa <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d23a:	682b      	ldr	r3, [r5, #0]
 800d23c:	079a      	lsls	r2, r3, #30
 800d23e:	f100 809e 	bmi.w	800d37e <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d242:	682b      	ldr	r3, [r5, #0]
 800d244:	0719      	lsls	r1, r3, #28
 800d246:	f100 80d2 	bmi.w	800d3ee <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d24a:	682b      	ldr	r3, [r5, #0]
 800d24c:	075a      	lsls	r2, r3, #29
 800d24e:	f100 8101 	bmi.w	800d454 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d252:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d254:	2b00      	cmp	r3, #0
 800d256:	f040 816a 	bne.w	800d52e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800d25a:	2000      	movs	r0, #0
 800d25c:	e79f      	b.n	800d19e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	f043 0308 	orr.w	r3, r3, #8
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	6823      	ldr	r3, [r4, #0]
 800d268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d26c:	4303      	orrs	r3, r0
 800d26e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d270:	6863      	ldr	r3, [r4, #4]
 800d272:	69ea      	ldr	r2, [r5, #28]
 800d274:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d278:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d27c:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d27e:	2e00      	cmp	r6, #0
 800d280:	d1c6      	bne.n	800d210 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d282:	f7ff fef7 	bl	800d074 <RCC_SetFlashLatencyFromMSIRange>
 800d286:	2800      	cmp	r0, #0
 800d288:	d0c2      	beq.n	800d210 <HAL_RCC_OscConfig+0x7c>
 800d28a:	e787      	b.n	800d19c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d28c:	69ab      	ldr	r3, [r5, #24]
 800d28e:	b31b      	cbz	r3, 800d2d8 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	f043 0301 	orr.w	r3, r3, #1
 800d296:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d298:	f7ff fb4e 	bl	800c938 <HAL_GetTick>
 800d29c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	079b      	lsls	r3, r3, #30
 800d2a2:	d511      	bpl.n	800d2c8 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	f043 0308 	orr.w	r3, r3, #8
 800d2aa:	6023      	str	r3, [r4, #0]
 800d2ac:	6823      	ldr	r3, [r4, #0]
 800d2ae:	6a2a      	ldr	r2, [r5, #32]
 800d2b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d2b8:	6863      	ldr	r3, [r4, #4]
 800d2ba:	69ea      	ldr	r2, [r5, #28]
 800d2bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d2c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d2c4:	6063      	str	r3, [r4, #4]
 800d2c6:	e7b5      	b.n	800d234 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d2c8:	f7ff fb36 	bl	800c938 <HAL_GetTick>
 800d2cc:	eba0 0008 	sub.w	r0, r0, r8
 800d2d0:	2802      	cmp	r0, #2
 800d2d2:	d9e4      	bls.n	800d29e <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 800d2d4:	2003      	movs	r0, #3
 800d2d6:	e762      	b.n	800d19e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	f023 0301 	bic.w	r3, r3, #1
 800d2de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d2e0:	f7ff fb2a 	bl	800c938 <HAL_GetTick>
 800d2e4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d2e6:	6823      	ldr	r3, [r4, #0]
 800d2e8:	0798      	lsls	r0, r3, #30
 800d2ea:	d5a3      	bpl.n	800d234 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d2ec:	f7ff fb24 	bl	800c938 <HAL_GetTick>
 800d2f0:	eba0 0008 	sub.w	r0, r0, r8
 800d2f4:	2802      	cmp	r0, #2
 800d2f6:	d9f6      	bls.n	800d2e6 <HAL_RCC_OscConfig+0x152>
 800d2f8:	e7ec      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800d2fa:	2e08      	cmp	r6, #8
 800d2fc:	d003      	beq.n	800d306 <HAL_RCC_OscConfig+0x172>
 800d2fe:	2e0c      	cmp	r6, #12
 800d300:	d108      	bne.n	800d314 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d302:	2f03      	cmp	r7, #3
 800d304:	d106      	bne.n	800d314 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	039b      	lsls	r3, r3, #14
 800d30a:	d596      	bpl.n	800d23a <HAL_RCC_OscConfig+0xa6>
 800d30c:	686b      	ldr	r3, [r5, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d193      	bne.n	800d23a <HAL_RCC_OscConfig+0xa6>
 800d312:	e743      	b.n	800d19c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d314:	686b      	ldr	r3, [r5, #4]
 800d316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d31a:	d110      	bne.n	800d33e <HAL_RCC_OscConfig+0x1aa>
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d322:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d324:	f7ff fb08 	bl	800c938 <HAL_GetTick>
 800d328:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d32a:	6823      	ldr	r3, [r4, #0]
 800d32c:	0398      	lsls	r0, r3, #14
 800d32e:	d484      	bmi.n	800d23a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d330:	f7ff fb02 	bl	800c938 <HAL_GetTick>
 800d334:	eba0 0008 	sub.w	r0, r0, r8
 800d338:	2864      	cmp	r0, #100	; 0x64
 800d33a:	d9f6      	bls.n	800d32a <HAL_RCC_OscConfig+0x196>
 800d33c:	e7ca      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d33e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d342:	d104      	bne.n	800d34e <HAL_RCC_OscConfig+0x1ba>
 800d344:	6823      	ldr	r3, [r4, #0]
 800d346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d34a:	6023      	str	r3, [r4, #0]
 800d34c:	e7e6      	b.n	800d31c <HAL_RCC_OscConfig+0x188>
 800d34e:	6822      	ldr	r2, [r4, #0]
 800d350:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d354:	6022      	str	r2, [r4, #0]
 800d356:	6822      	ldr	r2, [r4, #0]
 800d358:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d35c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d1e0      	bne.n	800d324 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 800d362:	f7ff fae9 	bl	800c938 <HAL_GetTick>
 800d366:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	0399      	lsls	r1, r3, #14
 800d36c:	f57f af65 	bpl.w	800d23a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d370:	f7ff fae2 	bl	800c938 <HAL_GetTick>
 800d374:	eba0 0008 	sub.w	r0, r0, r8
 800d378:	2864      	cmp	r0, #100	; 0x64
 800d37a:	d9f5      	bls.n	800d368 <HAL_RCC_OscConfig+0x1d4>
 800d37c:	e7aa      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800d37e:	2e04      	cmp	r6, #4
 800d380:	d003      	beq.n	800d38a <HAL_RCC_OscConfig+0x1f6>
 800d382:	2e0c      	cmp	r6, #12
 800d384:	d110      	bne.n	800d3a8 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d386:	2f02      	cmp	r7, #2
 800d388:	d10e      	bne.n	800d3a8 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d38a:	6823      	ldr	r3, [r4, #0]
 800d38c:	055a      	lsls	r2, r3, #21
 800d38e:	d503      	bpl.n	800d398 <HAL_RCC_OscConfig+0x204>
 800d390:	68eb      	ldr	r3, [r5, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f43f af02 	beq.w	800d19c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d398:	6863      	ldr	r3, [r4, #4]
 800d39a:	692a      	ldr	r2, [r5, #16]
 800d39c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800d3a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3a4:	6063      	str	r3, [r4, #4]
 800d3a6:	e74c      	b.n	800d242 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d3a8:	68eb      	ldr	r3, [r5, #12]
 800d3aa:	b17b      	cbz	r3, 800d3cc <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d3b4:	f7ff fac0 	bl	800c938 <HAL_GetTick>
 800d3b8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	055b      	lsls	r3, r3, #21
 800d3be:	d4eb      	bmi.n	800d398 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3c0:	f7ff faba 	bl	800c938 <HAL_GetTick>
 800d3c4:	1bc0      	subs	r0, r0, r7
 800d3c6:	2802      	cmp	r0, #2
 800d3c8:	d9f7      	bls.n	800d3ba <HAL_RCC_OscConfig+0x226>
 800d3ca:	e783      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800d3d4:	f7ff fab0 	bl	800c938 <HAL_GetTick>
 800d3d8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	0558      	lsls	r0, r3, #21
 800d3de:	f57f af30 	bpl.w	800d242 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3e2:	f7ff faa9 	bl	800c938 <HAL_GetTick>
 800d3e6:	1bc0      	subs	r0, r0, r7
 800d3e8:	2802      	cmp	r0, #2
 800d3ea:	d9f6      	bls.n	800d3da <HAL_RCC_OscConfig+0x246>
 800d3ec:	e772      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d3ee:	696b      	ldr	r3, [r5, #20]
 800d3f0:	b19b      	cbz	r3, 800d41a <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 800d3f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800d3f6:	f043 0301 	orr.w	r3, r3, #1
 800d3fa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800d3fe:	f7ff fa9b 	bl	800c938 <HAL_GetTick>
 800d402:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d404:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800d408:	079b      	lsls	r3, r3, #30
 800d40a:	f53f af1e 	bmi.w	800d24a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d40e:	f7ff fa93 	bl	800c938 <HAL_GetTick>
 800d412:	1bc0      	subs	r0, r0, r7
 800d414:	2802      	cmp	r0, #2
 800d416:	d9f5      	bls.n	800d404 <HAL_RCC_OscConfig+0x270>
 800d418:	e75c      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 800d41a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800d41e:	f023 0301 	bic.w	r3, r3, #1
 800d422:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800d426:	f7ff fa87 	bl	800c938 <HAL_GetTick>
 800d42a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d42c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800d430:	0798      	lsls	r0, r3, #30
 800d432:	f57f af0a 	bpl.w	800d24a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d436:	f7ff fa7f 	bl	800c938 <HAL_GetTick>
 800d43a:	1bc0      	subs	r0, r0, r7
 800d43c:	2802      	cmp	r0, #2
 800d43e:	d9f5      	bls.n	800d42c <HAL_RCC_OscConfig+0x298>
 800d440:	e748      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
 800d442:	bf00      	nop
 800d444:	40021000 	.word	0x40021000
 800d448:	0800db08 	.word	0x0800db08
 800d44c:	20000004 	.word	0x20000004
 800d450:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800d454:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d456:	00d9      	lsls	r1, r3, #3
 800d458:	d429      	bmi.n	800d4ae <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d45a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d45c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d460:	65a3      	str	r3, [r4, #88]	; 0x58
 800d462:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d468:	9301      	str	r3, [sp, #4]
 800d46a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800d46c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d470:	4f89      	ldr	r7, [pc, #548]	; (800d698 <HAL_RCC_OscConfig+0x504>)
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	05da      	lsls	r2, r3, #23
 800d476:	d51d      	bpl.n	800d4b4 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d478:	68ab      	ldr	r3, [r5, #8]
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d12b      	bne.n	800d4d6 <HAL_RCC_OscConfig+0x342>
 800d47e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d482:	f043 0301 	orr.w	r3, r3, #1
 800d486:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800d48a:	f7ff fa55 	bl	800c938 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d48e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d492:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d494:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d498:	0798      	lsls	r0, r3, #30
 800d49a:	d542      	bpl.n	800d522 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 800d49c:	f1b8 0f00 	cmp.w	r8, #0
 800d4a0:	f43f aed7 	beq.w	800d252 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d4a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4aa:	65a3      	str	r3, [r4, #88]	; 0x58
 800d4ac:	e6d1      	b.n	800d252 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 800d4ae:	f04f 0800 	mov.w	r8, #0
 800d4b2:	e7dd      	b.n	800d470 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4ba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800d4bc:	f7ff fa3c 	bl	800c938 <HAL_GetTick>
 800d4c0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	05db      	lsls	r3, r3, #23
 800d4c6:	d4d7      	bmi.n	800d478 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d4c8:	f7ff fa36 	bl	800c938 <HAL_GetTick>
 800d4cc:	eba0 0009 	sub.w	r0, r0, r9
 800d4d0:	2802      	cmp	r0, #2
 800d4d2:	d9f6      	bls.n	800d4c2 <HAL_RCC_OscConfig+0x32e>
 800d4d4:	e6fe      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d4d6:	2b05      	cmp	r3, #5
 800d4d8:	d106      	bne.n	800d4e8 <HAL_RCC_OscConfig+0x354>
 800d4da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d4de:	f043 0304 	orr.w	r3, r3, #4
 800d4e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800d4e6:	e7ca      	b.n	800d47e <HAL_RCC_OscConfig+0x2ea>
 800d4e8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800d4ec:	f022 0201 	bic.w	r2, r2, #1
 800d4f0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800d4f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800d4f8:	f022 0204 	bic.w	r2, r2, #4
 800d4fc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1c2      	bne.n	800d48a <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800d504:	f7ff fa18 	bl	800c938 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d508:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d50c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d50e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d512:	0799      	lsls	r1, r3, #30
 800d514:	d5c2      	bpl.n	800d49c <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d516:	f7ff fa0f 	bl	800c938 <HAL_GetTick>
 800d51a:	1bc0      	subs	r0, r0, r7
 800d51c:	4548      	cmp	r0, r9
 800d51e:	d9f6      	bls.n	800d50e <HAL_RCC_OscConfig+0x37a>
 800d520:	e6d8      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d522:	f7ff fa09 	bl	800c938 <HAL_GetTick>
 800d526:	1bc0      	subs	r0, r0, r7
 800d528:	4548      	cmp	r0, r9
 800d52a:	d9b3      	bls.n	800d494 <HAL_RCC_OscConfig+0x300>
 800d52c:	e6d2      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d52e:	2b02      	cmp	r3, #2
 800d530:	f040 808f 	bne.w	800d652 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 800d534:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d536:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800d538:	f003 0103 	and.w	r1, r3, #3
 800d53c:	4291      	cmp	r1, r2
 800d53e:	d124      	bne.n	800d58a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d540:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800d542:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d546:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d548:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800d54c:	d11d      	bne.n	800d58a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d54e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800d550:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d554:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800d558:	d117      	bne.n	800d58a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d55a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800d55c:	3a07      	subs	r2, #7
 800d55e:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800d562:	bf18      	it	ne
 800d564:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d566:	4291      	cmp	r1, r2
 800d568:	d10f      	bne.n	800d58a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d56a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800d56c:	0852      	lsrs	r2, r2, #1
 800d56e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800d572:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d574:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800d578:	d107      	bne.n	800d58a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d57a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800d57c:	0852      	lsrs	r2, r2, #1
 800d57e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800d582:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d584:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800d588:	d04a      	beq.n	800d620 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d58a:	2e0c      	cmp	r6, #12
 800d58c:	f43f ae06 	beq.w	800d19c <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d590:	6823      	ldr	r3, [r4, #0]
 800d592:	015a      	lsls	r2, r3, #5
 800d594:	f53f ae02 	bmi.w	800d19c <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	00db      	lsls	r3, r3, #3
 800d59c:	f53f adfe 	bmi.w	800d19c <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 800d5a0:	6823      	ldr	r3, [r4, #0]
 800d5a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d5a6:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800d5a8:	f7ff f9c6 	bl	800c938 <HAL_GetTick>
 800d5ac:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	019f      	lsls	r7, r3, #6
 800d5b2:	d42f      	bmi.n	800d614 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d5b4:	68e2      	ldr	r2, [r4, #12]
 800d5b6:	4b39      	ldr	r3, [pc, #228]	; (800d69c <HAL_RCC_OscConfig+0x508>)
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800d5c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d5c4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800d5c6:	3a01      	subs	r2, #1
 800d5c8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800d5cc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800d5ce:	0912      	lsrs	r2, r2, #4
 800d5d0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800d5d4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800d5d6:	0852      	lsrs	r2, r2, #1
 800d5d8:	3a01      	subs	r2, #1
 800d5da:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800d5de:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800d5e0:	0852      	lsrs	r2, r2, #1
 800d5e2:	3a01      	subs	r2, #1
 800d5e4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800d5e8:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d5f0:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d5f2:	68e3      	ldr	r3, [r4, #12]
 800d5f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d5f8:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800d5fa:	f7ff f99d 	bl	800c938 <HAL_GetTick>
 800d5fe:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d600:	6823      	ldr	r3, [r4, #0]
 800d602:	0198      	lsls	r0, r3, #6
 800d604:	f53f ae29 	bmi.w	800d25a <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d608:	f7ff f996 	bl	800c938 <HAL_GetTick>
 800d60c:	1b40      	subs	r0, r0, r5
 800d60e:	2802      	cmp	r0, #2
 800d610:	d9f6      	bls.n	800d600 <HAL_RCC_OscConfig+0x46c>
 800d612:	e65f      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d614:	f7ff f990 	bl	800c938 <HAL_GetTick>
 800d618:	1b80      	subs	r0, r0, r6
 800d61a:	2802      	cmp	r0, #2
 800d61c:	d9c7      	bls.n	800d5ae <HAL_RCC_OscConfig+0x41a>
 800d61e:	e659      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d620:	6823      	ldr	r3, [r4, #0]
 800d622:	0199      	lsls	r1, r3, #6
 800d624:	f53f ae19 	bmi.w	800d25a <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 800d628:	6823      	ldr	r3, [r4, #0]
 800d62a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d62e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d630:	68e3      	ldr	r3, [r4, #12]
 800d632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d636:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 800d638:	f7ff f97e 	bl	800c938 <HAL_GetTick>
 800d63c:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	019a      	lsls	r2, r3, #6
 800d642:	f53f ae0a 	bmi.w	800d25a <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d646:	f7ff f977 	bl	800c938 <HAL_GetTick>
 800d64a:	1b40      	subs	r0, r0, r5
 800d64c:	2802      	cmp	r0, #2
 800d64e:	d9f6      	bls.n	800d63e <HAL_RCC_OscConfig+0x4aa>
 800d650:	e640      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d652:	2e0c      	cmp	r6, #12
 800d654:	f43f ada2 	beq.w	800d19c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800d658:	6823      	ldr	r3, [r4, #0]
 800d65a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d65e:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800d660:	6823      	ldr	r3, [r4, #0]
 800d662:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d666:	bf02      	ittt	eq
 800d668:	68e3      	ldreq	r3, [r4, #12]
 800d66a:	f023 0303 	biceq.w	r3, r3, #3
 800d66e:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800d670:	68e3      	ldr	r3, [r4, #12]
 800d672:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d67a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800d67c:	f7ff f95c 	bl	800c938 <HAL_GetTick>
 800d680:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d682:	6823      	ldr	r3, [r4, #0]
 800d684:	019b      	lsls	r3, r3, #6
 800d686:	f57f ade8 	bpl.w	800d25a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d68a:	f7ff f955 	bl	800c938 <HAL_GetTick>
 800d68e:	1b40      	subs	r0, r0, r5
 800d690:	2802      	cmp	r0, #2
 800d692:	d9f6      	bls.n	800d682 <HAL_RCC_OscConfig+0x4ee>
 800d694:	e61e      	b.n	800d2d4 <HAL_RCC_OscConfig+0x140>
 800d696:	bf00      	nop
 800d698:	40007000 	.word	0x40007000
 800d69c:	f99d808c 	.word	0xf99d808c

0800d6a0 <HAL_RCC_ClockConfig>:
{
 800d6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	b910      	cbnz	r0, 800d6b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800d6aa:	2001      	movs	r0, #1
}
 800d6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d6b0:	4a40      	ldr	r2, [pc, #256]	; (800d7b4 <HAL_RCC_ClockConfig+0x114>)
 800d6b2:	6813      	ldr	r3, [r2, #0]
 800d6b4:	f003 0307 	and.w	r3, r3, #7
 800d6b8:	428b      	cmp	r3, r1
 800d6ba:	d32a      	bcc.n	800d712 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d6bc:	6823      	ldr	r3, [r4, #0]
 800d6be:	07d9      	lsls	r1, r3, #31
 800d6c0:	d432      	bmi.n	800d728 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6c2:	6821      	ldr	r1, [r4, #0]
 800d6c4:	078a      	lsls	r2, r1, #30
 800d6c6:	d45b      	bmi.n	800d780 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d6c8:	4a3a      	ldr	r2, [pc, #232]	; (800d7b4 <HAL_RCC_ClockConfig+0x114>)
 800d6ca:	6813      	ldr	r3, [r2, #0]
 800d6cc:	f003 0307 	and.w	r3, r3, #7
 800d6d0:	42ab      	cmp	r3, r5
 800d6d2:	d85d      	bhi.n	800d790 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6d4:	f011 0f04 	tst.w	r1, #4
 800d6d8:	4d37      	ldr	r5, [pc, #220]	; (800d7b8 <HAL_RCC_ClockConfig+0x118>)
 800d6da:	d164      	bne.n	800d7a6 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6dc:	070b      	lsls	r3, r1, #28
 800d6de:	d506      	bpl.n	800d6ee <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d6e0:	68ab      	ldr	r3, [r5, #8]
 800d6e2:	6922      	ldr	r2, [r4, #16]
 800d6e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800d6e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d6ec:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d6ee:	f7ff fd03 	bl	800d0f8 <HAL_RCC_GetSysClockFreq>
 800d6f2:	68ab      	ldr	r3, [r5, #8]
 800d6f4:	4a31      	ldr	r2, [pc, #196]	; (800d7bc <HAL_RCC_ClockConfig+0x11c>)
 800d6f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800d6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d6fe:	5cd3      	ldrb	r3, [r2, r3]
 800d700:	f003 031f 	and.w	r3, r3, #31
 800d704:	40d8      	lsrs	r0, r3
 800d706:	4b2e      	ldr	r3, [pc, #184]	; (800d7c0 <HAL_RCC_ClockConfig+0x120>)
 800d708:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800d70a:	4b2e      	ldr	r3, [pc, #184]	; (800d7c4 <HAL_RCC_ClockConfig+0x124>)
 800d70c:	6818      	ldr	r0, [r3, #0]
 800d70e:	f7fe beef 	b.w	800c4f0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d712:	6813      	ldr	r3, [r2, #0]
 800d714:	f023 0307 	bic.w	r3, r3, #7
 800d718:	430b      	orrs	r3, r1
 800d71a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d71c:	6813      	ldr	r3, [r2, #0]
 800d71e:	f003 0307 	and.w	r3, r3, #7
 800d722:	428b      	cmp	r3, r1
 800d724:	d1c1      	bne.n	800d6aa <HAL_RCC_ClockConfig+0xa>
 800d726:	e7c9      	b.n	800d6bc <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d728:	6862      	ldr	r2, [r4, #4]
 800d72a:	4e23      	ldr	r6, [pc, #140]	; (800d7b8 <HAL_RCC_ClockConfig+0x118>)
 800d72c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d72e:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d730:	d11a      	bne.n	800d768 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d732:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d736:	d0b8      	beq.n	800d6aa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d738:	68b3      	ldr	r3, [r6, #8]
 800d73a:	f023 0303 	bic.w	r3, r3, #3
 800d73e:	4313      	orrs	r3, r2
 800d740:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800d742:	f7ff f8f9 	bl	800c938 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d746:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800d74a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d74c:	68b3      	ldr	r3, [r6, #8]
 800d74e:	6862      	ldr	r2, [r4, #4]
 800d750:	f003 030c 	and.w	r3, r3, #12
 800d754:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800d758:	d0b3      	beq.n	800d6c2 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d75a:	f7ff f8ed 	bl	800c938 <HAL_GetTick>
 800d75e:	1bc0      	subs	r0, r0, r7
 800d760:	4540      	cmp	r0, r8
 800d762:	d9f3      	bls.n	800d74c <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 800d764:	2003      	movs	r0, #3
 800d766:	e7a1      	b.n	800d6ac <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d768:	2a02      	cmp	r2, #2
 800d76a:	d102      	bne.n	800d772 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d76c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800d770:	e7e1      	b.n	800d736 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d772:	b912      	cbnz	r2, 800d77a <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d774:	f013 0f02 	tst.w	r3, #2
 800d778:	e7dd      	b.n	800d736 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d77a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800d77e:	e7da      	b.n	800d736 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d780:	4a0d      	ldr	r2, [pc, #52]	; (800d7b8 <HAL_RCC_ClockConfig+0x118>)
 800d782:	68a0      	ldr	r0, [r4, #8]
 800d784:	6893      	ldr	r3, [r2, #8]
 800d786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d78a:	4303      	orrs	r3, r0
 800d78c:	6093      	str	r3, [r2, #8]
 800d78e:	e79b      	b.n	800d6c8 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d790:	6813      	ldr	r3, [r2, #0]
 800d792:	f023 0307 	bic.w	r3, r3, #7
 800d796:	432b      	orrs	r3, r5
 800d798:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d79a:	6813      	ldr	r3, [r2, #0]
 800d79c:	f003 0307 	and.w	r3, r3, #7
 800d7a0:	42ab      	cmp	r3, r5
 800d7a2:	d182      	bne.n	800d6aa <HAL_RCC_ClockConfig+0xa>
 800d7a4:	e796      	b.n	800d6d4 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d7a6:	68ab      	ldr	r3, [r5, #8]
 800d7a8:	68e2      	ldr	r2, [r4, #12]
 800d7aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	60ab      	str	r3, [r5, #8]
 800d7b2:	e793      	b.n	800d6dc <HAL_RCC_ClockConfig+0x3c>
 800d7b4:	40022000 	.word	0x40022000
 800d7b8:	40021000 	.word	0x40021000
 800d7bc:	0800db08 	.word	0x0800db08
 800d7c0:	20000004 	.word	0x20000004
 800d7c4:	20000020 	.word	0x20000020

0800d7c8 <HAL_RTC_MspInit>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 800d7c8:	4770      	bx	lr

0800d7ca <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d7ca:	6802      	ldr	r2, [r0, #0]
{
 800d7cc:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d7ce:	68d3      	ldr	r3, [r2, #12]
 800d7d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d7d4:	60d3      	str	r3, [r2, #12]
{
 800d7d6:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 800d7d8:	f7ff f8ae 	bl	800c938 <HAL_GetTick>
 800d7dc:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d7de:	6823      	ldr	r3, [r4, #0]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	069b      	lsls	r3, r3, #26
 800d7e4:	d501      	bpl.n	800d7ea <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800d7e6:	2000      	movs	r0, #0
}
 800d7e8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d7ea:	f7ff f8a5 	bl	800c938 <HAL_GetTick>
 800d7ee:	1b40      	subs	r0, r0, r5
 800d7f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d7f4:	d9f3      	bls.n	800d7de <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800d7f6:	2003      	movs	r0, #3
 800d7f8:	e7f6      	b.n	800d7e8 <HAL_RTC_WaitForSynchro+0x1e>

0800d7fa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d7fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d7fc:	6803      	ldr	r3, [r0, #0]
 800d7fe:	68dc      	ldr	r4, [r3, #12]
 800d800:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 800d804:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d806:	d118      	bne.n	800d83a <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d808:	f04f 32ff 	mov.w	r2, #4294967295
 800d80c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d80e:	f7ff f893 	bl	800c938 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d812:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 800d814:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d816:	682b      	ldr	r3, [r5, #0]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	065b      	lsls	r3, r3, #25
 800d81c:	d401      	bmi.n	800d822 <RTC_EnterInitMode+0x28>
 800d81e:	2c03      	cmp	r4, #3
 800d820:	d101      	bne.n	800d826 <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 800d822:	4620      	mov	r0, r4
 800d824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d826:	f7ff f887 	bl	800c938 <HAL_GetTick>
 800d82a:	1b80      	subs	r0, r0, r6
 800d82c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d830:	bf84      	itt	hi
 800d832:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 800d836:	2403      	movhi	r4, #3
 800d838:	e7ed      	b.n	800d816 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 800d83a:	2400      	movs	r4, #0
 800d83c:	e7f1      	b.n	800d822 <RTC_EnterInitMode+0x28>
	...

0800d840 <RTC_ExitInitMode>:
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d840:	4b10      	ldr	r3, [pc, #64]	; (800d884 <RTC_ExitInitMode+0x44>)
 800d842:	68da      	ldr	r2, [r3, #12]
 800d844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 800d848:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d84a:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d84c:	689a      	ldr	r2, [r3, #8]
 800d84e:	0692      	lsls	r2, r2, #26
{
 800d850:	4604      	mov	r4, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d852:	d406      	bmi.n	800d862 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d854:	f7ff ffb9 	bl	800d7ca <HAL_RTC_WaitForSynchro>
 800d858:	b110      	cbz	r0, 800d860 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d85a:	2003      	movs	r0, #3
 800d85c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800d860:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d862:	689a      	ldr	r2, [r3, #8]
 800d864:	f022 0220 	bic.w	r2, r2, #32
 800d868:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d86a:	f7ff ffae 	bl	800d7ca <HAL_RTC_WaitForSynchro>
 800d86e:	b110      	cbz	r0, 800d876 <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d870:	2003      	movs	r0, #3
 800d872:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d876:	4a03      	ldr	r2, [pc, #12]	; (800d884 <RTC_ExitInitMode+0x44>)
 800d878:	6893      	ldr	r3, [r2, #8]
 800d87a:	f043 0320 	orr.w	r3, r3, #32
 800d87e:	6093      	str	r3, [r2, #8]
  return status;
 800d880:	e7ee      	b.n	800d860 <RTC_ExitInitMode+0x20>
 800d882:	bf00      	nop
 800d884:	40002800 	.word	0x40002800

0800d888 <HAL_RTC_Init>:
{
 800d888:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 800d88a:	4604      	mov	r4, r0
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d03f      	beq.n	800d910 <HAL_RTC_Init+0x88>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d890:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d894:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d898:	b91b      	cbnz	r3, 800d8a2 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 800d89a:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800d89e:	f7ff ff93 	bl	800d7c8 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d8a2:	2302      	movs	r3, #2
 800d8a4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d8a8:	6823      	ldr	r3, [r4, #0]
 800d8aa:	22ca      	movs	r2, #202	; 0xca
 800d8ac:	625a      	str	r2, [r3, #36]	; 0x24
 800d8ae:	2253      	movs	r2, #83	; 0x53
 800d8b0:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f7ff ffa1 	bl	800d7fa <RTC_EnterInitMode>
    if (status == HAL_OK)
 800d8b8:	bb48      	cbnz	r0, 800d90e <HAL_RTC_Init+0x86>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d8ba:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d8bc:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d8be:	689a      	ldr	r2, [r3, #8]
 800d8c0:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800d8c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8c8:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d8ca:	6862      	ldr	r2, [r4, #4]
 800d8cc:	6899      	ldr	r1, [r3, #8]
 800d8ce:	4302      	orrs	r2, r0
 800d8d0:	69a0      	ldr	r0, [r4, #24]
 800d8d2:	4302      	orrs	r2, r0
 800d8d4:	430a      	orrs	r2, r1
 800d8d6:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d8d8:	68e2      	ldr	r2, [r4, #12]
 800d8da:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d8dc:	691a      	ldr	r2, [r3, #16]
 800d8de:	68a1      	ldr	r1, [r4, #8]
 800d8e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d8e4:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f7ff ffaa 	bl	800d840 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800d8ec:	b978      	cbnz	r0, 800d90e <HAL_RTC_Init+0x86>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d8ee:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d8f0:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d8f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8f4:	f022 0203 	bic.w	r2, r2, #3
 800d8f8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d8fa:	69e2      	ldr	r2, [r4, #28]
 800d8fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d8fe:	432a      	orrs	r2, r5
 800d900:	430a      	orrs	r2, r1
 800d902:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d904:	22ff      	movs	r2, #255	; 0xff
 800d906:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 800d908:	2301      	movs	r3, #1
 800d90a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800d90e:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 800d910:	2001      	movs	r0, #1
 800d912:	e7fc      	b.n	800d90e <HAL_RTC_Init+0x86>

0800d914 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d914:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d918:	2b01      	cmp	r3, #1
 800d91a:	f04f 0302 	mov.w	r3, #2
 800d91e:	d012      	beq.n	800d946 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d920:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d924:	6803      	ldr	r3, [r0, #0]
 800d926:	22ca      	movs	r2, #202	; 0xca
 800d928:	625a      	str	r2, [r3, #36]	; 0x24
 800d92a:	2253      	movs	r2, #83	; 0x53
 800d92c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800d92e:	689a      	ldr	r2, [r3, #8]
 800d930:	f042 0220 	orr.w	r2, r2, #32
 800d934:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d936:	22ff      	movs	r2, #255	; 0xff
 800d938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d93a:	2301      	movs	r3, #1
 800d93c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d940:	2300      	movs	r3, #0
 800d942:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 800d946:	4618      	mov	r0, r3

  return HAL_OK;
}
 800d948:	4770      	bx	lr

0800d94a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d94a:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d94c:	4604      	mov	r4, r0
 800d94e:	2800      	cmp	r0, #0
 800d950:	d05f      	beq.n	800da12 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d952:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d954:	2b00      	cmp	r3, #0
 800d956:	d158      	bne.n	800da0a <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d958:	6842      	ldr	r2, [r0, #4]
 800d95a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800d95e:	d000      	beq.n	800d962 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d960:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d962:	2300      	movs	r3, #0
 800d964:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d966:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d96a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d96e:	b923      	cbnz	r3, 800d97a <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d970:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d974:	4620      	mov	r0, r4
 800d976:	f7fd f9b9 	bl	800acec <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d97a:	6825      	ldr	r5, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d97c:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800d97e:	2302      	movs	r3, #2
 800d980:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800d984:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d986:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800d98a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d98e:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d990:	f04f 0300 	mov.w	r3, #0
 800d994:	d83f      	bhi.n	800da16 <HAL_SPI_Init+0xcc>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d996:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d99a:	d000      	beq.n	800d99e <HAL_SPI_Init+0x54>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d99c:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d99e:	6863      	ldr	r3, [r4, #4]
 800d9a0:	68a6      	ldr	r6, [r4, #8]
 800d9a2:	69a2      	ldr	r2, [r4, #24]
 800d9a4:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 800d9a8:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800d9ac:	4333      	orrs	r3, r6
 800d9ae:	6926      	ldr	r6, [r4, #16]
 800d9b0:	f006 0602 	and.w	r6, r6, #2
 800d9b4:	4333      	orrs	r3, r6
 800d9b6:	6966      	ldr	r6, [r4, #20]
 800d9b8:	f006 0601 	and.w	r6, r6, #1
 800d9bc:	4333      	orrs	r3, r6
 800d9be:	f402 7600 	and.w	r6, r2, #512	; 0x200
 800d9c2:	4333      	orrs	r3, r6
 800d9c4:	69e6      	ldr	r6, [r4, #28]
 800d9c6:	f006 0638 	and.w	r6, r6, #56	; 0x38
 800d9ca:	4333      	orrs	r3, r6
 800d9cc:	6a26      	ldr	r6, [r4, #32]
 800d9ce:	f006 0680 	and.w	r6, r6, #128	; 0x80
 800d9d2:	4333      	orrs	r3, r6
 800d9d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9d6:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 800d9da:	4333      	orrs	r3, r6
 800d9dc:	602b      	str	r3, [r5, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d9de:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800d9e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9e2:	f006 0608 	and.w	r6, r6, #8
 800d9e6:	f003 0310 	and.w	r3, r3, #16
 800d9ea:	4333      	orrs	r3, r6
 800d9ec:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800d9f0:	0c12      	lsrs	r2, r2, #16
 800d9f2:	4319      	orrs	r1, r3
 800d9f4:	f002 0204 	and.w	r2, r2, #4
 800d9f8:	430a      	orrs	r2, r1
 800d9fa:	4310      	orrs	r0, r2
 800d9fc:	6068      	str	r0, [r5, #4]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800d9fe:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da00:	2000      	movs	r0, #0
 800da02:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800da04:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 800da08:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800da0a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800da0c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da10:	e7a7      	b.n	800d962 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800da12:	2001      	movs	r0, #1
 800da14:	e7f8      	b.n	800da08 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800da16:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800da18:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 800da1c:	e7bd      	b.n	800d99a <HAL_SPI_Init+0x50>
	...

0800da20 <__libc_init_array>:
 800da20:	b570      	push	{r4, r5, r6, lr}
 800da22:	4d0d      	ldr	r5, [pc, #52]	; (800da58 <__libc_init_array+0x38>)
 800da24:	4c0d      	ldr	r4, [pc, #52]	; (800da5c <__libc_init_array+0x3c>)
 800da26:	1b64      	subs	r4, r4, r5
 800da28:	10a4      	asrs	r4, r4, #2
 800da2a:	2600      	movs	r6, #0
 800da2c:	42a6      	cmp	r6, r4
 800da2e:	d109      	bne.n	800da44 <__libc_init_array+0x24>
 800da30:	4d0b      	ldr	r5, [pc, #44]	; (800da60 <__libc_init_array+0x40>)
 800da32:	4c0c      	ldr	r4, [pc, #48]	; (800da64 <__libc_init_array+0x44>)
 800da34:	f000 f82e 	bl	800da94 <_init>
 800da38:	1b64      	subs	r4, r4, r5
 800da3a:	10a4      	asrs	r4, r4, #2
 800da3c:	2600      	movs	r6, #0
 800da3e:	42a6      	cmp	r6, r4
 800da40:	d105      	bne.n	800da4e <__libc_init_array+0x2e>
 800da42:	bd70      	pop	{r4, r5, r6, pc}
 800da44:	f855 3b04 	ldr.w	r3, [r5], #4
 800da48:	4798      	blx	r3
 800da4a:	3601      	adds	r6, #1
 800da4c:	e7ee      	b.n	800da2c <__libc_init_array+0xc>
 800da4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800da52:	4798      	blx	r3
 800da54:	3601      	adds	r6, #1
 800da56:	e7f2      	b.n	800da3e <__libc_init_array+0x1e>
 800da58:	0800db28 	.word	0x0800db28
 800da5c:	0800db28 	.word	0x0800db28
 800da60:	0800db28 	.word	0x0800db28
 800da64:	0800db2c 	.word	0x0800db2c

0800da68 <memcpy>:
 800da68:	440a      	add	r2, r1
 800da6a:	4291      	cmp	r1, r2
 800da6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800da70:	d100      	bne.n	800da74 <memcpy+0xc>
 800da72:	4770      	bx	lr
 800da74:	b510      	push	{r4, lr}
 800da76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da7e:	4291      	cmp	r1, r2
 800da80:	d1f9      	bne.n	800da76 <memcpy+0xe>
 800da82:	bd10      	pop	{r4, pc}

0800da84 <memset>:
 800da84:	4402      	add	r2, r0
 800da86:	4603      	mov	r3, r0
 800da88:	4293      	cmp	r3, r2
 800da8a:	d100      	bne.n	800da8e <memset+0xa>
 800da8c:	4770      	bx	lr
 800da8e:	f803 1b01 	strb.w	r1, [r3], #1
 800da92:	e7f9      	b.n	800da88 <memset+0x4>

0800da94 <_init>:
 800da94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da96:	bf00      	nop
 800da98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da9a:	bc08      	pop	{r3}
 800da9c:	469e      	mov	lr, r3
 800da9e:	4770      	bx	lr

0800daa0 <_fini>:
 800daa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa2:	bf00      	nop
 800daa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daa6:	bc08      	pop	{r3}
 800daa8:	469e      	mov	lr, r3
 800daaa:	4770      	bx	lr
 800daac:	0000      	movs	r0, r0
	...
