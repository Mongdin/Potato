
STM32L4_IOT_P2P_ClientServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005920  08010190  08010190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08015ab0  08015ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b60  08015b60  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08015b60  08015b60  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015b60  08015b60  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015b60  08015b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08015b68  08015b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08015b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c4c  200000a8  08015c18  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cf4  08015c18  00020cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037712  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000749f  00000000  00000000  000577ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000137ff  00000000  00000000  0005ec89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  00072488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002290  00000000  00000000  00073b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032a58  00000000  00000000  00075de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c2be  00000000  00000000  000a8840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d144  00000000  00000000  000d4afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f1c42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044b4  00000000  00000000  001f1c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010190 <__do_global_dtors_aux>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4c05      	ldr	r4, [pc, #20]	; (80101a8 <__do_global_dtors_aux+0x18>)
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	b933      	cbnz	r3, 80101a6 <__do_global_dtors_aux+0x16>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__do_global_dtors_aux+0x1c>)
 801019a:	b113      	cbz	r3, 80101a2 <__do_global_dtors_aux+0x12>
 801019c:	4804      	ldr	r0, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x20>)
 801019e:	f3af 8000 	nop.w
 80101a2:	2301      	movs	r3, #1
 80101a4:	7023      	strb	r3, [r4, #0]
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	200000a8 	.word	0x200000a8
 80101ac:	00000000 	.word	0x00000000
 80101b0:	08015a94 	.word	0x08015a94

080101b4 <frame_dummy>:
 80101b4:	b508      	push	{r3, lr}
 80101b6:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <frame_dummy+0x10>)
 80101b8:	b11b      	cbz	r3, 80101c2 <frame_dummy+0xe>
 80101ba:	4903      	ldr	r1, [pc, #12]	; (80101c8 <frame_dummy+0x14>)
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <frame_dummy+0x18>)
 80101be:	f3af 8000 	nop.w
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	00000000 	.word	0x00000000
 80101c8:	200000ac 	.word	0x200000ac
 80101cc:	08015a94 	.word	0x08015a94

080101d0 <strlen>:
 80101d0:	4603      	mov	r3, r0
 80101d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	d1fb      	bne.n	80101d2 <strlen+0x2>
 80101da:	1a18      	subs	r0, r3, r0
 80101dc:	3801      	subs	r0, #1
 80101de:	4770      	bx	lr

080101e0 <memchr>:
 80101e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80101e4:	2a10      	cmp	r2, #16
 80101e6:	db2b      	blt.n	8010240 <memchr+0x60>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	d008      	beq.n	8010200 <memchr+0x20>
 80101ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101f2:	3a01      	subs	r2, #1
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d02d      	beq.n	8010254 <memchr+0x74>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	b342      	cbz	r2, 8010250 <memchr+0x70>
 80101fe:	d1f6      	bne.n	80101ee <memchr+0xe>
 8010200:	b4f0      	push	{r4, r5, r6, r7}
 8010202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801020a:	f022 0407 	bic.w	r4, r2, #7
 801020e:	f07f 0700 	mvns.w	r7, #0
 8010212:	2300      	movs	r3, #0
 8010214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010218:	3c08      	subs	r4, #8
 801021a:	ea85 0501 	eor.w	r5, r5, r1
 801021e:	ea86 0601 	eor.w	r6, r6, r1
 8010222:	fa85 f547 	uadd8	r5, r5, r7
 8010226:	faa3 f587 	sel	r5, r3, r7
 801022a:	fa86 f647 	uadd8	r6, r6, r7
 801022e:	faa5 f687 	sel	r6, r5, r7
 8010232:	b98e      	cbnz	r6, 8010258 <memchr+0x78>
 8010234:	d1ee      	bne.n	8010214 <memchr+0x34>
 8010236:	bcf0      	pop	{r4, r5, r6, r7}
 8010238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801023c:	f002 0207 	and.w	r2, r2, #7
 8010240:	b132      	cbz	r2, 8010250 <memchr+0x70>
 8010242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010246:	3a01      	subs	r2, #1
 8010248:	ea83 0301 	eor.w	r3, r3, r1
 801024c:	b113      	cbz	r3, 8010254 <memchr+0x74>
 801024e:	d1f8      	bne.n	8010242 <memchr+0x62>
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	3801      	subs	r0, #1
 8010256:	4770      	bx	lr
 8010258:	2d00      	cmp	r5, #0
 801025a:	bf06      	itte	eq
 801025c:	4635      	moveq	r5, r6
 801025e:	3803      	subeq	r0, #3
 8010260:	3807      	subne	r0, #7
 8010262:	f015 0f01 	tst.w	r5, #1
 8010266:	d107      	bne.n	8010278 <memchr+0x98>
 8010268:	3001      	adds	r0, #1
 801026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801026e:	bf02      	ittt	eq
 8010270:	3001      	addeq	r0, #1
 8010272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010276:	3001      	addeq	r0, #1
 8010278:	bcf0      	pop	{r4, r5, r6, r7}
 801027a:	3801      	subs	r0, #1
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <__aeabi_dmul>:
 8010280:	b570      	push	{r4, r5, r6, lr}
 8010282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801028e:	bf1d      	ittte	ne
 8010290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010294:	ea94 0f0c 	teqne	r4, ip
 8010298:	ea95 0f0c 	teqne	r5, ip
 801029c:	f000 f8de 	bleq	801045c <__aeabi_dmul+0x1dc>
 80102a0:	442c      	add	r4, r5
 80102a2:	ea81 0603 	eor.w	r6, r1, r3
 80102a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80102aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80102ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80102b2:	bf18      	it	ne
 80102b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80102b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80102bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102c0:	d038      	beq.n	8010334 <__aeabi_dmul+0xb4>
 80102c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80102c6:	f04f 0500 	mov.w	r5, #0
 80102ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80102ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80102d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80102d6:	f04f 0600 	mov.w	r6, #0
 80102da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80102de:	f09c 0f00 	teq	ip, #0
 80102e2:	bf18      	it	ne
 80102e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80102e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80102ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80102f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80102f4:	d204      	bcs.n	8010300 <__aeabi_dmul+0x80>
 80102f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80102fa:	416d      	adcs	r5, r5
 80102fc:	eb46 0606 	adc.w	r6, r6, r6
 8010300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8010304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 801030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8010314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010318:	bf88      	it	hi
 801031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 801031e:	d81e      	bhi.n	801035e <__aeabi_dmul+0xde>
 8010320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8010324:	bf08      	it	eq
 8010326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 801032a:	f150 0000 	adcs.w	r0, r0, #0
 801032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010332:	bd70      	pop	{r4, r5, r6, pc}
 8010334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010338:	ea46 0101 	orr.w	r1, r6, r1
 801033c:	ea40 0002 	orr.w	r0, r0, r2
 8010340:	ea81 0103 	eor.w	r1, r1, r3
 8010344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010348:	bfc2      	ittt	gt
 801034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 801034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010352:	bd70      	popgt	{r4, r5, r6, pc}
 8010354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010358:	f04f 0e00 	mov.w	lr, #0
 801035c:	3c01      	subs	r4, #1
 801035e:	f300 80ab 	bgt.w	80104b8 <__aeabi_dmul+0x238>
 8010362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8010366:	bfde      	ittt	le
 8010368:	2000      	movle	r0, #0
 801036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 801036e:	bd70      	pople	{r4, r5, r6, pc}
 8010370:	f1c4 0400 	rsb	r4, r4, #0
 8010374:	3c20      	subs	r4, #32
 8010376:	da35      	bge.n	80103e4 <__aeabi_dmul+0x164>
 8010378:	340c      	adds	r4, #12
 801037a:	dc1b      	bgt.n	80103b4 <__aeabi_dmul+0x134>
 801037c:	f104 0414 	add.w	r4, r4, #20
 8010380:	f1c4 0520 	rsb	r5, r4, #32
 8010384:	fa00 f305 	lsl.w	r3, r0, r5
 8010388:	fa20 f004 	lsr.w	r0, r0, r4
 801038c:	fa01 f205 	lsl.w	r2, r1, r5
 8010390:	ea40 0002 	orr.w	r0, r0, r2
 8010394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80103a0:	fa21 f604 	lsr.w	r6, r1, r4
 80103a4:	eb42 0106 	adc.w	r1, r2, r6
 80103a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80103ac:	bf08      	it	eq
 80103ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80103b2:	bd70      	pop	{r4, r5, r6, pc}
 80103b4:	f1c4 040c 	rsb	r4, r4, #12
 80103b8:	f1c4 0520 	rsb	r5, r4, #32
 80103bc:	fa00 f304 	lsl.w	r3, r0, r4
 80103c0:	fa20 f005 	lsr.w	r0, r0, r5
 80103c4:	fa01 f204 	lsl.w	r2, r1, r4
 80103c8:	ea40 0002 	orr.w	r0, r0, r2
 80103cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80103d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80103d4:	f141 0100 	adc.w	r1, r1, #0
 80103d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80103dc:	bf08      	it	eq
 80103de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80103e2:	bd70      	pop	{r4, r5, r6, pc}
 80103e4:	f1c4 0520 	rsb	r5, r4, #32
 80103e8:	fa00 f205 	lsl.w	r2, r0, r5
 80103ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80103f0:	fa20 f304 	lsr.w	r3, r0, r4
 80103f4:	fa01 f205 	lsl.w	r2, r1, r5
 80103f8:	ea43 0302 	orr.w	r3, r3, r2
 80103fc:	fa21 f004 	lsr.w	r0, r1, r4
 8010400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010404:	fa21 f204 	lsr.w	r2, r1, r4
 8010408:	ea20 0002 	bic.w	r0, r0, r2
 801040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010414:	bf08      	it	eq
 8010416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801041a:	bd70      	pop	{r4, r5, r6, pc}
 801041c:	f094 0f00 	teq	r4, #0
 8010420:	d10f      	bne.n	8010442 <__aeabi_dmul+0x1c2>
 8010422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8010426:	0040      	lsls	r0, r0, #1
 8010428:	eb41 0101 	adc.w	r1, r1, r1
 801042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010430:	bf08      	it	eq
 8010432:	3c01      	subeq	r4, #1
 8010434:	d0f7      	beq.n	8010426 <__aeabi_dmul+0x1a6>
 8010436:	ea41 0106 	orr.w	r1, r1, r6
 801043a:	f095 0f00 	teq	r5, #0
 801043e:	bf18      	it	ne
 8010440:	4770      	bxne	lr
 8010442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8010446:	0052      	lsls	r2, r2, #1
 8010448:	eb43 0303 	adc.w	r3, r3, r3
 801044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010450:	bf08      	it	eq
 8010452:	3d01      	subeq	r5, #1
 8010454:	d0f7      	beq.n	8010446 <__aeabi_dmul+0x1c6>
 8010456:	ea43 0306 	orr.w	r3, r3, r6
 801045a:	4770      	bx	lr
 801045c:	ea94 0f0c 	teq	r4, ip
 8010460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010464:	bf18      	it	ne
 8010466:	ea95 0f0c 	teqne	r5, ip
 801046a:	d00c      	beq.n	8010486 <__aeabi_dmul+0x206>
 801046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010470:	bf18      	it	ne
 8010472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010476:	d1d1      	bne.n	801041c <__aeabi_dmul+0x19c>
 8010478:	ea81 0103 	eor.w	r1, r1, r3
 801047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010480:	f04f 0000 	mov.w	r0, #0
 8010484:	bd70      	pop	{r4, r5, r6, pc}
 8010486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801048a:	bf06      	itte	eq
 801048c:	4610      	moveq	r0, r2
 801048e:	4619      	moveq	r1, r3
 8010490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010494:	d019      	beq.n	80104ca <__aeabi_dmul+0x24a>
 8010496:	ea94 0f0c 	teq	r4, ip
 801049a:	d102      	bne.n	80104a2 <__aeabi_dmul+0x222>
 801049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80104a0:	d113      	bne.n	80104ca <__aeabi_dmul+0x24a>
 80104a2:	ea95 0f0c 	teq	r5, ip
 80104a6:	d105      	bne.n	80104b4 <__aeabi_dmul+0x234>
 80104a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80104ac:	bf1c      	itt	ne
 80104ae:	4610      	movne	r0, r2
 80104b0:	4619      	movne	r1, r3
 80104b2:	d10a      	bne.n	80104ca <__aeabi_dmul+0x24a>
 80104b4:	ea81 0103 	eor.w	r1, r1, r3
 80104b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80104bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80104c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104c4:	f04f 0000 	mov.w	r0, #0
 80104c8:	bd70      	pop	{r4, r5, r6, pc}
 80104ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80104ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80104d2:	bd70      	pop	{r4, r5, r6, pc}

080104d4 <__aeabi_drsub>:
 80104d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80104d8:	e002      	b.n	80104e0 <__adddf3>
 80104da:	bf00      	nop

080104dc <__aeabi_dsub>:
 80104dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080104e0 <__adddf3>:
 80104e0:	b530      	push	{r4, r5, lr}
 80104e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80104e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80104ea:	ea94 0f05 	teq	r4, r5
 80104ee:	bf08      	it	eq
 80104f0:	ea90 0f02 	teqeq	r0, r2
 80104f4:	bf1f      	itttt	ne
 80104f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80104fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80104fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8010502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010506:	f000 80e2 	beq.w	80106ce <__adddf3+0x1ee>
 801050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8010512:	bfb8      	it	lt
 8010514:	426d      	neglt	r5, r5
 8010516:	dd0c      	ble.n	8010532 <__adddf3+0x52>
 8010518:	442c      	add	r4, r5
 801051a:	ea80 0202 	eor.w	r2, r0, r2
 801051e:	ea81 0303 	eor.w	r3, r1, r3
 8010522:	ea82 0000 	eor.w	r0, r2, r0
 8010526:	ea83 0101 	eor.w	r1, r3, r1
 801052a:	ea80 0202 	eor.w	r2, r0, r2
 801052e:	ea81 0303 	eor.w	r3, r1, r3
 8010532:	2d36      	cmp	r5, #54	; 0x36
 8010534:	bf88      	it	hi
 8010536:	bd30      	pophi	{r4, r5, pc}
 8010538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010548:	d002      	beq.n	8010550 <__adddf3+0x70>
 801054a:	4240      	negs	r0, r0
 801054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 801055c:	d002      	beq.n	8010564 <__adddf3+0x84>
 801055e:	4252      	negs	r2, r2
 8010560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010564:	ea94 0f05 	teq	r4, r5
 8010568:	f000 80a7 	beq.w	80106ba <__adddf3+0x1da>
 801056c:	f1a4 0401 	sub.w	r4, r4, #1
 8010570:	f1d5 0e20 	rsbs	lr, r5, #32
 8010574:	db0d      	blt.n	8010592 <__adddf3+0xb2>
 8010576:	fa02 fc0e 	lsl.w	ip, r2, lr
 801057a:	fa22 f205 	lsr.w	r2, r2, r5
 801057e:	1880      	adds	r0, r0, r2
 8010580:	f141 0100 	adc.w	r1, r1, #0
 8010584:	fa03 f20e 	lsl.w	r2, r3, lr
 8010588:	1880      	adds	r0, r0, r2
 801058a:	fa43 f305 	asr.w	r3, r3, r5
 801058e:	4159      	adcs	r1, r3
 8010590:	e00e      	b.n	80105b0 <__adddf3+0xd0>
 8010592:	f1a5 0520 	sub.w	r5, r5, #32
 8010596:	f10e 0e20 	add.w	lr, lr, #32
 801059a:	2a01      	cmp	r2, #1
 801059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80105a0:	bf28      	it	cs
 80105a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80105a6:	fa43 f305 	asr.w	r3, r3, r5
 80105aa:	18c0      	adds	r0, r0, r3
 80105ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80105b4:	d507      	bpl.n	80105c6 <__adddf3+0xe6>
 80105b6:	f04f 0e00 	mov.w	lr, #0
 80105ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80105be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80105c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80105c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80105ca:	d31b      	bcc.n	8010604 <__adddf3+0x124>
 80105cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80105d0:	d30c      	bcc.n	80105ec <__adddf3+0x10c>
 80105d2:	0849      	lsrs	r1, r1, #1
 80105d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80105d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80105dc:	f104 0401 	add.w	r4, r4, #1
 80105e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80105e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80105e8:	f080 809a 	bcs.w	8010720 <__adddf3+0x240>
 80105ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80105f0:	bf08      	it	eq
 80105f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80105f6:	f150 0000 	adcs.w	r0, r0, #0
 80105fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80105fe:	ea41 0105 	orr.w	r1, r1, r5
 8010602:	bd30      	pop	{r4, r5, pc}
 8010604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010608:	4140      	adcs	r0, r0
 801060a:	eb41 0101 	adc.w	r1, r1, r1
 801060e:	3c01      	subs	r4, #1
 8010610:	bf28      	it	cs
 8010612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8010616:	d2e9      	bcs.n	80105ec <__adddf3+0x10c>
 8010618:	f091 0f00 	teq	r1, #0
 801061c:	bf04      	itt	eq
 801061e:	4601      	moveq	r1, r0
 8010620:	2000      	moveq	r0, #0
 8010622:	fab1 f381 	clz	r3, r1
 8010626:	bf08      	it	eq
 8010628:	3320      	addeq	r3, #32
 801062a:	f1a3 030b 	sub.w	r3, r3, #11
 801062e:	f1b3 0220 	subs.w	r2, r3, #32
 8010632:	da0c      	bge.n	801064e <__adddf3+0x16e>
 8010634:	320c      	adds	r2, #12
 8010636:	dd08      	ble.n	801064a <__adddf3+0x16a>
 8010638:	f102 0c14 	add.w	ip, r2, #20
 801063c:	f1c2 020c 	rsb	r2, r2, #12
 8010640:	fa01 f00c 	lsl.w	r0, r1, ip
 8010644:	fa21 f102 	lsr.w	r1, r1, r2
 8010648:	e00c      	b.n	8010664 <__adddf3+0x184>
 801064a:	f102 0214 	add.w	r2, r2, #20
 801064e:	bfd8      	it	le
 8010650:	f1c2 0c20 	rsble	ip, r2, #32
 8010654:	fa01 f102 	lsl.w	r1, r1, r2
 8010658:	fa20 fc0c 	lsr.w	ip, r0, ip
 801065c:	bfdc      	itt	le
 801065e:	ea41 010c 	orrle.w	r1, r1, ip
 8010662:	4090      	lslle	r0, r2
 8010664:	1ae4      	subs	r4, r4, r3
 8010666:	bfa2      	ittt	ge
 8010668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 801066c:	4329      	orrge	r1, r5
 801066e:	bd30      	popge	{r4, r5, pc}
 8010670:	ea6f 0404 	mvn.w	r4, r4
 8010674:	3c1f      	subs	r4, #31
 8010676:	da1c      	bge.n	80106b2 <__adddf3+0x1d2>
 8010678:	340c      	adds	r4, #12
 801067a:	dc0e      	bgt.n	801069a <__adddf3+0x1ba>
 801067c:	f104 0414 	add.w	r4, r4, #20
 8010680:	f1c4 0220 	rsb	r2, r4, #32
 8010684:	fa20 f004 	lsr.w	r0, r0, r4
 8010688:	fa01 f302 	lsl.w	r3, r1, r2
 801068c:	ea40 0003 	orr.w	r0, r0, r3
 8010690:	fa21 f304 	lsr.w	r3, r1, r4
 8010694:	ea45 0103 	orr.w	r1, r5, r3
 8010698:	bd30      	pop	{r4, r5, pc}
 801069a:	f1c4 040c 	rsb	r4, r4, #12
 801069e:	f1c4 0220 	rsb	r2, r4, #32
 80106a2:	fa20 f002 	lsr.w	r0, r0, r2
 80106a6:	fa01 f304 	lsl.w	r3, r1, r4
 80106aa:	ea40 0003 	orr.w	r0, r0, r3
 80106ae:	4629      	mov	r1, r5
 80106b0:	bd30      	pop	{r4, r5, pc}
 80106b2:	fa21 f004 	lsr.w	r0, r1, r4
 80106b6:	4629      	mov	r1, r5
 80106b8:	bd30      	pop	{r4, r5, pc}
 80106ba:	f094 0f00 	teq	r4, #0
 80106be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80106c2:	bf06      	itte	eq
 80106c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80106c8:	3401      	addeq	r4, #1
 80106ca:	3d01      	subne	r5, #1
 80106cc:	e74e      	b.n	801056c <__adddf3+0x8c>
 80106ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80106d2:	bf18      	it	ne
 80106d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80106d8:	d029      	beq.n	801072e <__adddf3+0x24e>
 80106da:	ea94 0f05 	teq	r4, r5
 80106de:	bf08      	it	eq
 80106e0:	ea90 0f02 	teqeq	r0, r2
 80106e4:	d005      	beq.n	80106f2 <__adddf3+0x212>
 80106e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80106ea:	bf04      	itt	eq
 80106ec:	4619      	moveq	r1, r3
 80106ee:	4610      	moveq	r0, r2
 80106f0:	bd30      	pop	{r4, r5, pc}
 80106f2:	ea91 0f03 	teq	r1, r3
 80106f6:	bf1e      	ittt	ne
 80106f8:	2100      	movne	r1, #0
 80106fa:	2000      	movne	r0, #0
 80106fc:	bd30      	popne	{r4, r5, pc}
 80106fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8010702:	d105      	bne.n	8010710 <__adddf3+0x230>
 8010704:	0040      	lsls	r0, r0, #1
 8010706:	4149      	adcs	r1, r1
 8010708:	bf28      	it	cs
 801070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801070e:	bd30      	pop	{r4, r5, pc}
 8010710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010714:	bf3c      	itt	cc
 8010716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 801071a:	bd30      	popcc	{r4, r5, pc}
 801071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010728:	f04f 0000 	mov.w	r0, #0
 801072c:	bd30      	pop	{r4, r5, pc}
 801072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010732:	bf1a      	itte	ne
 8010734:	4619      	movne	r1, r3
 8010736:	4610      	movne	r0, r2
 8010738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 801073c:	bf1c      	itt	ne
 801073e:	460b      	movne	r3, r1
 8010740:	4602      	movne	r2, r0
 8010742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010746:	bf06      	itte	eq
 8010748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 801074c:	ea91 0f03 	teqeq	r1, r3
 8010750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010754:	bd30      	pop	{r4, r5, pc}
 8010756:	bf00      	nop

08010758 <__aeabi_ui2d>:
 8010758:	f090 0f00 	teq	r0, #0
 801075c:	bf04      	itt	eq
 801075e:	2100      	moveq	r1, #0
 8010760:	4770      	bxeq	lr
 8010762:	b530      	push	{r4, r5, lr}
 8010764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801076c:	f04f 0500 	mov.w	r5, #0
 8010770:	f04f 0100 	mov.w	r1, #0
 8010774:	e750      	b.n	8010618 <__adddf3+0x138>
 8010776:	bf00      	nop

08010778 <__aeabi_i2d>:
 8010778:	f090 0f00 	teq	r0, #0
 801077c:	bf04      	itt	eq
 801077e:	2100      	moveq	r1, #0
 8010780:	4770      	bxeq	lr
 8010782:	b530      	push	{r4, r5, lr}
 8010784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010790:	bf48      	it	mi
 8010792:	4240      	negmi	r0, r0
 8010794:	f04f 0100 	mov.w	r1, #0
 8010798:	e73e      	b.n	8010618 <__adddf3+0x138>
 801079a:	bf00      	nop

0801079c <__aeabi_f2d>:
 801079c:	0042      	lsls	r2, r0, #1
 801079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80107a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80107a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80107aa:	bf1f      	itttt	ne
 80107ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80107b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80107b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80107b8:	4770      	bxne	lr
 80107ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80107be:	bf08      	it	eq
 80107c0:	4770      	bxeq	lr
 80107c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80107c6:	bf04      	itt	eq
 80107c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80107cc:	4770      	bxeq	lr
 80107ce:	b530      	push	{r4, r5, lr}
 80107d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80107d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80107d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80107dc:	e71c      	b.n	8010618 <__adddf3+0x138>
 80107de:	bf00      	nop

080107e0 <__aeabi_ul2d>:
 80107e0:	ea50 0201 	orrs.w	r2, r0, r1
 80107e4:	bf08      	it	eq
 80107e6:	4770      	bxeq	lr
 80107e8:	b530      	push	{r4, r5, lr}
 80107ea:	f04f 0500 	mov.w	r5, #0
 80107ee:	e00a      	b.n	8010806 <__aeabi_l2d+0x16>

080107f0 <__aeabi_l2d>:
 80107f0:	ea50 0201 	orrs.w	r2, r0, r1
 80107f4:	bf08      	it	eq
 80107f6:	4770      	bxeq	lr
 80107f8:	b530      	push	{r4, r5, lr}
 80107fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80107fe:	d502      	bpl.n	8010806 <__aeabi_l2d+0x16>
 8010800:	4240      	negs	r0, r0
 8010802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8010812:	f43f aed8 	beq.w	80105c6 <__adddf3+0xe6>
 8010816:	f04f 0203 	mov.w	r2, #3
 801081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801081e:	bf18      	it	ne
 8010820:	3203      	addne	r2, #3
 8010822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010826:	bf18      	it	ne
 8010828:	3203      	addne	r2, #3
 801082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801082e:	f1c2 0320 	rsb	r3, r2, #32
 8010832:	fa00 fc03 	lsl.w	ip, r0, r3
 8010836:	fa20 f002 	lsr.w	r0, r0, r2
 801083a:	fa01 fe03 	lsl.w	lr, r1, r3
 801083e:	ea40 000e 	orr.w	r0, r0, lr
 8010842:	fa21 f102 	lsr.w	r1, r1, r2
 8010846:	4414      	add	r4, r2
 8010848:	e6bd      	b.n	80105c6 <__adddf3+0xe6>
 801084a:	bf00      	nop

0801084c <__aeabi_d2iz>:
 801084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010854:	d215      	bcs.n	8010882 <__aeabi_d2iz+0x36>
 8010856:	d511      	bpl.n	801087c <__aeabi_d2iz+0x30>
 8010858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010860:	d912      	bls.n	8010888 <__aeabi_d2iz+0x3c>
 8010862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010872:	fa23 f002 	lsr.w	r0, r3, r2
 8010876:	bf18      	it	ne
 8010878:	4240      	negne	r0, r0
 801087a:	4770      	bx	lr
 801087c:	f04f 0000 	mov.w	r0, #0
 8010880:	4770      	bx	lr
 8010882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010886:	d105      	bne.n	8010894 <__aeabi_d2iz+0x48>
 8010888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 801088c:	bf08      	it	eq
 801088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010892:	4770      	bx	lr
 8010894:	f04f 0000 	mov.w	r0, #0
 8010898:	4770      	bx	lr
 801089a:	bf00      	nop

0801089c <aci_gap_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

#if BLUENRG_MS
tBleStatus aci_gap_init(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 801089c:	b530      	push	{r4, r5, lr}
 801089e:	b08b      	sub	sp, #44	; 0x2c
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80108a0:	ad02      	add	r5, sp, #8
  cp.role = role;
 80108a2:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 80108a6:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 80108aa:	f88d 2006 	strb.w	r2, [sp, #6]
  Osal_MemSet(&resp, 0, sizeof(resp));
 80108ae:	2100      	movs	r1, #0
 80108b0:	2207      	movs	r2, #7
 80108b2:	4628      	mov	r0, r5
{
 80108b4:	461c      	mov	r4, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 80108b6:	f000 fa7d 	bl	8010db4 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 80108ba:	2218      	movs	r2, #24
 80108bc:	2100      	movs	r1, #0
 80108be:	a804      	add	r0, sp, #16
 80108c0:	f000 fa78 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80108c4:	4b14      	ldr	r3, [pc, #80]	; (8010918 <aci_gap_init+0x7c>)
 80108c6:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
 80108c8:	ab01      	add	r3, sp, #4
 80108ca:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80108cc:	2303      	movs	r3, #3
 80108ce:	f8ad 301c 	strh.w	r3, [sp, #28]
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80108d2:	2100      	movs	r1, #0
  rq.rlen = GAP_INIT_RP_SIZE;
 80108d4:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 80108d6:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 80108d8:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 80108da:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80108de:	f001 fc55 	bl	801218c <hci_send_req>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	db15      	blt.n	8010912 <aci_gap_init+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80108e6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80108ea:	b980      	cbnz	r0, 801090e <aci_gap_init+0x72>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 80108ec:	9b02      	ldr	r3, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80108ee:	f89d 200c 	ldrb.w	r2, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 80108f2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80108f6:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80108f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80108fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010902:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8010904:	9b03      	ldr	r3, [sp, #12]
 8010906:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010908:	f3c3 230f 	ubfx	r3, r3, #8, #16
 801090c:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 801090e:	b00b      	add	sp, #44	; 0x2c
 8010910:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_TIMEOUT;
 8010912:	20ff      	movs	r0, #255	; 0xff
 8010914:	e7fb      	b.n	801090e <aci_gap_init+0x72>
 8010916:	bf00      	nop
 8010918:	008a003f 	.word	0x008a003f

0801091c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 801091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801091e:	b095      	sub	sp, #84	; 0x54
 8010920:	461f      	mov	r7, r3
 8010922:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8010926:	f89d 5074 	ldrb.w	r5, [sp, #116]	; 0x74
 801092a:	f8ad 1006 	strh.w	r1, [sp, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 801092e:	1963      	adds	r3, r4, r5
 8010930:	2b1a      	cmp	r3, #26
{
 8010932:	f8ad 2004 	strh.w	r2, [sp, #4]
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8010936:	dc57      	bgt.n	80109e8 <aci_gap_set_discoverable+0xcc>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8010938:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 801093c:	2202      	movs	r2, #2
 801093e:	f10d 0106 	add.w	r1, sp, #6
 8010942:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8010946:	f000 fa33 	bl	8010db0 <Osal_MemCpy>
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  Osal_MemCpy(buffer + indx, &AdvIntervMax, 2);
 801094a:	2202      	movs	r2, #2
 801094c:	a901      	add	r1, sp, #4
 801094e:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 8010952:	f000 fa2d 	bl	8010db0 <Osal_MemCpy>
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8010956:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 801095a:	991c      	ldr	r1, [sp, #112]	; 0x70
  buffer[indx] = AdvFilterPolicy;
 801095c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 8010960:	4622      	mov	r2, r4
 8010962:	a80c      	add	r0, sp, #48	; 0x30
  buffer[indx] = LocalNameLen;
 8010964:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
  buffer[indx] = OwnAddrType;
 8010968:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 801096c:	f000 fa20 	bl	8010db0 <Osal_MemCpy>
  indx +=  LocalNameLen;
 8010970:	f104 0308 	add.w	r3, r4, #8
  
  buffer[indx] = ServiceUUIDLen;
 8010974:	aa14      	add	r2, sp, #80	; 0x50
 8010976:	fa52 f383 	uxtab	r3, r2, r3
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 801097a:	ae0a      	add	r6, sp, #40	; 0x28
  indx++;
 801097c:	f104 0009 	add.w	r0, r4, #9
 8010980:	b2c4      	uxtb	r4, r0

  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8010982:	991e      	ldr	r1, [sp, #120]	; 0x78
  buffer[indx] = ServiceUUIDLen;
 8010984:	f803 5c28 	strb.w	r5, [r3, #-40]
  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8010988:	462a      	mov	r2, r5
 801098a:	fa56 f080 	uxtab	r0, r6, r0
 801098e:	f000 fa0f 	bl	8010db0 <Osal_MemCpy>
  indx +=  ServiceUUIDLen;  
 8010992:	1928      	adds	r0, r5, r4
 8010994:	b2c4      	uxtb	r4, r0

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMin, 2);
 8010996:	2202      	movs	r2, #2
 8010998:	a91f      	add	r1, sp, #124	; 0x7c
 801099a:	fa56 f080 	uxtab	r0, r6, r0
 801099e:	f000 fa07 	bl	8010db0 <Osal_MemCpy>
  indx +=  2;
 80109a2:	1ca0      	adds	r0, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMax, 2);
 80109a4:	2202      	movs	r2, #2
 80109a6:	a920      	add	r1, sp, #128	; 0x80
 80109a8:	fa56 f080 	uxtab	r0, r6, r0
 80109ac:	f000 fa00 	bl	8010db0 <Osal_MemCpy>
  indx +=  2;    

  Osal_MemSet(&rq, 0, sizeof(rq));
 80109b0:	2218      	movs	r2, #24
 80109b2:	2100      	movs	r1, #0
 80109b4:	a804      	add	r0, sp, #16
 80109b6:	f000 f9fd 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80109ba:	4b0d      	ldr	r3, [pc, #52]	; (80109f0 <aci_gap_set_discoverable+0xd4>)
 80109bc:	9304      	str	r3, [sp, #16]
  indx +=  2;    
 80109be:	3404      	adds	r4, #4
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 80109c0:	f10d 030f 	add.w	r3, sp, #15
 80109c4:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 80109c6:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80109c8:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80109ca:	2100      	movs	r1, #0
 80109cc:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 80109ce:	9606      	str	r6, [sp, #24]
  rq.clen = indx;
 80109d0:	f8ad 401c 	strh.w	r4, [sp, #28]
  rq.rlen = 1;
 80109d4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80109d8:	f001 fbd8 	bl	801218c <hci_send_req>
 80109dc:	2800      	cmp	r0, #0
 80109de:	db05      	blt.n	80109ec <aci_gap_set_discoverable+0xd0>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80109e0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    return status;
  }

  return 0;
}
 80109e4:	b015      	add	sp, #84	; 0x54
 80109e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80109e8:	2042      	movs	r0, #66	; 0x42
 80109ea:	e7fb      	b.n	80109e4 <aci_gap_set_discoverable+0xc8>
    return BLE_STATUS_TIMEOUT;
 80109ec:	20ff      	movs	r0, #255	; 0xff
 80109ee:	e7f9      	b.n	80109e4 <aci_gap_set_discoverable+0xc8>
 80109f0:	0083003f 	.word	0x0083003f

080109f4 <aci_gap_set_io_capability>:
    
  return status;
}

tBleStatus aci_gap_set_io_capability(uint8_t io_capability)
{
 80109f4:	b500      	push	{lr}
 80109f6:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
  gap_set_io_capability_cp cp;
    
  cp.io_capability = io_capability;

  Osal_MemSet(&rq, 0, sizeof(rq));
 80109f8:	2218      	movs	r2, #24
  cp.io_capability = io_capability;
 80109fa:	f88d 0004 	strb.w	r0, [sp, #4]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80109fe:	2100      	movs	r1, #0
 8010a00:	a802      	add	r0, sp, #8
 8010a02:	f000 f9d7 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8010a06:	4b0c      	ldr	r3, [pc, #48]	; (8010a38 <aci_gap_set_io_capability+0x44>)
 8010a08:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_IO_CAPABILITY;
  rq.cparam = &cp;
 8010a0a:	ab01      	add	r3, sp, #4
 8010a0c:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.rparam = &status;
 8010a0e:	f10d 0207 	add.w	r2, sp, #7
  rq.clen = sizeof(cp);
 8010a12:	2301      	movs	r3, #1
  rq.rlen = 1;
    
  if (hci_send_req(&rq, FALSE) < 0)
 8010a14:	2100      	movs	r1, #0
 8010a16:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 8010a18:	f8ad 3014 	strh.w	r3, [sp, #20]
  rq.rparam = &status;
 8010a1c:	9206      	str	r2, [sp, #24]
  rq.rlen = 1;
 8010a1e:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8010a22:	f001 fbb3 	bl	801218c <hci_send_req>
 8010a26:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
    
  return status;
 8010a28:	bfac      	ite	ge
 8010a2a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8010a2e:	20ff      	movlt	r0, #255	; 0xff
}
 8010a30:	b009      	add	sp, #36	; 0x24
 8010a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a36:	bf00      	nop
 8010a38:	0085003f 	.word	0x0085003f

08010a3c <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8010a3c:	b530      	push	{r4, r5, lr}
 8010a3e:	b08f      	sub	sp, #60	; 0x3c
 8010a40:	460d      	mov	r5, r1
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8010a42:	f88d 001c 	strb.w	r0, [sp, #28]
{
 8010a46:	4611      	mov	r1, r2
  cp.oob_enable = oob_enable;
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 8010a48:	f10d 001e 	add.w	r0, sp, #30
 8010a4c:	2210      	movs	r2, #16
{
 8010a4e:	461c      	mov	r4, r3
  cp.oob_enable = oob_enable;
 8010a50:	f88d 501d 	strb.w	r5, [sp, #29]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 8010a54:	f000 f9ac 	bl	8010db0 <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
  cp.max_encryption_key_size = max_encryption_key_size;
 8010a58:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8010a5c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 8010a60:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010a64:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8010a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a6a:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010a6e:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 8010a70:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8010a74:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  Osal_MemSet(&rq, 0, sizeof(rq));
 8010a78:	2100      	movs	r1, #0
 8010a7a:	a801      	add	r0, sp, #4
  cp.min_encryption_key_size = min_encryption_key_size;
 8010a7c:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  Osal_MemSet(&rq, 0, sizeof(rq));
 8010a80:	f000 f998 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8010a84:	4b0b      	ldr	r3, [pc, #44]	; (8010ab4 <aci_gap_set_auth_requirement+0x78>)
 8010a86:	9301      	str	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
  rq.cparam = &cp;
 8010a88:	ab07      	add	r3, sp, #28
 8010a8a:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 8010a8c:	231a      	movs	r3, #26
 8010a8e:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.rparam = &status;
 8010a92:	f10d 0303 	add.w	r3, sp, #3
 8010a96:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8010a98:	2100      	movs	r1, #0
  rq.rlen = 1;
 8010a9a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8010a9c:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 8010a9e:	f8ad 3018 	strh.w	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8010aa2:	f001 fb73 	bl	801218c <hci_send_req>
 8010aa6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8010aa8:	bfac      	ite	ge
 8010aaa:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8010aae:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 8010ab0:	b00f      	add	sp, #60	; 0x3c
 8010ab2:	bd30      	pop	{r4, r5, pc}
 8010ab4:	0086003f 	.word	0x0086003f

08010ab8 <aci_gap_configure_whitelist>:

  return resp.status;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 8010ab8:	b500      	push	{lr}
 8010aba:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 8010abc:	2218      	movs	r2, #24
 8010abe:	2100      	movs	r1, #0
 8010ac0:	a802      	add	r0, sp, #8
 8010ac2:	f000 f977 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8010ac6:	4b0a      	ldr	r3, [pc, #40]	; (8010af0 <aci_gap_configure_whitelist+0x38>)
 8010ac8:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GAP_CONFIGURE_WHITELIST;
  rq.rparam = &status;
 8010aca:	f10d 0307 	add.w	r3, sp, #7
 8010ace:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8010ad0:	2100      	movs	r1, #0
  rq.rlen = 1;
 8010ad2:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8010ad4:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8010ad6:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8010ada:	f001 fb57 	bl	801218c <hci_send_req>
 8010ade:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8010ae0:	bfac      	ite	ge
 8010ae2:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8010ae6:	20ff      	movlt	r0, #255	; 0xff
}
 8010ae8:	b009      	add	sp, #36	; 0x24
 8010aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aee:	bf00      	nop
 8010af0:	0092003f 	.word	0x0092003f

08010af4 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8010af4:	b500      	push	{lr}
 8010af6:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010af8:	2218      	movs	r2, #24
 8010afa:	2100      	movs	r1, #0
 8010afc:	a802      	add	r0, sp, #8
 8010afe:	f000 f959 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8010b02:	4b0a      	ldr	r3, [pc, #40]	; (8010b2c <aci_gatt_init+0x38>)
 8010b04:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
  rq.rparam = &status;
 8010b06:	f10d 0307 	add.w	r3, sp, #7
 8010b0a:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8010b0c:	2100      	movs	r1, #0
  rq.rlen = 1;
 8010b0e:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8010b10:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8010b12:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8010b16:	f001 fb39 	bl	801218c <hci_send_req>
 8010b1a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8010b1c:	bfac      	ite	ge
 8010b1e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8010b22:	20ff      	movlt	r0, #255	; 0xff
}
 8010b24:	b009      	add	sp, #36	; 0x24
 8010b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b2a:	bf00      	nop
 8010b2c:	0101003f 	.word	0x0101003f

08010b30 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8010b30:	b570      	push	{r4, r5, r6, lr}
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 8010b32:	2801      	cmp	r0, #1
{
 8010b34:	b08c      	sub	sp, #48	; 0x30
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8010b36:	bf0c      	ite	eq
 8010b38:	2402      	moveq	r4, #2
 8010b3a:	2410      	movne	r4, #16
{
 8010b3c:	4616      	mov	r6, r2
  buffer[indx] = service_uuid_type;
 8010b3e:	f88d 0004 	strb.w	r0, [sp, #4]
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 8010b42:	4622      	mov	r2, r4
 8010b44:	f10d 0005 	add.w	r0, sp, #5
{
 8010b48:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 8010b4a:	f000 f931 	bl	8010db0 <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8010b4e:	ab0c      	add	r3, sp, #48	; 0x30
 8010b50:	4423      	add	r3, r4
    
  buffer[indx] = max_attr_records;
  indx++;
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 8010b52:	2203      	movs	r2, #3
  buffer[indx] = service_type;
 8010b54:	f803 6c2b 	strb.w	r6, [r3, #-43]
  buffer[indx] = max_attr_records;
 8010b58:	ab0c      	add	r3, sp, #48	; 0x30
 8010b5a:	4423      	add	r3, r4
  Osal_MemSet(&resp, 0, sizeof(resp));
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	4668      	mov	r0, sp
  buffer[indx] = max_attr_records;
 8010b60:	f803 5c2a 	strb.w	r5, [r3, #-42]
  Osal_MemSet(&resp, 0, sizeof(resp));
 8010b64:	f000 f926 	bl	8010db4 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010b68:	2218      	movs	r2, #24
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	eb0d 0002 	add.w	r0, sp, r2
 8010b70:	f000 f920 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8010b74:	4b0e      	ldr	r3, [pc, #56]	; (8010bb0 <aci_gatt_add_serv+0x80>)
 8010b76:	9306      	str	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
 8010b78:	ab01      	add	r3, sp, #4
 8010b7a:	9308      	str	r3, [sp, #32]
  rq.clen = indx;
 8010b7c:	3403      	adds	r4, #3
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8010b7e:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8010b80:	2100      	movs	r1, #0
 8010b82:	a806      	add	r0, sp, #24
  rq.clen = indx;
 8010b84:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 8010b88:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8010b8c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8010b90:	f001 fafc 	bl	801218c <hci_send_req>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	db09      	blt.n	8010bac <aci_gatt_add_serv+0x7c>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8010b98:	f89d 0000 	ldrb.w	r0, [sp]
 8010b9c:	b920      	cbnz	r0, 8010ba8 <aci_gatt_add_serv+0x78>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 8010b9e:	9b00      	ldr	r3, [sp, #0]
 8010ba0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ba2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8010ba6:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8010ba8:	b00c      	add	sp, #48	; 0x30
 8010baa:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8010bac:	20ff      	movs	r0, #255	; 0xff
 8010bae:	e7fb      	b.n	8010ba8 <aci_gatt_add_serv+0x78>
 8010bb0:	0102003f 	.word	0x0102003f

08010bb4 <aci_gatt_add_char>:
           uint8_t secPermissions,
           uint8_t gattEvtMask,
           uint8_t encryKeySize,
           uint8_t isVariable,
           uint16_t* charHandle)                     
{
 8010bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bb6:	b091      	sub	sp, #68	; 0x44
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 8010bb8:	af09      	add	r7, sp, #36	; 0x24
{
 8010bba:	460c      	mov	r4, r1
 8010bbc:	4616      	mov	r6, r2
 8010bbe:	f8ad 0006 	strh.w	r0, [sp, #6]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 8010bc2:	2202      	movs	r2, #2
 8010bc4:	f10d 0106 	add.w	r1, sp, #6
 8010bc8:	4638      	mov	r0, r7
{
 8010bca:	461d      	mov	r5, r3
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 8010bcc:	f000 f8f0 	bl	8010db0 <Osal_MemCpy>
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8010bd0:	2c01      	cmp	r4, #1
  buffer[indx] = charUuidType;
 8010bd2:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
    uuid_len = 16;
 8010bd6:	bf0c      	ite	eq
 8010bd8:	2402      	moveq	r4, #2
 8010bda:	2410      	movne	r4, #16
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 8010bdc:	4622      	mov	r2, r4
 8010bde:	4631      	mov	r1, r6
 8010be0:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8010be4:	f000 f8e4 	bl	8010db0 <Osal_MemCpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8010be8:	ab10      	add	r3, sp, #64	; 0x40
 8010bea:	4423      	add	r3, r4
  indx+=2;
#else
  indx++;
#endif  
    
  buffer[indx] = charProperties;
 8010bec:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  buffer[indx] = charValueLen;
 8010bf0:	f803 5c19 	strb.w	r5, [r3, #-25]
  buffer[indx] = charProperties;
 8010bf4:	ab10      	add	r3, sp, #64	; 0x40
 8010bf6:	4423      	add	r3, r4
  indx++;
    
  buffer[indx] = isVariable;
  indx++;
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 8010bf8:	ad02      	add	r5, sp, #8
  buffer[indx] = charProperties;
 8010bfa:	f803 2c18 	strb.w	r2, [r3, #-24]
  buffer[indx] = secPermissions;
 8010bfe:	ab10      	add	r3, sp, #64	; 0x40
 8010c00:	4423      	add	r3, r4
 8010c02:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010c06:	f803 2c17 	strb.w	r2, [r3, #-23]
  buffer[indx] = gattEvtMask;
 8010c0a:	ab10      	add	r3, sp, #64	; 0x40
 8010c0c:	4423      	add	r3, r4
 8010c0e:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8010c12:	f803 2c16 	strb.w	r2, [r3, #-22]
  buffer[indx] = encryKeySize;
 8010c16:	ab10      	add	r3, sp, #64	; 0x40
 8010c18:	4423      	add	r3, r4
 8010c1a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8010c1e:	f803 2c15 	strb.w	r2, [r3, #-21]
  buffer[indx] = isVariable;
 8010c22:	ab10      	add	r3, sp, #64	; 0x40
 8010c24:	4423      	add	r3, r4
 8010c26:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8010c2a:	f803 2c14 	strb.w	r2, [r3, #-20]
  Osal_MemSet(&resp, 0, sizeof(resp));
 8010c2e:	2100      	movs	r1, #0
 8010c30:	2203      	movs	r2, #3
 8010c32:	4628      	mov	r0, r5
 8010c34:	f000 f8be 	bl	8010db4 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010c38:	2218      	movs	r2, #24
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	a803      	add	r0, sp, #12
 8010c3e:	f000 f8b9 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8010c42:	4b0e      	ldr	r3, [pc, #56]	; (8010c7c <aci_gatt_add_char+0xc8>)
 8010c44:	9303      	str	r3, [sp, #12]
  rq.ocf = OCF_GATT_ADD_CHAR;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8010c46:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8010c48:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	a803      	add	r0, sp, #12
  rq.cparam = (void *)buffer;
 8010c4e:	9705      	str	r7, [sp, #20]
  rq.clen = indx;
 8010c50:	f8ad 4018 	strh.w	r4, [sp, #24]
  rq.rparam = &resp;
 8010c54:	9507      	str	r5, [sp, #28]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8010c56:	f8ad 3020 	strh.w	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 8010c5a:	f001 fa97 	bl	801218c <hci_send_req>
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	db09      	blt.n	8010c76 <aci_gatt_add_char+0xc2>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8010c62:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8010c66:	b920      	cbnz	r0, 8010c72 <aci_gatt_add_char+0xbe>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 8010c68:	9b02      	ldr	r3, [sp, #8]
 8010c6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010c6c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8010c70:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8010c72:	b011      	add	sp, #68	; 0x44
 8010c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8010c76:	20ff      	movs	r0, #255	; 0xff
 8010c78:	e7fb      	b.n	8010c72 <aci_gatt_add_char+0xbe>
 8010c7a:	bf00      	nop
 8010c7c:	0104003f 	.word	0x0104003f

08010c80 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
              uint16_t charHandle,
              uint8_t charValOffset,
              uint8_t charValueLen,   
                                      const void *charValue)
{
 8010c80:	b570      	push	{r4, r5, r6, lr}
 8010c82:	b0ca      	sub	sp, #296	; 0x128
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8010c84:	2bf9      	cmp	r3, #249	; 0xf9
{
 8010c86:	4616      	mov	r6, r2
 8010c88:	461c      	mov	r4, r3
 8010c8a:	f8ad 0006 	strh.w	r0, [sp, #6]
 8010c8e:	f8ad 1004 	strh.w	r1, [sp, #4]
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8010c92:	d82f      	bhi.n	8010cf4 <aci_gatt_update_char_value+0x74>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 8010c94:	ad0a      	add	r5, sp, #40	; 0x28
 8010c96:	2202      	movs	r2, #2
 8010c98:	f10d 0106 	add.w	r1, sp, #6
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	f000 f887 	bl	8010db0 <Osal_MemCpy>
  indx += 2;
    
  charHandle = htobs(charHandle);
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 8010ca2:	2202      	movs	r2, #2
 8010ca4:	a901      	add	r1, sp, #4
 8010ca6:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8010caa:	f000 f881 	bl	8010db0 <Osal_MemCpy>
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 8010cae:	4622      	mov	r2, r4
 8010cb0:	994e      	ldr	r1, [sp, #312]	; 0x138
  buffer[indx] = charValueLen;
 8010cb2:	716c      	strb	r4, [r5, #5]
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 8010cb4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
  buffer[indx] = charValOffset;
 8010cb8:	712e      	strb	r6, [r5, #4]
  indx +=  charValueLen;
 8010cba:	3406      	adds	r4, #6
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 8010cbc:	f000 f878 	bl	8010db0 <Osal_MemCpy>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010cc0:	2218      	movs	r2, #24
 8010cc2:	2100      	movs	r1, #0
 8010cc4:	a804      	add	r0, sp, #16
 8010cc6:	f000 f875 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8010cca:	b2e4      	uxtb	r4, r4
  rq.ogf = OGF_VENDOR_CMD;
 8010ccc:	4b0b      	ldr	r3, [pc, #44]	; (8010cfc <aci_gatt_update_char_value+0x7c>)
 8010cce:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
 8010cd0:	f8ad 401c 	strh.w	r4, [sp, #28]
  rq.rparam = &status;
  rq.rlen = 1;
 8010cd4:	2301      	movs	r3, #1
  rq.rparam = &status;
 8010cd6:	f10d 040f 	add.w	r4, sp, #15

  if (hci_send_req(&rq, FALSE) < 0)
 8010cda:	2100      	movs	r1, #0
 8010cdc:	a804      	add	r0, sp, #16
  rq.cparam = (void *)buffer;
 8010cde:	9506      	str	r5, [sp, #24]
  rq.rparam = &status;
 8010ce0:	9408      	str	r4, [sp, #32]
  rq.rlen = 1;
 8010ce2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8010ce6:	f001 fa51 	bl	801218c <hci_send_req>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	db04      	blt.n	8010cf8 <aci_gatt_update_char_value+0x78>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8010cee:	7820      	ldrb	r0, [r4, #0]
    return status;
  }

  return 0;
}
 8010cf0:	b04a      	add	sp, #296	; 0x128
 8010cf2:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8010cf4:	2042      	movs	r0, #66	; 0x42
 8010cf6:	e7fb      	b.n	8010cf0 <aci_gatt_update_char_value+0x70>
    return BLE_STATUS_TIMEOUT;
 8010cf8:	20ff      	movs	r0, #255	; 0xff
 8010cfa:	e7f9      	b.n	8010cf0 <aci_gatt_update_char_value+0x70>
 8010cfc:	0106003f 	.word	0x0106003f

08010d00 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8010d00:	b530      	push	{r4, r5, lr}
 8010d02:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8010d04:	2cfd      	cmp	r4, #253	; 0xfd
{
 8010d06:	b0c9      	sub	sp, #292	; 0x124
 8010d08:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8010d0a:	d824      	bhi.n	8010d56 <aci_hal_write_config_data+0x56>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  Osal_MemCpy(buffer + indx, val, len);
 8010d0c:	4622      	mov	r2, r4
  buffer[indx] = offset;
 8010d0e:	f88d 0020 	strb.w	r0, [sp, #32]
  Osal_MemCpy(buffer + indx, val, len);
 8010d12:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8010d16:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  Osal_MemCpy(buffer + indx, val, len);
 8010d1a:	f000 f849 	bl	8010db0 <Osal_MemCpy>
  indx +=  len;
 8010d1e:	3402      	adds	r4, #2

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010d20:	2218      	movs	r2, #24
 8010d22:	2100      	movs	r1, #0
 8010d24:	a802      	add	r0, sp, #8
 8010d26:	f000 f845 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8010d2a:	b2e4      	uxtb	r4, r4
  rq.ogf = OGF_VENDOR_CMD;
 8010d2c:	4b0c      	ldr	r3, [pc, #48]	; (8010d60 <aci_hal_write_config_data+0x60>)
 8010d2e:	9302      	str	r3, [sp, #8]
  rq.clen = indx;
 8010d30:	f8ad 4014 	strh.w	r4, [sp, #20]
  rq.rparam = &status;
  rq.rlen = 1;
 8010d34:	2301      	movs	r3, #1
  buffer[indx] = offset;
 8010d36:	ad08      	add	r5, sp, #32
  rq.rparam = &status;
 8010d38:	f10d 0407 	add.w	r4, sp, #7

  if (hci_send_req(&rq, FALSE) < 0)
 8010d3c:	2100      	movs	r1, #0
 8010d3e:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 8010d40:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 8010d42:	9406      	str	r4, [sp, #24]
  rq.rlen = 1;
 8010d44:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8010d48:	f001 fa20 	bl	801218c <hci_send_req>
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	db04      	blt.n	8010d5a <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;

  return status;
 8010d50:	7820      	ldrb	r0, [r4, #0]
}
 8010d52:	b049      	add	sp, #292	; 0x124
 8010d54:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8010d56:	2042      	movs	r0, #66	; 0x42
 8010d58:	e7fb      	b.n	8010d52 <aci_hal_write_config_data+0x52>
    return BLE_STATUS_TIMEOUT;
 8010d5a:	20ff      	movs	r0, #255	; 0xff
 8010d5c:	e7f9      	b.n	8010d52 <aci_hal_write_config_data+0x52>
 8010d5e:	bf00      	nop
 8010d60:	000c003f 	.word	0x000c003f

08010d64 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8010d64:	b500      	push	{lr}
 8010d66:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  Osal_MemSet(&rq, 0, sizeof(rq));
 8010d68:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 8010d6a:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 8010d6e:	f88d 1005 	strb.w	r1, [sp, #5]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8010d72:	a802      	add	r0, sp, #8
 8010d74:	2100      	movs	r1, #0
 8010d76:	f000 f81d 	bl	8010db4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8010d7a:	4b0c      	ldr	r3, [pc, #48]	; (8010dac <aci_hal_set_tx_power_level+0x48>)
 8010d7c:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
  rq.cparam = &cp;
 8010d7e:	ab01      	add	r3, sp, #4
 8010d80:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8010d82:	2302      	movs	r3, #2
 8010d84:	f8ad 3014 	strh.w	r3, [sp, #20]
  rq.rparam = &status;
 8010d88:	f10d 0303 	add.w	r3, sp, #3
 8010d8c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8010d8e:	2100      	movs	r1, #0
  rq.rlen = 1;
 8010d90:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8010d92:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8010d94:	f8ad 301c 	strh.w	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8010d98:	f001 f9f8 	bl	801218c <hci_send_req>
 8010d9c:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8010d9e:	bfac      	ite	ge
 8010da0:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8010da4:	20ff      	movlt	r0, #255	; 0xff
}
 8010da6:	b009      	add	sp, #36	; 0x24
 8010da8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dac:	000f003f 	.word	0x000f003f

08010db0 <Osal_MemCpy>:
 *               buffer
 * @retval Pointer to the destination buffer
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
    return(memcpy(dest,src,size)); 
 8010db0:	f004 ba2c 	b.w	801520c <memcpy>

08010db4 <Osal_MemSet>:
 * @param  size : Number of bytes to be set to "value"
 * @retval Pointer to the filled block of memory
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
    return(memset(ptr,value,size));
 8010db4:	f004 ba38 	b.w	8015228 <memset>

08010db8 <LBS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void LBS_STM_Init(void)
{
 8010db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t uuid;
  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 8010dbc:	4869      	ldr	r0, [pc, #420]	; (8010f64 <LBS_STM_Init+0x1ac>)

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  	  uuid = testingtest_SVC_UUID;
      aci_gatt_add_serv(UUID_TYPE_16,
 8010dbe:	4d6a      	ldr	r5, [pc, #424]	; (8010f68 <LBS_STM_Init+0x1b0>)
{
 8010dc0:	b088      	sub	sp, #32
  SVCCTL_RegisterSvcHandler(LedButton_Event_Handler);
 8010dc2:	f000 f98f 	bl	80110e4 <SVCCTL_RegisterSvcHandler>
      aci_gatt_add_serv(UUID_TYPE_16,
 8010dc6:	2201      	movs	r2, #1
  	  uuid = testingtest_SVC_UUID;
 8010dc8:	f641 2331 	movw	r3, #6705	; 0x1a31
 8010dcc:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_serv(UUID_TYPE_16,
 8010dd0:	f10d 011e 	add.w	r1, sp, #30
 8010dd4:	9500      	str	r5, [sp, #0]
 8010dd6:	2314      	movs	r3, #20
 8010dd8:	4610      	mov	r0, r2
 8010dda:	f7ff fea9 	bl	8010b30 <aci_gatt_add_serv>
                        (const uint8_t *) &uuid,
                        PRIMARY_SERVICE,
                        20,
                        &(testingtestContext.testing_Svc_Hdle));

      uuid = testingtest_SSID_UUID;
 8010dde:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8010de2:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8010de6:	462b      	mov	r3, r5
 8010de8:	2401      	movs	r4, #1
 8010dea:	f833 0b02 	ldrh.w	r0, [r3], #2
 8010dee:	9305      	str	r3, [sp, #20]
 8010df0:	270a      	movs	r7, #10
 8010df2:	2600      	movs	r6, #0
 8010df4:	f04f 0806 	mov.w	r8, #6
 8010df8:	231e      	movs	r3, #30
 8010dfa:	eb0d 0203 	add.w	r2, sp, r3
 8010dfe:	4621      	mov	r1, r4
 8010e00:	e9cd 7403 	strd	r7, r4, [sp, #12]
 8010e04:	e9cd 8600 	strd	r8, r6, [sp]
 8010e08:	9402      	str	r4, [sp, #8]
 8010e0a:	f7ff fed3 	bl	8010bb4 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_SSID_Hdle));

      uuid = testingtest_PW_UUID;
 8010e0e:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 8010e12:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8010e16:	462b      	mov	r3, r5
 8010e18:	4621      	mov	r1, r4
 8010e1a:	f833 0b04 	ldrh.w	r0, [r3], #4
 8010e1e:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8010e22:	231e      	movs	r3, #30
 8010e24:	eb0d 0203 	add.w	r2, sp, r3
 8010e28:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8010e2c:	e9cd 8600 	strd	r8, r6, [sp]
 8010e30:	f7ff fec0 	bl	8010bb4 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_PW_Hdle));

      uuid = testingtest_NAME_UUID;
 8010e34:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 8010e38:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8010e3c:	462b      	mov	r3, r5
 8010e3e:	4621      	mov	r1, r4
 8010e40:	f833 0b06 	ldrh.w	r0, [r3], #6
 8010e44:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8010e48:	231e      	movs	r3, #30
 8010e4a:	eb0d 0203 	add.w	r2, sp, r3
 8010e4e:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8010e52:	e9cd 8600 	strd	r8, r6, [sp]
 8010e56:	f7ff fead 	bl	8010bb4 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_NAME_Hdle));

      uuid = testingtest_IP_UUID;
 8010e5a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8010e5e:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8010e62:	462b      	mov	r3, r5
 8010e64:	f10d 021e 	add.w	r2, sp, #30
 8010e68:	f833 0b08 	ldrh.w	r0, [r3], #8
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8010e72:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8010e76:	e9cd 8600 	strd	r8, r6, [sp]
 8010e7a:	2304      	movs	r3, #4
 8010e7c:	f7ff fe9a 	bl	8010bb4 <aci_gatt_add_char>
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_IP_Hdle));

      uuid = testingtest_OP_UUID;
 8010e80:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8010e84:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8010e88:	462b      	mov	r3, r5
 8010e8a:	f10d 021e 	add.w	r2, sp, #30
 8010e8e:	f833 0b0a 	ldrh.w	r0, [r3], #10
 8010e92:	4621      	mov	r1, r4
 8010e94:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8010e98:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8010e9c:	e9cd 8600 	strd	r8, r6, [sp]
 8010ea0:	2303      	movs	r3, #3
 8010ea2:	f7ff fe87 	bl	8010bb4 <aci_gatt_add_char>
                            ATTR_PERMISSION_NONE,
                            GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                            10, /* encryKeySize */
                            1, /* isVariable */
                            &(testingtestContext.testing_OP_Hdle));
      uuid = testingtest_Save_UUID;
 8010ea6:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8010eaa:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8010eae:	462b      	mov	r3, r5
 8010eb0:	f10d 021e 	add.w	r2, sp, #30
 8010eb4:	f833 0b0c 	ldrh.w	r0, [r3], #12
 8010eb8:	4621      	mov	r1, r4
 8010eba:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8010ebe:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8010ec2:	4623      	mov	r3, r4
 8010ec4:	e9cd 8600 	strd	r8, r6, [sp]
 8010ec8:	f7ff fe74 	bl	8010bb4 <aci_gatt_add_char>
								  GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
                                  10, /* encryKeySize */
                                  1, /* isVariable */
                                  &(testingtestContext.testing_Save_Hdle));

      uuid = testinttest_Adc_UUID;
 8010ecc:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8010ed0:	f8ad 301e 	strh.w	r3, [sp, #30]
      aci_gatt_add_char(testingtestContext.testing_Svc_Hdle,
 8010ed4:	462b      	mov	r3, r5
 8010ed6:	f10d 021e 	add.w	r2, sp, #30
 8010eda:	f833 0b0e 	ldrh.w	r0, [r3], #14
 8010ede:	9601      	str	r6, [sp, #4]
 8010ee0:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8010ee4:	2314      	movs	r3, #20
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	4621      	mov	r1, r4
 8010eea:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8010eee:	2305      	movs	r3, #5
 8010ef0:	f7ff fe60 	bl	8010bb4 <aci_gatt_add_char>
      //aci_gatt_write_charac_value(conn_handle, attr_handle, value_len, attr_value)

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    uuid = LED_BUTTON_SERVICE_UUID;
 8010ef4:	f641 2330 	movw	r3, #6704	; 0x1a30
 8010ef8:	f8ad 301e 	strh.w	r3, [sp, #30]
    aci_gatt_add_serv(UUID_TYPE_16,
 8010efc:	f105 0310 	add.w	r3, r5, #16
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	4622      	mov	r2, r4
 8010f04:	4643      	mov	r3, r8
 8010f06:	f10d 011e 	add.w	r1, sp, #30
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f7ff fe10 	bl	8010b30 <aci_gatt_add_serv>
                      &(aLedButtonContext.LedButtonSvcHdle));

    /**
     *  Add LED Characteristic
     */
    uuid = LED_CHAR_UUID;
 8010f10:	f642 3350 	movw	r3, #11088	; 0x2b50
 8010f14:	f8ad 301e 	strh.w	r3, [sp, #30]
   
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 8010f18:	f105 0312 	add.w	r3, r5, #18
 8010f1c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8010f20:	f10d 021e 	add.w	r2, sp, #30
 8010f24:	4621      	mov	r1, r4
 8010f26:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8010f2a:	e9cd 8600 	strd	r8, r6, [sp]
 8010f2e:	8a28      	ldrh	r0, [r5, #16]
 8010f30:	2302      	movs	r3, #2
 8010f32:	f7ff fe3f 	bl	8010bb4 <aci_gatt_add_char>
                      &(aLedButtonContext.LedsCharHdle));

    /**
     *   Add Button Characteristic
     */
    uuid = BUTTON_CHAR_UUID;
 8010f36:	f642 3351 	movw	r3, #11089	; 0x2b51
 8010f3a:	f8ad 301e 	strh.w	r3, [sp, #30]
    aci_gatt_add_char(aLedButtonContext.LedButtonSvcHdle,
 8010f3e:	f105 0314 	add.w	r3, r5, #20
 8010f42:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8010f46:	2310      	movs	r3, #16
 8010f48:	9300      	str	r3, [sp, #0]
 8010f4a:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8010f4e:	8a28      	ldrh	r0, [r5, #16]
 8010f50:	9601      	str	r6, [sp, #4]
 8010f52:	2302      	movs	r3, #2
 8010f54:	f10d 021e 	add.w	r2, sp, #30
 8010f58:	4621      	mov	r1, r4
 8010f5a:	f7ff fe2b 	bl	8010bb4 <aci_gatt_add_char>
    
    APPL_MESG_DBG("-- Led Button Service (LBS) is added Successfully %04X\n", 
                 aLedButtonContext.LedButtonSvcHdle);

  return;
}
 8010f5e:	b008      	add	sp, #32
 8010f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f64:	08010f95 	.word	0x08010f95
 8010f68:	200000c4 	.word	0x200000c4

08010f6c <BLE_SVC_LedButton_Update_Char>:
 * 
 */
tBleStatus BLE_SVC_LedButton_Update_Char(uint16_t UUID, uint8_t *pPayload) //LED_BUTTON_Data_t *pDataValue)
{
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 8010f6c:	f642 3351 	movw	r3, #11089	; 0x2b51
 8010f70:	4298      	cmp	r0, r3
{
 8010f72:	b507      	push	{r0, r1, r2, lr}
  switch(UUID)
 8010f74:	d10a      	bne.n	8010f8c <BLE_SVC_LedButton_Update_Char+0x20>
  {
    case BUTTON_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aLedButtonContext.LedButtonSvcHdle,
 8010f76:	4806      	ldr	r0, [pc, #24]	; (8010f90 <BLE_SVC_LedButton_Update_Char+0x24>)
 8010f78:	9100      	str	r1, [sp, #0]
 8010f7a:	8a81      	ldrh	r1, [r0, #20]
 8010f7c:	8a00      	ldrh	r0, [r0, #16]
 8010f7e:	2302      	movs	r3, #2
 8010f80:	2200      	movs	r2, #0
 8010f82:	f7ff fe7d 	bl	8010c80 <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}/* end LBS_STM_Init() */
 8010f86:	b003      	add	sp, #12
 8010f88:	f85d fb04 	ldr.w	pc, [sp], #4
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8010f8c:	2042      	movs	r0, #66	; 0x42
 8010f8e:	e7fa      	b.n	8010f86 <BLE_SVC_LedButton_Update_Char+0x1a>
 8010f90:	200000c4 	.word	0x200000c4

08010f94 <LedButton_Event_Handler>:
{
 8010f94:	b530      	push	{r4, r5, lr}
  adc_val = 0;
 8010f96:	4d4c      	ldr	r5, [pc, #304]	; (80110c8 <LedButton_Event_Handler+0x134>)
 8010f98:	2300      	movs	r3, #0
 8010f9a:	61ab      	str	r3, [r5, #24]
  switch(event_pckt->evt)
 8010f9c:	7843      	ldrb	r3, [r0, #1]
 8010f9e:	2bff      	cmp	r3, #255	; 0xff
{
 8010fa0:	b087      	sub	sp, #28
 8010fa2:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 8010fa4:	f040 808c 	bne.w	80110c0 <LedButton_Event_Handler+0x12c>
      switch(blue_evt->ecode)
 8010fa8:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8010fac:	f640 4301 	movw	r3, #3073	; 0xc01
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	f040 8085 	bne.w	80110c0 <LedButton_Event_Handler+0x12c>
            if(attribute_modified->attr_handle == (testingtestContext.testing_SSID_Hdle + 1))
 8010fb6:	886b      	ldrh	r3, [r5, #2]
 8010fb8:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d10b      	bne.n	8010fda <LedButton_Event_Handler+0x46>
                          Notification.LBS_Evt_Opcode = POTATO_SSID_EVT;
 8010fc2:	2304      	movs	r3, #4
 8010fc4:	f88d 3008 	strb.w	r3, [sp, #8]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 8010fc8:	7a43      	ldrb	r3, [r0, #9]
 8010fca:	f88d 3010 	strb.w	r3, [sp, #16]
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8010fce:	f100 030c 	add.w	r3, r0, #12
                          LBS_App_Notification(&Notification);
 8010fd2:	a802      	add	r0, sp, #8
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8010fd4:	9303      	str	r3, [sp, #12]
                          LBS_App_Notification(&Notification);
 8010fd6:	f001 fce5 	bl	80129a4 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_PW_Hdle + 1))
 8010fda:	88ab      	ldrh	r3, [r5, #4]
 8010fdc:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d10b      	bne.n	8010ffe <LedButton_Event_Handler+0x6a>
                          Notification.LBS_Evt_Opcode = POTATO_PW_EVT;
 8010fe6:	2305      	movs	r3, #5
 8010fe8:	f88d 3008 	strb.w	r3, [sp, #8]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 8010fec:	7a63      	ldrb	r3, [r4, #9]
 8010fee:	f88d 3010 	strb.w	r3, [sp, #16]
                          LBS_App_Notification(&Notification);
 8010ff2:	a802      	add	r0, sp, #8
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8010ff4:	f104 030c 	add.w	r3, r4, #12
 8010ff8:	9303      	str	r3, [sp, #12]
                          LBS_App_Notification(&Notification);
 8010ffa:	f001 fcd3 	bl	80129a4 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_NAME_Hdle + 1))
 8010ffe:	88eb      	ldrh	r3, [r5, #6]
 8011000:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8011004:	3301      	adds	r3, #1
 8011006:	429a      	cmp	r2, r3
 8011008:	d10b      	bne.n	8011022 <LedButton_Event_Handler+0x8e>
                          Notification.LBS_Evt_Opcode = POTATO_NAME_EVT;
 801100a:	2306      	movs	r3, #6
 801100c:	f88d 3008 	strb.w	r3, [sp, #8]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 8011010:	7a63      	ldrb	r3, [r4, #9]
 8011012:	f88d 3010 	strb.w	r3, [sp, #16]
                          LBS_App_Notification(&Notification);
 8011016:	a802      	add	r0, sp, #8
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8011018:	f104 030c 	add.w	r3, r4, #12
 801101c:	9303      	str	r3, [sp, #12]
                          LBS_App_Notification(&Notification);
 801101e:	f001 fcc1 	bl	80129a4 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_IP_Hdle + 1))
 8011022:	892b      	ldrh	r3, [r5, #8]
 8011024:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8011028:	3301      	adds	r3, #1
 801102a:	429a      	cmp	r2, r3
 801102c:	d10b      	bne.n	8011046 <LedButton_Event_Handler+0xb2>
                          Notification.LBS_Evt_Opcode = POTATO_IP_EVT;
 801102e:	2307      	movs	r3, #7
 8011030:	f88d 3008 	strb.w	r3, [sp, #8]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 8011034:	7a63      	ldrb	r3, [r4, #9]
 8011036:	f88d 3010 	strb.w	r3, [sp, #16]
                          LBS_App_Notification(&Notification);
 801103a:	a802      	add	r0, sp, #8
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 801103c:	f104 030c 	add.w	r3, r4, #12
 8011040:	9303      	str	r3, [sp, #12]
                          LBS_App_Notification(&Notification);
 8011042:	f001 fcaf 	bl	80129a4 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_OP_Hdle + 1))
 8011046:	896b      	ldrh	r3, [r5, #10]
 8011048:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 801104c:	3301      	adds	r3, #1
 801104e:	429a      	cmp	r2, r3
 8011050:	d10b      	bne.n	801106a <LedButton_Event_Handler+0xd6>
                          Notification.LBS_Evt_Opcode = POTATO_OP_EVT;
 8011052:	2308      	movs	r3, #8
 8011054:	f88d 3008 	strb.w	r3, [sp, #8]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 8011058:	7a63      	ldrb	r3, [r4, #9]
 801105a:	f88d 3010 	strb.w	r3, [sp, #16]
                          LBS_App_Notification(&Notification);
 801105e:	a802      	add	r0, sp, #8
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8011060:	f104 030c 	add.w	r3, r4, #12
 8011064:	9303      	str	r3, [sp, #12]
                          LBS_App_Notification(&Notification);
 8011066:	f001 fc9d 	bl	80129a4 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_Save_Hdle + 1))
 801106a:	89ab      	ldrh	r3, [r5, #12]
 801106c:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8011070:	3301      	adds	r3, #1
 8011072:	429a      	cmp	r2, r3
 8011074:	d10b      	bne.n	801108e <LedButton_Event_Handler+0xfa>
                          Notification.LBS_Evt_Opcode = POTATO_SAVE_EVT;
 8011076:	2309      	movs	r3, #9
 8011078:	f88d 3008 	strb.w	r3, [sp, #8]
                          Notification.DataTransfered.Length=attribute_modified->data_length;
 801107c:	7a63      	ldrb	r3, [r4, #9]
 801107e:	f88d 3010 	strb.w	r3, [sp, #16]
                          LBS_App_Notification(&Notification);
 8011082:	a802      	add	r0, sp, #8
                          Notification.DataTransfered.pPayload=attribute_modified->att_data;
 8011084:	f104 030c 	add.w	r3, r4, #12
 8011088:	9303      	str	r3, [sp, #12]
                          LBS_App_Notification(&Notification);
 801108a:	f001 fc8b 	bl	80129a4 <LBS_App_Notification>
            if(attribute_modified->attr_handle == (testingtestContext.testing_Adc_Hdle + 1))
 801108e:	89eb      	ldrh	r3, [r5, #14]
 8011090:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8011094:	3301      	adds	r3, #1
 8011096:	429a      	cmp	r2, r3
 8011098:	d112      	bne.n	80110c0 <LedButton_Event_Handler+0x12c>
            			  adc_val = Potato_Readadc();
 801109a:	f001 fb49 	bl	8012730 <Potato_Readadc>
            			  sprintf(adc_buffer,"%ld",adc_val);
 801109e:	4c0b      	ldr	r4, [pc, #44]	; (80110cc <LedButton_Event_Handler+0x138>)
 80110a0:	490b      	ldr	r1, [pc, #44]	; (80110d0 <LedButton_Event_Handler+0x13c>)
            			  adc_val = Potato_Readadc();
 80110a2:	61a8      	str	r0, [r5, #24]
 80110a4:	4602      	mov	r2, r0
            			  sprintf(adc_buffer,"%ld",adc_val);
 80110a6:	4620      	mov	r0, r4
 80110a8:	f004 f8c6 	bl	8015238 <siprintf>
            			  aci_gatt_update_char_value(testingtestContext.testing_Svc_Hdle, testingtestContext.testing_Adc_Hdle, 0, strlen(adc_buffer), adc_buffer);
 80110ac:	4620      	mov	r0, r4
 80110ae:	f7ff f88f 	bl	80101d0 <strlen>
 80110b2:	89e9      	ldrh	r1, [r5, #14]
 80110b4:	9400      	str	r4, [sp, #0]
 80110b6:	b2c3      	uxtb	r3, r0
 80110b8:	2200      	movs	r2, #0
 80110ba:	8828      	ldrh	r0, [r5, #0]
 80110bc:	f7ff fde0 	bl	8010c80 <aci_gatt_update_char_value>
}/* end SVCCTL_EvtAckStatus_t */
 80110c0:	2000      	movs	r0, #0
 80110c2:	b007      	add	sp, #28
 80110c4:	bd30      	pop	{r4, r5, pc}
 80110c6:	bf00      	nop
 80110c8:	200000c4 	.word	0x200000c4
 80110cc:	200000e0 	.word	0x200000e0
 80110d0:	08015b20 	.word	0x08015b20

080110d4 <DIS_Init>:
/* Fake __Weak functions ------------------------------------------------------*/
/* This is a dirty trick to avoid putting compilation flags to say which service are included */	
/* If the related service is added in the project space its Init function will be used */
/* Otherwise the dummy __Weak function allow to avoid the compilatio error */

__weak void DIS_Init(uint16_t *p_options) {}
 80110d4:	4770      	bx	lr

080110d6 <HRS_Init>:
__weak void HRS_Init(void) {}
 80110d6:	4770      	bx	lr

080110d8 <ANS_Init>:
 80110d8:	4770      	bx	lr

080110da <HIDS_Init>:
 80110da:	4770      	bx	lr

080110dc <HPS_Init>:
 80110dc:	4770      	bx	lr

080110de <IPSS_Init>:
 80110de:	4770      	bx	lr

080110e0 <LNS_Init>:
 80110e0:	4770      	bx	lr

080110e2 <SCPS_Init>:
 80110e2:	4770      	bx	lr

080110e4 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler(SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler)
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80110e4:	4a03      	ldr	r2, [pc, #12]	; (80110f4 <SVCCTL_RegisterSvcHandler+0x10>)
 80110e6:	7a13      	ldrb	r3, [r2, #8]
 80110e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80110ec:	3301      	adds	r3, #1
 80110ee:	7213      	strb	r3, [r2, #8]

  return;
}
 80110f0:	4770      	bx	lr
 80110f2:	bf00      	nop
 80110f4:	20000b7c 	.word	0x20000b7c

080110f8 <SVCCTL_HCI_UserEvtRx>:

  return;
}

void SVCCTL_HCI_UserEvtRx(void *pckt)
{
 80110f8:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch(event_pckt->evt)
 80110fa:	7843      	ldrb	r3, [r0, #1]
 80110fc:	2bff      	cmp	r3, #255	; 0xff
{
 80110fe:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 8011100:	d004      	beq.n	801110c <SVCCTL_HCI_UserEvtRx+0x14>
  {
    /**
     *  The event has NOT been managed.
     *  It shall be passed to the application for processing
     */
    SVCCTL_App_Notification(pckt);
 8011102:	4620      	mov	r0, r4

  }

  return;
}
 8011104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SVCCTL_App_Notification(pckt);
 8011108:	f001 bbdc 	b.w	80128c4 <SVCCTL_App_Notification>
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 801110c:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8011110:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011114:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011118:	d1f3      	bne.n	8011102 <SVCCTL_HCI_UserEvtRx+0xa>
          for(index = 0; index <SVCCTL_EvtHandler.NbreOfRegisteredHandler ; index++)
 801111a:	4e0d      	ldr	r6, [pc, #52]	; (8011150 <SVCCTL_HCI_UserEvtRx+0x58>)
 801111c:	2500      	movs	r5, #0
 801111e:	7a32      	ldrb	r2, [r6, #8]
 8011120:	b2eb      	uxtb	r3, r5
 8011122:	429a      	cmp	r2, r3
 8011124:	d906      	bls.n	8011134 <SVCCTL_HCI_UserEvtRx+0x3c>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8011126:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801112a:	4620      	mov	r0, r4
 801112c:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 801112e:	3501      	adds	r5, #1
 8011130:	2800      	cmp	r0, #0
 8011132:	d0f4      	beq.n	801111e <SVCCTL_HCI_UserEvtRx+0x26>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler ; index++)
 8011134:	4e07      	ldr	r6, [pc, #28]	; (8011154 <SVCCTL_HCI_UserEvtRx+0x5c>)
 8011136:	2500      	movs	r5, #0
 8011138:	7a32      	ldrb	r2, [r6, #8]
 801113a:	b2eb      	uxtb	r3, r5
 801113c:	429a      	cmp	r2, r3
 801113e:	d9e0      	bls.n	8011102 <SVCCTL_HCI_UserEvtRx+0xa>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8011140:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8011144:	4620      	mov	r0, r4
 8011146:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 8011148:	3501      	adds	r5, #1
 801114a:	2800      	cmp	r0, #0
 801114c:	d0f4      	beq.n	8011138 <SVCCTL_HCI_UserEvtRx+0x40>
}
 801114e:	bd70      	pop	{r4, r5, r6, pc}
 8011150:	20000b7c 	.word	0x20000b7c
 8011154:	20000b70 	.word	0x20000b70

08011158 <SVCCTL_GetBdAddress>:
           instead of using the harcoded value in the config.h
  */
__weak const uint8_t* SVCCTL_GetBdAddress( void )
{
  return M_bd_addr;
}
 8011158:	4800      	ldr	r0, [pc, #0]	; (801115c <SVCCTL_GetBdAddress+0x4>)
 801115a:	4770      	bx	lr
 801115c:	08015ab0 	.word	0x08015ab0

08011160 <SVCCTL_Init>:
{
 8011160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const uint8_t mode = BLE_CFG_DATA_ROLE_MODE;
 8011162:	2304      	movs	r3, #4
 8011164:	f88d 3009 	strb.w	r3, [sp, #9]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8011168:	4b1f      	ldr	r3, [pc, #124]	; (80111e8 <SVCCTL_Init+0x88>)
 801116a:	2400      	movs	r4, #0
 801116c:	721c      	strb	r4, [r3, #8]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801116e:	4b1f      	ldr	r3, [pc, #124]	; (80111ec <SVCCTL_Init+0x8c>)
 8011170:	721c      	strb	r4, [r3, #8]
  bd_addr = SVCCTL_GetBdAddress();
 8011172:	f7ff fff1 	bl	8011158 <SVCCTL_GetBdAddress>
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8011176:	2106      	movs	r1, #6
  bd_addr = SVCCTL_GetBdAddress();
 8011178:	4602      	mov	r2, r0
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 801117a:	4620      	mov	r0, r4
 801117c:	f7ff fdc0 	bl	8010d00 <aci_hal_write_config_data>
  aci_hal_write_config_data(CONFIG_DATA_MODE_OFFSET,
 8011180:	f10d 0209 	add.w	r2, sp, #9
 8011184:	2101      	movs	r1, #1
 8011186:	202d      	movs	r0, #45	; 0x2d
 8011188:	f7ff fdba 	bl	8010d00 <aci_hal_write_config_data>
  aci_gatt_init();
 801118c:	f7ff fcb2 	bl	8010af4 <aci_gatt_init>
    aci_gap_init(role,
 8011190:	f10d 030e 	add.w	r3, sp, #14
 8011194:	9301      	str	r3, [sp, #4]
 8011196:	ab03      	add	r3, sp, #12
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	4621      	mov	r1, r4
 801119c:	f10d 030a 	add.w	r3, sp, #10
 80111a0:	2207      	movs	r2, #7
 80111a2:	2001      	movs	r0, #1
 80111a4:	f7ff fb7a 	bl	801089c <aci_gap_init>
    if(aci_gatt_update_char_value(gap_service_handle,
 80111a8:	4b11      	ldr	r3, [pc, #68]	; (80111f0 <SVCCTL_Init+0x90>)
 80111aa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80111ae:	9300      	str	r3, [sp, #0]
 80111b0:	4622      	mov	r2, r4
 80111b2:	2307      	movs	r3, #7
 80111b4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80111b8:	f7ff fd62 	bl	8010c80 <aci_gatt_update_char_value>
  HRS_Init();
 80111bc:	f7ff ff8b 	bl	80110d6 <HRS_Init>
  DIS_Init(NULL);
 80111c0:	4620      	mov	r0, r4
 80111c2:	f7ff ff87 	bl	80110d4 <DIS_Init>
  SCPS_Init();
 80111c6:	f7ff ff8c 	bl	80110e2 <SCPS_Init>
  ANS_Init();
 80111ca:	f7ff ff85 	bl	80110d8 <ANS_Init>
HIDS_Init();
 80111ce:	f7ff ff84 	bl	80110da <HIDS_Init>
LNS_Init();
 80111d2:	f7ff ff85 	bl	80110e0 <LNS_Init>
IPSS_Init();
 80111d6:	f7ff ff82 	bl	80110de <IPSS_Init>
HPS_Init();
 80111da:	f7ff ff7f 	bl	80110dc <HPS_Init>
BLESVC_InitCustomSvc();
 80111de:	f001 fba0 	bl	8012922 <BLESVC_InitCustomSvc>
}
 80111e2:	b004      	add	sp, #16
 80111e4:	bd10      	pop	{r4, pc}
 80111e6:	bf00      	nop
 80111e8:	20000b7c 	.word	0x20000b7c
 80111ec:	20000b70 	.word	0x20000b70
 80111f0:	08015b24 	.word	0x08015b24

080111f4 <HW_SleepMode>:
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80111f4:	4a03      	ldr	r2, [pc, #12]	; (8011204 <HW_SleepMode+0x10>)
 80111f6:	6913      	ldr	r3, [r2, #16]
 80111f8:	f023 0304 	bic.w	r3, r3, #4
 80111fc:	6113      	str	r3, [r2, #16]
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 80111fe:	bf30      	wfi

  return;
}
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop
 8011204:	e000ed00 	.word	0xe000ed00

08011208 <HW_StopMode>:
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8011208:	4a06      	ldr	r2, [pc, #24]	; (8011224 <HW_StopMode+0x1c>)
 801120a:	6813      	ldr	r3, [r2, #0]
 801120c:	f023 0307 	bic.w	r3, r3, #7
 8011210:	4318      	orrs	r0, r3
 8011212:	6010      	str	r0, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011214:	4a04      	ldr	r2, [pc, #16]	; (8011228 <HW_StopMode+0x20>)
 8011216:	6913      	ldr	r3, [r2, #16]
 8011218:	f043 0304 	orr.w	r3, r3, #4
 801121c:	6113      	str	r3, [r2, #16]
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI();
 801121e:	bf30      	wfi

  return;
}
 8011220:	4770      	bx	lr
 8011222:	bf00      	nop
 8011224:	40007000 	.word	0x40007000
 8011228:	e000ed00 	.word	0xe000ed00

0801122c <HW_OffMode>:
 801122c:	f7ff bfec 	b.w	8011208 <HW_StopMode>

08011230 <pf_nRFResetTimerCallBack>:
 * @param  None
 * @retval None
 */
static void pf_nRFResetTimerCallBack(void)
{
  RfResetTimerLock = 0;
 8011230:	4b01      	ldr	r3, [pc, #4]	; (8011238 <pf_nRFResetTimerCallBack+0x8>)
 8011232:	2200      	movs	r2, #0
 8011234:	701a      	strb	r2, [r3, #0]

  return;
}
 8011236:	4770      	bx	lr
 8011238:	200000e8 	.word	0x200000e8

0801123c <TimerTxRxCallback>:
 * @param  None
 * @retval None
 */
static void TimerTxRxCallback(void)
{
  pTimerTxRxCallback();
 801123c:	4b01      	ldr	r3, [pc, #4]	; (8011244 <TimerTxRxCallback+0x8>)
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	4718      	bx	r3
 8011242:	bf00      	nop
 8011244:	200000e8 	.word	0x200000e8

08011248 <Enable_SPI_CS>:
 * @retval None
 */
static void Enable_SPI_CS(void)
{
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8011248:	4802      	ldr	r0, [pc, #8]	; (8011254 <Enable_SPI_CS+0xc>)
 801124a:	2200      	movs	r2, #0
 801124c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011250:	f003 bab8 	b.w	80147c4 <HAL_GPIO_WritePin>
 8011254:	48000c00 	.word	0x48000c00

08011258 <Disable_SPI_CS>:
 * @param  None
 * @retval None
 */
static void Disable_SPI_CS(void)
{
  while (__HAL_SPI_GET_FLAG(&SpiHandle,SPI_FLAG_BSY) == SET);
 8011258:	4b05      	ldr	r3, [pc, #20]	; (8011270 <Disable_SPI_CS+0x18>)
 801125a:	689a      	ldr	r2, [r3, #8]
 801125c:	6893      	ldr	r3, [r2, #8]
 801125e:	061b      	lsls	r3, r3, #24
 8011260:	d4fc      	bmi.n	801125c <Disable_SPI_CS+0x4>

  /* CS set */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8011262:	4804      	ldr	r0, [pc, #16]	; (8011274 <Disable_SPI_CS+0x1c>)
 8011264:	2201      	movs	r2, #1
 8011266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801126a:	f003 baab 	b.w	80147c4 <HAL_GPIO_WritePin>
 801126e:	bf00      	nop
 8011270:	200000e8 	.word	0x200000e8
 8011274:	48000c00 	.word	0x48000c00

08011278 <DisableEnable_SPI_CS>:
 * @brief  Disable and Enable SPI CS.
 * @param  None
 * @retval None
 */
static void DisableEnable_SPI_CS(void)
{
 8011278:	b508      	push	{r3, lr}
  uint8_t localloop;
  Disable_SPI_CS(); /**< CS Set */
 801127a:	f7ff ffed 	bl	8011258 <Disable_SPI_CS>
 801127e:	230d      	movs	r3, #13

  /* CS set */
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
  {
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 8011280:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8011284:	3b01      	subs	r3, #1
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 8011286:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    *(volatile uint32_t*)DUMMY_RAM_ADDRESS_TO_READ;
 801128a:	6811      	ldr	r1, [r2, #0]
  for (localloop = 0 ; localloop < CS_PULSE_LENGTH ; localloop++)
 801128c:	d1fa      	bne.n	8011284 <DisableEnable_SPI_CS+0xc>
  }

  Enable_SPI_CS(); /**< CS Reset */

  return;
}
 801128e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Enable_SPI_CS(); /**< CS Reset */
 8011292:	f7ff bfd9 	b.w	8011248 <Enable_SPI_CS>
	...

08011298 <Enable_SPI_Receiving_Path>:
{  
 8011298:	b538      	push	{r3, r4, r5, lr}
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 801129a:	4c09      	ldr	r4, [pc, #36]	; (80112c0 <Enable_SPI_Receiving_Path+0x28>)
 801129c:	2540      	movs	r5, #64	; 0x40
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 801129e:	2017      	movs	r0, #23
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);
 80112a0:	6165      	str	r5, [r4, #20]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
 80112a2:	f002 ffaf 	bl	8014204 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
 80112a6:	2017      	movs	r0, #23
 80112a8:	f002 ff7a 	bl	80141a0 <HAL_NVIC_EnableIRQ>
  if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_SET)
 80112ac:	4805      	ldr	r0, [pc, #20]	; (80112c4 <Enable_SPI_Receiving_Path+0x2c>)
 80112ae:	4629      	mov	r1, r5
 80112b0:	f003 fa82 	bl	80147b8 <HAL_GPIO_ReadPin>
 80112b4:	2801      	cmp	r0, #1
    __HAL_GPIO_EXTI_GENERATE_SWIT(BNRG_SPI_IRQ_PIN);
 80112b6:	bf02      	ittt	eq
 80112b8:	6923      	ldreq	r3, [r4, #16]
 80112ba:	432b      	orreq	r3, r5
 80112bc:	6123      	streq	r3, [r4, #16]
}
 80112be:	bd38      	pop	{r3, r4, r5, pc}
 80112c0:	40010400 	.word	0x40010400
 80112c4:	48001000 	.word	0x48001000

080112c8 <LL_DMA_SetDataLength.constprop.0>:
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80112c8:	4b05      	ldr	r3, [pc, #20]	; (80112e0 <LL_DMA_SetDataLength.constprop.0+0x18>)
 80112ca:	5c1a      	ldrb	r2, [r3, r0]
 80112cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80112d0:	f502 3201 	add.w	r2, r2, #132096	; 0x20400
 80112d4:	6853      	ldr	r3, [r2, #4]
 80112d6:	0c1b      	lsrs	r3, r3, #16
 80112d8:	041b      	lsls	r3, r3, #16
 80112da:	4319      	orrs	r1, r3
 80112dc:	6051      	str	r1, [r2, #4]
             DMA_CNDTR_NDT, NbData);
}
 80112de:	4770      	bx	lr
 80112e0:	08015ab6 	.word	0x08015ab6

080112e4 <ReceiveHeader>:
 *               the configuration information for SPI module.
 * @param  DataHeader: buffer holding the header to receive
 * @retval None
 */
static void ReceiveHeader(SPI_RECEIVE_EVENT_t ReceiveEvent, uint8_t * DataHeader)
{
 80112e4:	b570      	push	{r4, r5, r6, lr}
  SpiContext.SpiReceiveContext.SpiReceiveEvent = ReceiveEvent;
 80112e6:	4c0b      	ldr	r4, [pc, #44]	; (8011314 <ReceiveHeader+0x30>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80112e8:	4d0b      	ldr	r5, [pc, #44]	; (8011318 <ReceiveHeader+0x34>)
 80112ea:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
 80112ee:	682b      	ldr	r3, [r5, #0]
 80112f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112f4:	602b      	str	r3, [r5, #0]
{
 80112f6:	460e      	mov	r6, r1
  LL_DMA_SetMemoryIncMode(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, LL_DMA_MEMORY_INCREMENT);  /**< Configure DMA to send Tx packet */

  /*
   *  Set counter in both DMA
   */
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, HEADER_SIZE);
 80112f8:	2001      	movs	r0, #1
 80112fa:	2105      	movs	r1, #5
 80112fc:	f7ff ffe4 	bl	80112c8 <LL_DMA_SetDataLength.constprop.0>
  LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, HEADER_SIZE);
 8011300:	2105      	movs	r1, #5
 8011302:	2000      	movs	r0, #0
 8011304:	f7ff ffe0 	bl	80112c8 <LL_DMA_SetDataLength.constprop.0>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8011308:	4b04      	ldr	r3, [pc, #16]	; (801131c <ReceiveHeader+0x38>)

  /*
   *  Set memory address in both DMA
   */
  LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)ReceivedHeader);
 801130a:	348c      	adds	r4, #140	; 0x8c
 801130c:	60dc      	str	r4, [r3, #12]
 801130e:	60ee      	str	r6, [r5, #12]
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)DataHeader);

  return;
}
 8011310:	bd70      	pop	{r4, r5, r6, pc}
 8011312:	bf00      	nop
 8011314:	200000e8 	.word	0x200000e8
 8011318:	4002041c 	.word	0x4002041c
 801131c:	40020408 	.word	0x40020408

08011320 <SPI_Receive_Manager>:
{
 8011320:	b570      	push	{r4, r5, r6, lr}
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8011322:	4c36      	ldr	r4, [pc, #216]	; (80113fc <SPI_Receive_Manager+0xdc>)
 8011324:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011326:	6812      	ldr	r2, [r2, #0]
 8011328:	6811      	ldr	r1, [r2, #0]
 801132a:	f021 0101 	bic.w	r1, r1, #1
 801132e:	6011      	str	r1, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8011330:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8011332:	6809      	ldr	r1, [r1, #0]
 8011334:	680d      	ldr	r5, [r1, #0]
 8011336:	f025 0501 	bic.w	r5, r5, #1
 801133a:	600d      	str	r5, [r1, #0]
    *(volatile uint8_t*)LL_SPI_DMA_GetRegAddr(BNRG_SPI_INSTANCE);
 801133c:	4d30      	ldr	r5, [pc, #192]	; (8011400 <SPI_Receive_Manager+0xe0>)
 801133e:	7b2e      	ldrb	r6, [r5, #12]
 8011340:	7b2e      	ldrb	r6, [r5, #12]
 8011342:	7b2e      	ldrb	r6, [r5, #12]
 8011344:	7b2d      	ldrb	r5, [r5, #12]
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmarx, DMA_IT_TC);  /**< Enable Receive packet notification */
 8011346:	680d      	ldr	r5, [r1, #0]
 8011348:	f045 0502 	orr.w	r5, r5, #2
 801134c:	600d      	str	r5, [r1, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 801134e:	6811      	ldr	r1, [r2, #0]
  switch (ReceiveRequest)
 8011350:	2801      	cmp	r0, #1
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmatx, DMA_IT_TC); /**< Disable Transmit packet notification */
 8011352:	f021 0102 	bic.w	r1, r1, #2
 8011356:	6011      	str	r1, [r2, #0]
  switch (ReceiveRequest)
 8011358:	d012      	beq.n	8011380 <SPI_Receive_Manager+0x60>
 801135a:	2802      	cmp	r0, #2
 801135c:	d012      	beq.n	8011384 <SPI_Receive_Manager+0x64>
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_RX, (uint8_t *)ReadHeaderCmd);
 801135e:	4929      	ldr	r1, [pc, #164]	; (8011404 <SPI_Receive_Manager+0xe4>)
 8011360:	2000      	movs	r0, #0
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 8011362:	f7ff ffbf 	bl	80112e4 <ReceiveHeader>
  __HAL_DMA_ENABLE(SpiHandle.hdmarx);
 8011366:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	6813      	ldr	r3, [r2, #0]
 801136c:	f043 0301 	orr.w	r3, r3, #1
 8011370:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx);
 8011372:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011374:	681a      	ldr	r2, [r3, #0]
 8011376:	6813      	ldr	r3, [r2, #0]
 8011378:	f043 0301 	orr.w	r3, r3, #1
 801137c:	6013      	str	r3, [r2, #0]
}
 801137e:	bd70      	pop	{r4, r5, r6, pc}
      ReceiveHeader(SPI_CHECK_RECEIVED_HEADER_FOR_TX, (uint8_t *)WriteHeaderCmd);
 8011380:	4921      	ldr	r1, [pc, #132]	; (8011408 <SPI_Receive_Manager+0xe8>)
 8011382:	e7ee      	b.n	8011362 <SPI_Receive_Manager+0x42>
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 8011384:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 8011388:	f8b4 5078 	ldrh.w	r5, [r4, #120]	; 0x78
      if (SpiContext.SpiReceiveContext.PacketCont == TRUE)
 801138c:	2b01      	cmp	r3, #1
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 801138e:	bf1b      	ittet	ne
 8011390:	f894 308f 	ldrbne.w	r3, [r4, #143]	; 0x8f
 8011394:	f894 2090 	ldrbne.w	r2, [r4, #144]	; 0x90
        byte_count = SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive;
 8011398:	f8b4 307a 	ldrheq.w	r3, [r4, #122]	; 0x7a
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 801139c:	ea43 2302 	orrne.w	r3, r3, r2, lsl #8
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive = byte_count;
 80113a0:	bf18      	it	ne
 80113a2:	f8a4 307a 	strhne.w	r3, [r4, #122]	; 0x7a
      if (byte_count > SpiContext.SpiReceiveContext.BufferSize)
 80113a6:	429d      	cmp	r5, r3
 80113a8:	d21f      	bcs.n	80113ea <SPI_Receive_Manager+0xca>
        SpiContext.SpiReceiveContext.PayloadSizeLeftToReceive -= byte_count;
 80113aa:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
 80113ae:	1b5b      	subs	r3, r3, r5
 80113b0:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_PAYLOAD_CONT;
 80113b4:	2302      	movs	r3, #2
 80113b6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        SpiContext.SpiReceiveContext.PacketCont = TRUE;
 80113ba:	2301      	movs	r3, #1
 80113bc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80113c0:	4e12      	ldr	r6, [pc, #72]	; (801140c <SPI_Receive_Manager+0xec>)
      SpiContext.SpiReceiveContext.PayloadLength = byte_count;
 80113c2:	f8a4 5072 	strh.w	r5, [r4, #114]	; 0x72
 80113c6:	6833      	ldr	r3, [r6, #0]
 80113c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113cc:	6033      	str	r3, [r6, #0]
      LL_DMA_SetDataLength(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, byte_count);
 80113ce:	4629      	mov	r1, r5
 80113d0:	2000      	movs	r0, #0
 80113d2:	f7ff ff79 	bl	80112c8 <LL_DMA_SetDataLength.constprop.0>
      LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, byte_count);
 80113d6:	4629      	mov	r1, r5
 80113d8:	2001      	movs	r0, #1
 80113da:	f7ff ff75 	bl	80112c8 <LL_DMA_SetDataLength.constprop.0>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80113de:	4b0c      	ldr	r3, [pc, #48]	; (8011410 <SPI_Receive_Manager+0xf0>)
      LL_DMA_SetMemoryAddress(BNRG_SPI_RX_DMA_ID, BNRG_SPI_RX_DMA_CHANNEL, (uint32_t)SpiContext.SpiReceiveContext.pBuffer);
 80113e0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80113e2:	60da      	str	r2, [r3, #12]
      LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)&DummyBytes);
 80113e4:	4b0b      	ldr	r3, [pc, #44]	; (8011414 <SPI_Receive_Manager+0xf4>)
 80113e6:	60f3      	str	r3, [r6, #12]
}
 80113e8:	e7bd      	b.n	8011366 <SPI_Receive_Manager+0x46>
        SpiContext.SpiReceiveContext.SpiReceiveEvent = SPI_RECEIVE_END;
 80113ea:	2203      	movs	r2, #3
 80113ec:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        SpiContext.SpiReceiveContext.PacketCont = FALSE;
 80113f0:	2200      	movs	r2, #0
 80113f2:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
 80113f6:	461d      	mov	r5, r3
 80113f8:	e7e2      	b.n	80113c0 <SPI_Receive_Manager+0xa0>
 80113fa:	bf00      	nop
 80113fc:	200000e8 	.word	0x200000e8
 8011400:	40003c00 	.word	0x40003c00
 8011404:	08015abd 	.word	0x08015abd
 8011408:	08015ac2 	.word	0x08015ac2
 801140c:	4002041c 	.word	0x4002041c
 8011410:	40020408 	.word	0x40020408
 8011414:	08015ac7 	.word	0x08015ac7

08011418 <TimerTransmitCallback>:
{
 8011418:	b508      	push	{r3, lr}
  SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 801141a:	2001      	movs	r0, #1
 801141c:	f7ff ff80 	bl	8011320 <SPI_Receive_Manager>
}
 8011420:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_En);
 8011424:	2101      	movs	r1, #1
 8011426:	2000      	movs	r0, #0
 8011428:	f001 b864 	b.w	80124f4 <LPM_SetStopMode>

0801142c <HAL_SPI_MspInit>:
{
 801142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 8011430:	6802      	ldr	r2, [r0, #0]
 8011432:	4b6d      	ldr	r3, [pc, #436]	; (80115e8 <HAL_SPI_MspInit+0x1bc>)
 8011434:	429a      	cmp	r2, r3
{
 8011436:	b08d      	sub	sp, #52	; 0x34
 8011438:	4606      	mov	r6, r0
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 801143a:	f040 80d1 	bne.w	80115e0 <HAL_SPI_MspInit+0x1b4>
    BNRG_SPI_SCLK_CLK_ENABLE();
 801143e:	4c6b      	ldr	r4, [pc, #428]	; (80115ec <HAL_SPI_MspInit+0x1c0>)
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 8011440:	486b      	ldr	r0, [pc, #428]	; (80115f0 <HAL_SPI_MspInit+0x1c4>)
    BNRG_SPI_SCLK_CLK_ENABLE();
 8011442:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011444:	f043 0304 	orr.w	r3, r3, #4
 8011448:	64e3      	str	r3, [r4, #76]	; 0x4c
 801144a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801144c:	f003 0304 	and.w	r3, r3, #4
 8011450:	9300      	str	r3, [sp, #0]
 8011452:	9b00      	ldr	r3, [sp, #0]
    BNRG_SPI_MISO_CLK_ENABLE();
 8011454:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011456:	f043 0304 	orr.w	r3, r3, #4
 801145a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801145c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801145e:	f003 0304 	and.w	r3, r3, #4
 8011462:	9301      	str	r3, [sp, #4]
 8011464:	9b01      	ldr	r3, [sp, #4]
    BNRG_SPI_MOSI_CLK_ENABLE();
 8011466:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011468:	f043 0304 	orr.w	r3, r3, #4
 801146c:	64e3      	str	r3, [r4, #76]	; 0x4c
 801146e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011470:	f003 0304 	and.w	r3, r3, #4
 8011474:	9302      	str	r3, [sp, #8]
 8011476:	9b02      	ldr	r3, [sp, #8]
    BNRG_SPI_CS_CLK_ENABLE();
 8011478:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801147a:	f043 0308 	orr.w	r3, r3, #8
 801147e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8011480:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011482:	f003 0308 	and.w	r3, r3, #8
 8011486:	9303      	str	r3, [sp, #12]
 8011488:	9b03      	ldr	r3, [sp, #12]
    BNRG_SPI_IRQ_CLK_ENABLE();
 801148a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801148c:	f043 0310 	orr.w	r3, r3, #16
 8011490:	64e3      	str	r3, [r4, #76]	; 0x4c
 8011492:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011494:	f003 0310 	and.w	r3, r3, #16
 8011498:	9304      	str	r3, [sp, #16]
 801149a:	9b04      	ldr	r3, [sp, #16]
    BNRG_SPI_CLK_ENABLE();
 801149c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801149e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80114a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80114a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80114a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80114aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 80114ac:	2500      	movs	r5, #0
 80114ae:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 80114b0:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 80114b4:	f04f 0906 	mov.w	r9, #6
    BNRG_SPI_CLK_ENABLE();
 80114b8:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 80114ba:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 80114bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114c0:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 80114c4:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 80114c8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 80114cc:	f003 f896 	bl	80145fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
 80114d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 80114d4:	4846      	ldr	r0, [pc, #280]	; (80115f0 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
 80114d6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 80114da:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
 80114dc:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
 80114e0:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 80114e4:	f003 f88a 	bl	80145fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
 80114e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 80114ec:	4840      	ldr	r0, [pc, #256]	; (80115f0 <HAL_SPI_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
 80114ee:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 80114f2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
 80114f4:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
 80114f8:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 80114fc:	f003 f87e 	bl	80145fc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 8011500:	2201      	movs	r2, #1
 8011502:	483c      	ldr	r0, [pc, #240]	; (80115f4 <HAL_SPI_MspInit+0x1c8>)
 8011504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011508:	f003 f95c 	bl	80147c4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 801150c:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8011510:	f04f 0a01 	mov.w	sl, #1
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8011514:	4837      	ldr	r0, [pc, #220]	; (80115f4 <HAL_SPI_MspInit+0x1c8>)
    GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
 8011516:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8011518:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
 801151a:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 801151e:	e9cd ba07 	strd	fp, sl, [sp, #28]
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8011522:	f003 f86b 	bl	80145fc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8011526:	4b34      	ldr	r3, [pc, #208]	; (80115f8 <HAL_SPI_MspInit+0x1cc>)
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8011528:	4834      	ldr	r0, [pc, #208]	; (80115fc <HAL_SPI_MspInit+0x1d0>)
    GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
 801152a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 801152c:	2240      	movs	r2, #64	; 0x40
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 801152e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 8011530:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
 8011534:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 8011538:	f003 f860 	bl	80145fc <HAL_GPIO_Init>
    BNRG_DMA_CLK_ENABLE();   
 801153c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 801153e:	4930      	ldr	r1, [pc, #192]	; (8011600 <HAL_SPI_MspInit+0x1d4>)
    BNRG_DMA_CLK_ENABLE();   
 8011540:	ea43 0308 	orr.w	r3, r3, r8
 8011544:	64a3      	str	r3, [r4, #72]	; 0x48
 8011546:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 8011548:	4c2e      	ldr	r4, [pc, #184]	; (8011604 <HAL_SPI_MspInit+0x1d8>)
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 801154a:	46a1      	mov	r9, r4
    BNRG_DMA_CLK_ENABLE();   
 801154c:	ea03 0308 	and.w	r3, r3, r8
    hdma_tx.Instance                 = BNRG_SPI_TX_DMA_CHANNEL_INSTANCE;
 8011550:	f849 1f94 	str.w	r1, [r9, #148]!
    BNRG_DMA_CLK_ENABLE();   
 8011554:	9306      	str	r3, [sp, #24]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8011556:	2280      	movs	r2, #128	; 0x80
    BNRG_DMA_CLK_ENABLE();   
 8011558:	9b06      	ldr	r3, [sp, #24]
    hdma_tx.Init.Request             = BNRG_SPI_TX_DMA_REQUEST;
 801155a:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 801155e:	2310      	movs	r3, #16
    HAL_DMA_Init(&hdma_tx);   
 8011560:	4648      	mov	r0, r9
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8011562:	e9c4 3527 	strd	r3, r5, [r4, #156]	; 0x9c
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011566:	e9c4 2529 	strd	r2, r5, [r4, #164]	; 0xa4
    hdma_tx.Init.Mode                = DMA_NORMAL;
 801156a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
    hdma_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 801156e:	f8c4 b0b4 	str.w	fp, [r4, #180]	; 0xb4
    HAL_DMA_Init(&hdma_tx);   
 8011572:	f002 fe57 	bl	8014224 <HAL_DMA_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8011576:	4922      	ldr	r1, [pc, #136]	; (8011600 <HAL_SPI_MspInit+0x1d4>)
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
  return (uint32_t) &(SPIx->DR);
 8011578:	4b23      	ldr	r3, [pc, #140]	; (8011608 <HAL_SPI_MspInit+0x1dc>)
 801157a:	608b      	str	r3, [r1, #8]
    hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 801157c:	e9c4 7538 	strd	r7, r5, [r4, #224]	; 0xe0
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 8011580:	4627      	mov	r7, r4
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 8011582:	f8c6 9054 	str.w	r9, [r6, #84]	; 0x54
    hdma_rx.Instance                 = BNRG_SPI_RX_DMA_CHANNEL_INSTANCE;
 8011586:	f8df 9084 	ldr.w	r9, [pc, #132]	; 801160c <HAL_SPI_MspInit+0x1e0>
 801158a:	f847 9fdc 	str.w	r9, [r7, #220]!
    hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 801158e:	2280      	movs	r2, #128	; 0x80
    HAL_DMA_Init(&hdma_rx);
 8011590:	4638      	mov	r0, r7
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011592:	e9c4 253b 	strd	r2, r5, [r4, #236]	; 0xec
    hdma_rx.Init.Mode                = DMA_NORMAL;
 8011596:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 801159a:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
    hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 801159e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80115a2:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
    HAL_DMA_Init(&hdma_rx);
 80115a6:	f002 fe3d 	bl	8014224 <HAL_DMA_Init>
 80115aa:	4b17      	ldr	r3, [pc, #92]	; (8011608 <HAL_SPI_MspInit+0x1dc>)
 80115ac:	f8c9 3008 	str.w	r3, [r9, #8]
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 80115b0:	462a      	mov	r2, r5
 80115b2:	4651      	mov	r1, sl
 80115b4:	2039      	movs	r0, #57	; 0x39
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx); 
 80115b6:	65b7      	str	r7, [r6, #88]	; 0x58
 80115b8:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_TX_IRQn, 
 80115bc:	f002 fdbe 	bl	801413c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_TX_IRQn);
 80115c0:	2039      	movs	r0, #57	; 0x39
 80115c2:	f002 fded 	bl	80141a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BNRG_SPI_DMA_RX_IRQn, 
 80115c6:	462a      	mov	r2, r5
 80115c8:	4651      	mov	r1, sl
 80115ca:	2038      	movs	r0, #56	; 0x38
 80115cc:	f002 fdb6 	bl	801413c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BNRG_SPI_DMA_RX_IRQn);
 80115d0:	2038      	movs	r0, #56	; 0x38
 80115d2:	f002 fde5 	bl	80141a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BNRG_SPI_EXTI_IRQn, 
 80115d6:	462a      	mov	r2, r5
 80115d8:	4641      	mov	r1, r8
 80115da:	2017      	movs	r0, #23
 80115dc:	f002 fdae 	bl	801413c <HAL_NVIC_SetPriority>
}
 80115e0:	b00d      	add	sp, #52	; 0x34
 80115e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e6:	bf00      	nop
 80115e8:	40003c00 	.word	0x40003c00
 80115ec:	40021000 	.word	0x40021000
 80115f0:	48000800 	.word	0x48000800
 80115f4:	48000c00 	.word	0x48000c00
 80115f8:	10110000 	.word	0x10110000
 80115fc:	48001000 	.word	0x48001000
 8011600:	4002041c 	.word	0x4002041c
 8011604:	200000e8 	.word	0x200000e8
 8011608:	40003c0c 	.word	0x40003c0c
 801160c:	40020408 	.word	0x40020408

08011610 <HW_BNRG_Init>:
  return;
}


void HW_BNRG_Init(HW_BNRG_InitMode_t InitMode)
{
 8011610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011612:	4607      	mov	r7, r0
 8011614:	b089      	sub	sp, #36	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011616:	b672      	cpsid	i
  hspi->Instance = BNRG_SPI_INSTANCE;
 8011618:	4c43      	ldr	r4, [pc, #268]	; (8011728 <HW_BNRG_Init+0x118>)
  hspi->Init.Mode = BNRG_SPI_MODE;
 801161a:	4e44      	ldr	r6, [pc, #272]	; (801172c <HW_BNRG_Init+0x11c>)
 801161c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 8011620:	2500      	movs	r5, #0
  hspi->Init.Mode = BNRG_SPI_MODE;
 8011622:	e9c4 6302 	strd	r6, r3, [r4, #8]
  hspi->Init.DataSize = BNRG_SPI_DATASIZE;
 8011626:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801162a:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hspi->Init.NSS = BNRG_SPI_NSS;
 801162e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011632:	6223      	str	r3, [r4, #32]
  HAL_SPI_Init(hspi);
 8011634:	f104 0008 	add.w	r0, r4, #8
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8011638:	2307      	movs	r3, #7
  hspi->Init.CLKPhase = BNRG_SPI_CLKPHASE;
 801163a:	e9c4 5506 	strd	r5, r5, [r4, #24]
  hspi->Init.TIMode = BNRG_SPI_TIMODE;
 801163e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8011642:	6363      	str	r3, [r4, #52]	; 0x34
  hspi->Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 8011644:	6265      	str	r5, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 8011646:	6325      	str	r5, [r4, #48]	; 0x30
  HAL_SPI_Init(hspi);
 8011648:	f003 fd51 	bl	80150ee <HAL_SPI_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 801164c:	b662      	cpsie	i
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 801164e:	6873      	ldr	r3, [r6, #4]
  SPI_Init(&SpiHandle);
  __enable_irq();
  LL_SPI_EnableDMAReq_TX(BNRG_SPI_INSTANCE);
  LL_SPI_EnableDMAReq_RX(BNRG_SPI_INSTANCE);

  __HAL_SPI_ENABLE(&SpiHandle);
 8011650:	68a2      	ldr	r2, [r4, #8]
 8011652:	f043 0302 	orr.w	r3, r3, #2
 8011656:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8011658:	6873      	ldr	r3, [r6, #4]
 801165a:	f043 0301 	orr.w	r3, r3, #1
 801165e:	6073      	str	r3, [r6, #4]
 8011660:	6813      	ldr	r3, [r2, #0]

  SpiContext.SpiReceiveContext.PacketCont = FALSE;
  SpiContext.SpiTransmitContext.RequestPending = FALSE;
 8011662:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
  __HAL_SPI_ENABLE(&SpiHandle);
 8011666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 801166a:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_SPI_ENABLE(&SpiHandle);
 801166e:	6013      	str	r3, [r2, #0]
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 8011670:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
  SpiContext.SpiReceiveContext.PacketCont = FALSE;
 8011674:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;

  if(InitMode != HW_BNRG_Limited)
 8011678:	2f00      	cmp	r7, #0
 801167a:	d044      	beq.n	8011706 <HW_BNRG_Init+0xf6>
  *         @arg @ref LL_PWR_WAKEUP_PIN5
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityHigh(uint32_t WakeUpPin)
{
  CLEAR_BIT(PWR->CR4, WakeUpPin);
 801167c:	4a2c      	ldr	r2, [pc, #176]	; (8011730 <HW_BNRG_Init+0x120>)
 801167e:	68d3      	ldr	r3, [r2, #12]
 8011680:	f023 0301 	bic.w	r3, r3, #1
 8011684:	60d3      	str	r3, [r2, #12]
  {
    LL_PWR_SetWakeUpPinPolarityHigh(BNRG_SPI_IRQ_WAKEUP_PIN);

    HW_TS_Create(CFG_TimProcID_isr, &TxRxTimerId, hw_ts_SingleShot, TimerTxRxCallback);
 8011686:	f504 7192 	add.w	r1, r4, #292	; 0x124
 801168a:	4b2a      	ldr	r3, [pc, #168]	; (8011734 <HW_BNRG_Init+0x124>)
 801168c:	462a      	mov	r2, r5
 801168e:	4628      	mov	r0, r5
 8011690:	f000 fad2 	bl	8011c38 <HW_TS_Create>
  GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
 8011694:	2701      	movs	r7, #1
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 8011696:	4b28      	ldr	r3, [pc, #160]	; (8011738 <HW_BNRG_Init+0x128>)
  GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
 8011698:	9603      	str	r6, [sp, #12]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 801169a:	462a      	mov	r2, r5
 801169c:	f10d 0107 	add.w	r1, sp, #7
 80116a0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
 80116a2:	e9cd 7504 	strd	r7, r5, [sp, #16]
  GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
 80116a6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
 80116a8:	9507      	str	r5, [sp, #28]
  HW_TS_Create(CFG_TimProcID_isr, &ubnRFResetTimerID, hw_ts_SingleShot, pf_nRFResetTimerCallBack);
 80116aa:	f000 fac5 	bl	8011c38 <HW_TS_Create>
  BNRG_SPI_RESET_CLK_ENABLE();
 80116ae:	4b23      	ldr	r3, [pc, #140]	; (801173c <HW_BNRG_Init+0x12c>)
 80116b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80116b2:	433a      	orrs	r2, r7
 80116b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80116b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116b8:	403b      	ands	r3, r7
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 80116ba:	462a      	mov	r2, r5
  BNRG_SPI_RESET_CLK_ENABLE();
 80116bc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 80116be:	4631      	mov	r1, r6
 80116c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  BNRG_SPI_RESET_CLK_ENABLE();
 80116c4:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 80116c6:	f003 f87d 	bl	80147c4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);
 80116ca:	a903      	add	r1, sp, #12
 80116cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80116d0:	f002 ff94 	bl	80145fc <HAL_GPIO_Init>
  HW_TS_Start(ubnRFResetTimerID, BLUENRG_HOLD_TIME_IN_RESET);
 80116d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80116d8:	211c      	movs	r1, #28
 80116da:	f000 fba9 	bl	8011e30 <HW_TS_Start>
  RfResetTimerLock = 1;
 80116de:	7027      	strb	r7, [r4, #0]
  while(RfResetTimerLock == 1)
 80116e0:	7823      	ldrb	r3, [r4, #0]
 80116e2:	2b01      	cmp	r3, #1
 80116e4:	d00c      	beq.n	8011700 <HW_BNRG_Init+0xf0>
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 80116e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80116ea:	2201      	movs	r2, #1
 80116ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80116f0:	f003 f868 	bl	80147c4 <HAL_GPIO_WritePin>
  HW_TS_Delete(ubnRFResetTimerID);
 80116f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80116f8:	f000 fb8c 	bl	8011e14 <HW_TS_Delete>
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_CS_STDBY_PIN, BNRG_SPI_CS_STDBY_PORT);
    LL_PWR_DisableGPIOPullUp(BNRG_SPI_RESET_STDBY_PIN, BNRG_SPI_RESET_STDBY_PORT);
  }

  return;
}
 80116fc:	b009      	add	sp, #36	; 0x24
 80116fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HW_SleepMode();
 8011700:	f7ff fd78 	bl	80111f4 <HW_SleepMode>
 8011704:	e7ec      	b.n	80116e0 <HW_BNRG_Init+0xd0>
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
 8011706:	4a0e      	ldr	r2, [pc, #56]	; (8011740 <HW_BNRG_Init+0x130>)
 8011708:	6813      	ldr	r3, [r2, #0]
 801170a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801170e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
 8011710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011714:	4b0b      	ldr	r3, [pc, #44]	; (8011744 <HW_BNRG_Init+0x134>)
 8011716:	6811      	ldr	r1, [r2, #0]
 8011718:	400b      	ands	r3, r1
 801171a:	6013      	str	r3, [r2, #0]
 801171c:	6832      	ldr	r2, [r6, #0]
 801171e:	4b0a      	ldr	r3, [pc, #40]	; (8011748 <HW_BNRG_Init+0x138>)
 8011720:	4013      	ands	r3, r2
 8011722:	6033      	str	r3, [r6, #0]
  return;
 8011724:	e7ea      	b.n	80116fc <HW_BNRG_Init+0xec>
 8011726:	bf00      	nop
 8011728:	200000e8 	.word	0x200000e8
 801172c:	40003c00 	.word	0x40003c00
 8011730:	40007000 	.word	0x40007000
 8011734:	0801123d 	.word	0x0801123d
 8011738:	08011231 	.word	0x08011231
 801173c:	40021000 	.word	0x40021000
 8011740:	40007034 	.word	0x40007034
 8011744:	bfff8fc7 	.word	0xbfff8fc7
 8011748:	bfff8fdf 	.word	0xbfff8fdf

0801174c <HW_BNRG_EvtReq>:
}


void HW_BNRG_EvtReq(uint8_t *buffer, uint16_t buff_size)
{
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 801174c:	4b07      	ldr	r3, [pc, #28]	; (801176c <HW_BNRG_EvtReq+0x20>)
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 801174e:	2200      	movs	r2, #0
  SpiContext.SpiReceiveContext.pBuffer = buffer;
 8011750:	6758      	str	r0, [r3, #116]	; 0x74
  SpiContext.SpiReceiveContext.BufferSize = buff_size;
 8011752:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
  SpiContext.SpiReceiveContext.BufferStatus = BUFFER_AVAILABLE;
 8011756:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  if( SpiContext.SpiReceiveContext.PacketCont == TRUE )
 801175a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801175e:	2b01      	cmp	r3, #1
 8011760:	d102      	bne.n	8011768 <HW_BNRG_EvtReq+0x1c>
  {
    SPI_Receive_Manager(SPI_REQUEST_PAYLOAD);
 8011762:	2002      	movs	r0, #2
 8011764:	f7ff bddc 	b.w	8011320 <SPI_Receive_Manager>
  }
  else
  {
    Enable_SPI_Receiving_Path();
 8011768:	f7ff bd96 	b.w	8011298 <Enable_SPI_Receiving_Path>
 801176c:	200000e8 	.word	0x200000e8

08011770 <HW_BNRG_SpiIrqCb>:
  return;
}


void HW_BNRG_SpiIrqCb(void)
{  
 8011770:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8011772:	b672      	cpsid	i
  __disable_irq();
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 8011774:	4b0a      	ldr	r3, [pc, #40]	; (80117a0 <HW_BNRG_SpiIrqCb+0x30>)
 8011776:	f893 506c 	ldrb.w	r5, [r3, #108]	; 0x6c
 801177a:	b975      	cbnz	r5, 801179a <HW_BNRG_SpiIrqCb+0x2a>
  {
    SpiContext.SpiPeripheralState = SPI_BUSY;
 801177c:	2401      	movs	r4, #1
 801177e:	f883 406c 	strb.w	r4, [r3, #108]	; 0x6c
  __ASM volatile ("cpsie i" : : : "memory");
 8011782:	b662      	cpsie	i
    __enable_irq();
    Enable_SPI_CS();
 8011784:	f7ff fd60 	bl	8011248 <Enable_SPI_CS>
    SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX);
 8011788:	4628      	mov	r0, r5
 801178a:	f7ff fdc9 	bl	8011320 <SPI_Receive_Manager>
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 801178e:	4621      	mov	r1, r4
 8011790:	4620      	mov	r0, r4
  }
  else
  {
    __enable_irq();
  }
}
 8011792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_En);
 8011796:	f000 bead 	b.w	80124f4 <LPM_SetStopMode>
 801179a:	b662      	cpsie	i
}
 801179c:	bd38      	pop	{r3, r4, r5, pc}
 801179e:	bf00      	nop
 80117a0:	200000e8 	.word	0x200000e8

080117a4 <HW_BNRG_DMATxCb>:


void HW_BNRG_DMATxCb(void)
{
 80117a4:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmatx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG))
 80117a6:	4c20      	ldr	r4, [pc, #128]	; (8011828 <HW_BNRG_DMATxCb+0x84>)
 80117a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	681a      	ldr	r2, [r3, #0]
 80117ae:	0791      	lsls	r1, r2, #30
 80117b0:	d507      	bpl.n	80117c2 <HW_BNRG_DMATxCb+0x1e>
 80117b2:	4a1e      	ldr	r2, [pc, #120]	; (801182c <HW_BNRG_DMATxCb+0x88>)
 80117b4:	4293      	cmp	r3, r2
 80117b6:	bf8c      	ite	hi
 80117b8:	4b1d      	ldrhi	r3, [pc, #116]	; (8011830 <HW_BNRG_DMATxCb+0x8c>)
 80117ba:	4b1e      	ldrls	r3, [pc, #120]	; (8011834 <HW_BNRG_DMATxCb+0x90>)
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	0692      	lsls	r2, r2, #26
 80117c0:	d400      	bmi.n	80117c4 <HW_BNRG_DMATxCb+0x20>
      TransmitClosure();
    }
  }

  return;
}
 80117c2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 80117c4:	2220      	movs	r2, #32
 80117c6:	605a      	str	r2, [r3, #4]
    if(SpiContext.SpiTransmitContext.PacketCont == TRUE)
 80117c8:	f894 5088 	ldrb.w	r5, [r4, #136]	; 0x88
 80117cc:	2d01      	cmp	r5, #1
 80117ce:	d10d      	bne.n	80117ec <HW_BNRG_DMATxCb+0x48>
      SpiContext.SpiTransmitContext.pPayloadData += SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 80117d0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80117d4:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
 80117d8:	4413      	add	r3, r2
 80117da:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      DisableEnable_SPI_CS();
 80117de:	f7ff fd4b 	bl	8011278 <DisableEnable_SPI_CS>
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 80117e2:	4628      	mov	r0, r5
}
 80117e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);
 80117e8:	f7ff bd9a 	b.w	8011320 <SPI_Receive_Manager>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 80117ec:	2100      	movs	r1, #0
 80117ee:	4608      	mov	r0, r1
 80117f0:	f000 fe80 	bl	80124f4 <LPM_SetStopMode>
  SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 80117f4:	2300      	movs	r3, #0
 80117f6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  Disable_SPI_CS();
 80117fa:	f7ff fd2d 	bl	8011258 <Disable_SPI_CS>
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 80117fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	6813      	ldr	r3, [r2, #0]
 8011804:	f023 0301 	bic.w	r3, r3, #1
 8011808:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 801180a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	6813      	ldr	r3, [r2, #0]
 8011810:	f023 0301 	bic.w	r3, r3, #1
 8011814:	6013      	str	r3, [r2, #0]
  if(SpiContext.SpiReceiveContext.BufferStatus == BUFFER_AVAILABLE)
 8011816:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 801181a:	2b00      	cmp	r3, #0
 801181c:	d1d1      	bne.n	80117c2 <HW_BNRG_DMATxCb+0x1e>
}
 801181e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Enable_SPI_Receiving_Path();
 8011822:	f7ff bd39 	b.w	8011298 <Enable_SPI_Receiving_Path>
 8011826:	bf00      	nop
 8011828:	200000e8 	.word	0x200000e8
 801182c:	40020080 	.word	0x40020080
 8011830:	40020400 	.word	0x40020400
 8011834:	40020000 	.word	0x40020000

08011838 <HW_BNRG_TimStartAllowed>:
}


void HW_BNRG_TimStartAllowed(void)
{
  HW_TS_Start(TxRxTimerId, TimeoutTicks);
 8011838:	4b03      	ldr	r3, [pc, #12]	; (8011848 <HW_BNRG_TimStartAllowed+0x10>)
 801183a:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 801183e:	f893 0124 	ldrb.w	r0, [r3, #292]	; 0x124
 8011842:	f000 baf5 	b.w	8011e30 <HW_TS_Start>
 8011846:	bf00      	nop
 8011848:	200000e8 	.word	0x200000e8

0801184c <HW_BNRG_TimStartReq>:
   * the Timer requested can be started immediately because there is no risk that
   * the timer is already in use.
   * If a specific application needs to handle the timer differently,
   * it is suggested to overload the function without change the COMMON one. 
   */
  HW_BNRG_TimStartAllowed();
 801184c:	f7ff bff4 	b.w	8011838 <HW_BNRG_TimStartAllowed>

08011850 <WakeupBlueNRG>:
{
 8011850:	b510      	push	{r4, lr}
  pTimerTxRxCallback = TimerTransmitCallback;
 8011852:	4c08      	ldr	r4, [pc, #32]	; (8011874 <WakeupBlueNRG+0x24>)
 8011854:	4b08      	ldr	r3, [pc, #32]	; (8011878 <WakeupBlueNRG+0x28>)
 8011856:	6063      	str	r3, [r4, #4]
  Enable_SPI_CS();
 8011858:	f7ff fcf6 	bl	8011248 <Enable_SPI_CS>
  TimeoutTicks = SPI_TX_TIMEOUT;
 801185c:	2306      	movs	r3, #6
 801185e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
  HW_BNRG_TimStartReq();
 8011862:	f7ff fff3 	bl	801184c <HW_BNRG_TimStartReq>
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 8011866:	2100      	movs	r1, #0
}
 8011868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LPM_SetStopMode(LPM_SPI_TX_Id, LPM_StopMode_Dis);
 801186c:	4608      	mov	r0, r1
 801186e:	f000 be41 	b.w	80124f4 <LPM_SetStopMode>
 8011872:	bf00      	nop
 8011874:	200000e8 	.word	0x200000e8
 8011878:	08011419 	.word	0x08011419

0801187c <HW_BNRG_Send>:
{  
 801187c:	b508      	push	{r3, lr}
  SpiContext.SpiTransmitContext.pPayloadData = payload_data;
 801187e:	4b0c      	ldr	r3, [pc, #48]	; (80118b0 <HW_BNRG_Send+0x34>)
 8011880:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit = payload_size;
 8011884:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("cpsid i" : : : "memory");
 8011888:	b672      	cpsid	i
  if(SpiContext.SpiPeripheralState == SPI_AVAILABLE)
 801188a:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 801188e:	2201      	movs	r2, #1
 8011890:	b949      	cbnz	r1, 80118a6 <HW_BNRG_Send+0x2a>
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 8011892:	2017      	movs	r0, #23
    SpiContext.SpiPeripheralState = SPI_BUSY;
 8011894:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 8011898:	f002 fc90 	bl	80141bc <HAL_NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 801189c:	b662      	cpsie	i
}
 801189e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WakeupBlueNRG();
 80118a2:	f7ff bfd5 	b.w	8011850 <WakeupBlueNRG>
    SpiContext.SpiTransmitContext.RequestPending = TRUE;
 80118a6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80118aa:	b662      	cpsie	i
}
 80118ac:	bd08      	pop	{r3, pc}
 80118ae:	bf00      	nop
 80118b0:	200000e8 	.word	0x200000e8

080118b4 <ReceiveClosure>:
{
 80118b4:	b510      	push	{r4, lr}
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 80118b6:	4c12      	ldr	r4, [pc, #72]	; (8011900 <ReceiveClosure+0x4c>)
 80118b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	6813      	ldr	r3, [r2, #0]
 80118be:	f023 0301 	bic.w	r3, r3, #1
 80118c2:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 80118c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	6813      	ldr	r3, [r2, #0]
 80118ca:	f023 0301 	bic.w	r3, r3, #1
 80118ce:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80118d0:	b672      	cpsid	i
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 80118d2:	2017      	movs	r0, #23
 80118d4:	f002 fc72 	bl	80141bc <HAL_NVIC_DisableIRQ>
  if(SpiContext.SpiTransmitContext.RequestPending == TRUE)
 80118d8:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 80118dc:	2a01      	cmp	r2, #1
 80118de:	f04f 0300 	mov.w	r3, #0
 80118e2:	d108      	bne.n	80118f6 <ReceiveClosure+0x42>
    SpiContext.SpiTransmitContext.RequestPending = FALSE;
 80118e4:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
    SpiContext.SpiPeripheralState = SPI_BUSY;
 80118e8:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
  __ASM volatile ("cpsie i" : : : "memory");
 80118ec:	b662      	cpsie	i
}
 80118ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WakeupBlueNRG();
 80118f2:	f7ff bfad 	b.w	8011850 <WakeupBlueNRG>
    SpiContext.SpiPeripheralState = SPI_AVAILABLE;
 80118f6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 80118fa:	b662      	cpsie	i
}
 80118fc:	bd10      	pop	{r4, pc}
 80118fe:	bf00      	nop
 8011900:	200000e8 	.word	0x200000e8

08011904 <ProcessEndOfReceive>:
{
 8011904:	b510      	push	{r4, lr}
  SpiContext.SpiReceiveContext.BufferStatus = NO_BUFFER;
 8011906:	4c06      	ldr	r4, [pc, #24]	; (8011920 <ProcessEndOfReceive+0x1c>)
 8011908:	2301      	movs	r3, #1
 801190a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  ReceiveClosure();
 801190e:	f7ff ffd1 	bl	80118b4 <ReceiveClosure>
  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 8011912:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
}
 8011916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 801191a:	f000 bd5b 	b.w	80123d4 <HW_BNRG_Isr>
 801191e:	bf00      	nop
 8011920:	200000e8 	.word	0x200000e8

08011924 <HW_BNRG_DMARxCb>:
{
 8011924:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_DMA_GET_IT_SOURCE(SpiHandle.hdmarx, DMA_IT_TC)  && __HAL_DMA_GET_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG))
 8011926:	4c53      	ldr	r4, [pc, #332]	; (8011a74 <HW_BNRG_DMARxCb+0x150>)
 8011928:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	0795      	lsls	r5, r2, #30
 8011930:	d507      	bpl.n	8011942 <HW_BNRG_DMARxCb+0x1e>
 8011932:	4951      	ldr	r1, [pc, #324]	; (8011a78 <HW_BNRG_DMARxCb+0x154>)
 8011934:	428b      	cmp	r3, r1
 8011936:	bf8c      	ite	hi
 8011938:	4a50      	ldrhi	r2, [pc, #320]	; (8011a7c <HW_BNRG_DMARxCb+0x158>)
 801193a:	4a51      	ldrls	r2, [pc, #324]	; (8011a80 <HW_BNRG_DMARxCb+0x15c>)
 801193c:	6810      	ldr	r0, [r2, #0]
 801193e:	0780      	lsls	r0, r0, #30
 8011940:	d400      	bmi.n	8011944 <HW_BNRG_DMARxCb+0x20>
}
 8011942:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmarx, BNRG_SPI_RX_DMA_TC_FLAG);
 8011944:	2002      	movs	r0, #2
 8011946:	6050      	str	r0, [r2, #4]
    __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG);
 8011948:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801194a:	6815      	ldr	r5, [r2, #0]
 801194c:	428d      	cmp	r5, r1
 801194e:	bf8c      	ite	hi
 8011950:	484a      	ldrhi	r0, [pc, #296]	; (8011a7c <HW_BNRG_DMARxCb+0x158>)
 8011952:	484b      	ldrls	r0, [pc, #300]	; (8011a80 <HW_BNRG_DMARxCb+0x15c>)
 8011954:	2220      	movs	r2, #32
 8011956:	6042      	str	r2, [r0, #4]
    switch (SpiContext.SpiReceiveContext.SpiReceiveEvent)
 8011958:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 801195c:	2a03      	cmp	r2, #3
 801195e:	d8f0      	bhi.n	8011942 <HW_BNRG_DMARxCb+0x1e>
 8011960:	e8df f002 	tbb	[pc, r2]
 8011964:	2a243802 	.word	0x2a243802
        byte_count = (ReceivedHeader[4]<<8)|ReceivedHeader[3];
 8011968:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 801196c:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 8011970:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8011974:	d003      	beq.n	801197e <HW_BNRG_DMARxCb+0x5a>
 8011976:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 801197a:	2802      	cmp	r0, #2
 801197c:	d012      	beq.n	80119a4 <HW_BNRG_DMARxCb+0x80>
          if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET)
 801197e:	4841      	ldr	r0, [pc, #260]	; (8011a84 <HW_BNRG_DMARxCb+0x160>)
 8011980:	2140      	movs	r1, #64	; 0x40
 8011982:	f002 ff19 	bl	80147b8 <HAL_GPIO_ReadPin>
 8011986:	4604      	mov	r4, r0
 8011988:	b948      	cbnz	r0, 801199e <HW_BNRG_DMARxCb+0x7a>
            Disable_SPI_CS();
 801198a:	f7ff fc65 	bl	8011258 <Disable_SPI_CS>
            LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 801198e:	4621      	mov	r1, r4
 8011990:	2001      	movs	r0, #1
 8011992:	f000 fdaf 	bl	80124f4 <LPM_SetStopMode>
}
 8011996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ReceiveClosure();
 801199a:	f7ff bf8b 	b.w	80118b4 <ReceiveClosure>
            DisableEnable_SPI_CS();
 801199e:	f7ff fc6b 	bl	8011278 <DisableEnable_SPI_CS>
            SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_RX); /**< BlueNRG not ready for reading */
 80119a2:	2000      	movs	r0, #0
}
 80119a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 80119a8:	f7ff bcba 	b.w	8011320 <SPI_Receive_Manager>
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 80119ac:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
}
 80119b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HW_BNRG_Isr(SpiContext.SpiReceiveContext.PayloadLength);
 80119b4:	f000 bd0e 	b.w	80123d4 <HW_BNRG_Isr>
        Disable_SPI_CS();
 80119b8:	f7ff fc4e 	bl	8011258 <Disable_SPI_CS>
        LPM_SetStopMode(LPM_SPI_RX_Id, LPM_StopMode_Dis);
 80119bc:	2100      	movs	r1, #0
 80119be:	2001      	movs	r0, #1
 80119c0:	f000 fd98 	bl	80124f4 <LPM_SetStopMode>
        pTimerTxRxCallback = ProcessEndOfReceive;
 80119c4:	4b30      	ldr	r3, [pc, #192]	; (8011a88 <HW_BNRG_DMARxCb+0x164>)
 80119c6:	6063      	str	r3, [r4, #4]
        TimeoutTicks = SPI_END_RECEIVE_FIX_TIMEOUT;
 80119c8:	2302      	movs	r3, #2
 80119ca:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        HW_BNRG_TimStartReq();
 80119ce:	f7ff ff3d 	bl	801184c <HW_BNRG_TimStartReq>
        break;
 80119d2:	e7b6      	b.n	8011942 <HW_BNRG_DMARxCb+0x1e>
        byte_count = (ReceivedHeader[2]<<8)|ReceivedHeader[1];
 80119d4:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
 80119d8:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
        if ((byte_count == 0) || (ready_state != BLUENRG_READY_STATE))
 80119dc:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
 80119e0:	d003      	beq.n	80119ea <HW_BNRG_DMARxCb+0xc6>
 80119e2:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 80119e6:	2802      	cmp	r0, #2
 80119e8:	d003      	beq.n	80119f2 <HW_BNRG_DMARxCb+0xce>
          DisableEnable_SPI_CS();
 80119ea:	f7ff fc45 	bl	8011278 <DisableEnable_SPI_CS>
          SPI_Receive_Manager(SPI_REQUEST_VALID_HEADER_FOR_TX);  /**< BlueNRG not ready for writing */
 80119ee:	2001      	movs	r0, #1
 80119f0:	e7d8      	b.n	80119a4 <HW_BNRG_DMARxCb+0x80>
          if( byte_count < SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit)
 80119f2:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80119f6:	4290      	cmp	r0, r2
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = byte_count;
 80119f8:	bf83      	ittte	hi
 80119fa:	f8a4 2086 	strhhi.w	r2, [r4, #134]	; 0x86
            SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit -= SpiContext.SpiTransmitContext.PayloadSizeToTransmit;
 80119fe:	1a82      	subhi	r2, r0, r2
 8011a00:	f8a4 2084 	strhhi.w	r2, [r4, #132]	; 0x84
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 8011a04:	2200      	movls	r2, #0
            SpiContext.SpiTransmitContext.PacketCont = TRUE;
 8011a06:	bf88      	it	hi
 8011a08:	2201      	movhi	r2, #1
            SpiContext.SpiTransmitContext.PacketCont = FALSE;
 8011a0a:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8011a0e:	682a      	ldr	r2, [r5, #0]
            SpiContext.SpiTransmitContext.PayloadSizeToTransmit = SpiContext.SpiTransmitContext.PayloadSizeLeftToTransmit;
 8011a10:	bf98      	it	ls
 8011a12:	f8a4 0086 	strhls.w	r0, [r4, #134]	; 0x86
  __HAL_DMA_DISABLE(SpiHandle.hdmatx);
 8011a16:	f022 0201 	bic.w	r2, r2, #1
 8011a1a:	602a      	str	r2, [r5, #0]
  __HAL_DMA_DISABLE(SpiHandle.hdmarx);
 8011a1c:	681a      	ldr	r2, [r3, #0]
 8011a1e:	f022 0201 	bic.w	r2, r2, #1
 8011a22:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 8011a24:	681a      	ldr	r2, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 8011a26:	428d      	cmp	r5, r1
  __HAL_DMA_DISABLE_IT(SpiHandle.hdmarx, DMA_IT_TC); /**< Disable Receive packet notification */
 8011a28:	f022 0202 	bic.w	r2, r2, #2
 8011a2c:	601a      	str	r2, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(SpiHandle.hdmatx, BNRG_SPI_TX_DMA_TC_FLAG); /**< Clear flag in DMA */
 8011a2e:	bf8c      	ite	hi
 8011a30:	4a12      	ldrhi	r2, [pc, #72]	; (8011a7c <HW_BNRG_DMARxCb+0x158>)
 8011a32:	4a13      	ldrls	r2, [pc, #76]	; (8011a80 <HW_BNRG_DMARxCb+0x15c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8011a34:	4d15      	ldr	r5, [pc, #84]	; (8011a8c <HW_BNRG_DMARxCb+0x168>)
 8011a36:	2320      	movs	r3, #32
 8011a38:	6053      	str	r3, [r2, #4]
  HAL_NVIC_ClearPendingIRQ(BNRG_SPI_DMA_TX_IRQn); /**< Clear DMA pending bit in NVIC */
 8011a3a:	2039      	movs	r0, #57	; 0x39
 8011a3c:	f002 fbe2 	bl	8014204 <HAL_NVIC_ClearPendingIRQ>
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 8011a40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 8011a42:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
  __HAL_DMA_ENABLE_IT(SpiHandle.hdmatx, DMA_IT_TC);  /**< Enable Transmit packet notification */
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	6813      	ldr	r3, [r2, #0]
 8011a4a:	f043 0302 	orr.w	r3, r3, #2
 8011a4e:	6013      	str	r3, [r2, #0]
 8011a50:	682b      	ldr	r3, [r5, #0]
 8011a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a56:	602b      	str	r3, [r5, #0]
  LL_DMA_SetDataLength(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, SpiContext.SpiTransmitContext.PayloadSizeToTransmit); /**< Set counter in DMA TX */
 8011a58:	2001      	movs	r0, #1
 8011a5a:	f7ff fc35 	bl	80112c8 <LL_DMA_SetDataLength.constprop.0>
  LL_DMA_SetMemoryAddress(BNRG_SPI_TX_DMA_ID, BNRG_SPI_TX_DMA_CHANNEL, (uint32_t)SpiContext.SpiTransmitContext.pPayloadData);  /**< Set memory address in DMA TX */
 8011a5e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8011a62:	60eb      	str	r3, [r5, #12]
  __HAL_DMA_ENABLE(SpiHandle.hdmatx); /**< Enable DMA TX */
 8011a64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011a66:	681a      	ldr	r2, [r3, #0]
 8011a68:	6813      	ldr	r3, [r2, #0]
 8011a6a:	f043 0301 	orr.w	r3, r3, #1
 8011a6e:	6013      	str	r3, [r2, #0]
  return;
 8011a70:	e767      	b.n	8011942 <HW_BNRG_DMARxCb+0x1e>
 8011a72:	bf00      	nop
 8011a74:	200000e8 	.word	0x200000e8
 8011a78:	40020080 	.word	0x40020080
 8011a7c:	40020400 	.word	0x40020400
 8011a80:	40020000 	.word	0x40020000
 8011a84:	48001000 	.word	0x48001000
 8011a88:	08011905 	.word	0x08011905
 8011a8c:	4002041c 	.word	0x4002041c

08011a90 <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 8011a90:	4b06      	ldr	r3, [pc, #24]	; (8011aac <ReadRtcSsrValue+0x1c>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	681a      	ldr	r2, [r3, #0]
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8011a96:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8011a98:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8011a9a:	b280      	uxth	r0, r0
 8011a9c:	b29b      	uxth	r3, r3
  second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);

  while(first_read != second_read)
 8011a9e:	4298      	cmp	r0, r3
 8011aa0:	d100      	bne.n	8011aa4 <ReadRtcSsrValue+0x14>
    first_read = second_read;
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
  }

  return second_read;
}
 8011aa2:	4770      	bx	lr
 8011aa4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8011aa6:	4618      	mov	r0, r3
    second_read = LL_RTC_TIME_GetSubSecond(phrtc->Instance);
 8011aa8:	b28b      	uxth	r3, r1
 8011aaa:	e7f8      	b.n	8011a9e <ReadRtcSsrValue+0xe>
 8011aac:	20000214 	.word	0x20000214

08011ab0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8011ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8011ab2:	4b19      	ldr	r3, [pc, #100]	; (8011b18 <UnlinkTimer+0x68>)
 8011ab4:	791a      	ldrb	r2, [r3, #4]
 8011ab6:	4282      	cmp	r2, r0
 8011ab8:	f04f 0218 	mov.w	r2, #24
 8011abc:	d115      	bne.n	8011aea <UnlinkTimer+0x3a>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8011abe:	791c      	ldrb	r4, [r3, #4]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8011ac0:	fb02 3200 	mla	r2, r2, r0, r3
    PreviousRunningTimerID = CurrentRunningTimerID;
 8011ac4:	b2e4      	uxtb	r4, r4
 8011ac6:	715c      	strb	r4, [r3, #5]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8011ac8:	7f52      	ldrb	r2, [r2, #29]
 8011aca:	b2d2      	uxtb	r2, r2
 8011acc:	711a      	strb	r2, [r3, #4]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8011ace:	2218      	movs	r2, #24
 8011ad0:	fb02 3000 	mla	r0, r2, r0, r3
 8011ad4:	2201      	movs	r2, #1
 8011ad6:	7502      	strb	r2, [r0, #20]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8011ad8:	791a      	ldrb	r2, [r3, #4]
 8011ada:	2a06      	cmp	r2, #6
 8011adc:	d104      	bne.n	8011ae8 <UnlinkTimer+0x38>
 8011ade:	b919      	cbnz	r1, 8011ae8 <UnlinkTimer+0x38>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8011ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  return;
}
 8011ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    previous_id = aTimerContext[TimerID].PreviousID;
 8011aea:	fb02 3400 	mla	r4, r2, r0, r3
 8011aee:	7f26      	ldrb	r6, [r4, #28]
    next_id = aTimerContext[TimerID].NextID;
 8011af0:	f894 c01d 	ldrb.w	ip, [r4, #29]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8011af4:	7f67      	ldrb	r7, [r4, #29]
 8011af6:	fb02 3606 	mla	r6, r2, r6, r3
 8011afa:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8011afc:	f1bc 0f06 	cmp.w	ip, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8011b00:	7777      	strb	r7, [r6, #29]
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8011b02:	bf18      	it	ne
 8011b04:	7f24      	ldrbne	r4, [r4, #28]
    next_id = aTimerContext[TimerID].NextID;
 8011b06:	fa5f f58c 	uxtb.w	r5, ip
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8011b0a:	bf1e      	ittt	ne
 8011b0c:	fb02 3205 	mlane	r2, r2, r5, r3
 8011b10:	b2e4      	uxtbne	r4, r4
 8011b12:	7714      	strbne	r4, [r2, #28]
 8011b14:	e7db      	b.n	8011ace <UnlinkTimer+0x1e>
 8011b16:	bf00      	nop
 8011b18:	20000214 	.word	0x20000214

08011b1c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8011b1c:	b510      	push	{r4, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8011b1e:	4c0e      	ldr	r4, [pc, #56]	; (8011b58 <ReturnTimeElapsed+0x3c>)
 8011b20:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8011b24:	3301      	adds	r3, #1
 8011b26:	d015      	beq.n	8011b54 <ReturnTimeElapsed+0x38>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8011b28:	f7ff ffb2 	bl	8011a90 <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 8011b2c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8011b30:	4283      	cmp	r3, r0
    {
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8011b32:	bf3b      	ittet	cc
 8011b34:	f8b4 309c 	ldrhcc.w	r3, [r4, #156]	; 0x9c
      return_value = SSRValueOnLastSetup + wrap_counter;
 8011b38:	f8d4 2098 	ldrcc.w	r2, [r4, #152]	; 0x98
      return_value = SSRValueOnLastSetup - return_value;
 8011b3c:	f8d4 3098 	ldrcs.w	r3, [r4, #152]	; 0x98
      return_value = SSRValueOnLastSetup + wrap_counter;
 8011b40:	189b      	addcc	r3, r3, r2
 8011b42:	1a18      	subs	r0, r3, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8011b44:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8011b48:	4358      	muls	r0, r3
    return_value = return_value >> WakeupTimerDivider;
 8011b4a:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8011b4e:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 8011b50:	b280      	uxth	r0, r0
 8011b52:	bd10      	pop	{r4, pc}
    return_value = 0;
 8011b54:	2000      	movs	r0, #0
 8011b56:	e7fb      	b.n	8011b50 <ReturnTimeElapsed+0x34>
 8011b58:	20000214 	.word	0x20000214

08011b5c <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8011b5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8011b5e:	4c34      	ldr	r4, [pc, #208]	; (8011c30 <HW_TS_Init+0xd4>)
 8011b60:	6021      	str	r1, [r4, #0]


  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - (LL_RTC_WAKEUP_GetClock(phrtc->Instance)));
 8011b62:	6809      	ldr	r1, [r1, #0]
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  */
__STATIC_INLINE uint32_t LL_RTC_WAKEUP_GetClock(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 8011b64:	688b      	ldr	r3, [r1, #8]
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 8011b66:	690a      	ldr	r2, [r1, #16]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_WUCKSEL));
 8011b68:	f003 0307 	and.w	r3, r3, #7
 8011b6c:	f1c3 0304 	rsb	r3, r3, #4
 8011b70:	b2dd      	uxtb	r5, r3
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_S));
 8011b72:	690b      	ldr	r3, [r1, #16]
 8011b74:	f884 509f 	strb.w	r5, [r4, #159]	; 0x9f
 8011b78:	f3c3 030e 	ubfx	r3, r3, #0, #15
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 8011b7c:	3301      	adds	r3, #1
  return (uint32_t)(READ_BIT(RTCx->PRER, RTC_PRER_PREDIV_A) >> RTC_PRER_PREDIV_A_Pos);
 8011b7e:	f3c2 4206 	ubfx	r2, r2, #16, #7
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 8011b82:	3201      	adds	r2, #1
  SynchPrescalerUserConfig = (uint16_t)LL_RTC_GetSynchPrescaler(phrtc->Instance) + 1;
 8011b84:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 8011b88:	3b01      	subs	r3, #1
 8011b8a:	4353      	muls	r3, r2
 8011b8c:	412b      	asrs	r3, r5
  AsynchPrescalerUserConfig = (uint8_t)LL_RTC_GetAsynchPrescaler(phrtc->Instance) + 1;
 8011b8e:	f884 209e 	strb.w	r2, [r4, #158]	; 0x9e
  localmaxwakeuptimersetup = (((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) >> WakeupTimerDivider) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY;
 8011b92:	3b10      	subs	r3, #16

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8011b94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011b98:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8011b9a:	bf8c      	ite	hi
 8011b9c:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8011ba0:	b29b      	uxthls	r3, r3
 8011ba2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8011ba6:	4b23      	ldr	r3, [pc, #140]	; (8011c34 <HW_TS_Init+0xd8>)
 8011ba8:	689a      	ldr	r2, [r3, #8]
 8011baa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011bae:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011bb6:	601a      	str	r2, [r3, #0]
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8011bb8:	bb90      	cbnz	r0, 8011c20 <HW_TS_Init+0xc4>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8011bba:	2201      	movs	r2, #1
 8011bbc:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8011bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011bc4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8011bc8:	2206      	movs	r2, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8011bca:	7520      	strb	r0, [r4, #20]
 8011bcc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
 8011bd0:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8011bd4:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
 8011bd8:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 8011bdc:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8011be0:	7122      	strb	r2, [r4, #4]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8011be2:	688a      	ldr	r2, [r1, #8]
 8011be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011be8:	608a      	str	r2, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8011bea:	68ca      	ldr	r2, [r1, #12]
 8011bec:	b2d2      	uxtb	r2, r2
 8011bee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8011bf2:	60ca      	str	r2, [r1, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8011bf4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011bf8:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8011bfa:	2003      	movs	r0, #3
 8011bfc:	f002 fb02 	bl	8014204 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8011c00:	6823      	ldr	r3, [r4, #0]
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	6893      	ldr	r3, [r2, #8]
 8011c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011c0a:	6093      	str	r3, [r2, #8]
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8011c0c:	2103      	movs	r1, #3
 8011c0e:	4608      	mov	r0, r1
 8011c10:	2200      	movs	r2, #0
 8011c12:	f002 fa93 	bl	801413c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */

  return;
}
 8011c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8011c1a:	2003      	movs	r0, #3
 8011c1c:	f002 bac0 	b.w	80141a0 <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8011c20:	68cb      	ldr	r3, [r1, #12]
 8011c22:	055b      	lsls	r3, r3, #21
 8011c24:	d5f2      	bpl.n	8011c0c <HW_TS_Init+0xb0>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8011c26:	2003      	movs	r0, #3
 8011c28:	f002 fadc 	bl	80141e4 <HAL_NVIC_SetPendingIRQ>
 8011c2c:	e7ee      	b.n	8011c0c <HW_TS_Init+0xb0>
 8011c2e:	bf00      	nop
 8011c30:	20000214 	.word	0x20000214
 8011c34:	40010400 	.word	0x40010400

08011c38 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8011c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c3c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011c40:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8011c42:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8011c88 <HW_TS_Create+0x50>
 8011c46:	2500      	movs	r5, #0
 8011c48:	f04f 0a18 	mov.w	sl, #24
 8011c4c:	fb0a 9405 	mla	r4, sl, r5, r9
 8011c50:	fa5f fe85 	uxtb.w	lr, r5
 8011c54:	f894 c014 	ldrb.w	ip, [r4, #20]
 8011c58:	f00c 06ff 	and.w	r6, ip, #255	; 0xff
 8011c5c:	f1bc 0f00 	cmp.w	ip, #0
 8011c60:	d10b      	bne.n	8011c7a <HW_TS_Create+0x42>
    loop++;
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8011c62:	2501      	movs	r5, #1
 8011c64:	7525      	strb	r5, [r4, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c66:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8011c6a:	61a0      	str	r0, [r4, #24]
    aTimerContext[loop].TimerMode = TimerMode;
 8011c6c:	7562      	strb	r2, [r4, #21]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8011c6e:	60a3      	str	r3, [r4, #8]
    *pTimerId = loop;
 8011c70:	f881 e000 	strb.w	lr, [r1]

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8011c74:	4630      	mov	r0, r6
 8011c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8011c7a:	3501      	adds	r5, #1
 8011c7c:	2d06      	cmp	r5, #6
 8011c7e:	d1e5      	bne.n	8011c4c <HW_TS_Create+0x14>
 8011c80:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 8011c84:	2601      	movs	r6, #1
  return(localreturnstatus);
 8011c86:	e7f5      	b.n	8011c74 <HW_TS_Create+0x3c>
 8011c88:	20000214 	.word	0x20000214

08011c8c <HW_TS_RTC_CountUpdated_AppNot>:
  }
}

__weak void HW_TS_RTC_CountUpdated_AppNot(void)
{
}
 8011c8c:	4770      	bx	lr
	...

08011c90 <RescheduleTimerList>:
{
 8011c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 8011c92:	4c3c      	ldr	r4, [pc, #240]	; (8011d84 <RescheduleTimerList+0xf4>)
 8011c94:	6827      	ldr	r7, [r4, #0]
 8011c96:	683b      	ldr	r3, [r7, #0]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 8011c98:	689a      	ldr	r2, [r3, #8]
 8011c9a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8011c9e:	d003      	beq.n	8011ca8 <RescheduleTimerList+0x18>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8011ca0:	68da      	ldr	r2, [r3, #12]
 8011ca2:	f012 0f04 	tst.w	r2, #4
 8011ca6:	e7fa      	b.n	8011c9e <RescheduleTimerList+0xe>
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8011ca8:	689a      	ldr	r2, [r3, #8]
 8011caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011cae:	609a      	str	r2, [r3, #8]
  localTimerID = CurrentRunningTimerID;
 8011cb0:	7923      	ldrb	r3, [r4, #4]
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8011cb2:	2218      	movs	r2, #24
  localTimerID = CurrentRunningTimerID;
 8011cb4:	b2de      	uxtb	r6, r3
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8011cb6:	fb02 4303 	mla	r3, r2, r3, r4
 8011cba:	691d      	ldr	r5, [r3, #16]
  time_elapsed = ReturnTimeElapsed();
 8011cbc:	f7ff ff2e 	bl	8011b1c <ReturnTimeElapsed>
  if(timecountleft < time_elapsed )
 8011cc0:	42a8      	cmp	r0, r5
 8011cc2:	d907      	bls.n	8011cd4 <RescheduleTimerList+0x44>
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
    wakeup_timer_value = 0;
 8011cca:	2300      	movs	r3, #0
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8011ccc:	2518      	movs	r5, #24
      aTimerContext[localTimerID].CountLeft = 0;
 8011cce:	f04f 0c00 	mov.w	ip, #0
 8011cd2:	e01e      	b.n	8011d12 <RescheduleTimerList+0x82>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8011cd4:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8011cd8:	fa10 f383 	uxtah	r3, r0, r3
 8011cdc:	42ab      	cmp	r3, r5
      wakeup_timer_value = MaxWakeupTimerSetup;
 8011cde:	bf39      	ittee	cc
 8011ce0:	f8b4 30a0 	ldrhcc.w	r3, [r4, #160]	; 0xa0
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8011ce4:	2200      	movcc	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 8011ce6:	1a2b      	subcs	r3, r5, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8011ce8:	2201      	movcs	r2, #1
      wakeup_timer_value = MaxWakeupTimerSetup;
 8011cea:	bf34      	ite	cc
 8011cec:	b29b      	uxthcc	r3, r3
      wakeup_timer_value = timecountleft - time_elapsed;
 8011cee:	b29b      	uxthcs	r3, r3
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8011cf0:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
 8011cf4:	e7ea      	b.n	8011ccc <RescheduleTimerList+0x3c>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8011cf6:	fb05 4206 	mla	r2, r5, r6, r4
    localTimerID = aTimerContext[localTimerID].NextID;
 8011cfa:	fb05 4606 	mla	r6, r5, r6, r4
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8011cfe:	6911      	ldr	r1, [r2, #16]
 8011d00:	4288      	cmp	r0, r1
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8011d02:	bf97      	itett	ls
 8011d04:	6911      	ldrls	r1, [r2, #16]
      aTimerContext[localTimerID].CountLeft = 0;
 8011d06:	f8c2 c010 	strhi.w	ip, [r2, #16]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8011d0a:	1a09      	subls	r1, r1, r0
 8011d0c:	6111      	strls	r1, [r2, #16]
    localTimerID = aTimerContext[localTimerID].NextID;
 8011d0e:	7f76      	ldrb	r6, [r6, #29]
 8011d10:	b2f6      	uxtb	r6, r6
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8011d12:	2e06      	cmp	r6, #6
 8011d14:	d1ef      	bne.n	8011cf6 <RescheduleTimerList+0x66>
  if(Value == 0)
 8011d16:	b943      	cbnz	r3, 8011d2a <RescheduleTimerList+0x9a>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8011d18:	f7ff feba 	bl	8011a90 <ReadRtcSsrValue>
 8011d1c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
}
 8011d20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8011d24:	2003      	movs	r0, #3
 8011d26:	f002 ba5d 	b.w	80141e4 <HAL_NVIC_SetPendingIRQ>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8011d2a:	2b01      	cmp	r3, #1
 8011d2c:	d803      	bhi.n	8011d36 <RescheduleTimerList+0xa6>
 8011d2e:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 8011d32:	2a01      	cmp	r2, #1
 8011d34:	d024      	beq.n	8011d80 <RescheduleTimerList+0xf0>
      Value -= 1;
 8011d36:	3b01      	subs	r3, #1
 8011d38:	b29d      	uxth	r5, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	68da      	ldr	r2, [r3, #12]
 8011d3e:	0752      	lsls	r2, r2, #29
 8011d40:	d5fc      	bpl.n	8011d3c <RescheduleTimerList+0xac>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8011d42:	68d9      	ldr	r1, [r3, #12]
 8011d44:	b2c9      	uxtb	r1, r1
 8011d46:	f461 6190 	orn	r1, r1, #1152	; 0x480
 8011d4a:	60d9      	str	r1, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8011d4c:	4b0e      	ldr	r3, [pc, #56]	; (8011d88 <RescheduleTimerList+0xf8>)
 8011d4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011d52:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8011d54:	2003      	movs	r0, #3
 8011d56:	f002 fa55 	bl	8014204 <HAL_NVIC_ClearPendingIRQ>
    LL_RTC_WAKEUP_SetAutoReload(phrtc->Instance, Value);
 8011d5a:	6826      	ldr	r6, [r4, #0]
 8011d5c:	6833      	ldr	r3, [r6, #0]
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 8011d5e:	695a      	ldr	r2, [r3, #20]
 8011d60:	0c12      	lsrs	r2, r2, #16
 8011d62:	0412      	lsls	r2, r2, #16
 8011d64:	432a      	orrs	r2, r5
 8011d66:	615a      	str	r2, [r3, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8011d68:	f7ff fe92 	bl	8011a90 <ReadRtcSsrValue>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8011d6c:	6832      	ldr	r2, [r6, #0]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8011d6e:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8011d72:	6893      	ldr	r3, [r2, #8]
 8011d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011d78:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8011d7a:	f7ff ff87 	bl	8011c8c <HW_TS_RTC_CountUpdated_AppNot>
}
 8011d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d80:	4615      	mov	r5, r2
 8011d82:	e7da      	b.n	8011d3a <RescheduleTimerList+0xaa>
 8011d84:	20000214 	.word	0x20000214
 8011d88:	40010400 	.word	0x40010400

08011d8c <HW_TS_Stop>:
{
 8011d8c:	b570      	push	{r4, r5, r6, lr}
 8011d8e:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d90:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d94:	b672      	cpsid	i
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8011d96:	4c1d      	ldr	r4, [pc, #116]	; (8011e0c <HW_TS_Stop+0x80>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8011d98:	2003      	movs	r0, #3
 8011d9a:	f002 fa0f 	bl	80141bc <HAL_NVIC_DisableIRQ>
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8011d9e:	2318      	movs	r3, #24
 8011da0:	fb03 4305 	mla	r3, r3, r5, r4
 8011da4:	7d1b      	ldrb	r3, [r3, #20]
 8011da6:	2b02      	cmp	r3, #2
 8011da8:	d124      	bne.n	8011df4 <HW_TS_Stop+0x68>
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8011daa:	2100      	movs	r1, #0
 8011dac:	4628      	mov	r0, r5
 8011dae:	f7ff fe7f 	bl	8011ab0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8011db2:	7923      	ldrb	r3, [r4, #4]
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8011db4:	2b06      	cmp	r3, #6
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8011db6:	b2da      	uxtb	r2, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8011db8:	d122      	bne.n	8011e00 <HW_TS_Stop+0x74>
      if(LL_RTC_WAKEUP_IsEnabled(phrtc->Instance) == SET)
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE));
 8011dbe:	689a      	ldr	r2, [r3, #8]
 8011dc0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8011dc4:	d003      	beq.n	8011dce <HW_TS_Stop+0x42>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8011dc6:	68da      	ldr	r2, [r3, #12]
 8011dc8:	f012 0f04 	tst.w	r2, #4
 8011dcc:	e7fa      	b.n	8011dc4 <HW_TS_Stop+0x38>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8011dce:	689a      	ldr	r2, [r3, #8]
 8011dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011dd4:	609a      	str	r2, [r3, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8011dd6:	68da      	ldr	r2, [r3, #12]
 8011dd8:	0752      	lsls	r2, r2, #29
 8011dda:	d5fc      	bpl.n	8011dd6 <HW_TS_Stop+0x4a>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8011ddc:	68da      	ldr	r2, [r3, #12]
 8011dde:	b2d2      	uxtb	r2, r2
 8011de0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8011de4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8011de6:	4b0a      	ldr	r3, [pc, #40]	; (8011e10 <HW_TS_Stop+0x84>)
 8011de8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011dec:	615a      	str	r2, [r3, #20]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8011dee:	2003      	movs	r0, #3
 8011df0:	f002 fa08 	bl	8014204 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8011df4:	2003      	movs	r0, #3
 8011df6:	f002 f9d3 	bl	80141a0 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dfa:	f386 8810 	msr	PRIMASK, r6
}
 8011dfe:	bd70      	pop	{r4, r5, r6, pc}
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8011e00:	7963      	ldrb	r3, [r4, #5]
 8011e02:	4293      	cmp	r3, r2
 8011e04:	d0f6      	beq.n	8011df4 <HW_TS_Stop+0x68>
      RescheduleTimerList();
 8011e06:	f7ff ff43 	bl	8011c90 <RescheduleTimerList>
 8011e0a:	e7f3      	b.n	8011df4 <HW_TS_Stop+0x68>
 8011e0c:	20000214 	.word	0x20000214
 8011e10:	40010400 	.word	0x40010400

08011e14 <HW_TS_Delete>:
{
 8011e14:	b510      	push	{r4, lr}
 8011e16:	4604      	mov	r4, r0
  HW_TS_Stop(timer_id);
 8011e18:	f7ff ffb8 	bl	8011d8c <HW_TS_Stop>
  aTimerContext[timer_id].TimerIDStatus = TimerID_Free; /**<  release ID */
 8011e1c:	4803      	ldr	r0, [pc, #12]	; (8011e2c <HW_TS_Delete+0x18>)
 8011e1e:	2318      	movs	r3, #24
 8011e20:	fb03 0404 	mla	r4, r3, r4, r0
 8011e24:	2300      	movs	r3, #0
 8011e26:	7523      	strb	r3, [r4, #20]
}
 8011e28:	bd10      	pop	{r4, pc}
 8011e2a:	bf00      	nop
 8011e2c:	20000214 	.word	0x20000214

08011e30 <HW_TS_Start>:
{
 8011e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e34:	4605      	mov	r5, r0
 8011e36:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e38:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011e3c:	b672      	cpsid	i
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8011e3e:	2003      	movs	r0, #3
 8011e40:	f002 f9bc 	bl	80141bc <HAL_NVIC_DisableIRQ>
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8011e44:	483b      	ldr	r0, [pc, #236]	; (8011f34 <HW_TS_Start+0x104>)
 8011e46:	f04f 0818 	mov.w	r8, #24
 8011e4a:	fb08 0705 	mla	r7, r8, r5, r0
 8011e4e:	2302      	movs	r3, #2
 8011e50:	753b      	strb	r3, [r7, #20]
  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8011e52:	613c      	str	r4, [r7, #16]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8011e54:	60fc      	str	r4, [r7, #12]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8011e56:	7903      	ldrb	r3, [r0, #4]
 8011e58:	2b06      	cmp	r3, #6
 8011e5a:	b2da      	uxtb	r2, r3
 8011e5c:	4604      	mov	r4, r0
 8011e5e:	d116      	bne.n	8011e8e <HW_TS_Start+0x5e>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8011e60:	7903      	ldrb	r3, [r0, #4]
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	7143      	strb	r3, [r0, #5]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8011e66:	f04f 33ff 	mov.w	r3, #4294967295
    CurrentRunningTimerID = TimerID;
 8011e6a:	7105      	strb	r5, [r0, #4]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8011e6c:	777a      	strb	r2, [r7, #29]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8011e6e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    time_elapsed = 0;
 8011e72:	2000      	movs	r0, #0
  localcurrentrunningtimerid = CurrentRunningTimerID;
 8011e74:	7923      	ldrb	r3, [r4, #4]
  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8011e76:	7962      	ldrb	r2, [r4, #5]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d053      	beq.n	8011f24 <HW_TS_Start+0xf4>
    RescheduleTimerList();
 8011e7c:	f7ff ff08 	bl	8011c90 <RescheduleTimerList>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8011e80:	2003      	movs	r0, #3
 8011e82:	f002 f98d 	bl	80141a0 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e86:	f386 8810 	msr	PRIMASK, r6
}
 8011e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    time_elapsed = ReturnTimeElapsed();
 8011e8e:	f7ff fe45 	bl	8011b1c <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	4403      	add	r3, r0
 8011e96:	613b      	str	r3, [r7, #16]
    time_left = aTimerContext[TimerID].CountLeft;
 8011e98:	6939      	ldr	r1, [r7, #16]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8011e9a:	7923      	ldrb	r3, [r4, #4]
 8011e9c:	fb08 4303 	mla	r3, r8, r3, r4
 8011ea0:	691b      	ldr	r3, [r3, #16]
 8011ea2:	4299      	cmp	r1, r3
 8011ea4:	d323      	bcc.n	8011eee <HW_TS_Start+0xbe>
      timer_id_lookup = CurrentRunningTimerID;
 8011ea6:	7922      	ldrb	r2, [r4, #4]
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8011ea8:	b2d3      	uxtb	r3, r2
        next_id = aTimerContext[timer_id_lookup].NextID;
 8011eaa:	fb08 4202 	mla	r2, r8, r2, r4
 8011eae:	7f52      	ldrb	r2, [r2, #29]
 8011eb0:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8011eb2:	2a06      	cmp	r2, #6
 8011eb4:	d004      	beq.n	8011ec0 <HW_TS_Start+0x90>
 8011eb6:	fb08 4202 	mla	r2, r8, r2, r4
 8011eba:	6912      	ldr	r2, [r2, #16]
 8011ebc:	4291      	cmp	r1, r2
 8011ebe:	d212      	bcs.n	8011ee6 <HW_TS_Start+0xb6>
  next_id = aTimerContext[RefTimerID].NextID;
 8011ec0:	2218      	movs	r2, #24
 8011ec2:	fb02 4103 	mla	r1, r2, r3, r4
 8011ec6:	7f49      	ldrb	r1, [r1, #29]
 8011ec8:	b2cf      	uxtb	r7, r1
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8011eca:	2906      	cmp	r1, #6
    aTimerContext[next_id].PreviousID = TimerID;
 8011ecc:	bf1c      	itt	ne
 8011ece:	fb02 4207 	mlane	r2, r2, r7, r4
 8011ed2:	7715      	strbne	r5, [r2, #28]
  aTimerContext[TimerID].NextID = next_id;
 8011ed4:	2218      	movs	r2, #24
 8011ed6:	fb02 4105 	mla	r1, r2, r5, r4
 8011eda:	774f      	strb	r7, [r1, #29]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8011edc:	770b      	strb	r3, [r1, #28]
  aTimerContext[RefTimerID].NextID = TimerID;
 8011ede:	fb02 4303 	mla	r3, r2, r3, r4
 8011ee2:	775d      	strb	r5, [r3, #29]
  return;
 8011ee4:	e7c6      	b.n	8011e74 <HW_TS_Start+0x44>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8011ee6:	fb08 4303 	mla	r3, r8, r3, r4
 8011eea:	7f5a      	ldrb	r2, [r3, #29]
 8011eec:	e7dc      	b.n	8011ea8 <HW_TS_Start+0x78>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8011eee:	7923      	ldrb	r3, [r4, #4]
  if(RefTimerID != CurrentRunningTimerID)
 8011ef0:	7922      	ldrb	r2, [r4, #4]
 8011ef2:	4293      	cmp	r3, r2
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8011ef4:	b2d9      	uxtb	r1, r3
  if(RefTimerID != CurrentRunningTimerID)
 8011ef6:	fb08 f303 	mul.w	r3, r8, r3
 8011efa:	d010      	beq.n	8011f1e <HW_TS_Start+0xee>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8011efc:	4423      	add	r3, r4
 8011efe:	7f1a      	ldrb	r2, [r3, #28]
    aTimerContext[previous_id].NextID = TimerID;
 8011f00:	fb08 4802 	mla	r8, r8, r2, r4
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8011f04:	fa5f fc82 	uxtb.w	ip, r2
    aTimerContext[previous_id].NextID = TimerID;
 8011f08:	f888 501d 	strb.w	r5, [r8, #29]
    aTimerContext[TimerID].NextID = RefTimerID;
 8011f0c:	7779      	strb	r1, [r7, #29]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8011f0e:	f887 c01c 	strb.w	ip, [r7, #28]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8011f12:	771d      	strb	r5, [r3, #28]
      PreviousRunningTimerID = CurrentRunningTimerID;
 8011f14:	7923      	ldrb	r3, [r4, #4]
 8011f16:	b2db      	uxtb	r3, r3
 8011f18:	7163      	strb	r3, [r4, #5]
      CurrentRunningTimerID = TimerID;
 8011f1a:	7125      	strb	r5, [r4, #4]
 8011f1c:	e7aa      	b.n	8011e74 <HW_TS_Start+0x44>
    aTimerContext[TimerID].NextID = RefTimerID;
 8011f1e:	7779      	strb	r1, [r7, #29]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8011f20:	4423      	add	r3, r4
 8011f22:	e7f6      	b.n	8011f12 <HW_TS_Start+0xe2>
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8011f24:	2318      	movs	r3, #24
 8011f26:	fb03 4405 	mla	r4, r3, r5, r4
 8011f2a:	6923      	ldr	r3, [r4, #16]
 8011f2c:	1a18      	subs	r0, r3, r0
 8011f2e:	6120      	str	r0, [r4, #16]
 8011f30:	e7a6      	b.n	8011e80 <HW_TS_Start+0x50>
 8011f32:	bf00      	nop
 8011f34:	20000214 	.word	0x20000214

08011f38 <HW_TS_RTC_Wakeup_Handler>:
{
 8011f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f3c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f40:	b672      	cpsid	i
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8011f42:	4920      	ldr	r1, [pc, #128]	; (8011fc4 <HW_TS_RTC_Wakeup_Handler+0x8c>)
 8011f44:	680b      	ldr	r3, [r1, #0]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	689a      	ldr	r2, [r3, #8]
 8011f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011f4e:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 8011f50:	790c      	ldrb	r4, [r1, #4]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8011f52:	2218      	movs	r2, #24
  local_current_running_timer_id = CurrentRunningTimerID;
 8011f54:	b2e6      	uxtb	r6, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8011f56:	fb02 1404 	mla	r4, r2, r4, r1
 8011f5a:	7d22      	ldrb	r2, [r4, #20]
 8011f5c:	2a02      	cmp	r2, #2
 8011f5e:	d124      	bne.n	8011faa <HW_TS_RTC_Wakeup_Handler+0x72>
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8011f60:	f8d4 8008 	ldr.w	r8, [r4, #8]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8011f64:	69a7      	ldr	r7, [r4, #24]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8011f66:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 8011f6a:	b1cb      	cbz	r3, 8011fa0 <HW_TS_RTC_Wakeup_Handler+0x68>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8011f6c:	7d63      	ldrb	r3, [r4, #21]
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	b2d9      	uxtb	r1, r3
 8011f72:	d10f      	bne.n	8011f94 <HW_TS_RTC_Wakeup_Handler+0x5c>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8011f74:	4630      	mov	r0, r6
 8011f76:	f7ff fd9b 	bl	8011ab0 <UnlinkTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f7a:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8011f7e:	68e1      	ldr	r1, [r4, #12]
 8011f80:	4630      	mov	r0, r6
 8011f82:	f7ff ff55 	bl	8011e30 <HW_TS_Start>
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8011f86:	4642      	mov	r2, r8
 8011f88:	4631      	mov	r1, r6
 8011f8a:	4638      	mov	r0, r7
 8011f8c:	f000 fdbc 	bl	8012b08 <HW_TS_RTC_Int_AppNot>
}
 8011f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f94:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Stop(local_current_running_timer_id);
 8011f98:	4630      	mov	r0, r6
 8011f9a:	f7ff fef7 	bl	8011d8c <HW_TS_Stop>
 8011f9e:	e7f2      	b.n	8011f86 <HW_TS_RTC_Wakeup_Handler+0x4e>
      RescheduleTimerList();
 8011fa0:	f7ff fe76 	bl	8011c90 <RescheduleTimerList>
 8011fa4:	f385 8810 	msr	PRIMASK, r5
  return;
 8011fa8:	e7f2      	b.n	8011f90 <HW_TS_RTC_Wakeup_Handler+0x58>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8011faa:	68da      	ldr	r2, [r3, #12]
 8011fac:	0752      	lsls	r2, r2, #29
 8011fae:	d5fc      	bpl.n	8011faa <HW_TS_RTC_Wakeup_Handler+0x72>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8011fb0:	68da      	ldr	r2, [r3, #12]
 8011fb2:	b2d2      	uxtb	r2, r2
 8011fb4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8011fb8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8011fba:	4b03      	ldr	r3, [pc, #12]	; (8011fc8 <HW_TS_RTC_Wakeup_Handler+0x90>)
 8011fbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011fc0:	615a      	str	r2, [r3, #20]
 8011fc2:	e7ef      	b.n	8011fa4 <HW_TS_RTC_Wakeup_Handler+0x6c>
 8011fc4:	20000214 	.word	0x20000214
 8011fc8:	40010400 	.word	0x40010400

08011fcc <hci_timeout_callback>:

  return;
}

void hci_timeout_callback(void)
{
 8011fcc:	b508      	push	{r3, lr}
  HciLayerTimeout = TRUE;
 8011fce:	4b04      	ldr	r3, [pc, #16]	; (8011fe0 <hci_timeout_callback+0x14>)
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	701a      	strb	r2, [r3, #0]

  /**
   * Unlock hci_send_req() that is waiting for an event that will never come
   */
  TL_BLE_HCI_RxCmdResp();
 8011fd4:	f000 f8df 	bl	8012196 <TL_BLE_HCI_RxCmdResp>
   * Notify the application the HCI interface has timed out
   */
  TL_BLE_HCI_ToNot();

  return;
}
 8011fd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TL_BLE_HCI_ToNot();
 8011fdc:	f000 b8de 	b.w	801219c <TL_BLE_HCI_ToNot>
 8011fe0:	200002b8 	.word	0x200002b8

08011fe4 <TL_BLE_EvtReceived>:
{
 8011fe4:	b508      	push	{r3, lr}
  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 8011fe6:	7a43      	ldrb	r3, [r0, #9]
 8011fe8:	3b0e      	subs	r3, #14
 8011fea:	2b01      	cmp	r3, #1
{
 8011fec:	4601      	mov	r1, r0
  if ( (evt_code == TL_EVT_CS_OPCODE) || (evt_code == TL_EVT_CC_OPCODE ) )
 8011fee:	d806      	bhi.n	8011ffe <TL_BLE_EvtReceived+0x1a>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8011ff0:	4807      	ldr	r0, [pc, #28]	; (8012010 <TL_BLE_EvtReceived+0x2c>)
 8011ff2:	f000 fa40 	bl	8012476 <LST_insert_tail>
}
 8011ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TL_BLE_HCI_RxCmdResp(); /**< Notify the application a full Cmd Event has been received */
 8011ffa:	f000 b8cc 	b.w	8012196 <TL_BLE_HCI_RxCmdResp>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8011ffe:	4805      	ldr	r0, [pc, #20]	; (8012014 <TL_BLE_EvtReceived+0x30>)
 8012000:	f000 fa39 	bl	8012476 <LST_insert_tail>
}
 8012004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TL_BLE_HCI_UserEvtProcReq((TL_PacketHeader_t*)&HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8012008:	4802      	ldr	r0, [pc, #8]	; (8012014 <TL_BLE_EvtReceived+0x30>)
 801200a:	f000 b8e1 	b.w	80121d0 <TL_BLE_HCI_UserEvtProcReq>
 801200e:	bf00      	nop
 8012010:	200002b9 	.word	0x200002b9
 8012014:	200002c1 	.word	0x200002c1

08012018 <TL_BLE_HCI_Init>:

void TL_BLE_HCI_Init(TL_BLE_HCI_InitMode_t initmode, TL_CmdPacket_t * p_cmdbuffer, uint8_t *p_evtpool, uint32_t evtpoolsize)
{
 8012018:	b530      	push	{r4, r5, lr}
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 801201a:	4c18      	ldr	r4, [pc, #96]	; (801207c <TL_BLE_HCI_Init+0x64>)
{
 801201c:	b085      	sub	sp, #20
 801201e:	4605      	mov	r5, r0
  LST_init_head (&HciCmdEventQueue);
 8012020:	1c60      	adds	r0, r4, #1
{
 8012022:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012026:	9301      	str	r3, [sp, #4]
  LST_init_head (&HciCmdEventQueue);
 8012028:	f000 fa18 	bl	801245c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;

  if(initmode == TL_BLE_HCI_InitFull)
 801202c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
  pCmdBuffer = p_cmdbuffer;
 8012030:	9903      	ldr	r1, [sp, #12]
 8012032:	6161      	str	r1, [r4, #20]
  if(initmode == TL_BLE_HCI_InitFull)
 8012034:	2d01      	cmp	r5, #1
 8012036:	9303      	str	r3, [sp, #12]
 8012038:	d111      	bne.n	801205e <TL_BLE_HCI_Init+0x46>
  LST_init_head (&HciAsynchEventQueue);
 801203a:	f104 0009 	add.w	r0, r4, #9
 801203e:	9101      	str	r1, [sp, #4]
 8012040:	f000 fa0c 	bl	801245c <LST_init_head>
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8012044:	4628      	mov	r0, r5
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 8012046:	7625      	strb	r5, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8012048:	f000 fd44 	bl	8012ad4 <TL_BLE_HCI_StatusNot>
  {
    Initialization();

    TL_BLE_Init(TL_BLE_Init_Full, p_cmdbuffer, p_evtpool, evtpoolsize);
 801204c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012050:	9901      	ldr	r1, [sp, #4]
 8012052:	4628      	mov	r0, r5

    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
  }

  return;
}
 8012054:	b005      	add	sp, #20
 8012056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 801205a:	f000 b987 	b.w	801236c <TL_BLE_Init>
  LST_init_head (&HciAsynchEventQueue);
 801205e:	f104 0009 	add.w	r0, r4, #9
 8012062:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012066:	f000 f9f9 	bl	801245c <LST_init_head>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 801206a:	2001      	movs	r0, #1
 801206c:	7620      	strb	r0, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 801206e:	f000 fd31 	bl	8012ad4 <TL_BLE_HCI_StatusNot>
    TL_BLE_Init(TL_BLE_Init_Limited, p_cmdbuffer, p_evtpool, evtpoolsize);
 8012072:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012076:	9901      	ldr	r1, [sp, #4]
 8012078:	2000      	movs	r0, #0
 801207a:	e7eb      	b.n	8012054 <TL_BLE_HCI_Init+0x3c>
 801207c:	200002b8 	.word	0x200002b8

08012080 <TL_BLE_HCI_UserEvtProc>:
{
  return HCICmdStatus;
}

void TL_BLE_HCI_UserEvtProc(void)
{
 8012080:	b513      	push	{r0, r1, r4, lr}
  TL_EvtPacket_t *phcievtbuffer;

  while(LST_is_empty(&HciAsynchEventQueue) == FALSE)
 8012082:	4c09      	ldr	r4, [pc, #36]	; (80120a8 <TL_BLE_HCI_UserEvtProc+0x28>)
 8012084:	4808      	ldr	r0, [pc, #32]	; (80120a8 <TL_BLE_HCI_UserEvtProc+0x28>)
 8012086:	f000 f9ec 	bl	8012462 <LST_is_empty>
 801208a:	b108      	cbz	r0, 8012090 <TL_BLE_HCI_UserEvtProc+0x10>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
    TL_BLE_EvtDone( phcievtbuffer);
  }

  return;
}
 801208c:	b002      	add	sp, #8
 801208e:	bd10      	pop	{r4, pc}
    LST_remove_head (&HciAsynchEventQueue, (tListNode **)&phcievtbuffer);
 8012090:	a901      	add	r1, sp, #4
 8012092:	4620      	mov	r0, r4
 8012094:	f000 fa06 	bl	80124a4 <LST_remove_head>
    TL_BLE_HCI_UserEvtRx((void*)&(phcievtbuffer->evtserial));
 8012098:	9801      	ldr	r0, [sp, #4]
 801209a:	3008      	adds	r0, #8
 801209c:	f000 f89b 	bl	80121d6 <TL_BLE_HCI_UserEvtRx>
    TL_BLE_EvtDone( phcievtbuffer);
 80120a0:	9801      	ldr	r0, [sp, #4]
 80120a2:	f000 f9d9 	bl	8012458 <TL_BLE_EvtDone>
 80120a6:	e7ed      	b.n	8012084 <TL_BLE_HCI_UserEvtProc+0x4>
 80120a8:	200002c1 	.word	0x200002c1

080120ac <TL_BLE_HCI_SendCmd>:

int32_t TL_BLE_HCI_SendCmd( TL_BLE_HCI_Cmd_t *p_cmd )
{
 80120ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80120b0:	4605      	mov	r5, r0
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdBusy);
 80120b2:	2000      	movs	r0, #0
 80120b4:	f000 fd0e 	bl	8012ad4 <TL_BLE_HCI_StatusNot>
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  int return_value;

  Cmd_SetStatus(TL_BLE_HCI_CmdBusy);
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80120b8:	886b      	ldrh	r3, [r5, #2]
 80120ba:	882a      	ldrh	r2, [r5, #0]
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 80120bc:	4c31      	ldr	r4, [pc, #196]	; (8012184 <TL_BLE_HCI_SendCmd+0xd8>)
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80120be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80120c2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80120c6:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  return return_value;
}

void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80120ca:	6960      	ldr	r0, [r4, #20]
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 80120cc:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80120ce:	f8a0 3009 	strh.w	r3, [r0, #9]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80120d2:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.plen = plen;
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80120d4:	b2d2      	uxtb	r2, r2
 80120d6:	300c      	adds	r0, #12
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80120d8:	b29f      	uxth	r7, r3
    HCICmdStatus = TL_BLE_HCI_CmdBusy;
 80120da:	7626      	strb	r6, [r4, #24]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80120dc:	f003 f896 	bl	801520c <memcpy>

  TL_BLE_SendCmd();
 80120e0:	f000 f96c 	bl	80123bc <TL_BLE_SendCmd>
  HciLayerTimeout = FALSE;
 80120e4:	4622      	mov	r2, r4
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 80120e6:	4928      	ldr	r1, [pc, #160]	; (8012188 <TL_BLE_HCI_SendCmd+0xdc>)
  HciLayerTimeout = FALSE;
 80120e8:	f802 6b19 	strb.w	r6, [r2], #25
  TL_BLE_HCI_TimStart(DEFAULT_TIMEOUT, hci_timeout_callback, (uint8_t*)&hci_timer_id);
 80120ec:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80120f0:	f000 f85a 	bl	80121a8 <TL_BLE_HCI_TimStart>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80120f4:	f104 0801 	add.w	r8, r4, #1
  return HCICmdStatus;
 80120f8:	7e23      	ldrb	r3, [r4, #24]
  while((CmdGetStatus() == TL_BLE_HCI_CmdBusy) && (HciLayerTimeout == FALSE))
 80120fa:	b90b      	cbnz	r3, 8012100 <TL_BLE_HCI_SendCmd+0x54>
 80120fc:	7823      	ldrb	r3, [r4, #0]
 80120fe:	b15b      	cbz	r3, 8012118 <TL_BLE_HCI_SendCmd+0x6c>
  TL_BLE_HCI_TimStop(hci_timer_id);
 8012100:	7e60      	ldrb	r0, [r4, #25]
 8012102:	f000 f84f 	bl	80121a4 <TL_BLE_HCI_TimStop>
  if(HciLayerTimeout == TRUE)
 8012106:	7820      	ldrb	r0, [r4, #0]
}
 8012108:	2801      	cmp	r0, #1
 801210a:	f04f 30ff 	mov.w	r0, #4294967295
 801210e:	bf18      	it	ne
 8012110:	2000      	movne	r0, #0
 8012112:	b003      	add	sp, #12
 8012114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TL_BLE_HCI_WaitCmdResp();
 8012118:	f000 f841 	bl	801219e <TL_BLE_HCI_WaitCmdResp>
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 801211c:	f04f 0901 	mov.w	r9, #1
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8012120:	4640      	mov	r0, r8
 8012122:	f000 f99e 	bl	8012462 <LST_is_empty>
 8012126:	2800      	cmp	r0, #0
 8012128:	d1e6      	bne.n	80120f8 <TL_BLE_HCI_SendCmd+0x4c>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 801212a:	a901      	add	r1, sp, #4
 801212c:	4640      	mov	r0, r8
 801212e:	f000 f9b9 	bl	80124a4 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_EVT_CS_OPCODE)
 8012132:	9e01      	ldr	r6, [sp, #4]
 8012134:	7a73      	ldrb	r3, [r6, #9]
 8012136:	2b0f      	cmp	r3, #15
 8012138:	d111      	bne.n	801215e <TL_BLE_HCI_SendCmd+0xb2>
        if(pcommand_status_event->cmdcode == opcode)
 801213a:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 801213e:	42bb      	cmp	r3, r7
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8012140:	bf02      	ittt	eq
 8012142:	692b      	ldreq	r3, [r5, #16]
 8012144:	7af2      	ldrbeq	r2, [r6, #11]
 8012146:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 8012148:	7b33      	ldrb	r3, [r6, #12]
        if(pcommand_complete_event->numcmd != 0)
 801214a:	b123      	cbz	r3, 8012156 <TL_BLE_HCI_SendCmd+0xaa>
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 801214c:	2001      	movs	r0, #1
    HCICmdStatus = TL_BLE_HCI_CmdAvailable;
 801214e:	f884 9018 	strb.w	r9, [r4, #24]
    TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdAvailable);
 8012152:	f000 fcbf 	bl	8012ad4 <TL_BLE_HCI_StatusNot>
      TL_BLE_EvtDone( pevtpacket);
 8012156:	9801      	ldr	r0, [sp, #4]
 8012158:	f000 f97e 	bl	8012458 <TL_BLE_EvtDone>
 801215c:	e7e0      	b.n	8012120 <TL_BLE_HCI_SendCmd+0x74>
        if(pcommand_complete_event->cmdcode == opcode)
 801215e:	89b3      	ldrh	r3, [r6, #12]
 8012160:	42bb      	cmp	r3, r7
 8012162:	d10c      	bne.n	801217e <TL_BLE_HCI_SendCmd+0xd2>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 8012164:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8012166:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8012168:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_CC_HDR_SIZE;
 801216a:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801216c:	b2d2      	uxtb	r2, r2
 801216e:	429a      	cmp	r2, r3
 8012170:	bfa8      	it	ge
 8012172:	461a      	movge	r2, r3
 8012174:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8012176:	f106 010e 	add.w	r1, r6, #14
 801217a:	f003 f847 	bl	801520c <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 801217e:	7af3      	ldrb	r3, [r6, #11]
 8012180:	e7e3      	b.n	801214a <TL_BLE_HCI_SendCmd+0x9e>
 8012182:	bf00      	nop
 8012184:	200002b8 	.word	0x200002b8
 8012188:	08011fcd 	.word	0x08011fcd

0801218c <hci_send_req>:


/* This API is imposed by the MW */
int32_t hci_send_req(struct hci_request *r, uint8_t async)
{
  return ( TL_BLE_HCI_SendCmd( (TL_BLE_HCI_Cmd_t *)r ) );
 801218c:	f7ff bf8e 	b.w	80120ac <TL_BLE_HCI_SendCmd>

08012190 <TL_BLE_R_EvtProcReq>:



void TL_BLE_R_EvtProcReq(void)
{
  SCH_SetTask(CFG_IdleTask_TlEvt);
 8012190:	2000      	movs	r0, #0
 8012192:	f000 ba43 	b.w	801261c <SCH_SetTask>

08012196 <TL_BLE_HCI_RxCmdResp>:
  return;
}

void TL_BLE_HCI_RxCmdResp()
{
  SCH_SetEvt(CFG_IdleEvt_HciCmdEvtResp);
 8012196:	2000      	movs	r0, #0
 8012198:	f000 ba72 	b.w	8012680 <SCH_SetEvt>

0801219c <TL_BLE_HCI_ToNot>:
}

void TL_BLE_HCI_ToNot(void)
{
  return;
}
 801219c:	4770      	bx	lr

0801219e <TL_BLE_HCI_WaitCmdResp>:

void TL_BLE_HCI_WaitCmdResp(void)
{
  SCH_WaitEvt(CFG_IdleEvt_HciCmdEvtResp);
 801219e:	2000      	movs	r0, #0
 80121a0:	f000 bab0 	b.w	8012704 <SCH_WaitEvt>

080121a4 <TL_BLE_HCI_TimStop>:
  return;
}

void TL_BLE_HCI_TimStop(uint8_t timerID)
{
  HW_TS_Delete(timerID);
 80121a4:	f7ff be36 	b.w	8011e14 <HW_TS_Delete>

080121a8 <TL_BLE_HCI_TimStart>:

  return;
}

void TL_BLE_HCI_TimStart(uint32_t expiryTime, void(*timercb)(void), uint8_t *timerID)
{
 80121a8:	b538      	push	{r3, r4, r5, lr}
 80121aa:	4614      	mov	r4, r2
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 80121ac:	2200      	movs	r2, #0
{
 80121ae:	460b      	mov	r3, r1
 80121b0:	4605      	mov	r5, r0
  HW_TS_Create(CFG_TimProcID_isr, timerID, hw_ts_SingleShot, (HW_TS_pTimerCb_t) timercb);
 80121b2:	4621      	mov	r1, r4
 80121b4:	4610      	mov	r0, r2
 80121b6:	f7ff fd3f 	bl	8011c38 <HW_TS_Create>
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 80121ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80121be:	434d      	muls	r5, r1
 80121c0:	7820      	ldrb	r0, [r4, #0]
 80121c2:	213f      	movs	r1, #63	; 0x3f
 80121c4:	fbb5 f1f1 	udiv	r1, r5, r1

  return;
}
 80121c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HW_TS_Start(*timerID, expiryTime*1000/CFG_TS_TICK_VAL);
 80121cc:	f7ff be30 	b.w	8011e30 <HW_TS_Start>

080121d0 <TL_BLE_HCI_UserEvtProcReq>:
 * @param  None
 * @retval None
 */
void TL_BLE_HCI_UserEvtProcReq( TL_PacketHeader_t *p_userevt_queue )
{
  SCH_SetTask(CFG_IdleTask_HciAsynchEvt);
 80121d0:	2005      	movs	r0, #5
 80121d2:	f000 ba23 	b.w	801261c <SCH_SetTask>

080121d6 <TL_BLE_HCI_UserEvtRx>:
 * @param  pckt: The user event received from the BlueNRG device
 * @retval None
 */
void TL_BLE_HCI_UserEvtRx(void *pckt)
{
  SVCCTL_HCI_UserEvtRx(pckt);
 80121d6:	f7fe bf8f 	b.w	80110f8 <SVCCTL_HCI_UserEvtRx>
	...

080121dc <Event_Queue_Process>:
  return;
}

/* Private Functions Definition ------------------------------------------------------*/
static void Event_Queue_Process(TL_BLE_R_EvtPacketType_t tl_event_queue_type)
{
 80121dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80121e0:	4e32      	ldr	r6, [pc, #200]	; (80122ac <Event_Queue_Process+0xd0>)
  TL_EvtPacket_t * ptl_evt_buffer;
  TL_EvtPacket_t *plarge_hci_buffer;

  if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 80121e2:	4605      	mov	r5, r0
 80121e4:	2800      	cmp	r0, #0
 80121e6:	d05e      	beq.n	80122a6 <Event_Queue_Process+0xca>
  {
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
  }
  else
  {
    plarge_hci_buffer = (TL_EvtPacket_t*)pCmdBuffer;
 80121e8:	f8d6 710c 	ldr.w	r7, [r6, #268]	; 0x10c
  }

  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 80121ec:	4b30      	ldr	r3, [pc, #192]	; (80122b0 <Event_Queue_Process+0xd4>)
 80121ee:	240e      	movs	r4, #14
 80121f0:	436c      	muls	r4, r5
 80121f2:	eb03 0804 	add.w	r8, r3, r4
  {
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 80121f6:	4434      	add	r4, r6
 80121f8:	e02e      	b.n	8012258 <Event_Queue_Process+0x7c>
    LST_remove_head (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue, (tListNode **)&ptl_evt_buffer);
 80121fa:	4640      	mov	r0, r8
 80121fc:	a901      	add	r1, sp, #4
 80121fe:	f000 f951 	bl	80124a4 <LST_remove_head>
    if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_start)
 8012202:	f894 9118 	ldrb.w	r9, [r4, #280]	; 0x118
 8012206:	9801      	ldr	r0, [sp, #4]
 8012208:	f1b9 0f00 	cmp.w	r9, #0
 801220c:	d103      	bne.n	8012216 <Event_Queue_Process+0x3a>
    {
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl = ptl_evt_buffer->evtserial.evt.plen + TL_EVT_HDR_SIZE;
 801220e:	7a83      	ldrb	r3, [r0, #10]
 8012210:	3303      	adds	r3, #3
 8012212:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
    }

    if(TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl > TL_BLE_EVENT_FRAME_SIZE)
 8012216:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
 801221a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 801221e:	d928      	bls.n	8012272 <Event_Queue_Process+0x96>
      /**
       * The packet is not complete
       */
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 8012220:	f8b4 c11c 	ldrh.w	ip, [r4, #284]	; 0x11c
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_cont;
 8012224:	2301      	movs	r3, #1
 8012226:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 801222a:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 801222e:	f107 0308 	add.w	r3, r7, #8
 8012232:	f100 0108 	add.w	r1, r0, #8
      TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl -= TL_BLE_EVENT_FRAME_SIZE;
 8012236:	f8a4 211a 	strh.w	r2, [r4, #282]	; 0x11a
      memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TL_BLE_EVENT_FRAME_SIZE);
 801223a:	eb03 000c 	add.w	r0, r3, ip
 801223e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012242:	f002 ffe3 	bl	801520c <memcpy>
      MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 8012246:	9801      	ldr	r0, [sp, #4]
 8012248:	f000 f9c6 	bl	80125d8 <MM_ReleaseBuffer>
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset += TL_BLE_EVENT_FRAME_SIZE;
 801224c:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8012250:	f503 7381 	add.w	r3, r3, #258	; 0x102
      else
      {
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
      }
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
      TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset  = 0;
 8012254:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  while((LST_is_empty (&TLQueueEvtContext[tl_event_queue_type].TlBufferQueue) == FALSE) && ((HciAsynchEventLargeBufferStatus == HciAsynchEventLargeBuffer_Free) || (tl_event_queue_type == TL_BLE_R_HciCmdEvt)))
 8012258:	4640      	mov	r0, r8
 801225a:	f000 f902 	bl	8012462 <LST_is_empty>
 801225e:	b928      	cbnz	r0, 801226c <Event_Queue_Process+0x90>
 8012260:	f896 312c 	ldrb.w	r3, [r6, #300]	; 0x12c
 8012264:	2b00      	cmp	r3, #0
 8012266:	d0c8      	beq.n	80121fa <Event_Queue_Process+0x1e>
 8012268:	2d01      	cmp	r5, #1
 801226a:	d0c6      	beq.n	80121fa <Event_Queue_Process+0x1e>
    }
  }

  return;
}
 801226c:	b003      	add	sp, #12
 801226e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(TLQueueEvtContext[tl_event_queue_type].HciPacketStatus == hci_packet_cont)
 8012272:	f1b9 0f01 	cmp.w	r9, #1
 8012276:	d110      	bne.n	801229a <Event_Queue_Process+0xbe>
        memcpy((uint8_t*)&plarge_hci_buffer->evtserial + TLQueueEvtContext[tl_event_queue_type].HciLargeBufferOffset, &ptl_evt_buffer->evtserial, TLQueueEvtContext[tl_event_queue_type].HciPacketLengthOfDataLeftToReceiveFromTl);
 8012278:	f8b4 c11c 	ldrh.w	ip, [r4, #284]	; 0x11c
 801227c:	f107 0308 	add.w	r3, r7, #8
 8012280:	f100 0108 	add.w	r1, r0, #8
 8012284:	eb03 000c 	add.w	r0, r3, ip
 8012288:	f002 ffc0 	bl	801520c <memcpy>
        MM_ReleaseBuffer((MM_pBufAdd_t)ptl_evt_buffer);
 801228c:	9801      	ldr	r0, [sp, #4]
 801228e:	f000 f9a3 	bl	80125d8 <MM_ReleaseBuffer>
        if(tl_event_queue_type == TL_BLE_R_HciAsynchEvt)
 8012292:	b90d      	cbnz	r5, 8012298 <Event_Queue_Process+0xbc>
          HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Busy;
 8012294:	f886 912c 	strb.w	r9, [r6, #300]	; 0x12c
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)plarge_hci_buffer );
 8012298:	4638      	mov	r0, r7
        TL_BLE_EvtReceived( (TL_EvtPacket_t *)ptl_evt_buffer );
 801229a:	f7ff fea3 	bl	8011fe4 <TL_BLE_EvtReceived>
      TLQueueEvtContext[tl_event_queue_type].HciPacketStatus = hci_packet_start;
 801229e:	2300      	movs	r3, #0
 80122a0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 80122a4:	e7d6      	b.n	8012254 <Event_Queue_Process+0x78>
    plarge_hci_buffer = (TL_EvtPacket_t *)&HciLargeAsynchBuffer;
 80122a6:	4637      	mov	r7, r6
 80122a8:	e7a0      	b.n	80121ec <Event_Queue_Process+0x10>
 80122aa:	bf00      	nop
 80122ac:	200002d4 	.word	0x200002d4
 80122b0:	200003e4 	.word	0x200003e4

080122b4 <TL_BLE_R_EvtInput>:
{
 80122b4:	b508      	push	{r3, lr}
  LST_insert_tail (&TLQueueEvtContext[hci_evt_packet_type].TlBufferQueue, (tListNode *)hci_evt_buffer);
 80122b6:	4b05      	ldr	r3, [pc, #20]	; (80122cc <TL_BLE_R_EvtInput+0x18>)
 80122b8:	220e      	movs	r2, #14
 80122ba:	fb02 3000 	mla	r0, r2, r0, r3
 80122be:	f000 f8da 	bl	8012476 <LST_insert_tail>
}
 80122c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TL_BLE_R_EvtProcReq();
 80122c6:	f7ff bf63 	b.w	8012190 <TL_BLE_R_EvtProcReq>
 80122ca:	bf00      	nop
 80122cc:	200003e4 	.word	0x200003e4

080122d0 <TL_BLE_R_EvtProc>:
{
 80122d0:	b508      	push	{r3, lr}
  Event_Queue_Process(TL_BLE_R_HciCmdEvt);
 80122d2:	2001      	movs	r0, #1
 80122d4:	f7ff ff82 	bl	80121dc <Event_Queue_Process>
}
 80122d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Event_Queue_Process(TL_BLE_R_HciAsynchEvt);
 80122dc:	2000      	movs	r0, #0
 80122de:	f7ff bf7d 	b.w	80121dc <Event_Queue_Process>
	...

080122e4 <TL_BLE_R_Init>:
{
 80122e4:	b538      	push	{r3, r4, r5, lr}
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 80122e6:	4c0c      	ldr	r4, [pc, #48]	; (8012318 <TL_BLE_R_Init+0x34>)
 80122e8:	2300      	movs	r3, #0
{
 80122ea:	4605      	mov	r5, r0
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 80122ec:	f504 7088 	add.w	r0, r4, #272	; 0x110
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciPacketStatus = hci_packet_start;
 80122f0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciPacketStatus = hci_packet_start;
 80122f4:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
  TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].HciLargeBufferOffset = 0;
 80122f8:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  TLQueueEvtContext[TL_BLE_R_HciCmdEvt].HciLargeBufferOffset = 0;
 80122fc:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
  HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 8012300:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciAsynchEvt].TlBufferQueue);
 8012304:	f000 f8aa 	bl	801245c <LST_init_head>
  LST_init_head (&TLQueueEvtContext[TL_BLE_R_HciCmdEvt].TlBufferQueue);
 8012308:	f504 708f 	add.w	r0, r4, #286	; 0x11e
 801230c:	f000 f8a6 	bl	801245c <LST_init_head>
  pCmdBuffer = cmdbuffer;
 8012310:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
}
 8012314:	bd38      	pop	{r3, r4, r5, pc}
 8012316:	bf00      	nop
 8012318:	200002d4 	.word	0x200002d4

0801231c <TL_BLE_R_EvtDone>:

void TL_BLE_R_EvtDone(TL_EvtPacket_t * hcievt)
{
  if(hcievt == (TL_EvtPacket_t *)&HciLargeAsynchBuffer)
 801231c:	4a07      	ldr	r2, [pc, #28]	; (801233c <TL_BLE_R_EvtDone+0x20>)
 801231e:	4290      	cmp	r0, r2
 8012320:	d104      	bne.n	801232c <TL_BLE_R_EvtDone+0x10>
  {
    HciAsynchEventLargeBufferStatus = HciAsynchEventLargeBuffer_Free;
 8012322:	2200      	movs	r2, #0
 8012324:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c

    /**
     * Check if there are waiting events to be copied in the large buffer
     */
    TL_BLE_R_EvtProcReq();
 8012328:	f7ff bf32 	b.w	8012190 <TL_BLE_R_EvtProcReq>
  }
  else if(hcievt != (TL_EvtPacket_t *)pCmdBuffer)
 801232c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8012330:	4282      	cmp	r2, r0
 8012332:	d001      	beq.n	8012338 <TL_BLE_R_EvtDone+0x1c>
  {
    MM_ReleaseBuffer((MM_pBufAdd_t)hcievt);
 8012334:	f000 b950 	b.w	80125d8 <MM_ReleaseBuffer>
  }

  return;
}
 8012338:	4770      	bx	lr
 801233a:	bf00      	nop
 801233c:	200002d4 	.word	0x200002d4

08012340 <Allocate_New_Buffer_To_TL>:
}


/* Private Functions Definition ------------------------------------------------------*/
static void Allocate_New_Buffer_To_TL(void)
{
 8012340:	b508      	push	{r3, lr}
  pHciEventBuffer =  (TL_EvtPacket_t*) MM_GetBuffer(sizeof(TL_PacketHeader_t) + TL_BLE_EVENT_FRAME_SIZE, (MM_pCb_t) Allocate_New_Buffer_To_TL);
 8012342:	4908      	ldr	r1, [pc, #32]	; (8012364 <Allocate_New_Buffer_To_TL+0x24>)
 8012344:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8012348:	f000 f92c 	bl	80125a4 <MM_GetBuffer>
 801234c:	4b06      	ldr	r3, [pc, #24]	; (8012368 <Allocate_New_Buffer_To_TL+0x28>)
 801234e:	6018      	str	r0, [r3, #0]
  if(pHciEventBuffer)
 8012350:	b138      	cbz	r0, 8012362 <Allocate_New_Buffer_To_TL+0x22>
  {
    TlSpiIsrContext.TlSizeLeftInBufferFrame = TL_BLE_EVENT_FRAME_SIZE;
 8012352:	f44f 7181 	mov.w	r1, #258	; 0x102
 8012356:	8119      	strh	r1, [r3, #8]
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 8012358:	3008      	adds	r0, #8
  }

  return;
}
 801235a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HW_BNRG_EvtReq((uint8_t *)&(pHciEventBuffer->evtserial), TL_BLE_EVENT_FRAME_SIZE);
 801235e:	f7ff b9f5 	b.w	801174c <HW_BNRG_EvtReq>
}
 8012362:	bd08      	pop	{r3, pc}
 8012364:	08012341 	.word	0x08012341
 8012368:	20000404 	.word	0x20000404

0801236c <TL_BLE_Init>:
{
 801236c:	b570      	push	{r4, r5, r6, lr}
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 801236e:	4e11      	ldr	r6, [pc, #68]	; (80123b4 <TL_BLE_Init+0x48>)
{
 8012370:	4604      	mov	r4, r0
 8012372:	4610      	mov	r0, r2
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8012374:	2200      	movs	r2, #0
{
 8012376:	460d      	mov	r5, r1
  TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8012378:	7132      	strb	r2, [r6, #4]
  MM_Init(evtpool, evtpoolsize, ELT_SIZE);
 801237a:	4619      	mov	r1, r3
 801237c:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8012380:	f000 f8f0 	bl	8012564 <MM_Init>
  TL_BLE_R_Init(cmdbuffer);
 8012384:	4628      	mov	r0, r5
  pCmdBuffer = cmdbuffer;
 8012386:	60f5      	str	r5, [r6, #12]
  TL_BLE_R_Init(cmdbuffer);
 8012388:	f7ff ffac 	bl	80122e4 <TL_BLE_R_Init>
  if( initmode == TL_BLE_Init_Limited)
 801238c:	b934      	cbnz	r4, 801239c <TL_BLE_Init+0x30>
    HW_BNRG_Init(HW_BNRG_Limited);
 801238e:	4620      	mov	r0, r4
 8012390:	f7ff f93e 	bl	8011610 <HW_BNRG_Init>
}
 8012394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Allocate_New_Buffer_To_TL();
 8012398:	f7ff bfd2 	b.w	8012340 <Allocate_New_Buffer_To_TL>
    HW_BNRG_Init(HW_BNRG_Full);
 801239c:	2001      	movs	r0, #1
 801239e:	f7ff f937 	bl	8011610 <HW_BNRG_Init>
    while(HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_RESET);
 80123a2:	4c05      	ldr	r4, [pc, #20]	; (80123b8 <TL_BLE_Init+0x4c>)
 80123a4:	2140      	movs	r1, #64	; 0x40
 80123a6:	4620      	mov	r0, r4
 80123a8:	f002 fa06 	bl	80147b8 <HAL_GPIO_ReadPin>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	d0f9      	beq.n	80123a4 <TL_BLE_Init+0x38>
 80123b0:	e7f0      	b.n	8012394 <TL_BLE_Init+0x28>
 80123b2:	bf00      	nop
 80123b4:	20000404 	.word	0x20000404
 80123b8:	48001000 	.word	0x48001000

080123bc <TL_BLE_SendCmd>:
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80123bc:	4b04      	ldr	r3, [pc, #16]	; (80123d0 <TL_BLE_SendCmd+0x14>)
 80123be:	68d8      	ldr	r0, [r3, #12]
  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 80123c0:	7ac1      	ldrb	r1, [r0, #11]
  pCmdBuffer->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80123c2:	2301      	movs	r3, #1
 80123c4:	7203      	strb	r3, [r0, #8]
  HW_BNRG_Send( (uint8_t *)&pCmdBuffer->cmdserial, 4 + pCmdBuffer->cmdserial.cmd.plen );
 80123c6:	3104      	adds	r1, #4
 80123c8:	3008      	adds	r0, #8
 80123ca:	f7ff ba57 	b.w	801187c <HW_BNRG_Send>
 80123ce:	bf00      	nop
 80123d0:	20000404 	.word	0x20000404

080123d4 <HW_BNRG_Isr>:
{
 80123d4:	b570      	push	{r4, r5, r6, lr}
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 80123d6:	4c1f      	ldr	r4, [pc, #124]	; (8012454 <HW_BNRG_Isr+0x80>)
 80123d8:	7923      	ldrb	r3, [r4, #4]
 80123da:	2b01      	cmp	r3, #1
{
 80123dc:	4605      	mov	r5, r0
  if(TlSpiIsrContext.TlPacketStatus == tl_packet_cont)
 80123de:	d114      	bne.n	801240a <HW_BNRG_Isr+0x36>
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi -= event_payload_len;
 80123e0:	88e3      	ldrh	r3, [r4, #6]
 80123e2:	1a1b      	subs	r3, r3, r0
 80123e4:	80e3      	strh	r3, [r4, #6]
  if(TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi != 0)
 80123e6:	88e6      	ldrh	r6, [r4, #6]
 80123e8:	6821      	ldr	r1, [r4, #0]
 80123ea:	b33e      	cbz	r6, 801243c <HW_BNRG_Isr+0x68>
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 80123ec:	8922      	ldrh	r2, [r4, #8]
    TlSpiIsrContext.TlPacketStatus = tl_packet_cont;
 80123ee:	2301      	movs	r3, #1
 80123f0:	7123      	strb	r3, [r4, #4]
    TlSpiIsrContext.TlSizeLeftInBufferFrame -= event_payload_len;
 80123f2:	1b53      	subs	r3, r2, r5
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	8123      	strh	r3, [r4, #8]
    if(TlSpiIsrContext.TlSizeLeftInBufferFrame != 0)
 80123f8:	b1cb      	cbz	r3, 801242e <HW_BNRG_Isr+0x5a>
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 80123fa:	1ac8      	subs	r0, r1, r3
}
 80123fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HW_BNRG_EvtReq((uint8_t*)&pHciEventBuffer->evtserial + (TL_BLE_EVENT_FRAME_SIZE - TlSpiIsrContext.TlSizeLeftInBufferFrame), TlSpiIsrContext.TlSizeLeftInBufferFrame);
 8012400:	4619      	mov	r1, r3
 8012402:	f500 7085 	add.w	r0, r0, #266	; 0x10a
 8012406:	f7ff b9a1 	b.w	801174c <HW_BNRG_EvtReq>
 801240a:	6822      	ldr	r2, [r4, #0]
    TlSpiIsrContext.HciPacketLengthOfDataLeftToReceiveFromSpi = TL_EVT_HDR_SIZE + pHciEventBuffer->evtserial.evt.plen - event_payload_len;
 801240c:	7a93      	ldrb	r3, [r2, #10]
 801240e:	3303      	adds	r3, #3
 8012410:	1a1b      	subs	r3, r3, r0
 8012412:	80e3      	strh	r3, [r4, #6]
    if((pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CC_OPCODE) && (pHciEventBuffer->evtserial.evt.evtcode != TL_EVT_CS_OPCODE))
 8012414:	7a53      	ldrb	r3, [r2, #9]
 8012416:	3b0e      	subs	r3, #14
 8012418:	2b01      	cmp	r3, #1
 801241a:	d905      	bls.n	8012428 <HW_BNRG_Isr+0x54>
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 801241c:	2100      	movs	r1, #0
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 801241e:	2003      	movs	r0, #3
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciAsynchEvt;
 8012420:	7161      	strb	r1, [r4, #5]
      LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_Dis);
 8012422:	f000 f853 	bl	80124cc <LPM_SetOffMode>
 8012426:	e7de      	b.n	80123e6 <HW_BNRG_Isr+0x12>
      TlSpiIsrContext.TlEventQueueType = TL_BLE_R_HciCmdEvt;
 8012428:	2301      	movs	r3, #1
 801242a:	7163      	strb	r3, [r4, #5]
 801242c:	e7db      	b.n	80123e6 <HW_BNRG_Isr+0x12>
      TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 801242e:	7960      	ldrb	r0, [r4, #5]
 8012430:	f7ff ff40 	bl	80122b4 <TL_BLE_R_EvtInput>
}
 8012434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Allocate_New_Buffer_To_TL();
 8012438:	f7ff bf82 	b.w	8012340 <Allocate_New_Buffer_To_TL>
    TL_BLE_R_EvtInput(TlSpiIsrContext.TlEventQueueType, (uint8_t*)pHciEventBuffer);
 801243c:	7960      	ldrb	r0, [r4, #5]
 801243e:	f7ff ff39 	bl	80122b4 <TL_BLE_R_EvtInput>
    TlSpiIsrContext.TlPacketStatus = tl_packet_start;
 8012442:	7126      	strb	r6, [r4, #4]
    Allocate_New_Buffer_To_TL();
 8012444:	f7ff ff7c 	bl	8012340 <Allocate_New_Buffer_To_TL>
}
 8012448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LPM_SetOffMode(CFG_LPM_HCI_AsynchEvt, LPM_OffMode_En);
 801244c:	2101      	movs	r1, #1
 801244e:	2003      	movs	r0, #3
 8012450:	f000 b83c 	b.w	80124cc <LPM_SetOffMode>
 8012454:	20000404 	.word	0x20000404

08012458 <TL_BLE_EvtDone>:
  TL_BLE_R_EvtDone(hcievt);
 8012458:	f7ff bf60 	b.w	801231c <TL_BLE_R_EvtDone>

0801245c <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 801245c:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 801245e:	6040      	str	r0, [r0, #4]
}
 8012460:	4770      	bx	lr

08012462 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012462:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012466:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8012468:	6802      	ldr	r2, [r0, #0]
  {
    return_value = TRUE;
 801246a:	1a82      	subs	r2, r0, r2
 801246c:	4250      	negs	r0, r2
 801246e:	4150      	adcs	r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012470:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8012474:	4770      	bx	lr

08012476 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012476:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801247a:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801247c:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 801247e:	6842      	ldr	r2, [r0, #4]
 8012480:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8012482:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8012484:	684a      	ldr	r2, [r1, #4]
 8012486:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012488:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801248c:	4770      	bx	lr

0801248e <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801248e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012492:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8012494:	6843      	ldr	r3, [r0, #4]
 8012496:	6801      	ldr	r1, [r0, #0]
 8012498:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 801249a:	6801      	ldr	r1, [r0, #0]
 801249c:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801249e:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80124a2:	4770      	bx	lr

080124a4 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80124a4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80124aa:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80124ac:	6803      	ldr	r3, [r0, #0]
 80124ae:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 80124b0:	6800      	ldr	r0, [r0, #0]
 80124b2:	f7ff ffec 	bl	801248e <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124b6:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80124ba:	bd10      	pop	{r4, pc}

080124bc <LPM_SetConf>:


/* Functions Definition ------------------------------------------------------*/
void LPM_SetConf(LPM_Conf_t *p_conf)
{
  LowPowerModeConfiguration.Stop_Mode_Config = p_conf->Stop_Mode_Config;
 80124bc:	4b02      	ldr	r3, [pc, #8]	; (80124c8 <LPM_SetConf+0xc>)
 80124be:	6802      	ldr	r2, [r0, #0]
 80124c0:	601a      	str	r2, [r3, #0]
  LowPowerModeConfiguration.OFF_Mode_Config = p_conf->OFF_Mode_Config;
 80124c2:	6842      	ldr	r2, [r0, #4]
 80124c4:	605a      	str	r2, [r3, #4]

  return;
}
 80124c6:	4770      	bx	lr
 80124c8:	20000414 	.word	0x20000414

080124cc <LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124cc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80124d0:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_OffMode_En)
 80124d2:	2301      	movs	r3, #1
 80124d4:	fa03 f000 	lsl.w	r0, r3, r0
 80124d8:	4299      	cmp	r1, r3
 80124da:	4b05      	ldr	r3, [pc, #20]	; (80124f0 <LPM_SetOffMode+0x24>)
  {
    LowPowerModeSel &= (~(1<<id));
 80124dc:	6899      	ldr	r1, [r3, #8]
 80124de:	bf0c      	ite	eq
 80124e0:	ea21 0000 	biceq.w	r0, r1, r0
  }
  else
  {
    LowPowerModeSel |= (1<<id);
 80124e4:	4308      	orrne	r0, r1
 80124e6:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124e8:	f382 8810 	msr	PRIMASK, r2
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop
 80124f0:	20000414 	.word	0x20000414

080124f4 <LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124f4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80124f8:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if(mode == LPM_StopMode_Dis)
 80124fa:	2301      	movs	r3, #1
 80124fc:	fa03 f000 	lsl.w	r0, r3, r0
 8012500:	4b05      	ldr	r3, [pc, #20]	; (8012518 <LPM_SetStopMode+0x24>)
 8012502:	b931      	cbnz	r1, 8012512 <LPM_SetStopMode+0x1e>
  {
    SysClockReq &= (~(1<<id));
 8012504:	68d9      	ldr	r1, [r3, #12]
 8012506:	ea21 0000 	bic.w	r0, r1, r0
 801250a:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801250c:	f382 8810 	msr	PRIMASK, r2
  }

  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/

  return;
}
 8012510:	4770      	bx	lr
    SysClockReq |= (1<<id);
 8012512:	68d9      	ldr	r1, [r3, #12]
 8012514:	4308      	orrs	r0, r1
 8012516:	e7f8      	b.n	801250a <LPM_SetStopMode+0x16>
 8012518:	20000414 	.word	0x20000414

0801251c <LPM_EnterSleepMode>:
/* __WEAK functions: The application can overload this function  if needed ----*/
/* ----------------------------------------------------------------------------*/

__weak void LPM_EnterSleepMode(void)
{
}
 801251c:	4770      	bx	lr

0801251e <LPM_ExitSleepMode>:
 801251e:	4770      	bx	lr

08012520 <LPM_EnterStopMode>:
 8012520:	4770      	bx	lr
	...

08012524 <LPM_EnterModeSelected>:
{
 8012524:	b510      	push	{r4, lr}
  if(SysClockReq)
 8012526:	4c0e      	ldr	r4, [pc, #56]	; (8012560 <LPM_EnterModeSelected+0x3c>)
 8012528:	68e3      	ldr	r3, [r4, #12]
 801252a:	b133      	cbz	r3, 801253a <LPM_EnterModeSelected+0x16>
    LPM_EnterSleepMode();
 801252c:	f7ff fff6 	bl	801251c <LPM_EnterSleepMode>
    HW_SleepMode();
 8012530:	f7fe fe60 	bl	80111f4 <HW_SleepMode>
    LPM_ExitSleepMode();
 8012534:	f7ff fff3 	bl	801251e <LPM_ExitSleepMode>
}
 8012538:	bd10      	pop	{r4, pc}
    if(LowPowerModeSel)
 801253a:	68a3      	ldr	r3, [r4, #8]
 801253c:	b13b      	cbz	r3, 801254e <LPM_EnterModeSelected+0x2a>
      LPM_EnterStopMode();
 801253e:	f7ff ffef 	bl	8012520 <LPM_EnterStopMode>
      HW_StopMode(LowPowerModeConfiguration.Stop_Mode_Config);
 8012542:	6820      	ldr	r0, [r4, #0]
 8012544:	f7fe fe60 	bl	8011208 <HW_StopMode>
      LPM_ExitStopMode();
 8012548:	f000 faa5 	bl	8012a96 <LPM_ExitStopMode>
 801254c:	e7f4      	b.n	8012538 <LPM_EnterModeSelected+0x14>
      LPM_EnterOffMode();
 801254e:	f000 faa3 	bl	8012a98 <LPM_EnterOffMode>
      HW_OffMode(LowPowerModeConfiguration.OFF_Mode_Config);
 8012552:	6860      	ldr	r0, [r4, #4]
 8012554:	f7fe fe6a 	bl	801122c <HW_OffMode>
      LPM_ExitOffMode();
 8012558:	f000 faaa 	bl	8012ab0 <LPM_ExitOffMode>
  return;
 801255c:	e7ec      	b.n	8012538 <LPM_EnterModeSelected+0x14>
 801255e:	bf00      	nop
 8012560:	20000414 	.word	0x20000414

08012564 <MM_Init>:
 * @param  pool_size: The size of the pool
 * @param  elt_size: The size of one element in the pool
 * @retval None
 */
void MM_Init(uint8_t *p_pool, uint32_t pool_size,  uint32_t elt_size)
{
 8012564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t elt_size_corrected;

  QueueSize = 0;
 8012568:	4d0d      	ldr	r5, [pc, #52]	; (80125a0 <MM_Init+0x3c>)
{
 801256a:	4607      	mov	r7, r0
  QueueSize = 0;
 801256c:	4628      	mov	r0, r5
 801256e:	2300      	movs	r3, #0
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 8012570:	3203      	adds	r2, #3
  QueueSize = 0;
 8012572:	f800 3b01 	strb.w	r3, [r0], #1
{
 8012576:	460e      	mov	r6, r1
  elt_size_corrected = 4*DIVC( elt_size, 4 );
 8012578:	f022 0403 	bic.w	r4, r2, #3

  /**
   *  Initialize list
   */
  LST_init_head (&BufferPool);
 801257c:	f7ff ff6e 	bl	801245c <LST_init_head>
  /**
   *  Initialize the queue
   */
  while(pool_size >= elt_size_corrected)
  {
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 8012580:	f105 0801 	add.w	r8, r5, #1
  while(pool_size >= elt_size_corrected)
 8012584:	42a6      	cmp	r6, r4
 8012586:	d201      	bcs.n	801258c <MM_Init+0x28>
    QueueSize++;
    pool_size -= elt_size_corrected;
  }

  return;
}
 8012588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LST_insert_tail(&BufferPool, (tListNode *)p_pool);
 801258c:	4639      	mov	r1, r7
 801258e:	4640      	mov	r0, r8
 8012590:	f7ff ff71 	bl	8012476 <LST_insert_tail>
    QueueSize++;
 8012594:	782b      	ldrb	r3, [r5, #0]
 8012596:	3301      	adds	r3, #1
    p_pool += elt_size_corrected;
 8012598:	4427      	add	r7, r4
    QueueSize++;
 801259a:	702b      	strb	r3, [r5, #0]
    pool_size -= elt_size_corrected;
 801259c:	1b36      	subs	r6, r6, r4
 801259e:	e7f1      	b.n	8012584 <MM_Init+0x20>
 80125a0:	20000424 	.word	0x20000424

080125a4 <MM_GetBuffer>:
 * @param  cb: The callback to be called when a buffer is made available later on
 *                   if there is no buffer currently available when this API is called
 * @retval The buffer address when available or NULL when there is no buffer
 */
MM_pBufAdd_t MM_GetBuffer( uint32_t size, MM_pCb_t cb )
{
 80125a4:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80125aa:	b672      	cpsid	i
  MM_pBufAdd_t buffer_address;
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if ( QueueSize )
 80125ac:	4809      	ldr	r0, [pc, #36]	; (80125d4 <MM_GetBuffer+0x30>)
 80125ae:	7803      	ldrb	r3, [r0, #0]
 80125b0:	b163      	cbz	r3, 80125cc <MM_GetBuffer+0x28>
  {
    QueueSize--;
 80125b2:	3b01      	subs	r3, #1
 80125b4:	7003      	strb	r3, [r0, #0]
    BufferFreeCb = 0;
 80125b6:	2300      	movs	r3, #0
 80125b8:	60c3      	str	r3, [r0, #12]
    LST_remove_head( &BufferPool, ( tListNode ** )&buffer_address );
 80125ba:	a901      	add	r1, sp, #4
 80125bc:	3001      	adds	r0, #1
 80125be:	f7ff ff71 	bl	80124a4 <LST_remove_head>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125c2:	f384 8810 	msr	PRIMASK, r4
    buffer_address = 0;
  }
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/

  return buffer_address;
}
 80125c6:	9801      	ldr	r0, [sp, #4]
 80125c8:	b002      	add	sp, #8
 80125ca:	bd10      	pop	{r4, pc}
    BufferFreeCb = cb;
 80125cc:	60c1      	str	r1, [r0, #12]
    buffer_address = 0;
 80125ce:	9301      	str	r3, [sp, #4]
 80125d0:	e7f7      	b.n	80125c2 <MM_GetBuffer+0x1e>
 80125d2:	bf00      	nop
 80125d4:	20000424 	.word	0x20000424

080125d8 <MM_ReleaseBuffer>:
 * @brief  Release a buffer
 * @param  p_buffer: The data buffer address
 * @retval None
 */
void MM_ReleaseBuffer( MM_pBufAdd_t p_buffer )
{
 80125d8:	b570      	push	{r4, r5, r6, lr}
 80125da:	4601      	mov	r1, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125dc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80125e0:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  LST_insert_tail( &BufferPool, ( tListNode * )p_buffer );
 80125e2:	4c07      	ldr	r4, [pc, #28]	; (8012600 <MM_ReleaseBuffer+0x28>)
 80125e4:	1c60      	adds	r0, r4, #1
 80125e6:	f7ff ff46 	bl	8012476 <LST_insert_tail>
  QueueSize++;
 80125ea:	7823      	ldrb	r3, [r4, #0]
 80125ec:	3301      	adds	r3, #1
 80125ee:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125f0:	f385 8810 	msr	PRIMASK, r5
  __set_PRIMASK( primask_bit );     /**< Restore PRIMASK bit*/
  if( BufferFreeCb )
 80125f4:	68e3      	ldr	r3, [r4, #12]
 80125f6:	b113      	cbz	r3, 80125fe <MM_ReleaseBuffer+0x26>
     */
    BufferFreeCb();
  }

  return;
}
 80125f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BufferFreeCb();
 80125fc:	4718      	bx	r3
}
 80125fe:	bd70      	pop	{r4, r5, r6, pc}
 8012600:	20000424 	.word	0x20000424

08012604 <SCH_RegTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012604:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012608:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskCb[task_id] = task;
 801260a:	4a03      	ldr	r2, [pc, #12]	; (8012618 <SCH_RegTask+0x14>)
 801260c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012610:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	20000434 	.word	0x20000434

0801261c <SCH_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801261c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012620:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskSet |= (1 << task_id);
 8012622:	4a05      	ldr	r2, [pc, #20]	; (8012638 <SCH_SetTask+0x1c>)
 8012624:	2301      	movs	r3, #1
 8012626:	fa03 f000 	lsl.w	r0, r3, r0
 801262a:	6993      	ldr	r3, [r2, #24]
 801262c:	4318      	orrs	r0, r3
 801262e:	6190      	str	r0, [r2, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012630:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop
 8012638:	20000434 	.word	0x20000434

0801263c <SCH_PauseTask>:

void SCH_PauseTask( uint32_t task_id )
{
 801263c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801263e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012642:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskMask &= ~ ( 1 << task_id );
 8012644:	4905      	ldr	r1, [pc, #20]	; (801265c <SCH_PauseTask+0x20>)
 8012646:	2201      	movs	r2, #1
 8012648:	680b      	ldr	r3, [r1, #0]
 801264a:	fa02 f000 	lsl.w	r0, r2, r0
 801264e:	ea23 0300 	bic.w	r3, r3, r0
 8012652:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012654:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8012658:	bd10      	pop	{r4, pc}
 801265a:	bf00      	nop
 801265c:	20000000 	.word	0x20000000

08012660 <SCH_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012660:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012664:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  TaskMask |= ( 1 << task_id );
 8012666:	4a05      	ldr	r2, [pc, #20]	; (801267c <SCH_ResumeTask+0x1c>)
 8012668:	2301      	movs	r3, #1
 801266a:	fa03 f000 	lsl.w	r0, r3, r0
 801266e:	6813      	ldr	r3, [r2, #0]
 8012670:	4318      	orrs	r0, r3
 8012672:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012674:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8012678:	4770      	bx	lr
 801267a:	bf00      	nop
 801267c:	20000000 	.word	0x20000000

08012680 <SCH_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012680:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012684:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();

  EvtSet |= ( 1 << evt_id);
 8012686:	4a05      	ldr	r2, [pc, #20]	; (801269c <SCH_SetEvt+0x1c>)
 8012688:	2301      	movs	r3, #1
 801268a:	fa03 f000 	lsl.w	r0, r3, r0
 801268e:	69d3      	ldr	r3, [r2, #28]
 8012690:	4318      	orrs	r0, r3
 8012692:	61d0      	str	r0, [r2, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012694:	f381 8810 	msr	PRIMASK, r1

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return;
}
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	20000434 	.word	0x20000434

080126a0 <SCH_Run>:
{
 80126a0:	b570      	push	{r4, r5, r6, lr}
  while( TaskSet &  TaskMask )
 80126a2:	4c15      	ldr	r4, [pc, #84]	; (80126f8 <SCH_Run+0x58>)
 80126a4:	4d15      	ldr	r5, [pc, #84]	; (80126fc <SCH_Run+0x5c>)
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 80126a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  while( TaskSet &  TaskMask )
 80126aa:	69a3      	ldr	r3, [r4, #24]
 80126ac:	682a      	ldr	r2, [r5, #0]
 80126ae:	4013      	ands	r3, r2
 80126b0:	d10f      	bne.n	80126d2 <SCH_Run+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126b2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80126b6:	b672      	cpsid	i
  if ( !( (TaskSet & TaskMask ) || (EvtSet & EvtWaited) ) )
 80126b8:	69a3      	ldr	r3, [r4, #24]
 80126ba:	682a      	ldr	r2, [r5, #0]
 80126bc:	401a      	ands	r2, r3
 80126be:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80126c2:	400b      	ands	r3, r1
 80126c4:	4313      	orrs	r3, r2
 80126c6:	d101      	bne.n	80126cc <SCH_Run+0x2c>
    SCH_Idle();
 80126c8:	f000 fa02 	bl	8012ad0 <SCH_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126cc:	f386 8810 	msr	PRIMASK, r6
}
 80126d0:	bd70      	pop	{r4, r5, r6, pc}
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80126d2:	fab3 f383 	clz	r3, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126d6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80126da:	b672      	cpsid	i
    TaskSet &= ~( 1 << (31 - bit_nbr) );
 80126dc:	69a2      	ldr	r2, [r4, #24]
 80126de:	fa26 f003 	lsr.w	r0, r6, r3
 80126e2:	ea22 0200 	bic.w	r2, r2, r0
 80126e6:	61a2      	str	r2, [r4, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126e8:	f381 8810 	msr	PRIMASK, r1
    TaskCb[31 - bit_nbr]();
 80126ec:	f1c3 031f 	rsb	r3, r3, #31
 80126f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80126f4:	4798      	blx	r3
 80126f6:	e7d8      	b.n	80126aa <SCH_Run+0xa>
 80126f8:	20000434 	.word	0x20000434
 80126fc:	20000000 	.word	0x20000000

08012700 <SCH_EvtIdle>:
__weak void SCH_EvtIdle( void )
{
  /**
   * execute scheduler if not implemented by the application
   */
  SCH_Run();
 8012700:	f7ff bfce 	b.w	80126a0 <SCH_Run>

08012704 <SCH_WaitEvt>:
{
 8012704:	b538      	push	{r3, r4, r5, lr}
  event_waited_id_backup = EvtWaited;
 8012706:	4c09      	ldr	r4, [pc, #36]	; (801272c <SCH_WaitEvt+0x28>)
  EvtWaited = ( 1 << evt_id );
 8012708:	2301      	movs	r3, #1
 801270a:	fa03 f000 	lsl.w	r0, r3, r0
  event_waited_id_backup = EvtWaited;
 801270e:	6a25      	ldr	r5, [r4, #32]
  EvtWaited = ( 1 << evt_id );
 8012710:	6220      	str	r0, [r4, #32]
  while( (EvtSet & EvtWaited) == 0)
 8012712:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8012716:	4213      	tst	r3, r2
 8012718:	d004      	beq.n	8012724 <SCH_WaitEvt+0x20>
  EvtSet &= (~EvtWaited);
 801271a:	ea23 0302 	bic.w	r3, r3, r2
  EvtWaited = event_waited_id_backup;
 801271e:	e9c4 3507 	strd	r3, r5, [r4, #28]
}
 8012722:	bd38      	pop	{r3, r4, r5, pc}
    SCH_EvtIdle();
 8012724:	f7ff ffec 	bl	8012700 <SCH_EvtIdle>
 8012728:	e7f3      	b.n	8012712 <SCH_WaitEvt+0xe>
 801272a:	bf00      	nop
 801272c:	20000434 	.word	0x20000434

08012730 <Potato_Readadc>:
#include "adc.h"

extern ADC_HandleTypeDef hadc1;


long Potato_Readadc(void){
 8012730:	b537      	push	{r0, r1, r2, r4, r5, lr}
	volatile long adc_value = 0;
 8012732:	2300      	movs	r3, #0

	//return adc_value;
*/

	for(uint8_t i = 0; i<10; i++){
		HAL_ADC_Start(&hadc1);
 8012734:	4d1a      	ldr	r5, [pc, #104]	; (80127a0 <Potato_Readadc+0x70>)
	volatile long adc_value = 0;
 8012736:	9301      	str	r3, [sp, #4]
	adc_value = 0;
 8012738:	240a      	movs	r4, #10
 801273a:	9301      	str	r3, [sp, #4]
		HAL_ADC_Start(&hadc1);
 801273c:	4628      	mov	r0, r5
 801273e:	f001 fc0b 	bl	8013f58 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8012742:	2164      	movs	r1, #100	; 0x64
 8012744:	4628      	mov	r0, r5
 8012746:	f001 f9a1 	bl	8013a8c <HAL_ADC_PollForConversion>
		adc_value += HAL_ADC_GetValue(&hadc1);
 801274a:	4628      	mov	r0, r5
 801274c:	f001 fa16 	bl	8013b7c <HAL_ADC_GetValue>
 8012750:	9b01      	ldr	r3, [sp, #4]
 8012752:	4418      	add	r0, r3
 8012754:	9001      	str	r0, [sp, #4]
		HAL_Delay(10);
 8012756:	3c01      	subs	r4, #1
 8012758:	200a      	movs	r0, #10
 801275a:	f000 f998 	bl	8012a8e <HAL_Delay>
	for(uint8_t i = 0; i<10; i++){
 801275e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8012762:	d1eb      	bne.n	801273c <Potato_Readadc+0xc>
	}

	adc_value = (adc_value/10U);
 8012764:	9b01      	ldr	r3, [sp, #4]
 8012766:	220a      	movs	r2, #10
 8012768:	fbb3 f3f2 	udiv	r3, r3, r2
 801276c:	9301      	str	r3, [sp, #4]
	/*
	sprintf(buffer,"adc_val_raw = %d\n",adc_value);
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 20);
	*/
	//adc_value -= 3065;
	adc_value -= 3005;
 801276e:	9b01      	ldr	r3, [sp, #4]
 8012770:	f6a3 33bd 	subw	r3, r3, #3005	; 0xbbd
 8012774:	9301      	str	r3, [sp, #4]
	real_A = (long)(((double)adc_value * V_per_adcvalue)*10);
 8012776:	9801      	ldr	r0, [sp, #4]
 8012778:	f7fd fffe 	bl	8010778 <__aeabi_i2d>
 801277c:	a306      	add	r3, pc, #24	; (adr r3, 8012798 <Potato_Readadc+0x68>)
 801277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012782:	f7fd fd7d 	bl	8010280 <__aeabi_dmul>
 8012786:	4b07      	ldr	r3, [pc, #28]	; (80127a4 <Potato_Readadc+0x74>)
 8012788:	2200      	movs	r2, #0
 801278a:	f7fd fd79 	bl	8010280 <__aeabi_dmul>
 801278e:	f7fe f85d 	bl	801084c <__aeabi_d2iz>
	*/
	return real_A;

	//HAL_Delay(1000);

}
 8012792:	b003      	add	sp, #12
 8012794:	bd30      	pop	{r4, r5, pc}
 8012796:	bf00      	nop
 8012798:	5c28f5c3 	.word	0x5c28f5c3
 801279c:	3fe9c28f 	.word	0x3fe9c28f
 80127a0:	20000b90 	.word	0x20000b90
 80127a4:	40240000 	.word	0x40240000

080127a8 <crcSlow>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
 80127a8:	b570      	push	{r4, r5, r6, lr}
 80127aa:	4605      	mov	r5, r0


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 80127ac:	2400      	movs	r4, #0
    crc            remainder = INITIAL_REMAINDER;
 80127ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 80127b2:	f241 0621 	movw	r6, #4129	; 0x1021
    for (byte = 0; byte < nBytes; ++byte)
 80127b6:	428c      	cmp	r4, r1
 80127b8:	db00      	blt.n	80127bc <crcSlow+0x14>
    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);

}   /* crcSlow() */
 80127ba:	bd70      	pop	{r4, r5, r6, pc}
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
 80127bc:	5d2b      	ldrb	r3, [r5, r4]
 80127be:	2208      	movs	r2, #8
 80127c0:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
            if (remainder & TOPBIT)
 80127c4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80127c8:	ea4f 0340 	mov.w	r3, r0, lsl #1
                remainder = (remainder << 1) ^ POLYNOMIAL;
 80127cc:	bf18      	it	ne
 80127ce:	4073      	eorne	r3, r6
                remainder = (remainder << 1);
 80127d0:	b298      	uxth	r0, r3
        for (bit = 8; bit > 0; --bit)
 80127d2:	1e53      	subs	r3, r2, #1
 80127d4:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 80127d8:	d1f4      	bne.n	80127c4 <crcSlow+0x1c>
    for (byte = 0; byte < nBytes; ++byte)
 80127da:	3401      	adds	r4, #1
 80127dc:	e7eb      	b.n	80127b6 <crcSlow+0xe>
	...

080127e0 <LBR_Init>:


/* Public functions ----------------------------------------------------------*/

void LBR_Init(LBR_InitMode_t InitMode)
{
 80127e0:	b530      	push	{r4, r5, lr}
 80127e2:	b085      	sub	sp, #20
  uint8_t index;

  if(InitMode != LBR_Limited )
 80127e4:	2800      	cmp	r0, #0
 80127e6:	d046      	beq.n	8012876 <LBR_Init+0x96>
  {
    /**
     * Initialization of all transport layer
     */
    TL_BLE_HCI_Init(TL_BLE_HCI_InitFull, &CmdBuffer, EvtPool, POOL_SIZE);
 80127e8:	4c24      	ldr	r4, [pc, #144]	; (801287c <LBR_Init+0x9c>)
 80127ea:	f240 5332 	movw	r3, #1330	; 0x532
 80127ee:	18e1      	adds	r1, r4, r3
 80127f0:	4622      	mov	r2, r4
 80127f2:	2001      	movs	r0, #1
 80127f4:	f7ff fc10 	bl	8012018 <TL_BLE_HCI_Init>

    /**
     * Initialization of the BLE App Context
     */
   
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 80127f8:	2500      	movs	r5, #0
    TL_Enable();
 80127fa:	f3af 8000 	nop.w
     SVCCTL_Init();
 80127fe:	f7fe fcaf 	bl	8011160 <SVCCTL_Init>
    /**
     * Set TX Power to -2dBm.
     * This avoids undesired disconnection due to instability on 32KHz
     * internal oscillator for high transmission power.
     */
    aci_hal_set_tx_power_level(1,0x18);
 8012802:	2118      	movs	r1, #24
 8012804:	2001      	movs	r0, #1
    LBRContext.Remote_Connection_Status[0] = LBC_IDLE;
 8012806:	f884 56dc 	strb.w	r5, [r4, #1756]	; 0x6dc
    aci_hal_set_tx_power_level(1,0x18);
 801280a:	f7fe faab 	bl	8010d64 <aci_hal_set_tx_power_level>

    /**
     * Initialize IO capability
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 801280e:	4628      	mov	r0, r5
    LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability = CFG_LBR_IO_CAPABILITY;
 8012810:	f884 5640 	strb.w	r5, [r4, #1600]	; 0x640
    aci_gap_set_io_capability(LBRContext.LBRContext_legacy.bleSecurityParam.ioCapability);
 8012814:	f7fe f8ee 	bl	80109f4 <aci_gap_set_io_capability>
     */
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
    LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
    LBRContext.LBRContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 8012818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801281c:	f8a4 3654 	strh.w	r3, [r4, #1620]	; 0x654
    LBRContext.LBRContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8012820:	2310      	movs	r3, #16
 8012822:	f884 3656 	strb.w	r3, [r4, #1622]	; 0x656
    LBRContext.LBRContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8012826:	4b16      	ldr	r3, [pc, #88]	; (8012880 <LBR_Init+0xa0>)
 8012828:	f8c4 3658 	str.w	r3, [r4, #1624]	; 0x658
    LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode = 1;
 801282c:	2301      	movs	r3, #1
 801282e:	f8a4 3642 	strh.w	r3, [r4, #1602]	; 0x642
    for (index=0; index<16 ;index++)
 8012832:	f204 6344 	addw	r3, r4, #1604	; 0x644
    LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode = CFG_LBR_MITM_PROTECTION;
 8012836:	f884 5641 	strb.w	r5, [r4, #1601]	; 0x641
 801283a:	461a      	mov	r2, r3
    {
      LBRContext.LBRContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t)index;
 801283c:	f803 5b01 	strb.w	r5, [r3], #1
    for (index=0; index<16 ;index++)
 8012840:	3501      	adds	r5, #1
 8012842:	2d10      	cmp	r5, #16
 8012844:	d1fa      	bne.n	801283c <LBR_Init+0x5c>
    }

    aci_gap_set_auth_requirement(LBRContext.LBRContext_legacy.bleSecurityParam.mitm_mode,
 8012846:	4b0e      	ldr	r3, [pc, #56]	; (8012880 <LBR_Init+0xa0>)
 8012848:	2101      	movs	r1, #1
 801284a:	e9cd 3102 	strd	r3, r1, [sp, #8]
 801284e:	2100      	movs	r1, #0
 8012850:	2308      	movs	r3, #8
 8012852:	e9cd 5100 	strd	r5, r1, [sp]
 8012856:	4608      	mov	r0, r1
 8012858:	f7fe f8f0 	bl	8010a3c <aci_gap_set_auth_requirement>
                                 LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode);

    /**
     * Initialize whitelist
     */
    if(LBRContext.LBRContext_legacy.bleSecurityParam.bonding_mode)
 801285c:	f894 3642 	ldrb.w	r3, [r4, #1602]	; 0x642
 8012860:	b10b      	cbz	r3, 8012866 <LBR_Init+0x86>
    {
      aci_gap_configure_whitelist();
 8012862:	f7fe f929 	bl	8010ab8 <aci_gap_configure_whitelist>
    
    /**
     * Initialize LBS Applciation
     */
#if(LB_SERVER!=0)     
    LBSAPP_Init();
 8012866:	f000 f871 	bl	801294c <LBSAPP_Init>
   // Start Advertise to be connected by Client
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 801286a:	2001      	movs	r0, #1
#endif
  
  }

  return;
}
 801286c:	b005      	add	sp, #20
 801286e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SCH_SetTask(CFG_IdleTask_StartAdv); 
 8012872:	f7ff bed3 	b.w	801261c <SCH_SetTask>
}
 8012876:	b005      	add	sp, #20
 8012878:	bd30      	pop	{r4, r5, pc}
 801287a:	bf00      	nop
 801287c:	20000458 	.word	0x20000458
 8012880:	0001b207 	.word	0x0001b207

08012884 <LBR_Adv_Request>:
/*                     DEVICE IS SERVER                         */
/****************************************************************/

#if(LB_SERVER!=0) 
void LBR_Adv_Request(void)
{
 8012884:	b500      	push	{lr}
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 8012886:	4b0d      	ldr	r3, [pc, #52]	; (80128bc <LBR_Adv_Request+0x38>)
 8012888:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 801288c:	2b0a      	cmp	r3, #10
{
 801288e:	b089      	sub	sp, #36	; 0x24
  if(LBRContext.Remote_Connection_Status [0]!= LBC_CONNECTED )
 8012890:	d010      	beq.n	80128b4 <LBR_Adv_Request+0x30>
  {
    tBleStatus result=0x00;
    
    result = aci_gap_set_discoverable(ADV_IND,
 8012892:	4a0b      	ldr	r2, [pc, #44]	; (80128c0 <LBR_Adv_Request+0x3c>)
 8012894:	9202      	str	r2, [sp, #8]
 8012896:	2300      	movs	r3, #0
 8012898:	220e      	movs	r2, #14
 801289a:	e9cd 3200 	strd	r3, r2, [sp]
 801289e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80128a2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80128a6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80128aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fe f834 	bl	801091c <aci_gap_set_discoverable>
    {
      APPL_MESG_DBG("** START ADVERTISING **  Failed \r\n\r");
    }
  }
  return;
}
 80128b4:	b009      	add	sp, #36	; 0x24
 80128b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80128ba:	bf00      	nop
 80128bc:	20000458 	.word	0x20000458
 80128c0:	08015ac8 	.word	0x08015ac8

080128c4 <SVCCTL_App_Notification>:
  evt_le_meta_event *meta_evt;
  evt_le_connection_complete * connection_complete_event;

  event_pckt = (hci_event_pckt*)((hci_uart_pckt *)pckt)->data;
  evt_disconn_complete *cc = (void *)event_pckt->data;
  switch(event_pckt->evt)
 80128c4:	7843      	ldrb	r3, [r0, #1]
 80128c6:	2b05      	cmp	r3, #5
 80128c8:	d002      	beq.n	80128d0 <SVCCTL_App_Notification+0xc>
 80128ca:	2b3e      	cmp	r3, #62	; 0x3e
 80128cc:	d011      	beq.n	80128f2 <SVCCTL_App_Notification+0x2e>
 80128ce:	4770      	bx	lr
  {
    case EVT_DISCONN_COMPLETE:
      if(cc->handle == LBRContext.connectionHandleRemote)
 80128d0:	4b0f      	ldr	r3, [pc, #60]	; (8012910 <SVCCTL_App_Notification+0x4c>)
 80128d2:	8881      	ldrh	r1, [r0, #4]
 80128d4:	f8b3 26de 	ldrh.w	r2, [r3, #1758]	; 0x6de
 80128d8:	4291      	cmp	r1, r2
 80128da:	d118      	bne.n	801290e <SVCCTL_App_Notification+0x4a>
      {
        LBRContext.connectionHandleRemote = LBC_IDLE;
        APPL_MESG_DBG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 80128dc:	480d      	ldr	r0, [pc, #52]	; (8012914 <SVCCTL_App_Notification+0x50>)
        LBRContext.connectionHandleRemote = LBC_IDLE;
 80128de:	2200      	movs	r2, #0
 80128e0:	f8a3 26de 	strh.w	r2, [r3, #1758]	; 0x6de
        handleNotification.LBR_Evt_Opcode=LB_CLIENT_DISCON_EVT_EVT;
 80128e4:	2303      	movs	r3, #3
 80128e6:	7003      	strb	r3, [r0, #0]
        handleNotification.ConnectionHandle=connection_handle;
 80128e8:	4b0b      	ldr	r3, [pc, #44]	; (8012918 <SVCCTL_App_Notification+0x54>)
 80128ea:	881b      	ldrh	r3, [r3, #0]
      
          //CONNECTION WITH LB ROUTEUR 
           APPL_MESG_DBG("\r\n\r** CONNECTION EVENT WITH CLIENT \n");
          LBRContext.connectionHandleRemote = connection_handle;
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
          handleNotification.ConnectionHandle=connection_handle;
 80128ec:	8043      	strh	r3, [r0, #2]
          LBR_Notification(&handleNotification);
 80128ee:	f000 b81b 	b.w	8012928 <LBR_Notification>
      switch(meta_evt->subevent)
 80128f2:	78c3      	ldrb	r3, [r0, #3]
 80128f4:	2b01      	cmp	r3, #1
 80128f6:	d10a      	bne.n	801290e <SVCCTL_App_Notification+0x4a>
          connection_handle = connection_complete_event->handle;
 80128f8:	4a07      	ldr	r2, [pc, #28]	; (8012918 <SVCCTL_App_Notification+0x54>)
 80128fa:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 80128fe:	8013      	strh	r3, [r2, #0]
          LBRContext.connectionHandleRemote = connection_handle;
 8012900:	4a03      	ldr	r2, [pc, #12]	; (8012910 <SVCCTL_App_Notification+0x4c>)
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 8012902:	4804      	ldr	r0, [pc, #16]	; (8012914 <SVCCTL_App_Notification+0x50>)
          LBRContext.connectionHandleRemote = connection_handle;
 8012904:	f8a2 36de 	strh.w	r3, [r2, #1758]	; 0x6de
          handleNotification.LBR_Evt_Opcode=LB_CLIENT_CONN_HANDLE_EVT;
 8012908:	2202      	movs	r2, #2
 801290a:	7002      	strb	r2, [r0, #0]
 801290c:	e7ee      	b.n	80128ec <SVCCTL_App_Notification+0x28>

    default:
      break;
  }
  return;
}
 801290e:	4770      	bx	lr
 8012910:	20000458 	.word	0x20000458
 8012914:	20000b88 	.word	0x20000b88
 8012918:	20000b8c 	.word	0x20000b8c

0801291c <LBR_App_Key_Button_Action>:

void LBR_App_Key_Button_Action(void)
{
  SCH_SetTask(CFG_IdleTask_Button);
 801291c:	2004      	movs	r0, #4
 801291e:	f7ff be7d 	b.w	801261c <SCH_SetTask>

08012922 <BLESVC_InitCustomSvc>:
#endif 

void BLESVC_InitCustomSvc(void)
{
#if(LB_SERVER!=0) 
  LBS_STM_Init();
 8012922:	f7fe ba49 	b.w	8010db8 <LBS_STM_Init>
	...

08012928 <LBR_Notification>:



void LBR_Notification(LBR_ConnHandle_Not_evt_t *pNotification)
{
  switch(pNotification->LBR_Evt_Opcode)
 8012928:	7803      	ldrb	r3, [r0, #0]
 801292a:	2b02      	cmp	r3, #2
 801292c:	d002      	beq.n	8012934 <LBR_Notification+0xc>
 801292e:	2b03      	cmp	r3, #3
 8012930:	d004      	beq.n	801293c <LBR_Notification+0x14>
 8012932:	4770      	bx	lr
  {
    case LB_CLIENT_CONN_HANDLE_EVT :
      LB_End_Dev_Context.connHandleWithLbRouteur = pNotification->ConnectionHandle;
 8012934:	4b04      	ldr	r3, [pc, #16]	; (8012948 <LBR_Notification+0x20>)
 8012936:	8842      	ldrh	r2, [r0, #2]
 8012938:	809a      	strh	r2, [r3, #4]

    default:
      break;
  }
  return;
}
 801293a:	4770      	bx	lr
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 801293c:	4b02      	ldr	r3, [pc, #8]	; (8012948 <LBR_Notification+0x20>)
 801293e:	2200      	movs	r2, #0
      SCH_SetTask(CFG_IdleTask_StartAdv);
 8012940:	2001      	movs	r0, #1
      LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8012942:	809a      	strh	r2, [r3, #4]
      SCH_SetTask(CFG_IdleTask_StartAdv);
 8012944:	f7ff be6a 	b.w	801261c <SCH_SetTask>
 8012948:	20000b38 	.word	0x20000b38

0801294c <LBSAPP_Init>:
{
  /**
   * Initialize LedButton Service
   */
  LB_End_Dev_Context.Notification_Button_Status=0; 
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 801294c:	4b03      	ldr	r3, [pc, #12]	; (801295c <LBSAPP_Init+0x10>)
 801294e:	2200      	movs	r2, #0
  LB_End_Dev_Context.Notification_Button_Status=0; 
 8012950:	f44f 7180 	mov.w	r1, #256	; 0x100
  LB_End_Dev_Context.connHandleWithLbRouteur =  0x00;
 8012954:	809a      	strh	r2, [r3, #4]
  LB_End_Dev_Context.Notification_Button_Status=0; 
 8012956:	8019      	strh	r1, [r3, #0]
 // LB_End_Dev_Context.LedControlEndDevice1.Device_Led_Selection=0x01; // device1
//  LB_End_Dev_Context.LedControlEndDevice1.Led1Control=0x00; //led OFF
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Device1
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;
 8012958:	709a      	strb	r2, [r3, #2]

  return;
}
 801295a:	4770      	bx	lr
 801295c:	20000b38 	.word	0x20000b38

08012960 <LB_App_Button_Trigger_Received>:
void LB_App_Button_Trigger_Received(void)
{
  
  //UPDATE BUTTON CHARACTERISTICS VALUES

  if(LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus==0x01){
 8012960:	4907      	ldr	r1, [pc, #28]	; (8012980 <LB_App_Button_Trigger_Received+0x20>)
 8012962:	788b      	ldrb	r3, [r1, #2]
 8012964:	3b01      	subs	r3, #1
 8012966:	bf18      	it	ne
 8012968:	2301      	movne	r3, #1
 801296a:	708b      	strb	r3, [r1, #2]
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x00;}
  else {
  LB_End_Dev_Context.ButtonStatusToClient.ButtonStatus=0x01;  
  }
  LB_End_Dev_Context.ButtonStatusToClient.Device_Button_Selection=0x01; //Button1 pushed
 801296c:	2301      	movs	r3, #1
 801296e:	704b      	strb	r3, [r1, #1]
  APPL_MESG_DBG("\r\n\r ");
  APPL_MESG_DBG("-- APPLICATION : BUTTON PUSHED - CHECK NOTIFICATION \n ");
 
   if(LB_End_Dev_Context.Notification_Button_Status){ 
 8012970:	780b      	ldrb	r3, [r1, #0]
 8012972:	b123      	cbz	r3, 801297e <LB_App_Button_Trigger_Received+0x1e>
    APPL_MESG_DBG("-- APPLICATION : INFORM ROUTEUR BUTTON 1 PUSHED \n ");
    BLE_SVC_LedButton_Update_Char(BUTTON_CHAR_UUID, (uint8_t *)&LB_End_Dev_Context.ButtonStatusToClient);
 8012974:	3101      	adds	r1, #1
 8012976:	f642 3051 	movw	r0, #11089	; 0x2b51
 801297a:	f7fe baf7 	b.w	8010f6c <BLE_SVC_LedButton_Update_Char>
   } else {
    APPL_MESG_DBG("-- APPLICATION : CAN'T INFORM ROUTEUR -  NOTIFICATION DISABLED\n "); 
   }

  return;
}
 801297e:	4770      	bx	lr
 8012980:	20000b38 	.word	0x20000b38

08012984 <whynotwork>:
  * @param  pNotification: LBS notification.
  * @retval None
 */ 

void whynotwork(uint8_t *POTATO, LBS_App_Notification_evt_t *pNotification, uint8_t is_string)
{
 8012984:	b510      	push	{r4, lr}
	uint8_t i = 0;
 8012986:	2300      	movs	r3, #0
	for(; i < pNotification->DataTransfered.Length; i++)
 8012988:	7a0c      	ldrb	r4, [r1, #8]
 801298a:	429c      	cmp	r4, r3
 801298c:	d803      	bhi.n	8012996 <whynotwork+0x12>
	{
		POTATO[i] = pNotification->DataTransfered.pPayload[i];
	}
	if(is_string) POTATO[i] = '\0';
 801298e:	b10a      	cbz	r2, 8012994 <whynotwork+0x10>
 8012990:	2200      	movs	r2, #0
 8012992:	54c2      	strb	r2, [r0, r3]
}
 8012994:	bd10      	pop	{r4, pc}
		POTATO[i] = pNotification->DataTransfered.pPayload[i];
 8012996:	684c      	ldr	r4, [r1, #4]
 8012998:	5ce4      	ldrb	r4, [r4, r3]
 801299a:	54c4      	strb	r4, [r0, r3]
	for(; i < pNotification->DataTransfered.Length; i++)
 801299c:	3301      	adds	r3, #1
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	e7f2      	b.n	8012988 <whynotwork+0x4>
	...

080129a4 <LBS_App_Notification>:

void LBS_App_Notification(LBS_App_Notification_evt_t *pNotification)
{
 80129a4:	b508      	push	{r3, lr}
 80129a6:	7803      	ldrb	r3, [r0, #0]
 80129a8:	3b04      	subs	r3, #4
 80129aa:	4601      	mov	r1, r0
 80129ac:	2b05      	cmp	r3, #5
 80129ae:	d824      	bhi.n	80129fa <LBS_App_Notification+0x56>
 80129b0:	e8df f003 	tbb	[pc, r3]
 80129b4:	0f0c0903 	.word	0x0f0c0903
 80129b8:	1512      	.short	0x1512
          APPL_MESG_DBG("-- APPLICATION END DEVICE 1 : LED1 OFF\n"); 
        }
        break;
        */
    case POTATO_SSID_EVT:
    	whynotwork(POTATO_Context.POTATO_SSID,pNotification,1);
 80129ba:	4818      	ldr	r0, [pc, #96]	; (8012a1c <LBS_App_Notification+0x78>)
 80129bc:	2201      	movs	r2, #1
    default:
      break;
  }
  //ret = Potato_Save(&POTATO_Context);
  return;
}
 80129be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	whynotwork(POTATO_Context.POTATO_OP,pNotification,0);
 80129c2:	f7ff bfdf 	b.w	8012984 <whynotwork>
    	whynotwork(POTATO_Context.POTATO_PW,pNotification,1);
 80129c6:	4816      	ldr	r0, [pc, #88]	; (8012a20 <LBS_App_Notification+0x7c>)
 80129c8:	2201      	movs	r2, #1
 80129ca:	e7f8      	b.n	80129be <LBS_App_Notification+0x1a>
    	whynotwork(POTATO_Context.POTATO_NAME,pNotification,1);
 80129cc:	4815      	ldr	r0, [pc, #84]	; (8012a24 <LBS_App_Notification+0x80>)
 80129ce:	2201      	movs	r2, #1
 80129d0:	e7f5      	b.n	80129be <LBS_App_Notification+0x1a>
    	whynotwork(POTATO_Context.POTATO_IP,pNotification,0);
 80129d2:	4815      	ldr	r0, [pc, #84]	; (8012a28 <LBS_App_Notification+0x84>)
 80129d4:	2200      	movs	r2, #0
 80129d6:	e7f2      	b.n	80129be <LBS_App_Notification+0x1a>
    	whynotwork(POTATO_Context.POTATO_OP,pNotification,0);
 80129d8:	4814      	ldr	r0, [pc, #80]	; (8012a2c <LBS_App_Notification+0x88>)
 80129da:	2200      	movs	r2, #0
 80129dc:	e7ef      	b.n	80129be <LBS_App_Notification+0x1a>
    	switch(pNotification->DataTransfered.pPayload[0]) {
 80129de:	6843      	ldr	r3, [r0, #4]
 80129e0:	781b      	ldrb	r3, [r3, #0]
 80129e2:	2b05      	cmp	r3, #5
 80129e4:	d809      	bhi.n	80129fa <LBS_App_Notification+0x56>
 80129e6:	e8df f003 	tbb	[pc, r3]
 80129ea:	0903      	.short	0x0903
 80129ec:	1614100d 	.word	0x1614100d
    		ret = Potato_Save(&POTATO_Context);
 80129f0:	480a      	ldr	r0, [pc, #40]	; (8012a1c <LBS_App_Notification+0x78>)
 80129f2:	f000 fa23 	bl	8012e3c <Potato_Save>
    		ret = Potato_Dummy_Backup();
 80129f6:	4b0e      	ldr	r3, [pc, #56]	; (8012a30 <LBS_App_Notification+0x8c>)
 80129f8:	7198      	strb	r0, [r3, #6]
}
 80129fa:	bd08      	pop	{r3, pc}
    		ret = Potato_Load(&POTATO_Context);
 80129fc:	4807      	ldr	r0, [pc, #28]	; (8012a1c <LBS_App_Notification+0x78>)
 80129fe:	f000 fa75 	bl	8012eec <Potato_Load>
 8012a02:	e7f8      	b.n	80129f6 <LBS_App_Notification+0x52>
    		ret = Potato_Backup_Load();
 8012a04:	f000 fac4 	bl	8012f90 <Potato_Backup_Load>
 8012a08:	e7f5      	b.n	80129f6 <LBS_App_Notification+0x52>
    		ret = Potato_Erase(normal);
 8012a0a:	2001      	movs	r0, #1
    		ret = Potato_Erase(both);
 8012a0c:	f000 fa9e 	bl	8012f4c <Potato_Erase>
 8012a10:	e7f1      	b.n	80129f6 <LBS_App_Notification+0x52>
 8012a12:	2002      	movs	r0, #2
 8012a14:	e7fa      	b.n	8012a0c <LBS_App_Notification+0x68>
    		ret = Potato_Dummy_Backup();
 8012a16:	f000 faf1 	bl	8012ffc <Potato_Dummy_Backup>
 8012a1a:	e7ec      	b.n	80129f6 <LBS_App_Notification+0x52>
 8012a1c:	20000c78 	.word	0x20000c78
 8012a20:	20000c97 	.word	0x20000c97
 8012a24:	20000cb6 	.word	0x20000cb6
 8012a28:	20000cd5 	.word	0x20000cd5
 8012a2c:	20000cd9 	.word	0x20000cd9
 8012a30:	20000b38 	.word	0x20000b38

08012a34 <SystemClock_Config>:
 * @param  None
 * @retval None
 */

void SystemClock_Config(void)
{
 8012a34:	b510      	push	{r4, lr}
 8012a36:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012a38:	2240      	movs	r2, #64	; 0x40
 8012a3a:	2100      	movs	r1, #0
 8012a3c:	a806      	add	r0, sp, #24
 8012a3e:	f002 fbf3 	bl	8015228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012a42:	2100      	movs	r1, #0
 8012a44:	2214      	movs	r2, #20
 8012a46:	4668      	mov	r0, sp
 8012a48:	f002 fbee 	bl	8015228 <memset>

  /**
   *  Enable MSI oscillator and configure the system at 16MHz
   *  The best power consumption are achieved with 8Mhz on the SPI to access the BlueNRG device
   */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8012a4c:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 8012a4e:	2280      	movs	r2, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8012a50:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;

  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8012a52:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8012a54:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8012a56:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8012a58:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_8;
 8012a5a:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_OFF;
 8012a5c:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8012a5e:	f001 ff6b 	bl	8014938 <HAL_RCC_OscConfig>

  /**
   *  Configure the HCLK, PCLK1 and PCLK2 clocks dividers  to a maximum of 16Mhz on SPI.
   */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8012a62:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8012a64:	2102      	movs	r1, #2
 8012a66:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8012a68:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8012a6c:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012a70:	9404      	str	r4, [sp, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8012a72:	f002 f9e7 	bl	8014e44 <HAL_RCC_ClockConfig>
#else
#error Missing System Clock Configuration
#endif

  return;
}
 8012a76:	b016      	add	sp, #88	; 0x58
 8012a78:	bd10      	pop	{r4, pc}

08012a7a <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch(GPIO_Pin)
 8012a7a:	2840      	cmp	r0, #64	; 0x40
 8012a7c:	d003      	beq.n	8012a86 <HAL_GPIO_EXTI_Callback+0xc>
 8012a7e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8012a82:	d002      	beq.n	8012a8a <HAL_GPIO_EXTI_Callback+0x10>
 8012a84:	4770      	bx	lr
  {
    case BNRG_SPI_EXTI_PIN:
      HW_BNRG_SpiIrqCb();
 8012a86:	f7fe be73 	b.w	8011770 <HW_BNRG_SpiIrqCb>
      break;
    case USER_BUTTON_PIN:
      LBR_App_Key_Button_Action();
 8012a8a:	f7ff bf47 	b.w	801291c <LBR_App_Key_Button_Action>

08012a8e <HAL_Delay>:
  *         It OVERLOADS the __WEAK function defined in stm32l4xx_hal.c
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
 */
void HAL_Delay(__IO uint32_t Delay)
{
 8012a8e:	b082      	sub	sp, #8
 8012a90:	9001      	str	r0, [sp, #4]
  return;
}
 8012a92:	b002      	add	sp, #8
 8012a94:	4770      	bx	lr

08012a96 <LPM_ExitStopMode>:
  LL_RCC_SetSysClkSource(RCC_CFGR_SW_PLL);              /**< Select PLL as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL);  /**< Wait till PLL is used as system clock source */
#endif

  return;
}
 8012a96:	4770      	bx	lr

08012a98 <LPM_EnterOffMode>:
  SET_BIT(PWR->CR3, WakeUpPin);
 8012a98:	4b04      	ldr	r3, [pc, #16]	; (8012aac <LPM_EnterOffMode+0x14>)
 8012a9a:	689a      	ldr	r2, [r3, #8]
 8012a9c:	f042 0201 	orr.w	r2, r2, #1
 8012aa0:	609a      	str	r2, [r3, #8]
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8012aa2:	689a      	ldr	r2, [r3, #8]
 8012aa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012aa8:	609a      	str	r2, [r3, #8]
  LL_PWR_EnableWakeUpPin(BNRG_SPI_IRQ_WAKEUP_PIN);
  LL_PWR_EnablePUPDCfg();

  return;

}
 8012aaa:	4770      	bx	lr
 8012aac:	40007000 	.word	0x40007000

08012ab0 <LPM_ExitOffMode>:
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 8012ab0:	4b05      	ldr	r3, [pc, #20]	; (8012ac8 <LPM_ExitOffMode+0x18>)
 8012ab2:	689a      	ldr	r2, [r3, #8]
 8012ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012ab8:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(PWR->CR3, WakeUpPin);
 8012aba:	689a      	ldr	r2, [r3, #8]
 8012abc:	f022 0201 	bic.w	r2, r2, #1
 8012ac0:	609a      	str	r2, [r3, #8]
  * @rmtoll SCR          CWUF1         LL_PWR_ClearFlag_WU1
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU1(void)
{
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF1);
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	619a      	str	r2, [r3, #24]
  LL_PWR_DisablePUPDCfg();
  LL_PWR_DisableWakeUpPin(BNRG_SPI_IRQ_WAKEUP_PIN);
  BNRG_SPI_CLEAR_WAKEUP_FLAG();

  return;
}
 8012ac6:	4770      	bx	lr
 8012ac8:	40007000 	.word	0x40007000

08012acc <HAL_InitTick>:
  * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  return (HAL_OK);
}
 8012acc:	2000      	movs	r0, #0
 8012ace:	4770      	bx	lr

08012ad0 <SCH_Idle>:
 * @param  None
 * @retval None
 */
void SCH_Idle ( void )
{
  LPM_EnterModeSelected();
 8012ad0:	f7ff bd28 	b.w	8012524 <LPM_EnterModeSelected>

08012ad4 <TL_BLE_HCI_StatusNot>:
 *        At least, TL_BLE_HCI_UserEvtProc shall not be executed while the TL remains busy
 * @param status
 * @retval None
 */
void TL_BLE_HCI_StatusNot(TL_BLE_HCI_CmdStatus_t status)
{
 8012ad4:	b508      	push	{r3, lr}
  switch(status)
 8012ad6:	b110      	cbz	r0, 8012ade <TL_BLE_HCI_StatusNot+0xa>
 8012ad8:	2801      	cmp	r0, #1
 8012ada:	d00b      	beq.n	8012af4 <TL_BLE_HCI_StatusNot+0x20>

    default:
      break;
  }
  return;
}
 8012adc:	bd08      	pop	{r3, pc}
      SCH_PauseTask( CFG_IdleTask_StartAdv );
 8012ade:	2001      	movs	r0, #1
 8012ae0:	f7ff fdac 	bl	801263c <SCH_PauseTask>
      SCH_PauseTask( CFG_IdleTask_Button );
 8012ae4:	2004      	movs	r0, #4
 8012ae6:	f7ff fda9 	bl	801263c <SCH_PauseTask>
}
 8012aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SCH_PauseTask( CFG_IdleTask_HciAsynchEvt );
 8012aee:	2005      	movs	r0, #5
 8012af0:	f7ff bda4 	b.w	801263c <SCH_PauseTask>
      SCH_ResumeTask( CFG_IdleTask_StartAdv );
 8012af4:	f7ff fdb4 	bl	8012660 <SCH_ResumeTask>
      SCH_ResumeTask( CFG_IdleTask_Button );
 8012af8:	2004      	movs	r0, #4
 8012afa:	f7ff fdb1 	bl	8012660 <SCH_ResumeTask>
}
 8012afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      SCH_ResumeTask( CFG_IdleTask_HciAsynchEvt );
 8012b02:	2005      	movs	r0, #5
 8012b04:	f7ff bdac 	b.w	8012660 <SCH_ResumeTask>

08012b08 <HW_TS_RTC_Int_AppNot>:
  {
    case CFG_TimProcID_isr:
      /**
       * This is expected to be called in the Timer Interrupt Handler to limit latency
       */
      pfTimerCallBack();
 8012b08:	4710      	bx	r2
	...

08012b0c <MX_ADC1_Init>:

  /* USER CODE END USART1_Init 2 */

}
void MX_ADC1_Init(void)
{
 8012b0c:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8012b0e:	2400      	movs	r4, #0
{
 8012b10:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8012b12:	2218      	movs	r2, #24
 8012b14:	4621      	mov	r1, r4
 8012b16:	a804      	add	r0, sp, #16
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8012b18:	4d18      	ldr	r5, [pc, #96]	; (8012b7c <MX_ADC1_Init+0x70>)
  ADC_MultiModeTypeDef multimode = {0};
 8012b1a:	9403      	str	r4, [sp, #12]
 8012b1c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8012b20:	f002 fb82 	bl	8015228 <memset>
  hadc1.Instance = ADC1;
 8012b24:	4b16      	ldr	r3, [pc, #88]	; (8012b80 <MX_ADC1_Init+0x74>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8012b26:	612c      	str	r4, [r5, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012b28:	2604      	movs	r6, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8012b2a:	e9c5 3400 	strd	r3, r4, [r5]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8012b2e:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 1;
 8012b30:	2301      	movs	r3, #1
 8012b32:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012b34:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012b38:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012b3c:	616e      	str	r6, [r5, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8012b3e:	832c      	strh	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8012b40:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8012b44:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8012b48:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8012b4a:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8012b4e:	f000 fec1 	bl	80138d4 <HAL_ADC_Init>
	  ;
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8012b52:	eb0d 0106 	add.w	r1, sp, r6
 8012b56:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8012b58:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8012b5a:	f001 fa71 	bl	8014040 <HAL_ADCEx_MultiModeConfigChannel>
	  ;
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8012b5e:	4a09      	ldr	r2, [pc, #36]	; (8012b84 <MX_ADC1_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8012b60:	9406      	str	r4, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8012b62:	2306      	movs	r3, #6
 8012b64:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012b68:	a904      	add	r1, sp, #16
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8012b6a:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012b6c:	4628      	mov	r0, r5
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8012b6e:	e9cd 3607 	strd	r3, r6, [sp, #28]
  sConfig.Offset = 0;
 8012b72:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012b74:	f001 f806 	bl	8013b84 <HAL_ADC_ConfigChannel>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8012b78:	b00a      	add	sp, #40	; 0x28
 8012b7a:	bd70      	pop	{r4, r5, r6, pc}
 8012b7c:	20000b90 	.word	0x20000b90
 8012b80:	50040000 	.word	0x50040000
 8012b84:	04300002 	.word	0x04300002

08012b88 <main>:
{
 8012b88:	b500      	push	{lr}
  SCB->VTOR = 0x08010000;
 8012b8a:	4b7f      	ldr	r3, [pc, #508]	; (8012d88 <main+0x200>)
 8012b8c:	4a7f      	ldr	r2, [pc, #508]	; (8012d8c <main+0x204>)
 8012b8e:	609a      	str	r2, [r3, #8]
{
 8012b90:	b08b      	sub	sp, #44	; 0x2c
  HAL_DeInit();
 8012b92:	f000 fe31 	bl	80137f8 <HAL_DeInit>
  HAL_Init();
 8012b96:	f000 fe47 	bl	8013828 <HAL_Init>
  huart1.Instance = USART1;
 8012b9a:	4b7d      	ldr	r3, [pc, #500]	; (8012d90 <main+0x208>)
  huart1.Init.BaudRate = 115200;
 8012b9c:	497d      	ldr	r1, [pc, #500]	; (8012d94 <main+0x20c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8012b9e:	4c7e      	ldr	r4, [pc, #504]	; (8012d98 <main+0x210>)
  huart1.Init.BaudRate = 115200;
 8012ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012ba4:	e9c3 1200 	strd	r1, r2, [r3]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012ba8:	2200      	movs	r2, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012baa:	210c      	movs	r1, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012bac:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012bb0:	e9c3 1205 	strd	r1, r2, [r3, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012bb4:	e9c3 2207 	strd	r2, r2, [r3, #28]
  huart1.Init.Parity = UART_PARITY_NONE;
 8012bb8:	611a      	str	r2, [r3, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012bba:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DBGMCU_EnableDBGSleepMode();
 8012bbc:	f000 fe5c 	bl	8013878 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8012bc0:	f000 fe62 	bl	8013888 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8012bc4:	f000 fe68 	bl	8013898 <HAL_DBGMCU_EnableDBGStandbyMode>
  __HAL_RCC_PWR_CLK_ENABLE();
 8012bc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012bce:	65a3      	str	r3, [r4, #88]	; 0x58
 8012bd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012bd6:	9301      	str	r3, [sp, #4]
 8012bd8:	9b01      	ldr	r3, [sp, #4]
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == RCC_CSR_PINRSTF) ? 1UL : 0UL);
 8012bda:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8012bde:	0158      	lsls	r0, r3, #5
 8012be0:	d519      	bpl.n	8012c16 <main+0x8e>
  WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 8012be2:	4b6e      	ldr	r3, [pc, #440]	; (8012d9c <main+0x214>)
 8012be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012be8:	619a      	str	r2, [r3, #24]
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8012bea:	f001 fdfd 	bl	80147e8 <HAL_PWR_EnableBkUpAccess>
    HAL_PWR_EnableBkUpAccess();
 8012bee:	f001 fdfb 	bl	80147e8 <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8012bf2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8012bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012bfa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8012bfe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8012c02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012c06:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8012c0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8012c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012c12:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8012c16:	2600      	movs	r6, #0
  LPM_SetOffMode(CFG_LPM_App, LPM_OffMode_Dis);
 8012c18:	2100      	movs	r1, #0
 8012c1a:	2004      	movs	r0, #4
 8012c1c:	f7ff fc56 	bl	80124cc <LPM_SetOffMode>
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8012c20:	e9cd 6608 	strd	r6, r6, [sp, #32]
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 8012c24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8012c26:	485e      	ldr	r0, [pc, #376]	; (8012da0 <main+0x218>)
  __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 8012c28:	f023 0302 	bic.w	r3, r3, #2
 8012c2c:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE();
 8012c2e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012c30:	f023 0304 	bic.w	r3, r3, #4
 8012c34:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE();
 8012c36:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012c38:	f023 0308 	bic.w	r3, r3, #8
 8012c3c:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE();
 8012c3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012c40:	f023 0310 	bic.w	r3, r3, #16
 8012c44:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOF_CLK_SLEEP_DISABLE();
 8012c46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012c48:	f023 0320 	bic.w	r3, r3, #32
 8012c4c:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOG_CLK_SLEEP_DISABLE();
 8012c4e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012c54:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE();
 8012c56:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012c5c:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012c5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012c60:	f043 0301 	orr.w	r3, r3, #1
 8012c64:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012c66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012c68:	f003 0301 	and.w	r3, r3, #1
 8012c6c:	9302      	str	r3, [sp, #8]
 8012c6e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012c70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012c72:	f043 0302 	orr.w	r3, r3, #2
 8012c76:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012c78:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012c7a:	f003 0302 	and.w	r3, r3, #2
 8012c7e:	9303      	str	r3, [sp, #12]
 8012c80:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012c84:	f043 0304 	orr.w	r3, r3, #4
 8012c88:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012c8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012c8c:	f003 0304 	and.w	r3, r3, #4
 8012c90:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8012c92:	2503      	movs	r5, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c94:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8012c96:	a905      	add	r1, sp, #20
  GPIO_InitStructure.Pin = (GPIO_PIN_All^ (GPIO_PIN_6 | GPIO_PIN_7));
 8012c98:	f64f 733f 	movw	r3, #65343	; 0xff3f
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8012c9c:	e9cd 5606 	strd	r5, r6, [sp, #24]
  GPIO_InitStructure.Pin = (GPIO_PIN_All^ (GPIO_PIN_6 | GPIO_PIN_7));
 8012ca0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8012ca2:	f001 fcab 	bl	80145fc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8012ca6:	a905      	add	r1, sp, #20
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 8012ca8:	f649 73ff 	movw	r3, #40959	; 0x9fff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8012cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Pin = (GPIO_PIN_All ^ (GPIO_PIN_13 | GPIO_PIN_14));
 8012cb0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8012cb2:	f001 fca3 	bl	80145fc <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8012cb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012cb8:	f023 0302 	bic.w	r3, r3, #2
 8012cbc:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_PWREx_EnableSRAM2ContentRetention();
 8012cbe:	f001 fda3 	bl	8014808 <HAL_PWREx_EnableSRAM2ContentRetention>
  LPM_SetConf(&LowPowerModeConfiguration);
 8012cc2:	a805      	add	r0, sp, #20
  LowPowerModeConfiguration.Stop_Mode_Config = CFG_StopMode2;
 8012cc4:	2302      	movs	r3, #2
  LowPowerModeConfiguration.OFF_Mode_Config = CFG_Standby;
 8012cc6:	e9cd 3505 	strd	r3, r5, [sp, #20]
  LPM_SetConf(&LowPowerModeConfiguration);
 8012cca:	f7ff fbf7 	bl	80124bc <LPM_SetConf>
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 8012cce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  hrtc.Instance = RTC;                        /**< Define instance */
 8012cd2:	4d34      	ldr	r5, [pc, #208]	; (8012da4 <main+0x21c>)
  __HAL_RCC_LSI_ENABLE();     /**< Enable the LSI clock */
 8012cd4:	f043 0301 	orr.w	r3, r3, #1
 8012cd8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8012cdc:	f001 fd84 	bl	80147e8 <HAL_PWR_EnableBkUpAccess>
  HAL_PWR_EnableBkUpAccess();
 8012ce0:	f001 fd82 	bl	80147e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI); /**< Select LSI as RTC Input */
 8012ce4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8012ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012cf0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  __HAL_RCC_RTC_ENABLE();                     /**< Enable RTC */
 8012cf4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8012cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012cfc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 8012d00:	4628      	mov	r0, r5
  hrtc.Instance = RTC;                        /**< Define instance */
 8012d02:	4b29      	ldr	r3, [pc, #164]	; (8012da8 <main+0x220>)
 8012d04:	602b      	str	r3, [r5, #0]
  HAL_RTCEx_EnableBypassShadow(&hrtc);
 8012d06:	f002 f9d7 	bl	80150b8 <HAL_RTCEx_EnableBypassShadow>
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	f647 73ff 	movw	r3, #32767	; 0x7fff
  HAL_RTC_Init(&hrtc);
 8012d10:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8012d12:	e9c5 2302 	strd	r2, r3, [r5, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8012d16:	612e      	str	r6, [r5, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;             /**< need to be initialized to not corrupt the RTC_CR register */
 8012d18:	606e      	str	r6, [r5, #4]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;  /**< need to be initialized to not corrupt the RTC_CR register */
 8012d1a:	61ae      	str	r6, [r5, #24]
  HAL_RTC_Init(&hrtc);
 8012d1c:	f002 f986 	bl	801502c <HAL_RTC_Init>
  __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc) ;  /**< Disable Write Protection */
 8012d20:	682a      	ldr	r2, [r5, #0]
 8012d22:	23ca      	movs	r3, #202	; 0xca
 8012d24:	6253      	str	r3, [r2, #36]	; 0x24
 8012d26:	2353      	movs	r3, #83	; 0x53
 8012d28:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8012d2a:	6893      	ldr	r3, [r2, #8]
 8012d2c:	f023 0307 	bic.w	r3, r3, #7
 8012d30:	f043 0303 	orr.w	r3, r3, #3
 8012d34:	6093      	str	r3, [r2, #8]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0);  /**< Wait for LSI to be stable */
 8012d36:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8012d3a:	079b      	lsls	r3, r3, #30
 8012d3c:	d5fb      	bpl.n	8012d36 <main+0x1ae>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc);  /**< Initialize the TimerServer */
 8012d3e:	4919      	ldr	r1, [pc, #100]	; (8012da4 <main+0x21c>)
 8012d40:	2000      	movs	r0, #0
 8012d42:	f7fe ff0b 	bl	8011b5c <HW_TS_Init>
  SystemClock_Config();         /**< Configure the system clock */
 8012d46:	f7ff fe75 	bl	8012a34 <SystemClock_Config>
  SCH_RegTask( CFG_IdleTask_HciAsynchEvt, TL_BLE_HCI_UserEvtProc );
 8012d4a:	4918      	ldr	r1, [pc, #96]	; (8012dac <main+0x224>)
 8012d4c:	2005      	movs	r0, #5
 8012d4e:	f7ff fc59 	bl	8012604 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_TlEvt, TL_BLE_R_EvtProc );
 8012d52:	4917      	ldr	r1, [pc, #92]	; (8012db0 <main+0x228>)
 8012d54:	2000      	movs	r0, #0
 8012d56:	f7ff fc55 	bl	8012604 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_Button, LB_App_Button_Trigger_Received );
 8012d5a:	4916      	ldr	r1, [pc, #88]	; (8012db4 <main+0x22c>)
 8012d5c:	2004      	movs	r0, #4
 8012d5e:	f7ff fc51 	bl	8012604 <SCH_RegTask>
  SCH_RegTask( CFG_IdleTask_StartAdv, LBR_Adv_Request );
 8012d62:	4915      	ldr	r1, [pc, #84]	; (8012db8 <main+0x230>)
 8012d64:	2001      	movs	r0, #1
 8012d66:	f7ff fc4d 	bl	8012604 <SCH_RegTask>
  LBR_Init(LBR_Full);
 8012d6a:	2001      	movs	r0, #1
 8012d6c:	f7ff fd38 	bl	80127e0 <LBR_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8012d70:	2101      	movs	r1, #1
 8012d72:	2000      	movs	r0, #0
 8012d74:	f000 fcd6 	bl	8013724 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8012d78:	2000      	movs	r0, #0
 8012d7a:	f000 fcb1 	bl	80136e0 <BSP_LED_Init>
  MX_ADC1_Init();
 8012d7e:	f7ff fec5 	bl	8012b0c <MX_ADC1_Init>
    SCH_Run();
 8012d82:	f7ff fc8d 	bl	80126a0 <SCH_Run>
  while(1)
 8012d86:	e7fc      	b.n	8012d82 <main+0x1fa>
 8012d88:	e000ed00 	.word	0xe000ed00
 8012d8c:	08010000 	.word	0x08010000
 8012d90:	20000bf4 	.word	0x20000bf4
 8012d94:	40013800 	.word	0x40013800
 8012d98:	40021000 	.word	0x40021000
 8012d9c:	40007000 	.word	0x40007000
 8012da0:	48000400 	.word	0x48000400
 8012da4:	20000b40 	.word	0x20000b40
 8012da8:	40002800 	.word	0x40002800
 8012dac:	08012081 	.word	0x08012081
 8012db0:	080122d1 	.word	0x080122d1
 8012db4:	08012961 	.word	0x08012961
 8012db8:	08012885 	.word	0x08012885

08012dbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	b0aa      	sub	sp, #168	; 0xa8
 8012dc0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012dc2:	2214      	movs	r2, #20
 8012dc4:	2100      	movs	r1, #0
 8012dc6:	a803      	add	r0, sp, #12
 8012dc8:	f002 fa2e 	bl	8015228 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012dcc:	2288      	movs	r2, #136	; 0x88
 8012dce:	2100      	movs	r1, #0
 8012dd0:	a808      	add	r0, sp, #32
 8012dd2:	f002 fa29 	bl	8015228 <memset>
  if(hadc->Instance==ADC1)
 8012dd6:	6822      	ldr	r2, [r4, #0]
 8012dd8:	4b15      	ldr	r3, [pc, #84]	; (8012e30 <HAL_ADC_MspInit+0x74>)
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d125      	bne.n	8012e2a <HAL_ADC_MspInit+0x6e>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8012dde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012de2:	9308      	str	r3, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
    */
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012de4:	a808      	add	r0, sp, #32
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8012de6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8012dea:	9326      	str	r3, [sp, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012dec:	f000 fa46 	bl	801327c <HAL_RCCEx_PeriphCLKConfig>
      //Error_Handler();
    	;
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8012df0:	4b10      	ldr	r3, [pc, #64]	; (8012e34 <HAL_ADC_MspInit+0x78>)
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012df2:	4811      	ldr	r0, [pc, #68]	; (8012e38 <HAL_ADC_MspInit+0x7c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8012df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012dfa:	64da      	str	r2, [r3, #76]	; 0x4c
 8012dfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012dfe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8012e02:	9201      	str	r2, [sp, #4]
 8012e04:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e08:	f042 0204 	orr.w	r2, r2, #4
 8012e0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8012e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e10:	f003 0304 	and.w	r3, r3, #4
 8012e14:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8012e16:	2101      	movs	r1, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012e18:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8012e1a:	230b      	movs	r3, #11
 8012e1c:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e20:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012e22:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e24:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012e26:	f001 fbe9 	bl	80145fc <HAL_GPIO_Init>
    //HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8012e2a:	b02a      	add	sp, #168	; 0xa8
 8012e2c:	bd10      	pop	{r4, pc}
 8012e2e:	bf00      	nop
 8012e30:	50040000 	.word	0x50040000
 8012e34:	40021000 	.word	0x40021000
 8012e38:	48000800 	.word	0x48000800

08012e3c <Potato_Save>:
	return ret;
}
*/


save_ret_t Potato_Save(POTATO_Context_t *POTATO){
 8012e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint64_t data = 0;
 8012e40:	2200      	movs	r2, #0
save_ret_t Potato_Save(POTATO_Context_t *POTATO){
 8012e42:	b089      	sub	sp, #36	; 0x24
	uint64_t data = 0;
 8012e44:	2300      	movs	r3, #0
 8012e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
	//uint64_t *potato_address = (uint64_t *)POTATO;
	uint64_t *dest_address = (uint64_t *)Potato_Flash_Address;
	uint64_t *dest_Backup_address = (uint64_t *)Potato_Flash_Backup_Address;
	uint64_t *source_address = (uint64_t *)POTATO;

	uint32_t Page_Error = 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	9301      	str	r3, [sp, #4]
	uint32_t primask_bit;
	save_ret_t ret = 0;

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 8012e4e:	9304      	str	r3, [sp, #16]
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Page;
 8012e50:	2401      	movs	r4, #1
 8012e52:	23fe      	movs	r3, #254	; 0xfe
 8012e54:	e9cd 4305 	strd	r4, r3, [sp, #20]
	Erase_t.NbPages = 2;
 8012e58:	2302      	movs	r3, #2
save_ret_t Potato_Save(POTATO_Context_t *POTATO){
 8012e5a:	4605      	mov	r5, r0
	Erase_t.NbPages = 2;
 8012e5c:	9307      	str	r3, [sp, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e5e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012e62:	b672      	cpsid	i
	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	//CRC ///////////////////////////////////////////////////////////////////

	crcval = crcSlow((uint8_t*)POTATO, Potato_Data_Length_Bytes_without_CRC);
 8012e64:	2164      	movs	r1, #100	; 0x64
 8012e66:	f7ff fc9f 	bl	80127a8 <crcSlow>
	POTATO->POTATO_CRC[0] = (crcval&0xFF00)>>8;
 8012e6a:	0a03      	lsrs	r3, r0, #8
 8012e6c:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	POTATO->POTATO_CRC[1] = crcval&0xFF;
 8012e70:	f885 0065 	strb.w	r0, [r5, #101]	; 0x65

	/////////////////////////////////////////////////////////////////////////

	if(HAL_FLASH_Unlock() != HAL_OK) {
 8012e74:	f001 fa56 	bl	8014324 <HAL_FLASH_Unlock>
 8012e78:	bb68      	cbnz	r0, 8012ed6 <Potato_Save+0x9a>
		ret = unlock_error;
		return ret;
	}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 8012e7a:	a901      	add	r1, sp, #4
 8012e7c:	a804      	add	r0, sp, #16
 8012e7e:	f001 fb49 	bl	8014514 <HAL_FLASHEx_Erase>
 8012e82:	bb50      	cbnz	r0, 8012eda <Potato_Save+0x9e>
		/*
		for(j = 0; j < 8; j++){
			data[i] |= (*potato_address)<<(7-j)*8;
			potato_address++;
		}*/
		memcpy(&data, (source_address + i),8);
 8012e84:	f105 4478 	add.w	r4, r5, #4160749568	; 0xf8000000
 8012e88:	4e16      	ldr	r6, [pc, #88]	; (8012ee4 <Potato_Save+0xa8>)
	for(i = 0; i < 13; i++){
 8012e8a:	4d17      	ldr	r5, [pc, #92]	; (8012ee8 <Potato_Save+0xac>)
		memcpy(&data, (source_address + i),8);
 8012e8c:	f5a4 24fe 	sub.w	r4, r4, #520192	; 0x7f000
 8012e90:	19a2      	adds	r2, r4, r6
 8012e92:	59a0      	ldr	r0, [r4, r6]
 8012e94:	6851      	ldr	r1, [r2, #4]
 8012e96:	ab02      	add	r3, sp, #8
 8012e98:	c303      	stmia	r3!, {r0, r1}

		//data = 0x1010101010101010;

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), data) != HAL_OK) {
 8012e9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012e9e:	4631      	mov	r1, r6
 8012ea0:	4642      	mov	r2, r8
 8012ea2:	464b      	mov	r3, r9
 8012ea4:	2000      	movs	r0, #0
 8012ea6:	f001 fa83 	bl	80143b0 <HAL_FLASH_Program>
 8012eaa:	b118      	cbz	r0, 8012eb4 <Potato_Save+0x78>
			ret = write_error;
			return ret;
 8012eac:	2002      	movs	r0, #2
	}
	__set_PRIMASK(primask_bit);

	return save_ok;

}
 8012eae:	b009      	add	sp, #36	; 0x24
 8012eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_Backup_address + i), data) != HAL_OK) {
 8012eb4:	4642      	mov	r2, r8
 8012eb6:	464b      	mov	r3, r9
 8012eb8:	f506 6100 	add.w	r1, r6, #2048	; 0x800
 8012ebc:	f001 fa78 	bl	80143b0 <HAL_FLASH_Program>
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	d1f3      	bne.n	8012eac <Potato_Save+0x70>
	for(i = 0; i < 13; i++){
 8012ec4:	3608      	adds	r6, #8
 8012ec6:	42ae      	cmp	r6, r5
 8012ec8:	d1e2      	bne.n	8012e90 <Potato_Save+0x54>
	if(HAL_FLASH_Lock() != HAL_OK){
 8012eca:	f001 fa3d 	bl	8014348 <HAL_FLASH_Lock>
 8012ece:	b930      	cbnz	r0, 8012ede <Potato_Save+0xa2>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ed0:	f387 8810 	msr	PRIMASK, r7
	return save_ok;
 8012ed4:	e7eb      	b.n	8012eae <Potato_Save+0x72>
		return ret;
 8012ed6:	2003      	movs	r0, #3
 8012ed8:	e7e9      	b.n	8012eae <Potato_Save+0x72>
		return ret;
 8012eda:	4620      	mov	r0, r4
 8012edc:	e7e7      	b.n	8012eae <Potato_Save+0x72>
		return ret;
 8012ede:	2004      	movs	r0, #4
 8012ee0:	e7e5      	b.n	8012eae <Potato_Save+0x72>
 8012ee2:	bf00      	nop
 8012ee4:	0807f000 	.word	0x0807f000
 8012ee8:	0807f068 	.word	0x0807f068

08012eec <Potato_Load>:

save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 8012eec:	b530      	push	{r4, r5, lr}
 8012eee:	b09b      	sub	sp, #108	; 0x6c

	save_ret_t ret = 0;
	uint16_t crcval = 0;
	uint8_t temp[102] = {0,};
 8012ef0:	2100      	movs	r1, #0
 8012ef2:	2262      	movs	r2, #98	; 0x62
save_ret_t Potato_Load(POTATO_Context_t *POTATO){
 8012ef4:	4605      	mov	r5, r0
	uint8_t temp[102] = {0,};
 8012ef6:	a801      	add	r0, sp, #4
 8012ef8:	9100      	str	r1, [sp, #0]
 8012efa:	f002 f995 	bl	8015228 <memset>
	//uint16_t saved_crcval = 0;
	//uint8_t *normal_crc_address = Potato_Flash_CRC_Address;
	//uint8_t *backup_crc_address = Potato_Flash_Backup_CRC_Address;

	memcpy(temp, Potato_Flash_Address,Potato_Data_Length_Bytes);
 8012efe:	2266      	movs	r2, #102	; 0x66
 8012f00:	4910      	ldr	r1, [pc, #64]	; (8012f44 <Potato_Load+0x58>)
 8012f02:	4668      	mov	r0, sp
 8012f04:	f002 f982 	bl	801520c <memcpy>


	//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
	crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 8012f08:	2166      	movs	r1, #102	; 0x66
 8012f0a:	4668      	mov	r0, sp
 8012f0c:	f7ff fc4c 	bl	80127a8 <crcSlow>
	if(crcval == 0){
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 8012f10:	2266      	movs	r2, #102	; 0x66
	if(crcval == 0){
 8012f12:	4604      	mov	r4, r0
 8012f14:	b930      	cbnz	r0, 8012f24 <Potato_Load+0x38>
		memcpy(POTATO, Potato_Flash_Address,Potato_Data_Length_Bytes);
 8012f16:	490b      	ldr	r1, [pc, #44]	; (8012f44 <Potato_Load+0x58>)

		//saved_crcval = ((POTATO->POTATO_CRC[0])<<8) | POTATO->POTATO_CRC[1];
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);

		if(crcval == 0){
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 8012f18:	4628      	mov	r0, r5
 8012f1a:	f002 f977 	bl	801520c <memcpy>
			ret = save_ok;
			return ret;
 8012f1e:	4620      	mov	r0, r4
			ret = crc_error;
			return ret;
		}
	}

}
 8012f20:	b01b      	add	sp, #108	; 0x6c
 8012f22:	bd30      	pop	{r4, r5, pc}
		memcpy(temp, Potato_Flash_Backup_Address, Potato_Data_Length_Bytes);
 8012f24:	4908      	ldr	r1, [pc, #32]	; (8012f48 <Potato_Load+0x5c>)
 8012f26:	4668      	mov	r0, sp
 8012f28:	f002 f970 	bl	801520c <memcpy>
		crcval = crcSlow(temp, Potato_Data_Length_Bytes);
 8012f2c:	2166      	movs	r1, #102	; 0x66
 8012f2e:	4668      	mov	r0, sp
 8012f30:	f7ff fc3a 	bl	80127a8 <crcSlow>
		if(crcval == 0){
 8012f34:	4604      	mov	r4, r0
 8012f36:	b910      	cbnz	r0, 8012f3e <Potato_Load+0x52>
			memcpy(POTATO, Potato_Flash_Backup_Address,Potato_Data_Length_Bytes);
 8012f38:	4903      	ldr	r1, [pc, #12]	; (8012f48 <Potato_Load+0x5c>)
 8012f3a:	2266      	movs	r2, #102	; 0x66
 8012f3c:	e7ec      	b.n	8012f18 <Potato_Load+0x2c>
			return ret;
 8012f3e:	2006      	movs	r0, #6
 8012f40:	e7ee      	b.n	8012f20 <Potato_Load+0x34>
 8012f42:	bf00      	nop
 8012f44:	0807f000 	.word	0x0807f000
 8012f48:	0807f800 	.word	0x0807f800

08012f4c <Potato_Erase>:

save_ret_t Potato_Erase(erase_page_t pages){
 8012f4c:	b530      	push	{r4, r5, lr}
	uint32_t Page_Error = 0;
 8012f4e:	2300      	movs	r3, #0
save_ret_t Potato_Erase(erase_page_t pages){
 8012f50:	b087      	sub	sp, #28
	uint32_t primask_bit;
	save_ret_t ret = 0;

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 8012f52:	e9cd 3301 	strd	r3, r3, [sp, #4]
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Page;
 8012f56:	2401      	movs	r4, #1
 8012f58:	23fe      	movs	r3, #254	; 0xfe
 8012f5a:	e9cd 4303 	strd	r4, r3, [sp, #12]
	Erase_t.NbPages = pages;
 8012f5e:	9005      	str	r0, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f60:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012f64:	b672      	cpsid	i

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 8012f66:	f001 f9dd 	bl	8014324 <HAL_FLASH_Unlock>
 8012f6a:	b958      	cbnz	r0, 8012f84 <Potato_Erase+0x38>
			ret = unlock_error;
			return ret;
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 8012f6c:	a901      	add	r1, sp, #4
 8012f6e:	a802      	add	r0, sp, #8
 8012f70:	f001 fad0 	bl	8014514 <HAL_FLASHEx_Erase>
 8012f74:	b940      	cbnz	r0, 8012f88 <Potato_Erase+0x3c>
			ret = erase_error;
			return ret;
		}


	if(HAL_FLASH_Lock() != HAL_OK){
 8012f76:	f001 f9e7 	bl	8014348 <HAL_FLASH_Lock>
 8012f7a:	b938      	cbnz	r0, 8012f8c <Potato_Erase+0x40>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f7c:	f385 8810 	msr	PRIMASK, r5
			return ret;
		}

	__set_PRIMASK(primask_bit);
	return ret;
}
 8012f80:	b007      	add	sp, #28
 8012f82:	bd30      	pop	{r4, r5, pc}
			return ret;
 8012f84:	2003      	movs	r0, #3
 8012f86:	e7fb      	b.n	8012f80 <Potato_Erase+0x34>
			return ret;
 8012f88:	4620      	mov	r0, r4
 8012f8a:	e7f9      	b.n	8012f80 <Potato_Erase+0x34>
			return ret;
 8012f8c:	2004      	movs	r0, #4
 8012f8e:	e7f7      	b.n	8012f80 <Potato_Erase+0x34>

08012f90 <Potato_Backup_Load>:

save_ret_t Potato_Backup_Load(void){
 8012f90:	b570      	push	{r4, r5, r6, lr}
	uint64_t * dest_address = (uint64_t *)Potato_Flash_Address;
	uint64_t *source_address = (uint64_t *)Potato_Flash_Backup_Address;
	//uint64_t data;
	save_ret_t ret = 0;
	uint32_t primask_bit;
	uint32_t Page_Error = 0;
 8012f92:	2300      	movs	r3, #0
save_ret_t Potato_Backup_Load(void){
 8012f94:	b086      	sub	sp, #24

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Page;
 8012f96:	2401      	movs	r4, #1
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 8012f98:	e9cd 3301 	strd	r3, r3, [sp, #4]
	Erase_t.Page = Potato_Flash_Page;
 8012f9c:	23fe      	movs	r3, #254	; 0xfe
 8012f9e:	e9cd 4303 	strd	r4, r3, [sp, #12]
	Erase_t.NbPages = 1;
 8012fa2:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fa4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012fa8:	b672      	cpsid	i

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 8012faa:	f001 f9bb 	bl	8014324 <HAL_FLASH_Unlock>
 8012fae:	b9c0      	cbnz	r0, 8012fe2 <Potato_Backup_Load+0x52>
			ret = unlock_error;
			return ret;
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 8012fb0:	a901      	add	r1, sp, #4
 8012fb2:	a802      	add	r0, sp, #8
 8012fb4:	f001 faae 	bl	8014514 <HAL_FLASHEx_Erase>
 8012fb8:	b9a8      	cbnz	r0, 8012fe6 <Potato_Backup_Load+0x56>
 8012fba:	4c0e      	ldr	r4, [pc, #56]	; (8012ff4 <Potato_Backup_Load+0x64>)
			ret = erase_error;
			return ret;
		}

	for(uint8_t i = 0; i<13; i++){
 8012fbc:	4e0e      	ldr	r6, [pc, #56]	; (8012ff8 <Potato_Backup_Load+0x68>)
		//memcpy(&data, source_address + i, 8);
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), *(source_address + i)) != HAL_OK) {
 8012fbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012fc2:	f5a4 6100 	sub.w	r1, r4, #2048	; 0x800
 8012fc6:	2000      	movs	r0, #0
 8012fc8:	f001 f9f2 	bl	80143b0 <HAL_FLASH_Program>
 8012fcc:	b968      	cbnz	r0, 8012fea <Potato_Backup_Load+0x5a>
	for(uint8_t i = 0; i<13; i++){
 8012fce:	3408      	adds	r4, #8
 8012fd0:	42b4      	cmp	r4, r6
 8012fd2:	d1f4      	bne.n	8012fbe <Potato_Backup_Load+0x2e>
			ret = write_error;
			return ret;
		}
	}

	if(HAL_FLASH_Lock() != HAL_OK){
 8012fd4:	f001 f9b8 	bl	8014348 <HAL_FLASH_Lock>
 8012fd8:	b948      	cbnz	r0, 8012fee <Potato_Backup_Load+0x5e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fda:	f385 8810 	msr	PRIMASK, r5
		}

	__set_PRIMASK(primask_bit);

	return ret;
}
 8012fde:	b006      	add	sp, #24
 8012fe0:	bd70      	pop	{r4, r5, r6, pc}
			return ret;
 8012fe2:	2003      	movs	r0, #3
 8012fe4:	e7fb      	b.n	8012fde <Potato_Backup_Load+0x4e>
			return ret;
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	e7f9      	b.n	8012fde <Potato_Backup_Load+0x4e>
			return ret;
 8012fea:	2002      	movs	r0, #2
 8012fec:	e7f7      	b.n	8012fde <Potato_Backup_Load+0x4e>
			return ret;
 8012fee:	2004      	movs	r0, #4
 8012ff0:	e7f5      	b.n	8012fde <Potato_Backup_Load+0x4e>
 8012ff2:	bf00      	nop
 8012ff4:	0807f800 	.word	0x0807f800
 8012ff8:	0807f868 	.word	0x0807f868

08012ffc <Potato_Dummy_Backup>:

save_ret_t Potato_Dummy_Backup(void){
 8012ffc:	b570      	push	{r4, r5, r6, lr}
	uint64_t * dest_address = (uint64_t *)Potato_Flash_Backup_Address;
	save_ret_t ret = 0;
	uint32_t primask_bit;
	uint32_t Page_Error = 0;
 8012ffe:	2300      	movs	r3, #0
save_ret_t Potato_Dummy_Backup(void){
 8013000:	b086      	sub	sp, #24
	uint64_t data = 0x1010101010101010;

	FLASH_EraseInitTypeDef Erase_t;
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
	Erase_t.Banks = FLASH_BANK_1;
	Erase_t.Page = Potato_Flash_Backup_Page;
 8013002:	2401      	movs	r4, #1
	Erase_t.TypeErase = FLASH_TYPEERASE_PAGES;
 8013004:	e9cd 3301 	strd	r3, r3, [sp, #4]
	Erase_t.Page = Potato_Flash_Backup_Page;
 8013008:	23ff      	movs	r3, #255	; 0xff
 801300a:	e9cd 4303 	strd	r4, r3, [sp, #12]
	Erase_t.NbPages = 1;
 801300e:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013010:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013014:	b672      	cpsid	i

	primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
	__disable_irq();

	if(HAL_FLASH_Unlock() != HAL_OK) {
 8013016:	f001 f985 	bl	8014324 <HAL_FLASH_Unlock>
 801301a:	b9c8      	cbnz	r0, 8013050 <Potato_Dummy_Backup+0x54>
			ret = unlock_error;
			return ret;
		}

	if(HAL_FLASHEx_Erase(&Erase_t, &Page_Error) != HAL_OK){
 801301c:	a901      	add	r1, sp, #4
 801301e:	a802      	add	r0, sp, #8
 8013020:	f001 fa78 	bl	8014514 <HAL_FLASHEx_Erase>
 8013024:	b9b0      	cbnz	r0, 8013054 <Potato_Dummy_Backup+0x58>
 8013026:	4c0e      	ldr	r4, [pc, #56]	; (8013060 <Potato_Dummy_Backup+0x64>)
			ret = erase_error;
			return ret;
		}

	for(uint8_t i = 0; i<13; i++){
 8013028:	4e0e      	ldr	r6, [pc, #56]	; (8013064 <Potato_Dummy_Backup+0x68>)
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)(dest_address + i), data)) {
 801302a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 801302e:	f04f 3310 	mov.w	r3, #269488144	; 0x10101010
 8013032:	4621      	mov	r1, r4
 8013034:	2000      	movs	r0, #0
 8013036:	f001 f9bb 	bl	80143b0 <HAL_FLASH_Program>
 801303a:	b968      	cbnz	r0, 8013058 <Potato_Dummy_Backup+0x5c>
	for(uint8_t i = 0; i<13; i++){
 801303c:	3408      	adds	r4, #8
 801303e:	42b4      	cmp	r4, r6
 8013040:	d1f3      	bne.n	801302a <Potato_Dummy_Backup+0x2e>
			ret = write_error;
			return ret;
		}
	}

	if(HAL_FLASH_Lock() != HAL_OK){
 8013042:	f001 f981 	bl	8014348 <HAL_FLASH_Lock>
 8013046:	b948      	cbnz	r0, 801305c <Potato_Dummy_Backup+0x60>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013048:	f385 8810 	msr	PRIMASK, r5
		}

	__set_PRIMASK(primask_bit);

	return ret;
}
 801304c:	b006      	add	sp, #24
 801304e:	bd70      	pop	{r4, r5, r6, pc}
			return ret;
 8013050:	2003      	movs	r0, #3
 8013052:	e7fb      	b.n	801304c <Potato_Dummy_Backup+0x50>
			return ret;
 8013054:	4620      	mov	r0, r4
 8013056:	e7f9      	b.n	801304c <Potato_Dummy_Backup+0x50>
			return ret;
 8013058:	2002      	movs	r0, #2
 801305a:	e7f7      	b.n	801304c <Potato_Dummy_Backup+0x50>
			return ret;
 801305c:	2004      	movs	r0, #4
 801305e:	e7f5      	b.n	801304c <Potato_Dummy_Backup+0x50>
 8013060:	0807f800 	.word	0x0807f800
 8013064:	0807f868 	.word	0x0807f868

08013068 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8013068:	4a44      	ldr	r2, [pc, #272]	; (801317c <RCCEx_PLLSAI1_Config+0x114>)
{
 801306a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801306c:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801306e:	68d1      	ldr	r1, [r2, #12]
 8013070:	6803      	ldr	r3, [r0, #0]
 8013072:	f011 0f03 	tst.w	r1, #3
{
 8013076:	4605      	mov	r5, r0
 8013078:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801307a:	d029      	beq.n	80130d0 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801307c:	68d1      	ldr	r1, [r2, #12]
 801307e:	f001 0103 	and.w	r1, r1, #3
 8013082:	4299      	cmp	r1, r3
 8013084:	d178      	bne.n	8013178 <RCCEx_PLLSAI1_Config+0x110>
       ||
 8013086:	2900      	cmp	r1, #0
 8013088:	d076      	beq.n	8013178 <RCCEx_PLLSAI1_Config+0x110>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801308a:	68d3      	ldr	r3, [r2, #12]
       ||
 801308c:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801308e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8013092:	3301      	adds	r3, #1
       ||
 8013094:	4293      	cmp	r3, r2
 8013096:	d16f      	bne.n	8013178 <RCCEx_PLLSAI1_Config+0x110>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8013098:	6823      	ldr	r3, [r4, #0]
 801309a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801309e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80130a0:	f000 fbe4 	bl	801386c <HAL_GetTick>
 80130a4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80130a6:	6823      	ldr	r3, [r4, #0]
 80130a8:	011a      	lsls	r2, r3, #4
 80130aa:	d430      	bmi.n	801310e <RCCEx_PLLSAI1_Config+0xa6>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80130ac:	68ab      	ldr	r3, [r5, #8]
 80130ae:	021f      	lsls	r7, r3, #8
 80130b0:	b3a6      	cbz	r6, 801311c <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80130b2:	2e01      	cmp	r6, #1
 80130b4:	d14d      	bne.n	8013152 <RCCEx_PLLSAI1_Config+0xea>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80130b6:	692a      	ldr	r2, [r5, #16]
 80130b8:	6921      	ldr	r1, [r4, #16]
 80130ba:	0852      	lsrs	r2, r2, #1
 80130bc:	1e53      	subs	r3, r2, #1
 80130be:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 80130c2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80130c6:	433a      	orrs	r2, r7
 80130c8:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 80130cc:	6122      	str	r2, [r4, #16]
 80130ce:	e030      	b.n	8013132 <RCCEx_PLLSAI1_Config+0xca>
    switch(PllSai1->PLLSAI1Source)
 80130d0:	2b02      	cmp	r3, #2
 80130d2:	d011      	beq.n	80130f8 <RCCEx_PLLSAI1_Config+0x90>
 80130d4:	2b03      	cmp	r3, #3
 80130d6:	d013      	beq.n	8013100 <RCCEx_PLLSAI1_Config+0x98>
 80130d8:	2b01      	cmp	r3, #1
 80130da:	d14d      	bne.n	8013178 <RCCEx_PLLSAI1_Config+0x110>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80130dc:	6812      	ldr	r2, [r2, #0]
 80130de:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80130e2:	d049      	beq.n	8013178 <RCCEx_PLLSAI1_Config+0x110>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80130e4:	68e0      	ldr	r0, [r4, #12]
 80130e6:	686a      	ldr	r2, [r5, #4]
 80130e8:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 80130ec:	3a01      	subs	r2, #1
 80130ee:	4318      	orrs	r0, r3
 80130f0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80130f4:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 80130f6:	e7cf      	b.n	8013098 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80130f8:	6812      	ldr	r2, [r2, #0]
 80130fa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80130fe:	e7f0      	b.n	80130e2 <RCCEx_PLLSAI1_Config+0x7a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8013100:	6811      	ldr	r1, [r2, #0]
 8013102:	0389      	lsls	r1, r1, #14
 8013104:	d4ee      	bmi.n	80130e4 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8013106:	6812      	ldr	r2, [r2, #0]
 8013108:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 801310c:	e7e9      	b.n	80130e2 <RCCEx_PLLSAI1_Config+0x7a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801310e:	f000 fbad 	bl	801386c <HAL_GetTick>
 8013112:	1bc0      	subs	r0, r0, r7
 8013114:	2802      	cmp	r0, #2
 8013116:	d9c6      	bls.n	80130a6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8013118:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 801311a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801311c:	6921      	ldr	r1, [r4, #16]
 801311e:	68eb      	ldr	r3, [r5, #12]
 8013120:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8013124:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8013128:	091b      	lsrs	r3, r3, #4
 801312a:	4339      	orrs	r1, r7
 801312c:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8013130:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8013132:	6823      	ldr	r3, [r4, #0]
 8013134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013138:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 801313a:	f000 fb97 	bl	801386c <HAL_GetTick>
 801313e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8013140:	6823      	ldr	r3, [r4, #0]
 8013142:	011b      	lsls	r3, r3, #4
 8013144:	d512      	bpl.n	801316c <RCCEx_PLLSAI1_Config+0x104>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8013146:	6923      	ldr	r3, [r4, #16]
 8013148:	69aa      	ldr	r2, [r5, #24]
 801314a:	4313      	orrs	r3, r2
 801314c:	6123      	str	r3, [r4, #16]
 801314e:	2000      	movs	r0, #0
  return status;
 8013150:	e7e3      	b.n	801311a <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8013152:	696b      	ldr	r3, [r5, #20]
 8013154:	6922      	ldr	r2, [r4, #16]
 8013156:	085b      	lsrs	r3, r3, #1
 8013158:	1e59      	subs	r1, r3, #1
 801315a:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 801315e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8013162:	433b      	orrs	r3, r7
 8013164:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8013168:	6123      	str	r3, [r4, #16]
 801316a:	e7e2      	b.n	8013132 <RCCEx_PLLSAI1_Config+0xca>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801316c:	f000 fb7e 	bl	801386c <HAL_GetTick>
 8013170:	1b80      	subs	r0, r0, r6
 8013172:	2802      	cmp	r0, #2
 8013174:	d9e4      	bls.n	8013140 <RCCEx_PLLSAI1_Config+0xd8>
 8013176:	e7cf      	b.n	8013118 <RCCEx_PLLSAI1_Config+0xb0>
      status = HAL_ERROR;
 8013178:	2001      	movs	r0, #1
 801317a:	e7ce      	b.n	801311a <RCCEx_PLLSAI1_Config+0xb2>
 801317c:	40021000 	.word	0x40021000

08013180 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8013180:	4a3d      	ldr	r2, [pc, #244]	; (8013278 <RCCEx_PLLSAI2_Config+0xf8>)
{
 8013182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013184:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8013186:	68d1      	ldr	r1, [r2, #12]
 8013188:	6803      	ldr	r3, [r0, #0]
 801318a:	f011 0f03 	tst.w	r1, #3
{
 801318e:	4605      	mov	r5, r0
 8013190:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8013192:	d027      	beq.n	80131e4 <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8013194:	68d1      	ldr	r1, [r2, #12]
 8013196:	f001 0103 	and.w	r1, r1, #3
 801319a:	4299      	cmp	r1, r3
 801319c:	d169      	bne.n	8013272 <RCCEx_PLLSAI2_Config+0xf2>
       ||
 801319e:	2900      	cmp	r1, #0
 80131a0:	d067      	beq.n	8013272 <RCCEx_PLLSAI2_Config+0xf2>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80131a2:	68d3      	ldr	r3, [r2, #12]
       ||
 80131a4:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80131a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80131aa:	3301      	adds	r3, #1
       ||
 80131ac:	4293      	cmp	r3, r2
 80131ae:	d160      	bne.n	8013272 <RCCEx_PLLSAI2_Config+0xf2>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80131b0:	6823      	ldr	r3, [r4, #0]
 80131b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80131b6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80131b8:	f000 fb58 	bl	801386c <HAL_GetTick>
 80131bc:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80131be:	6823      	ldr	r3, [r4, #0]
 80131c0:	009a      	lsls	r2, r3, #2
 80131c2:	d42e      	bmi.n	8013222 <RCCEx_PLLSAI2_Config+0xa2>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80131c4:	68ab      	ldr	r3, [r5, #8]
 80131c6:	0218      	lsls	r0, r3, #8
 80131c8:	b396      	cbz	r6, 8013230 <RCCEx_PLLSAI2_Config+0xb0>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80131ca:	6963      	ldr	r3, [r4, #20]
 80131cc:	6929      	ldr	r1, [r5, #16]
 80131ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80131d2:	0849      	lsrs	r1, r1, #1
 80131d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80131d8:	3901      	subs	r1, #1
 80131da:	4303      	orrs	r3, r0
 80131dc:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80131e0:	6163      	str	r3, [r4, #20]
 80131e2:	e030      	b.n	8013246 <RCCEx_PLLSAI2_Config+0xc6>
    switch(PllSai2->PLLSAI2Source)
 80131e4:	2b02      	cmp	r3, #2
 80131e6:	d011      	beq.n	801320c <RCCEx_PLLSAI2_Config+0x8c>
 80131e8:	2b03      	cmp	r3, #3
 80131ea:	d013      	beq.n	8013214 <RCCEx_PLLSAI2_Config+0x94>
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d140      	bne.n	8013272 <RCCEx_PLLSAI2_Config+0xf2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80131f0:	6812      	ldr	r2, [r2, #0]
 80131f2:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80131f6:	d03c      	beq.n	8013272 <RCCEx_PLLSAI2_Config+0xf2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80131f8:	68e0      	ldr	r0, [r4, #12]
 80131fa:	686a      	ldr	r2, [r5, #4]
 80131fc:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8013200:	3a01      	subs	r2, #1
 8013202:	4318      	orrs	r0, r3
 8013204:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013208:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 801320a:	e7d1      	b.n	80131b0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801320c:	6812      	ldr	r2, [r2, #0]
 801320e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8013212:	e7f0      	b.n	80131f6 <RCCEx_PLLSAI2_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8013214:	6811      	ldr	r1, [r2, #0]
 8013216:	0389      	lsls	r1, r1, #14
 8013218:	d4ee      	bmi.n	80131f8 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801321a:	6812      	ldr	r2, [r2, #0]
 801321c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8013220:	e7e9      	b.n	80131f6 <RCCEx_PLLSAI2_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8013222:	f000 fb23 	bl	801386c <HAL_GetTick>
 8013226:	1bc0      	subs	r0, r0, r7
 8013228:	2802      	cmp	r0, #2
 801322a:	d9c8      	bls.n	80131be <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 801322c:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 801322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8013230:	6962      	ldr	r2, [r4, #20]
 8013232:	68eb      	ldr	r3, [r5, #12]
 8013234:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8013238:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801323c:	091b      	lsrs	r3, r3, #4
 801323e:	4302      	orrs	r2, r0
 8013240:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8013244:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8013246:	6823      	ldr	r3, [r4, #0]
 8013248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801324c:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 801324e:	f000 fb0d 	bl	801386c <HAL_GetTick>
 8013252:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8013254:	6823      	ldr	r3, [r4, #0]
 8013256:	009b      	lsls	r3, r3, #2
 8013258:	d505      	bpl.n	8013266 <RCCEx_PLLSAI2_Config+0xe6>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 801325a:	6963      	ldr	r3, [r4, #20]
 801325c:	696a      	ldr	r2, [r5, #20]
 801325e:	4313      	orrs	r3, r2
 8013260:	6163      	str	r3, [r4, #20]
 8013262:	2000      	movs	r0, #0
  return status;
 8013264:	e7e3      	b.n	801322e <RCCEx_PLLSAI2_Config+0xae>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8013266:	f000 fb01 	bl	801386c <HAL_GetTick>
 801326a:	1b80      	subs	r0, r0, r6
 801326c:	2802      	cmp	r0, #2
 801326e:	d9f1      	bls.n	8013254 <RCCEx_PLLSAI2_Config+0xd4>
 8013270:	e7dc      	b.n	801322c <RCCEx_PLLSAI2_Config+0xac>
      status = HAL_ERROR;
 8013272:	2001      	movs	r0, #1
 8013274:	e7db      	b.n	801322e <RCCEx_PLLSAI2_Config+0xae>
 8013276:	bf00      	nop
 8013278:	40021000 	.word	0x40021000

0801327c <HAL_RCCEx_PeriphCLKConfig>:
{
 801327c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8013280:	6806      	ldr	r6, [r0, #0]
 8013282:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8013286:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8013288:	d009      	beq.n	801329e <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 801328a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 801328c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8013290:	d022      	beq.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8013292:	d813      	bhi.n	80132bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8013294:	b331      	cbz	r1, 80132e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8013296:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 801329a:	d02a      	beq.n	80132f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801329c:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801329e:	6823      	ldr	r3, [r4, #0]
 80132a0:	04d8      	lsls	r0, r3, #19
 80132a2:	d509      	bpl.n	80132b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80132a4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80132a6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80132aa:	d02c      	beq.n	8013306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80132ac:	d826      	bhi.n	80132fc <HAL_RCCEx_PeriphCLKConfig+0x80>
 80132ae:	b381      	cbz	r1, 8013312 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80132b0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80132b4:	d070      	beq.n	8013398 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80132b6:	2601      	movs	r6, #1
 80132b8:	4635      	mov	r5, r6
 80132ba:	e039      	b.n	8013330 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80132bc:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80132c0:	d1ec      	bne.n	801329c <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80132c2:	4ab5      	ldr	r2, [pc, #724]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80132c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80132c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80132ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80132ce:	430b      	orrs	r3, r1
 80132d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80132d4:	2600      	movs	r6, #0
 80132d6:	e7e2      	b.n	801329e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80132d8:	4aaf      	ldr	r2, [pc, #700]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80132da:	68d3      	ldr	r3, [r2, #12]
 80132dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80132e0:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80132e2:	e7ee      	b.n	80132c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80132e4:	3004      	adds	r0, #4
 80132e6:	f7ff febf 	bl	8013068 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80132ea:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80132ec:	2800      	cmp	r0, #0
 80132ee:	d1d6      	bne.n	801329e <HAL_RCCEx_PeriphCLKConfig+0x22>
 80132f0:	e7e7      	b.n	80132c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80132f2:	2100      	movs	r1, #0
 80132f4:	3020      	adds	r0, #32
 80132f6:	f7ff ff43 	bl	8013180 <RCCEx_PLLSAI2_Config>
 80132fa:	e7f6      	b.n	80132ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80132fc:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8013300:	d1d9      	bne.n	80132b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8013302:	4635      	mov	r5, r6
 8013304:	e009      	b.n	801331a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8013306:	4aa4      	ldr	r2, [pc, #656]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8013308:	68d3      	ldr	r3, [r2, #12]
 801330a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801330e:	60d3      	str	r3, [r2, #12]
      break;
 8013310:	e7f7      	b.n	8013302 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8013312:	1d20      	adds	r0, r4, #4
 8013314:	f7ff fea8 	bl	8013068 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8013318:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801331a:	2d00      	cmp	r5, #0
 801331c:	d142      	bne.n	80133a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801331e:	4a9e      	ldr	r2, [pc, #632]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8013320:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8013322:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8013326:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 801332a:	430b      	orrs	r3, r1
 801332c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013330:	6823      	ldr	r3, [r4, #0]
 8013332:	0399      	lsls	r1, r3, #14
 8013334:	f140 815e 	bpl.w	80135f4 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8013338:	4f97      	ldr	r7, [pc, #604]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 801333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801333c:	00da      	lsls	r2, r3, #3
 801333e:	d433      	bmi.n	80133a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8013340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013346:	65bb      	str	r3, [r7, #88]	; 0x58
 8013348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801334e:	9301      	str	r3, [sp, #4]
 8013350:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8013352:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013356:	f8df 9244 	ldr.w	r9, [pc, #580]	; 801359c <HAL_RCCEx_PeriphCLKConfig+0x320>
 801335a:	f8d9 3000 	ldr.w	r3, [r9]
 801335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013362:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8013366:	f000 fa81 	bl	801386c <HAL_GetTick>
 801336a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801336c:	f8d9 3000 	ldr.w	r3, [r9]
 8013370:	05db      	lsls	r3, r3, #23
 8013372:	d51c      	bpl.n	80133ae <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 8013374:	bb15      	cbnz	r5, 80133bc <HAL_RCCEx_PeriphCLKConfig+0x140>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8013376:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801337a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 801337e:	f040 810f 	bne.w	80135a0 <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013386:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 801338a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801338e:	4313      	orrs	r3, r2
 8013390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013394:	4635      	mov	r5, r6
 8013396:	e011      	b.n	80133bc <HAL_RCCEx_PeriphCLKConfig+0x140>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8013398:	2100      	movs	r1, #0
 801339a:	f104 0020 	add.w	r0, r4, #32
 801339e:	f7ff feef 	bl	8013180 <RCCEx_PLLSAI2_Config>
 80133a2:	e7b9      	b.n	8013318 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80133a4:	462e      	mov	r6, r5
 80133a6:	e7c3      	b.n	8013330 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80133a8:	f04f 0800 	mov.w	r8, #0
 80133ac:	e7d3      	b.n	8013356 <HAL_RCCEx_PeriphCLKConfig+0xda>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80133ae:	f000 fa5d 	bl	801386c <HAL_GetTick>
 80133b2:	eba0 000a 	sub.w	r0, r0, sl
 80133b6:	2802      	cmp	r0, #2
 80133b8:	d9d8      	bls.n	801336c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80133ba:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80133bc:	f1b8 0f00 	cmp.w	r8, #0
 80133c0:	d003      	beq.n	80133ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80133c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80133c8:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80133ca:	6823      	ldr	r3, [r4, #0]
 80133cc:	07da      	lsls	r2, r3, #31
 80133ce:	d508      	bpl.n	80133e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80133d0:	4971      	ldr	r1, [pc, #452]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80133d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80133d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80133d8:	f022 0203 	bic.w	r2, r2, #3
 80133dc:	4302      	orrs	r2, r0
 80133de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80133e2:	079f      	lsls	r7, r3, #30
 80133e4:	d508      	bpl.n	80133f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80133e6:	496c      	ldr	r1, [pc, #432]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80133e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80133ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80133ee:	f022 020c 	bic.w	r2, r2, #12
 80133f2:	4302      	orrs	r2, r0
 80133f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80133f8:	075e      	lsls	r6, r3, #29
 80133fa:	d508      	bpl.n	801340e <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80133fc:	4966      	ldr	r1, [pc, #408]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80133fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8013400:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8013404:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8013408:	4302      	orrs	r2, r0
 801340a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801340e:	0718      	lsls	r0, r3, #28
 8013410:	d508      	bpl.n	8013424 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8013412:	4961      	ldr	r1, [pc, #388]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8013414:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013416:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 801341a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801341e:	4302      	orrs	r2, r0
 8013420:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8013424:	06d9      	lsls	r1, r3, #27
 8013426:	d508      	bpl.n	801343a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8013428:	495b      	ldr	r1, [pc, #364]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 801342a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801342c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8013430:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013434:	4302      	orrs	r2, r0
 8013436:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801343a:	069a      	lsls	r2, r3, #26
 801343c:	d508      	bpl.n	8013450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801343e:	4956      	ldr	r1, [pc, #344]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8013440:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8013442:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8013446:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801344a:	4302      	orrs	r2, r0
 801344c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8013450:	059f      	lsls	r7, r3, #22
 8013452:	d508      	bpl.n	8013466 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013454:	4950      	ldr	r1, [pc, #320]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8013456:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8013458:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 801345c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8013460:	4302      	orrs	r2, r0
 8013462:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8013466:	055e      	lsls	r6, r3, #21
 8013468:	d508      	bpl.n	801347c <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801346a:	494b      	ldr	r1, [pc, #300]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 801346c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801346e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8013472:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8013476:	4302      	orrs	r2, r0
 8013478:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801347c:	0658      	lsls	r0, r3, #25
 801347e:	d508      	bpl.n	8013492 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013480:	4945      	ldr	r1, [pc, #276]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8013482:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8013484:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8013488:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801348c:	4302      	orrs	r2, r0
 801348e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8013492:	0619      	lsls	r1, r3, #24
 8013494:	d508      	bpl.n	80134a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8013496:	4940      	ldr	r1, [pc, #256]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8013498:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801349a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 801349e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80134a2:	4302      	orrs	r2, r0
 80134a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80134a8:	05da      	lsls	r2, r3, #23
 80134aa:	d508      	bpl.n	80134be <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80134ac:	493a      	ldr	r1, [pc, #232]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80134ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80134b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80134b8:	4302      	orrs	r2, r0
 80134ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80134be:	049b      	lsls	r3, r3, #18
 80134c0:	d510      	bpl.n	80134e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80134c2:	4a35      	ldr	r2, [pc, #212]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80134c4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80134c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80134ca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80134ce:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80134d0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80134d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80134d8:	f040 808e 	bne.w	80135f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80134dc:	68d3      	ldr	r3, [r2, #12]
 80134de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80134e2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80134e4:	6823      	ldr	r3, [r4, #0]
 80134e6:	031f      	lsls	r7, r3, #12
 80134e8:	d510      	bpl.n	801350c <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80134ea:	4a2b      	ldr	r2, [pc, #172]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80134ec:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80134ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80134f2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80134f6:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80134f8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80134fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8013500:	f040 8086 	bne.w	8013610 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8013504:	68d3      	ldr	r3, [r2, #12]
 8013506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801350a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801350c:	6823      	ldr	r3, [r4, #0]
 801350e:	035e      	lsls	r6, r3, #13
 8013510:	d50f      	bpl.n	8013532 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013512:	4a21      	ldr	r2, [pc, #132]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8013514:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8013516:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 801351a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 801351e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8013520:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8013528:	d17e      	bne.n	8013628 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801352a:	68d3      	ldr	r3, [r2, #12]
 801352c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013530:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013532:	6823      	ldr	r3, [r4, #0]
 8013534:	0458      	lsls	r0, r3, #17
 8013536:	d512      	bpl.n	801355e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013538:	4917      	ldr	r1, [pc, #92]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 801353a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801353c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8013540:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8013544:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8013546:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801354e:	d176      	bne.n	801363e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8013550:	2102      	movs	r1, #2
 8013552:	1d20      	adds	r0, r4, #4
 8013554:	f7ff fd88 	bl	8013068 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8013558:	2800      	cmp	r0, #0
 801355a:	bf18      	it	ne
 801355c:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801355e:	6822      	ldr	r2, [r4, #0]
 8013560:	0411      	lsls	r1, r2, #16
 8013562:	d508      	bpl.n	8013576 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013564:	490c      	ldr	r1, [pc, #48]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8013566:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8013568:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801356c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013570:	4303      	orrs	r3, r0
 8013572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013576:	03d3      	lsls	r3, r2, #15
 8013578:	d509      	bpl.n	801358e <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801357a:	4a07      	ldr	r2, [pc, #28]	; (8013598 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 801357c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8013580:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8013584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013588:	430b      	orrs	r3, r1
 801358a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 801358e:	4628      	mov	r0, r5
 8013590:	b002      	add	sp, #8
 8013592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013596:	bf00      	nop
 8013598:	40021000 	.word	0x40021000
 801359c:	40007000 	.word	0x40007000
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80135a0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80135a4:	4293      	cmp	r3, r2
 80135a6:	f43f aeec 	beq.w	8013382 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80135aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80135ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80135b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80135b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80135ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80135be:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80135c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80135c6:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80135c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80135cc:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80135d0:	f57f aed7 	bpl.w	8013382 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 80135d4:	f000 f94a 	bl	801386c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80135d8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80135dc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80135de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80135e2:	0799      	lsls	r1, r3, #30
 80135e4:	f53f aecd 	bmi.w	8013382 <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80135e8:	f000 f940 	bl	801386c <HAL_GetTick>
 80135ec:	1b40      	subs	r0, r0, r5
 80135ee:	4548      	cmp	r0, r9
 80135f0:	d9f5      	bls.n	80135de <HAL_RCCEx_PeriphCLKConfig+0x362>
 80135f2:	e6e2      	b.n	80133ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80135f4:	4635      	mov	r5, r6
 80135f6:	e6e8      	b.n	80133ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80135f8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80135fc:	f47f af72 	bne.w	80134e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8013600:	2101      	movs	r1, #1
 8013602:	1d20      	adds	r0, r4, #4
 8013604:	f7ff fd30 	bl	8013068 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8013608:	2800      	cmp	r0, #0
 801360a:	bf18      	it	ne
 801360c:	4605      	movne	r5, r0
 801360e:	e769      	b.n	80134e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8013610:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8013614:	f47f af7a 	bne.w	801350c <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8013618:	2101      	movs	r1, #1
 801361a:	1d20      	adds	r0, r4, #4
 801361c:	f7ff fd24 	bl	8013068 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8013620:	2800      	cmp	r0, #0
 8013622:	bf18      	it	ne
 8013624:	4605      	movne	r5, r0
 8013626:	e771      	b.n	801350c <HAL_RCCEx_PeriphCLKConfig+0x290>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8013628:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 801362c:	d181      	bne.n	8013532 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801362e:	2101      	movs	r1, #1
 8013630:	1d20      	adds	r0, r4, #4
 8013632:	f7ff fd19 	bl	8013068 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8013636:	2800      	cmp	r0, #0
 8013638:	bf18      	it	ne
 801363a:	4605      	movne	r5, r0
 801363c:	e779      	b.n	8013532 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 801363e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8013642:	d18c      	bne.n	801355e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8013644:	2102      	movs	r1, #2
 8013646:	f104 0020 	add.w	r0, r4, #32
 801364a:	f7ff fd99 	bl	8013180 <RCCEx_PLLSAI2_Config>
 801364e:	e783      	b.n	8013558 <HAL_RCCEx_PeriphCLKConfig+0x2dc>

08013650 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8013650:	4770      	bx	lr

08013652 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8013652:	e7fe      	b.n	8013652 <HardFault_Handler>

08013654 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8013654:	e7fe      	b.n	8013654 <MemManage_Handler>

08013656 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8013656:	e7fe      	b.n	8013656 <BusFault_Handler>

08013658 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8013658:	e7fe      	b.n	8013658 <UsageFault_Handler>

0801365a <SVC_Handler>:
 801365a:	4770      	bx	lr

0801365c <DebugMon_Handler>:
 801365c:	4770      	bx	lr

0801365e <PendSV_Handler>:
 801365e:	4770      	bx	lr

08013660 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8013660:	f000 b8f8 	b.w	8013854 <HAL_IncTick>

08013664 <RTC_WKUP_IRQHandler>:
 * @param  None
 * @retval None
 */
void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 8013664:	f7fe bc68 	b.w	8011f38 <HW_TS_RTC_Wakeup_Handler>

08013668 <EXTI9_5_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI9_5_IRQHandler(void)           /* BNRG_SPI_EXTI_IRQHandler */
{
  HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
 8013668:	2040      	movs	r0, #64	; 0x40
 801366a:	f001 b8b1 	b.w	80147d0 <HAL_GPIO_EXTI_IRQHandler>

0801366e <EXTI15_10_IRQHandler>:
 * @param  None
 * @retval None
 */
void EXTI15_10_IRQHandler(void)  /* PUSH_BUTTON_EXTI_IRQHandler */
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 801366e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8013672:	f001 b8ad 	b.w	80147d0 <HAL_GPIO_EXTI_IRQHandler>

08013676 <DMA2_Channel1_IRQHandler>:
 * @param  None
 * @retval None
 */
void DMA2_Channel1_IRQHandler(void)     /* BNRG_SPI_RX_DMA_IRQHandler */
  {
    HW_BNRG_DMARxCb();
 8013676:	f7fe b955 	b.w	8011924 <HW_BNRG_DMARxCb>

0801367a <DMA2_Channel2_IRQHandler>:
 * @param  None
 * @retval None
 */
void DMA2_Channel2_IRQHandler(void)    /* BNRG_SPI_TX_DMA_IRQHandler */
  {
    HW_BNRG_DMATxCb();
 801367a:	f7fe b893 	b.w	80117a4 <HW_BNRG_DMATxCb>
	...

08013680 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013680:	4a10      	ldr	r2, [pc, #64]	; (80136c4 <SystemInit+0x44>)
     */

    /**
     * Increase FLASH latency to 3WS
     */
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8013682:	4811      	ldr	r0, [pc, #68]	; (80136c8 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013684:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8013688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801368c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    RCC->CR |= RCC_CR_MSION;
 8013690:	4b0e      	ldr	r3, [pc, #56]	; (80136cc <SystemInit+0x4c>)
 8013692:	6819      	ldr	r1, [r3, #0]
 8013694:	f041 0101 	orr.w	r1, r1, #1
 8013698:	6019      	str	r1, [r3, #0]
      RCC->CFGR = 0x00000000;
 801369a:	2100      	movs	r1, #0
 801369c:	6099      	str	r1, [r3, #8]
    FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 801369e:	6801      	ldr	r1, [r0, #0]
 80136a0:	f041 0103 	orr.w	r1, r1, #3
 80136a4:	6001      	str	r1, [r0, #0]

    /**
     * Decrease VCore to Range2.
     * As we are downscaling Vcore, it is not required to wait for the VOSF bit to be ready
     */
    RCC->APB1ENR1 = RCC_APB1ENR1_PWREN;  /**< Switch ON PWR clock */
 80136a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80136aa:	6599      	str	r1, [r3, #88]	; 0x58
    PWR->CR1 = PWR_CR1_VOS_1;
 80136ac:	4908      	ldr	r1, [pc, #32]	; (80136d0 <SystemInit+0x50>)
 80136ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80136b2:	6008      	str	r0, [r1, #0]

    /**
     * Increase MSI to 24Mhz
     *
     */
    RCC->CR = (RCC_CR_MSIRANGE_9|RCC_CR_MSIRGSEL|RCC_CR_MSION);   /**< Increase MSI Speed and switch MSI source*/
 80136b4:	2199      	movs	r1, #153	; 0x99
 80136b6:	6019      	str	r1, [r3, #0]

    SystemCoreClock = 24000000;
 80136b8:	4b06      	ldr	r3, [pc, #24]	; (80136d4 <SystemInit+0x54>)
 80136ba:	4907      	ldr	r1, [pc, #28]	; (80136d8 <SystemInit+0x58>)
 80136bc:	6019      	str	r1, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80136be:	4b07      	ldr	r3, [pc, #28]	; (80136dc <SystemInit+0x5c>)
 80136c0:	6093      	str	r3, [r2, #8]
#endif

}
 80136c2:	4770      	bx	lr
 80136c4:	e000ed00 	.word	0xe000ed00
 80136c8:	40022000 	.word	0x40022000
 80136cc:	40021000 	.word	0x40021000
 80136d0:	40007000 	.word	0x40007000
 80136d4:	20000004 	.word	0x20000004
 80136d8:	016e3600 	.word	0x016e3600
 80136dc:	08010000 	.word	0x08010000

080136e0 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80136e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80136e2:	b948      	cbnz	r0, 80136f8 <BSP_LED_Init+0x18>
 80136e4:	4b0d      	ldr	r3, [pc, #52]	; (801371c <BSP_LED_Init+0x3c>)
 80136e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80136e8:	f042 0202 	orr.w	r2, r2, #2
 80136ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80136ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136f0:	f003 0302 	and.w	r3, r3, #2
 80136f4:	9300      	str	r3, [sp, #0]
 80136f6:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80136f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80136fc:	2301      	movs	r3, #1
 80136fe:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8013702:	2100      	movs	r1, #0
 8013704:	2302      	movs	r3, #2
 8013706:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 801370a:	4b05      	ldr	r3, [pc, #20]	; (8013720 <BSP_LED_Init+0x40>)
 801370c:	a901      	add	r1, sp, #4
 801370e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8013712:	f000 ff73 	bl	80145fc <HAL_GPIO_Init>
}
 8013716:	b007      	add	sp, #28
 8013718:	f85d fb04 	ldr.w	pc, [sp], #4
 801371c:	40021000 	.word	0x40021000
 8013720:	20000008 	.word	0x20000008

08013724 <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8013724:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8013726:	4b1b      	ldr	r3, [pc, #108]	; (8013794 <BSP_PB_Init+0x70>)
 8013728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801372a:	f042 0204 	orr.w	r2, r2, #4
 801372e:	64da      	str	r2, [r3, #76]	; 0x4c
 8013730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013732:	f003 0304 	and.w	r3, r3, #4
 8013736:	9300      	str	r3, [sp, #0]
 8013738:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 801373a:	b989      	cbnz	r1, 8013760 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 801373c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8013740:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8013744:	2101      	movs	r1, #1
 8013746:	2302      	movs	r3, #2
 8013748:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 801374c:	4b12      	ldr	r3, [pc, #72]	; (8013798 <BSP_PB_Init+0x74>)
 801374e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013752:	a901      	add	r1, sp, #4
 8013754:	6840      	ldr	r0, [r0, #4]
 8013756:	f000 ff51 	bl	80145fc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 801375a:	b007      	add	sp, #28
 801375c:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 8013760:	2901      	cmp	r1, #1
 8013762:	d1fa      	bne.n	801375a <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8013764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013768:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801376a:	2303      	movs	r3, #3
 801376c:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 801376e:	4b0b      	ldr	r3, [pc, #44]	; (801379c <BSP_PB_Init+0x78>)
 8013770:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8013772:	4b09      	ldr	r3, [pc, #36]	; (8013798 <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 8013774:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8013776:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801377a:	a901      	add	r1, sp, #4
 801377c:	6840      	ldr	r0, [r0, #4]
 801377e:	f000 ff3d 	bl	80145fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8013782:	2200      	movs	r2, #0
 8013784:	210f      	movs	r1, #15
 8013786:	2028      	movs	r0, #40	; 0x28
 8013788:	f000 fcd8 	bl	801413c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 801378c:	2028      	movs	r0, #40	; 0x28
 801378e:	f000 fd07 	bl	80141a0 <HAL_NVIC_EnableIRQ>
}
 8013792:	e7e2      	b.n	801375a <BSP_PB_Init+0x36>
 8013794:	40021000 	.word	0x40021000
 8013798:	20000008 	.word	0x20000008
 801379c:	10110000 	.word	0x10110000

080137a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80137a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80137d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80137a4:	f7ff ff6c 	bl	8013680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80137a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80137aa:	e003      	b.n	80137b4 <LoopCopyDataInit>

080137ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80137ac:	4b0b      	ldr	r3, [pc, #44]	; (80137dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80137ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80137b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80137b2:	3104      	adds	r1, #4

080137b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80137b4:	480a      	ldr	r0, [pc, #40]	; (80137e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80137b6:	4b0b      	ldr	r3, [pc, #44]	; (80137e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80137b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80137ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80137bc:	d3f6      	bcc.n	80137ac <CopyDataInit>
	ldr	r2, =_sbss
 80137be:	4a0a      	ldr	r2, [pc, #40]	; (80137e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80137c0:	e002      	b.n	80137c8 <LoopFillZerobss>

080137c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80137c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80137c4:	f842 3b04 	str.w	r3, [r2], #4

080137c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80137c8:	4b08      	ldr	r3, [pc, #32]	; (80137ec <LoopForever+0x16>)
	cmp	r2, r3
 80137ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80137cc:	d3f9      	bcc.n	80137c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80137ce:	f001 fcf9 	bl	80151c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80137d2:	f7ff f9d9 	bl	8012b88 <main>

080137d6 <LoopForever>:

LoopForever:
    b LoopForever
 80137d6:	e7fe      	b.n	80137d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80137d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80137dc:	08015b70 	.word	0x08015b70
	ldr	r0, =_sdata
 80137e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80137e4:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 80137e8:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 80137ec:	20000cf4 	.word	0x20000cf4

080137f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80137f0:	e7fe      	b.n	80137f0 <ADC1_2_IRQHandler>

080137f2 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80137f2:	4770      	bx	lr

080137f4 <HAL_MspDeInit>:
 80137f4:	4770      	bx	lr
	...

080137f8 <HAL_DeInit>:
{
 80137f8:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 80137fa:	4b0a      	ldr	r3, [pc, #40]	; (8013824 <HAL_DeInit+0x2c>)
 80137fc:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 8013800:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8013802:	639a      	str	r2, [r3, #56]	; 0x38
 8013804:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8013806:	639c      	str	r4, [r3, #56]	; 0x38
 8013808:	63dc      	str	r4, [r3, #60]	; 0x3c
  __HAL_RCC_APB2_FORCE_RESET();
 801380a:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 801380c:	641c      	str	r4, [r3, #64]	; 0x40
  __HAL_RCC_AHB1_FORCE_RESET();
 801380e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8013810:	629c      	str	r4, [r3, #40]	; 0x28
  __HAL_RCC_AHB2_FORCE_RESET();
 8013812:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8013814:	62dc      	str	r4, [r3, #44]	; 0x2c
  __HAL_RCC_AHB3_FORCE_RESET();
 8013816:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8013818:	631c      	str	r4, [r3, #48]	; 0x30
  HAL_MspDeInit();
 801381a:	f7ff ffeb 	bl	80137f4 <HAL_MspDeInit>
}
 801381e:	4620      	mov	r0, r4
 8013820:	bd10      	pop	{r4, pc}
 8013822:	bf00      	nop
 8013824:	40021000 	.word	0x40021000

08013828 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013828:	4a09      	ldr	r2, [pc, #36]	; (8013850 <HAL_Init+0x28>)
 801382a:	6813      	ldr	r3, [r2, #0]
 801382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8013830:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013832:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013834:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013836:	f000 fc6f 	bl	8014118 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801383a:	200f      	movs	r0, #15
 801383c:	f7ff f946 	bl	8012acc <HAL_InitTick>
 8013840:	4604      	mov	r4, r0
 8013842:	b918      	cbnz	r0, 801384c <HAL_Init+0x24>
    HAL_MspInit();
 8013844:	f7ff ffd5 	bl	80137f2 <HAL_MspInit>
}
 8013848:	4620      	mov	r0, r4
 801384a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 801384c:	2401      	movs	r4, #1
 801384e:	e7fb      	b.n	8013848 <HAL_Init+0x20>
 8013850:	40022000 	.word	0x40022000

08013854 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8013854:	4a03      	ldr	r2, [pc, #12]	; (8013864 <HAL_IncTick+0x10>)
 8013856:	4b04      	ldr	r3, [pc, #16]	; (8013868 <HAL_IncTick+0x14>)
 8013858:	6811      	ldr	r1, [r2, #0]
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	440b      	add	r3, r1
 801385e:	6013      	str	r3, [r2, #0]
}
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop
 8013864:	20000ce0 	.word	0x20000ce0
 8013868:	2000001c 	.word	0x2000001c

0801386c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801386c:	4b01      	ldr	r3, [pc, #4]	; (8013874 <HAL_GetTick+0x8>)
 801386e:	6818      	ldr	r0, [r3, #0]
}
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop
 8013874:	20000ce0 	.word	0x20000ce0

08013878 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8013878:	4a02      	ldr	r2, [pc, #8]	; (8013884 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 801387a:	6853      	ldr	r3, [r2, #4]
 801387c:	f043 0301 	orr.w	r3, r3, #1
 8013880:	6053      	str	r3, [r2, #4]
}
 8013882:	4770      	bx	lr
 8013884:	e0042000 	.word	0xe0042000

08013888 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8013888:	4a02      	ldr	r2, [pc, #8]	; (8013894 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 801388a:	6853      	ldr	r3, [r2, #4]
 801388c:	f043 0302 	orr.w	r3, r3, #2
 8013890:	6053      	str	r3, [r2, #4]
}
 8013892:	4770      	bx	lr
 8013894:	e0042000 	.word	0xe0042000

08013898 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8013898:	4a02      	ldr	r2, [pc, #8]	; (80138a4 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 801389a:	6853      	ldr	r3, [r2, #4]
 801389c:	f043 0304 	orr.w	r3, r3, #4
 80138a0:	6053      	str	r3, [r2, #4]
}
 80138a2:	4770      	bx	lr
 80138a4:	e0042000 	.word	0xe0042000

080138a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80138a8:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80138aa:	0dcc      	lsrs	r4, r1, #23
 80138ac:	f004 0404 	and.w	r4, r4, #4
 80138b0:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 80138b2:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80138b6:	5823      	ldr	r3, [r4, r0]
 80138b8:	2507      	movs	r5, #7
 80138ba:	408d      	lsls	r5, r1
 80138bc:	ea23 0305 	bic.w	r3, r3, r5
 80138c0:	fa02 f101 	lsl.w	r1, r2, r1
 80138c4:	430b      	orrs	r3, r1
 80138c6:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80138c8:	bd30      	pop	{r4, r5, pc}

080138ca <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80138ca:	6880      	ldr	r0, [r0, #8]
}
 80138cc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80138d0:	4770      	bx	lr
	...

080138d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80138d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80138d6:	2300      	movs	r3, #0
 80138d8:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80138da:	4604      	mov	r4, r0
 80138dc:	2800      	cmp	r0, #0
 80138de:	f000 80c6 	beq.w	8013a6e <HAL_ADC_Init+0x19a>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80138e2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80138e4:	b925      	cbnz	r5, 80138f0 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80138e6:	f7ff fa69 	bl	8012dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80138ea:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80138ec:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80138f0:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80138f2:	6883      	ldr	r3, [r0, #8]
 80138f4:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80138f6:	bf41      	itttt	mi
 80138f8:	6883      	ldrmi	r3, [r0, #8]
 80138fa:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 80138fe:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 8013902:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8013904:	6883      	ldr	r3, [r0, #8]
 8013906:	00dd      	lsls	r5, r3, #3
 8013908:	f140 8091 	bpl.w	8013a2e <HAL_ADC_Init+0x15a>
 801390c:	6883      	ldr	r3, [r0, #8]
 801390e:	00d9      	lsls	r1, r3, #3
 8013910:	f100 80a4 	bmi.w	8013a5c <HAL_ADC_Init+0x188>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013914:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013916:	f043 0310 	orr.w	r3, r3, #16
 801391a:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801391c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801391e:	f043 0301 	orr.w	r3, r3, #1
 8013922:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8013924:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8013926:	f7ff ffd0 	bl	80138ca <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801392a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801392c:	f003 0310 	and.w	r3, r3, #16
 8013930:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8013932:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013934:	f040 8098 	bne.w	8013a68 <HAL_ADC_Init+0x194>
    ADC_STATE_CLR_SET(hadc->State,
 8013938:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 801393c:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013940:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8013942:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8013944:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013946:	07da      	lsls	r2, r3, #31
 8013948:	d411      	bmi.n	801396e <HAL_ADC_Init+0x9a>
 801394a:	4b4a      	ldr	r3, [pc, #296]	; (8013a74 <HAL_ADC_Init+0x1a0>)
 801394c:	4a4a      	ldr	r2, [pc, #296]	; (8013a78 <HAL_ADC_Init+0x1a4>)
 801394e:	689d      	ldr	r5, [r3, #8]
 8013950:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013954:	689b      	ldr	r3, [r3, #8]
 8013956:	6892      	ldr	r2, [r2, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8013958:	432b      	orrs	r3, r5
 801395a:	4313      	orrs	r3, r2
 801395c:	07db      	lsls	r3, r3, #31
 801395e:	d406      	bmi.n	801396e <HAL_ADC_Init+0x9a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8013960:	4a46      	ldr	r2, [pc, #280]	; (8013a7c <HAL_ADC_Init+0x1a8>)
 8013962:	6865      	ldr	r5, [r4, #4]
 8013964:	6893      	ldr	r3, [r2, #8]
 8013966:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 801396a:	432b      	orrs	r3, r5
 801396c:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 801396e:	68e5      	ldr	r5, [r4, #12]
 8013970:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8013972:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8013976:	432b      	orrs	r3, r5
 8013978:	68a5      	ldr	r5, [r4, #8]
 801397a:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801397c:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801397e:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8013980:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8013988:	bf02      	ittt	eq
 801398a:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 801398c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8013990:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8013994:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013996:	b122      	cbz	r2, 80139a2 <HAL_ADC_Init+0xce>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8013998:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801399a:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 801399e:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80139a0:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80139a2:	68c5      	ldr	r5, [r0, #12]
 80139a4:	4a36      	ldr	r2, [pc, #216]	; (8013a80 <HAL_ADC_Init+0x1ac>)
 80139a6:	402a      	ands	r2, r5
 80139a8:	4313      	orrs	r3, r2
 80139aa:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80139ac:	f7ff ff8d 	bl	80138ca <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80139b0:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80139b2:	689a      	ldr	r2, [r3, #8]
 80139b4:	f002 0208 	and.w	r2, r2, #8
 80139b8:	4302      	orrs	r2, r0
 80139ba:	d120      	bne.n	80139fe <HAL_ADC_Init+0x12a>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80139bc:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80139be:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80139c2:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80139c4:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80139c6:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80139ca:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80139ce:	f020 0002 	bic.w	r0, r0, #2
 80139d2:	4302      	orrs	r2, r0
 80139d4:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80139d6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80139da:	2a01      	cmp	r2, #1
 80139dc:	d140      	bne.n	8013a60 <HAL_ADC_Init+0x18c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80139de:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 80139e2:	6918      	ldr	r0, [r3, #16]
 80139e4:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80139e8:	f020 0004 	bic.w	r0, r0, #4
 80139ec:	432a      	orrs	r2, r5
 80139ee:	4302      	orrs	r2, r0
 80139f0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80139f2:	4302      	orrs	r2, r0
 80139f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80139f6:	4302      	orrs	r2, r0
 80139f8:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80139fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80139fe:	6922      	ldr	r2, [r4, #16]
 8013a00:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8013a02:	bf05      	ittet	eq
 8013a04:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8013a06:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8013a08:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8013a0a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8013a0e:	bf06      	itte	eq
 8013a10:	f020 000f 	biceq.w	r0, r0, #15
 8013a14:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8013a16:	f022 020f 	bicne.w	r2, r2, #15
 8013a1a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8013a1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013a1e:	f023 0303 	bic.w	r3, r3, #3
 8013a22:	f043 0301 	orr.w	r3, r3, #1
 8013a26:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8013a28:	4608      	mov	r0, r1
 8013a2a:	b003      	add	sp, #12
 8013a2c:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8013a2e:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8013a30:	4a14      	ldr	r2, [pc, #80]	; (8013a84 <HAL_ADC_Init+0x1b0>)
 8013a32:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8013a36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a3e:	6083      	str	r3, [r0, #8]
 8013a40:	4b11      	ldr	r3, [pc, #68]	; (8013a88 <HAL_ADC_Init+0x1b4>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a48:	3301      	adds	r3, #1
 8013a4a:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 8013a4c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8013a4e:	9b01      	ldr	r3, [sp, #4]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	f43f af5b 	beq.w	801390c <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8013a56:	9b01      	ldr	r3, [sp, #4]
 8013a58:	3b01      	subs	r3, #1
 8013a5a:	e7f7      	b.n	8013a4c <HAL_ADC_Init+0x178>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013a5c:	2100      	movs	r1, #0
 8013a5e:	e762      	b.n	8013926 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8013a60:	691a      	ldr	r2, [r3, #16]
 8013a62:	f022 0201 	bic.w	r2, r2, #1
 8013a66:	e7c9      	b.n	80139fc <HAL_ADC_Init+0x128>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013a68:	f043 0310 	orr.w	r3, r3, #16
 8013a6c:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8013a6e:	2101      	movs	r1, #1
 8013a70:	e7da      	b.n	8013a28 <HAL_ADC_Init+0x154>
 8013a72:	bf00      	nop
 8013a74:	50040000 	.word	0x50040000
 8013a78:	50040200 	.word	0x50040200
 8013a7c:	50040300 	.word	0x50040300
 8013a80:	fff0c007 	.word	0xfff0c007
 8013a84:	00030d40 	.word	0x00030d40
 8013a88:	20000004 	.word	0x20000004

08013a8c <HAL_ADC_PollForConversion>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8013a8c:	4b38      	ldr	r3, [pc, #224]	; (8013b70 <HAL_ADC_PollForConversion+0xe4>)
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8013a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8013a92:	6945      	ldr	r5, [r0, #20]
 8013a94:	689e      	ldr	r6, [r3, #8]
 8013a96:	2d08      	cmp	r5, #8
{
 8013a98:	4604      	mov	r4, r0
 8013a9a:	460f      	mov	r7, r1
 8013a9c:	f006 061f 	and.w	r6, r6, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8013aa0:	d017      	beq.n	8013ad2 <HAL_ADC_PollForConversion+0x46>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013aa2:	2e09      	cmp	r6, #9
 8013aa4:	d810      	bhi.n	8013ac8 <HAL_ADC_PollForConversion+0x3c>
 8013aa6:	f240 2221 	movw	r2, #545	; 0x221
 8013aaa:	40f2      	lsrs	r2, r6
 8013aac:	07d1      	lsls	r1, r2, #31
 8013aae:	d50b      	bpl.n	8013ac8 <HAL_ADC_PollForConversion+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8013ab0:	6803      	ldr	r3, [r0, #0]
 8013ab2:	68db      	ldr	r3, [r3, #12]
 8013ab4:	f013 0f01 	tst.w	r3, #1
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8013ab8:	d00a      	beq.n	8013ad0 <HAL_ADC_PollForConversion+0x44>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013aba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013abc:	f043 0320 	orr.w	r3, r3, #32
 8013ac0:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8013ac2:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8013ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8013ac8:	689b      	ldr	r3, [r3, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8013aca:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8013ace:	e7f3      	b.n	8013ab8 <HAL_ADC_PollForConversion+0x2c>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8013ad0:	2504      	movs	r5, #4
  tickstart = HAL_GetTick();
 8013ad2:	f7ff fecb 	bl	801386c <HAL_GetTick>
 8013ad6:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8013ad8:	6823      	ldr	r3, [r4, #0]
 8013ada:	681a      	ldr	r2, [r3, #0]
 8013adc:	422a      	tst	r2, r5
 8013ade:	d020      	beq.n	8013b22 <HAL_ADC_PollForConversion+0x96>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8013ae0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8013ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013ae6:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8013ae8:	68da      	ldr	r2, [r3, #12]
 8013aea:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8013aee:	d10f      	bne.n	8013b10 <HAL_ADC_PollForConversion+0x84>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8013af0:	7e62      	ldrb	r2, [r4, #25]
 8013af2:	b96a      	cbnz	r2, 8013b10 <HAL_ADC_PollForConversion+0x84>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	0710      	lsls	r0, r2, #28
 8013af8:	d50a      	bpl.n	8013b10 <HAL_ADC_PollForConversion+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8013afa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8013afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013b00:	6562      	str	r2, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8013b02:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8013b04:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8013b06:	bf5e      	ittt	pl
 8013b08:	6d62      	ldrpl	r2, [r4, #84]	; 0x54
 8013b0a:	f042 0201 	orrpl.w	r2, r2, #1
 8013b0e:	6562      	strpl	r2, [r4, #84]	; 0x54
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013b10:	4a18      	ldr	r2, [pc, #96]	; (8013b74 <HAL_ADC_PollForConversion+0xe8>)
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d021      	beq.n	8013b5a <HAL_ADC_PollForConversion+0xce>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8013b16:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8013b18:	2d08      	cmp	r5, #8
 8013b1a:	d118      	bne.n	8013b4e <HAL_ADC_PollForConversion+0xc2>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8013b1c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8013b1e:	2000      	movs	r0, #0
 8013b20:	e7d0      	b.n	8013ac4 <HAL_ADC_PollForConversion+0x38>
    if (Timeout != HAL_MAX_DELAY)
 8013b22:	1c7a      	adds	r2, r7, #1
 8013b24:	d0d9      	beq.n	8013ada <HAL_ADC_PollForConversion+0x4e>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8013b26:	f7ff fea1 	bl	801386c <HAL_GetTick>
 8013b2a:	eba0 0008 	sub.w	r0, r0, r8
 8013b2e:	42b8      	cmp	r0, r7
 8013b30:	d801      	bhi.n	8013b36 <HAL_ADC_PollForConversion+0xaa>
 8013b32:	2f00      	cmp	r7, #0
 8013b34:	d1d0      	bne.n	8013ad8 <HAL_ADC_PollForConversion+0x4c>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8013b36:	6823      	ldr	r3, [r4, #0]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	402b      	ands	r3, r5
 8013b3c:	d1cc      	bne.n	8013ad8 <HAL_ADC_PollForConversion+0x4c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8013b3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
          __HAL_UNLOCK(hadc);
 8013b40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8013b44:	f042 0204 	orr.w	r2, r2, #4
 8013b48:	6562      	str	r2, [r4, #84]	; 0x54
          return HAL_TIMEOUT;
 8013b4a:	2003      	movs	r0, #3
 8013b4c:	e7ba      	b.n	8013ac4 <HAL_ADC_PollForConversion+0x38>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8013b4e:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8013b52:	d1e4      	bne.n	8013b1e <HAL_ADC_PollForConversion+0x92>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8013b54:	220c      	movs	r2, #12
 8013b56:	601a      	str	r2, [r3, #0]
 8013b58:	e7b4      	b.n	8013ac4 <HAL_ADC_PollForConversion+0x38>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013b5a:	2e09      	cmp	r6, #9
 8013b5c:	d805      	bhi.n	8013b6a <HAL_ADC_PollForConversion+0xde>
 8013b5e:	f240 2221 	movw	r2, #545	; 0x221
 8013b62:	fa22 f606 	lsr.w	r6, r2, r6
 8013b66:	07f2      	lsls	r2, r6, #31
 8013b68:	d4d5      	bmi.n	8013b16 <HAL_ADC_PollForConversion+0x8a>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8013b6a:	4a03      	ldr	r2, [pc, #12]	; (8013b78 <HAL_ADC_PollForConversion+0xec>)
 8013b6c:	68d0      	ldr	r0, [r2, #12]
 8013b6e:	e7d3      	b.n	8013b18 <HAL_ADC_PollForConversion+0x8c>
 8013b70:	50040300 	.word	0x50040300
 8013b74:	50040100 	.word	0x50040100
 8013b78:	50040000 	.word	0x50040000

08013b7c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8013b7c:	6803      	ldr	r3, [r0, #0]
 8013b7e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8013b80:	4770      	bx	lr
	...

08013b84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8013b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8013b86:	2300      	movs	r3, #0
 8013b88:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8013b8a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8013b8e:	2b01      	cmp	r3, #1
{
 8013b90:	4605      	mov	r5, r0
 8013b92:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8013b94:	f000 818d 	beq.w	8013eb2 <HAL_ADC_ConfigChannel+0x32e>
 8013b98:	2301      	movs	r3, #1
 8013b9a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013b9e:	6800      	ldr	r0, [r0, #0]
 8013ba0:	f7ff fe93 	bl	80138ca <LL_ADC_REG_IsConversionOngoing>
 8013ba4:	2800      	cmp	r0, #0
 8013ba6:	f040 817e 	bne.w	8013ea6 <HAL_ADC_ConfigChannel+0x322>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8013baa:	684b      	ldr	r3, [r1, #4]
 8013bac:	2b05      	cmp	r3, #5
 8013bae:	d809      	bhi.n	8013bc4 <HAL_ADC_ConfigChannel+0x40>
    {
      switch (sConfig->Rank)
 8013bb0:	3b02      	subs	r3, #2
 8013bb2:	2b03      	cmp	r3, #3
 8013bb4:	f200 8083 	bhi.w	8013cbe <HAL_ADC_ConfigChannel+0x13a>
 8013bb8:	e8df f003 	tbb	[pc, r3]
 8013bbc:	7e7c7a02 	.word	0x7e7c7a02
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8013bc0:	230c      	movs	r3, #12
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
          break;
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8013bc2:	6063      	str	r3, [r4, #4]
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8013bc4:	6862      	ldr	r2, [r4, #4]
 8013bc6:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8013bc8:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8013bca:	0991      	lsrs	r1, r2, #6
 8013bcc:	f001 010c 	and.w	r1, r1, #12
 8013bd0:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8013bd4:	f002 021f 	and.w	r2, r2, #31
 8013bd8:	59ce      	ldr	r6, [r1, r7]
 8013bda:	f04f 0c1f 	mov.w	ip, #31
 8013bde:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8013be2:	4093      	lsls	r3, r2
 8013be4:	fa0c f202 	lsl.w	r2, ip, r2
 8013be8:	ea26 0202 	bic.w	r2, r6, r2
 8013bec:	4313      	orrs	r3, r2
 8013bee:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8013bf0:	f7ff fe6b 	bl	80138ca <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8013bf4:	682e      	ldr	r6, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8013bf6:	68b3      	ldr	r3, [r6, #8]
 8013bf8:	f003 0308 	and.w	r3, r3, #8
 8013bfc:	4303      	orrs	r3, r0
 8013bfe:	d11d      	bne.n	8013c3c <HAL_ADC_ConfigChannel+0xb8>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8013c00:	4630      	mov	r0, r6
 8013c02:	68a2      	ldr	r2, [r4, #8]
 8013c04:	6821      	ldr	r1, [r4, #0]
 8013c06:	f7ff fe4f 	bl	80138a8 <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8013c0a:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8013c0c:	6829      	ldr	r1, [r5, #0]
 8013c0e:	6823      	ldr	r3, [r4, #0]
 8013c10:	68c8      	ldr	r0, [r1, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8013c12:	2e04      	cmp	r6, #4
 8013c14:	f101 0260 	add.w	r2, r1, #96	; 0x60
 8013c18:	d053      	beq.n	8013cc2 <HAL_ADC_ConfigChannel+0x13e>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8013c1a:	f3c0 01c1 	ubfx	r1, r0, #3, #2
 8013c1e:	0048      	lsls	r0, r1, #1
 8013c20:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8013c22:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8013c26:	4081      	lsls	r1, r0
 8013c28:	48a3      	ldr	r0, [pc, #652]	; (8013eb8 <HAL_ADC_ConfigChannel+0x334>)
 8013c2a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8013c2e:	4038      	ands	r0, r7
 8013c30:	4303      	orrs	r3, r0
 8013c32:	4319      	orrs	r1, r3
 8013c34:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8013c38:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013c3c:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8013c3e:	6883      	ldr	r3, [r0, #8]
 8013c40:	07d9      	lsls	r1, r3, #31
 8013c42:	f100 80bb 	bmi.w	8013dbc <HAL_ADC_ConfigChannel+0x238>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8013c46:	68e6      	ldr	r6, [r4, #12]
 8013c48:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8013c4a:	4a9c      	ldr	r2, [pc, #624]	; (8013ebc <HAL_ADC_ConfigChannel+0x338>)
 8013c4c:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8013c50:	f006 0c18 	and.w	ip, r6, #24
 8013c54:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8013c58:	fa22 f20c 	lsr.w	r2, r2, ip
 8013c5c:	401a      	ands	r2, r3
 8013c5e:	ea21 0107 	bic.w	r1, r1, r7
 8013c62:	430a      	orrs	r2, r1
 8013c64:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8013c68:	4a95      	ldr	r2, [pc, #596]	; (8013ec0 <HAL_ADC_ConfigChannel+0x33c>)
 8013c6a:	4296      	cmp	r6, r2
 8013c6c:	f040 80a6 	bne.w	8013dbc <HAL_ADC_ConfigChannel+0x238>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013c70:	2f00      	cmp	r7, #0
 8013c72:	d17b      	bne.n	8013d6c <HAL_ADC_ConfigChannel+0x1e8>
 8013c74:	0e99      	lsrs	r1, r3, #26
 8013c76:	3101      	adds	r1, #1
 8013c78:	f001 061f 	and.w	r6, r1, #31
 8013c7c:	0689      	lsls	r1, r1, #26
 8013c7e:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013c82:	2e09      	cmp	r6, #9
 8013c84:	f04f 0101 	mov.w	r1, #1
 8013c88:	fa01 f106 	lsl.w	r1, r1, r6
 8013c8c:	f240 8089 	bls.w	8013da2 <HAL_ADC_ConfigChannel+0x21e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013c90:	4311      	orrs	r1, r2
 8013c92:	2f00      	cmp	r7, #0
 8013c94:	f040 80b3 	bne.w	8013dfe <HAL_ADC_ConfigChannel+0x27a>
 8013c98:	0e9a      	lsrs	r2, r3, #26
 8013c9a:	3201      	adds	r2, #1
 8013c9c:	f002 021f 	and.w	r2, r2, #31
 8013ca0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8013ca4:	3b1e      	subs	r3, #30
 8013ca6:	051b      	lsls	r3, r3, #20
 8013ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013cac:	4319      	orrs	r1, r3
 8013cae:	e082      	b.n	8013db6 <HAL_ADC_ConfigChannel+0x232>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8013cb0:	2312      	movs	r3, #18
 8013cb2:	e786      	b.n	8013bc2 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8013cb4:	2318      	movs	r3, #24
 8013cb6:	e784      	b.n	8013bc2 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8013cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013cbc:	e781      	b.n	8013bc2 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8013cbe:	2306      	movs	r3, #6
 8013cc0:	e77f      	b.n	8013bc2 <HAL_ADC_ConfigChannel+0x3e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8013cc2:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8013cc4:	6e08      	ldr	r0, [r1, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013cc6:	f3c3 0612 	ubfx	r6, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8013cca:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013cce:	2e00      	cmp	r6, #0
 8013cd0:	d138      	bne.n	8013d44 <HAL_ADC_ConfigChannel+0x1c0>
 8013cd2:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8013cd6:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 8013cd8:	bf02      	ittt	eq
 8013cda:	6e0b      	ldreq	r3, [r1, #96]	; 0x60
 8013cdc:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8013ce0:	660b      	streq	r3, [r1, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8013ce2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013ce4:	6823      	ldr	r3, [r4, #0]
 8013ce6:	6e48      	ldr	r0, [r1, #100]	; 0x64
 8013ce8:	f3c3 0612 	ubfx	r6, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8013cec:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013cf0:	bb6e      	cbnz	r6, 8013d4e <HAL_ADC_ConfigChannel+0x1ca>
 8013cf2:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8013cf6:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 8013cf8:	bf02      	ittt	eq
 8013cfa:	6e4b      	ldreq	r3, [r1, #100]	; 0x64
 8013cfc:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8013d00:	664b      	streq	r3, [r1, #100]	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8013d02:	6893      	ldr	r3, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013d04:	6823      	ldr	r3, [r4, #0]
 8013d06:	6891      	ldr	r1, [r2, #8]
 8013d08:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8013d0c:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013d10:	bb10      	cbnz	r0, 8013d58 <HAL_ADC_ConfigChannel+0x1d4>
 8013d12:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8013d16:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 8013d18:	bf02      	ittt	eq
 8013d1a:	6893      	ldreq	r3, [r2, #8]
 8013d1c:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8013d20:	6093      	streq	r3, [r2, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8013d22:	68d3      	ldr	r3, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013d24:	6823      	ldr	r3, [r4, #0]
 8013d26:	68d1      	ldr	r1, [r2, #12]
 8013d28:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8013d2c:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8013d30:	b9b8      	cbnz	r0, 8013d62 <HAL_ADC_ConfigChannel+0x1de>
 8013d32:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8013d36:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 8013d38:	bf02      	ittt	eq
 8013d3a:	68d3      	ldreq	r3, [r2, #12]
 8013d3c:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8013d40:	60d3      	streq	r3, [r2, #12]
}
 8013d42:	e77b      	b.n	8013c3c <HAL_ADC_ConfigChannel+0xb8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d44:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8013d48:	fab3 f383 	clz	r3, r3
 8013d4c:	e7c3      	b.n	8013cd6 <HAL_ADC_ConfigChannel+0x152>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d4e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8013d52:	fab3 f383 	clz	r3, r3
 8013d56:	e7ce      	b.n	8013cf6 <HAL_ADC_ConfigChannel+0x172>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d58:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8013d5c:	fab3 f383 	clz	r3, r3
 8013d60:	e7d9      	b.n	8013d16 <HAL_ADC_ConfigChannel+0x192>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d62:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8013d66:	fab3 f383 	clz	r3, r3
 8013d6a:	e7e4      	b.n	8013d36 <HAL_ADC_ConfigChannel+0x1b2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d6c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8013d70:	b132      	cbz	r2, 8013d80 <HAL_ADC_ConfigChannel+0x1fc>
  return __builtin_clz(value);
 8013d72:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013d76:	3201      	adds	r2, #1
 8013d78:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013d7c:	2a09      	cmp	r2, #9
 8013d7e:	d82c      	bhi.n	8013dda <HAL_ADC_ConfigChannel+0x256>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d80:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8013d84:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013d88:	3101      	adds	r1, #1
 8013d8a:	0689      	lsls	r1, r1, #26
 8013d8c:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d90:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8013d94:	fab1 f181 	clz	r1, r1
 8013d98:	3101      	adds	r1, #1
 8013d9a:	f001 061f 	and.w	r6, r1, #31
 8013d9e:	2101      	movs	r1, #1
 8013da0:	40b1      	lsls	r1, r6
 8013da2:	4311      	orrs	r1, r2
 8013da4:	b9a7      	cbnz	r7, 8013dd0 <HAL_ADC_ConfigChannel+0x24c>
 8013da6:	0e9e      	lsrs	r6, r3, #26
 8013da8:	3601      	adds	r6, #1
 8013daa:	f006 061f 	and.w	r6, r6, #31
 8013dae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013db2:	0536      	lsls	r6, r6, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8013db4:	4331      	orrs	r1, r6
 8013db6:	68a2      	ldr	r2, [r4, #8]
 8013db8:	f7ff fd76 	bl	80138a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8013dbc:	6822      	ldr	r2, [r4, #0]
 8013dbe:	4b41      	ldr	r3, [pc, #260]	; (8013ec4 <HAL_ADC_ConfigChannel+0x340>)
 8013dc0:	421a      	tst	r2, r3
 8013dc2:	d121      	bne.n	8013e08 <HAL_ADC_ConfigChannel+0x284>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013dc4:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8013dcc:	b003      	add	sp, #12
 8013dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013dd0:	fa93 f6a3 	rbit	r6, r3
  return __builtin_clz(value);
 8013dd4:	fab6 f686 	clz	r6, r6
 8013dd8:	e7e6      	b.n	8013da8 <HAL_ADC_ConfigChannel+0x224>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013dda:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8013dde:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8013de2:	3101      	adds	r1, #1
 8013de4:	0689      	lsls	r1, r1, #26
 8013de6:	f001 42f8 	and.w	r2, r1, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013dea:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8013dee:	fab1 f181 	clz	r1, r1
 8013df2:	3101      	adds	r1, #1
 8013df4:	f001 061f 	and.w	r6, r1, #31
 8013df8:	2101      	movs	r1, #1
 8013dfa:	40b1      	lsls	r1, r6
 8013dfc:	e748      	b.n	8013c90 <HAL_ADC_ConfigChannel+0x10c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013dfe:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8013e02:	fab2 f282 	clz	r2, r2
 8013e06:	e748      	b.n	8013c9a <HAL_ADC_ConfigChannel+0x116>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8013e08:	492f      	ldr	r1, [pc, #188]	; (8013ec8 <HAL_ADC_ConfigChannel+0x344>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8013e0a:	4b30      	ldr	r3, [pc, #192]	; (8013ecc <HAL_ADC_ConfigChannel+0x348>)
 8013e0c:	6888      	ldr	r0, [r1, #8]
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8013e14:	460c      	mov	r4, r1
 8013e16:	d11f      	bne.n	8013e58 <HAL_ADC_ConfigChannel+0x2d4>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8013e18:	0202      	lsls	r2, r0, #8
 8013e1a:	d4d3      	bmi.n	8013dc4 <HAL_ADC_ConfigChannel+0x240>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013e1c:	682b      	ldr	r3, [r5, #0]
 8013e1e:	4a2c      	ldr	r2, [pc, #176]	; (8013ed0 <HAL_ADC_ConfigChannel+0x34c>)
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d003      	beq.n	8013e2c <HAL_ADC_ConfigChannel+0x2a8>
 8013e24:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8013e28:	4293      	cmp	r3, r2
 8013e2a:	d1cb      	bne.n	8013dc4 <HAL_ADC_ConfigChannel+0x240>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8013e2c:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8013e2e:	4a29      	ldr	r2, [pc, #164]	; (8013ed4 <HAL_ADC_ConfigChannel+0x350>)
 8013e30:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8013e34:	4333      	orrs	r3, r6
 8013e36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013e3a:	60a3      	str	r3, [r4, #8]
 8013e3c:	4b26      	ldr	r3, [pc, #152]	; (8013ed8 <HAL_ADC_ConfigChannel+0x354>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	fbb3 f2f2 	udiv	r2, r3, r2
 8013e44:	230c      	movs	r3, #12
 8013e46:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8013e4a:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8013e4c:	9b01      	ldr	r3, [sp, #4]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d0b8      	beq.n	8013dc4 <HAL_ADC_ConfigChannel+0x240>
            wait_loop_index--;
 8013e52:	9b01      	ldr	r3, [sp, #4]
 8013e54:	3b01      	subs	r3, #1
 8013e56:	e7f8      	b.n	8013e4a <HAL_ADC_ConfigChannel+0x2c6>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8013e58:	4b20      	ldr	r3, [pc, #128]	; (8013edc <HAL_ADC_ConfigChannel+0x358>)
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d111      	bne.n	8013e82 <HAL_ADC_ConfigChannel+0x2fe>
 8013e5e:	01c3      	lsls	r3, r0, #7
 8013e60:	d4b0      	bmi.n	8013dc4 <HAL_ADC_ConfigChannel+0x240>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	4a1a      	ldr	r2, [pc, #104]	; (8013ed0 <HAL_ADC_ConfigChannel+0x34c>)
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d003      	beq.n	8013e72 <HAL_ADC_ConfigChannel+0x2ee>
 8013e6a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8013e6e:	4293      	cmp	r3, r2
 8013e70:	d1a8      	bne.n	8013dc4 <HAL_ADC_ConfigChannel+0x240>
 8013e72:	68a3      	ldr	r3, [r4, #8]
 8013e74:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8013e78:	4333      	orrs	r3, r6
 8013e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013e7e:	60a3      	str	r3, [r4, #8]
 8013e80:	e7a0      	b.n	8013dc4 <HAL_ADC_ConfigChannel+0x240>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8013e82:	4b17      	ldr	r3, [pc, #92]	; (8013ee0 <HAL_ADC_ConfigChannel+0x35c>)
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d19d      	bne.n	8013dc4 <HAL_ADC_ConfigChannel+0x240>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8013e88:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8013e8c:	d19a      	bne.n	8013dc4 <HAL_ADC_ConfigChannel+0x240>
        if (ADC_VREFINT_INSTANCE(hadc))
 8013e8e:	682a      	ldr	r2, [r5, #0]
 8013e90:	4b0f      	ldr	r3, [pc, #60]	; (8013ed0 <HAL_ADC_ConfigChannel+0x34c>)
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d196      	bne.n	8013dc4 <HAL_ADC_ConfigChannel+0x240>
 8013e96:	688b      	ldr	r3, [r1, #8]
 8013e98:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8013e9c:	4333      	orrs	r3, r6
 8013e9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013ea2:	608b      	str	r3, [r1, #8]
}
 8013ea4:	e78f      	b.n	8013dc6 <HAL_ADC_ConfigChannel+0x242>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013ea6:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8013ea8:	f042 0220 	orr.w	r2, r2, #32
 8013eac:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8013eae:	4618      	mov	r0, r3
 8013eb0:	e789      	b.n	8013dc6 <HAL_ADC_ConfigChannel+0x242>
  __HAL_LOCK(hadc);
 8013eb2:	2002      	movs	r0, #2
 8013eb4:	e78a      	b.n	8013dcc <HAL_ADC_ConfigChannel+0x248>
 8013eb6:	bf00      	nop
 8013eb8:	03fff000 	.word	0x03fff000
 8013ebc:	0007ffff 	.word	0x0007ffff
 8013ec0:	407f0000 	.word	0x407f0000
 8013ec4:	80080000 	.word	0x80080000
 8013ec8:	50040300 	.word	0x50040300
 8013ecc:	c7520000 	.word	0xc7520000
 8013ed0:	50040000 	.word	0x50040000
 8013ed4:	00030d40 	.word	0x00030d40
 8013ed8:	20000004 	.word	0x20000004
 8013edc:	cb840000 	.word	0xcb840000
 8013ee0:	80000001 	.word	0x80000001

08013ee4 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013ee4:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8013ee6:	6893      	ldr	r3, [r2, #8]
{
 8013ee8:	b570      	push	{r4, r5, r6, lr}
 8013eea:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013eec:	07d8      	lsls	r0, r3, #31
 8013eee:	d501      	bpl.n	8013ef4 <ADC_Enable+0x10>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8013ef0:	2000      	movs	r0, #0
}
 8013ef2:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8013ef4:	6891      	ldr	r1, [r2, #8]
 8013ef6:	4b16      	ldr	r3, [pc, #88]	; (8013f50 <ADC_Enable+0x6c>)
 8013ef8:	4219      	tst	r1, r3
 8013efa:	d009      	beq.n	8013f10 <ADC_Enable+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013efc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013efe:	f043 0310 	orr.w	r3, r3, #16
 8013f02:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013f04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013f06:	f043 0301 	orr.w	r3, r3, #1
 8013f0a:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8013f0c:	2001      	movs	r0, #1
 8013f0e:	e7f0      	b.n	8013ef2 <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 8013f10:	6893      	ldr	r3, [r2, #8]
 8013f12:	4d10      	ldr	r5, [pc, #64]	; (8013f54 <ADC_Enable+0x70>)
 8013f14:	402b      	ands	r3, r5
 8013f16:	f043 0301 	orr.w	r3, r3, #1
 8013f1a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8013f1c:	f7ff fca6 	bl	801386c <HAL_GetTick>
 8013f20:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8013f22:	6822      	ldr	r2, [r4, #0]
 8013f24:	6813      	ldr	r3, [r2, #0]
 8013f26:	07db      	lsls	r3, r3, #31
 8013f28:	d4e2      	bmi.n	8013ef0 <ADC_Enable+0xc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8013f2a:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013f2c:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8013f2e:	bf5f      	itttt	pl
 8013f30:	6893      	ldrpl	r3, [r2, #8]
 8013f32:	402b      	andpl	r3, r5
 8013f34:	f043 0301 	orrpl.w	r3, r3, #1
 8013f38:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8013f3a:	f7ff fc97 	bl	801386c <HAL_GetTick>
 8013f3e:	1b83      	subs	r3, r0, r6
 8013f40:	2b02      	cmp	r3, #2
 8013f42:	d9ee      	bls.n	8013f22 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8013f44:	6823      	ldr	r3, [r4, #0]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	07da      	lsls	r2, r3, #31
 8013f4a:	d4ea      	bmi.n	8013f22 <ADC_Enable+0x3e>
 8013f4c:	e7d6      	b.n	8013efc <ADC_Enable+0x18>
 8013f4e:	bf00      	nop
 8013f50:	8000003f 	.word	0x8000003f
 8013f54:	7fffffc0 	.word	0x7fffffc0

08013f58 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8013f58:	4b34      	ldr	r3, [pc, #208]	; (801402c <HAL_ADC_Start+0xd4>)
{
 8013f5a:	b570      	push	{r4, r5, r6, lr}
 8013f5c:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013f5e:	6800      	ldr	r0, [r0, #0]
 8013f60:	689e      	ldr	r6, [r3, #8]
 8013f62:	f7ff fcb2 	bl	80138ca <LL_ADC_REG_IsConversionOngoing>
 8013f66:	4605      	mov	r5, r0
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	d159      	bne.n	8014020 <HAL_ADC_Start+0xc8>
    __HAL_LOCK(hadc);
 8013f6c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d055      	beq.n	8014020 <HAL_ADC_Start+0xc8>
 8013f74:	2301      	movs	r3, #1
 8013f76:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	f7ff ffb2 	bl	8013ee4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8013f80:	2800      	cmp	r0, #0
 8013f82:	d14a      	bne.n	801401a <HAL_ADC_Start+0xc2>
      ADC_STATE_CLR_SET(hadc->State,
 8013f84:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013f86:	492a      	ldr	r1, [pc, #168]	; (8014030 <HAL_ADC_Start+0xd8>)
      ADC_STATE_CLR_SET(hadc->State,
 8013f88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8013f8c:	f023 0301 	bic.w	r3, r3, #1
 8013f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f94:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013f96:	6823      	ldr	r3, [r4, #0]
 8013f98:	428b      	cmp	r3, r1
 8013f9a:	f006 021f 	and.w	r2, r6, #31
 8013f9e:	d041      	beq.n	8014024 <HAL_ADC_Start+0xcc>
 8013fa0:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8013fa2:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8013fa4:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8013fa8:	6565      	str	r5, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8013faa:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8013fac:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8013fb0:	bf1c      	itt	ne
 8013fb2:	6da5      	ldrne	r5, [r4, #88]	; 0x58
 8013fb4:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8013fb8:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8013fba:	251c      	movs	r5, #28
 8013fbc:	601d      	str	r5, [r3, #0]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013fbe:	428b      	cmp	r3, r1
      __HAL_UNLOCK(hadc);
 8013fc0:	f04f 0500 	mov.w	r5, #0
 8013fc4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013fc8:	d007      	beq.n	8013fda <HAL_ADC_Start+0x82>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013fca:	2a09      	cmp	r2, #9
 8013fcc:	d817      	bhi.n	8013ffe <HAL_ADC_Start+0xa6>
 8013fce:	f240 2521 	movw	r5, #545	; 0x221
 8013fd2:	fa25 f202 	lsr.w	r2, r5, r2
 8013fd6:	07d5      	lsls	r5, r2, #31
 8013fd8:	d511      	bpl.n	8013ffe <HAL_ADC_Start+0xa6>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8013fda:	68da      	ldr	r2, [r3, #12]
 8013fdc:	0192      	lsls	r2, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8013fde:	bf41      	itttt	mi
 8013fe0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8013fe2:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8013fe6:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8013fea:	6562      	strmi	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8013fec:	689a      	ldr	r2, [r3, #8]
 8013fee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8013ff2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8013ff6:	f042 0204 	orr.w	r2, r2, #4
 8013ffa:	609a      	str	r2, [r3, #8]
}
 8013ffc:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8013ffe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014004:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8014006:	68cb      	ldr	r3, [r1, #12]
 8014008:	019b      	lsls	r3, r3, #6
 801400a:	d5f7      	bpl.n	8013ffc <HAL_ADC_Start+0xa4>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801400c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801400e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8014012:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014016:	6563      	str	r3, [r4, #84]	; 0x54
 8014018:	e7f0      	b.n	8013ffc <HAL_ADC_Start+0xa4>
      __HAL_UNLOCK(hadc);
 801401a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 801401e:	e7ed      	b.n	8013ffc <HAL_ADC_Start+0xa4>
    tmp_hal_status = HAL_BUSY;
 8014020:	2002      	movs	r0, #2
 8014022:	e7eb      	b.n	8013ffc <HAL_ADC_Start+0xa4>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014024:	4903      	ldr	r1, [pc, #12]	; (8014034 <HAL_ADC_Start+0xdc>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014026:	2a00      	cmp	r2, #0
 8014028:	d0bb      	beq.n	8013fa2 <HAL_ADC_Start+0x4a>
 801402a:	e7be      	b.n	8013faa <HAL_ADC_Start+0x52>
 801402c:	50040300 	.word	0x50040300
 8014030:	50040100 	.word	0x50040100
 8014034:	50040000 	.word	0x50040000

08014038 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014038:	6880      	ldr	r0, [r0, #8]
}
 801403a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 801403e:	4770      	bx	lr

08014040 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8014040:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8014042:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8014046:	2b01      	cmp	r3, #1
{
 8014048:	b09b      	sub	sp, #108	; 0x6c
 801404a:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 801404c:	d05a      	beq.n	8014104 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 801404e:	2301      	movs	r3, #1
 8014050:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8014054:	6817      	ldr	r7, [r2, #0]
 8014056:	4c2c      	ldr	r4, [pc, #176]	; (8014108 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8014058:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801405a:	42a7      	cmp	r7, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801405c:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801405e:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8014060:	d008      	beq.n	8014074 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014062:	6d51      	ldr	r1, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014064:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014068:	f041 0120 	orr.w	r1, r1, #32
 801406c:	6551      	str	r1, [r2, #84]	; 0x54

    return HAL_ERROR;
 801406e:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8014070:	b01b      	add	sp, #108	; 0x6c
 8014072:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8014074:	4e25      	ldr	r6, [pc, #148]	; (801410c <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8014076:	4630      	mov	r0, r6
 8014078:	f7ff ffde 	bl	8014038 <LL_ADC_REG_IsConversionOngoing>
 801407c:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801407e:	6810      	ldr	r0, [r2, #0]
 8014080:	f7ff ffda 	bl	8014038 <LL_ADC_REG_IsConversionOngoing>
 8014084:	4320      	orrs	r0, r4
 8014086:	d138      	bne.n	80140fa <HAL_ADCEx_MultiModeConfigChannel+0xba>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8014088:	4c21      	ldr	r4, [pc, #132]	; (8014110 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 801408a:	680d      	ldr	r5, [r1, #0]
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801408c:	68a3      	ldr	r3, [r4, #8]
 801408e:	f8df c084 	ldr.w	ip, [pc, #132]	; 8014114 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8014092:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8014096:	b1fd      	cbz	r5, 80140d8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8014098:	6848      	ldr	r0, [r1, #4]
 801409a:	4303      	orrs	r3, r0
 801409c:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 80140a0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80140a4:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80140a6:	68bf      	ldr	r7, [r7, #8]
 80140a8:	68b3      	ldr	r3, [r6, #8]
 80140aa:	f8dc 0008 	ldr.w	r0, [ip, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80140ae:	433b      	orrs	r3, r7
 80140b0:	4303      	orrs	r3, r0
 80140b2:	f013 0301 	ands.w	r3, r3, #1
 80140b6:	d004      	beq.n	80140c2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80140b8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80140ba:	2300      	movs	r3, #0
 80140bc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 80140c0:	e7d6      	b.n	8014070 <HAL_ADCEx_MultiModeConfigChannel+0x30>
        MODIFY_REG(tmpADC_Common->CCR,
 80140c2:	6889      	ldr	r1, [r1, #8]
 80140c4:	68a0      	ldr	r0, [r4, #8]
 80140c6:	430d      	orrs	r5, r1
 80140c8:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80140cc:	f021 010f 	bic.w	r1, r1, #15
 80140d0:	430d      	orrs	r5, r1
 80140d2:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 80140d4:	4618      	mov	r0, r3
 80140d6:	e7f0      	b.n	80140ba <HAL_ADCEx_MultiModeConfigChannel+0x7a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80140d8:	60a3      	str	r3, [r4, #8]
 80140da:	68b9      	ldr	r1, [r7, #8]
 80140dc:	68b3      	ldr	r3, [r6, #8]
 80140de:	f8dc 0008 	ldr.w	r0, [ip, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80140e2:	430b      	orrs	r3, r1
 80140e4:	4303      	orrs	r3, r0
 80140e6:	f013 0301 	ands.w	r3, r3, #1
 80140ea:	d1e5      	bne.n	80140b8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80140ec:	68a1      	ldr	r1, [r4, #8]
 80140ee:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80140f2:	f021 010f 	bic.w	r1, r1, #15
 80140f6:	60a1      	str	r1, [r4, #8]
 80140f8:	e7ec      	b.n	80140d4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80140fa:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80140fc:	f041 0120 	orr.w	r1, r1, #32
 8014100:	6551      	str	r1, [r2, #84]	; 0x54
 8014102:	e7e7      	b.n	80140d4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
  __HAL_LOCK(hadc);
 8014104:	2002      	movs	r0, #2
 8014106:	e7b3      	b.n	8014070 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 8014108:	50040000 	.word	0x50040000
 801410c:	50040100 	.word	0x50040100
 8014110:	50040300 	.word	0x50040300
 8014114:	50040200 	.word	0x50040200

08014118 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014118:	4907      	ldr	r1, [pc, #28]	; (8014138 <HAL_NVIC_SetPriorityGrouping+0x20>)
 801411a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801411c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014120:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014122:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014124:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014128:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801412a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801412c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8014130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8014134:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8014136:	4770      	bx	lr
 8014138:	e000ed00 	.word	0xe000ed00

0801413c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801413c:	4b16      	ldr	r3, [pc, #88]	; (8014198 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801413e:	b530      	push	{r4, r5, lr}
 8014140:	68dc      	ldr	r4, [r3, #12]
 8014142:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014146:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801414a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801414c:	2d04      	cmp	r5, #4
 801414e:	bf28      	it	cs
 8014150:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014152:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014154:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014158:	bf8c      	ite	hi
 801415a:	3c03      	subhi	r4, #3
 801415c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801415e:	fa03 f505 	lsl.w	r5, r3, r5
 8014162:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8014166:	40a3      	lsls	r3, r4
 8014168:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801416c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 801416e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014170:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014174:	bfac      	ite	ge
 8014176:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801417a:	4a08      	ldrlt	r2, [pc, #32]	; (801419c <HAL_NVIC_SetPriority+0x60>)
 801417c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8014180:	bfb8      	it	lt
 8014182:	f000 000f 	andlt.w	r0, r0, #15
 8014186:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014188:	bfaa      	itet	ge
 801418a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801418e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014190:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8014194:	bd30      	pop	{r4, r5, pc}
 8014196:	bf00      	nop
 8014198:	e000ed00 	.word	0xe000ed00
 801419c:	e000ed14 	.word	0xe000ed14

080141a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80141a0:	2800      	cmp	r0, #0
 80141a2:	db08      	blt.n	80141b6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80141a4:	2301      	movs	r3, #1
 80141a6:	0942      	lsrs	r2, r0, #5
 80141a8:	f000 001f 	and.w	r0, r0, #31
 80141ac:	fa03 f000 	lsl.w	r0, r3, r0
 80141b0:	4b01      	ldr	r3, [pc, #4]	; (80141b8 <HAL_NVIC_EnableIRQ+0x18>)
 80141b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80141b6:	4770      	bx	lr
 80141b8:	e000e100 	.word	0xe000e100

080141bc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80141bc:	2800      	cmp	r0, #0
 80141be:	db0d      	blt.n	80141dc <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80141c0:	0943      	lsrs	r3, r0, #5
 80141c2:	2201      	movs	r2, #1
 80141c4:	f000 001f 	and.w	r0, r0, #31
 80141c8:	fa02 f000 	lsl.w	r0, r2, r0
 80141cc:	3320      	adds	r3, #32
 80141ce:	4a04      	ldr	r2, [pc, #16]	; (80141e0 <HAL_NVIC_DisableIRQ+0x24>)
 80141d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80141d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80141d8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80141dc:	4770      	bx	lr
 80141de:	bf00      	nop
 80141e0:	e000e100 	.word	0xe000e100

080141e4 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80141e4:	2800      	cmp	r0, #0
 80141e6:	db09      	blt.n	80141fc <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80141e8:	0943      	lsrs	r3, r0, #5
 80141ea:	2201      	movs	r2, #1
 80141ec:	f000 001f 	and.w	r0, r0, #31
 80141f0:	fa02 f000 	lsl.w	r0, r2, r0
 80141f4:	3340      	adds	r3, #64	; 0x40
 80141f6:	4a02      	ldr	r2, [pc, #8]	; (8014200 <HAL_NVIC_SetPendingIRQ+0x1c>)
 80141f8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 80141fc:	4770      	bx	lr
 80141fe:	bf00      	nop
 8014200:	e000e100 	.word	0xe000e100

08014204 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8014204:	2800      	cmp	r0, #0
 8014206:	db09      	blt.n	801421c <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014208:	0943      	lsrs	r3, r0, #5
 801420a:	2201      	movs	r2, #1
 801420c:	f000 001f 	and.w	r0, r0, #31
 8014210:	fa02 f000 	lsl.w	r0, r2, r0
 8014214:	3360      	adds	r3, #96	; 0x60
 8014216:	4a02      	ldr	r2, [pc, #8]	; (8014220 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8014218:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 801421c:	4770      	bx	lr
 801421e:	bf00      	nop
 8014220:	e000e100 	.word	0xe000e100

08014224 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014224:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8014226:	2800      	cmp	r0, #0
 8014228:	d058      	beq.n	80142dc <HAL_DMA_Init+0xb8>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801422a:	6801      	ldr	r1, [r0, #0]
 801422c:	4b2c      	ldr	r3, [pc, #176]	; (80142e0 <HAL_DMA_Init+0xbc>)
 801422e:	4299      	cmp	r1, r3
 8014230:	f04f 0414 	mov.w	r4, #20
 8014234:	d842      	bhi.n	80142bc <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8014236:	4a2b      	ldr	r2, [pc, #172]	; (80142e4 <HAL_DMA_Init+0xc0>)
 8014238:	440a      	add	r2, r1
 801423a:	fbb2 f2f4 	udiv	r2, r2, r4
 801423e:	0092      	lsls	r2, r2, #2
 8014240:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8014242:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8014246:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8014248:	2302      	movs	r3, #2
 801424a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801424e:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014252:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8014254:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8014256:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014258:	432b      	orrs	r3, r5
 801425a:	6945      	ldr	r5, [r0, #20]
 801425c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801425e:	6985      	ldr	r5, [r0, #24]
 8014260:	432b      	orrs	r3, r5
 8014262:	69c5      	ldr	r5, [r0, #28]
 8014264:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8014266:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8014268:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 801426c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8014270:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8014272:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8014274:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8014278:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 801427a:	d016      	beq.n	80142aa <HAL_DMA_Init+0x86>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 801427c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801427e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8014280:	f001 021c 	and.w	r2, r1, #28
 8014284:	6841      	ldr	r1, [r0, #4]
 8014286:	230f      	movs	r3, #15
 8014288:	4093      	lsls	r3, r2
 801428a:	4091      	lsls	r1, r2
 801428c:	4a16      	ldr	r2, [pc, #88]	; (80142e8 <HAL_DMA_Init+0xc4>)
 801428e:	4294      	cmp	r4, r2
 8014290:	ea6f 0303 	mvn.w	r3, r3
 8014294:	d11a      	bne.n	80142cc <HAL_DMA_Init+0xa8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8014296:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 801429a:	4023      	ands	r3, r4
 801429c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80142a0:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 80142a4:	4319      	orrs	r1, r3
 80142a6:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80142aa:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80142ac:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80142ae:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80142b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80142b4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 80142b8:	4618      	mov	r0, r3
}
 80142ba:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80142bc:	4b0b      	ldr	r3, [pc, #44]	; (80142ec <HAL_DMA_Init+0xc8>)
 80142be:	440b      	add	r3, r1
 80142c0:	fbb3 f3f4 	udiv	r3, r3, r4
 80142c4:	009b      	lsls	r3, r3, #2
 80142c6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80142c8:	4b09      	ldr	r3, [pc, #36]	; (80142f0 <HAL_DMA_Init+0xcc>)
 80142ca:	e7bc      	b.n	8014246 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80142cc:	4a09      	ldr	r2, [pc, #36]	; (80142f4 <HAL_DMA_Init+0xd0>)
 80142ce:	6814      	ldr	r4, [r2, #0]
 80142d0:	4023      	ands	r3, r4
 80142d2:	6013      	str	r3, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80142d4:	6813      	ldr	r3, [r2, #0]
 80142d6:	4319      	orrs	r1, r3
 80142d8:	6011      	str	r1, [r2, #0]
 80142da:	e7e6      	b.n	80142aa <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80142dc:	2001      	movs	r0, #1
 80142de:	e7ec      	b.n	80142ba <HAL_DMA_Init+0x96>
 80142e0:	40020407 	.word	0x40020407
 80142e4:	bffdfff8 	.word	0xbffdfff8
 80142e8:	40020000 	.word	0x40020000
 80142ec:	bffdfbf8 	.word	0xbffdfbf8
 80142f0:	40020400 	.word	0x40020400
 80142f4:	400204a8 	.word	0x400204a8

080142f8 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80142f8:	4a09      	ldr	r2, [pc, #36]	; (8014320 <FLASH_Program_Fast+0x28>)
 80142fa:	6953      	ldr	r3, [r2, #20]
 80142fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 8014300:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8014302:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014304:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014308:	b672      	cpsid	i
}
 801430a:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 801430c:	58cc      	ldr	r4, [r1, r3]
 801430e:	50c4      	str	r4, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  } while (row_index != 0U);
 8014310:	3304      	adds	r3, #4
 8014312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014316:	d1f9      	bne.n	801430c <FLASH_Program_Fast+0x14>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014318:	f382 8810 	msr	PRIMASK, r2

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 801431c:	bd10      	pop	{r4, pc}
 801431e:	bf00      	nop
 8014320:	40022000 	.word	0x40022000

08014324 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8014324:	4b06      	ldr	r3, [pc, #24]	; (8014340 <HAL_FLASH_Unlock+0x1c>)
 8014326:	695a      	ldr	r2, [r3, #20]
 8014328:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801432a:	bfbf      	itttt	lt
 801432c:	4a05      	ldrlt	r2, [pc, #20]	; (8014344 <HAL_FLASH_Unlock+0x20>)
 801432e:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8014330:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8014334:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8014336:	bfba      	itte	lt
 8014338:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 801433a:	0fc0      	lsrlt	r0, r0, #31
 801433c:	2000      	movge	r0, #0
}
 801433e:	4770      	bx	lr
 8014340:	40022000 	.word	0x40022000
 8014344:	45670123 	.word	0x45670123

08014348 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8014348:	4a03      	ldr	r2, [pc, #12]	; (8014358 <HAL_FLASH_Lock+0x10>)
 801434a:	6953      	ldr	r3, [r2, #20]
 801434c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014350:	6153      	str	r3, [r2, #20]
}
 8014352:	2000      	movs	r0, #0
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop
 8014358:	40022000 	.word	0x40022000

0801435c <FLASH_WaitForLastOperation>:
{
 801435c:	b570      	push	{r4, r5, r6, lr}
 801435e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8014360:	f7ff fa84 	bl	801386c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8014364:	4c10      	ldr	r4, [pc, #64]	; (80143a8 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8014366:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8014368:	6923      	ldr	r3, [r4, #16]
 801436a:	03db      	lsls	r3, r3, #15
 801436c:	d40b      	bmi.n	8014386 <FLASH_WaitForLastOperation+0x2a>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801436e:	6920      	ldr	r0, [r4, #16]
 8014370:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if(error != 0u)
 8014374:	4002      	ands	r2, r0
 8014376:	d00f      	beq.n	8014398 <FLASH_WaitForLastOperation+0x3c>
    pFlash.ErrorCode |= error;
 8014378:	490c      	ldr	r1, [pc, #48]	; (80143ac <FLASH_WaitForLastOperation+0x50>)
 801437a:	684b      	ldr	r3, [r1, #4]
 801437c:	4313      	orrs	r3, r2
 801437e:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 8014380:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8014382:	6122      	str	r2, [r4, #16]
}
 8014384:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8014386:	1c6a      	adds	r2, r5, #1
 8014388:	d0ee      	beq.n	8014368 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 801438a:	f7ff fa6f 	bl	801386c <HAL_GetTick>
 801438e:	1b80      	subs	r0, r0, r6
 8014390:	42a8      	cmp	r0, r5
 8014392:	d3e9      	bcc.n	8014368 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8014394:	2003      	movs	r0, #3
 8014396:	e7f5      	b.n	8014384 <FLASH_WaitForLastOperation+0x28>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8014398:	6920      	ldr	r0, [r4, #16]
 801439a:	f010 0001 	ands.w	r0, r0, #1
 801439e:	d0f1      	beq.n	8014384 <FLASH_WaitForLastOperation+0x28>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80143a0:	2301      	movs	r3, #1
 80143a2:	6123      	str	r3, [r4, #16]
 80143a4:	4610      	mov	r0, r2
 80143a6:	e7ed      	b.n	8014384 <FLASH_WaitForLastOperation+0x28>
 80143a8:	40022000 	.word	0x40022000
 80143ac:	20000024 	.word	0x20000024

080143b0 <HAL_FLASH_Program>:
{
 80143b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80143b4:	4c25      	ldr	r4, [pc, #148]	; (801444c <HAL_FLASH_Program+0x9c>)
{
 80143b6:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80143b8:	7823      	ldrb	r3, [r4, #0]
 80143ba:	2b01      	cmp	r3, #1
{
 80143bc:	4606      	mov	r6, r0
 80143be:	460f      	mov	r7, r1
 80143c0:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80143c2:	d041      	beq.n	8014448 <HAL_FLASH_Program+0x98>
 80143c4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80143c6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80143ca:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80143cc:	f7ff ffc6 	bl	801435c <FLASH_WaitForLastOperation>
 80143d0:	4605      	mov	r5, r0
  if(status == HAL_OK)
 80143d2:	bb30      	cbnz	r0, 8014422 <HAL_FLASH_Program+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80143d4:	4d1e      	ldr	r5, [pc, #120]	; (8014450 <HAL_FLASH_Program+0xa0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80143d6:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80143d8:	682a      	ldr	r2, [r5, #0]
 80143da:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80143de:	bf17      	itett	ne
 80143e0:	682b      	ldrne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80143e2:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80143e4:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80143e8:	602b      	strne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80143ea:	bf1c      	itt	ne
 80143ec:	2302      	movne	r3, #2
 80143ee:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80143f0:	b9e6      	cbnz	r6, 801442c <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80143f2:	696b      	ldr	r3, [r5, #20]
 80143f4:	f043 0301 	orr.w	r3, r3, #1
 80143f8:	616b      	str	r3, [r5, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80143fa:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 80143fe:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8014402:	2601      	movs	r6, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8014404:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8014408:	f24c 3050 	movw	r0, #50000	; 0xc350
 801440c:	f7ff ffa6 	bl	801435c <FLASH_WaitForLastOperation>
 8014410:	4605      	mov	r5, r0
    if (prog_bit != 0U)
 8014412:	b126      	cbz	r6, 801441e <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8014414:	4a0e      	ldr	r2, [pc, #56]	; (8014450 <HAL_FLASH_Program+0xa0>)
 8014416:	6953      	ldr	r3, [r2, #20]
 8014418:	ea23 0606 	bic.w	r6, r3, r6
 801441c:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 801441e:	f000 f84d 	bl	80144bc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8014422:	2300      	movs	r3, #0
 8014424:	7023      	strb	r3, [r4, #0]
}
 8014426:	4628      	mov	r0, r5
 8014428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801442c:	1e73      	subs	r3, r6, #1
 801442e:	2b01      	cmp	r3, #1
 8014430:	d901      	bls.n	8014436 <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 8014432:	2600      	movs	r6, #0
 8014434:	e7e8      	b.n	8014408 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8014436:	4641      	mov	r1, r8
 8014438:	4638      	mov	r0, r7
 801443a:	f7ff ff5d 	bl	80142f8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801443e:	2e02      	cmp	r6, #2
 8014440:	d1f7      	bne.n	8014432 <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 8014442:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8014446:	e7df      	b.n	8014408 <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 8014448:	2502      	movs	r5, #2
 801444a:	e7ec      	b.n	8014426 <HAL_FLASH_Program+0x76>
 801444c:	20000024 	.word	0x20000024
 8014450:	40022000 	.word	0x40022000

08014454 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8014454:	4b09      	ldr	r3, [pc, #36]	; (801447c <FLASH_MassErase+0x28>)
 8014456:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801445a:	bf1e      	ittt	ne
 801445c:	695a      	ldrne	r2, [r3, #20]
 801445e:	f042 0204 	orrne.w	r2, r2, #4
 8014462:	615a      	strne	r2, [r3, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8014464:	0782      	lsls	r2, r0, #30
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8014466:	bf42      	ittt	mi
 8014468:	695a      	ldrmi	r2, [r3, #20]
 801446a:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
 801446e:	615a      	strmi	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8014470:	4a02      	ldr	r2, [pc, #8]	; (801447c <FLASH_MassErase+0x28>)
 8014472:	6953      	ldr	r3, [r2, #20]
 8014474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014478:	6153      	str	r3, [r2, #20]
}
 801447a:	4770      	bx	lr
 801447c:	40022000 	.word	0x40022000

08014480 <FLASH_PageErase>:
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8014480:	4b0d      	ldr	r3, [pc, #52]	; (80144b8 <FLASH_PageErase+0x38>)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8014482:	695a      	ldr	r2, [r3, #20]
    if((Banks & FLASH_BANK_1) != 0U)
 8014484:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8014488:	bf14      	ite	ne
 801448a:	f422 6200 	bicne.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 801448e:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8014492:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8014494:	695a      	ldr	r2, [r3, #20]
 8014496:	00c0      	lsls	r0, r0, #3
 8014498:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 801449c:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80144a0:	4310      	orrs	r0, r2
 80144a2:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80144a4:	695a      	ldr	r2, [r3, #20]
 80144a6:	f042 0202 	orr.w	r2, r2, #2
 80144aa:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80144ac:	695a      	ldr	r2, [r3, #20]
 80144ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80144b2:	615a      	str	r2, [r3, #20]
}
 80144b4:	4770      	bx	lr
 80144b6:	bf00      	nop
 80144b8:	40022000 	.word	0x40022000

080144bc <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80144bc:	4a13      	ldr	r2, [pc, #76]	; (801450c <FLASH_FlushCaches+0x50>)
 80144be:	7f13      	ldrb	r3, [r2, #28]
 80144c0:	b2d9      	uxtb	r1, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80144c2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80144c6:	2b01      	cmp	r3, #1
 80144c8:	d10c      	bne.n	80144e4 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80144ca:	4b11      	ldr	r3, [pc, #68]	; (8014510 <FLASH_FlushCaches+0x54>)
 80144cc:	6818      	ldr	r0, [r3, #0]
 80144ce:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80144d2:	6018      	str	r0, [r3, #0]
 80144d4:	6818      	ldr	r0, [r3, #0]
 80144d6:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80144da:	6018      	str	r0, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80144dc:	6818      	ldr	r0, [r3, #0]
 80144de:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80144e2:	6018      	str	r0, [r3, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80144e4:	1e8b      	subs	r3, r1, #2
 80144e6:	2b01      	cmp	r3, #1
 80144e8:	d80c      	bhi.n	8014504 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80144ea:	4b09      	ldr	r3, [pc, #36]	; (8014510 <FLASH_FlushCaches+0x54>)
 80144ec:	6819      	ldr	r1, [r3, #0]
 80144ee:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80144f2:	6019      	str	r1, [r3, #0]
 80144f4:	6819      	ldr	r1, [r3, #0]
 80144f6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80144fa:	6019      	str	r1, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80144fc:	6819      	ldr	r1, [r3, #0]
 80144fe:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8014502:	6019      	str	r1, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8014504:	2300      	movs	r3, #0
 8014506:	7713      	strb	r3, [r2, #28]
}
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop
 801450c:	20000024 	.word	0x20000024
 8014510:	40022000 	.word	0x40022000

08014514 <HAL_FLASHEx_Erase>:
{
 8014514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8014518:	4d35      	ldr	r5, [pc, #212]	; (80145f0 <HAL_FLASHEx_Erase+0xdc>)
 801451a:	782b      	ldrb	r3, [r5, #0]
 801451c:	2b01      	cmp	r3, #1
{
 801451e:	4606      	mov	r6, r0
 8014520:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8014522:	d062      	beq.n	80145ea <HAL_FLASHEx_Erase+0xd6>
 8014524:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8014526:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 801452a:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801452c:	f7ff ff16 	bl	801435c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8014530:	4604      	mov	r4, r0
 8014532:	bb40      	cbnz	r0, 8014586 <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8014534:	4b2f      	ldr	r3, [pc, #188]	; (80145f4 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014536:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8014538:	681a      	ldr	r2, [r3, #0]
 801453a:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801453e:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8014540:	d026      	beq.n	8014590 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8014542:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8014546:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8014548:	681a      	ldr	r2, [r3, #0]
 801454a:	0551      	lsls	r1, r2, #21
 801454c:	d506      	bpl.n	801455c <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801454e:	681a      	ldr	r2, [r3, #0]
 8014550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014554:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8014556:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8014558:	772b      	strb	r3, [r5, #28]
 801455a:	e000      	b.n	801455e <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801455c:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801455e:	6833      	ldr	r3, [r6, #0]
 8014560:	2b01      	cmp	r3, #1
 8014562:	d11f      	bne.n	80145a4 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 8014564:	6870      	ldr	r0, [r6, #4]
 8014566:	f7ff ff75 	bl	8014454 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801456a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801456e:	f7ff fef5 	bl	801435c <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8014572:	4a20      	ldr	r2, [pc, #128]	; (80145f4 <HAL_FLASHEx_Erase+0xe0>)
 8014574:	6953      	ldr	r3, [r2, #20]
 8014576:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801457a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801457e:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8014580:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 8014582:	f7ff ff9b 	bl	80144bc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8014586:	2300      	movs	r3, #0
 8014588:	702b      	strb	r3, [r5, #0]
}
 801458a:	4620      	mov	r0, r4
 801458c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8014590:	0552      	lsls	r2, r2, #21
 8014592:	d505      	bpl.n	80145a0 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8014594:	681a      	ldr	r2, [r3, #0]
 8014596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801459a:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801459c:	2302      	movs	r3, #2
 801459e:	e7db      	b.n	8014558 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80145a0:	7728      	strb	r0, [r5, #28]
 80145a2:	e7dc      	b.n	801455e <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 80145a4:	f04f 33ff 	mov.w	r3, #4294967295
 80145a8:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80145ac:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80145ae:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80145f4 <HAL_FLASHEx_Erase+0xe0>
 80145b2:	f8df a044 	ldr.w	sl, [pc, #68]	; 80145f8 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80145b6:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80145ba:	4413      	add	r3, r2
 80145bc:	42bb      	cmp	r3, r7
 80145be:	d9e0      	bls.n	8014582 <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80145c0:	6871      	ldr	r1, [r6, #4]
 80145c2:	4638      	mov	r0, r7
 80145c4:	f7ff ff5c 	bl	8014480 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80145c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80145cc:	f7ff fec6 	bl	801435c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80145d0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80145d4:	ea03 030a 	and.w	r3, r3, sl
 80145d8:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80145dc:	b118      	cbz	r0, 80145e6 <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 80145de:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80145e2:	4604      	mov	r4, r0
          break;
 80145e4:	e7cd      	b.n	8014582 <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80145e6:	3701      	adds	r7, #1
 80145e8:	e7e5      	b.n	80145b6 <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 80145ea:	2402      	movs	r4, #2
 80145ec:	e7cd      	b.n	801458a <HAL_FLASHEx_Erase+0x76>
 80145ee:	bf00      	nop
 80145f0:	20000024 	.word	0x20000024
 80145f4:	40022000 	.word	0x40022000
 80145f8:	fffff805 	.word	0xfffff805

080145fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80145fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014600:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80147b4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8014604:	4d69      	ldr	r5, [pc, #420]	; (80147ac <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8014606:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8014608:	680a      	ldr	r2, [r1, #0]
 801460a:	fa32 f403 	lsrs.w	r4, r2, r3
 801460e:	d102      	bne.n	8014616 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8014610:	b003      	add	sp, #12
 8014612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8014616:	f04f 0a01 	mov.w	sl, #1
 801461a:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 801461e:	ea1a 0202 	ands.w	r2, sl, r2
 8014622:	f000 80b4 	beq.w	801478e <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8014626:	684c      	ldr	r4, [r1, #4]
 8014628:	f024 0e10 	bic.w	lr, r4, #16
 801462c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8014630:	2603      	movs	r6, #3
 8014632:	f10e 37ff 	add.w	r7, lr, #4294967295
 8014636:	fa06 f608 	lsl.w	r6, r6, r8
 801463a:	2f01      	cmp	r7, #1
 801463c:	ea6f 0606 	mvn.w	r6, r6
 8014640:	d811      	bhi.n	8014666 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8014642:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8014644:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8014648:	68cf      	ldr	r7, [r1, #12]
 801464a:	fa07 f708 	lsl.w	r7, r7, r8
 801464e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8014652:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8014654:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8014656:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 801465a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 801465e:	409f      	lsls	r7, r3
 8014660:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8014664:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8014666:	f004 0c03 	and.w	ip, r4, #3
 801466a:	f1bc 0f03 	cmp.w	ip, #3
 801466e:	d108      	bne.n	8014682 <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 8014670:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8014672:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8014676:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 801467a:	409f      	lsls	r7, r3
 801467c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8014680:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8014682:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8014684:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8014688:	688f      	ldr	r7, [r1, #8]
 801468a:	fa07 f708 	lsl.w	r7, r7, r8
 801468e:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8014692:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8014696:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8014698:	d116      	bne.n	80146c8 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 801469a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 801469e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80146a2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80146a6:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80146aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80146ae:	f04f 0e0f 	mov.w	lr, #15
 80146b2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80146b6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80146ba:	690f      	ldr	r7, [r1, #16]
 80146bc:	fa07 f70b 	lsl.w	r7, r7, fp
 80146c0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80146c4:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80146c8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80146ca:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80146ce:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80146d0:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 80146d4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80146d6:	00e6      	lsls	r6, r4, #3
 80146d8:	d559      	bpl.n	801478e <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80146da:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80146de:	f046 0601 	orr.w	r6, r6, #1
 80146e2:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80146e6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80146ea:	f023 0703 	bic.w	r7, r3, #3
 80146ee:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80146f2:	f006 0601 	and.w	r6, r6, #1
 80146f6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80146fa:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80146fc:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014700:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8014702:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8014704:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8014708:	f04f 0c0f 	mov.w	ip, #15
 801470c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8014710:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8014714:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8014718:	d03b      	beq.n	8014792 <HAL_GPIO_Init+0x196>
 801471a:	4e25      	ldr	r6, [pc, #148]	; (80147b0 <HAL_GPIO_Init+0x1b4>)
 801471c:	42b0      	cmp	r0, r6
 801471e:	d03a      	beq.n	8014796 <HAL_GPIO_Init+0x19a>
 8014720:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8014724:	42b0      	cmp	r0, r6
 8014726:	d038      	beq.n	801479a <HAL_GPIO_Init+0x19e>
 8014728:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801472c:	42b0      	cmp	r0, r6
 801472e:	d036      	beq.n	801479e <HAL_GPIO_Init+0x1a2>
 8014730:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8014734:	42b0      	cmp	r0, r6
 8014736:	d034      	beq.n	80147a2 <HAL_GPIO_Init+0x1a6>
 8014738:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801473c:	42b0      	cmp	r0, r6
 801473e:	d032      	beq.n	80147a6 <HAL_GPIO_Init+0x1aa>
 8014740:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8014744:	42b0      	cmp	r0, r6
 8014746:	bf0c      	ite	eq
 8014748:	2606      	moveq	r6, #6
 801474a:	2607      	movne	r6, #7
 801474c:	fa06 f60e 	lsl.w	r6, r6, lr
 8014750:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8014754:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8014756:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8014758:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801475a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 801475e:	bf0c      	ite	eq
 8014760:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8014762:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8014764:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8014766:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8014768:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 801476c:	bf0c      	ite	eq
 801476e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8014770:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8014772:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8014774:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8014776:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 801477a:	bf0c      	ite	eq
 801477c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 801477e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8014780:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8014782:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8014784:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8014786:	bf54      	ite	pl
 8014788:	403e      	andpl	r6, r7
          temp |= iocurrent;
 801478a:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 801478c:	60ee      	str	r6, [r5, #12]
    position++;
 801478e:	3301      	adds	r3, #1
 8014790:	e73a      	b.n	8014608 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8014792:	2600      	movs	r6, #0
 8014794:	e7da      	b.n	801474c <HAL_GPIO_Init+0x150>
 8014796:	2601      	movs	r6, #1
 8014798:	e7d8      	b.n	801474c <HAL_GPIO_Init+0x150>
 801479a:	2602      	movs	r6, #2
 801479c:	e7d6      	b.n	801474c <HAL_GPIO_Init+0x150>
 801479e:	2603      	movs	r6, #3
 80147a0:	e7d4      	b.n	801474c <HAL_GPIO_Init+0x150>
 80147a2:	2604      	movs	r6, #4
 80147a4:	e7d2      	b.n	801474c <HAL_GPIO_Init+0x150>
 80147a6:	2605      	movs	r6, #5
 80147a8:	e7d0      	b.n	801474c <HAL_GPIO_Init+0x150>
 80147aa:	bf00      	nop
 80147ac:	40010400 	.word	0x40010400
 80147b0:	48000400 	.word	0x48000400
 80147b4:	40021000 	.word	0x40021000

080147b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80147b8:	6903      	ldr	r3, [r0, #16]
 80147ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80147bc:	bf14      	ite	ne
 80147be:	2001      	movne	r0, #1
 80147c0:	2000      	moveq	r0, #0
 80147c2:	4770      	bx	lr

080147c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80147c4:	b10a      	cbz	r2, 80147ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80147c6:	6181      	str	r1, [r0, #24]
 80147c8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80147ca:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80147cc:	4770      	bx	lr
	...

080147d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80147d0:	4a04      	ldr	r2, [pc, #16]	; (80147e4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80147d2:	6951      	ldr	r1, [r2, #20]
 80147d4:	4201      	tst	r1, r0
{
 80147d6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80147d8:	d002      	beq.n	80147e0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80147da:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80147dc:	f7fe f94d 	bl	8012a7a <HAL_GPIO_EXTI_Callback>
  }
}
 80147e0:	bd08      	pop	{r3, pc}
 80147e2:	bf00      	nop
 80147e4:	40010400 	.word	0x40010400

080147e8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80147e8:	4a02      	ldr	r2, [pc, #8]	; (80147f4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80147ea:	6813      	ldr	r3, [r2, #0]
 80147ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80147f0:	6013      	str	r3, [r2, #0]
}
 80147f2:	4770      	bx	lr
 80147f4:	40007000 	.word	0x40007000

080147f8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80147f8:	4b02      	ldr	r3, [pc, #8]	; (8014804 <HAL_PWREx_GetVoltageRange+0xc>)
 80147fa:	6818      	ldr	r0, [r3, #0]
#endif
}
 80147fc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8014800:	4770      	bx	lr
 8014802:	bf00      	nop
 8014804:	40007000 	.word	0x40007000

08014808 <HAL_PWREx_EnableSRAM2ContentRetention>:
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 8014808:	4a02      	ldr	r2, [pc, #8]	; (8014814 <HAL_PWREx_EnableSRAM2ContentRetention+0xc>)
 801480a:	6893      	ldr	r3, [r2, #8]
 801480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014810:	6093      	str	r3, [r2, #8]
}
 8014812:	4770      	bx	lr
 8014814:	40007000 	.word	0x40007000

08014818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8014818:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801481a:	4d1e      	ldr	r5, [pc, #120]	; (8014894 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 801481c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801481e:	00da      	lsls	r2, r3, #3
{
 8014820:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8014822:	d518      	bpl.n	8014856 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8014824:	f7ff ffe8 	bl	80147f8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8014828:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801482c:	d123      	bne.n	8014876 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 801482e:	2c80      	cmp	r4, #128	; 0x80
 8014830:	d929      	bls.n	8014886 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8014832:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8014834:	bf8c      	ite	hi
 8014836:	2402      	movhi	r4, #2
 8014838:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801483a:	4917      	ldr	r1, [pc, #92]	; (8014898 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 801483c:	680a      	ldr	r2, [r1, #0]
 801483e:	f022 0207 	bic.w	r2, r2, #7
 8014842:	4322      	orrs	r2, r4
 8014844:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8014846:	6808      	ldr	r0, [r1, #0]
 8014848:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 801484c:	1b00      	subs	r0, r0, r4
 801484e:	bf18      	it	ne
 8014850:	2001      	movne	r0, #1
 8014852:	b003      	add	sp, #12
 8014854:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8014856:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8014858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801485c:	65ab      	str	r3, [r5, #88]	; 0x58
 801485e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8014860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014864:	9301      	str	r3, [sp, #4]
 8014866:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8014868:	f7ff ffc6 	bl	80147f8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 801486c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801486e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014872:	65ab      	str	r3, [r5, #88]	; 0x58
 8014874:	e7d8      	b.n	8014828 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8014876:	2c80      	cmp	r4, #128	; 0x80
 8014878:	d807      	bhi.n	801488a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 801487a:	d008      	beq.n	801488e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 801487c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8014880:	425c      	negs	r4, r3
 8014882:	415c      	adcs	r4, r3
 8014884:	e7d9      	b.n	801483a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8014886:	2400      	movs	r4, #0
 8014888:	e7d7      	b.n	801483a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 801488a:	2403      	movs	r4, #3
 801488c:	e7d5      	b.n	801483a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 801488e:	2402      	movs	r4, #2
 8014890:	e7d3      	b.n	801483a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8014892:	bf00      	nop
 8014894:	40021000 	.word	0x40021000
 8014898:	40022000 	.word	0x40022000

0801489c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801489c:	4b22      	ldr	r3, [pc, #136]	; (8014928 <HAL_RCC_GetSysClockFreq+0x8c>)
 801489e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80148a0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80148a2:	f012 020c 	ands.w	r2, r2, #12
 80148a6:	d005      	beq.n	80148b4 <HAL_RCC_GetSysClockFreq+0x18>
 80148a8:	2a0c      	cmp	r2, #12
 80148aa:	d115      	bne.n	80148d8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80148ac:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80148b0:	2901      	cmp	r1, #1
 80148b2:	d118      	bne.n	80148e6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80148b4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80148b6:	481d      	ldr	r0, [pc, #116]	; (801492c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80148b8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80148ba:	bf55      	itete	pl
 80148bc:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80148c0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80148c2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80148c6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80148ca:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80148ce:	b34a      	cbz	r2, 8014924 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80148d0:	2a0c      	cmp	r2, #12
 80148d2:	d009      	beq.n	80148e8 <HAL_RCC_GetSysClockFreq+0x4c>
 80148d4:	2000      	movs	r0, #0
  return sysclockfreq;
 80148d6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80148d8:	2a04      	cmp	r2, #4
 80148da:	d022      	beq.n	8014922 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80148dc:	2a08      	cmp	r2, #8
 80148de:	4814      	ldr	r0, [pc, #80]	; (8014930 <HAL_RCC_GetSysClockFreq+0x94>)
 80148e0:	bf18      	it	ne
 80148e2:	2000      	movne	r0, #0
 80148e4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80148e6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80148e8:	68da      	ldr	r2, [r3, #12]
 80148ea:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80148ee:	2a02      	cmp	r2, #2
 80148f0:	d015      	beq.n	801491e <HAL_RCC_GetSysClockFreq+0x82>
 80148f2:	490f      	ldr	r1, [pc, #60]	; (8014930 <HAL_RCC_GetSysClockFreq+0x94>)
 80148f4:	2a03      	cmp	r2, #3
 80148f6:	bf08      	it	eq
 80148f8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80148fa:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80148fc:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80148fe:	68db      	ldr	r3, [r3, #12]
 8014900:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8014904:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8014908:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801490c:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801490e:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8014910:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8014912:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8014914:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8014918:	fbb0 f0f3 	udiv	r0, r0, r3
 801491c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 801491e:	4805      	ldr	r0, [pc, #20]	; (8014934 <HAL_RCC_GetSysClockFreq+0x98>)
 8014920:	e7eb      	b.n	80148fa <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8014922:	4804      	ldr	r0, [pc, #16]	; (8014934 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8014924:	4770      	bx	lr
 8014926:	bf00      	nop
 8014928:	40021000 	.word	0x40021000
 801492c:	08015ad8 	.word	0x08015ad8
 8014930:	007a1200 	.word	0x007a1200
 8014934:	00f42400 	.word	0x00f42400

08014938 <HAL_RCC_OscConfig>:
{
 8014938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 801493c:	4605      	mov	r5, r0
 801493e:	b918      	cbnz	r0, 8014948 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8014940:	2001      	movs	r0, #1
}
 8014942:	b003      	add	sp, #12
 8014944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014948:	4ca7      	ldr	r4, [pc, #668]	; (8014be8 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801494a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801494c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801494e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014950:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014952:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014956:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801495a:	d53d      	bpl.n	80149d8 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801495c:	b11e      	cbz	r6, 8014966 <HAL_RCC_OscConfig+0x2e>
 801495e:	2e0c      	cmp	r6, #12
 8014960:	d166      	bne.n	8014a30 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8014962:	2f01      	cmp	r7, #1
 8014964:	d164      	bne.n	8014a30 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8014966:	6823      	ldr	r3, [r4, #0]
 8014968:	0799      	lsls	r1, r3, #30
 801496a:	d502      	bpl.n	8014972 <HAL_RCC_OscConfig+0x3a>
 801496c:	69ab      	ldr	r3, [r5, #24]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d0e6      	beq.n	8014940 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8014972:	6823      	ldr	r3, [r4, #0]
 8014974:	6a28      	ldr	r0, [r5, #32]
 8014976:	071a      	lsls	r2, r3, #28
 8014978:	bf56      	itet	pl
 801497a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 801497e:	6823      	ldrmi	r3, [r4, #0]
 8014980:	091b      	lsrpl	r3, r3, #4
 8014982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014986:	4298      	cmp	r0, r3
 8014988:	d93b      	bls.n	8014a02 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801498a:	f7ff ff45 	bl	8014818 <RCC_SetFlashLatencyFromMSIRange>
 801498e:	2800      	cmp	r0, #0
 8014990:	d1d6      	bne.n	8014940 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014992:	6823      	ldr	r3, [r4, #0]
 8014994:	f043 0308 	orr.w	r3, r3, #8
 8014998:	6023      	str	r3, [r4, #0]
 801499a:	6823      	ldr	r3, [r4, #0]
 801499c:	6a2a      	ldr	r2, [r5, #32]
 801499e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80149a2:	4313      	orrs	r3, r2
 80149a4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80149a6:	6863      	ldr	r3, [r4, #4]
 80149a8:	69ea      	ldr	r2, [r5, #28]
 80149aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80149ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80149b2:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80149b4:	f7ff ff72 	bl	801489c <HAL_RCC_GetSysClockFreq>
 80149b8:	68a3      	ldr	r3, [r4, #8]
 80149ba:	4a8c      	ldr	r2, [pc, #560]	; (8014bec <HAL_RCC_OscConfig+0x2b4>)
 80149bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80149c0:	5cd3      	ldrb	r3, [r2, r3]
 80149c2:	f003 031f 	and.w	r3, r3, #31
 80149c6:	40d8      	lsrs	r0, r3
 80149c8:	4b89      	ldr	r3, [pc, #548]	; (8014bf0 <HAL_RCC_OscConfig+0x2b8>)
 80149ca:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80149cc:	4b89      	ldr	r3, [pc, #548]	; (8014bf4 <HAL_RCC_OscConfig+0x2bc>)
 80149ce:	6818      	ldr	r0, [r3, #0]
 80149d0:	f7fe f87c 	bl	8012acc <HAL_InitTick>
        if(status != HAL_OK)
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d1b4      	bne.n	8014942 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80149d8:	682b      	ldr	r3, [r5, #0]
 80149da:	07d9      	lsls	r1, r3, #31
 80149dc:	d45f      	bmi.n	8014a9e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80149de:	682b      	ldr	r3, [r5, #0]
 80149e0:	079a      	lsls	r2, r3, #30
 80149e2:	f100 809e 	bmi.w	8014b22 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80149e6:	682b      	ldr	r3, [r5, #0]
 80149e8:	0719      	lsls	r1, r3, #28
 80149ea:	f100 80d2 	bmi.w	8014b92 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80149ee:	682b      	ldr	r3, [r5, #0]
 80149f0:	075a      	lsls	r2, r3, #29
 80149f2:	f100 8101 	bmi.w	8014bf8 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80149f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	f040 816a 	bne.w	8014cd2 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80149fe:	2000      	movs	r0, #0
 8014a00:	e79f      	b.n	8014942 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014a02:	6823      	ldr	r3, [r4, #0]
 8014a04:	f043 0308 	orr.w	r3, r3, #8
 8014a08:	6023      	str	r3, [r4, #0]
 8014a0a:	6823      	ldr	r3, [r4, #0]
 8014a0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014a10:	4303      	orrs	r3, r0
 8014a12:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014a14:	6863      	ldr	r3, [r4, #4]
 8014a16:	69ea      	ldr	r2, [r5, #28]
 8014a18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014a1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014a20:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014a22:	2e00      	cmp	r6, #0
 8014a24:	d1c6      	bne.n	80149b4 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8014a26:	f7ff fef7 	bl	8014818 <RCC_SetFlashLatencyFromMSIRange>
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	d0c2      	beq.n	80149b4 <HAL_RCC_OscConfig+0x7c>
 8014a2e:	e787      	b.n	8014940 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8014a30:	69ab      	ldr	r3, [r5, #24]
 8014a32:	b31b      	cbz	r3, 8014a7c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8014a34:	6823      	ldr	r3, [r4, #0]
 8014a36:	f043 0301 	orr.w	r3, r3, #1
 8014a3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8014a3c:	f7fe ff16 	bl	801386c <HAL_GetTick>
 8014a40:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8014a42:	6823      	ldr	r3, [r4, #0]
 8014a44:	079b      	lsls	r3, r3, #30
 8014a46:	d511      	bpl.n	8014a6c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014a48:	6823      	ldr	r3, [r4, #0]
 8014a4a:	f043 0308 	orr.w	r3, r3, #8
 8014a4e:	6023      	str	r3, [r4, #0]
 8014a50:	6823      	ldr	r3, [r4, #0]
 8014a52:	6a2a      	ldr	r2, [r5, #32]
 8014a54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014a58:	4313      	orrs	r3, r2
 8014a5a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014a5c:	6863      	ldr	r3, [r4, #4]
 8014a5e:	69ea      	ldr	r2, [r5, #28]
 8014a60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014a64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014a68:	6063      	str	r3, [r4, #4]
 8014a6a:	e7b5      	b.n	80149d8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014a6c:	f7fe fefe 	bl	801386c <HAL_GetTick>
 8014a70:	eba0 0008 	sub.w	r0, r0, r8
 8014a74:	2802      	cmp	r0, #2
 8014a76:	d9e4      	bls.n	8014a42 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8014a78:	2003      	movs	r0, #3
 8014a7a:	e762      	b.n	8014942 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8014a7c:	6823      	ldr	r3, [r4, #0]
 8014a7e:	f023 0301 	bic.w	r3, r3, #1
 8014a82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8014a84:	f7fe fef2 	bl	801386c <HAL_GetTick>
 8014a88:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8014a8a:	6823      	ldr	r3, [r4, #0]
 8014a8c:	0798      	lsls	r0, r3, #30
 8014a8e:	d5a3      	bpl.n	80149d8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014a90:	f7fe feec 	bl	801386c <HAL_GetTick>
 8014a94:	eba0 0008 	sub.w	r0, r0, r8
 8014a98:	2802      	cmp	r0, #2
 8014a9a:	d9f6      	bls.n	8014a8a <HAL_RCC_OscConfig+0x152>
 8014a9c:	e7ec      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8014a9e:	2e08      	cmp	r6, #8
 8014aa0:	d003      	beq.n	8014aaa <HAL_RCC_OscConfig+0x172>
 8014aa2:	2e0c      	cmp	r6, #12
 8014aa4:	d108      	bne.n	8014ab8 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014aa6:	2f03      	cmp	r7, #3
 8014aa8:	d106      	bne.n	8014ab8 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014aaa:	6823      	ldr	r3, [r4, #0]
 8014aac:	039b      	lsls	r3, r3, #14
 8014aae:	d596      	bpl.n	80149de <HAL_RCC_OscConfig+0xa6>
 8014ab0:	686b      	ldr	r3, [r5, #4]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d193      	bne.n	80149de <HAL_RCC_OscConfig+0xa6>
 8014ab6:	e743      	b.n	8014940 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014ab8:	686b      	ldr	r3, [r5, #4]
 8014aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014abe:	d110      	bne.n	8014ae2 <HAL_RCC_OscConfig+0x1aa>
 8014ac0:	6823      	ldr	r3, [r4, #0]
 8014ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014ac6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8014ac8:	f7fe fed0 	bl	801386c <HAL_GetTick>
 8014acc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014ace:	6823      	ldr	r3, [r4, #0]
 8014ad0:	0398      	lsls	r0, r3, #14
 8014ad2:	d484      	bmi.n	80149de <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014ad4:	f7fe feca 	bl	801386c <HAL_GetTick>
 8014ad8:	eba0 0008 	sub.w	r0, r0, r8
 8014adc:	2864      	cmp	r0, #100	; 0x64
 8014ade:	d9f6      	bls.n	8014ace <HAL_RCC_OscConfig+0x196>
 8014ae0:	e7ca      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014ae6:	d104      	bne.n	8014af2 <HAL_RCC_OscConfig+0x1ba>
 8014ae8:	6823      	ldr	r3, [r4, #0]
 8014aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014aee:	6023      	str	r3, [r4, #0]
 8014af0:	e7e6      	b.n	8014ac0 <HAL_RCC_OscConfig+0x188>
 8014af2:	6822      	ldr	r2, [r4, #0]
 8014af4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014af8:	6022      	str	r2, [r4, #0]
 8014afa:	6822      	ldr	r2, [r4, #0]
 8014afc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014b00:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d1e0      	bne.n	8014ac8 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8014b06:	f7fe feb1 	bl	801386c <HAL_GetTick>
 8014b0a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8014b0c:	6823      	ldr	r3, [r4, #0]
 8014b0e:	0399      	lsls	r1, r3, #14
 8014b10:	f57f af65 	bpl.w	80149de <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014b14:	f7fe feaa 	bl	801386c <HAL_GetTick>
 8014b18:	eba0 0008 	sub.w	r0, r0, r8
 8014b1c:	2864      	cmp	r0, #100	; 0x64
 8014b1e:	d9f5      	bls.n	8014b0c <HAL_RCC_OscConfig+0x1d4>
 8014b20:	e7aa      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8014b22:	2e04      	cmp	r6, #4
 8014b24:	d003      	beq.n	8014b2e <HAL_RCC_OscConfig+0x1f6>
 8014b26:	2e0c      	cmp	r6, #12
 8014b28:	d110      	bne.n	8014b4c <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8014b2a:	2f02      	cmp	r7, #2
 8014b2c:	d10e      	bne.n	8014b4c <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	055a      	lsls	r2, r3, #21
 8014b32:	d503      	bpl.n	8014b3c <HAL_RCC_OscConfig+0x204>
 8014b34:	68eb      	ldr	r3, [r5, #12]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	f43f af02 	beq.w	8014940 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014b3c:	6863      	ldr	r3, [r4, #4]
 8014b3e:	692a      	ldr	r2, [r5, #16]
 8014b40:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8014b44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014b48:	6063      	str	r3, [r4, #4]
 8014b4a:	e74c      	b.n	80149e6 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8014b4c:	68eb      	ldr	r3, [r5, #12]
 8014b4e:	b17b      	cbz	r3, 8014b70 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8014b50:	6823      	ldr	r3, [r4, #0]
 8014b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8014b58:	f7fe fe88 	bl	801386c <HAL_GetTick>
 8014b5c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014b5e:	6823      	ldr	r3, [r4, #0]
 8014b60:	055b      	lsls	r3, r3, #21
 8014b62:	d4eb      	bmi.n	8014b3c <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014b64:	f7fe fe82 	bl	801386c <HAL_GetTick>
 8014b68:	1bc0      	subs	r0, r0, r7
 8014b6a:	2802      	cmp	r0, #2
 8014b6c:	d9f7      	bls.n	8014b5e <HAL_RCC_OscConfig+0x226>
 8014b6e:	e783      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8014b70:	6823      	ldr	r3, [r4, #0]
 8014b72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014b76:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8014b78:	f7fe fe78 	bl	801386c <HAL_GetTick>
 8014b7c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014b7e:	6823      	ldr	r3, [r4, #0]
 8014b80:	0558      	lsls	r0, r3, #21
 8014b82:	f57f af30 	bpl.w	80149e6 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014b86:	f7fe fe71 	bl	801386c <HAL_GetTick>
 8014b8a:	1bc0      	subs	r0, r0, r7
 8014b8c:	2802      	cmp	r0, #2
 8014b8e:	d9f6      	bls.n	8014b7e <HAL_RCC_OscConfig+0x246>
 8014b90:	e772      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014b92:	696b      	ldr	r3, [r5, #20]
 8014b94:	b19b      	cbz	r3, 8014bbe <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8014b96:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8014b9a:	f043 0301 	orr.w	r3, r3, #1
 8014b9e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8014ba2:	f7fe fe63 	bl	801386c <HAL_GetTick>
 8014ba6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8014ba8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8014bac:	079b      	lsls	r3, r3, #30
 8014bae:	f53f af1e 	bmi.w	80149ee <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014bb2:	f7fe fe5b 	bl	801386c <HAL_GetTick>
 8014bb6:	1bc0      	subs	r0, r0, r7
 8014bb8:	2802      	cmp	r0, #2
 8014bba:	d9f5      	bls.n	8014ba8 <HAL_RCC_OscConfig+0x270>
 8014bbc:	e75c      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8014bbe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8014bc2:	f023 0301 	bic.w	r3, r3, #1
 8014bc6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8014bca:	f7fe fe4f 	bl	801386c <HAL_GetTick>
 8014bce:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8014bd0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8014bd4:	0798      	lsls	r0, r3, #30
 8014bd6:	f57f af0a 	bpl.w	80149ee <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014bda:	f7fe fe47 	bl	801386c <HAL_GetTick>
 8014bde:	1bc0      	subs	r0, r0, r7
 8014be0:	2802      	cmp	r0, #2
 8014be2:	d9f5      	bls.n	8014bd0 <HAL_RCC_OscConfig+0x298>
 8014be4:	e748      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
 8014be6:	bf00      	nop
 8014be8:	40021000 	.word	0x40021000
 8014bec:	08015b08 	.word	0x08015b08
 8014bf0:	20000004 	.word	0x20000004
 8014bf4:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8014bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014bfa:	00d9      	lsls	r1, r3, #3
 8014bfc:	d429      	bmi.n	8014c52 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8014bfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014c04:	65a3      	str	r3, [r4, #88]	; 0x58
 8014c06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014c0c:	9301      	str	r3, [sp, #4]
 8014c0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8014c10:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014c14:	4f89      	ldr	r7, [pc, #548]	; (8014e3c <HAL_RCC_OscConfig+0x504>)
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	05da      	lsls	r2, r3, #23
 8014c1a:	d51d      	bpl.n	8014c58 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014c1c:	68ab      	ldr	r3, [r5, #8]
 8014c1e:	2b01      	cmp	r3, #1
 8014c20:	d12b      	bne.n	8014c7a <HAL_RCC_OscConfig+0x342>
 8014c22:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8014c26:	f043 0301 	orr.w	r3, r3, #1
 8014c2a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8014c2e:	f7fe fe1d 	bl	801386c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014c32:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8014c36:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014c38:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8014c3c:	0798      	lsls	r0, r3, #30
 8014c3e:	d542      	bpl.n	8014cc6 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8014c40:	f1b8 0f00 	cmp.w	r8, #0
 8014c44:	f43f aed7 	beq.w	80149f6 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8014c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014c4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8014c50:	e6d1      	b.n	80149f6 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8014c52:	f04f 0800 	mov.w	r8, #0
 8014c56:	e7dd      	b.n	8014c14 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014c5e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8014c60:	f7fe fe04 	bl	801386c <HAL_GetTick>
 8014c64:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	05db      	lsls	r3, r3, #23
 8014c6a:	d4d7      	bmi.n	8014c1c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014c6c:	f7fe fdfe 	bl	801386c <HAL_GetTick>
 8014c70:	eba0 0009 	sub.w	r0, r0, r9
 8014c74:	2802      	cmp	r0, #2
 8014c76:	d9f6      	bls.n	8014c66 <HAL_RCC_OscConfig+0x32e>
 8014c78:	e6fe      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014c7a:	2b05      	cmp	r3, #5
 8014c7c:	d106      	bne.n	8014c8c <HAL_RCC_OscConfig+0x354>
 8014c7e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8014c82:	f043 0304 	orr.w	r3, r3, #4
 8014c86:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8014c8a:	e7ca      	b.n	8014c22 <HAL_RCC_OscConfig+0x2ea>
 8014c8c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8014c90:	f022 0201 	bic.w	r2, r2, #1
 8014c94:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8014c98:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8014c9c:	f022 0204 	bic.w	r2, r2, #4
 8014ca0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d1c2      	bne.n	8014c2e <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8014ca8:	f7fe fde0 	bl	801386c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014cac:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8014cb0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8014cb2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8014cb6:	0799      	lsls	r1, r3, #30
 8014cb8:	d5c2      	bpl.n	8014c40 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014cba:	f7fe fdd7 	bl	801386c <HAL_GetTick>
 8014cbe:	1bc0      	subs	r0, r0, r7
 8014cc0:	4548      	cmp	r0, r9
 8014cc2:	d9f6      	bls.n	8014cb2 <HAL_RCC_OscConfig+0x37a>
 8014cc4:	e6d8      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014cc6:	f7fe fdd1 	bl	801386c <HAL_GetTick>
 8014cca:	1bc0      	subs	r0, r0, r7
 8014ccc:	4548      	cmp	r0, r9
 8014cce:	d9b3      	bls.n	8014c38 <HAL_RCC_OscConfig+0x300>
 8014cd0:	e6d2      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8014cd2:	2b02      	cmp	r3, #2
 8014cd4:	f040 808f 	bne.w	8014df6 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8014cd8:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8014cda:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8014cdc:	f003 0103 	and.w	r1, r3, #3
 8014ce0:	4291      	cmp	r1, r2
 8014ce2:	d124      	bne.n	8014d2e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8014ce4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8014ce6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8014cea:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8014cec:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8014cf0:	d11d      	bne.n	8014d2e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8014cf2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8014cf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8014cf8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8014cfc:	d117      	bne.n	8014d2e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8014cfe:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8014d00:	3a07      	subs	r2, #7
 8014d02:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8014d06:	bf18      	it	ne
 8014d08:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8014d0a:	4291      	cmp	r1, r2
 8014d0c:	d10f      	bne.n	8014d2e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8014d0e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8014d10:	0852      	lsrs	r2, r2, #1
 8014d12:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8014d16:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8014d18:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8014d1c:	d107      	bne.n	8014d2e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8014d1e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8014d20:	0852      	lsrs	r2, r2, #1
 8014d22:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8014d26:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8014d28:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8014d2c:	d04a      	beq.n	8014dc4 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8014d2e:	2e0c      	cmp	r6, #12
 8014d30:	f43f ae06 	beq.w	8014940 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8014d34:	6823      	ldr	r3, [r4, #0]
 8014d36:	015a      	lsls	r2, r3, #5
 8014d38:	f53f ae02 	bmi.w	8014940 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8014d3c:	6823      	ldr	r3, [r4, #0]
 8014d3e:	00db      	lsls	r3, r3, #3
 8014d40:	f53f adfe 	bmi.w	8014940 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8014d44:	6823      	ldr	r3, [r4, #0]
 8014d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014d4a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8014d4c:	f7fe fd8e 	bl	801386c <HAL_GetTick>
 8014d50:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014d52:	6823      	ldr	r3, [r4, #0]
 8014d54:	019f      	lsls	r7, r3, #6
 8014d56:	d42f      	bmi.n	8014db8 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014d58:	68e2      	ldr	r2, [r4, #12]
 8014d5a:	4b39      	ldr	r3, [pc, #228]	; (8014e40 <HAL_RCC_OscConfig+0x508>)
 8014d5c:	4013      	ands	r3, r2
 8014d5e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8014d60:	4313      	orrs	r3, r2
 8014d62:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8014d64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014d68:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8014d6a:	3a01      	subs	r2, #1
 8014d6c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8014d70:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8014d72:	0912      	lsrs	r2, r2, #4
 8014d74:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8014d78:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8014d7a:	0852      	lsrs	r2, r2, #1
 8014d7c:	3a01      	subs	r2, #1
 8014d7e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8014d82:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8014d84:	0852      	lsrs	r2, r2, #1
 8014d86:	3a01      	subs	r2, #1
 8014d88:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8014d8c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8014d8e:	6823      	ldr	r3, [r4, #0]
 8014d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014d94:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014d96:	68e3      	ldr	r3, [r4, #12]
 8014d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014d9c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8014d9e:	f7fe fd65 	bl	801386c <HAL_GetTick>
 8014da2:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014da4:	6823      	ldr	r3, [r4, #0]
 8014da6:	0198      	lsls	r0, r3, #6
 8014da8:	f53f ae29 	bmi.w	80149fe <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014dac:	f7fe fd5e 	bl	801386c <HAL_GetTick>
 8014db0:	1b40      	subs	r0, r0, r5
 8014db2:	2802      	cmp	r0, #2
 8014db4:	d9f6      	bls.n	8014da4 <HAL_RCC_OscConfig+0x46c>
 8014db6:	e65f      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014db8:	f7fe fd58 	bl	801386c <HAL_GetTick>
 8014dbc:	1b80      	subs	r0, r0, r6
 8014dbe:	2802      	cmp	r0, #2
 8014dc0:	d9c7      	bls.n	8014d52 <HAL_RCC_OscConfig+0x41a>
 8014dc2:	e659      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014dc4:	6823      	ldr	r3, [r4, #0]
 8014dc6:	0199      	lsls	r1, r3, #6
 8014dc8:	f53f ae19 	bmi.w	80149fe <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8014dcc:	6823      	ldr	r3, [r4, #0]
 8014dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014dd2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8014dd4:	68e3      	ldr	r3, [r4, #12]
 8014dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014dda:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8014ddc:	f7fe fd46 	bl	801386c <HAL_GetTick>
 8014de0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014de2:	6823      	ldr	r3, [r4, #0]
 8014de4:	019a      	lsls	r2, r3, #6
 8014de6:	f53f ae0a 	bmi.w	80149fe <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014dea:	f7fe fd3f 	bl	801386c <HAL_GetTick>
 8014dee:	1b40      	subs	r0, r0, r5
 8014df0:	2802      	cmp	r0, #2
 8014df2:	d9f6      	bls.n	8014de2 <HAL_RCC_OscConfig+0x4aa>
 8014df4:	e640      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8014df6:	2e0c      	cmp	r6, #12
 8014df8:	f43f ada2 	beq.w	8014940 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8014dfc:	6823      	ldr	r3, [r4, #0]
 8014dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014e02:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8014e04:	6823      	ldr	r3, [r4, #0]
 8014e06:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8014e0a:	bf02      	ittt	eq
 8014e0c:	68e3      	ldreq	r3, [r4, #12]
 8014e0e:	f023 0303 	biceq.w	r3, r3, #3
 8014e12:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8014e14:	68e3      	ldr	r3, [r4, #12]
 8014e16:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8014e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014e1e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8014e20:	f7fe fd24 	bl	801386c <HAL_GetTick>
 8014e24:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014e26:	6823      	ldr	r3, [r4, #0]
 8014e28:	019b      	lsls	r3, r3, #6
 8014e2a:	f57f ade8 	bpl.w	80149fe <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014e2e:	f7fe fd1d 	bl	801386c <HAL_GetTick>
 8014e32:	1b40      	subs	r0, r0, r5
 8014e34:	2802      	cmp	r0, #2
 8014e36:	d9f6      	bls.n	8014e26 <HAL_RCC_OscConfig+0x4ee>
 8014e38:	e61e      	b.n	8014a78 <HAL_RCC_OscConfig+0x140>
 8014e3a:	bf00      	nop
 8014e3c:	40007000 	.word	0x40007000
 8014e40:	f99d808c 	.word	0xf99d808c

08014e44 <HAL_RCC_ClockConfig>:
{
 8014e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	b910      	cbnz	r0, 8014e54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8014e4e:	2001      	movs	r0, #1
}
 8014e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014e54:	4a40      	ldr	r2, [pc, #256]	; (8014f58 <HAL_RCC_ClockConfig+0x114>)
 8014e56:	6813      	ldr	r3, [r2, #0]
 8014e58:	f003 0307 	and.w	r3, r3, #7
 8014e5c:	428b      	cmp	r3, r1
 8014e5e:	d32a      	bcc.n	8014eb6 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014e60:	6823      	ldr	r3, [r4, #0]
 8014e62:	07d9      	lsls	r1, r3, #31
 8014e64:	d432      	bmi.n	8014ecc <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014e66:	6821      	ldr	r1, [r4, #0]
 8014e68:	078a      	lsls	r2, r1, #30
 8014e6a:	d45b      	bmi.n	8014f24 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014e6c:	4a3a      	ldr	r2, [pc, #232]	; (8014f58 <HAL_RCC_ClockConfig+0x114>)
 8014e6e:	6813      	ldr	r3, [r2, #0]
 8014e70:	f003 0307 	and.w	r3, r3, #7
 8014e74:	42ab      	cmp	r3, r5
 8014e76:	d85d      	bhi.n	8014f34 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014e78:	f011 0f04 	tst.w	r1, #4
 8014e7c:	4d37      	ldr	r5, [pc, #220]	; (8014f5c <HAL_RCC_ClockConfig+0x118>)
 8014e7e:	d164      	bne.n	8014f4a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014e80:	070b      	lsls	r3, r1, #28
 8014e82:	d506      	bpl.n	8014e92 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014e84:	68ab      	ldr	r3, [r5, #8]
 8014e86:	6922      	ldr	r2, [r4, #16]
 8014e88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8014e8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8014e90:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8014e92:	f7ff fd03 	bl	801489c <HAL_RCC_GetSysClockFreq>
 8014e96:	68ab      	ldr	r3, [r5, #8]
 8014e98:	4a31      	ldr	r2, [pc, #196]	; (8014f60 <HAL_RCC_ClockConfig+0x11c>)
 8014e9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8014e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8014ea2:	5cd3      	ldrb	r3, [r2, r3]
 8014ea4:	f003 031f 	and.w	r3, r3, #31
 8014ea8:	40d8      	lsrs	r0, r3
 8014eaa:	4b2e      	ldr	r3, [pc, #184]	; (8014f64 <HAL_RCC_ClockConfig+0x120>)
 8014eac:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8014eae:	4b2e      	ldr	r3, [pc, #184]	; (8014f68 <HAL_RCC_ClockConfig+0x124>)
 8014eb0:	6818      	ldr	r0, [r3, #0]
 8014eb2:	f7fd be0b 	b.w	8012acc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014eb6:	6813      	ldr	r3, [r2, #0]
 8014eb8:	f023 0307 	bic.w	r3, r3, #7
 8014ebc:	430b      	orrs	r3, r1
 8014ebe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014ec0:	6813      	ldr	r3, [r2, #0]
 8014ec2:	f003 0307 	and.w	r3, r3, #7
 8014ec6:	428b      	cmp	r3, r1
 8014ec8:	d1c1      	bne.n	8014e4e <HAL_RCC_ClockConfig+0xa>
 8014eca:	e7c9      	b.n	8014e60 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014ecc:	6862      	ldr	r2, [r4, #4]
 8014ece:	4e23      	ldr	r6, [pc, #140]	; (8014f5c <HAL_RCC_ClockConfig+0x118>)
 8014ed0:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014ed2:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014ed4:	d11a      	bne.n	8014f0c <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014ed6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014eda:	d0b8      	beq.n	8014e4e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8014edc:	68b3      	ldr	r3, [r6, #8]
 8014ede:	f023 0303 	bic.w	r3, r3, #3
 8014ee2:	4313      	orrs	r3, r2
 8014ee4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8014ee6:	f7fe fcc1 	bl	801386c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014eea:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8014eee:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014ef0:	68b3      	ldr	r3, [r6, #8]
 8014ef2:	6862      	ldr	r2, [r4, #4]
 8014ef4:	f003 030c 	and.w	r3, r3, #12
 8014ef8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8014efc:	d0b3      	beq.n	8014e66 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014efe:	f7fe fcb5 	bl	801386c <HAL_GetTick>
 8014f02:	1bc0      	subs	r0, r0, r7
 8014f04:	4540      	cmp	r0, r8
 8014f06:	d9f3      	bls.n	8014ef0 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8014f08:	2003      	movs	r0, #3
 8014f0a:	e7a1      	b.n	8014e50 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014f0c:	2a02      	cmp	r2, #2
 8014f0e:	d102      	bne.n	8014f16 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014f10:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8014f14:	e7e1      	b.n	8014eda <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8014f16:	b912      	cbnz	r2, 8014f1e <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8014f18:	f013 0f02 	tst.w	r3, #2
 8014f1c:	e7dd      	b.n	8014eda <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014f1e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8014f22:	e7da      	b.n	8014eda <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014f24:	4a0d      	ldr	r2, [pc, #52]	; (8014f5c <HAL_RCC_ClockConfig+0x118>)
 8014f26:	68a0      	ldr	r0, [r4, #8]
 8014f28:	6893      	ldr	r3, [r2, #8]
 8014f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014f2e:	4303      	orrs	r3, r0
 8014f30:	6093      	str	r3, [r2, #8]
 8014f32:	e79b      	b.n	8014e6c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014f34:	6813      	ldr	r3, [r2, #0]
 8014f36:	f023 0307 	bic.w	r3, r3, #7
 8014f3a:	432b      	orrs	r3, r5
 8014f3c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014f3e:	6813      	ldr	r3, [r2, #0]
 8014f40:	f003 0307 	and.w	r3, r3, #7
 8014f44:	42ab      	cmp	r3, r5
 8014f46:	d182      	bne.n	8014e4e <HAL_RCC_ClockConfig+0xa>
 8014f48:	e796      	b.n	8014e78 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014f4a:	68ab      	ldr	r3, [r5, #8]
 8014f4c:	68e2      	ldr	r2, [r4, #12]
 8014f4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8014f52:	4313      	orrs	r3, r2
 8014f54:	60ab      	str	r3, [r5, #8]
 8014f56:	e793      	b.n	8014e80 <HAL_RCC_ClockConfig+0x3c>
 8014f58:	40022000 	.word	0x40022000
 8014f5c:	40021000 	.word	0x40021000
 8014f60:	08015b08 	.word	0x08015b08
 8014f64:	20000004 	.word	0x20000004
 8014f68:	20000020 	.word	0x20000020

08014f6c <HAL_RTC_MspInit>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8014f6c:	4770      	bx	lr

08014f6e <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8014f6e:	6802      	ldr	r2, [r0, #0]
{
 8014f70:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8014f72:	68d3      	ldr	r3, [r2, #12]
 8014f74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014f78:	60d3      	str	r3, [r2, #12]
{
 8014f7a:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8014f7c:	f7fe fc76 	bl	801386c <HAL_GetTick>
 8014f80:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014f82:	6823      	ldr	r3, [r4, #0]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	069b      	lsls	r3, r3, #26
 8014f88:	d501      	bpl.n	8014f8e <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8014f8a:	2000      	movs	r0, #0
}
 8014f8c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014f8e:	f7fe fc6d 	bl	801386c <HAL_GetTick>
 8014f92:	1b40      	subs	r0, r0, r5
 8014f94:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8014f98:	d9f3      	bls.n	8014f82 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8014f9a:	2003      	movs	r0, #3
 8014f9c:	e7f6      	b.n	8014f8c <HAL_RTC_WaitForSynchro+0x1e>

08014f9e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8014f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8014fa0:	6803      	ldr	r3, [r0, #0]
 8014fa2:	68dc      	ldr	r4, [r3, #12]
 8014fa4:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 8014fa8:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8014faa:	d118      	bne.n	8014fde <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8014fac:	f04f 32ff 	mov.w	r2, #4294967295
 8014fb0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8014fb2:	f7fe fc5b 	bl	801386c <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014fb6:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 8014fb8:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8014fba:	682b      	ldr	r3, [r5, #0]
 8014fbc:	68db      	ldr	r3, [r3, #12]
 8014fbe:	065b      	lsls	r3, r3, #25
 8014fc0:	d401      	bmi.n	8014fc6 <RTC_EnterInitMode+0x28>
 8014fc2:	2c03      	cmp	r4, #3
 8014fc4:	d101      	bne.n	8014fca <RTC_EnterInitMode+0x2c>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8014fca:	f7fe fc4f 	bl	801386c <HAL_GetTick>
 8014fce:	1b80      	subs	r0, r0, r6
 8014fd0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014fd4:	bf84      	itt	hi
 8014fd6:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 8014fda:	2403      	movhi	r4, #3
 8014fdc:	e7ed      	b.n	8014fba <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8014fde:	2400      	movs	r4, #0
 8014fe0:	e7f1      	b.n	8014fc6 <RTC_EnterInitMode+0x28>
	...

08014fe4 <RTC_ExitInitMode>:
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8014fe4:	4b10      	ldr	r3, [pc, #64]	; (8015028 <RTC_ExitInitMode+0x44>)
 8014fe6:	68da      	ldr	r2, [r3, #12]
 8014fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 8014fec:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8014fee:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8014ff0:	689a      	ldr	r2, [r3, #8]
 8014ff2:	0692      	lsls	r2, r2, #26
{
 8014ff4:	4604      	mov	r4, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8014ff6:	d406      	bmi.n	8015006 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014ff8:	f7ff ffb9 	bl	8014f6e <HAL_RTC_WaitForSynchro>
 8014ffc:	b110      	cbz	r0, 8015004 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014ffe:	2003      	movs	r0, #3
 8015000:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8015004:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8015006:	689a      	ldr	r2, [r3, #8]
 8015008:	f022 0220 	bic.w	r2, r2, #32
 801500c:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801500e:	f7ff ffae 	bl	8014f6e <HAL_RTC_WaitForSynchro>
 8015012:	b110      	cbz	r0, 801501a <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015014:	2003      	movs	r0, #3
 8015016:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801501a:	4a03      	ldr	r2, [pc, #12]	; (8015028 <RTC_ExitInitMode+0x44>)
 801501c:	6893      	ldr	r3, [r2, #8]
 801501e:	f043 0320 	orr.w	r3, r3, #32
 8015022:	6093      	str	r3, [r2, #8]
  return status;
 8015024:	e7ee      	b.n	8015004 <RTC_ExitInitMode+0x20>
 8015026:	bf00      	nop
 8015028:	40002800 	.word	0x40002800

0801502c <HAL_RTC_Init>:
{
 801502c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc != NULL)
 801502e:	4604      	mov	r4, r0
 8015030:	2800      	cmp	r0, #0
 8015032:	d03f      	beq.n	80150b4 <HAL_RTC_Init+0x88>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8015034:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8015038:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801503c:	b91b      	cbnz	r3, 8015046 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 801503e:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8015042:	f7ff ff93 	bl	8014f6c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8015046:	2302      	movs	r3, #2
 8015048:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801504c:	6823      	ldr	r3, [r4, #0]
 801504e:	22ca      	movs	r2, #202	; 0xca
 8015050:	625a      	str	r2, [r3, #36]	; 0x24
 8015052:	2253      	movs	r2, #83	; 0x53
 8015054:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8015056:	4620      	mov	r0, r4
 8015058:	f7ff ffa1 	bl	8014f9e <RTC_EnterInitMode>
    if (status == HAL_OK)
 801505c:	bb48      	cbnz	r0, 80150b2 <HAL_RTC_Init+0x86>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 801505e:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8015060:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8015062:	689a      	ldr	r2, [r3, #8]
 8015064:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8015068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801506c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801506e:	6862      	ldr	r2, [r4, #4]
 8015070:	6899      	ldr	r1, [r3, #8]
 8015072:	4302      	orrs	r2, r0
 8015074:	69a0      	ldr	r0, [r4, #24]
 8015076:	4302      	orrs	r2, r0
 8015078:	430a      	orrs	r2, r1
 801507a:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 801507c:	68e2      	ldr	r2, [r4, #12]
 801507e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015080:	691a      	ldr	r2, [r3, #16]
 8015082:	68a1      	ldr	r1, [r4, #8]
 8015084:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015088:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 801508a:	4620      	mov	r0, r4
 801508c:	f7ff ffaa 	bl	8014fe4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8015090:	b978      	cbnz	r0, 80150b2 <HAL_RTC_Init+0x86>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8015092:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015094:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8015096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015098:	f022 0203 	bic.w	r2, r2, #3
 801509c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801509e:	69e2      	ldr	r2, [r4, #28]
 80150a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80150a2:	432a      	orrs	r2, r5
 80150a4:	430a      	orrs	r2, r1
 80150a6:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80150a8:	22ff      	movs	r2, #255	; 0xff
 80150aa:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 80150ac:	2301      	movs	r3, #1
 80150ae:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80150b2:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 80150b4:	2001      	movs	r0, #1
 80150b6:	e7fc      	b.n	80150b2 <HAL_RTC_Init+0x86>

080150b8 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80150b8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80150bc:	2b01      	cmp	r3, #1
 80150be:	f04f 0302 	mov.w	r3, #2
 80150c2:	d012      	beq.n	80150ea <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80150c4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80150c8:	6803      	ldr	r3, [r0, #0]
 80150ca:	22ca      	movs	r2, #202	; 0xca
 80150cc:	625a      	str	r2, [r3, #36]	; 0x24
 80150ce:	2253      	movs	r2, #83	; 0x53
 80150d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80150d2:	689a      	ldr	r2, [r3, #8]
 80150d4:	f042 0220 	orr.w	r2, r2, #32
 80150d8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80150da:	22ff      	movs	r2, #255	; 0xff
 80150dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80150de:	2301      	movs	r3, #1
 80150e0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80150e4:	2300      	movs	r3, #0
 80150e6:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 80150ea:	4618      	mov	r0, r3

  return HAL_OK;
}
 80150ec:	4770      	bx	lr

080150ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80150ee:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80150f0:	4604      	mov	r4, r0
 80150f2:	2800      	cmp	r0, #0
 80150f4:	d05f      	beq.n	80151b6 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80150f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d158      	bne.n	80151ae <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80150fc:	6842      	ldr	r2, [r0, #4]
 80150fe:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8015102:	d000      	beq.n	8015106 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8015104:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015106:	2300      	movs	r3, #0
 8015108:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801510a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 801510e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8015112:	b923      	cbnz	r3, 801511e <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8015114:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8015118:	4620      	mov	r0, r4
 801511a:	f7fc f987 	bl	801142c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801511e:	6825      	ldr	r5, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015120:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8015122:	2302      	movs	r3, #2
 8015124:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8015128:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801512a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 801512e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015132:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015134:	f04f 0300 	mov.w	r3, #0
 8015138:	d83f      	bhi.n	80151ba <HAL_SPI_Init+0xcc>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801513a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801513e:	d000      	beq.n	8015142 <HAL_SPI_Init+0x54>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015140:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8015142:	6863      	ldr	r3, [r4, #4]
 8015144:	68a6      	ldr	r6, [r4, #8]
 8015146:	69a2      	ldr	r2, [r4, #24]
 8015148:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 801514c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8015150:	4333      	orrs	r3, r6
 8015152:	6926      	ldr	r6, [r4, #16]
 8015154:	f006 0602 	and.w	r6, r6, #2
 8015158:	4333      	orrs	r3, r6
 801515a:	6966      	ldr	r6, [r4, #20]
 801515c:	f006 0601 	and.w	r6, r6, #1
 8015160:	4333      	orrs	r3, r6
 8015162:	f402 7600 	and.w	r6, r2, #512	; 0x200
 8015166:	4333      	orrs	r3, r6
 8015168:	69e6      	ldr	r6, [r4, #28]
 801516a:	f006 0638 	and.w	r6, r6, #56	; 0x38
 801516e:	4333      	orrs	r3, r6
 8015170:	6a26      	ldr	r6, [r4, #32]
 8015172:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8015176:	4333      	orrs	r3, r6
 8015178:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801517a:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 801517e:	4333      	orrs	r3, r6
 8015180:	602b      	str	r3, [r5, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8015182:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8015184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015186:	f006 0608 	and.w	r6, r6, #8
 801518a:	f003 0310 	and.w	r3, r3, #16
 801518e:	4333      	orrs	r3, r6
 8015190:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8015194:	0c12      	lsrs	r2, r2, #16
 8015196:	4319      	orrs	r1, r3
 8015198:	f002 0204 	and.w	r2, r2, #4
 801519c:	430a      	orrs	r2, r1
 801519e:	4310      	orrs	r0, r2
 80151a0:	6068      	str	r0, [r5, #4]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80151a2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80151a4:	2000      	movs	r0, #0
 80151a6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80151a8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 80151ac:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80151ae:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80151b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80151b4:	e7a7      	b.n	8015106 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80151b6:	2001      	movs	r0, #1
 80151b8:	e7f8      	b.n	80151ac <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80151ba:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80151bc:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 80151c0:	e7bd      	b.n	801513e <HAL_SPI_Init+0x50>
	...

080151c4 <__libc_init_array>:
 80151c4:	b570      	push	{r4, r5, r6, lr}
 80151c6:	4d0d      	ldr	r5, [pc, #52]	; (80151fc <__libc_init_array+0x38>)
 80151c8:	4c0d      	ldr	r4, [pc, #52]	; (8015200 <__libc_init_array+0x3c>)
 80151ca:	1b64      	subs	r4, r4, r5
 80151cc:	10a4      	asrs	r4, r4, #2
 80151ce:	2600      	movs	r6, #0
 80151d0:	42a6      	cmp	r6, r4
 80151d2:	d109      	bne.n	80151e8 <__libc_init_array+0x24>
 80151d4:	4d0b      	ldr	r5, [pc, #44]	; (8015204 <__libc_init_array+0x40>)
 80151d6:	4c0c      	ldr	r4, [pc, #48]	; (8015208 <__libc_init_array+0x44>)
 80151d8:	f000 fc5c 	bl	8015a94 <_init>
 80151dc:	1b64      	subs	r4, r4, r5
 80151de:	10a4      	asrs	r4, r4, #2
 80151e0:	2600      	movs	r6, #0
 80151e2:	42a6      	cmp	r6, r4
 80151e4:	d105      	bne.n	80151f2 <__libc_init_array+0x2e>
 80151e6:	bd70      	pop	{r4, r5, r6, pc}
 80151e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80151ec:	4798      	blx	r3
 80151ee:	3601      	adds	r6, #1
 80151f0:	e7ee      	b.n	80151d0 <__libc_init_array+0xc>
 80151f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80151f6:	4798      	blx	r3
 80151f8:	3601      	adds	r6, #1
 80151fa:	e7f2      	b.n	80151e2 <__libc_init_array+0x1e>
 80151fc:	08015b60 	.word	0x08015b60
 8015200:	08015b60 	.word	0x08015b60
 8015204:	08015b60 	.word	0x08015b60
 8015208:	08015b64 	.word	0x08015b64

0801520c <memcpy>:
 801520c:	440a      	add	r2, r1
 801520e:	4291      	cmp	r1, r2
 8015210:	f100 33ff 	add.w	r3, r0, #4294967295
 8015214:	d100      	bne.n	8015218 <memcpy+0xc>
 8015216:	4770      	bx	lr
 8015218:	b510      	push	{r4, lr}
 801521a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801521e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015222:	4291      	cmp	r1, r2
 8015224:	d1f9      	bne.n	801521a <memcpy+0xe>
 8015226:	bd10      	pop	{r4, pc}

08015228 <memset>:
 8015228:	4402      	add	r2, r0
 801522a:	4603      	mov	r3, r0
 801522c:	4293      	cmp	r3, r2
 801522e:	d100      	bne.n	8015232 <memset+0xa>
 8015230:	4770      	bx	lr
 8015232:	f803 1b01 	strb.w	r1, [r3], #1
 8015236:	e7f9      	b.n	801522c <memset+0x4>

08015238 <siprintf>:
 8015238:	b40e      	push	{r1, r2, r3}
 801523a:	b500      	push	{lr}
 801523c:	b09c      	sub	sp, #112	; 0x70
 801523e:	ab1d      	add	r3, sp, #116	; 0x74
 8015240:	9002      	str	r0, [sp, #8]
 8015242:	9006      	str	r0, [sp, #24]
 8015244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015248:	4809      	ldr	r0, [pc, #36]	; (8015270 <siprintf+0x38>)
 801524a:	9107      	str	r1, [sp, #28]
 801524c:	9104      	str	r1, [sp, #16]
 801524e:	4909      	ldr	r1, [pc, #36]	; (8015274 <siprintf+0x3c>)
 8015250:	f853 2b04 	ldr.w	r2, [r3], #4
 8015254:	9105      	str	r1, [sp, #20]
 8015256:	6800      	ldr	r0, [r0, #0]
 8015258:	9301      	str	r3, [sp, #4]
 801525a:	a902      	add	r1, sp, #8
 801525c:	f000 f868 	bl	8015330 <_svfiprintf_r>
 8015260:	9b02      	ldr	r3, [sp, #8]
 8015262:	2200      	movs	r2, #0
 8015264:	701a      	strb	r2, [r3, #0]
 8015266:	b01c      	add	sp, #112	; 0x70
 8015268:	f85d eb04 	ldr.w	lr, [sp], #4
 801526c:	b003      	add	sp, #12
 801526e:	4770      	bx	lr
 8015270:	20000044 	.word	0x20000044
 8015274:	ffff0208 	.word	0xffff0208

08015278 <__ssputs_r>:
 8015278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801527c:	688e      	ldr	r6, [r1, #8]
 801527e:	429e      	cmp	r6, r3
 8015280:	4682      	mov	sl, r0
 8015282:	460c      	mov	r4, r1
 8015284:	4690      	mov	r8, r2
 8015286:	461f      	mov	r7, r3
 8015288:	d838      	bhi.n	80152fc <__ssputs_r+0x84>
 801528a:	898a      	ldrh	r2, [r1, #12]
 801528c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015290:	d032      	beq.n	80152f8 <__ssputs_r+0x80>
 8015292:	6825      	ldr	r5, [r4, #0]
 8015294:	6909      	ldr	r1, [r1, #16]
 8015296:	eba5 0901 	sub.w	r9, r5, r1
 801529a:	6965      	ldr	r5, [r4, #20]
 801529c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80152a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80152a4:	3301      	adds	r3, #1
 80152a6:	444b      	add	r3, r9
 80152a8:	106d      	asrs	r5, r5, #1
 80152aa:	429d      	cmp	r5, r3
 80152ac:	bf38      	it	cc
 80152ae:	461d      	movcc	r5, r3
 80152b0:	0553      	lsls	r3, r2, #21
 80152b2:	d531      	bpl.n	8015318 <__ssputs_r+0xa0>
 80152b4:	4629      	mov	r1, r5
 80152b6:	f000 fb39 	bl	801592c <_malloc_r>
 80152ba:	4606      	mov	r6, r0
 80152bc:	b950      	cbnz	r0, 80152d4 <__ssputs_r+0x5c>
 80152be:	230c      	movs	r3, #12
 80152c0:	f8ca 3000 	str.w	r3, [sl]
 80152c4:	89a3      	ldrh	r3, [r4, #12]
 80152c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152ca:	81a3      	strh	r3, [r4, #12]
 80152cc:	f04f 30ff 	mov.w	r0, #4294967295
 80152d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152d4:	6921      	ldr	r1, [r4, #16]
 80152d6:	464a      	mov	r2, r9
 80152d8:	f7ff ff98 	bl	801520c <memcpy>
 80152dc:	89a3      	ldrh	r3, [r4, #12]
 80152de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80152e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152e6:	81a3      	strh	r3, [r4, #12]
 80152e8:	6126      	str	r6, [r4, #16]
 80152ea:	6165      	str	r5, [r4, #20]
 80152ec:	444e      	add	r6, r9
 80152ee:	eba5 0509 	sub.w	r5, r5, r9
 80152f2:	6026      	str	r6, [r4, #0]
 80152f4:	60a5      	str	r5, [r4, #8]
 80152f6:	463e      	mov	r6, r7
 80152f8:	42be      	cmp	r6, r7
 80152fa:	d900      	bls.n	80152fe <__ssputs_r+0x86>
 80152fc:	463e      	mov	r6, r7
 80152fe:	4632      	mov	r2, r6
 8015300:	6820      	ldr	r0, [r4, #0]
 8015302:	4641      	mov	r1, r8
 8015304:	f000 faa8 	bl	8015858 <memmove>
 8015308:	68a3      	ldr	r3, [r4, #8]
 801530a:	6822      	ldr	r2, [r4, #0]
 801530c:	1b9b      	subs	r3, r3, r6
 801530e:	4432      	add	r2, r6
 8015310:	60a3      	str	r3, [r4, #8]
 8015312:	6022      	str	r2, [r4, #0]
 8015314:	2000      	movs	r0, #0
 8015316:	e7db      	b.n	80152d0 <__ssputs_r+0x58>
 8015318:	462a      	mov	r2, r5
 801531a:	f000 fb61 	bl	80159e0 <_realloc_r>
 801531e:	4606      	mov	r6, r0
 8015320:	2800      	cmp	r0, #0
 8015322:	d1e1      	bne.n	80152e8 <__ssputs_r+0x70>
 8015324:	6921      	ldr	r1, [r4, #16]
 8015326:	4650      	mov	r0, sl
 8015328:	f000 fab0 	bl	801588c <_free_r>
 801532c:	e7c7      	b.n	80152be <__ssputs_r+0x46>
	...

08015330 <_svfiprintf_r>:
 8015330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015334:	4698      	mov	r8, r3
 8015336:	898b      	ldrh	r3, [r1, #12]
 8015338:	061b      	lsls	r3, r3, #24
 801533a:	b09d      	sub	sp, #116	; 0x74
 801533c:	4607      	mov	r7, r0
 801533e:	460d      	mov	r5, r1
 8015340:	4614      	mov	r4, r2
 8015342:	d50e      	bpl.n	8015362 <_svfiprintf_r+0x32>
 8015344:	690b      	ldr	r3, [r1, #16]
 8015346:	b963      	cbnz	r3, 8015362 <_svfiprintf_r+0x32>
 8015348:	2140      	movs	r1, #64	; 0x40
 801534a:	f000 faef 	bl	801592c <_malloc_r>
 801534e:	6028      	str	r0, [r5, #0]
 8015350:	6128      	str	r0, [r5, #16]
 8015352:	b920      	cbnz	r0, 801535e <_svfiprintf_r+0x2e>
 8015354:	230c      	movs	r3, #12
 8015356:	603b      	str	r3, [r7, #0]
 8015358:	f04f 30ff 	mov.w	r0, #4294967295
 801535c:	e0d1      	b.n	8015502 <_svfiprintf_r+0x1d2>
 801535e:	2340      	movs	r3, #64	; 0x40
 8015360:	616b      	str	r3, [r5, #20]
 8015362:	2300      	movs	r3, #0
 8015364:	9309      	str	r3, [sp, #36]	; 0x24
 8015366:	2320      	movs	r3, #32
 8015368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801536c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015370:	2330      	movs	r3, #48	; 0x30
 8015372:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801551c <_svfiprintf_r+0x1ec>
 8015376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801537a:	f04f 0901 	mov.w	r9, #1
 801537e:	4623      	mov	r3, r4
 8015380:	469a      	mov	sl, r3
 8015382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015386:	b10a      	cbz	r2, 801538c <_svfiprintf_r+0x5c>
 8015388:	2a25      	cmp	r2, #37	; 0x25
 801538a:	d1f9      	bne.n	8015380 <_svfiprintf_r+0x50>
 801538c:	ebba 0b04 	subs.w	fp, sl, r4
 8015390:	d00b      	beq.n	80153aa <_svfiprintf_r+0x7a>
 8015392:	465b      	mov	r3, fp
 8015394:	4622      	mov	r2, r4
 8015396:	4629      	mov	r1, r5
 8015398:	4638      	mov	r0, r7
 801539a:	f7ff ff6d 	bl	8015278 <__ssputs_r>
 801539e:	3001      	adds	r0, #1
 80153a0:	f000 80aa 	beq.w	80154f8 <_svfiprintf_r+0x1c8>
 80153a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80153a6:	445a      	add	r2, fp
 80153a8:	9209      	str	r2, [sp, #36]	; 0x24
 80153aa:	f89a 3000 	ldrb.w	r3, [sl]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	f000 80a2 	beq.w	80154f8 <_svfiprintf_r+0x1c8>
 80153b4:	2300      	movs	r3, #0
 80153b6:	f04f 32ff 	mov.w	r2, #4294967295
 80153ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80153be:	f10a 0a01 	add.w	sl, sl, #1
 80153c2:	9304      	str	r3, [sp, #16]
 80153c4:	9307      	str	r3, [sp, #28]
 80153c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80153ca:	931a      	str	r3, [sp, #104]	; 0x68
 80153cc:	4654      	mov	r4, sl
 80153ce:	2205      	movs	r2, #5
 80153d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153d4:	4851      	ldr	r0, [pc, #324]	; (801551c <_svfiprintf_r+0x1ec>)
 80153d6:	f7fa ff03 	bl	80101e0 <memchr>
 80153da:	9a04      	ldr	r2, [sp, #16]
 80153dc:	b9d8      	cbnz	r0, 8015416 <_svfiprintf_r+0xe6>
 80153de:	06d0      	lsls	r0, r2, #27
 80153e0:	bf44      	itt	mi
 80153e2:	2320      	movmi	r3, #32
 80153e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153e8:	0711      	lsls	r1, r2, #28
 80153ea:	bf44      	itt	mi
 80153ec:	232b      	movmi	r3, #43	; 0x2b
 80153ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153f2:	f89a 3000 	ldrb.w	r3, [sl]
 80153f6:	2b2a      	cmp	r3, #42	; 0x2a
 80153f8:	d015      	beq.n	8015426 <_svfiprintf_r+0xf6>
 80153fa:	9a07      	ldr	r2, [sp, #28]
 80153fc:	4654      	mov	r4, sl
 80153fe:	2000      	movs	r0, #0
 8015400:	f04f 0c0a 	mov.w	ip, #10
 8015404:	4621      	mov	r1, r4
 8015406:	f811 3b01 	ldrb.w	r3, [r1], #1
 801540a:	3b30      	subs	r3, #48	; 0x30
 801540c:	2b09      	cmp	r3, #9
 801540e:	d94e      	bls.n	80154ae <_svfiprintf_r+0x17e>
 8015410:	b1b0      	cbz	r0, 8015440 <_svfiprintf_r+0x110>
 8015412:	9207      	str	r2, [sp, #28]
 8015414:	e014      	b.n	8015440 <_svfiprintf_r+0x110>
 8015416:	eba0 0308 	sub.w	r3, r0, r8
 801541a:	fa09 f303 	lsl.w	r3, r9, r3
 801541e:	4313      	orrs	r3, r2
 8015420:	9304      	str	r3, [sp, #16]
 8015422:	46a2      	mov	sl, r4
 8015424:	e7d2      	b.n	80153cc <_svfiprintf_r+0x9c>
 8015426:	9b03      	ldr	r3, [sp, #12]
 8015428:	1d19      	adds	r1, r3, #4
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	9103      	str	r1, [sp, #12]
 801542e:	2b00      	cmp	r3, #0
 8015430:	bfbb      	ittet	lt
 8015432:	425b      	neglt	r3, r3
 8015434:	f042 0202 	orrlt.w	r2, r2, #2
 8015438:	9307      	strge	r3, [sp, #28]
 801543a:	9307      	strlt	r3, [sp, #28]
 801543c:	bfb8      	it	lt
 801543e:	9204      	strlt	r2, [sp, #16]
 8015440:	7823      	ldrb	r3, [r4, #0]
 8015442:	2b2e      	cmp	r3, #46	; 0x2e
 8015444:	d10c      	bne.n	8015460 <_svfiprintf_r+0x130>
 8015446:	7863      	ldrb	r3, [r4, #1]
 8015448:	2b2a      	cmp	r3, #42	; 0x2a
 801544a:	d135      	bne.n	80154b8 <_svfiprintf_r+0x188>
 801544c:	9b03      	ldr	r3, [sp, #12]
 801544e:	1d1a      	adds	r2, r3, #4
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	9203      	str	r2, [sp, #12]
 8015454:	2b00      	cmp	r3, #0
 8015456:	bfb8      	it	lt
 8015458:	f04f 33ff 	movlt.w	r3, #4294967295
 801545c:	3402      	adds	r4, #2
 801545e:	9305      	str	r3, [sp, #20]
 8015460:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801552c <_svfiprintf_r+0x1fc>
 8015464:	7821      	ldrb	r1, [r4, #0]
 8015466:	2203      	movs	r2, #3
 8015468:	4650      	mov	r0, sl
 801546a:	f7fa feb9 	bl	80101e0 <memchr>
 801546e:	b140      	cbz	r0, 8015482 <_svfiprintf_r+0x152>
 8015470:	2340      	movs	r3, #64	; 0x40
 8015472:	eba0 000a 	sub.w	r0, r0, sl
 8015476:	fa03 f000 	lsl.w	r0, r3, r0
 801547a:	9b04      	ldr	r3, [sp, #16]
 801547c:	4303      	orrs	r3, r0
 801547e:	3401      	adds	r4, #1
 8015480:	9304      	str	r3, [sp, #16]
 8015482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015486:	4826      	ldr	r0, [pc, #152]	; (8015520 <_svfiprintf_r+0x1f0>)
 8015488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801548c:	2206      	movs	r2, #6
 801548e:	f7fa fea7 	bl	80101e0 <memchr>
 8015492:	2800      	cmp	r0, #0
 8015494:	d038      	beq.n	8015508 <_svfiprintf_r+0x1d8>
 8015496:	4b23      	ldr	r3, [pc, #140]	; (8015524 <_svfiprintf_r+0x1f4>)
 8015498:	bb1b      	cbnz	r3, 80154e2 <_svfiprintf_r+0x1b2>
 801549a:	9b03      	ldr	r3, [sp, #12]
 801549c:	3307      	adds	r3, #7
 801549e:	f023 0307 	bic.w	r3, r3, #7
 80154a2:	3308      	adds	r3, #8
 80154a4:	9303      	str	r3, [sp, #12]
 80154a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154a8:	4433      	add	r3, r6
 80154aa:	9309      	str	r3, [sp, #36]	; 0x24
 80154ac:	e767      	b.n	801537e <_svfiprintf_r+0x4e>
 80154ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80154b2:	460c      	mov	r4, r1
 80154b4:	2001      	movs	r0, #1
 80154b6:	e7a5      	b.n	8015404 <_svfiprintf_r+0xd4>
 80154b8:	2300      	movs	r3, #0
 80154ba:	3401      	adds	r4, #1
 80154bc:	9305      	str	r3, [sp, #20]
 80154be:	4619      	mov	r1, r3
 80154c0:	f04f 0c0a 	mov.w	ip, #10
 80154c4:	4620      	mov	r0, r4
 80154c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80154ca:	3a30      	subs	r2, #48	; 0x30
 80154cc:	2a09      	cmp	r2, #9
 80154ce:	d903      	bls.n	80154d8 <_svfiprintf_r+0x1a8>
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d0c5      	beq.n	8015460 <_svfiprintf_r+0x130>
 80154d4:	9105      	str	r1, [sp, #20]
 80154d6:	e7c3      	b.n	8015460 <_svfiprintf_r+0x130>
 80154d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80154dc:	4604      	mov	r4, r0
 80154de:	2301      	movs	r3, #1
 80154e0:	e7f0      	b.n	80154c4 <_svfiprintf_r+0x194>
 80154e2:	ab03      	add	r3, sp, #12
 80154e4:	9300      	str	r3, [sp, #0]
 80154e6:	462a      	mov	r2, r5
 80154e8:	4b0f      	ldr	r3, [pc, #60]	; (8015528 <_svfiprintf_r+0x1f8>)
 80154ea:	a904      	add	r1, sp, #16
 80154ec:	4638      	mov	r0, r7
 80154ee:	f3af 8000 	nop.w
 80154f2:	1c42      	adds	r2, r0, #1
 80154f4:	4606      	mov	r6, r0
 80154f6:	d1d6      	bne.n	80154a6 <_svfiprintf_r+0x176>
 80154f8:	89ab      	ldrh	r3, [r5, #12]
 80154fa:	065b      	lsls	r3, r3, #25
 80154fc:	f53f af2c 	bmi.w	8015358 <_svfiprintf_r+0x28>
 8015500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015502:	b01d      	add	sp, #116	; 0x74
 8015504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015508:	ab03      	add	r3, sp, #12
 801550a:	9300      	str	r3, [sp, #0]
 801550c:	462a      	mov	r2, r5
 801550e:	4b06      	ldr	r3, [pc, #24]	; (8015528 <_svfiprintf_r+0x1f8>)
 8015510:	a904      	add	r1, sp, #16
 8015512:	4638      	mov	r0, r7
 8015514:	f000 f87a 	bl	801560c <_printf_i>
 8015518:	e7eb      	b.n	80154f2 <_svfiprintf_r+0x1c2>
 801551a:	bf00      	nop
 801551c:	08015b2c 	.word	0x08015b2c
 8015520:	08015b36 	.word	0x08015b36
 8015524:	00000000 	.word	0x00000000
 8015528:	08015279 	.word	0x08015279
 801552c:	08015b32 	.word	0x08015b32

08015530 <_printf_common>:
 8015530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015534:	4616      	mov	r6, r2
 8015536:	4699      	mov	r9, r3
 8015538:	688a      	ldr	r2, [r1, #8]
 801553a:	690b      	ldr	r3, [r1, #16]
 801553c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015540:	4293      	cmp	r3, r2
 8015542:	bfb8      	it	lt
 8015544:	4613      	movlt	r3, r2
 8015546:	6033      	str	r3, [r6, #0]
 8015548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801554c:	4607      	mov	r7, r0
 801554e:	460c      	mov	r4, r1
 8015550:	b10a      	cbz	r2, 8015556 <_printf_common+0x26>
 8015552:	3301      	adds	r3, #1
 8015554:	6033      	str	r3, [r6, #0]
 8015556:	6823      	ldr	r3, [r4, #0]
 8015558:	0699      	lsls	r1, r3, #26
 801555a:	bf42      	ittt	mi
 801555c:	6833      	ldrmi	r3, [r6, #0]
 801555e:	3302      	addmi	r3, #2
 8015560:	6033      	strmi	r3, [r6, #0]
 8015562:	6825      	ldr	r5, [r4, #0]
 8015564:	f015 0506 	ands.w	r5, r5, #6
 8015568:	d106      	bne.n	8015578 <_printf_common+0x48>
 801556a:	f104 0a19 	add.w	sl, r4, #25
 801556e:	68e3      	ldr	r3, [r4, #12]
 8015570:	6832      	ldr	r2, [r6, #0]
 8015572:	1a9b      	subs	r3, r3, r2
 8015574:	42ab      	cmp	r3, r5
 8015576:	dc26      	bgt.n	80155c6 <_printf_common+0x96>
 8015578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801557c:	1e13      	subs	r3, r2, #0
 801557e:	6822      	ldr	r2, [r4, #0]
 8015580:	bf18      	it	ne
 8015582:	2301      	movne	r3, #1
 8015584:	0692      	lsls	r2, r2, #26
 8015586:	d42b      	bmi.n	80155e0 <_printf_common+0xb0>
 8015588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801558c:	4649      	mov	r1, r9
 801558e:	4638      	mov	r0, r7
 8015590:	47c0      	blx	r8
 8015592:	3001      	adds	r0, #1
 8015594:	d01e      	beq.n	80155d4 <_printf_common+0xa4>
 8015596:	6823      	ldr	r3, [r4, #0]
 8015598:	68e5      	ldr	r5, [r4, #12]
 801559a:	6832      	ldr	r2, [r6, #0]
 801559c:	f003 0306 	and.w	r3, r3, #6
 80155a0:	2b04      	cmp	r3, #4
 80155a2:	bf08      	it	eq
 80155a4:	1aad      	subeq	r5, r5, r2
 80155a6:	68a3      	ldr	r3, [r4, #8]
 80155a8:	6922      	ldr	r2, [r4, #16]
 80155aa:	bf0c      	ite	eq
 80155ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80155b0:	2500      	movne	r5, #0
 80155b2:	4293      	cmp	r3, r2
 80155b4:	bfc4      	itt	gt
 80155b6:	1a9b      	subgt	r3, r3, r2
 80155b8:	18ed      	addgt	r5, r5, r3
 80155ba:	2600      	movs	r6, #0
 80155bc:	341a      	adds	r4, #26
 80155be:	42b5      	cmp	r5, r6
 80155c0:	d11a      	bne.n	80155f8 <_printf_common+0xc8>
 80155c2:	2000      	movs	r0, #0
 80155c4:	e008      	b.n	80155d8 <_printf_common+0xa8>
 80155c6:	2301      	movs	r3, #1
 80155c8:	4652      	mov	r2, sl
 80155ca:	4649      	mov	r1, r9
 80155cc:	4638      	mov	r0, r7
 80155ce:	47c0      	blx	r8
 80155d0:	3001      	adds	r0, #1
 80155d2:	d103      	bne.n	80155dc <_printf_common+0xac>
 80155d4:	f04f 30ff 	mov.w	r0, #4294967295
 80155d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155dc:	3501      	adds	r5, #1
 80155de:	e7c6      	b.n	801556e <_printf_common+0x3e>
 80155e0:	18e1      	adds	r1, r4, r3
 80155e2:	1c5a      	adds	r2, r3, #1
 80155e4:	2030      	movs	r0, #48	; 0x30
 80155e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80155ea:	4422      	add	r2, r4
 80155ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80155f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80155f4:	3302      	adds	r3, #2
 80155f6:	e7c7      	b.n	8015588 <_printf_common+0x58>
 80155f8:	2301      	movs	r3, #1
 80155fa:	4622      	mov	r2, r4
 80155fc:	4649      	mov	r1, r9
 80155fe:	4638      	mov	r0, r7
 8015600:	47c0      	blx	r8
 8015602:	3001      	adds	r0, #1
 8015604:	d0e6      	beq.n	80155d4 <_printf_common+0xa4>
 8015606:	3601      	adds	r6, #1
 8015608:	e7d9      	b.n	80155be <_printf_common+0x8e>
	...

0801560c <_printf_i>:
 801560c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015610:	460c      	mov	r4, r1
 8015612:	4691      	mov	r9, r2
 8015614:	7e27      	ldrb	r7, [r4, #24]
 8015616:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015618:	2f78      	cmp	r7, #120	; 0x78
 801561a:	4680      	mov	r8, r0
 801561c:	469a      	mov	sl, r3
 801561e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015622:	d807      	bhi.n	8015634 <_printf_i+0x28>
 8015624:	2f62      	cmp	r7, #98	; 0x62
 8015626:	d80a      	bhi.n	801563e <_printf_i+0x32>
 8015628:	2f00      	cmp	r7, #0
 801562a:	f000 80d8 	beq.w	80157de <_printf_i+0x1d2>
 801562e:	2f58      	cmp	r7, #88	; 0x58
 8015630:	f000 80a3 	beq.w	801577a <_printf_i+0x16e>
 8015634:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801563c:	e03a      	b.n	80156b4 <_printf_i+0xa8>
 801563e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015642:	2b15      	cmp	r3, #21
 8015644:	d8f6      	bhi.n	8015634 <_printf_i+0x28>
 8015646:	a001      	add	r0, pc, #4	; (adr r0, 801564c <_printf_i+0x40>)
 8015648:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801564c:	080156a5 	.word	0x080156a5
 8015650:	080156b9 	.word	0x080156b9
 8015654:	08015635 	.word	0x08015635
 8015658:	08015635 	.word	0x08015635
 801565c:	08015635 	.word	0x08015635
 8015660:	08015635 	.word	0x08015635
 8015664:	080156b9 	.word	0x080156b9
 8015668:	08015635 	.word	0x08015635
 801566c:	08015635 	.word	0x08015635
 8015670:	08015635 	.word	0x08015635
 8015674:	08015635 	.word	0x08015635
 8015678:	080157c5 	.word	0x080157c5
 801567c:	080156e9 	.word	0x080156e9
 8015680:	080157a7 	.word	0x080157a7
 8015684:	08015635 	.word	0x08015635
 8015688:	08015635 	.word	0x08015635
 801568c:	080157e7 	.word	0x080157e7
 8015690:	08015635 	.word	0x08015635
 8015694:	080156e9 	.word	0x080156e9
 8015698:	08015635 	.word	0x08015635
 801569c:	08015635 	.word	0x08015635
 80156a0:	080157af 	.word	0x080157af
 80156a4:	680b      	ldr	r3, [r1, #0]
 80156a6:	1d1a      	adds	r2, r3, #4
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	600a      	str	r2, [r1, #0]
 80156ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80156b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80156b4:	2301      	movs	r3, #1
 80156b6:	e0a3      	b.n	8015800 <_printf_i+0x1f4>
 80156b8:	6825      	ldr	r5, [r4, #0]
 80156ba:	6808      	ldr	r0, [r1, #0]
 80156bc:	062e      	lsls	r6, r5, #24
 80156be:	f100 0304 	add.w	r3, r0, #4
 80156c2:	d50a      	bpl.n	80156da <_printf_i+0xce>
 80156c4:	6805      	ldr	r5, [r0, #0]
 80156c6:	600b      	str	r3, [r1, #0]
 80156c8:	2d00      	cmp	r5, #0
 80156ca:	da03      	bge.n	80156d4 <_printf_i+0xc8>
 80156cc:	232d      	movs	r3, #45	; 0x2d
 80156ce:	426d      	negs	r5, r5
 80156d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156d4:	485e      	ldr	r0, [pc, #376]	; (8015850 <_printf_i+0x244>)
 80156d6:	230a      	movs	r3, #10
 80156d8:	e019      	b.n	801570e <_printf_i+0x102>
 80156da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80156de:	6805      	ldr	r5, [r0, #0]
 80156e0:	600b      	str	r3, [r1, #0]
 80156e2:	bf18      	it	ne
 80156e4:	b22d      	sxthne	r5, r5
 80156e6:	e7ef      	b.n	80156c8 <_printf_i+0xbc>
 80156e8:	680b      	ldr	r3, [r1, #0]
 80156ea:	6825      	ldr	r5, [r4, #0]
 80156ec:	1d18      	adds	r0, r3, #4
 80156ee:	6008      	str	r0, [r1, #0]
 80156f0:	0628      	lsls	r0, r5, #24
 80156f2:	d501      	bpl.n	80156f8 <_printf_i+0xec>
 80156f4:	681d      	ldr	r5, [r3, #0]
 80156f6:	e002      	b.n	80156fe <_printf_i+0xf2>
 80156f8:	0669      	lsls	r1, r5, #25
 80156fa:	d5fb      	bpl.n	80156f4 <_printf_i+0xe8>
 80156fc:	881d      	ldrh	r5, [r3, #0]
 80156fe:	4854      	ldr	r0, [pc, #336]	; (8015850 <_printf_i+0x244>)
 8015700:	2f6f      	cmp	r7, #111	; 0x6f
 8015702:	bf0c      	ite	eq
 8015704:	2308      	moveq	r3, #8
 8015706:	230a      	movne	r3, #10
 8015708:	2100      	movs	r1, #0
 801570a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801570e:	6866      	ldr	r6, [r4, #4]
 8015710:	60a6      	str	r6, [r4, #8]
 8015712:	2e00      	cmp	r6, #0
 8015714:	bfa2      	ittt	ge
 8015716:	6821      	ldrge	r1, [r4, #0]
 8015718:	f021 0104 	bicge.w	r1, r1, #4
 801571c:	6021      	strge	r1, [r4, #0]
 801571e:	b90d      	cbnz	r5, 8015724 <_printf_i+0x118>
 8015720:	2e00      	cmp	r6, #0
 8015722:	d04d      	beq.n	80157c0 <_printf_i+0x1b4>
 8015724:	4616      	mov	r6, r2
 8015726:	fbb5 f1f3 	udiv	r1, r5, r3
 801572a:	fb03 5711 	mls	r7, r3, r1, r5
 801572e:	5dc7      	ldrb	r7, [r0, r7]
 8015730:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015734:	462f      	mov	r7, r5
 8015736:	42bb      	cmp	r3, r7
 8015738:	460d      	mov	r5, r1
 801573a:	d9f4      	bls.n	8015726 <_printf_i+0x11a>
 801573c:	2b08      	cmp	r3, #8
 801573e:	d10b      	bne.n	8015758 <_printf_i+0x14c>
 8015740:	6823      	ldr	r3, [r4, #0]
 8015742:	07df      	lsls	r7, r3, #31
 8015744:	d508      	bpl.n	8015758 <_printf_i+0x14c>
 8015746:	6923      	ldr	r3, [r4, #16]
 8015748:	6861      	ldr	r1, [r4, #4]
 801574a:	4299      	cmp	r1, r3
 801574c:	bfde      	ittt	le
 801574e:	2330      	movle	r3, #48	; 0x30
 8015750:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015754:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015758:	1b92      	subs	r2, r2, r6
 801575a:	6122      	str	r2, [r4, #16]
 801575c:	f8cd a000 	str.w	sl, [sp]
 8015760:	464b      	mov	r3, r9
 8015762:	aa03      	add	r2, sp, #12
 8015764:	4621      	mov	r1, r4
 8015766:	4640      	mov	r0, r8
 8015768:	f7ff fee2 	bl	8015530 <_printf_common>
 801576c:	3001      	adds	r0, #1
 801576e:	d14c      	bne.n	801580a <_printf_i+0x1fe>
 8015770:	f04f 30ff 	mov.w	r0, #4294967295
 8015774:	b004      	add	sp, #16
 8015776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801577a:	4835      	ldr	r0, [pc, #212]	; (8015850 <_printf_i+0x244>)
 801577c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015780:	6823      	ldr	r3, [r4, #0]
 8015782:	680e      	ldr	r6, [r1, #0]
 8015784:	061f      	lsls	r7, r3, #24
 8015786:	f856 5b04 	ldr.w	r5, [r6], #4
 801578a:	600e      	str	r6, [r1, #0]
 801578c:	d514      	bpl.n	80157b8 <_printf_i+0x1ac>
 801578e:	07d9      	lsls	r1, r3, #31
 8015790:	bf44      	itt	mi
 8015792:	f043 0320 	orrmi.w	r3, r3, #32
 8015796:	6023      	strmi	r3, [r4, #0]
 8015798:	b91d      	cbnz	r5, 80157a2 <_printf_i+0x196>
 801579a:	6823      	ldr	r3, [r4, #0]
 801579c:	f023 0320 	bic.w	r3, r3, #32
 80157a0:	6023      	str	r3, [r4, #0]
 80157a2:	2310      	movs	r3, #16
 80157a4:	e7b0      	b.n	8015708 <_printf_i+0xfc>
 80157a6:	6823      	ldr	r3, [r4, #0]
 80157a8:	f043 0320 	orr.w	r3, r3, #32
 80157ac:	6023      	str	r3, [r4, #0]
 80157ae:	2378      	movs	r3, #120	; 0x78
 80157b0:	4828      	ldr	r0, [pc, #160]	; (8015854 <_printf_i+0x248>)
 80157b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80157b6:	e7e3      	b.n	8015780 <_printf_i+0x174>
 80157b8:	065e      	lsls	r6, r3, #25
 80157ba:	bf48      	it	mi
 80157bc:	b2ad      	uxthmi	r5, r5
 80157be:	e7e6      	b.n	801578e <_printf_i+0x182>
 80157c0:	4616      	mov	r6, r2
 80157c2:	e7bb      	b.n	801573c <_printf_i+0x130>
 80157c4:	680b      	ldr	r3, [r1, #0]
 80157c6:	6826      	ldr	r6, [r4, #0]
 80157c8:	6960      	ldr	r0, [r4, #20]
 80157ca:	1d1d      	adds	r5, r3, #4
 80157cc:	600d      	str	r5, [r1, #0]
 80157ce:	0635      	lsls	r5, r6, #24
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	d501      	bpl.n	80157d8 <_printf_i+0x1cc>
 80157d4:	6018      	str	r0, [r3, #0]
 80157d6:	e002      	b.n	80157de <_printf_i+0x1d2>
 80157d8:	0671      	lsls	r1, r6, #25
 80157da:	d5fb      	bpl.n	80157d4 <_printf_i+0x1c8>
 80157dc:	8018      	strh	r0, [r3, #0]
 80157de:	2300      	movs	r3, #0
 80157e0:	6123      	str	r3, [r4, #16]
 80157e2:	4616      	mov	r6, r2
 80157e4:	e7ba      	b.n	801575c <_printf_i+0x150>
 80157e6:	680b      	ldr	r3, [r1, #0]
 80157e8:	1d1a      	adds	r2, r3, #4
 80157ea:	600a      	str	r2, [r1, #0]
 80157ec:	681e      	ldr	r6, [r3, #0]
 80157ee:	6862      	ldr	r2, [r4, #4]
 80157f0:	2100      	movs	r1, #0
 80157f2:	4630      	mov	r0, r6
 80157f4:	f7fa fcf4 	bl	80101e0 <memchr>
 80157f8:	b108      	cbz	r0, 80157fe <_printf_i+0x1f2>
 80157fa:	1b80      	subs	r0, r0, r6
 80157fc:	6060      	str	r0, [r4, #4]
 80157fe:	6863      	ldr	r3, [r4, #4]
 8015800:	6123      	str	r3, [r4, #16]
 8015802:	2300      	movs	r3, #0
 8015804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015808:	e7a8      	b.n	801575c <_printf_i+0x150>
 801580a:	6923      	ldr	r3, [r4, #16]
 801580c:	4632      	mov	r2, r6
 801580e:	4649      	mov	r1, r9
 8015810:	4640      	mov	r0, r8
 8015812:	47d0      	blx	sl
 8015814:	3001      	adds	r0, #1
 8015816:	d0ab      	beq.n	8015770 <_printf_i+0x164>
 8015818:	6823      	ldr	r3, [r4, #0]
 801581a:	079b      	lsls	r3, r3, #30
 801581c:	d413      	bmi.n	8015846 <_printf_i+0x23a>
 801581e:	68e0      	ldr	r0, [r4, #12]
 8015820:	9b03      	ldr	r3, [sp, #12]
 8015822:	4298      	cmp	r0, r3
 8015824:	bfb8      	it	lt
 8015826:	4618      	movlt	r0, r3
 8015828:	e7a4      	b.n	8015774 <_printf_i+0x168>
 801582a:	2301      	movs	r3, #1
 801582c:	4632      	mov	r2, r6
 801582e:	4649      	mov	r1, r9
 8015830:	4640      	mov	r0, r8
 8015832:	47d0      	blx	sl
 8015834:	3001      	adds	r0, #1
 8015836:	d09b      	beq.n	8015770 <_printf_i+0x164>
 8015838:	3501      	adds	r5, #1
 801583a:	68e3      	ldr	r3, [r4, #12]
 801583c:	9903      	ldr	r1, [sp, #12]
 801583e:	1a5b      	subs	r3, r3, r1
 8015840:	42ab      	cmp	r3, r5
 8015842:	dcf2      	bgt.n	801582a <_printf_i+0x21e>
 8015844:	e7eb      	b.n	801581e <_printf_i+0x212>
 8015846:	2500      	movs	r5, #0
 8015848:	f104 0619 	add.w	r6, r4, #25
 801584c:	e7f5      	b.n	801583a <_printf_i+0x22e>
 801584e:	bf00      	nop
 8015850:	08015b3d 	.word	0x08015b3d
 8015854:	08015b4e 	.word	0x08015b4e

08015858 <memmove>:
 8015858:	4288      	cmp	r0, r1
 801585a:	b510      	push	{r4, lr}
 801585c:	eb01 0402 	add.w	r4, r1, r2
 8015860:	d902      	bls.n	8015868 <memmove+0x10>
 8015862:	4284      	cmp	r4, r0
 8015864:	4623      	mov	r3, r4
 8015866:	d807      	bhi.n	8015878 <memmove+0x20>
 8015868:	1e43      	subs	r3, r0, #1
 801586a:	42a1      	cmp	r1, r4
 801586c:	d008      	beq.n	8015880 <memmove+0x28>
 801586e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015876:	e7f8      	b.n	801586a <memmove+0x12>
 8015878:	4402      	add	r2, r0
 801587a:	4601      	mov	r1, r0
 801587c:	428a      	cmp	r2, r1
 801587e:	d100      	bne.n	8015882 <memmove+0x2a>
 8015880:	bd10      	pop	{r4, pc}
 8015882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801588a:	e7f7      	b.n	801587c <memmove+0x24>

0801588c <_free_r>:
 801588c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801588e:	2900      	cmp	r1, #0
 8015890:	d048      	beq.n	8015924 <_free_r+0x98>
 8015892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015896:	9001      	str	r0, [sp, #4]
 8015898:	2b00      	cmp	r3, #0
 801589a:	f1a1 0404 	sub.w	r4, r1, #4
 801589e:	bfb8      	it	lt
 80158a0:	18e4      	addlt	r4, r4, r3
 80158a2:	f000 f8d3 	bl	8015a4c <__malloc_lock>
 80158a6:	4a20      	ldr	r2, [pc, #128]	; (8015928 <_free_r+0x9c>)
 80158a8:	9801      	ldr	r0, [sp, #4]
 80158aa:	6813      	ldr	r3, [r2, #0]
 80158ac:	4615      	mov	r5, r2
 80158ae:	b933      	cbnz	r3, 80158be <_free_r+0x32>
 80158b0:	6063      	str	r3, [r4, #4]
 80158b2:	6014      	str	r4, [r2, #0]
 80158b4:	b003      	add	sp, #12
 80158b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80158ba:	f000 b8cd 	b.w	8015a58 <__malloc_unlock>
 80158be:	42a3      	cmp	r3, r4
 80158c0:	d90b      	bls.n	80158da <_free_r+0x4e>
 80158c2:	6821      	ldr	r1, [r4, #0]
 80158c4:	1862      	adds	r2, r4, r1
 80158c6:	4293      	cmp	r3, r2
 80158c8:	bf04      	itt	eq
 80158ca:	681a      	ldreq	r2, [r3, #0]
 80158cc:	685b      	ldreq	r3, [r3, #4]
 80158ce:	6063      	str	r3, [r4, #4]
 80158d0:	bf04      	itt	eq
 80158d2:	1852      	addeq	r2, r2, r1
 80158d4:	6022      	streq	r2, [r4, #0]
 80158d6:	602c      	str	r4, [r5, #0]
 80158d8:	e7ec      	b.n	80158b4 <_free_r+0x28>
 80158da:	461a      	mov	r2, r3
 80158dc:	685b      	ldr	r3, [r3, #4]
 80158de:	b10b      	cbz	r3, 80158e4 <_free_r+0x58>
 80158e0:	42a3      	cmp	r3, r4
 80158e2:	d9fa      	bls.n	80158da <_free_r+0x4e>
 80158e4:	6811      	ldr	r1, [r2, #0]
 80158e6:	1855      	adds	r5, r2, r1
 80158e8:	42a5      	cmp	r5, r4
 80158ea:	d10b      	bne.n	8015904 <_free_r+0x78>
 80158ec:	6824      	ldr	r4, [r4, #0]
 80158ee:	4421      	add	r1, r4
 80158f0:	1854      	adds	r4, r2, r1
 80158f2:	42a3      	cmp	r3, r4
 80158f4:	6011      	str	r1, [r2, #0]
 80158f6:	d1dd      	bne.n	80158b4 <_free_r+0x28>
 80158f8:	681c      	ldr	r4, [r3, #0]
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	6053      	str	r3, [r2, #4]
 80158fe:	4421      	add	r1, r4
 8015900:	6011      	str	r1, [r2, #0]
 8015902:	e7d7      	b.n	80158b4 <_free_r+0x28>
 8015904:	d902      	bls.n	801590c <_free_r+0x80>
 8015906:	230c      	movs	r3, #12
 8015908:	6003      	str	r3, [r0, #0]
 801590a:	e7d3      	b.n	80158b4 <_free_r+0x28>
 801590c:	6825      	ldr	r5, [r4, #0]
 801590e:	1961      	adds	r1, r4, r5
 8015910:	428b      	cmp	r3, r1
 8015912:	bf04      	itt	eq
 8015914:	6819      	ldreq	r1, [r3, #0]
 8015916:	685b      	ldreq	r3, [r3, #4]
 8015918:	6063      	str	r3, [r4, #4]
 801591a:	bf04      	itt	eq
 801591c:	1949      	addeq	r1, r1, r5
 801591e:	6021      	streq	r1, [r4, #0]
 8015920:	6054      	str	r4, [r2, #4]
 8015922:	e7c7      	b.n	80158b4 <_free_r+0x28>
 8015924:	b003      	add	sp, #12
 8015926:	bd30      	pop	{r4, r5, pc}
 8015928:	20000b64 	.word	0x20000b64

0801592c <_malloc_r>:
 801592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801592e:	1ccd      	adds	r5, r1, #3
 8015930:	f025 0503 	bic.w	r5, r5, #3
 8015934:	3508      	adds	r5, #8
 8015936:	2d0c      	cmp	r5, #12
 8015938:	bf38      	it	cc
 801593a:	250c      	movcc	r5, #12
 801593c:	2d00      	cmp	r5, #0
 801593e:	4606      	mov	r6, r0
 8015940:	db01      	blt.n	8015946 <_malloc_r+0x1a>
 8015942:	42a9      	cmp	r1, r5
 8015944:	d903      	bls.n	801594e <_malloc_r+0x22>
 8015946:	230c      	movs	r3, #12
 8015948:	6033      	str	r3, [r6, #0]
 801594a:	2000      	movs	r0, #0
 801594c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801594e:	f000 f87d 	bl	8015a4c <__malloc_lock>
 8015952:	4921      	ldr	r1, [pc, #132]	; (80159d8 <_malloc_r+0xac>)
 8015954:	680a      	ldr	r2, [r1, #0]
 8015956:	4614      	mov	r4, r2
 8015958:	b99c      	cbnz	r4, 8015982 <_malloc_r+0x56>
 801595a:	4f20      	ldr	r7, [pc, #128]	; (80159dc <_malloc_r+0xb0>)
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	b923      	cbnz	r3, 801596a <_malloc_r+0x3e>
 8015960:	4621      	mov	r1, r4
 8015962:	4630      	mov	r0, r6
 8015964:	f000 f862 	bl	8015a2c <_sbrk_r>
 8015968:	6038      	str	r0, [r7, #0]
 801596a:	4629      	mov	r1, r5
 801596c:	4630      	mov	r0, r6
 801596e:	f000 f85d 	bl	8015a2c <_sbrk_r>
 8015972:	1c43      	adds	r3, r0, #1
 8015974:	d123      	bne.n	80159be <_malloc_r+0x92>
 8015976:	230c      	movs	r3, #12
 8015978:	6033      	str	r3, [r6, #0]
 801597a:	4630      	mov	r0, r6
 801597c:	f000 f86c 	bl	8015a58 <__malloc_unlock>
 8015980:	e7e3      	b.n	801594a <_malloc_r+0x1e>
 8015982:	6823      	ldr	r3, [r4, #0]
 8015984:	1b5b      	subs	r3, r3, r5
 8015986:	d417      	bmi.n	80159b8 <_malloc_r+0x8c>
 8015988:	2b0b      	cmp	r3, #11
 801598a:	d903      	bls.n	8015994 <_malloc_r+0x68>
 801598c:	6023      	str	r3, [r4, #0]
 801598e:	441c      	add	r4, r3
 8015990:	6025      	str	r5, [r4, #0]
 8015992:	e004      	b.n	801599e <_malloc_r+0x72>
 8015994:	6863      	ldr	r3, [r4, #4]
 8015996:	42a2      	cmp	r2, r4
 8015998:	bf0c      	ite	eq
 801599a:	600b      	streq	r3, [r1, #0]
 801599c:	6053      	strne	r3, [r2, #4]
 801599e:	4630      	mov	r0, r6
 80159a0:	f000 f85a 	bl	8015a58 <__malloc_unlock>
 80159a4:	f104 000b 	add.w	r0, r4, #11
 80159a8:	1d23      	adds	r3, r4, #4
 80159aa:	f020 0007 	bic.w	r0, r0, #7
 80159ae:	1ac2      	subs	r2, r0, r3
 80159b0:	d0cc      	beq.n	801594c <_malloc_r+0x20>
 80159b2:	1a1b      	subs	r3, r3, r0
 80159b4:	50a3      	str	r3, [r4, r2]
 80159b6:	e7c9      	b.n	801594c <_malloc_r+0x20>
 80159b8:	4622      	mov	r2, r4
 80159ba:	6864      	ldr	r4, [r4, #4]
 80159bc:	e7cc      	b.n	8015958 <_malloc_r+0x2c>
 80159be:	1cc4      	adds	r4, r0, #3
 80159c0:	f024 0403 	bic.w	r4, r4, #3
 80159c4:	42a0      	cmp	r0, r4
 80159c6:	d0e3      	beq.n	8015990 <_malloc_r+0x64>
 80159c8:	1a21      	subs	r1, r4, r0
 80159ca:	4630      	mov	r0, r6
 80159cc:	f000 f82e 	bl	8015a2c <_sbrk_r>
 80159d0:	3001      	adds	r0, #1
 80159d2:	d1dd      	bne.n	8015990 <_malloc_r+0x64>
 80159d4:	e7cf      	b.n	8015976 <_malloc_r+0x4a>
 80159d6:	bf00      	nop
 80159d8:	20000b64 	.word	0x20000b64
 80159dc:	20000b68 	.word	0x20000b68

080159e0 <_realloc_r>:
 80159e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159e2:	4607      	mov	r7, r0
 80159e4:	4614      	mov	r4, r2
 80159e6:	460e      	mov	r6, r1
 80159e8:	b921      	cbnz	r1, 80159f4 <_realloc_r+0x14>
 80159ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80159ee:	4611      	mov	r1, r2
 80159f0:	f7ff bf9c 	b.w	801592c <_malloc_r>
 80159f4:	b922      	cbnz	r2, 8015a00 <_realloc_r+0x20>
 80159f6:	f7ff ff49 	bl	801588c <_free_r>
 80159fa:	4625      	mov	r5, r4
 80159fc:	4628      	mov	r0, r5
 80159fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a00:	f000 f830 	bl	8015a64 <_malloc_usable_size_r>
 8015a04:	42a0      	cmp	r0, r4
 8015a06:	d20f      	bcs.n	8015a28 <_realloc_r+0x48>
 8015a08:	4621      	mov	r1, r4
 8015a0a:	4638      	mov	r0, r7
 8015a0c:	f7ff ff8e 	bl	801592c <_malloc_r>
 8015a10:	4605      	mov	r5, r0
 8015a12:	2800      	cmp	r0, #0
 8015a14:	d0f2      	beq.n	80159fc <_realloc_r+0x1c>
 8015a16:	4631      	mov	r1, r6
 8015a18:	4622      	mov	r2, r4
 8015a1a:	f7ff fbf7 	bl	801520c <memcpy>
 8015a1e:	4631      	mov	r1, r6
 8015a20:	4638      	mov	r0, r7
 8015a22:	f7ff ff33 	bl	801588c <_free_r>
 8015a26:	e7e9      	b.n	80159fc <_realloc_r+0x1c>
 8015a28:	4635      	mov	r5, r6
 8015a2a:	e7e7      	b.n	80159fc <_realloc_r+0x1c>

08015a2c <_sbrk_r>:
 8015a2c:	b538      	push	{r3, r4, r5, lr}
 8015a2e:	4d06      	ldr	r5, [pc, #24]	; (8015a48 <_sbrk_r+0x1c>)
 8015a30:	2300      	movs	r3, #0
 8015a32:	4604      	mov	r4, r0
 8015a34:	4608      	mov	r0, r1
 8015a36:	602b      	str	r3, [r5, #0]
 8015a38:	f000 f81e 	bl	8015a78 <_sbrk>
 8015a3c:	1c43      	adds	r3, r0, #1
 8015a3e:	d102      	bne.n	8015a46 <_sbrk_r+0x1a>
 8015a40:	682b      	ldr	r3, [r5, #0]
 8015a42:	b103      	cbz	r3, 8015a46 <_sbrk_r+0x1a>
 8015a44:	6023      	str	r3, [r4, #0]
 8015a46:	bd38      	pop	{r3, r4, r5, pc}
 8015a48:	20000ce4 	.word	0x20000ce4

08015a4c <__malloc_lock>:
 8015a4c:	4801      	ldr	r0, [pc, #4]	; (8015a54 <__malloc_lock+0x8>)
 8015a4e:	f000 b811 	b.w	8015a74 <__retarget_lock_acquire_recursive>
 8015a52:	bf00      	nop
 8015a54:	20000cec 	.word	0x20000cec

08015a58 <__malloc_unlock>:
 8015a58:	4801      	ldr	r0, [pc, #4]	; (8015a60 <__malloc_unlock+0x8>)
 8015a5a:	f000 b80c 	b.w	8015a76 <__retarget_lock_release_recursive>
 8015a5e:	bf00      	nop
 8015a60:	20000cec 	.word	0x20000cec

08015a64 <_malloc_usable_size_r>:
 8015a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a68:	1f18      	subs	r0, r3, #4
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	bfbc      	itt	lt
 8015a6e:	580b      	ldrlt	r3, [r1, r0]
 8015a70:	18c0      	addlt	r0, r0, r3
 8015a72:	4770      	bx	lr

08015a74 <__retarget_lock_acquire_recursive>:
 8015a74:	4770      	bx	lr

08015a76 <__retarget_lock_release_recursive>:
 8015a76:	4770      	bx	lr

08015a78 <_sbrk>:
 8015a78:	4b04      	ldr	r3, [pc, #16]	; (8015a8c <_sbrk+0x14>)
 8015a7a:	6819      	ldr	r1, [r3, #0]
 8015a7c:	4602      	mov	r2, r0
 8015a7e:	b909      	cbnz	r1, 8015a84 <_sbrk+0xc>
 8015a80:	4903      	ldr	r1, [pc, #12]	; (8015a90 <_sbrk+0x18>)
 8015a82:	6019      	str	r1, [r3, #0]
 8015a84:	6818      	ldr	r0, [r3, #0]
 8015a86:	4402      	add	r2, r0
 8015a88:	601a      	str	r2, [r3, #0]
 8015a8a:	4770      	bx	lr
 8015a8c:	20000b6c 	.word	0x20000b6c
 8015a90:	20000cf8 	.word	0x20000cf8

08015a94 <_init>:
 8015a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a96:	bf00      	nop
 8015a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a9a:	bc08      	pop	{r3}
 8015a9c:	469e      	mov	lr, r3
 8015a9e:	4770      	bx	lr

08015aa0 <_fini>:
 8015aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aa2:	bf00      	nop
 8015aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015aa6:	bc08      	pop	{r3}
 8015aa8:	469e      	mov	lr, r3
 8015aaa:	4770      	bx	lr
 8015aac:	0000      	movs	r0, r0
	...
